
/tmp/arduino_build_109083/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__ctors_end>
       4:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
       8:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
       c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      10:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      14:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      18:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      1c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      20:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      24:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      28:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      2c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      30:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      34:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      38:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      3c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      40:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      44:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      48:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      4c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      50:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      54:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      58:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      5c:	0c 94 ad 94 	jmp	0x1295a	; 0x1295a <__vector_23>
      60:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      64:	0c 94 21 95 	jmp	0x12a42	; 0x12a42 <__vector_25>
      68:	0c 94 f7 94 	jmp	0x129ee	; 0x129ee <__vector_26>
      6c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      70:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      74:	0c 94 57 95 	jmp	0x12aae	; 0x12aae <__vector_29>
      78:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      7c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      80:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      84:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      88:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      8c:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      90:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      94:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      98:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      9c:	0c 94 d5 96 	jmp	0x12daa	; 0x12daa <__vector_39>
      a0:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      a4:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      a8:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      ac:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      b0:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      b4:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      b8:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      bc:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      c0:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      c4:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>
      c8:	0c 94 7c 22 	jmp	0x44f8	; 0x44f8 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 63 61 	jmp	0xc2c6	; 0xc2c6 <menu_tds_save_period(unsigned char, unsigned char)>
      d0:	0c 94 d7 37 	jmp	0x6fae	; 0x6fae <serial_putc(char, __file*)>
      d4:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
      d8:	0c 94 53 38 	jmp	0x70a6	; 0x70a6 <EthernetClient::connect(IPAddress, unsigned int)>
      dc:	0c 94 07 29 	jmp	0x520e	; 0x520e <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
      e0:	0c 94 35 86 	jmp	0x10c6a	; 0x10c6a <HardwareSerial::write(unsigned char)>
      e4:	0c 94 31 2c 	jmp	0x5862	; 0x5862 <EthernetClient::read()>
      e8:	0c 94 08 5b 	jmp	0xb610	; 0xb610 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)>
      ec:	0c 94 88 5c 	jmp	0xb910	; 0xb910 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
      f0:	0c 94 a8 85 	jmp	0x10b50	; 0x10b50 <TwoWire::read()>
      f4:	0c 94 5b a2 	jmp	0x144b6	; 0x144b6 <EthernetClient::stop()>
      f8:	0c 94 2f a1 	jmp	0x1425e	; 0x1425e <EthernetUDP::peek()>
      fc:	0c 94 93 90 	jmp	0x12126	; 0x12126 <turnOffPWM.lto_priv.233+0x6c>
     100:	0c 94 d7 85 	jmp	0x10bae	; 0x10bae <HardwareSerial::availableForWrite()>
     104:	0c 94 10 2a 	jmp	0x5420	; 0x5420 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     108:	0c 94 a9 5b 	jmp	0xb752	; 0xb752 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     10c:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <MenuHistoryPrevMenu()>
     110:	0c 94 d6 62 	jmp	0xc5ac	; 0xc5ac <click_rtds_add_sensor(unsigned char, unsigned char)>
     114:	0c 94 39 31 	jmp	0x6272	; 0x6272 <display_element_set_string_del_char(unsigned char, unsigned char)>
     118:	0c 94 9d 90 	jmp	0x1213a	; 0x1213a <turnOffPWM.lto_priv.233+0x80>
     11c:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     120:	0c 94 7c 86 	jmp	0x10cf8	; 0x10cf8 <HardwareSerial::flush()>
     124:	0c 94 a3 62 	jmp	0xc546	; 0xc546 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>
     128:	0c 94 ec 37 	jmp	0x6fd8	; 0x6fd8 <EthernetClient::write(unsigned char const*, unsigned int)>
     12c:	0c 94 7b 90 	jmp	0x120f6	; 0x120f6 <turnOffPWM.lto_priv.233+0x3c>
     130:	0c 94 f0 5a 	jmp	0xb5e0	; 0xb5e0 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)>
     134:	0c 94 b0 22 	jmp	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     138:	0c 94 ef 24 	jmp	0x49de	; 0x49de <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     13c:	0c 94 95 a0 	jmp	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
     140:	0c 94 79 58 	jmp	0xb0f2	; 0xb0f2 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>
     144:	0c 94 94 22 	jmp	0x4528	; 0x4528 <EthernetClient::operator!=(EthernetClient const&)>
     148:	0c 94 d5 63 	jmp	0xc7aa	; 0xc7aa <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     14c:	0c 94 78 5b 	jmp	0xb6f0	; 0xb6f0 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>
     150:	0c 94 7e 22 	jmp	0x44fc	; 0x44fc <EthernetClient::write(unsigned char)>
     154:	0c 94 b4 a0 	jmp	0x14168	; 0x14168 <EthernetUDP::read()>
     158:	0c 94 b0 9f 	jmp	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
     15c:	0c 94 52 58 	jmp	0xb0a4	; 0xb0a4 <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)>
     160:	0c 94 1a 29 	jmp	0x5234	; 0x5234 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     164:	0c 94 79 37 	jmp	0x6ef2	; 0x6ef2 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>
     168:	0c 94 30 5b 	jmp	0xb660	; 0xb660 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 e6 85 	jmp	0x10bcc	; 0x10bcc <HardwareSerial::read()>
     170:	0c 94 48 60 	jmp	0xc090	; 0xc090 <display_menu_tds_set_name(unsigned char, unsigned char)>
     174:	0c 94 01 29 	jmp	0x5202	; 0x5202 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     178:	0c 94 82 35 	jmp	0x6b04	; 0x6b04 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     17c:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     180:	0c 94 bd 90 	jmp	0x1217a	; 0x1217a <turnOffPWM.lto_priv.233+0xc0>
     184:	0c 94 c1 90 	jmp	0x12182	; 0x12182 <turnOffPWM.lto_priv.233+0xc8>
     188:	0c 94 91 67 	jmp	0xcf22	; 0xcf22 <click_rtds_subscribe(unsigned char, unsigned char)>
     18c:	0c 94 8f 90 	jmp	0x1211e	; 0x1211e <turnOffPWM.lto_priv.233+0x64>
     190:	0c 94 24 31 	jmp	0x6248	; 0x6248 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
     194:	0c 94 5e 31 	jmp	0x62bc	; 0x62bc <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>
     198:	0c 94 3b 5e 	jmp	0xbc76	; 0xbc76 <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     19c:	0c 94 61 3d 	jmp	0x7ac2	; 0x7ac2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     1a0:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     1a4:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <EthernetUDP::read(char*, unsigned int)>
     1a8:	0c 94 fa 85 	jmp	0x10bf4	; 0x10bf4 <HardwareSerial::peek()>
     1ac:	0c 94 7c 34 	jmp	0x68f8	; 0x68f8 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1b0:	0c 94 89 90 	jmp	0x12112	; 0x12112 <turnOffPWM.lto_priv.233+0x58>
     1b4:	0c 94 81 60 	jmp	0xc102	; 0xc102 <display_menu_tds_set_period(unsigned char, unsigned char)>
     1b8:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 e2 86 	jmp	0x10dc4	; 0x10dc4 <Print::write(unsigned char const*, unsigned int)>
     1c0:	0c 94 57 62 	jmp	0xc4ae	; 0xc4ae <printf_via_mqtt(char, __file*)>
     1c4:	0c 94 67 57 	jmp	0xaece	; 0xaece <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)>
     1c8:	0c 94 d6 85 	jmp	0x10bac	; 0x10bac <TwoWire::onReceiveService(unsigned char*, int)>
     1cc:	0c 94 07 2c 	jmp	0x580e	; 0x580e <EthernetClient::peek()>
     1d0:	0c 94 02 2a 	jmp	0x5404	; 0x5404 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     1d4:	0c 94 de a0 	jmp	0x141bc	; 0x141bc <EthernetUDP::parsePacket()>
     1d8:	0c 94 ef a1 	jmp	0x143de	; 0x143de <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     1dc:	0c 94 a1 90 	jmp	0x12142	; 0x12142 <turnOffPWM.lto_priv.233+0x88>
     1e0:	0c 94 27 29 	jmp	0x524e	; 0x524e <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     1e4:	0c 94 ce 85 	jmp	0x10b9c	; 0x10b9c <TwoWire::available()>
     1e8:	0c 94 72 3b 	jmp	0x76e4	; 0x76e4 <EthernetClient::connect(char const*, unsigned int)>
     1ec:	0c 94 07 a4 	jmp	0x1480e	; 0x1480e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082>
     1f0:	0c 94 99 61 	jmp	0xc332	; 0xc332 <menu_tds_save_offset(unsigned char, unsigned char)>
     1f4:	0c 94 0c 88 	jmp	0x11018	; 0x11018 <EthernetClient::flush()>
     1f8:	0c 94 3a 8a 	jmp	0x11474	; 0x11474 <EthernetUDP::beginPacket(char const*, unsigned int)>
     1fc:	0c 94 d5 85 	jmp	0x10baa	; 0x10baa <TwoWire::onRequestService()>
     200:	0c 94 39 57 	jmp	0xae72	; 0xae72 <helper_thermostat_set_pid_i(unsigned char, float)>
     204:	0c 94 17 65 	jmp	0xca2e	; 0xca2e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     208:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
     20c:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <returnnullfceargs(unsigned int, unsigned int)>
     210:	0c 94 f9 87 	jmp	0x10ff2	; 0x10ff2 <EthernetClient::operator==(EthernetClient const&)>
     214:	0c 94 6c 5d 	jmp	0xbad8	; 0xbad8 <tds_associate(unsigned char)>
     218:	0c 94 d8 29 	jmp	0x53b0	; 0x53b0 <click_keyboard_type(unsigned char, unsigned char)>
     21c:	0c 94 c6 a1 	jmp	0x1438c	; 0x1438c <EthernetUDP::endPacket()>
     220:	0c 94 e3 87 	jmp	0x10fc6	; 0x10fc6 <EthernetUDP::remotePort()>
     224:	0c 94 56 36 	jmp	0x6cac	; 0x6cac <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     228:	0c 94 ae 37 	jmp	0x6f5c	; 0x6f5c <dialog_set_variable_button_click(unsigned char, unsigned char, unsigned char)>
     22c:	0c 94 fc 34 	jmp	0x69f8	; 0x69f8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     230:	0c 94 77 31 	jmp	0x62ee	; 0x62ee <click_keyboard_number(unsigned char, unsigned char, unsigned char)>
     234:	0c 94 38 a2 	jmp	0x14470	; 0x14470 <EthernetClient::connected()>
     238:	0c 94 af 90 	jmp	0x1215e	; 0x1215e <turnOffPWM.lto_priv.233+0xa4>
     23c:	0c 94 41 87 	jmp	0x10e82	; 0x10e82 <TwoWire::peek()>
     240:	0c 94 ab 90 	jmp	0x12156	; 0x12156 <turnOffPWM.lto_priv.233+0x9c>
     244:	0c 94 91 57 	jmp	0xaf22	; 0xaf22 <helper_thermostat_set_mezni(unsigned char, float)>
     248:	0c 94 e7 87 	jmp	0x10fce	; 0x10fce <EthernetUDP::remoteIP()>
     24c:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <dialog_set_string_button_click(unsigned char, unsigned char, unsigned char)>
     250:	0c 94 cf 29 	jmp	0x539e	; 0x539e <menu_redraw_time05s(unsigned char, unsigned char)>
     254:	0c 94 e7 5b 	jmp	0xb7ce	; 0xb7ce <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     258:	0c 94 85 90 	jmp	0x1210a	; 0x1210a <turnOffPWM.lto_priv.233+0x50>
     25c:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <nullfce()>
     260:	0c 94 f7 87 	jmp	0x10fee	; 0x10fee <UDP::beginMulticast(IPAddress, unsigned int)>
     264:	0c 94 8b a1 	jmp	0x14316	; 0x14316 <EthernetUDP::begin(unsigned int)>
     268:	0c 94 ca 37 	jmp	0x6f94	; 0x6f94 <click_dialog_button_yes(unsigned char, unsigned char)>
     26c:	0c 94 bd 29 	jmp	0x537a	; 0x537a <menu_redraw_update_temp(unsigned char, unsigned char)>
     270:	0c 94 46 5e 	jmp	0xbc8c	; 0xbc8c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     274:	0c 94 c9 5e 	jmp	0xbd92	; 0xbd92 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     278:	0c 94 b7 87 	jmp	0x10f6e	; 0x10f6e <EthernetUDP::flush()>
     27c:	0c 94 b9 a1 	jmp	0x14372	; 0x14372 <EthernetUDP::stop()>
     280:	0c 94 01 64 	jmp	0xc802	; 0xc802 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     284:	0c 94 7d 87 	jmp	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
     288:	0c 94 ab 5c 	jmp	0xb956	; 0xb956 <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>
     28c:	0c 94 70 58 	jmp	0xb0e0	; 0xb0e0 <term_ring_do_activate(unsigned char, unsigned char, unsigned char)>
     290:	0c 94 6f 37 	jmp	0x6ede	; 0x6ede <button_click_term_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>
     294:	0c 94 04 88 	jmp	0x11008	; 0x11008 <EthernetClient::operator bool()>
     298:	0c 94 8a 32 	jmp	0x6514	; 0x6514 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     29c:	0c 94 d3 60 	jmp	0xc1a6	; 0xc1a6 <display_menu_tds_set_offset(unsigned char, unsigned char)>
     2a0:	0c 94 61 67 	jmp	0xcec2	; 0xcec2 <menu_rtds_create_name(unsigned char, unsigned char)>
     2a4:	0c 94 99 90 	jmp	0x12132	; 0x12132 <turnOffPWM.lto_priv.233+0x78>
     2a8:	0c 94 58 5a 	jmp	0xb4b0	; 0xb4b0 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     2ac:	0c 94 ac 22 	jmp	0x4558	; 0x4558 <LCDWIKI_KBV::Get_Width() const>
     2b0:	0c 94 f6 66 	jmp	0xcdec	; 0xcdec <menu_rtds_update_name(unsigned char, unsigned char)>
     2b4:	0c 94 81 90 	jmp	0x12102	; 0x12102 <turnOffPWM.lto_priv.233+0x48>
     2b8:	0c 94 9e 22 	jmp	0x453c	; 0x453c <Print::availableForWrite()>
     2bc:	0c 94 11 5a 	jmp	0xb422	; 0xb422 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     2c0:	0c 94 85 29 	jmp	0x530a	; 0x530a <display_function_vertical_slider_inc(unsigned char, unsigned char)>
     2c4:	0c 94 94 67 	jmp	0xcf28	; 0xcf28 <mqtt_callback(char*, unsigned char*, unsigned int)>
     2c8:	0c 94 48 63 	jmp	0xc690	; 0xc690 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     2cc:	0c 94 14 2a 	jmp	0x5428	; 0x5428 <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)>
     2d0:	0c 94 b5 90 	jmp	0x1216a	; 0x1216a <turnOffPWM.lto_priv.233+0xb0>
     2d4:	0c 94 96 29 	jmp	0x532c	; 0x532c <a2d_complete(unsigned char, unsigned int)>
     2d8:	0c 94 be 89 	jmp	0x1137c	; 0x1137c <IPAddress::printTo(Print&) const>
     2dc:	0c 94 d3 59 	jmp	0xb3a6	; 0xb3a6 <button_click_set_show_default_temp(unsigned char, unsigned char, unsigned char)>
     2e0:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <LCDWIKI_KBV::Get_Height() const>
     2e4:	0c 94 a7 90 	jmp	0x1214e	; 0x1214e <turnOffPWM.lto_priv.233+0x94>
     2e8:	0c 94 c0 90 	jmp	0x12180	; 0x12180 <turnOffPWM.lto_priv.233+0xc6>
     2ec:	0c 94 c9 87 	jmp	0x10f92	; 0x10f92 <EthernetUDP::write(unsigned char)>
     2f0:	0c 94 2e 5a 	jmp	0xb45c	; 0xb45c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     2f4:	0c 94 4c 57 	jmp	0xae98	; 0xae98 <helper_thermostat_set_pid_p(unsigned char, float)>
     2f8:	0c 94 de 5f 	jmp	0xbfbc	; 0xbfbc <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2fc:	0c 94 df 87 	jmp	0x10fbe	; 0x10fbe <EthernetUDP::available()>
     300:	0c 94 65 2c 	jmp	0x58ca	; 0x58ca <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>
     304:	0c 94 ee 2b 	jmp	0x57dc	; 0x57dc <display_enable_show(unsigned char, unsigned char)>
     308:	0c 94 b9 90 	jmp	0x12172	; 0x12172 <turnOffPWM.lto_priv.233+0xb8>
     30c:	0c 94 40 87 	jmp	0x10e80	; 0x10e80 <TwoWire::flush()>
     310:	0c 94 36 5c 	jmp	0xb86c	; 0xb86c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     314:	0c 94 0d 29 	jmp	0x521a	; 0x521a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     318:	0c 94 26 57 	jmp	0xae4c	; 0xae4c <helper_thermostat_set_pid_d(unsigned char, float)>
     31c:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     320:	0c 94 4b 2c 	jmp	0x5896	; 0x5896 <EthernetClient::available()>
     324:	0c 94 12 2a 	jmp	0x5424	; 0x5424 <get_function_budik_enabled(unsigned char)>
     328:	0c 94 1c 5b 	jmp	0xb638	; 0xb638 <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)>
     32c:	0c 94 08 86 	jmp	0x10c10	; 0x10c10 <HardwareSerial::available()>
     330:	0c 94 04 32 	jmp	0x6408	; 0x6408 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     334:	0c 94 74 37 	jmp	0x6ee8	; 0x6ee8 <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>
     338:	0c 94 54 2a 	jmp	0x54a8	; 0x54a8 <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)>
     33c:	0c 94 31 85 	jmp	0x10a62	; 0x10a62 <display_menu_rtds_update_name(unsigned char, unsigned char)>
     340:	0c 94 50 87 	jmp	0x10ea0	; 0x10ea0 <TwoWire::write(unsigned char const*, unsigned int)>
     344:	0c 94 79 29 	jmp	0x52f2	; 0x52f2 <display_function_vertical_slider_dec(unsigned char, unsigned char)>
     348:	0c 94 19 57 	jmp	0xae32	; 0xae32 <helper_thermostat_set_pid_time(unsigned char, float, unsigned char)>
     34c:	0c 94 aa 5a 	jmp	0xb554	; 0xb554 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     350:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     358:	0c 94 2d 2c 	jmp	0x585a	; 0x585a <EthernetClient::read(unsigned char*, unsigned int)>
     35c:	0c 94 30 61 	jmp	0xc260	; 0xc260 <menu_tds_save_name(unsigned char, unsigned char)>
     360:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     364:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     368:	0c 94 c6 29 	jmp	0x538c	; 0x538c <menu_redraw_change_term_mode(unsigned char, unsigned char)>

0000036c <__trampolines_end>:
__trampolines_end():
     36c:	4e 41       	sbci	r20, 0x1E	; 30
     36e:	4e 49       	Address 0x000000000000036e is out of bounds.
.word	0xffff	; ????

0000036f <pstr_inity>:
     36f:	49 4e 49 54 59                                      INITY

00000374 <pstr_inf>:
     374:	49 4e 46                                            INF

00000377 <pwr_m10>:
     377:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     387:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000038f <pwr_p10>:
     38f:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     39f:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3af:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3bf:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3cf:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     3df:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3ef:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     3ff:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     40f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     41f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     42f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     43f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     44f:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     45f:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     46f:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     47f:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     48f:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     49f:	3d 27                                               ='

000004a1 <char_T>:
     4a1:	54 00                                               T.

000004a3 <char_D>:
     4a3:	44 00                                               D.

000004a5 <char_I>:
     4a5:	49 00                                               I.

000004a7 <char_P>:
     4a7:	50 00                                               P.

000004a9 <text_select_term_default_ring>:
     4a9:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     4b9:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

000004c4 <text_select_term_mode>:
     4c4:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     4d4:	61 74 6f 72 75 00                                   atoru.

000004da <text_nastavit_pid>:
     4da:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000004e4 <text_assocoivat_output>:
     4e4:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000004f4 <text_assocoivat>:
     4f4:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

00000503 <ring_text_setup>:
     503:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

0000050d <nastaveni_rtds_subscribe>:
     50d:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

0000051d <text_rtds_novy>:
     51d:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     52d:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000538 <text_button_mode_cool>:
     538:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

00000541 <text_button_mode_heat>:
     541:	54 6f 70 65 6e 69 00                                Topeni.

00000548 <nastaveni_ring_text>:
     548:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     558:	74 6f 72 75 00                                      toru.

0000055d <text_no>:
     55d:	4e 65 00                                            Ne.

00000560 <text_yes>:
     560:	41 6e 6f 00                                         Ano.

00000564 <text_special_case>:
     564:	40 00                                               @.

00000566 <text_lower_case>:
     566:	61 00                                               a.

00000568 <text_upper_case>:
     568:	41 00                                               A.

0000056a <text_delete_char>:
     56a:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00000574 <text_klavesnice>:
     574:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000057f <text_zrusit>:
     57f:	5a 72 75 73 69 74 00                                Zrusit.

00000586 <text_ulozit>:
     586:	55 6c 6f 7a 69 74 00                                Ulozit.

0000058d <text_upozorneni>:
     58d:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00000598 <nastaveni_tds_offset>:
     598:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000005a8 <nastaveni_name_sensor>:
     5a8:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000005b7 <nastaveni_delete_sensor>:
     5b7:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000005c5 <text_tds_sensors>:
     5c5:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     5d5:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000005e0 <budik_text>:
     5e0:	42 75 64 69 6b 00                                   Budik.

000005e6 <text_select_default_temp>:
     5e6:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     5f6:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

00000600 <button_zpet>:
     600:	5a 70 65 74 00                                      Zpet.

00000605 <nastaveni_default>:
     605:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000615 <nastaveni_nrf>:
     615:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00000623 <nastaveni_site>:
     623:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00000632 <char_NULL>:
	...

00000633 <nastaveni_text>:
     633:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

0000063d <funkce_text>:
     63d:	46 75 6e 6b 63 65 00                                Funkce.

00000644 <regulator_text>:
     644:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

0000064e <Menu_All>:
     64e:	06 06 06 8e 3c 44 06 22 01 96 00 aa 00 28 00 02     ....<D.".....(..
     65e:	05 5c 37 08 ee 2b 3d 06 22 01 5a 00 aa 00 28 00     .\7..+=.".Z...(.
     66e:	02 01 5c 37 08 ee 2b 33 06 22 01 1e 00 aa 00 28     ..\7..+3.".....(
     67e:	00 02 02 5c 37 08 ee 2b 00 00 00 00 00 00 00 00     ...\7..+........
	...
     6fa:	00 00 00 4c 3e 0a 00 dc 00 52 00 3c 00 03 9a d6     ...L>....R.<....
     70a:	ff ff 00 08 5b 1c 5b 0a ee 2b 32 3e 64 00 dc 00     ....[.[..+2>d...
     71a:	52 00 3c 00 03 00 f8 ff ff 01 08 5b 1c 5b 0a ee     R.<........[.[..
     72a:	2b 18 3e be 00 dc 00 52 00 3c 00 03 1f 00 ff ff     +.>....R.<......
     73a:	07 08 5b 1c 5b 0a ee 2b fc 3d 18 01 dc 00 52 00     ..[.[..+.=....R.
     74a:	3c 00 03 e0 ff ff ff 02 08 5b 1c 5b 0a ee 2b e4     <........[.[..+.
     75a:	3d 72 01 dc 00 52 00 3c 00 03 e0 07 ff ff 08 08     =r...R.<........
     76a:	5b 1c 5b 0a ee 2b 0a 00 82 00 00 17 65 00 00 00     [.[..+......e...
     77a:	00 0c f2 2b ee 2b 32 06 18 01 22 01 00 56 36 00     ...+.+2..."..V6.
     78a:	00 00 00 0c f2 2b ee 2b 32 06 0a 00 1e 00 00 04     .....+.+2.......
     79a:	32 00 00 00 00 09 f2 2b ee 2b 32 06 00 00 00 00     2......+.+2.....
	...
     90e:	03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     91e:	01 01 ff ff 08 cf 29 c6 29 bd 29 f0 2b 33 06 23     ......).).).+3.#
     92e:	06 0a 00 28 00 be 00 28 00 02 00 f2 2b 08 ee 2b     ...(...(....+..+
     93e:	15 06 0a 00 64 00 be 00 28 00 02 00 f2 2b 08 ee     ....d...(....+..
     94e:	2b 05 06 0a 00 a0 00 be 00 28 00 02 00 f2 2b 08     +........(....+.
     95e:	ee 2b 00 06 0a 00 dc 00 be 00 28 00 02 00 9b 37     .+........(....7
     96e:	08 ee 2b 56 3d 18 01 64 00 be 00 28 00 02 06 5c     ..+V=..d...(...\
     97e:	37 08 ee 2b 65 3d 18 01 28 00 be 00 28 00 02 03     7..+e=..(...(...
     98e:	5c 37 08 ee 2b e6 05 18 01 a0 00 be 00 28 00 01     \7..+........(..
     99e:	08 5c 37 08 ee 2b 00 00 00 00 00 00 00 00 00 00     .\7..+..........
	...
     a4a:	18 01 22 01 00 56 36 00 00 00 00 0c f2 2b ee 2b     .."..V6......+.+
     a5a:	32 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
     be6:	00 00 07 00 01 00 00 00 00 00 02 00 00 00 00 e0     ................
     bf6:	01 40 01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b 3d     .@......+.+.+.+=
     c06:	06 00 06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08     .........(....7.
     c16:	ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
     d22:	00 00 18 01 22 01 00 56 36 00 00 00 00 0c f2 2b     ...."..V6......+
     d32:	ee 2b 32 06 00 00 00 00 00 00 00 00 00 00 00 00     .+2.............
	...
     d6a:	00 00 e0 05 0a 00 28 00 be 00 78 00 02 00 00 00     ......(...x.....
     d7a:	00 01 f2 2b 12 2a 65 2c 08 00 00 00 00 00 00 00     ...+.*e,........
	...
     ec2:	01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01 40     ...............@
     ed2:	01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b 65 3d 00     ......+.+.+.+e=.
     ee2:	06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b     .......(....7..+
	...
     ffe:	18 01 22 01 00 56 36 00 00 00 00 0c f2 2b ee 2b     .."..V6......+.+
    100e:	32 06 9a 01 48 00 00 7c 34 28 00 7e 00 08 f2 2b     2...H..|4(.~...+
    101e:	ee 2b 32 06 dc 00 14 00 00 8a 32 f0 00 f0 00 08     .+2.......2.....
    102e:	f2 2b ee 2b 32 06 00 00 00 00 00 00 00 00 00 00     .+.+2...........
	...
    108a:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
    109a:	01 46 5e 79 37 1a 29 08 00 00 00 00 00 00 00 00     .F^y7.).........
	...
    10b6:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 79 29     ...+....(.(...y)
    10c6:	08 ee 2b 2d 9a 01 c8 00 28 00 28 00 02 00 85 29     ..+-....(.(....)
    10d6:	08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    119a:	00 00 01 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
    11aa:	01 40 01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b c5     .@......+.+.+.+.
    11ba:	05 00 06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08     .........(....7.
    11ca:	ee 2b b7 05 18 01 be 00 be 00 28 00 02 00 3b 5e     .+........(...;^
    11da:	08 ee 2b dc 3c 18 01 8c 00 be 00 28 00 02 00 81     ..+.<......(....
    11ea:	60 08 ee 2b a8 05 18 01 5a 00 be 00 28 00 02 00     `..+....Z...(...
    11fa:	48 60 08 ee 2b 98 05 18 01 28 00 be 00 28 00 02     H`..+....(...(..
    120a:	00 d3 60 08 ee 2b 00 00 00 00 00 00 00 00 00 00     ..`..+..........
	...
    12d6:	00 00 18 01 22 01 00 56 36 00 00 00 00 0c f2 2b     ...."..V6......+
    12e6:	ee 2b 32 06 14 00 14 00 00 c9 5e 00 00 00 00 08     .+2.......^.....
    12f6:	f2 2b ee 2b 32 06 14 00 14 00 00 de 5f 00 00 00     .+.+2......._...
    1306:	00 0c f2 2b ee 2b 32 06 00 00 00 00 00 00 00 00     ...+.+2.........
	...
    1476:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    1486:	01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b 8d 05 86     ......+.+.+.+...
    1496:	05 0a 00 c8 00 82 00 28 00 02 00 ae 37 08 ee 2b     .......(....7..+
    14a6:	7f 05 96 00 c8 00 82 00 28 00 02 00 9b 37 08 ee     ........(....7..
    14b6:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    15b2:	64 00 2d 00 00 82 35 b4 00 28 00 08 f2 2b ee 2b     d.-...5..(...+.+
    15c2:	32 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    166a:	00 00 00 2b 3c 00 2d 00 28 00 28 00 02 00 14 2a     ...+<.-.(.(....*
    167a:	08 ee 2b 2d 18 01 2d 00 28 00 28 00 02 00 54 2a     ..+-..-.(.(...T*
    168a:	08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    174e:	00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc     ..........f.....
    175e:	01 04 01 06 e0 ff 08 f0 2b f0 2b f0 2b f0 2b 74     ........+.+.+.+t
    176e:	05 86 05 0a 00 c8 00 82 00 28 00 02 00 a5 37 08     .........(....7.
    177e:	ee 2b 7f 05 96 00 c8 00 82 00 28 00 02 00 9b 37     .+........(....7
    178e:	08 ee 2b 6a 05 2c 01 c8 00 82 00 28 00 02 00 39     ..+j.,.....(...9
    179e:	31 08 ee 2b 68 05 40 01 23 00 28 00 28 00 02 00     1..+h.@.#.(.(...
    17ae:	d8 29 08 ee 2b 66 05 6d 01 23 00 28 00 28 00 02     .)..+f.m.#.(.(..
    17be:	01 d8 29 08 ee 2b 64 05 9a 01 23 00 28 00 28 00     ..)..+d...#.(.(.
    17ce:	02 02 d8 29 08 ee 2b 00 00 00 00 00 00 00 00 00     ...)..+.........
	...
    188a:	00 00 0a 00 23 00 00 fc 34 2c 01 28 00 08 f2 2b     ....#...4,.(...+
    189a:	ee 2b 32 06 00 00 00 00 00 00 00 00 00 00 00 00     .+2.............
	...
    19c6:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    19d6:	03 e2 29 5e 31 db 29 08 00 00 00 00 00 00 00 00     ..)^1.).........
	...
    1a2a:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    1a3a:	01 06 e0 ff 08 f0 2b f0 2b f0 2b f0 2b 8d 05 86     ......+.+.+.+...
    1a4a:	05 0a 00 c8 00 82 00 28 00 02 00 a5 37 08 ee 2b     .......(....7..+
    1a5a:	7f 05 96 00 c8 00 82 00 28 00 02 00 9b 37 08 ee     ........(....7..
    1a6a:	2b 6a 05 2c 01 c8 00 82 00 28 00 02 00 39 31 08     +j.,.....(...91.
    1a7a:	ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    1b66:	0a 00 23 00 00 fc 34 2c 01 28 00 08 f2 2b ee 2b     ..#...4,.(...+.+
    1b76:	32 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    1c9e:	00 00 00 0a 00 3c 00 1e 00 1e 00 02 28 28 02 09     .....<......((..
    1cae:	00 00 02 02 2a 77 31 10 2a 08 00 00 00 00 00 00     ....*w1.*.......
	...
    1d02:	00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc     ..........e.....
    1d12:	01 04 01 06 e0 ff 08 f0 2b f0 2b f0 2b f0 2b 8d     ........+.+.+.+.
    1d22:	05 60 05 1e 00 3c 00 64 00 28 00 02 00 ca 37 08     .`...<.d.(....7.
    1d32:	ee 2b 5d 05 fa 00 3c 00 64 00 28 00 02 00 9b 37     .+]...<.d.(....7
    1d42:	08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    1e3e:	00 00 14 00 23 00 00 24 31 00 00 00 00 08 f2 2b     ....#..$1......+
    1e4e:	ee 2b 32 06 00 00 00 00 00 00 00 00 00 00 00 00     .+2.............
	...
    1fde:	02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01 8c     ........d2.2.|..
    1fee:	00 06 e0 ff 08 f0 2b f0 2b f0 2b f0 2b 44 06 00     ......+.+.+.+D..
    1ffe:	06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b     .......(....7..+
    200e:	48 05 0a 00 a0 00 be 00 28 00 01 09 5c 37 08 ee     H.......(...\7..
    201e:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    20a6:	00 41 05 f0 00 5a 00 64 00 28 00 01 00 f8 ff ff     .A...Z.d.(......
    20b6:	03 f0 5a 88 5c 0a 1e 5a 38 05 68 01 5a 00 64 00     ..Z.\..Z8.h.Z.d.
    20c6:	28 00 01 1f 00 ff ff 05 f0 5a 88 5c 0a 1e 5a 00     (........Z.\..Z.
	...
    211a:	18 01 22 01 00 56 36 00 00 00 00 0c f2 2b ee 2b     .."..V6......+.+
    212a:	32 06 8c 00 05 00 00 36 5c 00 00 00 00 08 f2 2b     2......6\......+
    213a:	ee 2b 32 06 18 01 28 00 00 82 35 8c 00 28 00 08     .+2...(...5..(..
    214a:	f2 2b 1e 5a 32 06 00 00 00 00 00 00 00 00 00 00     .+.Z2...........
	...
    21a6:	00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01 00     ...(...(........
    21b6:	01 a9 5b 74 37 bc 29 08 0a 00 64 00 be 00 28 00     ..[t7.)...d...(.
    21c6:	01 01 01 00 01 01 00 01 58 5a 6f 37 bc 29 08 2b     ........XZo7.).+
    21d6:	a4 01 28 00 28 00 28 00 02 00 14 2a 08 1e 5a 2d     ..(.(.(....*..Z-
    21e6:	f0 00 28 00 28 00 28 00 02 00 54 2a 08 1e 5a 00     ..(.(.(...T*..Z.
	...
    22b6:	00 00 02 02 03 00 02 02 00 00 05 00 00 00 00 e0     ................
    22c6:	01 40 01 01 ff ff 08 f0 2b f0 2b f0 2b aa 5a 56     .@......+.+.+.ZV
    22d6:	3d 00 06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08     =........(....7.
    22e6:	ee 2b 1d 05 0a 00 28 00 be 00 28 00 01 00 d6 62     .+....(...(....b
    22f6:	08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    23f2:	00 00 dc 00 14 00 00 8a 32 f0 00 f0 00 08 f2 2b     ........2......+
    2402:	ee 2b 32 06 18 01 22 01 00 56 36 00 00 00 00 0c     .+2..."..V6.....
    2412:	f2 2b ee 2b 32 06 9a 01 48 00 01 7c 34 28 00 7e     .+.+2...H..|4(.~
    2422:	00 08 f2 2b ee 2b 32 06 00 00 00 00 00 00 00 00     ...+.+2.........
	...
    247e:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
    248e:	01 01 04 d5 63 a3 62 27 29 08 00 00 00 00 00 00     ....c.b').......
	...
    24ae:	00 2b 9a 01 1e 00 28 00 28 00 02 01 79 29 08 ee     .+....(.(...y)..
    24be:	2b 2d 9a 01 c8 00 28 00 28 00 02 01 85 29 08 ee     +-....(.(....)..
    24ce:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    2592:	02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01 40     ...............@
    25a2:	01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b 56 3d 00     ......+.+.+.+V=.
    25b2:	06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b     .......(....7..+
    25c2:	b7 05 18 01 5a 00 be 00 28 00 02 00 11 5a 08 ee     ....Z...(....Z..
    25d2:	2b a8 05 18 01 28 00 be 00 28 00 02 00 31 85 08     +....(...(...1..
    25e2:	ee 2b 0d 05 18 01 8c 00 be 00 28 00 02 00 91 67     .+........(....g
    25f2:	08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    26ce:	14 00 14 00 00 01 64 00 00 00 00 0c f2 2b ee 2b     ......d......+.+
    26de:	32 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    286a:	00 00 04 00 01 00 00 00 00 00 07 00 00 00 00 e0     ................
    287a:	01 40 01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b e6     .@......+.+.+.+.
    288a:	05 00 06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08     .........(....7.
    289a:	ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    29a6:	00 00 18 01 22 01 00 56 36 00 00 00 00 0c f2 2b     ...."..V6......+
    29b6:	ee 2b 32 06 9a 01 48 00 02 7c 34 28 00 56 00 08     .+2...H..|4(.V..
    29c6:	f2 2b ee 2b 32 06 05 00 1e 00 00 8a 32 cc 01 b4     .+.+2.......2...
    29d6:	00 08 f2 2b ee 2b 32 06 00 00 00 00 00 00 00 00     ...+.+2.........
	...
    2a62:	00 2b 9a 01 1e 00 28 00 28 00 02 02 79 29 08 ee     .+....(.(...y)..
    2a72:	2b 2d 9a 01 a0 00 28 00 28 00 02 02 85 29 08 ee     +-....(.(....)..
    2a82:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    2b26:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    2b36:	82 50 02 03 02 02 00 48 63 d3 59 0d 29 07 29 08     .P.....Hc.Y.).).
    2b46:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    2b56:	01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b 03 05 00     ......+.+.+.+...
    2b66:	06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b     .......(....7..+
    2b76:	a8 05 18 01 28 00 be 00 28 00 02 00 78 5b 08 ee     ....(...(...x[..
    2b86:	2b f4 04 18 01 64 00 be 00 28 00 02 0b 5c 37 08     +....d...(...\7.
    2b96:	ee 2b e4 04 18 01 a0 00 be 00 28 00 01 00 f2 2b     .+........(....+
    2ba6:	08 ee 2b da 04 18 01 dc 00 be 00 28 00 02 0c 5c     ..+........(...\
    2bb6:	37 08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00     7..+............
	...
    2c82:	18 01 22 01 00 56 36 00 00 00 00 0c f2 2b ee 2b     .."..V6......+.+
    2c92:	32 06 8c 00 05 00 00 36 5c 00 00 00 00 08 f2 2b     2......6\......+
    2ca2:	ee 2b 32 06 00 00 00 00 00 00 00 00 00 00 00 00     .+2.............
	...
    2e1e:	00 00 05 00 02 00 00 00 00 00 09 00 00 00 00 e0     ................
    2e2e:	01 40 01 01 ff ff 08 f0 2b f0 2b f0 2b f0 2b c4     .@......+.+.+.+.
    2e3e:	04 00 06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08     .........(....7.
    2e4e:	ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .+..............
	...
    30da:	00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff ff     ....(...(.......
    30ea:	01 32 00 05 01 ff 05 71 2c 67 57 bc 29 2e 5a 08     .2.....q,gW.).Z.
    30fa:	01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01 2c     ........h......,
    310a:	01 06 e0 ff 08 f0 2b f0 2b f0 2b f0 2b a9 04 00     ......+.+.+.+...
    311a:	06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b     .......(....7..+
	...
    33b6:	0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82 3c     ..(.x.2........<
    33c6:	02 03 03 ff 05 e7 5b 30 5b bc 29 01 29 08 01 00     ......[0[.).)...
    33d6:	00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01 06     .............,..
    33e6:	e0 ff 08 f0 2b f0 2b f0 2b f0 2b f4 04 00 06 0a     ....+.+.+.+.....
    33f6:	00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b 00 00     .....(....7..+..
	...
    350e:	00 00 9a 01 52 00 03 7c 34 28 00 56 00 08 f2 2b     ....R..|4(.V...+
    351e:	ee 2b 32 06 00 00 00 00 00 00 00 00 00 00 00 00     .+2.............
	...
    35ca:	00 2b 9a 01 28 00 28 00 28 00 02 03 79 29 08 ee     .+..(.(.(...y)..
    35da:	2b 2d 9a 01 aa 00 28 00 28 00 02 03 85 29 08 ee     +-....(.(....)..
    35ea:	2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +...............
	...
    368e:	00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff ff     ....(.x.2.......
    369e:	82 3c 02 03 03 03 01 48 63 79 58 0d 29 ab 5c 08     .<.....HcyX.).\.
    36ae:	01 00 01 00 00 02 00 01 0b 0a 00 0a 00 cc 01 2c     ...............,
    36be:	01 06 e0 ff 08 f0 2b f0 2b f0 2b f0 2b aa 3b 00     ......+.+.+.+.;.
    36ce:	06 0a 00 dc 00 be 00 28 00 02 00 9b 37 08 ee 2b     .......(....7..+
	...
    37ea:	0e 01 28 00 00 82 35 8c 00 28 00 08 f2 2b ee 2b     ..(...5..(...+.+
    37fa:	a7 04 0e 01 5a 00 01 82 35 8c 00 28 00 08 f2 2b     ....Z...5..(...+
    380a:	ee 2b a5 04 0e 01 8c 00 02 82 35 8c 00 28 00 08     .+........5..(..
    381a:	f2 2b ee 2b a3 04 0e 01 be 00 03 82 35 8c 00 28     .+.+........5..(
    382a:	00 08 f2 2b ee 2b a1 04 00 00 00 00 00 00 00 00     ...+.+..........
	...
    38a2:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 00 14 2a     ...+..(.(.(....*
    38b2:	08 ee 2b 2d e6 00 28 00 28 00 28 00 02 00 54 2a     ..+-..(.(.(...T*
    38c2:	08 ee 2b 2b 9a 01 5a 00 28 00 28 00 02 01 14 2a     ..++..Z.(.(....*
    38d2:	08 ee 2b 2d e6 00 5a 00 28 00 28 00 02 01 54 2a     ..+-..Z.(.(...T*
    38e2:	08 ee 2b 2b 9a 01 8c 00 28 00 28 00 02 02 14 2a     ..++....(.(....*
    38f2:	08 ee 2b 2d e6 00 8c 00 28 00 28 00 02 02 54 2a     ..+-....(.(...T*
    3902:	08 ee 2b 2b 9a 01 be 00 28 00 28 00 02 03 14 2a     ..++....(.(....*
    3912:	08 ee 2b 2d e6 00 be 00 28 00 28 00 02 03 54 2a     ..+-....(.(...T*
    3922:	08 ee 2b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..+.............
	...
    3986:	00 00 01 00 04 00 00 08 00 00 0c 0a 00 0a 00 cc     ................
    3996:	01 2c 01 06 e0 ff 08 f0 2b f0 2b f0 2b 94 2a        .,......+.+.+.*

000039a5 <keyboad_number_char_special>:
    39a5:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    39b5:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

000039bf <keyboad_number_char_lower>:
    39bf:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    39cf:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

000039d9 <keyboad_number_char_upper>:
    39d9:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    39e9:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

000039f3 <network_name>:
    39f3:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00003a00 <network_mqtt_key>:
    3a00:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00003a11 <network_mqtt_user>:
    3a11:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    3a21:	72 00                                               r.

00003a23 <network_mqtt_port>:
    3a23:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    3a33:	74 00                                               t.

00003a35 <network_mqtt_host>:
    3a35:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    3a45:	74 00                                               t.

00003a47 <network_ntp>:
    3a47:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00003a53 <network_dns>:
    3a53:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00003a5f <network_gw>:
    3a5f:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00003a6a <network_netmask>:
    3a6a:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00003a7a <network_mac>:
    3a7a:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00003a86 <global_time_offset>:
    3a86:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    3a96:	6f 66 66 73 65 74 00                                offset.

00003a9d <global_time_ntp>:
    3a9d:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00003aad <global_time_set>:
    3aad:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00003abd <termbig_header_out>:
    3abd:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

00003acb <termbig_subscribe>:
    3acb:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    3adb:	73 63 72 69 62 65 00                                scribe.

00003ae2 <thermctl_subscribe>:
    3ae2:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    3af2:	62 73 63 72 69 62 65 00                             bscribe.

00003afa <lightctl_header_out>:
    3afa:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00003b09 <thermctl_header_in>:
    3b09:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00003b17 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    3b17:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    3b27:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    3b37:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    3b47:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    3b57:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    3b67:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    3b77:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00003b83 <text_rtc_cas>:
    3b83:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    3b93:	6e 79 00                                            ny.

00003b96 <text_ntp_cas>:
    3b96:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    3ba6:	63 61 73 00                                         cas.

00003baa <text_pid_regulator>:
    3baa:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00003bb8 <text_nrf_rozhrani>:
    3bb8:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00003bc5 <text_rest_rozhrani>:
    3bc5:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    3bd5:	69 00                                               i.

00003bd7 <thermctl_header_out>:
    3bd7:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00003be6 <text_mqtt_rozhrani>:
    3be6:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00003bf4 <text_ethernet_rozhrani>:
    3bf4:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    3c04:	69 00                                               i.

00003c06 <text_onewire_hledam>:
    3c06:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00003c13 <text_onewire_rozhrani>:
    3c13:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00003c22 <text_touchscreen>:
    3c22:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00003c2e <text_nastaveni_systemu>:
    3c2e:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    3c3e:	75 00                                               u.

00003c40 <text_test_eeprom>:
    3c40:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00003c50 <text_ok>:
    3c50:	4f 4b 00                                            OK.

00003c53 <text_test_ram>:
    3c53:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00003c60 <text_bezny_start>:
    3c60:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00003c6c <text_vychozi_nastaveni>:
    3c6c:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    3c7c:	69 00                                               i.

00003c7e <text_vnitrni_ochrany>:
    3c7e:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00003c8e <term_title>:
    3c8e:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    3c9e:	6f 72 20 76 33 00                                   or v3.

00003ca4 <regulator_default_text>:
    3ca4:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    3cb4:	72 3a 00                                            r:.

00003cb7 <current_time>:
    3cb7:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00003cc4 <current_temp>:
    3cc4:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    3cd4:	3a 00                                               :.

00003cd6 <text_err>:
    3cd6:	45 72 72 6f 72 00                                   Error.

00003cdc <nastaveni_tds_period>:
    3cdc:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00003ceb <temp_offset_short>:
    3ceb:	6f 66 66 73 65 74 3a 00                             offset:.

00003cf3 <text_online>:
    3cf3:	4f 6e 6c 69 6e 65 00                                Online.

00003cfa <text_last_update>:
    3cfa:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    3d0a:	7a 61 63 65 3a 00                                   zace:.

00003d10 <current_temp_short>:
    3d10:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00003d19 <text_nazev>:
    3d19:	4e 61 7a 65 76 3a 00                                Nazev:.

00003d20 <text_nastavit_tds>:
    3d20:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    3d30:	6c 6f 00                                            lo.

00003d33 <text_not_used>:
    3d33:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00003d40 <text_associovat_tds>:
    3d40:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    3d50:	64 6c 6f 00                                         dlo.

00003d54 <text_rtds_prefix>:
    3d54:	2f 00                                               /.

00003d56 <nastaveni_rtds>:
    3d56:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00003d65 <nastaveni_onewire>:
    3d65:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00003d73 <text_term_do_activate>:
    3d73:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    3d83:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

00003d8d <text_term_deactive>:
    3d8d:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

00003d97 <text_term_active>:
    3d97:	41 6b 74 69 76 6e 69 00                             Aktivni.

00003d9f <text_change_default_ring>:
    3d9f:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    3daf:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

00003db9 <text_button_term_fan>:
    3db9:	46 41 4e 00                                         FAN.

00003dbd <text_current_ring_mode>:
    3dbd:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    3dcd:	75 6c 61 74 6f 72 75 00                             ulatoru.

00003dd5 <text_button_term_man_comment>:
    3dd5:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

00003de4 <text_button_term_man>:
    3de4:	4d 41 4e 00                                         MAN.

00003de8 <text_button_term_prog_comment>:
    3de8:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    3df8:	72 61 6d 00                                         ram.

00003dfc <text_button_term_prog>:
    3dfc:	50 52 4f 47 00                                      PROG.

00003e01 <text_button_term_min_comment>:
    3e01:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    3e11:	67 75 6c 61 63 65 00                                gulace.

00003e18 <text_button_term_min>:
    3e18:	4d 49 4e 00                                         MIN.

00003e1c <text_button_term_max_comment>:
    3e1c:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    3e2c:	75 6c 61 63 65 00                                   ulace.

00003e32 <text_button_term_max>:
    3e32:	4d 41 58 00                                         MAX.

00003e36 <text_button_term_off_comment>:
    3e36:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    3e46:	79 20 6d 6f 64 00                                   y mod.

00003e4c <text_button_term_off>:
    3e4c:	4f 46 46 00                                         OFF.

00003e50 <status_know_devices>:
    3e50:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    3e60:	63 65 73 00                                         ces.

00003e64 <_ZL10network_ip.lto_priv.232>:
    3e64:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00003e6f <status_mqtt_process>:
    3e6f:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    3e7f:	65 73 73 00                                         ess.

00003e83 <status_mqtt_receive>:
    3e83:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    3e93:	69 76 65 00                                         ive.

00003e97 <status_mqtt_error>:
    3e97:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    3ea7:	72 00                                               r.

00003ea9 <status_mqtt_send>:
    3ea9:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00003eba <port_to_mode_PGM>:
    3eba:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00003eca <digital_pin_to_timer_PGM>:
    3eca:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    3efe:	00 03                                               ..

00003f00 <lcd_font>:
    3f00:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    3f10:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    3f20:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    3f30:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    3f40:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    3f50:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    3f60:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    3f70:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    3f80:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    3f90:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    3fa0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    3fb0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    3fc0:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    3fd0:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    3fe0:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    3ff0:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    4000:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    4010:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    4020:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    4030:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    4040:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    4050:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    4060:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    4070:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    4080:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    4090:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    40a0:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    40b0:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    40c0:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    40d0:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    40e0:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    40f0:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    4100:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    4110:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    4120:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    4130:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    4140:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    4150:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    4160:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    4170:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    4180:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    4190:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    41a0:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    41b0:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    41c0:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    41d0:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    41e0:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    41f0:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    4200:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    4210:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    4220:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    4230:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    4240:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    4250:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    4260:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    4270:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    4280:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    4290:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    42a0:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    42b0:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    42c0:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    42d0:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    42e0:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    42f0:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    4300:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    4310:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    4320:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    4330:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    4340:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    4350:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    4360:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    4370:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    4380:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    4390:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    43a0:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    43b0:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    43c0:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    43d0:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    43e0:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    43f0:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000043fb <port_to_input_PGM>:
    43fb:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

0000440b <digital_pin_to_bit_mask_PGM>:
    440b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    441b:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    442b:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    443b:	08 10 20 40 80 20                                   .. @. 

00004441 <port_to_output_PGM>:
    4441:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00004451 <digital_pin_to_port_PGM>:
    4451:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    4461:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    4471:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    4481:	06 06 06 06 06 07                                   ......

00004487 <daysInMonth>:
    4487:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f 00              .............

00004494 <__ctors_start>:
__ctors_start():
    4494:	07 a4       	ldd	r0, Z+47	; 0x2f

00004496 <__ctors_end>:
__dtors_end():
    4496:	11 24       	eor	r1, r1
    4498:	1f be       	out	0x3f, r1	; 63
    449a:	cf ef       	ldi	r28, 0xFF	; 255
    449c:	d1 e2       	ldi	r29, 0x21	; 33
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	cd bf       	out	0x3d, r28	; 61
    44a2:	00 e0       	ldi	r16, 0x00	; 0
    44a4:	0c bf       	out	0x3c, r16	; 60

000044a6 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    44a6:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    44a8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    44aa:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    44ac:	ea e3       	ldi	r30, 0x3A	; 58
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    44ae:	fd e7       	ldi	r31, 0x7D	; 125
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    44b0:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    44b2:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    44b6:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    44b8:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    44ba:	a6 35       	cpi	r26, 0x56	; 86
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    44bc:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    44be:	d9 f7       	brne	.-10     	; 0x44b6 <__do_copy_data+0x10>

000044c0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    44c0:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    44c2:	a6 e5       	ldi	r26, 0x56	; 86
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    44c4:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    44c6:	01 c0       	rjmp	.+2      	; 0x44ca <.do_clear_bss_start>

000044c8 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    44c8:	1d 92       	st	X+, r1

000044ca <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    44ca:	ae 39       	cpi	r26, 0x9E	; 158
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    44cc:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    44ce:	e1 f7       	brne	.-8      	; 0x44c8 <.do_clear_bss_loop>

000044d0 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    44d0:	12 e2       	ldi	r17, 0x22	; 34
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    44d2:	cb e4       	ldi	r28, 0x4B	; 75
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    44d4:	d2 e2       	ldi	r29, 0x22	; 34
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    44d6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    44d8:	06 c0       	rjmp	.+12     	; 0x44e6 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    44da:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    44dc:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    44de:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    44e0:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    44e2:	0e 94 f2 bc 	call	0x179e4	; 0x179e4 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    44e6:	ca 34       	cpi	r28, 0x4A	; 74
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    44e8:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    44ea:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    44ec:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    44ee:	a9 f7       	brne	.-22     	; 0x44da <__do_global_ctors+0xa>
    44f0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <main>
    44f4:	0c 94 9b be 	jmp	0x17d36	; 0x17d36 <_exit>

000044f8 <__bad_interrupt>:
__vector_38():
    44f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000044fc <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    44fc:	cf 93       	push	r28
    44fe:	df 93       	push	r29
    4500:	1f 92       	push	r1
    4502:	cd b7       	in	r28, 0x3d	; 61
    4504:	de b7       	in	r29, 0x3e	; 62
    4506:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    4508:	dc 01       	movw	r26, r24
    450a:	ed 91       	ld	r30, X+
    450c:	fc 91       	ld	r31, X
    450e:	02 80       	ldd	r0, Z+2	; 0x02
    4510:	f3 81       	ldd	r31, Z+3	; 0x03
    4512:	e0 2d       	mov	r30, r0
    4514:	41 e0       	ldi	r20, 0x01	; 1
    4516:	50 e0       	ldi	r21, 0x00	; 0
    4518:	be 01       	movw	r22, r28
    451a:	6f 5f       	subi	r22, 0xFF	; 255
    451c:	7f 4f       	sbci	r23, 0xFF	; 255
    451e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    4520:	0f 90       	pop	r0
    4522:	df 91       	pop	r29
    4524:	cf 91       	pop	r28
    4526:	08 95       	ret

00004528 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    4528:	dc 01       	movw	r26, r24
    452a:	ed 91       	ld	r30, X+
    452c:	fc 91       	ld	r31, X
    452e:	02 8c       	ldd	r0, Z+26	; 0x1a
    4530:	f3 8d       	ldd	r31, Z+27	; 0x1b
    4532:	e0 2d       	mov	r30, r0
    4534:	19 95       	eicall
    4536:	91 e0       	ldi	r25, 0x01	; 1
    4538:	89 27       	eor	r24, r25
    453a:	08 95       	ret

0000453c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	08 95       	ret

00004542 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    4542:	dc 01       	movw	r26, r24
    4544:	ed 91       	ld	r30, X+
    4546:	fc 91       	ld	r31, X
    4548:	04 8c       	ldd	r0, Z+28	; 0x1c
    454a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    454c:	e0 2d       	mov	r30, r0
    454e:	19 94       	eijmp

00004550 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    4550:	fc 01       	movw	r30, r24
    4552:	84 89       	ldd	r24, Z+20	; 0x14
    4554:	95 89       	ldd	r25, Z+21	; 0x15
    4556:	08 95       	ret

00004558 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    4558:	fc 01       	movw	r30, r24
    455a:	82 89       	ldd	r24, Z+18	; 0x12
    455c:	93 89       	ldd	r25, Z+19	; 0x13
    455e:	08 95       	ret

00004560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    4560:	4f 92       	push	r4
    4562:	5f 92       	push	r5
    4564:	6f 92       	push	r6
    4566:	7f 92       	push	r7
    4568:	8f 92       	push	r8
    456a:	9f 92       	push	r9
    456c:	af 92       	push	r10
    456e:	bf 92       	push	r11
    4570:	cf 92       	push	r12
    4572:	df 92       	push	r13
    4574:	ef 92       	push	r14
    4576:	ff 92       	push	r15
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	cf 93       	push	r28
    457e:	df 93       	push	r29
    4580:	ec 01       	movw	r28, r24
    4582:	5a 01       	movw	r10, r20
    4584:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    4586:	37 ff       	sbrs	r19, 7
    4588:	05 c0       	rjmp	.+10     	; 0x4594 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    458a:	62 0f       	add	r22, r18
    458c:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    458e:	31 95       	neg	r19
    4590:	21 95       	neg	r18
    4592:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    4594:	7b 01       	movw	r14, r22
    4596:	e2 0e       	add	r14, r18
    4598:	f3 1e       	adc	r15, r19
    459a:	6b 01       	movw	r12, r22
    459c:	77 ff       	sbrs	r23, 7
    459e:	02 c0       	rjmp	.+4      	; 0x45a4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    45a0:	d1 2c       	mov	r13, r1
    45a2:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    45a4:	e8 81       	ld	r30, Y
    45a6:	f9 81       	ldd	r31, Y+1	; 0x01
    45a8:	06 84       	ldd	r0, Z+14	; 0x0e
    45aa:	f7 85       	ldd	r31, Z+15	; 0x0f
    45ac:	e0 2d       	mov	r30, r0
    45ae:	ce 01       	movw	r24, r28
    45b0:	19 95       	eicall
    45b2:	8e 15       	cp	r24, r14
    45b4:	9f 05       	cpc	r25, r15
    45b6:	44 f4       	brge	.+16     	; 0x45c8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    45b8:	e8 81       	ld	r30, Y
    45ba:	f9 81       	ldd	r31, Y+1	; 0x01
    45bc:	06 84       	ldd	r0, Z+14	; 0x0e
    45be:	f7 85       	ldd	r31, Z+15	; 0x0f
    45c0:	e0 2d       	mov	r30, r0
    45c2:	ce 01       	movw	r24, r28
    45c4:	19 95       	eicall
    45c6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    45c8:	47 01       	movw	r8, r14
    45ca:	8c 18       	sub	r8, r12
    45cc:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    45ce:	17 ff       	sbrs	r17, 7
    45d0:	05 c0       	rjmp	.+10     	; 0x45dc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    45d2:	a0 0e       	add	r10, r16
    45d4:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    45d6:	11 95       	neg	r17
    45d8:	01 95       	neg	r16
    45da:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    45dc:	0a 0d       	add	r16, r10
    45de:	1b 1d       	adc	r17, r11
    45e0:	b7 fe       	sbrs	r11, 7
    45e2:	02 c0       	rjmp	.+4      	; 0x45e8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    45e4:	b1 2c       	mov	r11, r1
    45e6:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    45e8:	e8 81       	ld	r30, Y
    45ea:	f9 81       	ldd	r31, Y+1	; 0x01
    45ec:	04 84       	ldd	r0, Z+12	; 0x0c
    45ee:	f5 85       	ldd	r31, Z+13	; 0x0d
    45f0:	e0 2d       	mov	r30, r0
    45f2:	ce 01       	movw	r24, r28
    45f4:	19 95       	eicall
    45f6:	80 17       	cp	r24, r16
    45f8:	91 07       	cpc	r25, r17
    45fa:	44 f4       	brge	.+16     	; 0x460c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    45fc:	e8 81       	ld	r30, Y
    45fe:	f9 81       	ldd	r31, Y+1	; 0x01
    4600:	04 84       	ldd	r0, Z+12	; 0x0c
    4602:	f5 85       	ldd	r31, Z+13	; 0x0d
    4604:	e0 2d       	mov	r30, r0
    4606:	ce 01       	movw	r24, r28
    4608:	19 95       	eicall
    460a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    460c:	38 01       	movw	r6, r16
    460e:	6a 18       	sub	r6, r10
    4610:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    4612:	01 50       	subi	r16, 0x01	; 1
    4614:	11 09       	sbc	r17, r1
    4616:	97 01       	movw	r18, r14
    4618:	21 50       	subi	r18, 0x01	; 1
    461a:	31 09       	sbc	r19, r1
    461c:	e8 81       	ld	r30, Y
    461e:	f9 81       	ldd	r31, Y+1	; 0x01
    4620:	06 80       	ldd	r0, Z+6	; 0x06
    4622:	f7 81       	ldd	r31, Z+7	; 0x07
    4624:	e0 2d       	mov	r30, r0
    4626:	a5 01       	movw	r20, r10
    4628:	b6 01       	movw	r22, r12
    462a:	ce 01       	movw	r24, r28
    462c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    462e:	ee a5       	ldd	r30, Y+46	; 0x2e
    4630:	ff a5       	ldd	r31, Y+47	; 0x2f
    4632:	80 81       	ld	r24, Z
    4634:	9a ad       	ldd	r25, Y+58	; 0x3a
    4636:	89 23       	and	r24, r25
    4638:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    463a:	88 8d       	ldd	r24, Y+24	; 0x18
    463c:	99 8d       	ldd	r25, Y+25	; 0x19
    463e:	89 2b       	or	r24, r25
    4640:	c9 f4       	brne	.+50     	; 0x4674 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    4642:	e8 a9       	ldd	r30, Y+48	; 0x30
    4644:	f9 a9       	ldd	r31, Y+49	; 0x31
    4646:	80 81       	ld	r24, Z
    4648:	9b ad       	ldd	r25, Y+59	; 0x3b
    464a:	89 23       	and	r24, r25
    464c:	80 83       	st	Z, r24
    464e:	12 b8       	out	0x02, r1	; 2
    4650:	ea a9       	ldd	r30, Y+50	; 0x32
    4652:	fb a9       	ldd	r31, Y+51	; 0x33
    4654:	80 81       	ld	r24, Z
    4656:	9c ad       	ldd	r25, Y+60	; 0x3c
    4658:	89 23       	and	r24, r25
    465a:	80 83       	st	Z, r24
    465c:	ea a9       	ldd	r30, Y+50	; 0x32
    465e:	fb a9       	ldd	r31, Y+51	; 0x33
    4660:	80 81       	ld	r24, Z
    4662:	98 ad       	ldd	r25, Y+56	; 0x38
    4664:	89 2b       	or	r24, r25
    4666:	80 83       	st	Z, r24
    4668:	e8 a9       	ldd	r30, Y+48	; 0x30
    466a:	f9 a9       	ldd	r31, Y+49	; 0x31
    466c:	80 81       	ld	r24, Z
    466e:	9f a9       	ldd	r25, Y+55	; 0x37
    4670:	89 2b       	or	r24, r25
    4672:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    4674:	e8 a9       	ldd	r30, Y+48	; 0x30
    4676:	f9 a9       	ldd	r31, Y+49	; 0x31
    4678:	80 81       	ld	r24, Z
    467a:	9b ad       	ldd	r25, Y+59	; 0x3b
    467c:	89 23       	and	r24, r25
    467e:	80 83       	st	Z, r24
    4680:	88 a1       	ldd	r24, Y+32	; 0x20
    4682:	82 b9       	out	0x02, r24	; 2
    4684:	ea a9       	ldd	r30, Y+50	; 0x32
    4686:	fb a9       	ldd	r31, Y+51	; 0x33
    4688:	80 81       	ld	r24, Z
    468a:	9c ad       	ldd	r25, Y+60	; 0x3c
    468c:	89 23       	and	r24, r25
    468e:	80 83       	st	Z, r24
    4690:	ea a9       	ldd	r30, Y+50	; 0x32
    4692:	fb a9       	ldd	r31, Y+51	; 0x33
    4694:	80 81       	ld	r24, Z
    4696:	98 ad       	ldd	r25, Y+56	; 0x38
    4698:	89 2b       	or	r24, r25
    469a:	80 83       	st	Z, r24
    469c:	e8 a9       	ldd	r30, Y+48	; 0x30
    469e:	f9 a9       	ldd	r31, Y+49	; 0x31
    46a0:	80 81       	ld	r24, Z
    46a2:	9f a9       	ldd	r25, Y+55	; 0x37
    46a4:	89 2b       	or	r24, r25
    46a6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    46a8:	86 14       	cp	r8, r6
    46aa:	97 04       	cpc	r9, r7
    46ac:	2c f0       	brlt	.+10     	; 0x46b8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    46ae:	96 2d       	mov	r25, r6
    46b0:	87 2d       	mov	r24, r7
    46b2:	34 01       	movw	r6, r8
    46b4:	89 2e       	mov	r8, r25
    46b6:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    46b8:	18 14       	cp	r1, r8
    46ba:	19 04       	cpc	r1, r9
    46bc:	0c f5       	brge	.+66     	; 0x4700 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    46be:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    46c0:	52 b8       	out	0x02, r5	; 2
    46c2:	ea a9       	ldd	r30, Y+50	; 0x32
    46c4:	fb a9       	ldd	r31, Y+51	; 0x33
    46c6:	20 81       	ld	r18, Z
    46c8:	3c ad       	ldd	r19, Y+60	; 0x3c
    46ca:	23 23       	and	r18, r19
    46cc:	20 83       	st	Z, r18
    46ce:	ea a9       	ldd	r30, Y+50	; 0x32
    46d0:	fb a9       	ldd	r31, Y+51	; 0x33
    46d2:	20 81       	ld	r18, Z
    46d4:	38 ad       	ldd	r19, Y+56	; 0x38
    46d6:	23 2b       	or	r18, r19
    46d8:	20 83       	st	Z, r18
    46da:	42 b8       	out	0x02, r4	; 2
    46dc:	ea a9       	ldd	r30, Y+50	; 0x32
    46de:	fb a9       	ldd	r31, Y+51	; 0x33
    46e0:	20 81       	ld	r18, Z
    46e2:	3c ad       	ldd	r19, Y+60	; 0x3c
    46e4:	23 23       	and	r18, r19
    46e6:	20 83       	st	Z, r18
    46e8:	ea a9       	ldd	r30, Y+50	; 0x32
    46ea:	fb a9       	ldd	r31, Y+51	; 0x33
    46ec:	20 81       	ld	r18, Z
    46ee:	38 ad       	ldd	r19, Y+56	; 0x38
    46f0:	23 2b       	or	r18, r19
    46f2:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	21 f7       	brne	.-56     	; 0x46c0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	88 1a       	sub	r8, r24
    46fc:	91 08       	sbc	r9, r1
    46fe:	dc cf       	rjmp	.-72     	; 0x46b8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    4700:	88 8d       	ldd	r24, Y+24	; 0x18
    4702:	99 8d       	ldd	r25, Y+25	; 0x19
    4704:	00 97       	sbiw	r24, 0x00	; 0
    4706:	51 f5       	brne	.+84     	; 0x475c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    4708:	0c 89       	ldd	r16, Y+20	; 0x14
    470a:	1d 89       	ldd	r17, Y+21	; 0x15
    470c:	01 50       	subi	r16, 0x01	; 1
    470e:	11 09       	sbc	r17, r1
    4710:	2a 89       	ldd	r18, Y+18	; 0x12
    4712:	3b 89       	ldd	r19, Y+19	; 0x13
    4714:	21 50       	subi	r18, 0x01	; 1
    4716:	31 09       	sbc	r19, r1
    4718:	e8 81       	ld	r30, Y
    471a:	f9 81       	ldd	r31, Y+1	; 0x01
    471c:	06 80       	ldd	r0, Z+6	; 0x06
    471e:	f7 81       	ldd	r31, Z+7	; 0x07
    4720:	e0 2d       	mov	r30, r0
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	40 e0       	ldi	r20, 0x00	; 0
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	ce 01       	movw	r24, r28
    472c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    472e:	ee a5       	ldd	r30, Y+46	; 0x2e
    4730:	ff a5       	ldd	r31, Y+47	; 0x2f
    4732:	80 81       	ld	r24, Z
    4734:	9e a9       	ldd	r25, Y+54	; 0x36
    4736:	89 2b       	or	r24, r25
    4738:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	ff 90       	pop	r15
    4744:	ef 90       	pop	r14
    4746:	df 90       	pop	r13
    4748:	cf 90       	pop	r12
    474a:	bf 90       	pop	r11
    474c:	af 90       	pop	r10
    474e:	9f 90       	pop	r9
    4750:	8f 90       	pop	r8
    4752:	7f 90       	pop	r7
    4754:	6f 90       	pop	r6
    4756:	5f 90       	pop	r5
    4758:	4f 90       	pop	r4
    475a:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	39 f7       	brne	.-50     	; 0x472e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    4760:	ee a5       	ldd	r30, Y+46	; 0x2e
    4762:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    4764:	80 81       	ld	r24, Z
    4766:	9a ad       	ldd	r25, Y+58	; 0x3a
    4768:	89 23       	and	r24, r25
    476a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    476c:	e8 a9       	ldd	r30, Y+48	; 0x30
    476e:	f9 a9       	ldd	r31, Y+49	; 0x31
    4770:	80 81       	ld	r24, Z
    4772:	9b ad       	ldd	r25, Y+59	; 0x3b
    4774:	89 23       	and	r24, r25
    4776:	80 83       	st	Z, r24
    4778:	84 e0       	ldi	r24, 0x04	; 4
    477a:	82 b9       	out	0x02, r24	; 2
    477c:	ea a9       	ldd	r30, Y+50	; 0x32
    477e:	fb a9       	ldd	r31, Y+51	; 0x33
    4780:	80 81       	ld	r24, Z
    4782:	9c ad       	ldd	r25, Y+60	; 0x3c
    4784:	89 23       	and	r24, r25
    4786:	80 83       	st	Z, r24
    4788:	ea a9       	ldd	r30, Y+50	; 0x32
    478a:	fb a9       	ldd	r31, Y+51	; 0x33
    478c:	80 81       	ld	r24, Z
    478e:	98 ad       	ldd	r25, Y+56	; 0x38
    4790:	89 2b       	or	r24, r25
    4792:	80 83       	st	Z, r24
    4794:	e8 a9       	ldd	r30, Y+48	; 0x30
    4796:	f9 a9       	ldd	r31, Y+49	; 0x31
    4798:	80 81       	ld	r24, Z
    479a:	9f a9       	ldd	r25, Y+55	; 0x37
    479c:	89 2b       	or	r24, r25
    479e:	80 83       	st	Z, r24
    47a0:	8a 89       	ldd	r24, Y+18	; 0x12
    47a2:	9b 89       	ldd	r25, Y+19	; 0x13
    47a4:	01 97       	sbiw	r24, 0x01	; 1
    47a6:	92 b9       	out	0x02, r25	; 2
    47a8:	ea a9       	ldd	r30, Y+50	; 0x32
    47aa:	fb a9       	ldd	r31, Y+51	; 0x33
    47ac:	80 81       	ld	r24, Z
    47ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    47b0:	89 23       	and	r24, r25
    47b2:	80 83       	st	Z, r24
    47b4:	ea a9       	ldd	r30, Y+50	; 0x32
    47b6:	fb a9       	ldd	r31, Y+51	; 0x33
    47b8:	80 81       	ld	r24, Z
    47ba:	98 ad       	ldd	r25, Y+56	; 0x38
    47bc:	89 2b       	or	r24, r25
    47be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    47c0:	e8 a9       	ldd	r30, Y+48	; 0x30
    47c2:	f9 a9       	ldd	r31, Y+49	; 0x31
    47c4:	80 81       	ld	r24, Z
    47c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    47c8:	89 23       	and	r24, r25
    47ca:	80 83       	st	Z, r24
    47cc:	85 e0       	ldi	r24, 0x05	; 5
    47ce:	82 b9       	out	0x02, r24	; 2
    47d0:	ea a9       	ldd	r30, Y+50	; 0x32
    47d2:	fb a9       	ldd	r31, Y+51	; 0x33
    47d4:	80 81       	ld	r24, Z
    47d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    47d8:	89 23       	and	r24, r25
    47da:	80 83       	st	Z, r24
    47dc:	ea a9       	ldd	r30, Y+50	; 0x32
    47de:	fb a9       	ldd	r31, Y+51	; 0x33
    47e0:	80 81       	ld	r24, Z
    47e2:	98 ad       	ldd	r25, Y+56	; 0x38
    47e4:	89 2b       	or	r24, r25
    47e6:	80 83       	st	Z, r24
    47e8:	e8 a9       	ldd	r30, Y+48	; 0x30
    47ea:	f9 a9       	ldd	r31, Y+49	; 0x31
    47ec:	80 81       	ld	r24, Z
    47ee:	9f a9       	ldd	r25, Y+55	; 0x37
    47f0:	89 2b       	or	r24, r25
    47f2:	80 83       	st	Z, r24
    47f4:	8a 89       	ldd	r24, Y+18	; 0x12
    47f6:	81 50       	subi	r24, 0x01	; 1
    47f8:	82 b9       	out	0x02, r24	; 2
    47fa:	ea a9       	ldd	r30, Y+50	; 0x32
    47fc:	fb a9       	ldd	r31, Y+51	; 0x33
    47fe:	80 81       	ld	r24, Z
    4800:	9c ad       	ldd	r25, Y+60	; 0x3c
    4802:	89 23       	and	r24, r25
    4804:	80 83       	st	Z, r24
    4806:	ea a9       	ldd	r30, Y+50	; 0x32
    4808:	fb a9       	ldd	r31, Y+51	; 0x33
    480a:	80 81       	ld	r24, Z
    480c:	98 ad       	ldd	r25, Y+56	; 0x38
    480e:	89 2b       	or	r24, r25
    4810:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    4812:	e8 a9       	ldd	r30, Y+48	; 0x30
    4814:	f9 a9       	ldd	r31, Y+49	; 0x31
    4816:	80 81       	ld	r24, Z
    4818:	9b ad       	ldd	r25, Y+59	; 0x3b
    481a:	89 23       	and	r24, r25
    481c:	80 83       	st	Z, r24
    481e:	88 e0       	ldi	r24, 0x08	; 8
    4820:	82 b9       	out	0x02, r24	; 2
    4822:	ea a9       	ldd	r30, Y+50	; 0x32
    4824:	fb a9       	ldd	r31, Y+51	; 0x33
    4826:	80 81       	ld	r24, Z
    4828:	9c ad       	ldd	r25, Y+60	; 0x3c
    482a:	89 23       	and	r24, r25
    482c:	80 83       	st	Z, r24
    482e:	ea a9       	ldd	r30, Y+50	; 0x32
    4830:	fb a9       	ldd	r31, Y+51	; 0x33
    4832:	80 81       	ld	r24, Z
    4834:	98 ad       	ldd	r25, Y+56	; 0x38
    4836:	89 2b       	or	r24, r25
    4838:	80 83       	st	Z, r24
    483a:	e8 a9       	ldd	r30, Y+48	; 0x30
    483c:	f9 a9       	ldd	r31, Y+49	; 0x31
    483e:	80 81       	ld	r24, Z
    4840:	9f a9       	ldd	r25, Y+55	; 0x37
    4842:	89 2b       	or	r24, r25
    4844:	80 83       	st	Z, r24
    4846:	8c 89       	ldd	r24, Y+20	; 0x14
    4848:	9d 89       	ldd	r25, Y+21	; 0x15
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	92 b9       	out	0x02, r25	; 2
    484e:	ea a9       	ldd	r30, Y+50	; 0x32
    4850:	fb a9       	ldd	r31, Y+51	; 0x33
    4852:	80 81       	ld	r24, Z
    4854:	9c ad       	ldd	r25, Y+60	; 0x3c
    4856:	89 23       	and	r24, r25
    4858:	80 83       	st	Z, r24
    485a:	ea a9       	ldd	r30, Y+50	; 0x32
    485c:	fb a9       	ldd	r31, Y+51	; 0x33
    485e:	80 81       	ld	r24, Z
    4860:	98 ad       	ldd	r25, Y+56	; 0x38
    4862:	89 2b       	or	r24, r25
    4864:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    4866:	e8 a9       	ldd	r30, Y+48	; 0x30
    4868:	f9 a9       	ldd	r31, Y+49	; 0x31
    486a:	80 81       	ld	r24, Z
    486c:	9b ad       	ldd	r25, Y+59	; 0x3b
    486e:	89 23       	and	r24, r25
    4870:	80 83       	st	Z, r24
    4872:	89 e0       	ldi	r24, 0x09	; 9
    4874:	82 b9       	out	0x02, r24	; 2
    4876:	ea a9       	ldd	r30, Y+50	; 0x32
    4878:	fb a9       	ldd	r31, Y+51	; 0x33
    487a:	80 81       	ld	r24, Z
    487c:	9c ad       	ldd	r25, Y+60	; 0x3c
    487e:	89 23       	and	r24, r25
    4880:	80 83       	st	Z, r24
    4882:	ea a9       	ldd	r30, Y+50	; 0x32
    4884:	fb a9       	ldd	r31, Y+51	; 0x33
    4886:	80 81       	ld	r24, Z
    4888:	98 ad       	ldd	r25, Y+56	; 0x38
    488a:	89 2b       	or	r24, r25
    488c:	80 83       	st	Z, r24
    488e:	e8 a9       	ldd	r30, Y+48	; 0x30
    4890:	f9 a9       	ldd	r31, Y+49	; 0x31
    4892:	80 81       	ld	r24, Z
    4894:	9f a9       	ldd	r25, Y+55	; 0x37
    4896:	89 2b       	or	r24, r25
    4898:	80 83       	st	Z, r24
    489a:	8c 89       	ldd	r24, Y+20	; 0x14
    489c:	81 50       	subi	r24, 0x01	; 1
    489e:	82 b9       	out	0x02, r24	; 2
    48a0:	ea a9       	ldd	r30, Y+50	; 0x32
    48a2:	fb a9       	ldd	r31, Y+51	; 0x33
    48a4:	80 81       	ld	r24, Z
    48a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    48a8:	89 23       	and	r24, r25
    48aa:	80 83       	st	Z, r24
    48ac:	ea a9       	ldd	r30, Y+50	; 0x32
    48ae:	fb a9       	ldd	r31, Y+51	; 0x33
    48b0:	80 81       	ld	r24, Z
    48b2:	98 ad       	ldd	r25, Y+56	; 0x38
    48b4:	89 2b       	or	r24, r25
    48b6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    48b8:	ee a5       	ldd	r30, Y+46	; 0x2e
    48ba:	ff a5       	ldd	r31, Y+47	; 0x2f
    48bc:	80 81       	ld	r24, Z
    48be:	9e a9       	ldd	r25, Y+54	; 0x36
    48c0:	89 2b       	or	r24, r25
    48c2:	80 83       	st	Z, r24
    48c4:	34 cf       	rjmp	.-408    	; 0x472e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

000048c6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    48c6:	af 92       	push	r10
    48c8:	bf 92       	push	r11
    48ca:	cf 92       	push	r12
    48cc:	df 92       	push	r13
    48ce:	ef 92       	push	r14
    48d0:	ff 92       	push	r15
    48d2:	0f 93       	push	r16
    48d4:	1f 93       	push	r17
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    48da:	77 fd       	sbrc	r23, 7
    48dc:	75 c0       	rjmp	.+234    	; 0x49c8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    48de:	57 fd       	sbrc	r21, 7
    48e0:	73 c0       	rjmp	.+230    	; 0x49c8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    48e2:	c3 2e       	mov	r12, r19
    48e4:	d2 2e       	mov	r13, r18
    48e6:	5a 01       	movw	r10, r20
    48e8:	7b 01       	movw	r14, r22
    48ea:	ec 01       	movw	r28, r24
    48ec:	e8 81       	ld	r30, Y
    48ee:	f9 81       	ldd	r31, Y+1	; 0x01
    48f0:	06 84       	ldd	r0, Z+14	; 0x0e
    48f2:	f7 85       	ldd	r31, Z+15	; 0x0f
    48f4:	e0 2d       	mov	r30, r0
    48f6:	19 95       	eicall
    48f8:	8e 15       	cp	r24, r14
    48fa:	9f 05       	cpc	r25, r15
    48fc:	0c f4       	brge	.+2      	; 0x4900 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    48fe:	64 c0       	rjmp	.+200    	; 0x49c8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4900:	e8 81       	ld	r30, Y
    4902:	f9 81       	ldd	r31, Y+1	; 0x01
    4904:	04 84       	ldd	r0, Z+12	; 0x0c
    4906:	f5 85       	ldd	r31, Z+13	; 0x0d
    4908:	e0 2d       	mov	r30, r0
    490a:	ce 01       	movw	r24, r28
    490c:	19 95       	eicall
    490e:	8a 15       	cp	r24, r10
    4910:	9b 05       	cpc	r25, r11
    4912:	0c f4       	brge	.+2      	; 0x4916 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    4914:	59 c0       	rjmp	.+178    	; 0x49c8 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    4916:	e8 81       	ld	r30, Y
    4918:	f9 81       	ldd	r31, Y+1	; 0x01
    491a:	06 80       	ldd	r0, Z+6	; 0x06
    491c:	f7 81       	ldd	r31, Z+7	; 0x07
    491e:	e0 2d       	mov	r30, r0
    4920:	85 01       	movw	r16, r10
    4922:	97 01       	movw	r18, r14
    4924:	a5 01       	movw	r20, r10
    4926:	b7 01       	movw	r22, r14
    4928:	ce 01       	movw	r24, r28
    492a:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    492c:	ee a5       	ldd	r30, Y+46	; 0x2e
    492e:	ff a5       	ldd	r31, Y+47	; 0x2f
    4930:	80 81       	ld	r24, Z
    4932:	9a ad       	ldd	r25, Y+58	; 0x3a
    4934:	89 23       	and	r24, r25
    4936:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    4938:	98 a1       	ldd	r25, Y+32	; 0x20
    493a:	29 a1       	ldd	r18, Y+33	; 0x21
    493c:	e8 a9       	ldd	r30, Y+48	; 0x30
    493e:	f9 a9       	ldd	r31, Y+49	; 0x31
    4940:	80 81       	ld	r24, Z
    4942:	3b ad       	ldd	r19, Y+59	; 0x3b
    4944:	83 23       	and	r24, r19
    4946:	80 83       	st	Z, r24
    4948:	22 b9       	out	0x02, r18	; 2
    494a:	ea a9       	ldd	r30, Y+50	; 0x32
    494c:	fb a9       	ldd	r31, Y+51	; 0x33
    494e:	80 81       	ld	r24, Z
    4950:	2c ad       	ldd	r18, Y+60	; 0x3c
    4952:	82 23       	and	r24, r18
    4954:	80 83       	st	Z, r24
    4956:	ea a9       	ldd	r30, Y+50	; 0x32
    4958:	fb a9       	ldd	r31, Y+51	; 0x33
    495a:	80 81       	ld	r24, Z
    495c:	28 ad       	ldd	r18, Y+56	; 0x38
    495e:	82 2b       	or	r24, r18
    4960:	80 83       	st	Z, r24
    4962:	92 b9       	out	0x02, r25	; 2
    4964:	ea a9       	ldd	r30, Y+50	; 0x32
    4966:	fb a9       	ldd	r31, Y+51	; 0x33
    4968:	80 81       	ld	r24, Z
    496a:	9c ad       	ldd	r25, Y+60	; 0x3c
    496c:	89 23       	and	r24, r25
    496e:	80 83       	st	Z, r24
    4970:	ea a9       	ldd	r30, Y+50	; 0x32
    4972:	fb a9       	ldd	r31, Y+51	; 0x33
    4974:	80 81       	ld	r24, Z
    4976:	98 ad       	ldd	r25, Y+56	; 0x38
    4978:	89 2b       	or	r24, r25
    497a:	80 83       	st	Z, r24
    497c:	e8 a9       	ldd	r30, Y+48	; 0x30
    497e:	f9 a9       	ldd	r31, Y+49	; 0x31
    4980:	80 81       	ld	r24, Z
    4982:	9f a9       	ldd	r25, Y+55	; 0x37
    4984:	89 2b       	or	r24, r25
    4986:	80 83       	st	Z, r24
    4988:	c2 b8       	out	0x02, r12	; 2
    498a:	ea a9       	ldd	r30, Y+50	; 0x32
    498c:	fb a9       	ldd	r31, Y+51	; 0x33
    498e:	80 81       	ld	r24, Z
    4990:	9c ad       	ldd	r25, Y+60	; 0x3c
    4992:	89 23       	and	r24, r25
    4994:	80 83       	st	Z, r24
    4996:	ea a9       	ldd	r30, Y+50	; 0x32
    4998:	fb a9       	ldd	r31, Y+51	; 0x33
    499a:	80 81       	ld	r24, Z
    499c:	98 ad       	ldd	r25, Y+56	; 0x38
    499e:	89 2b       	or	r24, r25
    49a0:	80 83       	st	Z, r24
    49a2:	d2 b8       	out	0x02, r13	; 2
    49a4:	ea a9       	ldd	r30, Y+50	; 0x32
    49a6:	fb a9       	ldd	r31, Y+51	; 0x33
    49a8:	80 81       	ld	r24, Z
    49aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    49ac:	89 23       	and	r24, r25
    49ae:	80 83       	st	Z, r24
    49b0:	ea a9       	ldd	r30, Y+50	; 0x32
    49b2:	fb a9       	ldd	r31, Y+51	; 0x33
    49b4:	80 81       	ld	r24, Z
    49b6:	98 ad       	ldd	r25, Y+56	; 0x38
    49b8:	89 2b       	or	r24, r25
    49ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    49bc:	ee a5       	ldd	r30, Y+46	; 0x2e
    49be:	ff a5       	ldd	r31, Y+47	; 0x2f
    49c0:	80 81       	ld	r24, Z
    49c2:	9e a9       	ldd	r25, Y+54	; 0x36
    49c4:	89 2b       	or	r24, r25
    49c6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    49c8:	df 91       	pop	r29
    49ca:	cf 91       	pop	r28
    49cc:	1f 91       	pop	r17
    49ce:	0f 91       	pop	r16
    49d0:	ff 90       	pop	r15
    49d2:	ef 90       	pop	r14
    49d4:	df 90       	pop	r13
    49d6:	cf 90       	pop	r12
    49d8:	bf 90       	pop	r11
    49da:	af 90       	pop	r10
    49dc:	08 95       	ret

000049de <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    49de:	7f 92       	push	r7
    49e0:	8f 92       	push	r8
    49e2:	9f 92       	push	r9
    49e4:	af 92       	push	r10
    49e6:	bf 92       	push	r11
    49e8:	cf 92       	push	r12
    49ea:	df 92       	push	r13
    49ec:	ef 92       	push	r14
    49ee:	ff 92       	push	r15
    49f0:	0f 93       	push	r16
    49f2:	1f 93       	push	r17
    49f4:	cf 93       	push	r28
    49f6:	df 93       	push	r29
    49f8:	ec 01       	movw	r28, r24
    49fa:	59 01       	movw	r10, r18
    49fc:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    49fe:	0e 9d       	mul	r16, r14
    4a00:	60 01       	movw	r12, r0
    4a02:	0f 9d       	mul	r16, r15
    4a04:	d0 0c       	add	r13, r0
    4a06:	1e 9d       	mul	r17, r14
    4a08:	d0 0c       	add	r13, r0
    4a0a:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    4a0c:	87 01       	movw	r16, r14
    4a0e:	04 0f       	add	r16, r20
    4a10:	15 1f       	adc	r17, r21
    4a12:	01 50       	subi	r16, 0x01	; 1
    4a14:	11 09       	sbc	r17, r1
    4a16:	26 0f       	add	r18, r22
    4a18:	37 1f       	adc	r19, r23
    4a1a:	21 50       	subi	r18, 0x01	; 1
    4a1c:	31 09       	sbc	r19, r1
    4a1e:	e8 81       	ld	r30, Y
    4a20:	f9 81       	ldd	r31, Y+1	; 0x01
    4a22:	06 80       	ldd	r0, Z+6	; 0x06
    4a24:	f7 81       	ldd	r31, Z+7	; 0x07
    4a26:	e0 2d       	mov	r30, r0
    4a28:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    4a2a:	77 24       	eor	r7, r7
    4a2c:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    4a2e:	1c 14       	cp	r1, r12
    4a30:	1d 04       	cpc	r1, r13
    4a32:	0c f0       	brlt	.+2      	; 0x4a36 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    4a34:	0a c1       	rjmp	.+532    	; 0x4c4a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    4a36:	ee a5       	ldd	r30, Y+46	; 0x2e
    4a38:	ff a5       	ldd	r31, Y+47	; 0x2f
    4a3a:	80 81       	ld	r24, Z
    4a3c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a3e:	89 23       	and	r24, r25
    4a40:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    4a42:	e8 a9       	ldd	r30, Y+48	; 0x30
    4a44:	f9 a9       	ldd	r31, Y+49	; 0x31
    4a46:	80 81       	ld	r24, Z
    4a48:	9b ad       	ldd	r25, Y+59	; 0x3b
    4a4a:	89 23       	and	r24, r25
    4a4c:	80 83       	st	Z, r24
    4a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    4a50:	8b a1       	ldd	r24, Y+35	; 0x23
    4a52:	82 b9       	out	0x02, r24	; 2
    4a54:	ea a9       	ldd	r30, Y+50	; 0x32
    4a56:	fb a9       	ldd	r31, Y+51	; 0x33
    4a58:	80 81       	ld	r24, Z
    4a5a:	2c ad       	ldd	r18, Y+60	; 0x3c
    4a5c:	82 23       	and	r24, r18
    4a5e:	80 83       	st	Z, r24
    4a60:	ea a9       	ldd	r30, Y+50	; 0x32
    4a62:	fb a9       	ldd	r31, Y+51	; 0x33
    4a64:	80 81       	ld	r24, Z
    4a66:	28 ad       	ldd	r18, Y+56	; 0x38
    4a68:	82 2b       	or	r24, r18
    4a6a:	80 83       	st	Z, r24
    4a6c:	92 b9       	out	0x02, r25	; 2
    4a6e:	ea a9       	ldd	r30, Y+50	; 0x32
    4a70:	fb a9       	ldd	r31, Y+51	; 0x33
    4a72:	80 81       	ld	r24, Z
    4a74:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a76:	89 23       	and	r24, r25
    4a78:	80 83       	st	Z, r24
    4a7a:	ea a9       	ldd	r30, Y+50	; 0x32
    4a7c:	fb a9       	ldd	r31, Y+51	; 0x33
    4a7e:	80 81       	ld	r24, Z
    4a80:	98 ad       	ldd	r25, Y+56	; 0x38
    4a82:	89 2b       	or	r24, r25
    4a84:	80 83       	st	Z, r24
    4a86:	e8 a9       	ldd	r30, Y+48	; 0x30
    4a88:	f9 a9       	ldd	r31, Y+49	; 0x31
    4a8a:	80 81       	ld	r24, Z
    4a8c:	9f a9       	ldd	r25, Y+55	; 0x37
    4a8e:	89 2b       	or	r24, r25
    4a90:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    4a92:	81 b1       	in	r24, 0x01	; 1
    4a94:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    4a96:	88 8d       	ldd	r24, Y+24	; 0x18
    4a98:	99 8d       	ldd	r25, Y+25	; 0x19
    4a9a:	89 2b       	or	r24, r25
    4a9c:	09 f0       	breq	.+2      	; 0x4aa0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    4a9e:	67 c0       	rjmp	.+206    	; 0x4b6e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    4aa0:	f5 01       	movw	r30, r10
    4aa2:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4aa4:	42 e0       	ldi	r20, 0x02	; 2
    4aa6:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    4aa8:	ac a9       	ldd	r26, Y+52	; 0x34
    4aaa:	bd a9       	ldd	r27, Y+53	; 0x35
    4aac:	2c 91       	ld	r18, X
    4aae:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ab0:	23 23       	and	r18, r19
    4ab2:	2c 93       	st	X, r18
    4ab4:	20 b1       	in	r18, 0x00	; 0
    4ab6:	ac a9       	ldd	r26, Y+52	; 0x34
    4ab8:	bd a9       	ldd	r27, Y+53	; 0x35
    4aba:	2c 91       	ld	r18, X
    4abc:	39 ad       	ldd	r19, Y+57	; 0x39
    4abe:	23 2b       	or	r18, r19
    4ac0:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    4ac2:	ac a9       	ldd	r26, Y+52	; 0x34
    4ac4:	bd a9       	ldd	r27, Y+53	; 0x35
    4ac6:	2c 91       	ld	r18, X
    4ac8:	3d ad       	ldd	r19, Y+61	; 0x3d
    4aca:	23 23       	and	r18, r19
    4acc:	2c 93       	st	X, r18
    4ace:	20 b1       	in	r18, 0x00	; 0
    4ad0:	ac a9       	ldd	r26, Y+52	; 0x34
    4ad2:	bd a9       	ldd	r27, Y+53	; 0x35
    4ad4:	2c 91       	ld	r18, X
    4ad6:	39 ad       	ldd	r19, Y+57	; 0x39
    4ad8:	23 2b       	or	r18, r19
    4ada:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    4adc:	ac a9       	ldd	r26, Y+52	; 0x34
    4ade:	bd a9       	ldd	r27, Y+53	; 0x35
    4ae0:	2c 91       	ld	r18, X
    4ae2:	3d ad       	ldd	r19, Y+61	; 0x3d
    4ae4:	23 23       	and	r18, r19
    4ae6:	2c 93       	st	X, r18
    4ae8:	20 b1       	in	r18, 0x00	; 0
    4aea:	ac a9       	ldd	r26, Y+52	; 0x34
    4aec:	bd a9       	ldd	r27, Y+53	; 0x35
    4aee:	3c 91       	ld	r19, X
    4af0:	69 ad       	ldd	r22, Y+57	; 0x39
    4af2:	36 2b       	or	r19, r22
    4af4:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    4af6:	ac a9       	ldd	r26, Y+52	; 0x34
    4af8:	bd a9       	ldd	r27, Y+53	; 0x35
    4afa:	3c 91       	ld	r19, X
    4afc:	6d ad       	ldd	r22, Y+61	; 0x3d
    4afe:	36 23       	and	r19, r22
    4b00:	3c 93       	st	X, r19
    4b02:	60 b1       	in	r22, 0x00	; 0
    4b04:	ac a9       	ldd	r26, Y+52	; 0x34
    4b06:	bd a9       	ldd	r27, Y+53	; 0x35
    4b08:	3c 91       	ld	r19, X
    4b0a:	79 ad       	ldd	r23, Y+57	; 0x39
    4b0c:	37 2b       	or	r19, r23
    4b0e:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4b10:	41 30       	cpi	r20, 0x01	; 1
    4b12:	51 05       	cpc	r21, r1
    4b14:	49 f5       	brne	.+82     	; 0x4b68 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    4b16:	32 2f       	mov	r19, r18
    4b18:	26 2f       	mov	r18, r22
    4b1a:	21 93       	st	Z+, r18
    4b1c:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    4b22:	c0 cf       	rjmp	.-128    	; 0x4aa4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    4b24:	cc 0c       	add	r12, r12
    4b26:	dd 1c       	adc	r13, r13
    4b28:	ac 0c       	add	r10, r12
    4b2a:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    4b2c:	0c 89       	ldd	r16, Y+20	; 0x14
    4b2e:	1d 89       	ldd	r17, Y+21	; 0x15
    4b30:	01 50       	subi	r16, 0x01	; 1
    4b32:	11 09       	sbc	r17, r1
    4b34:	2a 89       	ldd	r18, Y+18	; 0x12
    4b36:	3b 89       	ldd	r19, Y+19	; 0x13
    4b38:	21 50       	subi	r18, 0x01	; 1
    4b3a:	31 09       	sbc	r19, r1
    4b3c:	e8 81       	ld	r30, Y
    4b3e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b40:	06 80       	ldd	r0, Z+6	; 0x06
    4b42:	f7 81       	ldd	r31, Z+7	; 0x07
    4b44:	e0 2d       	mov	r30, r0
    4b46:	50 e0       	ldi	r21, 0x00	; 0
    4b48:	40 e0       	ldi	r20, 0x00	; 0
    4b4a:	70 e0       	ldi	r23, 0x00	; 0
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	ce 01       	movw	r24, r28
    4b50:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    4b52:	ee a5       	ldd	r30, Y+46	; 0x2e
    4b54:	ff a5       	ldd	r31, Y+47	; 0x2f
    4b56:	80 81       	ld	r24, Z
    4b58:	9e a9       	ldd	r25, Y+54	; 0x36
    4b5a:	89 2b       	or	r24, r25
    4b5c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    4b5e:	81 b1       	in	r24, 0x01	; 1
    4b60:	71 b8       	out	0x01, r7	; 1
    4b62:	d1 2c       	mov	r13, r1
    4b64:	c1 2c       	mov	r12, r1
    4b66:	63 cf       	rjmp	.-314    	; 0x4a2e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4b68:	41 e0       	ldi	r20, 0x01	; 1
    4b6a:	50 e0       	ldi	r21, 0x00	; 0
    4b6c:	9d cf       	rjmp	.-198    	; 0x4aa8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    4b6e:	ec a9       	ldd	r30, Y+52	; 0x34
    4b70:	fd a9       	ldd	r31, Y+53	; 0x35
    4b72:	80 81       	ld	r24, Z
    4b74:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b76:	89 23       	and	r24, r25
    4b78:	80 83       	st	Z, r24
    4b7a:	80 b1       	in	r24, 0x00	; 0
    4b7c:	ec a9       	ldd	r30, Y+52	; 0x34
    4b7e:	fd a9       	ldd	r31, Y+53	; 0x35
    4b80:	80 81       	ld	r24, Z
    4b82:	99 ad       	ldd	r25, Y+57	; 0x39
    4b84:	89 2b       	or	r24, r25
    4b86:	80 83       	st	Z, r24
    4b88:	75 01       	movw	r14, r10
    4b8a:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    4b8c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b8e:	9d a5       	ldd	r25, Y+45	; 0x2d
    4b90:	81 30       	cpi	r24, 0x01	; 1
    4b92:	91 05       	cpc	r25, r1
    4b94:	d9 f5       	brne	.+118    	; 0x4c0c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    4b96:	ec a9       	ldd	r30, Y+52	; 0x34
    4b98:	fd a9       	ldd	r31, Y+53	; 0x35
    4b9a:	80 81       	ld	r24, Z
    4b9c:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b9e:	89 23       	and	r24, r25
    4ba0:	80 83       	st	Z, r24
    4ba2:	60 b1       	in	r22, 0x00	; 0
    4ba4:	ec a9       	ldd	r30, Y+52	; 0x34
    4ba6:	fd a9       	ldd	r31, Y+53	; 0x35
    4ba8:	80 81       	ld	r24, Z
    4baa:	99 ad       	ldd	r25, Y+57	; 0x39
    4bac:	89 2b       	or	r24, r25
    4bae:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    4bb0:	ec a9       	ldd	r30, Y+52	; 0x34
    4bb2:	fd a9       	ldd	r31, Y+53	; 0x35
    4bb4:	80 81       	ld	r24, Z
    4bb6:	9d ad       	ldd	r25, Y+61	; 0x3d
    4bb8:	89 23       	and	r24, r25
    4bba:	80 83       	st	Z, r24
    4bbc:	40 b1       	in	r20, 0x00	; 0
    4bbe:	ec a9       	ldd	r30, Y+52	; 0x34
    4bc0:	fd a9       	ldd	r31, Y+53	; 0x35
    4bc2:	80 81       	ld	r24, Z
    4bc4:	99 ad       	ldd	r25, Y+57	; 0x39
    4bc6:	89 2b       	or	r24, r25
    4bc8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    4bca:	ec a9       	ldd	r30, Y+52	; 0x34
    4bcc:	fd a9       	ldd	r31, Y+53	; 0x35
    4bce:	80 81       	ld	r24, Z
    4bd0:	9d ad       	ldd	r25, Y+61	; 0x3d
    4bd2:	89 23       	and	r24, r25
    4bd4:	80 83       	st	Z, r24
    4bd6:	20 b1       	in	r18, 0x00	; 0
    4bd8:	ec a9       	ldd	r30, Y+52	; 0x34
    4bda:	fd a9       	ldd	r31, Y+53	; 0x35
    4bdc:	80 81       	ld	r24, Z
    4bde:	99 ad       	ldd	r25, Y+57	; 0x39
    4be0:	89 2b       	or	r24, r25
    4be2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    4be4:	e8 81       	ld	r30, Y
    4be6:	f9 81       	ldd	r31, Y+1	; 0x01
    4be8:	01 90       	ld	r0, Z+
    4bea:	f0 81       	ld	r31, Z
    4bec:	e0 2d       	mov	r30, r0
    4bee:	ce 01       	movw	r24, r28
    4bf0:	19 95       	eicall
    4bf2:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    4bf4:	f7 01       	movw	r30, r14
    4bf6:	81 92       	st	Z+, r8
    4bf8:	91 92       	st	Z+, r9
    4bfa:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    4bfc:	01 50       	subi	r16, 0x01	; 1
    4bfe:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    4c00:	29 f6       	brne	.-118    	; 0x4b8c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    4c02:	cc 0c       	add	r12, r12
    4c04:	dd 1c       	adc	r13, r13
    4c06:	ac 0c       	add	r10, r12
    4c08:	bd 1c       	adc	r11, r13
    4c0a:	a3 cf       	rjmp	.-186    	; 0x4b52 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    4c0c:	89 2b       	or	r24, r25
    4c0e:	91 f7       	brne	.-28     	; 0x4bf4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    4c10:	ec a9       	ldd	r30, Y+52	; 0x34
    4c12:	fd a9       	ldd	r31, Y+53	; 0x35
    4c14:	80 81       	ld	r24, Z
    4c16:	9d ad       	ldd	r25, Y+61	; 0x3d
    4c18:	89 23       	and	r24, r25
    4c1a:	80 83       	st	Z, r24
    4c1c:	80 b0       	in	r8, 0x00	; 0
    4c1e:	ec a9       	ldd	r30, Y+52	; 0x34
    4c20:	fd a9       	ldd	r31, Y+53	; 0x35
    4c22:	80 81       	ld	r24, Z
    4c24:	99 ad       	ldd	r25, Y+57	; 0x39
    4c26:	89 2b       	or	r24, r25
    4c28:	80 83       	st	Z, r24
    4c2a:	ec a9       	ldd	r30, Y+52	; 0x34
    4c2c:	fd a9       	ldd	r31, Y+53	; 0x35
    4c2e:	80 81       	ld	r24, Z
    4c30:	9d ad       	ldd	r25, Y+61	; 0x3d
    4c32:	89 23       	and	r24, r25
    4c34:	80 83       	st	Z, r24
    4c36:	90 b1       	in	r25, 0x00	; 0
    4c38:	ec a9       	ldd	r30, Y+52	; 0x34
    4c3a:	fd a9       	ldd	r31, Y+53	; 0x35
    4c3c:	80 81       	ld	r24, Z
    4c3e:	29 ad       	ldd	r18, Y+57	; 0x39
    4c40:	82 2b       	or	r24, r18
    4c42:	80 83       	st	Z, r24
    4c44:	98 2c       	mov	r9, r8
    4c46:	89 2e       	mov	r8, r25
    4c48:	d5 cf       	rjmp	.-86     	; 0x4bf4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	df 91       	pop	r29
    4c50:	cf 91       	pop	r28
    4c52:	1f 91       	pop	r17
    4c54:	0f 91       	pop	r16
    4c56:	ff 90       	pop	r15
    4c58:	ef 90       	pop	r14
    4c5a:	df 90       	pop	r13
    4c5c:	cf 90       	pop	r12
    4c5e:	bf 90       	pop	r11
    4c60:	af 90       	pop	r10
    4c62:	9f 90       	pop	r9
    4c64:	8f 90       	pop	r8
    4c66:	7f 90       	pop	r7
    4c68:	08 95       	ret

00004c6a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    4c6a:	38 e0       	ldi	r19, 0x08	; 8
    4c6c:	43 9f       	mul	r20, r19
    4c6e:	c0 01       	movw	r24, r0
    4c70:	11 24       	eor	r1, r1
    4c72:	80 7e       	andi	r24, 0xE0	; 224
    4c74:	97 70       	andi	r25, 0x07	; 7
    4c76:	26 95       	lsr	r18
    4c78:	26 95       	lsr	r18
    4c7a:	26 95       	lsr	r18
    4c7c:	82 2b       	or	r24, r18
    4c7e:	70 e0       	ldi	r23, 0x00	; 0
    4c80:	76 2f       	mov	r23, r22
    4c82:	66 27       	eor	r22, r22
    4c84:	66 27       	eor	r22, r22
    4c86:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    4c88:	86 2b       	or	r24, r22
    4c8a:	97 2b       	or	r25, r23
    4c8c:	08 95       	ret

00004c8e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    4c8e:	0f 93       	push	r16
    4c90:	cf 93       	push	r28
    4c92:	df 93       	push	r29
    4c94:	dc 01       	movw	r26, r24
    4c96:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    4c98:	9e 96       	adiw	r26, 0x2e	; 46
    4c9a:	ed 91       	ld	r30, X+
    4c9c:	fc 91       	ld	r31, X
    4c9e:	9f 97       	sbiw	r26, 0x2f	; 47
    4ca0:	80 81       	ld	r24, Z
    4ca2:	da 96       	adiw	r26, 0x3a	; 58
    4ca4:	9c 91       	ld	r25, X
    4ca6:	da 97       	sbiw	r26, 0x3a	; 58
    4ca8:	89 23       	and	r24, r25
    4caa:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    4cac:	22 23       	and	r18, r18
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    4cb0:	5b c0       	rjmp	.+182    	; 0x4d68 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    4cb2:	58 96       	adiw	r26, 0x18	; 24
    4cb4:	8d 91       	ld	r24, X+
    4cb6:	9c 91       	ld	r25, X
    4cb8:	59 97       	sbiw	r26, 0x19	; 25
    4cba:	89 2b       	or	r24, r25
    4cbc:	49 f5       	brne	.+82     	; 0x4d10 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    4cbe:	d0 96       	adiw	r26, 0x30	; 48
    4cc0:	ed 91       	ld	r30, X+
    4cc2:	fc 91       	ld	r31, X
    4cc4:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    4cc6:	80 81       	ld	r24, Z
    4cc8:	db 96       	adiw	r26, 0x3b	; 59
    4cca:	9c 91       	ld	r25, X
    4ccc:	db 97       	sbiw	r26, 0x3b	; 59
    4cce:	89 23       	and	r24, r25
    4cd0:	80 83       	st	Z, r24
    4cd2:	12 b8       	out	0x02, r1	; 2
    4cd4:	d2 96       	adiw	r26, 0x32	; 50
    4cd6:	ed 91       	ld	r30, X+
    4cd8:	fc 91       	ld	r31, X
    4cda:	d3 97       	sbiw	r26, 0x33	; 51
    4cdc:	80 81       	ld	r24, Z
    4cde:	dc 96       	adiw	r26, 0x3c	; 60
    4ce0:	9c 91       	ld	r25, X
    4ce2:	dc 97       	sbiw	r26, 0x3c	; 60
    4ce4:	89 23       	and	r24, r25
    4ce6:	80 83       	st	Z, r24
    4ce8:	d2 96       	adiw	r26, 0x32	; 50
    4cea:	ed 91       	ld	r30, X+
    4cec:	fc 91       	ld	r31, X
    4cee:	d3 97       	sbiw	r26, 0x33	; 51
    4cf0:	80 81       	ld	r24, Z
    4cf2:	d8 96       	adiw	r26, 0x38	; 56
    4cf4:	9c 91       	ld	r25, X
    4cf6:	d8 97       	sbiw	r26, 0x38	; 56
    4cf8:	89 2b       	or	r24, r25
    4cfa:	80 83       	st	Z, r24
    4cfc:	d0 96       	adiw	r26, 0x30	; 48
    4cfe:	ed 91       	ld	r30, X+
    4d00:	fc 91       	ld	r31, X
    4d02:	d1 97       	sbiw	r26, 0x31	; 49
    4d04:	80 81       	ld	r24, Z
    4d06:	d7 96       	adiw	r26, 0x37	; 55
    4d08:	9c 91       	ld	r25, X
    4d0a:	d7 97       	sbiw	r26, 0x37	; 55
    4d0c:	89 2b       	or	r24, r25
    4d0e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    4d10:	d0 96       	adiw	r26, 0x30	; 48
    4d12:	ed 91       	ld	r30, X+
    4d14:	fc 91       	ld	r31, X
    4d16:	d1 97       	sbiw	r26, 0x31	; 49
    4d18:	80 81       	ld	r24, Z
    4d1a:	db 96       	adiw	r26, 0x3b	; 59
    4d1c:	9c 91       	ld	r25, X
    4d1e:	db 97       	sbiw	r26, 0x3b	; 59
    4d20:	89 23       	and	r24, r25
    4d22:	80 83       	st	Z, r24
    4d24:	90 96       	adiw	r26, 0x20	; 32
    4d26:	8c 91       	ld	r24, X
    4d28:	90 97       	sbiw	r26, 0x20	; 32
    4d2a:	82 b9       	out	0x02, r24	; 2
    4d2c:	d2 96       	adiw	r26, 0x32	; 50
    4d2e:	ed 91       	ld	r30, X+
    4d30:	fc 91       	ld	r31, X
    4d32:	d3 97       	sbiw	r26, 0x33	; 51
    4d34:	80 81       	ld	r24, Z
    4d36:	dc 96       	adiw	r26, 0x3c	; 60
    4d38:	9c 91       	ld	r25, X
    4d3a:	dc 97       	sbiw	r26, 0x3c	; 60
    4d3c:	89 23       	and	r24, r25
    4d3e:	80 83       	st	Z, r24
    4d40:	d2 96       	adiw	r26, 0x32	; 50
    4d42:	ed 91       	ld	r30, X+
    4d44:	fc 91       	ld	r31, X
    4d46:	d3 97       	sbiw	r26, 0x33	; 51
    4d48:	80 81       	ld	r24, Z
    4d4a:	d8 96       	adiw	r26, 0x38	; 56
    4d4c:	9c 91       	ld	r25, X
    4d4e:	d8 97       	sbiw	r26, 0x38	; 56
    4d50:	89 2b       	or	r24, r25
    4d52:	80 83       	st	Z, r24
    4d54:	d0 96       	adiw	r26, 0x30	; 48
    4d56:	ed 91       	ld	r30, X+
    4d58:	fc 91       	ld	r31, X
    4d5a:	d1 97       	sbiw	r26, 0x31	; 49
    4d5c:	80 81       	ld	r24, Z
    4d5e:	d7 96       	adiw	r26, 0x37	; 55
    4d60:	9c 91       	ld	r25, X
    4d62:	d7 97       	sbiw	r26, 0x37	; 55
    4d64:	89 2b       	or	r24, r25
    4d66:	80 83       	st	Z, r24
    4d68:	eb 01       	movw	r28, r22
    4d6a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    4d6c:	18 16       	cp	r1, r24
    4d6e:	19 06       	cpc	r1, r25
    4d70:	bc f5       	brge	.+110    	; 0x4de0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    4d72:	00 23       	and	r16, r16
    4d74:	91 f1       	breq	.+100    	; 0x4dda <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    4d76:	fe 01       	movw	r30, r28
    4d78:	45 91       	lpm	r20, Z+
    4d7a:	54 91       	lpm	r21, Z
    4d7c:	34 2f       	mov	r19, r20
    4d7e:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    4d80:	22 b9       	out	0x02, r18	; 2
    4d82:	d2 96       	adiw	r26, 0x32	; 50
    4d84:	ed 91       	ld	r30, X+
    4d86:	fc 91       	ld	r31, X
    4d88:	d3 97       	sbiw	r26, 0x33	; 51
    4d8a:	20 81       	ld	r18, Z
    4d8c:	dc 96       	adiw	r26, 0x3c	; 60
    4d8e:	4c 91       	ld	r20, X
    4d90:	dc 97       	sbiw	r26, 0x3c	; 60
    4d92:	24 23       	and	r18, r20
    4d94:	20 83       	st	Z, r18
    4d96:	d2 96       	adiw	r26, 0x32	; 50
    4d98:	ed 91       	ld	r30, X+
    4d9a:	fc 91       	ld	r31, X
    4d9c:	d3 97       	sbiw	r26, 0x33	; 51
    4d9e:	20 81       	ld	r18, Z
    4da0:	d8 96       	adiw	r26, 0x38	; 56
    4da2:	4c 91       	ld	r20, X
    4da4:	d8 97       	sbiw	r26, 0x38	; 56
    4da6:	24 2b       	or	r18, r20
    4da8:	20 83       	st	Z, r18
    4daa:	32 b9       	out	0x02, r19	; 2
    4dac:	d2 96       	adiw	r26, 0x32	; 50
    4dae:	ed 91       	ld	r30, X+
    4db0:	fc 91       	ld	r31, X
    4db2:	d3 97       	sbiw	r26, 0x33	; 51
    4db4:	20 81       	ld	r18, Z
    4db6:	dc 96       	adiw	r26, 0x3c	; 60
    4db8:	3c 91       	ld	r19, X
    4dba:	dc 97       	sbiw	r26, 0x3c	; 60
    4dbc:	23 23       	and	r18, r19
    4dbe:	20 83       	st	Z, r18
    4dc0:	d2 96       	adiw	r26, 0x32	; 50
    4dc2:	ed 91       	ld	r30, X+
    4dc4:	fc 91       	ld	r31, X
    4dc6:	d3 97       	sbiw	r26, 0x33	; 51
    4dc8:	20 81       	ld	r18, Z
    4dca:	d8 96       	adiw	r26, 0x38	; 56
    4dcc:	3c 91       	ld	r19, X
    4dce:	d8 97       	sbiw	r26, 0x38	; 56
    4dd0:	23 2b       	or	r18, r19
    4dd2:	20 83       	st	Z, r18
    4dd4:	22 96       	adiw	r28, 0x02	; 2
    4dd6:	01 97       	sbiw	r24, 0x01	; 1
    4dd8:	c9 cf       	rjmp	.-110    	; 0x4d6c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    4dda:	38 81       	ld	r19, Y
    4ddc:	29 81       	ldd	r18, Y+1	; 0x01
    4dde:	d0 cf       	rjmp	.-96     	; 0x4d80 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    4de0:	9e 96       	adiw	r26, 0x2e	; 46
    4de2:	ed 91       	ld	r30, X+
    4de4:	fc 91       	ld	r31, X
    4de6:	9f 97       	sbiw	r26, 0x2f	; 47
    4de8:	80 81       	ld	r24, Z
    4dea:	d6 96       	adiw	r26, 0x36	; 54
    4dec:	9c 91       	ld	r25, X
    4dee:	89 2b       	or	r24, r25
    4df0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	0f 91       	pop	r16
    4df8:	08 95       	ret

00004dfa <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    4dfa:	2f 92       	push	r2
    4dfc:	3f 92       	push	r3
    4dfe:	4f 92       	push	r4
    4e00:	5f 92       	push	r5
    4e02:	6f 92       	push	r6
    4e04:	7f 92       	push	r7
    4e06:	8f 92       	push	r8
    4e08:	9f 92       	push	r9
    4e0a:	af 92       	push	r10
    4e0c:	bf 92       	push	r11
    4e0e:	cf 92       	push	r12
    4e10:	df 92       	push	r13
    4e12:	ef 92       	push	r14
    4e14:	ff 92       	push	r15
    4e16:	0f 93       	push	r16
    4e18:	1f 93       	push	r17
    4e1a:	cf 93       	push	r28
    4e1c:	df 93       	push	r29
    4e1e:	00 d0       	rcall	.+0      	; 0x4e20 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    4e20:	00 d0       	rcall	.+0      	; 0x4e22 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    4e22:	cd b7       	in	r28, 0x3d	; 61
    4e24:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    4e26:	28 2e       	mov	r2, r24
    4e28:	31 2c       	mov	r3, r1
    4e2a:	c1 01       	movw	r24, r2
    4e2c:	88 0f       	add	r24, r24
    4e2e:	99 1f       	adc	r25, r25
    4e30:	e0 91 78 0c 	lds	r30, 0x0C78	; 0x800c78 <array_pids>
    4e34:	f0 91 79 0c 	lds	r31, 0x0C79	; 0x800c79 <array_pids+0x1>
    4e38:	e8 0f       	add	r30, r24
    4e3a:	f9 1f       	adc	r31, r25
    4e3c:	80 81       	ld	r24, Z
    4e3e:	91 81       	ldd	r25, Z+1	; 0x01
    4e40:	9e 83       	std	Y+6, r25	; 0x06
    4e42:	8d 83       	std	Y+5, r24	; 0x05
    4e44:	81 01       	movw	r16, r2
    4e46:	00 0f       	add	r16, r16
    4e48:	11 1f       	adc	r17, r17
    4e4a:	00 0f       	add	r16, r16
    4e4c:	11 1f       	adc	r17, r17
    4e4e:	f8 01       	movw	r30, r16
    4e50:	ee 52       	subi	r30, 0x2E	; 46
    4e52:	f6 4f       	sbci	r31, 0xF6	; 246
    4e54:	40 80       	ld	r4, Z
    4e56:	51 80       	ldd	r5, Z+1	; 0x01
    4e58:	62 80       	ldd	r6, Z+2	; 0x02
    4e5a:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	a9 01       	movw	r20, r18
    4e62:	c3 01       	movw	r24, r6
    4e64:	b2 01       	movw	r22, r4
    4e66:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
    4e6a:	87 fd       	sbrc	r24, 7
    4e6c:	97 c0       	rjmp	.+302    	; 0x4f9c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:219
    4e6e:	f8 01       	movw	r30, r16
    4e70:	ea 51       	subi	r30, 0x1A	; 26
    4e72:	f6 4f       	sbci	r31, 0xF6	; 246
    4e74:	80 80       	ld	r8, Z
    4e76:	91 80       	ldd	r9, Z+1	; 0x01
    4e78:	a2 80       	ldd	r10, Z+2	; 0x02
    4e7a:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	a9 01       	movw	r20, r18
    4e82:	c5 01       	movw	r24, r10
    4e84:	b4 01       	movw	r22, r8
    4e86:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
    4e8a:	87 fd       	sbrc	r24, 7
    4e8c:	87 c0       	rjmp	.+270    	; 0x4f9c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:219
    4e8e:	f8 01       	movw	r30, r16
    4e90:	e6 50       	subi	r30, 0x06	; 6
    4e92:	f6 4f       	sbci	r31, 0xF6	; 246
    4e94:	c0 80       	ld	r12, Z
    4e96:	d1 80       	ldd	r13, Z+1	; 0x01
    4e98:	e2 80       	ldd	r14, Z+2	; 0x02
    4e9a:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	a9 01       	movw	r20, r18
    4ea2:	c7 01       	movw	r24, r14
    4ea4:	b6 01       	movw	r22, r12
    4ea6:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
    4eaa:	87 fd       	sbrc	r24, 7
    4eac:	77 c0       	rjmp	.+238    	; 0x4f9c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	ed 81       	ldd	r30, Y+5	; 0x05
    4eb2:	fe 81       	ldd	r31, Y+6	; 0x06
    4eb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    4eb6:	33 8d       	ldd	r19, Z+27	; 0x1b
    4eb8:	21 30       	cpi	r18, 0x01	; 1
    4eba:	31 05       	cpc	r19, r1
    4ebc:	09 f0       	breq	.+2      	; 0x4ec0 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    4ebe:	80 e0       	ldi	r24, 0x00	; 0
    4ec0:	ed 81       	ldd	r30, Y+5	; 0x05
    4ec2:	fe 81       	ldd	r31, Y+6	; 0x06
    4ec4:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    4ec6:	40 82       	st	Z, r4
    4ec8:	51 82       	std	Z+1, r5	; 0x01
    4eca:	62 82       	std	Z+2, r6	; 0x02
    4ecc:	73 82       	std	Z+3, r7	; 0x03
    4ece:	84 82       	std	Z+4, r8	; 0x04
    4ed0:	95 82       	std	Z+5, r9	; 0x05
    4ed2:	a6 82       	std	Z+6, r10	; 0x06
    4ed4:	b7 82       	std	Z+7, r11	; 0x07
    4ed6:	c0 86       	std	Z+8, r12	; 0x08
    4ed8:	d1 86       	std	Z+9, r13	; 0x09
    4eda:	e2 86       	std	Z+10, r14	; 0x0a
    4edc:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    4ede:	66 a5       	ldd	r22, Z+46	; 0x2e
    4ee0:	77 a5       	ldd	r23, Z+47	; 0x2f
    4ee2:	80 a9       	ldd	r24, Z+48	; 0x30
    4ee4:	91 a9       	ldd	r25, Z+49	; 0x31
    4ee6:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    4eea:	20 e0       	ldi	r18, 0x00	; 0
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	4a e7       	ldi	r20, 0x7A	; 122
    4ef0:	54 e4       	ldi	r21, 0x44	; 68
    4ef2:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
    4ef6:	69 83       	std	Y+1, r22	; 0x01
    4ef8:	7a 83       	std	Y+2, r23	; 0x02
    4efa:	8b 83       	std	Y+3, r24	; 0x03
    4efc:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    4efe:	ed 81       	ldd	r30, Y+5	; 0x05
    4f00:	fe 81       	ldd	r31, Y+6	; 0x06
    4f02:	44 86       	std	Z+12, r4	; 0x0c
    4f04:	55 86       	std	Z+13, r5	; 0x0d
    4f06:	66 86       	std	Z+14, r6	; 0x0e
    4f08:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    4f0a:	9b 01       	movw	r18, r22
    4f0c:	ac 01       	movw	r20, r24
    4f0e:	c5 01       	movw	r24, r10
    4f10:	b4 01       	movw	r22, r8
    4f12:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
    4f16:	4b 01       	movw	r8, r22
    4f18:	5c 01       	movw	r10, r24
    4f1a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f1c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f1e:	80 8a       	std	Z+16, r8	; 0x10
    4f20:	91 8a       	std	Z+17, r9	; 0x11
    4f22:	a2 8a       	std	Z+18, r10	; 0x12
    4f24:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    4f26:	29 81       	ldd	r18, Y+1	; 0x01
    4f28:	3a 81       	ldd	r19, Y+2	; 0x02
    4f2a:	4b 81       	ldd	r20, Y+3	; 0x03
    4f2c:	5c 81       	ldd	r21, Y+4	; 0x04
    4f2e:	c7 01       	movw	r24, r14
    4f30:	b6 01       	movw	r22, r12
    4f32:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
    4f36:	6b 01       	movw	r12, r22
    4f38:	7c 01       	movw	r14, r24
    4f3a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f3c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f3e:	c4 8a       	std	Z+20, r12	; 0x14
    4f40:	d5 8a       	std	Z+21, r13	; 0x15
    4f42:	e6 8a       	std	Z+22, r14	; 0x16
    4f44:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    4f46:	80 8d       	ldd	r24, Z+24	; 0x18
    4f48:	91 8d       	ldd	r25, Z+25	; 0x19
    4f4a:	01 97       	sbiw	r24, 0x01	; 1
    4f4c:	39 f5       	brne	.+78     	; 0x4f9c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    4f4e:	a3 01       	movw	r20, r6
    4f50:	92 01       	movw	r18, r4
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	70 e0       	ldi	r23, 0x00	; 0
    4f56:	cb 01       	movw	r24, r22
    4f58:	0e 94 cc bb 	call	0x17798	; 0x17798 <__subsf3>
    4f5c:	ed 81       	ldd	r30, Y+5	; 0x05
    4f5e:	fe 81       	ldd	r31, Y+6	; 0x06
    4f60:	64 87       	std	Z+12, r22	; 0x0c
    4f62:	75 87       	std	Z+13, r23	; 0x0d
    4f64:	86 87       	std	Z+14, r24	; 0x0e
    4f66:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    4f68:	a5 01       	movw	r20, r10
    4f6a:	94 01       	movw	r18, r8
    4f6c:	60 e0       	ldi	r22, 0x00	; 0
    4f6e:	70 e0       	ldi	r23, 0x00	; 0
    4f70:	cb 01       	movw	r24, r22
    4f72:	0e 94 cc bb 	call	0x17798	; 0x17798 <__subsf3>
    4f76:	ed 81       	ldd	r30, Y+5	; 0x05
    4f78:	fe 81       	ldd	r31, Y+6	; 0x06
    4f7a:	60 8b       	std	Z+16, r22	; 0x10
    4f7c:	71 8b       	std	Z+17, r23	; 0x11
    4f7e:	82 8b       	std	Z+18, r24	; 0x12
    4f80:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    4f82:	a7 01       	movw	r20, r14
    4f84:	96 01       	movw	r18, r12
    4f86:	60 e0       	ldi	r22, 0x00	; 0
    4f88:	70 e0       	ldi	r23, 0x00	; 0
    4f8a:	cb 01       	movw	r24, r22
    4f8c:	0e 94 cc bb 	call	0x17798	; 0x17798 <__subsf3>
    4f90:	ed 81       	ldd	r30, Y+5	; 0x05
    4f92:	fe 81       	ldd	r31, Y+6	; 0x06
    4f94:	64 8b       	std	Z+20, r22	; 0x14
    4f96:	75 8b       	std	Z+21, r23	; 0x15
    4f98:	86 8b       	std	Z+22, r24	; 0x16
    4f9a:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    4f9c:	f1 01       	movw	r30, r2
    4f9e:	e2 5f       	subi	r30, 0xF2	; 242
    4fa0:	f5 4f       	sbci	r31, 0xF5	; 245
    4fa2:	10 81       	ld	r17, Z
    4fa4:	61 2f       	mov	r22, r17
    4fa6:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    4fa8:	61 15       	cp	r22, r1
    4faa:	71 05       	cpc	r23, r1
    4fac:	f1 f1       	breq	.+124    	; 0x502a <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    4fae:	07 2e       	mov	r0, r23
    4fb0:	00 0c       	add	r0, r0
    4fb2:	88 0b       	sbc	r24, r24
    4fb4:	99 0b       	sbc	r25, r25
    4fb6:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    4fba:	6b 01       	movw	r12, r22
    4fbc:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    4fbe:	ed 81       	ldd	r30, Y+5	; 0x05
    4fc0:	fe 81       	ldd	r31, Y+6	; 0x06
    4fc2:	66 a5       	ldd	r22, Z+46	; 0x2e
    4fc4:	77 a5       	ldd	r23, Z+47	; 0x2f
    4fc6:	80 a9       	ldd	r24, Z+48	; 0x30
    4fc8:	91 a9       	ldd	r25, Z+49	; 0x31
    4fca:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    4fce:	9b 01       	movw	r18, r22
    4fd0:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    4fd2:	c7 01       	movw	r24, r14
    4fd4:	b6 01       	movw	r22, r12
    4fd6:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
    4fda:	6b 01       	movw	r12, r22
    4fdc:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    4fde:	ac 01       	movw	r20, r24
    4fe0:	9b 01       	movw	r18, r22
    4fe2:	ed 81       	ldd	r30, Y+5	; 0x05
    4fe4:	fe 81       	ldd	r31, Y+6	; 0x06
    4fe6:	60 89       	ldd	r22, Z+16	; 0x10
    4fe8:	71 89       	ldd	r23, Z+17	; 0x11
    4fea:	82 89       	ldd	r24, Z+18	; 0x12
    4fec:	93 89       	ldd	r25, Z+19	; 0x13
    4fee:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
    4ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    4ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    4ff6:	60 8b       	std	Z+16, r22	; 0x10
    4ff8:	71 8b       	std	Z+17, r23	; 0x11
    4ffa:	82 8b       	std	Z+18, r24	; 0x12
    4ffc:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    4ffe:	a7 01       	movw	r20, r14
    5000:	96 01       	movw	r18, r12
    5002:	64 89       	ldd	r22, Z+20	; 0x14
    5004:	75 89       	ldd	r23, Z+21	; 0x15
    5006:	86 89       	ldd	r24, Z+22	; 0x16
    5008:	97 89       	ldd	r25, Z+23	; 0x17
    500a:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
    500e:	ed 81       	ldd	r30, Y+5	; 0x05
    5010:	fe 81       	ldd	r31, Y+6	; 0x06
    5012:	64 8b       	std	Z+20, r22	; 0x14
    5014:	75 8b       	std	Z+21, r23	; 0x15
    5016:	86 8b       	std	Z+22, r24	; 0x16
    5018:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    501a:	81 2f       	mov	r24, r17
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	b0 e0       	ldi	r27, 0x00	; 0
    5020:	a0 e0       	ldi	r26, 0x00	; 0
    5022:	86 a7       	std	Z+46, r24	; 0x2e
    5024:	97 a7       	std	Z+47, r25	; 0x2f
    5026:	a0 ab       	std	Z+48, r26	; 0x30
    5028:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:221
}
    502a:	26 96       	adiw	r28, 0x06	; 6
    502c:	0f b6       	in	r0, 0x3f	; 63
    502e:	f8 94       	cli
    5030:	de bf       	out	0x3e, r29	; 62
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	cd bf       	out	0x3d, r28	; 61
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	1f 91       	pop	r17
    503c:	0f 91       	pop	r16
    503e:	ff 90       	pop	r15
    5040:	ef 90       	pop	r14
    5042:	df 90       	pop	r13
    5044:	cf 90       	pop	r12
    5046:	bf 90       	pop	r11
    5048:	af 90       	pop	r10
    504a:	9f 90       	pop	r9
    504c:	8f 90       	pop	r8
    504e:	7f 90       	pop	r7
    5050:	6f 90       	pop	r6
    5052:	5f 90       	pop	r5
    5054:	4f 90       	pop	r4
    5056:	3f 90       	pop	r3
    5058:	2f 90       	pop	r2
    505a:	08 95       	ret

0000505c <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    505c:	fb 01       	movw	r30, r22
    505e:	9c 01       	movw	r18, r24
    5060:	28 5f       	subi	r18, 0xF8	; 248
    5062:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    5064:	dc 01       	movw	r26, r24
    5066:	5d 91       	ld	r21, X+
    5068:	cd 01       	movw	r24, r26
    506a:	41 91       	ld	r20, Z+
    506c:	54 13       	cpse	r21, r20
    506e:	05 c0       	rjmp	.+10     	; 0x507a <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    5070:	a2 17       	cp	r26, r18
    5072:	b3 07       	cpc	r27, r19
    5074:	b9 f7       	brne	.-18     	; 0x5064 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	08 95       	ret
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    507a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    507c:	08 95       	ret

0000507e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    507e:	80 33       	cpi	r24, 0x30	; 48
    5080:	9c f0       	brlt	.+38     	; 0x50a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    5082:	8a 33       	cpi	r24, 0x3A	; 58
    5084:	24 f0       	brlt	.+8      	; 0x508e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    5086:	8f 35       	cpi	r24, 0x5F	; 95
    5088:	24 f0       	brlt	.+8      	; 0x5092 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    508a:	8b 37       	cpi	r24, 0x7B	; 123
    508c:	24 f4       	brge	.+8      	; 0x5096 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    508e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    5090:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    5092:	81 34       	cpi	r24, 0x41	; 65
    5094:	4c f0       	brlt	.+18     	; 0x50a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    5096:	8b 35       	cpi	r24, 0x5B	; 91
    5098:	d4 f3       	brlt	.-12     	; 0x508e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    509a:	93 ed       	ldi	r25, 0xD3	; 211
    509c:	98 0f       	add	r25, r24
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	92 30       	cpi	r25, 0x02	; 2
    50a2:	b0 f3       	brcs	.-20     	; 0x5090 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	08 95       	ret
    50a8:	8b 32       	cpi	r24, 0x2B	; 43
    50aa:	b9 f7       	brne	.-18     	; 0x509a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    50ac:	f0 cf       	rjmp	.-32     	; 0x508e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

000050ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    50ae:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    50b0:	80 85       	ldd	r24, Z+8	; 0x08
    50b2:	81 11       	cpse	r24, r1
    50b4:	0a c0       	rjmp	.+20     	; 0x50ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    50b6:	a2 81       	ldd	r26, Z+2	; 0x02
    50b8:	b3 81       	ldd	r27, Z+3	; 0x03
    50ba:	cd 01       	movw	r24, r26
    50bc:	01 96       	adiw	r24, 0x01	; 1
    50be:	93 83       	std	Z+3, r25	; 0x03
    50c0:	82 83       	std	Z+2, r24	; 0x02
    50c2:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    50c4:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    50ca:	87 81       	ldd	r24, Z+7	; 0x07
    50cc:	08 95       	ret

000050ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    50ce:	df 92       	push	r13
    50d0:	ef 92       	push	r14
    50d2:	ff 92       	push	r15
    50d4:	0f 93       	push	r16
    50d6:	1f 93       	push	r17
    50d8:	cf 93       	push	r28
    50da:	df 93       	push	r29
    50dc:	ec 01       	movw	r28, r24
    50de:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    50e0:	0c 81       	ldd	r16, Y+4	; 0x04
    50e2:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    50e4:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50e8:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    50ea:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    50ec:	ce 01       	movw	r24, r28
    50ee:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    50f2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    50f4:	d8 16       	cp	r13, r24
    50f6:	89 f1       	breq	.+98     	; 0x515a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    50f8:	81 11       	cpse	r24, r1
    50fa:	0a c0       	rjmp	.+20     	; 0x5110 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    5100:	df 91       	pop	r29
    5102:	cf 91       	pop	r28
    5104:	1f 91       	pop	r17
    5106:	0f 91       	pop	r16
    5108:	ff 90       	pop	r15
    510a:	ef 90       	pop	r14
    510c:	df 90       	pop	r13
    510e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    5110:	8c 35       	cpi	r24, 0x5C	; 92
    5112:	d1 f4       	brne	.+52     	; 0x5148 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    5114:	ce 01       	movw	r24, r28
    5116:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    511a:	88 23       	and	r24, r24
    511c:	79 f3       	breq	.-34     	; 0x50fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    511e:	85 37       	cpi	r24, 0x75	; 117
    5120:	19 f4       	brne	.+6      	; 0x5128 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    5122:	84 e0       	ldi	r24, 0x04	; 4
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	ec cf       	rjmp	.-40     	; 0x5100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    5128:	e8 ee       	ldi	r30, 0xE8	; 232
    512a:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    512c:	90 81       	ld	r25, Z
    512e:	99 23       	and	r25, r25
    5130:	51 f0       	breq	.+20     	; 0x5146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    5132:	89 13       	cpse	r24, r25
    5134:	06 c0       	rjmp	.+12     	; 0x5142 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    5136:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    5138:	81 11       	cpse	r24, r1
    513a:	05 c0       	rjmp	.+10     	; 0x5146 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    513c:	82 e0       	ldi	r24, 0x02	; 2
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	df cf       	rjmp	.-66     	; 0x5100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    5142:	32 96       	adiw	r30, 0x02	; 2
    5144:	f3 cf       	rjmp	.-26     	; 0x512c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5146:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    5148:	ec 81       	ldd	r30, Y+4	; 0x04
    514a:	fd 81       	ldd	r31, Y+5	; 0x05
    514c:	9f 01       	movw	r18, r30
    514e:	2f 5f       	subi	r18, 0xFF	; 255
    5150:	3f 4f       	sbci	r19, 0xFF	; 255
    5152:	3d 83       	std	Y+5, r19	; 0x05
    5154:	2c 83       	std	Y+4, r18	; 0x04
    5156:	80 83       	st	Z, r24
    5158:	c9 cf       	rjmp	.-110    	; 0x50ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    515a:	ec 81       	ldd	r30, Y+4	; 0x04
    515c:	fd 81       	ldd	r31, Y+5	; 0x05
    515e:	cf 01       	movw	r24, r30
    5160:	01 96       	adiw	r24, 0x01	; 1
    5162:	9d 83       	std	Y+5, r25	; 0x05
    5164:	8c 83       	std	Y+4, r24	; 0x04
    5166:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    5168:	f7 01       	movw	r30, r14
    516a:	11 83       	std	Z+1, r17	; 0x01
    516c:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    516e:	83 e0       	ldi	r24, 0x03	; 3
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	01 2b       	or	r16, r17
    5174:	29 f2       	breq	.-118    	; 0x5100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	c2 cf       	rjmp	.-124    	; 0x5100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    517c:	1f 93       	push	r17
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    5182:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    5184:	ce 01       	movw	r24, r28
    5186:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    518a:	8b 30       	cpi	r24, 0x0B	; 11
    518c:	3c f4       	brge	.+14     	; 0x519c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    518e:	89 30       	cpi	r24, 0x09	; 9
    5190:	5c f4       	brge	.+22     	; 0x51a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    5192:	88 23       	and	r24, r24
    5194:	e9 f0       	breq	.+58     	; 0x51d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	80 e0       	ldi	r24, 0x00	; 0
    519a:	1c c0       	rjmp	.+56     	; 0x51d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    519c:	80 32       	cpi	r24, 0x20	; 32
    519e:	21 f0       	breq	.+8      	; 0x51a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    51a0:	8f 32       	cpi	r24, 0x2F	; 47
    51a2:	21 f0       	breq	.+8      	; 0x51ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    51a4:	8d 30       	cpi	r24, 0x0D	; 13
    51a6:	b9 f7       	brne	.-18     	; 0x5196 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    51a8:	18 86       	std	Y+8, r1	; 0x08
    51aa:	ec cf       	rjmp	.-40     	; 0x5184 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    51ac:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    51ae:	ce 01       	movw	r24, r28
    51b0:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    51b4:	8a 32       	cpi	r24, 0x2A	; 42
    51b6:	29 f0       	breq	.+10     	; 0x51c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    51b8:	8f 32       	cpi	r24, 0x2F	; 47
    51ba:	d1 f0       	breq	.+52     	; 0x51f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    51bc:	82 e0       	ldi	r24, 0x02	; 2
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	09 c0       	rjmp	.+18     	; 0x51d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    51c2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    51c4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    51c6:	ce 01       	movw	r24, r28
    51c8:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    51cc:	81 11       	cpse	r24, r1
    51ce:	06 c0       	rjmp	.+12     	; 0x51dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    51d4:	df 91       	pop	r29
    51d6:	cf 91       	pop	r28
    51d8:	1f 91       	pop	r17
    51da:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    51dc:	8f 32       	cpi	r24, 0x2F	; 47
    51de:	11 f4       	brne	.+4      	; 0x51e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    51e0:	11 11       	cpse	r17, r1
    51e2:	e2 cf       	rjmp	.-60     	; 0x51a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    51e4:	11 e0       	ldi	r17, 0x01	; 1
    51e6:	8a 32       	cpi	r24, 0x2A	; 42
    51e8:	09 f0       	breq	.+2      	; 0x51ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    51ea:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    51ec:	18 86       	std	Y+8, r1	; 0x08
    51ee:	eb cf       	rjmp	.-42     	; 0x51c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    51f0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    51f2:	ce 01       	movw	r24, r28
    51f4:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    51f8:	88 23       	and	r24, r24
    51fa:	51 f3       	breq	.-44     	; 0x51d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    51fc:	8a 30       	cpi	r24, 0x0A	; 10
    51fe:	c1 f7       	brne	.-16     	; 0x51f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    5200:	c1 cf       	rjmp	.-126    	; 0x5184 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00005202 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5700
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args3 == default_ring)
    5202:	81 e0       	ldi	r24, 0x01	; 1
    5204:	90 91 69 0a 	lds	r25, 0x0A69	; 0x800a69 <default_ring>
    5208:	94 13       	cpse	r25, r20
    520a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5703
    return 1;
  return 0;
}
    520c:	08 95       	ret

0000520e <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5659
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	90 91 f9 08 	lds	r25, 0x08F9	; 0x8008f9 <default_show_temp>
    5214:	94 13       	cpse	r25, r20
    5216:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
    ret = 1;

  return ret;
}
    5218:	08 95       	ret

0000521a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5646
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    521a:	00 97       	sbiw	r24, 0x00	; 0
    521c:	31 f4       	brne	.+12     	; 0x522a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5647
    return use_tds + use_rtds;
    521e:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <use_tds>
    5222:	90 91 2f 0b 	lds	r25, 0x0B2F	; 0x800b2f <use_rtds>
    5226:	89 0f       	add	r24, r25
    5228:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5649

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    522a:	01 97       	sbiw	r24, 0x01	; 1
    522c:	09 f0       	breq	.+2      	; 0x5230 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    522e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5650
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    5230:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
}
    5232:	08 95       	ret

00005234 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5416
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    5234:	ea e1       	ldi	r30, 0x1A	; 26
    5236:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5417
  uint8_t active = 0;
    5238:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5419
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    523a:	91 85       	ldd	r25, Z+9	; 0x09
    523c:	91 30       	cpi	r25, 0x01	; 1
    523e:	09 f4       	brne	.+2      	; 0x5242 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    5240:	8f 5f       	subi	r24, 0xFF	; 255
    5242:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5418

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    5244:	9a e0       	ldi	r25, 0x0A	; 10
    5246:	ec 35       	cpi	r30, 0x5C	; 92
    5248:	f9 07       	cpc	r31, r25
    524a:	b9 f7       	brne	.-18     	; 0x523a <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5421
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    524c:	08 95       	ret

0000524e <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5332
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    524e:	8a e0       	ldi	r24, 0x0A	; 10
    5250:	08 95       	ret

00005252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5308
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    5252:	ef 92       	push	r14
    5254:	ff 92       	push	r15
    5256:	0f 93       	push	r16
    5258:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    525a:	80 17       	cp	r24, r16
    525c:	91 07       	cpc	r25, r17
    525e:	74 f4       	brge	.+28     	; 0x527c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5310
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    5260:	84 0f       	add	r24, r20
    5262:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    5264:	08 17       	cp	r16, r24
    5266:	19 07       	cpc	r17, r25
    5268:	4c f4       	brge	.+18     	; 0x527c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    526a:	6e 15       	cp	r22, r14
    526c:	7f 05       	cpc	r23, r15
    526e:	34 f4       	brge	.+12     	; 0x527c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5310
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    5270:	62 0f       	add	r22, r18
    5272:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	e6 16       	cp	r14, r22
    5278:	f7 06       	cpc	r15, r23
    527a:	0c f0       	brlt	.+2      	; 0x527e <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5309
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    527c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5315
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	ff 90       	pop	r15
    5284:	ef 90       	pop	r14
    5286:	08 95       	ret

00005288 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5165
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    5288:	cf 93       	push	r28
    528a:	df 93       	push	r29
    528c:	fc 01       	movw	r30, r24
    528e:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5166
  if (max_element > 0)
    5290:	22 23       	and	r18, r18
    5292:	09 f1       	breq	.+66     	; 0x52d6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5168
  {
    menu_slider_data_max = *stop;
    5294:	98 81       	ld	r25, Y
    5296:	90 93 f8 08 	sts	0x08F8, r25	; 0x8008f8 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5169
    menu_slider_data_min = *start;
    529a:	80 81       	ld	r24, Z
    529c:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5170
    menu_slider_data_max_element = max_element;
    52a0:	20 93 f6 08 	sts	0x08F6, r18	; 0x8008f6 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
    ///
    *start = menu_slider_data_current[args];
    52a4:	a4 2f       	mov	r26, r20
    52a6:	b0 e0       	ldi	r27, 0x00	; 0
    52a8:	af 50       	subi	r26, 0x0F	; 15
    52aa:	b7 4f       	sbci	r27, 0xF7	; 247
    52ac:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5173
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    52ae:	62 2f       	mov	r22, r18
    52b0:	70 e0       	ldi	r23, 0x00	; 0
    52b2:	49 2f       	mov	r20, r25
    52b4:	50 e0       	ldi	r21, 0x00	; 0
    52b6:	db 01       	movw	r26, r22
    52b8:	a3 0f       	add	r26, r19
    52ba:	b1 1d       	adc	r27, r1
    52bc:	4a 17       	cp	r20, r26
    52be:	5b 07       	cpc	r21, r27
    52c0:	6c f0       	brlt	.+26     	; 0x52dc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    52c2:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5175
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    52c4:	80 81       	ld	r24, Z
    52c6:	98 17       	cp	r25, r24
    52c8:	08 f4       	brcc	.+2      	; 0x52cc <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5176
      *start = menu_slider_data_max;
    52ca:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5179
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    52cc:	29 17       	cp	r18, r25
    52ce:	78 f4       	brcc	.+30     	; 0x52ee <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5178
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    52d0:	80 81       	ld	r24, Z
    52d2:	28 0f       	add	r18, r24
    52d4:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5182
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    52d6:	df 91       	pop	r29
    52d8:	cf 91       	pop	r28
    52da:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5173
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    52dc:	48 1b       	sub	r20, r24
    52de:	51 09       	sbc	r21, r1
    52e0:	64 17       	cp	r22, r20
    52e2:	75 07       	cpc	r23, r21
    52e4:	74 f7       	brge	.-36     	; 0x52c2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5174
      *start = menu_slider_data_max - max_element;
    52e6:	89 2f       	mov	r24, r25
    52e8:	82 1b       	sub	r24, r18
    52ea:	80 83       	st	Z, r24
    52ec:	eb cf       	rjmp	.-42     	; 0x52c4 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5180
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    52ee:	98 83       	st	Y, r25
    52f0:	f2 cf       	rjmp	.-28     	; 0x52d6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

000052f2 <display_function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5160
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    52f2:	e8 2f       	mov	r30, r24
    52f4:	f0 e0       	ldi	r31, 0x00	; 0
    52f6:	ef 50       	subi	r30, 0x0F	; 15
    52f8:	f7 4f       	sbci	r31, 0xF7	; 247
    52fa:	80 81       	ld	r24, Z
    52fc:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <menu_slider_data_min>
    5300:	98 17       	cp	r25, r24
    5302:	10 f4       	brcc	.+4      	; 0x5308 <display_function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5161
    menu_slider_data_current[args1]--;
    5304:	81 50       	subi	r24, 0x01	; 1
    5306:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5162
}
    5308:	08 95       	ret

0000530a <display_function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5154
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    530a:	e8 2f       	mov	r30, r24
    530c:	f0 e0       	ldi	r31, 0x00	; 0
    530e:	ef 50       	subi	r30, 0x0F	; 15
    5310:	f7 4f       	sbci	r31, 0xF7	; 247
    5312:	80 81       	ld	r24, Z
    5314:	20 91 f8 08 	lds	r18, 0x08F8	; 0x8008f8 <menu_slider_data_max>
    5318:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <menu_slider_data_max_element>
    531c:	29 1b       	sub	r18, r25
    531e:	33 0b       	sbc	r19, r19
    5320:	82 17       	cp	r24, r18
    5322:	13 06       	cpc	r1, r19
    5324:	14 f4       	brge	.+4      	; 0x532a <display_function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5155
    menu_slider_data_current[args1]++;
    5326:	8f 5f       	subi	r24, 0xFF	; 255
    5328:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5156
}
    532a:	08 95       	ret

0000532c <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4040
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    532c:	83 30       	cpi	r24, 0x03	; 3
    532e:	41 f4       	brne	.+16     	; 0x5340 <a2d_complete(unsigned char, unsigned int)+0x14>
    5330:	70 93 62 0a 	sts	0x0A62, r23	; 0x800a62 <proud+0x1>
    5334:	60 93 61 0a 	sts	0x0A61, r22	; 0x800a61 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4045
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    5338:	81 e0       	ldi	r24, 0x01	; 1
    533a:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4046
}
    533e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    5340:	86 30       	cpi	r24, 0x06	; 6
    5342:	29 f4       	brne	.+10     	; 0x534e <a2d_complete(unsigned char, unsigned int)+0x22>
    5344:	70 93 68 0a 	sts	0x0A68, r23	; 0x800a68 <tritri+0x1>
    5348:	60 93 67 0a 	sts	0x0A67, r22	; 0x800a67 <tritri>
    534c:	f5 cf       	rjmp	.-22     	; 0x5338 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4042
  if (channel == A_PETV) petnula = data;
    534e:	85 30       	cpi	r24, 0x05	; 5
    5350:	29 f4       	brne	.+10     	; 0x535c <a2d_complete(unsigned char, unsigned int)+0x30>
    5352:	70 93 66 0a 	sts	0x0A66, r23	; 0x800a66 <petnula+0x1>
    5356:	60 93 65 0a 	sts	0x0A65, r22	; 0x800a65 <petnula>
    535a:	ee cf       	rjmp	.-36     	; 0x5338 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4043
  if (channel == A_DVANACTV) dvanact = data;
    535c:	84 30       	cpi	r24, 0x04	; 4
    535e:	29 f4       	brne	.+10     	; 0x536a <a2d_complete(unsigned char, unsigned int)+0x3e>
    5360:	70 93 64 0a 	sts	0x0A64, r23	; 0x800a64 <dvanact+0x1>
    5364:	60 93 63 0a 	sts	0x0A63, r22	; 0x800a63 <dvanact>
    5368:	e7 cf       	rjmp	.-50     	; 0x5338 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044
  if (channel == A_LIGHT) light_curr = data;
    536a:	87 30       	cpi	r24, 0x07	; 7
    536c:	29 f7       	brne	.-54     	; 0x5338 <a2d_complete(unsigned char, unsigned int)+0xc>
    536e:	70 93 2c 0b 	sts	0x0B2C, r23	; 0x800b2c <light_curr+0x1>
    5372:	60 93 2b 0b 	sts	0x0B2B, r22	; 0x800b2b <light_curr>
    5376:	e0 cf       	rjmp	.-64     	; 0x5338 <a2d_complete(unsigned char, unsigned int)+0xc>

00005378 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    5378:	08 95       	ret

0000537a <menu_redraw_update_temp(unsigned char, unsigned char)>:
_Z23menu_redraw_update_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
  return 0;
}

uint8_t menu_redraw_update_temp(uint8_t args1, uint8_t args2)
{
  if (menu_redraw10s == 1)
    537a:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <menu_redraw10s>
    537e:	81 30       	cpi	r24, 0x01	; 1
    5380:	19 f4       	brne	.+6      	; 0x5388 <menu_redraw_update_temp(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
  {
    menu_redraw10s = 0;
    5382:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <menu_redraw10s>
    5386:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
    return 1;
  }
  return 0;
    5388:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
}
    538a:	08 95       	ret

0000538c <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    538c:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <change_term_mode>
    5390:	81 30       	cpi	r24, 0x01	; 1
    5392:	19 f4       	brne	.+6      	; 0x539a <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
  {
    change_term_mode = 0;
    5394:	10 92 28 09 	sts	0x0928, r1	; 0x800928 <change_term_mode>
    5398:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
    return 1;
  }
  return 0;
    539a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
}
    539c:	08 95       	ret

0000539e <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    539e:	80 91 30 0b 	lds	r24, 0x0B30	; 0x800b30 <menu_redraw05s>
    53a2:	81 30       	cpi	r24, 0x01	; 1
    53a4:	19 f4       	brne	.+6      	; 0x53ac <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
  {
    menu_redraw05s = 0;
    53a6:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <menu_redraw05s>
    53aa:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
    return 1;
  }
  return 0;
    53ac:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
}
    53ae:	08 95       	ret

000053b0 <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    53b0:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2638
}
    53b4:	08 95       	ret

000053b6 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    53b6:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <__data_end>
    53ba:	83 30       	cpi	r24, 0x03	; 3
    53bc:	08 f0       	brcs	.+2      	; 0x53c0 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    53be:	08 95       	ret
    53c0:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    53c2:	08 95       	ret

000053c4 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    53c4:	0f 93       	push	r16
    53c6:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    53c8:	90 91 56 08 	lds	r25, 0x0856	; 0x800856 <__data_end>
    53cc:	91 11       	cpse	r25, r1
    53ce:	0c c0       	rjmp	.+24     	; 0x53e8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    53d0:	e8 2f       	mov	r30, r24
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	e7 52       	subi	r30, 0x27	; 39
    53d6:	f6 4c       	sbci	r31, 0xC6	; 198
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    53d8:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
  line1[0] = znak;
    53da:	d9 01       	movw	r26, r18
    53dc:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605
  line2[0] = 0;
    53de:	f8 01       	movw	r30, r16
    53e0:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
}
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    53e8:	91 30       	cpi	r25, 0x01	; 1
    53ea:	29 f4       	brne	.+10     	; 0x53f6 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    53ec:	e8 2f       	mov	r30, r24
    53ee:	f0 e0       	ldi	r31, 0x00	; 0
    53f0:	e1 54       	subi	r30, 0x41	; 65
    53f2:	f6 4c       	sbci	r31, 0xC6	; 198
    53f4:	f1 cf       	rjmp	.-30     	; 0x53d8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    53f6:	92 30       	cpi	r25, 0x02	; 2
    53f8:	81 f7       	brne	.-32     	; 0x53da <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2603
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    53fa:	e8 2f       	mov	r30, r24
    53fc:	f0 e0       	ldi	r31, 0x00	; 0
    53fe:	eb 55       	subi	r30, 0x5B	; 91
    5400:	f6 4c       	sbci	r31, 0xC6	; 198
    5402:	ea cf       	rjmp	.-44     	; 0x53d8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

00005404 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    5404:	0f 93       	push	r16
    5406:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    5408:	8a 30       	cpi	r24, 0x0A	; 10
    540a:	41 f0       	breq	.+16     	; 0x541c <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    540c:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
  if (args1 == 10) line1[0] = '.';
    540e:	f9 01       	movw	r30, r18
    5410:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2591
  line2[0] = 0;
    5412:	f8 01       	movw	r30, r16
    5414:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
}
    5416:	1f 91       	pop	r17
    5418:	0f 91       	pop	r16
    541a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    541c:	8e e2       	ldi	r24, 0x2E	; 46
    541e:	f7 cf       	rjmp	.-18     	; 0x540e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>

00005420 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2569
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 11;
}
    5420:	8b e0       	ldi	r24, 0x0B	; 11
    5422:	08 95       	ret

00005424 <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    5424:	81 e0       	ldi	r24, 0x01	; 1
    5426:	08 95       	ret

00005428 <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)>:
_Z34display_function_set_variable_plushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint8_t idx, uint8_t args2, uint8_t args3)
{
    5428:	cf 92       	push	r12
    542a:	df 92       	push	r13
    542c:	ef 92       	push	r14
    542e:	ff 92       	push	r15
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    5434:	95 e1       	ldi	r25, 0x15	; 21
    5436:	89 9f       	mul	r24, r25
    5438:	e0 01       	movw	r28, r0
    543a:	11 24       	eor	r1, r1
    543c:	c3 56       	subi	r28, 0x63	; 99
    543e:	d7 4f       	sbci	r29, 0xF7	; 247
    5440:	2e 85       	ldd	r18, Y+14	; 0x0e
    5442:	3f 85       	ldd	r19, Y+15	; 0x0f
    5444:	48 89       	ldd	r20, Y+16	; 0x10
    5446:	59 89       	ldd	r21, Y+17	; 0x11
    5448:	68 81       	ld	r22, Y
    544a:	79 81       	ldd	r23, Y+1	; 0x01
    544c:	8a 81       	ldd	r24, Y+2	; 0x02
    544e:	9b 81       	ldd	r25, Y+3	; 0x03
    5450:	0e 94 cd bb 	call	0x1779a	; 0x1779a <__addsf3>
    5454:	6b 01       	movw	r12, r22
    5456:	7c 01       	movw	r14, r24
    5458:	2c 81       	ldd	r18, Y+4	; 0x04
    545a:	3d 81       	ldd	r19, Y+5	; 0x05
    545c:	4e 81       	ldd	r20, Y+6	; 0x06
    545e:	5f 81       	ldd	r21, Y+7	; 0x07
    5460:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
    5464:	18 16       	cp	r1, r24
    5466:	cc f0       	brlt	.+50     	; 0x549a <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    5468:	c8 82       	st	Y, r12
    546a:	d9 82       	std	Y+1, r13	; 0x01
    546c:	ea 82       	std	Y+2, r14	; 0x02
    546e:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    5470:	8c 85       	ldd	r24, Y+12	; 0x0c
    5472:	81 30       	cpi	r24, 0x01	; 1
    5474:	91 f4       	brne	.+36     	; 0x549a <display_function_set_variable_plus(unsigned char, unsigned char, unsigned char)+0x72>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    5476:	c7 01       	movw	r24, r14
    5478:	b6 01       	movw	r22, r12
    547a:	0e 94 ab bc 	call	0x17956	; 0x17956 <__fixsfsi>
    547e:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    5480:	8a 89       	ldd	r24, Y+18	; 0x12
    5482:	eb 89       	ldd	r30, Y+19	; 0x13
    5484:	fc 89       	ldd	r31, Y+20	; 0x14
    5486:	b7 01       	movw	r22, r14
    5488:	a6 01       	movw	r20, r12
    548a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
    }
  }
}
    548c:	df 91       	pop	r29
    548e:	cf 91       	pop	r28
    5490:	ff 90       	pop	r15
    5492:	ef 90       	pop	r14
    5494:	df 90       	pop	r13
    5496:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    5498:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
    }
  }
}
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	ff 90       	pop	r15
    54a0:	ef 90       	pop	r14
    54a2:	df 90       	pop	r13
    54a4:	cf 90       	pop	r12
    54a6:	08 95       	ret

000054a8 <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)>:
_Z35display_function_set_variable_minushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint8_t idx, uint8_t args2, uint8_t args3)
{
    54a8:	cf 92       	push	r12
    54aa:	df 92       	push	r13
    54ac:	ef 92       	push	r14
    54ae:	ff 92       	push	r15
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    54b4:	95 e1       	ldi	r25, 0x15	; 21
    54b6:	89 9f       	mul	r24, r25
    54b8:	e0 01       	movw	r28, r0
    54ba:	11 24       	eor	r1, r1
    54bc:	c3 56       	subi	r28, 0x63	; 99
    54be:	d7 4f       	sbci	r29, 0xF7	; 247
    54c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    54c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    54c4:	48 89       	ldd	r20, Y+16	; 0x10
    54c6:	59 89       	ldd	r21, Y+17	; 0x11
    54c8:	68 81       	ld	r22, Y
    54ca:	79 81       	ldd	r23, Y+1	; 0x01
    54cc:	8a 81       	ldd	r24, Y+2	; 0x02
    54ce:	9b 81       	ldd	r25, Y+3	; 0x03
    54d0:	0e 94 cc bb 	call	0x17798	; 0x17798 <__subsf3>
    54d4:	6b 01       	movw	r12, r22
    54d6:	7c 01       	movw	r14, r24
    54d8:	28 85       	ldd	r18, Y+8	; 0x08
    54da:	39 85       	ldd	r19, Y+9	; 0x09
    54dc:	4a 85       	ldd	r20, Y+10	; 0x0a
    54de:	5b 85       	ldd	r21, Y+11	; 0x0b
    54e0:	0e 94 e1 bc 	call	0x179c2	; 0x179c2 <__gesf2>
    54e4:	87 fd       	sbrc	r24, 7
    54e6:	19 c0       	rjmp	.+50     	; 0x551a <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    54e8:	c8 82       	st	Y, r12
    54ea:	d9 82       	std	Y+1, r13	; 0x01
    54ec:	ea 82       	std	Y+2, r14	; 0x02
    54ee:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    54f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    54f2:	81 30       	cpi	r24, 0x01	; 1
    54f4:	91 f4       	brne	.+36     	; 0x551a <display_function_set_variable_minus(unsigned char, unsigned char, unsigned char)+0x72>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
    54f6:	c7 01       	movw	r24, r14
    54f8:	b6 01       	movw	r22, r12
    54fa:	0e 94 ab bc 	call	0x17956	; 0x17956 <__fixsfsi>
    54fe:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minushhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    5500:	8a 89       	ldd	r24, Y+18	; 0x12
    5502:	eb 89       	ldd	r30, Y+19	; 0x13
    5504:	fc 89       	ldd	r31, Y+20	; 0x14
    5506:	b7 01       	movw	r22, r14
    5508:	a6 01       	movw	r20, r12
    550a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
    }
  }
}
    550c:	df 91       	pop	r29
    550e:	cf 91       	pop	r28
    5510:	ff 90       	pop	r15
    5512:	ef 90       	pop	r14
    5514:	df 90       	pop	r13
    5516:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    5518:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
    }
  }
}
    551a:	df 91       	pop	r29
    551c:	cf 91       	pop	r28
    551e:	ff 90       	pop	r15
    5520:	ef 90       	pop	r14
    5522:	df 90       	pop	r13
    5524:	cf 90       	pop	r12
    5526:	08 95       	ret

00005528 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382
}



void preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    5528:	4f 92       	push	r4
    552a:	5f 92       	push	r5
    552c:	6f 92       	push	r6
    552e:	7f 92       	push	r7
    5530:	8f 92       	push	r8
    5532:	9f 92       	push	r9
    5534:	af 92       	push	r10
    5536:	bf 92       	push	r11
    5538:	cf 92       	push	r12
    553a:	df 92       	push	r13
    553c:	ef 92       	push	r14
    553e:	ff 92       	push	r15
    5540:	cf 93       	push	r28
    5542:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
  //saric
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
    5544:	d0 91 69 0a 	lds	r29, 0x0A69	; 0x800a69 <default_ring>
thermostat_get_pid_p():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    5548:	2d 2f       	mov	r18, r29
    554a:	30 e0       	ldi	r19, 0x00	; 0
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    554c:	ed e9       	ldi	r30, 0x9D	; 157
    554e:	f8 e0       	ldi	r31, 0x08	; 8
thermostat_get_pid_p():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:65
    5550:	c9 01       	movw	r24, r18
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	88 0f       	add	r24, r24
    5558:	99 1f       	adc	r25, r25
    555a:	dc 01       	movw	r26, r24
    555c:	ae 52       	subi	r26, 0x2E	; 46
    555e:	b6 4f       	sbci	r27, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    5560:	4d 91       	ld	r20, X+
    5562:	5d 91       	ld	r21, X+
    5564:	6d 91       	ld	r22, X+
    5566:	7c 91       	ld	r23, X
    5568:	40 83       	st	Z, r20
    556a:	51 83       	std	Z+1, r21	; 0x01
    556c:	62 83       	std	Z+2, r22	; 0x02
    556e:	73 83       	std	Z+3, r23	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  menu_dialog_variable[idx].variable_min = min;
    5570:	81 2c       	mov	r8, r1
    5572:	91 2c       	mov	r9, r1
    5574:	50 e2       	ldi	r21, 0x20	; 32
    5576:	a5 2e       	mov	r10, r21
    5578:	51 ec       	ldi	r21, 0xC1	; 193
    557a:	b5 2e       	mov	r11, r21
    557c:	80 86       	std	Z+8, r8	; 0x08
    557e:	91 86       	std	Z+9, r9	; 0x09
    5580:	a2 86       	std	Z+10, r10	; 0x0a
    5582:	b3 86       	std	Z+11, r11	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    5584:	c1 2c       	mov	r12, r1
    5586:	d1 2c       	mov	r13, r1
    5588:	60 e2       	ldi	r22, 0x20	; 32
    558a:	e6 2e       	mov	r14, r22
    558c:	61 e4       	ldi	r22, 0x41	; 65
    558e:	f6 2e       	mov	r15, r22
    5590:	c4 82       	std	Z+4, r12	; 0x04
    5592:	d5 82       	std	Z+5, r13	; 0x05
    5594:	e6 82       	std	Z+6, r14	; 0x06
    5596:	f7 82       	std	Z+7, r15	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    5598:	4d ec       	ldi	r20, 0xCD	; 205
    559a:	5c ec       	ldi	r21, 0xCC	; 204
    559c:	6c ec       	ldi	r22, 0xCC	; 204
    559e:	7d e3       	ldi	r23, 0x3D	; 61
    55a0:	46 87       	std	Z+14, r20	; 0x0e
    55a2:	57 87       	std	Z+15, r21	; 0x0f
    55a4:	60 8b       	std	Z+16, r22	; 0x10
    55a6:	71 8b       	std	Z+17, r23	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    55a8:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    55aa:	d2 8b       	std	Z+18, r29	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    55ac:	c1 e0       	ldi	r28, 0x01	; 1
    55ae:	c4 87       	std	Z+12, r28	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    55b0:	ac e4       	ldi	r26, 0x4C	; 76
    55b2:	b7 e5       	ldi	r27, 0x57	; 87
    55b4:	b4 8b       	std	Z+20, r27	; 0x14
    55b6:	a3 8b       	std	Z+19, r26	; 0x13
thermostat_get_pid_i():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    55b8:	dc 01       	movw	r26, r24
    55ba:	aa 51       	subi	r26, 0x1A	; 26
    55bc:	b6 4f       	sbci	r27, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    55be:	4d 90       	ld	r4, X+
    55c0:	5d 90       	ld	r5, X+
    55c2:	6d 90       	ld	r6, X+
    55c4:	7c 90       	ld	r7, X
    55c6:	45 8a       	std	Z+21, r4	; 0x15
    55c8:	56 8a       	std	Z+22, r5	; 0x16
    55ca:	67 8a       	std	Z+23, r6	; 0x17
    55cc:	70 8e       	std	Z+24, r7	; 0x18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  menu_dialog_variable[idx].variable_min = min;
    55ce:	85 8e       	std	Z+29, r8	; 0x1d
    55d0:	96 8e       	std	Z+30, r9	; 0x1e
    55d2:	a7 8e       	std	Z+31, r10	; 0x1f
    55d4:	b0 a2       	std	Z+32, r11	; 0x20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    55d6:	c1 8e       	std	Z+25, r12	; 0x19
    55d8:	d2 8e       	std	Z+26, r13	; 0x1a
    55da:	e3 8e       	std	Z+27, r14	; 0x1b
    55dc:	f4 8e       	std	Z+28, r15	; 0x1c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    55de:	43 a3       	std	Z+35, r20	; 0x23
    55e0:	54 a3       	std	Z+36, r21	; 0x24
    55e2:	65 a3       	std	Z+37, r22	; 0x25
    55e4:	76 a3       	std	Z+38, r23	; 0x26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    55e6:	12 a2       	std	Z+34, r1	; 0x22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    55e8:	d7 a3       	std	Z+39, r29	; 0x27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    55ea:	c1 a3       	std	Z+33, r28	; 0x21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    55ec:	a9 e3       	ldi	r26, 0x39	; 57
    55ee:	b7 e5       	ldi	r27, 0x57	; 87
    55f0:	b1 a7       	std	Z+41, r27	; 0x29
    55f2:	a0 a7       	std	Z+40, r26	; 0x28
thermostat_get_pid_d():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    55f4:	86 50       	subi	r24, 0x06	; 6
    55f6:	96 4f       	sbci	r25, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    55f8:	dc 01       	movw	r26, r24
    55fa:	4d 90       	ld	r4, X+
    55fc:	5d 90       	ld	r5, X+
    55fe:	6d 90       	ld	r6, X+
    5600:	7c 90       	ld	r7, X
    5602:	42 a6       	std	Z+42, r4	; 0x2a
    5604:	53 a6       	std	Z+43, r5	; 0x2b
    5606:	64 a6       	std	Z+44, r6	; 0x2c
    5608:	75 a6       	std	Z+45, r7	; 0x2d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  menu_dialog_variable[idx].variable_min = min;
    560a:	82 aa       	std	Z+50, r8	; 0x32
    560c:	93 aa       	std	Z+51, r9	; 0x33
    560e:	a4 aa       	std	Z+52, r10	; 0x34
    5610:	b5 aa       	std	Z+53, r11	; 0x35
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    5612:	c6 a6       	std	Z+46, r12	; 0x2e
    5614:	d7 a6       	std	Z+47, r13	; 0x2f
    5616:	e0 aa       	std	Z+48, r14	; 0x30
    5618:	f1 aa       	std	Z+49, r15	; 0x31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    561a:	40 af       	std	Z+56, r20	; 0x38
    561c:	51 af       	std	Z+57, r21	; 0x39
    561e:	62 af       	std	Z+58, r22	; 0x3a
    5620:	73 af       	std	Z+59, r23	; 0x3b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    5622:	17 aa       	std	Z+55, r1	; 0x37
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    5624:	d4 af       	std	Z+60, r29	; 0x3c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    5626:	c6 ab       	std	Z+54, r28	; 0x36
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    5628:	86 e2       	ldi	r24, 0x26	; 38
    562a:	97 e5       	ldi	r25, 0x57	; 87
    562c:	96 af       	std	Z+62, r25	; 0x3e
    562e:	85 af       	std	Z+61, r24	; 0x3d
thermostat_get_pid_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    5630:	22 5f       	subi	r18, 0xF2	; 242
    5632:	35 4f       	sbci	r19, 0xF5	; 245
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
{
  //saric
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(default_ring),  1, 254, 2, default_ring, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
    5634:	f9 01       	movw	r30, r18
    5636:	60 81       	ld	r22, Z
    5638:	70 e0       	ldi	r23, 0x00	; 0
    563a:	90 e0       	ldi	r25, 0x00	; 0
    563c:	80 e0       	ldi	r24, 0x00	; 0
    563e:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    5642:	60 93 dc 08 	sts	0x08DC, r22	; 0x8008dc <menu_dialog_variable+0x3f>
    5646:	70 93 dd 08 	sts	0x08DD, r23	; 0x8008dd <menu_dialog_variable+0x40>
    564a:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <menu_dialog_variable+0x41>
    564e:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <menu_dialog_variable+0x42>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	a0 e8       	ldi	r26, 0x80	; 128
    5658:	bf e3       	ldi	r27, 0x3F	; 63
    565a:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <menu_dialog_variable+0x47>
    565e:	90 93 e5 08 	sts	0x08E5, r25	; 0x8008e5 <menu_dialog_variable+0x48>
    5662:	a0 93 e6 08 	sts	0x08E6, r26	; 0x8008e6 <menu_dialog_variable+0x49>
    5666:	b0 93 e7 08 	sts	0x08E7, r27	; 0x8008e7 <menu_dialog_variable+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	ae e7       	ldi	r26, 0x7E	; 126
    5670:	b3 e4       	ldi	r27, 0x43	; 67
    5672:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <menu_dialog_variable+0x43>
    5676:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <menu_dialog_variable+0x44>
    567a:	a0 93 e2 08 	sts	0x08E2, r26	; 0x8008e2 <menu_dialog_variable+0x45>
    567e:	b0 93 e3 08 	sts	0x08E3, r27	; 0x8008e3 <menu_dialog_variable+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    5682:	80 e0       	ldi	r24, 0x00	; 0
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	a0 e0       	ldi	r26, 0x00	; 0
    5688:	b0 e4       	ldi	r27, 0x40	; 64
    568a:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <menu_dialog_variable+0x4d>
    568e:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <menu_dialog_variable+0x4e>
    5692:	a0 93 ec 08 	sts	0x08EC, r26	; 0x8008ec <menu_dialog_variable+0x4f>
    5696:	b0 93 ed 08 	sts	0x08ED, r27	; 0x8008ed <menu_dialog_variable+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    569a:	c0 93 e9 08 	sts	0x08E9, r28	; 0x8008e9 <menu_dialog_variable+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    569e:	d0 93 ee 08 	sts	0x08EE, r29	; 0x8008ee <menu_dialog_variable+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    56a2:	c0 93 e8 08 	sts	0x08E8, r28	; 0x8008e8 <menu_dialog_variable+0x4b>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    56a6:	89 e1       	ldi	r24, 0x19	; 25
    56a8:	97 e5       	ldi	r25, 0x57	; 87
    56aa:	90 93 f0 08 	sts	0x08F0, r25	; 0x8008f0 <menu_dialog_variable+0x53>
    56ae:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
  //saric
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(default_ring),  1, 254, 2, default_ring, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
}
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	ff 90       	pop	r15
    56b8:	ef 90       	pop	r14
    56ba:	df 90       	pop	r13
    56bc:	cf 90       	pop	r12
    56be:	bf 90       	pop	r11
    56c0:	af 90       	pop	r10
    56c2:	9f 90       	pop	r9
    56c4:	8f 90       	pop	r8
    56c6:	7f 90       	pop	r7
    56c8:	6f 90       	pop	r6
    56ca:	5f 90       	pop	r5
    56cc:	4f 90       	pop	r4
    56ce:	08 95       	ret

000056d0 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    56d0:	ff 92       	push	r15
    56d2:	0f 93       	push	r16
    56d4:	1f 93       	push	r17
    56d6:	cf 93       	push	r28
    56d8:	df 93       	push	r29
    56da:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    56dc:	20 91 27 09 	lds	r18, 0x0927	; 0x800927 <MenuHistoryIndex>
    56e0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	6e e4       	ldi	r22, 0x4E	; 78
    56e6:	76 e0       	ldi	r23, 0x06	; 6
    56e8:	ca ed       	ldi	r28, 0xDA	; 218
    56ea:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    56ec:	89 01       	movw	r16, r18
    56ee:	09 5a       	subi	r16, 0xA9	; 169
    56f0:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    56f2:	fb 01       	movw	r30, r22
    56f4:	84 91       	lpm	r24, Z
    56f6:	98 17       	cp	r25, r24
    56f8:	e8 f4       	brcc	.+58     	; 0x5734 <MenuHistoryGetMenu(unsigned char*)+0x64>
    56fa:	9c 9f       	mul	r25, r28
    56fc:	a0 01       	movw	r20, r0
    56fe:	9d 9f       	mul	r25, r29
    5700:	50 0d       	add	r21, r0
    5702:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5704:	fa 01       	movw	r30, r20
    5706:	ea 5e       	subi	r30, 0xEA	; 234
    5708:	f6 4f       	sbci	r31, 0xF6	; 246
    570a:	f4 90       	lpm	r15, Z
    570c:	f8 01       	movw	r30, r16
    570e:	80 81       	ld	r24, Z
    5710:	8f 11       	cpse	r24, r15
    5712:	0e c0       	rjmp	.+28     	; 0x5730 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    5714:	4f 5a       	subi	r20, 0xAF	; 175
    5716:	59 4f       	sbci	r21, 0xF9	; 249
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    5718:	23 5e       	subi	r18, 0xE3	; 227
    571a:	36 4f       	sbci	r19, 0xF6	; 246
    571c:	f9 01       	movw	r30, r18
    571e:	20 81       	ld	r18, Z
    5720:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
      return menus;
    }
  }
}
    5722:	ca 01       	movw	r24, r20
    5724:	df 91       	pop	r29
    5726:	cf 91       	pop	r28
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	ff 90       	pop	r15
    572e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    5730:	9f 5f       	subi	r25, 0xFF	; 255
    5732:	df cf       	rjmp	.-66     	; 0x56f2 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	6f e4       	ldi	r22, 0x4F	; 79
    5738:	76 e0       	ldi	r23, 0x06	; 6
    573a:	ca ed       	ldi	r28, 0xDA	; 218
    573c:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    573e:	89 01       	movw	r16, r18
    5740:	09 5a       	subi	r16, 0xA9	; 169
    5742:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    5744:	fb 01       	movw	r30, r22
    5746:	84 91       	lpm	r24, Z
    5748:	98 17       	cp	r25, r24
    574a:	90 f4       	brcc	.+36     	; 0x5770 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    574c:	9c 9f       	mul	r25, r28
    574e:	a0 01       	movw	r20, r0
    5750:	9d 9f       	mul	r25, r29
    5752:	50 0d       	add	r21, r0
    5754:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5756:	fa 01       	movw	r30, r20
    5758:	ee 5c       	subi	r30, 0xCE	; 206
    575a:	f5 4e       	sbci	r31, 0xE5	; 229
    575c:	f4 90       	lpm	r15, Z
    575e:	f8 01       	movw	r30, r16
    5760:	80 81       	ld	r24, Z
    5762:	8f 11       	cpse	r24, r15
    5764:	03 c0       	rjmp	.+6      	; 0x576c <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2320
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    5766:	43 59       	subi	r20, 0x93	; 147
    5768:	58 4e       	sbci	r21, 0xE8	; 232
    576a:	d6 cf       	rjmp	.-84     	; 0x5718 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    576c:	9f 5f       	subi	r25, 0xFF	; 255
    576e:	ea cf       	rjmp	.-44     	; 0x5744 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	60 e5       	ldi	r22, 0x50	; 80
    5774:	76 e0       	ldi	r23, 0x06	; 6
    5776:	ca ed       	ldi	r28, 0xDA	; 218
    5778:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    577a:	89 01       	movw	r16, r18
    577c:	09 5a       	subi	r16, 0xA9	; 169
    577e:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    5780:	fb 01       	movw	r30, r22
    5782:	84 91       	lpm	r24, Z
    5784:	98 17       	cp	r25, r24
    5786:	68 f6       	brcc	.-102    	; 0x5722 <MenuHistoryGetMenu(unsigned char*)+0x52>
    5788:	9c 9f       	mul	r25, r28
    578a:	a0 01       	movw	r20, r0
    578c:	9d 9f       	mul	r25, r29
    578e:	50 0d       	add	r21, r0
    5790:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    5792:	fa 01       	movw	r30, r20
    5794:	e2 5b       	subi	r30, 0xB2	; 178
    5796:	f4 4d       	sbci	r31, 0xD4	; 212
    5798:	f4 90       	lpm	r15, Z
    579a:	f8 01       	movw	r30, r16
    579c:	80 81       	ld	r24, Z
    579e:	8f 11       	cpse	r24, r15
    57a0:	03 c0       	rjmp	.+6      	; 0x57a8 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    57a2:	47 57       	subi	r20, 0x77	; 119
    57a4:	57 4d       	sbci	r21, 0xD7	; 215
    57a6:	b8 cf       	rjmp	.-144    	; 0x5718 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    57a8:	9f 5f       	subi	r25, 0xFF	; 255
    57aa:	ea cf       	rjmp	.-44     	; 0x5780 <MenuHistoryGetMenu(unsigned char*)+0xb0>

000057ac <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1737




bool enable_redraw(uint8_t mask, uint8_t data)
{
    57ac:	30 e0       	ldi	r19, 0x00	; 0
    57ae:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    57b0:	e1 e0       	ldi	r30, 0x01	; 1
    57b2:	f0 e0       	ldi	r31, 0x00	; 0
    57b4:	af 01       	movw	r20, r30
    57b6:	02 2e       	mov	r0, r18
    57b8:	01 c0       	rjmp	.+2      	; 0x57bc <enable_redraw(unsigned char, unsigned char)+0x10>
    57ba:	44 0f       	add	r20, r20
    57bc:	0a 94       	dec	r0
    57be:	ea f7       	brpl	.-6      	; 0x57ba <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
    if ( (mask & v) != 0 )
    57c0:	98 2f       	mov	r25, r24
    57c2:	94 23       	and	r25, r20
    57c4:	11 f0       	breq	.+4      	; 0x57ca <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1743
      if ( (data & v) != 0)
    57c6:	46 23       	and	r20, r22
    57c8:	39 f4       	brne	.+14     	; 0x57d8 <enable_redraw(unsigned char, unsigned char)+0x2c>
    57ca:	2f 5f       	subi	r18, 0xFF	; 255
    57cc:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1739


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    57ce:	28 30       	cpi	r18, 0x08	; 8
    57d0:	31 05       	cpc	r19, r1
    57d2:	81 f7       	brne	.-32     	; 0x57b4 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    57d4:	80 e0       	ldi	r24, 0x00	; 0
    57d6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1745
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    57d8:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1750
        break;
      }
  }
  return ret;
}
    57da:	08 95       	ret

000057dc <display_enable_show(unsigned char, unsigned char)>:
_Z19display_enable_showhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
  return 0;
}
uint8_t display_enable_show(uint8_t args1, uint8_t args2)
{
  return 1;
}
    57dc:	81 e0       	ldi	r24, 0x01	; 1
    57de:	08 95       	ret

000057e0 <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1721
void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2)
{
  return 0;
}
    57e0:	80 e0       	ldi	r24, 0x00	; 0
    57e2:	08 95       	ret

000057e4 <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1716





void nullfce(void) {};
    57e4:	08 95       	ret

000057e6 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    57e6:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    57e8:	86 81       	ldd	r24, Z+6	; 0x06
    57ea:	97 81       	ldd	r25, Z+7	; 0x07
    57ec:	68 0f       	add	r22, r24
    57ee:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    57f0:	24 81       	ldd	r18, Z+4	; 0x04
    57f2:	35 81       	ldd	r19, Z+5	; 0x05
    57f4:	26 17       	cp	r18, r22
    57f6:	37 07       	cpc	r19, r23
    57f8:	38 f0       	brcs	.+14     	; 0x5808 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    57fa:	22 81       	ldd	r18, Z+2	; 0x02
    57fc:	33 81       	ldd	r19, Z+3	; 0x03
    57fe:	82 0f       	add	r24, r18
    5800:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    5802:	77 83       	std	Z+7, r23	; 0x07
    5804:	66 83       	std	Z+6, r22	; 0x06
    5806:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    580c:	08 95       	ret

0000580e <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    580e:	0f 93       	push	r16
    5810:	1f 93       	push	r17
    5812:	cf 93       	push	r28
    5814:	df 93       	push	r29
    5816:	1f 92       	push	r1
    5818:	cd b7       	in	r28, 0x3d	; 61
    581a:	de b7       	in	r29, 0x3e	; 62
    581c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    581e:	dc 01       	movw	r26, r24
    5820:	ed 91       	ld	r30, X+
    5822:	fc 91       	ld	r31, X
    5824:	00 84       	ldd	r0, Z+8	; 0x08
    5826:	f1 85       	ldd	r31, Z+9	; 0x09
    5828:	e0 2d       	mov	r30, r0
    582a:	19 95       	eicall
    582c:	89 2b       	or	r24, r25
    582e:	91 f0       	breq	.+36     	; 0x5854 <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    5830:	21 e0       	ldi	r18, 0x01	; 1
    5832:	41 e0       	ldi	r20, 0x01	; 1
    5834:	50 e0       	ldi	r21, 0x00	; 0
    5836:	be 01       	movw	r22, r28
    5838:	6f 5f       	subi	r22, 0xFF	; 255
    583a:	7f 4f       	sbci	r23, 0xFF	; 255
    583c:	f8 01       	movw	r30, r16
    583e:	84 85       	ldd	r24, Z+12	; 0x0c
    5840:	0e 94 f2 9f 	call	0x13fe4	; 0x13fe4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    5844:	89 81       	ldd	r24, Y+1	; 0x01
    5846:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    5848:	0f 90       	pop	r0
    584a:	df 91       	pop	r29
    584c:	cf 91       	pop	r28
    584e:	1f 91       	pop	r17
    5850:	0f 91       	pop	r16
    5852:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    5854:	8f ef       	ldi	r24, 0xFF	; 255
    5856:	9f ef       	ldi	r25, 0xFF	; 255
    5858:	f7 cf       	rjmp	.-18     	; 0x5848 <EthernetClient::peek()+0x3a>

0000585a <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    585a:	fc 01       	movw	r30, r24
    585c:	84 85       	ldd	r24, Z+12	; 0x0c
    585e:	0c 94 58 a0 	jmp	0x140b0	; 0x140b0 <recv(unsigned char, unsigned char*, int)>

00005862 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	1f 92       	push	r1
    5868:	cd b7       	in	r28, 0x3d	; 61
    586a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    586c:	41 e0       	ldi	r20, 0x01	; 1
    586e:	50 e0       	ldi	r21, 0x00	; 0
    5870:	be 01       	movw	r22, r28
    5872:	6f 5f       	subi	r22, 0xFF	; 255
    5874:	7f 4f       	sbci	r23, 0xFF	; 255
    5876:	fc 01       	movw	r30, r24
    5878:	84 85       	ldd	r24, Z+12	; 0x0c
    587a:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <recv(unsigned char, unsigned char*, int)>
    587e:	18 16       	cp	r1, r24
    5880:	19 06       	cpc	r1, r25
    5882:	34 f4       	brge	.+12     	; 0x5890 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    5884:	89 81       	ldd	r24, Y+1	; 0x01
    5886:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    5888:	0f 90       	pop	r0
    588a:	df 91       	pop	r29
    588c:	cf 91       	pop	r28
    588e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    5890:	8f ef       	ldi	r24, 0xFF	; 255
    5892:	9f ef       	ldi	r25, 0xFF	; 255
    5894:	f9 cf       	rjmp	.-14     	; 0x5888 <EthernetClient::read()+0x26>

00005896 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    5896:	fc 01       	movw	r30, r24
    5898:	84 85       	ldd	r24, Z+12	; 0x0c
    589a:	88 30       	cpi	r24, 0x08	; 8
    589c:	11 f0       	breq	.+4      	; 0x58a2 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    589e:	0c 94 41 90 	jmp	0x12082	; 0x12082 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	80 e0       	ldi	r24, 0x00	; 0
    58a6:	08 95       	ret

000058a8 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    58a8:	cf 93       	push	r28
    58aa:	df 93       	push	r29
    58ac:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    58ae:	61 e0       	ldi	r22, 0x01	; 1
    58b0:	8c 81       	ldd	r24, Y+4	; 0x04
    58b2:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    58b6:	60 e0       	ldi	r22, 0x00	; 0
    58b8:	8b 81       	ldd	r24, Y+3	; 0x03
    58ba:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    58be:	61 e0       	ldi	r22, 0x01	; 1
    58c0:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    58c2:	df 91       	pop	r29
    58c4:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    58c6:	0c 94 21 92 	jmp	0x12442	; 0x12442 <pinMode>

000058ca <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    58ca:	0f 93       	push	r16
    58cc:	1f 93       	push	r17
    58ce:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
  strcpy(line1, "Zapnuto 06:45");
    58d0:	63 ef       	ldi	r22, 0xF3	; 243
    58d2:	72 e0       	ldi	r23, 0x02	; 2
    58d4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2555
  line2[0] = 0;
    58d8:	f8 01       	movw	r30, r16
    58da:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
}
    58dc:	1f 91       	pop	r17
    58de:	0f 91       	pop	r16
    58e0:	08 95       	ret

000058e2 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z27button_get_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5943
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_get_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    58e2:	0f 93       	push	r16
    58e4:	1f 93       	push	r17
    58e6:	48 2f       	mov	r20, r24
    58e8:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5944
  if (args1 == 0)
    58ea:	41 11       	cpse	r20, r1
    58ec:	0b c0       	rjmp	.+22     	; 0x5904 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5946
  {
    strcpy_P(line1, text_button_term_off);
    58ee:	6c e4       	ldi	r22, 0x4C	; 76
    58f0:	7e e3       	ldi	r23, 0x3E	; 62
    58f2:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5947
    strcpy_P(line2, text_button_term_off_comment);
    58f6:	66 e3       	ldi	r22, 0x36	; 54
    58f8:	7e e3       	ldi	r23, 0x3E	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5967
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    58fa:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5969
  }
}
    58fc:	1f 91       	pop	r17
    58fe:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5967
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    5900:	0c 94 82 b1 	jmp	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5949
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    5904:	41 30       	cpi	r20, 0x01	; 1
    5906:	39 f4       	brne	.+14     	; 0x5916 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5951
  {
    strcpy_P(line1, text_button_term_max);
    5908:	62 e3       	ldi	r22, 0x32	; 50
    590a:	7e e3       	ldi	r23, 0x3E	; 62
    590c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5952
    strcpy_P(line2, text_button_term_max_comment);
    5910:	6c e1       	ldi	r22, 0x1C	; 28
    5912:	7e e3       	ldi	r23, 0x3E	; 62
    5914:	f2 cf       	rjmp	.-28     	; 0x58fa <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5954
  }
  if (args1 == 2)
    5916:	42 30       	cpi	r20, 0x02	; 2
    5918:	39 f4       	brne	.+14     	; 0x5928 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5956
  {
    strcpy_P(line1, text_button_term_min);
    591a:	68 e1       	ldi	r22, 0x18	; 24
    591c:	7e e3       	ldi	r23, 0x3E	; 62
    591e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5957
    strcpy_P(line2, text_button_term_min_comment);
    5922:	61 e0       	ldi	r22, 0x01	; 1
    5924:	7e e3       	ldi	r23, 0x3E	; 62
    5926:	e9 cf       	rjmp	.-46     	; 0x58fa <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5959
  }
  if (args1 == 3)
    5928:	43 30       	cpi	r20, 0x03	; 3
    592a:	39 f4       	brne	.+14     	; 0x593a <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5961
  {
    strcpy_P(line1, text_button_term_prog);
    592c:	6c ef       	ldi	r22, 0xFC	; 252
    592e:	7d e3       	ldi	r23, 0x3D	; 61
    5930:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5962
    strcpy_P(line2, text_button_term_prog_comment);
    5934:	68 ee       	ldi	r22, 0xE8	; 232
    5936:	7d e3       	ldi	r23, 0x3D	; 61
    5938:	e0 cf       	rjmp	.-64     	; 0x58fa <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5964
  }
  if (args1 == 4)
    593a:	44 30       	cpi	r20, 0x04	; 4
    593c:	39 f4       	brne	.+14     	; 0x594c <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5966
  {
    strcpy_P(line1, text_button_term_man);
    593e:	64 ee       	ldi	r22, 0xE4	; 228
    5940:	7d e3       	ldi	r23, 0x3D	; 61
    5942:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5967
    strcpy_P(line2, text_button_term_man_comment);
    5946:	65 ed       	ldi	r22, 0xD5	; 213
    5948:	7d e3       	ldi	r23, 0x3D	; 61
    594a:	d7 cf       	rjmp	.-82     	; 0x58fa <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5969
  }
}
    594c:	1f 91       	pop	r17
    594e:	0f 91       	pop	r16
    5950:	08 95       	ret

00005952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    5952:	0f 93       	push	r16
    5954:	1f 93       	push	r17
    5956:	cf 93       	push	r28
    5958:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    595a:	00 97       	sbiw	r24, 0x00	; 0
    595c:	01 f1       	breq	.+64     	; 0x599e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
    595e:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    5960:	fc 01       	movw	r30, r24
    5962:	c0 81       	ld	r28, Z
    5964:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    5966:	20 97       	sbiw	r28, 0x00	; 0
    5968:	d1 f0       	breq	.+52     	; 0x599e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    596a:	6a 85       	ldd	r22, Y+10	; 0x0a
    596c:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    596e:	01 15       	cp	r16, r1
    5970:	11 05       	cpc	r17, r1
    5972:	19 f0       	breq	.+6      	; 0x597a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x28>
    5974:	61 15       	cp	r22, r1
    5976:	71 05       	cpc	r23, r1
    5978:	49 f4       	brne	.+18     	; 0x598c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x3a>
    597a:	06 17       	cp	r16, r22
    597c:	17 07       	cpc	r17, r23
    597e:	59 f4       	brne	.+22     	; 0x5996 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    5980:	ce 01       	movw	r24, r28
    5982:	df 91       	pop	r29
    5984:	cf 91       	pop	r28
    5986:	1f 91       	pop	r17
    5988:	0f 91       	pop	r16
    598a:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    598c:	c8 01       	movw	r24, r16
    598e:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    5992:	89 2b       	or	r24, r25
    5994:	a9 f3       	breq	.-22     	; 0x5980 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    5996:	0e 80       	ldd	r0, Y+6	; 0x06
    5998:	df 81       	ldd	r29, Y+7	; 0x07
    599a:	c0 2d       	mov	r28, r0
    599c:	e4 cf       	rjmp	.-56     	; 0x5966 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    599e:	d0 e0       	ldi	r29, 0x00	; 0
    59a0:	c0 e0       	ldi	r28, 0x00	; 0
    59a2:	ee cf       	rjmp	.-36     	; 0x5980 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>

000059a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    59a4:	4f 92       	push	r4
    59a6:	5f 92       	push	r5
    59a8:	6f 92       	push	r6
    59aa:	7f 92       	push	r7
    59ac:	8f 92       	push	r8
    59ae:	9f 92       	push	r9
    59b0:	af 92       	push	r10
    59b2:	bf 92       	push	r11
    59b4:	df 92       	push	r13
    59b6:	ef 92       	push	r14
    59b8:	ff 92       	push	r15
    59ba:	0f 93       	push	r16
    59bc:	1f 93       	push	r17
    59be:	cf 93       	push	r28
    59c0:	df 93       	push	r29
    59c2:	cd b7       	in	r28, 0x3d	; 61
    59c4:	de b7       	in	r29, 0x3e	; 62
    59c6:	c4 54       	subi	r28, 0x44	; 68
    59c8:	d1 09       	sbc	r29, r1
    59ca:	0f b6       	in	r0, 0x3f	; 63
    59cc:	f8 94       	cli
    59ce:	de bf       	out	0x3e, r29	; 62
    59d0:	0f be       	out	0x3f, r0	; 63
    59d2:	cd bf       	out	0x3d, r28	; 61
    59d4:	8c 01       	movw	r16, r24
    59d6:	4a 01       	movw	r8, r20
    59d8:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    59da:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    59de:	00 97       	sbiw	r24, 0x00	; 0
    59e0:	09 f0       	breq	.+2      	; 0x59e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    59e2:	b0 c0       	rjmp	.+352    	; 0x5b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    59e4:	c8 01       	movw	r24, r16
    59e6:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    59ea:	75 01       	movw	r14, r10
    59ec:	8b 35       	cpi	r24, 0x5B	; 91
    59ee:	49 f1       	breq	.+82     	; 0x5a42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    59f0:	8b 37       	cpi	r24, 0x7B	; 123
    59f2:	09 f4       	brne	.+2      	; 0x59f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    59f4:	d2 c0       	rjmp	.+420    	; 0x5b9a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    59f6:	c8 01       	movw	r24, r16
    59f8:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    59fc:	87 32       	cpi	r24, 0x27	; 39
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    5a00:	eb c1       	rjmp	.+982    	; 0x5dd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    5a02:	82 32       	cpi	r24, 0x22	; 34
    5a04:	09 f4       	brne	.+2      	; 0x5a08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    5a06:	e8 c1       	rjmp	.+976    	; 0x5dd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    5a08:	c8 01       	movw	r24, r16
    5a0a:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5a0e:	b8 2e       	mov	r11, r24
    5a10:	ce 01       	movw	r24, r28
    5a12:	01 96       	adiw	r24, 0x01	; 1
    5a14:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    5a16:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    5a18:	8b 2d       	mov	r24, r11
    5a1a:	0e 94 3f 28 	call	0x507e	; 0x507e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5a1e:	88 23       	and	r24, r24
    5a20:	09 f4       	brne	.+2      	; 0x5a24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    5a22:	f5 c1       	rjmp	.+1002   	; 0x5e0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    5a24:	bf e3       	ldi	r27, 0x3F	; 63
    5a26:	db 16       	cp	r13, r27
    5a28:	09 f4       	brne	.+2      	; 0x5a2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    5a2a:	f1 c1       	rjmp	.+994    	; 0x5e0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5a2c:	f8 01       	movw	r30, r16
    5a2e:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    5a30:	d3 94       	inc	r13
    5a32:	d4 01       	movw	r26, r8
    5a34:	bd 92       	st	X+, r11
    5a36:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    5a38:	c8 01       	movw	r24, r16
    5a3a:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5a3e:	b8 2e       	mov	r11, r24
    5a40:	eb cf       	rjmp	.-42     	; 0x5a18 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    5a42:	d8 01       	movw	r26, r16
    5a44:	16 96       	adiw	r26, 0x06	; 6
    5a46:	8c 91       	ld	r24, X
    5a48:	88 23       	and	r24, r24
    5a4a:	09 f4       	brne	.+2      	; 0x5a4e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    5a4c:	c1 c1       	rjmp	.+898    	; 0x5dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    5a4e:	a1 14       	cp	r10, r1
    5a50:	b1 04       	cpc	r11, r1
    5a52:	09 f4       	brne	.+2      	; 0x5a56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    5a54:	2d c1       	rjmp	.+602    	; 0x5cb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    5a56:	88 e0       	ldi	r24, 0x08	; 8
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	f5 01       	movw	r30, r10
    5a5c:	91 83       	std	Z+1, r25	; 0x01
    5a5e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    5a60:	13 82       	std	Z+3, r1	; 0x03
    5a62:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    5a64:	15 82       	std	Z+5, r1	; 0x05
    5a66:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5a68:	c8 01       	movw	r24, r16
    5a6a:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5a6e:	8b 35       	cpi	r24, 0x5B	; 91
    5a70:	09 f0       	breq	.+2      	; 0x5a74 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    5a72:	ef c0       	rjmp	.+478    	; 0x5c52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5a74:	d8 01       	movw	r26, r16
    5a76:	18 96       	adiw	r26, 0x08	; 8
    5a78:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    5a7a:	c8 01       	movw	r24, r16
    5a7c:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5a80:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    5a82:	89 2b       	or	r24, r25
    5a84:	09 f0       	breq	.+2      	; 0x5a88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    5a86:	5d c0       	rjmp	.+186    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5a88:	c8 01       	movw	r24, r16
    5a8a:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5a8e:	8d 35       	cpi	r24, 0x5D	; 93
    5a90:	09 f4       	brne	.+2      	; 0x5a94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    5a92:	55 c0       	rjmp	.+170    	; 0x5b3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    5a94:	8c e0       	ldi	r24, 0x0C	; 12
    5a96:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    5a98:	d4 01       	movw	r26, r8
    5a9a:	ed 91       	ld	r30, X+
    5a9c:	fc 91       	ld	r31, X
    5a9e:	01 90       	ld	r0, Z+
    5aa0:	f0 81       	ld	r31, Z
    5aa2:	e0 2d       	mov	r30, r0
    5aa4:	6c e0       	ldi	r22, 0x0C	; 12
    5aa6:	70 e0       	ldi	r23, 0x00	; 0
    5aa8:	c4 01       	movw	r24, r8
    5aaa:	19 95       	eicall
    5aac:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    5aae:	00 97       	sbiw	r24, 0x00	; 0
    5ab0:	09 f4       	brne	.+2      	; 0x5ab4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    5ab2:	64 c0       	rjmp	.+200    	; 0x5b7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    5ab4:	dc 01       	movw	r26, r24
    5ab6:	2d 2d       	mov	r18, r13
    5ab8:	1d 92       	st	X+, r1
    5aba:	2a 95       	dec	r18
    5abc:	e9 f7       	brne	.-6      	; 0x5ab8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    5abe:	11 82       	std	Z+1, r1	; 0x01
    5ac0:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    5ac2:	d7 01       	movw	r26, r14
    5ac4:	14 96       	adiw	r26, 0x04	; 4
    5ac6:	8d 91       	ld	r24, X+
    5ac8:	9c 91       	ld	r25, X
    5aca:	15 97       	sbiw	r26, 0x05	; 5
    5acc:	00 97       	sbiw	r24, 0x00	; 0
    5ace:	09 f4       	brne	.+2      	; 0x5ad2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    5ad0:	50 c0       	rjmp	.+160    	; 0x5b72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    5ad2:	91 87       	std	Z+9, r25	; 0x09
    5ad4:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    5ad6:	14 96       	adiw	r26, 0x04	; 4
    5ad8:	8d 91       	ld	r24, X+
    5ada:	9c 91       	ld	r25, X
    5adc:	dc 01       	movw	r26, r24
    5ade:	17 96       	adiw	r26, 0x07	; 7
    5ae0:	fc 93       	st	X, r31
    5ae2:	ee 93       	st	-X, r30
    5ae4:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    5ae6:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    5ae8:	15 96       	adiw	r26, 0x05	; 5
    5aea:	fc 93       	st	X, r31
    5aec:	ee 93       	st	-X, r30
    5aee:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    5af0:	98 2d       	mov	r25, r8
    5af2:	89 2d       	mov	r24, r9
    5af4:	49 2e       	mov	r4, r25
    5af6:	58 2e       	mov	r5, r24
    5af8:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    5afa:	ef 2b       	or	r30, r31
    5afc:	09 f4       	brne	.+2      	; 0x5b00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    5afe:	d8 c0       	rjmp	.+432    	; 0x5cb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    5b00:	f8 01       	movw	r30, r16
    5b02:	86 81       	ldd	r24, Z+6	; 0x06
    5b04:	81 50       	subi	r24, 0x01	; 1
    5b06:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    5b08:	b3 01       	movw	r22, r6
    5b0a:	a2 01       	movw	r20, r4
    5b0c:	c8 01       	movw	r24, r16
    5b0e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5b12:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    5b14:	d8 01       	movw	r26, r16
    5b16:	16 96       	adiw	r26, 0x06	; 6
    5b18:	8c 91       	ld	r24, X
    5b1a:	16 97       	sbiw	r26, 0x06	; 6
    5b1c:	8f 5f       	subi	r24, 0xFF	; 255
    5b1e:	16 96       	adiw	r26, 0x06	; 6
    5b20:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    5b22:	a1 14       	cp	r10, r1
    5b24:	b1 04       	cpc	r11, r1
    5b26:	69 f4       	brne	.+26     	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    5b28:	c8 01       	movw	r24, r16
    5b2a:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5b2e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    5b30:	89 2b       	or	r24, r25
    5b32:	39 f4       	brne	.+14     	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5b34:	c8 01       	movw	r24, r16
    5b36:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5b3a:	8d 35       	cpi	r24, 0x5D	; 93
    5b3c:	21 f5       	brne	.+72     	; 0x5b86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5b3e:	f8 01       	movw	r30, r16
    5b40:	10 86       	std	Z+8, r1	; 0x08
    5b42:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    5b44:	cc 5b       	subi	r28, 0xBC	; 188
    5b46:	df 4f       	sbci	r29, 0xFF	; 255
    5b48:	0f b6       	in	r0, 0x3f	; 63
    5b4a:	f8 94       	cli
    5b4c:	de bf       	out	0x3e, r29	; 62
    5b4e:	0f be       	out	0x3f, r0	; 63
    5b50:	cd bf       	out	0x3d, r28	; 61
    5b52:	df 91       	pop	r29
    5b54:	cf 91       	pop	r28
    5b56:	1f 91       	pop	r17
    5b58:	0f 91       	pop	r16
    5b5a:	ff 90       	pop	r15
    5b5c:	ef 90       	pop	r14
    5b5e:	df 90       	pop	r13
    5b60:	bf 90       	pop	r11
    5b62:	af 90       	pop	r10
    5b64:	9f 90       	pop	r9
    5b66:	8f 90       	pop	r8
    5b68:	7f 90       	pop	r7
    5b6a:	6f 90       	pop	r6
    5b6c:	5f 90       	pop	r5
    5b6e:	4f 90       	pop	r4
    5b70:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    5b72:	13 96       	adiw	r26, 0x03	; 3
    5b74:	fc 93       	st	X, r31
    5b76:	ee 93       	st	-X, r30
    5b78:	12 97       	sbiw	r26, 0x02	; 2
    5b7a:	b6 cf       	rjmp	.-148    	; 0x5ae8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    5b7c:	f0 e0       	ldi	r31, 0x00	; 0
    5b7e:	e0 e0       	ldi	r30, 0x00	; 0
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	80 e0       	ldi	r24, 0x00	; 0
    5b84:	b7 cf       	rjmp	.-146    	; 0x5af4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5b86:	c8 01       	movw	r24, r16
    5b88:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5b8c:	8c 32       	cpi	r24, 0x2C	; 44
    5b8e:	09 f0       	breq	.+2      	; 0x5b92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    5b90:	60 c0       	rjmp	.+192    	; 0x5c52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5b92:	d8 01       	movw	r26, r16
    5b94:	18 96       	adiw	r26, 0x08	; 8
    5b96:	1c 92       	st	X, r1
    5b98:	7f cf       	rjmp	.-258    	; 0x5a98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    5b9a:	f8 01       	movw	r30, r16
    5b9c:	86 81       	ldd	r24, Z+6	; 0x06
    5b9e:	88 23       	and	r24, r24
    5ba0:	09 f4       	brne	.+2      	; 0x5ba4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    5ba2:	16 c1       	rjmp	.+556    	; 0x5dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    5ba4:	a1 14       	cp	r10, r1
    5ba6:	b1 04       	cpc	r11, r1
    5ba8:	09 f4       	brne	.+2      	; 0x5bac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    5baa:	82 c0       	rjmp	.+260    	; 0x5cb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    5bac:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    5bae:	89 e0       	ldi	r24, 0x09	; 9
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	d5 01       	movw	r26, r10
    5bb4:	11 96       	adiw	r26, 0x01	; 1
    5bb6:	9c 93       	st	X, r25
    5bb8:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    5bba:	13 96       	adiw	r26, 0x03	; 3
    5bbc:	1c 92       	st	X, r1
    5bbe:	1e 92       	st	-X, r1
    5bc0:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    5bc2:	15 96       	adiw	r26, 0x05	; 5
    5bc4:	1c 92       	st	X, r1
    5bc6:	1e 92       	st	-X, r1
    5bc8:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    5bca:	45 01       	movw	r8, r10
    5bcc:	b2 e0       	ldi	r27, 0x02	; 2
    5bce:	8b 0e       	add	r8, r27
    5bd0:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5bd2:	c8 01       	movw	r24, r16
    5bd4:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5bd8:	8b 37       	cpi	r24, 0x7B	; 123
    5bda:	d9 f5       	brne	.+118    	; 0x5c52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5bdc:	f8 01       	movw	r30, r16
    5bde:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    5be0:	c8 01       	movw	r24, r16
    5be2:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5be6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    5be8:	89 2b       	or	r24, r25
    5bea:	09 f0       	breq	.+2      	; 0x5bee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    5bec:	aa cf       	rjmp	.-172    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5bee:	c8 01       	movw	r24, r16
    5bf0:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5bf4:	8d 37       	cpi	r24, 0x7D	; 125
    5bf6:	09 f4       	brne	.+2      	; 0x5bfa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    5bf8:	9c c0       	rjmp	.+312    	; 0x5d32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    5bfa:	bc e0       	ldi	r27, 0x0C	; 12
    5bfc:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    5bfe:	c8 01       	movw	r24, r16
    5c00:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    5c04:	87 32       	cpi	r24, 0x27	; 39
    5c06:	79 f0       	breq	.+30     	; 0x5c26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    5c08:	82 32       	cpi	r24, 0x22	; 34
    5c0a:	69 f0       	breq	.+26     	; 0x5c26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    5c0c:	f8 01       	movw	r30, r16
    5c0e:	a4 80       	ldd	r10, Z+4	; 0x04
    5c10:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    5c12:	c8 01       	movw	r24, r16
    5c14:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5c18:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    5c1a:	81 11       	cpse	r24, r1
    5c1c:	1e c0       	rjmp	.+60     	; 0x5c5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    5c1e:	aa 24       	eor	r10, r10
    5c20:	a3 94       	inc	r10
    5c22:	b1 2c       	mov	r11, r1
    5c24:	8e cf       	rjmp	.-228    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    5c26:	be 01       	movw	r22, r28
    5c28:	6f 5f       	subi	r22, 0xFF	; 255
    5c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c2c:	c8 01       	movw	r24, r16
    5c2e:	0e 94 67 28 	call	0x50ce	; 0x50ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    5c32:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    5c34:	89 2b       	or	r24, r25
    5c36:	09 f0       	breq	.+2      	; 0x5c3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    5c38:	84 cf       	rjmp	.-248    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    5c3a:	c8 01       	movw	r24, r16
    5c3c:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5c40:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    5c42:	89 2b       	or	r24, r25
    5c44:	09 f0       	breq	.+2      	; 0x5c48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    5c46:	7d cf       	rjmp	.-262    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5c48:	c8 01       	movw	r24, r16
    5c4a:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5c4e:	8a 33       	cpi	r24, 0x3A	; 58
    5c50:	99 f1       	breq	.+102    	; 0x5cb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    5c52:	72 e0       	ldi	r23, 0x02	; 2
    5c54:	a7 2e       	mov	r10, r23
    5c56:	b1 2c       	mov	r11, r1
    5c58:	74 cf       	rjmp	.-280    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    5c5a:	0e 94 3f 28 	call	0x507e	; 0x507e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5c5e:	88 23       	and	r24, r24
    5c60:	c1 f3       	breq	.-16     	; 0x5c52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5c62:	d8 01       	movw	r26, r16
    5c64:	18 96       	adiw	r26, 0x08	; 8
    5c66:	1c 92       	st	X, r1
    5c68:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    5c6a:	14 96       	adiw	r26, 0x04	; 4
    5c6c:	ed 91       	ld	r30, X+
    5c6e:	fc 91       	ld	r31, X
    5c70:	15 97       	sbiw	r26, 0x05	; 5
    5c72:	cf 01       	movw	r24, r30
    5c74:	01 96       	adiw	r24, 0x01	; 1
    5c76:	15 96       	adiw	r26, 0x05	; 5
    5c78:	9c 93       	st	X, r25
    5c7a:	8e 93       	st	-X, r24
    5c7c:	14 97       	sbiw	r26, 0x04	; 4
    5c7e:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    5c80:	c8 01       	movw	r24, r16
    5c82:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5c86:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    5c88:	0e 94 3f 28 	call	0x507e	; 0x507e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5c8c:	81 11       	cpse	r24, r1
    5c8e:	e9 cf       	rjmp	.-46     	; 0x5c62 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    5c90:	d8 01       	movw	r26, r16
    5c92:	14 96       	adiw	r26, 0x04	; 4
    5c94:	ed 91       	ld	r30, X+
    5c96:	fc 91       	ld	r31, X
    5c98:	15 97       	sbiw	r26, 0x05	; 5
    5c9a:	cf 01       	movw	r24, r30
    5c9c:	01 96       	adiw	r24, 0x01	; 1
    5c9e:	15 96       	adiw	r26, 0x05	; 5
    5ca0:	9c 93       	st	X, r25
    5ca2:	8e 93       	st	-X, r24
    5ca4:	14 97       	sbiw	r26, 0x04	; 4
    5ca6:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    5ca8:	ba 82       	std	Y+2, r11	; 0x02
    5caa:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    5cac:	ab 28       	or	r10, r11
    5cae:	29 f6       	brne	.-118    	; 0x5c3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    5cb0:	e3 e0       	ldi	r30, 0x03	; 3
    5cb2:	ae 2e       	mov	r10, r30
    5cb4:	b1 2c       	mov	r11, r1
    5cb6:	45 cf       	rjmp	.-374    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5cb8:	f8 01       	movw	r30, r16
    5cba:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    5cbc:	a9 80       	ldd	r10, Y+1	; 0x01
    5cbe:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    5cc0:	a1 14       	cp	r10, r1
    5cc2:	b1 04       	cpc	r11, r1
    5cc4:	d1 f5       	brne	.+116    	; 0x5d3a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
    5cca:	30 e0       	ldi	r19, 0x00	; 0
    5ccc:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    5cce:	22 96       	adiw	r28, 0x02	; 2
    5cd0:	3f af       	std	Y+63, r19	; 0x3f
    5cd2:	22 97       	sbiw	r28, 0x02	; 2
    5cd4:	23 96       	adiw	r28, 0x03	; 3
    5cd6:	2f af       	std	Y+63, r18	; 0x3f
    5cd8:	23 97       	sbiw	r28, 0x03	; 3
    5cda:	25 96       	adiw	r28, 0x05	; 5
    5cdc:	9f af       	std	Y+63, r25	; 0x3f
    5cde:	8e af       	std	Y+62, r24	; 0x3e
    5ce0:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    5ce2:	89 2b       	or	r24, r25
    5ce4:	29 f3       	breq	.-54     	; 0x5cb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    5ce6:	d8 01       	movw	r26, r16
    5ce8:	16 96       	adiw	r26, 0x06	; 6
    5cea:	8c 91       	ld	r24, X
    5cec:	16 97       	sbiw	r26, 0x06	; 6
    5cee:	81 50       	subi	r24, 0x01	; 1
    5cf0:	16 96       	adiw	r26, 0x06	; 6
    5cf2:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    5cf4:	25 96       	adiw	r28, 0x05	; 5
    5cf6:	4c ad       	ldd	r20, Y+60	; 0x3c
    5cf8:	5d ad       	ldd	r21, Y+61	; 0x3d
    5cfa:	6e ad       	ldd	r22, Y+62	; 0x3e
    5cfc:	7f ad       	ldd	r23, Y+63	; 0x3f
    5cfe:	25 97       	sbiw	r28, 0x05	; 5
    5d00:	c8 01       	movw	r24, r16
    5d02:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5d06:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    5d08:	f8 01       	movw	r30, r16
    5d0a:	86 81       	ldd	r24, Z+6	; 0x06
    5d0c:	8f 5f       	subi	r24, 0xFF	; 255
    5d0e:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    5d10:	a1 14       	cp	r10, r1
    5d12:	b1 04       	cpc	r11, r1
    5d14:	09 f0       	breq	.+2      	; 0x5d18 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    5d16:	15 cf       	rjmp	.-470    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    5d18:	c8 01       	movw	r24, r16
    5d1a:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5d1e:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    5d20:	89 2b       	or	r24, r25
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    5d24:	0e cf       	rjmp	.-484    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5d26:	c8 01       	movw	r24, r16
    5d28:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5d2c:	8d 37       	cpi	r24, 0x7D	; 125
    5d2e:	09 f0       	breq	.+2      	; 0x5d32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    5d30:	3f c0       	rjmp	.+126    	; 0x5db0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5d32:	d8 01       	movw	r26, r16
    5d34:	18 96       	adiw	r26, 0x08	; 8
    5d36:	1c 92       	st	X, r1
    5d38:	04 cf       	rjmp	.-504    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    5d3a:	b5 01       	movw	r22, r10
    5d3c:	c4 01       	movw	r24, r8
    5d3e:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    5d42:	00 97       	sbiw	r24, 0x00	; 0
    5d44:	49 f5       	brne	.+82     	; 0x5d98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    5d46:	d3 01       	movw	r26, r6
    5d48:	ed 91       	ld	r30, X+
    5d4a:	fc 91       	ld	r31, X
    5d4c:	01 90       	ld	r0, Z+
    5d4e:	f0 81       	ld	r31, Z
    5d50:	e0 2d       	mov	r30, r0
    5d52:	6c e0       	ldi	r22, 0x0C	; 12
    5d54:	70 e0       	ldi	r23, 0x00	; 0
    5d56:	c3 01       	movw	r24, r6
    5d58:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    5d5a:	00 97       	sbiw	r24, 0x00	; 0
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    5d5e:	b3 cf       	rjmp	.-154    	; 0x5cc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    5d60:	fc 01       	movw	r30, r24
    5d62:	25 2d       	mov	r18, r5
    5d64:	11 92       	st	Z+, r1
    5d66:	2a 95       	dec	r18
    5d68:	e9 f7       	brne	.-6      	; 0x5d64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    5d6a:	dc 01       	movw	r26, r24
    5d6c:	1d 92       	st	X+, r1
    5d6e:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    5d70:	d7 01       	movw	r26, r14
    5d72:	14 96       	adiw	r26, 0x04	; 4
    5d74:	ed 91       	ld	r30, X+
    5d76:	fc 91       	ld	r31, X
    5d78:	15 97       	sbiw	r26, 0x05	; 5
    5d7a:	30 97       	sbiw	r30, 0x00	; 0
    5d7c:	81 f0       	breq	.+32     	; 0x5d9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    5d7e:	dc 01       	movw	r26, r24
    5d80:	19 96       	adiw	r26, 0x09	; 9
    5d82:	fc 93       	st	X, r31
    5d84:	ee 93       	st	-X, r30
    5d86:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    5d88:	97 83       	std	Z+7, r25	; 0x07
    5d8a:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    5d8c:	f7 01       	movw	r30, r14
    5d8e:	95 83       	std	Z+5, r25	; 0x05
    5d90:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    5d92:	fc 01       	movw	r30, r24
    5d94:	b3 86       	std	Z+11, r11	; 0x0b
    5d96:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    5d98:	36 2d       	mov	r19, r6
    5d9a:	27 2d       	mov	r18, r7
    5d9c:	98 cf       	rjmp	.-208    	; 0x5cce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    5d9e:	13 96       	adiw	r26, 0x03	; 3
    5da0:	9c 93       	st	X, r25
    5da2:	8e 93       	st	-X, r24
    5da4:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    5da6:	15 96       	adiw	r26, 0x05	; 5
    5da8:	9c 93       	st	X, r25
    5daa:	8e 93       	st	-X, r24
    5dac:	14 97       	sbiw	r26, 0x04	; 4
    5dae:	f1 cf       	rjmp	.-30     	; 0x5d92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5db0:	c8 01       	movw	r24, r16
    5db2:	0e 94 57 28 	call	0x50ae	; 0x50ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5db6:	8c 32       	cpi	r24, 0x2C	; 44
    5db8:	09 f0       	breq	.+2      	; 0x5dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    5dba:	4b cf       	rjmp	.-362    	; 0x5c52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5dbc:	f8 01       	movw	r30, r16
    5dbe:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    5dc0:	c8 01       	movw	r24, r16
    5dc2:	0e 94 be 28 	call	0x517c	; 0x517c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5dc6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    5dc8:	89 2b       	or	r24, r25
    5dca:	09 f4       	brne	.+2      	; 0x5dce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    5dcc:	18 cf       	rjmp	.-464    	; 0x5bfe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    5dce:	b9 ce       	rjmp	.-654    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    5dd0:	f5 e0       	ldi	r31, 0x05	; 5
    5dd2:	af 2e       	mov	r10, r31
    5dd4:	b1 2c       	mov	r11, r1
    5dd6:	b5 ce       	rjmp	.-662    	; 0x5b42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.43():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    5dd8:	be 01       	movw	r22, r28
    5dda:	6f 5f       	subi	r22, 0xFF	; 255
    5ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dde:	c8 01       	movw	r24, r16
    5de0:	0e 94 67 28 	call	0x50ce	; 0x50ce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    5de4:	00 97       	sbiw	r24, 0x00	; 0
    5de6:	09 f0       	breq	.+2      	; 0x5dea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    5de8:	ad ce       	rjmp	.-678    	; 0x5b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    5dea:	e1 14       	cp	r14, r1
    5dec:	f1 04       	cpc	r15, r1
    5dee:	61 f0       	breq	.+24     	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.43():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    5df0:	89 81       	ldd	r24, Y+1	; 0x01
    5df2:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    5df4:	23 e0       	ldi	r18, 0x03	; 3
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	d7 01       	movw	r26, r14
    5dfa:	11 96       	adiw	r26, 0x01	; 1
    5dfc:	3c 93       	st	X, r19
    5dfe:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    5e00:	13 96       	adiw	r26, 0x03	; 3
    5e02:	9c 93       	st	X, r25
    5e04:	8e 93       	st	-X, r24
    5e06:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    5e08:	90 e0       	ldi	r25, 0x00	; 0
    5e0a:	80 e0       	ldi	r24, 0x00	; 0
    5e0c:	9b ce       	rjmp	.-714    	; 0x5b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    5e0e:	e1 e0       	ldi	r30, 0x01	; 1
    5e10:	f0 e0       	ldi	r31, 0x00	; 0
    5e12:	ec 0f       	add	r30, r28
    5e14:	fd 1f       	adc	r31, r29
    5e16:	ed 0d       	add	r30, r13
    5e18:	f1 1d       	adc	r31, r1
    5e1a:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    5e1c:	19 81       	ldd	r17, Y+1	; 0x01
    5e1e:	11 23       	and	r17, r17
    5e20:	09 f4       	brne	.+2      	; 0x5e24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    5e22:	51 c0       	rjmp	.+162    	; 0x5ec6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    5e24:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5e26:	1d 32       	cpi	r17, 0x2D	; 45
    5e28:	71 f1       	breq	.+92     	; 0x5e86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    5e2a:	1b 32       	cpi	r17, 0x2B	; 43
    5e2c:	61 f1       	breq	.+88     	; 0x5e86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    5e2e:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    5e30:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5e32:	90 ed       	ldi	r25, 0xD0	; 208
    5e34:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    5e36:	9a 30       	cpi	r25, 0x0A	; 10
    5e38:	d8 f3       	brcs	.-10     	; 0x5e30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    5e3a:	81 11       	cpse	r24, r1
    5e3c:	44 c0       	rjmp	.+136    	; 0x5ec6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    5e3e:	14 37       	cpi	r17, 0x74	; 116
    5e40:	09 f4       	brne	.+2      	; 0x5e44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    5e42:	dd c1       	rjmp	.+954    	; 0x61fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    5e44:	1b 32       	cpi	r17, 0x2B	; 43
    5e46:	09 f1       	breq	.+66     	; 0x5e8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    5e48:	1d 32       	cpi	r17, 0x2D	; 45
    5e4a:	19 f1       	breq	.+70     	; 0x5e92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    5e4c:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    5e4e:	fe 01       	movw	r30, r28
    5e50:	31 96       	adiw	r30, 0x01	; 1
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	30 e0       	ldi	r19, 0x00	; 0
    5e56:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    5e58:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5e5a:	80 ed       	ldi	r24, 0xD0	; 208
    5e5c:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    5e5e:	8a 30       	cpi	r24, 0x0A	; 10
    5e60:	d0 f4       	brcc	.+52     	; 0x5e96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    5e62:	aa e0       	ldi	r26, 0x0A	; 10
    5e64:	b0 e0       	ldi	r27, 0x00	; 0
    5e66:	0e 94 b2 bb 	call	0x17764	; 0x17764 <__muluhisi3>
    5e6a:	20 2f       	mov	r18, r16
    5e6c:	00 0f       	add	r16, r16
    5e6e:	33 0b       	sbc	r19, r19
    5e70:	20 53       	subi	r18, 0x30	; 48
    5e72:	31 09       	sbc	r19, r1
    5e74:	03 2e       	mov	r0, r19
    5e76:	00 0c       	add	r0, r0
    5e78:	44 0b       	sbc	r20, r20
    5e7a:	55 0b       	sbc	r21, r21
    5e7c:	26 0f       	add	r18, r22
    5e7e:	37 1f       	adc	r19, r23
    5e80:	48 1f       	adc	r20, r24
    5e82:	59 1f       	adc	r21, r25
    5e84:	e9 cf       	rjmp	.-46     	; 0x5e58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    5e86:	32 96       	adiw	r30, 0x02	; 2
    5e88:	d3 cf       	rjmp	.-90     	; 0x5e30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    5e8a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    5e8c:	fe 01       	movw	r30, r28
    5e8e:	32 96       	adiw	r30, 0x02	; 2
    5e90:	e0 cf       	rjmp	.-64     	; 0x5e52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    5e92:	11 e0       	ldi	r17, 0x01	; 1
    5e94:	fb cf       	rjmp	.-10     	; 0x5e8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    5e96:	11 23       	and	r17, r17
    5e98:	09 f4       	brne	.+2      	; 0x5e9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    5e9a:	b5 c1       	rjmp	.+874    	; 0x6206 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    5e9c:	e1 14       	cp	r14, r1
    5e9e:	f1 04       	cpc	r15, r1
    5ea0:	09 f4       	brne	.+2      	; 0x5ea4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    5ea2:	b2 cf       	rjmp	.-156    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    5ea4:	87 e0       	ldi	r24, 0x07	; 7
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    5ea8:	21 15       	cp	r18, r1
    5eaa:	31 05       	cpc	r19, r1
    5eac:	41 05       	cpc	r20, r1
    5eae:	51 05       	cpc	r21, r1
    5eb0:	11 f4       	brne	.+4      	; 0x5eb6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    5eb2:	86 e0       	ldi	r24, 0x06	; 6
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    5eb6:	f7 01       	movw	r30, r14
    5eb8:	91 83       	std	Z+1, r25	; 0x01
    5eba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    5ebc:	22 83       	std	Z+2, r18	; 0x02
    5ebe:	33 83       	std	Z+3, r19	; 0x03
    5ec0:	44 83       	std	Z+4, r20	; 0x04
    5ec2:	55 83       	std	Z+5, r21	; 0x05
    5ec4:	a1 cf       	rjmp	.-190    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    5ec6:	61 e0       	ldi	r22, 0x01	; 1
    5ec8:	73 e0       	ldi	r23, 0x03	; 3
    5eca:	ce 01       	movw	r24, r28
    5ecc:	01 96       	adiw	r24, 0x01	; 1
    5ece:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    5ed2:	89 2b       	or	r24, r25
    5ed4:	09 f4       	brne	.+2      	; 0x5ed8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    5ed6:	46 c0       	rjmp	.+140    	; 0x5f64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    5ed8:	5e 01       	movw	r10, r28
    5eda:	f2 e0       	ldi	r31, 0x02	; 2
    5edc:	af 0e       	add	r10, r31
    5ede:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5ee0:	1d 32       	cpi	r17, 0x2D	; 45
    5ee2:	49 f0       	breq	.+18     	; 0x5ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    5ee4:	fe 01       	movw	r30, r28
    5ee6:	31 96       	adiw	r30, 0x01	; 1
    5ee8:	5f 01       	movw	r10, r30
    5eea:	1b 32       	cpi	r17, 0x2B	; 43
    5eec:	21 f4       	brne	.+8      	; 0x5ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    5eee:	5e 01       	movw	r10, r28
    5ef0:	22 e0       	ldi	r18, 0x02	; 2
    5ef2:	a2 0e       	add	r10, r18
    5ef4:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    5ef6:	65 e0       	ldi	r22, 0x05	; 5
    5ef8:	73 e0       	ldi	r23, 0x03	; 3
    5efa:	c5 01       	movw	r24, r10
    5efc:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    5f00:	89 2b       	or	r24, r25
    5f02:	81 f1       	breq	.+96     	; 0x5f64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    5f04:	d5 01       	movw	r26, r10
    5f06:	8c 91       	ld	r24, X
    5f08:	88 23       	and	r24, r24
    5f0a:	09 f4       	brne	.+2      	; 0x5f0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    5f0c:	3b c1       	rjmp	.+630    	; 0x6184 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5f0e:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    5f10:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5f12:	90 ed       	ldi	r25, 0xD0	; 208
    5f14:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    5f16:	9a 30       	cpi	r25, 0x0A	; 10
    5f18:	d0 f3       	brcs	.-12     	; 0x5f0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    5f1a:	8e 32       	cpi	r24, 0x2E	; 46
    5f1c:	41 f4       	brne	.+16     	; 0x5f2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    5f1e:	9d 01       	movw	r18, r26
    5f20:	f9 01       	movw	r30, r18
    5f22:	2f 5f       	subi	r18, 0xFF	; 255
    5f24:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5f26:	80 81       	ld	r24, Z
    5f28:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    5f2a:	8a 30       	cpi	r24, 0x0A	; 10
    5f2c:	c8 f3       	brcs	.-14     	; 0x5f20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    5f2e:	80 81       	ld	r24, Z
    5f30:	8f 7d       	andi	r24, 0xDF	; 223
    5f32:	85 34       	cpi	r24, 0x45	; 69
    5f34:	a1 f4       	brne	.+40     	; 0x5f5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    5f36:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5f38:	8d 32       	cpi	r24, 0x2D	; 45
    5f3a:	09 f4       	brne	.+2      	; 0x5f3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    5f3c:	57 c0       	rjmp	.+174    	; 0x5fec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    5f3e:	8b 32       	cpi	r24, 0x2B	; 43
    5f40:	09 f4       	brne	.+2      	; 0x5f44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    5f42:	54 c0       	rjmp	.+168    	; 0x5fec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    5f44:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5f46:	80 81       	ld	r24, Z
    5f48:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    5f4a:	8a 30       	cpi	r24, 0x0A	; 10
    5f4c:	08 f0       	brcs	.+2      	; 0x5f50 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    5f4e:	1a c1       	rjmp	.+564    	; 0x6184 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5f50:	cf 01       	movw	r24, r30
    5f52:	fc 01       	movw	r30, r24
    5f54:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5f56:	20 81       	ld	r18, Z
    5f58:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    5f5a:	2a 30       	cpi	r18, 0x0A	; 10
    5f5c:	d0 f3       	brcs	.-12     	; 0x5f52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    5f5e:	80 81       	ld	r24, Z
    5f60:	81 11       	cpse	r24, r1
    5f62:	10 c1       	rjmp	.+544    	; 0x6184 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    5f64:	1b 32       	cpi	r17, 0x2B	; 43
    5f66:	09 f4       	brne	.+2      	; 0x5f6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    5f68:	43 c0       	rjmp	.+134    	; 0x5ff0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    5f6a:	1d 32       	cpi	r17, 0x2D	; 45
    5f6c:	09 f0       	breq	.+2      	; 0x5f70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    5f6e:	47 c0       	rjmp	.+142    	; 0x5ffe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    5f70:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    5f72:	dd 24       	eor	r13, r13
    5f74:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    5f76:	5e 01       	movw	r10, r28
    5f78:	b2 e0       	ldi	r27, 0x02	; 2
    5f7a:	ab 0e       	add	r10, r27
    5f7c:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    5f7e:	60 e0       	ldi	r22, 0x00	; 0
    5f80:	70 e0       	ldi	r23, 0x00	; 0
    5f82:	80 e8       	ldi	r24, 0x80	; 128
    5f84:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    5f86:	14 37       	cpi	r17, 0x74	; 116
    5f88:	09 f4       	brne	.+2      	; 0x5f8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    5f8a:	d2 c0       	rjmp	.+420    	; 0x6130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    5f8c:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5f8e:	60 e0       	ldi	r22, 0x00	; 0
    5f90:	70 e0       	ldi	r23, 0x00	; 0
    5f92:	80 ec       	ldi	r24, 0xC0	; 192
    5f94:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    5f96:	1e 34       	cpi	r17, 0x4E	; 78
    5f98:	09 f4       	brne	.+2      	; 0x5f9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    5f9a:	ca c0       	rjmp	.+404    	; 0x6130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    5f9c:	19 34       	cpi	r17, 0x49	; 73
    5f9e:	09 f4       	brne	.+2      	; 0x5fa2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    5fa0:	97 c0       	rjmp	.+302    	; 0x60d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    5fa2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    5fa4:	20 e0       	ldi	r18, 0x00	; 0
    5fa6:	30 e0       	ldi	r19, 0x00	; 0
    5fa8:	a9 01       	movw	r20, r18
    5faa:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    5fac:	d5 01       	movw	r26, r10
    5fae:	1d 91       	ld	r17, X+
    5fb0:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5fb2:	80 ed       	ldi	r24, 0xD0	; 208
    5fb4:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    5fb6:	8a 30       	cpi	r24, 0x0A	; 10
    5fb8:	48 f5       	brcc	.+82     	; 0x600c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    5fba:	2c 3c       	cpi	r18, 0xCC	; 204
    5fbc:	bc ec       	ldi	r27, 0xCC	; 204
    5fbe:	3b 07       	cpc	r19, r27
    5fc0:	bc e0       	ldi	r27, 0x0C	; 12
    5fc2:	4b 07       	cpc	r20, r27
    5fc4:	51 05       	cpc	r21, r1
    5fc6:	04 f5       	brge	.+64     	; 0x6008 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    5fc8:	aa e0       	ldi	r26, 0x0A	; 10
    5fca:	b0 e0       	ldi	r27, 0x00	; 0
    5fcc:	0e 94 b2 bb 	call	0x17764	; 0x17764 <__muluhisi3>
    5fd0:	21 2f       	mov	r18, r17
    5fd2:	11 0f       	add	r17, r17
    5fd4:	33 0b       	sbc	r19, r19
    5fd6:	20 53       	subi	r18, 0x30	; 48
    5fd8:	31 09       	sbc	r19, r1
    5fda:	03 2e       	mov	r0, r19
    5fdc:	00 0c       	add	r0, r0
    5fde:	44 0b       	sbc	r20, r20
    5fe0:	55 0b       	sbc	r21, r21
    5fe2:	26 0f       	add	r18, r22
    5fe4:	37 1f       	adc	r19, r23
    5fe6:	48 1f       	adc	r20, r24
    5fe8:	59 1f       	adc	r21, r25
    5fea:	df cf       	rjmp	.-66     	; 0x5faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    5fec:	32 96       	adiw	r30, 0x02	; 2
    5fee:	ab cf       	rjmp	.-170    	; 0x5f46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    5ff0:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5ff2:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    5ff4:	5e 01       	movw	r10, r28
    5ff6:	e2 e0       	ldi	r30, 0x02	; 2
    5ff8:	ae 0e       	add	r10, r30
    5ffa:	b1 1c       	adc	r11, r1
    5ffc:	c0 cf       	rjmp	.-128    	; 0x5f7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5ffe:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    6000:	ce 01       	movw	r24, r28
    6002:	01 96       	adiw	r24, 0x01	; 1
    6004:	5c 01       	movw	r10, r24
    6006:	bb cf       	rjmp	.-138    	; 0x5f7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    6008:	0f 5f       	subi	r16, 0xFF	; 255
    600a:	cf cf       	rjmp	.-98     	; 0x5faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    600c:	1e 32       	cpi	r17, 0x2E	; 46
    600e:	31 f5       	brne	.+76     	; 0x605c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    6010:	5f 01       	movw	r10, r30
    6012:	8f ef       	ldi	r24, 0xFF	; 255
    6014:	a8 1a       	sub	r10, r24
    6016:	b8 0a       	sbc	r11, r24
    6018:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    601a:	d5 01       	movw	r26, r10
    601c:	1d 91       	ld	r17, X+
    601e:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    6020:	80 ed       	ldi	r24, 0xD0	; 208
    6022:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    6024:	8a 30       	cpi	r24, 0x0A	; 10
    6026:	d0 f4       	brcc	.+52     	; 0x605c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    6028:	2c 3c       	cpi	r18, 0xCC	; 204
    602a:	bc ec       	ldi	r27, 0xCC	; 204
    602c:	3b 07       	cpc	r19, r27
    602e:	bc e0       	ldi	r27, 0x0C	; 12
    6030:	4b 07       	cpc	r20, r27
    6032:	51 05       	cpc	r21, r1
    6034:	8c f7       	brge	.-30     	; 0x6018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    6036:	aa e0       	ldi	r26, 0x0A	; 10
    6038:	b0 e0       	ldi	r27, 0x00	; 0
    603a:	0e 94 b2 bb 	call	0x17764	; 0x17764 <__muluhisi3>
    603e:	21 2f       	mov	r18, r17
    6040:	11 0f       	add	r17, r17
    6042:	33 0b       	sbc	r19, r19
    6044:	20 53       	subi	r18, 0x30	; 48
    6046:	31 09       	sbc	r19, r1
    6048:	03 2e       	mov	r0, r19
    604a:	00 0c       	add	r0, r0
    604c:	44 0b       	sbc	r20, r20
    604e:	55 0b       	sbc	r21, r21
    6050:	26 0f       	add	r18, r22
    6052:	37 1f       	adc	r19, r23
    6054:	48 1f       	adc	r20, r24
    6056:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    6058:	01 50       	subi	r16, 0x01	; 1
    605a:	de cf       	rjmp	.-68     	; 0x6018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    605c:	80 81       	ld	r24, Z
    605e:	8f 7d       	andi	r24, 0xDF	; 223
    6060:	00 2e       	mov	r0, r16
    6062:	00 0c       	add	r0, r0
    6064:	11 0b       	sbc	r17, r17
    6066:	85 34       	cpi	r24, 0x45	; 69
    6068:	09 f0       	breq	.+2      	; 0x606c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    606a:	70 c0       	rjmp	.+224    	; 0x614c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    606c:	81 81       	ldd	r24, Z+1	; 0x01
    606e:	8d 32       	cpi	r24, 0x2D	; 45
    6070:	41 f5       	brne	.+80     	; 0x60c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    6072:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    6074:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    607a:	6a e0       	ldi	r22, 0x0A	; 10
    607c:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    607e:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    6080:	60 ed       	ldi	r22, 0xD0	; 208
    6082:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    6084:	6a 30       	cpi	r22, 0x0A	; 10
    6086:	78 f5       	brcc	.+94     	; 0x60e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    6088:	b8 9e       	mul	r11, r24
    608a:	b0 01       	movw	r22, r0
    608c:	b9 9e       	mul	r11, r25
    608e:	70 0d       	add	r23, r0
    6090:	11 24       	eor	r1, r1
    6092:	8a 2f       	mov	r24, r26
    6094:	aa 0f       	add	r26, r26
    6096:	99 0b       	sbc	r25, r25
    6098:	c0 97       	sbiw	r24, 0x30	; 48
    609a:	86 0f       	add	r24, r22
    609c:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    609e:	b8 01       	movw	r22, r16
    60a0:	68 0f       	add	r22, r24
    60a2:	79 1f       	adc	r23, r25
    60a4:	67 32       	cpi	r22, 0x27	; 39
    60a6:	71 05       	cpc	r23, r1
    60a8:	54 f3       	brlt	.-44     	; 0x607e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    60aa:	bb 23       	and	r27, r27
    60ac:	89 f0       	breq	.+34     	; 0x60d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    60ae:	60 e0       	ldi	r22, 0x00	; 0
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	80 e0       	ldi	r24, 0x00	; 0
    60b4:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    60b6:	d1 10       	cpse	r13, r1
    60b8:	3b c0       	rjmp	.+118    	; 0x6130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    60ba:	60 e0       	ldi	r22, 0x00	; 0
    60bc:	70 e0       	ldi	r23, 0x00	; 0
    60be:	cb 01       	movw	r24, r22
    60c0:	37 c0       	rjmp	.+110    	; 0x6130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    60c2:	8b 32       	cpi	r24, 0x2B	; 43
    60c4:	19 f0       	breq	.+6      	; 0x60cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    60c6:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    60c8:	b0 e0       	ldi	r27, 0x00	; 0
    60ca:	d5 cf       	rjmp	.-86     	; 0x6076 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    60cc:	32 96       	adiw	r30, 0x02	; 2
    60ce:	fc cf       	rjmp	.-8      	; 0x60c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    60d0:	60 e0       	ldi	r22, 0x00	; 0
    60d2:	70 e0       	ldi	r23, 0x00	; 0
    60d4:	80 e8       	ldi	r24, 0x80	; 128
    60d6:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    60d8:	d1 10       	cpse	r13, r1
    60da:	2a c0       	rjmp	.+84     	; 0x6130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    60dc:	60 e0       	ldi	r22, 0x00	; 0
    60de:	70 e0       	ldi	r23, 0x00	; 0
    60e0:	80 e8       	ldi	r24, 0x80	; 128
    60e2:	9f e7       	ldi	r25, 0x7F	; 127
    60e4:	25 c0       	rjmp	.+74     	; 0x6130 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    60e6:	bb 23       	and	r27, r27
    60e8:	19 f0       	breq	.+6      	; 0x60f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    60ea:	91 95       	neg	r25
    60ec:	81 95       	neg	r24
    60ee:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    60f0:	08 0f       	add	r16, r24
    60f2:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    60f4:	ca 01       	movw	r24, r20
    60f6:	b9 01       	movw	r22, r18
    60f8:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    60fc:	10 16       	cp	r1, r16
    60fe:	11 06       	cpc	r1, r17
    6100:	44 f5       	brge	.+80     	; 0x6152 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    6102:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    6104:	00 ff       	sbrs	r16, 0
    6106:	0c c0       	rjmp	.+24     	; 0x6120 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    6108:	24 e0       	ldi	r18, 0x04	; 4
    610a:	b2 9e       	mul	r11, r18
    610c:	f0 01       	movw	r30, r0
    610e:	11 24       	eor	r1, r1
    6110:	e8 5c       	subi	r30, 0xC8	; 200
    6112:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    6114:	20 81       	ld	r18, Z
    6116:	31 81       	ldd	r19, Z+1	; 0x01
    6118:	42 81       	ldd	r20, Z+2	; 0x02
    611a:	53 81       	ldd	r21, Z+3	; 0x03
    611c:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    6120:	15 95       	asr	r17
    6122:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    6124:	b3 94       	inc	r11
    6126:	01 15       	cp	r16, r1
    6128:	11 05       	cpc	r17, r1
    612a:	61 f7       	brne	.-40     	; 0x6104 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    612c:	d1 10       	cpse	r13, r1
    612e:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    6130:	e1 14       	cp	r14, r1
    6132:	f1 04       	cpc	r15, r1
    6134:	09 f4       	brne	.+2      	; 0x6138 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    6136:	68 ce       	rjmp	.-816    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    6138:	2a e0       	ldi	r18, 0x0A	; 10
    613a:	30 e0       	ldi	r19, 0x00	; 0
    613c:	f7 01       	movw	r30, r14
    613e:	31 83       	std	Z+1, r19	; 0x01
    6140:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    6142:	62 83       	std	Z+2, r22	; 0x02
    6144:	73 83       	std	Z+3, r23	; 0x03
    6146:	84 83       	std	Z+4, r24	; 0x04
    6148:	95 83       	std	Z+5, r25	; 0x05
    614a:	5e ce       	rjmp	.-836    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	80 e0       	ldi	r24, 0x00	; 0
    6150:	cf cf       	rjmp	.-98     	; 0x60f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    6152:	11 95       	neg	r17
    6154:	01 95       	neg	r16
    6156:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    6158:	b1 2c       	mov	r11, r1
make_float():
    615a:	01 15       	cp	r16, r1
    615c:	11 05       	cpc	r17, r1
    615e:	31 f3       	breq	.-52     	; 0x612c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    6160:	00 ff       	sbrs	r16, 0
    6162:	0c c0       	rjmp	.+24     	; 0x617c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    6164:	a4 e0       	ldi	r26, 0x04	; 4
    6166:	ba 9e       	mul	r11, r26
    6168:	f0 01       	movw	r30, r0
    616a:	11 24       	eor	r1, r1
    616c:	e0 5e       	subi	r30, 0xE0	; 224
    616e:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    6170:	20 81       	ld	r18, Z
    6172:	31 81       	ldd	r19, Z+1	; 0x01
    6174:	42 81       	ldd	r20, Z+2	; 0x02
    6176:	53 81       	ldd	r21, Z+3	; 0x03
    6178:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    617c:	15 95       	asr	r17
    617e:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    6180:	b3 94       	inc	r11
    6182:	eb cf       	rjmp	.-42     	; 0x615a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    6184:	6e e0       	ldi	r22, 0x0E	; 14
    6186:	73 e0       	ldi	r23, 0x03	; 3
    6188:	ce 01       	movw	r24, r28
    618a:	01 96       	adiw	r24, 0x01	; 1
    618c:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    6190:	89 2b       	or	r24, r25
    6192:	91 f4       	brne	.+36     	; 0x61b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    6194:	e1 14       	cp	r14, r1
    6196:	f1 04       	cpc	r15, r1
    6198:	09 f4       	brne	.+2      	; 0x619c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    619a:	36 ce       	rjmp	.-916    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    619c:	85 e0       	ldi	r24, 0x05	; 5
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	f7 01       	movw	r30, r14
    61a2:	91 83       	std	Z+1, r25	; 0x01
    61a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	a0 e0       	ldi	r26, 0x00	; 0
    61ac:	b0 e0       	ldi	r27, 0x00	; 0
    61ae:	82 83       	std	Z+2, r24	; 0x02
    61b0:	93 83       	std	Z+3, r25	; 0x03
    61b2:	a4 83       	std	Z+4, r26	; 0x04
    61b4:	b5 83       	std	Z+5, r27	; 0x05
    61b6:	28 ce       	rjmp	.-944    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    61b8:	63 e1       	ldi	r22, 0x13	; 19
    61ba:	73 e0       	ldi	r23, 0x03	; 3
    61bc:	ce 01       	movw	r24, r28
    61be:	01 96       	adiw	r24, 0x01	; 1
    61c0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    61c4:	89 2b       	or	r24, r25
    61c6:	79 f4       	brne	.+30     	; 0x61e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    61c8:	e1 14       	cp	r14, r1
    61ca:	f1 04       	cpc	r15, r1
    61cc:	09 f4       	brne	.+2      	; 0x61d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    61ce:	1c ce       	rjmp	.-968    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    61d0:	85 e0       	ldi	r24, 0x05	; 5
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	d7 01       	movw	r26, r14
    61d6:	8d 93       	st	X+, r24
    61d8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    61da:	f7 01       	movw	r30, r14
    61dc:	12 82       	std	Z+2, r1	; 0x02
    61de:	13 82       	std	Z+3, r1	; 0x03
    61e0:	14 82       	std	Z+4, r1	; 0x04
    61e2:	15 82       	std	Z+5, r1	; 0x05
    61e4:	11 ce       	rjmp	.-990    	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    61e6:	69 e1       	ldi	r22, 0x19	; 25
    61e8:	73 e0       	ldi	r23, 0x03	; 3
    61ea:	ce 01       	movw	r24, r28
    61ec:	01 96       	adiw	r24, 0x01	; 1
    61ee:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    61f2:	89 2b       	or	r24, r25
    61f4:	09 f4       	brne	.+2      	; 0x61f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    61f6:	08 ce       	rjmp	.-1008   	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    61f8:	82 e0       	ldi	r24, 0x02	; 2
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	a3 cc       	rjmp	.-1722   	; 0x5b44 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    61fe:	21 e0       	ldi	r18, 0x01	; 1
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	40 e0       	ldi	r20, 0x00	; 0
    6204:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    6206:	e1 14       	cp	r14, r1
    6208:	f1 04       	cpc	r15, r1
    620a:	09 f0       	breq	.+2      	; 0x620e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    620c:	52 ce       	rjmp	.-860    	; 0x5eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    620e:	fc cd       	rjmp	.-1032   	; 0x5e08 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00006210 <remote_tds_get_data(unsigned char) [clone .part.26]>:
_Z19remote_tds_get_datah.part.26():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    6210:	cf 93       	push	r28
    6212:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    6214:	93 e0       	ldi	r25, 0x03	; 3
    6216:	89 9f       	mul	r24, r25
    6218:	e0 01       	movw	r28, r0
    621a:	11 24       	eor	r1, r1
    621c:	be 01       	movw	r22, r28
    621e:	6b 59       	subi	r22, 0x9B	; 155
    6220:	7f 4f       	sbci	r23, 0xFF	; 255
    6222:	07 2e       	mov	r0, r23
    6224:	00 0c       	add	r0, r0
    6226:	88 0b       	sbc	r24, r24
    6228:	99 0b       	sbc	r25, r25
    622a:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    622e:	be 01       	movw	r22, r28
    6230:	6c 59       	subi	r22, 0x9C	; 156
    6232:	7f 4f       	sbci	r23, 0xFF	; 255
    6234:	07 2e       	mov	r0, r23
    6236:	00 0c       	add	r0, r0
    6238:	88 0b       	sbc	r24, r24
    623a:	99 0b       	sbc	r25, r25
    623c:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
  }
  return temp;
}
    6240:	90 e0       	ldi	r25, 0x00	; 0
    6242:	df 91       	pop	r29
    6244:	cf 91       	pop	r28
    6246:	08 95       	ret

00006248 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4988
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    6248:	ef 92       	push	r14
    624a:	ff 92       	push	r15
    624c:	0f 93       	push	r16
    624e:	1f 93       	push	r17
    6250:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    6252:	ee 24       	eor	r14, r14
    6254:	ea 94       	dec	r14
    6256:	fe 2c       	mov	r15, r14
    6258:	10 e0       	ldi	r17, 0x00	; 0
    625a:	00 e0       	ldi	r16, 0x00	; 0
    625c:	22 e0       	ldi	r18, 0x02	; 2
    625e:	bc 01       	movw	r22, r24
    6260:	8a ef       	ldi	r24, 0xFA	; 250
    6262:	98 e0       	ldi	r25, 0x08	; 8
    6264:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4990
}
    6268:	1f 91       	pop	r17
    626a:	0f 91       	pop	r16
    626c:	ff 90       	pop	r15
    626e:	ef 90       	pop	r14
    6270:	08 95       	ret

00006272 <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    6272:	8d e2       	ldi	r24, 0x2D	; 45
    6274:	99 e0       	ldi	r25, 0x09	; 9
    6276:	fc 01       	movw	r30, r24
    6278:	01 90       	ld	r0, Z+
    627a:	00 20       	and	r0, r0
    627c:	e9 f7       	brne	.-6      	; 0x6278 <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    627e:	cf 01       	movw	r24, r30
    6280:	8e 52       	subi	r24, 0x2E	; 46
    6282:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
  if (len > 0)
    6284:	88 23       	and	r24, r24
    6286:	29 f0       	breq	.+10     	; 0x6292 <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
    dialog_set_string[len - 1] = 0;
    6288:	99 27       	eor	r25, r25
    628a:	fc 01       	movw	r30, r24
    628c:	e4 5d       	subi	r30, 0xD4	; 212
    628e:	f6 4f       	sbci	r31, 0xF6	; 246
    6290:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
}
    6292:	08 95       	ret

00006294 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2463
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    6294:	ed e2       	ldi	r30, 0x2D	; 45
    6296:	f9 e0       	ldi	r31, 0x09	; 9
    6298:	01 90       	ld	r0, Z+
    629a:	00 20       	and	r0, r0
    629c:	e9 f7       	brne	.-6      	; 0x6298 <display_element_set_string_add_char(char)+0x4>
    629e:	ee 52       	subi	r30, 0x2E	; 46
    62a0:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
  if (len  < dialog_set_string_max_length - 1)
    62a2:	ff 27       	eor	r31, r31
    62a4:	20 91 2c 09 	lds	r18, 0x092C	; 0x80092c <dialog_set_string_max_length>
    62a8:	21 50       	subi	r18, 0x01	; 1
    62aa:	33 0b       	sbc	r19, r19
    62ac:	e2 17       	cp	r30, r18
    62ae:	f3 07       	cpc	r31, r19
    62b0:	24 f4       	brge	.+8      	; 0x62ba <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
  {
    dialog_set_string[len] = znak;
    62b2:	e3 5d       	subi	r30, 0xD3	; 211
    62b4:	f6 4f       	sbci	r31, 0xF6	; 246
    62b6:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
    dialog_set_string[len + 1] = 0;
    62b8:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
  }
}
    62ba:	08 95       	ret

000062bc <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>:
_Z19click_keyboard_alfahhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
   args3 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    62bc:	90 91 56 08 	lds	r25, 0x0856	; 0x800856 <__data_end>
    62c0:	91 11       	cpse	r25, r1
    62c2:	07 c0       	rjmp	.+14     	; 0x62d2 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    62c4:	e4 2f       	mov	r30, r20
    62c6:	f0 e0       	ldi	r31, 0x00	; 0
    62c8:	e7 52       	subi	r30, 0x27	; 39
    62ca:	f6 4c       	sbci	r31, 0xC6	; 198
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    62cc:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622
  ///
  display_element_set_string_add_char(znak);
    62ce:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    62d2:	91 30       	cpi	r25, 0x01	; 1
    62d4:	29 f4       	brne	.+10     	; 0x62e0 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    62d6:	e4 2f       	mov	r30, r20
    62d8:	f0 e0       	ldi	r31, 0x00	; 0
    62da:	e1 54       	subi	r30, 0x41	; 65
    62dc:	f6 4c       	sbci	r31, 0xC6	; 198
    62de:	f6 cf       	rjmp	.-20     	; 0x62cc <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    62e0:	92 30       	cpi	r25, 0x02	; 2
    62e2:	a9 f7       	brne	.-22     	; 0x62ce <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    62e4:	e4 2f       	mov	r30, r20
    62e6:	f0 e0       	ldi	r31, 0x00	; 0
    62e8:	eb 55       	subi	r30, 0x5B	; 91
    62ea:	f6 4c       	sbci	r31, 0xC6	; 198
    62ec:	ef cf       	rjmp	.-34     	; 0x62cc <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>

000062ee <click_keyboard_number(unsigned char, unsigned char, unsigned char)>:
_Z21click_keyboard_numberhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
   args3 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    62ee:	80 e3       	ldi	r24, 0x30	; 48
    62f0:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
  if (args3 == 10) znak = '.';
    62f2:	4a 30       	cpi	r20, 0x0A	; 10
    62f4:	09 f4       	brne	.+2      	; 0x62f8 <click_keyboard_number(unsigned char, unsigned char, unsigned char)+0xa>
    62f6:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
  display_element_set_string_add_char(znak);
    62f8:	0c 94 4a 31 	jmp	0x6294	; 0x6294 <display_element_set_string_add_char(char)>

000062fc <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5292
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    62fc:	2f 92       	push	r2
    62fe:	3f 92       	push	r3
    6300:	4f 92       	push	r4
    6302:	5f 92       	push	r5
    6304:	6f 92       	push	r6
    6306:	7f 92       	push	r7
    6308:	9f 92       	push	r9
    630a:	af 92       	push	r10
    630c:	bf 92       	push	r11
    630e:	cf 92       	push	r12
    6310:	df 92       	push	r13
    6312:	ef 92       	push	r14
    6314:	ff 92       	push	r15
    6316:	0f 93       	push	r16
    6318:	1f 93       	push	r17
    631a:	cf 93       	push	r28
    631c:	df 93       	push	r29
    631e:	00 d0       	rcall	.+0      	; 0x6320 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    6320:	1f 92       	push	r1
    6322:	1f 92       	push	r1
    6324:	cd b7       	in	r28, 0x3d	; 61
    6326:	de b7       	in	r29, 0x3e	; 62
    6328:	6c 01       	movw	r12, r24
    632a:	5b 01       	movw	r10, r22
    632c:	1a 01       	movw	r2, r20
    632e:	29 01       	movw	r4, r18
    6330:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    6332:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6336:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    633a:	10 e0       	ldi	r17, 0x00	; 0
    633c:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5297
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    633e:	3b 01       	movw	r6, r22
    6340:	62 0e       	add	r6, r18
    6342:	73 1e       	adc	r7, r19
    6344:	84 0f       	add	r24, r20
    6346:	95 1f       	adc	r25, r21
    6348:	9d 83       	std	Y+5, r25	; 0x05
    634a:	8c 83       	std	Y+4, r24	; 0x04
    634c:	93 01       	movw	r18, r6
    634e:	20 1b       	sub	r18, r16
    6350:	31 0b       	sbc	r19, r17
    6352:	4c 81       	ldd	r20, Y+4	; 0x04
    6354:	5d 81       	ldd	r21, Y+5	; 0x05
    6356:	40 1b       	sub	r20, r16
    6358:	51 0b       	sbc	r21, r17
    635a:	b5 01       	movw	r22, r10
    635c:	60 0f       	add	r22, r16
    635e:	71 1f       	adc	r23, r17
    6360:	c6 01       	movw	r24, r12
    6362:	80 0f       	add	r24, r16
    6364:	91 1f       	adc	r25, r17
    6366:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    636a:	0f 5f       	subi	r16, 0xFF	; 255
    636c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5296
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    636e:	03 30       	cpi	r16, 0x03	; 3
    6370:	11 05       	cpc	r17, r1
    6372:	61 f7       	brne	.-40     	; 0x634c <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5298
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    6374:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5299
  str1[1] = 0;
    6376:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5301
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    6378:	ce 01       	movw	r24, r28
    637a:	01 96       	adiw	r24, 0x01	; 1
    637c:	fc 01       	movw	r30, r24
    637e:	01 90       	ld	r0, Z+
    6380:	00 20       	and	r0, r0
    6382:	e9 f7       	brne	.-6      	; 0x637e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    6384:	31 97       	sbiw	r30, 0x01	; 1
    6386:	e8 1b       	sub	r30, r24
    6388:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    638a:	29 2d       	mov	r18, r9
    638c:	22 0f       	add	r18, r18
    638e:	29 0d       	add	r18, r9
    6390:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5303
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    6392:	a2 01       	movw	r20, r4
    6394:	42 1b       	sub	r20, r18
    6396:	51 09       	sbc	r21, r1
    6398:	56 95       	lsr	r21
    639a:	47 95       	ror	r20
    639c:	56 95       	lsr	r21
    639e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5304
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    63a0:	4a 0d       	add	r20, r10
    63a2:	5b 2d       	mov	r21, r11
    63a4:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    63a6:	26 e0       	ldi	r18, 0x06	; 6
    63a8:	e2 9f       	mul	r30, r18
    63aa:	f0 01       	movw	r30, r0
    63ac:	11 24       	eor	r1, r1
    63ae:	9e 9e       	mul	r9, r30
    63b0:	90 01       	movw	r18, r0
    63b2:	9f 9e       	mul	r9, r31
    63b4:	30 0d       	add	r19, r0
    63b6:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5302
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    63b8:	33 27       	eor	r19, r19
    63ba:	b1 01       	movw	r22, r2
    63bc:	62 1b       	sub	r22, r18
    63be:	73 0b       	sbc	r23, r19
    63c0:	76 95       	lsr	r23
    63c2:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5304
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    63c4:	6c 0d       	add	r22, r12
    63c6:	7d 2d       	mov	r23, r13
    63c8:	71 1d       	adc	r23, r1
    63ca:	ee 24       	eor	r14, r14
    63cc:	ea 94       	dec	r14
    63ce:	fe 2c       	mov	r15, r14
    63d0:	10 e0       	ldi	r17, 0x00	; 0
    63d2:	00 e0       	ldi	r16, 0x00	; 0
    63d4:	29 2d       	mov	r18, r9
    63d6:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5305
}
    63da:	0f 90       	pop	r0
    63dc:	0f 90       	pop	r0
    63de:	0f 90       	pop	r0
    63e0:	0f 90       	pop	r0
    63e2:	0f 90       	pop	r0
    63e4:	df 91       	pop	r29
    63e6:	cf 91       	pop	r28
    63e8:	1f 91       	pop	r17
    63ea:	0f 91       	pop	r16
    63ec:	ff 90       	pop	r15
    63ee:	ef 90       	pop	r14
    63f0:	df 90       	pop	r13
    63f2:	cf 90       	pop	r12
    63f4:	bf 90       	pop	r11
    63f6:	af 90       	pop	r10
    63f8:	9f 90       	pop	r9
    63fa:	7f 90       	pop	r7
    63fc:	6f 90       	pop	r6
    63fe:	5f 90       	pop	r5
    6400:	4f 90       	pop	r4
    6402:	3f 90       	pop	r3
    6404:	2f 90       	pop	r2
    6406:	08 95       	ret

00006408 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4924
  }
*/

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6408:	8f 92       	push	r8
    640a:	9f 92       	push	r9
    640c:	af 92       	push	r10
    640e:	bf 92       	push	r11
    6410:	cf 92       	push	r12
    6412:	df 92       	push	r13
    6414:	ef 92       	push	r14
    6416:	ff 92       	push	r15
    6418:	0f 93       	push	r16
    641a:	1f 93       	push	r17
    641c:	cf 93       	push	r28
    641e:	df 93       	push	r29
    6420:	cd b7       	in	r28, 0x3d	; 61
    6422:	de b7       	in	r29, 0x3e	; 62
    6424:	68 97       	sbiw	r28, 0x18	; 24
    6426:	0f b6       	in	r0, 0x3f	; 63
    6428:	f8 94       	cli
    642a:	de bf       	out	0x3e, r29	; 62
    642c:	0f be       	out	0x3f, r0	; 63
    642e:	cd bf       	out	0x3d, r28	; 61
    6430:	5c 01       	movw	r10, r24
    6432:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4927
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    6434:	67 eb       	ldi	r22, 0xB7	; 183
    6436:	7c e3       	ldi	r23, 0x3C	; 60
    6438:	ce 01       	movw	r24, r28
    643a:	01 96       	adiw	r24, 0x01	; 1
    643c:	6c 01       	movw	r12, r24
    643e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4929
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    6442:	a4 01       	movw	r20, r8
    6444:	4b 5f       	subi	r20, 0xFB	; 251
    6446:	5f 4f       	sbci	r21, 0xFF	; 255
    6448:	b5 01       	movw	r22, r10
    644a:	61 5b       	subi	r22, 0xB1	; 177
    644c:	7f 4f       	sbci	r23, 0xFF	; 255
    644e:	ee 24       	eor	r14, r14
    6450:	ea 94       	dec	r14
    6452:	fe 2c       	mov	r15, r14
    6454:	10 e0       	ldi	r17, 0x00	; 0
    6456:	00 e0       	ldi	r16, 0x00	; 0
    6458:	21 e0       	ldi	r18, 0x01	; 1
    645a:	c6 01       	movw	r24, r12
    645c:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    6460:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    6464:	80 fd       	sbrc	r24, 0
    6466:	50 c0       	rjmp	.+160    	; 0x6508 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    6468:	90 91 a9 10 	lds	r25, 0x10A9	; 0x8010a9 <now+0x4>
    646c:	80 91 a8 10 	lds	r24, 0x10A8	; 0x8010a8 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4932
  {
    if (uptime % 2 )
    6470:	20 91 31 0b 	lds	r18, 0x0B31	; 0x800b31 <uptime>
    6474:	20 ff       	sbrs	r18, 0
    6476:	41 c0       	rjmp	.+130    	; 0x64fa <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4933
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    6478:	1f 92       	push	r1
    647a:	9f 93       	push	r25
    647c:	1f 92       	push	r1
    647e:	8f 93       	push	r24
    6480:	8e e1       	ldi	r24, 0x1E	; 30
    6482:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4935
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    6484:	9f 93       	push	r25
    6486:	8f 93       	push	r24
    6488:	df 92       	push	r13
    648a:	cf 92       	push	r12
    648c:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
    6490:	0f b6       	in	r0, 0x3f	; 63
    6492:	f8 94       	cli
    6494:	de bf       	out	0x3e, r29	; 62
    6496:	0f be       	out	0x3f, r0	; 63
    6498:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    649a:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    649e:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4942
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    64a2:	a4 01       	movw	r20, r8
    64a4:	4c 5e       	subi	r20, 0xEC	; 236
    64a6:	5f 4f       	sbci	r21, 0xFF	; 255
    64a8:	b5 01       	movw	r22, r10
    64aa:	6c 5f       	subi	r22, 0xFC	; 252
    64ac:	7f 4f       	sbci	r23, 0xFF	; 255
    64ae:	ee 24       	eor	r14, r14
    64b0:	ea 94       	dec	r14
    64b2:	fe 2c       	mov	r15, r14
    64b4:	10 e0       	ldi	r17, 0x00	; 0
    64b6:	00 e0       	ldi	r16, 0x00	; 0
    64b8:	28 e0       	ldi	r18, 0x08	; 8
    64ba:	c6 01       	movw	r24, r12
    64bc:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4943
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    64c0:	94 01       	movw	r18, r8
    64c2:	2c 5a       	subi	r18, 0xAC	; 172
    64c4:	3f 4f       	sbci	r19, 0xFF	; 255
    64c6:	a5 01       	movw	r20, r10
    64c8:	4c 50       	subi	r20, 0x0C	; 12
    64ca:	5f 4f       	sbci	r21, 0xFF	; 255
    64cc:	b4 01       	movw	r22, r8
    64ce:	c5 01       	movw	r24, r10
    64d0:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4944
}
    64d4:	68 96       	adiw	r28, 0x18	; 24
    64d6:	0f b6       	in	r0, 0x3f	; 63
    64d8:	f8 94       	cli
    64da:	de bf       	out	0x3e, r29	; 62
    64dc:	0f be       	out	0x3f, r0	; 63
    64de:	cd bf       	out	0x3d, r28	; 61
    64e0:	df 91       	pop	r29
    64e2:	cf 91       	pop	r28
    64e4:	1f 91       	pop	r17
    64e6:	0f 91       	pop	r16
    64e8:	ff 90       	pop	r15
    64ea:	ef 90       	pop	r14
    64ec:	df 90       	pop	r13
    64ee:	cf 90       	pop	r12
    64f0:	bf 90       	pop	r11
    64f2:	af 90       	pop	r10
    64f4:	9f 90       	pop	r9
    64f6:	8f 90       	pop	r8
    64f8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4935
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    64fa:	1f 92       	push	r1
    64fc:	9f 93       	push	r25
    64fe:	1f 92       	push	r1
    6500:	8f 93       	push	r24
    6502:	88 e2       	ldi	r24, 0x28	; 40
    6504:	93 e0       	ldi	r25, 0x03	; 3
    6506:	be cf       	rjmp	.-132    	; 0x6484 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4939
  }
  else
  {
    strcpy(str1, "--:--");
    6508:	62 e3       	ldi	r22, 0x32	; 50
    650a:	73 e0       	ldi	r23, 0x03	; 3
    650c:	c6 01       	movw	r24, r12
    650e:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
    6512:	c3 cf       	rjmp	.-122    	; 0x649a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

00006514 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4893
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    6514:	26 0f       	add	r18, r22
    6516:	37 1f       	adc	r19, r23
    6518:	48 0f       	add	r20, r24
    651a:	59 1f       	adc	r21, r25
    651c:	0c 94 c3 8a 	jmp	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>

00006520 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5225
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    6520:	2f 92       	push	r2
    6522:	3f 92       	push	r3
    6524:	4f 92       	push	r4
    6526:	5f 92       	push	r5
    6528:	6f 92       	push	r6
    652a:	7f 92       	push	r7
    652c:	8f 92       	push	r8
    652e:	9f 92       	push	r9
    6530:	af 92       	push	r10
    6532:	bf 92       	push	r11
    6534:	cf 92       	push	r12
    6536:	df 92       	push	r13
    6538:	ef 92       	push	r14
    653a:	ff 92       	push	r15
    653c:	0f 93       	push	r16
    653e:	1f 93       	push	r17
    6540:	cf 93       	push	r28
    6542:	df 93       	push	r29
    6544:	00 d0       	rcall	.+0      	; 0x6546 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    6546:	1f 92       	push	r1
    6548:	cd b7       	in	r28, 0x3d	; 61
    654a:	de b7       	in	r29, 0x3e	; 62
    654c:	2c 01       	movw	r4, r24
    654e:	3b 01       	movw	r6, r22
    6550:	0a 83       	std	Y+2, r16	; 0x02
    6552:	eb 82       	std	Y+3, r14	; 0x03
    6554:	3a 2c       	mov	r3, r10
    6556:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5238
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    6558:	31 e0       	ldi	r19, 0x01	; 1
    655a:	83 12       	cpse	r8, r19
    655c:	02 c0       	rjmp	.+4      	; 0x6562 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5239
    back_color = color_active;
    655e:	3c 2c       	mov	r3, r12
    6560:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6562:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6566:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    656a:	10 e0       	ldi	r17, 0x00	; 0
    656c:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5242
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    656e:	a2 2e       	mov	r10, r18
    6570:	b1 2c       	mov	r11, r1
    6572:	84 2e       	mov	r8, r20
    6574:	91 2c       	mov	r9, r1
    6576:	65 01       	movw	r12, r10
    6578:	c6 0c       	add	r12, r6
    657a:	d7 1c       	adc	r13, r7
    657c:	74 01       	movw	r14, r8
    657e:	e4 0c       	add	r14, r4
    6580:	f5 1c       	adc	r15, r5
    6582:	96 01       	movw	r18, r12
    6584:	20 1b       	sub	r18, r16
    6586:	31 0b       	sbc	r19, r17
    6588:	a7 01       	movw	r20, r14
    658a:	40 1b       	sub	r20, r16
    658c:	51 0b       	sbc	r21, r17
    658e:	b3 01       	movw	r22, r6
    6590:	60 0f       	add	r22, r16
    6592:	71 1f       	adc	r23, r17
    6594:	c2 01       	movw	r24, r4
    6596:	80 0f       	add	r24, r16
    6598:	91 1f       	adc	r25, r17
    659a:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    659e:	0f 5f       	subi	r16, 0xFF	; 255
    65a0:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5241
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    65a2:	03 30       	cpi	r16, 0x03	; 3
    65a4:	11 05       	cpc	r17, r1
    65a6:	69 f7       	brne	.-38     	; 0x6582 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    65a8:	30 92 1f 0e 	sts	0x0E1F, r3	; 0x800e1f <my_lcd+0xa>
    65ac:	20 92 20 0e 	sts	0x0E20, r2	; 0x800e20 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5244
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    65b0:	93 01       	movw	r18, r6
    65b2:	23 50       	subi	r18, 0x03	; 3
    65b4:	31 09       	sbc	r19, r1
    65b6:	2a 0d       	add	r18, r10
    65b8:	3b 1d       	adc	r19, r11
    65ba:	a2 01       	movw	r20, r4
    65bc:	43 50       	subi	r20, 0x03	; 3
    65be:	51 09       	sbc	r21, r1
    65c0:	48 0d       	add	r20, r8
    65c2:	59 1d       	adc	r21, r9
    65c4:	b3 01       	movw	r22, r6
    65c6:	6d 5f       	subi	r22, 0xFD	; 253
    65c8:	7f 4f       	sbci	r23, 0xFF	; 255
    65ca:	c2 01       	movw	r24, r4
    65cc:	03 96       	adiw	r24, 0x03	; 3
    65ce:	0e 94 1c 8b 	call	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5245
  if (strlen(line1) > 0)
    65d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    65d4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    65d6:	80 81       	ld	r24, Z
    65d8:	88 23       	and	r24, r24
    65da:	09 f4       	brne	.+2      	; 0x65de <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xbe>
    65dc:	a1 c0       	rjmp	.+322    	; 0x6720 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5247
  {
    prvni = 1;
    65de:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5248
    num_lines_const = 2;
    65e0:	f2 e0       	ldi	r31, 0x02	; 2
    65e2:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5250
  }
  if (strlen(line2) > 0)
    65e4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    65e6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    65e8:	90 81       	ld	r25, Z
    65ea:	99 23       	and	r25, r25
    65ec:	09 f4       	brne	.+2      	; 0x65f0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd0>
    65ee:	9b c0       	rjmp	.+310    	; 0x6726 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5253
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
    65f0:	f9 81       	ldd	r31, Y+1	; 0x01
    65f2:	fe 5f       	subi	r31, 0xFE	; 254
    65f4:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5252
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
    65f6:	21 e0       	ldi	r18, 0x01	; 1
    65f8:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5229
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    65fa:	d1 2c       	mov	r13, r1
    65fc:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5255
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
    65fe:	81 30       	cpi	r24, 0x01	; 1
    6600:	d1 f5       	brne	.+116    	; 0x6676 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x156>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5257
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    6602:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6604:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6606:	01 90       	ld	r0, Z+
    6608:	00 20       	and	r0, r0
    660a:	e9 f7       	brne	.-6      	; 0x6606 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    660c:	9f 01       	movw	r18, r30
    660e:	21 50       	subi	r18, 0x01	; 1
    6610:	31 09       	sbc	r19, r1
    6612:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6614:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6616:	24 1b       	sub	r18, r20
    6618:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    661a:	8a 81       	ldd	r24, Y+2	; 0x02
    661c:	88 0f       	add	r24, r24
    661e:	5a 81       	ldd	r21, Y+2	; 0x02
    6620:	85 0f       	add	r24, r21
    6622:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5259
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    6624:	f5 01       	movw	r30, r10
    6626:	e8 1b       	sub	r30, r24
    6628:	f1 09       	sbc	r31, r1
    662a:	cf 01       	movw	r24, r30
    662c:	f9 81       	ldd	r31, Y+1	; 0x01
    662e:	6f 2f       	mov	r22, r31
    6630:	70 e0       	ldi	r23, 0x00	; 0
    6632:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
    6636:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5260
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    6638:	a3 01       	movw	r20, r6
    663a:	41 50       	subi	r20, 0x01	; 1
    663c:	51 09       	sbc	r21, r1
    663e:	46 0f       	add	r20, r22
    6640:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6642:	66 e0       	ldi	r22, 0x06	; 6
    6644:	26 9f       	mul	r18, r22
    6646:	90 01       	movw	r18, r0
    6648:	11 24       	eor	r1, r1
    664a:	ea 81       	ldd	r30, Y+2	; 0x02
    664c:	e2 9f       	mul	r30, r18
    664e:	c0 01       	movw	r24, r0
    6650:	e3 9f       	mul	r30, r19
    6652:	90 0d       	add	r25, r0
    6654:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5258
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    6656:	b4 01       	movw	r22, r8
    6658:	68 1b       	sub	r22, r24
    665a:	79 0b       	sbc	r23, r25
    665c:	76 95       	lsr	r23
    665e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5260
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    6660:	64 0d       	add	r22, r4
    6662:	75 1d       	adc	r23, r5
    6664:	e3 2c       	mov	r14, r3
    6666:	f2 2c       	mov	r15, r2
    6668:	10 e0       	ldi	r17, 0x00	; 0
    666a:	00 e0       	ldi	r16, 0x00	; 0
    666c:	2e 2f       	mov	r18, r30
    666e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6670:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6672:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5262
  }
  if (druhy == 1)
    6676:	fc 81       	ldd	r31, Y+4	; 0x04
    6678:	f1 30       	cpi	r31, 0x01	; 1
    667a:	d9 f5       	brne	.+118    	; 0x66f2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5264
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    667c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    667e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    6680:	01 90       	ld	r0, Z+
    6682:	00 20       	and	r0, r0
    6684:	e9 f7       	brne	.-6      	; 0x6680 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x160>
    6686:	31 97       	sbiw	r30, 0x01	; 1
    6688:	2c 8d       	ldd	r18, Y+28	; 0x1c
    668a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    668c:	e2 1b       	sub	r30, r18
    668e:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    6690:	8b 81       	ldd	r24, Y+3	; 0x03
    6692:	88 0f       	add	r24, r24
    6694:	3b 81       	ldd	r19, Y+3	; 0x03
    6696:	83 0f       	add	r24, r19
    6698:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5266
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    669a:	a5 01       	movw	r20, r10
    669c:	48 1b       	sub	r20, r24
    669e:	51 09       	sbc	r21, r1
    66a0:	ca 01       	movw	r24, r20
    66a2:	88 0f       	add	r24, r24
    66a4:	99 1f       	adc	r25, r25
    66a6:	59 81       	ldd	r21, Y+1	; 0x01
    66a8:	65 2f       	mov	r22, r21
    66aa:	70 e0       	ldi	r23, 0x00	; 0
    66ac:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5267
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    66b0:	81 e0       	ldi	r24, 0x01	; 1
    66b2:	68 1a       	sub	r6, r24
    66b4:	71 08       	sbc	r7, r1
    66b6:	66 0e       	add	r6, r22
    66b8:	77 1e       	adc	r7, r23
    66ba:	a3 01       	movw	r20, r6
    66bc:	4c 0d       	add	r20, r12
    66be:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    66c0:	96 e0       	ldi	r25, 0x06	; 6
    66c2:	e9 9f       	mul	r30, r25
    66c4:	f0 01       	movw	r30, r0
    66c6:	11 24       	eor	r1, r1
    66c8:	3e 9f       	mul	r19, r30
    66ca:	c0 01       	movw	r24, r0
    66cc:	3f 9f       	mul	r19, r31
    66ce:	90 0d       	add	r25, r0
    66d0:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5265
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    66d2:	b4 01       	movw	r22, r8
    66d4:	68 1b       	sub	r22, r24
    66d6:	79 0b       	sbc	r23, r25
    66d8:	76 95       	lsr	r23
    66da:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5267
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    66dc:	64 0d       	add	r22, r4
    66de:	75 1d       	adc	r23, r5
    66e0:	e3 2c       	mov	r14, r3
    66e2:	f2 2c       	mov	r15, r2
    66e4:	10 e0       	ldi	r17, 0x00	; 0
    66e6:	00 e0       	ldi	r16, 0x00	; 0
    66e8:	23 2f       	mov	r18, r19
    66ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    66ee:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5269
  }
}
    66f2:	0f 90       	pop	r0
    66f4:	0f 90       	pop	r0
    66f6:	0f 90       	pop	r0
    66f8:	0f 90       	pop	r0
    66fa:	df 91       	pop	r29
    66fc:	cf 91       	pop	r28
    66fe:	1f 91       	pop	r17
    6700:	0f 91       	pop	r16
    6702:	ff 90       	pop	r15
    6704:	ef 90       	pop	r14
    6706:	df 90       	pop	r13
    6708:	cf 90       	pop	r12
    670a:	bf 90       	pop	r11
    670c:	af 90       	pop	r10
    670e:	9f 90       	pop	r9
    6710:	8f 90       	pop	r8
    6712:	7f 90       	pop	r7
    6714:	6f 90       	pop	r6
    6716:	5f 90       	pop	r5
    6718:	4f 90       	pop	r4
    671a:	3f 90       	pop	r3
    671c:	2f 90       	pop	r2
    671e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5235
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
    6720:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5234
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    6722:	19 82       	std	Y+1, r1	; 0x01
    6724:	5f cf       	rjmp	.-322    	; 0x65e4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5236
  uint8_t prvni = 0;
  uint8_t druhy = 0;
    6726:	1c 82       	std	Y+4, r1	; 0x04
    6728:	68 cf       	rjmp	.-304    	; 0x65fa <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xda>

0000672a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5189
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    672a:	2f 92       	push	r2
    672c:	3f 92       	push	r3
    672e:	4f 92       	push	r4
    6730:	5f 92       	push	r5
    6732:	6f 92       	push	r6
    6734:	7f 92       	push	r7
    6736:	8f 92       	push	r8
    6738:	9f 92       	push	r9
    673a:	af 92       	push	r10
    673c:	bf 92       	push	r11
    673e:	cf 92       	push	r12
    6740:	df 92       	push	r13
    6742:	ef 92       	push	r14
    6744:	ff 92       	push	r15
    6746:	0f 93       	push	r16
    6748:	1f 93       	push	r17
    674a:	cf 93       	push	r28
    674c:	df 93       	push	r29
    674e:	00 d0       	rcall	.+0      	; 0x6750 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    6750:	1f 92       	push	r1
    6752:	1f 92       	push	r1
    6754:	cd b7       	in	r28, 0x3d	; 61
    6756:	de b7       	in	r29, 0x3e	; 62
    6758:	2c 01       	movw	r4, r24
    675a:	3b 01       	movw	r6, r22
    675c:	5a 83       	std	Y+2, r21	; 0x02
    675e:	49 83       	std	Y+1, r20	; 0x01
    6760:	19 01       	movw	r2, r18
    6762:	90 2e       	mov	r9, r16
    6764:	eb 82       	std	Y+3, r14	; 0x03
    6766:	dd 82       	std	Y+5, r13	; 0x05
    6768:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    676a:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    676e:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    6772:	10 e0       	ldi	r17, 0x00	; 0
    6774:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5199
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6776:	6b 01       	movw	r12, r22
    6778:	c2 0e       	add	r12, r18
    677a:	d3 1e       	adc	r13, r19
    677c:	7a 01       	movw	r14, r20
    677e:	e8 0e       	add	r14, r24
    6780:	f9 1e       	adc	r15, r25
    6782:	96 01       	movw	r18, r12
    6784:	20 1b       	sub	r18, r16
    6786:	31 0b       	sbc	r19, r17
    6788:	a7 01       	movw	r20, r14
    678a:	40 1b       	sub	r20, r16
    678c:	51 0b       	sbc	r21, r17
    678e:	b8 01       	movw	r22, r16
    6790:	66 0d       	add	r22, r6
    6792:	77 1d       	adc	r23, r7
    6794:	c8 01       	movw	r24, r16
    6796:	84 0d       	add	r24, r4
    6798:	95 1d       	adc	r25, r5
    679a:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    679e:	0f 5f       	subi	r16, 0xFF	; 255
    67a0:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5198
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    67a2:	03 30       	cpi	r16, 0x03	; 3
    67a4:	11 05       	cpc	r17, r1
    67a6:	69 f7       	brne	.-38     	; 0x6782 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    67a8:	91 01       	movw	r18, r2
    67aa:	23 50       	subi	r18, 0x03	; 3
    67ac:	31 09       	sbc	r19, r1
    67ae:	49 81       	ldd	r20, Y+1	; 0x01
    67b0:	5a 81       	ldd	r21, Y+2	; 0x02
    67b2:	43 50       	subi	r20, 0x03	; 3
    67b4:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    67b6:	61 e0       	ldi	r22, 0x01	; 1
    67b8:	86 12       	cpse	r8, r22
    67ba:	11 c0       	rjmp	.+34     	; 0x67de <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    67bc:	8f ef       	ldi	r24, 0xFF	; 255
    67be:	9f ef       	ldi	r25, 0xFF	; 255
    67c0:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    67c4:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5203
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    67c8:	26 0d       	add	r18, r6
    67ca:	37 1d       	adc	r19, r7
    67cc:	44 0d       	add	r20, r4
    67ce:	55 1d       	adc	r21, r5
    67d0:	b3 01       	movw	r22, r6
    67d2:	6d 5f       	subi	r22, 0xFD	; 253
    67d4:	7f 4f       	sbci	r23, 0xFF	; 255
    67d6:	c2 01       	movw	r24, r4
    67d8:	03 96       	adiw	r24, 0x03	; 3
    67da:	0e 94 1c 8b 	call	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5205
  }
  if (strlen(line1) > 0)
    67de:	ec 81       	ldd	r30, Y+4	; 0x04
    67e0:	fd 81       	ldd	r31, Y+5	; 0x05
    67e2:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5196
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    67e4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5191
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    67e6:	d1 2c       	mov	r13, r1
    67e8:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5205
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    67ea:	88 23       	and	r24, r24
    67ec:	91 f1       	breq	.+100    	; 0x6852 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5208
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    67ee:	01 90       	ld	r0, Z+
    67f0:	00 20       	and	r0, r0
    67f2:	e9 f7       	brne	.-6      	; 0x67ee <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    67f4:	31 97       	sbiw	r30, 0x01	; 1
    67f6:	4c 81       	ldd	r20, Y+4	; 0x04
    67f8:	5d 81       	ldd	r21, Y+5	; 0x05
    67fa:	e4 1b       	sub	r30, r20
    67fc:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    67fe:	89 2d       	mov	r24, r9
    6800:	88 0f       	add	r24, r24
    6802:	89 0d       	add	r24, r9
    6804:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5210
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    6806:	61 01       	movw	r12, r2
    6808:	c8 1a       	sub	r12, r24
    680a:	d1 08       	sbc	r13, r1
    680c:	d6 94       	lsr	r13
    680e:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5211
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    6810:	a3 01       	movw	r20, r6
    6812:	41 50       	subi	r20, 0x01	; 1
    6814:	51 09       	sbc	r21, r1
    6816:	4c 0d       	add	r20, r12
    6818:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    681a:	66 e0       	ldi	r22, 0x06	; 6
    681c:	e6 9f       	mul	r30, r22
    681e:	f0 01       	movw	r30, r0
    6820:	11 24       	eor	r1, r1
    6822:	9e 9e       	mul	r9, r30
    6824:	c0 01       	movw	r24, r0
    6826:	9f 9e       	mul	r9, r31
    6828:	90 0d       	add	r25, r0
    682a:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5209
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    682c:	69 81       	ldd	r22, Y+1	; 0x01
    682e:	7a 81       	ldd	r23, Y+2	; 0x02
    6830:	68 1b       	sub	r22, r24
    6832:	79 0b       	sbc	r23, r25
    6834:	76 95       	lsr	r23
    6836:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5211
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    6838:	64 0d       	add	r22, r4
    683a:	75 1d       	adc	r23, r5
    683c:	ee 24       	eor	r14, r14
    683e:	ea 94       	dec	r14
    6840:	fe 2c       	mov	r15, r14
    6842:	10 e0       	ldi	r17, 0x00	; 0
    6844:	00 e0       	ldi	r16, 0x00	; 0
    6846:	29 2d       	mov	r18, r9
    6848:	8c 81       	ldd	r24, Y+4	; 0x04
    684a:	9d 81       	ldd	r25, Y+5	; 0x05
    684c:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5207
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    6850:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5213
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    6852:	f5 01       	movw	r30, r10
    6854:	80 81       	ld	r24, Z
    6856:	88 23       	and	r24, r24
    6858:	b9 f1       	breq	.+110    	; 0x68c8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5216
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    685a:	01 90       	ld	r0, Z+
    685c:	00 20       	and	r0, r0
    685e:	e9 f7       	brne	.-6      	; 0x685a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    6860:	9f 01       	movw	r18, r30
    6862:	21 50       	subi	r18, 0x01	; 1
    6864:	31 09       	sbc	r19, r1
    6866:	2a 19       	sub	r18, r10
    6868:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    686a:	8b 81       	ldd	r24, Y+3	; 0x03
    686c:	88 0f       	add	r24, r24
    686e:	fb 81       	ldd	r31, Y+3	; 0x03
    6870:	8f 0f       	add	r24, r31
    6872:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5218
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    6874:	a1 01       	movw	r20, r2
    6876:	48 1b       	sub	r20, r24
    6878:	51 09       	sbc	r21, r1
    687a:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5215
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    687c:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5218
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    687e:	70 e0       	ldi	r23, 0x00	; 0
    6880:	0e 94 49 bb 	call	0x17692	; 0x17692 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5219
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    6884:	51 e0       	ldi	r21, 0x01	; 1
    6886:	65 1a       	sub	r6, r21
    6888:	71 08       	sbc	r7, r1
    688a:	c6 0c       	add	r12, r6
    688c:	d7 1c       	adc	r13, r7
    688e:	ab 01       	movw	r20, r22
    6890:	4c 0d       	add	r20, r12
    6892:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6894:	66 e0       	ldi	r22, 0x06	; 6
    6896:	26 9f       	mul	r18, r22
    6898:	90 01       	movw	r18, r0
    689a:	11 24       	eor	r1, r1
    689c:	f2 9f       	mul	r31, r18
    689e:	c0 01       	movw	r24, r0
    68a0:	f3 9f       	mul	r31, r19
    68a2:	90 0d       	add	r25, r0
    68a4:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5217
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    68a6:	69 81       	ldd	r22, Y+1	; 0x01
    68a8:	7a 81       	ldd	r23, Y+2	; 0x02
    68aa:	68 1b       	sub	r22, r24
    68ac:	79 0b       	sbc	r23, r25
    68ae:	76 95       	lsr	r23
    68b0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5219
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    68b2:	64 0d       	add	r22, r4
    68b4:	75 1d       	adc	r23, r5
    68b6:	ee 24       	eor	r14, r14
    68b8:	ea 94       	dec	r14
    68ba:	fe 2c       	mov	r15, r14
    68bc:	10 e0       	ldi	r17, 0x00	; 0
    68be:	00 e0       	ldi	r16, 0x00	; 0
    68c0:	2f 2f       	mov	r18, r31
    68c2:	c5 01       	movw	r24, r10
    68c4:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5221
  }
}
    68c8:	0f 90       	pop	r0
    68ca:	0f 90       	pop	r0
    68cc:	0f 90       	pop	r0
    68ce:	0f 90       	pop	r0
    68d0:	0f 90       	pop	r0
    68d2:	df 91       	pop	r29
    68d4:	cf 91       	pop	r28
    68d6:	1f 91       	pop	r17
    68d8:	0f 91       	pop	r16
    68da:	ff 90       	pop	r15
    68dc:	ef 90       	pop	r14
    68de:	df 90       	pop	r13
    68e0:	cf 90       	pop	r12
    68e2:	bf 90       	pop	r11
    68e4:	af 90       	pop	r10
    68e6:	9f 90       	pop	r9
    68e8:	8f 90       	pop	r8
    68ea:	7f 90       	pop	r7
    68ec:	6f 90       	pop	r6
    68ee:	5f 90       	pop	r5
    68f0:	4f 90       	pop	r4
    68f2:	3f 90       	pop	r3
    68f4:	2f 90       	pop	r2
    68f6:	08 95       	ret

000068f8 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5140
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    68f8:	4f 92       	push	r4
    68fa:	5f 92       	push	r5
    68fc:	6f 92       	push	r6
    68fe:	7f 92       	push	r7
    6900:	8f 92       	push	r8
    6902:	9f 92       	push	r9
    6904:	af 92       	push	r10
    6906:	bf 92       	push	r11
    6908:	cf 92       	push	r12
    690a:	df 92       	push	r13
    690c:	ef 92       	push	r14
    690e:	ff 92       	push	r15
    6910:	0f 93       	push	r16
    6912:	cf 93       	push	r28
    6914:	df 93       	push	r29
    6916:	ec 01       	movw	r28, r24
    6918:	6b 01       	movw	r12, r22
    691a:	2a 01       	movw	r4, r20
    691c:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    691e:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6922:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    6926:	f1 2c       	mov	r15, r1
    6928:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5144
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    692a:	3b 01       	movw	r6, r22
    692c:	62 0e       	add	r6, r18
    692e:	73 1e       	adc	r7, r19
    6930:	4c 01       	movw	r8, r24
    6932:	84 0e       	add	r8, r20
    6934:	95 1e       	adc	r9, r21
    6936:	93 01       	movw	r18, r6
    6938:	2e 19       	sub	r18, r14
    693a:	3f 09       	sbc	r19, r15
    693c:	a4 01       	movw	r20, r8
    693e:	4e 19       	sub	r20, r14
    6940:	5f 09       	sbc	r21, r15
    6942:	b7 01       	movw	r22, r14
    6944:	6c 0d       	add	r22, r12
    6946:	7d 1d       	adc	r23, r13
    6948:	c7 01       	movw	r24, r14
    694a:	8c 0f       	add	r24, r28
    694c:	9d 1f       	adc	r25, r29
    694e:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6952:	8f ef       	ldi	r24, 0xFF	; 255
    6954:	e8 1a       	sub	r14, r24
    6956:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5143
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    6958:	83 e0       	ldi	r24, 0x03	; 3
    695a:	e8 16       	cp	r14, r24
    695c:	f1 04       	cpc	r15, r1
    695e:	59 f7       	brne	.-42     	; 0x6936 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6960:	8f ef       	ldi	r24, 0xFF	; 255
    6962:	9f ef       	ldi	r25, 0xFF	; 255
    6964:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    6968:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5146
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    696c:	83 e0       	ldi	r24, 0x03	; 3
    696e:	48 1a       	sub	r4, r24
    6970:	51 08       	sbc	r5, r1
    6972:	4c 0e       	add	r4, r28
    6974:	5d 1e       	adc	r5, r29
    6976:	23 96       	adiw	r28, 0x03	; 3
    6978:	95 01       	movw	r18, r10
    697a:	23 50       	subi	r18, 0x03	; 3
    697c:	31 09       	sbc	r19, r1
    697e:	2c 0d       	add	r18, r12
    6980:	3d 1d       	adc	r19, r13
    6982:	b6 01       	movw	r22, r12
    6984:	6d 5f       	subi	r22, 0xFD	; 253
    6986:	7f 4f       	sbci	r23, 0xFF	; 255
    6988:	a2 01       	movw	r20, r4
    698a:	ce 01       	movw	r24, r28
    698c:	0e 94 1c 8b 	call	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5147
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    6990:	60 91 f8 08 	lds	r22, 0x08F8	; 0x8008f8 <menu_slider_data_max>
    6994:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <menu_slider_data_max_element>
    6998:	68 1b       	sub	r22, r24
    699a:	77 0b       	sbc	r23, r23
    699c:	6f 5f       	subi	r22, 0xFF	; 255
    699e:	7f 4f       	sbci	r23, 0xFF	; 255
    69a0:	c5 01       	movw	r24, r10
    69a2:	0e 94 49 bb 	call	0x17692	; 0x17692 <__udivmodhi4>
    69a6:	e0 2f       	mov	r30, r16
    69a8:	f0 e0       	ldi	r31, 0x00	; 0
    69aa:	ef 50       	subi	r30, 0x0F	; 15
    69ac:	f7 4f       	sbci	r31, 0xF7	; 247
    69ae:	80 81       	ld	r24, Z
    69b0:	86 9f       	mul	r24, r22
    69b2:	60 2d       	mov	r22, r0
    69b4:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    69b6:	8a e9       	ldi	r24, 0x9A	; 154
    69b8:	96 ed       	ldi	r25, 0xD6	; 214
    69ba:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    69be:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5149
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    69c2:	6c 0d       	add	r22, r12
    69c4:	7d 2d       	mov	r23, r13
    69c6:	71 1d       	adc	r23, r1
    69c8:	9b 01       	movw	r18, r22
    69ca:	26 5f       	subi	r18, 0xF6	; 246
    69cc:	3f 4f       	sbci	r19, 0xFF	; 255
    69ce:	6b 5f       	subi	r22, 0xFB	; 251
    69d0:	7f 4f       	sbci	r23, 0xFF	; 255
    69d2:	a2 01       	movw	r20, r4
    69d4:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5150
}
    69d6:	df 91       	pop	r29
    69d8:	cf 91       	pop	r28
    69da:	0f 91       	pop	r16
    69dc:	ff 90       	pop	r15
    69de:	ef 90       	pop	r14
    69e0:	df 90       	pop	r13
    69e2:	cf 90       	pop	r12
    69e4:	bf 90       	pop	r11
    69e6:	af 90       	pop	r10
    69e8:	9f 90       	pop	r9
    69ea:	8f 90       	pop	r8
    69ec:	7f 90       	pop	r7
    69ee:	6f 90       	pop	r6
    69f0:	5f 90       	pop	r5
    69f2:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5149
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    69f4:	0c 94 1c 8b 	jmp	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>

000069f8 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5119
  if (strlen(text) > 0)
    show_string(text, x + 2 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    69f8:	6f 92       	push	r6
    69fa:	7f 92       	push	r7
    69fc:	8f 92       	push	r8
    69fe:	9f 92       	push	r9
    6a00:	af 92       	push	r10
    6a02:	bf 92       	push	r11
    6a04:	cf 92       	push	r12
    6a06:	df 92       	push	r13
    6a08:	ef 92       	push	r14
    6a0a:	ff 92       	push	r15
    6a0c:	0f 93       	push	r16
    6a0e:	1f 93       	push	r17
    6a10:	cf 93       	push	r28
    6a12:	df 93       	push	r29
    6a14:	6c 01       	movw	r12, r24
    6a16:	8b 01       	movw	r16, r22
    6a18:	3a 01       	movw	r6, r20
    6a1a:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6a1c:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6a20:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    6a24:	f1 2c       	mov	r15, r1
    6a26:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5123
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6a28:	4b 01       	movw	r8, r22
    6a2a:	82 0e       	add	r8, r18
    6a2c:	93 1e       	adc	r9, r19
    6a2e:	5c 01       	movw	r10, r24
    6a30:	a4 0e       	add	r10, r20
    6a32:	b5 1e       	adc	r11, r21
    6a34:	94 01       	movw	r18, r8
    6a36:	2e 19       	sub	r18, r14
    6a38:	3f 09       	sbc	r19, r15
    6a3a:	a5 01       	movw	r20, r10
    6a3c:	4e 19       	sub	r20, r14
    6a3e:	5f 09       	sbc	r21, r15
    6a40:	b7 01       	movw	r22, r14
    6a42:	60 0f       	add	r22, r16
    6a44:	71 1f       	adc	r23, r17
    6a46:	c7 01       	movw	r24, r14
    6a48:	8c 0d       	add	r24, r12
    6a4a:	9d 1d       	adc	r25, r13
    6a4c:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6a50:	2f ef       	ldi	r18, 0xFF	; 255
    6a52:	e2 1a       	sub	r14, r18
    6a54:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5122
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    6a56:	83 e0       	ldi	r24, 0x03	; 3
    6a58:	e8 16       	cp	r14, r24
    6a5a:	f1 04       	cpc	r15, r1
    6a5c:	59 f7       	brne	.-42     	; 0x6a34 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6a5e:	8f ef       	ldi	r24, 0xFF	; 255
    6a60:	9f ef       	ldi	r25, 0xFF	; 255
    6a62:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    6a66:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5125
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    6a6a:	9e 01       	movw	r18, r28
    6a6c:	23 50       	subi	r18, 0x03	; 3
    6a6e:	31 09       	sbc	r19, r1
    6a70:	20 0f       	add	r18, r16
    6a72:	31 1f       	adc	r19, r17
    6a74:	a3 01       	movw	r20, r6
    6a76:	43 50       	subi	r20, 0x03	; 3
    6a78:	51 09       	sbc	r21, r1
    6a7a:	4c 0d       	add	r20, r12
    6a7c:	5d 1d       	adc	r21, r13
    6a7e:	b8 01       	movw	r22, r16
    6a80:	6d 5f       	subi	r22, 0xFD	; 253
    6a82:	7f 4f       	sbci	r23, 0xFF	; 255
    6a84:	c6 01       	movw	r24, r12
    6a86:	03 96       	adiw	r24, 0x03	; 3
    6a88:	0e 94 1c 8b 	call	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6a8c:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6a90:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5128

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    6a94:	8d e2       	ldi	r24, 0x2D	; 45
    6a96:	99 e0       	ldi	r25, 0x09	; 9
    6a98:	fc 01       	movw	r30, r24
    6a9a:	01 90       	ld	r0, Z+
    6a9c:	00 20       	and	r0, r0
    6a9e:	e9 f7       	brne	.-6      	; 0x6a9a <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    6aa0:	cf 01       	movw	r24, r30
    6aa2:	8e 52       	subi	r24, 0x2E	; 46
    6aa4:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5130
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    6aa6:	ae 01       	movw	r20, r28
    6aa8:	4c 50       	subi	r20, 0x0C	; 12
    6aaa:	51 09       	sbc	r21, r1
    6aac:	56 95       	lsr	r21
    6aae:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5131
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6ab0:	01 50       	subi	r16, 0x01	; 1
    6ab2:	11 09       	sbc	r17, r1
    6ab4:	40 0f       	add	r20, r16
    6ab6:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6ab8:	f6 e0       	ldi	r31, 0x06	; 6
    6aba:	8f 9f       	mul	r24, r31
    6abc:	c0 01       	movw	r24, r0
    6abe:	11 24       	eor	r1, r1
    6ac0:	88 0f       	add	r24, r24
    6ac2:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5129
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    6ac4:	b3 01       	movw	r22, r6
    6ac6:	68 1b       	sub	r22, r24
    6ac8:	79 0b       	sbc	r23, r25
    6aca:	76 95       	lsr	r23
    6acc:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5131
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6ace:	6c 0d       	add	r22, r12
    6ad0:	7d 1d       	adc	r23, r13
    6ad2:	ee 24       	eor	r14, r14
    6ad4:	ea 94       	dec	r14
    6ad6:	fe 2c       	mov	r15, r14
    6ad8:	10 e0       	ldi	r17, 0x00	; 0
    6ada:	00 e0       	ldi	r16, 0x00	; 0
    6adc:	22 e0       	ldi	r18, 0x02	; 2
    6ade:	8d e2       	ldi	r24, 0x2D	; 45
    6ae0:	99 e0       	ldi	r25, 0x09	; 9
    6ae2:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5132
}
    6ae6:	df 91       	pop	r29
    6ae8:	cf 91       	pop	r28
    6aea:	1f 91       	pop	r17
    6aec:	0f 91       	pop	r16
    6aee:	ff 90       	pop	r15
    6af0:	ef 90       	pop	r14
    6af2:	df 90       	pop	r13
    6af4:	cf 90       	pop	r12
    6af6:	bf 90       	pop	r11
    6af8:	af 90       	pop	r10
    6afa:	9f 90       	pop	r9
    6afc:	8f 90       	pop	r8
    6afe:	7f 90       	pop	r7
    6b00:	6f 90       	pop	r6
    6b02:	08 95       	ret

00006b04 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5090
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t idx, uint8_t args2, char *text)
{
    6b04:	2f 92       	push	r2
    6b06:	3f 92       	push	r3
    6b08:	4f 92       	push	r4
    6b0a:	5f 92       	push	r5
    6b0c:	6f 92       	push	r6
    6b0e:	7f 92       	push	r7
    6b10:	8f 92       	push	r8
    6b12:	9f 92       	push	r9
    6b14:	af 92       	push	r10
    6b16:	bf 92       	push	r11
    6b18:	cf 92       	push	r12
    6b1a:	df 92       	push	r13
    6b1c:	ef 92       	push	r14
    6b1e:	ff 92       	push	r15
    6b20:	0f 93       	push	r16
    6b22:	1f 93       	push	r17
    6b24:	cf 93       	push	r28
    6b26:	df 93       	push	r29
    6b28:	00 d0       	rcall	.+0      	; 0x6b2a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x26>
    6b2a:	00 d0       	rcall	.+0      	; 0x6b2c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x28>
    6b2c:	00 d0       	rcall	.+0      	; 0x6b2e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x2a>
    6b2e:	1f 92       	push	r1
    6b30:	cd b7       	in	r28, 0x3d	; 61
    6b32:	de b7       	in	r29, 0x3e	; 62
    6b34:	5c 01       	movw	r10, r24
    6b36:	7b 01       	movw	r14, r22
    6b38:	2a 01       	movw	r4, r20
    6b3a:	39 01       	movw	r6, r18
    6b3c:	0a 87       	std	Y+10, r16	; 0x0a
    6b3e:	16 01       	movw	r2, r12
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6b40:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6b44:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    6b48:	10 e0       	ldi	r17, 0x00	; 0
    6b4a:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5097
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    6b4c:	4b 01       	movw	r8, r22
    6b4e:	82 0e       	add	r8, r18
    6b50:	93 1e       	adc	r9, r19
    6b52:	6c 01       	movw	r12, r24
    6b54:	c4 0e       	add	r12, r20
    6b56:	d5 1e       	adc	r13, r21
    6b58:	94 01       	movw	r18, r8
    6b5a:	20 1b       	sub	r18, r16
    6b5c:	31 0b       	sbc	r19, r17
    6b5e:	a6 01       	movw	r20, r12
    6b60:	40 1b       	sub	r20, r16
    6b62:	51 0b       	sbc	r21, r17
    6b64:	b8 01       	movw	r22, r16
    6b66:	6e 0d       	add	r22, r14
    6b68:	7f 1d       	adc	r23, r15
    6b6a:	c8 01       	movw	r24, r16
    6b6c:	8a 0d       	add	r24, r10
    6b6e:	9b 1d       	adc	r25, r11
    6b70:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6b74:	0f 5f       	subi	r16, 0xFF	; 255
    6b76:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5096
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    6b78:	03 30       	cpi	r16, 0x03	; 3
    6b7a:	11 05       	cpc	r17, r1
    6b7c:	69 f7       	brne	.-38     	; 0x6b58 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x54>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6b7e:	8f ef       	ldi	r24, 0xFF	; 255
    6b80:	9f ef       	ldi	r25, 0xFF	; 255
    6b82:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    6b86:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5099
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    6b8a:	93 01       	movw	r18, r6
    6b8c:	23 50       	subi	r18, 0x03	; 3
    6b8e:	31 09       	sbc	r19, r1
    6b90:	2e 0d       	add	r18, r14
    6b92:	3f 1d       	adc	r19, r15
    6b94:	a2 01       	movw	r20, r4
    6b96:	43 50       	subi	r20, 0x03	; 3
    6b98:	51 09       	sbc	r21, r1
    6b9a:	4a 0d       	add	r20, r10
    6b9c:	5b 1d       	adc	r21, r11
    6b9e:	b7 01       	movw	r22, r14
    6ba0:	6d 5f       	subi	r22, 0xFD	; 253
    6ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ba4:	c5 01       	movw	r24, r10
    6ba6:	03 96       	adiw	r24, 0x03	; 3
    6ba8:	0e 94 1c 8b 	call	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5101

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    6bac:	2a 85       	ldd	r18, Y+10	; 0x0a
    6bae:	82 2e       	mov	r8, r18
    6bb0:	91 2c       	mov	r9, r1
    6bb2:	35 e1       	ldi	r19, 0x15	; 21
    6bb4:	23 9f       	mul	r18, r19
    6bb6:	f0 01       	movw	r30, r0
    6bb8:	11 24       	eor	r1, r1
    6bba:	e3 56       	subi	r30, 0x63	; 99
    6bbc:	f7 4f       	sbci	r31, 0xF7	; 247
    6bbe:	85 85       	ldd	r24, Z+13	; 0x0d
    6bc0:	9e 01       	movw	r18, r28
    6bc2:	2f 5f       	subi	r18, 0xFF	; 255
    6bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    6bc6:	69 01       	movw	r12, r18
    6bc8:	81 11       	cpse	r24, r1
    6bca:	09 c0       	rjmp	.+18     	; 0x6bde <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5102
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    6bcc:	60 81       	ld	r22, Z
    6bce:	71 81       	ldd	r23, Z+1	; 0x01
    6bd0:	82 81       	ldd	r24, Z+2	; 0x02
    6bd2:	93 81       	ldd	r25, Z+3	; 0x03
    6bd4:	89 01       	movw	r16, r18
    6bd6:	22 e0       	ldi	r18, 0x02	; 2
    6bd8:	44 e0       	ldi	r20, 0x04	; 4
    6bda:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5104

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    6bde:	85 e1       	ldi	r24, 0x15	; 21
    6be0:	88 9d       	mul	r24, r8
    6be2:	f0 01       	movw	r30, r0
    6be4:	89 9d       	mul	r24, r9
    6be6:	f0 0d       	add	r31, r0
    6be8:	11 24       	eor	r1, r1
    6bea:	e3 56       	subi	r30, 0x63	; 99
    6bec:	f7 4f       	sbci	r31, 0xF7	; 247
    6bee:	85 85       	ldd	r24, Z+13	; 0x0d
    6bf0:	81 30       	cpi	r24, 0x01	; 1
    6bf2:	59 f4       	brne	.+22     	; 0x6c0a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x106>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5105
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    6bf4:	60 81       	ld	r22, Z
    6bf6:	71 81       	ldd	r23, Z+1	; 0x01
    6bf8:	82 81       	ldd	r24, Z+2	; 0x02
    6bfa:	93 81       	ldd	r25, Z+3	; 0x03
    6bfc:	0e 94 ab bc 	call	0x17956	; 0x17956 <__fixsfsi>
    6c00:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    6c02:	4a e0       	ldi	r20, 0x0A	; 10
    6c04:	b6 01       	movw	r22, r12
    6c06:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6c0a:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6c0e:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5109

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    6c12:	f6 01       	movw	r30, r12
    6c14:	01 90       	ld	r0, Z+
    6c16:	00 20       	and	r0, r0
    6c18:	e9 f7       	brne	.-6      	; 0x6c14 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    6c1a:	31 97       	sbiw	r30, 0x01	; 1
    6c1c:	ec 19       	sub	r30, r12
    6c1e:	fd 09       	sbc	r31, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5111
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    6c20:	3c e0       	ldi	r19, 0x0C	; 12
    6c22:	63 1a       	sub	r6, r19
    6c24:	71 08       	sbc	r7, r1
    6c26:	76 94       	lsr	r7
    6c28:	67 94       	ror	r6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5112
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6c2a:	81 e0       	ldi	r24, 0x01	; 1
    6c2c:	e8 1a       	sub	r14, r24
    6c2e:	f1 08       	sbc	r15, r1
    6c30:	6e 0c       	add	r6, r14
    6c32:	7f 1c       	adc	r7, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6c34:	96 e0       	ldi	r25, 0x06	; 6
    6c36:	e9 9f       	mul	r30, r25
    6c38:	f0 01       	movw	r30, r0
    6c3a:	11 24       	eor	r1, r1
    6c3c:	ee 0f       	add	r30, r30
    6c3e:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5110
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    6c40:	b2 01       	movw	r22, r4
    6c42:	6e 1b       	sub	r22, r30
    6c44:	7f 0b       	sbc	r23, r31
    6c46:	76 95       	lsr	r23
    6c48:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5112
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6c4a:	6a 0d       	add	r22, r10
    6c4c:	7b 1d       	adc	r23, r11
    6c4e:	ee 24       	eor	r14, r14
    6c50:	ea 94       	dec	r14
    6c52:	fe 2c       	mov	r15, r14
    6c54:	10 e0       	ldi	r17, 0x00	; 0
    6c56:	00 e0       	ldi	r16, 0x00	; 0
    6c58:	22 e0       	ldi	r18, 0x02	; 2
    6c5a:	a3 01       	movw	r20, r6
    6c5c:	c6 01       	movw	r24, r12
    6c5e:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5114

  if (strlen(text) > 0)
    6c62:	f1 01       	movw	r30, r2
    6c64:	80 81       	ld	r24, Z
    6c66:	88 23       	and	r24, r24
    6c68:	41 f0       	breq	.+16     	; 0x6c7a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x176>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5115
    show_string(text, x + 2 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6c6a:	b5 01       	movw	r22, r10
    6c6c:	6e 5f       	subi	r22, 0xFE	; 254
    6c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c70:	22 e0       	ldi	r18, 0x02	; 2
    6c72:	a3 01       	movw	r20, r6
    6c74:	c1 01       	movw	r24, r2
    6c76:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5116
}
    6c7a:	2a 96       	adiw	r28, 0x0a	; 10
    6c7c:	0f b6       	in	r0, 0x3f	; 63
    6c7e:	f8 94       	cli
    6c80:	de bf       	out	0x3e, r29	; 62
    6c82:	0f be       	out	0x3f, r0	; 63
    6c84:	cd bf       	out	0x3d, r28	; 61
    6c86:	df 91       	pop	r29
    6c88:	cf 91       	pop	r28
    6c8a:	1f 91       	pop	r17
    6c8c:	0f 91       	pop	r16
    6c8e:	ff 90       	pop	r15
    6c90:	ef 90       	pop	r14
    6c92:	df 90       	pop	r13
    6c94:	cf 90       	pop	r12
    6c96:	bf 90       	pop	r11
    6c98:	af 90       	pop	r10
    6c9a:	9f 90       	pop	r9
    6c9c:	8f 90       	pop	r8
    6c9e:	7f 90       	pop	r7
    6ca0:	6f 90       	pop	r6
    6ca2:	5f 90       	pop	r5
    6ca4:	4f 90       	pop	r4
    6ca6:	3f 90       	pop	r3
    6ca8:	2f 90       	pop	r2
    6caa:	08 95       	ret

00006cac <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4974
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6cac:	af 92       	push	r10
    6cae:	bf 92       	push	r11
    6cb0:	cf 92       	push	r12
    6cb2:	df 92       	push	r13
    6cb4:	ef 92       	push	r14
    6cb6:	ff 92       	push	r15
    6cb8:	0f 93       	push	r16
    6cba:	1f 93       	push	r17
    6cbc:	cf 93       	push	r28
    6cbe:	df 93       	push	r29
    6cc0:	cd b7       	in	r28, 0x3d	; 61
    6cc2:	de b7       	in	r29, 0x3e	; 62
    6cc4:	60 97       	sbiw	r28, 0x10	; 16
    6cc6:	0f b6       	in	r0, 0x3f	; 63
    6cc8:	f8 94       	cli
    6cca:	de bf       	out	0x3e, r29	; 62
    6ccc:	0f be       	out	0x3f, r0	; 63
    6cce:	cd bf       	out	0x3d, r28	; 61
    6cd0:	5c 01       	movw	r10, r24
    6cd2:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    6cd4:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
    6cd8:	9e 01       	movw	r18, r28
    6cda:	2f 5f       	subi	r18, 0xFF	; 255
    6cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    6cde:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4976
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    6ce0:	80 fd       	sbrc	r24, 0
    6ce2:	4e c0       	rjmp	.+156    	; 0x6d80 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    6ce4:	80 91 a5 10 	lds	r24, 0x10A5	; 0x8010a5 <now>
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	80 53       	subi	r24, 0x30	; 48
    6cec:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4978
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    6cee:	9f 93       	push	r25
    6cf0:	8f 93       	push	r24
    6cf2:	80 91 a6 10 	lds	r24, 0x10A6	; 0x8010a6 <now+0x1>
    6cf6:	1f 92       	push	r1
    6cf8:	8f 93       	push	r24
    6cfa:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <now+0x2>
    6cfe:	1f 92       	push	r1
    6d00:	8f 93       	push	r24
    6d02:	88 e3       	ldi	r24, 0x38	; 56
    6d04:	93 e0       	ldi	r25, 0x03	; 3
    6d06:	9f 93       	push	r25
    6d08:	8f 93       	push	r24
    6d0a:	3f 93       	push	r19
    6d0c:	2f 93       	push	r18
    6d0e:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
    6d12:	0f b6       	in	r0, 0x3f	; 63
    6d14:	f8 94       	cli
    6d16:	de bf       	out	0x3e, r29	; 62
    6d18:	0f be       	out	0x3f, r0	; 63
    6d1a:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6d1c:	8f ef       	ldi	r24, 0xFF	; 255
    6d1e:	9f ef       	ldi	r25, 0xFF	; 255
    6d20:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    6d24:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4984
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    6d28:	4e e8       	ldi	r20, 0x8E	; 142
    6d2a:	50 e0       	ldi	r21, 0x00	; 0
    6d2c:	b8 01       	movw	r22, r16
    6d2e:	c5 01       	movw	r24, r10
    6d30:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6d34:	b8 01       	movw	r22, r16
    6d36:	6f 5f       	subi	r22, 0xFF	; 255
    6d38:	7f 4f       	sbci	r23, 0xFF	; 255
    6d3a:	4e e8       	ldi	r20, 0x8E	; 142
    6d3c:	50 e0       	ldi	r21, 0x00	; 0
    6d3e:	c5 01       	movw	r24, r10
    6d40:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6d44:	a8 01       	movw	r20, r16
    6d46:	4e 5f       	subi	r20, 0xFE	; 254
    6d48:	5f 4f       	sbci	r21, 0xFF	; 255
    6d4a:	ee 24       	eor	r14, r14
    6d4c:	ea 94       	dec	r14
    6d4e:	fe 2c       	mov	r15, r14
    6d50:	10 e0       	ldi	r17, 0x00	; 0
    6d52:	00 e0       	ldi	r16, 0x00	; 0
    6d54:	23 e0       	ldi	r18, 0x03	; 3
    6d56:	b5 01       	movw	r22, r10
    6d58:	c6 01       	movw	r24, r12
    6d5a:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4985
}
    6d5e:	60 96       	adiw	r28, 0x10	; 16
    6d60:	0f b6       	in	r0, 0x3f	; 63
    6d62:	f8 94       	cli
    6d64:	de bf       	out	0x3e, r29	; 62
    6d66:	0f be       	out	0x3f, r0	; 63
    6d68:	cd bf       	out	0x3d, r28	; 61
    6d6a:	df 91       	pop	r29
    6d6c:	cf 91       	pop	r28
    6d6e:	1f 91       	pop	r17
    6d70:	0f 91       	pop	r16
    6d72:	ff 90       	pop	r15
    6d74:	ef 90       	pop	r14
    6d76:	df 90       	pop	r13
    6d78:	cf 90       	pop	r12
    6d7a:	bf 90       	pop	r11
    6d7c:	af 90       	pop	r10
    6d7e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4982
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    6d80:	67 e4       	ldi	r22, 0x47	; 71
    6d82:	73 e0       	ldi	r23, 0x03	; 3
    6d84:	c9 01       	movw	r24, r18
    6d86:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
    6d8a:	c8 cf       	rjmp	.-112    	; 0x6d1c <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

00006d8c <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2226



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    6d8c:	4f 92       	push	r4
    6d8e:	5f 92       	push	r5
    6d90:	6f 92       	push	r6
    6d92:	7f 92       	push	r7
    6d94:	8f 92       	push	r8
    6d96:	9f 92       	push	r9
    6d98:	af 92       	push	r10
    6d9a:	bf 92       	push	r11
    6d9c:	cf 92       	push	r12
    6d9e:	df 92       	push	r13
    6da0:	ef 92       	push	r14
    6da2:	ff 92       	push	r15
    6da4:	0f 93       	push	r16
    6da6:	1f 93       	push	r17
    6da8:	cf 93       	push	r28
    6daa:	df 93       	push	r29
    6dac:	1f 92       	push	r1
    6dae:	cd b7       	in	r28, 0x3d	; 61
    6db0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
  uint16_t color_background;
  uint8_t args1;
  Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
    6db2:	ce 01       	movw	r24, r28
    6db4:	01 96       	adiw	r24, 0x01	; 1
    6db6:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <MenuHistoryGetMenu(unsigned char*)>
    6dba:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  attr = pgm_read_byte(&current->atributes);
    6dbc:	fc 01       	movw	r30, r24
    6dbe:	e2 53       	subi	r30, 0x32	; 50
    6dc0:	fd 4f       	sbci	r31, 0xFD	; 253
    6dc2:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239
  x = pgm_read_word(&current->x);
    6dc4:	38 97       	sbiw	r30, 0x08	; 8
    6dc6:	c5 90       	lpm	r12, Z+
    6dc8:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2240
  y = pgm_read_word(&current->y);
    6dca:	fc 01       	movw	r30, r24
    6dcc:	e8 53       	subi	r30, 0x38	; 56
    6dce:	fd 4f       	sbci	r31, 0xFD	; 253
    6dd0:	e5 90       	lpm	r14, Z+
    6dd2:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2241
  size_x = pgm_read_word(&current->size_x);
    6dd4:	fc 01       	movw	r30, r24
    6dd6:	e6 53       	subi	r30, 0x36	; 54
    6dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dda:	a5 90       	lpm	r10, Z+
    6ddc:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2242
  size_y = pgm_read_word(&current->size_y);
    6dde:	fc 01       	movw	r30, r24
    6de0:	e4 53       	subi	r30, 0x34	; 52
    6de2:	fd 4f       	sbci	r31, 0xFD	; 253
    6de4:	65 90       	lpm	r6, Z+
    6de6:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2243
  color_background = pgm_read_word(&current->color_background);
    6de8:	fc 01       	movw	r30, r24
    6dea:	e1 53       	subi	r30, 0x31	; 49
    6dec:	fd 4f       	sbci	r31, 0xFD	; 253
    6dee:	85 90       	lpm	r8, Z+
    6df0:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    6df2:	50 fe       	sbrs	r5, 0
    6df4:	03 c0       	rjmp	.+6      	; 0x6dfc <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    6df6:	c4 01       	movw	r24, r8
    6df8:	0e 94 86 8b 	call	0x1170c	; 0x1170c <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    6dfc:	51 fe       	sbrs	r5, 1
    6dfe:	0e c0       	rjmp	.+28     	; 0x6e1c <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6e00:	90 92 20 0e 	sts	0x0E20, r9	; 0x800e20 <my_lcd+0xb>
    6e04:	80 92 1f 0e 	sts	0x0E1F, r8	; 0x800e1f <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2253
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    6e08:	97 01       	movw	r18, r14
    6e0a:	26 0d       	add	r18, r6
    6e0c:	37 1d       	adc	r19, r7
    6e0e:	a6 01       	movw	r20, r12
    6e10:	4a 0d       	add	r20, r10
    6e12:	5b 1d       	adc	r21, r11
    6e14:	b7 01       	movw	r22, r14
    6e16:	c6 01       	movw	r24, r12
    6e18:	0e 94 1c 8b 	call	0x11638	; 0x11638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    6e1c:	52 fe       	sbrs	r5, 2
    6e1e:	2a c0       	rjmp	.+84     	; 0x6e74 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6e20:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    6e24:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    6e28:	91 2c       	mov	r9, r1
    6e2a:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    6e2c:	6e 0c       	add	r6, r14
    6e2e:	7f 1c       	adc	r7, r15
    6e30:	26 01       	movw	r4, r12
    6e32:	4a 0c       	add	r4, r10
    6e34:	5b 1c       	adc	r5, r11
    6e36:	93 01       	movw	r18, r6
    6e38:	28 19       	sub	r18, r8
    6e3a:	39 09       	sbc	r19, r9
    6e3c:	a2 01       	movw	r20, r4
    6e3e:	48 19       	sub	r20, r8
    6e40:	59 09       	sbc	r21, r9
    6e42:	b7 01       	movw	r22, r14
    6e44:	c6 01       	movw	r24, r12
    6e46:	88 0d       	add	r24, r8
    6e48:	99 1d       	adc	r25, r9
    6e4a:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    6e4e:	a5 01       	movw	r20, r10
    6e50:	48 19       	sub	r20, r8
    6e52:	59 09       	sbc	r21, r9
    6e54:	b7 01       	movw	r22, r14
    6e56:	69 5e       	subi	r22, 0xE9	; 233
    6e58:	7f 4f       	sbci	r23, 0xFF	; 255
    6e5a:	c6 01       	movw	r24, r12
    6e5c:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6e60:	8f ef       	ldi	r24, 0xFF	; 255
    6e62:	88 1a       	sub	r8, r24
    6e64:	98 0a       	sbc	r9, r24
    6e66:	ef ef       	ldi	r30, 0xFF	; 255
    6e68:	ee 1a       	sub	r14, r30
    6e6a:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    6e6c:	f4 e0       	ldi	r31, 0x04	; 4
    6e6e:	8f 16       	cp	r8, r31
    6e70:	91 04       	cpc	r9, r1
    6e72:	09 f7       	brne	.-62     	; 0x6e36 <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt =  pgm_read_word(&current->preload_function);
    6e74:	f8 01       	movw	r30, r16
    6e76:	e8 52       	subi	r30, 0x28	; 40
    6e78:	fd 4f       	sbci	r31, 0xFD	; 253
    6e7a:	25 91       	lpm	r18, Z+
    6e7c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
    6e7e:	f8 01       	movw	r30, r16
    6e80:	eb 53       	subi	r30, 0x3B	; 59
    6e82:	fd 4f       	sbci	r31, 0xFD	; 253
    6e84:	e4 91       	lpm	r30, Z
    6e86:	40 e0       	ldi	r20, 0x00	; 0
    6e88:	70 e0       	ldi	r23, 0x00	; 0
    6e8a:	60 e0       	ldi	r22, 0x00	; 0
    6e8c:	8e 2f       	mov	r24, r30
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	f9 01       	movw	r30, r18
    6e92:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268

}
    6e94:	0f 90       	pop	r0
    6e96:	df 91       	pop	r29
    6e98:	cf 91       	pop	r28
    6e9a:	1f 91       	pop	r17
    6e9c:	0f 91       	pop	r16
    6e9e:	ff 90       	pop	r15
    6ea0:	ef 90       	pop	r14
    6ea2:	df 90       	pop	r13
    6ea4:	cf 90       	pop	r12
    6ea6:	bf 90       	pop	r11
    6ea8:	af 90       	pop	r10
    6eaa:	9f 90       	pop	r9
    6eac:	8f 90       	pop	r8
    6eae:	7f 90       	pop	r7
    6eb0:	6f 90       	pop	r6
    6eb2:	5f 90       	pop	r5
    6eb4:	4f 90       	pop	r4
    6eb6:	08 95       	ret

00006eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>:
_Z19MenuHistoryNextMenuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  }
}
///
void MenuHistoryNextMenu(uint8_t id, uint8_t args1)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    6eb8:	20 91 27 09 	lds	r18, 0x0927	; 0x800927 <MenuHistoryIndex>
    6ebc:	2a 30       	cpi	r18, 0x0A	; 10
    6ebe:	70 f4       	brcc	.+28     	; 0x6edc <MenuHistoryNextMenu(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  {
    MenuHistoryIndex++;
    6ec0:	2f 5f       	subi	r18, 0xFF	; 255
    6ec2:	20 93 27 09 	sts	0x0927, r18	; 0x800927 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    MenuHistory[MenuHistoryIndex] = id;
    6ec6:	30 e0       	ldi	r19, 0x00	; 0
    6ec8:	f9 01       	movw	r30, r18
    6eca:	e9 5a       	subi	r30, 0xA9	; 169
    6ecc:	f7 4f       	sbci	r31, 0xF7	; 247
    6ece:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2291
    Global_menu_args1[MenuHistoryIndex] = args1;
    6ed0:	23 5e       	subi	r18, 0xE3	; 227
    6ed2:	36 4f       	sbci	r19, 0xF6	; 246
    6ed4:	f9 01       	movw	r30, r18
    6ed6:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2292
    MenuPrepareStyle();
    6ed8:	0c 94 c6 36 	jmp	0x6d8c	; 0x6d8c <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  }
}
    6edc:	08 95       	ret

00006ede <button_click_term_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z37button_click_term_set_mode_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5888
/*
   funkce pro prepnuti na dialog vyberu modu
*/
void button_click_term_set_mode_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SELECT_TERM_MODE, default_ring);
    6ede:	60 91 69 0a 	lds	r22, 0x0A69	; 0x800a69 <default_ring>
    6ee2:	88 e6       	ldi	r24, 0x68	; 104
    6ee4:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006ee8 <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687

/////
/////
void click_thermostat_set_ring_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring);
    6ee8:	60 91 69 0a 	lds	r22, 0x0A69	; 0x800a69 <default_ring>
    6eec:	8a e0       	ldi	r24, 0x0A	; 10
    6eee:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006ef2 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5424
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t args2, uint8_t idx)
{
    6ef2:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5426
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    6ef4:	8b e0       	ldi	r24, 0x0B	; 11
    6ef6:	48 9f       	mul	r20, r24
    6ef8:	f0 01       	movw	r30, r0
    6efa:	11 24       	eor	r1, r1
    6efc:	e6 5e       	subi	r30, 0xE6	; 230
    6efe:	f5 4f       	sbci	r31, 0xF5	; 245
    6f00:	62 85       	ldd	r22, Z+10	; 0x0a
    6f02:	6f 3f       	cpi	r22, 0xFF	; 255
    6f04:	a1 f4       	brne	.+40     	; 0x6f2e <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)+0x3c>
    6f06:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5428
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    6f08:	60 e0       	ldi	r22, 0x00	; 0
    6f0a:	84 e6       	ldi	r24, 0x64	; 100
    6f0c:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5429
    dialog_yes_function = &tds_associate;
    6f10:	8c e6       	ldi	r24, 0x6C	; 108
    6f12:	9d e5       	ldi	r25, 0x5D	; 93
    6f14:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <dialog_yes_function+0x1>
    6f18:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5430
    dialog_yes_args1 = idx;
    6f1c:	c0 93 1a 09 	sts	0x091A, r28	; 0x80091a <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5431
    strcpy_P(dialog_text, text_associovat_tds);
    6f20:	60 e4       	ldi	r22, 0x40	; 64
    6f22:	7d e3       	ldi	r23, 0x3D	; 61
    6f24:	8a ef       	ldi	r24, 0xFA	; 250
    6f26:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5437
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
  }
}
    6f28:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5431
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    6f2a:	0c 94 82 b1 	jmp	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5435
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6f2e:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5437
  }
}
    6f30:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5435
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6f32:	0c 94 5c 37 	jmp	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006f36 <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{
  if (MenuHistoryIndex > 0)
    6f36:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <MenuHistoryIndex>
    6f3a:	88 23       	and	r24, r24
    6f3c:	29 f0       	breq	.+10     	; 0x6f48 <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
  {
    MenuHistoryIndex--;
    6f3e:	81 50       	subi	r24, 0x01	; 1
    6f40:	80 93 27 09 	sts	0x0927, r24	; 0x800927 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
    MenuPrepareStyle();
    6f44:	0c 94 c6 36 	jmp	0x6d8c	; 0x6d8c <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  }
}
    6f48:	08 95       	ret

00006f4a <dialog_set_string_button_click(unsigned char, unsigned char, unsigned char)>:
_Z30dialog_set_string_button_clickhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
  MenuHistoryPrevMenu();
}

void dialog_set_string_button_click(uint8_t args1, uint8_t args2, uint8_t args3)
{
  dialog_save_string_function(args1, args2, args3);
    6f4a:	70 e0       	ldi	r23, 0x00	; 0
    6f4c:	e0 91 29 09 	lds	r30, 0x0929	; 0x800929 <dialog_save_string_function>
    6f50:	f0 91 2a 09 	lds	r31, 0x092A	; 0x80092a <dialog_save_string_function+0x1>
    6f54:	90 e0       	ldi	r25, 0x00	; 0
    6f56:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
  MenuHistoryPrevMenu();
    6f58:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <MenuHistoryPrevMenu()>

00006f5c <dialog_set_variable_button_click(unsigned char, unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2, uint8_t args3)
{
    6f5c:	cf 93       	push	r28
    6f5e:	df 93       	push	r29
    6f60:	c8 2f       	mov	r28, r24
    6f62:	d4 2f       	mov	r29, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    6f64:	70 e0       	ldi	r23, 0x00	; 0
    6f66:	90 e0       	ldi	r25, 0x00	; 0
    6f68:	80 e0       	ldi	r24, 0x00	; 0
    6f6a:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    6f6e:	ab 01       	movw	r20, r22
    6f70:	bc 01       	movw	r22, r24
    6f72:	85 e1       	ldi	r24, 0x15	; 21
    6f74:	c8 9f       	mul	r28, r24
    6f76:	f0 01       	movw	r30, r0
    6f78:	11 24       	eor	r1, r1
    6f7a:	e3 56       	subi	r30, 0x63	; 99
    6f7c:	f7 4f       	sbci	r31, 0xF7	; 247
    6f7e:	03 88       	ldd	r0, Z+19	; 0x13
    6f80:	f4 89       	ldd	r31, Z+20	; 0x14
    6f82:	e0 2d       	mov	r30, r0
    6f84:	2d 2f       	mov	r18, r29
    6f86:	8c 2f       	mov	r24, r28
    6f88:	90 e0       	ldi	r25, 0x00	; 0
    6f8a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
  MenuHistoryPrevMenu();
}
    6f8c:	df 91       	pop	r29
    6f8e:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu();
    6f90:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <MenuHistoryPrevMenu()>

00006f94 <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    6f94:	80 91 1a 09 	lds	r24, 0x091A	; 0x80091a <dialog_yes_args1>
    6f98:	e0 91 1b 09 	lds	r30, 0x091B	; 0x80091b <dialog_yes_function>
    6f9c:	f0 91 1c 09 	lds	r31, 0x091C	; 0x80091c <dialog_yes_function+0x1>
    6fa0:	40 e0       	ldi	r20, 0x00	; 0
    6fa2:	70 e0       	ldi	r23, 0x00	; 0
    6fa4:	60 e0       	ldi	r22, 0x00	; 0
    6fa6:	90 e0       	ldi	r25, 0x00	; 0
    6fa8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2649
  MenuHistoryPrevMenu();
    6faa:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <MenuHistoryPrevMenu()>

00006fae <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    6fae:	cf 93       	push	r28
    6fb0:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    6fb2:	68 2f       	mov	r22, r24
    6fb4:	88 ec       	ldi	r24, 0xC8	; 200
    6fb6:	9b e0       	ldi	r25, 0x0B	; 11
    6fb8:	0e 94 35 86 	call	0x10c6a	; 0x10c6a <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    6fbc:	8c 2f       	mov	r24, r28
    6fbe:	cc 0f       	add	r28, r28
    6fc0:	99 0b       	sbc	r25, r25
    6fc2:	cf 91       	pop	r28
    6fc4:	08 95       	ret

00006fc6 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    6fc6:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    6fc8:	82 95       	swap	r24
    6fca:	88 0f       	add	r24, r24
    6fcc:	80 7e       	andi	r24, 0xE0	; 224
    6fce:	68 e0       	ldi	r22, 0x08	; 8
    6fd0:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    6fd2:	c9 01       	movw	r24, r18
    6fd4:	0c 94 94 9e 	jmp	0x13d28	; 0x13d28 <W5500Class::read(unsigned int, unsigned char)>

00006fd8 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    6fd8:	8f 92       	push	r8
    6fda:	9f 92       	push	r9
    6fdc:	af 92       	push	r10
    6fde:	bf 92       	push	r11
    6fe0:	cf 92       	push	r12
    6fe2:	df 92       	push	r13
    6fe4:	ef 92       	push	r14
    6fe6:	ff 92       	push	r15
    6fe8:	0f 93       	push	r16
    6fea:	1f 93       	push	r17
    6fec:	cf 93       	push	r28
    6fee:	6c 01       	movw	r12, r24
    6ff0:	5b 01       	movw	r10, r22
    6ff2:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    6ff4:	fc 01       	movw	r30, r24
    6ff6:	c4 85       	ldd	r28, Z+12	; 0x0c
    6ff8:	c8 30       	cpi	r28, 0x08	; 8
    6ffa:	a1 f4       	brne	.+40     	; 0x7024 <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6ffc:	81 e0       	ldi	r24, 0x01	; 1
    6ffe:	90 e0       	ldi	r25, 0x00	; 0
    7000:	f6 01       	movw	r30, r12
    7002:	93 83       	std	Z+3, r25	; 0x03
    7004:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    7006:	f1 2c       	mov	r15, r1
    7008:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    700a:	c7 01       	movw	r24, r14
    700c:	cf 91       	pop	r28
    700e:	1f 91       	pop	r17
    7010:	0f 91       	pop	r16
    7012:	ff 90       	pop	r15
    7014:	ef 90       	pop	r14
    7016:	df 90       	pop	r13
    7018:	cf 90       	pop	r12
    701a:	bf 90       	pop	r11
    701c:	af 90       	pop	r10
    701e:	9f 90       	pop	r9
    7020:	8f 90       	pop	r8
    7022:	08 95       	ret
    7024:	8a 01       	movw	r16, r20
    7026:	41 30       	cpi	r20, 0x01	; 1
    7028:	58 40       	sbci	r21, 0x08	; 8
    702a:	10 f0       	brcs	.+4      	; 0x7030 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    702c:	00 e0       	ldi	r16, 0x00	; 0
    702e:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    7030:	8c 2f       	mov	r24, r28
    7032:	0e 94 25 90 	call	0x1204a	; 0x1204a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    7036:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    7038:	63 e0       	ldi	r22, 0x03	; 3
    703a:	70 e0       	ldi	r23, 0x00	; 0
    703c:	8c 2f       	mov	r24, r28
    703e:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    7042:	87 31       	cpi	r24, 0x17	; 23
    7044:	11 f0       	breq	.+4      	; 0x704a <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    7046:	8c 31       	cpi	r24, 0x1C	; 28
    7048:	09 f5       	brne	.+66     	; 0x708c <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    704a:	80 16       	cp	r8, r16
    704c:	91 06       	cpc	r9, r17
    704e:	80 f3       	brcs	.-32     	; 0x7030 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    7050:	98 01       	movw	r18, r16
    7052:	a5 01       	movw	r20, r10
    7054:	70 e0       	ldi	r23, 0x00	; 0
    7056:	60 e0       	ldi	r22, 0x00	; 0
    7058:	8c 2f       	mov	r24, r28
    705a:	0e 94 70 9f 	call	0x13ee0	; 0x13ee0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    705e:	60 e2       	ldi	r22, 0x20	; 32
    7060:	70 e0       	ldi	r23, 0x00	; 0
    7062:	8c 2f       	mov	r24, r28
    7064:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    7068:	62 e0       	ldi	r22, 0x02	; 2
    706a:	70 e0       	ldi	r23, 0x00	; 0
    706c:	8c 2f       	mov	r24, r28
    706e:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    7072:	84 fd       	sbrc	r24, 4
    7074:	0e c0       	rjmp	.+28     	; 0x7092 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    7076:	63 e0       	ldi	r22, 0x03	; 3
    7078:	70 e0       	ldi	r23, 0x00	; 0
    707a:	8c 2f       	mov	r24, r28
    707c:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    7080:	81 11       	cpse	r24, r1
    7082:	f2 cf       	rjmp	.-28     	; 0x7068 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    7084:	8c 2f       	mov	r24, r28
    7086:	0e 94 4a a1 	call	0x14294	; 0x14294 <close(unsigned char)>
    708a:	b8 cf       	rjmp	.-144    	; 0x6ffc <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    708c:	10 e0       	ldi	r17, 0x00	; 0
    708e:	00 e0       	ldi	r16, 0x00	; 0
    7090:	df cf       	rjmp	.-66     	; 0x7050 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    7092:	40 e1       	ldi	r20, 0x10	; 16
    7094:	62 e0       	ldi	r22, 0x02	; 2
    7096:	70 e0       	ldi	r23, 0x00	; 0
    7098:	8c 2f       	mov	r24, r28
    709a:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    709e:	01 2b       	or	r16, r17
    70a0:	09 f0       	breq	.+2      	; 0x70a4 <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    70a2:	b3 cf       	rjmp	.-154    	; 0x700a <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    70a4:	ab cf       	rjmp	.-170    	; 0x6ffc <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

000070a6 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    70a6:	df 92       	push	r13
    70a8:	ef 92       	push	r14
    70aa:	ff 92       	push	r15
    70ac:	0f 93       	push	r16
    70ae:	1f 93       	push	r17
    70b0:	cf 93       	push	r28
    70b2:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    70b4:	fc 01       	movw	r30, r24
    70b6:	24 85       	ldd	r18, Z+12	; 0x0c
    70b8:	28 30       	cpi	r18, 0x08	; 8
    70ba:	51 f0       	breq	.+20     	; 0x70d0 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    70bc:	90 e0       	ldi	r25, 0x00	; 0
    70be:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    70c0:	df 91       	pop	r29
    70c2:	cf 91       	pop	r28
    70c4:	1f 91       	pop	r17
    70c6:	0f 91       	pop	r16
    70c8:	ff 90       	pop	r15
    70ca:	ef 90       	pop	r14
    70cc:	df 90       	pop	r13
    70ce:	08 95       	ret
    70d0:	7a 01       	movw	r14, r20
    70d2:	eb 01       	movw	r28, r22
    70d4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    70d6:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    70d8:	63 e0       	ldi	r22, 0x03	; 3
    70da:	70 e0       	ldi	r23, 0x00	; 0
    70dc:	8d 2d       	mov	r24, r13
    70de:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    70e2:	81 11       	cpse	r24, r1
    70e4:	28 c0       	rjmp	.+80     	; 0x7136 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    70e6:	f8 01       	movw	r30, r16
    70e8:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    70ea:	f8 01       	movw	r30, r16
    70ec:	84 85       	ldd	r24, Z+12	; 0x0c
    70ee:	88 30       	cpi	r24, 0x08	; 8
    70f0:	29 f3       	breq	.-54     	; 0x70bc <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    70f2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    70f6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    70fa:	2f 5f       	subi	r18, 0xFF	; 255
    70fc:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    70fe:	19 f1       	breq	.+70     	; 0x7146 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    7100:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    7104:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    7108:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    710c:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    7110:	61 e0       	ldi	r22, 0x01	; 1
    7112:	0e 94 57 a1 	call	0x142ae	; 0x142ae <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    7116:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    7118:	8f 3f       	cpi	r24, 0xFF	; 255
    711a:	c1 f4       	brne	.+48     	; 0x714c <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    711c:	8b 81       	ldd	r24, Y+3	; 0x03
    711e:	8f 3f       	cpi	r24, 0xFF	; 255
    7120:	01 f5       	brne	.+64     	; 0x7162 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    7122:	8c 81       	ldd	r24, Y+4	; 0x04
    7124:	8f 3f       	cpi	r24, 0xFF	; 255
    7126:	e9 f4       	brne	.+58     	; 0x7162 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    7128:	8d 81       	ldd	r24, Y+5	; 0x05
    712a:	8f 3f       	cpi	r24, 0xFF	; 255
    712c:	d1 f4       	brne	.+52     	; 0x7162 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    712e:	88 e0       	ldi	r24, 0x08	; 8
    7130:	f8 01       	movw	r30, r16
    7132:	84 87       	std	Z+12, r24	; 0x0c
    7134:	c3 cf       	rjmp	.-122    	; 0x70bc <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    7136:	8b 7f       	andi	r24, 0xFB	; 251
    7138:	88 31       	cpi	r24, 0x18	; 24
    713a:	a9 f2       	breq	.-86     	; 0x70e6 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    713c:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    713e:	f8 e0       	ldi	r31, 0x08	; 8
    7140:	df 12       	cpse	r13, r31
    7142:	ca cf       	rjmp	.-108    	; 0x70d8 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    7144:	d2 cf       	rjmp	.-92     	; 0x70ea <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    7146:	20 e0       	ldi	r18, 0x00	; 0
    7148:	34 e0       	ldi	r19, 0x04	; 4
    714a:	da cf       	rjmp	.-76     	; 0x7100 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    714c:	81 11       	cpse	r24, r1
    714e:	09 c0       	rjmp	.+18     	; 0x7162 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    7150:	8b 81       	ldd	r24, Y+3	; 0x03
    7152:	81 11       	cpse	r24, r1
    7154:	06 c0       	rjmp	.+12     	; 0x7162 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    7156:	8c 81       	ldd	r24, Y+4	; 0x04
    7158:	81 11       	cpse	r24, r1
    715a:	03 c0       	rjmp	.+6      	; 0x7162 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    715c:	8d 81       	ldd	r24, Y+5	; 0x05
    715e:	88 23       	and	r24, r24
    7160:	31 f3       	breq	.-52     	; 0x712e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    7162:	e1 14       	cp	r14, r1
    7164:	f1 04       	cpc	r15, r1
    7166:	19 f3       	breq	.-58     	; 0x712e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    7168:	f8 01       	movw	r30, r16
    716a:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    716c:	ae 01       	movw	r20, r28
    716e:	4e 5f       	subi	r20, 0xFE	; 254
    7170:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    7172:	6d 2d       	mov	r22, r13
    7174:	62 95       	swap	r22
    7176:	66 0f       	add	r22, r22
    7178:	60 7e       	andi	r22, 0xE0	; 224
    717a:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    717c:	24 e0       	ldi	r18, 0x04	; 4
    717e:	30 e0       	ldi	r19, 0x00	; 0
    7180:	8c e0       	ldi	r24, 0x0C	; 12
    7182:	90 e0       	ldi	r25, 0x00	; 0
    7184:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    7188:	4f 2d       	mov	r20, r15
    718a:	60 e1       	ldi	r22, 0x10	; 16
    718c:	70 e0       	ldi	r23, 0x00	; 0
    718e:	8d 2d       	mov	r24, r13
    7190:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    7194:	4e 2d       	mov	r20, r14
    7196:	61 e1       	ldi	r22, 0x11	; 17
    7198:	70 e0       	ldi	r23, 0x00	; 0
    719a:	8d 2d       	mov	r24, r13
    719c:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    71a0:	64 e0       	ldi	r22, 0x04	; 4
    71a2:	70 e0       	ldi	r23, 0x00	; 0
    71a4:	8d 2d       	mov	r24, r13
    71a6:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    71aa:	c8 01       	movw	r24, r16
    71ac:	0e 94 2e a2 	call	0x1445c	; 0x1445c <EthernetClient::status()>
    71b0:	87 31       	cpi	r24, 0x17	; 23
    71b2:	61 f0       	breq	.+24     	; 0x71cc <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    71b4:	61 e0       	ldi	r22, 0x01	; 1
    71b6:	70 e0       	ldi	r23, 0x00	; 0
    71b8:	80 e0       	ldi	r24, 0x00	; 0
    71ba:	90 e0       	ldi	r25, 0x00	; 0
    71bc:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    71c0:	c8 01       	movw	r24, r16
    71c2:	0e 94 2e a2 	call	0x1445c	; 0x1445c <EthernetClient::status()>
    71c6:	81 11       	cpse	r24, r1
    71c8:	f0 cf       	rjmp	.-32     	; 0x71aa <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    71ca:	b1 cf       	rjmp	.-158    	; 0x712e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    71cc:	81 e0       	ldi	r24, 0x01	; 1
    71ce:	90 e0       	ldi	r25, 0x00	; 0
    71d0:	77 cf       	rjmp	.-274    	; 0x70c0 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

000071d2 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    71d2:	4f 92       	push	r4
    71d4:	5f 92       	push	r5
    71d6:	6f 92       	push	r6
    71d8:	7f 92       	push	r7
    71da:	8f 92       	push	r8
    71dc:	9f 92       	push	r9
    71de:	af 92       	push	r10
    71e0:	bf 92       	push	r11
    71e2:	cf 92       	push	r12
    71e4:	df 92       	push	r13
    71e6:	ef 92       	push	r14
    71e8:	ff 92       	push	r15
    71ea:	0f 93       	push	r16
    71ec:	1f 93       	push	r17
    71ee:	cf 93       	push	r28
    71f0:	df 93       	push	r29
    71f2:	cd b7       	in	r28, 0x3d	; 61
    71f4:	de b7       	in	r29, 0x3e	; 62
    71f6:	63 97       	sbiw	r28, 0x13	; 19
    71f8:	0f b6       	in	r0, 0x3f	; 63
    71fa:	f8 94       	cli
    71fc:	de bf       	out	0x3e, r29	; 62
    71fe:	0f be       	out	0x3f, r0	; 63
    7200:	cd bf       	out	0x3d, r28	; 61
    7202:	7c 01       	movw	r14, r24
    7204:	6b 01       	movw	r12, r22
    7206:	3a 01       	movw	r6, r20
    7208:	fb 01       	movw	r30, r22
    720a:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    720c:	8d 91       	ld	r24, X+
    720e:	81 11       	cpse	r24, r1
    7210:	fd cf       	rjmp	.-6      	; 0x720c <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    7212:	30 e0       	ldi	r19, 0x00	; 0
    7214:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    721a:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    721c:	41 91       	ld	r20, Z+
    721e:	44 23       	and	r20, r20
    7220:	01 f1       	breq	.+64     	; 0x7262 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    7222:	84 30       	cpi	r24, 0x04	; 4
    7224:	91 05       	cpc	r25, r1
    7226:	0c f0       	brlt	.+2      	; 0x722a <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    7228:	42 c0       	rjmp	.+132    	; 0x72ae <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    722a:	4e 32       	cpi	r20, 0x2E	; 46
    722c:	69 f4       	brne	.+26     	; 0x7248 <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    722e:	2f 3f       	cpi	r18, 0xFF	; 255
    7230:	31 05       	cpc	r19, r1
    7232:	09 f0       	breq	.+2      	; 0x7236 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    7234:	e4 f5       	brge	.+120    	; 0x72ae <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    7236:	d3 01       	movw	r26, r6
    7238:	a8 0f       	add	r26, r24
    723a:	b9 1f       	adc	r27, r25
    723c:	12 96       	adiw	r26, 0x02	; 2
    723e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    7240:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	20 e0       	ldi	r18, 0x00	; 0
    7246:	ea cf       	rjmp	.-44     	; 0x721c <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    7248:	52 9f       	mul	r21, r18
    724a:	b0 01       	movw	r22, r0
    724c:	53 9f       	mul	r21, r19
    724e:	70 0d       	add	r23, r0
    7250:	11 24       	eor	r1, r1
    7252:	24 2f       	mov	r18, r20
    7254:	44 0f       	add	r20, r20
    7256:	33 0b       	sbc	r19, r19
    7258:	20 53       	subi	r18, 0x30	; 48
    725a:	31 09       	sbc	r19, r1
    725c:	26 0f       	add	r18, r22
    725e:	37 1f       	adc	r19, r23
    7260:	dd cf       	rjmp	.-70     	; 0x721c <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    7262:	2f 3f       	cpi	r18, 0xFF	; 255
    7264:	31 05       	cpc	r19, r1
    7266:	09 f0       	breq	.+2      	; 0x726a <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    7268:	14 f5       	brge	.+68     	; 0x72ae <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    726a:	84 30       	cpi	r24, 0x04	; 4
    726c:	91 05       	cpc	r25, r1
    726e:	fc f4       	brge	.+62     	; 0x72ae <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    7270:	68 0e       	add	r6, r24
    7272:	79 1e       	adc	r7, r25
    7274:	f3 01       	movw	r30, r6
    7276:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    7278:	cc 24       	eor	r12, r12
    727a:	c3 94       	inc	r12
    727c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    727e:	c6 01       	movw	r24, r12
    7280:	63 96       	adiw	r28, 0x13	; 19
    7282:	0f b6       	in	r0, 0x3f	; 63
    7284:	f8 94       	cli
    7286:	de bf       	out	0x3e, r29	; 62
    7288:	0f be       	out	0x3f, r0	; 63
    728a:	cd bf       	out	0x3d, r28	; 61
    728c:	df 91       	pop	r29
    728e:	cf 91       	pop	r28
    7290:	1f 91       	pop	r17
    7292:	0f 91       	pop	r16
    7294:	ff 90       	pop	r15
    7296:	ef 90       	pop	r14
    7298:	df 90       	pop	r13
    729a:	cf 90       	pop	r12
    729c:	bf 90       	pop	r11
    729e:	af 90       	pop	r10
    72a0:	9f 90       	pop	r9
    72a2:	8f 90       	pop	r8
    72a4:	7f 90       	pop	r7
    72a6:	6f 90       	pop	r6
    72a8:	5f 90       	pop	r5
    72aa:	4f 90       	pop	r4
    72ac:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    72ae:	f7 01       	movw	r30, r14
    72b0:	42 81       	ldd	r20, Z+2	; 0x02
    72b2:	53 81       	ldd	r21, Z+3	; 0x03
    72b4:	64 81       	ldd	r22, Z+4	; 0x04
    72b6:	75 81       	ldd	r23, Z+5	; 0x05
    72b8:	80 91 74 0c 	lds	r24, 0x0C74	; 0x800c74 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    72bc:	90 91 75 0c 	lds	r25, 0x0C75	; 0x800c75 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    72c0:	a0 91 76 0c 	lds	r26, 0x0C76	; 0x800c76 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    72c4:	b0 91 77 0c 	lds	r27, 0x0C77	; 0x800c77 <_ZL11INADDR_NONE.lto_priv.196+0x5>
    72c8:	48 17       	cp	r20, r24
    72ca:	59 07       	cpc	r21, r25
    72cc:	6a 07       	cpc	r22, r26
    72ce:	7b 07       	cpc	r23, r27
    72d0:	09 f4       	brne	.+2      	; 0x72d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    72d2:	00 c2       	rjmp	.+1024   	; 0x76d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    72d4:	87 01       	movw	r16, r14
    72d6:	08 5f       	subi	r16, 0xF8	; 248
    72d8:	1f 4f       	sbci	r17, 0xFF	; 255
    72da:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    72de:	6f 70       	andi	r22, 0x0F	; 15
    72e0:	77 27       	eor	r23, r23
    72e2:	7c 5f       	subi	r23, 0xFC	; 252
    72e4:	c8 01       	movw	r24, r16
    72e6:	0e 94 8b a1 	call	0x14316	; 0x14316 <EthernetUDP::begin(unsigned int)>
    72ea:	81 30       	cpi	r24, 0x01	; 1
    72ec:	09 f0       	breq	.+2      	; 0x72f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    72ee:	f7 c1       	rjmp	.+1006   	; 0x76de <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    72f0:	82 ee       	ldi	r24, 0xE2	; 226
    72f2:	92 e0       	ldi	r25, 0x02	; 2
    72f4:	9a 83       	std	Y+2, r25	; 0x02
    72f6:	89 83       	std	Y+1, r24	; 0x01
    72f8:	f7 01       	movw	r30, r14
    72fa:	82 81       	ldd	r24, Z+2	; 0x02
    72fc:	93 81       	ldd	r25, Z+3	; 0x03
    72fe:	a4 81       	ldd	r26, Z+4	; 0x04
    7300:	b5 81       	ldd	r27, Z+5	; 0x05
    7302:	8b 83       	std	Y+3, r24	; 0x03
    7304:	9c 83       	std	Y+4, r25	; 0x04
    7306:	ad 83       	std	Y+5, r26	; 0x05
    7308:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    730a:	45 e3       	ldi	r20, 0x35	; 53
    730c:	50 e0       	ldi	r21, 0x00	; 0
    730e:	be 01       	movw	r22, r28
    7310:	6f 5f       	subi	r22, 0xFF	; 255
    7312:	7f 4f       	sbci	r23, 0xFF	; 255
    7314:	c8 01       	movw	r24, r16
    7316:	0e 94 ef a1 	call	0x143de	; 0x143de <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    731a:	89 2b       	or	r24, r25
    731c:	31 f4       	brne	.+12     	; 0x732a <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    731e:	d1 2c       	mov	r13, r1
    7320:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    7322:	c8 01       	movw	r24, r16
    7324:	0e 94 b9 a1 	call	0x14372	; 0x14372 <EthernetUDP::stop()>
    7328:	aa cf       	rjmp	.-172    	; 0x727e <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    732a:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    732e:	f7 01       	movw	r30, r14
    7330:	77 83       	std	Z+7, r23	; 0x07
    7332:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    7334:	42 e0       	ldi	r20, 0x02	; 2
    7336:	50 e0       	ldi	r21, 0x00	; 0
    7338:	b7 01       	movw	r22, r14
    733a:	6a 5f       	subi	r22, 0xFA	; 250
    733c:	7f 4f       	sbci	r23, 0xFF	; 255
    733e:	c8 01       	movw	r24, r16
    7340:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	9a 83       	std	Y+2, r25	; 0x02
    734a:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    734c:	42 e0       	ldi	r20, 0x02	; 2
    734e:	50 e0       	ldi	r21, 0x00	; 0
    7350:	be 01       	movw	r22, r28
    7352:	6f 5f       	subi	r22, 0xFF	; 255
    7354:	7f 4f       	sbci	r23, 0xFF	; 255
    7356:	c8 01       	movw	r24, r16
    7358:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    735c:	80 e0       	ldi	r24, 0x00	; 0
    735e:	91 e0       	ldi	r25, 0x01	; 1
    7360:	9a 83       	std	Y+2, r25	; 0x02
    7362:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7364:	42 e0       	ldi	r20, 0x02	; 2
    7366:	50 e0       	ldi	r21, 0x00	; 0
    7368:	be 01       	movw	r22, r28
    736a:	6f 5f       	subi	r22, 0xFF	; 255
    736c:	7f 4f       	sbci	r23, 0xFF	; 255
    736e:	c8 01       	movw	r24, r16
    7370:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    7374:	1a 82       	std	Y+2, r1	; 0x02
    7376:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7378:	42 e0       	ldi	r20, 0x02	; 2
    737a:	50 e0       	ldi	r21, 0x00	; 0
    737c:	be 01       	movw	r22, r28
    737e:	6f 5f       	subi	r22, 0xFF	; 255
    7380:	7f 4f       	sbci	r23, 0xFF	; 255
    7382:	c8 01       	movw	r24, r16
    7384:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7388:	42 e0       	ldi	r20, 0x02	; 2
    738a:	50 e0       	ldi	r21, 0x00	; 0
    738c:	be 01       	movw	r22, r28
    738e:	6f 5f       	subi	r22, 0xFF	; 255
    7390:	7f 4f       	sbci	r23, 0xFF	; 255
    7392:	c8 01       	movw	r24, r16
    7394:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7398:	42 e0       	ldi	r20, 0x02	; 2
    739a:	50 e0       	ldi	r21, 0x00	; 0
    739c:	be 01       	movw	r22, r28
    739e:	6f 5f       	subi	r22, 0xFF	; 255
    73a0:	7f 4f       	sbci	r23, 0xFF	; 255
    73a2:	c8 01       	movw	r24, r16
    73a4:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    73a8:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    73aa:	f6 01       	movw	r30, r12
    73ac:	80 81       	ld	r24, Z
    73ae:	88 23       	and	r24, r24
    73b0:	01 f1       	breq	.+64     	; 0x73f2 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    73b2:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    73b4:	f6 01       	movw	r30, r12
    73b6:	81 91       	ld	r24, Z+
    73b8:	2f 01       	movw	r4, r30
    73ba:	88 23       	and	r24, r24
    73bc:	11 f0       	breq	.+4      	; 0x73c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    73be:	8e 32       	cpi	r24, 0x2E	; 46
    73c0:	b1 f4       	brne	.+44     	; 0x73ee <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    73c2:	46 01       	movw	r8, r12
    73c4:	8a 18       	sub	r8, r10
    73c6:	9b 08       	sbc	r9, r11
    73c8:	18 14       	cp	r1, r8
    73ca:	19 04       	cpc	r1, r9
    73cc:	74 f4       	brge	.+28     	; 0x73ea <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    73ce:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    73d0:	41 e0       	ldi	r20, 0x01	; 1
    73d2:	50 e0       	ldi	r21, 0x00	; 0
    73d4:	be 01       	movw	r22, r28
    73d6:	63 5f       	subi	r22, 0xF3	; 243
    73d8:	7f 4f       	sbci	r23, 0xFF	; 255
    73da:	c8 01       	movw	r24, r16
    73dc:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    73e0:	a4 01       	movw	r20, r8
    73e2:	b5 01       	movw	r22, r10
    73e4:	c8 01       	movw	r24, r16
    73e6:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    73ea:	52 01       	movw	r10, r4
    73ec:	de cf       	rjmp	.-68     	; 0x73aa <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    73ee:	62 01       	movw	r12, r4
    73f0:	e1 cf       	rjmp	.-62     	; 0x73b4 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    73f2:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    73f4:	41 e0       	ldi	r20, 0x01	; 1
    73f6:	50 e0       	ldi	r21, 0x00	; 0
    73f8:	be 01       	movw	r22, r28
    73fa:	63 5f       	subi	r22, 0xF3	; 243
    73fc:	7f 4f       	sbci	r23, 0xFF	; 255
    73fe:	c8 01       	movw	r24, r16
    7400:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    7404:	c1 2c       	mov	r12, r1
    7406:	dd 24       	eor	r13, r13
    7408:	d3 94       	inc	r13
    740a:	da 82       	std	Y+2, r13	; 0x02
    740c:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    740e:	42 e0       	ldi	r20, 0x02	; 2
    7410:	50 e0       	ldi	r21, 0x00	; 0
    7412:	be 01       	movw	r22, r28
    7414:	6f 5f       	subi	r22, 0xFF	; 255
    7416:	7f 4f       	sbci	r23, 0xFF	; 255
    7418:	c8 01       	movw	r24, r16
    741a:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    741e:	da 82       	std	Y+2, r13	; 0x02
    7420:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    7422:	42 e0       	ldi	r20, 0x02	; 2
    7424:	50 e0       	ldi	r21, 0x00	; 0
    7426:	be 01       	movw	r22, r28
    7428:	6f 5f       	subi	r22, 0xFF	; 255
    742a:	7f 4f       	sbci	r23, 0xFF	; 255
    742c:	c8 01       	movw	r24, r16
    742e:	0e 94 b0 9f 	call	0x13f60	; 0x13f60 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    7432:	c8 01       	movw	r24, r16
    7434:	0e 94 c6 a1 	call	0x1438c	; 0x1438c <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    7438:	89 2b       	or	r24, r25
    743a:	09 f4       	brne	.+2      	; 0x743e <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    743c:	70 cf       	rjmp	.-288    	; 0x731e <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    743e:	f3 e0       	ldi	r31, 0x03	; 3
    7440:	af 2e       	mov	r10, r31
    7442:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    7444:	23 01       	movw	r4, r6
    7446:	22 e0       	ldi	r18, 0x02	; 2
    7448:	42 0e       	add	r4, r18
    744a:	51 1c       	adc	r5, r1
    744c:	43 c0       	rjmp	.+134    	; 0x74d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    744e:	f7 01       	movw	r30, r14
    7450:	42 81       	ldd	r20, Z+2	; 0x02
    7452:	53 81       	ldd	r21, Z+3	; 0x03
    7454:	64 81       	ldd	r22, Z+4	; 0x04
    7456:	75 81       	ldd	r23, Z+5	; 0x05
    7458:	81 8d       	ldd	r24, Z+25	; 0x19
    745a:	92 8d       	ldd	r25, Z+26	; 0x1a
    745c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    745e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    7460:	48 17       	cp	r20, r24
    7462:	59 07       	cpc	r21, r25
    7464:	6a 07       	cpc	r22, r26
    7466:	7b 07       	cpc	r23, r27
    7468:	09 f0       	breq	.+2      	; 0x746c <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    746a:	2a c1       	rjmp	.+596    	; 0x76c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    746c:	85 8d       	ldd	r24, Z+29	; 0x1d
    746e:	96 8d       	ldd	r25, Z+30	; 0x1e
    7470:	c5 97       	sbiw	r24, 0x35	; 53
    7472:	09 f0       	breq	.+2      	; 0x7476 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    7474:	25 c1       	rjmp	.+586    	; 0x76c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    7476:	81 a1       	ldd	r24, Z+33	; 0x21
    7478:	92 a1       	ldd	r25, Z+34	; 0x22
    747a:	0c 97       	sbiw	r24, 0x0c	; 12
    747c:	0c f4       	brge	.+2      	; 0x7480 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    747e:	25 c1       	rjmp	.+586    	; 0x76ca <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    7480:	4c e0       	ldi	r20, 0x0C	; 12
    7482:	50 e0       	ldi	r21, 0x00	; 0
    7484:	be 01       	movw	r22, r28
    7486:	6f 5f       	subi	r22, 0xFF	; 255
    7488:	7f 4f       	sbci	r23, 0xFF	; 255
    748a:	c8 01       	movw	r24, r16
    748c:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    7490:	8b 81       	ldd	r24, Y+3	; 0x03
    7492:	9c 81       	ldd	r25, Y+4	; 0x04
    7494:	98 27       	eor	r25, r24
    7496:	89 27       	eor	r24, r25
    7498:	98 27       	eor	r25, r24
    749a:	9a 8b       	std	Y+18, r25	; 0x12
    749c:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    749e:	f7 01       	movw	r30, r14
    74a0:	46 81       	ldd	r20, Z+6	; 0x06
    74a2:	57 81       	ldd	r21, Z+7	; 0x07
    74a4:	29 81       	ldd	r18, Y+1	; 0x01
    74a6:	3a 81       	ldd	r19, Y+2	; 0x02
    74a8:	42 17       	cp	r20, r18
    74aa:	53 07       	cpc	r21, r19
    74ac:	11 f4       	brne	.+4      	; 0x74b2 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    74ae:	97 fd       	sbrc	r25, 7
    74b0:	2f c0       	rjmp	.+94     	; 0x7510 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    74b2:	c8 01       	movw	r24, r16
    74b4:	0e 94 b7 87 	call	0x10f6e	; 0x10f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    74b8:	ec ef       	ldi	r30, 0xFC	; 252
    74ba:	ce 2e       	mov	r12, r30
    74bc:	dd 24       	eor	r13, r13
    74be:	da 94       	dec	r13
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	a8 1a       	sub	r10, r24
    74c4:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    74c6:	09 f4       	brne	.+2      	; 0x74ca <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    74c8:	2c cf       	rjmp	.-424    	; 0x7322 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    74ca:	ff ef       	ldi	r31, 0xFF	; 255
    74cc:	cf 16       	cp	r12, r31
    74ce:	df 06       	cpc	r13, r31
    74d0:	09 f0       	breq	.+2      	; 0x74d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    74d2:	27 cf       	rjmp	.-434    	; 0x7322 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    74d4:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    74d8:	3b 01       	movw	r6, r22
    74da:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    74dc:	c8 01       	movw	r24, r16
    74de:	0e 94 de a0 	call	0x141bc	; 0x141bc <EthernetUDP::parsePacket()>
    74e2:	18 16       	cp	r1, r24
    74e4:	19 06       	cpc	r1, r25
    74e6:	0c f4       	brge	.+2      	; 0x74ea <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    74e8:	b2 cf       	rjmp	.-156    	; 0x744e <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    74ea:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    74ee:	66 19       	sub	r22, r6
    74f0:	77 09       	sbc	r23, r7
    74f2:	88 09       	sbc	r24, r8
    74f4:	99 09       	sbc	r25, r9
    74f6:	69 38       	cpi	r22, 0x89	; 137
    74f8:	73 41       	sbci	r23, 0x13	; 19
    74fa:	81 05       	cpc	r24, r1
    74fc:	91 05       	cpc	r25, r1
    74fe:	08 f0       	brcs	.+2      	; 0x7502 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    7500:	db c0       	rjmp	.+438    	; 0x76b8 <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    7502:	62 e3       	ldi	r22, 0x32	; 50
    7504:	70 e0       	ldi	r23, 0x00	; 0
    7506:	80 e0       	ldi	r24, 0x00	; 0
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
    750e:	e6 cf       	rjmp	.-52     	; 0x74dc <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    7510:	8f 70       	andi	r24, 0x0F	; 15
    7512:	92 70       	andi	r25, 0x02	; 2
    7514:	89 2b       	or	r24, r25
    7516:	41 f0       	breq	.+16     	; 0x7528 <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    7518:	c8 01       	movw	r24, r16
    751a:	0e 94 b7 87 	call	0x10f6e	; 0x10f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    751e:	7b ef       	ldi	r23, 0xFB	; 251
    7520:	c7 2e       	mov	r12, r23
    7522:	dd 24       	eor	r13, r13
    7524:	da 94       	dec	r13
    7526:	cc cf       	rjmp	.-104    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    7528:	6f 80       	ldd	r6, Y+7	; 0x07
    752a:	78 84       	ldd	r7, Y+8	; 0x08
    752c:	76 24       	eor	r7, r6
    752e:	67 24       	eor	r6, r7
    7530:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    7532:	d1 2c       	mov	r13, r1
    7534:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    7536:	61 14       	cp	r6, r1
    7538:	71 04       	cpc	r7, r1
    753a:	d1 f4       	brne	.+52     	; 0x7570 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    753c:	c8 01       	movw	r24, r16
    753e:	0e 94 b7 87 	call	0x10f6e	; 0x10f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    7542:	6a ef       	ldi	r22, 0xFA	; 250
    7544:	c6 2e       	mov	r12, r22
    7546:	dd 24       	eor	r13, r13
    7548:	da 94       	dec	r13
    754a:	ba cf       	rjmp	.-140    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    754c:	8d 85       	ldd	r24, Y+13	; 0x0d
    754e:	81 11       	cpse	r24, r1
    7550:	17 c0       	rjmp	.+46     	; 0x7580 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    7552:	c8 01       	movw	r24, r16
    7554:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    7558:	c8 01       	movw	r24, r16
    755a:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    755e:	c8 01       	movw	r24, r16
    7560:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    7564:	c8 01       	movw	r24, r16
    7566:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    756a:	ff ef       	ldi	r31, 0xFF	; 255
    756c:	cf 1a       	sub	r12, r31
    756e:	df 0a       	sbc	r13, r31
    7570:	8d 81       	ldd	r24, Y+5	; 0x05
    7572:	9e 81       	ldd	r25, Y+6	; 0x06
    7574:	98 27       	eor	r25, r24
    7576:	89 27       	eor	r24, r25
    7578:	98 27       	eor	r25, r24
    757a:	c8 16       	cp	r12, r24
    757c:	d9 06       	cpc	r13, r25
    757e:	a8 f4       	brcc	.+42     	; 0x75aa <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    7580:	41 e0       	ldi	r20, 0x01	; 1
    7582:	50 e0       	ldi	r21, 0x00	; 0
    7584:	be 01       	movw	r22, r28
    7586:	63 5f       	subi	r22, 0xF3	; 243
    7588:	7f 4f       	sbci	r23, 0xFF	; 255
    758a:	c8 01       	movw	r24, r16
    758c:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    7590:	8d 85       	ldd	r24, Y+13	; 0x0d
    7592:	88 23       	and	r24, r24
    7594:	d9 f2       	breq	.-74     	; 0x754c <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    7596:	8d 85       	ldd	r24, Y+13	; 0x0d
    7598:	9f ef       	ldi	r25, 0xFF	; 255
    759a:	98 0f       	add	r25, r24
    759c:	9d 87       	std	Y+13, r25	; 0x0d
    759e:	88 23       	and	r24, r24
    75a0:	a9 f2       	breq	.-86     	; 0x754c <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    75a2:	c8 01       	movw	r24, r16
    75a4:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    75a8:	f6 cf       	rjmp	.-20     	; 0x7596 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    75aa:	91 2c       	mov	r9, r1
    75ac:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    75ae:	41 e0       	ldi	r20, 0x01	; 1
    75b0:	50 e0       	ldi	r21, 0x00	; 0
    75b2:	be 01       	movw	r22, r28
    75b4:	6d 5e       	subi	r22, 0xED	; 237
    75b6:	7f 4f       	sbci	r23, 0xFF	; 255
    75b8:	c8 01       	movw	r24, r16
    75ba:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    75be:	8b 89       	ldd	r24, Y+19	; 0x13
    75c0:	98 2f       	mov	r25, r24
    75c2:	90 7c       	andi	r25, 0xC0	; 192
    75c4:	61 f4       	brne	.+24     	; 0x75de <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    75c6:	88 23       	and	r24, r24
    75c8:	89 f0       	breq	.+34     	; 0x75ec <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    75ca:	8b 89       	ldd	r24, Y+19	; 0x13
    75cc:	9f ef       	ldi	r25, 0xFF	; 255
    75ce:	98 0f       	add	r25, r24
    75d0:	9b 8b       	std	Y+19, r25	; 0x13
    75d2:	88 23       	and	r24, r24
    75d4:	41 f0       	breq	.+16     	; 0x75e6 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    75d6:	c8 01       	movw	r24, r16
    75d8:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    75dc:	f6 cf       	rjmp	.-20     	; 0x75ca <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    75de:	c8 01       	movw	r24, r16
    75e0:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    75e4:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    75e6:	8b 89       	ldd	r24, Y+19	; 0x13
    75e8:	81 11       	cpse	r24, r1
    75ea:	e1 cf       	rjmp	.-62     	; 0x75ae <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    75ec:	42 e0       	ldi	r20, 0x02	; 2
    75ee:	50 e0       	ldi	r21, 0x00	; 0
    75f0:	be 01       	movw	r22, r28
    75f2:	61 5f       	subi	r22, 0xF1	; 241
    75f4:	7f 4f       	sbci	r23, 0xFF	; 255
    75f6:	c8 01       	movw	r24, r16
    75f8:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    75fc:	42 e0       	ldi	r20, 0x02	; 2
    75fe:	50 e0       	ldi	r21, 0x00	; 0
    7600:	be 01       	movw	r22, r28
    7602:	63 5f       	subi	r22, 0xF3	; 243
    7604:	7f 4f       	sbci	r23, 0xFF	; 255
    7606:	c8 01       	movw	r24, r16
    7608:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    760c:	c8 01       	movw	r24, r16
    760e:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    7612:	c8 01       	movw	r24, r16
    7614:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    7618:	c8 01       	movw	r24, r16
    761a:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
    761e:	c8 01       	movw	r24, r16
    7620:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    7624:	42 e0       	ldi	r20, 0x02	; 2
    7626:	50 e0       	ldi	r21, 0x00	; 0
    7628:	be 01       	movw	r22, r28
    762a:	6f 5e       	subi	r22, 0xEF	; 239
    762c:	7f 4f       	sbci	r23, 0xFF	; 255
    762e:	c8 01       	movw	r24, r16
    7630:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    7634:	8f 85       	ldd	r24, Y+15	; 0x0f
    7636:	98 89       	ldd	r25, Y+16	; 0x10
    7638:	81 15       	cp	r24, r1
    763a:	91 40       	sbci	r25, 0x01	; 1
    763c:	e9 f4       	brne	.+58     	; 0x7678 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    763e:	cd 84       	ldd	r12, Y+13	; 0x0d
    7640:	de 84       	ldd	r13, Y+14	; 0x0e
    7642:	dc 24       	eor	r13, r12
    7644:	cd 24       	eor	r12, r13
    7646:	dc 24       	eor	r13, r12
    7648:	81 e0       	ldi	r24, 0x01	; 1
    764a:	c8 16       	cp	r12, r24
    764c:	d1 04       	cpc	r13, r1
    764e:	a1 f4       	brne	.+40     	; 0x7678 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    7650:	89 89       	ldd	r24, Y+17	; 0x11
    7652:	9a 89       	ldd	r25, Y+18	; 0x12
    7654:	81 15       	cp	r24, r1
    7656:	94 40       	sbci	r25, 0x04	; 4
    7658:	41 f0       	breq	.+16     	; 0x766a <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    765a:	c8 01       	movw	r24, r16
    765c:	0e 94 b7 87 	call	0x10f6e	; 0x10f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    7660:	57 ef       	ldi	r21, 0xF7	; 247
    7662:	c5 2e       	mov	r12, r21
    7664:	dd 24       	eor	r13, r13
    7666:	da 94       	dec	r13
    7668:	2b cf       	rjmp	.-426    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    766a:	44 e0       	ldi	r20, 0x04	; 4
    766c:	50 e0       	ldi	r21, 0x00	; 0
    766e:	b2 01       	movw	r22, r4
    7670:	c8 01       	movw	r24, r16
    7672:	0e 94 95 a0 	call	0x1412a	; 0x1412a <EthernetUDP::read(unsigned char*, unsigned int)>
    7676:	24 cf       	rjmp	.-440    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    7678:	d1 2c       	mov	r13, r1
    767a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    767c:	89 89       	ldd	r24, Y+17	; 0x11
    767e:	9a 89       	ldd	r25, Y+18	; 0x12
    7680:	98 27       	eor	r25, r24
    7682:	89 27       	eor	r24, r25
    7684:	98 27       	eor	r25, r24
    7686:	c8 16       	cp	r12, r24
    7688:	d9 06       	cpc	r13, r25
    768a:	38 f4       	brcc	.+14     	; 0x769a <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    768c:	c8 01       	movw	r24, r16
    768e:	0e 94 b4 a0 	call	0x14168	; 0x14168 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    7692:	ff ef       	ldi	r31, 0xFF	; 255
    7694:	cf 1a       	sub	r12, r31
    7696:	df 0a       	sbc	r13, r31
    7698:	f1 cf       	rjmp	.-30     	; 0x767c <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    769a:	2f ef       	ldi	r18, 0xFF	; 255
    769c:	82 1a       	sub	r8, r18
    769e:	92 0a       	sbc	r9, r18
    76a0:	68 14       	cp	r6, r8
    76a2:	79 04       	cpc	r7, r9
    76a4:	09 f0       	breq	.+2      	; 0x76a8 <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    76a6:	83 cf       	rjmp	.-250    	; 0x75ae <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    76a8:	c8 01       	movw	r24, r16
    76aa:	0e 94 b7 87 	call	0x10f6e	; 0x10f6e <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    76ae:	46 ef       	ldi	r20, 0xF6	; 246
    76b0:	c4 2e       	mov	r12, r20
    76b2:	dd 24       	eor	r13, r13
    76b4:	da 94       	dec	r13
    76b6:	04 cf       	rjmp	.-504    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    76b8:	cc 24       	eor	r12, r12
    76ba:	ca 94       	dec	r12
    76bc:	dc 2c       	mov	r13, r12
    76be:	00 cf       	rjmp	.-512    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    76c0:	2e ef       	ldi	r18, 0xFE	; 254
    76c2:	c2 2e       	mov	r12, r18
    76c4:	dd 24       	eor	r13, r13
    76c6:	da 94       	dec	r13
    76c8:	fb ce       	rjmp	.-522    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    76ca:	9d ef       	ldi	r25, 0xFD	; 253
    76cc:	c9 2e       	mov	r12, r25
    76ce:	dd 24       	eor	r13, r13
    76d0:	da 94       	dec	r13
    76d2:	f6 ce       	rjmp	.-532    	; 0x74c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    76d4:	8e ef       	ldi	r24, 0xFE	; 254
    76d6:	c8 2e       	mov	r12, r24
    76d8:	dd 24       	eor	r13, r13
    76da:	da 94       	dec	r13
    76dc:	d0 cd       	rjmp	.-1120   	; 0x727e <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    76de:	d1 2c       	mov	r13, r1
    76e0:	c1 2c       	mov	r12, r1
    76e2:	cd cd       	rjmp	.-1126   	; 0x727e <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

000076e4 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    76e4:	cf 92       	push	r12
    76e6:	df 92       	push	r13
    76e8:	ef 92       	push	r14
    76ea:	ff 92       	push	r15
    76ec:	0f 93       	push	r16
    76ee:	1f 93       	push	r17
    76f0:	cf 93       	push	r28
    76f2:	df 93       	push	r29
    76f4:	cd b7       	in	r28, 0x3d	; 61
    76f6:	de b7       	in	r29, 0x3e	; 62
    76f8:	af 97       	sbiw	r28, 0x2f	; 47
    76fa:	0f b6       	in	r0, 0x3f	; 63
    76fc:	f8 94       	cli
    76fe:	de bf       	out	0x3e, r29	; 62
    7700:	0f be       	out	0x3f, r0	; 63
    7702:	cd bf       	out	0x3d, r28	; 61
    7704:	7c 01       	movw	r14, r24
    7706:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    7708:	02 ee       	ldi	r16, 0xE2	; 226
    770a:	12 e0       	ldi	r17, 0x02	; 2
    770c:	1a 83       	std	Y+2, r17	; 0x02
    770e:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    7710:	1c 86       	std	Y+12, r1	; 0x0c
    7712:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    7714:	88 ee       	ldi	r24, 0xE8	; 232
    7716:	93 e0       	ldi	r25, 0x03	; 3
    7718:	a0 e0       	ldi	r26, 0x00	; 0
    771a:	b0 e0       	ldi	r27, 0x00	; 0
    771c:	8d 87       	std	Y+13, r24	; 0x0d
    771e:	9e 87       	std	Y+14, r25	; 0x0e
    7720:	af 87       	std	Y+15, r26	; 0x0f
    7722:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    7724:	88 e9       	ldi	r24, 0x98	; 152
    7726:	92 e0       	ldi	r25, 0x02	; 2
    7728:	9a 87       	std	Y+10, r25	; 0x0a
    772a:	89 87       	std	Y+9, r24	; 0x09
    772c:	88 e0       	ldi	r24, 0x08	; 8
    772e:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    7730:	19 8f       	std	Y+25, r17	; 0x19
    7732:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    7734:	1a 8e       	std	Y+26, r1	; 0x1a
    7736:	1b 8e       	std	Y+27, r1	; 0x1b
    7738:	1c 8e       	std	Y+28, r1	; 0x1c
    773a:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    773c:	1b a7       	std	Y+43, r17	; 0x2b
    773e:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    7740:	1c a6       	std	Y+44, r1	; 0x2c
    7742:	1d a6       	std	Y+45, r1	; 0x2d
    7744:	1e a6       	std	Y+46, r1	; 0x2e
    7746:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    7748:	80 91 67 0c 	lds	r24, 0x0C67	; 0x800c67 <Ethernet+0x2>
    774c:	90 91 68 0c 	lds	r25, 0x0C68	; 0x800c68 <Ethernet+0x3>
    7750:	a0 91 69 0c 	lds	r26, 0x0C69	; 0x800c69 <Ethernet+0x4>
    7754:	b0 91 6a 0c 	lds	r27, 0x0C6A	; 0x800c6a <Ethernet+0x5>
    7758:	8e a3       	std	Y+38, r24	; 0x26
    775a:	9f a3       	std	Y+39, r25	; 0x27
    775c:	a8 a7       	std	Y+40, r26	; 0x28
    775e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    7760:	8b 83       	std	Y+3, r24	; 0x03
    7762:	9c 83       	std	Y+4, r25	; 0x04
    7764:	ad 83       	std	Y+5, r26	; 0x05
    7766:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    7768:	18 86       	std	Y+8, r1	; 0x08
    776a:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    776c:	ae 01       	movw	r20, r28
    776e:	46 5d       	subi	r20, 0xD6	; 214
    7770:	5f 4f       	sbci	r21, 0xFF	; 255
    7772:	ce 01       	movw	r24, r28
    7774:	01 96       	adiw	r24, 0x01	; 1
    7776:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    777a:	81 30       	cpi	r24, 0x01	; 1
    777c:	91 05       	cpc	r25, r1
    777e:	b1 f4       	brne	.+44     	; 0x77ac <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    7780:	d7 01       	movw	r26, r14
    7782:	ed 91       	ld	r30, X+
    7784:	fc 91       	ld	r31, X
    7786:	06 84       	ldd	r0, Z+14	; 0x0e
    7788:	f7 85       	ldd	r31, Z+15	; 0x0f
    778a:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    778c:	1d a3       	std	Y+37, r17	; 0x25
    778e:	0c a3       	std	Y+36, r16	; 0x24
    7790:	8c a5       	ldd	r24, Y+44	; 0x2c
    7792:	9d a5       	ldd	r25, Y+45	; 0x2d
    7794:	ae a5       	ldd	r26, Y+46	; 0x2e
    7796:	bf a5       	ldd	r27, Y+47	; 0x2f
    7798:	8e a3       	std	Y+38, r24	; 0x26
    779a:	9f a3       	std	Y+39, r25	; 0x27
    779c:	a8 a7       	std	Y+40, r26	; 0x28
    779e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    77a0:	a6 01       	movw	r20, r12
    77a2:	be 01       	movw	r22, r28
    77a4:	6c 5d       	subi	r22, 0xDC	; 220
    77a6:	7f 4f       	sbci	r23, 0xFF	; 255
    77a8:	c7 01       	movw	r24, r14
    77aa:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    77ac:	af 96       	adiw	r28, 0x2f	; 47
    77ae:	0f b6       	in	r0, 0x3f	; 63
    77b0:	f8 94       	cli
    77b2:	de bf       	out	0x3e, r29	; 62
    77b4:	0f be       	out	0x3f, r0	; 63
    77b6:	cd bf       	out	0x3d, r28	; 61
    77b8:	df 91       	pop	r29
    77ba:	cf 91       	pop	r28
    77bc:	1f 91       	pop	r17
    77be:	0f 91       	pop	r16
    77c0:	ff 90       	pop	r15
    77c2:	ef 90       	pop	r14
    77c4:	df 90       	pop	r13
    77c6:	cf 90       	pop	r12
    77c8:	08 95       	ret

000077ca <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    77ca:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    77cc:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    77ce:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    77d0:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SPIClass::initialized>
    77d4:	81 11       	cpse	r24, r1
    77d6:	27 c0       	rjmp	.+78     	; 0x7826 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    77d8:	e9 e5       	ldi	r30, 0x59	; 89
    77da:	f4 e4       	ldi	r31, 0x44	; 68
    77dc:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    77de:	e3 e1       	ldi	r30, 0x13	; 19
    77e0:	f4 e4       	ldi	r31, 0x44	; 68
    77e2:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    77e4:	e8 2f       	mov	r30, r24
    77e6:	f0 e0       	ldi	r31, 0x00	; 0
    77e8:	ee 0f       	add	r30, r30
    77ea:	ff 1f       	adc	r31, r31
    77ec:	e6 54       	subi	r30, 0x46	; 70
    77ee:	f1 4c       	sbci	r31, 0xC1	; 193
    77f0:	a5 91       	lpm	r26, Z+
    77f2:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    77f4:	ec 91       	ld	r30, X
    77f6:	e9 23       	and	r30, r25
    77f8:	21 f4       	brne	.+8      	; 0x7802 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    77fa:	61 e0       	ldi	r22, 0x01	; 1
    77fc:	88 e0       	ldi	r24, 0x08	; 8
    77fe:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    7802:	61 e0       	ldi	r22, 0x01	; 1
    7804:	88 e0       	ldi	r24, 0x08	; 8
    7806:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    780a:	8c b5       	in	r24, 0x2c	; 44
    780c:	80 61       	ori	r24, 0x10	; 16
    780e:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    7810:	8c b5       	in	r24, 0x2c	; 44
    7812:	80 64       	ori	r24, 0x40	; 64
    7814:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    7816:	61 e0       	ldi	r22, 0x01	; 1
    7818:	89 e0       	ldi	r24, 0x09	; 9
    781a:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    781e:	61 e0       	ldi	r22, 0x01	; 1
    7820:	8a e0       	ldi	r24, 0x0A	; 10
    7822:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    7826:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SPIClass::initialized>
    782a:	8f 5f       	subi	r24, 0xFF	; 255
    782c:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    7830:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    7832:	cf 91       	pop	r28
    7834:	08 95       	ret

00007836 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    7836:	7f 92       	push	r7
    7838:	8f 92       	push	r8
    783a:	9f 92       	push	r9
    783c:	af 92       	push	r10
    783e:	bf 92       	push	r11
    7840:	cf 92       	push	r12
    7842:	df 92       	push	r13
    7844:	ef 92       	push	r14
    7846:	ff 92       	push	r15
    7848:	0f 93       	push	r16
    784a:	1f 93       	push	r17
    784c:	cf 93       	push	r28
    784e:	df 93       	push	r29
    7850:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    7852:	fc 01       	movw	r30, r24
    7854:	86 81       	ldd	r24, Z+6	; 0x06
    7856:	81 11       	cpse	r24, r1
    7858:	35 c0       	rjmp	.+106    	; 0x78c4 <SoftSPIB::transfer(unsigned char)+0x8e>
    785a:	86 2f       	mov	r24, r22
    785c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    785e:	ec 01       	movw	r28, r24
    7860:	d6 95       	lsr	r29
    7862:	dc 2f       	mov	r29, r28
    7864:	cc 27       	eor	r28, r28
    7866:	d7 95       	ror	r29
    7868:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    786a:	66 1f       	adc	r22, r22
    786c:	66 27       	eor	r22, r22
    786e:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    7870:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    7872:	ec 01       	movw	r28, r24
    7874:	55 e0       	ldi	r21, 0x05	; 5
    7876:	cc 0f       	add	r28, r28
    7878:	dd 1f       	adc	r29, r29
    787a:	5a 95       	dec	r21
    787c:	e1 f7       	brne	.-8      	; 0x7876 <SoftSPIB::transfer(unsigned char)+0x40>
    787e:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    7880:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    7882:	ec 01       	movw	r28, r24
    7884:	73 e0       	ldi	r23, 0x03	; 3
    7886:	cc 0f       	add	r28, r28
    7888:	dd 1f       	adc	r29, r29
    788a:	7a 95       	dec	r23
    788c:	e1 f7       	brne	.-8      	; 0x7886 <SoftSPIB::transfer(unsigned char)+0x50>
    788e:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    7890:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    7892:	ec 01       	movw	r28, r24
    7894:	cc 0f       	add	r28, r28
    7896:	dd 1f       	adc	r29, r29
    7898:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    789a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    789c:	ec 01       	movw	r28, r24
    789e:	d5 95       	asr	r29
    78a0:	c7 95       	ror	r28
    78a2:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    78a4:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    78a6:	ec 01       	movw	r28, r24
    78a8:	a3 e0       	ldi	r26, 0x03	; 3
    78aa:	d5 95       	asr	r29
    78ac:	c7 95       	ror	r28
    78ae:	aa 95       	dec	r26
    78b0:	e1 f7       	brne	.-8      	; 0x78aa <SoftSPIB::transfer(unsigned char)+0x74>
    78b2:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    78b4:	6c 2b       	or	r22, r28
    78b6:	b5 e0       	ldi	r27, 0x05	; 5
    78b8:	95 95       	asr	r25
    78ba:	87 95       	ror	r24
    78bc:	ba 95       	dec	r27
    78be:	e1 f7       	brne	.-8      	; 0x78b8 <SoftSPIB::transfer(unsigned char)+0x82>
    78c0:	82 70       	andi	r24, 0x02	; 2
    78c2:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    78c4:	91 e0       	ldi	r25, 0x01	; 1
    78c6:	80 e0       	ldi	r24, 0x00	; 0
    78c8:	f8 01       	movw	r30, r16
    78ca:	21 81       	ldd	r18, Z+1	; 0x01
    78cc:	21 11       	cpse	r18, r1
    78ce:	01 c0       	rjmp	.+2      	; 0x78d2 <SoftSPIB::transfer(unsigned char)+0x9c>
    78d0:	90 e0       	ldi	r25, 0x00	; 0
    78d2:	e9 2e       	mov	r14, r25
    78d4:	f8 2e       	mov	r15, r24
    78d6:	d1 2c       	mov	r13, r1
    78d8:	c1 2c       	mov	r12, r1
    78da:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    78dc:	c6 2f       	mov	r28, r22
    78de:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    78e0:	f8 01       	movw	r30, r16
    78e2:	80 81       	ld	r24, Z
    78e4:	88 23       	and	r24, r24
    78e6:	39 f0       	breq	.+14     	; 0x78f6 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    78e8:	f1 e0       	ldi	r31, 0x01	; 1
    78ea:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    78ec:	6e 2d       	mov	r22, r14
    78ee:	f8 01       	movw	r30, r16
    78f0:	85 81       	ldd	r24, Z+5	; 0x05
    78f2:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    78f6:	be 01       	movw	r22, r28
    78f8:	0c 2c       	mov	r0, r12
    78fa:	02 c0       	rjmp	.+4      	; 0x7900 <SoftSPIB::transfer(unsigned char)+0xca>
    78fc:	75 95       	asr	r23
    78fe:	67 95       	ror	r22
    7900:	0a 94       	dec	r0
    7902:	e2 f7       	brpl	.-8      	; 0x78fc <SoftSPIB::transfer(unsigned char)+0xc6>
    7904:	61 70       	andi	r22, 0x01	; 1
    7906:	f8 01       	movw	r30, r16
    7908:	84 81       	ldd	r24, Z+4	; 0x04
    790a:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    790e:	57 01       	movw	r10, r14
    7910:	f1 e0       	ldi	r31, 0x01	; 1
    7912:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    7914:	6a 2d       	mov	r22, r10
    7916:	f8 01       	movw	r30, r16
    7918:	85 81       	ldd	r24, Z+5	; 0x05
    791a:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    791e:	f8 01       	movw	r30, r16
    7920:	23 81       	ldd	r18, Z+3	; 0x03
    7922:	30 e0       	ldi	r19, 0x00	; 0
    7924:	f9 01       	movw	r30, r18
    7926:	e6 53       	subi	r30, 0x36	; 54
    7928:	f1 4c       	sbci	r31, 0xC1	; 193
    792a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    792c:	f9 01       	movw	r30, r18
    792e:	e5 5f       	subi	r30, 0xF5	; 245
    7930:	fb 4b       	sbci	r31, 0xBB	; 187
    7932:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    7934:	f9 01       	movw	r30, r18
    7936:	ef 5a       	subi	r30, 0xAF	; 175
    7938:	fb 4b       	sbci	r31, 0xBB	; 187
    793a:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    793c:	77 20       	and	r7, r7
    793e:	a9 f1       	breq	.+106    	; 0x79aa <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7940:	81 11       	cpse	r24, r1
    7942:	0e 94 5d 90 	call	0x120ba	; 0x120ba <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    7946:	e7 2d       	mov	r30, r7
    7948:	f0 e0       	ldi	r31, 0x00	; 0
    794a:	ee 0f       	add	r30, r30
    794c:	ff 1f       	adc	r31, r31
    794e:	e5 50       	subi	r30, 0x05	; 5
    7950:	fc 4b       	sbci	r31, 0xBC	; 188
    7952:	a5 91       	lpm	r26, Z+
    7954:	b4 91       	lpm	r27, Z
    7956:	ec 91       	ld	r30, X
    7958:	8e 22       	and	r8, r30
    795a:	31 e0       	ldi	r19, 0x01	; 1
    795c:	20 e0       	ldi	r18, 0x00	; 0
    795e:	09 f4       	brne	.+2      	; 0x7962 <SoftSPIB::transfer(unsigned char)+0x12c>
    7960:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    7962:	83 2f       	mov	r24, r19
    7964:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    7966:	f8 01       	movw	r30, r16
    7968:	26 81       	ldd	r18, Z+6	; 0x06
    796a:	21 11       	cpse	r18, r1
    796c:	21 c0       	rjmp	.+66     	; 0x79b0 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    796e:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    7970:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    7972:	f8 01       	movw	r30, r16
    7974:	80 81       	ld	r24, Z
    7976:	88 23       	and	r24, r24
    7978:	11 f1       	breq	.+68     	; 0x79be <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    797a:	75 01       	movw	r14, r10
    797c:	ff ef       	ldi	r31, 0xFF	; 255
    797e:	cf 1a       	sub	r12, r31
    7980:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    7982:	28 e0       	ldi	r18, 0x08	; 8
    7984:	c2 16       	cp	r12, r18
    7986:	d1 04       	cpc	r13, r1
    7988:	09 f0       	breq	.+2      	; 0x798c <SoftSPIB::transfer(unsigned char)+0x156>
    798a:	aa cf       	rjmp	.-172    	; 0x78e0 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    798c:	89 2d       	mov	r24, r9
    798e:	df 91       	pop	r29
    7990:	cf 91       	pop	r28
    7992:	1f 91       	pop	r17
    7994:	0f 91       	pop	r16
    7996:	ff 90       	pop	r15
    7998:	ef 90       	pop	r14
    799a:	df 90       	pop	r13
    799c:	cf 90       	pop	r12
    799e:	bf 90       	pop	r11
    79a0:	af 90       	pop	r10
    79a2:	9f 90       	pop	r9
    79a4:	8f 90       	pop	r8
    79a6:	7f 90       	pop	r7
    79a8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    79aa:	90 e0       	ldi	r25, 0x00	; 0
    79ac:	80 e0       	ldi	r24, 0x00	; 0
    79ae:	db cf       	rjmp	.-74     	; 0x7966 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    79b0:	96 95       	lsr	r25
    79b2:	98 2f       	mov	r25, r24
    79b4:	88 27       	eor	r24, r24
    79b6:	97 95       	ror	r25
    79b8:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    79ba:	96 94       	lsr	r9
    79bc:	d9 cf       	rjmp	.-78     	; 0x7970 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    79be:	6e 2d       	mov	r22, r14
    79c0:	85 81       	ldd	r24, Z+5	; 0x05
    79c2:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
    79c6:	da cf       	rjmp	.-76     	; 0x797c <SoftSPIB::transfer(unsigned char)+0x146>

000079c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    79c8:	cf 93       	push	r28
    79ca:	df 93       	push	r29
    79cc:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    79ce:	a6 a5       	ldd	r26, Z+46	; 0x2e
    79d0:	b7 a5       	ldd	r27, Z+47	; 0x2f
    79d2:	8c 91       	ld	r24, X
    79d4:	92 ad       	ldd	r25, Z+58	; 0x3a
    79d6:	89 23       	and	r24, r25
    79d8:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    79da:	a0 a9       	ldd	r26, Z+48	; 0x30
    79dc:	b1 a9       	ldd	r27, Z+49	; 0x31
    79de:	8c 91       	ld	r24, X
    79e0:	93 ad       	ldd	r25, Z+59	; 0x3b
    79e2:	89 23       	and	r24, r25
    79e4:	8c 93       	st	X, r24
    79e6:	72 b9       	out	0x02, r23	; 2
    79e8:	a2 a9       	ldd	r26, Z+50	; 0x32
    79ea:	b3 a9       	ldd	r27, Z+51	; 0x33
    79ec:	8c 91       	ld	r24, X
    79ee:	94 ad       	ldd	r25, Z+60	; 0x3c
    79f0:	89 23       	and	r24, r25
    79f2:	8c 93       	st	X, r24
    79f4:	a2 a9       	ldd	r26, Z+50	; 0x32
    79f6:	b3 a9       	ldd	r27, Z+51	; 0x33
    79f8:	8c 91       	ld	r24, X
    79fa:	90 ad       	ldd	r25, Z+56	; 0x38
    79fc:	89 2b       	or	r24, r25
    79fe:	8c 93       	st	X, r24
    7a00:	62 b9       	out	0x02, r22	; 2
    7a02:	a2 a9       	ldd	r26, Z+50	; 0x32
    7a04:	b3 a9       	ldd	r27, Z+51	; 0x33
    7a06:	8c 91       	ld	r24, X
    7a08:	94 ad       	ldd	r25, Z+60	; 0x3c
    7a0a:	89 23       	and	r24, r25
    7a0c:	8c 93       	st	X, r24
    7a0e:	a2 a9       	ldd	r26, Z+50	; 0x32
    7a10:	b3 a9       	ldd	r27, Z+51	; 0x33
    7a12:	8c 91       	ld	r24, X
    7a14:	90 ad       	ldd	r25, Z+56	; 0x38
    7a16:	89 2b       	or	r24, r25
    7a18:	8c 93       	st	X, r24
    7a1a:	a0 a9       	ldd	r26, Z+48	; 0x30
    7a1c:	b1 a9       	ldd	r27, Z+49	; 0x31
    7a1e:	8c 91       	ld	r24, X
    7a20:	97 a9       	ldd	r25, Z+55	; 0x37
    7a22:	89 2b       	or	r24, r25
    7a24:	8c 93       	st	X, r24
    7a26:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    7a28:	9f ef       	ldi	r25, 0xFF	; 255
    7a2a:	92 0f       	add	r25, r18
    7a2c:	12 16       	cp	r1, r18
    7a2e:	0c f0       	brlt	.+2      	; 0x7a32 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    7a30:	3f c0       	rjmp	.+126    	; 0x7ab0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    7a32:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    7a34:	82 b9       	out	0x02, r24	; 2
    7a36:	c2 a9       	ldd	r28, Z+50	; 0x32
    7a38:	d3 a9       	ldd	r29, Z+51	; 0x33
    7a3a:	88 81       	ld	r24, Y
    7a3c:	24 ad       	ldd	r18, Z+60	; 0x3c
    7a3e:	82 23       	and	r24, r18
    7a40:	88 83       	st	Y, r24
    7a42:	c2 a9       	ldd	r28, Z+50	; 0x32
    7a44:	d3 a9       	ldd	r29, Z+51	; 0x33
    7a46:	88 81       	ld	r24, Y
    7a48:	20 ad       	ldd	r18, Z+56	; 0x38
    7a4a:	82 2b       	or	r24, r18
    7a4c:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    7a4e:	99 23       	and	r25, r25
    7a50:	69 f1       	breq	.+90     	; 0x7aac <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    7a52:	20 8d       	ldd	r18, Z+24	; 0x18
    7a54:	31 8d       	ldd	r19, Z+25	; 0x19
    7a56:	21 30       	cpi	r18, 0x01	; 1
    7a58:	31 05       	cpc	r19, r1
    7a5a:	41 f5       	brne	.+80     	; 0x7aac <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    7a5c:	6f 5f       	subi	r22, 0xFF	; 255
    7a5e:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    7a60:	c0 a9       	ldd	r28, Z+48	; 0x30
    7a62:	d1 a9       	ldd	r29, Z+49	; 0x31
    7a64:	88 81       	ld	r24, Y
    7a66:	23 ad       	ldd	r18, Z+59	; 0x3b
    7a68:	82 23       	and	r24, r18
    7a6a:	88 83       	st	Y, r24
    7a6c:	72 b9       	out	0x02, r23	; 2
    7a6e:	c2 a9       	ldd	r28, Z+50	; 0x32
    7a70:	d3 a9       	ldd	r29, Z+51	; 0x33
    7a72:	88 81       	ld	r24, Y
    7a74:	24 ad       	ldd	r18, Z+60	; 0x3c
    7a76:	82 23       	and	r24, r18
    7a78:	88 83       	st	Y, r24
    7a7a:	c2 a9       	ldd	r28, Z+50	; 0x32
    7a7c:	d3 a9       	ldd	r29, Z+51	; 0x33
    7a7e:	88 81       	ld	r24, Y
    7a80:	20 ad       	ldd	r18, Z+56	; 0x38
    7a82:	82 2b       	or	r24, r18
    7a84:	88 83       	st	Y, r24
    7a86:	62 b9       	out	0x02, r22	; 2
    7a88:	c2 a9       	ldd	r28, Z+50	; 0x32
    7a8a:	d3 a9       	ldd	r29, Z+51	; 0x33
    7a8c:	88 81       	ld	r24, Y
    7a8e:	24 ad       	ldd	r18, Z+60	; 0x3c
    7a90:	82 23       	and	r24, r18
    7a92:	88 83       	st	Y, r24
    7a94:	c2 a9       	ldd	r28, Z+50	; 0x32
    7a96:	d3 a9       	ldd	r29, Z+51	; 0x33
    7a98:	88 81       	ld	r24, Y
    7a9a:	20 ad       	ldd	r18, Z+56	; 0x38
    7a9c:	82 2b       	or	r24, r18
    7a9e:	88 83       	st	Y, r24
    7aa0:	c0 a9       	ldd	r28, Z+48	; 0x30
    7aa2:	d1 a9       	ldd	r29, Z+49	; 0x31
    7aa4:	88 81       	ld	r24, Y
    7aa6:	27 a9       	ldd	r18, Z+55	; 0x37
    7aa8:	82 2b       	or	r24, r18
    7aaa:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    7aac:	29 2f       	mov	r18, r25
    7aae:	bc cf       	rjmp	.-136    	; 0x7a28 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    7ab0:	a6 a5       	ldd	r26, Z+46	; 0x2e
    7ab2:	b7 a5       	ldd	r27, Z+47	; 0x2f
    7ab4:	8c 91       	ld	r24, X
    7ab6:	96 a9       	ldd	r25, Z+54	; 0x36
    7ab8:	89 2b       	or	r24, r25
    7aba:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    7abc:	df 91       	pop	r29
    7abe:	cf 91       	pop	r28
    7ac0:	08 95       	ret

00007ac2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    7ac2:	af 92       	push	r10
    7ac4:	bf 92       	push	r11
    7ac6:	cf 92       	push	r12
    7ac8:	df 92       	push	r13
    7aca:	ef 92       	push	r14
    7acc:	ff 92       	push	r15
    7ace:	0f 93       	push	r16
    7ad0:	1f 93       	push	r17
    7ad2:	cf 93       	push	r28
    7ad4:	df 93       	push	r29
    7ad6:	00 d0       	rcall	.+0      	; 0x7ad8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    7ad8:	00 d0       	rcall	.+0      	; 0x7ada <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    7ada:	1f 92       	push	r1
    7adc:	1f 92       	push	r1
    7ade:	cd b7       	in	r28, 0x3d	; 61
    7ae0:	de b7       	in	r29, 0x3e	; 62
    7ae2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    7ae4:	dc 01       	movw	r26, r24
    7ae6:	9e 96       	adiw	r26, 0x2e	; 46
    7ae8:	ed 91       	ld	r30, X+
    7aea:	fc 91       	ld	r31, X
    7aec:	9f 97       	sbiw	r26, 0x2f	; 47
    7aee:	80 81       	ld	r24, Z
    7af0:	da 96       	adiw	r26, 0x3a	; 58
    7af2:	9c 91       	ld	r25, X
    7af4:	da 97       	sbiw	r26, 0x3a	; 58
    7af6:	89 23       	and	r24, r25
    7af8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    7afa:	58 96       	adiw	r26, 0x18	; 24
    7afc:	8d 91       	ld	r24, X+
    7afe:	9c 91       	ld	r25, X
    7b00:	59 97       	sbiw	r26, 0x19	; 25
    7b02:	00 97       	sbiw	r24, 0x00	; 0
    7b04:	09 f0       	breq	.+2      	; 0x7b08 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    7b06:	44 c3       	rjmp	.+1672   	; 0x8190 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    7b08:	56 96       	adiw	r26, 0x16	; 22
    7b0a:	8d 91       	ld	r24, X+
    7b0c:	9c 91       	ld	r25, X
    7b0e:	57 97       	sbiw	r26, 0x17	; 23
    7b10:	82 30       	cpi	r24, 0x02	; 2
    7b12:	91 05       	cpc	r25, r1
    7b14:	09 f4       	brne	.+2      	; 0x7b18 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    7b16:	0b c3       	rjmp	.+1558   	; 0x812e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    7b18:	83 30       	cpi	r24, 0x03	; 3
    7b1a:	91 05       	cpc	r25, r1
    7b1c:	09 f4       	brne	.+2      	; 0x7b20 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    7b1e:	23 c3       	rjmp	.+1606   	; 0x8166 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    7b20:	01 97       	sbiw	r24, 0x01	; 1
    7b22:	09 f0       	breq	.+2      	; 0x7b26 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    7b24:	32 c3       	rjmp	.+1636   	; 0x818a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    7b26:	1e 96       	adiw	r26, 0x0e	; 14
    7b28:	0d 90       	ld	r0, X+
    7b2a:	bc 91       	ld	r27, X
    7b2c:	a0 2d       	mov	r26, r0
    7b2e:	68 01       	movw	r12, r16
    7b30:	c0 94       	com	r12
    7b32:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    7b34:	40 95       	com	r20
    7b36:	50 95       	com	r21
    7b38:	fa 01       	movw	r30, r20
    7b3a:	ea 0f       	add	r30, r26
    7b3c:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    7b3e:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    7b40:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    7b42:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    7b44:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    7b46:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    7b48:	6a 0f       	add	r22, r26
    7b4a:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    7b4c:	d7 01       	movw	r26, r14
    7b4e:	d0 96       	adiw	r26, 0x30	; 48
    7b50:	cd 90       	ld	r12, X+
    7b52:	dc 90       	ld	r13, X
    7b54:	d6 01       	movw	r26, r12
    7b56:	bc 90       	ld	r11, X
    7b58:	d7 01       	movw	r26, r14
    7b5a:	db 96       	adiw	r26, 0x3b	; 59
    7b5c:	ac 90       	ld	r10, X
    7b5e:	ba 20       	and	r11, r10
    7b60:	d6 01       	movw	r26, r12
    7b62:	bc 92       	st	X, r11
    7b64:	12 b8       	out	0x02, r1	; 2
    7b66:	d7 01       	movw	r26, r14
    7b68:	d2 96       	adiw	r26, 0x32	; 50
    7b6a:	cd 90       	ld	r12, X+
    7b6c:	dc 90       	ld	r13, X
    7b6e:	d6 01       	movw	r26, r12
    7b70:	bc 90       	ld	r11, X
    7b72:	d7 01       	movw	r26, r14
    7b74:	dc 96       	adiw	r26, 0x3c	; 60
    7b76:	ac 90       	ld	r10, X
    7b78:	ba 20       	and	r11, r10
    7b7a:	d6 01       	movw	r26, r12
    7b7c:	bc 92       	st	X, r11
    7b7e:	d7 01       	movw	r26, r14
    7b80:	d2 96       	adiw	r26, 0x32	; 50
    7b82:	cd 90       	ld	r12, X+
    7b84:	dc 90       	ld	r13, X
    7b86:	d6 01       	movw	r26, r12
    7b88:	bc 90       	ld	r11, X
    7b8a:	d7 01       	movw	r26, r14
    7b8c:	d8 96       	adiw	r26, 0x38	; 56
    7b8e:	ac 90       	ld	r10, X
    7b90:	ba 28       	or	r11, r10
    7b92:	d6 01       	movw	r26, r12
    7b94:	bc 92       	st	X, r11
    7b96:	a0 e5       	ldi	r26, 0x50	; 80
    7b98:	a2 b9       	out	0x02, r26	; 2
    7b9a:	d7 01       	movw	r26, r14
    7b9c:	d2 96       	adiw	r26, 0x32	; 50
    7b9e:	cd 90       	ld	r12, X+
    7ba0:	dc 90       	ld	r13, X
    7ba2:	d6 01       	movw	r26, r12
    7ba4:	bc 90       	ld	r11, X
    7ba6:	d7 01       	movw	r26, r14
    7ba8:	dc 96       	adiw	r26, 0x3c	; 60
    7baa:	ac 90       	ld	r10, X
    7bac:	ba 20       	and	r11, r10
    7bae:	d6 01       	movw	r26, r12
    7bb0:	bc 92       	st	X, r11
    7bb2:	d7 01       	movw	r26, r14
    7bb4:	d2 96       	adiw	r26, 0x32	; 50
    7bb6:	cd 90       	ld	r12, X+
    7bb8:	dc 90       	ld	r13, X
    7bba:	d6 01       	movw	r26, r12
    7bbc:	bc 90       	ld	r11, X
    7bbe:	d7 01       	movw	r26, r14
    7bc0:	d8 96       	adiw	r26, 0x38	; 56
    7bc2:	ac 90       	ld	r10, X
    7bc4:	ba 28       	or	r11, r10
    7bc6:	d6 01       	movw	r26, r12
    7bc8:	bc 92       	st	X, r11
    7bca:	d7 01       	movw	r26, r14
    7bcc:	d0 96       	adiw	r26, 0x30	; 48
    7bce:	cd 90       	ld	r12, X+
    7bd0:	dc 90       	ld	r13, X
    7bd2:	d6 01       	movw	r26, r12
    7bd4:	bc 90       	ld	r11, X
    7bd6:	d7 01       	movw	r26, r14
    7bd8:	d7 96       	adiw	r26, 0x37	; 55
    7bda:	ac 90       	ld	r10, X
    7bdc:	ba 28       	or	r11, r10
    7bde:	d6 01       	movw	r26, r12
    7be0:	bc 92       	st	X, r11
    7be2:	72 b9       	out	0x02, r23	; 2
    7be4:	d7 01       	movw	r26, r14
    7be6:	d2 96       	adiw	r26, 0x32	; 50
    7be8:	ad 90       	ld	r10, X+
    7bea:	bc 90       	ld	r11, X
    7bec:	d5 01       	movw	r26, r10
    7bee:	7c 91       	ld	r23, X
    7bf0:	d7 01       	movw	r26, r14
    7bf2:	dc 96       	adiw	r26, 0x3c	; 60
    7bf4:	dc 90       	ld	r13, X
    7bf6:	7d 21       	and	r23, r13
    7bf8:	d5 01       	movw	r26, r10
    7bfa:	7c 93       	st	X, r23
    7bfc:	d7 01       	movw	r26, r14
    7bfe:	d2 96       	adiw	r26, 0x32	; 50
    7c00:	ad 90       	ld	r10, X+
    7c02:	bc 90       	ld	r11, X
    7c04:	d5 01       	movw	r26, r10
    7c06:	7c 91       	ld	r23, X
    7c08:	d7 01       	movw	r26, r14
    7c0a:	d8 96       	adiw	r26, 0x38	; 56
    7c0c:	dc 90       	ld	r13, X
    7c0e:	7d 29       	or	r23, r13
    7c10:	d5 01       	movw	r26, r10
    7c12:	7c 93       	st	X, r23
    7c14:	62 b9       	out	0x02, r22	; 2
    7c16:	d7 01       	movw	r26, r14
    7c18:	d2 96       	adiw	r26, 0x32	; 50
    7c1a:	cd 90       	ld	r12, X+
    7c1c:	dc 90       	ld	r13, X
    7c1e:	d6 01       	movw	r26, r12
    7c20:	6c 91       	ld	r22, X
    7c22:	d7 01       	movw	r26, r14
    7c24:	dc 96       	adiw	r26, 0x3c	; 60
    7c26:	7c 91       	ld	r23, X
    7c28:	67 23       	and	r22, r23
    7c2a:	d6 01       	movw	r26, r12
    7c2c:	6c 93       	st	X, r22
    7c2e:	d7 01       	movw	r26, r14
    7c30:	d2 96       	adiw	r26, 0x32	; 50
    7c32:	cd 90       	ld	r12, X+
    7c34:	dc 90       	ld	r13, X
    7c36:	d6 01       	movw	r26, r12
    7c38:	6c 91       	ld	r22, X
    7c3a:	d7 01       	movw	r26, r14
    7c3c:	d8 96       	adiw	r26, 0x38	; 56
    7c3e:	7c 91       	ld	r23, X
    7c40:	67 2b       	or	r22, r23
    7c42:	d6 01       	movw	r26, r12
    7c44:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    7c46:	d7 01       	movw	r26, r14
    7c48:	d0 96       	adiw	r26, 0x30	; 48
    7c4a:	cd 90       	ld	r12, X+
    7c4c:	dc 90       	ld	r13, X
    7c4e:	d6 01       	movw	r26, r12
    7c50:	6c 91       	ld	r22, X
    7c52:	d7 01       	movw	r26, r14
    7c54:	db 96       	adiw	r26, 0x3b	; 59
    7c56:	7c 91       	ld	r23, X
    7c58:	67 23       	and	r22, r23
    7c5a:	d6 01       	movw	r26, r12
    7c5c:	6c 93       	st	X, r22
    7c5e:	12 b8       	out	0x02, r1	; 2
    7c60:	d7 01       	movw	r26, r14
    7c62:	d2 96       	adiw	r26, 0x32	; 50
    7c64:	cd 90       	ld	r12, X+
    7c66:	dc 90       	ld	r13, X
    7c68:	d6 01       	movw	r26, r12
    7c6a:	6c 91       	ld	r22, X
    7c6c:	d7 01       	movw	r26, r14
    7c6e:	dc 96       	adiw	r26, 0x3c	; 60
    7c70:	7c 91       	ld	r23, X
    7c72:	67 23       	and	r22, r23
    7c74:	d6 01       	movw	r26, r12
    7c76:	6c 93       	st	X, r22
    7c78:	d7 01       	movw	r26, r14
    7c7a:	d2 96       	adiw	r26, 0x32	; 50
    7c7c:	cd 90       	ld	r12, X+
    7c7e:	dc 90       	ld	r13, X
    7c80:	d6 01       	movw	r26, r12
    7c82:	6c 91       	ld	r22, X
    7c84:	d7 01       	movw	r26, r14
    7c86:	d8 96       	adiw	r26, 0x38	; 56
    7c88:	7c 91       	ld	r23, X
    7c8a:	67 2b       	or	r22, r23
    7c8c:	d6 01       	movw	r26, r12
    7c8e:	6c 93       	st	X, r22
    7c90:	61 e5       	ldi	r22, 0x51	; 81
    7c92:	62 b9       	out	0x02, r22	; 2
    7c94:	d7 01       	movw	r26, r14
    7c96:	d2 96       	adiw	r26, 0x32	; 50
    7c98:	cd 90       	ld	r12, X+
    7c9a:	dc 90       	ld	r13, X
    7c9c:	d6 01       	movw	r26, r12
    7c9e:	6c 91       	ld	r22, X
    7ca0:	d7 01       	movw	r26, r14
    7ca2:	dc 96       	adiw	r26, 0x3c	; 60
    7ca4:	7c 91       	ld	r23, X
    7ca6:	67 23       	and	r22, r23
    7ca8:	d6 01       	movw	r26, r12
    7caa:	6c 93       	st	X, r22
    7cac:	d7 01       	movw	r26, r14
    7cae:	d2 96       	adiw	r26, 0x32	; 50
    7cb0:	cd 90       	ld	r12, X+
    7cb2:	dc 90       	ld	r13, X
    7cb4:	d6 01       	movw	r26, r12
    7cb6:	6c 91       	ld	r22, X
    7cb8:	d7 01       	movw	r26, r14
    7cba:	d8 96       	adiw	r26, 0x38	; 56
    7cbc:	7c 91       	ld	r23, X
    7cbe:	67 2b       	or	r22, r23
    7cc0:	d6 01       	movw	r26, r12
    7cc2:	6c 93       	st	X, r22
    7cc4:	d7 01       	movw	r26, r14
    7cc6:	d0 96       	adiw	r26, 0x30	; 48
    7cc8:	cd 90       	ld	r12, X+
    7cca:	dc 90       	ld	r13, X
    7ccc:	d6 01       	movw	r26, r12
    7cce:	6c 91       	ld	r22, X
    7cd0:	d7 01       	movw	r26, r14
    7cd2:	d7 96       	adiw	r26, 0x37	; 55
    7cd4:	7c 91       	ld	r23, X
    7cd6:	67 2b       	or	r22, r23
    7cd8:	d6 01       	movw	r26, r12
    7cda:	6c 93       	st	X, r22
    7cdc:	32 b9       	out	0x02, r19	; 2
    7cde:	d7 01       	movw	r26, r14
    7ce0:	d2 96       	adiw	r26, 0x32	; 50
    7ce2:	cd 90       	ld	r12, X+
    7ce4:	dc 90       	ld	r13, X
    7ce6:	d6 01       	movw	r26, r12
    7ce8:	3c 91       	ld	r19, X
    7cea:	d7 01       	movw	r26, r14
    7cec:	dc 96       	adiw	r26, 0x3c	; 60
    7cee:	6c 91       	ld	r22, X
    7cf0:	36 23       	and	r19, r22
    7cf2:	d6 01       	movw	r26, r12
    7cf4:	3c 93       	st	X, r19
    7cf6:	d7 01       	movw	r26, r14
    7cf8:	d2 96       	adiw	r26, 0x32	; 50
    7cfa:	cd 90       	ld	r12, X+
    7cfc:	dc 90       	ld	r13, X
    7cfe:	d6 01       	movw	r26, r12
    7d00:	3c 91       	ld	r19, X
    7d02:	d7 01       	movw	r26, r14
    7d04:	d8 96       	adiw	r26, 0x38	; 56
    7d06:	6c 91       	ld	r22, X
    7d08:	36 2b       	or	r19, r22
    7d0a:	d6 01       	movw	r26, r12
    7d0c:	3c 93       	st	X, r19
    7d0e:	22 b9       	out	0x02, r18	; 2
    7d10:	d7 01       	movw	r26, r14
    7d12:	d2 96       	adiw	r26, 0x32	; 50
    7d14:	6d 91       	ld	r22, X+
    7d16:	7c 91       	ld	r23, X
    7d18:	db 01       	movw	r26, r22
    7d1a:	2c 91       	ld	r18, X
    7d1c:	d7 01       	movw	r26, r14
    7d1e:	dc 96       	adiw	r26, 0x3c	; 60
    7d20:	3c 91       	ld	r19, X
    7d22:	23 23       	and	r18, r19
    7d24:	db 01       	movw	r26, r22
    7d26:	2c 93       	st	X, r18
    7d28:	d7 01       	movw	r26, r14
    7d2a:	d2 96       	adiw	r26, 0x32	; 50
    7d2c:	6d 91       	ld	r22, X+
    7d2e:	7c 91       	ld	r23, X
    7d30:	db 01       	movw	r26, r22
    7d32:	2c 91       	ld	r18, X
    7d34:	d7 01       	movw	r26, r14
    7d36:	d8 96       	adiw	r26, 0x38	; 56
    7d38:	3c 91       	ld	r19, X
    7d3a:	23 2b       	or	r18, r19
    7d3c:	db 01       	movw	r26, r22
    7d3e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    7d40:	d7 01       	movw	r26, r14
    7d42:	d0 96       	adiw	r26, 0x30	; 48
    7d44:	6d 91       	ld	r22, X+
    7d46:	7c 91       	ld	r23, X
    7d48:	db 01       	movw	r26, r22
    7d4a:	2c 91       	ld	r18, X
    7d4c:	d7 01       	movw	r26, r14
    7d4e:	db 96       	adiw	r26, 0x3b	; 59
    7d50:	3c 91       	ld	r19, X
    7d52:	23 23       	and	r18, r19
    7d54:	db 01       	movw	r26, r22
    7d56:	2c 93       	st	X, r18
    7d58:	12 b8       	out	0x02, r1	; 2
    7d5a:	d7 01       	movw	r26, r14
    7d5c:	d2 96       	adiw	r26, 0x32	; 50
    7d5e:	6d 91       	ld	r22, X+
    7d60:	7c 91       	ld	r23, X
    7d62:	db 01       	movw	r26, r22
    7d64:	2c 91       	ld	r18, X
    7d66:	d7 01       	movw	r26, r14
    7d68:	dc 96       	adiw	r26, 0x3c	; 60
    7d6a:	3c 91       	ld	r19, X
    7d6c:	23 23       	and	r18, r19
    7d6e:	db 01       	movw	r26, r22
    7d70:	2c 93       	st	X, r18
    7d72:	d7 01       	movw	r26, r14
    7d74:	d2 96       	adiw	r26, 0x32	; 50
    7d76:	6d 91       	ld	r22, X+
    7d78:	7c 91       	ld	r23, X
    7d7a:	db 01       	movw	r26, r22
    7d7c:	2c 91       	ld	r18, X
    7d7e:	d7 01       	movw	r26, r14
    7d80:	d8 96       	adiw	r26, 0x38	; 56
    7d82:	3c 91       	ld	r19, X
    7d84:	23 2b       	or	r18, r19
    7d86:	db 01       	movw	r26, r22
    7d88:	2c 93       	st	X, r18
    7d8a:	22 e5       	ldi	r18, 0x52	; 82
    7d8c:	22 b9       	out	0x02, r18	; 2
    7d8e:	d7 01       	movw	r26, r14
    7d90:	d2 96       	adiw	r26, 0x32	; 50
    7d92:	6d 91       	ld	r22, X+
    7d94:	7c 91       	ld	r23, X
    7d96:	db 01       	movw	r26, r22
    7d98:	2c 91       	ld	r18, X
    7d9a:	d7 01       	movw	r26, r14
    7d9c:	dc 96       	adiw	r26, 0x3c	; 60
    7d9e:	3c 91       	ld	r19, X
    7da0:	23 23       	and	r18, r19
    7da2:	db 01       	movw	r26, r22
    7da4:	2c 93       	st	X, r18
    7da6:	d7 01       	movw	r26, r14
    7da8:	d2 96       	adiw	r26, 0x32	; 50
    7daa:	6d 91       	ld	r22, X+
    7dac:	7c 91       	ld	r23, X
    7dae:	db 01       	movw	r26, r22
    7db0:	2c 91       	ld	r18, X
    7db2:	d7 01       	movw	r26, r14
    7db4:	d8 96       	adiw	r26, 0x38	; 56
    7db6:	3c 91       	ld	r19, X
    7db8:	23 2b       	or	r18, r19
    7dba:	db 01       	movw	r26, r22
    7dbc:	2c 93       	st	X, r18
    7dbe:	d7 01       	movw	r26, r14
    7dc0:	d0 96       	adiw	r26, 0x30	; 48
    7dc2:	6d 91       	ld	r22, X+
    7dc4:	7c 91       	ld	r23, X
    7dc6:	db 01       	movw	r26, r22
    7dc8:	2c 91       	ld	r18, X
    7dca:	d7 01       	movw	r26, r14
    7dcc:	d7 96       	adiw	r26, 0x37	; 55
    7dce:	3c 91       	ld	r19, X
    7dd0:	23 2b       	or	r18, r19
    7dd2:	db 01       	movw	r26, r22
    7dd4:	2c 93       	st	X, r18
    7dd6:	52 b9       	out	0x02, r21	; 2
    7dd8:	d7 01       	movw	r26, r14
    7dda:	d2 96       	adiw	r26, 0x32	; 50
    7ddc:	6d 91       	ld	r22, X+
    7dde:	7c 91       	ld	r23, X
    7de0:	db 01       	movw	r26, r22
    7de2:	2c 91       	ld	r18, X
    7de4:	d7 01       	movw	r26, r14
    7de6:	dc 96       	adiw	r26, 0x3c	; 60
    7de8:	3c 91       	ld	r19, X
    7dea:	23 23       	and	r18, r19
    7dec:	db 01       	movw	r26, r22
    7dee:	2c 93       	st	X, r18
    7df0:	d7 01       	movw	r26, r14
    7df2:	d2 96       	adiw	r26, 0x32	; 50
    7df4:	6d 91       	ld	r22, X+
    7df6:	7c 91       	ld	r23, X
    7df8:	db 01       	movw	r26, r22
    7dfa:	2c 91       	ld	r18, X
    7dfc:	d7 01       	movw	r26, r14
    7dfe:	d8 96       	adiw	r26, 0x38	; 56
    7e00:	3c 91       	ld	r19, X
    7e02:	23 2b       	or	r18, r19
    7e04:	db 01       	movw	r26, r22
    7e06:	2c 93       	st	X, r18
    7e08:	42 b9       	out	0x02, r20	; 2
    7e0a:	d7 01       	movw	r26, r14
    7e0c:	d2 96       	adiw	r26, 0x32	; 50
    7e0e:	4d 91       	ld	r20, X+
    7e10:	5c 91       	ld	r21, X
    7e12:	da 01       	movw	r26, r20
    7e14:	2c 91       	ld	r18, X
    7e16:	d7 01       	movw	r26, r14
    7e18:	dc 96       	adiw	r26, 0x3c	; 60
    7e1a:	3c 91       	ld	r19, X
    7e1c:	23 23       	and	r18, r19
    7e1e:	da 01       	movw	r26, r20
    7e20:	2c 93       	st	X, r18
    7e22:	d7 01       	movw	r26, r14
    7e24:	d2 96       	adiw	r26, 0x32	; 50
    7e26:	4d 91       	ld	r20, X+
    7e28:	5c 91       	ld	r21, X
    7e2a:	da 01       	movw	r26, r20
    7e2c:	2c 91       	ld	r18, X
    7e2e:	d7 01       	movw	r26, r14
    7e30:	d8 96       	adiw	r26, 0x38	; 56
    7e32:	3c 91       	ld	r19, X
    7e34:	23 2b       	or	r18, r19
    7e36:	da 01       	movw	r26, r20
    7e38:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    7e3a:	d7 01       	movw	r26, r14
    7e3c:	d0 96       	adiw	r26, 0x30	; 48
    7e3e:	4d 91       	ld	r20, X+
    7e40:	5c 91       	ld	r21, X
    7e42:	da 01       	movw	r26, r20
    7e44:	2c 91       	ld	r18, X
    7e46:	d7 01       	movw	r26, r14
    7e48:	db 96       	adiw	r26, 0x3b	; 59
    7e4a:	3c 91       	ld	r19, X
    7e4c:	23 23       	and	r18, r19
    7e4e:	da 01       	movw	r26, r20
    7e50:	2c 93       	st	X, r18
    7e52:	12 b8       	out	0x02, r1	; 2
    7e54:	d7 01       	movw	r26, r14
    7e56:	d2 96       	adiw	r26, 0x32	; 50
    7e58:	4d 91       	ld	r20, X+
    7e5a:	5c 91       	ld	r21, X
    7e5c:	da 01       	movw	r26, r20
    7e5e:	2c 91       	ld	r18, X
    7e60:	d7 01       	movw	r26, r14
    7e62:	dc 96       	adiw	r26, 0x3c	; 60
    7e64:	3c 91       	ld	r19, X
    7e66:	23 23       	and	r18, r19
    7e68:	da 01       	movw	r26, r20
    7e6a:	2c 93       	st	X, r18
    7e6c:	d7 01       	movw	r26, r14
    7e6e:	d2 96       	adiw	r26, 0x32	; 50
    7e70:	4d 91       	ld	r20, X+
    7e72:	5c 91       	ld	r21, X
    7e74:	da 01       	movw	r26, r20
    7e76:	2c 91       	ld	r18, X
    7e78:	d7 01       	movw	r26, r14
    7e7a:	d8 96       	adiw	r26, 0x38	; 56
    7e7c:	3c 91       	ld	r19, X
    7e7e:	23 2b       	or	r18, r19
    7e80:	da 01       	movw	r26, r20
    7e82:	2c 93       	st	X, r18
    7e84:	23 e5       	ldi	r18, 0x53	; 83
    7e86:	22 b9       	out	0x02, r18	; 2
    7e88:	d7 01       	movw	r26, r14
    7e8a:	d2 96       	adiw	r26, 0x32	; 50
    7e8c:	4d 91       	ld	r20, X+
    7e8e:	5c 91       	ld	r21, X
    7e90:	da 01       	movw	r26, r20
    7e92:	2c 91       	ld	r18, X
    7e94:	d7 01       	movw	r26, r14
    7e96:	dc 96       	adiw	r26, 0x3c	; 60
    7e98:	3c 91       	ld	r19, X
    7e9a:	23 23       	and	r18, r19
    7e9c:	da 01       	movw	r26, r20
    7e9e:	2c 93       	st	X, r18
    7ea0:	d7 01       	movw	r26, r14
    7ea2:	d2 96       	adiw	r26, 0x32	; 50
    7ea4:	4d 91       	ld	r20, X+
    7ea6:	5c 91       	ld	r21, X
    7ea8:	da 01       	movw	r26, r20
    7eaa:	2c 91       	ld	r18, X
    7eac:	d7 01       	movw	r26, r14
    7eae:	d8 96       	adiw	r26, 0x38	; 56
    7eb0:	3c 91       	ld	r19, X
    7eb2:	23 2b       	or	r18, r19
    7eb4:	da 01       	movw	r26, r20
    7eb6:	2c 93       	st	X, r18
    7eb8:	d7 01       	movw	r26, r14
    7eba:	d0 96       	adiw	r26, 0x30	; 48
    7ebc:	4d 91       	ld	r20, X+
    7ebe:	5c 91       	ld	r21, X
    7ec0:	da 01       	movw	r26, r20
    7ec2:	2c 91       	ld	r18, X
    7ec4:	d7 01       	movw	r26, r14
    7ec6:	d7 96       	adiw	r26, 0x37	; 55
    7ec8:	3c 91       	ld	r19, X
    7eca:	23 2b       	or	r18, r19
    7ecc:	da 01       	movw	r26, r20
    7ece:	2c 93       	st	X, r18
    7ed0:	12 b9       	out	0x02, r17	; 2
    7ed2:	d7 01       	movw	r26, r14
    7ed4:	d2 96       	adiw	r26, 0x32	; 50
    7ed6:	4d 91       	ld	r20, X+
    7ed8:	5c 91       	ld	r21, X
    7eda:	da 01       	movw	r26, r20
    7edc:	2c 91       	ld	r18, X
    7ede:	d7 01       	movw	r26, r14
    7ee0:	dc 96       	adiw	r26, 0x3c	; 60
    7ee2:	3c 91       	ld	r19, X
    7ee4:	23 23       	and	r18, r19
    7ee6:	da 01       	movw	r26, r20
    7ee8:	2c 93       	st	X, r18
    7eea:	d7 01       	movw	r26, r14
    7eec:	d2 96       	adiw	r26, 0x32	; 50
    7eee:	4d 91       	ld	r20, X+
    7ef0:	5c 91       	ld	r21, X
    7ef2:	da 01       	movw	r26, r20
    7ef4:	2c 91       	ld	r18, X
    7ef6:	d7 01       	movw	r26, r14
    7ef8:	d8 96       	adiw	r26, 0x38	; 56
    7efa:	3c 91       	ld	r19, X
    7efc:	23 2b       	or	r18, r19
    7efe:	da 01       	movw	r26, r20
    7f00:	2c 93       	st	X, r18
    7f02:	02 b9       	out	0x02, r16	; 2
    7f04:	d7 01       	movw	r26, r14
    7f06:	d2 96       	adiw	r26, 0x32	; 50
    7f08:	4d 91       	ld	r20, X+
    7f0a:	5c 91       	ld	r21, X
    7f0c:	da 01       	movw	r26, r20
    7f0e:	2c 91       	ld	r18, X
    7f10:	d7 01       	movw	r26, r14
    7f12:	dc 96       	adiw	r26, 0x3c	; 60
    7f14:	3c 91       	ld	r19, X
    7f16:	23 23       	and	r18, r19
    7f18:	da 01       	movw	r26, r20
    7f1a:	2c 93       	st	X, r18
    7f1c:	d7 01       	movw	r26, r14
    7f1e:	d2 96       	adiw	r26, 0x32	; 50
    7f20:	4d 91       	ld	r20, X+
    7f22:	5c 91       	ld	r21, X
    7f24:	da 01       	movw	r26, r20
    7f26:	2c 91       	ld	r18, X
    7f28:	d7 01       	movw	r26, r14
    7f2a:	d8 96       	adiw	r26, 0x38	; 56
    7f2c:	3c 91       	ld	r19, X
    7f2e:	23 2b       	or	r18, r19
    7f30:	da 01       	movw	r26, r20
    7f32:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    7f34:	d7 01       	movw	r26, r14
    7f36:	d0 96       	adiw	r26, 0x30	; 48
    7f38:	4d 91       	ld	r20, X+
    7f3a:	5c 91       	ld	r21, X
    7f3c:	da 01       	movw	r26, r20
    7f3e:	2c 91       	ld	r18, X
    7f40:	d7 01       	movw	r26, r14
    7f42:	db 96       	adiw	r26, 0x3b	; 59
    7f44:	3c 91       	ld	r19, X
    7f46:	23 23       	and	r18, r19
    7f48:	da 01       	movw	r26, r20
    7f4a:	2c 93       	st	X, r18
    7f4c:	12 b8       	out	0x02, r1	; 2
    7f4e:	d7 01       	movw	r26, r14
    7f50:	d2 96       	adiw	r26, 0x32	; 50
    7f52:	4d 91       	ld	r20, X+
    7f54:	5c 91       	ld	r21, X
    7f56:	da 01       	movw	r26, r20
    7f58:	2c 91       	ld	r18, X
    7f5a:	d7 01       	movw	r26, r14
    7f5c:	dc 96       	adiw	r26, 0x3c	; 60
    7f5e:	3c 91       	ld	r19, X
    7f60:	23 23       	and	r18, r19
    7f62:	da 01       	movw	r26, r20
    7f64:	2c 93       	st	X, r18
    7f66:	d7 01       	movw	r26, r14
    7f68:	d2 96       	adiw	r26, 0x32	; 50
    7f6a:	4d 91       	ld	r20, X+
    7f6c:	5c 91       	ld	r21, X
    7f6e:	da 01       	movw	r26, r20
    7f70:	2c 91       	ld	r18, X
    7f72:	d7 01       	movw	r26, r14
    7f74:	d8 96       	adiw	r26, 0x38	; 56
    7f76:	3c 91       	ld	r19, X
    7f78:	23 2b       	or	r18, r19
    7f7a:	da 01       	movw	r26, r20
    7f7c:	2c 93       	st	X, r18
    7f7e:	20 e2       	ldi	r18, 0x20	; 32
    7f80:	22 b9       	out	0x02, r18	; 2
    7f82:	d7 01       	movw	r26, r14
    7f84:	d2 96       	adiw	r26, 0x32	; 50
    7f86:	4d 91       	ld	r20, X+
    7f88:	5c 91       	ld	r21, X
    7f8a:	da 01       	movw	r26, r20
    7f8c:	2c 91       	ld	r18, X
    7f8e:	d7 01       	movw	r26, r14
    7f90:	dc 96       	adiw	r26, 0x3c	; 60
    7f92:	3c 91       	ld	r19, X
    7f94:	23 23       	and	r18, r19
    7f96:	da 01       	movw	r26, r20
    7f98:	2c 93       	st	X, r18
    7f9a:	d7 01       	movw	r26, r14
    7f9c:	d2 96       	adiw	r26, 0x32	; 50
    7f9e:	4d 91       	ld	r20, X+
    7fa0:	5c 91       	ld	r21, X
    7fa2:	da 01       	movw	r26, r20
    7fa4:	2c 91       	ld	r18, X
    7fa6:	d7 01       	movw	r26, r14
    7fa8:	d8 96       	adiw	r26, 0x38	; 56
    7faa:	3c 91       	ld	r19, X
    7fac:	23 2b       	or	r18, r19
    7fae:	da 01       	movw	r26, r20
    7fb0:	2c 93       	st	X, r18
    7fb2:	d7 01       	movw	r26, r14
    7fb4:	d0 96       	adiw	r26, 0x30	; 48
    7fb6:	4d 91       	ld	r20, X+
    7fb8:	5c 91       	ld	r21, X
    7fba:	da 01       	movw	r26, r20
    7fbc:	2c 91       	ld	r18, X
    7fbe:	d7 01       	movw	r26, r14
    7fc0:	d7 96       	adiw	r26, 0x37	; 55
    7fc2:	3c 91       	ld	r19, X
    7fc4:	23 2b       	or	r18, r19
    7fc6:	da 01       	movw	r26, r20
    7fc8:	2c 93       	st	X, r18
    7fca:	f2 b9       	out	0x02, r31	; 2
    7fcc:	d7 01       	movw	r26, r14
    7fce:	d2 96       	adiw	r26, 0x32	; 50
    7fd0:	4d 91       	ld	r20, X+
    7fd2:	5c 91       	ld	r21, X
    7fd4:	da 01       	movw	r26, r20
    7fd6:	2c 91       	ld	r18, X
    7fd8:	d7 01       	movw	r26, r14
    7fda:	dc 96       	adiw	r26, 0x3c	; 60
    7fdc:	3c 91       	ld	r19, X
    7fde:	23 23       	and	r18, r19
    7fe0:	da 01       	movw	r26, r20
    7fe2:	2c 93       	st	X, r18
    7fe4:	d7 01       	movw	r26, r14
    7fe6:	d2 96       	adiw	r26, 0x32	; 50
    7fe8:	4d 91       	ld	r20, X+
    7fea:	5c 91       	ld	r21, X
    7fec:	da 01       	movw	r26, r20
    7fee:	2c 91       	ld	r18, X
    7ff0:	d7 01       	movw	r26, r14
    7ff2:	d8 96       	adiw	r26, 0x38	; 56
    7ff4:	3c 91       	ld	r19, X
    7ff6:	23 2b       	or	r18, r19
    7ff8:	da 01       	movw	r26, r20
    7ffa:	2c 93       	st	X, r18
    7ffc:	e2 b9       	out	0x02, r30	; 2
    7ffe:	d7 01       	movw	r26, r14
    8000:	d2 96       	adiw	r26, 0x32	; 50
    8002:	ed 91       	ld	r30, X+
    8004:	fc 91       	ld	r31, X
    8006:	d3 97       	sbiw	r26, 0x33	; 51
    8008:	20 81       	ld	r18, Z
    800a:	dc 96       	adiw	r26, 0x3c	; 60
    800c:	3c 91       	ld	r19, X
    800e:	dc 97       	sbiw	r26, 0x3c	; 60
    8010:	23 23       	and	r18, r19
    8012:	20 83       	st	Z, r18
    8014:	d2 96       	adiw	r26, 0x32	; 50
    8016:	ed 91       	ld	r30, X+
    8018:	fc 91       	ld	r31, X
    801a:	d3 97       	sbiw	r26, 0x33	; 51
    801c:	20 81       	ld	r18, Z
    801e:	d8 96       	adiw	r26, 0x38	; 56
    8020:	3c 91       	ld	r19, X
    8022:	d8 97       	sbiw	r26, 0x38	; 56
    8024:	23 2b       	or	r18, r19
    8026:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    8028:	d0 96       	adiw	r26, 0x30	; 48
    802a:	ed 91       	ld	r30, X+
    802c:	fc 91       	ld	r31, X
    802e:	d1 97       	sbiw	r26, 0x31	; 49
    8030:	20 81       	ld	r18, Z
    8032:	db 96       	adiw	r26, 0x3b	; 59
    8034:	3c 91       	ld	r19, X
    8036:	db 97       	sbiw	r26, 0x3b	; 59
    8038:	23 23       	and	r18, r19
    803a:	20 83       	st	Z, r18
    803c:	12 b8       	out	0x02, r1	; 2
    803e:	d2 96       	adiw	r26, 0x32	; 50
    8040:	ed 91       	ld	r30, X+
    8042:	fc 91       	ld	r31, X
    8044:	d3 97       	sbiw	r26, 0x33	; 51
    8046:	20 81       	ld	r18, Z
    8048:	dc 96       	adiw	r26, 0x3c	; 60
    804a:	3c 91       	ld	r19, X
    804c:	dc 97       	sbiw	r26, 0x3c	; 60
    804e:	23 23       	and	r18, r19
    8050:	20 83       	st	Z, r18
    8052:	d2 96       	adiw	r26, 0x32	; 50
    8054:	ed 91       	ld	r30, X+
    8056:	fc 91       	ld	r31, X
    8058:	d3 97       	sbiw	r26, 0x33	; 51
    805a:	20 81       	ld	r18, Z
    805c:	d8 96       	adiw	r26, 0x38	; 56
    805e:	3c 91       	ld	r19, X
    8060:	d8 97       	sbiw	r26, 0x38	; 56
    8062:	23 2b       	or	r18, r19
    8064:	20 83       	st	Z, r18
    8066:	21 e2       	ldi	r18, 0x21	; 33
    8068:	22 b9       	out	0x02, r18	; 2
    806a:	d2 96       	adiw	r26, 0x32	; 50
    806c:	ed 91       	ld	r30, X+
    806e:	fc 91       	ld	r31, X
    8070:	d3 97       	sbiw	r26, 0x33	; 51
    8072:	20 81       	ld	r18, Z
    8074:	dc 96       	adiw	r26, 0x3c	; 60
    8076:	3c 91       	ld	r19, X
    8078:	dc 97       	sbiw	r26, 0x3c	; 60
    807a:	23 23       	and	r18, r19
    807c:	20 83       	st	Z, r18
    807e:	d2 96       	adiw	r26, 0x32	; 50
    8080:	ed 91       	ld	r30, X+
    8082:	fc 91       	ld	r31, X
    8084:	d3 97       	sbiw	r26, 0x33	; 51
    8086:	20 81       	ld	r18, Z
    8088:	d8 96       	adiw	r26, 0x38	; 56
    808a:	3c 91       	ld	r19, X
    808c:	d8 97       	sbiw	r26, 0x38	; 56
    808e:	23 2b       	or	r18, r19
    8090:	20 83       	st	Z, r18
    8092:	d0 96       	adiw	r26, 0x30	; 48
    8094:	ed 91       	ld	r30, X+
    8096:	fc 91       	ld	r31, X
    8098:	d1 97       	sbiw	r26, 0x31	; 49
    809a:	20 81       	ld	r18, Z
    809c:	d7 96       	adiw	r26, 0x37	; 55
    809e:	3c 91       	ld	r19, X
    80a0:	d7 97       	sbiw	r26, 0x37	; 55
    80a2:	23 2b       	or	r18, r19
    80a4:	20 83       	st	Z, r18
    80a6:	92 b9       	out	0x02, r25	; 2
    80a8:	d2 96       	adiw	r26, 0x32	; 50
    80aa:	ed 91       	ld	r30, X+
    80ac:	fc 91       	ld	r31, X
    80ae:	d3 97       	sbiw	r26, 0x33	; 51
    80b0:	90 81       	ld	r25, Z
    80b2:	dc 96       	adiw	r26, 0x3c	; 60
    80b4:	2c 91       	ld	r18, X
    80b6:	dc 97       	sbiw	r26, 0x3c	; 60
    80b8:	92 23       	and	r25, r18
    80ba:	90 83       	st	Z, r25
    80bc:	d2 96       	adiw	r26, 0x32	; 50
    80be:	ed 91       	ld	r30, X+
    80c0:	fc 91       	ld	r31, X
    80c2:	d3 97       	sbiw	r26, 0x33	; 51
    80c4:	90 81       	ld	r25, Z
    80c6:	d8 96       	adiw	r26, 0x38	; 56
    80c8:	2c 91       	ld	r18, X
    80ca:	d8 97       	sbiw	r26, 0x38	; 56
    80cc:	92 2b       	or	r25, r18
    80ce:	90 83       	st	Z, r25
    80d0:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    80d2:	d2 96       	adiw	r26, 0x32	; 50
    80d4:	ed 91       	ld	r30, X+
    80d6:	fc 91       	ld	r31, X
    80d8:	d3 97       	sbiw	r26, 0x33	; 51
    80da:	80 81       	ld	r24, Z
    80dc:	dc 96       	adiw	r26, 0x3c	; 60
    80de:	9c 91       	ld	r25, X
    80e0:	dc 97       	sbiw	r26, 0x3c	; 60
    80e2:	89 23       	and	r24, r25
    80e4:	80 83       	st	Z, r24
    80e6:	d2 96       	adiw	r26, 0x32	; 50
    80e8:	ed 91       	ld	r30, X+
    80ea:	fc 91       	ld	r31, X
    80ec:	d3 97       	sbiw	r26, 0x33	; 51
    80ee:	80 81       	ld	r24, Z
    80f0:	d8 96       	adiw	r26, 0x38	; 56
    80f2:	9c 91       	ld	r25, X
    80f4:	89 2b       	or	r24, r25
    80f6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    80f8:	d7 01       	movw	r26, r14
    80fa:	9e 96       	adiw	r26, 0x2e	; 46
    80fc:	ed 91       	ld	r30, X+
    80fe:	fc 91       	ld	r31, X
    8100:	9f 97       	sbiw	r26, 0x2f	; 47
    8102:	80 81       	ld	r24, Z
    8104:	d6 96       	adiw	r26, 0x36	; 54
    8106:	9c 91       	ld	r25, X
    8108:	89 2b       	or	r24, r25
    810a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    810c:	28 96       	adiw	r28, 0x08	; 8
    810e:	0f b6       	in	r0, 0x3f	; 63
    8110:	f8 94       	cli
    8112:	de bf       	out	0x3e, r29	; 62
    8114:	0f be       	out	0x3f, r0	; 63
    8116:	cd bf       	out	0x3d, r28	; 61
    8118:	df 91       	pop	r29
    811a:	cf 91       	pop	r28
    811c:	1f 91       	pop	r17
    811e:	0f 91       	pop	r16
    8120:	ff 90       	pop	r15
    8122:	ef 90       	pop	r14
    8124:	df 90       	pop	r13
    8126:	cf 90       	pop	r12
    8128:	bf 90       	pop	r11
    812a:	af 90       	pop	r10
    812c:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    812e:	f7 01       	movw	r30, r14
    8130:	a6 85       	ldd	r26, Z+14	; 0x0e
    8132:	b7 85       	ldd	r27, Z+15	; 0x0f
    8134:	59 01       	movw	r10, r18
    8136:	a0 94       	com	r10
    8138:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    813a:	9d 01       	movw	r18, r26
    813c:	26 1b       	sub	r18, r22
    813e:	37 0b       	sbc	r19, r23
    8140:	21 50       	subi	r18, 0x01	; 1
    8142:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    8144:	60 89       	ldd	r22, Z+16	; 0x10
    8146:	71 89       	ldd	r23, Z+17	; 0x11
    8148:	68 01       	movw	r12, r16
    814a:	c0 94       	com	r12
    814c:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    814e:	8a 01       	movw	r16, r20
    8150:	00 95       	com	r16
    8152:	10 95       	com	r17
    8154:	06 0f       	add	r16, r22
    8156:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    8158:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    815a:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    815c:	a6 01       	movw	r20, r12
    815e:	46 0f       	add	r20, r22
    8160:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    8162:	b5 01       	movw	r22, r10
    8164:	f1 cc       	rjmp	.-1566   	; 0x7b48 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    8166:	f7 01       	movw	r30, r14
    8168:	a0 89       	ldd	r26, Z+16	; 0x10
    816a:	b1 89       	ldd	r27, Z+17	; 0x11
    816c:	69 01       	movw	r12, r18
    816e:	c0 94       	com	r12
    8170:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    8172:	cd 01       	movw	r24, r26
    8174:	86 1b       	sub	r24, r22
    8176:	97 0b       	sbc	r25, r23
    8178:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    817a:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    817c:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    817e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    8180:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    8182:	a6 01       	movw	r20, r12
    8184:	4a 0f       	add	r20, r26
    8186:	5b 1f       	adc	r21, r27
    8188:	e1 cc       	rjmp	.-1598   	; 0x7b4c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    818a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    818c:	fb 01       	movw	r30, r22
    818e:	de cc       	rjmp	.-1604   	; 0x7b4c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    8190:	01 97       	sbiw	r24, 0x01	; 1
    8192:	09 f0       	breq	.+2      	; 0x8196 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    8194:	e5 c1       	rjmp	.+970    	; 0x8560 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    8196:	d0 96       	adiw	r26, 0x30	; 48
    8198:	ed 91       	ld	r30, X+
    819a:	fc 91       	ld	r31, X
    819c:	d1 97       	sbiw	r26, 0x31	; 49
    819e:	80 81       	ld	r24, Z
    81a0:	db 96       	adiw	r26, 0x3b	; 59
    81a2:	9c 91       	ld	r25, X
    81a4:	db 97       	sbiw	r26, 0x3b	; 59
    81a6:	89 23       	and	r24, r25
    81a8:	80 83       	st	Z, r24
    81aa:	82 e0       	ldi	r24, 0x02	; 2
    81ac:	82 b9       	out	0x02, r24	; 2
    81ae:	d2 96       	adiw	r26, 0x32	; 50
    81b0:	ed 91       	ld	r30, X+
    81b2:	fc 91       	ld	r31, X
    81b4:	d3 97       	sbiw	r26, 0x33	; 51
    81b6:	80 81       	ld	r24, Z
    81b8:	dc 96       	adiw	r26, 0x3c	; 60
    81ba:	9c 91       	ld	r25, X
    81bc:	dc 97       	sbiw	r26, 0x3c	; 60
    81be:	89 23       	and	r24, r25
    81c0:	80 83       	st	Z, r24
    81c2:	d2 96       	adiw	r26, 0x32	; 50
    81c4:	ed 91       	ld	r30, X+
    81c6:	fc 91       	ld	r31, X
    81c8:	d3 97       	sbiw	r26, 0x33	; 51
    81ca:	80 81       	ld	r24, Z
    81cc:	d8 96       	adiw	r26, 0x38	; 56
    81ce:	9c 91       	ld	r25, X
    81d0:	d8 97       	sbiw	r26, 0x38	; 56
    81d2:	89 2b       	or	r24, r25
    81d4:	80 83       	st	Z, r24
    81d6:	d0 96       	adiw	r26, 0x30	; 48
    81d8:	ed 91       	ld	r30, X+
    81da:	fc 91       	ld	r31, X
    81dc:	d1 97       	sbiw	r26, 0x31	; 49
    81de:	80 81       	ld	r24, Z
    81e0:	d7 96       	adiw	r26, 0x37	; 55
    81e2:	9c 91       	ld	r25, X
    81e4:	d7 97       	sbiw	r26, 0x37	; 55
    81e6:	89 2b       	or	r24, r25
    81e8:	80 83       	st	Z, r24
    81ea:	72 b9       	out	0x02, r23	; 2
    81ec:	d2 96       	adiw	r26, 0x32	; 50
    81ee:	ed 91       	ld	r30, X+
    81f0:	fc 91       	ld	r31, X
    81f2:	d3 97       	sbiw	r26, 0x33	; 51
    81f4:	80 81       	ld	r24, Z
    81f6:	dc 96       	adiw	r26, 0x3c	; 60
    81f8:	9c 91       	ld	r25, X
    81fa:	dc 97       	sbiw	r26, 0x3c	; 60
    81fc:	89 23       	and	r24, r25
    81fe:	80 83       	st	Z, r24
    8200:	d2 96       	adiw	r26, 0x32	; 50
    8202:	ed 91       	ld	r30, X+
    8204:	fc 91       	ld	r31, X
    8206:	d3 97       	sbiw	r26, 0x33	; 51
    8208:	80 81       	ld	r24, Z
    820a:	d8 96       	adiw	r26, 0x38	; 56
    820c:	9c 91       	ld	r25, X
    820e:	d8 97       	sbiw	r26, 0x38	; 56
    8210:	89 2b       	or	r24, r25
    8212:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    8214:	d0 96       	adiw	r26, 0x30	; 48
    8216:	ed 91       	ld	r30, X+
    8218:	fc 91       	ld	r31, X
    821a:	d1 97       	sbiw	r26, 0x31	; 49
    821c:	80 81       	ld	r24, Z
    821e:	db 96       	adiw	r26, 0x3b	; 59
    8220:	9c 91       	ld	r25, X
    8222:	db 97       	sbiw	r26, 0x3b	; 59
    8224:	89 23       	and	r24, r25
    8226:	80 83       	st	Z, r24
    8228:	83 e0       	ldi	r24, 0x03	; 3
    822a:	82 b9       	out	0x02, r24	; 2
    822c:	d2 96       	adiw	r26, 0x32	; 50
    822e:	ed 91       	ld	r30, X+
    8230:	fc 91       	ld	r31, X
    8232:	d3 97       	sbiw	r26, 0x33	; 51
    8234:	80 81       	ld	r24, Z
    8236:	dc 96       	adiw	r26, 0x3c	; 60
    8238:	9c 91       	ld	r25, X
    823a:	dc 97       	sbiw	r26, 0x3c	; 60
    823c:	89 23       	and	r24, r25
    823e:	80 83       	st	Z, r24
    8240:	d2 96       	adiw	r26, 0x32	; 50
    8242:	ed 91       	ld	r30, X+
    8244:	fc 91       	ld	r31, X
    8246:	d3 97       	sbiw	r26, 0x33	; 51
    8248:	80 81       	ld	r24, Z
    824a:	d8 96       	adiw	r26, 0x38	; 56
    824c:	9c 91       	ld	r25, X
    824e:	d8 97       	sbiw	r26, 0x38	; 56
    8250:	89 2b       	or	r24, r25
    8252:	80 83       	st	Z, r24
    8254:	d0 96       	adiw	r26, 0x30	; 48
    8256:	ed 91       	ld	r30, X+
    8258:	fc 91       	ld	r31, X
    825a:	d1 97       	sbiw	r26, 0x31	; 49
    825c:	80 81       	ld	r24, Z
    825e:	d7 96       	adiw	r26, 0x37	; 55
    8260:	9c 91       	ld	r25, X
    8262:	d7 97       	sbiw	r26, 0x37	; 55
    8264:	89 2b       	or	r24, r25
    8266:	80 83       	st	Z, r24
    8268:	62 b9       	out	0x02, r22	; 2
    826a:	d2 96       	adiw	r26, 0x32	; 50
    826c:	ed 91       	ld	r30, X+
    826e:	fc 91       	ld	r31, X
    8270:	d3 97       	sbiw	r26, 0x33	; 51
    8272:	80 81       	ld	r24, Z
    8274:	dc 96       	adiw	r26, 0x3c	; 60
    8276:	9c 91       	ld	r25, X
    8278:	dc 97       	sbiw	r26, 0x3c	; 60
    827a:	89 23       	and	r24, r25
    827c:	80 83       	st	Z, r24
    827e:	d2 96       	adiw	r26, 0x32	; 50
    8280:	ed 91       	ld	r30, X+
    8282:	fc 91       	ld	r31, X
    8284:	d3 97       	sbiw	r26, 0x33	; 51
    8286:	80 81       	ld	r24, Z
    8288:	d8 96       	adiw	r26, 0x38	; 56
    828a:	9c 91       	ld	r25, X
    828c:	d8 97       	sbiw	r26, 0x38	; 56
    828e:	89 2b       	or	r24, r25
    8290:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    8292:	d0 96       	adiw	r26, 0x30	; 48
    8294:	ed 91       	ld	r30, X+
    8296:	fc 91       	ld	r31, X
    8298:	d1 97       	sbiw	r26, 0x31	; 49
    829a:	80 81       	ld	r24, Z
    829c:	db 96       	adiw	r26, 0x3b	; 59
    829e:	9c 91       	ld	r25, X
    82a0:	db 97       	sbiw	r26, 0x3b	; 59
    82a2:	89 23       	and	r24, r25
    82a4:	80 83       	st	Z, r24
    82a6:	86 e0       	ldi	r24, 0x06	; 6
    82a8:	82 b9       	out	0x02, r24	; 2
    82aa:	d2 96       	adiw	r26, 0x32	; 50
    82ac:	ed 91       	ld	r30, X+
    82ae:	fc 91       	ld	r31, X
    82b0:	d3 97       	sbiw	r26, 0x33	; 51
    82b2:	80 81       	ld	r24, Z
    82b4:	dc 96       	adiw	r26, 0x3c	; 60
    82b6:	9c 91       	ld	r25, X
    82b8:	dc 97       	sbiw	r26, 0x3c	; 60
    82ba:	89 23       	and	r24, r25
    82bc:	80 83       	st	Z, r24
    82be:	d2 96       	adiw	r26, 0x32	; 50
    82c0:	ed 91       	ld	r30, X+
    82c2:	fc 91       	ld	r31, X
    82c4:	d3 97       	sbiw	r26, 0x33	; 51
    82c6:	80 81       	ld	r24, Z
    82c8:	d8 96       	adiw	r26, 0x38	; 56
    82ca:	9c 91       	ld	r25, X
    82cc:	d8 97       	sbiw	r26, 0x38	; 56
    82ce:	89 2b       	or	r24, r25
    82d0:	80 83       	st	Z, r24
    82d2:	d0 96       	adiw	r26, 0x30	; 48
    82d4:	ed 91       	ld	r30, X+
    82d6:	fc 91       	ld	r31, X
    82d8:	d1 97       	sbiw	r26, 0x31	; 49
    82da:	80 81       	ld	r24, Z
    82dc:	d7 96       	adiw	r26, 0x37	; 55
    82de:	9c 91       	ld	r25, X
    82e0:	d7 97       	sbiw	r26, 0x37	; 55
    82e2:	89 2b       	or	r24, r25
    82e4:	80 83       	st	Z, r24
    82e6:	52 b9       	out	0x02, r21	; 2
    82e8:	d2 96       	adiw	r26, 0x32	; 50
    82ea:	ed 91       	ld	r30, X+
    82ec:	fc 91       	ld	r31, X
    82ee:	d3 97       	sbiw	r26, 0x33	; 51
    82f0:	80 81       	ld	r24, Z
    82f2:	dc 96       	adiw	r26, 0x3c	; 60
    82f4:	9c 91       	ld	r25, X
    82f6:	dc 97       	sbiw	r26, 0x3c	; 60
    82f8:	89 23       	and	r24, r25
    82fa:	80 83       	st	Z, r24
    82fc:	d2 96       	adiw	r26, 0x32	; 50
    82fe:	ed 91       	ld	r30, X+
    8300:	fc 91       	ld	r31, X
    8302:	d3 97       	sbiw	r26, 0x33	; 51
    8304:	80 81       	ld	r24, Z
    8306:	d8 96       	adiw	r26, 0x38	; 56
    8308:	9c 91       	ld	r25, X
    830a:	d8 97       	sbiw	r26, 0x38	; 56
    830c:	89 2b       	or	r24, r25
    830e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    8310:	d0 96       	adiw	r26, 0x30	; 48
    8312:	ed 91       	ld	r30, X+
    8314:	fc 91       	ld	r31, X
    8316:	d1 97       	sbiw	r26, 0x31	; 49
    8318:	80 81       	ld	r24, Z
    831a:	db 96       	adiw	r26, 0x3b	; 59
    831c:	9c 91       	ld	r25, X
    831e:	db 97       	sbiw	r26, 0x3b	; 59
    8320:	89 23       	and	r24, r25
    8322:	80 83       	st	Z, r24
    8324:	87 e0       	ldi	r24, 0x07	; 7
    8326:	82 b9       	out	0x02, r24	; 2
    8328:	d2 96       	adiw	r26, 0x32	; 50
    832a:	ed 91       	ld	r30, X+
    832c:	fc 91       	ld	r31, X
    832e:	d3 97       	sbiw	r26, 0x33	; 51
    8330:	80 81       	ld	r24, Z
    8332:	dc 96       	adiw	r26, 0x3c	; 60
    8334:	9c 91       	ld	r25, X
    8336:	dc 97       	sbiw	r26, 0x3c	; 60
    8338:	89 23       	and	r24, r25
    833a:	80 83       	st	Z, r24
    833c:	d2 96       	adiw	r26, 0x32	; 50
    833e:	ed 91       	ld	r30, X+
    8340:	fc 91       	ld	r31, X
    8342:	d3 97       	sbiw	r26, 0x33	; 51
    8344:	80 81       	ld	r24, Z
    8346:	d8 96       	adiw	r26, 0x38	; 56
    8348:	9c 91       	ld	r25, X
    834a:	d8 97       	sbiw	r26, 0x38	; 56
    834c:	89 2b       	or	r24, r25
    834e:	80 83       	st	Z, r24
    8350:	d0 96       	adiw	r26, 0x30	; 48
    8352:	ed 91       	ld	r30, X+
    8354:	fc 91       	ld	r31, X
    8356:	d1 97       	sbiw	r26, 0x31	; 49
    8358:	80 81       	ld	r24, Z
    835a:	d7 96       	adiw	r26, 0x37	; 55
    835c:	9c 91       	ld	r25, X
    835e:	d7 97       	sbiw	r26, 0x37	; 55
    8360:	89 2b       	or	r24, r25
    8362:	80 83       	st	Z, r24
    8364:	42 b9       	out	0x02, r20	; 2
    8366:	d2 96       	adiw	r26, 0x32	; 50
    8368:	ed 91       	ld	r30, X+
    836a:	fc 91       	ld	r31, X
    836c:	d3 97       	sbiw	r26, 0x33	; 51
    836e:	80 81       	ld	r24, Z
    8370:	dc 96       	adiw	r26, 0x3c	; 60
    8372:	9c 91       	ld	r25, X
    8374:	dc 97       	sbiw	r26, 0x3c	; 60
    8376:	89 23       	and	r24, r25
    8378:	80 83       	st	Z, r24
    837a:	d2 96       	adiw	r26, 0x32	; 50
    837c:	ed 91       	ld	r30, X+
    837e:	fc 91       	ld	r31, X
    8380:	d3 97       	sbiw	r26, 0x33	; 51
    8382:	80 81       	ld	r24, Z
    8384:	d8 96       	adiw	r26, 0x38	; 56
    8386:	9c 91       	ld	r25, X
    8388:	d8 97       	sbiw	r26, 0x38	; 56
    838a:	89 2b       	or	r24, r25
    838c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    838e:	d0 96       	adiw	r26, 0x30	; 48
    8390:	ed 91       	ld	r30, X+
    8392:	fc 91       	ld	r31, X
    8394:	d1 97       	sbiw	r26, 0x31	; 49
    8396:	80 81       	ld	r24, Z
    8398:	db 96       	adiw	r26, 0x3b	; 59
    839a:	9c 91       	ld	r25, X
    839c:	db 97       	sbiw	r26, 0x3b	; 59
    839e:	89 23       	and	r24, r25
    83a0:	80 83       	st	Z, r24
    83a2:	84 e0       	ldi	r24, 0x04	; 4
    83a4:	82 b9       	out	0x02, r24	; 2
    83a6:	d2 96       	adiw	r26, 0x32	; 50
    83a8:	ed 91       	ld	r30, X+
    83aa:	fc 91       	ld	r31, X
    83ac:	d3 97       	sbiw	r26, 0x33	; 51
    83ae:	80 81       	ld	r24, Z
    83b0:	dc 96       	adiw	r26, 0x3c	; 60
    83b2:	9c 91       	ld	r25, X
    83b4:	dc 97       	sbiw	r26, 0x3c	; 60
    83b6:	89 23       	and	r24, r25
    83b8:	80 83       	st	Z, r24
    83ba:	d2 96       	adiw	r26, 0x32	; 50
    83bc:	ed 91       	ld	r30, X+
    83be:	fc 91       	ld	r31, X
    83c0:	d3 97       	sbiw	r26, 0x33	; 51
    83c2:	80 81       	ld	r24, Z
    83c4:	d8 96       	adiw	r26, 0x38	; 56
    83c6:	9c 91       	ld	r25, X
    83c8:	d8 97       	sbiw	r26, 0x38	; 56
    83ca:	89 2b       	or	r24, r25
    83cc:	80 83       	st	Z, r24
    83ce:	d0 96       	adiw	r26, 0x30	; 48
    83d0:	ed 91       	ld	r30, X+
    83d2:	fc 91       	ld	r31, X
    83d4:	d1 97       	sbiw	r26, 0x31	; 49
    83d6:	80 81       	ld	r24, Z
    83d8:	d7 96       	adiw	r26, 0x37	; 55
    83da:	9c 91       	ld	r25, X
    83dc:	d7 97       	sbiw	r26, 0x37	; 55
    83de:	89 2b       	or	r24, r25
    83e0:	80 83       	st	Z, r24
    83e2:	32 b9       	out	0x02, r19	; 2
    83e4:	d2 96       	adiw	r26, 0x32	; 50
    83e6:	ed 91       	ld	r30, X+
    83e8:	fc 91       	ld	r31, X
    83ea:	d3 97       	sbiw	r26, 0x33	; 51
    83ec:	80 81       	ld	r24, Z
    83ee:	dc 96       	adiw	r26, 0x3c	; 60
    83f0:	9c 91       	ld	r25, X
    83f2:	dc 97       	sbiw	r26, 0x3c	; 60
    83f4:	89 23       	and	r24, r25
    83f6:	80 83       	st	Z, r24
    83f8:	d2 96       	adiw	r26, 0x32	; 50
    83fa:	ed 91       	ld	r30, X+
    83fc:	fc 91       	ld	r31, X
    83fe:	d3 97       	sbiw	r26, 0x33	; 51
    8400:	80 81       	ld	r24, Z
    8402:	d8 96       	adiw	r26, 0x38	; 56
    8404:	9c 91       	ld	r25, X
    8406:	d8 97       	sbiw	r26, 0x38	; 56
    8408:	89 2b       	or	r24, r25
    840a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    840c:	d0 96       	adiw	r26, 0x30	; 48
    840e:	ed 91       	ld	r30, X+
    8410:	fc 91       	ld	r31, X
    8412:	d1 97       	sbiw	r26, 0x31	; 49
    8414:	80 81       	ld	r24, Z
    8416:	db 96       	adiw	r26, 0x3b	; 59
    8418:	9c 91       	ld	r25, X
    841a:	db 97       	sbiw	r26, 0x3b	; 59
    841c:	89 23       	and	r24, r25
    841e:	80 83       	st	Z, r24
    8420:	85 e0       	ldi	r24, 0x05	; 5
    8422:	82 b9       	out	0x02, r24	; 2
    8424:	d2 96       	adiw	r26, 0x32	; 50
    8426:	ed 91       	ld	r30, X+
    8428:	fc 91       	ld	r31, X
    842a:	d3 97       	sbiw	r26, 0x33	; 51
    842c:	80 81       	ld	r24, Z
    842e:	dc 96       	adiw	r26, 0x3c	; 60
    8430:	9c 91       	ld	r25, X
    8432:	dc 97       	sbiw	r26, 0x3c	; 60
    8434:	89 23       	and	r24, r25
    8436:	80 83       	st	Z, r24
    8438:	d2 96       	adiw	r26, 0x32	; 50
    843a:	ed 91       	ld	r30, X+
    843c:	fc 91       	ld	r31, X
    843e:	d3 97       	sbiw	r26, 0x33	; 51
    8440:	80 81       	ld	r24, Z
    8442:	d8 96       	adiw	r26, 0x38	; 56
    8444:	9c 91       	ld	r25, X
    8446:	d8 97       	sbiw	r26, 0x38	; 56
    8448:	89 2b       	or	r24, r25
    844a:	80 83       	st	Z, r24
    844c:	d0 96       	adiw	r26, 0x30	; 48
    844e:	ed 91       	ld	r30, X+
    8450:	fc 91       	ld	r31, X
    8452:	d1 97       	sbiw	r26, 0x31	; 49
    8454:	80 81       	ld	r24, Z
    8456:	d7 96       	adiw	r26, 0x37	; 55
    8458:	9c 91       	ld	r25, X
    845a:	d7 97       	sbiw	r26, 0x37	; 55
    845c:	89 2b       	or	r24, r25
    845e:	80 83       	st	Z, r24
    8460:	22 b9       	out	0x02, r18	; 2
    8462:	d2 96       	adiw	r26, 0x32	; 50
    8464:	ed 91       	ld	r30, X+
    8466:	fc 91       	ld	r31, X
    8468:	d3 97       	sbiw	r26, 0x33	; 51
    846a:	80 81       	ld	r24, Z
    846c:	dc 96       	adiw	r26, 0x3c	; 60
    846e:	9c 91       	ld	r25, X
    8470:	dc 97       	sbiw	r26, 0x3c	; 60
    8472:	89 23       	and	r24, r25
    8474:	80 83       	st	Z, r24
    8476:	d2 96       	adiw	r26, 0x32	; 50
    8478:	ed 91       	ld	r30, X+
    847a:	fc 91       	ld	r31, X
    847c:	d3 97       	sbiw	r26, 0x33	; 51
    847e:	80 81       	ld	r24, Z
    8480:	d8 96       	adiw	r26, 0x38	; 56
    8482:	9c 91       	ld	r25, X
    8484:	d8 97       	sbiw	r26, 0x38	; 56
    8486:	89 2b       	or	r24, r25
    8488:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    848a:	d0 96       	adiw	r26, 0x30	; 48
    848c:	ed 91       	ld	r30, X+
    848e:	fc 91       	ld	r31, X
    8490:	d1 97       	sbiw	r26, 0x31	; 49
    8492:	80 81       	ld	r24, Z
    8494:	db 96       	adiw	r26, 0x3b	; 59
    8496:	9c 91       	ld	r25, X
    8498:	db 97       	sbiw	r26, 0x3b	; 59
    849a:	89 23       	and	r24, r25
    849c:	80 83       	st	Z, r24
    849e:	88 e0       	ldi	r24, 0x08	; 8
    84a0:	82 b9       	out	0x02, r24	; 2
    84a2:	d2 96       	adiw	r26, 0x32	; 50
    84a4:	ed 91       	ld	r30, X+
    84a6:	fc 91       	ld	r31, X
    84a8:	d3 97       	sbiw	r26, 0x33	; 51
    84aa:	80 81       	ld	r24, Z
    84ac:	dc 96       	adiw	r26, 0x3c	; 60
    84ae:	9c 91       	ld	r25, X
    84b0:	dc 97       	sbiw	r26, 0x3c	; 60
    84b2:	89 23       	and	r24, r25
    84b4:	80 83       	st	Z, r24
    84b6:	d2 96       	adiw	r26, 0x32	; 50
    84b8:	ed 91       	ld	r30, X+
    84ba:	fc 91       	ld	r31, X
    84bc:	d3 97       	sbiw	r26, 0x33	; 51
    84be:	80 81       	ld	r24, Z
    84c0:	d8 96       	adiw	r26, 0x38	; 56
    84c2:	9c 91       	ld	r25, X
    84c4:	d8 97       	sbiw	r26, 0x38	; 56
    84c6:	89 2b       	or	r24, r25
    84c8:	80 83       	st	Z, r24
    84ca:	d0 96       	adiw	r26, 0x30	; 48
    84cc:	ed 91       	ld	r30, X+
    84ce:	fc 91       	ld	r31, X
    84d0:	d1 97       	sbiw	r26, 0x31	; 49
    84d2:	80 81       	ld	r24, Z
    84d4:	d7 96       	adiw	r26, 0x37	; 55
    84d6:	9c 91       	ld	r25, X
    84d8:	d7 97       	sbiw	r26, 0x37	; 55
    84da:	89 2b       	or	r24, r25
    84dc:	80 83       	st	Z, r24
    84de:	12 b9       	out	0x02, r17	; 2
    84e0:	d2 96       	adiw	r26, 0x32	; 50
    84e2:	ed 91       	ld	r30, X+
    84e4:	fc 91       	ld	r31, X
    84e6:	d3 97       	sbiw	r26, 0x33	; 51
    84e8:	80 81       	ld	r24, Z
    84ea:	dc 96       	adiw	r26, 0x3c	; 60
    84ec:	9c 91       	ld	r25, X
    84ee:	dc 97       	sbiw	r26, 0x3c	; 60
    84f0:	89 23       	and	r24, r25
    84f2:	80 83       	st	Z, r24
    84f4:	d2 96       	adiw	r26, 0x32	; 50
    84f6:	ed 91       	ld	r30, X+
    84f8:	fc 91       	ld	r31, X
    84fa:	d3 97       	sbiw	r26, 0x33	; 51
    84fc:	80 81       	ld	r24, Z
    84fe:	d8 96       	adiw	r26, 0x38	; 56
    8500:	9c 91       	ld	r25, X
    8502:	d8 97       	sbiw	r26, 0x38	; 56
    8504:	89 2b       	or	r24, r25
    8506:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    8508:	d0 96       	adiw	r26, 0x30	; 48
    850a:	ed 91       	ld	r30, X+
    850c:	fc 91       	ld	r31, X
    850e:	d1 97       	sbiw	r26, 0x31	; 49
    8510:	80 81       	ld	r24, Z
    8512:	db 96       	adiw	r26, 0x3b	; 59
    8514:	9c 91       	ld	r25, X
    8516:	db 97       	sbiw	r26, 0x3b	; 59
    8518:	89 23       	and	r24, r25
    851a:	80 83       	st	Z, r24
    851c:	89 e0       	ldi	r24, 0x09	; 9
    851e:	82 b9       	out	0x02, r24	; 2
    8520:	d2 96       	adiw	r26, 0x32	; 50
    8522:	ed 91       	ld	r30, X+
    8524:	fc 91       	ld	r31, X
    8526:	d3 97       	sbiw	r26, 0x33	; 51
    8528:	80 81       	ld	r24, Z
    852a:	dc 96       	adiw	r26, 0x3c	; 60
    852c:	9c 91       	ld	r25, X
    852e:	dc 97       	sbiw	r26, 0x3c	; 60
    8530:	89 23       	and	r24, r25
    8532:	80 83       	st	Z, r24
    8534:	d2 96       	adiw	r26, 0x32	; 50
    8536:	ed 91       	ld	r30, X+
    8538:	fc 91       	ld	r31, X
    853a:	d3 97       	sbiw	r26, 0x33	; 51
    853c:	80 81       	ld	r24, Z
    853e:	d8 96       	adiw	r26, 0x38	; 56
    8540:	9c 91       	ld	r25, X
    8542:	d8 97       	sbiw	r26, 0x38	; 56
    8544:	89 2b       	or	r24, r25
    8546:	80 83       	st	Z, r24
    8548:	d0 96       	adiw	r26, 0x30	; 48
    854a:	ed 91       	ld	r30, X+
    854c:	fc 91       	ld	r31, X
    854e:	d1 97       	sbiw	r26, 0x31	; 49
    8550:	80 81       	ld	r24, Z
    8552:	d7 96       	adiw	r26, 0x37	; 55
    8554:	9c 91       	ld	r25, X
    8556:	d7 97       	sbiw	r26, 0x37	; 55
    8558:	89 2b       	or	r24, r25
    855a:	80 83       	st	Z, r24
    855c:	02 b9       	out	0x02, r16	; 2
    855e:	b9 cd       	rjmp	.-1166   	; 0x80d2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    8560:	7d 83       	std	Y+5, r23	; 0x05
    8562:	6e 83       	std	Y+6, r22	; 0x06
    8564:	3f 83       	std	Y+7, r19	; 0x07
    8566:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    8568:	59 83       	std	Y+1, r21	; 0x01
    856a:	4a 83       	std	Y+2, r20	; 0x02
    856c:	1b 83       	std	Y+3, r17	; 0x03
    856e:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    8570:	f7 01       	movw	r30, r14
    8572:	64 8d       	ldd	r22, Z+28	; 0x1c
    8574:	75 8d       	ldd	r23, Z+29	; 0x1d
    8576:	24 e0       	ldi	r18, 0x04	; 4
    8578:	ae 01       	movw	r20, r28
    857a:	4b 5f       	subi	r20, 0xFB	; 251
    857c:	5f 4f       	sbci	r21, 0xFF	; 255
    857e:	c7 01       	movw	r24, r14
    8580:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    8584:	d7 01       	movw	r26, r14
    8586:	5e 96       	adiw	r26, 0x1e	; 30
    8588:	6d 91       	ld	r22, X+
    858a:	7c 91       	ld	r23, X
    858c:	24 e0       	ldi	r18, 0x04	; 4
    858e:	ae 01       	movw	r20, r28
    8590:	4f 5f       	subi	r20, 0xFF	; 255
    8592:	5f 4f       	sbci	r21, 0xFF	; 255
    8594:	c7 01       	movw	r24, r14
    8596:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    859a:	ae cd       	rjmp	.-1188   	; 0x80f8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

0000859c <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    859c:	af 92       	push	r10
    859e:	bf 92       	push	r11
    85a0:	cf 92       	push	r12
    85a2:	df 92       	push	r13
    85a4:	ff 92       	push	r15
    85a6:	0f 93       	push	r16
    85a8:	1f 93       	push	r17
    85aa:	cf 93       	push	r28
    85ac:	df 93       	push	r29
    85ae:	cd b7       	in	r28, 0x3d	; 61
    85b0:	de b7       	in	r29, 0x3e	; 62
    85b2:	a0 97       	sbiw	r28, 0x20	; 32
    85b4:	0f b6       	in	r0, 0x3f	; 63
    85b6:	f8 94       	cli
    85b8:	de bf       	out	0x3e, r29	; 62
    85ba:	0f be       	out	0x3f, r0	; 63
    85bc:	cd bf       	out	0x3d, r28	; 61
    85be:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    85c0:	a8 2e       	mov	r10, r24
    85c2:	b1 2c       	mov	r11, r1
    85c4:	65 01       	movw	r12, r10
    85c6:	cc 0c       	add	r12, r12
    85c8:	dd 1c       	adc	r13, r13
    85ca:	cc 0c       	add	r12, r12
    85cc:	dd 1c       	adc	r13, r13
    85ce:	f6 01       	movw	r30, r12
    85d0:	ee 52       	subi	r30, 0x2E	; 46
    85d2:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    85d4:	60 81       	ld	r22, Z
    85d6:	71 81       	ldd	r23, Z+1	; 0x01
    85d8:	82 81       	ldd	r24, Z+2	; 0x02
    85da:	93 81       	ldd	r25, Z+3	; 0x03
    85dc:	8e 01       	movw	r16, r28
    85de:	0f 5f       	subi	r16, 0xFF	; 255
    85e0:	1f 4f       	sbci	r17, 0xFF	; 255
    85e2:	22 e0       	ldi	r18, 0x02	; 2
    85e4:	47 e0       	ldi	r20, 0x07	; 7
    85e6:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    85ea:	98 01       	movw	r18, r16
    85ec:	43 e8       	ldi	r20, 0x83	; 131
    85ee:	56 e0       	ldi	r21, 0x06	; 6
    85f0:	6f 2d       	mov	r22, r15
    85f2:	82 e5       	ldi	r24, 0x52	; 82
    85f4:	93 e0       	ldi	r25, 0x03	; 3
    85f6:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_i():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    85fa:	f6 01       	movw	r30, r12
    85fc:	ea 51       	subi	r30, 0x1A	; 26
    85fe:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3942
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    8600:	60 81       	ld	r22, Z
    8602:	71 81       	ldd	r23, Z+1	; 0x01
    8604:	82 81       	ldd	r24, Z+2	; 0x02
    8606:	93 81       	ldd	r25, Z+3	; 0x03
    8608:	22 e0       	ldi	r18, 0x02	; 2
    860a:	47 e0       	ldi	r20, 0x07	; 7
    860c:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3943
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    8610:	98 01       	movw	r18, r16
    8612:	4a e8       	ldi	r20, 0x8A	; 138
    8614:	56 e0       	ldi	r21, 0x06	; 6
    8616:	6f 2d       	mov	r22, r15
    8618:	82 e5       	ldi	r24, 0x52	; 82
    861a:	93 e0       	ldi	r25, 0x03	; 3
    861c:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_d():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    8620:	f6 01       	movw	r30, r12
    8622:	e6 50       	subi	r30, 0x06	; 6
    8624:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3944
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    8626:	60 81       	ld	r22, Z
    8628:	71 81       	ldd	r23, Z+1	; 0x01
    862a:	82 81       	ldd	r24, Z+2	; 0x02
    862c:	93 81       	ldd	r25, Z+3	; 0x03
    862e:	22 e0       	ldi	r18, 0x02	; 2
    8630:	47 e0       	ldi	r20, 0x07	; 7
    8632:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3945
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    8636:	98 01       	movw	r18, r16
    8638:	41 e9       	ldi	r20, 0x91	; 145
    863a:	56 e0       	ldi	r21, 0x06	; 6
    863c:	6f 2d       	mov	r22, r15
    863e:	82 e5       	ldi	r24, 0x52	; 82
    8640:	93 e0       	ldi	r25, 0x03	; 3
    8642:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    8646:	f5 01       	movw	r30, r10
    8648:	e2 5f       	subi	r30, 0xF2	; 242
    864a:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3946
  itoa(thermostat_get_pid_time(idx), payload, 10);
    864c:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    864e:	4a e0       	ldi	r20, 0x0A	; 10
    8650:	b8 01       	movw	r22, r16
    8652:	90 e0       	ldi	r25, 0x00	; 0
    8654:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3947
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    8658:	98 01       	movw	r18, r16
    865a:	48 e9       	ldi	r20, 0x98	; 152
    865c:	56 e0       	ldi	r21, 0x06	; 6
    865e:	6f 2d       	mov	r22, r15
    8660:	82 e5       	ldi	r24, 0x52	; 82
    8662:	93 e0       	ldi	r25, 0x03	; 3
    8664:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
}
    8668:	a0 96       	adiw	r28, 0x20	; 32
    866a:	0f b6       	in	r0, 0x3f	; 63
    866c:	f8 94       	cli
    866e:	de bf       	out	0x3e, r29	; 62
    8670:	0f be       	out	0x3f, r0	; 63
    8672:	cd bf       	out	0x3d, r28	; 61
    8674:	df 91       	pop	r29
    8676:	cf 91       	pop	r28
    8678:	1f 91       	pop	r17
    867a:	0f 91       	pop	r16
    867c:	ff 90       	pop	r15
    867e:	df 90       	pop	r13
    8680:	cf 90       	pop	r12
    8682:	bf 90       	pop	r11
    8684:	af 90       	pop	r10
    8686:	08 95       	ret

00008688 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1757




bool draw_menu(bool redraw)
{
    8688:	2f 92       	push	r2
    868a:	3f 92       	push	r3
    868c:	4f 92       	push	r4
    868e:	5f 92       	push	r5
    8690:	6f 92       	push	r6
    8692:	7f 92       	push	r7
    8694:	8f 92       	push	r8
    8696:	9f 92       	push	r9
    8698:	af 92       	push	r10
    869a:	bf 92       	push	r11
    869c:	cf 92       	push	r12
    869e:	df 92       	push	r13
    86a0:	ef 92       	push	r14
    86a2:	ff 92       	push	r15
    86a4:	0f 93       	push	r16
    86a6:	1f 93       	push	r17
    86a8:	cf 93       	push	r28
    86aa:	df 93       	push	r29
    86ac:	cd b7       	in	r28, 0x3d	; 61
    86ae:	de b7       	in	r29, 0x3e	; 62
    86b0:	c3 5e       	subi	r28, 0xE3	; 227
    86b2:	d1 09       	sbc	r29, r1
    86b4:	0f b6       	in	r0, 0x3f	; 63
    86b6:	f8 94       	cli
    86b8:	de bf       	out	0x3e, r29	; 62
    86ba:	0f be       	out	0x3f, r0	; 63
    86bc:	cd bf       	out	0x3d, r28	; 61
    86be:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
    86c0:	ce 01       	movw	r24, r28
    86c2:	8d 54       	subi	r24, 0x4D	; 77
    86c4:	9f 4f       	sbci	r25, 0xFF	; 255
    86c6:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <MenuHistoryGetMenu(unsigned char*)>
    86ca:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    86cc:	e0 91 0e 0e 	lds	r30, 0x0E0E	; 0x800e0e <my_touch+0x17>
    86d0:	f0 91 0f 0e 	lds	r31, 0x0E0F	; 0x800e0f <my_touch+0x18>
    86d4:	80 81       	ld	r24, Z
    86d6:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <my_touch+0x1d>
    86da:	89 23       	and	r24, r25
    86dc:	09 f0       	breq	.+2      	; 0x86e0 <draw_menu(bool)+0x58>
    86de:	76 c2       	rjmp	.+1260   	; 0x8bcc <draw_menu(bool)+0x544>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    86e0:	80 ed       	ldi	r24, 0xD0	; 208
    86e2:	0e 94 30 8c 	call	0x11860	; 0x11860 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    86e6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    86e8:	80 e9       	ldi	r24, 0x90	; 144
    86ea:	0e 94 30 8c 	call	0x11860	; 0x11860 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    86ee:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    86f0:	80 ed       	ldi	r24, 0xD0	; 208
    86f2:	0e 94 30 8c 	call	0x11860	; 0x11860 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    86f6:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    86f8:	80 e9       	ldi	r24, 0x90	; 144
    86fa:	0e 94 30 8c 	call	0x11860	; 0x11860 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    86fe:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    8700:	e8 14       	cp	r14, r8
    8702:	f9 04       	cpc	r15, r9
    8704:	48 f0       	brcs	.+18     	; 0x8718 <draw_menu(bool)+0x90>
    8706:	c4 01       	movw	r24, r8
    8708:	c2 96       	adiw	r24, 0x32	; 50
    870a:	e8 16       	cp	r14, r24
    870c:	f9 06       	cpc	r15, r25
    870e:	50 f0       	brcs	.+20     	; 0x8724 <draw_menu(bool)+0x9c>
    8710:	8e 14       	cp	r8, r14
    8712:	9f 04       	cpc	r9, r15
    8714:	08 f4       	brcc	.+2      	; 0x8718 <draw_menu(bool)+0x90>
    8716:	52 c0       	rjmp	.+164    	; 0x87bc <draw_menu(bool)+0x134>
    8718:	c7 01       	movw	r24, r14
    871a:	c2 96       	adiw	r24, 0x32	; 50
    871c:	88 16       	cp	r8, r24
    871e:	99 06       	cpc	r9, r25
    8720:	08 f0       	brcs	.+2      	; 0x8724 <draw_menu(bool)+0x9c>
    8722:	4c c0       	rjmp	.+152    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    8724:	0c 15       	cp	r16, r12
    8726:	1d 05       	cpc	r17, r13
    8728:	48 f0       	brcs	.+18     	; 0x873c <draw_menu(bool)+0xb4>
    872a:	c6 01       	movw	r24, r12
    872c:	c2 96       	adiw	r24, 0x32	; 50
    872e:	08 17       	cp	r16, r24
    8730:	19 07       	cpc	r17, r25
    8732:	48 f0       	brcs	.+18     	; 0x8746 <draw_menu(bool)+0xbe>
    8734:	c0 16       	cp	r12, r16
    8736:	d1 06       	cpc	r13, r17
    8738:	08 f4       	brcc	.+2      	; 0x873c <draw_menu(bool)+0xb4>
    873a:	40 c0       	rjmp	.+128    	; 0x87bc <draw_menu(bool)+0x134>
    873c:	c8 01       	movw	r24, r16
    873e:	c2 96       	adiw	r24, 0x32	; 50
    8740:	c8 16       	cp	r12, r24
    8742:	d9 06       	cpc	r13, r25
    8744:	d8 f5       	brcc	.+118    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    8746:	e8 0c       	add	r14, r8
    8748:	f9 1c       	adc	r15, r9
    874a:	97 01       	movw	r18, r14
    874c:	36 95       	lsr	r19
    874e:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    8750:	a4 e5       	ldi	r26, 0x54	; 84
    8752:	b3 e0       	ldi	r27, 0x03	; 3
    8754:	0e 94 bd bb 	call	0x1777a	; 0x1777a <__umulhisi3>
    8758:	20 e1       	ldi	r18, 0x10	; 16
    875a:	22 2e       	mov	r2, r18
    875c:	27 e2       	ldi	r18, 0x27	; 39
    875e:	32 2e       	mov	r3, r18
    8760:	41 2c       	mov	r4, r1
    8762:	51 2c       	mov	r5, r1
    8764:	a2 01       	movw	r20, r4
    8766:	91 01       	movw	r18, r2
    8768:	0e 94 93 bb 	call	0x17726	; 0x17726 <__divmodsi4>
    876c:	79 01       	movw	r14, r18
    876e:	6e e0       	ldi	r22, 0x0E	; 14
    8770:	e6 1a       	sub	r14, r22
    8772:	f1 08       	sbc	r15, r1
    8774:	f0 92 fc 0d 	sts	0x0DFC, r15	; 0x800dfc <my_touch+0x5>
    8778:	e0 92 fb 0d 	sts	0x0DFB, r14	; 0x800dfb <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    877c:	0c 0d       	add	r16, r12
    877e:	1d 1d       	adc	r17, r13
    8780:	98 01       	movw	r18, r16
    8782:	36 95       	lsr	r19
    8784:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    8786:	a4 e0       	ldi	r26, 0x04	; 4
    8788:	b5 e0       	ldi	r27, 0x05	; 5
    878a:	0e 94 bd bb 	call	0x1777a	; 0x1777a <__umulhisi3>
    878e:	a2 01       	movw	r20, r4
    8790:	91 01       	movw	r18, r2
    8792:	0e 94 93 bb 	call	0x17726	; 0x17726 <__divmodsi4>
    8796:	2e 51       	subi	r18, 0x1E	; 30
    8798:	31 09       	sbc	r19, r1
    879a:	30 93 fe 0d 	sts	0x0DFE, r19	; 0x800dfe <my_touch+0x7>
    879e:	20 93 fd 0d 	sts	0x0DFD, r18	; 0x800dfd <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    87a2:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <my_touch+0xd>
    87a6:	81 30       	cpi	r24, 0x01	; 1
    87a8:	09 f4       	brne	.+2      	; 0x87ac <draw_menu(bool)+0x124>
    87aa:	c6 c1       	rjmp	.+908    	; 0x8b38 <draw_menu(bool)+0x4b0>
    87ac:	08 f4       	brcc	.+2      	; 0x87b0 <draw_menu(bool)+0x128>
    87ae:	93 c1       	rjmp	.+806    	; 0x8ad6 <draw_menu(bool)+0x44e>
    87b0:	82 30       	cpi	r24, 0x02	; 2
    87b2:	09 f4       	brne	.+2      	; 0x87b6 <draw_menu(bool)+0x12e>
    87b4:	f2 c1       	rjmp	.+996    	; 0x8b9a <draw_menu(bool)+0x512>
    87b6:	83 30       	cpi	r24, 0x03	; 3
    87b8:	09 f4       	brne	.+2      	; 0x87bc <draw_menu(bool)+0x134>
    87ba:	fb c1       	rjmp	.+1014   	; 0x8bb2 <draw_menu(bool)+0x52a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    87bc:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <my_touch+0xc>
    87c0:	87 fd       	sbrc	r24, 7
    87c2:	13 c0       	rjmp	.+38     	; 0x87ea <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    87c4:	80 ec       	ldi	r24, 0xC0	; 192
    87c6:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    87ca:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <my_touch+0x4>
    87ce:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <my_touch+0x5>
    87d2:	90 93 f8 0d 	sts	0x0DF8, r25	; 0x800df8 <my_touch+0x1>
    87d6:	80 93 f7 0d 	sts	0x0DF7, r24	; 0x800df7 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    87da:	80 91 fd 0d 	lds	r24, 0x0DFD	; 0x800dfd <my_touch+0x6>
    87de:	90 91 fe 0d 	lds	r25, 0x0DFE	; 0x800dfe <my_touch+0x7>
    87e2:	90 93 fa 0d 	sts	0x0DFA, r25	; 0x800dfa <my_touch+0x3>
    87e6:	80 93 f9 0d 	sts	0x0DF9, r24	; 0x800df9 <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1795

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    87ea:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <my_touch+0xc>
    87ee:	87 ff       	sbrs	r24, 7
    87f0:	08 c2       	rjmp	.+1040   	; 0x8c02 <draw_menu(bool)+0x57a>
    87f2:	b1 10       	cpse	r11, r1
    87f4:	06 c2       	rjmp	.+1036   	; 0x8c02 <draw_menu(bool)+0x57a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1797
  {
    click_x = my_touch.x;
    87f6:	80 91 fb 0d 	lds	r24, 0x0DFB	; 0x800dfb <my_touch+0x4>
    87fa:	90 91 fc 0d 	lds	r25, 0x0DFC	; 0x800dfc <my_touch+0x5>
    87fe:	cc 53       	subi	r28, 0x3C	; 60
    8800:	df 4f       	sbci	r29, 0xFF	; 255
    8802:	99 83       	std	Y+1, r25	; 0x01
    8804:	88 83       	st	Y, r24
    8806:	c4 5c       	subi	r28, 0xC4	; 196
    8808:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
    click_y = my_touch.y;
    880a:	e0 91 fd 0d 	lds	r30, 0x0DFD	; 0x800dfd <my_touch+0x6>
    880e:	f0 91 fe 0d 	lds	r31, 0x0DFE	; 0x800dfe <my_touch+0x7>
    8812:	ca 53       	subi	r28, 0x3A	; 58
    8814:	df 4f       	sbci	r29, 0xFF	; 255
    8816:	f9 83       	std	Y+1, r31	; 0x01
    8818:	e8 83       	st	Y, r30
    881a:	c6 5c       	subi	r28, 0xC6	; 198
    881c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
  }

  global_x = pgm_read_word(&current->x);
    881e:	83 01       	movw	r16, r6
    8820:	0a 53       	subi	r16, 0x3A	; 58
    8822:	1d 4f       	sbci	r17, 0xFD	; 253
    8824:	f8 01       	movw	r30, r16
    8826:	25 91       	lpm	r18, Z+
    8828:	34 91       	lpm	r19, Z
    882a:	c8 54       	subi	r28, 0x48	; 72
    882c:	df 4f       	sbci	r29, 0xFF	; 255
    882e:	39 83       	std	Y+1, r19	; 0x01
    8830:	28 83       	st	Y, r18
    8832:	c8 5b       	subi	r28, 0xB8	; 184
    8834:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
  global_y = pgm_read_word(&current->y);
    8836:	73 01       	movw	r14, r6
    8838:	38 e3       	ldi	r19, 0x38	; 56
    883a:	e3 1a       	sub	r14, r19
    883c:	3d ef       	ldi	r19, 0xFD	; 253
    883e:	f3 0a       	sbc	r15, r19
    8840:	f7 01       	movw	r30, r14
    8842:	45 91       	lpm	r20, Z+
    8844:	54 91       	lpm	r21, Z
    8846:	c6 54       	subi	r28, 0x46	; 70
    8848:	df 4f       	sbci	r29, 0xFF	; 255
    884a:	59 83       	std	Y+1, r21	; 0x01
    884c:	48 83       	st	Y, r20
    884e:	ca 5b       	subi	r28, 0xBA	; 186
    8850:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1805


  rfnt = pgm_read_word(&current->redraw_class_0);
    8852:	f3 01       	movw	r30, r6
    8854:	ee 52       	subi	r30, 0x2E	; 46
    8856:	fd 4f       	sbci	r31, 0xFD	; 253
    8858:	25 91       	lpm	r18, Z+
    885a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1806
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    885c:	63 01       	movw	r12, r6
    885e:	5b e3       	ldi	r21, 0x3B	; 59
    8860:	c5 1a       	sub	r12, r21
    8862:	5d ef       	ldi	r21, 0xFD	; 253
    8864:	d5 0a       	sbc	r13, r21
    8866:	f6 01       	movw	r30, r12
    8868:	84 91       	lpm	r24, Z
    886a:	cd 54       	subi	r28, 0x4D	; 77
    886c:	df 4f       	sbci	r29, 0xFF	; 255
    886e:	68 81       	ld	r22, Y
    8870:	c3 5b       	subi	r28, 0xB3	; 179
    8872:	d0 40       	sbci	r29, 0x00	; 0
    8874:	70 e0       	ldi	r23, 0x00	; 0
    8876:	4f ef       	ldi	r20, 0xFF	; 255
    8878:	90 e0       	ldi	r25, 0x00	; 0
    887a:	f9 01       	movw	r30, r18
    887c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1808
  if (rdr == 0)
    cbi(redraw_class, 0);
    887e:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1807
  global_y = pgm_read_word(&current->y);


  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    8880:	88 23       	and	r24, r24
    8882:	11 f0       	breq	.+4      	; 0x8888 <draw_menu(bool)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1810
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    8884:	aa 24       	eor	r10, r10
    8886:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    8888:	f3 01       	movw	r30, r6
    888a:	ec 52       	subi	r30, 0x2C	; 44
    888c:	fd 4f       	sbci	r31, 0xFD	; 253
    888e:	25 91       	lpm	r18, Z+
    8890:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    8892:	f6 01       	movw	r30, r12
    8894:	84 91       	lpm	r24, Z
    8896:	cd 54       	subi	r28, 0x4D	; 77
    8898:	df 4f       	sbci	r29, 0xFF	; 255
    889a:	68 81       	ld	r22, Y
    889c:	c3 5b       	subi	r28, 0xB3	; 179
    889e:	d0 40       	sbci	r29, 0x00	; 0
    88a0:	70 e0       	ldi	r23, 0x00	; 0
    88a2:	4f ef       	ldi	r20, 0xFF	; 255
    88a4:	90 e0       	ldi	r25, 0x00	; 0
    88a6:	f9 01       	movw	r30, r18
    88a8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1814
  if (rdr == 0)
    88aa:	81 11       	cpse	r24, r1
    88ac:	b7 c1       	rjmp	.+878    	; 0x8c1c <draw_menu(bool)+0x594>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
    cbi(redraw_class, 1);
    88ae:	e8 94       	clt
    88b0:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    88b2:	f3 01       	movw	r30, r6
    88b4:	ea 52       	subi	r30, 0x2A	; 42
    88b6:	fd 4f       	sbci	r31, 0xFD	; 253
    88b8:	25 91       	lpm	r18, Z+
    88ba:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1820
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    88bc:	f6 01       	movw	r30, r12
    88be:	84 91       	lpm	r24, Z
    88c0:	cd 54       	subi	r28, 0x4D	; 77
    88c2:	df 4f       	sbci	r29, 0xFF	; 255
    88c4:	68 81       	ld	r22, Y
    88c6:	c3 5b       	subi	r28, 0xB3	; 179
    88c8:	d0 40       	sbci	r29, 0x00	; 0
    88ca:	70 e0       	ldi	r23, 0x00	; 0
    88cc:	4f ef       	ldi	r20, 0xFF	; 255
    88ce:	90 e0       	ldi	r25, 0x00	; 0
    88d0:	f9 01       	movw	r30, r18
    88d2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1821
  if (rdr == 0)
    88d4:	81 11       	cpse	r24, r1
    88d6:	a5 c1       	rjmp	.+842    	; 0x8c22 <draw_menu(bool)+0x59a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
    cbi(redraw_class, 2);
    88d8:	8a 2d       	mov	r24, r10
    88da:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1826
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    88dc:	b1 10       	cpse	r11, r1
    88de:	a4 c1       	rjmp	.+840    	; 0x8c28 <draw_menu(bool)+0x5a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
    cbi(redraw_class, 3);
    88e0:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
  else
    sbi(redraw_class, 3);
    88e2:	cf 52       	subi	r28, 0x2F	; 47
    88e4:	df 4f       	sbci	r29, 0xFF	; 255
    88e6:	88 83       	st	Y, r24
    88e8:	c1 5d       	subi	r28, 0xD1	; 209
    88ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    88ec:	f3 01       	movw	r30, r6
    88ee:	ef 52       	subi	r30, 0x2F	; 47
    88f0:	fd 4f       	sbci	r31, 0xFD	; 253
    88f2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
  if (enable_redraw(rdr, redraw_class) == true)
    88f4:	cf 52       	subi	r28, 0x2F	; 47
    88f6:	df 4f       	sbci	r29, 0xFF	; 255
    88f8:	68 81       	ld	r22, Y
    88fa:	c1 5d       	subi	r28, 0xD1	; 209
    88fc:	d0 40       	sbci	r29, 0x00	; 0
    88fe:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    8902:	88 23       	and	r24, r24
    8904:	d9 f0       	breq	.+54     	; 0x893c <draw_menu(bool)+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1835
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    8906:	f3 01       	movw	r30, r6
    8908:	65 91       	lpm	r22, Z+
    890a:	74 91       	lpm	r23, Z
    890c:	ce 01       	movw	r24, r28
    890e:	01 96       	adiw	r24, 0x01	; 1
    8910:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    8914:	f7 01       	movw	r30, r14
    8916:	45 91       	lpm	r20, Z+
    8918:	54 91       	lpm	r21, Z
    891a:	f8 01       	movw	r30, r16
    891c:	65 91       	lpm	r22, Z+
    891e:	74 91       	lpm	r23, Z
    8920:	4b 5f       	subi	r20, 0xFB	; 251
    8922:	5f 4f       	sbci	r21, 0xFF	; 255
    8924:	6b 5f       	subi	r22, 0xFB	; 251
    8926:	7f 4f       	sbci	r23, 0xFF	; 255
    8928:	ee 24       	eor	r14, r14
    892a:	ea 94       	dec	r14
    892c:	fe 2c       	mov	r15, r14
    892e:	10 e0       	ldi	r17, 0x00	; 0
    8930:	00 e0       	ldi	r16, 0x00	; 0
    8932:	22 e0       	ldi	r18, 0x02	; 2
    8934:	ce 01       	movw	r24, r28
    8936:	01 96       	adiw	r24, 0x01	; 1
    8938:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1791
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    893c:	91 2c       	mov	r9, r1
    893e:	c4 53       	subi	r28, 0x34	; 52
    8940:	df 4f       	sbci	r29, 0xFF	; 255
    8942:	18 82       	st	Y, r1
    8944:	cc 5c       	subi	r28, 0xCC	; 204
    8946:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1840
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    8948:	13 01       	movw	r2, r6
    894a:	f3 e4       	ldi	r31, 0x43	; 67
    894c:	2f 1a       	sub	r2, r31
    894e:	fd ef       	ldi	r31, 0xFD	; 253
    8950:	3f 0a       	sbc	r3, r31
    8952:	f1 01       	movw	r30, r2
    8954:	84 91       	lpm	r24, Z
    8956:	98 16       	cp	r9, r24
    8958:	08 f0       	brcs	.+2      	; 0x895c <draw_menu(bool)+0x2d4>
    895a:	68 c1       	rjmp	.+720    	; 0x8c2c <draw_menu(bool)+0x5a4>
    895c:	f1 e1       	ldi	r31, 0x11	; 17
    895e:	9f 9e       	mul	r9, r31
    8960:	20 01       	movw	r4, r0
    8962:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
  {
    button_1 = &current->button_1[idx];
    //rfnt = pgm_read_word(&button_1->enable_show);
    //active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, -1);
    //if (active == 0) continue;
    rdr = pgm_read_byte(&button_1->redraw_class);
    8964:	f2 01       	movw	r30, r4
    8966:	70 96       	adiw	r30, 0x10	; 16
    8968:	e6 0d       	add	r30, r6
    896a:	f7 1d       	adc	r31, r7
    896c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
    if (enable_redraw(rdr, redraw_class) == true)
    896e:	cf 52       	subi	r28, 0x2F	; 47
    8970:	df 4f       	sbci	r29, 0xFF	; 255
    8972:	68 81       	ld	r22, Y
    8974:	c1 5d       	subi	r28, 0xD1	; 209
    8976:	d0 40       	sbci	r29, 0x00	; 0
    8978:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    897c:	88 23       	and	r24, r24
    897e:	09 f4       	brne	.+2      	; 0x8982 <draw_menu(bool)+0x2fa>
    8980:	43 c0       	rjmp	.+134    	; 0x8a08 <draw_menu(bool)+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    8982:	f2 01       	movw	r30, r4
    8984:	32 96       	adiw	r30, 0x02	; 2
    8986:	e6 0d       	add	r30, r6
    8988:	f7 1d       	adc	r31, r7
    898a:	65 91       	lpm	r22, Z+
    898c:	74 91       	lpm	r23, Z
    898e:	ce 01       	movw	r24, r28
    8990:	8f 57       	subi	r24, 0x7F	; 127
    8992:	9f 4f       	sbci	r25, 0xFF	; 255
    8994:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
      str1[0] = 0;
    8998:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    899a:	f2 01       	movw	r30, r4
    899c:	3c 96       	adiw	r30, 0x0c	; 12
    899e:	e6 0d       	add	r30, r6
    89a0:	f7 1d       	adc	r31, r7
    89a2:	e4 90       	lpm	r14, Z
    89a4:	04 91       	lpm	r16, Z
    89a6:	f2 01       	movw	r30, r4
    89a8:	3a 96       	adiw	r30, 0x0a	; 10
    89aa:	e6 0d       	add	r30, r6
    89ac:	f7 1d       	adc	r31, r7
    89ae:	25 91       	lpm	r18, Z+
    89b0:	34 91       	lpm	r19, Z
    89b2:	f2 01       	movw	r30, r4
    89b4:	38 96       	adiw	r30, 0x08	; 8
    89b6:	e6 0d       	add	r30, r6
    89b8:	f7 1d       	adc	r31, r7
    89ba:	45 91       	lpm	r20, Z+
    89bc:	54 91       	lpm	r21, Z
    89be:	f2 01       	movw	r30, r4
    89c0:	36 96       	adiw	r30, 0x06	; 6
    89c2:	e6 0d       	add	r30, r6
    89c4:	f7 1d       	adc	r31, r7
    89c6:	65 91       	lpm	r22, Z+
    89c8:	74 91       	lpm	r23, Z
    89ca:	f2 01       	movw	r30, r4
    89cc:	34 96       	adiw	r30, 0x04	; 4
    89ce:	e6 0d       	add	r30, r6
    89d0:	f7 1d       	adc	r31, r7
    89d2:	85 91       	lpm	r24, Z+
    89d4:	94 91       	lpm	r25, Z
    89d6:	c6 54       	subi	r28, 0x46	; 70
    89d8:	df 4f       	sbci	r29, 0xFF	; 255
    89da:	e8 81       	ld	r30, Y
    89dc:	f9 81       	ldd	r31, Y+1	; 0x01
    89de:	ca 5b       	subi	r28, 0xBA	; 186
    89e0:	d0 40       	sbci	r29, 0x00	; 0
    89e2:	6e 0f       	add	r22, r30
    89e4:	7f 1f       	adc	r23, r31
    89e6:	81 2c       	mov	r8, r1
    89e8:	fe 01       	movw	r30, r28
    89ea:	31 96       	adiw	r30, 0x01	; 1
    89ec:	5f 01       	movw	r10, r30
    89ee:	e0 58       	subi	r30, 0x80	; 128
    89f0:	ff 4f       	sbci	r31, 0xFF	; 255
    89f2:	6f 01       	movw	r12, r30
    89f4:	c8 54       	subi	r28, 0x48	; 72
    89f6:	df 4f       	sbci	r29, 0xFF	; 255
    89f8:	e8 81       	ld	r30, Y
    89fa:	f9 81       	ldd	r31, Y+1	; 0x01
    89fc:	c8 5b       	subi	r28, 0xB8	; 184
    89fe:	d0 40       	sbci	r29, 0x00	; 0
    8a00:	8e 0f       	add	r24, r30
    8a02:	9f 1f       	adc	r25, r31
    8a04:	0e 94 95 33 	call	0x672a	; 0x672a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
    }
    if (click_x > 0 && click_y > 0)
    8a08:	cc 53       	subi	r28, 0x3C	; 60
    8a0a:	df 4f       	sbci	r29, 0xFF	; 255
    8a0c:	28 81       	ld	r18, Y
    8a0e:	39 81       	ldd	r19, Y+1	; 0x01
    8a10:	c4 5c       	subi	r28, 0xC4	; 196
    8a12:	d0 40       	sbci	r29, 0x00	; 0
    8a14:	23 2b       	or	r18, r19
    8a16:	09 f4       	brne	.+2      	; 0x8a1a <draw_menu(bool)+0x392>
    8a18:	5c c0       	rjmp	.+184    	; 0x8ad2 <draw_menu(bool)+0x44a>
    8a1a:	ca 53       	subi	r28, 0x3A	; 58
    8a1c:	df 4f       	sbci	r29, 0xFF	; 255
    8a1e:	48 81       	ld	r20, Y
    8a20:	59 81       	ldd	r21, Y+1	; 0x01
    8a22:	c6 5c       	subi	r28, 0xC6	; 198
    8a24:	d0 40       	sbci	r29, 0x00	; 0
    8a26:	45 2b       	or	r20, r21
    8a28:	09 f4       	brne	.+2      	; 0x8a2c <draw_menu(bool)+0x3a4>
    8a2a:	53 c0       	rjmp	.+166    	; 0x8ad2 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    8a2c:	f2 01       	movw	r30, r4
    8a2e:	3a 96       	adiw	r30, 0x0a	; 10
    8a30:	e6 0d       	add	r30, r6
    8a32:	f7 1d       	adc	r31, r7
    8a34:	25 91       	lpm	r18, Z+
    8a36:	34 91       	lpm	r19, Z
    8a38:	f2 01       	movw	r30, r4
    8a3a:	38 96       	adiw	r30, 0x08	; 8
    8a3c:	e6 0d       	add	r30, r6
    8a3e:	f7 1d       	adc	r31, r7
    8a40:	45 91       	lpm	r20, Z+
    8a42:	54 91       	lpm	r21, Z
    8a44:	f2 01       	movw	r30, r4
    8a46:	36 96       	adiw	r30, 0x06	; 6
    8a48:	e6 0d       	add	r30, r6
    8a4a:	f7 1d       	adc	r31, r7
    8a4c:	65 91       	lpm	r22, Z+
    8a4e:	74 91       	lpm	r23, Z
    8a50:	f2 01       	movw	r30, r4
    8a52:	34 96       	adiw	r30, 0x04	; 4
    8a54:	e6 0d       	add	r30, r6
    8a56:	f7 1d       	adc	r31, r7
    8a58:	85 91       	lpm	r24, Z+
    8a5a:	94 91       	lpm	r25, Z
    8a5c:	c6 54       	subi	r28, 0x46	; 70
    8a5e:	df 4f       	sbci	r29, 0xFF	; 255
    8a60:	e8 81       	ld	r30, Y
    8a62:	f9 81       	ldd	r31, Y+1	; 0x01
    8a64:	ca 5b       	subi	r28, 0xBA	; 186
    8a66:	d0 40       	sbci	r29, 0x00	; 0
    8a68:	6e 0f       	add	r22, r30
    8a6a:	7f 1f       	adc	r23, r31
    8a6c:	ca 53       	subi	r28, 0x3A	; 58
    8a6e:	df 4f       	sbci	r29, 0xFF	; 255
    8a70:	e8 80       	ld	r14, Y
    8a72:	f9 80       	ldd	r15, Y+1	; 0x01
    8a74:	c6 5c       	subi	r28, 0xC6	; 198
    8a76:	d0 40       	sbci	r29, 0x00	; 0
    8a78:	cc 53       	subi	r28, 0x3C	; 60
    8a7a:	df 4f       	sbci	r29, 0xFF	; 255
    8a7c:	08 81       	ld	r16, Y
    8a7e:	19 81       	ldd	r17, Y+1	; 0x01
    8a80:	c4 5c       	subi	r28, 0xC4	; 196
    8a82:	d0 40       	sbci	r29, 0x00	; 0
    8a84:	c8 54       	subi	r28, 0x48	; 72
    8a86:	df 4f       	sbci	r29, 0xFF	; 255
    8a88:	e8 81       	ld	r30, Y
    8a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    8a8c:	c8 5b       	subi	r28, 0xB8	; 184
    8a8e:	d0 40       	sbci	r29, 0x00	; 0
    8a90:	8e 0f       	add	r24, r30
    8a92:	9f 1f       	adc	r25, r31
    8a94:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8a98:	18 2f       	mov	r17, r24
    8a9a:	88 23       	and	r24, r24
    8a9c:	d1 f0       	breq	.+52     	; 0x8ad2 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1856
      {
        fntargs =  pgm_read_word(&button_1->onclick);
    8a9e:	f2 01       	movw	r30, r4
    8aa0:	3e 96       	adiw	r30, 0x0e	; 14
    8aa2:	e6 0d       	add	r30, r6
    8aa4:	f7 1d       	adc	r31, r7
    8aa6:	25 91       	lpm	r18, Z+
    8aa8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
    8aaa:	f2 01       	movw	r30, r4
    8aac:	3d 96       	adiw	r30, 0x0d	; 13
    8aae:	e6 0d       	add	r30, r6
    8ab0:	f7 1d       	adc	r31, r7
    8ab2:	84 91       	lpm	r24, Z
    8ab4:	cd 54       	subi	r28, 0x4D	; 77
    8ab6:	df 4f       	sbci	r29, 0xFF	; 255
    8ab8:	68 81       	ld	r22, Y
    8aba:	c3 5b       	subi	r28, 0xB3	; 179
    8abc:	d0 40       	sbci	r29, 0x00	; 0
    8abe:	70 e0       	ldi	r23, 0x00	; 0
    8ac0:	49 2d       	mov	r20, r9
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	f9 01       	movw	r30, r18
    8ac6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1858
        ret = true;
    8ac8:	c4 53       	subi	r28, 0x34	; 52
    8aca:	df 4f       	sbci	r29, 0xFF	; 255
    8acc:	18 83       	st	Y, r17
    8ace:	cc 5c       	subi	r28, 0xCC	; 204
    8ad0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1840
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    8ad2:	93 94       	inc	r9
    8ad4:	3e cf       	rjmp	.-388    	; 0x8952 <draw_menu(bool)+0x2ca>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    8ad6:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <my_touch+0xe>
    8ada:	88 23       	and	r24, r24
    8adc:	09 f4       	brne	.+2      	; 0x8ae0 <draw_menu(bool)+0x458>
    8ade:	6e ce       	rjmp	.-804    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    8ae0:	81 30       	cpi	r24, 0x01	; 1
    8ae2:	59 f4       	brne	.+22     	; 0x8afa <draw_menu(bool)+0x472>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    8ae4:	30 93 fc 0d 	sts	0x0DFC, r19	; 0x800dfc <my_touch+0x5>
    8ae8:	20 93 fb 0d 	sts	0x0DFB, r18	; 0x800dfb <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    8aec:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <my_touch+0xa>
    8af0:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <my_touch+0xb>
    8af4:	8e 19       	sub	r24, r14
    8af6:	9f 09       	sbc	r25, r15
    8af8:	3d c0       	rjmp	.+122    	; 0x8b74 <draw_menu(bool)+0x4ec>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    8afa:	82 30       	cpi	r24, 0x02	; 2
    8afc:	59 f4       	brne	.+22     	; 0x8b14 <draw_menu(bool)+0x48c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    8afe:	80 91 ff 0d 	lds	r24, 0x0DFF	; 0x800dff <my_touch+0x8>
    8b02:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_touch+0x9>
    8b06:	8e 19       	sub	r24, r14
    8b08:	9f 09       	sbc	r25, r15
    8b0a:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <my_touch+0x5>
    8b0e:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <my_touch+0x4>
    8b12:	2a c0       	rjmp	.+84     	; 0x8b68 <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    8b14:	83 30       	cpi	r24, 0x03	; 3
    8b16:	09 f0       	breq	.+2      	; 0x8b1a <draw_menu(bool)+0x492>
    8b18:	51 ce       	rjmp	.-862    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    8b1a:	f0 92 fe 0d 	sts	0x0DFE, r15	; 0x800dfe <my_touch+0x7>
    8b1e:	e0 92 fd 0d 	sts	0x0DFD, r14	; 0x800dfd <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    8b22:	80 91 ff 0d 	lds	r24, 0x0DFF	; 0x800dff <my_touch+0x8>
    8b26:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_touch+0x9>
    8b2a:	82 1b       	sub	r24, r18
    8b2c:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    8b2e:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <my_touch+0x5>
    8b32:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <my_touch+0x4>
    8b36:	42 ce       	rjmp	.-892    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    8b38:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <my_touch+0xe>
    8b3c:	81 11       	cpse	r24, r1
    8b3e:	07 c0       	rjmp	.+14     	; 0x8b4e <draw_menu(bool)+0x4c6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    8b40:	80 91 ff 0d 	lds	r24, 0x0DFF	; 0x800dff <my_touch+0x8>
    8b44:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_touch+0x9>
    8b48:	8e 19       	sub	r24, r14
    8b4a:	9f 09       	sbc	r25, r15
    8b4c:	f0 cf       	rjmp	.-32     	; 0x8b2e <draw_menu(bool)+0x4a6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    8b4e:	81 30       	cpi	r24, 0x01	; 1
    8b50:	49 f4       	brne	.+18     	; 0x8b64 <draw_menu(bool)+0x4dc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    8b52:	30 93 fc 0d 	sts	0x0DFC, r19	; 0x800dfc <my_touch+0x5>
    8b56:	20 93 fb 0d 	sts	0x0DFB, r18	; 0x800dfb <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    8b5a:	f0 92 fe 0d 	sts	0x0DFE, r15	; 0x800dfe <my_touch+0x7>
    8b5e:	e0 92 fd 0d 	sts	0x0DFD, r14	; 0x800dfd <my_touch+0x6>
    8b62:	2c ce       	rjmp	.-936    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    8b64:	82 30       	cpi	r24, 0x02	; 2
    8b66:	59 f4       	brne	.+22     	; 0x8b7e <draw_menu(bool)+0x4f6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    8b68:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <my_touch+0xa>
    8b6c:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <my_touch+0xb>
    8b70:	82 1b       	sub	r24, r18
    8b72:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    8b74:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <my_touch+0x7>
    8b78:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <my_touch+0x6>
    8b7c:	1f ce       	rjmp	.-962    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    8b7e:	83 30       	cpi	r24, 0x03	; 3
    8b80:	09 f0       	breq	.+2      	; 0x8b84 <draw_menu(bool)+0x4fc>
    8b82:	1c ce       	rjmp	.-968    	; 0x87bc <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    8b84:	80 91 ff 0d 	lds	r24, 0x0DFF	; 0x800dff <my_touch+0x8>
    8b88:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_touch+0x9>
    8b8c:	82 1b       	sub	r24, r18
    8b8e:	93 0b       	sbc	r25, r19
    8b90:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <my_touch+0x5>
    8b94:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <my_touch+0x4>
    8b98:	a9 cf       	rjmp	.-174    	; 0x8aec <draw_menu(bool)+0x464>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    8b9a:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <my_touch+0xe>
    8b9e:	88 23       	and	r24, r24
    8ba0:	09 f4       	brne	.+2      	; 0x8ba4 <draw_menu(bool)+0x51c>
    8ba2:	ad cf       	rjmp	.-166    	; 0x8afe <draw_menu(bool)+0x476>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    8ba4:	81 30       	cpi	r24, 0x01	; 1
    8ba6:	09 f4       	brne	.+2      	; 0x8baa <draw_menu(bool)+0x522>
    8ba8:	b8 cf       	rjmp	.-144    	; 0x8b1a <draw_menu(bool)+0x492>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    8baa:	83 30       	cpi	r24, 0x03	; 3
    8bac:	09 f0       	breq	.+2      	; 0x8bb0 <draw_menu(bool)+0x528>
    8bae:	06 ce       	rjmp	.-1012   	; 0x87bc <draw_menu(bool)+0x134>
    8bb0:	99 cf       	rjmp	.-206    	; 0x8ae4 <draw_menu(bool)+0x45c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    8bb2:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <my_touch+0xe>
    8bb6:	88 23       	and	r24, r24
    8bb8:	b9 f2       	breq	.-82     	; 0x8b68 <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    8bba:	81 30       	cpi	r24, 0x01	; 1
    8bbc:	19 f3       	breq	.-58     	; 0x8b84 <draw_menu(bool)+0x4fc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    8bbe:	82 30       	cpi	r24, 0x02	; 2
    8bc0:	09 f4       	brne	.+2      	; 0x8bc4 <draw_menu(bool)+0x53c>
    8bc2:	be cf       	rjmp	.-132    	; 0x8b40 <draw_menu(bool)+0x4b8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    8bc4:	83 30       	cpi	r24, 0x03	; 3
    8bc6:	09 f0       	breq	.+2      	; 0x8bca <draw_menu(bool)+0x542>
    8bc8:	f9 cd       	rjmp	.-1038   	; 0x87bc <draw_menu(bool)+0x134>
    8bca:	c3 cf       	rjmp	.-122    	; 0x8b52 <draw_menu(bool)+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    8bcc:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <my_touch+0xc>
    8bd0:	87 ff       	sbrs	r24, 7
    8bd2:	04 c0       	rjmp	.+8      	; 0x8bdc <draw_menu(bool)+0x554>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    8bd4:	8f 77       	andi	r24, 0x7F	; 127
    8bd6:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <my_touch+0xc>
    8bda:	07 ce       	rjmp	.-1010   	; 0x87ea <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    8bdc:	10 92 f8 0d 	sts	0x0DF8, r1	; 0x800df8 <my_touch+0x1>
    8be0:	10 92 f7 0d 	sts	0x0DF7, r1	; 0x800df7 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    8be4:	10 92 fa 0d 	sts	0x0DFA, r1	; 0x800dfa <my_touch+0x3>
    8be8:	10 92 f9 0d 	sts	0x0DF9, r1	; 0x800df9 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    8bec:	8f ef       	ldi	r24, 0xFF	; 255
    8bee:	9f ef       	ldi	r25, 0xFF	; 255
    8bf0:	90 93 fc 0d 	sts	0x0DFC, r25	; 0x800dfc <my_touch+0x5>
    8bf4:	80 93 fb 0d 	sts	0x0DFB, r24	; 0x800dfb <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    8bf8:	90 93 fe 0d 	sts	0x0DFE, r25	; 0x800dfe <my_touch+0x7>
    8bfc:	80 93 fd 0d 	sts	0x0DFD, r24	; 0x800dfd <my_touch+0x6>
    8c00:	f4 cd       	rjmp	.-1048   	; 0x87ea <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1792
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    8c02:	ca 53       	subi	r28, 0x3A	; 58
    8c04:	df 4f       	sbci	r29, 0xFF	; 255
    8c06:	19 82       	std	Y+1, r1	; 0x01
    8c08:	18 82       	st	Y, r1
    8c0a:	c6 5c       	subi	r28, 0xC6	; 198
    8c0c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1791
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    8c0e:	cc 53       	subi	r28, 0x3C	; 60
    8c10:	df 4f       	sbci	r29, 0xFF	; 255
    8c12:	19 82       	std	Y+1, r1	; 0x01
    8c14:	18 82       	st	Y, r1
    8c16:	c4 5c       	subi	r28, 0xC4	; 196
    8c18:	d0 40       	sbci	r29, 0x00	; 0
    8c1a:	01 ce       	rjmp	.-1022   	; 0x881e <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1817
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    8c1c:	68 94       	set
    8c1e:	a1 f8       	bld	r10, 1
    8c20:	48 ce       	rjmp	.-880    	; 0x88b2 <draw_menu(bool)+0x22a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    8c22:	8a 2d       	mov	r24, r10
    8c24:	84 60       	ori	r24, 0x04	; 4
    8c26:	5a ce       	rjmp	.-844    	; 0x88dc <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    8c28:	88 60       	ori	r24, 0x08	; 8
    8c2a:	5b ce       	rjmp	.-842    	; 0x88e2 <draw_menu(bool)+0x25a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8c2c:	c4 53       	subi	r28, 0x34	; 52
    8c2e:	df 4f       	sbci	r29, 0xFF	; 255
    8c30:	f8 81       	ld	r31, Y
    8c32:	cc 5c       	subi	r28, 0xCC	; 204
    8c34:	d0 40       	sbci	r29, 0x00	; 0
    8c36:	f1 11       	cpse	r31, r1
    8c38:	0c 94 22 56 	jmp	0xac44	; 0xac44 <draw_menu(bool)+0x25bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8c3c:	91 2c       	mov	r9, r1
    8c3e:	93 01       	movw	r18, r6
    8c40:	22 54       	subi	r18, 0x42	; 66
    8c42:	3d 4f       	sbci	r19, 0xFD	; 253
    8c44:	c4 54       	subi	r28, 0x44	; 68
    8c46:	df 4f       	sbci	r29, 0xFF	; 255
    8c48:	39 83       	std	Y+1, r19	; 0x01
    8c4a:	28 83       	st	Y, r18
    8c4c:	cc 5b       	subi	r28, 0xBC	; 188
    8c4e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    8c50:	1e 01       	movw	r2, r28
    8c52:	31 e8       	ldi	r19, 0x81	; 129
    8c54:	23 0e       	add	r2, r19
    8c56:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8c58:	c4 54       	subi	r28, 0x44	; 68
    8c5a:	df 4f       	sbci	r29, 0xFF	; 255
    8c5c:	e8 81       	ld	r30, Y
    8c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    8c60:	cc 5b       	subi	r28, 0xBC	; 188
    8c62:	d0 40       	sbci	r29, 0x00	; 0
    8c64:	84 91       	lpm	r24, Z
    8c66:	98 16       	cp	r9, r24
    8c68:	08 f0       	brcs	.+2      	; 0x8c6c <draw_menu(bool)+0x5e4>
    8c6a:	1c c1       	rjmp	.+568    	; 0x8ea4 <draw_menu(bool)+0x81c>
    8c6c:	f7 e1       	ldi	r31, 0x17	; 23
    8c6e:	9f 9e       	mul	r9, r31
    8c70:	20 01       	movw	r4, r0
    8c72:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1866
  {
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->enable_show);
    8c74:	f2 01       	movw	r30, r4
    8c76:	ef 53       	subi	r30, 0x3F	; 63
    8c78:	ff 4f       	sbci	r31, 0xFF	; 255
    8c7a:	e6 0d       	add	r30, r6
    8c7c:	f7 1d       	adc	r31, r7
    8c7e:	25 91       	lpm	r18, Z+
    8c80:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1867
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    8c82:	c2 01       	movw	r24, r4
    8c84:	85 54       	subi	r24, 0x45	; 69
    8c86:	9f 4f       	sbci	r25, 0xFF	; 255
    8c88:	a3 01       	movw	r20, r6
    8c8a:	48 0f       	add	r20, r24
    8c8c:	59 1f       	adc	r21, r25
    8c8e:	ca 54       	subi	r28, 0x4A	; 74
    8c90:	df 4f       	sbci	r29, 0xFF	; 255
    8c92:	59 83       	std	Y+1, r21	; 0x01
    8c94:	48 83       	st	Y, r20
    8c96:	c6 5b       	subi	r28, 0xB6	; 182
    8c98:	d0 40       	sbci	r29, 0x00	; 0
    8c9a:	fa 01       	movw	r30, r20
    8c9c:	84 91       	lpm	r24, Z
    8c9e:	cd 54       	subi	r28, 0x4D	; 77
    8ca0:	df 4f       	sbci	r29, 0xFF	; 255
    8ca2:	68 81       	ld	r22, Y
    8ca4:	c3 5b       	subi	r28, 0xB3	; 179
    8ca6:	d0 40       	sbci	r29, 0x00	; 0
    8ca8:	70 e0       	ldi	r23, 0x00	; 0
    8caa:	49 2d       	mov	r20, r9
    8cac:	90 e0       	ldi	r25, 0x00	; 0
    8cae:	f9 01       	movw	r30, r18
    8cb0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1868
    if (active == 0) continue;
    8cb2:	88 23       	and	r24, r24
    8cb4:	09 f4       	brne	.+2      	; 0x8cb8 <draw_menu(bool)+0x630>
    8cb6:	f4 c0       	rjmp	.+488    	; 0x8ea0 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
    rdr = pgm_read_byte(&button_2->redraw_class);
    8cb8:	f2 01       	movw	r30, r4
    8cba:	e0 54       	subi	r30, 0x40	; 64
    8cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    8cbe:	e6 0d       	add	r30, r6
    8cc0:	f7 1d       	adc	r31, r7
    8cc2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1870
    if (enable_redraw(rdr, redraw_class) == true)
    8cc4:	cf 52       	subi	r28, 0x2F	; 47
    8cc6:	df 4f       	sbci	r29, 0xFF	; 255
    8cc8:	68 81       	ld	r22, Y
    8cca:	c1 5d       	subi	r28, 0xD1	; 209
    8ccc:	d0 40       	sbci	r29, 0x00	; 0
    8cce:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    8cd2:	88 23       	and	r24, r24
    8cd4:	09 f4       	brne	.+2      	; 0x8cd8 <draw_menu(bool)+0x650>
    8cd6:	78 c0       	rjmp	.+240    	; 0x8dc8 <draw_menu(bool)+0x740>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    8cd8:	f2 01       	movw	r30, r4
    8cda:	e4 55       	subi	r30, 0x54	; 84
    8cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    8cde:	e6 0d       	add	r30, r6
    8ce0:	f7 1d       	adc	r31, r7
    8ce2:	65 91       	lpm	r22, Z+
    8ce4:	74 91       	lpm	r23, Z
    8ce6:	c1 01       	movw	r24, r2
    8ce8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1873
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    8cec:	f2 01       	movw	r30, r4
    8cee:	e2 54       	subi	r30, 0x42	; 66
    8cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    8cf2:	e6 0d       	add	r30, r6
    8cf4:	f7 1d       	adc	r31, r7
    8cf6:	25 91       	lpm	r18, Z+
    8cf8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1874
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8cfa:	ca 54       	subi	r28, 0x4A	; 74
    8cfc:	df 4f       	sbci	r29, 0xFF	; 255
    8cfe:	e8 81       	ld	r30, Y
    8d00:	f9 81       	ldd	r31, Y+1	; 0x01
    8d02:	c6 5b       	subi	r28, 0xB6	; 182
    8d04:	d0 40       	sbci	r29, 0x00	; 0
    8d06:	84 91       	lpm	r24, Z
    8d08:	cd 54       	subi	r28, 0x4D	; 77
    8d0a:	df 4f       	sbci	r29, 0xFF	; 255
    8d0c:	68 81       	ld	r22, Y
    8d0e:	c3 5b       	subi	r28, 0xB3	; 179
    8d10:	d0 40       	sbci	r29, 0x00	; 0
    8d12:	70 e0       	ldi	r23, 0x00	; 0
    8d14:	49 2d       	mov	r20, r9
    8d16:	90 e0       	ldi	r25, 0x00	; 0
    8d18:	f9 01       	movw	r30, r18
    8d1a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1875
      str1[0] = 0;
    8d1c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    8d1e:	f2 01       	movw	r30, r4
    8d20:	e7 54       	subi	r30, 0x47	; 71
    8d22:	ff 4f       	sbci	r31, 0xFF	; 255
    8d24:	e6 0d       	add	r30, r6
    8d26:	f7 1d       	adc	r31, r7
    8d28:	a5 90       	lpm	r10, Z+
    8d2a:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    8d2c:	f2 01       	movw	r30, r4
    8d2e:	e9 54       	subi	r30, 0x49	; 73
    8d30:	ff 4f       	sbci	r31, 0xFF	; 255
    8d32:	e6 0d       	add	r30, r6
    8d34:	f7 1d       	adc	r31, r7
    8d36:	c5 90       	lpm	r12, Z+
    8d38:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1878
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    8d3a:	82 01       	movw	r16, r4
    8d3c:	0a 54       	subi	r16, 0x4A	; 74
    8d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8d40:	06 0d       	add	r16, r6
    8d42:	17 1d       	adc	r17, r7
    8d44:	f8 01       	movw	r30, r16
    8d46:	04 91       	lpm	r16, Z
    8d48:	f2 01       	movw	r30, r4
    8d4a:	ec 54       	subi	r30, 0x4C	; 76
    8d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    8d4e:	e6 0d       	add	r30, r6
    8d50:	f7 1d       	adc	r31, r7
    8d52:	25 91       	lpm	r18, Z+
    8d54:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    8d56:	f2 01       	movw	r30, r4
    8d58:	ee 54       	subi	r30, 0x4E	; 78
    8d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    8d5c:	e6 0d       	add	r30, r6
    8d5e:	f7 1d       	adc	r31, r7
    8d60:	45 91       	lpm	r20, Z+
    8d62:	54 91       	lpm	r21, Z
    8d64:	f2 01       	movw	r30, r4
    8d66:	e0 55       	subi	r30, 0x50	; 80
    8d68:	ff 4f       	sbci	r31, 0xFF	; 255
    8d6a:	e6 0d       	add	r30, r6
    8d6c:	f7 1d       	adc	r31, r7
    8d6e:	65 91       	lpm	r22, Z+
    8d70:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1876
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8d72:	f2 01       	movw	r30, r4
    8d74:	e2 55       	subi	r30, 0x52	; 82
    8d76:	ff 4f       	sbci	r31, 0xFF	; 255
    8d78:	e6 0d       	add	r30, r6
    8d7a:	f7 1d       	adc	r31, r7
    8d7c:	a5 91       	lpm	r26, Z+
    8d7e:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1874
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8d80:	88 24       	eor	r8, r8
    8d82:	83 94       	inc	r8
    8d84:	81 11       	cpse	r24, r1
    8d86:	01 c0       	rjmp	.+2      	; 0x8d8a <draw_menu(bool)+0x702>
    8d88:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1876
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8d8a:	c6 54       	subi	r28, 0x46	; 70
    8d8c:	df 4f       	sbci	r29, 0xFF	; 255
    8d8e:	88 81       	ld	r24, Y
    8d90:	99 81       	ldd	r25, Y+1	; 0x01
    8d92:	ca 5b       	subi	r28, 0xBA	; 186
    8d94:	d0 40       	sbci	r29, 0x00	; 0
    8d96:	68 0f       	add	r22, r24
    8d98:	79 1f       	adc	r23, r25
    8d9a:	e1 e0       	ldi	r30, 0x01	; 1
    8d9c:	f0 e0       	ldi	r31, 0x00	; 0
    8d9e:	ec 0f       	add	r30, r28
    8da0:	fd 1f       	adc	r31, r29
    8da2:	ff 93       	push	r31
    8da4:	ef 93       	push	r30
    8da6:	3f 92       	push	r3
    8da8:	2f 92       	push	r2
    8daa:	e1 2c       	mov	r14, r1
    8dac:	c8 54       	subi	r28, 0x48	; 72
    8dae:	df 4f       	sbci	r29, 0xFF	; 255
    8db0:	88 81       	ld	r24, Y
    8db2:	99 81       	ldd	r25, Y+1	; 0x01
    8db4:	c8 5b       	subi	r28, 0xB8	; 184
    8db6:	d0 40       	sbci	r29, 0x00	; 0
    8db8:	8a 0f       	add	r24, r26
    8dba:	9b 1f       	adc	r25, r27
    8dbc:	0e 94 90 32 	call	0x6520	; 0x6520 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    8dc0:	0f 90       	pop	r0
    8dc2:	0f 90       	pop	r0
    8dc4:	0f 90       	pop	r0
    8dc6:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1882
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    8dc8:	cc 53       	subi	r28, 0x3C	; 60
    8dca:	df 4f       	sbci	r29, 0xFF	; 255
    8dcc:	28 81       	ld	r18, Y
    8dce:	39 81       	ldd	r19, Y+1	; 0x01
    8dd0:	c4 5c       	subi	r28, 0xC4	; 196
    8dd2:	d0 40       	sbci	r29, 0x00	; 0
    8dd4:	23 2b       	or	r18, r19
    8dd6:	09 f4       	brne	.+2      	; 0x8dda <draw_menu(bool)+0x752>
    8dd8:	63 c0       	rjmp	.+198    	; 0x8ea0 <draw_menu(bool)+0x818>
    8dda:	ca 53       	subi	r28, 0x3A	; 58
    8ddc:	df 4f       	sbci	r29, 0xFF	; 255
    8dde:	48 81       	ld	r20, Y
    8de0:	59 81       	ldd	r21, Y+1	; 0x01
    8de2:	c6 5c       	subi	r28, 0xC6	; 198
    8de4:	d0 40       	sbci	r29, 0x00	; 0
    8de6:	45 2b       	or	r20, r21
    8de8:	09 f4       	brne	.+2      	; 0x8dec <draw_menu(bool)+0x764>
    8dea:	5a c0       	rjmp	.+180    	; 0x8ea0 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    8dec:	f2 01       	movw	r30, r4
    8dee:	ec 54       	subi	r30, 0x4C	; 76
    8df0:	ff 4f       	sbci	r31, 0xFF	; 255
    8df2:	e6 0d       	add	r30, r6
    8df4:	f7 1d       	adc	r31, r7
    8df6:	25 91       	lpm	r18, Z+
    8df8:	34 91       	lpm	r19, Z
    8dfa:	f2 01       	movw	r30, r4
    8dfc:	ee 54       	subi	r30, 0x4E	; 78
    8dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    8e00:	e6 0d       	add	r30, r6
    8e02:	f7 1d       	adc	r31, r7
    8e04:	45 91       	lpm	r20, Z+
    8e06:	54 91       	lpm	r21, Z
    8e08:	f2 01       	movw	r30, r4
    8e0a:	e0 55       	subi	r30, 0x50	; 80
    8e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    8e0e:	e6 0d       	add	r30, r6
    8e10:	f7 1d       	adc	r31, r7
    8e12:	65 91       	lpm	r22, Z+
    8e14:	74 91       	lpm	r23, Z
    8e16:	f2 01       	movw	r30, r4
    8e18:	e2 55       	subi	r30, 0x52	; 82
    8e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    8e1c:	e6 0d       	add	r30, r6
    8e1e:	f7 1d       	adc	r31, r7
    8e20:	85 91       	lpm	r24, Z+
    8e22:	94 91       	lpm	r25, Z
    8e24:	c6 54       	subi	r28, 0x46	; 70
    8e26:	df 4f       	sbci	r29, 0xFF	; 255
    8e28:	e8 81       	ld	r30, Y
    8e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    8e2c:	ca 5b       	subi	r28, 0xBA	; 186
    8e2e:	d0 40       	sbci	r29, 0x00	; 0
    8e30:	6e 0f       	add	r22, r30
    8e32:	7f 1f       	adc	r23, r31
    8e34:	ca 53       	subi	r28, 0x3A	; 58
    8e36:	df 4f       	sbci	r29, 0xFF	; 255
    8e38:	e8 80       	ld	r14, Y
    8e3a:	f9 80       	ldd	r15, Y+1	; 0x01
    8e3c:	c6 5c       	subi	r28, 0xC6	; 198
    8e3e:	d0 40       	sbci	r29, 0x00	; 0
    8e40:	cc 53       	subi	r28, 0x3C	; 60
    8e42:	df 4f       	sbci	r29, 0xFF	; 255
    8e44:	08 81       	ld	r16, Y
    8e46:	19 81       	ldd	r17, Y+1	; 0x01
    8e48:	c4 5c       	subi	r28, 0xC4	; 196
    8e4a:	d0 40       	sbci	r29, 0x00	; 0
    8e4c:	c8 54       	subi	r28, 0x48	; 72
    8e4e:	df 4f       	sbci	r29, 0xFF	; 255
    8e50:	e8 81       	ld	r30, Y
    8e52:	f9 81       	ldd	r31, Y+1	; 0x01
    8e54:	c8 5b       	subi	r28, 0xB8	; 184
    8e56:	d0 40       	sbci	r29, 0x00	; 0
    8e58:	8e 0f       	add	r24, r30
    8e5a:	9f 1f       	adc	r25, r31
    8e5c:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8e60:	18 2f       	mov	r17, r24
    8e62:	88 23       	and	r24, r24
    8e64:	e9 f0       	breq	.+58     	; 0x8ea0 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1885
      {
        fntargs =  pgm_read_word(&button_2->onclick);
    8e66:	f2 01       	movw	r30, r4
    8e68:	e4 54       	subi	r30, 0x44	; 68
    8e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    8e6c:	e6 0d       	add	r30, r6
    8e6e:	f7 1d       	adc	r31, r7
    8e70:	25 91       	lpm	r18, Z+
    8e72:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1886
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8e74:	ca 54       	subi	r28, 0x4A	; 74
    8e76:	df 4f       	sbci	r29, 0xFF	; 255
    8e78:	e8 81       	ld	r30, Y
    8e7a:	f9 81       	ldd	r31, Y+1	; 0x01
    8e7c:	c6 5b       	subi	r28, 0xB6	; 182
    8e7e:	d0 40       	sbci	r29, 0x00	; 0
    8e80:	84 91       	lpm	r24, Z
    8e82:	cd 54       	subi	r28, 0x4D	; 77
    8e84:	df 4f       	sbci	r29, 0xFF	; 255
    8e86:	68 81       	ld	r22, Y
    8e88:	c3 5b       	subi	r28, 0xB3	; 179
    8e8a:	d0 40       	sbci	r29, 0x00	; 0
    8e8c:	70 e0       	ldi	r23, 0x00	; 0
    8e8e:	49 2d       	mov	r20, r9
    8e90:	90 e0       	ldi	r25, 0x00	; 0
    8e92:	f9 01       	movw	r30, r18
    8e94:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1887
        ret = true;
    8e96:	c4 53       	subi	r28, 0x34	; 52
    8e98:	df 4f       	sbci	r29, 0xFF	; 255
    8e9a:	18 83       	st	Y, r17
    8e9c:	cc 5c       	subi	r28, 0xCC	; 204
    8e9e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8ea0:	93 94       	inc	r9
    8ea2:	da ce       	rjmp	.-588    	; 0x8c58 <draw_menu(bool)+0x5d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
        fntargs =  pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8ea4:	c4 53       	subi	r28, 0x34	; 52
    8ea6:	df 4f       	sbci	r29, 0xFF	; 255
    8ea8:	f8 81       	ld	r31, Y
    8eaa:	cc 5c       	subi	r28, 0xCC	; 204
    8eac:	d0 40       	sbci	r29, 0x00	; 0
    8eae:	f1 11       	cpse	r31, r1
    8eb0:	0c 94 22 56 	jmp	0xac44	; 0xac44 <draw_menu(bool)+0x25bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1892
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8eb4:	b1 2c       	mov	r11, r1
    8eb6:	13 01       	movw	r2, r6
    8eb8:	21 e4       	ldi	r18, 0x41	; 65
    8eba:	22 1a       	sub	r2, r18
    8ebc:	2d ef       	ldi	r18, 0xFD	; 253
    8ebe:	32 0a       	sbc	r3, r18
    8ec0:	b2 e1       	ldi	r27, 0x12	; 18
    8ec2:	5b 2e       	mov	r5, r27
    8ec4:	f1 01       	movw	r30, r2
    8ec6:	84 91       	lpm	r24, Z
    8ec8:	b8 16       	cp	r11, r24
    8eca:	08 f0       	brcs	.+2      	; 0x8ece <draw_menu(bool)+0x846>
    8ecc:	cc c0       	rjmp	.+408    	; 0x9066 <draw_menu(bool)+0x9de>
    8ece:	b5 9c       	mul	r11, r5
    8ed0:	40 01       	movw	r8, r0
    8ed2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
  {
    function_1 = &current->function_1[idx];
    rfnt = pgm_read_word(&function_1->enable_show);
    8ed4:	f4 01       	movw	r30, r8
    8ed6:	e3 5d       	subi	r30, 0xD3	; 211
    8ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    8eda:	e6 0d       	add	r30, r6
    8edc:	f7 1d       	adc	r31, r7
    8ede:	25 91       	lpm	r18, Z+
    8ee0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
    8ee2:	84 01       	movw	r16, r8
    8ee4:	0d 5d       	subi	r16, 0xDD	; 221
    8ee6:	1e 4f       	sbci	r17, 0xFE	; 254
    8ee8:	06 0d       	add	r16, r6
    8eea:	17 1d       	adc	r17, r7
    8eec:	f8 01       	movw	r30, r16
    8eee:	84 91       	lpm	r24, Z
    8ef0:	cd 54       	subi	r28, 0x4D	; 77
    8ef2:	df 4f       	sbci	r29, 0xFF	; 255
    8ef4:	68 81       	ld	r22, Y
    8ef6:	c3 5b       	subi	r28, 0xB3	; 179
    8ef8:	d0 40       	sbci	r29, 0x00	; 0
    8efa:	70 e0       	ldi	r23, 0x00	; 0
    8efc:	4b 2d       	mov	r20, r11
    8efe:	90 e0       	ldi	r25, 0x00	; 0
    8f00:	f9 01       	movw	r30, r18
    8f02:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
    if (active == 0) continue;
    8f04:	88 23       	and	r24, r24
    8f06:	09 f4       	brne	.+2      	; 0x8f0a <draw_menu(bool)+0x882>
    8f08:	ac c0       	rjmp	.+344    	; 0x9062 <draw_menu(bool)+0x9da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
    rdr = pgm_read_byte(&function_1->redraw_class);
    8f0a:	f4 01       	movw	r30, r8
    8f0c:	e6 5d       	subi	r30, 0xD6	; 214
    8f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    8f10:	e6 0d       	add	r30, r6
    8f12:	f7 1d       	adc	r31, r7
    8f14:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
    if (enable_redraw(rdr, redraw_class) == true)
    8f16:	cf 52       	subi	r28, 0x2F	; 47
    8f18:	df 4f       	sbci	r29, 0xFF	; 255
    8f1a:	68 81       	ld	r22, Y
    8f1c:	c1 5d       	subi	r28, 0xD1	; 209
    8f1e:	d0 40       	sbci	r29, 0x00	; 0
    8f20:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    8f24:	88 23       	and	r24, r24
    8f26:	09 f4       	brne	.+2      	; 0x8f2a <draw_menu(bool)+0x8a2>
    8f28:	4a c0       	rjmp	.+148    	; 0x8fbe <draw_menu(bool)+0x936>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1901
    {
      strcpy_P(str1, pgm_read_word(&function_1->name));
    8f2a:	f4 01       	movw	r30, r8
    8f2c:	e1 5d       	subi	r30, 0xD1	; 209
    8f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    8f30:	e6 0d       	add	r30, r6
    8f32:	f7 1d       	adc	r31, r7
    8f34:	65 91       	lpm	r22, Z+
    8f36:	74 91       	lpm	r23, Z
    8f38:	ce 01       	movw	r24, r28
    8f3a:	01 96       	adiw	r24, 0x01	; 1
    8f3c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
      fnt_coordinate_xy =  pgm_read_word(&function_1->fnt_coordinate_xy);
    8f40:	f4 01       	movw	r30, r8
    8f42:	ec 5d       	subi	r30, 0xDC	; 220
    8f44:	fe 4f       	sbci	r31, 0xFE	; 254
    8f46:	e6 0d       	add	r30, r6
    8f48:	f7 1d       	adc	r31, r7
    8f4a:	a5 91       	lpm	r26, Z+
    8f4c:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1903
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1, str1);
    8f4e:	f8 01       	movw	r30, r16
    8f50:	04 91       	lpm	r16, Z
    8f52:	f4 01       	movw	r30, r8
    8f54:	e8 5d       	subi	r30, 0xD8	; 216
    8f56:	fe 4f       	sbci	r31, 0xFE	; 254
    8f58:	e6 0d       	add	r30, r6
    8f5a:	f7 1d       	adc	r31, r7
    8f5c:	25 91       	lpm	r18, Z+
    8f5e:	34 91       	lpm	r19, Z
    8f60:	f4 01       	movw	r30, r8
    8f62:	ea 5d       	subi	r30, 0xDA	; 218
    8f64:	fe 4f       	sbci	r31, 0xFE	; 254
    8f66:	e6 0d       	add	r30, r6
    8f68:	f7 1d       	adc	r31, r7
    8f6a:	45 91       	lpm	r20, Z+
    8f6c:	54 91       	lpm	r21, Z
    8f6e:	f4 01       	movw	r30, r8
    8f70:	ef 5d       	subi	r30, 0xDF	; 223
    8f72:	fe 4f       	sbci	r31, 0xFE	; 254
    8f74:	e6 0d       	add	r30, r6
    8f76:	f7 1d       	adc	r31, r7
    8f78:	65 91       	lpm	r22, Z+
    8f7a:	74 91       	lpm	r23, Z
    8f7c:	f4 01       	movw	r30, r8
    8f7e:	e1 5e       	subi	r30, 0xE1	; 225
    8f80:	fe 4f       	sbci	r31, 0xFE	; 254
    8f82:	e6 0d       	add	r30, r6
    8f84:	f7 1d       	adc	r31, r7
    8f86:	85 91       	lpm	r24, Z+
    8f88:	94 91       	lpm	r25, Z
    8f8a:	c6 54       	subi	r28, 0x46	; 70
    8f8c:	df 4f       	sbci	r29, 0xFF	; 255
    8f8e:	e8 81       	ld	r30, Y
    8f90:	f9 81       	ldd	r31, Y+1	; 0x01
    8f92:	ca 5b       	subi	r28, 0xBA	; 186
    8f94:	d0 40       	sbci	r29, 0x00	; 0
    8f96:	6e 0f       	add	r22, r30
    8f98:	7f 1f       	adc	r23, r31
    8f9a:	fe 01       	movw	r30, r28
    8f9c:	31 96       	adiw	r30, 0x01	; 1
    8f9e:	6f 01       	movw	r12, r30
    8fa0:	cd 54       	subi	r28, 0x4D	; 77
    8fa2:	df 4f       	sbci	r29, 0xFF	; 255
    8fa4:	e8 80       	ld	r14, Y
    8fa6:	c3 5b       	subi	r28, 0xB3	; 179
    8fa8:	d0 40       	sbci	r29, 0x00	; 0
    8faa:	c8 54       	subi	r28, 0x48	; 72
    8fac:	df 4f       	sbci	r29, 0xFF	; 255
    8fae:	e8 81       	ld	r30, Y
    8fb0:	f9 81       	ldd	r31, Y+1	; 0x01
    8fb2:	c8 5b       	subi	r28, 0xB8	; 184
    8fb4:	d0 40       	sbci	r29, 0x00	; 0
    8fb6:	8e 0f       	add	r24, r30
    8fb8:	9f 1f       	adc	r25, r31
    8fba:	fd 01       	movw	r30, r26
    8fbc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1905
    }
    if (click_x > 0 && click_y > 0)
    8fbe:	cc 53       	subi	r28, 0x3C	; 60
    8fc0:	df 4f       	sbci	r29, 0xFF	; 255
    8fc2:	28 81       	ld	r18, Y
    8fc4:	39 81       	ldd	r19, Y+1	; 0x01
    8fc6:	c4 5c       	subi	r28, 0xC4	; 196
    8fc8:	d0 40       	sbci	r29, 0x00	; 0
    8fca:	23 2b       	or	r18, r19
    8fcc:	09 f4       	brne	.+2      	; 0x8fd0 <draw_menu(bool)+0x948>
    8fce:	49 c0       	rjmp	.+146    	; 0x9062 <draw_menu(bool)+0x9da>
    8fd0:	ca 53       	subi	r28, 0x3A	; 58
    8fd2:	df 4f       	sbci	r29, 0xFF	; 255
    8fd4:	48 81       	ld	r20, Y
    8fd6:	59 81       	ldd	r21, Y+1	; 0x01
    8fd8:	c6 5c       	subi	r28, 0xC6	; 198
    8fda:	d0 40       	sbci	r29, 0x00	; 0
    8fdc:	45 2b       	or	r20, r21
    8fde:	09 f4       	brne	.+2      	; 0x8fe2 <draw_menu(bool)+0x95a>
    8fe0:	40 c0       	rjmp	.+128    	; 0x9062 <draw_menu(bool)+0x9da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1906
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    8fe2:	f4 01       	movw	r30, r8
    8fe4:	e8 5d       	subi	r30, 0xD8	; 216
    8fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    8fe8:	e6 0d       	add	r30, r6
    8fea:	f7 1d       	adc	r31, r7
    8fec:	25 91       	lpm	r18, Z+
    8fee:	34 91       	lpm	r19, Z
    8ff0:	f4 01       	movw	r30, r8
    8ff2:	ea 5d       	subi	r30, 0xDA	; 218
    8ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    8ff6:	e6 0d       	add	r30, r6
    8ff8:	f7 1d       	adc	r31, r7
    8ffa:	45 91       	lpm	r20, Z+
    8ffc:	54 91       	lpm	r21, Z
    8ffe:	f4 01       	movw	r30, r8
    9000:	ef 5d       	subi	r30, 0xDF	; 223
    9002:	fe 4f       	sbci	r31, 0xFE	; 254
    9004:	e6 0d       	add	r30, r6
    9006:	f7 1d       	adc	r31, r7
    9008:	65 91       	lpm	r22, Z+
    900a:	74 91       	lpm	r23, Z
    900c:	f4 01       	movw	r30, r8
    900e:	e1 5e       	subi	r30, 0xE1	; 225
    9010:	fe 4f       	sbci	r31, 0xFE	; 254
    9012:	e6 0d       	add	r30, r6
    9014:	f7 1d       	adc	r31, r7
    9016:	85 91       	lpm	r24, Z+
    9018:	94 91       	lpm	r25, Z
    901a:	c6 54       	subi	r28, 0x46	; 70
    901c:	df 4f       	sbci	r29, 0xFF	; 255
    901e:	e8 81       	ld	r30, Y
    9020:	f9 81       	ldd	r31, Y+1	; 0x01
    9022:	ca 5b       	subi	r28, 0xBA	; 186
    9024:	d0 40       	sbci	r29, 0x00	; 0
    9026:	6e 0f       	add	r22, r30
    9028:	7f 1f       	adc	r23, r31
    902a:	ca 53       	subi	r28, 0x3A	; 58
    902c:	df 4f       	sbci	r29, 0xFF	; 255
    902e:	e8 80       	ld	r14, Y
    9030:	f9 80       	ldd	r15, Y+1	; 0x01
    9032:	c6 5c       	subi	r28, 0xC6	; 198
    9034:	d0 40       	sbci	r29, 0x00	; 0
    9036:	cc 53       	subi	r28, 0x3C	; 60
    9038:	df 4f       	sbci	r29, 0xFF	; 255
    903a:	08 81       	ld	r16, Y
    903c:	19 81       	ldd	r17, Y+1	; 0x01
    903e:	c4 5c       	subi	r28, 0xC4	; 196
    9040:	d0 40       	sbci	r29, 0x00	; 0
    9042:	c8 54       	subi	r28, 0x48	; 72
    9044:	df 4f       	sbci	r29, 0xFF	; 255
    9046:	e8 81       	ld	r30, Y
    9048:	f9 81       	ldd	r31, Y+1	; 0x01
    904a:	c8 5b       	subi	r28, 0xB8	; 184
    904c:	d0 40       	sbci	r29, 0x00	; 0
    904e:	8e 0f       	add	r24, r30
    9050:	9f 1f       	adc	r25, r31
    9052:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9056:	88 23       	and	r24, r24
    9058:	21 f0       	breq	.+8      	; 0x9062 <draw_menu(bool)+0x9da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1911
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    905a:	86 e5       	ldi	r24, 0x56	; 86
    905c:	93 e0       	ldi	r25, 0x03	; 3
    905e:	0e 94 40 be 	call	0x17c80	; 0x17c80 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1892
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    9062:	b3 94       	inc	r11
    9064:	2f cf       	rjmp	.-418    	; 0x8ec4 <draw_menu(bool)+0x83c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1917
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    9066:	ca 54       	subi	r28, 0x4A	; 74
    9068:	df 4f       	sbci	r29, 0xFF	; 255
    906a:	18 82       	st	Y, r1
    906c:	c6 5b       	subi	r28, 0xB6	; 182
    906e:	d0 40       	sbci	r29, 0x00	; 0
    9070:	93 01       	movw	r18, r6
    9072:	20 54       	subi	r18, 0x40	; 64
    9074:	3d 4f       	sbci	r19, 0xFD	; 253
    9076:	c8 53       	subi	r28, 0x38	; 56
    9078:	df 4f       	sbci	r29, 0xFF	; 255
    907a:	39 83       	std	Y+1, r19	; 0x01
    907c:	28 83       	st	Y, r18
    907e:	c8 5c       	subi	r28, 0xC8	; 200
    9080:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1923
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    9082:	4e 01       	movw	r8, r28
    9084:	31 e8       	ldi	r19, 0x81	; 129
    9086:	83 0e       	add	r8, r19
    9088:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1928
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
    908a:	ae 01       	movw	r20, r28
    908c:	4f 5f       	subi	r20, 0xFF	; 255
    908e:	5f 4f       	sbci	r21, 0xFF	; 255
    9090:	cc 54       	subi	r28, 0x4C	; 76
    9092:	df 4f       	sbci	r29, 0xFF	; 255
    9094:	59 83       	std	Y+1, r21	; 0x01
    9096:	48 83       	st	Y, r20
    9098:	c4 5b       	subi	r28, 0xB4	; 180
    909a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1917
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    909c:	c8 53       	subi	r28, 0x38	; 56
    909e:	df 4f       	sbci	r29, 0xFF	; 255
    90a0:	e8 81       	ld	r30, Y
    90a2:	f9 81       	ldd	r31, Y+1	; 0x01
    90a4:	c8 5c       	subi	r28, 0xC8	; 200
    90a6:	d0 40       	sbci	r29, 0x00	; 0
    90a8:	84 91       	lpm	r24, Z
    90aa:	ca 54       	subi	r28, 0x4A	; 74
    90ac:	df 4f       	sbci	r29, 0xFF	; 255
    90ae:	f8 81       	ld	r31, Y
    90b0:	c6 5b       	subi	r28, 0xB6	; 182
    90b2:	d0 40       	sbci	r29, 0x00	; 0
    90b4:	f8 17       	cp	r31, r24
    90b6:	08 f0       	brcs	.+2      	; 0x90ba <draw_menu(bool)+0xa32>
    90b8:	d1 c1       	rjmp	.+930    	; 0x945c <draw_menu(bool)+0xdd4>
    90ba:	27 e1       	ldi	r18, 0x17	; 23
    90bc:	f2 9f       	mul	r31, r18
    90be:	60 01       	movw	r12, r0
    90c0:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    90c2:	f6 01       	movw	r30, r12
    90c4:	e3 58       	subi	r30, 0x83	; 131
    90c6:	fe 4f       	sbci	r31, 0xFE	; 254
    90c8:	e6 0d       	add	r30, r6
    90ca:	f7 1d       	adc	r31, r7
    90cc:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1921
    if (enable_redraw(rdr, redraw_class) == true)
    90ce:	cf 52       	subi	r28, 0x2F	; 47
    90d0:	df 4f       	sbci	r29, 0xFF	; 255
    90d2:	68 81       	ld	r22, Y
    90d4:	c1 5d       	subi	r28, 0xD1	; 209
    90d6:	d0 40       	sbci	r29, 0x00	; 0
    90d8:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    90dc:	88 23       	and	r24, r24
    90de:	09 f4       	brne	.+2      	; 0x90e2 <draw_menu(bool)+0xa5a>
    90e0:	42 c1       	rjmp	.+644    	; 0x9366 <draw_menu(bool)+0xcde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1923
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    90e2:	f6 01       	movw	r30, r12
    90e4:	e9 59       	subi	r30, 0x99	; 153
    90e6:	fe 4f       	sbci	r31, 0xFE	; 254
    90e8:	e6 0d       	add	r30, r6
    90ea:	f7 1d       	adc	r31, r7
    90ec:	65 91       	lpm	r22, Z+
    90ee:	74 91       	lpm	r23, Z
    90f0:	c4 01       	movw	r24, r8
    90f2:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    90f6:	f6 01       	movw	r30, r12
    90f8:	e7 58       	subi	r30, 0x87	; 135
    90fa:	fe 4f       	sbci	r31, 0xFE	; 254
    90fc:	e6 0d       	add	r30, r6
    90fe:	f7 1d       	adc	r31, r7
    9100:	25 91       	lpm	r18, Z+
    9102:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1925
      gss = pgm_read_word(&switch_1->get_status_string);
    9104:	f6 01       	movw	r30, r12
    9106:	e5 58       	subi	r30, 0x85	; 133
    9108:	fe 4f       	sbci	r31, 0xFE	; 254
    910a:	e6 0d       	add	r30, r6
    910c:	f7 1d       	adc	r31, r7
    910e:	e5 90       	lpm	r14, Z+
    9110:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    9112:	86 01       	movw	r16, r12
    9114:	0a 58       	subi	r16, 0x8A	; 138
    9116:	1e 4f       	sbci	r17, 0xFE	; 254
    9118:	06 0d       	add	r16, r6
    911a:	17 1d       	adc	r17, r7
    911c:	f8 01       	movw	r30, r16
    911e:	84 91       	lpm	r24, Z
    9120:	cd 54       	subi	r28, 0x4D	; 77
    9122:	df 4f       	sbci	r29, 0xFF	; 255
    9124:	68 81       	ld	r22, Y
    9126:	c3 5b       	subi	r28, 0xB3	; 179
    9128:	d0 40       	sbci	r29, 0x00	; 0
    912a:	70 e0       	ldi	r23, 0x00	; 0
    912c:	ca 54       	subi	r28, 0x4A	; 74
    912e:	df 4f       	sbci	r29, 0xFF	; 255
    9130:	48 81       	ld	r20, Y
    9132:	c6 5b       	subi	r28, 0xB6	; 182
    9134:	d0 40       	sbci	r29, 0x00	; 0
    9136:	90 e0       	ldi	r25, 0x00	; 0
    9138:	f9 01       	movw	r30, r18
    913a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
      str3[0] = 0;
    913c:	cf 55       	subi	r28, 0x5F	; 95
    913e:	df 4f       	sbci	r29, 0xFF	; 255
    9140:	18 82       	st	Y, r1
    9142:	c1 5a       	subi	r28, 0xA1	; 161
    9144:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1928
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
    9146:	f8 01       	movw	r30, r16
    9148:	44 91       	lpm	r20, Z
    914a:	84 91       	lpm	r24, Z
    914c:	8e 01       	movw	r16, r28
    914e:	0f 55       	subi	r16, 0x5F	; 95
    9150:	1f 4f       	sbci	r17, 0xFF	; 255
    9152:	9e 01       	movw	r18, r28
    9154:	2f 5f       	subi	r18, 0xFF	; 255
    9156:	3f 4f       	sbci	r19, 0xFF	; 255
    9158:	cd 54       	subi	r28, 0x4D	; 77
    915a:	df 4f       	sbci	r29, 0xFF	; 255
    915c:	68 81       	ld	r22, Y
    915e:	c3 5b       	subi	r28, 0xB3	; 179
    9160:	d0 40       	sbci	r29, 0x00	; 0
    9162:	f7 01       	movw	r30, r14
    9164:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    9166:	f6 01       	movw	r30, r12
    9168:	ef 58       	subi	r30, 0x8F	; 143
    916a:	fe 4f       	sbci	r31, 0xFE	; 254
    916c:	e6 0d       	add	r30, r6
    916e:	f7 1d       	adc	r31, r7
    9170:	25 91       	lpm	r18, Z+
    9172:	34 91       	lpm	r19, Z
    9174:	c4 54       	subi	r28, 0x44	; 68
    9176:	df 4f       	sbci	r29, 0xFF	; 255
    9178:	39 83       	std	Y+1, r19	; 0x01
    917a:	28 83       	st	Y, r18
    917c:	cc 5b       	subi	r28, 0xBC	; 188
    917e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    9180:	f6 01       	movw	r30, r12
    9182:	e1 59       	subi	r30, 0x91	; 145
    9184:	fe 4f       	sbci	r31, 0xFE	; 254
    9186:	e6 0d       	add	r30, r6
    9188:	f7 1d       	adc	r31, r7
    918a:	45 90       	lpm	r4, Z+
    918c:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    918e:	f6 01       	movw	r30, r12
    9190:	e3 59       	subi	r30, 0x93	; 147
    9192:	fe 4f       	sbci	r31, 0xFE	; 254
    9194:	e6 0d       	add	r30, r6
    9196:	f7 1d       	adc	r31, r7
    9198:	85 91       	lpm	r24, Z+
    919a:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    919c:	f6 01       	movw	r30, r12
    919e:	e5 59       	subi	r30, 0x95	; 149
    91a0:	fe 4f       	sbci	r31, 0xFE	; 254
    91a2:	e6 0d       	add	r30, r6
    91a4:	f7 1d       	adc	r31, r7
    91a6:	25 90       	lpm	r2, Z+
    91a8:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    91aa:	c6 54       	subi	r28, 0x46	; 70
    91ac:	df 4f       	sbci	r29, 0xFF	; 255
    91ae:	48 81       	ld	r20, Y
    91b0:	59 81       	ldd	r21, Y+1	; 0x01
    91b2:	ca 5b       	subi	r28, 0xBA	; 186
    91b4:	d0 40       	sbci	r29, 0x00	; 0
    91b6:	24 0e       	add	r2, r20
    91b8:	35 1e       	adc	r3, r21
    91ba:	f6 01       	movw	r30, r12
    91bc:	e7 59       	subi	r30, 0x97	; 151
    91be:	fe 4f       	sbci	r31, 0xFE	; 254
    91c0:	e6 0d       	add	r30, r6
    91c2:	f7 1d       	adc	r31, r7
    91c4:	a5 90       	lpm	r10, Z+
    91c6:	b4 90       	lpm	r11, Z
    91c8:	c8 54       	subi	r28, 0x48	; 72
    91ca:	df 4f       	sbci	r29, 0xFF	; 255
    91cc:	68 81       	ld	r22, Y
    91ce:	79 81       	ldd	r23, Y+1	; 0x01
    91d0:	c8 5b       	subi	r28, 0xB8	; 184
    91d2:	d0 40       	sbci	r29, 0x00	; 0
    91d4:	a6 0e       	add	r10, r22
    91d6:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    91d8:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    91dc:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
    91e0:	10 e0       	ldi	r17, 0x00	; 0
    91e2:	00 e0       	ldi	r16, 0x00	; 0
    91e4:	55 24       	eor	r5, r5
    91e6:	fc 01       	movw	r30, r24
    91e8:	ff 27       	eor	r31, r31
    91ea:	c2 54       	subi	r28, 0x42	; 66
    91ec:	df 4f       	sbci	r29, 0xFF	; 255
    91ee:	f9 83       	std	Y+1, r31	; 0x01
    91f0:	e8 83       	st	Y, r30
    91f2:	ce 5b       	subi	r28, 0xBE	; 190
    91f4:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5277
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    91f6:	91 01       	movw	r18, r2
    91f8:	24 0d       	add	r18, r4
    91fa:	35 1d       	adc	r19, r5
    91fc:	c6 53       	subi	r28, 0x36	; 54
    91fe:	df 4f       	sbci	r29, 0xFF	; 255
    9200:	39 83       	std	Y+1, r19	; 0x01
    9202:	28 83       	st	Y, r18
    9204:	ca 5c       	subi	r28, 0xCA	; 202
    9206:	d0 40       	sbci	r29, 0x00	; 0
    9208:	7f 01       	movw	r14, r30
    920a:	ea 0c       	add	r14, r10
    920c:	fb 1c       	adc	r15, r11
    920e:	c6 53       	subi	r28, 0x36	; 54
    9210:	df 4f       	sbci	r29, 0xFF	; 255
    9212:	28 81       	ld	r18, Y
    9214:	39 81       	ldd	r19, Y+1	; 0x01
    9216:	ca 5c       	subi	r28, 0xCA	; 202
    9218:	d0 40       	sbci	r29, 0x00	; 0
    921a:	20 1b       	sub	r18, r16
    921c:	31 0b       	sbc	r19, r17
    921e:	a7 01       	movw	r20, r14
    9220:	40 1b       	sub	r20, r16
    9222:	51 0b       	sbc	r21, r17
    9224:	b1 01       	movw	r22, r2
    9226:	60 0f       	add	r22, r16
    9228:	71 1f       	adc	r23, r17
    922a:	c5 01       	movw	r24, r10
    922c:	80 0f       	add	r24, r16
    922e:	91 1f       	adc	r25, r17
    9230:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    9234:	0f 5f       	subi	r16, 0xFF	; 255
    9236:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5276
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    9238:	03 30       	cpi	r16, 0x03	; 3
    923a:	11 05       	cpc	r17, r1
    923c:	41 f7       	brne	.-48     	; 0x920e <draw_menu(bool)+0xb86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5279
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    923e:	f4 01       	movw	r30, r8
    9240:	01 90       	ld	r0, Z+
    9242:	00 20       	and	r0, r0
    9244:	e9 f7       	brne	.-6      	; 0x9240 <draw_menu(bool)+0xbb8>
    9246:	31 97       	sbiw	r30, 0x01	; 1
    9248:	e8 19       	sub	r30, r8
    924a:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    924c:	c4 54       	subi	r28, 0x44	; 68
    924e:	df 4f       	sbci	r29, 0xFF	; 255
    9250:	88 81       	ld	r24, Y
    9252:	cc 5b       	subi	r28, 0xBC	; 188
    9254:	d0 40       	sbci	r29, 0x00	; 0
    9256:	88 0f       	add	r24, r24
    9258:	c4 54       	subi	r28, 0x44	; 68
    925a:	df 4f       	sbci	r29, 0xFF	; 255
    925c:	38 81       	ld	r19, Y
    925e:	cc 5b       	subi	r28, 0xBC	; 188
    9260:	d0 40       	sbci	r29, 0x00	; 0
    9262:	83 0f       	add	r24, r19
    9264:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5281
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    9266:	a2 01       	movw	r20, r4
    9268:	48 1b       	sub	r20, r24
    926a:	51 09       	sbc	r21, r1
    926c:	57 ff       	sbrs	r21, 7
    926e:	02 c0       	rjmp	.+4      	; 0x9274 <draw_menu(bool)+0xbec>
    9270:	4d 5f       	subi	r20, 0xFD	; 253
    9272:	5f 4f       	sbci	r21, 0xFF	; 255
    9274:	55 95       	asr	r21
    9276:	47 95       	ror	r20
    9278:	55 95       	asr	r21
    927a:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5282
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    927c:	42 0d       	add	r20, r2
    927e:	53 2d       	mov	r21, r3
    9280:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    9282:	66 e0       	ldi	r22, 0x06	; 6
    9284:	e6 9f       	mul	r30, r22
    9286:	f0 01       	movw	r30, r0
    9288:	11 24       	eor	r1, r1
    928a:	c4 54       	subi	r28, 0x44	; 68
    928c:	df 4f       	sbci	r29, 0xFF	; 255
    928e:	78 81       	ld	r23, Y
    9290:	cc 5b       	subi	r28, 0xBC	; 188
    9292:	d0 40       	sbci	r29, 0x00	; 0
    9294:	7e 9f       	mul	r23, r30
    9296:	c0 01       	movw	r24, r0
    9298:	7f 9f       	mul	r23, r31
    929a:	90 0d       	add	r25, r0
    929c:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5280
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    929e:	99 27       	eor	r25, r25
    92a0:	c2 54       	subi	r28, 0x42	; 66
    92a2:	df 4f       	sbci	r29, 0xFF	; 255
    92a4:	68 81       	ld	r22, Y
    92a6:	79 81       	ldd	r23, Y+1	; 0x01
    92a8:	ce 5b       	subi	r28, 0xBE	; 190
    92aa:	d0 40       	sbci	r29, 0x00	; 0
    92ac:	68 1b       	sub	r22, r24
    92ae:	79 0b       	sbc	r23, r25
    92b0:	77 ff       	sbrs	r23, 7
    92b2:	02 c0       	rjmp	.+4      	; 0x92b8 <draw_menu(bool)+0xc30>
    92b4:	6f 5f       	subi	r22, 0xFF	; 255
    92b6:	7f 4f       	sbci	r23, 0xFF	; 255
    92b8:	75 95       	asr	r23
    92ba:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5282
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    92bc:	6a 0d       	add	r22, r10
    92be:	7b 2d       	mov	r23, r11
    92c0:	71 1d       	adc	r23, r1
    92c2:	ee 24       	eor	r14, r14
    92c4:	ea 94       	dec	r14
    92c6:	fe 2c       	mov	r15, r14
    92c8:	10 e0       	ldi	r17, 0x00	; 0
    92ca:	00 e0       	ldi	r16, 0x00	; 0
    92cc:	c4 54       	subi	r28, 0x44	; 68
    92ce:	df 4f       	sbci	r29, 0xFF	; 255
    92d0:	28 81       	ld	r18, Y
    92d2:	cc 5b       	subi	r28, 0xBC	; 188
    92d4:	d0 40       	sbci	r29, 0x00	; 0
    92d6:	c4 01       	movw	r24, r8
    92d8:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5284
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    92dc:	cc 54       	subi	r28, 0x4C	; 76
    92de:	df 4f       	sbci	r29, 0xFF	; 255
    92e0:	e8 81       	ld	r30, Y
    92e2:	f9 81       	ldd	r31, Y+1	; 0x01
    92e4:	c4 5b       	subi	r28, 0xB4	; 180
    92e6:	d0 40       	sbci	r29, 0x00	; 0
    92e8:	01 90       	ld	r0, Z+
    92ea:	00 20       	and	r0, r0
    92ec:	e9 f7       	brne	.-6      	; 0x92e8 <draw_menu(bool)+0xc60>
    92ee:	31 97       	sbiw	r30, 0x01	; 1
    92f0:	cc 54       	subi	r28, 0x4C	; 76
    92f2:	df 4f       	sbci	r29, 0xFF	; 255
    92f4:	88 81       	ld	r24, Y
    92f6:	99 81       	ldd	r25, Y+1	; 0x01
    92f8:	c4 5b       	subi	r28, 0xB4	; 180
    92fa:	d0 40       	sbci	r29, 0x00	; 0
    92fc:	e8 1b       	sub	r30, r24
    92fe:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5286
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    9300:	a2 01       	movw	r20, r4
    9302:	46 50       	subi	r20, 0x06	; 6
    9304:	51 09       	sbc	r21, r1
    9306:	57 ff       	sbrs	r21, 7
    9308:	02 c0       	rjmp	.+4      	; 0x930e <draw_menu(bool)+0xc86>
    930a:	4d 5f       	subi	r20, 0xFD	; 253
    930c:	5f 4f       	sbci	r21, 0xFF	; 255
    930e:	55 95       	asr	r21
    9310:	47 95       	ror	r20
    9312:	55 95       	asr	r21
    9314:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5287
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    9316:	55 27       	eor	r21, r21
    9318:	ca 01       	movw	r24, r20
    931a:	88 0f       	add	r24, r24
    931c:	99 1f       	adc	r25, r25
    931e:	48 0f       	add	r20, r24
    9320:	59 1f       	adc	r21, r25
    9322:	42 0d       	add	r20, r2
    9324:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    9326:	96 e0       	ldi	r25, 0x06	; 6
    9328:	e9 9f       	mul	r30, r25
    932a:	f0 01       	movw	r30, r0
    932c:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5285
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    932e:	ff 27       	eor	r31, r31
    9330:	c2 54       	subi	r28, 0x42	; 66
    9332:	df 4f       	sbci	r29, 0xFF	; 255
    9334:	68 81       	ld	r22, Y
    9336:	79 81       	ldd	r23, Y+1	; 0x01
    9338:	ce 5b       	subi	r28, 0xBE	; 190
    933a:	d0 40       	sbci	r29, 0x00	; 0
    933c:	6e 1b       	sub	r22, r30
    933e:	7f 0b       	sbc	r23, r31
    9340:	77 ff       	sbrs	r23, 7
    9342:	02 c0       	rjmp	.+4      	; 0x9348 <draw_menu(bool)+0xcc0>
    9344:	6f 5f       	subi	r22, 0xFF	; 255
    9346:	7f 4f       	sbci	r23, 0xFF	; 255
    9348:	75 95       	asr	r23
    934a:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5287
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    934c:	6a 0d       	add	r22, r10
    934e:	7b 2d       	mov	r23, r11
    9350:	71 1d       	adc	r23, r1
    9352:	ee 24       	eor	r14, r14
    9354:	ea 94       	dec	r14
    9356:	fe 2c       	mov	r15, r14
    9358:	10 e0       	ldi	r17, 0x00	; 0
    935a:	00 e0       	ldi	r16, 0x00	; 0
    935c:	21 e0       	ldi	r18, 0x01	; 1
    935e:	ce 01       	movw	r24, r28
    9360:	01 96       	adiw	r24, 0x01	; 1
    9362:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    9366:	cc 53       	subi	r28, 0x3C	; 60
    9368:	df 4f       	sbci	r29, 0xFF	; 255
    936a:	e8 81       	ld	r30, Y
    936c:	f9 81       	ldd	r31, Y+1	; 0x01
    936e:	c4 5c       	subi	r28, 0xC4	; 196
    9370:	d0 40       	sbci	r29, 0x00	; 0
    9372:	ef 2b       	or	r30, r31
    9374:	09 f4       	brne	.+2      	; 0x9378 <draw_menu(bool)+0xcf0>
    9376:	66 c0       	rjmp	.+204    	; 0x9444 <draw_menu(bool)+0xdbc>
    9378:	ca 53       	subi	r28, 0x3A	; 58
    937a:	df 4f       	sbci	r29, 0xFF	; 255
    937c:	28 81       	ld	r18, Y
    937e:	39 81       	ldd	r19, Y+1	; 0x01
    9380:	c6 5c       	subi	r28, 0xC6	; 198
    9382:	d0 40       	sbci	r29, 0x00	; 0
    9384:	23 2b       	or	r18, r19
    9386:	09 f4       	brne	.+2      	; 0x938a <draw_menu(bool)+0xd02>
    9388:	5d c0       	rjmp	.+186    	; 0x9444 <draw_menu(bool)+0xdbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    938a:	f6 01       	movw	r30, r12
    938c:	e1 59       	subi	r30, 0x91	; 145
    938e:	fe 4f       	sbci	r31, 0xFE	; 254
    9390:	e6 0d       	add	r30, r6
    9392:	f7 1d       	adc	r31, r7
    9394:	25 91       	lpm	r18, Z+
    9396:	34 91       	lpm	r19, Z
    9398:	f6 01       	movw	r30, r12
    939a:	e3 59       	subi	r30, 0x93	; 147
    939c:	fe 4f       	sbci	r31, 0xFE	; 254
    939e:	e6 0d       	add	r30, r6
    93a0:	f7 1d       	adc	r31, r7
    93a2:	45 91       	lpm	r20, Z+
    93a4:	54 91       	lpm	r21, Z
    93a6:	f6 01       	movw	r30, r12
    93a8:	e5 59       	subi	r30, 0x95	; 149
    93aa:	fe 4f       	sbci	r31, 0xFE	; 254
    93ac:	e6 0d       	add	r30, r6
    93ae:	f7 1d       	adc	r31, r7
    93b0:	65 91       	lpm	r22, Z+
    93b2:	74 91       	lpm	r23, Z
    93b4:	f6 01       	movw	r30, r12
    93b6:	e7 59       	subi	r30, 0x97	; 151
    93b8:	fe 4f       	sbci	r31, 0xFE	; 254
    93ba:	e6 0d       	add	r30, r6
    93bc:	f7 1d       	adc	r31, r7
    93be:	85 91       	lpm	r24, Z+
    93c0:	94 91       	lpm	r25, Z
    93c2:	c6 54       	subi	r28, 0x46	; 70
    93c4:	df 4f       	sbci	r29, 0xFF	; 255
    93c6:	e8 81       	ld	r30, Y
    93c8:	f9 81       	ldd	r31, Y+1	; 0x01
    93ca:	ca 5b       	subi	r28, 0xBA	; 186
    93cc:	d0 40       	sbci	r29, 0x00	; 0
    93ce:	6e 0f       	add	r22, r30
    93d0:	7f 1f       	adc	r23, r31
    93d2:	ca 53       	subi	r28, 0x3A	; 58
    93d4:	df 4f       	sbci	r29, 0xFF	; 255
    93d6:	e8 80       	ld	r14, Y
    93d8:	f9 80       	ldd	r15, Y+1	; 0x01
    93da:	c6 5c       	subi	r28, 0xC6	; 198
    93dc:	d0 40       	sbci	r29, 0x00	; 0
    93de:	cc 53       	subi	r28, 0x3C	; 60
    93e0:	df 4f       	sbci	r29, 0xFF	; 255
    93e2:	08 81       	ld	r16, Y
    93e4:	19 81       	ldd	r17, Y+1	; 0x01
    93e6:	c4 5c       	subi	r28, 0xC4	; 196
    93e8:	d0 40       	sbci	r29, 0x00	; 0
    93ea:	c8 54       	subi	r28, 0x48	; 72
    93ec:	df 4f       	sbci	r29, 0xFF	; 255
    93ee:	e8 81       	ld	r30, Y
    93f0:	f9 81       	ldd	r31, Y+1	; 0x01
    93f2:	c8 5b       	subi	r28, 0xB8	; 184
    93f4:	d0 40       	sbci	r29, 0x00	; 0
    93f6:	8e 0f       	add	r24, r30
    93f8:	9f 1f       	adc	r25, r31
    93fa:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    93fe:	18 2f       	mov	r17, r24
    9400:	88 23       	and	r24, r24
    9402:	01 f1       	breq	.+64     	; 0x9444 <draw_menu(bool)+0xdbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    9404:	f6 01       	movw	r30, r12
    9406:	e9 58       	subi	r30, 0x89	; 137
    9408:	fe 4f       	sbci	r31, 0xFE	; 254
    940a:	e6 0d       	add	r30, r6
    940c:	f7 1d       	adc	r31, r7
    940e:	25 91       	lpm	r18, Z+
    9410:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    9412:	f6 01       	movw	r30, r12
    9414:	ea 58       	subi	r30, 0x8A	; 138
    9416:	fe 4f       	sbci	r31, 0xFE	; 254
    9418:	e6 0d       	add	r30, r6
    941a:	f7 1d       	adc	r31, r7
    941c:	84 91       	lpm	r24, Z
    941e:	cd 54       	subi	r28, 0x4D	; 77
    9420:	df 4f       	sbci	r29, 0xFF	; 255
    9422:	68 81       	ld	r22, Y
    9424:	c3 5b       	subi	r28, 0xB3	; 179
    9426:	d0 40       	sbci	r29, 0x00	; 0
    9428:	70 e0       	ldi	r23, 0x00	; 0
    942a:	ca 54       	subi	r28, 0x4A	; 74
    942c:	df 4f       	sbci	r29, 0xFF	; 255
    942e:	48 81       	ld	r20, Y
    9430:	c6 5b       	subi	r28, 0xB6	; 182
    9432:	d0 40       	sbci	r29, 0x00	; 0
    9434:	90 e0       	ldi	r25, 0x00	; 0
    9436:	f9 01       	movw	r30, r18
    9438:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
        ret = true;
    943a:	c4 53       	subi	r28, 0x34	; 52
    943c:	df 4f       	sbci	r29, 0xFF	; 255
    943e:	18 83       	st	Y, r17
    9440:	cc 5c       	subi	r28, 0xCC	; 204
    9442:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1917
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    9444:	ca 54       	subi	r28, 0x4A	; 74
    9446:	df 4f       	sbci	r29, 0xFF	; 255
    9448:	f8 81       	ld	r31, Y
    944a:	c6 5b       	subi	r28, 0xB6	; 182
    944c:	d0 40       	sbci	r29, 0x00	; 0
    944e:	ff 5f       	subi	r31, 0xFF	; 255
    9450:	ca 54       	subi	r28, 0x4A	; 74
    9452:	df 4f       	sbci	r29, 0xFF	; 255
    9454:	f8 83       	st	Y, r31
    9456:	c6 5b       	subi	r28, 0xB6	; 182
    9458:	d0 40       	sbci	r29, 0x00	; 0
    945a:	20 ce       	rjmp	.-960    	; 0x909c <draw_menu(bool)+0xa14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1944
        fntargs =  pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    945c:	c4 53       	subi	r28, 0x34	; 52
    945e:	df 4f       	sbci	r29, 0xFF	; 255
    9460:	28 81       	ld	r18, Y
    9462:	cc 5c       	subi	r28, 0xCC	; 204
    9464:	d0 40       	sbci	r29, 0x00	; 0
    9466:	21 11       	cpse	r18, r1
    9468:	0c 94 22 56 	jmp	0xac44	; 0xac44 <draw_menu(bool)+0x25bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    946c:	51 2c       	mov	r5, r1
    946e:	43 01       	movw	r8, r6
    9470:	3e e3       	ldi	r19, 0x3E	; 62
    9472:	83 1a       	sub	r8, r19
    9474:	3d ef       	ldi	r19, 0xFD	; 253
    9476:	93 0a       	sbc	r9, r19
    9478:	f4 01       	movw	r30, r8
    947a:	84 91       	lpm	r24, Z
    947c:	58 16       	cp	r5, r24
    947e:	08 f0       	brcs	.+2      	; 0x9482 <draw_menu(bool)+0xdfa>
    9480:	d6 c0       	rjmp	.+428    	; 0x962e <draw_menu(bool)+0xfa6>
    9482:	f0 e1       	ldi	r31, 0x10	; 16
    9484:	5f 9e       	mul	r5, r31
    9486:	60 01       	movw	r12, r0
    9488:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1949
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = pgm_read_word(&symbol_button_1->enable_show);
    948a:	f6 01       	movw	r30, r12
    948c:	e8 51       	subi	r30, 0x18	; 24
    948e:	fe 4f       	sbci	r31, 0xFE	; 254
    9490:	e6 0d       	add	r30, r6
    9492:	f7 1d       	adc	r31, r7
    9494:	25 91       	lpm	r18, Z+
    9496:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1950
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    9498:	56 01       	movw	r10, r12
    949a:	4c e1       	ldi	r20, 0x1C	; 28
    949c:	a4 1a       	sub	r10, r20
    949e:	4e ef       	ldi	r20, 0xFE	; 254
    94a0:	b4 0a       	sbc	r11, r20
    94a2:	a6 0c       	add	r10, r6
    94a4:	b7 1c       	adc	r11, r7
    94a6:	f5 01       	movw	r30, r10
    94a8:	84 91       	lpm	r24, Z
    94aa:	cd 54       	subi	r28, 0x4D	; 77
    94ac:	df 4f       	sbci	r29, 0xFF	; 255
    94ae:	68 81       	ld	r22, Y
    94b0:	c3 5b       	subi	r28, 0xB3	; 179
    94b2:	d0 40       	sbci	r29, 0x00	; 0
    94b4:	70 e0       	ldi	r23, 0x00	; 0
    94b6:	45 2d       	mov	r20, r5
    94b8:	90 e0       	ldi	r25, 0x00	; 0
    94ba:	f9 01       	movw	r30, r18
    94bc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1951
    if (active == 0) continue;
    94be:	88 23       	and	r24, r24
    94c0:	09 f4       	brne	.+2      	; 0x94c4 <draw_menu(bool)+0xe3c>
    94c2:	b3 c0       	rjmp	.+358    	; 0x962a <draw_menu(bool)+0xfa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1952
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    94c4:	f6 01       	movw	r30, r12
    94c6:	e9 51       	subi	r30, 0x19	; 25
    94c8:	fe 4f       	sbci	r31, 0xFE	; 254
    94ca:	e6 0d       	add	r30, r6
    94cc:	f7 1d       	adc	r31, r7
    94ce:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1953
    if (enable_redraw(rdr, redraw_class) == true)
    94d0:	cf 52       	subi	r28, 0x2F	; 47
    94d2:	df 4f       	sbci	r29, 0xFF	; 255
    94d4:	68 81       	ld	r22, Y
    94d6:	c1 5d       	subi	r28, 0xD1	; 209
    94d8:	d0 40       	sbci	r29, 0x00	; 0
    94da:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    94de:	88 23       	and	r24, r24
    94e0:	09 f4       	brne	.+2      	; 0x94e4 <draw_menu(bool)+0xe5c>
    94e2:	3c c0       	rjmp	.+120    	; 0x955c <draw_menu(bool)+0xed4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1957
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    94e4:	f6 01       	movw	r30, r12
    94e6:	e6 52       	subi	r30, 0x26	; 38
    94e8:	fe 4f       	sbci	r31, 0xFE	; 254
    94ea:	e6 0d       	add	r30, r6
    94ec:	f7 1d       	adc	r31, r7
    94ee:	e5 90       	lpm	r14, Z+
    94f0:	f4 90       	lpm	r15, Z
    94f2:	f6 01       	movw	r30, r12
    94f4:	ed 51       	subi	r30, 0x1D	; 29
    94f6:	fe 4f       	sbci	r31, 0xFE	; 254
    94f8:	e6 0d       	add	r30, r6
    94fa:	f7 1d       	adc	r31, r7
    94fc:	05 91       	lpm	r16, Z+
    94fe:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    9500:	f6 01       	movw	r30, r12
    9502:	ef 51       	subi	r30, 0x1F	; 31
    9504:	fe 4f       	sbci	r31, 0xFE	; 254
    9506:	e6 0d       	add	r30, r6
    9508:	f7 1d       	adc	r31, r7
    950a:	25 91       	lpm	r18, Z+
    950c:	34 91       	lpm	r19, Z
    950e:	f6 01       	movw	r30, r12
    9510:	e1 52       	subi	r30, 0x21	; 33
    9512:	fe 4f       	sbci	r31, 0xFE	; 254
    9514:	e6 0d       	add	r30, r6
    9516:	f7 1d       	adc	r31, r7
    9518:	45 91       	lpm	r20, Z+
    951a:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1955
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    951c:	f6 01       	movw	r30, r12
    951e:	e3 52       	subi	r30, 0x23	; 35
    9520:	fe 4f       	sbci	r31, 0xFE	; 254
    9522:	e6 0d       	add	r30, r6
    9524:	f7 1d       	adc	r31, r7
    9526:	65 91       	lpm	r22, Z+
    9528:	74 91       	lpm	r23, Z
    952a:	f6 01       	movw	r30, r12
    952c:	e5 52       	subi	r30, 0x25	; 37
    952e:	fe 4f       	sbci	r31, 0xFE	; 254
    9530:	e6 0d       	add	r30, r6
    9532:	f7 1d       	adc	r31, r7
    9534:	85 91       	lpm	r24, Z+
    9536:	94 91       	lpm	r25, Z
    9538:	c6 54       	subi	r28, 0x46	; 70
    953a:	df 4f       	sbci	r29, 0xFF	; 255
    953c:	e8 81       	ld	r30, Y
    953e:	f9 81       	ldd	r31, Y+1	; 0x01
    9540:	ca 5b       	subi	r28, 0xBA	; 186
    9542:	d0 40       	sbci	r29, 0x00	; 0
    9544:	6e 0f       	add	r22, r30
    9546:	7f 1f       	adc	r23, r31
    9548:	c8 54       	subi	r28, 0x48	; 72
    954a:	df 4f       	sbci	r29, 0xFF	; 255
    954c:	e8 81       	ld	r30, Y
    954e:	f9 81       	ldd	r31, Y+1	; 0x01
    9550:	c8 5b       	subi	r28, 0xB8	; 184
    9552:	d0 40       	sbci	r29, 0x00	; 0
    9554:	8e 0f       	add	r24, r30
    9556:	9f 1f       	adc	r25, r31
    9558:	0e 94 7e 31 	call	0x62fc	; 0x62fc <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1959
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    955c:	cc 53       	subi	r28, 0x3C	; 60
    955e:	df 4f       	sbci	r29, 0xFF	; 255
    9560:	28 81       	ld	r18, Y
    9562:	39 81       	ldd	r19, Y+1	; 0x01
    9564:	c4 5c       	subi	r28, 0xC4	; 196
    9566:	d0 40       	sbci	r29, 0x00	; 0
    9568:	23 2b       	or	r18, r19
    956a:	09 f4       	brne	.+2      	; 0x956e <draw_menu(bool)+0xee6>
    956c:	5e c0       	rjmp	.+188    	; 0x962a <draw_menu(bool)+0xfa2>
    956e:	ca 53       	subi	r28, 0x3A	; 58
    9570:	df 4f       	sbci	r29, 0xFF	; 255
    9572:	48 81       	ld	r20, Y
    9574:	59 81       	ldd	r21, Y+1	; 0x01
    9576:	c6 5c       	subi	r28, 0xC6	; 198
    9578:	d0 40       	sbci	r29, 0x00	; 0
    957a:	45 2b       	or	r20, r21
    957c:	09 f4       	brne	.+2      	; 0x9580 <draw_menu(bool)+0xef8>
    957e:	55 c0       	rjmp	.+170    	; 0x962a <draw_menu(bool)+0xfa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    9580:	f6 01       	movw	r30, r12
    9582:	ef 51       	subi	r30, 0x1F	; 31
    9584:	fe 4f       	sbci	r31, 0xFE	; 254
    9586:	e6 0d       	add	r30, r6
    9588:	f7 1d       	adc	r31, r7
    958a:	25 91       	lpm	r18, Z+
    958c:	34 91       	lpm	r19, Z
    958e:	f6 01       	movw	r30, r12
    9590:	e1 52       	subi	r30, 0x21	; 33
    9592:	fe 4f       	sbci	r31, 0xFE	; 254
    9594:	e6 0d       	add	r30, r6
    9596:	f7 1d       	adc	r31, r7
    9598:	45 91       	lpm	r20, Z+
    959a:	54 91       	lpm	r21, Z
    959c:	f6 01       	movw	r30, r12
    959e:	e3 52       	subi	r30, 0x23	; 35
    95a0:	fe 4f       	sbci	r31, 0xFE	; 254
    95a2:	e6 0d       	add	r30, r6
    95a4:	f7 1d       	adc	r31, r7
    95a6:	65 91       	lpm	r22, Z+
    95a8:	74 91       	lpm	r23, Z
    95aa:	f6 01       	movw	r30, r12
    95ac:	e5 52       	subi	r30, 0x25	; 37
    95ae:	fe 4f       	sbci	r31, 0xFE	; 254
    95b0:	e6 0d       	add	r30, r6
    95b2:	f7 1d       	adc	r31, r7
    95b4:	85 91       	lpm	r24, Z+
    95b6:	94 91       	lpm	r25, Z
    95b8:	c6 54       	subi	r28, 0x46	; 70
    95ba:	df 4f       	sbci	r29, 0xFF	; 255
    95bc:	e8 81       	ld	r30, Y
    95be:	f9 81       	ldd	r31, Y+1	; 0x01
    95c0:	ca 5b       	subi	r28, 0xBA	; 186
    95c2:	d0 40       	sbci	r29, 0x00	; 0
    95c4:	6e 0f       	add	r22, r30
    95c6:	7f 1f       	adc	r23, r31
    95c8:	ca 53       	subi	r28, 0x3A	; 58
    95ca:	df 4f       	sbci	r29, 0xFF	; 255
    95cc:	e8 80       	ld	r14, Y
    95ce:	f9 80       	ldd	r15, Y+1	; 0x01
    95d0:	c6 5c       	subi	r28, 0xC6	; 198
    95d2:	d0 40       	sbci	r29, 0x00	; 0
    95d4:	cc 53       	subi	r28, 0x3C	; 60
    95d6:	df 4f       	sbci	r29, 0xFF	; 255
    95d8:	08 81       	ld	r16, Y
    95da:	19 81       	ldd	r17, Y+1	; 0x01
    95dc:	c4 5c       	subi	r28, 0xC4	; 196
    95de:	d0 40       	sbci	r29, 0x00	; 0
    95e0:	c8 54       	subi	r28, 0x48	; 72
    95e2:	df 4f       	sbci	r29, 0xFF	; 255
    95e4:	e8 81       	ld	r30, Y
    95e6:	f9 81       	ldd	r31, Y+1	; 0x01
    95e8:	c8 5b       	subi	r28, 0xB8	; 184
    95ea:	d0 40       	sbci	r29, 0x00	; 0
    95ec:	8e 0f       	add	r24, r30
    95ee:	9f 1f       	adc	r25, r31
    95f0:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    95f4:	18 2f       	mov	r17, r24
    95f6:	88 23       	and	r24, r24
    95f8:	c1 f0       	breq	.+48     	; 0x962a <draw_menu(bool)+0xfa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1962
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    95fa:	f6 01       	movw	r30, r12
    95fc:	eb 51       	subi	r30, 0x1B	; 27
    95fe:	fe 4f       	sbci	r31, 0xFE	; 254
    9600:	e6 0d       	add	r30, r6
    9602:	f7 1d       	adc	r31, r7
    9604:	25 91       	lpm	r18, Z+
    9606:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1963
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    9608:	f5 01       	movw	r30, r10
    960a:	84 91       	lpm	r24, Z
    960c:	cd 54       	subi	r28, 0x4D	; 77
    960e:	df 4f       	sbci	r29, 0xFF	; 255
    9610:	68 81       	ld	r22, Y
    9612:	c3 5b       	subi	r28, 0xB3	; 179
    9614:	d0 40       	sbci	r29, 0x00	; 0
    9616:	70 e0       	ldi	r23, 0x00	; 0
    9618:	45 2d       	mov	r20, r5
    961a:	90 e0       	ldi	r25, 0x00	; 0
    961c:	f9 01       	movw	r30, r18
    961e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1964
        ret = true;
    9620:	c4 53       	subi	r28, 0x34	; 52
    9622:	df 4f       	sbci	r29, 0xFF	; 255
    9624:	18 83       	st	Y, r17
    9626:	cc 5c       	subi	r28, 0xCC	; 204
    9628:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    962a:	53 94       	inc	r5
    962c:	25 cf       	rjmp	.-438    	; 0x9478 <draw_menu(bool)+0xdf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    962e:	c4 53       	subi	r28, 0x34	; 52
    9630:	df 4f       	sbci	r29, 0xFF	; 255
    9632:	f8 81       	ld	r31, Y
    9634:	cc 5c       	subi	r28, 0xCC	; 204
    9636:	d0 40       	sbci	r29, 0x00	; 0
    9638:	f1 11       	cpse	r31, r1
    963a:	0c 94 22 56 	jmp	0xac44	; 0xac44 <draw_menu(bool)+0x25bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1969
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    963e:	51 2c       	mov	r5, r1
    9640:	93 01       	movw	r18, r6
    9642:	2d 53       	subi	r18, 0x3D	; 61
    9644:	3d 4f       	sbci	r19, 0xFD	; 253
    9646:	cc 52       	subi	r28, 0x2C	; 44
    9648:	df 4f       	sbci	r29, 0xFF	; 255
    964a:	39 83       	std	Y+1, r19	; 0x01
    964c:	28 83       	st	Y, r18
    964e:	c4 5d       	subi	r28, 0xD4	; 212
    9650:	d0 40       	sbci	r29, 0x00	; 0
    9652:	cc 52       	subi	r28, 0x2C	; 44
    9654:	df 4f       	sbci	r29, 0xFF	; 255
    9656:	e8 81       	ld	r30, Y
    9658:	f9 81       	ldd	r31, Y+1	; 0x01
    965a:	c4 5d       	subi	r28, 0xD4	; 212
    965c:	d0 40       	sbci	r29, 0x00	; 0
    965e:	84 91       	lpm	r24, Z
    9660:	58 16       	cp	r5, r24
    9662:	08 f0       	brcs	.+2      	; 0x9666 <draw_menu(bool)+0xfde>
    9664:	60 c3       	rjmp	.+1728   	; 0x9d26 <draw_menu(bool)+0x169e>
    9666:	f7 e1       	ldi	r31, 0x17	; 23
    9668:	5f 9e       	mul	r5, r31
    966a:	60 01       	movw	r12, r0
    966c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1972
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    966e:	f6 01       	movw	r30, r12
    9670:	e0 59       	subi	r30, 0x90	; 144
    9672:	fd 4f       	sbci	r31, 0xFD	; 253
    9674:	e6 0d       	add	r30, r6
    9676:	f7 1d       	adc	r31, r7
    9678:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
    if (enable_redraw(rdr, redraw_class) == true)
    967a:	cf 52       	subi	r28, 0x2F	; 47
    967c:	df 4f       	sbci	r29, 0xFF	; 255
    967e:	68 81       	ld	r22, Y
    9680:	c1 5d       	subi	r28, 0xD1	; 209
    9682:	d0 40       	sbci	r29, 0x00	; 0
    9684:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    9688:	88 23       	and	r24, r24
    968a:	09 f4       	brne	.+2      	; 0x968e <draw_menu(bool)+0x1006>
    968c:	98 c1       	rjmp	.+816    	; 0x99be <draw_menu(bool)+0x1336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
    {
      loop_i = 0;
    968e:	ce 54       	subi	r28, 0x4E	; 78
    9690:	df 4f       	sbci	r29, 0xFF	; 255
    9692:	18 82       	st	Y, r1
    9694:	c2 5b       	subi	r28, 0xB2	; 178
    9696:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    9698:	f6 01       	movw	r30, r12
    969a:	e2 59       	subi	r30, 0x92	; 146
    969c:	fd 4f       	sbci	r31, 0xFD	; 253
    969e:	e6 0d       	add	r30, r6
    96a0:	f7 1d       	adc	r31, r7
    96a2:	25 91       	lpm	r18, Z+
    96a4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1979
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    96a6:	c6 01       	movw	r24, r12
    96a8:	87 59       	subi	r24, 0x97	; 151
    96aa:	9d 4f       	sbci	r25, 0xFD	; 253
    96ac:	a3 01       	movw	r20, r6
    96ae:	48 0f       	add	r20, r24
    96b0:	59 1f       	adc	r21, r25
    96b2:	ca 54       	subi	r28, 0x4A	; 74
    96b4:	df 4f       	sbci	r29, 0xFF	; 255
    96b6:	59 83       	std	Y+1, r21	; 0x01
    96b8:	48 83       	st	Y, r20
    96ba:	c6 5b       	subi	r28, 0xB6	; 182
    96bc:	d0 40       	sbci	r29, 0x00	; 0
    96be:	fa 01       	movw	r30, r20
    96c0:	84 91       	lpm	r24, Z
    96c2:	cd 54       	subi	r28, 0x4D	; 77
    96c4:	df 4f       	sbci	r29, 0xFF	; 255
    96c6:	68 81       	ld	r22, Y
    96c8:	c3 5b       	subi	r28, 0xB3	; 179
    96ca:	d0 40       	sbci	r29, 0x00	; 0
    96cc:	70 e0       	ldi	r23, 0x00	; 0
    96ce:	40 e0       	ldi	r20, 0x00	; 0
    96d0:	90 e0       	ldi	r25, 0x00	; 0
    96d2:	f9 01       	movw	r30, r18
    96d4:	19 95       	eicall
    96d6:	cf 54       	subi	r28, 0x4F	; 79
    96d8:	df 4f       	sbci	r29, 0xFF	; 255
    96da:	88 83       	st	Y, r24
    96dc:	c1 5b       	subi	r28, 0xB1	; 177
    96de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1980
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    96e0:	f6 01       	movw	r30, r12
    96e2:	e6 59       	subi	r30, 0x96	; 150
    96e4:	fd 4f       	sbci	r31, 0xFD	; 253
    96e6:	e6 0d       	add	r30, r6
    96e8:	f7 1d       	adc	r31, r7
    96ea:	25 91       	lpm	r18, Z+
    96ec:	34 91       	lpm	r19, Z
    96ee:	ce 52       	subi	r28, 0x2E	; 46
    96f0:	df 4f       	sbci	r29, 0xFF	; 255
    96f2:	39 83       	std	Y+1, r19	; 0x01
    96f4:	28 83       	st	Y, r18
    96f6:	c2 5d       	subi	r28, 0xD2	; 210
    96f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    96fa:	46 01       	movw	r8, r12
    96fc:	36 ea       	ldi	r19, 0xA6	; 166
    96fe:	83 1a       	sub	r8, r19
    9700:	3d ef       	ldi	r19, 0xFD	; 253
    9702:	93 0a       	sbc	r9, r19
    9704:	86 0c       	add	r8, r6
    9706:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    9708:	56 01       	movw	r10, r12
    970a:	44 ea       	ldi	r20, 0xA4	; 164
    970c:	a4 1a       	sub	r10, r20
    970e:	4d ef       	ldi	r20, 0xFD	; 253
    9710:	b4 0a       	sbc	r11, r20
    9712:	a6 0c       	add	r10, r6
    9714:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1985
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9716:	16 01       	movw	r2, r12
    9718:	5b e9       	ldi	r21, 0x9B	; 155
    971a:	25 1a       	sub	r2, r21
    971c:	5d ef       	ldi	r21, 0xFD	; 253
    971e:	35 0a       	sbc	r3, r21
    9720:	26 0c       	add	r2, r6
    9722:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9724:	c6 01       	movw	r24, r12
    9726:	8c 59       	subi	r24, 0x9C	; 156
    9728:	9d 4f       	sbci	r25, 0xFD	; 253
    972a:	b3 01       	movw	r22, r6
    972c:	68 0f       	add	r22, r24
    972e:	79 1f       	adc	r23, r25
    9730:	c4 54       	subi	r28, 0x44	; 68
    9732:	df 4f       	sbci	r29, 0xFF	; 255
    9734:	79 83       	std	Y+1, r23	; 0x01
    9736:	68 83       	st	Y, r22
    9738:	cc 5b       	subi	r28, 0xBC	; 188
    973a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    973c:	01 97       	sbiw	r24, 0x01	; 1
    973e:	f3 01       	movw	r30, r6
    9740:	e8 0f       	add	r30, r24
    9742:	f9 1f       	adc	r31, r25
    9744:	c2 54       	subi	r28, 0x42	; 66
    9746:	df 4f       	sbci	r29, 0xFF	; 255
    9748:	f9 83       	std	Y+1, r31	; 0x01
    974a:	e8 83       	st	Y, r30
    974c:	ce 5b       	subi	r28, 0xBE	; 190
    974e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    9750:	03 96       	adiw	r24, 0x03	; 3
    9752:	93 01       	movw	r18, r6
    9754:	28 0f       	add	r18, r24
    9756:	39 1f       	adc	r19, r25
    9758:	c8 53       	subi	r28, 0x38	; 56
    975a:	df 4f       	sbci	r29, 0xFF	; 255
    975c:	39 83       	std	Y+1, r19	; 0x01
    975e:	28 83       	st	Y, r18
    9760:	c8 5c       	subi	r28, 0xC8	; 200
    9762:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    9764:	04 97       	sbiw	r24, 0x04	; 4
    9766:	a3 01       	movw	r20, r6
    9768:	48 0f       	add	r20, r24
    976a:	59 1f       	adc	r21, r25
    976c:	c6 53       	subi	r28, 0x36	; 54
    976e:	df 4f       	sbci	r29, 0xFF	; 255
    9770:	59 83       	std	Y+1, r21	; 0x01
    9772:	48 83       	st	Y, r20
    9774:	ca 5c       	subi	r28, 0xCA	; 202
    9776:	d0 40       	sbci	r29, 0x00	; 0
    9778:	02 97       	sbiw	r24, 0x02	; 2
    977a:	b3 01       	movw	r22, r6
    977c:	68 0f       	add	r22, r24
    977e:	79 1f       	adc	r23, r25
    9780:	c3 53       	subi	r28, 0x33	; 51
    9782:	df 4f       	sbci	r29, 0xFF	; 255
    9784:	79 83       	std	Y+1, r23	; 0x01
    9786:	68 83       	st	Y, r22
    9788:	cd 5c       	subi	r28, 0xCD	; 205
    978a:	d0 40       	sbci	r29, 0x00	; 0
    978c:	02 97       	sbiw	r24, 0x02	; 2
    978e:	f3 01       	movw	r30, r6
    9790:	e8 0f       	add	r30, r24
    9792:	f9 1f       	adc	r31, r25
    9794:	c1 53       	subi	r28, 0x31	; 49
    9796:	df 4f       	sbci	r29, 0xFF	; 255
    9798:	f9 83       	std	Y+1, r31	; 0x01
    979a:	e8 83       	st	Y, r30
    979c:	cf 5c       	subi	r28, 0xCF	; 207
    979e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1977
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    97a0:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    97a2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1981
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    97a4:	ce 54       	subi	r28, 0x4E	; 78
    97a6:	df 4f       	sbci	r29, 0xFF	; 255
    97a8:	88 81       	ld	r24, Y
    97aa:	c2 5b       	subi	r28, 0xB2	; 178
    97ac:	d0 40       	sbci	r29, 0x00	; 0
    97ae:	cf 54       	subi	r28, 0x4F	; 79
    97b0:	df 4f       	sbci	r29, 0xFF	; 255
    97b2:	98 81       	ld	r25, Y
    97b4:	c1 5b       	subi	r28, 0xB1	; 177
    97b6:	d0 40       	sbci	r29, 0x00	; 0
    97b8:	89 17       	cp	r24, r25
    97ba:	08 f0       	brcs	.+2      	; 0x97be <draw_menu(bool)+0x1136>
    97bc:	00 c1       	rjmp	.+512    	; 0x99be <draw_menu(bool)+0x1336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    97be:	f4 01       	movw	r30, r8
    97c0:	45 91       	lpm	r20, Z+
    97c2:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    97c4:	f5 01       	movw	r30, r10
    97c6:	25 91       	lpm	r18, Z+
    97c8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1985
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    97ca:	f1 01       	movw	r30, r2
    97cc:	94 91       	lpm	r25, Z
    97ce:	99 23       	and	r25, r25
    97d0:	09 f4       	brne	.+2      	; 0x97d4 <draw_menu(bool)+0x114c>
    97d2:	b7 c0       	rjmp	.+366    	; 0x9942 <draw_menu(bool)+0x12ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1984
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    97d4:	c6 54       	subi	r28, 0x46	; 70
    97d6:	df 4f       	sbci	r29, 0xFF	; 255
    97d8:	68 81       	ld	r22, Y
    97da:	79 81       	ldd	r23, Y+1	; 0x01
    97dc:	ca 5b       	subi	r28, 0xBA	; 186
    97de:	d0 40       	sbci	r29, 0x00	; 0
    97e0:	62 0f       	add	r22, r18
    97e2:	73 1f       	adc	r23, r19
    97e4:	ce 53       	subi	r28, 0x3E	; 62
    97e6:	df 4f       	sbci	r29, 0xFF	; 255
    97e8:	79 83       	std	Y+1, r23	; 0x01
    97ea:	68 83       	st	Y, r22
    97ec:	c2 5c       	subi	r28, 0xC2	; 194
    97ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1990
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    97f0:	f1 01       	movw	r30, r2
    97f2:	94 91       	lpm	r25, Z
    97f4:	91 30       	cpi	r25, 0x01	; 1
    97f6:	09 f4       	brne	.+2      	; 0x97fa <draw_menu(bool)+0x1172>
    97f8:	c3 c0       	rjmp	.+390    	; 0x9980 <draw_menu(bool)+0x12f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    97fa:	c8 54       	subi	r28, 0x48	; 72
    97fc:	df 4f       	sbci	r29, 0xFF	; 255
    97fe:	28 81       	ld	r18, Y
    9800:	39 81       	ldd	r19, Y+1	; 0x01
    9802:	c8 5b       	subi	r28, 0xB8	; 184
    9804:	d0 40       	sbci	r29, 0x00	; 0
    9806:	24 0f       	add	r18, r20
    9808:	35 1f       	adc	r19, r21
    980a:	c0 54       	subi	r28, 0x40	; 64
    980c:	df 4f       	sbci	r29, 0xFF	; 255
    980e:	39 83       	std	Y+1, r19	; 0x01
    9810:	28 83       	st	Y, r18
    9812:	c0 5c       	subi	r28, 0xC0	; 192
    9814:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1995
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    9816:	f1 01       	movw	r30, r2
    9818:	94 91       	lpm	r25, Z
    981a:	92 30       	cpi	r25, 0x02	; 2
    981c:	09 f0       	breq	.+2      	; 0x9820 <draw_menu(bool)+0x1198>
    981e:	46 c0       	rjmp	.+140    	; 0x98ac <draw_menu(bool)+0x1224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9820:	f4 01       	movw	r30, r8
    9822:	25 91       	lpm	r18, Z+
    9824:	34 91       	lpm	r19, Z
    9826:	c2 54       	subi	r28, 0x42	; 66
    9828:	df 4f       	sbci	r29, 0xFF	; 255
    982a:	e8 81       	ld	r30, Y
    982c:	f9 81       	ldd	r31, Y+1	; 0x01
    982e:	ce 5b       	subi	r28, 0xBE	; 190
    9830:	d0 40       	sbci	r29, 0x00	; 0
    9832:	94 91       	lpm	r25, Z
    9834:	c8 54       	subi	r28, 0x48	; 72
    9836:	df 4f       	sbci	r29, 0xFF	; 255
    9838:	48 81       	ld	r20, Y
    983a:	59 81       	ldd	r21, Y+1	; 0x01
    983c:	c8 5b       	subi	r28, 0xB8	; 184
    983e:	d0 40       	sbci	r29, 0x00	; 0
    9840:	24 0f       	add	r18, r20
    9842:	35 1f       	adc	r19, r21
    9844:	b9 01       	movw	r22, r18
    9846:	9f 9d       	mul	r25, r15
    9848:	60 0d       	add	r22, r0
    984a:	71 1d       	adc	r23, r1
    984c:	11 24       	eor	r1, r1
    984e:	c0 54       	subi	r28, 0x40	; 64
    9850:	df 4f       	sbci	r29, 0xFF	; 255
    9852:	79 83       	std	Y+1, r23	; 0x01
    9854:	68 83       	st	Y, r22
    9856:	c0 5c       	subi	r28, 0xC0	; 192
    9858:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    985a:	f5 01       	movw	r30, r10
    985c:	25 91       	lpm	r18, Z+
    985e:	34 91       	lpm	r19, Z
    9860:	c4 54       	subi	r28, 0x44	; 68
    9862:	df 4f       	sbci	r29, 0xFF	; 255
    9864:	e8 81       	ld	r30, Y
    9866:	f9 81       	ldd	r31, Y+1	; 0x01
    9868:	cc 5b       	subi	r28, 0xBC	; 188
    986a:	d0 40       	sbci	r29, 0x00	; 0
    986c:	94 91       	lpm	r25, Z
    986e:	c6 54       	subi	r28, 0x46	; 70
    9870:	df 4f       	sbci	r29, 0xFF	; 255
    9872:	48 81       	ld	r20, Y
    9874:	59 81       	ldd	r21, Y+1	; 0x01
    9876:	ca 5b       	subi	r28, 0xBA	; 186
    9878:	d0 40       	sbci	r29, 0x00	; 0
    987a:	24 0f       	add	r18, r20
    987c:	35 1f       	adc	r19, r21
    987e:	b9 01       	movw	r22, r18
    9880:	94 9d       	mul	r25, r4
    9882:	60 0d       	add	r22, r0
    9884:	71 1d       	adc	r23, r1
    9886:	11 24       	eor	r1, r1
    9888:	ce 53       	subi	r28, 0x3E	; 62
    988a:	df 4f       	sbci	r29, 0xFF	; 255
    988c:	79 83       	std	Y+1, r23	; 0x01
    988e:	68 83       	st	Y, r22
    9890:	c2 5c       	subi	r28, 0xC2	; 194
    9892:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1999
          loop_t++;
    9894:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    9896:	c8 53       	subi	r28, 0x38	; 56
    9898:	df 4f       	sbci	r29, 0xFF	; 255
    989a:	e8 81       	ld	r30, Y
    989c:	f9 81       	ldd	r31, Y+1	; 0x01
    989e:	c8 5c       	subi	r28, 0xC8	; 200
    98a0:	d0 40       	sbci	r29, 0x00	; 0
    98a2:	94 91       	lpm	r25, Z
    98a4:	f9 16       	cp	r15, r25
    98a6:	10 f0       	brcs	.+4      	; 0x98ac <draw_menu(bool)+0x1224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
          {
            loop_t = 0;
            loop_r++;
    98a8:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2002
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    98aa:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
    98ac:	ca 54       	subi	r28, 0x4A	; 74
    98ae:	df 4f       	sbci	r29, 0xFF	; 255
    98b0:	e8 81       	ld	r30, Y
    98b2:	f9 81       	ldd	r31, Y+1	; 0x01
    98b4:	c6 5b       	subi	r28, 0xB6	; 182
    98b6:	d0 40       	sbci	r29, 0x00	; 0
    98b8:	44 91       	lpm	r20, Z
    98ba:	8e 01       	movw	r16, r28
    98bc:	0f 57       	subi	r16, 0x7F	; 127
    98be:	1f 4f       	sbci	r17, 0xFF	; 255
    98c0:	9e 01       	movw	r18, r28
    98c2:	2f 5f       	subi	r18, 0xFF	; 255
    98c4:	3f 4f       	sbci	r19, 0xFF	; 255
    98c6:	cd 54       	subi	r28, 0x4D	; 77
    98c8:	df 4f       	sbci	r29, 0xFF	; 255
    98ca:	68 81       	ld	r22, Y
    98cc:	c3 5b       	subi	r28, 0xB3	; 179
    98ce:	d0 40       	sbci	r29, 0x00	; 0
    98d0:	ce 52       	subi	r28, 0x2E	; 46
    98d2:	df 4f       	sbci	r29, 0xFF	; 255
    98d4:	e8 81       	ld	r30, Y
    98d6:	f9 81       	ldd	r31, Y+1	; 0x01
    98d8:	c2 5d       	subi	r28, 0xD2	; 210
    98da:	d0 40       	sbci	r29, 0x00	; 0
    98dc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    98de:	c6 53       	subi	r28, 0x36	; 54
    98e0:	df 4f       	sbci	r29, 0xFF	; 255
    98e2:	e8 81       	ld	r30, Y
    98e4:	f9 81       	ldd	r31, Y+1	; 0x01
    98e6:	ca 5c       	subi	r28, 0xCA	; 202
    98e8:	d0 40       	sbci	r29, 0x00	; 0
    98ea:	04 91       	lpm	r16, Z
    98ec:	c3 53       	subi	r28, 0x33	; 51
    98ee:	df 4f       	sbci	r29, 0xFF	; 255
    98f0:	e8 81       	ld	r30, Y
    98f2:	f9 81       	ldd	r31, Y+1	; 0x01
    98f4:	cd 5c       	subi	r28, 0xCD	; 205
    98f6:	d0 40       	sbci	r29, 0x00	; 0
    98f8:	25 91       	lpm	r18, Z+
    98fa:	34 91       	lpm	r19, Z
    98fc:	c1 53       	subi	r28, 0x31	; 49
    98fe:	df 4f       	sbci	r29, 0xFF	; 255
    9900:	e8 81       	ld	r30, Y
    9902:	f9 81       	ldd	r31, Y+1	; 0x01
    9904:	cf 5c       	subi	r28, 0xCF	; 207
    9906:	d0 40       	sbci	r29, 0x00	; 0
    9908:	45 91       	lpm	r20, Z+
    990a:	54 91       	lpm	r21, Z
    990c:	e9 80       	ldd	r14, Y+1	; 0x01
    990e:	ce 53       	subi	r28, 0x3E	; 62
    9910:	df 4f       	sbci	r29, 0xFF	; 255
    9912:	68 81       	ld	r22, Y
    9914:	79 81       	ldd	r23, Y+1	; 0x01
    9916:	c2 5c       	subi	r28, 0xC2	; 194
    9918:	d0 40       	sbci	r29, 0x00	; 0
    991a:	c0 54       	subi	r28, 0x40	; 64
    991c:	df 4f       	sbci	r29, 0xFF	; 255
    991e:	88 81       	ld	r24, Y
    9920:	99 81       	ldd	r25, Y+1	; 0x01
    9922:	c0 5c       	subi	r28, 0xC0	; 192
    9924:	d0 40       	sbci	r29, 0x00	; 0
    9926:	0e 94 7e 31 	call	0x62fc	; 0x62fc <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
        loop_i++;
    992a:	ce 54       	subi	r28, 0x4E	; 78
    992c:	df 4f       	sbci	r29, 0xFF	; 255
    992e:	88 81       	ld	r24, Y
    9930:	c2 5b       	subi	r28, 0xB2	; 178
    9932:	d0 40       	sbci	r29, 0x00	; 0
    9934:	8f 5f       	subi	r24, 0xFF	; 255
    9936:	ce 54       	subi	r28, 0x4E	; 78
    9938:	df 4f       	sbci	r29, 0xFF	; 255
    993a:	88 83       	st	Y, r24
    993c:	c2 5b       	subi	r28, 0xB2	; 178
    993e:	d0 40       	sbci	r29, 0x00	; 0
    9940:	31 cf       	rjmp	.-414    	; 0x97a4 <draw_menu(bool)+0x111c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9942:	f5 01       	movw	r30, r10
    9944:	25 91       	lpm	r18, Z+
    9946:	34 91       	lpm	r19, Z
    9948:	c4 54       	subi	r28, 0x44	; 68
    994a:	df 4f       	sbci	r29, 0xFF	; 255
    994c:	e8 81       	ld	r30, Y
    994e:	f9 81       	ldd	r31, Y+1	; 0x01
    9950:	cc 5b       	subi	r28, 0xBC	; 188
    9952:	d0 40       	sbci	r29, 0x00	; 0
    9954:	94 91       	lpm	r25, Z
    9956:	c6 54       	subi	r28, 0x46	; 70
    9958:	df 4f       	sbci	r29, 0xFF	; 255
    995a:	68 81       	ld	r22, Y
    995c:	79 81       	ldd	r23, Y+1	; 0x01
    995e:	ca 5b       	subi	r28, 0xBA	; 186
    9960:	d0 40       	sbci	r29, 0x00	; 0
    9962:	26 0f       	add	r18, r22
    9964:	37 1f       	adc	r19, r23
    9966:	f9 01       	movw	r30, r18
    9968:	9f 9d       	mul	r25, r15
    996a:	e0 0d       	add	r30, r0
    996c:	f1 1d       	adc	r31, r1
    996e:	11 24       	eor	r1, r1
    9970:	ce 53       	subi	r28, 0x3E	; 62
    9972:	df 4f       	sbci	r29, 0xFF	; 255
    9974:	f9 83       	std	Y+1, r31	; 0x01
    9976:	e8 83       	st	Y, r30
    9978:	c2 5c       	subi	r28, 0xC2	; 194
    997a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1988
          loop_t++;
    997c:	f3 94       	inc	r15
    997e:	38 cf       	rjmp	.-400    	; 0x97f0 <draw_menu(bool)+0x1168>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9980:	f4 01       	movw	r30, r8
    9982:	25 91       	lpm	r18, Z+
    9984:	34 91       	lpm	r19, Z
    9986:	c2 54       	subi	r28, 0x42	; 66
    9988:	df 4f       	sbci	r29, 0xFF	; 255
    998a:	e8 81       	ld	r30, Y
    998c:	f9 81       	ldd	r31, Y+1	; 0x01
    998e:	ce 5b       	subi	r28, 0xBE	; 190
    9990:	d0 40       	sbci	r29, 0x00	; 0
    9992:	94 91       	lpm	r25, Z
    9994:	c8 54       	subi	r28, 0x48	; 72
    9996:	df 4f       	sbci	r29, 0xFF	; 255
    9998:	48 81       	ld	r20, Y
    999a:	59 81       	ldd	r21, Y+1	; 0x01
    999c:	c8 5b       	subi	r28, 0xB8	; 184
    999e:	d0 40       	sbci	r29, 0x00	; 0
    99a0:	24 0f       	add	r18, r20
    99a2:	35 1f       	adc	r19, r21
    99a4:	b9 01       	movw	r22, r18
    99a6:	9f 9d       	mul	r25, r15
    99a8:	60 0d       	add	r22, r0
    99aa:	71 1d       	adc	r23, r1
    99ac:	11 24       	eor	r1, r1
    99ae:	c0 54       	subi	r28, 0x40	; 64
    99b0:	df 4f       	sbci	r29, 0xFF	; 255
    99b2:	79 83       	std	Y+1, r23	; 0x01
    99b4:	68 83       	st	Y, r22
    99b6:	c0 5c       	subi	r28, 0xC0	; 192
    99b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1993
          loop_t++;
    99ba:	f3 94       	inc	r15
    99bc:	2c cf       	rjmp	.-424    	; 0x9816 <draw_menu(bool)+0x118e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2012
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    99be:	cc 53       	subi	r28, 0x3C	; 60
    99c0:	df 4f       	sbci	r29, 0xFF	; 255
    99c2:	28 81       	ld	r18, Y
    99c4:	39 81       	ldd	r19, Y+1	; 0x01
    99c6:	c4 5c       	subi	r28, 0xC4	; 196
    99c8:	d0 40       	sbci	r29, 0x00	; 0
    99ca:	23 2b       	or	r18, r19
    99cc:	09 f4       	brne	.+2      	; 0x99d0 <draw_menu(bool)+0x1348>
    99ce:	69 c1       	rjmp	.+722    	; 0x9ca2 <draw_menu(bool)+0x161a>
    99d0:	ca 53       	subi	r28, 0x3A	; 58
    99d2:	df 4f       	sbci	r29, 0xFF	; 255
    99d4:	48 81       	ld	r20, Y
    99d6:	59 81       	ldd	r21, Y+1	; 0x01
    99d8:	c6 5c       	subi	r28, 0xC6	; 198
    99da:	d0 40       	sbci	r29, 0x00	; 0
    99dc:	45 2b       	or	r20, r21
    99de:	09 f4       	brne	.+2      	; 0x99e2 <draw_menu(bool)+0x135a>
    99e0:	60 c1       	rjmp	.+704    	; 0x9ca2 <draw_menu(bool)+0x161a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
    {
      loop_i = 0;
    99e2:	ce 54       	subi	r28, 0x4E	; 78
    99e4:	df 4f       	sbci	r29, 0xFF	; 255
    99e6:	18 82       	st	Y, r1
    99e8:	c2 5b       	subi	r28, 0xB2	; 178
    99ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    99ec:	f6 01       	movw	r30, r12
    99ee:	e2 59       	subi	r30, 0x92	; 146
    99f0:	fd 4f       	sbci	r31, 0xFD	; 253
    99f2:	e6 0d       	add	r30, r6
    99f4:	f7 1d       	adc	r31, r7
    99f6:	25 91       	lpm	r18, Z+
    99f8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    99fa:	c6 01       	movw	r24, r12
    99fc:	87 59       	subi	r24, 0x97	; 151
    99fe:	9d 4f       	sbci	r25, 0xFD	; 253
    9a00:	b3 01       	movw	r22, r6
    9a02:	68 0f       	add	r22, r24
    9a04:	79 1f       	adc	r23, r25
    9a06:	c2 54       	subi	r28, 0x42	; 66
    9a08:	df 4f       	sbci	r29, 0xFF	; 255
    9a0a:	79 83       	std	Y+1, r23	; 0x01
    9a0c:	68 83       	st	Y, r22
    9a0e:	ce 5b       	subi	r28, 0xBE	; 190
    9a10:	d0 40       	sbci	r29, 0x00	; 0
    9a12:	fb 01       	movw	r30, r22
    9a14:	84 91       	lpm	r24, Z
    9a16:	cd 54       	subi	r28, 0x4D	; 77
    9a18:	df 4f       	sbci	r29, 0xFF	; 255
    9a1a:	68 81       	ld	r22, Y
    9a1c:	c3 5b       	subi	r28, 0xB3	; 179
    9a1e:	d0 40       	sbci	r29, 0x00	; 0
    9a20:	70 e0       	ldi	r23, 0x00	; 0
    9a22:	40 e0       	ldi	r20, 0x00	; 0
    9a24:	90 e0       	ldi	r25, 0x00	; 0
    9a26:	f9 01       	movw	r30, r18
    9a28:	19 95       	eicall
    9a2a:	c4 54       	subi	r28, 0x44	; 68
    9a2c:	df 4f       	sbci	r29, 0xFF	; 255
    9a2e:	88 83       	st	Y, r24
    9a30:	cc 5b       	subi	r28, 0xBC	; 188
    9a32:	d0 40       	sbci	r29, 0x00	; 0
    9a34:	cf 54       	subi	r28, 0x4F	; 79
    9a36:	df 4f       	sbci	r29, 0xFF	; 255
    9a38:	88 83       	st	Y, r24
    9a3a:	c1 5b       	subi	r28, 0xB1	; 177
    9a3c:	d0 40       	sbci	r29, 0x00	; 0
    9a3e:	ce 54       	subi	r28, 0x4E	; 78
    9a40:	df 4f       	sbci	r29, 0xFF	; 255
    9a42:	a8 80       	ld	r10, Y
    9a44:	c2 5b       	subi	r28, 0xB2	; 178
    9a46:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    9a48:	16 01       	movw	r2, r12
    9a4a:	f6 ea       	ldi	r31, 0xA6	; 166
    9a4c:	2f 1a       	sub	r2, r31
    9a4e:	fd ef       	ldi	r31, 0xFD	; 253
    9a50:	3f 0a       	sbc	r3, r31
    9a52:	26 0c       	add	r2, r6
    9a54:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    9a56:	46 01       	movw	r8, r12
    9a58:	24 ea       	ldi	r18, 0xA4	; 164
    9a5a:	82 1a       	sub	r8, r18
    9a5c:	2d ef       	ldi	r18, 0xFD	; 253
    9a5e:	92 0a       	sbc	r9, r18
    9a60:	86 0c       	add	r8, r6
    9a62:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2023
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9a64:	c6 01       	movw	r24, r12
    9a66:	8b 59       	subi	r24, 0x9B	; 155
    9a68:	9d 4f       	sbci	r25, 0xFD	; 253
    9a6a:	a3 01       	movw	r20, r6
    9a6c:	48 0f       	add	r20, r24
    9a6e:	59 1f       	adc	r21, r25
    9a70:	ca 54       	subi	r28, 0x4A	; 74
    9a72:	df 4f       	sbci	r29, 0xFF	; 255
    9a74:	59 83       	std	Y+1, r21	; 0x01
    9a76:	48 83       	st	Y, r20
    9a78:	c6 5b       	subi	r28, 0xB6	; 182
    9a7a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2025
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9a7c:	01 97       	sbiw	r24, 0x01	; 1
    9a7e:	b3 01       	movw	r22, r6
    9a80:	68 0f       	add	r22, r24
    9a82:	79 1f       	adc	r23, r25
    9a84:	c8 53       	subi	r28, 0x38	; 56
    9a86:	df 4f       	sbci	r29, 0xFF	; 255
    9a88:	79 83       	std	Y+1, r23	; 0x01
    9a8a:	68 83       	st	Y, r22
    9a8c:	c8 5c       	subi	r28, 0xC8	; 200
    9a8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9a90:	01 97       	sbiw	r24, 0x01	; 1
    9a92:	f3 01       	movw	r30, r6
    9a94:	e8 0f       	add	r30, r24
    9a96:	f9 1f       	adc	r31, r25
    9a98:	c6 53       	subi	r28, 0x36	; 54
    9a9a:	df 4f       	sbci	r29, 0xFF	; 255
    9a9c:	f9 83       	std	Y+1, r31	; 0x01
    9a9e:	e8 83       	st	Y, r30
    9aa0:	ca 5c       	subi	r28, 0xCA	; 202
    9aa2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2038
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    9aa4:	03 96       	adiw	r24, 0x03	; 3
    9aa6:	93 01       	movw	r18, r6
    9aa8:	28 0f       	add	r18, r24
    9aaa:	39 1f       	adc	r19, r25
    9aac:	c3 53       	subi	r28, 0x33	; 51
    9aae:	df 4f       	sbci	r29, 0xFF	; 255
    9ab0:	39 83       	std	Y+1, r19	; 0x01
    9ab2:	28 83       	st	Y, r18
    9ab4:	cd 5c       	subi	r28, 0xCD	; 205
    9ab6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    9ab8:	06 97       	sbiw	r24, 0x06	; 6
    9aba:	a3 01       	movw	r20, r6
    9abc:	48 0f       	add	r20, r24
    9abe:	59 1f       	adc	r21, r25
    9ac0:	c1 53       	subi	r28, 0x31	; 49
    9ac2:	df 4f       	sbci	r29, 0xFF	; 255
    9ac4:	59 83       	std	Y+1, r21	; 0x01
    9ac6:	48 83       	st	Y, r20
    9ac8:	cf 5c       	subi	r28, 0xCF	; 207
    9aca:	d0 40       	sbci	r29, 0x00	; 0
    9acc:	02 97       	sbiw	r24, 0x02	; 2
    9ace:	b3 01       	movw	r22, r6
    9ad0:	68 0f       	add	r22, r24
    9ad2:	79 1f       	adc	r23, r25
    9ad4:	ce 52       	subi	r28, 0x2E	; 46
    9ad6:	df 4f       	sbci	r29, 0xFF	; 255
    9ad8:	79 83       	std	Y+1, r23	; 0x01
    9ada:	68 83       	st	Y, r22
    9adc:	c2 5d       	subi	r28, 0xD2	; 210
    9ade:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    9ae0:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    9ae2:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2019
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
    9ae4:	c4 54       	subi	r28, 0x44	; 68
    9ae6:	df 4f       	sbci	r29, 0xFF	; 255
    9ae8:	78 81       	ld	r23, Y
    9aea:	cc 5b       	subi	r28, 0xBC	; 188
    9aec:	d0 40       	sbci	r29, 0x00	; 0
    9aee:	a7 16       	cp	r10, r23
    9af0:	08 f0       	brcs	.+2      	; 0x9af4 <draw_menu(bool)+0x146c>
    9af2:	d7 c0       	rjmp	.+430    	; 0x9ca2 <draw_menu(bool)+0x161a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    9af4:	f1 01       	movw	r30, r2
    9af6:	25 91       	lpm	r18, Z+
    9af8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    9afa:	f4 01       	movw	r30, r8
    9afc:	85 91       	lpm	r24, Z+
    9afe:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2023
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9b00:	ca 54       	subi	r28, 0x4A	; 74
    9b02:	df 4f       	sbci	r29, 0xFF	; 255
    9b04:	e8 81       	ld	r30, Y
    9b06:	f9 81       	ldd	r31, Y+1	; 0x01
    9b08:	c6 5b       	subi	r28, 0xB6	; 182
    9b0a:	d0 40       	sbci	r29, 0x00	; 0
    9b0c:	44 91       	lpm	r20, Z
    9b0e:	44 23       	and	r20, r20
    9b10:	09 f4       	brne	.+2      	; 0x9b14 <draw_menu(bool)+0x148c>
    9b12:	cb c0       	rjmp	.+406    	; 0x9caa <draw_menu(bool)+0x1622>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    9b14:	c6 54       	subi	r28, 0x46	; 70
    9b16:	df 4f       	sbci	r29, 0xFF	; 255
    9b18:	48 81       	ld	r20, Y
    9b1a:	59 81       	ldd	r21, Y+1	; 0x01
    9b1c:	ca 5b       	subi	r28, 0xBA	; 186
    9b1e:	d0 40       	sbci	r29, 0x00	; 0
    9b20:	48 0f       	add	r20, r24
    9b22:	59 1f       	adc	r21, r25
    9b24:	ce 53       	subi	r28, 0x3E	; 62
    9b26:	df 4f       	sbci	r29, 0xFF	; 255
    9b28:	59 83       	std	Y+1, r21	; 0x01
    9b2a:	48 83       	st	Y, r20
    9b2c:	c2 5c       	subi	r28, 0xC2	; 194
    9b2e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    9b30:	ca 54       	subi	r28, 0x4A	; 74
    9b32:	df 4f       	sbci	r29, 0xFF	; 255
    9b34:	e8 81       	ld	r30, Y
    9b36:	f9 81       	ldd	r31, Y+1	; 0x01
    9b38:	c6 5b       	subi	r28, 0xB6	; 182
    9b3a:	d0 40       	sbci	r29, 0x00	; 0
    9b3c:	84 91       	lpm	r24, Z
    9b3e:	81 30       	cpi	r24, 0x01	; 1
    9b40:	09 f4       	brne	.+2      	; 0x9b44 <draw_menu(bool)+0x14bc>
    9b42:	d2 c0       	rjmp	.+420    	; 0x9ce8 <draw_menu(bool)+0x1660>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    9b44:	c8 54       	subi	r28, 0x48	; 72
    9b46:	df 4f       	sbci	r29, 0xFF	; 255
    9b48:	48 81       	ld	r20, Y
    9b4a:	59 81       	ldd	r21, Y+1	; 0x01
    9b4c:	c8 5b       	subi	r28, 0xB8	; 184
    9b4e:	d0 40       	sbci	r29, 0x00	; 0
    9b50:	42 0f       	add	r20, r18
    9b52:	53 1f       	adc	r21, r19
    9b54:	c0 54       	subi	r28, 0x40	; 64
    9b56:	df 4f       	sbci	r29, 0xFF	; 255
    9b58:	59 83       	std	Y+1, r21	; 0x01
    9b5a:	48 83       	st	Y, r20
    9b5c:	c0 5c       	subi	r28, 0xC0	; 192
    9b5e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2033
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    9b60:	ca 54       	subi	r28, 0x4A	; 74
    9b62:	df 4f       	sbci	r29, 0xFF	; 255
    9b64:	e8 81       	ld	r30, Y
    9b66:	f9 81       	ldd	r31, Y+1	; 0x01
    9b68:	c6 5b       	subi	r28, 0xB6	; 182
    9b6a:	d0 40       	sbci	r29, 0x00	; 0
    9b6c:	84 91       	lpm	r24, Z
    9b6e:	82 30       	cpi	r24, 0x02	; 2
    9b70:	09 f0       	breq	.+2      	; 0x9b74 <draw_menu(bool)+0x14ec>
    9b72:	46 c0       	rjmp	.+140    	; 0x9c00 <draw_menu(bool)+0x1578>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2035
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9b74:	f1 01       	movw	r30, r2
    9b76:	85 91       	lpm	r24, Z+
    9b78:	94 91       	lpm	r25, Z
    9b7a:	c6 53       	subi	r28, 0x36	; 54
    9b7c:	df 4f       	sbci	r29, 0xFF	; 255
    9b7e:	e8 81       	ld	r30, Y
    9b80:	f9 81       	ldd	r31, Y+1	; 0x01
    9b82:	ca 5c       	subi	r28, 0xCA	; 202
    9b84:	d0 40       	sbci	r29, 0x00	; 0
    9b86:	24 91       	lpm	r18, Z
    9b88:	c8 54       	subi	r28, 0x48	; 72
    9b8a:	df 4f       	sbci	r29, 0xFF	; 255
    9b8c:	48 81       	ld	r20, Y
    9b8e:	59 81       	ldd	r21, Y+1	; 0x01
    9b90:	c8 5b       	subi	r28, 0xB8	; 184
    9b92:	d0 40       	sbci	r29, 0x00	; 0
    9b94:	84 0f       	add	r24, r20
    9b96:	95 1f       	adc	r25, r21
    9b98:	bc 01       	movw	r22, r24
    9b9a:	2b 9d       	mul	r18, r11
    9b9c:	60 0d       	add	r22, r0
    9b9e:	71 1d       	adc	r23, r1
    9ba0:	11 24       	eor	r1, r1
    9ba2:	c0 54       	subi	r28, 0x40	; 64
    9ba4:	df 4f       	sbci	r29, 0xFF	; 255
    9ba6:	79 83       	std	Y+1, r23	; 0x01
    9ba8:	68 83       	st	Y, r22
    9baa:	c0 5c       	subi	r28, 0xC0	; 192
    9bac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2036
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    9bae:	f4 01       	movw	r30, r8
    9bb0:	85 91       	lpm	r24, Z+
    9bb2:	94 91       	lpm	r25, Z
    9bb4:	c8 53       	subi	r28, 0x38	; 56
    9bb6:	df 4f       	sbci	r29, 0xFF	; 255
    9bb8:	e8 81       	ld	r30, Y
    9bba:	f9 81       	ldd	r31, Y+1	; 0x01
    9bbc:	c8 5c       	subi	r28, 0xC8	; 200
    9bbe:	d0 40       	sbci	r29, 0x00	; 0
    9bc0:	24 91       	lpm	r18, Z
    9bc2:	c6 54       	subi	r28, 0x46	; 70
    9bc4:	df 4f       	sbci	r29, 0xFF	; 255
    9bc6:	48 81       	ld	r20, Y
    9bc8:	59 81       	ldd	r21, Y+1	; 0x01
    9bca:	ca 5b       	subi	r28, 0xBA	; 186
    9bcc:	d0 40       	sbci	r29, 0x00	; 0
    9bce:	84 0f       	add	r24, r20
    9bd0:	95 1f       	adc	r25, r21
    9bd2:	bc 01       	movw	r22, r24
    9bd4:	24 9d       	mul	r18, r4
    9bd6:	60 0d       	add	r22, r0
    9bd8:	71 1d       	adc	r23, r1
    9bda:	11 24       	eor	r1, r1
    9bdc:	ce 53       	subi	r28, 0x3E	; 62
    9bde:	df 4f       	sbci	r29, 0xFF	; 255
    9be0:	79 83       	std	Y+1, r23	; 0x01
    9be2:	68 83       	st	Y, r22
    9be4:	c2 5c       	subi	r28, 0xC2	; 194
    9be6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2037
          loop_t++;
    9be8:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2038
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    9bea:	c3 53       	subi	r28, 0x33	; 51
    9bec:	df 4f       	sbci	r29, 0xFF	; 255
    9bee:	e8 81       	ld	r30, Y
    9bf0:	f9 81       	ldd	r31, Y+1	; 0x01
    9bf2:	cd 5c       	subi	r28, 0xCD	; 205
    9bf4:	d0 40       	sbci	r29, 0x00	; 0
    9bf6:	84 91       	lpm	r24, Z
    9bf8:	b8 16       	cp	r11, r24
    9bfa:	10 f0       	brcs	.+4      	; 0x9c00 <draw_menu(bool)+0x1578>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2041
          {
            loop_t = 0;
            loop_r++;
    9bfc:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2040
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    9bfe:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    9c00:	c1 53       	subi	r28, 0x31	; 49
    9c02:	df 4f       	sbci	r29, 0xFF	; 255
    9c04:	e8 81       	ld	r30, Y
    9c06:	f9 81       	ldd	r31, Y+1	; 0x01
    9c08:	cf 5c       	subi	r28, 0xCF	; 207
    9c0a:	d0 40       	sbci	r29, 0x00	; 0
    9c0c:	25 91       	lpm	r18, Z+
    9c0e:	34 91       	lpm	r19, Z
    9c10:	ce 52       	subi	r28, 0x2E	; 46
    9c12:	df 4f       	sbci	r29, 0xFF	; 255
    9c14:	e8 81       	ld	r30, Y
    9c16:	f9 81       	ldd	r31, Y+1	; 0x01
    9c18:	c2 5d       	subi	r28, 0xD2	; 210
    9c1a:	d0 40       	sbci	r29, 0x00	; 0
    9c1c:	45 91       	lpm	r20, Z+
    9c1e:	54 91       	lpm	r21, Z
    9c20:	ca 53       	subi	r28, 0x3A	; 58
    9c22:	df 4f       	sbci	r29, 0xFF	; 255
    9c24:	e8 80       	ld	r14, Y
    9c26:	f9 80       	ldd	r15, Y+1	; 0x01
    9c28:	c6 5c       	subi	r28, 0xC6	; 198
    9c2a:	d0 40       	sbci	r29, 0x00	; 0
    9c2c:	cc 53       	subi	r28, 0x3C	; 60
    9c2e:	df 4f       	sbci	r29, 0xFF	; 255
    9c30:	08 81       	ld	r16, Y
    9c32:	19 81       	ldd	r17, Y+1	; 0x01
    9c34:	c4 5c       	subi	r28, 0xC4	; 196
    9c36:	d0 40       	sbci	r29, 0x00	; 0
    9c38:	ce 53       	subi	r28, 0x3E	; 62
    9c3a:	df 4f       	sbci	r29, 0xFF	; 255
    9c3c:	68 81       	ld	r22, Y
    9c3e:	79 81       	ldd	r23, Y+1	; 0x01
    9c40:	c2 5c       	subi	r28, 0xC2	; 194
    9c42:	d0 40       	sbci	r29, 0x00	; 0
    9c44:	c0 54       	subi	r28, 0x40	; 64
    9c46:	df 4f       	sbci	r29, 0xFF	; 255
    9c48:	88 81       	ld	r24, Y
    9c4a:	99 81       	ldd	r25, Y+1	; 0x01
    9c4c:	c0 5c       	subi	r28, 0xC0	; 192
    9c4e:	d0 40       	sbci	r29, 0x00	; 0
    9c50:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9c54:	18 2f       	mov	r17, r24
    9c56:	81 e0       	ldi	r24, 0x01	; 1
    9c58:	8a 0d       	add	r24, r10
    9c5a:	11 23       	and	r17, r17
    9c5c:	21 f1       	breq	.+72     	; 0x9ca6 <draw_menu(bool)+0x161e>
    9c5e:	ce 54       	subi	r28, 0x4E	; 78
    9c60:	df 4f       	sbci	r29, 0xFF	; 255
    9c62:	a8 82       	st	Y, r10
    9c64:	c2 5b       	subi	r28, 0xB2	; 178
    9c66:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    9c68:	f6 01       	movw	r30, r12
    9c6a:	e4 59       	subi	r30, 0x94	; 148
    9c6c:	fd 4f       	sbci	r31, 0xFD	; 253
    9c6e:	e6 0d       	add	r30, r6
    9c70:	f7 1d       	adc	r31, r7
    9c72:	25 91       	lpm	r18, Z+
    9c74:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2047
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    9c76:	c2 54       	subi	r28, 0x42	; 66
    9c78:	df 4f       	sbci	r29, 0xFF	; 255
    9c7a:	e8 81       	ld	r30, Y
    9c7c:	f9 81       	ldd	r31, Y+1	; 0x01
    9c7e:	ce 5b       	subi	r28, 0xBE	; 190
    9c80:	d0 40       	sbci	r29, 0x00	; 0
    9c82:	84 91       	lpm	r24, Z
    9c84:	cd 54       	subi	r28, 0x4D	; 77
    9c86:	df 4f       	sbci	r29, 0xFF	; 255
    9c88:	68 81       	ld	r22, Y
    9c8a:	c3 5b       	subi	r28, 0xB3	; 179
    9c8c:	d0 40       	sbci	r29, 0x00	; 0
    9c8e:	70 e0       	ldi	r23, 0x00	; 0
    9c90:	4a 2d       	mov	r20, r10
    9c92:	90 e0       	ldi	r25, 0x00	; 0
    9c94:	f9 01       	movw	r30, r18
    9c96:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2048
          ret = true;
    9c98:	c4 53       	subi	r28, 0x34	; 52
    9c9a:	df 4f       	sbci	r29, 0xFF	; 255
    9c9c:	18 83       	st	Y, r17
    9c9e:	cc 5c       	subi	r28, 0xCC	; 204
    9ca0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1969
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    9ca2:	53 94       	inc	r5
    9ca4:	d6 cc       	rjmp	.-1620   	; 0x9652 <draw_menu(bool)+0xfca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    9ca6:	a8 2e       	mov	r10, r24
    9ca8:	1d cf       	rjmp	.-454    	; 0x9ae4 <draw_menu(bool)+0x145c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2025
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    9caa:	f4 01       	movw	r30, r8
    9cac:	85 91       	lpm	r24, Z+
    9cae:	94 91       	lpm	r25, Z
    9cb0:	c8 53       	subi	r28, 0x38	; 56
    9cb2:	df 4f       	sbci	r29, 0xFF	; 255
    9cb4:	e8 81       	ld	r30, Y
    9cb6:	f9 81       	ldd	r31, Y+1	; 0x01
    9cb8:	c8 5c       	subi	r28, 0xC8	; 200
    9cba:	d0 40       	sbci	r29, 0x00	; 0
    9cbc:	44 91       	lpm	r20, Z
    9cbe:	c6 54       	subi	r28, 0x46	; 70
    9cc0:	df 4f       	sbci	r29, 0xFF	; 255
    9cc2:	68 81       	ld	r22, Y
    9cc4:	79 81       	ldd	r23, Y+1	; 0x01
    9cc6:	ca 5b       	subi	r28, 0xBA	; 186
    9cc8:	d0 40       	sbci	r29, 0x00	; 0
    9cca:	86 0f       	add	r24, r22
    9ccc:	97 1f       	adc	r25, r23
    9cce:	fc 01       	movw	r30, r24
    9cd0:	4b 9d       	mul	r20, r11
    9cd2:	e0 0d       	add	r30, r0
    9cd4:	f1 1d       	adc	r31, r1
    9cd6:	11 24       	eor	r1, r1
    9cd8:	ce 53       	subi	r28, 0x3E	; 62
    9cda:	df 4f       	sbci	r29, 0xFF	; 255
    9cdc:	f9 83       	std	Y+1, r31	; 0x01
    9cde:	e8 83       	st	Y, r30
    9ce0:	c2 5c       	subi	r28, 0xC2	; 194
    9ce2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
          loop_t++;
    9ce4:	b3 94       	inc	r11
    9ce6:	24 cf       	rjmp	.-440    	; 0x9b30 <draw_menu(bool)+0x14a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    9ce8:	f1 01       	movw	r30, r2
    9cea:	85 91       	lpm	r24, Z+
    9cec:	94 91       	lpm	r25, Z
    9cee:	c6 53       	subi	r28, 0x36	; 54
    9cf0:	df 4f       	sbci	r29, 0xFF	; 255
    9cf2:	e8 81       	ld	r30, Y
    9cf4:	f9 81       	ldd	r31, Y+1	; 0x01
    9cf6:	ca 5c       	subi	r28, 0xCA	; 202
    9cf8:	d0 40       	sbci	r29, 0x00	; 0
    9cfa:	24 91       	lpm	r18, Z
    9cfc:	c8 54       	subi	r28, 0x48	; 72
    9cfe:	df 4f       	sbci	r29, 0xFF	; 255
    9d00:	48 81       	ld	r20, Y
    9d02:	59 81       	ldd	r21, Y+1	; 0x01
    9d04:	c8 5b       	subi	r28, 0xB8	; 184
    9d06:	d0 40       	sbci	r29, 0x00	; 0
    9d08:	84 0f       	add	r24, r20
    9d0a:	95 1f       	adc	r25, r21
    9d0c:	bc 01       	movw	r22, r24
    9d0e:	2b 9d       	mul	r18, r11
    9d10:	60 0d       	add	r22, r0
    9d12:	71 1d       	adc	r23, r1
    9d14:	11 24       	eor	r1, r1
    9d16:	c0 54       	subi	r28, 0x40	; 64
    9d18:	df 4f       	sbci	r29, 0xFF	; 255
    9d1a:	79 83       	std	Y+1, r23	; 0x01
    9d1c:	68 83       	st	Y, r22
    9d1e:	c0 5c       	subi	r28, 0xC0	; 192
    9d20:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2031
          loop_t++;
    9d22:	b3 94       	inc	r11
    9d24:	1d cf       	rjmp	.-454    	; 0x9b60 <draw_menu(bool)+0x14d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2055
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    9d26:	c4 53       	subi	r28, 0x34	; 52
    9d28:	df 4f       	sbci	r29, 0xFF	; 255
    9d2a:	f8 81       	ld	r31, Y
    9d2c:	cc 5c       	subi	r28, 0xCC	; 204
    9d2e:	d0 40       	sbci	r29, 0x00	; 0
    9d30:	f1 11       	cpse	r31, r1
    9d32:	0c 94 22 56 	jmp	0xac44	; 0xac44 <draw_menu(bool)+0x25bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    9d36:	91 2c       	mov	r9, r1
    9d38:	93 01       	movw	r18, r6
    9d3a:	2f 53       	subi	r18, 0x3F	; 63
    9d3c:	3d 4f       	sbci	r19, 0xFD	; 253
    9d3e:	cc 52       	subi	r28, 0x2C	; 44
    9d40:	df 4f       	sbci	r29, 0xFF	; 255
    9d42:	39 83       	std	Y+1, r19	; 0x01
    9d44:	28 83       	st	Y, r18
    9d46:	c4 5d       	subi	r28, 0xD4	; 212
    9d48:	d0 40       	sbci	r29, 0x00	; 0
    9d4a:	cc 52       	subi	r28, 0x2C	; 44
    9d4c:	df 4f       	sbci	r29, 0xFF	; 255
    9d4e:	e8 81       	ld	r30, Y
    9d50:	f9 81       	ldd	r31, Y+1	; 0x01
    9d52:	c4 5d       	subi	r28, 0xD4	; 212
    9d54:	d0 40       	sbci	r29, 0x00	; 0
    9d56:	84 91       	lpm	r24, Z
    9d58:	98 16       	cp	r9, r24
    9d5a:	08 f0       	brcs	.+2      	; 0x9d5e <draw_menu(bool)+0x16d6>
    9d5c:	14 c3       	rjmp	.+1576   	; 0xa386 <draw_menu(bool)+0x1cfe>
    9d5e:	f7 e1       	ldi	r31, 0x17	; 23
    9d60:	9f 9e       	mul	r9, r31
    9d62:	20 01       	movw	r4, r0
    9d64:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2060
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    9d66:	f2 01       	movw	r30, r4
    9d68:	ee 53       	subi	r30, 0x3E	; 62
    9d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    9d6c:	e6 0d       	add	r30, r6
    9d6e:	f7 1d       	adc	r31, r7
    9d70:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2061
    if (enable_redraw(rdr, redraw_class) == true)
    9d72:	cf 52       	subi	r28, 0x2F	; 47
    9d74:	df 4f       	sbci	r29, 0xFF	; 255
    9d76:	68 81       	ld	r22, Y
    9d78:	c1 5d       	subi	r28, 0xD1	; 209
    9d7a:	d0 40       	sbci	r29, 0x00	; 0
    9d7c:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    9d80:	88 23       	and	r24, r24
    9d82:	09 f4       	brne	.+2      	; 0x9d86 <draw_menu(bool)+0x16fe>
    9d84:	83 c1       	rjmp	.+774    	; 0xa08c <draw_menu(bool)+0x1a04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
    {
      loop_i = 0;
    9d86:	ce 54       	subi	r28, 0x4E	; 78
    9d88:	df 4f       	sbci	r29, 0xFF	; 255
    9d8a:	18 82       	st	Y, r1
    9d8c:	c2 5b       	subi	r28, 0xB2	; 178
    9d8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2065
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    9d90:	f2 01       	movw	r30, r4
    9d92:	e0 54       	subi	r30, 0x40	; 64
    9d94:	fe 4f       	sbci	r31, 0xFE	; 254
    9d96:	e6 0d       	add	r30, r6
    9d98:	f7 1d       	adc	r31, r7
    9d9a:	25 91       	lpm	r18, Z+
    9d9c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    9d9e:	c2 01       	movw	r24, r4
    9da0:	85 54       	subi	r24, 0x45	; 69
    9da2:	9e 4f       	sbci	r25, 0xFE	; 254
    9da4:	a3 01       	movw	r20, r6
    9da6:	48 0f       	add	r20, r24
    9da8:	59 1f       	adc	r21, r25
    9daa:	ca 54       	subi	r28, 0x4A	; 74
    9dac:	df 4f       	sbci	r29, 0xFF	; 255
    9dae:	59 83       	std	Y+1, r21	; 0x01
    9db0:	48 83       	st	Y, r20
    9db2:	c6 5b       	subi	r28, 0xB6	; 182
    9db4:	d0 40       	sbci	r29, 0x00	; 0
    9db6:	fa 01       	movw	r30, r20
    9db8:	84 91       	lpm	r24, Z
    9dba:	cd 54       	subi	r28, 0x4D	; 77
    9dbc:	df 4f       	sbci	r29, 0xFF	; 255
    9dbe:	68 81       	ld	r22, Y
    9dc0:	c3 5b       	subi	r28, 0xB3	; 179
    9dc2:	d0 40       	sbci	r29, 0x00	; 0
    9dc4:	70 e0       	ldi	r23, 0x00	; 0
    9dc6:	40 e0       	ldi	r20, 0x00	; 0
    9dc8:	90 e0       	ldi	r25, 0x00	; 0
    9dca:	f9 01       	movw	r30, r18
    9dcc:	19 95       	eicall
    9dce:	cf 54       	subi	r28, 0x4F	; 79
    9dd0:	df 4f       	sbci	r29, 0xFF	; 255
    9dd2:	88 83       	st	Y, r24
    9dd4:	c1 5b       	subi	r28, 0xB1	; 177
    9dd6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2067
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    9dd8:	f2 01       	movw	r30, r4
    9dda:	e4 54       	subi	r30, 0x44	; 68
    9ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    9dde:	e6 0d       	add	r30, r6
    9de0:	f7 1d       	adc	r31, r7
    9de2:	25 91       	lpm	r18, Z+
    9de4:	34 91       	lpm	r19, Z
    9de6:	ca 52       	subi	r28, 0x2A	; 42
    9de8:	df 4f       	sbci	r29, 0xFF	; 255
    9dea:	39 83       	std	Y+1, r19	; 0x01
    9dec:	28 83       	st	Y, r18
    9dee:	c6 5d       	subi	r28, 0xD6	; 214
    9df0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    9df2:	f2 01       	movw	r30, r4
    9df4:	e6 54       	subi	r30, 0x46	; 70
    9df6:	fe 4f       	sbci	r31, 0xFE	; 254
    9df8:	e6 0d       	add	r30, r6
    9dfa:	f7 1d       	adc	r31, r7
    9dfc:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
      if (slider_active != MENU_SLIDER_OFF)
    9dfe:	4f 3f       	cpi	r20, 0xFF	; 255
    9e00:	b9 f0       	breq	.+46     	; 0x9e30 <draw_menu(bool)+0x17a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9e02:	f2 01       	movw	r30, r4
    9e04:	e8 54       	subi	r30, 0x48	; 72
    9e06:	fe 4f       	sbci	r31, 0xFE	; 254
    9e08:	e6 0d       	add	r30, r6
    9e0a:	f7 1d       	adc	r31, r7
    9e0c:	24 91       	lpm	r18, Z
    9e0e:	f2 01       	movw	r30, r4
    9e10:	e7 54       	subi	r30, 0x47	; 71
    9e12:	fe 4f       	sbci	r31, 0xFE	; 254
    9e14:	e6 0d       	add	r30, r6
    9e16:	f7 1d       	adc	r31, r7
    9e18:	e4 91       	lpm	r30, Z
    9e1a:	2e 9f       	mul	r18, r30
    9e1c:	20 2d       	mov	r18, r0
    9e1e:	11 24       	eor	r1, r1
    9e20:	be 01       	movw	r22, r28
    9e22:	6f 54       	subi	r22, 0x4F	; 79
    9e24:	7f 4f       	sbci	r23, 0xFF	; 255
    9e26:	ce 01       	movw	r24, r28
    9e28:	8e 54       	subi	r24, 0x4E	; 78
    9e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e2c:	0e 94 44 29 	call	0x5288	; 0x5288 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9e30:	c2 01       	movw	r24, r4
    9e32:	84 55       	subi	r24, 0x54	; 84
    9e34:	9e 4f       	sbci	r25, 0xFE	; 254
    9e36:	a3 01       	movw	r20, r6
    9e38:	48 0f       	add	r20, r24
    9e3a:	59 1f       	adc	r21, r25
    9e3c:	c4 54       	subi	r28, 0x44	; 68
    9e3e:	df 4f       	sbci	r29, 0xFF	; 255
    9e40:	59 83       	std	Y+1, r21	; 0x01
    9e42:	48 83       	st	Y, r20
    9e44:	cc 5b       	subi	r28, 0xBC	; 188
    9e46:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9e48:	12 01       	movw	r2, r4
    9e4a:	52 e5       	ldi	r21, 0x52	; 82
    9e4c:	25 1a       	sub	r2, r21
    9e4e:	5e ef       	ldi	r21, 0xFE	; 254
    9e50:	35 0a       	sbc	r3, r21
    9e52:	26 0c       	add	r2, r6
    9e54:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2076
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9e56:	0b 96       	adiw	r24, 0x0b	; 11
    9e58:	b3 01       	movw	r22, r6
    9e5a:	68 0f       	add	r22, r24
    9e5c:	79 1f       	adc	r23, r25
    9e5e:	c2 54       	subi	r28, 0x42	; 66
    9e60:	df 4f       	sbci	r29, 0xFF	; 255
    9e62:	79 83       	std	Y+1, r23	; 0x01
    9e64:	68 83       	st	Y, r22
    9e66:	ce 5b       	subi	r28, 0xBE	; 190
    9e68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9e6a:	01 97       	sbiw	r24, 0x01	; 1
    9e6c:	f3 01       	movw	r30, r6
    9e6e:	e8 0f       	add	r30, r24
    9e70:	f9 1f       	adc	r31, r25
    9e72:	c6 53       	subi	r28, 0x36	; 54
    9e74:	df 4f       	sbci	r29, 0xFF	; 255
    9e76:	f9 83       	std	Y+1, r31	; 0x01
    9e78:	e8 83       	st	Y, r30
    9e7a:	ca 5c       	subi	r28, 0xCA	; 202
    9e7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9e7e:	01 97       	sbiw	r24, 0x01	; 1
    9e80:	93 01       	movw	r18, r6
    9e82:	28 0f       	add	r18, r24
    9e84:	39 1f       	adc	r19, r25
    9e86:	c3 53       	subi	r28, 0x33	; 51
    9e88:	df 4f       	sbci	r29, 0xFF	; 255
    9e8a:	39 83       	std	Y+1, r19	; 0x01
    9e8c:	28 83       	st	Y, r18
    9e8e:	cd 5c       	subi	r28, 0xCD	; 205
    9e90:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    9e92:	01 97       	sbiw	r24, 0x01	; 1
    9e94:	a3 01       	movw	r20, r6
    9e96:	48 0f       	add	r20, r24
    9e98:	59 1f       	adc	r21, r25
    9e9a:	c8 53       	subi	r28, 0x38	; 56
    9e9c:	df 4f       	sbci	r29, 0xFF	; 255
    9e9e:	59 83       	std	Y+1, r21	; 0x01
    9ea0:	48 83       	st	Y, r20
    9ea2:	c8 5c       	subi	r28, 0xC8	; 200
    9ea4:	d0 40       	sbci	r29, 0x00	; 0
    9ea6:	02 97       	sbiw	r24, 0x02	; 2
    9ea8:	b3 01       	movw	r22, r6
    9eaa:	68 0f       	add	r22, r24
    9eac:	79 1f       	adc	r23, r25
    9eae:	c1 53       	subi	r28, 0x31	; 49
    9eb0:	df 4f       	sbci	r29, 0xFF	; 255
    9eb2:	79 83       	std	Y+1, r23	; 0x01
    9eb4:	68 83       	st	Y, r22
    9eb6:	cf 5c       	subi	r28, 0xCF	; 207
    9eb8:	d0 40       	sbci	r29, 0x00	; 0
    9eba:	02 97       	sbiw	r24, 0x02	; 2
    9ebc:	f3 01       	movw	r30, r6
    9ebe:	e8 0f       	add	r30, r24
    9ec0:	f9 1f       	adc	r31, r25
    9ec2:	ce 52       	subi	r28, 0x2E	; 46
    9ec4:	df 4f       	sbci	r29, 0xFF	; 255
    9ec6:	f9 83       	std	Y+1, r31	; 0x01
    9ec8:	e8 83       	st	Y, r30
    9eca:	c2 5d       	subi	r28, 0xD2	; 210
    9ecc:	d0 40       	sbci	r29, 0x00	; 0
    9ece:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
      gss = pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    9ed0:	ce 54       	subi	r28, 0x4E	; 78
    9ed2:	df 4f       	sbci	r29, 0xFF	; 255
    9ed4:	88 81       	ld	r24, Y
    9ed6:	c2 5b       	subi	r28, 0xB2	; 178
    9ed8:	d0 40       	sbci	r29, 0x00	; 0
    9eda:	cf 54       	subi	r28, 0x4F	; 79
    9edc:	df 4f       	sbci	r29, 0xFF	; 255
    9ede:	98 81       	ld	r25, Y
    9ee0:	c1 5b       	subi	r28, 0xB1	; 177
    9ee2:	d0 40       	sbci	r29, 0x00	; 0
    9ee4:	89 17       	cp	r24, r25
    9ee6:	08 f0       	brcs	.+2      	; 0x9eea <draw_menu(bool)+0x1862>
    9ee8:	d1 c0       	rjmp	.+418    	; 0xa08c <draw_menu(bool)+0x1a04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9eea:	c4 54       	subi	r28, 0x44	; 68
    9eec:	df 4f       	sbci	r29, 0xFF	; 255
    9eee:	e8 81       	ld	r30, Y
    9ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    9ef2:	cc 5b       	subi	r28, 0xBC	; 188
    9ef4:	d0 40       	sbci	r29, 0x00	; 0
    9ef6:	45 91       	lpm	r20, Z+
    9ef8:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9efa:	f1 01       	movw	r30, r2
    9efc:	25 91       	lpm	r18, Z+
    9efe:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2076
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9f00:	c2 54       	subi	r28, 0x42	; 66
    9f02:	df 4f       	sbci	r29, 0xFF	; 255
    9f04:	e8 81       	ld	r30, Y
    9f06:	f9 81       	ldd	r31, Y+1	; 0x01
    9f08:	ce 5b       	subi	r28, 0xBE	; 190
    9f0a:	d0 40       	sbci	r29, 0x00	; 0
    9f0c:	94 91       	lpm	r25, Z
    9f0e:	99 23       	and	r25, r25
    9f10:	09 f4       	brne	.+2      	; 0x9f14 <draw_menu(bool)+0x188c>
    9f12:	7b c0       	rjmp	.+246    	; 0xa00a <draw_menu(bool)+0x1982>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9f14:	c6 54       	subi	r28, 0x46	; 70
    9f16:	df 4f       	sbci	r29, 0xFF	; 255
    9f18:	68 81       	ld	r22, Y
    9f1a:	79 81       	ldd	r23, Y+1	; 0x01
    9f1c:	ca 5b       	subi	r28, 0xBA	; 186
    9f1e:	d0 40       	sbci	r29, 0x00	; 0
    9f20:	62 0f       	add	r22, r18
    9f22:	73 1f       	adc	r23, r19
    9f24:	ce 53       	subi	r28, 0x3E	; 62
    9f26:	df 4f       	sbci	r29, 0xFF	; 255
    9f28:	79 83       	std	Y+1, r23	; 0x01
    9f2a:	68 83       	st	Y, r22
    9f2c:	c2 5c       	subi	r28, 0xC2	; 194
    9f2e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    9f30:	c2 54       	subi	r28, 0x42	; 66
    9f32:	df 4f       	sbci	r29, 0xFF	; 255
    9f34:	e8 81       	ld	r30, Y
    9f36:	f9 81       	ldd	r31, Y+1	; 0x01
    9f38:	ce 5b       	subi	r28, 0xBE	; 190
    9f3a:	d0 40       	sbci	r29, 0x00	; 0
    9f3c:	94 91       	lpm	r25, Z
    9f3e:	91 30       	cpi	r25, 0x01	; 1
    9f40:	09 f4       	brne	.+2      	; 0x9f44 <draw_menu(bool)+0x18bc>
    9f42:	81 c0       	rjmp	.+258    	; 0xa046 <draw_menu(bool)+0x19be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9f44:	c8 54       	subi	r28, 0x48	; 72
    9f46:	df 4f       	sbci	r29, 0xFF	; 255
    9f48:	28 81       	ld	r18, Y
    9f4a:	39 81       	ldd	r19, Y+1	; 0x01
    9f4c:	c8 5b       	subi	r28, 0xB8	; 184
    9f4e:	d0 40       	sbci	r29, 0x00	; 0
    9f50:	24 0f       	add	r18, r20
    9f52:	35 1f       	adc	r19, r21
    9f54:	c0 54       	subi	r28, 0x40	; 64
    9f56:	df 4f       	sbci	r29, 0xFF	; 255
    9f58:	39 83       	std	Y+1, r19	; 0x01
    9f5a:	28 83       	st	Y, r18
    9f5c:	c0 5c       	subi	r28, 0xC0	; 192
    9f5e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2080
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
    9f60:	ca 54       	subi	r28, 0x4A	; 74
    9f62:	df 4f       	sbci	r29, 0xFF	; 255
    9f64:	e8 81       	ld	r30, Y
    9f66:	f9 81       	ldd	r31, Y+1	; 0x01
    9f68:	c6 5b       	subi	r28, 0xB6	; 182
    9f6a:	d0 40       	sbci	r29, 0x00	; 0
    9f6c:	44 91       	lpm	r20, Z
    9f6e:	8e 01       	movw	r16, r28
    9f70:	0f 57       	subi	r16, 0x7F	; 127
    9f72:	1f 4f       	sbci	r17, 0xFF	; 255
    9f74:	9e 01       	movw	r18, r28
    9f76:	2f 5f       	subi	r18, 0xFF	; 255
    9f78:	3f 4f       	sbci	r19, 0xFF	; 255
    9f7a:	cd 54       	subi	r28, 0x4D	; 77
    9f7c:	df 4f       	sbci	r29, 0xFF	; 255
    9f7e:	68 81       	ld	r22, Y
    9f80:	c3 5b       	subi	r28, 0xB3	; 179
    9f82:	d0 40       	sbci	r29, 0x00	; 0
    9f84:	ca 52       	subi	r28, 0x2A	; 42
    9f86:	df 4f       	sbci	r29, 0xFF	; 255
    9f88:	e8 81       	ld	r30, Y
    9f8a:	f9 81       	ldd	r31, Y+1	; 0x01
    9f8c:	c6 5d       	subi	r28, 0xD6	; 214
    9f8e:	d0 40       	sbci	r29, 0x00	; 0
    9f90:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    9f92:	c8 53       	subi	r28, 0x38	; 56
    9f94:	df 4f       	sbci	r29, 0xFF	; 255
    9f96:	e8 81       	ld	r30, Y
    9f98:	f9 81       	ldd	r31, Y+1	; 0x01
    9f9a:	c8 5c       	subi	r28, 0xC8	; 200
    9f9c:	d0 40       	sbci	r29, 0x00	; 0
    9f9e:	e4 90       	lpm	r14, Z
    9fa0:	04 91       	lpm	r16, Z
    9fa2:	c1 53       	subi	r28, 0x31	; 49
    9fa4:	df 4f       	sbci	r29, 0xFF	; 255
    9fa6:	e8 81       	ld	r30, Y
    9fa8:	f9 81       	ldd	r31, Y+1	; 0x01
    9faa:	cf 5c       	subi	r28, 0xCF	; 207
    9fac:	d0 40       	sbci	r29, 0x00	; 0
    9fae:	25 91       	lpm	r18, Z+
    9fb0:	34 91       	lpm	r19, Z
    9fb2:	ce 52       	subi	r28, 0x2E	; 46
    9fb4:	df 4f       	sbci	r29, 0xFF	; 255
    9fb6:	e8 81       	ld	r30, Y
    9fb8:	f9 81       	ldd	r31, Y+1	; 0x01
    9fba:	c2 5d       	subi	r28, 0xD2	; 210
    9fbc:	d0 40       	sbci	r29, 0x00	; 0
    9fbe:	45 91       	lpm	r20, Z+
    9fc0:	54 91       	lpm	r21, Z
    9fc2:	88 24       	eor	r8, r8
    9fc4:	83 94       	inc	r8
    9fc6:	be 01       	movw	r22, r28
    9fc8:	6f 57       	subi	r22, 0x7F	; 127
    9fca:	7f 4f       	sbci	r23, 0xFF	; 255
    9fcc:	5b 01       	movw	r10, r22
    9fce:	ce 01       	movw	r24, r28
    9fd0:	01 96       	adiw	r24, 0x01	; 1
    9fd2:	6c 01       	movw	r12, r24
    9fd4:	ce 53       	subi	r28, 0x3E	; 62
    9fd6:	df 4f       	sbci	r29, 0xFF	; 255
    9fd8:	68 81       	ld	r22, Y
    9fda:	79 81       	ldd	r23, Y+1	; 0x01
    9fdc:	c2 5c       	subi	r28, 0xC2	; 194
    9fde:	d0 40       	sbci	r29, 0x00	; 0
    9fe0:	c0 54       	subi	r28, 0x40	; 64
    9fe2:	df 4f       	sbci	r29, 0xFF	; 255
    9fe4:	88 81       	ld	r24, Y
    9fe6:	99 81       	ldd	r25, Y+1	; 0x01
    9fe8:	c0 5c       	subi	r28, 0xC0	; 192
    9fea:	d0 40       	sbci	r29, 0x00	; 0
    9fec:	0e 94 95 33 	call	0x672a	; 0x672a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2082
        loop_t++;
    9ff0:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2083
        loop_i++;
    9ff2:	ce 54       	subi	r28, 0x4E	; 78
    9ff4:	df 4f       	sbci	r29, 0xFF	; 255
    9ff6:	88 81       	ld	r24, Y
    9ff8:	c2 5b       	subi	r28, 0xB2	; 178
    9ffa:	d0 40       	sbci	r29, 0x00	; 0
    9ffc:	8f 5f       	subi	r24, 0xFF	; 255
    9ffe:	ce 54       	subi	r28, 0x4E	; 78
    a000:	df 4f       	sbci	r29, 0xFF	; 255
    a002:	88 83       	st	Y, r24
    a004:	c2 5b       	subi	r28, 0xB2	; 178
    a006:	d0 40       	sbci	r29, 0x00	; 0
    a008:	63 cf       	rjmp	.-314    	; 0x9ed0 <draw_menu(bool)+0x1848>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    a00a:	f1 01       	movw	r30, r2
    a00c:	25 91       	lpm	r18, Z+
    a00e:	34 91       	lpm	r19, Z
    a010:	c6 53       	subi	r28, 0x36	; 54
    a012:	df 4f       	sbci	r29, 0xFF	; 255
    a014:	e8 81       	ld	r30, Y
    a016:	f9 81       	ldd	r31, Y+1	; 0x01
    a018:	ca 5c       	subi	r28, 0xCA	; 202
    a01a:	d0 40       	sbci	r29, 0x00	; 0
    a01c:	94 91       	lpm	r25, Z
    a01e:	c6 54       	subi	r28, 0x46	; 70
    a020:	df 4f       	sbci	r29, 0xFF	; 255
    a022:	68 81       	ld	r22, Y
    a024:	79 81       	ldd	r23, Y+1	; 0x01
    a026:	ca 5b       	subi	r28, 0xBA	; 186
    a028:	d0 40       	sbci	r29, 0x00	; 0
    a02a:	26 0f       	add	r18, r22
    a02c:	37 1f       	adc	r19, r23
    a02e:	f9 01       	movw	r30, r18
    a030:	9f 9d       	mul	r25, r15
    a032:	e0 0d       	add	r30, r0
    a034:	f1 1d       	adc	r31, r1
    a036:	11 24       	eor	r1, r1
    a038:	ce 53       	subi	r28, 0x3E	; 62
    a03a:	df 4f       	sbci	r29, 0xFF	; 255
    a03c:	f9 83       	std	Y+1, r31	; 0x01
    a03e:	e8 83       	st	Y, r30
    a040:	c2 5c       	subi	r28, 0xC2	; 194
    a042:	d0 40       	sbci	r29, 0x00	; 0
    a044:	75 cf       	rjmp	.-278    	; 0x9f30 <draw_menu(bool)+0x18a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    a046:	c4 54       	subi	r28, 0x44	; 68
    a048:	df 4f       	sbci	r29, 0xFF	; 255
    a04a:	e8 81       	ld	r30, Y
    a04c:	f9 81       	ldd	r31, Y+1	; 0x01
    a04e:	cc 5b       	subi	r28, 0xBC	; 188
    a050:	d0 40       	sbci	r29, 0x00	; 0
    a052:	25 91       	lpm	r18, Z+
    a054:	34 91       	lpm	r19, Z
    a056:	c3 53       	subi	r28, 0x33	; 51
    a058:	df 4f       	sbci	r29, 0xFF	; 255
    a05a:	e8 81       	ld	r30, Y
    a05c:	f9 81       	ldd	r31, Y+1	; 0x01
    a05e:	cd 5c       	subi	r28, 0xCD	; 205
    a060:	d0 40       	sbci	r29, 0x00	; 0
    a062:	94 91       	lpm	r25, Z
    a064:	c8 54       	subi	r28, 0x48	; 72
    a066:	df 4f       	sbci	r29, 0xFF	; 255
    a068:	48 81       	ld	r20, Y
    a06a:	59 81       	ldd	r21, Y+1	; 0x01
    a06c:	c8 5b       	subi	r28, 0xB8	; 184
    a06e:	d0 40       	sbci	r29, 0x00	; 0
    a070:	24 0f       	add	r18, r20
    a072:	35 1f       	adc	r19, r21
    a074:	b9 01       	movw	r22, r18
    a076:	9f 9d       	mul	r25, r15
    a078:	60 0d       	add	r22, r0
    a07a:	71 1d       	adc	r23, r1
    a07c:	11 24       	eor	r1, r1
    a07e:	c0 54       	subi	r28, 0x40	; 64
    a080:	df 4f       	sbci	r29, 0xFF	; 255
    a082:	79 83       	std	Y+1, r23	; 0x01
    a084:	68 83       	st	Y, r22
    a086:	c0 5c       	subi	r28, 0xC0	; 192
    a088:	d0 40       	sbci	r29, 0x00	; 0
    a08a:	6a cf       	rjmp	.-300    	; 0x9f60 <draw_menu(bool)+0x18d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    a08c:	cc 53       	subi	r28, 0x3C	; 60
    a08e:	df 4f       	sbci	r29, 0xFF	; 255
    a090:	e8 81       	ld	r30, Y
    a092:	f9 81       	ldd	r31, Y+1	; 0x01
    a094:	c4 5c       	subi	r28, 0xC4	; 196
    a096:	d0 40       	sbci	r29, 0x00	; 0
    a098:	ef 2b       	or	r30, r31
    a09a:	09 f4       	brne	.+2      	; 0xa09e <draw_menu(bool)+0x1a16>
    a09c:	51 c1       	rjmp	.+674    	; 0xa340 <draw_menu(bool)+0x1cb8>
    a09e:	ca 53       	subi	r28, 0x3A	; 58
    a0a0:	df 4f       	sbci	r29, 0xFF	; 255
    a0a2:	28 81       	ld	r18, Y
    a0a4:	39 81       	ldd	r19, Y+1	; 0x01
    a0a6:	c6 5c       	subi	r28, 0xC6	; 198
    a0a8:	d0 40       	sbci	r29, 0x00	; 0
    a0aa:	23 2b       	or	r18, r19
    a0ac:	09 f4       	brne	.+2      	; 0xa0b0 <draw_menu(bool)+0x1a28>
    a0ae:	48 c1       	rjmp	.+656    	; 0xa340 <draw_menu(bool)+0x1cb8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
    {
      loop_i = 0;
    a0b0:	ce 54       	subi	r28, 0x4E	; 78
    a0b2:	df 4f       	sbci	r29, 0xFF	; 255
    a0b4:	18 82       	st	Y, r1
    a0b6:	c2 5b       	subi	r28, 0xB2	; 178
    a0b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2090
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    a0ba:	f2 01       	movw	r30, r4
    a0bc:	e0 54       	subi	r30, 0x40	; 64
    a0be:	fe 4f       	sbci	r31, 0xFE	; 254
    a0c0:	e6 0d       	add	r30, r6
    a0c2:	f7 1d       	adc	r31, r7
    a0c4:	25 91       	lpm	r18, Z+
    a0c6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    a0c8:	c2 01       	movw	r24, r4
    a0ca:	85 54       	subi	r24, 0x45	; 69
    a0cc:	9e 4f       	sbci	r25, 0xFE	; 254
    a0ce:	a3 01       	movw	r20, r6
    a0d0:	48 0f       	add	r20, r24
    a0d2:	59 1f       	adc	r21, r25
    a0d4:	ca 54       	subi	r28, 0x4A	; 74
    a0d6:	df 4f       	sbci	r29, 0xFF	; 255
    a0d8:	59 83       	std	Y+1, r21	; 0x01
    a0da:	48 83       	st	Y, r20
    a0dc:	c6 5b       	subi	r28, 0xB6	; 182
    a0de:	d0 40       	sbci	r29, 0x00	; 0
    a0e0:	fa 01       	movw	r30, r20
    a0e2:	84 91       	lpm	r24, Z
    a0e4:	cd 54       	subi	r28, 0x4D	; 77
    a0e6:	df 4f       	sbci	r29, 0xFF	; 255
    a0e8:	68 81       	ld	r22, Y
    a0ea:	c3 5b       	subi	r28, 0xB3	; 179
    a0ec:	d0 40       	sbci	r29, 0x00	; 0
    a0ee:	70 e0       	ldi	r23, 0x00	; 0
    a0f0:	40 e0       	ldi	r20, 0x00	; 0
    a0f2:	90 e0       	ldi	r25, 0x00	; 0
    a0f4:	f9 01       	movw	r30, r18
    a0f6:	19 95       	eicall
    a0f8:	cf 54       	subi	r28, 0x4F	; 79
    a0fa:	df 4f       	sbci	r29, 0xFF	; 255
    a0fc:	88 83       	st	Y, r24
    a0fe:	c1 5b       	subi	r28, 0xB1	; 177
    a100:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    a102:	f2 01       	movw	r30, r4
    a104:	e6 54       	subi	r30, 0x46	; 70
    a106:	fe 4f       	sbci	r31, 0xFE	; 254
    a108:	e6 0d       	add	r30, r6
    a10a:	f7 1d       	adc	r31, r7
    a10c:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
      if (slider_active != MENU_SLIDER_OFF)
    a10e:	4f 3f       	cpi	r20, 0xFF	; 255
    a110:	b9 f0       	breq	.+46     	; 0xa140 <draw_menu(bool)+0x1ab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    a112:	f2 01       	movw	r30, r4
    a114:	e8 54       	subi	r30, 0x48	; 72
    a116:	fe 4f       	sbci	r31, 0xFE	; 254
    a118:	e6 0d       	add	r30, r6
    a11a:	f7 1d       	adc	r31, r7
    a11c:	24 91       	lpm	r18, Z
    a11e:	f2 01       	movw	r30, r4
    a120:	e7 54       	subi	r30, 0x47	; 71
    a122:	fe 4f       	sbci	r31, 0xFE	; 254
    a124:	e6 0d       	add	r30, r6
    a126:	f7 1d       	adc	r31, r7
    a128:	e4 91       	lpm	r30, Z
    a12a:	2e 9f       	mul	r18, r30
    a12c:	20 2d       	mov	r18, r0
    a12e:	11 24       	eor	r1, r1
    a130:	be 01       	movw	r22, r28
    a132:	6f 54       	subi	r22, 0x4F	; 79
    a134:	7f 4f       	sbci	r23, 0xFF	; 255
    a136:	ce 01       	movw	r24, r28
    a138:	8e 54       	subi	r24, 0x4E	; 78
    a13a:	9f 4f       	sbci	r25, 0xFF	; 255
    a13c:	0e 94 44 29 	call	0x5288	; 0x5288 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    a140:	ce 54       	subi	r28, 0x4E	; 78
    a142:	df 4f       	sbci	r29, 0xFF	; 255
    a144:	a8 80       	ld	r10, Y
    a146:	c2 5b       	subi	r28, 0xB2	; 178
    a148:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
      while (loop_i < loop_cnt)
    a14a:	cf 54       	subi	r28, 0x4F	; 79
    a14c:	df 4f       	sbci	r29, 0xFF	; 255
    a14e:	88 80       	ld	r8, Y
    a150:	c1 5b       	subi	r28, 0xB1	; 177
    a152:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    a154:	c2 01       	movw	r24, r4
    a156:	84 55       	subi	r24, 0x54	; 84
    a158:	9e 4f       	sbci	r25, 0xFE	; 254
    a15a:	93 01       	movw	r18, r6
    a15c:	28 0f       	add	r18, r24
    a15e:	39 1f       	adc	r19, r25
    a160:	c4 54       	subi	r28, 0x44	; 68
    a162:	df 4f       	sbci	r29, 0xFF	; 255
    a164:	39 83       	std	Y+1, r19	; 0x01
    a166:	28 83       	st	Y, r18
    a168:	cc 5b       	subi	r28, 0xBC	; 188
    a16a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    a16c:	12 01       	movw	r2, r4
    a16e:	32 e5       	ldi	r19, 0x52	; 82
    a170:	23 1a       	sub	r2, r19
    a172:	3e ef       	ldi	r19, 0xFE	; 254
    a174:	33 0a       	sbc	r3, r19
    a176:	26 0c       	add	r2, r6
    a178:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    a17a:	0b 96       	adiw	r24, 0x0b	; 11
    a17c:	a3 01       	movw	r20, r6
    a17e:	48 0f       	add	r20, r24
    a180:	59 1f       	adc	r21, r25
    a182:	c2 54       	subi	r28, 0x42	; 66
    a184:	df 4f       	sbci	r29, 0xFF	; 255
    a186:	59 83       	std	Y+1, r21	; 0x01
    a188:	48 83       	st	Y, r20
    a18a:	ce 5b       	subi	r28, 0xBE	; 190
    a18c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    a18e:	01 97       	sbiw	r24, 0x01	; 1
    a190:	b3 01       	movw	r22, r6
    a192:	68 0f       	add	r22, r24
    a194:	79 1f       	adc	r23, r25
    a196:	c8 53       	subi	r28, 0x38	; 56
    a198:	df 4f       	sbci	r29, 0xFF	; 255
    a19a:	79 83       	std	Y+1, r23	; 0x01
    a19c:	68 83       	st	Y, r22
    a19e:	c8 5c       	subi	r28, 0xC8	; 200
    a1a0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    a1a2:	01 97       	sbiw	r24, 0x01	; 1
    a1a4:	f3 01       	movw	r30, r6
    a1a6:	e8 0f       	add	r30, r24
    a1a8:	f9 1f       	adc	r31, r25
    a1aa:	c6 53       	subi	r28, 0x36	; 54
    a1ac:	df 4f       	sbci	r29, 0xFF	; 255
    a1ae:	f9 83       	std	Y+1, r31	; 0x01
    a1b0:	e8 83       	st	Y, r30
    a1b2:	ca 5c       	subi	r28, 0xCA	; 202
    a1b4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    a1b6:	03 97       	sbiw	r24, 0x03	; 3
    a1b8:	93 01       	movw	r18, r6
    a1ba:	28 0f       	add	r18, r24
    a1bc:	39 1f       	adc	r19, r25
    a1be:	c3 53       	subi	r28, 0x33	; 51
    a1c0:	df 4f       	sbci	r29, 0xFF	; 255
    a1c2:	39 83       	std	Y+1, r19	; 0x01
    a1c4:	28 83       	st	Y, r18
    a1c6:	cd 5c       	subi	r28, 0xCD	; 205
    a1c8:	d0 40       	sbci	r29, 0x00	; 0
    a1ca:	02 97       	sbiw	r24, 0x02	; 2
    a1cc:	a3 01       	movw	r20, r6
    a1ce:	48 0f       	add	r20, r24
    a1d0:	59 1f       	adc	r21, r25
    a1d2:	c1 53       	subi	r28, 0x31	; 49
    a1d4:	df 4f       	sbci	r29, 0xFF	; 255
    a1d6:	59 83       	std	Y+1, r21	; 0x01
    a1d8:	48 83       	st	Y, r20
    a1da:	cf 5c       	subi	r28, 0xCF	; 207
    a1dc:	d0 40       	sbci	r29, 0x00	; 0
    a1de:	d1 2c       	mov	r13, r1
    a1e0:	c1 2c       	mov	r12, r1
    a1e2:	ba 2c       	mov	r11, r10
    a1e4:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    a1e6:	b8 14       	cp	r11, r8
    a1e8:	08 f0       	brcs	.+2      	; 0xa1ec <draw_menu(bool)+0x1b64>
    a1ea:	aa c0       	rjmp	.+340    	; 0xa340 <draw_menu(bool)+0x1cb8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    a1ec:	c4 54       	subi	r28, 0x44	; 68
    a1ee:	df 4f       	sbci	r29, 0xFF	; 255
    a1f0:	e8 81       	ld	r30, Y
    a1f2:	f9 81       	ldd	r31, Y+1	; 0x01
    a1f4:	cc 5b       	subi	r28, 0xBC	; 188
    a1f6:	d0 40       	sbci	r29, 0x00	; 0
    a1f8:	25 91       	lpm	r18, Z+
    a1fa:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    a1fc:	f1 01       	movw	r30, r2
    a1fe:	85 91       	lpm	r24, Z+
    a200:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    a202:	c2 54       	subi	r28, 0x42	; 66
    a204:	df 4f       	sbci	r29, 0xFF	; 255
    a206:	e8 81       	ld	r30, Y
    a208:	f9 81       	ldd	r31, Y+1	; 0x01
    a20a:	ce 5b       	subi	r28, 0xBE	; 190
    a20c:	d0 40       	sbci	r29, 0x00	; 0
    a20e:	44 91       	lpm	r20, Z
    a210:	44 23       	and	r20, r20
    a212:	09 f4       	brne	.+2      	; 0xa216 <draw_menu(bool)+0x1b8e>
    a214:	97 c0       	rjmp	.+302    	; 0xa344 <draw_menu(bool)+0x1cbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    a216:	c6 54       	subi	r28, 0x46	; 70
    a218:	df 4f       	sbci	r29, 0xFF	; 255
    a21a:	48 81       	ld	r20, Y
    a21c:	59 81       	ldd	r21, Y+1	; 0x01
    a21e:	ca 5b       	subi	r28, 0xBA	; 186
    a220:	d0 40       	sbci	r29, 0x00	; 0
    a222:	48 0f       	add	r20, r24
    a224:	59 1f       	adc	r21, r25
    a226:	ce 53       	subi	r28, 0x3E	; 62
    a228:	df 4f       	sbci	r29, 0xFF	; 255
    a22a:	59 83       	std	Y+1, r21	; 0x01
    a22c:	48 83       	st	Y, r20
    a22e:	c2 5c       	subi	r28, 0xC2	; 194
    a230:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    a232:	c2 54       	subi	r28, 0x42	; 66
    a234:	df 4f       	sbci	r29, 0xFF	; 255
    a236:	e8 81       	ld	r30, Y
    a238:	f9 81       	ldd	r31, Y+1	; 0x01
    a23a:	ce 5b       	subi	r28, 0xBE	; 190
    a23c:	d0 40       	sbci	r29, 0x00	; 0
    a23e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    a240:	c8 54       	subi	r28, 0x48	; 72
    a242:	df 4f       	sbci	r29, 0xFF	; 255
    a244:	48 81       	ld	r20, Y
    a246:	59 81       	ldd	r21, Y+1	; 0x01
    a248:	c8 5b       	subi	r28, 0xB8	; 184
    a24a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    a24c:	81 30       	cpi	r24, 0x01	; 1
    a24e:	e9 f4       	brne	.+58     	; 0xa28a <draw_menu(bool)+0x1c02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    a250:	c4 54       	subi	r28, 0x44	; 68
    a252:	df 4f       	sbci	r29, 0xFF	; 255
    a254:	e8 81       	ld	r30, Y
    a256:	f9 81       	ldd	r31, Y+1	; 0x01
    a258:	cc 5b       	subi	r28, 0xBC	; 188
    a25a:	d0 40       	sbci	r29, 0x00	; 0
    a25c:	85 91       	lpm	r24, Z+
    a25e:	94 91       	lpm	r25, Z
    a260:	c6 53       	subi	r28, 0x36	; 54
    a262:	df 4f       	sbci	r29, 0xFF	; 255
    a264:	e8 81       	ld	r30, Y
    a266:	f9 81       	ldd	r31, Y+1	; 0x01
    a268:	ca 5c       	subi	r28, 0xCA	; 202
    a26a:	d0 40       	sbci	r29, 0x00	; 0
    a26c:	44 91       	lpm	r20, Z
    a26e:	c8 54       	subi	r28, 0x48	; 72
    a270:	df 4f       	sbci	r29, 0xFF	; 255
    a272:	28 81       	ld	r18, Y
    a274:	39 81       	ldd	r19, Y+1	; 0x01
    a276:	c8 5b       	subi	r28, 0xB8	; 184
    a278:	d0 40       	sbci	r29, 0x00	; 0
    a27a:	82 0f       	add	r24, r18
    a27c:	93 1f       	adc	r25, r19
    a27e:	4c 9d       	mul	r20, r12
    a280:	90 01       	movw	r18, r0
    a282:	4d 9d       	mul	r20, r13
    a284:	30 0d       	add	r19, r0
    a286:	11 24       	eor	r1, r1
    a288:	ac 01       	movw	r20, r24
    a28a:	42 0f       	add	r20, r18
    a28c:	53 1f       	adc	r21, r19
    a28e:	c0 54       	subi	r28, 0x40	; 64
    a290:	df 4f       	sbci	r29, 0xFF	; 255
    a292:	59 83       	std	Y+1, r21	; 0x01
    a294:	48 83       	st	Y, r20
    a296:	c0 5c       	subi	r28, 0xC0	; 192
    a298:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    a29a:	c3 53       	subi	r28, 0x33	; 51
    a29c:	df 4f       	sbci	r29, 0xFF	; 255
    a29e:	e8 81       	ld	r30, Y
    a2a0:	f9 81       	ldd	r31, Y+1	; 0x01
    a2a2:	cd 5c       	subi	r28, 0xCD	; 205
    a2a4:	d0 40       	sbci	r29, 0x00	; 0
    a2a6:	25 91       	lpm	r18, Z+
    a2a8:	34 91       	lpm	r19, Z
    a2aa:	c1 53       	subi	r28, 0x31	; 49
    a2ac:	df 4f       	sbci	r29, 0xFF	; 255
    a2ae:	e8 81       	ld	r30, Y
    a2b0:	f9 81       	ldd	r31, Y+1	; 0x01
    a2b2:	cf 5c       	subi	r28, 0xCF	; 207
    a2b4:	d0 40       	sbci	r29, 0x00	; 0
    a2b6:	45 91       	lpm	r20, Z+
    a2b8:	54 91       	lpm	r21, Z
    a2ba:	ca 53       	subi	r28, 0x3A	; 58
    a2bc:	df 4f       	sbci	r29, 0xFF	; 255
    a2be:	e8 80       	ld	r14, Y
    a2c0:	f9 80       	ldd	r15, Y+1	; 0x01
    a2c2:	c6 5c       	subi	r28, 0xC6	; 198
    a2c4:	d0 40       	sbci	r29, 0x00	; 0
    a2c6:	cc 53       	subi	r28, 0x3C	; 60
    a2c8:	df 4f       	sbci	r29, 0xFF	; 255
    a2ca:	08 81       	ld	r16, Y
    a2cc:	19 81       	ldd	r17, Y+1	; 0x01
    a2ce:	c4 5c       	subi	r28, 0xC4	; 196
    a2d0:	d0 40       	sbci	r29, 0x00	; 0
    a2d2:	ce 53       	subi	r28, 0x3E	; 62
    a2d4:	df 4f       	sbci	r29, 0xFF	; 255
    a2d6:	68 81       	ld	r22, Y
    a2d8:	79 81       	ldd	r23, Y+1	; 0x01
    a2da:	c2 5c       	subi	r28, 0xC2	; 194
    a2dc:	d0 40       	sbci	r29, 0x00	; 0
    a2de:	c0 54       	subi	r28, 0x40	; 64
    a2e0:	df 4f       	sbci	r29, 0xFF	; 255
    a2e2:	88 81       	ld	r24, Y
    a2e4:	99 81       	ldd	r25, Y+1	; 0x01
    a2e6:	c0 5c       	subi	r28, 0xC0	; 192
    a2e8:	d0 40       	sbci	r29, 0x00	; 0
    a2ea:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    a2ee:	18 2f       	mov	r17, r24
    a2f0:	5f ef       	ldi	r21, 0xFF	; 255
    a2f2:	c5 1a       	sub	r12, r21
    a2f4:	d5 0a       	sbc	r13, r21
    a2f6:	88 23       	and	r24, r24
    a2f8:	09 f4       	brne	.+2      	; 0xa2fc <draw_menu(bool)+0x1c74>
    a2fa:	73 cf       	rjmp	.-282    	; 0xa1e2 <draw_menu(bool)+0x1b5a>
    a2fc:	ce 54       	subi	r28, 0x4E	; 78
    a2fe:	df 4f       	sbci	r29, 0xFF	; 255
    a300:	b8 82       	st	Y, r11
    a302:	c2 5b       	subi	r28, 0xB2	; 178
    a304:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2106
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    a306:	f2 01       	movw	r30, r4
    a308:	e2 54       	subi	r30, 0x42	; 66
    a30a:	fe 4f       	sbci	r31, 0xFE	; 254
    a30c:	e6 0d       	add	r30, r6
    a30e:	f7 1d       	adc	r31, r7
    a310:	25 91       	lpm	r18, Z+
    a312:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    a314:	ca 54       	subi	r28, 0x4A	; 74
    a316:	df 4f       	sbci	r29, 0xFF	; 255
    a318:	e8 81       	ld	r30, Y
    a31a:	f9 81       	ldd	r31, Y+1	; 0x01
    a31c:	c6 5b       	subi	r28, 0xB6	; 182
    a31e:	d0 40       	sbci	r29, 0x00	; 0
    a320:	84 91       	lpm	r24, Z
    a322:	cd 54       	subi	r28, 0x4D	; 77
    a324:	df 4f       	sbci	r29, 0xFF	; 255
    a326:	68 81       	ld	r22, Y
    a328:	c3 5b       	subi	r28, 0xB3	; 179
    a32a:	d0 40       	sbci	r29, 0x00	; 0
    a32c:	70 e0       	ldi	r23, 0x00	; 0
    a32e:	4b 2d       	mov	r20, r11
    a330:	90 e0       	ldi	r25, 0x00	; 0
    a332:	f9 01       	movw	r30, r18
    a334:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
          ret = true;
    a336:	c4 53       	subi	r28, 0x34	; 52
    a338:	df 4f       	sbci	r29, 0xFF	; 255
    a33a:	18 83       	st	Y, r17
    a33c:	cc 5c       	subi	r28, 0xCC	; 204
    a33e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    a340:	93 94       	inc	r9
    a342:	03 cd       	rjmp	.-1530   	; 0x9d4a <draw_menu(bool)+0x16c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    a344:	f1 01       	movw	r30, r2
    a346:	85 91       	lpm	r24, Z+
    a348:	94 91       	lpm	r25, Z
    a34a:	c8 53       	subi	r28, 0x38	; 56
    a34c:	df 4f       	sbci	r29, 0xFF	; 255
    a34e:	e8 81       	ld	r30, Y
    a350:	f9 81       	ldd	r31, Y+1	; 0x01
    a352:	c8 5c       	subi	r28, 0xC8	; 200
    a354:	d0 40       	sbci	r29, 0x00	; 0
    a356:	64 91       	lpm	r22, Z
    a358:	c6 54       	subi	r28, 0x46	; 70
    a35a:	df 4f       	sbci	r29, 0xFF	; 255
    a35c:	48 81       	ld	r20, Y
    a35e:	59 81       	ldd	r21, Y+1	; 0x01
    a360:	ca 5b       	subi	r28, 0xBA	; 186
    a362:	d0 40       	sbci	r29, 0x00	; 0
    a364:	84 0f       	add	r24, r20
    a366:	95 1f       	adc	r25, r21
    a368:	6c 9d       	mul	r22, r12
    a36a:	a0 01       	movw	r20, r0
    a36c:	6d 9d       	mul	r22, r13
    a36e:	50 0d       	add	r21, r0
    a370:	11 24       	eor	r1, r1
    a372:	bc 01       	movw	r22, r24
    a374:	64 0f       	add	r22, r20
    a376:	75 1f       	adc	r23, r21
    a378:	ce 53       	subi	r28, 0x3E	; 62
    a37a:	df 4f       	sbci	r29, 0xFF	; 255
    a37c:	79 83       	std	Y+1, r23	; 0x01
    a37e:	68 83       	st	Y, r22
    a380:	c2 5c       	subi	r28, 0xC2	; 194
    a382:	d0 40       	sbci	r29, 0x00	; 0
    a384:	56 cf       	rjmp	.-340    	; 0xa232 <draw_menu(bool)+0x1baa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    a386:	c4 53       	subi	r28, 0x34	; 52
    a388:	df 4f       	sbci	r29, 0xFF	; 255
    a38a:	f8 81       	ld	r31, Y
    a38c:	cc 5c       	subi	r28, 0xCC	; 204
    a38e:	d0 40       	sbci	r29, 0x00	; 0
    a390:	f1 11       	cpse	r31, r1
    a392:	58 c4       	rjmp	.+2224   	; 0xac44 <draw_menu(bool)+0x25bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    a394:	ca 54       	subi	r28, 0x4A	; 74
    a396:	df 4f       	sbci	r29, 0xFF	; 255
    a398:	18 82       	st	Y, r1
    a39a:	c6 5b       	subi	r28, 0xB6	; 182
    a39c:	d0 40       	sbci	r29, 0x00	; 0
    a39e:	93 01       	movw	r18, r6
    a3a0:	2c 53       	subi	r18, 0x3C	; 60
    a3a2:	3d 4f       	sbci	r19, 0xFD	; 253
    a3a4:	c0 52       	subi	r28, 0x20	; 32
    a3a6:	df 4f       	sbci	r29, 0xFF	; 255
    a3a8:	39 83       	std	Y+1, r19	; 0x01
    a3aa:	28 83       	st	Y, r18
    a3ac:	c0 5e       	subi	r28, 0xE0	; 224
    a3ae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
    a3b0:	ae 01       	movw	r20, r28
    a3b2:	4f 57       	subi	r20, 0x7F	; 127
    a3b4:	5f 4f       	sbci	r21, 0xFF	; 255
    a3b6:	cc 54       	subi	r28, 0x4C	; 76
    a3b8:	df 4f       	sbci	r29, 0xFF	; 255
    a3ba:	59 83       	std	Y+1, r21	; 0x01
    a3bc:	48 83       	st	Y, r20
    a3be:	c4 5b       	subi	r28, 0xB4	; 180
    a3c0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    a3c2:	c0 52       	subi	r28, 0x20	; 32
    a3c4:	df 4f       	sbci	r29, 0xFF	; 255
    a3c6:	e8 81       	ld	r30, Y
    a3c8:	f9 81       	ldd	r31, Y+1	; 0x01
    a3ca:	c0 5e       	subi	r28, 0xE0	; 224
    a3cc:	d0 40       	sbci	r29, 0x00	; 0
    a3ce:	84 91       	lpm	r24, Z
    a3d0:	ca 54       	subi	r28, 0x4A	; 74
    a3d2:	df 4f       	sbci	r29, 0xFF	; 255
    a3d4:	f8 81       	ld	r31, Y
    a3d6:	c6 5b       	subi	r28, 0xB6	; 182
    a3d8:	d0 40       	sbci	r29, 0x00	; 0
    a3da:	f8 17       	cp	r31, r24
    a3dc:	08 f0       	brcs	.+2      	; 0xa3e0 <draw_menu(bool)+0x1d58>
    a3de:	38 c4       	rjmp	.+2160   	; 0xac50 <draw_menu(bool)+0x25c8>
    a3e0:	2e e1       	ldi	r18, 0x1E	; 30
    a3e2:	f2 9f       	mul	r31, r18
    a3e4:	20 01       	movw	r4, r0
    a3e6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    a3e8:	f2 01       	movw	r30, r4
    a3ea:	e4 54       	subi	r30, 0x44	; 68
    a3ec:	fd 4f       	sbci	r31, 0xFD	; 253
    a3ee:	e6 0d       	add	r30, r6
    a3f0:	f7 1d       	adc	r31, r7
    a3f2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
    if (enable_redraw(rdr, redraw_class) == true)
    a3f4:	cf 52       	subi	r28, 0x2F	; 47
    a3f6:	df 4f       	sbci	r29, 0xFF	; 255
    a3f8:	68 81       	ld	r22, Y
    a3fa:	c1 5d       	subi	r28, 0xD1	; 209
    a3fc:	d0 40       	sbci	r29, 0x00	; 0
    a3fe:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <enable_redraw(unsigned char, unsigned char)>
    a402:	88 23       	and	r24, r24
    a404:	09 f4       	brne	.+2      	; 0xa408 <draw_menu(bool)+0x1d80>
    a406:	4c c2       	rjmp	.+1176   	; 0xa8a0 <draw_menu(bool)+0x2218>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
    {
      loop_i = 0;
    a408:	ce 54       	subi	r28, 0x4E	; 78
    a40a:	df 4f       	sbci	r29, 0xFF	; 255
    a40c:	18 82       	st	Y, r1
    a40e:	c2 5b       	subi	r28, 0xB2	; 178
    a410:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2126
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    a412:	f2 01       	movw	r30, r4
    a414:	e8 54       	subi	r30, 0x48	; 72
    a416:	fd 4f       	sbci	r31, 0xFD	; 253
    a418:	e6 0d       	add	r30, r6
    a41a:	f7 1d       	adc	r31, r7
    a41c:	25 91       	lpm	r18, Z+
    a41e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2127
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a420:	c2 01       	movw	r24, r4
    a422:	8d 54       	subi	r24, 0x4D	; 77
    a424:	9d 4f       	sbci	r25, 0xFD	; 253
    a426:	a3 01       	movw	r20, r6
    a428:	48 0f       	add	r20, r24
    a42a:	59 1f       	adc	r21, r25
    a42c:	c4 54       	subi	r28, 0x44	; 68
    a42e:	df 4f       	sbci	r29, 0xFF	; 255
    a430:	59 83       	std	Y+1, r21	; 0x01
    a432:	48 83       	st	Y, r20
    a434:	cc 5b       	subi	r28, 0xBC	; 188
    a436:	d0 40       	sbci	r29, 0x00	; 0
    a438:	fa 01       	movw	r30, r20
    a43a:	84 91       	lpm	r24, Z
    a43c:	cd 54       	subi	r28, 0x4D	; 77
    a43e:	df 4f       	sbci	r29, 0xFF	; 255
    a440:	68 81       	ld	r22, Y
    a442:	c3 5b       	subi	r28, 0xB3	; 179
    a444:	d0 40       	sbci	r29, 0x00	; 0
    a446:	70 e0       	ldi	r23, 0x00	; 0
    a448:	40 e0       	ldi	r20, 0x00	; 0
    a44a:	90 e0       	ldi	r25, 0x00	; 0
    a44c:	f9 01       	movw	r30, r18
    a44e:	19 95       	eicall
    a450:	cf 54       	subi	r28, 0x4F	; 79
    a452:	df 4f       	sbci	r29, 0xFF	; 255
    a454:	88 83       	st	Y, r24
    a456:	c1 5b       	subi	r28, 0xB1	; 177
    a458:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
    a45a:	f2 01       	movw	r30, r4
    a45c:	ec 54       	subi	r30, 0x4C	; 76
    a45e:	fd 4f       	sbci	r31, 0xFD	; 253
    a460:	e6 0d       	add	r30, r6
    a462:	f7 1d       	adc	r31, r7
    a464:	25 91       	lpm	r18, Z+
    a466:	34 91       	lpm	r19, Z
    a468:	ce 51       	subi	r28, 0x1E	; 30
    a46a:	df 4f       	sbci	r29, 0xFF	; 255
    a46c:	39 83       	std	Y+1, r19	; 0x01
    a46e:	28 83       	st	Y, r18
    a470:	c2 5e       	subi	r28, 0xE2	; 226
    a472:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    a474:	f2 01       	movw	r30, r4
    a476:	ee 54       	subi	r30, 0x4E	; 78
    a478:	fd 4f       	sbci	r31, 0xFD	; 253
    a47a:	e6 0d       	add	r30, r6
    a47c:	f7 1d       	adc	r31, r7
    a47e:	44 91       	lpm	r20, Z
    a480:	c2 01       	movw	r24, r4
    a482:	80 55       	subi	r24, 0x50	; 80
    a484:	9d 4f       	sbci	r25, 0xFD	; 253
    a486:	b3 01       	movw	r22, r6
    a488:	68 0f       	add	r22, r24
    a48a:	79 1f       	adc	r23, r25
    a48c:	c1 53       	subi	r28, 0x31	; 49
    a48e:	df 4f       	sbci	r29, 0xFF	; 255
    a490:	79 83       	std	Y+1, r23	; 0x01
    a492:	68 83       	st	Y, r22
    a494:	cf 5c       	subi	r28, 0xCF	; 207
    a496:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
      if (slider_active != MENU_SLIDER_OFF)
    a498:	4f 3f       	cpi	r20, 0xFF	; 255
    a49a:	99 f0       	breq	.+38     	; 0xa4c2 <draw_menu(bool)+0x1e3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    a49c:	fb 01       	movw	r30, r22
    a49e:	24 91       	lpm	r18, Z
    a4a0:	f2 01       	movw	r30, r4
    a4a2:	ef 54       	subi	r30, 0x4F	; 79
    a4a4:	fd 4f       	sbci	r31, 0xFD	; 253
    a4a6:	e6 0d       	add	r30, r6
    a4a8:	f7 1d       	adc	r31, r7
    a4aa:	e4 91       	lpm	r30, Z
    a4ac:	2e 9f       	mul	r18, r30
    a4ae:	20 2d       	mov	r18, r0
    a4b0:	11 24       	eor	r1, r1
    a4b2:	be 01       	movw	r22, r28
    a4b4:	6f 54       	subi	r22, 0x4F	; 79
    a4b6:	7f 4f       	sbci	r23, 0xFF	; 255
    a4b8:	ce 01       	movw	r24, r28
    a4ba:	8e 54       	subi	r24, 0x4E	; 78
    a4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    a4be:	0e 94 44 29 	call	0x5288	; 0x5288 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a4c2:	c2 01       	movw	r24, r4
    a4c4:	81 55       	subi	r24, 0x51	; 81
    a4c6:	9d 4f       	sbci	r25, 0xFD	; 253
    a4c8:	93 01       	movw	r18, r6
    a4ca:	28 0f       	add	r18, r24
    a4cc:	39 1f       	adc	r19, r25
    a4ce:	c2 54       	subi	r28, 0x42	; 66
    a4d0:	df 4f       	sbci	r29, 0xFF	; 255
    a4d2:	39 83       	std	Y+1, r19	; 0x01
    a4d4:	28 83       	st	Y, r18
    a4d6:	ce 5b       	subi	r28, 0xBE	; 190
    a4d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a4da:	40 97       	sbiw	r24, 0x10	; 16
    a4dc:	a3 01       	movw	r20, r6
    a4de:	48 0f       	add	r20, r24
    a4e0:	59 1f       	adc	r21, r25
    a4e2:	c8 53       	subi	r28, 0x38	; 56
    a4e4:	df 4f       	sbci	r29, 0xFF	; 255
    a4e6:	59 83       	std	Y+1, r21	; 0x01
    a4e8:	48 83       	st	Y, r20
    a4ea:	c8 5c       	subi	r28, 0xC8	; 200
    a4ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a4ee:	12 01       	movw	r2, r4
    a4f0:	5f e5       	ldi	r21, 0x5F	; 95
    a4f2:	25 1a       	sub	r2, r21
    a4f4:	5d ef       	ldi	r21, 0xFD	; 253
    a4f6:	35 0a       	sbc	r3, r21
    a4f8:	26 0c       	add	r2, r6
    a4fa:	37 1c       	adc	r3, r7
    a4fc:	0f 96       	adiw	r24, 0x0f	; 15
    a4fe:	b3 01       	movw	r22, r6
    a500:	68 0f       	add	r22, r24
    a502:	79 1f       	adc	r23, r25
    a504:	c6 53       	subi	r28, 0x36	; 54
    a506:	df 4f       	sbci	r29, 0xFF	; 255
    a508:	79 83       	std	Y+1, r23	; 0x01
    a50a:	68 83       	st	Y, r22
    a50c:	ca 5c       	subi	r28, 0xCA	; 202
    a50e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a510:	01 97       	sbiw	r24, 0x01	; 1
    a512:	f3 01       	movw	r30, r6
    a514:	e8 0f       	add	r30, r24
    a516:	f9 1f       	adc	r31, r25
    a518:	c3 53       	subi	r28, 0x33	; 51
    a51a:	df 4f       	sbci	r29, 0xFF	; 255
    a51c:	f9 83       	std	Y+1, r31	; 0x01
    a51e:	e8 83       	st	Y, r30
    a520:	cd 5c       	subi	r28, 0xCD	; 205
    a522:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    a524:	0d 96       	adiw	r24, 0x0d	; 13
    a526:	93 01       	movw	r18, r6
    a528:	28 0f       	add	r18, r24
    a52a:	39 1f       	adc	r19, r25
    a52c:	ce 52       	subi	r28, 0x2E	; 46
    a52e:	df 4f       	sbci	r29, 0xFF	; 255
    a530:	39 83       	std	Y+1, r19	; 0x01
    a532:	28 83       	st	Y, r18
    a534:	c2 5d       	subi	r28, 0xD2	; 210
    a536:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    a538:	0f 97       	sbiw	r24, 0x0f	; 15
    a53a:	a3 01       	movw	r20, r6
    a53c:	48 0f       	add	r20, r24
    a53e:	59 1f       	adc	r21, r25
    a540:	cc 52       	subi	r28, 0x2C	; 44
    a542:	df 4f       	sbci	r29, 0xFF	; 255
    a544:	59 83       	std	Y+1, r21	; 0x01
    a546:	48 83       	st	Y, r20
    a548:	c4 5d       	subi	r28, 0xD4	; 212
    a54a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    a54c:	02 97       	sbiw	r24, 0x02	; 2
    a54e:	b3 01       	movw	r22, r6
    a550:	68 0f       	add	r22, r24
    a552:	79 1f       	adc	r23, r25
    a554:	ca 52       	subi	r28, 0x2A	; 42
    a556:	df 4f       	sbci	r29, 0xFF	; 255
    a558:	79 83       	std	Y+1, r23	; 0x01
    a55a:	68 83       	st	Y, r22
    a55c:	c6 5d       	subi	r28, 0xD6	; 214
    a55e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    a560:	01 97       	sbiw	r24, 0x01	; 1
    a562:	f3 01       	movw	r30, r6
    a564:	e8 0f       	add	r30, r24
    a566:	f9 1f       	adc	r31, r25
    a568:	c8 52       	subi	r28, 0x28	; 40
    a56a:	df 4f       	sbci	r29, 0xFF	; 255
    a56c:	f9 83       	std	Y+1, r31	; 0x01
    a56e:	e8 83       	st	Y, r30
    a570:	c8 5d       	subi	r28, 0xD8	; 216
    a572:	d0 40       	sbci	r29, 0x00	; 0
    a574:	01 97       	sbiw	r24, 0x01	; 1
    a576:	93 01       	movw	r18, r6
    a578:	28 0f       	add	r18, r24
    a57a:	39 1f       	adc	r19, r25
    a57c:	c6 52       	subi	r28, 0x26	; 38
    a57e:	df 4f       	sbci	r29, 0xFF	; 255
    a580:	39 83       	std	Y+1, r19	; 0x01
    a582:	28 83       	st	Y, r18
    a584:	ca 5d       	subi	r28, 0xDA	; 218
    a586:	d0 40       	sbci	r29, 0x00	; 0
    a588:	02 97       	sbiw	r24, 0x02	; 2
    a58a:	a3 01       	movw	r20, r6
    a58c:	48 0f       	add	r20, r24
    a58e:	59 1f       	adc	r21, r25
    a590:	c4 52       	subi	r28, 0x24	; 36
    a592:	df 4f       	sbci	r29, 0xFF	; 255
    a594:	59 83       	std	Y+1, r21	; 0x01
    a596:	48 83       	st	Y, r20
    a598:	cc 5d       	subi	r28, 0xDC	; 220
    a59a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    a59c:	02 97       	sbiw	r24, 0x02	; 2
    a59e:	b3 01       	movw	r22, r6
    a5a0:	68 0f       	add	r22, r24
    a5a2:	79 1f       	adc	r23, r25
    a5a4:	c2 52       	subi	r28, 0x22	; 34
    a5a6:	df 4f       	sbci	r29, 0xFF	; 255
    a5a8:	79 83       	std	Y+1, r23	; 0x01
    a5aa:	68 83       	st	Y, r22
    a5ac:	ce 5d       	subi	r28, 0xDE	; 222
    a5ae:	d0 40       	sbci	r29, 0x00	; 0
    a5b0:	91 2c       	mov	r9, r1
    a5b2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    a5b4:	ce 54       	subi	r28, 0x4E	; 78
    a5b6:	df 4f       	sbci	r29, 0xFF	; 255
    a5b8:	88 81       	ld	r24, Y
    a5ba:	c2 5b       	subi	r28, 0xB2	; 178
    a5bc:	d0 40       	sbci	r29, 0x00	; 0
    a5be:	cf 54       	subi	r28, 0x4F	; 79
    a5c0:	df 4f       	sbci	r29, 0xFF	; 255
    a5c2:	98 81       	ld	r25, Y
    a5c4:	c1 5b       	subi	r28, 0xB1	; 177
    a5c6:	d0 40       	sbci	r29, 0x00	; 0
    a5c8:	89 17       	cp	r24, r25
    a5ca:	08 f0       	brcs	.+2      	; 0xa5ce <draw_menu(bool)+0x1f46>
    a5cc:	69 c1       	rjmp	.+722    	; 0xa8a0 <draw_menu(bool)+0x2218>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a5ce:	c2 54       	subi	r28, 0x42	; 66
    a5d0:	df 4f       	sbci	r29, 0xFF	; 255
    a5d2:	e8 81       	ld	r30, Y
    a5d4:	f9 81       	ldd	r31, Y+1	; 0x01
    a5d6:	ce 5b       	subi	r28, 0xBE	; 190
    a5d8:	d0 40       	sbci	r29, 0x00	; 0
    a5da:	94 91       	lpm	r25, Z
    a5dc:	91 11       	cpse	r25, r1
    a5de:	34 c0       	rjmp	.+104    	; 0xa648 <draw_menu(bool)+0x1fc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a5e0:	c8 53       	subi	r28, 0x38	; 56
    a5e2:	df 4f       	sbci	r29, 0xFF	; 255
    a5e4:	e8 81       	ld	r30, Y
    a5e6:	f9 81       	ldd	r31, Y+1	; 0x01
    a5e8:	c8 5c       	subi	r28, 0xC8	; 200
    a5ea:	d0 40       	sbci	r29, 0x00	; 0
    a5ec:	25 91       	lpm	r18, Z+
    a5ee:	34 91       	lpm	r19, Z
    a5f0:	c8 54       	subi	r28, 0x48	; 72
    a5f2:	df 4f       	sbci	r29, 0xFF	; 255
    a5f4:	48 81       	ld	r20, Y
    a5f6:	59 81       	ldd	r21, Y+1	; 0x01
    a5f8:	c8 5b       	subi	r28, 0xB8	; 184
    a5fa:	d0 40       	sbci	r29, 0x00	; 0
    a5fc:	42 0f       	add	r20, r18
    a5fe:	53 1f       	adc	r21, r19
    a600:	c0 54       	subi	r28, 0x40	; 64
    a602:	df 4f       	sbci	r29, 0xFF	; 255
    a604:	59 83       	std	Y+1, r21	; 0x01
    a606:	48 83       	st	Y, r20
    a608:	c0 5c       	subi	r28, 0xC0	; 192
    a60a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a60c:	f1 01       	movw	r30, r2
    a60e:	25 91       	lpm	r18, Z+
    a610:	34 91       	lpm	r19, Z
    a612:	c6 53       	subi	r28, 0x36	; 54
    a614:	df 4f       	sbci	r29, 0xFF	; 255
    a616:	e8 81       	ld	r30, Y
    a618:	f9 81       	ldd	r31, Y+1	; 0x01
    a61a:	ca 5c       	subi	r28, 0xCA	; 202
    a61c:	d0 40       	sbci	r29, 0x00	; 0
    a61e:	94 91       	lpm	r25, Z
    a620:	c6 54       	subi	r28, 0x46	; 70
    a622:	df 4f       	sbci	r29, 0xFF	; 255
    a624:	48 81       	ld	r20, Y
    a626:	59 81       	ldd	r21, Y+1	; 0x01
    a628:	ca 5b       	subi	r28, 0xBA	; 186
    a62a:	d0 40       	sbci	r29, 0x00	; 0
    a62c:	24 0f       	add	r18, r20
    a62e:	35 1f       	adc	r19, r21
    a630:	b9 01       	movw	r22, r18
    a632:	9f 9d       	mul	r25, r15
    a634:	60 0d       	add	r22, r0
    a636:	71 1d       	adc	r23, r1
    a638:	11 24       	eor	r1, r1
    a63a:	ce 53       	subi	r28, 0x3E	; 62
    a63c:	df 4f       	sbci	r29, 0xFF	; 255
    a63e:	79 83       	std	Y+1, r23	; 0x01
    a640:	68 83       	st	Y, r22
    a642:	c2 5c       	subi	r28, 0xC2	; 194
    a644:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2138
          loop_t++;
    a646:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2140
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    a648:	c2 54       	subi	r28, 0x42	; 66
    a64a:	df 4f       	sbci	r29, 0xFF	; 255
    a64c:	e8 81       	ld	r30, Y
    a64e:	f9 81       	ldd	r31, Y+1	; 0x01
    a650:	ce 5b       	subi	r28, 0xBE	; 190
    a652:	d0 40       	sbci	r29, 0x00	; 0
    a654:	94 91       	lpm	r25, Z
    a656:	91 30       	cpi	r25, 0x01	; 1
    a658:	09 f0       	breq	.+2      	; 0xa65c <draw_menu(bool)+0x1fd4>
    a65a:	34 c0       	rjmp	.+104    	; 0xa6c4 <draw_menu(bool)+0x203c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    a65c:	f1 01       	movw	r30, r2
    a65e:	25 91       	lpm	r18, Z+
    a660:	34 91       	lpm	r19, Z
    a662:	c6 54       	subi	r28, 0x46	; 70
    a664:	df 4f       	sbci	r29, 0xFF	; 255
    a666:	48 81       	ld	r20, Y
    a668:	59 81       	ldd	r21, Y+1	; 0x01
    a66a:	ca 5b       	subi	r28, 0xBA	; 186
    a66c:	d0 40       	sbci	r29, 0x00	; 0
    a66e:	42 0f       	add	r20, r18
    a670:	53 1f       	adc	r21, r19
    a672:	ce 53       	subi	r28, 0x3E	; 62
    a674:	df 4f       	sbci	r29, 0xFF	; 255
    a676:	59 83       	std	Y+1, r21	; 0x01
    a678:	48 83       	st	Y, r20
    a67a:	c2 5c       	subi	r28, 0xC2	; 194
    a67c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a67e:	c8 53       	subi	r28, 0x38	; 56
    a680:	df 4f       	sbci	r29, 0xFF	; 255
    a682:	e8 81       	ld	r30, Y
    a684:	f9 81       	ldd	r31, Y+1	; 0x01
    a686:	c8 5c       	subi	r28, 0xC8	; 200
    a688:	d0 40       	sbci	r29, 0x00	; 0
    a68a:	25 91       	lpm	r18, Z+
    a68c:	34 91       	lpm	r19, Z
    a68e:	c3 53       	subi	r28, 0x33	; 51
    a690:	df 4f       	sbci	r29, 0xFF	; 255
    a692:	e8 81       	ld	r30, Y
    a694:	f9 81       	ldd	r31, Y+1	; 0x01
    a696:	cd 5c       	subi	r28, 0xCD	; 205
    a698:	d0 40       	sbci	r29, 0x00	; 0
    a69a:	94 91       	lpm	r25, Z
    a69c:	c8 54       	subi	r28, 0x48	; 72
    a69e:	df 4f       	sbci	r29, 0xFF	; 255
    a6a0:	48 81       	ld	r20, Y
    a6a2:	59 81       	ldd	r21, Y+1	; 0x01
    a6a4:	c8 5b       	subi	r28, 0xB8	; 184
    a6a6:	d0 40       	sbci	r29, 0x00	; 0
    a6a8:	24 0f       	add	r18, r20
    a6aa:	35 1f       	adc	r19, r21
    a6ac:	b9 01       	movw	r22, r18
    a6ae:	9f 9d       	mul	r25, r15
    a6b0:	60 0d       	add	r22, r0
    a6b2:	71 1d       	adc	r23, r1
    a6b4:	11 24       	eor	r1, r1
    a6b6:	c0 54       	subi	r28, 0x40	; 64
    a6b8:	df 4f       	sbci	r29, 0xFF	; 255
    a6ba:	79 83       	std	Y+1, r23	; 0x01
    a6bc:	68 83       	st	Y, r22
    a6be:	c0 5c       	subi	r28, 0xC0	; 192
    a6c0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
          loop_t++;
    a6c2:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    a6c4:	c2 54       	subi	r28, 0x42	; 66
    a6c6:	df 4f       	sbci	r29, 0xFF	; 255
    a6c8:	e8 81       	ld	r30, Y
    a6ca:	f9 81       	ldd	r31, Y+1	; 0x01
    a6cc:	ce 5b       	subi	r28, 0xBE	; 190
    a6ce:	d0 40       	sbci	r29, 0x00	; 0
    a6d0:	94 91       	lpm	r25, Z
    a6d2:	92 30       	cpi	r25, 0x02	; 2
    a6d4:	09 f0       	breq	.+2      	; 0xa6d8 <draw_menu(bool)+0x2050>
    a6d6:	4b c0       	rjmp	.+150    	; 0xa76e <draw_menu(bool)+0x20e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a6d8:	c8 53       	subi	r28, 0x38	; 56
    a6da:	df 4f       	sbci	r29, 0xFF	; 255
    a6dc:	e8 81       	ld	r30, Y
    a6de:	f9 81       	ldd	r31, Y+1	; 0x01
    a6e0:	c8 5c       	subi	r28, 0xC8	; 200
    a6e2:	d0 40       	sbci	r29, 0x00	; 0
    a6e4:	25 91       	lpm	r18, Z+
    a6e6:	34 91       	lpm	r19, Z
    a6e8:	c3 53       	subi	r28, 0x33	; 51
    a6ea:	df 4f       	sbci	r29, 0xFF	; 255
    a6ec:	e8 81       	ld	r30, Y
    a6ee:	f9 81       	ldd	r31, Y+1	; 0x01
    a6f0:	cd 5c       	subi	r28, 0xCD	; 205
    a6f2:	d0 40       	sbci	r29, 0x00	; 0
    a6f4:	94 91       	lpm	r25, Z
    a6f6:	c8 54       	subi	r28, 0x48	; 72
    a6f8:	df 4f       	sbci	r29, 0xFF	; 255
    a6fa:	48 81       	ld	r20, Y
    a6fc:	59 81       	ldd	r21, Y+1	; 0x01
    a6fe:	c8 5b       	subi	r28, 0xB8	; 184
    a700:	d0 40       	sbci	r29, 0x00	; 0
    a702:	24 0f       	add	r18, r20
    a704:	35 1f       	adc	r19, r21
    a706:	b9 01       	movw	r22, r18
    a708:	9f 9d       	mul	r25, r15
    a70a:	60 0d       	add	r22, r0
    a70c:	71 1d       	adc	r23, r1
    a70e:	11 24       	eor	r1, r1
    a710:	c0 54       	subi	r28, 0x40	; 64
    a712:	df 4f       	sbci	r29, 0xFF	; 255
    a714:	79 83       	std	Y+1, r23	; 0x01
    a716:	68 83       	st	Y, r22
    a718:	c0 5c       	subi	r28, 0xC0	; 192
    a71a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    a71c:	f1 01       	movw	r30, r2
    a71e:	25 91       	lpm	r18, Z+
    a720:	34 91       	lpm	r19, Z
    a722:	c6 53       	subi	r28, 0x36	; 54
    a724:	df 4f       	sbci	r29, 0xFF	; 255
    a726:	e8 81       	ld	r30, Y
    a728:	f9 81       	ldd	r31, Y+1	; 0x01
    a72a:	ca 5c       	subi	r28, 0xCA	; 202
    a72c:	d0 40       	sbci	r29, 0x00	; 0
    a72e:	94 91       	lpm	r25, Z
    a730:	c6 54       	subi	r28, 0x46	; 70
    a732:	df 4f       	sbci	r29, 0xFF	; 255
    a734:	48 81       	ld	r20, Y
    a736:	59 81       	ldd	r21, Y+1	; 0x01
    a738:	ca 5b       	subi	r28, 0xBA	; 186
    a73a:	d0 40       	sbci	r29, 0x00	; 0
    a73c:	24 0f       	add	r18, r20
    a73e:	35 1f       	adc	r19, r21
    a740:	b9 01       	movw	r22, r18
    a742:	99 9d       	mul	r25, r9
    a744:	60 0d       	add	r22, r0
    a746:	71 1d       	adc	r23, r1
    a748:	11 24       	eor	r1, r1
    a74a:	ce 53       	subi	r28, 0x3E	; 62
    a74c:	df 4f       	sbci	r29, 0xFF	; 255
    a74e:	79 83       	std	Y+1, r23	; 0x01
    a750:	68 83       	st	Y, r22
    a752:	c2 5c       	subi	r28, 0xC2	; 194
    a754:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
          loop_t++;
    a756:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    a758:	c1 53       	subi	r28, 0x31	; 49
    a75a:	df 4f       	sbci	r29, 0xFF	; 255
    a75c:	e8 81       	ld	r30, Y
    a75e:	f9 81       	ldd	r31, Y+1	; 0x01
    a760:	cf 5c       	subi	r28, 0xCF	; 207
    a762:	d0 40       	sbci	r29, 0x00	; 0
    a764:	94 91       	lpm	r25, Z
    a766:	f9 16       	cp	r15, r25
    a768:	10 f0       	brcs	.+4      	; 0xa76e <draw_menu(bool)+0x20e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2154
          {
            loop_t = 0;
            loop_r++;
    a76a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    a76c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
    a76e:	c4 54       	subi	r28, 0x44	; 68
    a770:	df 4f       	sbci	r29, 0xFF	; 255
    a772:	e8 81       	ld	r30, Y
    a774:	f9 81       	ldd	r31, Y+1	; 0x01
    a776:	cc 5b       	subi	r28, 0xBC	; 188
    a778:	d0 40       	sbci	r29, 0x00	; 0
    a77a:	44 91       	lpm	r20, Z
    a77c:	8e 01       	movw	r16, r28
    a77e:	0f 57       	subi	r16, 0x7F	; 127
    a780:	1f 4f       	sbci	r17, 0xFF	; 255
    a782:	9e 01       	movw	r18, r28
    a784:	2f 5f       	subi	r18, 0xFF	; 255
    a786:	3f 4f       	sbci	r19, 0xFF	; 255
    a788:	cd 54       	subi	r28, 0x4D	; 77
    a78a:	df 4f       	sbci	r29, 0xFF	; 255
    a78c:	68 81       	ld	r22, Y
    a78e:	c3 5b       	subi	r28, 0xB3	; 179
    a790:	d0 40       	sbci	r29, 0x00	; 0
    a792:	ce 51       	subi	r28, 0x1E	; 30
    a794:	df 4f       	sbci	r29, 0xFF	; 255
    a796:	e8 81       	ld	r30, Y
    a798:	f9 81       	ldd	r31, Y+1	; 0x01
    a79a:	c2 5e       	subi	r28, 0xE2	; 226
    a79c:	d0 40       	sbci	r29, 0x00	; 0
    a79e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    a7a0:	ce 52       	subi	r28, 0x2E	; 46
    a7a2:	df 4f       	sbci	r29, 0xFF	; 255
    a7a4:	e8 81       	ld	r30, Y
    a7a6:	f9 81       	ldd	r31, Y+1	; 0x01
    a7a8:	c2 5d       	subi	r28, 0xD2	; 210
    a7aa:	d0 40       	sbci	r29, 0x00	; 0
    a7ac:	25 91       	lpm	r18, Z+
    a7ae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a7b0:	c4 54       	subi	r28, 0x44	; 68
    a7b2:	df 4f       	sbci	r29, 0xFF	; 255
    a7b4:	e8 81       	ld	r30, Y
    a7b6:	f9 81       	ldd	r31, Y+1	; 0x01
    a7b8:	cc 5b       	subi	r28, 0xBC	; 188
    a7ba:	d0 40       	sbci	r29, 0x00	; 0
    a7bc:	84 91       	lpm	r24, Z
    a7be:	cd 54       	subi	r28, 0x4D	; 77
    a7c0:	df 4f       	sbci	r29, 0xFF	; 255
    a7c2:	68 81       	ld	r22, Y
    a7c4:	c3 5b       	subi	r28, 0xB3	; 179
    a7c6:	d0 40       	sbci	r29, 0x00	; 0
    a7c8:	70 e0       	ldi	r23, 0x00	; 0
    a7ca:	ce 54       	subi	r28, 0x4E	; 78
    a7cc:	df 4f       	sbci	r29, 0xFF	; 255
    a7ce:	48 81       	ld	r20, Y
    a7d0:	c2 5b       	subi	r28, 0xB2	; 178
    a7d2:	d0 40       	sbci	r29, 0x00	; 0
    a7d4:	90 e0       	ldi	r25, 0x00	; 0
    a7d6:	f9 01       	movw	r30, r18
    a7d8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    a7da:	cc 52       	subi	r28, 0x2C	; 44
    a7dc:	df 4f       	sbci	r29, 0xFF	; 255
    a7de:	e8 81       	ld	r30, Y
    a7e0:	f9 81       	ldd	r31, Y+1	; 0x01
    a7e2:	c4 5d       	subi	r28, 0xD4	; 212
    a7e4:	d0 40       	sbci	r29, 0x00	; 0
    a7e6:	a5 90       	lpm	r10, Z+
    a7e8:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    a7ea:	ca 52       	subi	r28, 0x2A	; 42
    a7ec:	df 4f       	sbci	r29, 0xFF	; 255
    a7ee:	e8 81       	ld	r30, Y
    a7f0:	f9 81       	ldd	r31, Y+1	; 0x01
    a7f2:	c6 5d       	subi	r28, 0xD6	; 214
    a7f4:	d0 40       	sbci	r29, 0x00	; 0
    a7f6:	c5 90       	lpm	r12, Z+
    a7f8:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    a7fa:	c8 52       	subi	r28, 0x28	; 40
    a7fc:	df 4f       	sbci	r29, 0xFF	; 255
    a7fe:	e8 81       	ld	r30, Y
    a800:	f9 81       	ldd	r31, Y+1	; 0x01
    a802:	c8 5d       	subi	r28, 0xD8	; 216
    a804:	d0 40       	sbci	r29, 0x00	; 0
    a806:	e4 90       	lpm	r14, Z
    a808:	c6 52       	subi	r28, 0x26	; 38
    a80a:	df 4f       	sbci	r29, 0xFF	; 255
    a80c:	e8 81       	ld	r30, Y
    a80e:	f9 81       	ldd	r31, Y+1	; 0x01
    a810:	ca 5d       	subi	r28, 0xDA	; 218
    a812:	d0 40       	sbci	r29, 0x00	; 0
    a814:	04 91       	lpm	r16, Z
    a816:	c4 52       	subi	r28, 0x24	; 36
    a818:	df 4f       	sbci	r29, 0xFF	; 255
    a81a:	e8 81       	ld	r30, Y
    a81c:	f9 81       	ldd	r31, Y+1	; 0x01
    a81e:	cc 5d       	subi	r28, 0xDC	; 220
    a820:	d0 40       	sbci	r29, 0x00	; 0
    a822:	25 91       	lpm	r18, Z+
    a824:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    a826:	c2 52       	subi	r28, 0x22	; 34
    a828:	df 4f       	sbci	r29, 0xFF	; 255
    a82a:	e8 81       	ld	r30, Y
    a82c:	f9 81       	ldd	r31, Y+1	; 0x01
    a82e:	ce 5d       	subi	r28, 0xDE	; 222
    a830:	d0 40       	sbci	r29, 0x00	; 0
    a832:	45 91       	lpm	r20, Z+
    a834:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a836:	88 24       	eor	r8, r8
    a838:	83 94       	inc	r8
    a83a:	81 11       	cpse	r24, r1
    a83c:	01 c0       	rjmp	.+2      	; 0xa840 <draw_menu(bool)+0x21b8>
    a83e:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    a840:	cb 54       	subi	r28, 0x4B	; 75
    a842:	df 4f       	sbci	r29, 0xFF	; 255
    a844:	f8 81       	ld	r31, Y
    a846:	c5 5b       	subi	r28, 0xB5	; 181
    a848:	d0 40       	sbci	r29, 0x00	; 0
    a84a:	ff 93       	push	r31
    a84c:	cc 54       	subi	r28, 0x4C	; 76
    a84e:	df 4f       	sbci	r29, 0xFF	; 255
    a850:	68 81       	ld	r22, Y
    a852:	c4 5b       	subi	r28, 0xB4	; 180
    a854:	d0 40       	sbci	r29, 0x00	; 0
    a856:	6f 93       	push	r22
    a858:	81 e0       	ldi	r24, 0x01	; 1
    a85a:	90 e0       	ldi	r25, 0x00	; 0
    a85c:	8c 0f       	add	r24, r28
    a85e:	9d 1f       	adc	r25, r29
    a860:	9f 93       	push	r25
    a862:	8f 93       	push	r24
    a864:	ce 53       	subi	r28, 0x3E	; 62
    a866:	df 4f       	sbci	r29, 0xFF	; 255
    a868:	68 81       	ld	r22, Y
    a86a:	79 81       	ldd	r23, Y+1	; 0x01
    a86c:	c2 5c       	subi	r28, 0xC2	; 194
    a86e:	d0 40       	sbci	r29, 0x00	; 0
    a870:	c0 54       	subi	r28, 0x40	; 64
    a872:	df 4f       	sbci	r29, 0xFF	; 255
    a874:	88 81       	ld	r24, Y
    a876:	99 81       	ldd	r25, Y+1	; 0x01
    a878:	c0 5c       	subi	r28, 0xC0	; 192
    a87a:	d0 40       	sbci	r29, 0x00	; 0
    a87c:	0e 94 90 32 	call	0x6520	; 0x6520 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    a880:	ce 54       	subi	r28, 0x4E	; 78
    a882:	df 4f       	sbci	r29, 0xFF	; 255
    a884:	88 81       	ld	r24, Y
    a886:	c2 5b       	subi	r28, 0xB2	; 178
    a888:	d0 40       	sbci	r29, 0x00	; 0
    a88a:	8f 5f       	subi	r24, 0xFF	; 255
    a88c:	ce 54       	subi	r28, 0x4E	; 78
    a88e:	df 4f       	sbci	r29, 0xFF	; 255
    a890:	88 83       	st	Y, r24
    a892:	c2 5b       	subi	r28, 0xB2	; 178
    a894:	d0 40       	sbci	r29, 0x00	; 0
    a896:	0f 90       	pop	r0
    a898:	0f 90       	pop	r0
    a89a:	0f 90       	pop	r0
    a89c:	0f 90       	pop	r0
    a89e:	8a ce       	rjmp	.-748    	; 0xa5b4 <draw_menu(bool)+0x1f2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
      }
    }
    if (click_x > 0 && click_y > 0)
    a8a0:	cc 53       	subi	r28, 0x3C	; 60
    a8a2:	df 4f       	sbci	r29, 0xFF	; 255
    a8a4:	e8 81       	ld	r30, Y
    a8a6:	f9 81       	ldd	r31, Y+1	; 0x01
    a8a8:	c4 5c       	subi	r28, 0xC4	; 196
    a8aa:	d0 40       	sbci	r29, 0x00	; 0
    a8ac:	ef 2b       	or	r30, r31
    a8ae:	09 f4       	brne	.+2      	; 0xa8b2 <draw_menu(bool)+0x222a>
    a8b0:	bb c1       	rjmp	.+886    	; 0xac28 <draw_menu(bool)+0x25a0>
    a8b2:	ca 53       	subi	r28, 0x3A	; 58
    a8b4:	df 4f       	sbci	r29, 0xFF	; 255
    a8b6:	28 81       	ld	r18, Y
    a8b8:	39 81       	ldd	r19, Y+1	; 0x01
    a8ba:	c6 5c       	subi	r28, 0xC6	; 198
    a8bc:	d0 40       	sbci	r29, 0x00	; 0
    a8be:	23 2b       	or	r18, r19
    a8c0:	09 f4       	brne	.+2      	; 0xa8c4 <draw_menu(bool)+0x223c>
    a8c2:	b2 c1       	rjmp	.+868    	; 0xac28 <draw_menu(bool)+0x25a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
    {
      loop_i = 0;
    a8c4:	ce 54       	subi	r28, 0x4E	; 78
    a8c6:	df 4f       	sbci	r29, 0xFF	; 255
    a8c8:	18 82       	st	Y, r1
    a8ca:	c2 5b       	subi	r28, 0xB2	; 178
    a8cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    a8ce:	f2 01       	movw	r30, r4
    a8d0:	e8 54       	subi	r30, 0x48	; 72
    a8d2:	fd 4f       	sbci	r31, 0xFD	; 253
    a8d4:	e6 0d       	add	r30, r6
    a8d6:	f7 1d       	adc	r31, r7
    a8d8:	25 91       	lpm	r18, Z+
    a8da:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2173
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    a8dc:	c2 01       	movw	r24, r4
    a8de:	8d 54       	subi	r24, 0x4D	; 77
    a8e0:	9d 4f       	sbci	r25, 0xFD	; 253
    a8e2:	a3 01       	movw	r20, r6
    a8e4:	48 0f       	add	r20, r24
    a8e6:	59 1f       	adc	r21, r25
    a8e8:	c2 54       	subi	r28, 0x42	; 66
    a8ea:	df 4f       	sbci	r29, 0xFF	; 255
    a8ec:	59 83       	std	Y+1, r21	; 0x01
    a8ee:	48 83       	st	Y, r20
    a8f0:	ce 5b       	subi	r28, 0xBE	; 190
    a8f2:	d0 40       	sbci	r29, 0x00	; 0
    a8f4:	fa 01       	movw	r30, r20
    a8f6:	84 91       	lpm	r24, Z
    a8f8:	cd 54       	subi	r28, 0x4D	; 77
    a8fa:	df 4f       	sbci	r29, 0xFF	; 255
    a8fc:	68 81       	ld	r22, Y
    a8fe:	c3 5b       	subi	r28, 0xB3	; 179
    a900:	d0 40       	sbci	r29, 0x00	; 0
    a902:	70 e0       	ldi	r23, 0x00	; 0
    a904:	40 e0       	ldi	r20, 0x00	; 0
    a906:	90 e0       	ldi	r25, 0x00	; 0
    a908:	f9 01       	movw	r30, r18
    a90a:	19 95       	eicall
    a90c:	cf 54       	subi	r28, 0x4F	; 79
    a90e:	df 4f       	sbci	r29, 0xFF	; 255
    a910:	88 83       	st	Y, r24
    a912:	c1 5b       	subi	r28, 0xB1	; 177
    a914:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    a916:	f2 01       	movw	r30, r4
    a918:	ee 54       	subi	r30, 0x4E	; 78
    a91a:	fd 4f       	sbci	r31, 0xFD	; 253
    a91c:	e6 0d       	add	r30, r6
    a91e:	f7 1d       	adc	r31, r7
    a920:	44 91       	lpm	r20, Z
    a922:	c2 01       	movw	r24, r4
    a924:	80 55       	subi	r24, 0x50	; 80
    a926:	9d 4f       	sbci	r25, 0xFD	; 253
    a928:	93 01       	movw	r18, r6
    a92a:	28 0f       	add	r18, r24
    a92c:	39 1f       	adc	r19, r25
    a92e:	c3 53       	subi	r28, 0x33	; 51
    a930:	df 4f       	sbci	r29, 0xFF	; 255
    a932:	39 83       	std	Y+1, r19	; 0x01
    a934:	28 83       	st	Y, r18
    a936:	cd 5c       	subi	r28, 0xCD	; 205
    a938:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2175
      if (slider_active != MENU_SLIDER_OFF)
    a93a:	4f 3f       	cpi	r20, 0xFF	; 255
    a93c:	99 f0       	breq	.+38     	; 0xa964 <draw_menu(bool)+0x22dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    a93e:	f9 01       	movw	r30, r18
    a940:	24 91       	lpm	r18, Z
    a942:	f2 01       	movw	r30, r4
    a944:	ef 54       	subi	r30, 0x4F	; 79
    a946:	fd 4f       	sbci	r31, 0xFD	; 253
    a948:	e6 0d       	add	r30, r6
    a94a:	f7 1d       	adc	r31, r7
    a94c:	e4 91       	lpm	r30, Z
    a94e:	2e 9f       	mul	r18, r30
    a950:	20 2d       	mov	r18, r0
    a952:	11 24       	eor	r1, r1
    a954:	be 01       	movw	r22, r28
    a956:	6f 54       	subi	r22, 0x4F	; 79
    a958:	7f 4f       	sbci	r23, 0xFF	; 255
    a95a:	ce 01       	movw	r24, r28
    a95c:	8e 54       	subi	r24, 0x4E	; 78
    a95e:	9f 4f       	sbci	r25, 0xFF	; 255
    a960:	0e 94 44 29 	call	0x5288	; 0x5288 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    a964:	ce 54       	subi	r28, 0x4E	; 78
    a966:	df 4f       	sbci	r29, 0xFF	; 255
    a968:	88 80       	ld	r8, Y
    a96a:	c2 5b       	subi	r28, 0xB2	; 178
    a96c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
      while (loop_i < loop_cnt)
    a96e:	cf 54       	subi	r28, 0x4F	; 79
    a970:	df 4f       	sbci	r29, 0xFF	; 255
    a972:	28 80       	ld	r2, Y
    a974:	c1 5b       	subi	r28, 0xB1	; 177
    a976:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2179
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    a978:	c2 01       	movw	r24, r4
    a97a:	81 55       	subi	r24, 0x51	; 81
    a97c:	9d 4f       	sbci	r25, 0xFD	; 253
    a97e:	93 01       	movw	r18, r6
    a980:	28 0f       	add	r18, r24
    a982:	39 1f       	adc	r19, r25
    a984:	c4 54       	subi	r28, 0x44	; 68
    a986:	df 4f       	sbci	r29, 0xFF	; 255
    a988:	39 83       	std	Y+1, r19	; 0x01
    a98a:	28 83       	st	Y, r18
    a98c:	cc 5b       	subi	r28, 0xBC	; 188
    a98e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    a990:	62 01       	movw	r12, r4
    a992:	31 e6       	ldi	r19, 0x61	; 97
    a994:	c3 1a       	sub	r12, r19
    a996:	3d ef       	ldi	r19, 0xFD	; 253
    a998:	d3 0a       	sbc	r13, r19
    a99a:	c6 0c       	add	r12, r6
    a99c:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    a99e:	52 01       	movw	r10, r4
    a9a0:	4f e5       	ldi	r20, 0x5F	; 95
    a9a2:	a4 1a       	sub	r10, r20
    a9a4:	4d ef       	ldi	r20, 0xFD	; 253
    a9a6:	b4 0a       	sbc	r11, r20
    a9a8:	a6 0c       	add	r10, r6
    a9aa:	b7 1c       	adc	r11, r7
    a9ac:	01 97       	sbiw	r24, 0x01	; 1
    a9ae:	b3 01       	movw	r22, r6
    a9b0:	68 0f       	add	r22, r24
    a9b2:	79 1f       	adc	r23, r25
    a9b4:	c8 53       	subi	r28, 0x38	; 56
    a9b6:	df 4f       	sbci	r29, 0xFF	; 255
    a9b8:	79 83       	std	Y+1, r23	; 0x01
    a9ba:	68 83       	st	Y, r22
    a9bc:	c8 5c       	subi	r28, 0xC8	; 200
    a9be:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    a9c0:	01 97       	sbiw	r24, 0x01	; 1
    a9c2:	f3 01       	movw	r30, r6
    a9c4:	e8 0f       	add	r30, r24
    a9c6:	f9 1f       	adc	r31, r25
    a9c8:	c6 53       	subi	r28, 0x36	; 54
    a9ca:	df 4f       	sbci	r29, 0xFF	; 255
    a9cc:	f9 83       	std	Y+1, r31	; 0x01
    a9ce:	e8 83       	st	Y, r30
    a9d0:	ca 5c       	subi	r28, 0xCA	; 202
    a9d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    a9d4:	08 97       	sbiw	r24, 0x08	; 8
    a9d6:	93 01       	movw	r18, r6
    a9d8:	28 0f       	add	r18, r24
    a9da:	39 1f       	adc	r19, r25
    a9dc:	c1 53       	subi	r28, 0x31	; 49
    a9de:	df 4f       	sbci	r29, 0xFF	; 255
    a9e0:	39 83       	std	Y+1, r19	; 0x01
    a9e2:	28 83       	st	Y, r18
    a9e4:	cf 5c       	subi	r28, 0xCF	; 207
    a9e6:	d0 40       	sbci	r29, 0x00	; 0
    a9e8:	02 97       	sbiw	r24, 0x02	; 2
    a9ea:	a3 01       	movw	r20, r6
    a9ec:	48 0f       	add	r20, r24
    a9ee:	59 1f       	adc	r21, r25
    a9f0:	ce 52       	subi	r28, 0x2E	; 46
    a9f2:	df 4f       	sbci	r29, 0xFF	; 255
    a9f4:	59 83       	std	Y+1, r21	; 0x01
    a9f6:	48 83       	st	Y, r20
    a9f8:	c2 5d       	subi	r28, 0xD2	; 210
    a9fa:	d0 40       	sbci	r29, 0x00	; 0
    a9fc:	31 2c       	mov	r3, r1
    a9fe:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    aa00:	82 14       	cp	r8, r2
    aa02:	08 f0       	brcs	.+2      	; 0xaa06 <draw_menu(bool)+0x237e>
    aa04:	11 c1       	rjmp	.+546    	; 0xac28 <draw_menu(bool)+0x25a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2179
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    aa06:	c4 54       	subi	r28, 0x44	; 68
    aa08:	df 4f       	sbci	r29, 0xFF	; 255
    aa0a:	e8 81       	ld	r30, Y
    aa0c:	f9 81       	ldd	r31, Y+1	; 0x01
    aa0e:	cc 5b       	subi	r28, 0xBC	; 188
    aa10:	d0 40       	sbci	r29, 0x00	; 0
    aa12:	84 91       	lpm	r24, Z
    aa14:	81 11       	cpse	r24, r1
    aa16:	2f c0       	rjmp	.+94     	; 0xaa76 <draw_menu(bool)+0x23ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    aa18:	f6 01       	movw	r30, r12
    aa1a:	85 91       	lpm	r24, Z+
    aa1c:	94 91       	lpm	r25, Z
    aa1e:	c8 54       	subi	r28, 0x48	; 72
    aa20:	df 4f       	sbci	r29, 0xFF	; 255
    aa22:	28 81       	ld	r18, Y
    aa24:	39 81       	ldd	r19, Y+1	; 0x01
    aa26:	c8 5b       	subi	r28, 0xB8	; 184
    aa28:	d0 40       	sbci	r29, 0x00	; 0
    aa2a:	28 0f       	add	r18, r24
    aa2c:	39 1f       	adc	r19, r25
    aa2e:	c0 54       	subi	r28, 0x40	; 64
    aa30:	df 4f       	sbci	r29, 0xFF	; 255
    aa32:	39 83       	std	Y+1, r19	; 0x01
    aa34:	28 83       	st	Y, r18
    aa36:	c0 5c       	subi	r28, 0xC0	; 192
    aa38:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    aa3a:	f5 01       	movw	r30, r10
    aa3c:	85 91       	lpm	r24, Z+
    aa3e:	94 91       	lpm	r25, Z
    aa40:	c8 53       	subi	r28, 0x38	; 56
    aa42:	df 4f       	sbci	r29, 0xFF	; 255
    aa44:	e8 81       	ld	r30, Y
    aa46:	f9 81       	ldd	r31, Y+1	; 0x01
    aa48:	c8 5c       	subi	r28, 0xC8	; 200
    aa4a:	d0 40       	sbci	r29, 0x00	; 0
    aa4c:	24 91       	lpm	r18, Z
    aa4e:	c6 54       	subi	r28, 0x46	; 70
    aa50:	df 4f       	sbci	r29, 0xFF	; 255
    aa52:	48 81       	ld	r20, Y
    aa54:	59 81       	ldd	r21, Y+1	; 0x01
    aa56:	ca 5b       	subi	r28, 0xBA	; 186
    aa58:	d0 40       	sbci	r29, 0x00	; 0
    aa5a:	84 0f       	add	r24, r20
    aa5c:	95 1f       	adc	r25, r21
    aa5e:	bc 01       	movw	r22, r24
    aa60:	29 9d       	mul	r18, r9
    aa62:	60 0d       	add	r22, r0
    aa64:	71 1d       	adc	r23, r1
    aa66:	11 24       	eor	r1, r1
    aa68:	ce 53       	subi	r28, 0x3E	; 62
    aa6a:	df 4f       	sbci	r29, 0xFF	; 255
    aa6c:	79 83       	std	Y+1, r23	; 0x01
    aa6e:	68 83       	st	Y, r22
    aa70:	c2 5c       	subi	r28, 0xC2	; 194
    aa72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2183
          loop_t++;
    aa74:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2185
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    aa76:	c4 54       	subi	r28, 0x44	; 68
    aa78:	df 4f       	sbci	r29, 0xFF	; 255
    aa7a:	e8 81       	ld	r30, Y
    aa7c:	f9 81       	ldd	r31, Y+1	; 0x01
    aa7e:	cc 5b       	subi	r28, 0xBC	; 188
    aa80:	d0 40       	sbci	r29, 0x00	; 0
    aa82:	84 91       	lpm	r24, Z
    aa84:	81 30       	cpi	r24, 0x01	; 1
    aa86:	79 f5       	brne	.+94     	; 0xaae6 <draw_menu(bool)+0x245e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2187
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    aa88:	f5 01       	movw	r30, r10
    aa8a:	85 91       	lpm	r24, Z+
    aa8c:	94 91       	lpm	r25, Z
    aa8e:	c6 54       	subi	r28, 0x46	; 70
    aa90:	df 4f       	sbci	r29, 0xFF	; 255
    aa92:	28 81       	ld	r18, Y
    aa94:	39 81       	ldd	r19, Y+1	; 0x01
    aa96:	ca 5b       	subi	r28, 0xBA	; 186
    aa98:	d0 40       	sbci	r29, 0x00	; 0
    aa9a:	28 0f       	add	r18, r24
    aa9c:	39 1f       	adc	r19, r25
    aa9e:	ce 53       	subi	r28, 0x3E	; 62
    aaa0:	df 4f       	sbci	r29, 0xFF	; 255
    aaa2:	39 83       	std	Y+1, r19	; 0x01
    aaa4:	28 83       	st	Y, r18
    aaa6:	c2 5c       	subi	r28, 0xC2	; 194
    aaa8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    aaaa:	f6 01       	movw	r30, r12
    aaac:	85 91       	lpm	r24, Z+
    aaae:	94 91       	lpm	r25, Z
    aab0:	c6 53       	subi	r28, 0x36	; 54
    aab2:	df 4f       	sbci	r29, 0xFF	; 255
    aab4:	e8 81       	ld	r30, Y
    aab6:	f9 81       	ldd	r31, Y+1	; 0x01
    aab8:	ca 5c       	subi	r28, 0xCA	; 202
    aaba:	d0 40       	sbci	r29, 0x00	; 0
    aabc:	24 91       	lpm	r18, Z
    aabe:	c8 54       	subi	r28, 0x48	; 72
    aac0:	df 4f       	sbci	r29, 0xFF	; 255
    aac2:	48 81       	ld	r20, Y
    aac4:	59 81       	ldd	r21, Y+1	; 0x01
    aac6:	c8 5b       	subi	r28, 0xB8	; 184
    aac8:	d0 40       	sbci	r29, 0x00	; 0
    aaca:	84 0f       	add	r24, r20
    aacc:	95 1f       	adc	r25, r21
    aace:	bc 01       	movw	r22, r24
    aad0:	29 9d       	mul	r18, r9
    aad2:	60 0d       	add	r22, r0
    aad4:	71 1d       	adc	r23, r1
    aad6:	11 24       	eor	r1, r1
    aad8:	c0 54       	subi	r28, 0x40	; 64
    aada:	df 4f       	sbci	r29, 0xFF	; 255
    aadc:	79 83       	std	Y+1, r23	; 0x01
    aade:	68 83       	st	Y, r22
    aae0:	c0 5c       	subi	r28, 0xC0	; 192
    aae2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
          loop_t++;
    aae4:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    aae6:	c4 54       	subi	r28, 0x44	; 68
    aae8:	df 4f       	sbci	r29, 0xFF	; 255
    aaea:	e8 81       	ld	r30, Y
    aaec:	f9 81       	ldd	r31, Y+1	; 0x01
    aaee:	cc 5b       	subi	r28, 0xBC	; 188
    aaf0:	d0 40       	sbci	r29, 0x00	; 0
    aaf2:	84 91       	lpm	r24, Z
    aaf4:	82 30       	cpi	r24, 0x02	; 2
    aaf6:	09 f0       	breq	.+2      	; 0xaafa <draw_menu(bool)+0x2472>
    aaf8:	46 c0       	rjmp	.+140    	; 0xab86 <draw_menu(bool)+0x24fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2193
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    aafa:	f6 01       	movw	r30, r12
    aafc:	85 91       	lpm	r24, Z+
    aafe:	94 91       	lpm	r25, Z
    ab00:	c6 53       	subi	r28, 0x36	; 54
    ab02:	df 4f       	sbci	r29, 0xFF	; 255
    ab04:	e8 81       	ld	r30, Y
    ab06:	f9 81       	ldd	r31, Y+1	; 0x01
    ab08:	ca 5c       	subi	r28, 0xCA	; 202
    ab0a:	d0 40       	sbci	r29, 0x00	; 0
    ab0c:	24 91       	lpm	r18, Z
    ab0e:	c8 54       	subi	r28, 0x48	; 72
    ab10:	df 4f       	sbci	r29, 0xFF	; 255
    ab12:	48 81       	ld	r20, Y
    ab14:	59 81       	ldd	r21, Y+1	; 0x01
    ab16:	c8 5b       	subi	r28, 0xB8	; 184
    ab18:	d0 40       	sbci	r29, 0x00	; 0
    ab1a:	84 0f       	add	r24, r20
    ab1c:	95 1f       	adc	r25, r21
    ab1e:	bc 01       	movw	r22, r24
    ab20:	29 9d       	mul	r18, r9
    ab22:	60 0d       	add	r22, r0
    ab24:	71 1d       	adc	r23, r1
    ab26:	11 24       	eor	r1, r1
    ab28:	c0 54       	subi	r28, 0x40	; 64
    ab2a:	df 4f       	sbci	r29, 0xFF	; 255
    ab2c:	79 83       	std	Y+1, r23	; 0x01
    ab2e:	68 83       	st	Y, r22
    ab30:	c0 5c       	subi	r28, 0xC0	; 192
    ab32:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    ab34:	f5 01       	movw	r30, r10
    ab36:	85 91       	lpm	r24, Z+
    ab38:	94 91       	lpm	r25, Z
    ab3a:	c8 53       	subi	r28, 0x38	; 56
    ab3c:	df 4f       	sbci	r29, 0xFF	; 255
    ab3e:	e8 81       	ld	r30, Y
    ab40:	f9 81       	ldd	r31, Y+1	; 0x01
    ab42:	c8 5c       	subi	r28, 0xC8	; 200
    ab44:	d0 40       	sbci	r29, 0x00	; 0
    ab46:	24 91       	lpm	r18, Z
    ab48:	c6 54       	subi	r28, 0x46	; 70
    ab4a:	df 4f       	sbci	r29, 0xFF	; 255
    ab4c:	48 81       	ld	r20, Y
    ab4e:	59 81       	ldd	r21, Y+1	; 0x01
    ab50:	ca 5b       	subi	r28, 0xBA	; 186
    ab52:	d0 40       	sbci	r29, 0x00	; 0
    ab54:	84 0f       	add	r24, r20
    ab56:	95 1f       	adc	r25, r21
    ab58:	bc 01       	movw	r22, r24
    ab5a:	23 9d       	mul	r18, r3
    ab5c:	60 0d       	add	r22, r0
    ab5e:	71 1d       	adc	r23, r1
    ab60:	11 24       	eor	r1, r1
    ab62:	ce 53       	subi	r28, 0x3E	; 62
    ab64:	df 4f       	sbci	r29, 0xFF	; 255
    ab66:	79 83       	std	Y+1, r23	; 0x01
    ab68:	68 83       	st	Y, r22
    ab6a:	c2 5c       	subi	r28, 0xC2	; 194
    ab6c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2195
          loop_t++;
    ab6e:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2196
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    ab70:	c3 53       	subi	r28, 0x33	; 51
    ab72:	df 4f       	sbci	r29, 0xFF	; 255
    ab74:	e8 81       	ld	r30, Y
    ab76:	f9 81       	ldd	r31, Y+1	; 0x01
    ab78:	cd 5c       	subi	r28, 0xCD	; 205
    ab7a:	d0 40       	sbci	r29, 0x00	; 0
    ab7c:	84 91       	lpm	r24, Z
    ab7e:	98 16       	cp	r9, r24
    ab80:	10 f0       	brcs	.+4      	; 0xab86 <draw_menu(bool)+0x24fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
          {
            loop_t = 0;
            loop_r++;
    ab82:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2198
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    ab84:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    ab86:	c1 53       	subi	r28, 0x31	; 49
    ab88:	df 4f       	sbci	r29, 0xFF	; 255
    ab8a:	e8 81       	ld	r30, Y
    ab8c:	f9 81       	ldd	r31, Y+1	; 0x01
    ab8e:	cf 5c       	subi	r28, 0xCF	; 207
    ab90:	d0 40       	sbci	r29, 0x00	; 0
    ab92:	25 91       	lpm	r18, Z+
    ab94:	34 91       	lpm	r19, Z
    ab96:	ce 52       	subi	r28, 0x2E	; 46
    ab98:	df 4f       	sbci	r29, 0xFF	; 255
    ab9a:	e8 81       	ld	r30, Y
    ab9c:	f9 81       	ldd	r31, Y+1	; 0x01
    ab9e:	c2 5d       	subi	r28, 0xD2	; 210
    aba0:	d0 40       	sbci	r29, 0x00	; 0
    aba2:	45 91       	lpm	r20, Z+
    aba4:	54 91       	lpm	r21, Z
    aba6:	ca 53       	subi	r28, 0x3A	; 58
    aba8:	df 4f       	sbci	r29, 0xFF	; 255
    abaa:	e8 80       	ld	r14, Y
    abac:	f9 80       	ldd	r15, Y+1	; 0x01
    abae:	c6 5c       	subi	r28, 0xC6	; 198
    abb0:	d0 40       	sbci	r29, 0x00	; 0
    abb2:	cc 53       	subi	r28, 0x3C	; 60
    abb4:	df 4f       	sbci	r29, 0xFF	; 255
    abb6:	08 81       	ld	r16, Y
    abb8:	19 81       	ldd	r17, Y+1	; 0x01
    abba:	c4 5c       	subi	r28, 0xC4	; 196
    abbc:	d0 40       	sbci	r29, 0x00	; 0
    abbe:	ce 53       	subi	r28, 0x3E	; 62
    abc0:	df 4f       	sbci	r29, 0xFF	; 255
    abc2:	68 81       	ld	r22, Y
    abc4:	79 81       	ldd	r23, Y+1	; 0x01
    abc6:	c2 5c       	subi	r28, 0xC2	; 194
    abc8:	d0 40       	sbci	r29, 0x00	; 0
    abca:	c0 54       	subi	r28, 0x40	; 64
    abcc:	df 4f       	sbci	r29, 0xFF	; 255
    abce:	88 81       	ld	r24, Y
    abd0:	99 81       	ldd	r25, Y+1	; 0x01
    abd2:	c0 5c       	subi	r28, 0xC0	; 192
    abd4:	d0 40       	sbci	r29, 0x00	; 0
    abd6:	0e 94 29 29 	call	0x5252	; 0x5252 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    abda:	18 2f       	mov	r17, r24
    abdc:	81 e0       	ldi	r24, 0x01	; 1
    abde:	88 0d       	add	r24, r8
    abe0:	11 23       	and	r17, r17
    abe2:	71 f1       	breq	.+92     	; 0xac40 <draw_menu(bool)+0x25b8>
    abe4:	ce 54       	subi	r28, 0x4E	; 78
    abe6:	df 4f       	sbci	r29, 0xFF	; 255
    abe8:	88 82       	st	Y, r8
    abea:	c2 5b       	subi	r28, 0xB2	; 178
    abec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    abee:	f2 01       	movw	r30, r4
    abf0:	ea 54       	subi	r30, 0x4A	; 74
    abf2:	fd 4f       	sbci	r31, 0xFD	; 253
    abf4:	e6 0d       	add	r30, r6
    abf6:	f7 1d       	adc	r31, r7
    abf8:	25 91       	lpm	r18, Z+
    abfa:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2205
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    abfc:	c2 54       	subi	r28, 0x42	; 66
    abfe:	df 4f       	sbci	r29, 0xFF	; 255
    ac00:	e8 81       	ld	r30, Y
    ac02:	f9 81       	ldd	r31, Y+1	; 0x01
    ac04:	ce 5b       	subi	r28, 0xBE	; 190
    ac06:	d0 40       	sbci	r29, 0x00	; 0
    ac08:	84 91       	lpm	r24, Z
    ac0a:	cd 54       	subi	r28, 0x4D	; 77
    ac0c:	df 4f       	sbci	r29, 0xFF	; 255
    ac0e:	68 81       	ld	r22, Y
    ac10:	c3 5b       	subi	r28, 0xB3	; 179
    ac12:	d0 40       	sbci	r29, 0x00	; 0
    ac14:	70 e0       	ldi	r23, 0x00	; 0
    ac16:	48 2d       	mov	r20, r8
    ac18:	90 e0       	ldi	r25, 0x00	; 0
    ac1a:	f9 01       	movw	r30, r18
    ac1c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
          ret = true;
    ac1e:	c4 53       	subi	r28, 0x34	; 52
    ac20:	df 4f       	sbci	r29, 0xFF	; 255
    ac22:	18 83       	st	Y, r17
    ac24:	cc 5c       	subi	r28, 0xCC	; 204
    ac26:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    ac28:	ca 54       	subi	r28, 0x4A	; 74
    ac2a:	df 4f       	sbci	r29, 0xFF	; 255
    ac2c:	f8 81       	ld	r31, Y
    ac2e:	c6 5b       	subi	r28, 0xB6	; 182
    ac30:	d0 40       	sbci	r29, 0x00	; 0
    ac32:	ff 5f       	subi	r31, 0xFF	; 255
    ac34:	ca 54       	subi	r28, 0x4A	; 74
    ac36:	df 4f       	sbci	r29, 0xFF	; 255
    ac38:	f8 83       	st	Y, r31
    ac3a:	c6 5b       	subi	r28, 0xB6	; 182
    ac3c:	d0 40       	sbci	r29, 0x00	; 0
    ac3e:	c1 cb       	rjmp	.-2174   	; 0xa3c2 <draw_menu(bool)+0x1d3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    ac40:	88 2e       	mov	r8, r24
    ac42:	de ce       	rjmp	.-580    	; 0xaa00 <draw_menu(bool)+0x2378>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
    ac44:	21 e0       	ldi	r18, 0x01	; 1
    ac46:	c4 53       	subi	r28, 0x34	; 52
    ac48:	df 4f       	sbci	r29, 0xFF	; 255
    ac4a:	28 83       	st	Y, r18
    ac4c:	cc 5c       	subi	r28, 0xCC	; 204
    ac4e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
  }


draw_menu_end:
  return ret;
}
    ac50:	c4 53       	subi	r28, 0x34	; 52
    ac52:	df 4f       	sbci	r29, 0xFF	; 255
    ac54:	88 81       	ld	r24, Y
    ac56:	cc 5c       	subi	r28, 0xCC	; 204
    ac58:	d0 40       	sbci	r29, 0x00	; 0
    ac5a:	cd 51       	subi	r28, 0x1D	; 29
    ac5c:	df 4f       	sbci	r29, 0xFF	; 255
    ac5e:	0f b6       	in	r0, 0x3f	; 63
    ac60:	f8 94       	cli
    ac62:	de bf       	out	0x3e, r29	; 62
    ac64:	0f be       	out	0x3f, r0	; 63
    ac66:	cd bf       	out	0x3d, r28	; 61
    ac68:	df 91       	pop	r29
    ac6a:	cf 91       	pop	r28
    ac6c:	1f 91       	pop	r17
    ac6e:	0f 91       	pop	r16
    ac70:	ff 90       	pop	r15
    ac72:	ef 90       	pop	r14
    ac74:	df 90       	pop	r13
    ac76:	cf 90       	pop	r12
    ac78:	bf 90       	pop	r11
    ac7a:	af 90       	pop	r10
    ac7c:	9f 90       	pop	r9
    ac7e:	8f 90       	pop	r8
    ac80:	7f 90       	pop	r7
    ac82:	6f 90       	pop	r6
    ac84:	5f 90       	pop	r5
    ac86:	4f 90       	pop	r4
    ac88:	3f 90       	pop	r3
    ac8a:	2f 90       	pop	r2
    ac8c:	08 95       	ret

0000ac8e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    ac8e:	2d e4       	ldi	r18, 0x4D	; 77
    ac90:	82 9f       	mul	r24, r18
    ac92:	c0 01       	movw	r24, r0
    ac94:	11 24       	eor	r1, r1
    ac96:	26 e0       	ldi	r18, 0x06	; 6
    ac98:	62 9f       	mul	r22, r18
    ac9a:	80 0d       	add	r24, r0
    ac9c:	91 1d       	adc	r25, r1
    ac9e:	11 24       	eor	r1, r1
    aca0:	64 2f       	mov	r22, r20
    aca2:	8e 50       	subi	r24, 0x0E	; 14
    aca4:	9e 4f       	sbci	r25, 0xFE	; 254
    aca6:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000acaa <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    acaa:	1f 93       	push	r17
    acac:	cf 93       	push	r28
    acae:	df 93       	push	r29
    acb0:	14 2f       	mov	r17, r20
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    acb2:	9d e4       	ldi	r25, 0x4D	; 77
    acb4:	89 9f       	mul	r24, r25
    acb6:	e0 01       	movw	r28, r0
    acb8:	11 24       	eor	r1, r1
    acba:	cf 50       	subi	r28, 0x0F	; 15
    acbc:	de 4f       	sbci	r29, 0xFE	; 254
    acbe:	86 e0       	ldi	r24, 0x06	; 6
    acc0:	68 9f       	mul	r22, r24
    acc2:	c0 0d       	add	r28, r0
    acc4:	d1 1d       	adc	r29, r1
    acc6:	11 24       	eor	r1, r1
    acc8:	65 2f       	mov	r22, r21
    acca:	ce 01       	movw	r24, r28
    accc:	05 96       	adiw	r24, 0x05	; 5
    acce:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    acd2:	61 2f       	mov	r22, r17
    acd4:	ce 01       	movw	r24, r28
    acd6:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:333
}
    acd8:	df 91       	pop	r29
    acda:	cf 91       	pop	r28
    acdc:	1f 91       	pop	r17
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    acde:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ace2 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    ace2:	cf 92       	push	r12
    ace4:	ef 92       	push	r14
    ace6:	0f 93       	push	r16
    ace8:	1f 93       	push	r17
    acea:	cf 93       	push	r28
    acec:	df 93       	push	r29
    acee:	c8 2f       	mov	r28, r24
    acf0:	56 2f       	mov	r21, r22
    acf2:	8e 2d       	mov	r24, r14
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    acf4:	3f e0       	ldi	r19, 0x0F	; 15
    acf6:	63 2f       	mov	r22, r19
    acf8:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
    acfc:	83 70       	andi	r24, 0x03	; 3
    acfe:	98 e0       	ldi	r25, 0x08	; 8
    ad00:	09 9f       	mul	r16, r25
    ad02:	80 01       	movw	r16, r0
    ad04:	11 24       	eor	r1, r1
    ad06:	08 0f       	add	r16, r24
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    ad08:	8d e4       	ldi	r24, 0x4D	; 77
    ad0a:	c8 9f       	mul	r28, r24
    ad0c:	e0 01       	movw	r28, r0
    ad0e:	11 24       	eor	r1, r1
    ad10:	cf 50       	subi	r28, 0x0F	; 15
    ad12:	de 4f       	sbci	r29, 0xFE	; 254
    ad14:	96 e0       	ldi	r25, 0x06	; 6
    ad16:	59 9f       	mul	r21, r25
    ad18:	c0 0d       	add	r28, r0
    ad1a:	d1 1d       	adc	r29, r1
    ad1c:	11 24       	eor	r1, r1
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    ad1e:	82 2f       	mov	r24, r18
    ad20:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
    ad24:	68 2f       	mov	r22, r24
    ad26:	66 0f       	add	r22, r22
    ad28:	66 70       	andi	r22, 0x06	; 6
    ad2a:	88 e0       	ldi	r24, 0x08	; 8
    ad2c:	48 9f       	mul	r20, r24
    ad2e:	a0 01       	movw	r20, r0
    ad30:	11 24       	eor	r1, r1
    ad32:	9c 2d       	mov	r25, r12
    ad34:	91 70       	andi	r25, 0x01	; 1
    ad36:	c9 2e       	mov	r12, r25
    ad38:	c4 0e       	add	r12, r20
    ad3a:	6c 0d       	add	r22, r12
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    ad3c:	ce 01       	movw	r24, r28
    ad3e:	02 96       	adiw	r24, 0x02	; 2
    ad40:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    ad44:	60 2f       	mov	r22, r16
    ad46:	ce 01       	movw	r24, r28
    ad48:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:318
}
    ad4a:	df 91       	pop	r29
    ad4c:	cf 91       	pop	r28
    ad4e:	1f 91       	pop	r17
    ad50:	0f 91       	pop	r16
    ad52:	ef 90       	pop	r14
    ad54:	cf 90       	pop	r12
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    ad56:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ad5a <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    ad5a:	ef 92       	push	r14
    ad5c:	ff 92       	push	r15
    ad5e:	0f 93       	push	r16
    ad60:	1f 93       	push	r17
    ad62:	cf 93       	push	r28
    ad64:	df 93       	push	r29
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    ad66:	9d e4       	ldi	r25, 0x4D	; 77
    ad68:	89 9f       	mul	r24, r25
    ad6a:	80 01       	movw	r16, r0
    ad6c:	11 24       	eor	r1, r1
    ad6e:	eb 01       	movw	r28, r22
    ad70:	78 01       	movw	r14, r16
    ad72:	8c ec       	ldi	r24, 0xCC	; 204
    ad74:	e8 1a       	sub	r14, r24
    ad76:	8d ef       	ldi	r24, 0xFD	; 253
    ad78:	f8 0a       	sbc	r15, r24
    ad7a:	02 5c       	subi	r16, 0xC2	; 194
    ad7c:	1d 4f       	sbci	r17, 0xFD	; 253
    ad7e:	69 91       	ld	r22, Y+
    ad80:	c7 01       	movw	r24, r14
    ad82:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    ad86:	fe 01       	movw	r30, r28
    ad88:	31 97       	sbiw	r30, 0x01	; 1
    ad8a:	80 81       	ld	r24, Z
    ad8c:	88 23       	and	r24, r24
    ad8e:	31 f0       	breq	.+12     	; 0xad9c <thermostat_program_set_name(unsigned char, char*)+0x42>
    ad90:	9f ef       	ldi	r25, 0xFF	; 255
    ad92:	e9 1a       	sub	r14, r25
    ad94:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    ad96:	e0 16       	cp	r14, r16
    ad98:	f1 06       	cpc	r15, r17
    ad9a:	89 f7       	brne	.-30     	; 0xad7e <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    ad9c:	df 91       	pop	r29
    ad9e:	cf 91       	pop	r28
    ada0:	1f 91       	pop	r17
    ada2:	0f 91       	pop	r16
    ada4:	ff 90       	pop	r15
    ada6:	ef 90       	pop	r14
    ada8:	08 95       	ret

0000adaa <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    adaa:	ef 92       	push	r14
    adac:	ff 92       	push	r15
    adae:	0f 93       	push	r16
    adb0:	1f 93       	push	r17
    adb2:	cf 93       	push	r28
    adb4:	df 93       	push	r29
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    adb6:	e8 2e       	mov	r14, r24
    adb8:	f1 2c       	mov	r15, r1
    adba:	91 e2       	ldi	r25, 0x21	; 33
    adbc:	89 9f       	mul	r24, r25
    adbe:	e0 01       	movw	r28, r0
    adc0:	11 24       	eor	r1, r1
    adc2:	87 01       	movw	r16, r14
    adc4:	00 0f       	add	r16, r16
    adc6:	11 1f       	adc	r17, r17
    adc8:	00 0f       	add	r16, r16
    adca:	11 1f       	adc	r17, r17
    adcc:	f8 01       	movw	r30, r16
    adce:	ee 52       	subi	r30, 0x2E	; 46
    add0:	f6 4f       	sbci	r31, 0xF6	; 246
    add2:	40 81       	ld	r20, Z
    add4:	51 81       	ldd	r21, Z+1	; 0x01
    add6:	62 81       	ldd	r22, Z+2	; 0x02
    add8:	73 81       	ldd	r23, Z+3	; 0x03
    adda:	ce 01       	movw	r24, r28
    addc:	80 5a       	subi	r24, 0xA0	; 160
    adde:	9e 4f       	sbci	r25, 0xFE	; 254
    ade0:	0e 94 32 9e 	call	0x13c64	; 0x13c64 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    ade4:	f8 01       	movw	r30, r16
    ade6:	ea 51       	subi	r30, 0x1A	; 26
    ade8:	f6 4f       	sbci	r31, 0xF6	; 246
    adea:	40 81       	ld	r20, Z
    adec:	51 81       	ldd	r21, Z+1	; 0x01
    adee:	62 81       	ldd	r22, Z+2	; 0x02
    adf0:	73 81       	ldd	r23, Z+3	; 0x03
    adf2:	ce 01       	movw	r24, r28
    adf4:	8c 59       	subi	r24, 0x9C	; 156
    adf6:	9e 4f       	sbci	r25, 0xFE	; 254
    adf8:	0e 94 32 9e 	call	0x13c64	; 0x13c64 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    adfc:	f8 01       	movw	r30, r16
    adfe:	e6 50       	subi	r30, 0x06	; 6
    ae00:	f6 4f       	sbci	r31, 0xF6	; 246
    ae02:	40 81       	ld	r20, Z
    ae04:	51 81       	ldd	r21, Z+1	; 0x01
    ae06:	62 81       	ldd	r22, Z+2	; 0x02
    ae08:	73 81       	ldd	r23, Z+3	; 0x03
    ae0a:	ce 01       	movw	r24, r28
    ae0c:	88 59       	subi	r24, 0x98	; 152
    ae0e:	9e 4f       	sbci	r25, 0xFE	; 254
    ae10:	0e 94 32 9e 	call	0x13c64	; 0x13c64 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    ae14:	f7 01       	movw	r30, r14
    ae16:	e2 5f       	subi	r30, 0xF2	; 242
    ae18:	f5 4f       	sbci	r31, 0xF5	; 245
    ae1a:	60 81       	ld	r22, Z
    ae1c:	ce 01       	movw	r24, r28
    ae1e:	84 59       	subi	r24, 0x94	; 148
    ae20:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:237
}
    ae22:	df 91       	pop	r29
    ae24:	cf 91       	pop	r28
    ae26:	1f 91       	pop	r17
    ae28:	0f 91       	pop	r16
    ae2a:	ff 90       	pop	r15
    ae2c:	ef 90       	pop	r14
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    ae2e:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000ae32 <helper_thermostat_set_pid_time(unsigned char, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timehfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
void helper_thermostat_set_pid_d(uint8_t args1, float args2)
{
  thermostat_ring_pid_set_kd(args1, args2);
}
void helper_thermostat_set_pid_time(uint8_t args1, float args2, uint8_t args3)
{
    ae32:	cf 93       	push	r28
    ae34:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:260
  thermostat_ring_set_pid_eeprom(id);
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    ae36:	e8 2f       	mov	r30, r24
    ae38:	f0 e0       	ldi	r31, 0x00	; 0
    ae3a:	e2 5f       	subi	r30, 0xF2	; 242
    ae3c:	f5 4f       	sbci	r31, 0xF5	; 245
    ae3e:	20 83       	st	Z, r18
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    ae40:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    ae44:	8c 2f       	mov	r24, r28
_Z30helper_thermostat_set_pid_timehfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
  thermostat_ring_pid_set_time(args1, args3);
}
    ae46:	cf 91       	pop	r28
thermostat_ring_pid_set_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:262
    ae48:	0c 94 d5 56 	jmp	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>

0000ae4c <helper_thermostat_set_pid_d(unsigned char, float)>:
_Z27helper_thermostat_set_pid_dhf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
void helper_thermostat_set_pid_i(uint8_t args1, float args2)
{
  thermostat_ring_pid_set_ki(args1, args2);
}
void helper_thermostat_set_pid_d(uint8_t args1, float args2)
{
    ae4c:	cf 93       	push	r28
    ae4e:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kd():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:253
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    ae50:	84 e0       	ldi	r24, 0x04	; 4
    ae52:	c8 9f       	mul	r28, r24
    ae54:	f0 01       	movw	r30, r0
    ae56:	11 24       	eor	r1, r1
    ae58:	e6 50       	subi	r30, 0x06	; 6
    ae5a:	f6 4f       	sbci	r31, 0xF6	; 246
    ae5c:	40 83       	st	Z, r20
    ae5e:	51 83       	std	Z+1, r21	; 0x01
    ae60:	62 83       	std	Z+2, r22	; 0x02
    ae62:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    ae64:	8c 2f       	mov	r24, r28
    ae66:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    ae6a:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_dhf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
  thermostat_ring_pid_set_kd(args1, args2);
}
    ae6c:	cf 91       	pop	r28
thermostat_ring_pid_set_kd():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:255
    ae6e:	0c 94 d5 56 	jmp	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>

0000ae72 <helper_thermostat_set_pid_i(unsigned char, float)>:
_Z27helper_thermostat_set_pid_ihf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2361
void helper_thermostat_set_pid_p(uint8_t args1, float args2)
{
  thermostat_ring_pid_set_kp(args1, args2);
}
void helper_thermostat_set_pid_i(uint8_t args1, float args2)
{
    ae72:	cf 93       	push	r28
    ae74:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_ki():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:247
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    ae76:	84 e0       	ldi	r24, 0x04	; 4
    ae78:	c8 9f       	mul	r28, r24
    ae7a:	f0 01       	movw	r30, r0
    ae7c:	11 24       	eor	r1, r1
    ae7e:	ea 51       	subi	r30, 0x1A	; 26
    ae80:	f6 4f       	sbci	r31, 0xF6	; 246
    ae82:	40 83       	st	Z, r20
    ae84:	51 83       	std	Z+1, r21	; 0x01
    ae86:	62 83       	std	Z+2, r22	; 0x02
    ae88:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    ae8a:	8c 2f       	mov	r24, r28
    ae8c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    ae90:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_ihf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
  thermostat_ring_pid_set_ki(args1, args2);
}
    ae92:	cf 91       	pop	r28
thermostat_ring_pid_set_ki():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:249
    ae94:	0c 94 d5 56 	jmp	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>

0000ae98 <helper_thermostat_set_pid_p(unsigned char, float)>:
_Z27helper_thermostat_set_pid_phf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
void helper_thermostat_set_mezni(uint8_t args1, float args2)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
}
void helper_thermostat_set_pid_p(uint8_t args1, float args2)
{
    ae98:	cf 93       	push	r28
    ae9a:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    ae9c:	84 e0       	ldi	r24, 0x04	; 4
    ae9e:	c8 9f       	mul	r28, r24
    aea0:	f0 01       	movw	r30, r0
    aea2:	11 24       	eor	r1, r1
    aea4:	ee 52       	subi	r30, 0x2E	; 46
    aea6:	f6 4f       	sbci	r31, 0xF6	; 246
    aea8:	40 83       	st	Z, r20
    aeaa:	51 83       	std	Z+1, r21	; 0x01
    aeac:	62 83       	std	Z+2, r22	; 0x02
    aeae:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    aeb0:	8c 2f       	mov	r24, r28
    aeb2:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    aeb6:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_phf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
  thermostat_ring_pid_set_kp(args1, args2);
}
    aeb8:	cf 91       	pop	r28
thermostat_ring_pid_set_kp():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:243
    aeba:	0c 94 d5 56 	jmp	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>

0000aebe <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    aebe:	21 e2       	ldi	r18, 0x21	; 33
    aec0:	82 9f       	mul	r24, r18
    aec2:	c0 01       	movw	r24, r0
    aec4:	11 24       	eor	r1, r1
    aec6:	82 5a       	subi	r24, 0xA2	; 162
    aec8:	9e 4f       	sbci	r25, 0xFE	; 254
    aeca:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000aece <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z26button_click_term_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5927
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/
void button_click_term_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    aece:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5928
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    aed0:	60 e0       	ldi	r22, 0x00	; 0
    aed2:	44 23       	and	r20, r20
    aed4:	61 f0       	breq	.+24     	; 0xaeee <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5929
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    aed6:	61 e0       	ldi	r22, 0x01	; 1
    aed8:	41 30       	cpi	r20, 0x01	; 1
    aeda:	49 f0       	breq	.+18     	; 0xaeee <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5930
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    aedc:	67 e0       	ldi	r22, 0x07	; 7
    aede:	42 30       	cpi	r20, 0x02	; 2
    aee0:	31 f0       	breq	.+12     	; 0xaeee <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5931
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    aee2:	62 e0       	ldi	r22, 0x02	; 2
    aee4:	43 30       	cpi	r20, 0x03	; 3
    aee6:	19 f0       	breq	.+6      	; 0xaeee <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5932
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    aee8:	44 30       	cpi	r20, 0x04	; 4
    aeea:	19 f4       	brne	.+6      	; 0xaef2 <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x24>
    aeec:	68 e0       	ldi	r22, 0x08	; 8
    aeee:	0c 94 5f 57 	jmp	0xaebe	; 0xaebe <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5933
}
    aef2:	08 95       	ret

0000aef4 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    aef4:	1f 93       	push	r17
    aef6:	cf 93       	push	r28
    aef8:	df 93       	push	r29
    aefa:	16 2f       	mov	r17, r22
    aefc:	67 2f       	mov	r22, r23
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    aefe:	91 e2       	ldi	r25, 0x21	; 33
    af00:	89 9f       	mul	r24, r25
    af02:	e0 01       	movw	r28, r0
    af04:	11 24       	eor	r1, r1
    af06:	ce 01       	movw	r24, r28
    af08:	8a 5a       	subi	r24, 0xAA	; 170
    af0a:	9e 4f       	sbci	r25, 0xFE	; 254
    af0c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    af10:	61 2f       	mov	r22, r17
    af12:	ce 01       	movw	r24, r28
    af14:	89 5a       	subi	r24, 0xA9	; 169
    af16:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:160
}
    af18:	df 91       	pop	r29
    af1a:	cf 91       	pop	r28
    af1c:	1f 91       	pop	r17
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    af1e:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000af22 <helper_thermostat_set_mezni(unsigned char, float)>:
_Z27helper_thermostat_set_meznihf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
  args2 -- menu_dialog_set_variable_now, aktualni hodnota
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint8_t args1, float args2)
{
    af22:	cf 93       	push	r28
    af24:	c8 2f       	mov	r28, r24
    af26:	cb 01       	movw	r24, r22
    af28:	ba 01       	movw	r22, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    af2a:	20 e0       	ldi	r18, 0x00	; 0
    af2c:	30 e0       	ldi	r19, 0x00	; 0
    af2e:	40 e2       	ldi	r20, 0x20	; 32
    af30:	51 e4       	ldi	r21, 0x41	; 65
    af32:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
    af36:	0e 94 ab bc 	call	0x17956	; 0x17956 <__fixsfsi>
    af3a:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
}
    af3c:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint8_t args1, float args2)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    af3e:	0c 94 7a 57 	jmp	0xaef4	; 0xaef4 <thermostat_ring_set_mezni(unsigned char, int)>

0000af42 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    af42:	df 92       	push	r13
    af44:	ef 92       	push	r14
    af46:	ff 92       	push	r15
    af48:	0f 93       	push	r16
    af4a:	1f 93       	push	r17
    af4c:	cf 93       	push	r28
    af4e:	df 93       	push	r29
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    af50:	91 e2       	ldi	r25, 0x21	; 33
    af52:	89 9f       	mul	r24, r25
    af54:	e0 01       	movw	r28, r0
    af56:	11 24       	eor	r1, r1
    af58:	7b 01       	movw	r14, r22
    af5a:	8e 01       	movw	r16, r28
    af5c:	04 5b       	subi	r16, 0xB4	; 180
    af5e:	1e 4f       	sbci	r17, 0xFE	; 254
    af60:	cb 5a       	subi	r28, 0xAB	; 171
    af62:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    af64:	f7 01       	movw	r30, r14
    af66:	d1 90       	ld	r13, Z+
    af68:	7f 01       	movw	r14, r30
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    af6a:	6d 2d       	mov	r22, r13
    af6c:	c8 01       	movw	r24, r16
    af6e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    af72:	dd 20       	and	r13, r13
    af74:	29 f0       	breq	.+10     	; 0xaf80 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    af76:	0f 5f       	subi	r16, 0xFF	; 255
    af78:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    af7a:	0c 17       	cp	r16, r28
    af7c:	1d 07       	cpc	r17, r29
    af7e:	91 f7       	brne	.-28     	; 0xaf64 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    af80:	df 91       	pop	r29
    af82:	cf 91       	pop	r28
    af84:	1f 91       	pop	r17
    af86:	0f 91       	pop	r16
    af88:	ff 90       	pop	r15
    af8a:	ef 90       	pop	r14
    af8c:	df 90       	pop	r13
    af8e:	08 95       	ret

0000af90 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    af90:	8f 92       	push	r8
    af92:	9f 92       	push	r9
    af94:	af 92       	push	r10
    af96:	bf 92       	push	r11
    af98:	ef 92       	push	r14
    af9a:	ff 92       	push	r15
    af9c:	0f 93       	push	r16
    af9e:	1f 93       	push	r17
    afa0:	cf 93       	push	r28
    afa2:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    afa4:	e8 2e       	mov	r14, r24
    afa6:	f1 2c       	mov	r15, r1
    afa8:	87 01       	movw	r16, r14
    afaa:	00 0f       	add	r16, r16
    afac:	11 1f       	adc	r17, r17
    afae:	00 0f       	add	r16, r16
    afb0:	11 1f       	adc	r17, r17
    afb2:	f8 01       	movw	r30, r16
    afb4:	ee 52       	subi	r30, 0x2E	; 46
    afb6:	f6 4f       	sbci	r31, 0xF6	; 246
    afb8:	81 2c       	mov	r8, r1
    afba:	91 2c       	mov	r9, r1
    afbc:	90 e8       	ldi	r25, 0x80	; 128
    afbe:	a9 2e       	mov	r10, r25
    afc0:	9f e3       	ldi	r25, 0x3F	; 63
    afc2:	b9 2e       	mov	r11, r25
    afc4:	80 82       	st	Z, r8
    afc6:	91 82       	std	Z+1, r9	; 0x01
    afc8:	a2 82       	std	Z+2, r10	; 0x02
    afca:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    afcc:	8c 2f       	mov	r24, r28
    afce:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    afd2:	8c 2f       	mov	r24, r28
    afd4:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    afd8:	f8 01       	movw	r30, r16
    afda:	ea 51       	subi	r30, 0x1A	; 26
    afdc:	f6 4f       	sbci	r31, 0xF6	; 246
    afde:	80 e0       	ldi	r24, 0x00	; 0
    afe0:	90 e0       	ldi	r25, 0x00	; 0
    afe2:	a0 e0       	ldi	r26, 0x00	; 0
    afe4:	bf e3       	ldi	r27, 0x3F	; 63
    afe6:	80 83       	st	Z, r24
    afe8:	91 83       	std	Z+1, r25	; 0x01
    afea:	a2 83       	std	Z+2, r26	; 0x02
    afec:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    afee:	8c 2f       	mov	r24, r28
    aff0:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    aff4:	8c 2f       	mov	r24, r28
    aff6:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    affa:	f8 01       	movw	r30, r16
    affc:	e6 50       	subi	r30, 0x06	; 6
    affe:	f6 4f       	sbci	r31, 0xF6	; 246
    b000:	80 82       	st	Z, r8
    b002:	91 82       	std	Z+1, r9	; 0x01
    b004:	a2 82       	std	Z+2, r10	; 0x02
    b006:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    b008:	8c 2f       	mov	r24, r28
    b00a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    b00e:	8c 2f       	mov	r24, r28
    b010:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    b014:	f7 01       	movw	r30, r14
    b016:	e2 5f       	subi	r30, 0xF2	; 242
    b018:	f5 4f       	sbci	r31, 0xF5	; 245
    b01a:	8c e3       	ldi	r24, 0x3C	; 60
    b01c:	80 83       	st	Z, r24
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    b01e:	8c 2f       	mov	r24, r28
    b020:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    b024:	8c 2f       	mov	r24, r28
    b026:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    b02a:	81 e2       	ldi	r24, 0x21	; 33
    b02c:	c8 9f       	mul	r28, r24
    b02e:	80 01       	movw	r16, r0
    b030:	11 24       	eor	r1, r1
    b032:	6f ef       	ldi	r22, 0xFF	; 255
    b034:	c8 01       	movw	r24, r16
    b036:	84 5a       	subi	r24, 0xA4	; 164
    b038:	9e 4f       	sbci	r25, 0xFE	; 254
    b03a:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    b03e:	6c ed       	ldi	r22, 0xDC	; 220
    b040:	70 e0       	ldi	r23, 0x00	; 0
    b042:	8c 2f       	mov	r24, r28
    b044:	0e 94 7a 57 	call	0xaef4	; 0xaef4 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    b048:	6f ef       	ldi	r22, 0xFF	; 255
    b04a:	c8 01       	movw	r24, r16
    b04c:	85 5a       	subi	r24, 0xA5	; 165
    b04e:	9e 4f       	sbci	r25, 0xFE	; 254
    b050:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_state():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    b054:	f7 01       	movw	r30, r14
    b056:	e6 59       	subi	r30, 0x96	; 150
    b058:	f5 4f       	sbci	r31, 0xF5	; 245
    b05a:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    b05c:	6f ef       	ldi	r22, 0xFF	; 255
    b05e:	c8 01       	movw	r24, r16
    b060:	83 5a       	subi	r24, 0xA3	; 163
    b062:	9e 4f       	sbci	r25, 0xFE	; 254
    b064:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_output():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    b068:	6f ef       	ldi	r22, 0xFF	; 255
    b06a:	c8 01       	movw	r24, r16
    b06c:	81 5a       	subi	r24, 0xA1	; 161
    b06e:	9e 4f       	sbci	r25, 0xFE	; 254
    b070:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    b074:	60 e0       	ldi	r22, 0x00	; 0
    b076:	8c 2f       	mov	r24, r28
    b078:	0e 94 5f 57 	call	0xaebe	; 0xaebe <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    b07c:	63 e6       	ldi	r22, 0x63	; 99
    b07e:	73 e0       	ldi	r23, 0x03	; 3
    b080:	8c 2f       	mov	r24, r28
    b082:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    b086:	60 e0       	ldi	r22, 0x00	; 0
    b088:	c8 01       	movw	r24, r16
    b08a:	88 5a       	subi	r24, 0xA8	; 168
    b08c:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    b08e:	cf 91       	pop	r28
    b090:	1f 91       	pop	r17
    b092:	0f 91       	pop	r16
    b094:	ff 90       	pop	r15
    b096:	ef 90       	pop	r14
    b098:	bf 90       	pop	r11
    b09a:	af 90       	pop	r10
    b09c:	9f 90       	pop	r9
    b09e:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    b0a0:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b0a4 <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)>:
_Z25helper_set_term_ring_namehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5834
   args2
   args3
   promene nemaji zadny vyznam
*/
void helper_set_term_ring_name(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b0a4:	cf 93       	push	r28
    b0a6:	df 93       	push	r29
    b0a8:	00 d0       	rcall	.+0      	; 0xb0aa <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)+0x6>
    b0aa:	00 d0       	rcall	.+0      	; 0xb0ac <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)+0x8>
    b0ac:	00 d0       	rcall	.+0      	; 0xb0ae <helper_set_term_ring_name(unsigned char, unsigned char, unsigned char)+0xa>
    b0ae:	1f 92       	push	r1
    b0b0:	cd b7       	in	r28, 0x3d	; 61
    b0b2:	de b7       	in	r29, 0x3e	; 62
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    b0b4:	6d e2       	ldi	r22, 0x2D	; 45
    b0b6:	79 e0       	ldi	r23, 0x09	; 9
    b0b8:	ce 01       	movw	r24, r28
    b0ba:	01 96       	adiw	r24, 0x01	; 1
    b0bc:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z25helper_set_term_ring_namehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5838
void helper_set_term_ring_name(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char name[10];
  display_element_get_string(name);
  args2 = display_element_get_string_args();
  thermostat_ring_set_name(args2, name);
    b0c0:	be 01       	movw	r22, r28
    b0c2:	6f 5f       	subi	r22, 0xFF	; 255
    b0c4:	7f 4f       	sbci	r23, 0xFF	; 255
    b0c6:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <dialog_set_string_args>
    b0ca:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5839
}
    b0ce:	2a 96       	adiw	r28, 0x0a	; 10
    b0d0:	0f b6       	in	r0, 0x3f	; 63
    b0d2:	f8 94       	cli
    b0d4:	de bf       	out	0x3e, r29	; 62
    b0d6:	0f be       	out	0x3f, r0	; 63
    b0d8:	cd bf       	out	0x3d, r28	; 61
    b0da:	df 91       	pop	r29
    b0dc:	cf 91       	pop	r28
    b0de:	08 95       	ret

0000b0e0 <term_ring_do_activate(unsigned char, unsigned char, unsigned char)>:
_Z21term_ring_do_activatehhh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    b0e0:	21 e2       	ldi	r18, 0x21	; 33
    b0e2:	82 9f       	mul	r24, r18
    b0e4:	c0 01       	movw	r24, r0
    b0e6:	11 24       	eor	r1, r1
    b0e8:	61 e0       	ldi	r22, 0x01	; 1
    b0ea:	83 5a       	subi	r24, 0xA3	; 163
    b0ec:	9e 4f       	sbci	r25, 0xFE	; 254
    b0ee:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b0f2 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>:
_Z40button_click_set_show_default_ring_inputjjh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    b0f2:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
    b0f6:	21 e2       	ldi	r18, 0x21	; 33
    b0f8:	82 9f       	mul	r24, r18
    b0fa:	c0 01       	movw	r24, r0
    b0fc:	11 24       	eor	r1, r1
    b0fe:	64 2f       	mov	r22, r20
    b100:	84 5a       	subi	r24, 0xA4	; 164
    b102:	9e 4f       	sbci	r25, 0xFE	; 254
    b104:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b108 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    b108:	af 92       	push	r10
    b10a:	bf 92       	push	r11
    b10c:	cf 92       	push	r12
    b10e:	df 92       	push	r13
    b110:	ef 92       	push	r14
    b112:	ff 92       	push	r15
    b114:	0f 93       	push	r16
    b116:	1f 93       	push	r17
    b118:	cf 93       	push	r28
    b11a:	df 93       	push	r29
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    b11c:	86 30       	cpi	r24, 0x06	; 6
    b11e:	08 f0       	brcs	.+2      	; 0xb122 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    b120:	49 c0       	rjmp	.+146    	; 0xb1b4 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    b122:	6b 01       	movw	r12, r22
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    b124:	96 e1       	ldi	r25, 0x16	; 22
    b126:	89 9f       	mul	r24, r25
    b128:	e0 01       	movw	r28, r0
    b12a:	11 24       	eor	r1, r1
    b12c:	f6 01       	movw	r30, r12
    b12e:	61 91       	ld	r22, Z+
    b130:	7f 01       	movw	r14, r30
    b132:	ce 01       	movw	r24, r28
    b134:	88 53       	subi	r24, 0x38	; 56
    b136:	9f 4f       	sbci	r25, 0xFF	; 255
    b138:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b13c:	8e 01       	movw	r16, r28
    b13e:	07 53       	subi	r16, 0x37	; 55
    b140:	1f 4f       	sbci	r17, 0xFF	; 255
    b142:	5e 01       	movw	r10, r28
    b144:	f1 ed       	ldi	r31, 0xD1	; 209
    b146:	af 0e       	add	r10, r31
    b148:	b1 1c       	adc	r11, r1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    b14a:	f7 01       	movw	r30, r14
    b14c:	61 91       	ld	r22, Z+
    b14e:	7f 01       	movw	r14, r30
    b150:	c8 01       	movw	r24, r16
    b152:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    b156:	f7 01       	movw	r30, r14
    b158:	62 85       	ldd	r22, Z+10	; 0x0a
    b15a:	c8 01       	movw	r24, r16
    b15c:	0b 96       	adiw	r24, 0x0b	; 11
    b15e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b162:	0f 5f       	subi	r16, 0xFF	; 255
    b164:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    b166:	0a 15       	cp	r16, r10
    b168:	1b 05       	cpc	r17, r11
    b16a:	79 f7       	brne	.-34     	; 0xb14a <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    b16c:	f6 01       	movw	r30, r12
    b16e:	61 85       	ldd	r22, Z+9	; 0x09
    b170:	c8 01       	movw	r24, r16
    b172:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    b176:	f6 01       	movw	r30, r12
    b178:	63 85       	ldd	r22, Z+11	; 0x0b
    b17a:	ce 01       	movw	r24, r28
    b17c:	8e 52       	subi	r24, 0x2E	; 46
    b17e:	9f 4f       	sbci	r25, 0xFF	; 255
    b180:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    b184:	f6 01       	movw	r30, r12
    b186:	62 85       	ldd	r22, Z+10	; 0x0a
    b188:	ce 01       	movw	r24, r28
    b18a:	8d 52       	subi	r24, 0x2D	; 45
    b18c:	9f 4f       	sbci	r25, 0xFF	; 255
    b18e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    b192:	f6 01       	movw	r30, r12
    b194:	64 89       	ldd	r22, Z+20	; 0x14
    b196:	ce 01       	movw	r24, r28
    b198:	84 52       	subi	r24, 0x24	; 36
    b19a:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:69
  }
}
    b19c:	df 91       	pop	r29
    b19e:	cf 91       	pop	r28
    b1a0:	1f 91       	pop	r17
    b1a2:	0f 91       	pop	r16
    b1a4:	ff 90       	pop	r15
    b1a6:	ef 90       	pop	r14
    b1a8:	df 90       	pop	r13
    b1aa:	cf 90       	pop	r12
    b1ac:	bf 90       	pop	r11
    b1ae:	af 90       	pop	r10
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    b1b0:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:69
  }
}
    b1b4:	df 91       	pop	r29
    b1b6:	cf 91       	pop	r28
    b1b8:	1f 91       	pop	r17
    b1ba:	0f 91       	pop	r16
    b1bc:	ff 90       	pop	r15
    b1be:	ef 90       	pop	r14
    b1c0:	df 90       	pop	r13
    b1c2:	cf 90       	pop	r12
    b1c4:	bf 90       	pop	r11
    b1c6:	af 90       	pop	r10
    b1c8:	08 95       	ret

0000b1ca <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    b1ca:	ff 92       	push	r15
    b1cc:	0f 93       	push	r16
    b1ce:	1f 93       	push	r17
    b1d0:	cf 93       	push	r28
    b1d2:	df 93       	push	r29
    b1d4:	8c 01       	movw	r16, r24
    b1d6:	d0 e0       	ldi	r29, 0x00	; 0
    b1d8:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    b1da:	f8 01       	movw	r30, r16
    b1dc:	f1 90       	ld	r15, Z+
    b1de:	8f 01       	movw	r16, r30
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    b1e0:	6f 2d       	mov	r22, r15
    b1e2:	ce 01       	movw	r24, r28
    b1e4:	8c 59       	subi	r24, 0x9C	; 156
    b1e6:	9f 4f       	sbci	r25, 0xFF	; 255
    b1e8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    b1ec:	f1 10       	cpse	r15, r1
    b1ee:	0b c0       	rjmp	.+22     	; 0xb206 <device_set_name(char*)+0x3c>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    b1f0:	60 e0       	ldi	r22, 0x00	; 0
    b1f2:	ce 01       	movw	r24, r28
    b1f4:	8b 59       	subi	r24, 0x9B	; 155
    b1f6:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    b1f8:	df 91       	pop	r29
    b1fa:	cf 91       	pop	r28
    b1fc:	1f 91       	pop	r17
    b1fe:	0f 91       	pop	r16
    b200:	ff 90       	pop	r15
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    b202:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b206:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b208:	c9 30       	cpi	r28, 0x09	; 9
    b20a:	d1 05       	cpc	r29, r1
    b20c:	31 f7       	brne	.-52     	; 0xb1da <device_set_name(char*)+0x10>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    b20e:	df 91       	pop	r29
    b210:	cf 91       	pop	r28
    b212:	1f 91       	pop	r17
    b214:	0f 91       	pop	r16
    b216:	ff 90       	pop	r15
    b218:	08 95       	ret

0000b21a <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    b21a:	ef 92       	push	r14
    b21c:	ff 92       	push	r15
    b21e:	0f 93       	push	r16
    b220:	1f 93       	push	r17
    b222:	cf 93       	push	r28
    b224:	df 93       	push	r29
    b226:	0a e7       	ldi	r16, 0x7A	; 122
    b228:	1c e0       	ldi	r17, 0x0C	; 12
    b22a:	ce e6       	ldi	r28, 0x6E	; 110
    b22c:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    b22e:	f8 01       	movw	r30, r16
    b230:	61 91       	ld	r22, Z+
    b232:	8f 01       	movw	r16, r30
    b234:	ce 01       	movw	r24, r28
    b236:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b23a:	21 96       	adiw	r28, 0x01	; 1
    b23c:	c4 37       	cpi	r28, 0x74	; 116
    b23e:	d1 05       	cpc	r29, r1
    b240:	b1 f7       	brne	.-20     	; 0xb22e <save_setup_network()+0x14>
    b242:	00 e8       	ldi	r16, 0x80	; 128
    b244:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    b246:	f8 01       	movw	r30, r16
    b248:	61 91       	ld	r22, Z+
    b24a:	8f 01       	movw	r16, r30
    b24c:	ce 01       	movw	r24, r28
    b24e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b252:	21 96       	adiw	r28, 0x01	; 1
    b254:	c8 37       	cpi	r28, 0x78	; 120
    b256:	d1 05       	cpc	r29, r1
    b258:	b1 f7       	brne	.-20     	; 0xb246 <save_setup_network()+0x2c>
    b25a:	04 e8       	ldi	r16, 0x84	; 132
    b25c:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    b25e:	f8 01       	movw	r30, r16
    b260:	61 91       	ld	r22, Z+
    b262:	8f 01       	movw	r16, r30
    b264:	ce 01       	movw	r24, r28
    b266:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b26a:	21 96       	adiw	r28, 0x01	; 1
    b26c:	cc 37       	cpi	r28, 0x7C	; 124
    b26e:	d1 05       	cpc	r29, r1
    b270:	b1 f7       	brne	.-20     	; 0xb25e <save_setup_network()+0x44>
    b272:	2c e8       	ldi	r18, 0x8C	; 140
    b274:	e2 2e       	mov	r14, r18
    b276:	2c e0       	ldi	r18, 0x0C	; 12
    b278:	f2 2e       	mov	r15, r18
    b27a:	00 e8       	ldi	r16, 0x80	; 128
    b27c:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    b27e:	f7 01       	movw	r30, r14
    b280:	61 91       	ld	r22, Z+
    b282:	7f 01       	movw	r14, r30
    b284:	c8 01       	movw	r24, r16
    b286:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b28a:	0f 5f       	subi	r16, 0xFF	; 255
    b28c:	1f 4f       	sbci	r17, 0xFF	; 255
    b28e:	04 38       	cpi	r16, 0x84	; 132
    b290:	11 05       	cpc	r17, r1
    b292:	a9 f7       	brne	.-22     	; 0xb27e <save_setup_network()+0x64>
    b294:	98 e8       	ldi	r25, 0x88	; 136
    b296:	e9 2e       	mov	r14, r25
    b298:	9c e0       	ldi	r25, 0x0C	; 12
    b29a:	f9 2e       	mov	r15, r25
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    b29c:	f7 01       	movw	r30, r14
    b29e:	61 91       	ld	r22, Z+
    b2a0:	7f 01       	movw	r14, r30
    b2a2:	ce 01       	movw	r24, r28
    b2a4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b2a8:	21 96       	adiw	r28, 0x01	; 1
    b2aa:	c0 38       	cpi	r28, 0x80	; 128
    b2ac:	d1 05       	cpc	r29, r1
    b2ae:	b1 f7       	brne	.-20     	; 0xb29c <save_setup_network()+0x82>
    b2b0:	80 e9       	ldi	r24, 0x90	; 144
    b2b2:	e8 2e       	mov	r14, r24
    b2b4:	8c e0       	ldi	r24, 0x0C	; 12
    b2b6:	f8 2e       	mov	r15, r24
    b2b8:	c4 e6       	ldi	r28, 0x64	; 100
    b2ba:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    b2bc:	f7 01       	movw	r30, r14
    b2be:	61 91       	ld	r22, Z+
    b2c0:	7f 01       	movw	r14, r30
    b2c2:	ce 01       	movw	r24, r28
    b2c4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b2c8:	21 96       	adiw	r28, 0x01	; 1
    b2ca:	cd 36       	cpi	r28, 0x6D	; 109
    b2cc:	d1 05       	cpc	r29, r1
    b2ce:	b1 f7       	brne	.-20     	; 0xb2bc <save_setup_network()+0xa2>
    b2d0:	ca e9       	ldi	r28, 0x9A	; 154
    b2d2:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    b2d4:	69 91       	ld	r22, Y+
    b2d6:	c8 01       	movw	r24, r16
    b2d8:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b2dc:	0f 5f       	subi	r16, 0xFF	; 255
    b2de:	1f 4f       	sbci	r17, 0xFF	; 255
    b2e0:	08 38       	cpi	r16, 0x88	; 136
    b2e2:	11 05       	cpc	r17, r1
    b2e4:	b9 f7       	brne	.-18     	; 0xb2d4 <save_setup_network()+0xba>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    b2e6:	60 91 9f 0c 	lds	r22, 0x0C9F	; 0x800c9f <device+0x25>
    b2ea:	88 e8       	ldi	r24, 0x88	; 136
    b2ec:	90 e0       	ldi	r25, 0x00	; 0
    b2ee:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    b2f2:	60 91 9e 0c 	lds	r22, 0x0C9E	; 0x800c9e <device+0x24>
    b2f6:	89 e8       	ldi	r24, 0x89	; 137
    b2f8:	90 e0       	ldi	r25, 0x00	; 0
    b2fa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b2fe:	00 ea       	ldi	r16, 0xA0	; 160
    b300:	1c e0       	ldi	r17, 0x0C	; 12
    b302:	ca e8       	ldi	r28, 0x8A	; 138
    b304:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    b306:	f8 01       	movw	r30, r16
    b308:	61 91       	ld	r22, Z+
    b30a:	8f 01       	movw	r16, r30
    b30c:	ce 01       	movw	r24, r28
    b30e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b312:	21 96       	adiw	r28, 0x01	; 1
    b314:	ce 39       	cpi	r28, 0x9E	; 158
    b316:	d1 05       	cpc	r29, r1
    b318:	b1 f7       	brne	.-20     	; 0xb306 <save_setup_network()+0xec>
    b31a:	04 eb       	ldi	r16, 0xB4	; 180
    b31c:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    b31e:	f8 01       	movw	r30, r16
    b320:	61 91       	ld	r22, Z+
    b322:	8f 01       	movw	r16, r30
    b324:	ce 01       	movw	r24, r28
    b326:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b32a:	21 96       	adiw	r28, 0x01	; 1
    b32c:	c2 3b       	cpi	r28, 0xB2	; 178
    b32e:	d1 05       	cpc	r29, r1
    b330:	b1 f7       	brne	.-20     	; 0xb31e <save_setup_network()+0x104>
    b332:	08 ec       	ldi	r16, 0xC8	; 200
    b334:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    b336:	f8 01       	movw	r30, r16
    b338:	61 91       	ld	r22, Z+
    b33a:	8f 01       	movw	r16, r30
    b33c:	ce 01       	movw	r24, r28
    b33e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    b342:	21 96       	adiw	r28, 0x01	; 1
    b344:	c6 3b       	cpi	r28, 0xB6	; 182
    b346:	d1 05       	cpc	r29, r1
    b348:	b1 f7       	brne	.-20     	; 0xb336 <save_setup_network()+0x11c>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:54
}
    b34a:	df 91       	pop	r29
    b34c:	cf 91       	pop	r28
    b34e:	1f 91       	pop	r17
    b350:	0f 91       	pop	r16
    b352:	ff 90       	pop	r15
    b354:	ef 90       	pop	r14
    b356:	08 95       	ret

0000b358 <remote_tds_set_name(unsigned char, char*) [clone .part.22]>:
_Z19remote_tds_set_namehPc.part.22():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    b358:	df 92       	push	r13
    b35a:	ef 92       	push	r14
    b35c:	ff 92       	push	r15
    b35e:	0f 93       	push	r16
    b360:	1f 93       	push	r17
    b362:	cf 93       	push	r28
    b364:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    b366:	94 e1       	ldi	r25, 0x14	; 20
    b368:	89 9f       	mul	r24, r25
    b36a:	e0 01       	movw	r28, r0
    b36c:	11 24       	eor	r1, r1
    b36e:	7b 01       	movw	r14, r22
    b370:	8e 01       	movw	r16, r28
    b372:	06 55       	subi	r16, 0x56	; 86
    b374:	1a 4f       	sbci	r17, 0xFA	; 250
    b376:	c4 54       	subi	r28, 0x44	; 68
    b378:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2804
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    b37a:	f7 01       	movw	r30, r14
    b37c:	d1 90       	ld	r13, Z+
    b37e:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    b380:	6d 2d       	mov	r22, r13
    b382:	c8 01       	movw	r24, r16
    b384:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
      if (t == 0) break;
    b388:	dd 20       	and	r13, r13
    b38a:	29 f0       	breq	.+10     	; 0xb396 <remote_tds_set_name(unsigned char, char*) [clone .part.22]+0x3e>
    b38c:	0f 5f       	subi	r16, 0xFF	; 255
    b38e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    b390:	0c 17       	cp	r16, r28
    b392:	1d 07       	cpc	r17, r29
    b394:	91 f7       	brne	.-28     	; 0xb37a <remote_tds_set_name(unsigned char, char*) [clone .part.22]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    b396:	df 91       	pop	r29
    b398:	cf 91       	pop	r28
    b39a:	1f 91       	pop	r17
    b39c:	0f 91       	pop	r16
    b39e:	ff 90       	pop	r15
    b3a0:	ef 90       	pop	r14
    b3a2:	df 90       	pop	r13
    b3a4:	08 95       	ret

0000b3a6 <button_click_set_show_default_temp(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_set_show_default_temphhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5639
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3)
{
  default_show_temp = args3;
    b3a6:	40 93 f9 08 	sts	0x08F9, r20	; 0x8008f9 <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    b3aa:	64 2f       	mov	r22, r20
    b3ac:	8d e5       	ldi	r24, 0x5D	; 93
    b3ae:	90 e0       	ldi	r25, 0x00	; 0
    b3b0:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000b3b4 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    b3b4:	cf 93       	push	r28
    b3b6:	df 93       	push	r29
    b3b8:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    b3ba:	8a 30       	cpi	r24, 0x0A	; 10
    b3bc:	78 f4       	brcc	.+30     	; 0xb3dc <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    b3be:	ba 01       	movw	r22, r20
    b3c0:	c8 2f       	mov	r28, r24
    b3c2:	0e 94 ac 59 	call	0xb358	; 0xb358 <remote_tds_set_name(unsigned char, char*) [clone .part.22]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    b3c6:	24 e1       	ldi	r18, 0x14	; 20
    b3c8:	c2 9f       	mul	r28, r18
    b3ca:	c0 01       	movw	r24, r0
    b3cc:	11 24       	eor	r1, r1
    b3ce:	6d 2f       	mov	r22, r29
    b3d0:	83 54       	subi	r24, 0x43	; 67
    b3d2:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    b3d4:	df 91       	pop	r29
    b3d6:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    b3d8:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    b3dc:	df 91       	pop	r29
    b3de:	cf 91       	pop	r28
    b3e0:	08 95       	ret

0000b3e2 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    b3e2:	cf 93       	push	r28
    b3e4:	df 93       	push	r29
    b3e6:	cd b7       	in	r28, 0x3d	; 61
    b3e8:	de b7       	in	r29, 0x3e	; 62
    b3ea:	62 97       	sbiw	r28, 0x12	; 18
    b3ec:	0f b6       	in	r0, 0x3f	; 63
    b3ee:	f8 94       	cli
    b3f0:	de bf       	out	0x3e, r29	; 62
    b3f2:	0f be       	out	0x3f, r0	; 63
    b3f4:	cd bf       	out	0x3d, r28	; 61
    b3f6:	e1 e0       	ldi	r30, 0x01	; 1
    b3f8:	f0 e0       	ldi	r31, 0x00	; 0
    b3fa:	ec 0f       	add	r30, r28
    b3fc:	fd 1f       	adc	r31, r29
    b3fe:	e8 0f       	add	r30, r24
    b400:	f1 1d       	adc	r31, r1
    b402:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    b404:	ae 01       	movw	r20, r28
    b406:	4f 5f       	subi	r20, 0xFF	; 255
    b408:	5f 4f       	sbci	r21, 0xFF	; 255
    b40a:	60 e0       	ldi	r22, 0x00	; 0
    b40c:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
}
    b410:	62 96       	adiw	r28, 0x12	; 18
    b412:	0f b6       	in	r0, 0x3f	; 63
    b414:	f8 94       	cli
    b416:	de bf       	out	0x3e, r29	; 62
    b418:	0f be       	out	0x3f, r0	; 63
    b41a:	cd bf       	out	0x3d, r28	; 61
    b41c:	df 91       	pop	r29
    b41e:	cf 91       	pop	r28
    b420:	08 95       	ret

0000b422 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5368
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    b422:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5370
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    b424:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5371
  MenuHistoryPrevMenu();
    b428:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <MenuHistoryPrevMenu()>

0000b42c <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    b42c:	21 e2       	ldi	r18, 0x21	; 33
    b42e:	82 9f       	mul	r24, r18
    b430:	c0 01       	movw	r24, r0
    b432:	11 24       	eor	r1, r1
    b434:	82 5a       	subi	r24, 0xA2	; 162
    b436:	9e 4f       	sbci	r25, 0xFE	; 254
    b438:	0c 94 b1 9d 	jmp	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000b43c <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6030
   kdyz 0 tak se nezobrazuji polozky v menu
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
    b43c:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
    b440:	0e 94 16 5a 	call	0xb42c	; 0xb42c <thermostat_ring_get_mode(unsigned char)>
    b444:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6032
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    return 1;
    b446:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6031
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    b448:	93 30       	cpi	r25, 0x03	; 3
    b44a:	31 f0       	breq	.+12     	; 0xb458 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    b44c:	95 30       	cpi	r25, 0x05	; 5
    b44e:	29 f0       	breq	.+10     	; 0xb45a <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    b450:	98 30       	cpi	r25, 0x08	; 8
    b452:	19 f0       	breq	.+6      	; 0xb45a <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    b454:	80 e0       	ldi	r24, 0x00	; 0
    b456:	08 95       	ret
    b458:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6035
    return 1;

  return 0;
}
    b45a:	08 95       	ret

0000b45c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_mode_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5908
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b45c:	cf 93       	push	r28
    b45e:	86 2f       	mov	r24, r22
    b460:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5911
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
    b462:	0e 94 16 5a 	call	0xb42c	; 0xb42c <thermostat_ring_get_mode(unsigned char)>
    b466:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5912
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    b468:	c1 11       	cpse	r28, r1
    b46a:	05 c0       	rjmp	.+10     	; 0xb476 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x1a>
    b46c:	81 e0       	ldi	r24, 0x01	; 1
    b46e:	99 23       	and	r25, r25
    b470:	39 f0       	breq	.+14     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5910
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 0;
    b472:	80 e0       	ldi	r24, 0x00	; 0
    b474:	05 c0       	rjmp	.+10     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5913
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    b476:	c1 30       	cpi	r28, 0x01	; 1
    b478:	29 f4       	brne	.+10     	; 0xb484 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    b47a:	81 e0       	ldi	r24, 0x01	; 1
    b47c:	91 30       	cpi	r25, 0x01	; 1
    b47e:	c9 f7       	brne	.-14     	; 0xb472 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5918
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  return ret;
}
    b480:	cf 91       	pop	r28
    b482:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    b484:	c2 30       	cpi	r28, 0x02	; 2
    b486:	21 f4       	brne	.+8      	; 0xb490 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x34>
    b488:	81 e0       	ldi	r24, 0x01	; 1
    b48a:	97 30       	cpi	r25, 0x07	; 7
    b48c:	91 f7       	brne	.-28     	; 0xb472 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b48e:	f8 cf       	rjmp	.-16     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5915
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    b490:	c3 30       	cpi	r28, 0x03	; 3
    b492:	21 f4       	brne	.+8      	; 0xb49c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x40>
    b494:	81 e0       	ldi	r24, 0x01	; 1
    b496:	92 30       	cpi	r25, 0x02	; 2
    b498:	61 f7       	brne	.-40     	; 0xb472 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b49a:	f2 cf       	rjmp	.-28     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5916
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    b49c:	c4 30       	cpi	r28, 0x04	; 4
    b49e:	49 f7       	brne	.-46     	; 0xb472 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b4a0:	81 e0       	ldi	r24, 0x01	; 1
    b4a2:	98 30       	cpi	r25, 0x08	; 8
    b4a4:	69 f3       	breq	.-38     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    b4a6:	93 30       	cpi	r25, 0x03	; 3
    b4a8:	59 f3       	breq	.-42     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    b4aa:	95 30       	cpi	r25, 0x05	; 5
    b4ac:	11 f7       	brne	.-60     	; 0xb472 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    b4ae:	e8 cf       	rjmp	.-48     	; 0xb480 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>

0000b4b0 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5896
   prevodni funkce pro dynamicke tlacitko popisku vybraneho operacniho modu
   prevede id modu na textovy popisek
   zadne vstupni parametry
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    b4b0:	0f 93       	push	r16
    b4b2:	1f 93       	push	r17
    b4b4:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5897
  strcpy_P(line1, text_current_ring_mode);
    b4b6:	6d eb       	ldi	r22, 0xBD	; 189
    b4b8:	7d e3       	ldi	r23, 0x3D	; 61
    b4ba:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5898
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
    b4be:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
    b4c2:	0e 94 16 5a 	call	0xb42c	; 0xb42c <thermostat_ring_get_mode(unsigned char)>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
/*
   prevodni funkce id modu na textovy popisek
*/
void convert_mode_text_1(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
    b4c6:	6c e4       	ldi	r22, 0x4C	; 76
    b4c8:	7e e3       	ldi	r23, 0x3E	; 62
    b4ca:	88 23       	and	r24, r24
    b4cc:	61 f0       	breq	.+24     	; 0xb4e6 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4181
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
    b4ce:	62 e3       	ldi	r22, 0x32	; 50
    b4d0:	7e e3       	ldi	r23, 0x3E	; 62
    b4d2:	81 30       	cpi	r24, 0x01	; 1
    b4d4:	41 f0       	breq	.+16     	; 0xb4e6 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4182
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
    b4d6:	64 ee       	ldi	r22, 0xE4	; 228
    b4d8:	7d e3       	ldi	r23, 0x3D	; 61
    b4da:	83 30       	cpi	r24, 0x03	; 3
    b4dc:	21 f0       	breq	.+8      	; 0xb4e6 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4183
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
    b4de:	82 30       	cpi	r24, 0x02	; 2
    b4e0:	41 f4       	brne	.+16     	; 0xb4f2 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x42>
    b4e2:	6c ef       	ldi	r22, 0xFC	; 252
    b4e4:	7d e3       	ldi	r23, 0x3D	; 61
    b4e6:	c8 01       	movw	r24, r16
    b4e8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5899
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    b4ec:	1f 91       	pop	r17
    b4ee:	0f 91       	pop	r16
    b4f0:	08 95       	ret
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4184
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
    b4f2:	84 30       	cpi	r24, 0x04	; 4
    b4f4:	39 f4       	brne	.+14     	; 0xb504 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4186
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    b4f6:	64 ee       	ldi	r22, 0xE4	; 228
    b4f8:	7d e3       	ldi	r23, 0x3D	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4187
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    b4fa:	c8 01       	movw	r24, r16
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5899
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    b4fc:	1f 91       	pop	r17
    b4fe:	0f 91       	pop	r16
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4187
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    b500:	0c 94 82 b1 	jmp	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4185
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
    b504:	69 eb       	ldi	r22, 0xB9	; 185
    b506:	7d e3       	ldi	r23, 0x3D	; 61
    b508:	86 30       	cpi	r24, 0x06	; 6
    b50a:	b9 f3       	breq	.-18     	; 0xb4fa <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4186
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    b50c:	88 30       	cpi	r24, 0x08	; 8
    b50e:	99 f3       	breq	.-26     	; 0xb4f6 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4187
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    b510:	87 30       	cpi	r24, 0x07	; 7
    b512:	61 f7       	brne	.-40     	; 0xb4ec <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x3c>
    b514:	68 e1       	ldi	r22, 0x18	; 24
    b516:	7e e3       	ldi	r23, 0x3E	; 62
    b518:	f0 cf       	rjmp	.-32     	; 0xb4fa <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4a>

0000b51a <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    b51a:	0f 93       	push	r16
    b51c:	1f 93       	push	r17
    b51e:	cf 93       	push	r28
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    b520:	91 e2       	ldi	r25, 0x21	; 33
    b522:	89 9f       	mul	r24, r25
    b524:	80 01       	movw	r16, r0
    b526:	11 24       	eor	r1, r1
    b528:	c8 01       	movw	r24, r16
    b52a:	8a 5a       	subi	r24, 0xAA	; 170
    b52c:	9e 4f       	sbci	r25, 0xFE	; 254
    b52e:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b532:	c8 2f       	mov	r28, r24
    b534:	c8 01       	movw	r24, r16
    b536:	89 5a       	subi	r24, 0xA9	; 169
    b538:	9e 4f       	sbci	r25, 0xFE	; 254
    b53a:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b53e:	2c 2f       	mov	r18, r28
    b540:	30 e0       	ldi	r19, 0x00	; 0
    b542:	32 2f       	mov	r19, r18
    b544:	22 27       	eor	r18, r18
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:155
}
    b546:	82 0f       	add	r24, r18
    b548:	93 2f       	mov	r25, r19
    b54a:	91 1d       	adc	r25, r1
    b54c:	cf 91       	pop	r28
    b54e:	1f 91       	pop	r17
    b550:	0f 91       	pop	r16
    b552:	08 95       	ret

0000b554 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
  thermostat_ring_pid_set_time(args1, args3);
}


void preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b554:	1f 93       	push	r17
    b556:	cf 93       	push	r28
    b558:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    b55a:	10 91 69 0a 	lds	r17, 0x0A69	; 0x800a69 <default_ring>
    b55e:	81 2f       	mov	r24, r17
    b560:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    b564:	cd e9       	ldi	r28, 0x9D	; 157
    b566:	d8 e0       	ldi	r29, 0x08	; 8
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
}


void preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    b568:	bc 01       	movw	r22, r24
    b56a:	99 0f       	add	r25, r25
    b56c:	88 0b       	sbc	r24, r24
    b56e:	99 0b       	sbc	r25, r25
    b570:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    b574:	20 e0       	ldi	r18, 0x00	; 0
    b576:	30 e0       	ldi	r19, 0x00	; 0
    b578:	40 e2       	ldi	r20, 0x20	; 32
    b57a:	51 e4       	ldi	r21, 0x41	; 65
    b57c:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    b580:	68 83       	st	Y, r22
    b582:	79 83       	std	Y+1, r23	; 0x01
    b584:	8a 83       	std	Y+2, r24	; 0x02
    b586:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  menu_dialog_variable[idx].variable_min = min;
    b588:	80 e0       	ldi	r24, 0x00	; 0
    b58a:	90 e0       	ldi	r25, 0x00	; 0
    b58c:	a0 e8       	ldi	r26, 0x80	; 128
    b58e:	b1 e4       	ldi	r27, 0x41	; 65
    b590:	88 87       	std	Y+8, r24	; 0x08
    b592:	99 87       	std	Y+9, r25	; 0x09
    b594:	aa 87       	std	Y+10, r26	; 0x0a
    b596:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    b598:	80 e0       	ldi	r24, 0x00	; 0
    b59a:	90 e0       	ldi	r25, 0x00	; 0
    b59c:	a0 e0       	ldi	r26, 0x00	; 0
    b59e:	b2 e4       	ldi	r27, 0x42	; 66
    b5a0:	8c 83       	std	Y+4, r24	; 0x04
    b5a2:	9d 83       	std	Y+5, r25	; 0x05
    b5a4:	ae 83       	std	Y+6, r26	; 0x06
    b5a6:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    b5a8:	80 e0       	ldi	r24, 0x00	; 0
    b5aa:	90 e0       	ldi	r25, 0x00	; 0
    b5ac:	a0 e0       	ldi	r26, 0x00	; 0
    b5ae:	bf e3       	ldi	r27, 0x3F	; 63
    b5b0:	8e 87       	std	Y+14, r24	; 0x0e
    b5b2:	9f 87       	std	Y+15, r25	; 0x0f
    b5b4:	a8 8b       	std	Y+16, r26	; 0x10
    b5b6:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    b5b8:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    b5ba:	1a 8b       	std	Y+18, r17	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    b5bc:	81 e0       	ldi	r24, 0x01	; 1
    b5be:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    b5c0:	81 e9       	ldi	r24, 0x91	; 145
    b5c2:	97 e5       	ldi	r25, 0x57	; 87
    b5c4:	9c 8b       	std	Y+20, r25	; 0x14
    b5c6:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377


void preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
}
    b5c8:	df 91       	pop	r29
    b5ca:	cf 91       	pop	r28
    b5cc:	1f 91       	pop	r17
    b5ce:	08 95       	ret

0000b5d0 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    b5d0:	21 e2       	ldi	r18, 0x21	; 33
    b5d2:	82 9f       	mul	r24, r18
    b5d4:	c0 01       	movw	r24, r0
    b5d6:	11 24       	eor	r1, r1
    b5d8:	83 5a       	subi	r24, 0xA3	; 163
    b5da:	9e 4f       	sbci	r25, 0xFE	; 254
    b5dc:	0c 94 b1 9d 	jmp	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000b5e0 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_set_term_heat_or_coolhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6014
   args1 ... parametr z definice prvku
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/
void button_click_set_term_heat_or_cool(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b5e0:	cf 93       	push	r28
    b5e2:	df 93       	push	r29
    b5e4:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6015
  if (thermostat_ring_get_active(default_ring) != 255)
    b5e6:	c0 91 69 0a 	lds	r28, 0x0A69	; 0x800a69 <default_ring>
    b5ea:	8c 2f       	mov	r24, r28
    b5ec:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b5f0:	8f 3f       	cpi	r24, 0xFF	; 255
    b5f2:	59 f0       	breq	.+22     	; 0xb60a <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6018
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    b5f4:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6017
*/
void button_click_set_term_heat_or_cool(uint8_t args1, uint8_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
    b5f6:	d3 30       	cpi	r29, 0x03	; 3
    b5f8:	19 f0       	breq	.+6      	; 0xb600 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6019
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    b5fa:	d5 30       	cpi	r29, 0x05	; 5
    b5fc:	31 f4       	brne	.+12     	; 0xb60a <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6020
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    b5fe:	61 e0       	ldi	r22, 0x01	; 1
    b600:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6022
  }
}
    b602:	df 91       	pop	r29
    b604:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6020
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    b606:	0c 94 b3 9d 	jmp	0x13b66	; 0x13b66 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6022
  }
}
    b60a:	df 91       	pop	r29
    b60c:	cf 91       	pop	r28
    b60e:	08 95       	ret

0000b610 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_default_term_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5808
   args1 ... parametr z definice prvku
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/
void button_click_default_term_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b610:	cf 93       	push	r28
    b612:	df 93       	push	r29
    b614:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5809
  if (thermostat_ring_get_active(default_ring) != 255)
    b616:	c0 91 69 0a 	lds	r28, 0x0A69	; 0x800a69 <default_ring>
    b61a:	8c 2f       	mov	r24, r28
    b61c:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b620:	8f 3f       	cpi	r24, 0xFF	; 255
    b622:	39 f0       	breq	.+14     	; 0xb632 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5811
  {
    thermostat_ring_set_mode(default_ring, args1);
    b624:	6d 2f       	mov	r22, r29
    b626:	8c 2f       	mov	r24, r28
    b628:	0e 94 5f 57 	call	0xaebe	; 0xaebe <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5812
    change_term_mode = 1;
    b62c:	81 e0       	ldi	r24, 0x01	; 1
    b62e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5814
  }
}
    b632:	df 91       	pop	r29
    b634:	cf 91       	pop	r28
    b636:	08 95       	ret

0000b638 <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)>:
_Z40button_status_default_ring_term_has_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5792
   args3 .. index prvku v menu
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    b638:	cf 93       	push	r28
    b63a:	df 93       	push	r29
    b63c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != 255)
    b63e:	c0 91 69 0a 	lds	r28, 0x0A69	; 0x800a69 <default_ring>
    b642:	8c 2f       	mov	r24, r28
    b644:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b648:	8f 3f       	cpi	r24, 0xFF	; 255
    b64a:	29 f0       	breq	.+10     	; 0xb656 <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)+0x1e>
thermostat_ring_get_mode_1():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    b64c:	8c 2f       	mov	r24, r28
    b64e:	0e 94 16 5a 	call	0xb42c	; 0xb42c <thermostat_ring_get_mode(unsigned char)>
    b652:	91 e0       	ldi	r25, 0x01	; 1
    b654:	d8 13       	cpse	r29, r24
_Z40button_status_default_ring_term_has_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5793
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    b656:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5798
  if (thermostat_ring_get_active(default_ring) != 255)
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
  return ret;
}
    b658:	89 2f       	mov	r24, r25
    b65a:	df 91       	pop	r29
    b65c:	cf 91       	pop	r28
    b65e:	08 95       	ret

0000b660 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5718
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b660:	cf 93       	push	r28
    b662:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5719
  if (thermostat_ring_get_active(args3) != 255)
    b664:	84 2f       	mov	r24, r20
    b666:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b66a:	8f 3f       	cpi	r24, 0xFF	; 255
    b66c:	51 f0       	breq	.+20     	; 0xb682 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5721
  {
    default_ring = args3;
    b66e:	c0 93 69 0a 	sts	0x0A69, r28	; 0x800a69 <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2298
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    b672:	e0 91 27 09 	lds	r30, 0x0927	; 0x800927 <MenuHistoryIndex>
    b676:	f0 e0       	ldi	r31, 0x00	; 0
    b678:	e3 5e       	subi	r30, 0xE3	; 227
    b67a:	f6 4f       	sbci	r31, 0xF6	; 246
    b67c:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5731
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
}
    b67e:	cf 91       	pop	r28
    b680:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5726
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    b682:	60 e0       	ldi	r22, 0x00	; 0
    b684:	84 e6       	ldi	r24, 0x64	; 100
    b686:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5727
    dialog_yes_function = &term_ring_do_activate;
    b68a:	80 e7       	ldi	r24, 0x70	; 112
    b68c:	98 e5       	ldi	r25, 0x58	; 88
    b68e:	90 93 1c 09 	sts	0x091C, r25	; 0x80091c <dialog_yes_function+0x1>
    b692:	80 93 1b 09 	sts	0x091B, r24	; 0x80091b <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5728
    dialog_yes_args1 = args3;
    b696:	c0 93 1a 09 	sts	0x091A, r28	; 0x80091a <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5729
    strcpy_P(dialog_text, text_term_do_activate);
    b69a:	63 e7       	ldi	r22, 0x73	; 115
    b69c:	7d e3       	ldi	r23, 0x3D	; 61
    b69e:	8a ef       	ldi	r24, 0xFA	; 250
    b6a0:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5731
  }
}
    b6a2:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5729
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
    b6a4:	0c 94 82 b1 	jmp	0x16304	; 0x16304 <strcpy_P>

0000b6a8 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    b6a8:	ef 92       	push	r14
    b6aa:	ff 92       	push	r15
    b6ac:	0f 93       	push	r16
    b6ae:	1f 93       	push	r17
    b6b0:	cf 93       	push	r28
    b6b2:	df 93       	push	r29
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    b6b4:	91 e2       	ldi	r25, 0x21	; 33
    b6b6:	89 9f       	mul	r24, r25
    b6b8:	e0 01       	movw	r28, r0
    b6ba:	11 24       	eor	r1, r1
    b6bc:	8e 01       	movw	r16, r28
    b6be:	04 5b       	subi	r16, 0xB4	; 180
    b6c0:	1e 4f       	sbci	r17, 0xFE	; 254
    b6c2:	7b 01       	movw	r14, r22
    b6c4:	cb 5a       	subi	r28, 0xAB	; 171
    b6c6:	de 4f       	sbci	r29, 0xFE	; 254
    b6c8:	c8 01       	movw	r24, r16
    b6ca:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:105
    name[i] = t;
    b6ce:	f7 01       	movw	r30, r14
    b6d0:	81 93       	st	Z+, r24
    b6d2:	7f 01       	movw	r14, r30
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    b6d4:	88 23       	and	r24, r24
    b6d6:	29 f0       	breq	.+10     	; 0xb6e2 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    b6d8:	0f 5f       	subi	r16, 0xFF	; 255
    b6da:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b6dc:	0c 17       	cp	r16, r28
    b6de:	1d 07       	cpc	r17, r29
    b6e0:	99 f7       	brne	.-26     	; 0xb6c8 <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    b6e2:	df 91       	pop	r29
    b6e4:	cf 91       	pop	r28
    b6e6:	1f 91       	pop	r17
    b6e8:	0f 91       	pop	r16
    b6ea:	ff 90       	pop	r15
    b6ec:	ef 90       	pop	r14
    b6ee:	08 95       	ret

0000b6f0 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>:
_Z44button_click_set_term_ring_name_via_keyboardjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5851
   args2
   args3
   promene nemaji zadny vyznam
*/
void button_click_set_term_ring_name_via_keyboard(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b6f0:	1f 93       	push	r17
    b6f2:	cf 93       	push	r28
    b6f4:	df 93       	push	r29
    b6f6:	00 d0       	rcall	.+0      	; 0xb6f8 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0x8>
    b6f8:	00 d0       	rcall	.+0      	; 0xb6fa <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xa>
    b6fa:	00 d0       	rcall	.+0      	; 0xb6fc <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xc>
    b6fc:	1f 92       	push	r1
    b6fe:	cd b7       	in	r28, 0x3d	; 61
    b700:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5853
  char name[10];
  args2 = default_ring;
    b702:	10 91 69 0a 	lds	r17, 0x0A69	; 0x800a69 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5854
  thermostat_ring_get_name(args2, name);
    b706:	be 01       	movw	r22, r28
    b708:	6f 5f       	subi	r22, 0xFF	; 255
    b70a:	7f 4f       	sbci	r23, 0xFF	; 255
    b70c:	81 2f       	mov	r24, r17
    b70e:	0e 94 54 5b 	call	0xb6a8	; 0xb6a8 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5855
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b712:	60 e0       	ldi	r22, 0x00	; 0
    b714:	87 e6       	ldi	r24, 0x67	; 103
    b716:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    b71a:	be 01       	movw	r22, r28
    b71c:	6f 5f       	subi	r22, 0xFF	; 255
    b71e:	7f 4f       	sbci	r23, 0xFF	; 255
    b720:	8d e2       	ldi	r24, 0x2D	; 45
    b722:	99 e0       	ldi	r25, 0x09	; 9
    b724:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  dialog_set_string_max_length = max_length;
    b728:	89 e0       	ldi	r24, 0x09	; 9
    b72a:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  dialog_set_string_args = idx;
    b72e:	10 93 2b 09 	sts	0x092B, r17	; 0x80092b <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  dialog_save_string_function = save_function;
    b732:	82 e5       	ldi	r24, 0x52	; 82
    b734:	98 e5       	ldi	r25, 0x58	; 88
    b736:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <dialog_save_string_function+0x1>
    b73a:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <dialog_save_string_function>
_Z44button_click_set_term_ring_name_via_keyboardjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5858
  args2 = default_ring;
  thermostat_ring_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 9, args2, &helper_set_term_ring_name);

}
    b73e:	2a 96       	adiw	r28, 0x0a	; 10
    b740:	0f b6       	in	r0, 0x3f	; 63
    b742:	f8 94       	cli
    b744:	de bf       	out	0x3e, r29	; 62
    b746:	0f be       	out	0x3f, r0	; 63
    b748:	cd bf       	out	0x3d, r28	; 61
    b74a:	df 91       	pop	r29
    b74c:	cf 91       	pop	r28
    b74e:	1f 91       	pop	r17
    b750:	08 95       	ret

0000b752 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5761
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    b752:	cf 92       	push	r12
    b754:	df 92       	push	r13
    b756:	ef 92       	push	r14
    b758:	ff 92       	push	r15
    b75a:	0f 93       	push	r16
    b75c:	1f 93       	push	r17
    b75e:	cf 93       	push	r28
    b760:	df 93       	push	r29
    b762:	00 d0       	rcall	.+0      	; 0xb764 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    b764:	00 d0       	rcall	.+0      	; 0xb766 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    b766:	00 d0       	rcall	.+0      	; 0xb768 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    b768:	1f 92       	push	r1
    b76a:	cd b7       	in	r28, 0x3d	; 61
    b76c:	de b7       	in	r29, 0x3e	; 62
    b76e:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5763
  char name[10];
  thermostat_ring_get_name(default_ring, name);
    b770:	ce 01       	movw	r24, r28
    b772:	01 96       	adiw	r24, 0x01	; 1
    b774:	7c 01       	movw	r14, r24
    b776:	bc 01       	movw	r22, r24
    b778:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
    b77c:	0e 94 54 5b 	call	0xb6a8	; 0xb6a8 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5764
  sprintf(line2, "Regulator %d - %s", default_ring, name);
    b780:	ff 92       	push	r15
    b782:	ef 92       	push	r14
    b784:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
    b788:	1f 92       	push	r1
    b78a:	8f 93       	push	r24
    b78c:	88 e6       	ldi	r24, 0x68	; 104
    b78e:	93 e0       	ldi	r25, 0x03	; 3
    b790:	9f 93       	push	r25
    b792:	8f 93       	push	r24
    b794:	1f 93       	push	r17
    b796:	0f 93       	push	r16
    b798:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5765
  strcpy_P(line1, text_change_default_ring);
    b79c:	6f e9       	ldi	r22, 0x9F	; 159
    b79e:	7d e3       	ldi	r23, 0x3D	; 61
    b7a0:	c6 01       	movw	r24, r12
    b7a2:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
    b7a6:	0f b6       	in	r0, 0x3f	; 63
    b7a8:	f8 94       	cli
    b7aa:	de bf       	out	0x3e, r29	; 62
    b7ac:	0f be       	out	0x3f, r0	; 63
    b7ae:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5766
}
    b7b0:	2a 96       	adiw	r28, 0x0a	; 10
    b7b2:	0f b6       	in	r0, 0x3f	; 63
    b7b4:	f8 94       	cli
    b7b6:	de bf       	out	0x3e, r29	; 62
    b7b8:	0f be       	out	0x3f, r0	; 63
    b7ba:	cd bf       	out	0x3d, r28	; 61
    b7bc:	df 91       	pop	r29
    b7be:	cf 91       	pop	r28
    b7c0:	1f 91       	pop	r17
    b7c2:	0f 91       	pop	r16
    b7c4:	ff 90       	pop	r15
    b7c6:	ef 90       	pop	r14
    b7c8:	df 90       	pop	r13
    b7ca:	cf 90       	pop	r12
    b7cc:	08 95       	ret

0000b7ce <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5742
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    b7ce:	af 92       	push	r10
    b7d0:	bf 92       	push	r11
    b7d2:	cf 92       	push	r12
    b7d4:	df 92       	push	r13
    b7d6:	ff 92       	push	r15
    b7d8:	0f 93       	push	r16
    b7da:	1f 93       	push	r17
    b7dc:	cf 93       	push	r28
    b7de:	df 93       	push	r29
    b7e0:	cd b7       	in	r28, 0x3d	; 61
    b7e2:	de b7       	in	r29, 0x3e	; 62
    b7e4:	66 97       	sbiw	r28, 0x16	; 22
    b7e6:	0f b6       	in	r0, 0x3f	; 63
    b7e8:	f8 94       	cli
    b7ea:	de bf       	out	0x3e, r29	; 62
    b7ec:	0f be       	out	0x3f, r0	; 63
    b7ee:	cd bf       	out	0x3d, r28	; 61
    b7f0:	f8 2e       	mov	r15, r24
    b7f2:	59 01       	movw	r10, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    b7f4:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b7f8:	9e 01       	movw	r18, r28
    b7fa:	2f 5f       	subi	r18, 0xFF	; 255
    b7fc:	3f 4f       	sbci	r19, 0xFF	; 255
    b7fe:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5746
    strcpy_P(active, text_term_active);
    b800:	67 e9       	ldi	r22, 0x97	; 151
    b802:	7d e3       	ldi	r23, 0x3D	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    b804:	8f 3f       	cpi	r24, 0xFF	; 255
    b806:	11 f4       	brne	.+4      	; 0xb80c <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5748
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    b808:	6d e8       	ldi	r22, 0x8D	; 141
    b80a:	7d e3       	ldi	r23, 0x3D	; 61
    b80c:	c6 01       	movw	r24, r12
    b80e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5749
  thermostat_ring_get_name(args1, name);
    b812:	be 01       	movw	r22, r28
    b814:	63 5f       	subi	r22, 0xF3	; 243
    b816:	7f 4f       	sbci	r23, 0xFF	; 255
    b818:	8f 2d       	mov	r24, r15
    b81a:	0e 94 54 5b 	call	0xb6a8	; 0xb6a8 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5750
  sprintf(line2, "Reg. %d %s", args1, active);
    b81e:	df 92       	push	r13
    b820:	cf 92       	push	r12
    b822:	1f 92       	push	r1
    b824:	ff 92       	push	r15
    b826:	8a e7       	ldi	r24, 0x7A	; 122
    b828:	93 e0       	ldi	r25, 0x03	; 3
    b82a:	9f 93       	push	r25
    b82c:	8f 93       	push	r24
    b82e:	1f 93       	push	r17
    b830:	0f 93       	push	r16
    b832:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5751
  strcpy(line1, name);
    b836:	be 01       	movw	r22, r28
    b838:	63 5f       	subi	r22, 0xF3	; 243
    b83a:	7f 4f       	sbci	r23, 0xFF	; 255
    b83c:	c5 01       	movw	r24, r10
    b83e:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
    b842:	0f b6       	in	r0, 0x3f	; 63
    b844:	f8 94       	cli
    b846:	de bf       	out	0x3e, r29	; 62
    b848:	0f be       	out	0x3f, r0	; 63
    b84a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5752
}
    b84c:	66 96       	adiw	r28, 0x16	; 22
    b84e:	0f b6       	in	r0, 0x3f	; 63
    b850:	f8 94       	cli
    b852:	de bf       	out	0x3e, r29	; 62
    b854:	0f be       	out	0x3f, r0	; 63
    b856:	cd bf       	out	0x3d, r28	; 61
    b858:	df 91       	pop	r29
    b85a:	cf 91       	pop	r28
    b85c:	1f 91       	pop	r17
    b85e:	0f 91       	pop	r16
    b860:	ff 90       	pop	r15
    b862:	df 90       	pop	r13
    b864:	cf 90       	pop	r12
    b866:	bf 90       	pop	r11
    b868:	af 90       	pop	r10
    b86a:	08 95       	ret

0000b86c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_default_ringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4898
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b86c:	af 92       	push	r10
    b86e:	bf 92       	push	r11
    b870:	cf 92       	push	r12
    b872:	df 92       	push	r13
    b874:	ef 92       	push	r14
    b876:	ff 92       	push	r15
    b878:	0f 93       	push	r16
    b87a:	1f 93       	push	r17
    b87c:	cf 93       	push	r28
    b87e:	df 93       	push	r29
    b880:	cd b7       	in	r28, 0x3d	; 61
    b882:	de b7       	in	r29, 0x3e	; 62
    b884:	a8 97       	sbiw	r28, 0x28	; 40
    b886:	0f b6       	in	r0, 0x3f	; 63
    b888:	f8 94       	cli
    b88a:	de bf       	out	0x3e, r29	; 62
    b88c:	0f be       	out	0x3f, r0	; 63
    b88e:	cd bf       	out	0x3d, r28	; 61
    b890:	6c 01       	movw	r12, r24
    b892:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4901
  char name[10];
  char default_text[30];
  strcpy_P(default_text, regulator_default_text);
    b894:	64 ea       	ldi	r22, 0xA4	; 164
    b896:	7c e3       	ldi	r23, 0x3C	; 60
    b898:	ce 01       	movw	r24, r28
    b89a:	01 96       	adiw	r24, 0x01	; 1
    b89c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4902
  if (thermostat_ring_get_active(default_ring) != 255)
    b8a0:	10 91 69 0a 	lds	r17, 0x0A69	; 0x800a69 <default_ring>
    b8a4:	81 2f       	mov	r24, r17
    b8a6:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b8aa:	8f 3f       	cpi	r24, 0xFF	; 255
    b8ac:	51 f1       	breq	.+84     	; 0xb902 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4904
  {
    thermostat_ring_get_name(default_ring, name);
    b8ae:	be 01       	movw	r22, r28
    b8b0:	61 5e       	subi	r22, 0xE1	; 225
    b8b2:	7f 4f       	sbci	r23, 0xFF	; 255
    b8b4:	81 2f       	mov	r24, r17
    b8b6:	0e 94 54 5b 	call	0xb6a8	; 0xb6a8 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    strcat(default_text, name);
    b8ba:	be 01       	movw	r22, r28
    b8bc:	61 5e       	subi	r22, 0xE1	; 225
    b8be:	7f 4f       	sbci	r23, 0xFF	; 255
    b8c0:	ce 01       	movw	r24, r28
    b8c2:	01 96       	adiw	r24, 0x01	; 1
    b8c4:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    b8c8:	ee 24       	eor	r14, r14
    b8ca:	ea 94       	dec	r14
    b8cc:	fe 2c       	mov	r15, r14
    b8ce:	10 e0       	ldi	r17, 0x00	; 0
    b8d0:	00 e0       	ldi	r16, 0x00	; 0
    b8d2:	22 e0       	ldi	r18, 0x02	; 2
    b8d4:	a5 01       	movw	r20, r10
    b8d6:	b6 01       	movw	r22, r12
    b8d8:	ce 01       	movw	r24, r28
    b8da:	01 96       	adiw	r24, 0x01	; 1
    b8dc:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4913
}
    b8e0:	a8 96       	adiw	r28, 0x28	; 40
    b8e2:	0f b6       	in	r0, 0x3f	; 63
    b8e4:	f8 94       	cli
    b8e6:	de bf       	out	0x3e, r29	; 62
    b8e8:	0f be       	out	0x3f, r0	; 63
    b8ea:	cd bf       	out	0x3d, r28	; 61
    b8ec:	df 91       	pop	r29
    b8ee:	cf 91       	pop	r28
    b8f0:	1f 91       	pop	r17
    b8f2:	0f 91       	pop	r16
    b8f4:	ff 90       	pop	r15
    b8f6:	ef 90       	pop	r14
    b8f8:	df 90       	pop	r13
    b8fa:	cf 90       	pop	r12
    b8fc:	bf 90       	pop	r11
    b8fe:	af 90       	pop	r10
    b900:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4909
    thermostat_ring_get_name(default_ring, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    b902:	6d e8       	ldi	r22, 0x8D	; 141
    b904:	7d e3       	ldi	r23, 0x3D	; 61
    b906:	ce 01       	movw	r24, r28
    b908:	4f 96       	adiw	r24, 0x1f	; 31
    b90a:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
    b90e:	d5 cf       	rjmp	.-86     	; 0xb8ba <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4e>

0000b910 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5994
   args1 ... paramentr z definice prvku
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/
uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b910:	0f 93       	push	r16
    b912:	1f 93       	push	r17
    b914:	cf 93       	push	r28
    b916:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5997
  uint8_t ret = 0;
  uint8_t b;
  if (thermostat_ring_get_active(default_ring) != 255)
    b918:	c0 91 69 0a 	lds	r28, 0x0A69	; 0x800a69 <default_ring>
    b91c:	8c 2f       	mov	r24, r28
    b91e:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
    b922:	8f 3f       	cpi	r24, 0xFF	; 255
    b924:	71 f0       	breq	.+28     	; 0xb942 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_status_bites():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    b926:	21 e2       	ldi	r18, 0x21	; 33
    b928:	c2 9f       	mul	r28, r18
    b92a:	c0 01       	movw	r24, r0
    b92c:	11 24       	eor	r1, r1
    b92e:	88 5a       	subi	r24, 0xA8	; 168
    b930:	9e 4f       	sbci	r25, 0xFE	; 254
    b932:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6000
  {
    b = thermostat_ring_get_status_bites(default_ring, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    b936:	80 fd       	sbrc	r24, 0
    b938:	06 c0       	rjmp	.+12     	; 0xb946 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
    b93a:	81 e0       	ldi	r24, 0x01	; 1
    b93c:	03 30       	cpi	r16, 0x03	; 3
    b93e:	11 05       	cpc	r17, r1
    b940:	31 f0       	breq	.+12     	; 0xb94e <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6002
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    b942:	80 e0       	ldi	r24, 0x00	; 0
    b944:	04 c0       	rjmp	.+8      	; 0xb94e <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    b946:	81 e0       	ldi	r24, 0x01	; 1
    b948:	05 30       	cpi	r16, 0x05	; 5
    b94a:	11 05       	cpc	r17, r1
    b94c:	d1 f7       	brne	.-12     	; 0xb942 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6006
      ret = 1;
  }
  return ret;
}
    b94e:	cf 91       	pop	r28
    b950:	1f 91       	pop	r17
    b952:	0f 91       	pop	r16
    b954:	08 95       	ret

0000b956 <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>:
_Z41button_get_show_default_ring_input_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5670
/*
   funkce pro zobrazeni prizareneho vstupniho cidla k ringu
   args3 ... id polozky menu
*/
uint8_t button_get_show_default_ring_input_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
    b956:	cf 93       	push	r28
    b958:	c4 2f       	mov	r28, r20
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    b95a:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
    b95e:	21 e2       	ldi	r18, 0x21	; 33
    b960:	82 9f       	mul	r24, r18
    b962:	c0 01       	movw	r24, r0
    b964:	11 24       	eor	r1, r1
    b966:	84 5a       	subi	r24, 0xA4	; 164
    b968:	9e 4f       	sbci	r25, 0xFE	; 254
    b96a:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z41button_get_show_default_ring_input_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5672
  uint8_t ret = 0;
  if (thermostat_ring_get_asociate_tds(default_ring) == args3)
    b96e:	91 e0       	ldi	r25, 0x01	; 1
    b970:	c8 13       	cpse	r28, r24
    b972:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5676
    ret = 1;

  return ret;
}
    b974:	89 2f       	mov	r24, r25
    b976:	cf 91       	pop	r28
    b978:	08 95       	ret

0000b97a <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    b97a:	af 92       	push	r10
    b97c:	bf 92       	push	r11
    b97e:	cf 92       	push	r12
    b980:	df 92       	push	r13
    b982:	ef 92       	push	r14
    b984:	ff 92       	push	r15
    b986:	0f 93       	push	r16
    b988:	1f 93       	push	r17
    b98a:	cf 93       	push	r28
    b98c:	df 93       	push	r29
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    b98e:	86 30       	cpi	r24, 0x06	; 6
    b990:	08 f0       	brcs	.+2      	; 0xb994 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    b992:	56 c0       	rjmp	.+172    	; 0xba40 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    b994:	8b 01       	movw	r16, r22
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    b996:	96 e1       	ldi	r25, 0x16	; 22
    b998:	89 9f       	mul	r24, r25
    b99a:	e0 01       	movw	r28, r0
    b99c:	11 24       	eor	r1, r1
    b99e:	ce 01       	movw	r24, r28
    b9a0:	88 53       	subi	r24, 0x38	; 56
    b9a2:	9f 4f       	sbci	r25, 0xFF	; 255
    b9a4:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b9a8:	f8 01       	movw	r30, r16
    b9aa:	81 93       	st	Z+, r24
    b9ac:	6f 01       	movw	r12, r30
    b9ae:	7e 01       	movw	r14, r28
    b9b0:	f9 ec       	ldi	r31, 0xC9	; 201
    b9b2:	ef 0e       	add	r14, r31
    b9b4:	f1 1c       	adc	r15, r1
    b9b6:	5e 01       	movw	r10, r28
    b9b8:	81 ed       	ldi	r24, 0xD1	; 209
    b9ba:	a8 0e       	add	r10, r24
    b9bc:	b1 1c       	adc	r11, r1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    b9be:	c7 01       	movw	r24, r14
    b9c0:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b9c4:	f6 01       	movw	r30, r12
    b9c6:	81 93       	st	Z+, r24
    b9c8:	6f 01       	movw	r12, r30
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    b9ca:	c7 01       	movw	r24, r14
    b9cc:	0b 96       	adiw	r24, 0x0b	; 11
    b9ce:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b9d2:	f6 01       	movw	r30, r12
    b9d4:	82 87       	std	Z+10, r24	; 0x0a
    b9d6:	ff ef       	ldi	r31, 0xFF	; 255
    b9d8:	ef 1a       	sub	r14, r31
    b9da:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    b9dc:	ea 14       	cp	r14, r10
    b9de:	fb 04       	cpc	r15, r11
    b9e0:	71 f7       	brne	.-36     	; 0xb9be <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    b9e2:	f8 01       	movw	r30, r16
    b9e4:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    b9e6:	c7 01       	movw	r24, r14
    b9e8:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b9ec:	f8 01       	movw	r30, r16
    b9ee:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    b9f0:	ce 01       	movw	r24, r28
    b9f2:	8e 52       	subi	r24, 0x2E	; 46
    b9f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b9f6:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b9fa:	f8 2e       	mov	r15, r24
    b9fc:	ce 01       	movw	r24, r28
    b9fe:	8d 52       	subi	r24, 0x2D	; 45
    ba00:	9f 4f       	sbci	r25, 0xFF	; 255
    ba02:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ba06:	2f 2d       	mov	r18, r15
    ba08:	30 e0       	ldi	r19, 0x00	; 0
    ba0a:	32 2f       	mov	r19, r18
    ba0c:	22 27       	eor	r18, r18
    ba0e:	82 0f       	add	r24, r18
    ba10:	93 2f       	mov	r25, r19
    ba12:	91 1d       	adc	r25, r1
    ba14:	f8 01       	movw	r30, r16
    ba16:	93 87       	std	Z+11, r25	; 0x0b
    ba18:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    ba1a:	ce 01       	movw	r24, r28
    ba1c:	84 52       	subi	r24, 0x24	; 36
    ba1e:	9f 4f       	sbci	r25, 0xFF	; 255
    ba20:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ba24:	f8 01       	movw	r30, r16
    ba26:	84 8b       	std	Z+20, r24	; 0x14
    ba28:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    ba2a:	df 91       	pop	r29
    ba2c:	cf 91       	pop	r28
    ba2e:	1f 91       	pop	r17
    ba30:	0f 91       	pop	r16
    ba32:	ff 90       	pop	r15
    ba34:	ef 90       	pop	r14
    ba36:	df 90       	pop	r13
    ba38:	cf 90       	pop	r12
    ba3a:	bf 90       	pop	r11
    ba3c:	af 90       	pop	r10
    ba3e:	08 95       	ret
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    ba40:	80 e0       	ldi	r24, 0x00	; 0
    ba42:	f3 cf       	rjmp	.-26     	; 0xba2a <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000ba44 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    ba44:	ef 92       	push	r14
    ba46:	ff 92       	push	r15
    ba48:	0f 93       	push	r16
    ba4a:	1f 93       	push	r17
    ba4c:	cf 93       	push	r28
    ba4e:	df 93       	push	r29
    ba50:	cd b7       	in	r28, 0x3d	; 61
    ba52:	de b7       	in	r29, 0x3e	; 62
    ba54:	6e 97       	sbiw	r28, 0x1e	; 30
    ba56:	0f b6       	in	r0, 0x3f	; 63
    ba58:	f8 94       	cli
    ba5a:	de bf       	out	0x3e, r29	; 62
    ba5c:	0f be       	out	0x3f, r0	; 63
    ba5e:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    ba60:	1f 8a       	std	Y+23, r1	; 0x17
    ba62:	18 8e       	std	Y+24, r1	; 0x18
    ba64:	19 8e       	std	Y+25, r1	; 0x19
    ba66:	1a 8e       	std	Y+26, r1	; 0x1a
    ba68:	1b 8e       	std	Y+27, r1	; 0x1b
    ba6a:	1c 8e       	std	Y+28, r1	; 0x1c
    ba6c:	1d 8e       	std	Y+29, r1	; 0x1d
    ba6e:	1e 8e       	std	Y+30, r1	; 0x1e
    ba70:	0a e1       	ldi	r16, 0x1A	; 26
    ba72:	1a e0       	ldi	r17, 0x0A	; 10
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    ba74:	ee 24       	eor	r14, r14
    ba76:	ea 94       	dec	r14
    ba78:	f8 01       	movw	r30, r16
    ba7a:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    ba7c:	b8 01       	movw	r22, r16
    ba7e:	ce 01       	movw	r24, r28
    ba80:	47 96       	adiw	r24, 0x17	; 23
    ba82:	0e 94 2e 28 	call	0x505c	; 0x505c <tds_compare_rom(unsigned char*, unsigned char*)>
    ba86:	81 11       	cpse	r24, r1
    ba88:	14 c0       	rjmp	.+40     	; 0xbab2 <tds_update_associate()+0x6e>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    ba8a:	f1 2c       	mov	r15, r1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    ba8c:	be 01       	movw	r22, r28
    ba8e:	6f 5f       	subi	r22, 0xFF	; 255
    ba90:	7f 4f       	sbci	r23, 0xFF	; 255
    ba92:	8f 2d       	mov	r24, r15
    ba94:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    ba98:	b8 01       	movw	r22, r16
    ba9a:	ce 01       	movw	r24, r28
    ba9c:	02 96       	adiw	r24, 0x02	; 2
    ba9e:	0e 94 2e 28 	call	0x505c	; 0x505c <tds_compare_rom(unsigned char*, unsigned char*)>
    baa2:	88 23       	and	r24, r24
    baa4:	11 f0       	breq	.+4      	; 0xbaaa <tds_update_associate()+0x66>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    baa6:	f8 01       	movw	r30, r16
    baa8:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    baaa:	f3 94       	inc	r15
    baac:	f6 e0       	ldi	r31, 0x06	; 6
    baae:	ff 12       	cpse	r15, r31
    bab0:	ed cf       	rjmp	.-38     	; 0xba8c <tds_update_associate()+0x48>
    bab2:	05 5f       	subi	r16, 0xF5	; 245
    bab4:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    bab6:	8a e0       	ldi	r24, 0x0A	; 10
    bab8:	0c 35       	cpi	r16, 0x5C	; 92
    baba:	18 07       	cpc	r17, r24
    babc:	e9 f6       	brne	.-70     	; 0xba78 <tds_update_associate()+0x34>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    babe:	6e 96       	adiw	r28, 0x1e	; 30
    bac0:	0f b6       	in	r0, 0x3f	; 63
    bac2:	f8 94       	cli
    bac4:	de bf       	out	0x3e, r29	; 62
    bac6:	0f be       	out	0x3f, r0	; 63
    bac8:	cd bf       	out	0x3d, r28	; 61
    baca:	df 91       	pop	r29
    bacc:	cf 91       	pop	r28
    bace:	1f 91       	pop	r17
    bad0:	0f 91       	pop	r16
    bad2:	ff 90       	pop	r15
    bad4:	ef 90       	pop	r14
    bad6:	08 95       	ret

0000bad8 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    bad8:	af 92       	push	r10
    bada:	bf 92       	push	r11
    badc:	cf 92       	push	r12
    bade:	df 92       	push	r13
    bae0:	ef 92       	push	r14
    bae2:	ff 92       	push	r15
    bae4:	1f 93       	push	r17
    bae6:	cf 93       	push	r28
    bae8:	df 93       	push	r29
    baea:	cd b7       	in	r28, 0x3d	; 61
    baec:	de b7       	in	r29, 0x3e	; 62
    baee:	66 97       	sbiw	r28, 0x16	; 22
    baf0:	0f b6       	in	r0, 0x3f	; 63
    baf2:	f8 94       	cli
    baf4:	de bf       	out	0x3e, r29	; 62
    baf6:	0f be       	out	0x3f, r0	; 63
    baf8:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    bafa:	90 91 5c 0a 	lds	r25, 0x0A5C	; 0x800a5c <Global_HWwirenum>
    bafe:	89 17       	cp	r24, r25
    bb00:	a0 f0       	brcs	.+40     	; 0xbb2a <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    bb02:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    bb04:	0e 94 22 5d 	call	0xba44	; 0xba44 <tds_update_associate()>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:226
  return ret;
}
    bb08:	81 2f       	mov	r24, r17
    bb0a:	66 96       	adiw	r28, 0x16	; 22
    bb0c:	0f b6       	in	r0, 0x3f	; 63
    bb0e:	f8 94       	cli
    bb10:	de bf       	out	0x3e, r29	; 62
    bb12:	0f be       	out	0x3f, r0	; 63
    bb14:	cd bf       	out	0x3d, r28	; 61
    bb16:	df 91       	pop	r29
    bb18:	cf 91       	pop	r28
    bb1a:	1f 91       	pop	r17
    bb1c:	ff 90       	pop	r15
    bb1e:	ef 90       	pop	r14
    bb20:	df 90       	pop	r13
    bb22:	cf 90       	pop	r12
    bb24:	bf 90       	pop	r11
    bb26:	af 90       	pop	r10
    bb28:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    bb2a:	a8 2e       	mov	r10, r24
    bb2c:	b1 2c       	mov	r11, r1
    bb2e:	2b e0       	ldi	r18, 0x0B	; 11
    bb30:	82 9f       	mul	r24, r18
    bb32:	c0 01       	movw	r24, r0
    bb34:	11 24       	eor	r1, r1
    bb36:	fc 01       	movw	r30, r24
    bb38:	e6 5e       	subi	r30, 0xE6	; 230
    bb3a:	f5 4f       	sbci	r31, 0xF5	; 245
    bb3c:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    bb3e:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    bb40:	be 01       	movw	r22, r28
    bb42:	6f 5f       	subi	r22, 0xFF	; 255
    bb44:	7f 4f       	sbci	r23, 0xFF	; 255
    bb46:	81 2f       	mov	r24, r17
    bb48:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    bb4c:	b7 01       	movw	r22, r14
    bb4e:	ce 01       	movw	r24, r28
    bb50:	02 96       	adiw	r24, 0x02	; 2
    bb52:	0e 94 2e 28 	call	0x505c	; 0x505c <tds_compare_rom(unsigned char*, unsigned char*)>
    bb56:	81 11       	cpse	r24, r1
    bb58:	d4 cf       	rjmp	.-88     	; 0xbb02 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    bb5a:	1f 5f       	subi	r17, 0xFF	; 255
    bb5c:	16 30       	cpi	r17, 0x06	; 6
    bb5e:	81 f7       	brne	.-32     	; 0xbb40 <tds_associate(unsigned char)+0x68>
    bb60:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    bb62:	2b e0       	ldi	r18, 0x0B	; 11
    bb64:	2a 9d       	mul	r18, r10
    bb66:	c0 01       	movw	r24, r0
    bb68:	2b 9d       	mul	r18, r11
    bb6a:	90 0d       	add	r25, r0
    bb6c:	11 24       	eor	r1, r1
    bb6e:	fc 01       	movw	r30, r24
    bb70:	ed 5d       	subi	r30, 0xDD	; 221
    bb72:	f5 4f       	sbci	r31, 0xF5	; 245
    bb74:	6f 01       	movw	r12, r30
    bb76:	03 c0       	rjmp	.+6      	; 0xbb7e <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    bb78:	1f 5f       	subi	r17, 0xFF	; 255
    bb7a:	16 30       	cpi	r17, 0x06	; 6
    bb7c:	11 f2       	breq	.-124    	; 0xbb02 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    bb7e:	be 01       	movw	r22, r28
    bb80:	6f 5f       	subi	r22, 0xFF	; 255
    bb82:	7f 4f       	sbci	r23, 0xFF	; 255
    bb84:	81 2f       	mov	r24, r17
    bb86:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    bb8a:	89 81       	ldd	r24, Y+1	; 0x01
    bb8c:	81 11       	cpse	r24, r1
    bb8e:	f4 cf       	rjmp	.-24     	; 0xbb78 <tds_associate(unsigned char)+0xa0>
    bb90:	f6 01       	movw	r30, r12
    bb92:	80 81       	ld	r24, Z
    bb94:	81 30       	cpi	r24, 0x01	; 1
    bb96:	81 f7       	brne	.-32     	; 0xbb78 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    bb98:	89 83       	std	Y+1, r24	; 0x01
    bb9a:	fe 01       	movw	r30, r28
    bb9c:	32 96       	adiw	r30, 0x02	; 2
    bb9e:	90 e0       	ldi	r25, 0x00	; 0
    bba0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    bba2:	d7 01       	movw	r26, r14
    bba4:	a8 0f       	add	r26, r24
    bba6:	b9 1f       	adc	r27, r25
    bba8:	2c 91       	ld	r18, X
    bbaa:	21 93       	st	Z+, r18
    bbac:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    bbae:	88 30       	cpi	r24, 0x08	; 8
    bbb0:	91 05       	cpc	r25, r1
    bbb2:	b9 f7       	brne	.-18     	; 0xbba2 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    bbb4:	2b e0       	ldi	r18, 0x0B	; 11
    bbb6:	12 9f       	mul	r17, r18
    bbb8:	f0 01       	movw	r30, r0
    bbba:	11 24       	eor	r1, r1
    bbbc:	e6 5e       	subi	r30, 0xE6	; 230
    bbbe:	f5 4f       	sbci	r31, 0xF5	; 245
    bbc0:	e0 85       	ldd	r30, Z+8	; 0x08
    bbc2:	f0 e0       	ldi	r31, 0x00	; 0
    bbc4:	ee 0f       	add	r30, r30
    bbc6:	ff 1f       	adc	r31, r31
    bbc8:	e0 53       	subi	r30, 0x30	; 48
    bbca:	f6 4f       	sbci	r31, 0xF6	; 246
    bbcc:	80 81       	ld	r24, Z
    bbce:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    bbd0:	be 01       	movw	r22, r28
    bbd2:	6f 5f       	subi	r22, 0xFF	; 255
    bbd4:	7f 4f       	sbci	r23, 0xFF	; 255
    bbd6:	81 2f       	mov	r24, r17
    bbd8:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    bbdc:	3e e1       	ldi	r19, 0x1E	; 30
    bbde:	13 9f       	mul	r17, r19
    bbe0:	a0 01       	movw	r20, r0
    bbe2:	11 24       	eor	r1, r1
    bbe4:	90 e0       	ldi	r25, 0x00	; 0
    bbe6:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    bbe8:	20 e2       	ldi	r18, 0x20	; 32
    bbea:	3e e4       	ldi	r19, 0x4E	; 78
    bbec:	fc 01       	movw	r30, r24
    bbee:	ee 0f       	add	r30, r30
    bbf0:	ff 1f       	adc	r31, r31
    bbf2:	e4 0f       	add	r30, r20
    bbf4:	f5 1f       	adc	r31, r21
    bbf6:	ec 58       	subi	r30, 0x8C	; 140
    bbf8:	f5 4f       	sbci	r31, 0xF5	; 245
    bbfa:	30 87       	std	Z+8, r19	; 0x08
    bbfc:	27 83       	std	Z+7, r18	; 0x07
    bbfe:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    bc00:	8a 30       	cpi	r24, 0x0A	; 10
    bc02:	91 05       	cpc	r25, r1
    bc04:	99 f7       	brne	.-26     	; 0xbbec <tds_associate(unsigned char)+0x114>
    bc06:	7e cf       	rjmp	.-260    	; 0xbb04 <tds_associate(unsigned char)+0x2c>

0000bc08 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    bc08:	1f 93       	push	r17
    bc0a:	cf 93       	push	r28
    bc0c:	df 93       	push	r29
    bc0e:	cd b7       	in	r28, 0x3d	; 61
    bc10:	de b7       	in	r29, 0x3e	; 62
    bc12:	66 97       	sbiw	r28, 0x16	; 22
    bc14:	0f b6       	in	r0, 0x3f	; 63
    bc16:	f8 94       	cli
    bc18:	de bf       	out	0x3e, r29	; 62
    bc1a:	0f be       	out	0x3f, r0	; 63
    bc1c:	cd bf       	out	0x3d, r28	; 61
    bc1e:	18 2f       	mov	r17, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    bc20:	be 01       	movw	r22, r28
    bc22:	6f 5f       	subi	r22, 0xFF	; 255
    bc24:	7f 4f       	sbci	r23, 0xFF	; 255
    bc26:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    bc2a:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    bc2c:	63 e6       	ldi	r22, 0x63	; 99
    bc2e:	73 e0       	ldi	r23, 0x03	; 3
    bc30:	ce 01       	movw	r24, r28
    bc32:	0d 96       	adiw	r24, 0x0d	; 13
    bc34:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    bc38:	1c 86       	std	Y+12, r1	; 0x0c
    bc3a:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    bc3c:	8a e0       	ldi	r24, 0x0A	; 10
    bc3e:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    bc40:	1a 82       	std	Y+2, r1	; 0x02
    bc42:	1b 82       	std	Y+3, r1	; 0x03
    bc44:	1c 82       	std	Y+4, r1	; 0x04
    bc46:	1d 82       	std	Y+5, r1	; 0x05
    bc48:	1e 82       	std	Y+6, r1	; 0x06
    bc4a:	1f 82       	std	Y+7, r1	; 0x07
    bc4c:	18 86       	std	Y+8, r1	; 0x08
    bc4e:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    bc50:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    bc52:	be 01       	movw	r22, r28
    bc54:	6f 5f       	subi	r22, 0xFF	; 255
    bc56:	7f 4f       	sbci	r23, 0xFF	; 255
    bc58:	81 2f       	mov	r24, r17
    bc5a:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    bc5e:	0e 94 22 5d 	call	0xba44	; 0xba44 <tds_update_associate()>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:132
}
    bc62:	66 96       	adiw	r28, 0x16	; 22
    bc64:	0f b6       	in	r0, 0x3f	; 63
    bc66:	f8 94       	cli
    bc68:	de bf       	out	0x3e, r29	; 62
    bc6a:	0f be       	out	0x3f, r0	; 63
    bc6c:	cd bf       	out	0x3d, r28	; 61
    bc6e:	df 91       	pop	r29
    bc70:	cf 91       	pop	r28
    bc72:	1f 91       	pop	r17
    bc74:	08 95       	ret

0000bc76 <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    bc76:	8b e0       	ldi	r24, 0x0B	; 11
    bc78:	68 9f       	mul	r22, r24
    bc7a:	f0 01       	movw	r30, r0
    bc7c:	11 24       	eor	r1, r1
    bc7e:	e6 5e       	subi	r30, 0xE6	; 230
    bc80:	f5 4f       	sbci	r31, 0xF5	; 245
    bc82:	82 85       	ldd	r24, Z+10	; 0x0a
    bc84:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5443
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    bc88:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <MenuHistoryPrevMenu()>

0000bc8c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5393
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
    bc8c:	7f 92       	push	r7
    bc8e:	8f 92       	push	r8
    bc90:	9f 92       	push	r9
    bc92:	af 92       	push	r10
    bc94:	bf 92       	push	r11
    bc96:	cf 92       	push	r12
    bc98:	df 92       	push	r13
    bc9a:	ef 92       	push	r14
    bc9c:	ff 92       	push	r15
    bc9e:	0f 93       	push	r16
    bca0:	1f 93       	push	r17
    bca2:	cf 93       	push	r28
    bca4:	df 93       	push	r29
    bca6:	cd b7       	in	r28, 0x3d	; 61
    bca8:	de b7       	in	r29, 0x3e	; 62
    bcaa:	e0 97       	sbiw	r28, 0x30	; 48
    bcac:	0f b6       	in	r0, 0x3f	; 63
    bcae:	f8 94       	cli
    bcb0:	de bf       	out	0x3e, r29	; 62
    bcb2:	0f be       	out	0x3f, r0	; 63
    bcb4:	cd bf       	out	0x3d, r28	; 61
    bcb6:	98 2e       	mov	r9, r24
    bcb8:	82 2e       	mov	r8, r18
    bcba:	73 2e       	mov	r7, r19
    bcbc:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5395
  char str2[26];
  strcpy_P(line1, text_not_used);
    bcbe:	63 e3       	ldi	r22, 0x33	; 51
    bcc0:	7d e3       	ldi	r23, 0x3D	; 61
    bcc2:	82 2f       	mov	r24, r18
    bcc4:	93 2f       	mov	r25, r19
    bcc6:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5396
  strcpy(line2, "-");
    bcca:	60 e5       	ldi	r22, 0x50	; 80
    bccc:	73 e0       	ldi	r23, 0x03	; 3
    bcce:	c8 01       	movw	r24, r16
    bcd0:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5397
  if (w_rom[args1].used == 1)
    bcd4:	4b e0       	ldi	r20, 0x0B	; 11
    bcd6:	49 9d       	mul	r20, r9
    bcd8:	c0 01       	movw	r24, r0
    bcda:	11 24       	eor	r1, r1
    bcdc:	9c 01       	movw	r18, r24
    bcde:	26 5e       	subi	r18, 0xE6	; 230
    bce0:	35 4f       	sbci	r19, 0xF5	; 245
    bce2:	69 01       	movw	r12, r18
    bce4:	f9 01       	movw	r30, r18
    bce6:	81 85       	ldd	r24, Z+9	; 0x09
    bce8:	81 30       	cpi	r24, 0x01	; 1
    bcea:	c9 f5       	brne	.+114    	; 0xbd5e <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5399
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    bcec:	a9 01       	movw	r20, r18
    bcee:	00 e1       	ldi	r16, 0x10	; 16
    bcf0:	28 e0       	ldi	r18, 0x08	; 8
    bcf2:	6a e3       	ldi	r22, 0x3A	; 58
    bcf4:	ce 01       	movw	r24, r28
    bcf6:	01 96       	adiw	r24, 0x01	; 1
    bcf8:	5c 01       	movw	r10, r24
    bcfa:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5400
    sprintf(line1, "%d: %s", args1, str2);
    bcfe:	bf 92       	push	r11
    bd00:	af 92       	push	r10
    bd02:	1f 92       	push	r1
    bd04:	9f 92       	push	r9
    bd06:	85 e8       	ldi	r24, 0x85	; 133
    bd08:	93 e0       	ldi	r25, 0x03	; 3
    bd0a:	9f 93       	push	r25
    bd0c:	8f 93       	push	r24
    bd0e:	7f 92       	push	r7
    bd10:	8f 92       	push	r8
    bd12:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5402

    if (w_rom[args1].tds_idx != 255)
    bd16:	0f b6       	in	r0, 0x3f	; 63
    bd18:	f8 94       	cli
    bd1a:	de bf       	out	0x3e, r29	; 62
    bd1c:	0f be       	out	0x3f, r0	; 63
    bd1e:	cd bf       	out	0x3d, r28	; 61
    bd20:	f6 01       	movw	r30, r12
    bd22:	82 85       	ldd	r24, Z+10	; 0x0a
    bd24:	8f 3f       	cpi	r24, 0xFF	; 255
    bd26:	79 f1       	breq	.+94     	; 0xbd86 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5404
    {
      strcpy_P(line2, text_nastavit_tds);
    bd28:	60 e2       	ldi	r22, 0x20	; 32
    bd2a:	7d e3       	ldi	r23, 0x3D	; 61
    bd2c:	c7 01       	movw	r24, r14
    bd2e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
tds_get_name():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    bd32:	be 01       	movw	r22, r28
    bd34:	65 5e       	subi	r22, 0xE5	; 229
    bd36:	7f 4f       	sbci	r23, 0xFF	; 255
    bd38:	f6 01       	movw	r30, r12
    bd3a:	82 85       	ldd	r24, Z+10	; 0x0a
    bd3c:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    bd40:	be 01       	movw	r22, r28
    bd42:	69 5d       	subi	r22, 0xD9	; 217
    bd44:	7f 4f       	sbci	r23, 0xFF	; 255
    bd46:	c5 01       	movw	r24, r10
    bd48:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5406
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    bd4c:	63 e2       	ldi	r22, 0x23	; 35
    bd4e:	76 e0       	ldi	r23, 0x06	; 6
    bd50:	c7 01       	movw	r24, r14
    bd52:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
      strcat(line2, str2);
    bd56:	b5 01       	movw	r22, r10
    bd58:	c7 01       	movw	r24, r14
    bd5a:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5412
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    bd5e:	e0 96       	adiw	r28, 0x30	; 48
    bd60:	0f b6       	in	r0, 0x3f	; 63
    bd62:	f8 94       	cli
    bd64:	de bf       	out	0x3e, r29	; 62
    bd66:	0f be       	out	0x3f, r0	; 63
    bd68:	cd bf       	out	0x3d, r28	; 61
    bd6a:	df 91       	pop	r29
    bd6c:	cf 91       	pop	r28
    bd6e:	1f 91       	pop	r17
    bd70:	0f 91       	pop	r16
    bd72:	ff 90       	pop	r15
    bd74:	ef 90       	pop	r14
    bd76:	df 90       	pop	r13
    bd78:	cf 90       	pop	r12
    bd7a:	bf 90       	pop	r11
    bd7c:	af 90       	pop	r10
    bd7e:	9f 90       	pop	r9
    bd80:	8f 90       	pop	r8
    bd82:	7f 90       	pop	r7
    bd84:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5410
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    bd86:	60 e4       	ldi	r22, 0x40	; 64
    bd88:	7d e3       	ldi	r23, 0x3D	; 61
    bd8a:	c7 01       	movw	r24, r14
    bd8c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
    bd90:	e6 cf       	rjmp	.-52     	; 0xbd5e <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>

0000bd92 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5011
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    bd92:	3f 92       	push	r3
    bd94:	4f 92       	push	r4
    bd96:	5f 92       	push	r5
    bd98:	6f 92       	push	r6
    bd9a:	7f 92       	push	r7
    bd9c:	8f 92       	push	r8
    bd9e:	9f 92       	push	r9
    bda0:	af 92       	push	r10
    bda2:	bf 92       	push	r11
    bda4:	cf 92       	push	r12
    bda6:	df 92       	push	r13
    bda8:	ef 92       	push	r14
    bdaa:	ff 92       	push	r15
    bdac:	0f 93       	push	r16
    bdae:	1f 93       	push	r17
    bdb0:	cf 93       	push	r28
    bdb2:	df 93       	push	r29
    bdb4:	cd b7       	in	r28, 0x3d	; 61
    bdb6:	de b7       	in	r29, 0x3e	; 62
    bdb8:	ca 54       	subi	r28, 0x4A	; 74
    bdba:	d1 09       	sbc	r29, r1
    bdbc:	0f b6       	in	r0, 0x3f	; 63
    bdbe:	f8 94       	cli
    bdc0:	de bf       	out	0x3e, r29	; 62
    bdc2:	0f be       	out	0x3f, r0	; 63
    bdc4:	cd bf       	out	0x3d, r28	; 61
    bdc6:	4c 01       	movw	r8, r24
    bdc8:	3b 01       	movw	r6, r22
    bdca:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bdcc:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    bdd0:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5017
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    bdd4:	26 0f       	add	r18, r22
    bdd6:	37 1f       	adc	r19, r23
    bdd8:	48 0f       	add	r20, r24
    bdda:	59 1f       	adc	r21, r25
    bddc:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5018
  if (get_tds18s20(args2, &tds) == 1)
    bde0:	be 01       	movw	r22, r28
    bde2:	6b 5c       	subi	r22, 0xCB	; 203
    bde4:	7f 4f       	sbci	r23, 0xFF	; 255
    bde6:	8e 2d       	mov	r24, r14
    bde8:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    bdec:	23 01       	movw	r4, r6
    bdee:	28 e2       	ldi	r18, 0x28	; 40
    bdf0:	42 0e       	add	r4, r18
    bdf2:	51 1c       	adc	r5, r1
    bdf4:	9e 01       	movw	r18, r28
    bdf6:	2f 5f       	subi	r18, 0xFF	; 255
    bdf8:	3f 4f       	sbci	r19, 0xFF	; 255
    bdfa:	59 01       	movw	r10, r18
    bdfc:	81 30       	cpi	r24, 0x01	; 1
    bdfe:	09 f0       	breq	.+2      	; 0xbe02 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    be00:	ca c0       	rjmp	.+404    	; 0xbf96 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5020
  {
    createString(str2, ':', tds.rom, 8, 16);
    be02:	6e 01       	movw	r12, r28
    be04:	3b e1       	ldi	r19, 0x1B	; 27
    be06:	c3 0e       	add	r12, r19
    be08:	d1 1c       	adc	r13, r1
    be0a:	00 e1       	ldi	r16, 0x10	; 16
    be0c:	28 e0       	ldi	r18, 0x08	; 8
    be0e:	ae 01       	movw	r20, r28
    be10:	4a 5c       	subi	r20, 0xCA	; 202
    be12:	5f 4f       	sbci	r21, 0xFF	; 255
    be14:	6a e3       	ldi	r22, 0x3A	; 58
    be16:	c6 01       	movw	r24, r12
    be18:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5021
    sprintf(str1, "rom: %s", str2);
    be1c:	df 92       	push	r13
    be1e:	cf 92       	push	r12
    be20:	8c e8       	ldi	r24, 0x8C	; 140
    be22:	93 e0       	ldi	r25, 0x03	; 3
    be24:	9f 93       	push	r25
    be26:	8f 93       	push	r24
    be28:	bf 92       	push	r11
    be2a:	af 92       	push	r10
    be2c:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    be30:	8a e0       	ldi	r24, 0x0A	; 10
    be32:	88 0e       	add	r8, r24
    be34:	91 1c       	adc	r9, r1
    be36:	a3 01       	movw	r20, r6
    be38:	4b 5a       	subi	r20, 0xAB	; 171
    be3a:	5f 4f       	sbci	r21, 0xFF	; 255
    be3c:	ee 24       	eor	r14, r14
    be3e:	ea 94       	dec	r14
    be40:	fe 2c       	mov	r15, r14
    be42:	10 e0       	ldi	r17, 0x00	; 0
    be44:	00 e0       	ldi	r16, 0x00	; 0
    be46:	21 e0       	ldi	r18, 0x01	; 1
    be48:	b4 01       	movw	r22, r8
    be4a:	c5 01       	movw	r24, r10
    be4c:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024
    ///
    strcpy_P(str2, text_nazev);
    be50:	69 e1       	ldi	r22, 0x19	; 25
    be52:	7d e3       	ldi	r23, 0x3D	; 61
    be54:	c6 01       	movw	r24, r12
    be56:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5025
    sprintf(str1, "%s: %s", str2, tds.name);
    be5a:	85 e3       	ldi	r24, 0x35	; 53
    be5c:	90 e0       	ldi	r25, 0x00	; 0
    be5e:	8c 0f       	add	r24, r28
    be60:	9d 1f       	adc	r25, r29
    be62:	0c 96       	adiw	r24, 0x0c	; 12
    be64:	9f 93       	push	r25
    be66:	8f 93       	push	r24
    be68:	df 92       	push	r13
    be6a:	cf 92       	push	r12
    be6c:	84 e9       	ldi	r24, 0x94	; 148
    be6e:	93 e0       	ldi	r25, 0x03	; 3
    be70:	9f 93       	push	r25
    be72:	8f 93       	push	r24
    be74:	bf 92       	push	r11
    be76:	af 92       	push	r10
    be78:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5026
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    be7c:	22 e0       	ldi	r18, 0x02	; 2
    be7e:	a2 01       	movw	r20, r4
    be80:	b4 01       	movw	r22, r8
    be82:	c5 01       	movw	r24, r10
    be84:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5028
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    be88:	21 96       	adiw	r28, 0x01	; 1
    be8a:	6e ad       	ldd	r22, Y+62	; 0x3e
    be8c:	7f ad       	ldd	r23, Y+63	; 0x3f
    be8e:	21 97       	sbiw	r28, 0x01	; 1
    be90:	07 2e       	mov	r0, r23
    be92:	00 0c       	add	r0, r0
    be94:	88 0b       	sbc	r24, r24
    be96:	99 0b       	sbc	r25, r25
    be98:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    be9c:	20 e0       	ldi	r18, 0x00	; 0
    be9e:	30 e0       	ldi	r19, 0x00	; 0
    bea0:	4a e7       	ldi	r20, 0x7A	; 122
    bea2:	54 e4       	ldi	r21, 0x44	; 68
    bea4:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5029
    dtostrf(te, 4, 2, str1);
    bea8:	85 01       	movw	r16, r10
    beaa:	22 e0       	ldi	r18, 0x02	; 2
    beac:	44 e0       	ldi	r20, 0x04	; 4
    beae:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5030
    strcat(str1, "C");
    beb2:	61 ed       	ldi	r22, 0xD1	; 209
    beb4:	76 e0       	ldi	r23, 0x06	; 6
    beb6:	c5 01       	movw	r24, r10
    beb8:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5031
    strcpy_P(str2, temp_offset_short);
    bebc:	6b ee       	ldi	r22, 0xEB	; 235
    bebe:	7c e3       	ldi	r23, 0x3C	; 60
    bec0:	c6 01       	movw	r24, r12
    bec2:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5032
    strcat(str2, str1);
    bec6:	b5 01       	movw	r22, r10
    bec8:	c6 01       	movw	r24, r12
    beca:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5033
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    bece:	a3 01       	movw	r20, r6
    bed0:	44 5c       	subi	r20, 0xC4	; 196
    bed2:	5f 4f       	sbci	r21, 0xFF	; 255
    bed4:	10 e0       	ldi	r17, 0x00	; 0
    bed6:	00 e0       	ldi	r16, 0x00	; 0
    bed8:	22 e0       	ldi	r18, 0x02	; 2
    beda:	b4 01       	movw	r22, r8
    bedc:	c6 01       	movw	r24, r12
    bede:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5035
    ///
    strcpy_P(str2, nastaveni_tds_period);
    bee2:	6c ed       	ldi	r22, 0xDC	; 220
    bee4:	7c e3       	ldi	r23, 0x3C	; 60
    bee6:	c6 01       	movw	r24, r12
    bee8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5036
    sprintf(str1, "%s: %ds", str2, tds.period);
    beec:	2a 96       	adiw	r28, 0x0a	; 10
    beee:	8f ad       	ldd	r24, Y+63	; 0x3f
    bef0:	2a 97       	sbiw	r28, 0x0a	; 10
    bef2:	1f 92       	push	r1
    bef4:	8f 93       	push	r24
    bef6:	df 92       	push	r13
    bef8:	cf 92       	push	r12
    befa:	8b e9       	ldi	r24, 0x9B	; 155
    befc:	93 e0       	ldi	r25, 0x03	; 3
    befe:	9f 93       	push	r25
    bf00:	8f 93       	push	r24
    bf02:	bf 92       	push	r11
    bf04:	af 92       	push	r10
    bf06:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5037
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    bf0a:	a3 01       	movw	r20, r6
    bf0c:	4c 59       	subi	r20, 0x9C	; 156
    bf0e:	5f 4f       	sbci	r21, 0xFF	; 255
    bf10:	22 e0       	ldi	r18, 0x02	; 2
    bf12:	b4 01       	movw	r22, r8
    bf14:	c5 01       	movw	r24, r10
    bf16:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5040

    ///
    strcpy_P(str2, text_online);
    bf1a:	63 ef       	ldi	r22, 0xF3	; 243
    bf1c:	7c e3       	ldi	r23, 0x3C	; 60
    bf1e:	c6 01       	movw	r24, r12
    bf20:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5041
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    bf24:	9e e1       	ldi	r25, 0x1E	; 30
    bf26:	39 9e       	mul	r3, r25
    bf28:	f0 01       	movw	r30, r0
    bf2a:	11 24       	eor	r1, r1
    bf2c:	ec 58       	subi	r30, 0x8C	; 140
    bf2e:	f5 4f       	sbci	r31, 0xF5	; 245
    bf30:	83 8d       	ldd	r24, Z+27	; 0x1b
    bf32:	1f 92       	push	r1
    bf34:	8f 93       	push	r24
    bf36:	df 92       	push	r13
    bf38:	cf 92       	push	r12
    bf3a:	83 ea       	ldi	r24, 0xA3	; 163
    bf3c:	93 e0       	ldi	r25, 0x03	; 3
    bf3e:	9f 93       	push	r25
    bf40:	8f 93       	push	r24
    bf42:	bf 92       	push	r11
    bf44:	af 92       	push	r10
    bf46:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5042
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    bf4a:	a3 01       	movw	r20, r6
    bf4c:	48 58       	subi	r20, 0x88	; 136
    bf4e:	5f 4f       	sbci	r21, 0xFF	; 255
    bf50:	22 e0       	ldi	r18, 0x02	; 2
    bf52:	b4 01       	movw	r22, r8
    bf54:	c5 01       	movw	r24, r10
    bf56:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bf5a:	0f b6       	in	r0, 0x3f	; 63
    bf5c:	f8 94       	cli
    bf5e:	de bf       	out	0x3e, r29	; 62
    bf60:	0f be       	out	0x3f, r0	; 63
    bf62:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5049
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    bf64:	c6 5b       	subi	r28, 0xB6	; 182
    bf66:	df 4f       	sbci	r29, 0xFF	; 255
    bf68:	0f b6       	in	r0, 0x3f	; 63
    bf6a:	f8 94       	cli
    bf6c:	de bf       	out	0x3e, r29	; 62
    bf6e:	0f be       	out	0x3f, r0	; 63
    bf70:	cd bf       	out	0x3d, r28	; 61
    bf72:	df 91       	pop	r29
    bf74:	cf 91       	pop	r28
    bf76:	1f 91       	pop	r17
    bf78:	0f 91       	pop	r16
    bf7a:	ff 90       	pop	r15
    bf7c:	ef 90       	pop	r14
    bf7e:	df 90       	pop	r13
    bf80:	cf 90       	pop	r12
    bf82:	bf 90       	pop	r11
    bf84:	af 90       	pop	r10
    bf86:	9f 90       	pop	r9
    bf88:	8f 90       	pop	r8
    bf8a:	7f 90       	pop	r7
    bf8c:	6f 90       	pop	r6
    bf8e:	5f 90       	pop	r5
    bf90:	4f 90       	pop	r4
    bf92:	3f 90       	pop	r3
    bf94:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5046
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    bf96:	66 ed       	ldi	r22, 0xD6	; 214
    bf98:	7c e3       	ldi	r23, 0x3C	; 60
    bf9a:	c9 01       	movw	r24, r18
    bf9c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5047
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    bfa0:	b4 01       	movw	r22, r8
    bfa2:	67 5e       	subi	r22, 0xE7	; 231
    bfa4:	7f 4f       	sbci	r23, 0xFF	; 255
    bfa6:	ee 24       	eor	r14, r14
    bfa8:	ea 94       	dec	r14
    bfaa:	fe 2c       	mov	r15, r14
    bfac:	00 e0       	ldi	r16, 0x00	; 0
    bfae:	18 ef       	ldi	r17, 0xF8	; 248
    bfb0:	24 e0       	ldi	r18, 0x04	; 4
    bfb2:	a2 01       	movw	r20, r4
    bfb4:	c5 01       	movw	r24, r10
    bfb6:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bfba:	d4 cf       	rjmp	.-88     	; 0xbf64 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d2>

0000bfbc <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4993
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    bfbc:	af 92       	push	r10
    bfbe:	bf 92       	push	r11
    bfc0:	cf 92       	push	r12
    bfc2:	df 92       	push	r13
    bfc4:	ef 92       	push	r14
    bfc6:	ff 92       	push	r15
    bfc8:	0f 93       	push	r16
    bfca:	1f 93       	push	r17
    bfcc:	cf 93       	push	r28
    bfce:	df 93       	push	r29
    bfd0:	cd b7       	in	r28, 0x3d	; 61
    bfd2:	de b7       	in	r29, 0x3e	; 62
    bfd4:	ca 54       	subi	r28, 0x4A	; 74
    bfd6:	d1 09       	sbc	r29, r1
    bfd8:	0f b6       	in	r0, 0x3f	; 63
    bfda:	f8 94       	cli
    bfdc:	de bf       	out	0x3e, r29	; 62
    bfde:	0f be       	out	0x3f, r0	; 63
    bfe0:	cd bf       	out	0x3d, r28	; 61
    bfe2:	6c 01       	movw	r12, r24
    bfe4:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4998
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    bfe6:	be 01       	movw	r22, r28
    bfe8:	6b 5c       	subi	r22, 0xCB	; 203
    bfea:	7f 4f       	sbci	r23, 0xFF	; 255
    bfec:	8e 2d       	mov	r24, r14
    bfee:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    bff2:	81 30       	cpi	r24, 0x01	; 1
    bff4:	d9 f5       	brne	.+118    	; 0xc06c <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5001
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    bff6:	8e e1       	ldi	r24, 0x1E	; 30
    bff8:	e8 9e       	mul	r14, r24
    bffa:	f0 01       	movw	r30, r0
    bffc:	11 24       	eor	r1, r1
    bffe:	ec 58       	subi	r30, 0x8C	; 140
    c000:	f5 4f       	sbci	r31, 0xF5	; 245
    c002:	65 81       	ldd	r22, Z+5	; 0x05
    c004:	76 81       	ldd	r23, Z+6	; 0x06
    c006:	07 2e       	mov	r0, r23
    c008:	00 0c       	add	r0, r0
    c00a:	88 0b       	sbc	r24, r24
    c00c:	99 0b       	sbc	r25, r25
    c00e:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    c012:	20 e0       	ldi	r18, 0x00	; 0
    c014:	30 e0       	ldi	r19, 0x00	; 0
    c016:	4a e7       	ldi	r20, 0x7A	; 122
    c018:	54 e4       	ldi	r21, 0x44	; 68
    c01a:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5002
    dtostrf(te, 4, 2, str1);
    c01e:	8e 01       	movw	r16, r28
    c020:	05 5e       	subi	r16, 0xE5	; 229
    c022:	1f 4f       	sbci	r17, 0xFF	; 255
    c024:	22 e0       	ldi	r18, 0x02	; 2
    c026:	44 e0       	ldi	r20, 0x04	; 4
    c028:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5003
    strcat(str1, "C");
    c02c:	61 ed       	ldi	r22, 0xD1	; 209
    c02e:	76 e0       	ldi	r23, 0x06	; 6
    c030:	c8 01       	movw	r24, r16
    c032:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5004
    strcpy_P(str2, current_temp_short);
    c036:	60 e1       	ldi	r22, 0x10	; 16
    c038:	7d e3       	ldi	r23, 0x3D	; 61
    c03a:	ce 01       	movw	r24, r28
    c03c:	01 96       	adiw	r24, 0x01	; 1
    c03e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5005
    strcat(str2, str1);
    c042:	b8 01       	movw	r22, r16
    c044:	ce 01       	movw	r24, r28
    c046:	01 96       	adiw	r24, 0x01	; 1
    c048:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5006
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    c04c:	a5 01       	movw	r20, r10
    c04e:	44 57       	subi	r20, 0x74	; 116
    c050:	5f 4f       	sbci	r21, 0xFF	; 255
    c052:	b6 01       	movw	r22, r12
    c054:	66 5f       	subi	r22, 0xF6	; 246
    c056:	7f 4f       	sbci	r23, 0xFF	; 255
    c058:	ee 24       	eor	r14, r14
    c05a:	ea 94       	dec	r14
    c05c:	fe 2c       	mov	r15, r14
    c05e:	10 e0       	ldi	r17, 0x00	; 0
    c060:	00 e0       	ldi	r16, 0x00	; 0
    c062:	22 e0       	ldi	r18, 0x02	; 2
    c064:	ce 01       	movw	r24, r28
    c066:	01 96       	adiw	r24, 0x01	; 1
    c068:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5008
  }
}
    c06c:	c6 5b       	subi	r28, 0xB6	; 182
    c06e:	df 4f       	sbci	r29, 0xFF	; 255
    c070:	0f b6       	in	r0, 0x3f	; 63
    c072:	f8 94       	cli
    c074:	de bf       	out	0x3e, r29	; 62
    c076:	0f be       	out	0x3f, r0	; 63
    c078:	cd bf       	out	0x3d, r28	; 61
    c07a:	df 91       	pop	r29
    c07c:	cf 91       	pop	r28
    c07e:	1f 91       	pop	r17
    c080:	0f 91       	pop	r16
    c082:	ff 90       	pop	r15
    c084:	ef 90       	pop	r14
    c086:	df 90       	pop	r13
    c088:	cf 90       	pop	r12
    c08a:	bf 90       	pop	r11
    c08c:	af 90       	pop	r10
    c08e:	08 95       	ret

0000c090 <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    c090:	1f 93       	push	r17
    c092:	cf 93       	push	r28
    c094:	df 93       	push	r29
    c096:	cd b7       	in	r28, 0x3d	; 61
    c098:	de b7       	in	r29, 0x3e	; 62
    c09a:	a0 97       	sbiw	r28, 0x20	; 32
    c09c:	0f b6       	in	r0, 0x3f	; 63
    c09e:	f8 94       	cli
    c0a0:	de bf       	out	0x3e, r29	; 62
    c0a2:	0f be       	out	0x3f, r0	; 63
    c0a4:	cd bf       	out	0x3d, r28	; 61
    c0a6:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c0a8:	be 01       	movw	r22, r28
    c0aa:	6f 5f       	subi	r22, 0xFF	; 255
    c0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c0ae:	81 2f       	mov	r24, r17
    c0b0:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    c0b4:	be 01       	movw	r22, r28
    c0b6:	63 5f       	subi	r22, 0xF3	; 243
    c0b8:	7f 4f       	sbci	r23, 0xFF	; 255
    c0ba:	ce 01       	movw	r24, r28
    c0bc:	47 96       	adiw	r24, 0x17	; 23
    c0be:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    c0c2:	60 e0       	ldi	r22, 0x00	; 0
    c0c4:	87 e6       	ldi	r24, 0x67	; 103
    c0c6:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    c0ca:	be 01       	movw	r22, r28
    c0cc:	69 5e       	subi	r22, 0xE9	; 233
    c0ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c0d0:	8d e2       	ldi	r24, 0x2D	; 45
    c0d2:	99 e0       	ldi	r25, 0x09	; 9
    c0d4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  dialog_set_string_max_length = max_length;
    c0d8:	88 e0       	ldi	r24, 0x08	; 8
    c0da:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  dialog_set_string_args = idx;
    c0de:	10 93 2b 09 	sts	0x092B, r17	; 0x80092b <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  dialog_save_string_function = save_function;
    c0e2:	80 e3       	ldi	r24, 0x30	; 48
    c0e4:	91 e6       	ldi	r25, 0x61	; 97
    c0e6:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <dialog_save_string_function+0x1>
    c0ea:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <dialog_save_string_function>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2532
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 8, args2, &menu_tds_save_name);
  //dialog_save_variable_function = ;
}
    c0ee:	a0 96       	adiw	r28, 0x20	; 32
    c0f0:	0f b6       	in	r0, 0x3f	; 63
    c0f2:	f8 94       	cli
    c0f4:	de bf       	out	0x3e, r29	; 62
    c0f6:	0f be       	out	0x3f, r0	; 63
    c0f8:	cd bf       	out	0x3d, r28	; 61
    c0fa:	df 91       	pop	r29
    c0fc:	cf 91       	pop	r28
    c0fe:	1f 91       	pop	r17
    c100:	08 95       	ret

0000c102 <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    c102:	ff 92       	push	r15
    c104:	0f 93       	push	r16
    c106:	1f 93       	push	r17
    c108:	cf 93       	push	r28
    c10a:	df 93       	push	r29
    c10c:	cd b7       	in	r28, 0x3d	; 61
    c10e:	de b7       	in	r29, 0x3e	; 62
    c110:	66 97       	sbiw	r28, 0x16	; 22
    c112:	0f b6       	in	r0, 0x3f	; 63
    c114:	f8 94       	cli
    c116:	de bf       	out	0x3e, r29	; 62
    c118:	0f be       	out	0x3f, r0	; 63
    c11a:	cd bf       	out	0x3d, r28	; 61
    c11c:	08 2f       	mov	r16, r24
    c11e:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    c120:	60 e0       	ldi	r22, 0x00	; 0
    c122:	86 e6       	ldi	r24, 0x66	; 102
    c124:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_period():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c128:	be 01       	movw	r22, r28
    c12a:	6f 5f       	subi	r22, 0xFF	; 255
    c12c:	7f 4f       	sbci	r23, 0xFF	; 255
    c12e:	8f 2d       	mov	r24, r15
    c130:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:115
  return tds.period;
    c134:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    c136:	85 e1       	ldi	r24, 0x15	; 21
    c138:	08 9f       	mul	r16, r24
    c13a:	80 01       	movw	r16, r0
    c13c:	11 24       	eor	r1, r1
    c13e:	03 56       	subi	r16, 0x63	; 99
    c140:	17 4f       	sbci	r17, 0xF7	; 247
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    c142:	70 e0       	ldi	r23, 0x00	; 0
    c144:	90 e0       	ldi	r25, 0x00	; 0
    c146:	80 e0       	ldi	r24, 0x00	; 0
    c148:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    c14c:	f8 01       	movw	r30, r16
    c14e:	60 83       	st	Z, r22
    c150:	71 83       	std	Z+1, r23	; 0x01
    c152:	82 83       	std	Z+2, r24	; 0x02
    c154:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    c156:	80 e0       	ldi	r24, 0x00	; 0
    c158:	90 e0       	ldi	r25, 0x00	; 0
    c15a:	a0 e8       	ldi	r26, 0x80	; 128
    c15c:	bf e3       	ldi	r27, 0x3F	; 63
    c15e:	80 87       	std	Z+8, r24	; 0x08
    c160:	91 87       	std	Z+9, r25	; 0x09
    c162:	a2 87       	std	Z+10, r26	; 0x0a
    c164:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    c166:	40 e0       	ldi	r20, 0x00	; 0
    c168:	50 e0       	ldi	r21, 0x00	; 0
    c16a:	6f e7       	ldi	r22, 0x7F	; 127
    c16c:	73 e4       	ldi	r23, 0x43	; 67
    c16e:	44 83       	std	Z+4, r20	; 0x04
    c170:	55 83       	std	Z+5, r21	; 0x05
    c172:	66 83       	std	Z+6, r22	; 0x06
    c174:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    c176:	86 87       	std	Z+14, r24	; 0x0e
    c178:	97 87       	std	Z+15, r25	; 0x0f
    c17a:	a0 8b       	std	Z+16, r26	; 0x10
    c17c:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    c17e:	81 e0       	ldi	r24, 0x01	; 1
    c180:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    c182:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    c184:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    c186:	83 e6       	ldi	r24, 0x63	; 99
    c188:	91 e6       	ldi	r25, 0x61	; 97
    c18a:	94 8b       	std	Z+20, r25	; 0x14
    c18c:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    c18e:	66 96       	adiw	r28, 0x16	; 22
    c190:	0f b6       	in	r0, 0x3f	; 63
    c192:	f8 94       	cli
    c194:	de bf       	out	0x3e, r29	; 62
    c196:	0f be       	out	0x3f, r0	; 63
    c198:	cd bf       	out	0x3d, r28	; 61
    c19a:	df 91       	pop	r29
    c19c:	cf 91       	pop	r28
    c19e:	1f 91       	pop	r17
    c1a0:	0f 91       	pop	r16
    c1a2:	ff 90       	pop	r15
    c1a4:	08 95       	ret

0000c1a6 <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    c1a6:	ff 92       	push	r15
    c1a8:	0f 93       	push	r16
    c1aa:	1f 93       	push	r17
    c1ac:	cf 93       	push	r28
    c1ae:	df 93       	push	r29
    c1b0:	cd b7       	in	r28, 0x3d	; 61
    c1b2:	de b7       	in	r29, 0x3e	; 62
    c1b4:	66 97       	sbiw	r28, 0x16	; 22
    c1b6:	0f b6       	in	r0, 0x3f	; 63
    c1b8:	f8 94       	cli
    c1ba:	de bf       	out	0x3e, r29	; 62
    c1bc:	0f be       	out	0x3f, r0	; 63
    c1be:	cd bf       	out	0x3d, r28	; 61
    c1c0:	08 2f       	mov	r16, r24
    c1c2:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    c1c4:	60 e0       	ldi	r22, 0x00	; 0
    c1c6:	86 e6       	ldi	r24, 0x66	; 102
    c1c8:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_offset():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c1cc:	be 01       	movw	r22, r28
    c1ce:	6f 5f       	subi	r22, 0xFF	; 255
    c1d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c1d2:	8f 2d       	mov	r24, r15
    c1d4:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:99
  return tds.offset;
    c1d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    c1da:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    c1dc:	85 e1       	ldi	r24, 0x15	; 21
    c1de:	08 9f       	mul	r16, r24
    c1e0:	80 01       	movw	r16, r0
    c1e2:	11 24       	eor	r1, r1
    c1e4:	03 56       	subi	r16, 0x63	; 99
    c1e6:	17 4f       	sbci	r17, 0xF7	; 247
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    c1e8:	07 2e       	mov	r0, r23
    c1ea:	00 0c       	add	r0, r0
    c1ec:	88 0b       	sbc	r24, r24
    c1ee:	99 0b       	sbc	r25, r25
    c1f0:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    c1f4:	20 e0       	ldi	r18, 0x00	; 0
    c1f6:	30 e0       	ldi	r19, 0x00	; 0
    c1f8:	4a e7       	ldi	r20, 0x7A	; 122
    c1fa:	54 e4       	ldi	r21, 0x44	; 68
    c1fc:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    c200:	f8 01       	movw	r30, r16
    c202:	60 83       	st	Z, r22
    c204:	71 83       	std	Z+1, r23	; 0x01
    c206:	82 83       	std	Z+2, r24	; 0x02
    c208:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
  menu_dialog_variable[idx].variable_min = min;
    c20a:	80 e0       	ldi	r24, 0x00	; 0
    c20c:	90 e0       	ldi	r25, 0x00	; 0
    c20e:	a0 e2       	ldi	r26, 0x20	; 32
    c210:	b1 ec       	ldi	r27, 0xC1	; 193
    c212:	80 87       	std	Z+8, r24	; 0x08
    c214:	91 87       	std	Z+9, r25	; 0x09
    c216:	a2 87       	std	Z+10, r26	; 0x0a
    c218:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
  menu_dialog_variable[idx].variable_max = max;
    c21a:	80 e0       	ldi	r24, 0x00	; 0
    c21c:	90 e0       	ldi	r25, 0x00	; 0
    c21e:	a0 e2       	ldi	r26, 0x20	; 32
    c220:	b1 e4       	ldi	r27, 0x41	; 65
    c222:	84 83       	std	Z+4, r24	; 0x04
    c224:	95 83       	std	Z+5, r25	; 0x05
    c226:	a6 83       	std	Z+6, r26	; 0x06
    c228:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
  menu_dialog_variable[idx].variable_step = step;
    c22a:	8d ec       	ldi	r24, 0xCD	; 205
    c22c:	9c ec       	ldi	r25, 0xCC	; 204
    c22e:	ac ec       	ldi	r26, 0xCC	; 204
    c230:	bd e3       	ldi	r27, 0x3D	; 61
    c232:	86 87       	std	Z+14, r24	; 0x0e
    c234:	97 87       	std	Z+15, r25	; 0x0f
    c236:	a0 8b       	std	Z+16, r26	; 0x10
    c238:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
  menu_dialog_variable[idx].number_type = number_type;
    c23a:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
  menu_dialog_variable[idx].args = args;
    c23c:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  menu_dialog_variable[idx].update_now = update_now;
    c23e:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  menu_dialog_variable[idx].save_function = save_function;
    c240:	89 e9       	ldi	r24, 0x99	; 153
    c242:	91 e6       	ldi	r25, 0x61	; 97
    c244:	94 8b       	std	Z+20, r25	; 0x14
    c246:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    c248:	66 96       	adiw	r28, 0x16	; 22
    c24a:	0f b6       	in	r0, 0x3f	; 63
    c24c:	f8 94       	cli
    c24e:	de bf       	out	0x3e, r29	; 62
    c250:	0f be       	out	0x3f, r0	; 63
    c252:	cd bf       	out	0x3d, r28	; 61
    c254:	df 91       	pop	r29
    c256:	cf 91       	pop	r28
    c258:	1f 91       	pop	r17
    c25a:	0f 91       	pop	r16
    c25c:	ff 90       	pop	r15
    c25e:	08 95       	ret

0000c260 <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    c260:	1f 93       	push	r17
    c262:	cf 93       	push	r28
    c264:	df 93       	push	r29
    c266:	cd b7       	in	r28, 0x3d	; 61
    c268:	de b7       	in	r29, 0x3e	; 62
    c26a:	a0 97       	sbiw	r28, 0x20	; 32
    c26c:	0f b6       	in	r0, 0x3f	; 63
    c26e:	f8 94       	cli
    c270:	de bf       	out	0x3e, r29	; 62
    c272:	0f be       	out	0x3f, r0	; 63
    c274:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    c276:	6d e2       	ldi	r22, 0x2D	; 45
    c278:	79 e0       	ldi	r23, 0x09	; 9
    c27a:	ce 01       	movw	r24, r28
    c27c:	47 96       	adiw	r24, 0x17	; 23
    c27e:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    c282:	8f 89       	ldd	r24, Y+23	; 0x17
    c284:	88 23       	and	r24, r24
    c286:	a9 f0       	breq	.+42     	; 0xc2b2 <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    c288:	10 91 2b 09 	lds	r17, 0x092B	; 0x80092b <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c28c:	be 01       	movw	r22, r28
    c28e:	6f 5f       	subi	r22, 0xFF	; 255
    c290:	7f 4f       	sbci	r23, 0xFF	; 255
    c292:	81 2f       	mov	r24, r17
    c294:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    c298:	be 01       	movw	r22, r28
    c29a:	69 5e       	subi	r22, 0xE9	; 233
    c29c:	7f 4f       	sbci	r23, 0xFF	; 255
    c29e:	ce 01       	movw	r24, r28
    c2a0:	0d 96       	adiw	r24, 0x0d	; 13
    c2a2:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    c2a6:	be 01       	movw	r22, r28
    c2a8:	6f 5f       	subi	r22, 0xFF	; 255
    c2aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c2ac:	81 2f       	mov	r24, r17
    c2ae:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    c2b2:	a0 96       	adiw	r28, 0x20	; 32
    c2b4:	0f b6       	in	r0, 0x3f	; 63
    c2b6:	f8 94       	cli
    c2b8:	de bf       	out	0x3e, r29	; 62
    c2ba:	0f be       	out	0x3f, r0	; 63
    c2bc:	cd bf       	out	0x3d, r28	; 61
    c2be:	df 91       	pop	r29
    c2c0:	cf 91       	pop	r28
    c2c2:	1f 91       	pop	r17
    c2c4:	08 95       	ret

0000c2c6 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    c2c6:	ff 92       	push	r15
    c2c8:	0f 93       	push	r16
    c2ca:	1f 93       	push	r17
    c2cc:	cf 93       	push	r28
    c2ce:	df 93       	push	r29
    c2d0:	cd b7       	in	r28, 0x3d	; 61
    c2d2:	de b7       	in	r29, 0x3e	; 62
    c2d4:	66 97       	sbiw	r28, 0x16	; 22
    c2d6:	0f b6       	in	r0, 0x3f	; 63
    c2d8:	f8 94       	cli
    c2da:	de bf       	out	0x3e, r29	; 62
    c2dc:	0f be       	out	0x3f, r0	; 63
    c2de:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    c2e0:	95 e1       	ldi	r25, 0x15	; 21
    c2e2:	89 9f       	mul	r24, r25
    c2e4:	80 01       	movw	r16, r0
    c2e6:	11 24       	eor	r1, r1
    c2e8:	03 56       	subi	r16, 0x63	; 99
    c2ea:	17 4f       	sbci	r17, 0xF7	; 247
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
    c2ec:	f8 01       	movw	r30, r16
    c2ee:	60 81       	ld	r22, Z
    c2f0:	71 81       	ldd	r23, Z+1	; 0x01
    c2f2:	82 81       	ldd	r24, Z+2	; 0x02
    c2f4:	93 81       	ldd	r25, Z+3	; 0x03
    c2f6:	0e 94 b2 bc 	call	0x17964	; 0x17964 <__fixunssfsi>
    c2fa:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    c2fc:	f8 01       	movw	r30, r16
    c2fe:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c300:	be 01       	movw	r22, r28
    c302:	6f 5f       	subi	r22, 0xFF	; 255
    c304:	7f 4f       	sbci	r23, 0xFF	; 255
    c306:	81 2f       	mov	r24, r17
    c308:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:107
  tds.period = period;
    c30c:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    c30e:	be 01       	movw	r22, r28
    c310:	6f 5f       	subi	r22, 0xFF	; 255
    c312:	7f 4f       	sbci	r23, 0xFF	; 255
    c314:	81 2f       	mov	r24, r17
    c316:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
}
    c31a:	66 96       	adiw	r28, 0x16	; 22
    c31c:	0f b6       	in	r0, 0x3f	; 63
    c31e:	f8 94       	cli
    c320:	de bf       	out	0x3e, r29	; 62
    c322:	0f be       	out	0x3f, r0	; 63
    c324:	cd bf       	out	0x3d, r28	; 61
    c326:	df 91       	pop	r29
    c328:	cf 91       	pop	r28
    c32a:	1f 91       	pop	r17
    c32c:	0f 91       	pop	r16
    c32e:	ff 90       	pop	r15
    c330:	08 95       	ret

0000c332 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    c332:	cf 92       	push	r12
    c334:	df 92       	push	r13
    c336:	ef 92       	push	r14
    c338:	ff 92       	push	r15
    c33a:	0f 93       	push	r16
    c33c:	1f 93       	push	r17
    c33e:	cf 93       	push	r28
    c340:	df 93       	push	r29
    c342:	cd b7       	in	r28, 0x3d	; 61
    c344:	de b7       	in	r29, 0x3e	; 62
    c346:	66 97       	sbiw	r28, 0x16	; 22
    c348:	0f b6       	in	r0, 0x3f	; 63
    c34a:	f8 94       	cli
    c34c:	de bf       	out	0x3e, r29	; 62
    c34e:	0f be       	out	0x3f, r0	; 63
    c350:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    c352:	95 e1       	ldi	r25, 0x15	; 21
    c354:	89 9f       	mul	r24, r25
    c356:	80 01       	movw	r16, r0
    c358:	11 24       	eor	r1, r1
    c35a:	03 56       	subi	r16, 0x63	; 99
    c35c:	17 4f       	sbci	r17, 0xF7	; 247
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
    c35e:	20 e0       	ldi	r18, 0x00	; 0
    c360:	30 e0       	ldi	r19, 0x00	; 0
    c362:	4a e7       	ldi	r20, 0x7A	; 122
    c364:	54 e4       	ldi	r21, 0x44	; 68
    c366:	f8 01       	movw	r30, r16
    c368:	60 81       	ld	r22, Z
    c36a:	71 81       	ldd	r23, Z+1	; 0x01
    c36c:	82 81       	ldd	r24, Z+2	; 0x02
    c36e:	93 81       	ldd	r25, Z+3	; 0x03
    c370:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
    c374:	0e 94 ab bc 	call	0x17956	; 0x17956 <__fixsfsi>
    c378:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    c37a:	f8 01       	movw	r30, r16
    c37c:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c37e:	be 01       	movw	r22, r28
    c380:	6f 5f       	subi	r22, 0xFF	; 255
    c382:	7f 4f       	sbci	r23, 0xFF	; 255
    c384:	81 2f       	mov	r24, r17
    c386:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    c38a:	dc 86       	std	Y+12, r13	; 0x0c
    c38c:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    c38e:	be 01       	movw	r22, r28
    c390:	6f 5f       	subi	r22, 0xFF	; 255
    c392:	7f 4f       	sbci	r23, 0xFF	; 255
    c394:	81 2f       	mov	r24, r17
    c396:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}
    c39a:	66 96       	adiw	r28, 0x16	; 22
    c39c:	0f b6       	in	r0, 0x3f	; 63
    c39e:	f8 94       	cli
    c3a0:	de bf       	out	0x3e, r29	; 62
    c3a2:	0f be       	out	0x3f, r0	; 63
    c3a4:	cd bf       	out	0x3d, r28	; 61
    c3a6:	df 91       	pop	r29
    c3a8:	cf 91       	pop	r28
    c3aa:	1f 91       	pop	r17
    c3ac:	0f 91       	pop	r16
    c3ae:	ff 90       	pop	r15
    c3b0:	ef 90       	pop	r14
    c3b2:	df 90       	pop	r13
    c3b4:	cf 90       	pop	r12
    c3b6:	08 95       	ret

0000c3b8 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    c3b8:	0f 93       	push	r16
    c3ba:	1f 93       	push	r17
    c3bc:	cf 93       	push	r28
    c3be:	df 93       	push	r29
    c3c0:	8c 01       	movw	r16, r24
    c3c2:	c4 e6       	ldi	r28, 0x64	; 100
    c3c4:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    c3c6:	ce 01       	movw	r24, r28
    c3c8:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    c3cc:	f8 01       	movw	r30, r16
    c3ce:	81 93       	st	Z+, r24
    c3d0:	8f 01       	movw	r16, r30
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    c3d2:	10 82       	st	Z, r1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    c3d4:	88 23       	and	r24, r24
    c3d6:	21 f0       	breq	.+8      	; 0xc3e0 <device_get_name(char*)+0x28>
    c3d8:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    c3da:	cd 36       	cpi	r28, 0x6D	; 109
    c3dc:	d1 05       	cpc	r29, r1
    c3de:	99 f7       	brne	.-26     	; 0xc3c6 <device_get_name(char*)+0xe>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    c3e0:	df 91       	pop	r29
    c3e2:	cf 91       	pop	r28
    c3e4:	1f 91       	pop	r17
    c3e6:	0f 91       	pop	r16
    c3e8:	08 95       	ret

0000c3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    c3ea:	cf 92       	push	r12
    c3ec:	df 92       	push	r13
    c3ee:	ef 92       	push	r14
    c3f0:	ff 92       	push	r15
    c3f2:	0f 93       	push	r16
    c3f4:	1f 93       	push	r17
    c3f6:	cf 93       	push	r28
    c3f8:	df 93       	push	r29
    c3fa:	cd b7       	in	r28, 0x3d	; 61
    c3fc:	de b7       	in	r29, 0x3e	; 62
    c3fe:	ca 54       	subi	r28, 0x4A	; 74
    c400:	d1 09       	sbc	r29, r1
    c402:	0f b6       	in	r0, 0x3f	; 63
    c404:	f8 94       	cli
    c406:	de bf       	out	0x3e, r29	; 62
    c408:	0f be       	out	0x3f, r0	; 63
    c40a:	cd bf       	out	0x3d, r28	; 61
    c40c:	8c 01       	movw	r16, r24
    c40e:	6b 01       	movw	r12, r22
    c410:	7a 01       	movw	r14, r20
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    c412:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
    c416:	88 23       	and	r24, r24
    c418:	89 f1       	breq	.+98     	; 0xc47c <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    c41a:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mqtt_send_message>
    c41e:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mqtt_send_message+0x1>
    c422:	01 96       	adiw	r24, 0x01	; 1
    c424:	90 93 c5 0b 	sts	0x0BC5, r25	; 0x800bc5 <mqtt_send_message+0x1>
    c428:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mqtt_send_message>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    c42c:	ce 01       	movw	r24, r28
    c42e:	8f 5b       	subi	r24, 0xBF	; 191
    c430:	9f 4f       	sbci	r25, 0xFF	; 255
    c432:	0e 94 dc 61 	call	0xc3b8	; 0xc3b8 <device_get_name(char*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    c436:	60 91 c2 0b 	lds	r22, 0x0BC2	; 0x800bc2 <header_out>
    c43a:	70 91 c3 0b 	lds	r23, 0x0BC3	; 0x800bc3 <header_out+0x1>
    c43e:	ce 01       	movw	r24, r28
    c440:	01 96       	adiw	r24, 0x01	; 1
    c442:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    c446:	be 01       	movw	r22, r28
    c448:	6f 5b       	subi	r22, 0xBF	; 191
    c44a:	7f 4f       	sbci	r23, 0xFF	; 255
    c44c:	ce 01       	movw	r24, r28
    c44e:	01 96       	adiw	r24, 0x01	; 1
    c450:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    c454:	6c ed       	ldi	r22, 0xDC	; 220
    c456:	73 e0       	ldi	r23, 0x03	; 3
    c458:	ce 01       	movw	r24, r28
    c45a:	01 96       	adiw	r24, 0x01	; 1
    c45c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    c460:	b6 01       	movw	r22, r12
    c462:	ce 01       	movw	r24, r28
    c464:	01 96       	adiw	r24, 0x01	; 1
    c466:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    c46a:	a7 01       	movw	r20, r14
    c46c:	be 01       	movw	r22, r28
    c46e:	6f 5f       	subi	r22, 0xFF	; 255
    c470:	7f 4f       	sbci	r23, 0xFF	; 255
    c472:	c8 01       	movw	r24, r16
    c474:	0e 94 c9 9c 	call	0x13992	; 0x13992 <PubSubClient::publish(char const*, char const*)>
    c478:	81 11       	cpse	r24, r1
    c47a:	09 c0       	rjmp	.+18     	; 0xc48e <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    c47c:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <mqtt_error>
    c480:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <mqtt_error+0x1>
    c484:	01 96       	adiw	r24, 0x01	; 1
    c486:	90 93 c7 0b 	sts	0x0BC7, r25	; 0x800bc7 <mqtt_error+0x1>
    c48a:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <mqtt_error>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:232
}
    c48e:	c6 5b       	subi	r28, 0xB6	; 182
    c490:	df 4f       	sbci	r29, 0xFF	; 255
    c492:	0f b6       	in	r0, 0x3f	; 63
    c494:	f8 94       	cli
    c496:	de bf       	out	0x3e, r29	; 62
    c498:	0f be       	out	0x3f, r0	; 63
    c49a:	cd bf       	out	0x3d, r28	; 61
    c49c:	df 91       	pop	r29
    c49e:	cf 91       	pop	r28
    c4a0:	1f 91       	pop	r17
    c4a2:	0f 91       	pop	r16
    c4a4:	ff 90       	pop	r15
    c4a6:	ef 90       	pop	r14
    c4a8:	df 90       	pop	r13
    c4aa:	cf 90       	pop	r12
    c4ac:	08 95       	ret

0000c4ae <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    c4ae:	cf 93       	push	r28
    c4b0:	df 93       	push	r29
    c4b2:	cd b7       	in	r28, 0x3d	; 61
    c4b4:	de b7       	in	r29, 0x3e	; 62
    c4b6:	60 97       	sbiw	r28, 0x10	; 16
    c4b8:	0f b6       	in	r0, 0x3f	; 63
    c4ba:	f8 94       	cli
    c4bc:	de bf       	out	0x3e, r29	; 62
    c4be:	0f be       	out	0x3f, r0	; 63
    c4c0:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    c4c2:	90 91 cf 09 	lds	r25, 0x09CF	; 0x8009cf <mqtt_log_cnt>
    c4c6:	e9 2f       	mov	r30, r25
    c4c8:	f0 e0       	ldi	r31, 0x00	; 0
    c4ca:	e1 5b       	subi	r30, 0xB1	; 177
    c4cc:	f6 4f       	sbci	r31, 0xF6	; 246
    c4ce:	80 83       	st	Z, r24
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    c4d0:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    c4d2:	9f 5f       	subi	r25, 0xFF	; 255
    c4d4:	90 93 cf 09 	sts	0x09CF, r25	; 0x8009cf <mqtt_log_cnt>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    c4d8:	97 fd       	sbrc	r25, 7
    c4da:	04 c0       	rjmp	.+8      	; 0xc4e4 <printf_via_mqtt(char, __file*)+0x36>
    c4dc:	8a 30       	cpi	r24, 0x0A	; 10
    c4de:	11 f0       	breq	.+4      	; 0xc4e4 <printf_via_mqtt(char, __file*)+0x36>
    c4e0:	81 11       	cpse	r24, r1
    c4e2:	13 c0       	rjmp	.+38     	; 0xc50a <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    c4e4:	6a ea       	ldi	r22, 0xAA	; 170
    c4e6:	73 e0       	ldi	r23, 0x03	; 3
    c4e8:	ce 01       	movw	r24, r28
    c4ea:	01 96       	adiw	r24, 0x01	; 1
    c4ec:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    c4f0:	4f e4       	ldi	r20, 0x4F	; 79
    c4f2:	59 e0       	ldi	r21, 0x09	; 9
    c4f4:	be 01       	movw	r22, r28
    c4f6:	6f 5f       	subi	r22, 0xFF	; 255
    c4f8:	7f 4f       	sbci	r23, 0xFF	; 255
    c4fa:	80 91 4d 09 	lds	r24, 0x094D	; 0x80094d <pub_mqtt_client>
    c4fe:	90 91 4e 09 	lds	r25, 0x094E	; 0x80094e <pub_mqtt_client+0x1>
    c502:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    c506:	10 92 cf 09 	sts	0x09CF, r1	; 0x8009cf <mqtt_log_cnt>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:448
  }
}
    c50a:	60 96       	adiw	r28, 0x10	; 16
    c50c:	0f b6       	in	r0, 0x3f	; 63
    c50e:	f8 94       	cli
    c510:	de bf       	out	0x3e, r29	; 62
    c512:	0f be       	out	0x3f, r0	; 63
    c514:	cd bf       	out	0x3d, r28	; 61
    c516:	df 91       	pop	r29
    c518:	cf 91       	pop	r28
    c51a:	08 95       	ret

0000c51c <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    c51c:	cf 93       	push	r28
    c51e:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
  if (idx < MAX_RTDS)
    c520:	8a 30       	cpi	r24, 0x0A	; 10
    c522:	68 f4       	brcc	.+26     	; 0xc53e <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    c524:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    c526:	24 e1       	ldi	r18, 0x14	; 20
    c528:	82 9f       	mul	r24, r18
    c52a:	c0 01       	movw	r24, r0
    c52c:	11 24       	eor	r1, r1
    c52e:	83 54       	subi	r24, 0x43	; 67
    c530:	9a 4f       	sbci	r25, 0xFA	; 250
    c532:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c536:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
  }
  else
    *active = 255;
}
    c538:	df 91       	pop	r29
    c53a:	cf 91       	pop	r28
    c53c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    c53e:	8f ef       	ldi	r24, 0xFF	; 255
    c540:	fb 01       	movw	r30, r22
    c542:	80 83       	st	Z, r24
    c544:	f9 cf       	rjmp	.-14     	; 0xc538 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000c546 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5511
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint8_t args1, uint8_t args2, uint8_t loop_idx)
{
    c546:	1f 93       	push	r17
    c548:	cf 93       	push	r28
    c54a:	df 93       	push	r29
    c54c:	1f 92       	push	r1
    c54e:	cd b7       	in	r28, 0x3d	; 61
    c550:	de b7       	in	r29, 0x3e	; 62
    c552:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5516
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    c554:	be 01       	movw	r22, r28
    c556:	6f 5f       	subi	r22, 0xFF	; 255
    c558:	7f 4f       	sbci	r23, 0xFF	; 255
    c55a:	84 2f       	mov	r24, r20
    c55c:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5517
  if (active == 1)
    c560:	89 81       	ldd	r24, Y+1	; 0x01
    c562:	81 30       	cpi	r24, 0x01	; 1
    c564:	21 f4       	brne	.+8      	; 0xc56e <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5519
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx);
    c566:	61 2f       	mov	r22, r17
    c568:	87 e0       	ldi	r24, 0x07	; 7
    c56a:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5521
  }
}
    c56e:	0f 90       	pop	r0
    c570:	df 91       	pop	r29
    c572:	cf 91       	pop	r28
    c574:	1f 91       	pop	r17
    c576:	08 95       	ret

0000c578 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2869
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    c578:	1f 93       	push	r17
    c57a:	cf 93       	push	r28
    c57c:	df 93       	push	r29
    c57e:	1f 92       	push	r1
    c580:	cd b7       	in	r28, 0x3d	; 61
    c582:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2872
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c584:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874
  {
    remote_tds_get_active(idx, &active);
    c586:	be 01       	movw	r22, r28
    c588:	6f 5f       	subi	r22, 0xFF	; 255
    c58a:	7f 4f       	sbci	r23, 0xFF	; 255
    c58c:	81 2f       	mov	r24, r17
    c58e:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
    if (active == 0)
    c592:	89 81       	ldd	r24, Y+1	; 0x01
    c594:	88 23       	and	r24, r24
    c596:	21 f0       	breq	.+8      	; 0xc5a0 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2872
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c598:	1f 5f       	subi	r17, 0xFF	; 255
    c59a:	1a 30       	cpi	r17, 0x0A	; 10
    c59c:	a1 f7       	brne	.-24     	; 0xc586 <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    c59e:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
      ret = idx;
      break;
    }
  }
  return ret;
}
    c5a0:	81 2f       	mov	r24, r17
    c5a2:	0f 90       	pop	r0
    c5a4:	df 91       	pop	r29
    c5a6:	cf 91       	pop	r28
    c5a8:	1f 91       	pop	r17
    c5aa:	08 95       	ret

0000c5ac <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5462
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    c5ac:	1f 93       	push	r17
    c5ae:	cf 93       	push	r28
    c5b0:	df 93       	push	r29
    c5b2:	00 d0       	rcall	.+0      	; 0xc5b4 <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    c5b4:	1f 92       	push	r1
    c5b6:	1f 92       	push	r1
    c5b8:	cd b7       	in	r28, 0x3d	; 61
    c5ba:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5465
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    c5bc:	0e 94 bc 62 	call	0xc578	; 0xc578 <remote_tds_find_free()>
    c5c0:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5466
  if (idx != 255)
    c5c2:	8f 3f       	cpi	r24, 0xFF	; 255
    c5c4:	e1 f0       	breq	.+56     	; 0xc5fe <click_rtds_add_sensor(unsigned char, unsigned char)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5468
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    c5c6:	64 e5       	ldi	r22, 0x54	; 84
    c5c8:	7d e3       	ldi	r23, 0x3D	; 61
    c5ca:	ce 01       	movw	r24, r28
    c5cc:	01 96       	adiw	r24, 0x01	; 1
    c5ce:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5469
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    c5d2:	60 e0       	ldi	r22, 0x00	; 0
    c5d4:	87 e6       	ldi	r24, 0x67	; 103
    c5d6:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    c5da:	be 01       	movw	r22, r28
    c5dc:	6f 5f       	subi	r22, 0xFF	; 255
    c5de:	7f 4f       	sbci	r23, 0xFF	; 255
    c5e0:	8d e2       	ldi	r24, 0x2D	; 45
    c5e2:	99 e0       	ldi	r25, 0x09	; 9
    c5e4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  dialog_set_string_max_length = max_length;
    c5e8:	82 e1       	ldi	r24, 0x12	; 18
    c5ea:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  dialog_set_string_args = idx;
    c5ee:	10 93 2b 09 	sts	0x092B, r17	; 0x80092b <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  dialog_save_string_function = save_function;
    c5f2:	81 e6       	ldi	r24, 0x61	; 97
    c5f4:	97 e6       	ldi	r25, 0x67	; 103
    c5f6:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <dialog_save_string_function+0x1>
    c5fa:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <dialog_save_string_function>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5474
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name);

  }

}
    c5fe:	0f 90       	pop	r0
    c600:	0f 90       	pop	r0
    c602:	0f 90       	pop	r0
    c604:	0f 90       	pop	r0
    c606:	0f 90       	pop	r0
    c608:	df 91       	pop	r29
    c60a:	cf 91       	pop	r28
    c60c:	1f 91       	pop	r17
    c60e:	08 95       	ret

0000c610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    c610:	af 92       	push	r10
    c612:	bf 92       	push	r11
    c614:	cf 92       	push	r12
    c616:	df 92       	push	r13
    c618:	ef 92       	push	r14
    c61a:	ff 92       	push	r15
    c61c:	0f 93       	push	r16
    c61e:	1f 93       	push	r17
    c620:	cf 93       	push	r28
    c622:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  char t;
  if (idx < MAX_RTDS)
    c624:	8a 30       	cpi	r24, 0x0A	; 10
    c626:	88 f5       	brcc	.+98     	; 0xc68a <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    c628:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    c62a:	94 e1       	ldi	r25, 0x14	; 20
    c62c:	89 9f       	mul	r24, r25
    c62e:	e0 01       	movw	r28, r0
    c630:	11 24       	eor	r1, r1
    c632:	6e 01       	movw	r12, r28
    c634:	e6 e5       	ldi	r30, 0x56	; 86
    c636:	ce 1a       	sub	r12, r30
    c638:	ea ef       	ldi	r30, 0xFA	; 250
    c63a:	de 0a       	sbc	r13, r30
    c63c:	8a 01       	movw	r16, r20
    c63e:	5e 01       	movw	r10, r28
    c640:	f4 e4       	ldi	r31, 0x44	; 68
    c642:	af 1a       	sub	r10, r31
    c644:	fa ef       	ldi	r31, 0xFA	; 250
    c646:	bf 0a       	sbc	r11, r31
    c648:	c6 01       	movw	r24, r12
    c64a:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
      name[i] = t;
    c64e:	f8 01       	movw	r30, r16
    c650:	81 93       	st	Z+, r24
    c652:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2781
      name[i + 1] = 0;
    c654:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782
      if (t == 0) break;
    c656:	88 23       	and	r24, r24
    c658:	31 f0       	breq	.+12     	; 0xc666 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    c65a:	ff ef       	ldi	r31, 0xFF	; 255
    c65c:	cf 1a       	sub	r12, r31
    c65e:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    c660:	ca 14       	cp	r12, r10
    c662:	db 04       	cpc	r13, r11
    c664:	89 f7       	brne	.-30     	; 0xc648 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2784
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    c666:	ce 01       	movw	r24, r28
    c668:	83 54       	subi	r24, 0x43	; 67
    c66a:	9a 4f       	sbci	r25, 0xFA	; 250
    c66c:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c670:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
  }
  else
  {
    *active = 255;
    c672:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
  }
}
    c674:	df 91       	pop	r29
    c676:	cf 91       	pop	r28
    c678:	1f 91       	pop	r17
    c67a:	0f 91       	pop	r16
    c67c:	ff 90       	pop	r15
    c67e:	ef 90       	pop	r14
    c680:	df 90       	pop	r13
    c682:	cf 90       	pop	r12
    c684:	bf 90       	pop	r11
    c686:	af 90       	pop	r10
    c688:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    c68a:	8f ef       	ldi	r24, 0xFF	; 255
    c68c:	fb 01       	movw	r30, r22
    c68e:	f1 cf       	rjmp	.-30     	; 0xc672 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000c690 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5585
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    c690:	7f 92       	push	r7
    c692:	8f 92       	push	r8
    c694:	9f 92       	push	r9
    c696:	af 92       	push	r10
    c698:	bf 92       	push	r11
    c69a:	cf 92       	push	r12
    c69c:	df 92       	push	r13
    c69e:	ef 92       	push	r14
    c6a0:	0f 93       	push	r16
    c6a2:	1f 93       	push	r17
    c6a4:	cf 93       	push	r28
    c6a6:	df 93       	push	r29
    c6a8:	cd b7       	in	r28, 0x3d	; 61
    c6aa:	de b7       	in	r29, 0x3e	; 62
    c6ac:	aa 97       	sbiw	r28, 0x2a	; 42
    c6ae:	0f b6       	in	r0, 0x3f	; 63
    c6b0:	f8 94       	cli
    c6b2:	de bf       	out	0x3e, r29	; 62
    c6b4:	0f be       	out	0x3f, r0	; 63
    c6b6:	cd bf       	out	0x3d, r28	; 61
    c6b8:	78 2e       	mov	r7, r24
    c6ba:	e4 2e       	mov	r14, r20
    c6bc:	69 01       	movw	r12, r18
    c6be:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5589
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    c6c0:	62 ef       	ldi	r22, 0xF2	; 242
    c6c2:	72 e0       	ldi	r23, 0x02	; 2
    c6c4:	c9 01       	movw	r24, r18
    c6c6:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5590
  strcpy(line2, "");
    c6ca:	62 ef       	ldi	r22, 0xF2	; 242
    c6cc:	72 e0       	ldi	r23, 0x02	; 2
    c6ce:	c8 01       	movw	r24, r16
    c6d0:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
    c6d4:	88 ec       	ldi	r24, 0xC8	; 200
    c6d6:	88 2e       	mov	r8, r24
    c6d8:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5593
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    c6da:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5587
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    c6dc:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    c6de:	c4 01       	movw	r24, r8
    c6e0:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    c6e4:	81 30       	cpi	r24, 0x01	; 1
    c6e6:	11 f4       	brne	.+4      	; 0xc6ec <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5c>
    c6e8:	ee 20       	and	r14, r14
    c6ea:	19 f0       	breq	.+6      	; 0xc6f2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x62>
    c6ec:	81 e0       	ldi	r24, 0x01	; 1
    c6ee:	e8 12       	cpse	r14, r24
    c6f0:	2e c0       	rjmp	.+92     	; 0xc74e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5597
    {
      if (cri == args1)
    c6f2:	71 12       	cpse	r7, r17
    c6f4:	2b c0       	rjmp	.+86     	; 0xc74c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xbc>
tds_get_name():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c6f6:	be 01       	movw	r22, r28
    c6f8:	6f 5f       	subi	r22, 0xFF	; 255
    c6fa:	7f 4f       	sbci	r23, 0xFF	; 255
    c6fc:	80 2f       	mov	r24, r16
    c6fe:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    c702:	be 01       	movw	r22, r28
    c704:	63 5f       	subi	r22, 0xF3	; 243
    c706:	7f 4f       	sbci	r23, 0xFF	; 255
    c708:	ce 01       	movw	r24, r28
    c70a:	47 96       	adiw	r24, 0x17	; 23
    c70c:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5600
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    c710:	be 01       	movw	r22, r28
    c712:	69 5e       	subi	r22, 0xE9	; 233
    c714:	7f 4f       	sbci	r23, 0xFF	; 255
    c716:	c5 01       	movw	r24, r10
    c718:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5601
        strcpy_P(line1, nastaveni_onewire);
    c71c:	65 e6       	ldi	r22, 0x65	; 101
    c71e:	7d e3       	ldi	r23, 0x3D	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5617
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    c720:	c6 01       	movw	r24, r12
    c722:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5626
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    c726:	aa 96       	adiw	r28, 0x2a	; 42
    c728:	0f b6       	in	r0, 0x3f	; 63
    c72a:	f8 94       	cli
    c72c:	de bf       	out	0x3e, r29	; 62
    c72e:	0f be       	out	0x3f, r0	; 63
    c730:	cd bf       	out	0x3d, r28	; 61
    c732:	df 91       	pop	r29
    c734:	cf 91       	pop	r28
    c736:	1f 91       	pop	r17
    c738:	0f 91       	pop	r16
    c73a:	ef 90       	pop	r14
    c73c:	df 90       	pop	r13
    c73e:	cf 90       	pop	r12
    c740:	bf 90       	pop	r11
    c742:	af 90       	pop	r10
    c744:	9f 90       	pop	r9
    c746:	8f 90       	pop	r8
    c748:	7f 90       	pop	r7
    c74a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5604
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    c74c:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5593
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    c74e:	0f 5f       	subi	r16, 0xFF	; 255
    c750:	86 e1       	ldi	r24, 0x16	; 22
    c752:	88 0e       	add	r8, r24
    c754:	91 1c       	adc	r9, r1
    c756:	06 30       	cpi	r16, 0x06	; 6
    c758:	11 f6       	brne	.-124    	; 0xc6de <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5608
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c75a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5610
  {
    remote_tds_get_active(idx, &active);
    c75c:	be 01       	movw	r22, r28
    c75e:	6f 5f       	subi	r22, 0xFF	; 255
    c760:	7f 4f       	sbci	r23, 0xFF	; 255
    c762:	80 2f       	mov	r24, r16
    c764:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5611
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    c768:	89 81       	ldd	r24, Y+1	; 0x01
    c76a:	81 30       	cpi	r24, 0x01	; 1
    c76c:	11 f4       	brne	.+4      	; 0xc772 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe2>
    c76e:	ee 20       	and	r14, r14
    c770:	19 f0       	breq	.+6      	; 0xc778 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe8>
    c772:	81 e0       	ldi	r24, 0x01	; 1
    c774:	e8 12       	cpse	r14, r24
    c776:	15 c0       	rjmp	.+42     	; 0xc7a2 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5613
    {
      if (cri == args1)
    c778:	71 12       	cpse	r7, r17
    c77a:	12 c0       	rjmp	.+36     	; 0xc7a0 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5615
      {
        remote_tds_get_complete(idx, &active, name);
    c77c:	ae 01       	movw	r20, r28
    c77e:	49 5e       	subi	r20, 0xE9	; 233
    c780:	5f 4f       	sbci	r21, 0xFF	; 255
    c782:	be 01       	movw	r22, r28
    c784:	6f 5f       	subi	r22, 0xFF	; 255
    c786:	7f 4f       	sbci	r23, 0xFF	; 255
    c788:	80 2f       	mov	r24, r16
    c78a:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5616
        strcpy(line2, name);
    c78e:	be 01       	movw	r22, r28
    c790:	69 5e       	subi	r22, 0xE9	; 233
    c792:	7f 4f       	sbci	r23, 0xFF	; 255
    c794:	c5 01       	movw	r24, r10
    c796:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5617
        strcpy_P(line1, nastaveni_rtds);
    c79a:	66 e5       	ldi	r22, 0x56	; 86
    c79c:	7d e3       	ldi	r23, 0x3D	; 61
    c79e:	c0 cf       	rjmp	.-128    	; 0xc720 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5620
        goto button_get_show_default_temp_end;
      }
      cri++;
    c7a0:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5608
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c7a2:	0f 5f       	subi	r16, 0xFF	; 255
    c7a4:	0a 30       	cpi	r16, 0x0A	; 10
    c7a6:	d1 f6       	brne	.-76     	; 0xc75c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xcc>
    c7a8:	be cf       	rjmp	.-132    	; 0xc726 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x96>

0000c7aa <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5351
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    c7aa:	cf 92       	push	r12
    c7ac:	df 92       	push	r13
    c7ae:	ff 92       	push	r15
    c7b0:	0f 93       	push	r16
    c7b2:	1f 93       	push	r17
    c7b4:	cf 93       	push	r28
    c7b6:	df 93       	push	r29
    c7b8:	1f 92       	push	r1
    c7ba:	cd b7       	in	r28, 0x3d	; 61
    c7bc:	de b7       	in	r29, 0x3e	; 62
    c7be:	f8 2e       	mov	r15, r24
    c7c0:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5353
  uint8_t active;
  strcpy_P(line1, text_not_used);
    c7c2:	63 e3       	ldi	r22, 0x33	; 51
    c7c4:	7d e3       	ldi	r23, 0x3D	; 61
    c7c6:	c9 01       	movw	r24, r18
    c7c8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5355
  //sprintf(line2, "%d %d", args1, args2);
  line2[0] = 0;
    c7cc:	f8 01       	movw	r30, r16
    c7ce:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5356
  remote_tds_get_active(args1, &active);
    c7d0:	be 01       	movw	r22, r28
    c7d2:	6f 5f       	subi	r22, 0xFF	; 255
    c7d4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7d6:	8f 2d       	mov	r24, r15
    c7d8:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5357
  if (active == 1)
    c7dc:	89 81       	ldd	r24, Y+1	; 0x01
    c7de:	81 30       	cpi	r24, 0x01	; 1
    c7e0:	39 f4       	brne	.+14     	; 0xc7f0 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5359
  {
    remote_tds_get_complete(args1, &active, line1);
    c7e2:	a6 01       	movw	r20, r12
    c7e4:	be 01       	movw	r22, r28
    c7e6:	6f 5f       	subi	r22, 0xFF	; 255
    c7e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c7ea:	8f 2d       	mov	r24, r15
    c7ec:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5361
  }
}
    c7f0:	0f 90       	pop	r0
    c7f2:	df 91       	pop	r29
    c7f4:	cf 91       	pop	r28
    c7f6:	1f 91       	pop	r17
    c7f8:	0f 91       	pop	r16
    c7fa:	ff 90       	pop	r15
    c7fc:	df 90       	pop	r13
    c7fe:	cf 90       	pop	r12
    c800:	08 95       	ret

0000c802 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5052
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    c802:	5f 92       	push	r5
    c804:	6f 92       	push	r6
    c806:	7f 92       	push	r7
    c808:	8f 92       	push	r8
    c80a:	9f 92       	push	r9
    c80c:	af 92       	push	r10
    c80e:	bf 92       	push	r11
    c810:	cf 92       	push	r12
    c812:	df 92       	push	r13
    c814:	ef 92       	push	r14
    c816:	ff 92       	push	r15
    c818:	0f 93       	push	r16
    c81a:	1f 93       	push	r17
    c81c:	cf 93       	push	r28
    c81e:	df 93       	push	r29
    c820:	cd b7       	in	r28, 0x3d	; 61
    c822:	de b7       	in	r29, 0x3e	; 62
    c824:	cd 54       	subi	r28, 0x4D	; 77
    c826:	d1 09       	sbc	r29, r1
    c828:	0f b6       	in	r0, 0x3f	; 63
    c82a:	f8 94       	cli
    c82c:	de bf       	out	0x3e, r29	; 62
    c82e:	0f be       	out	0x3f, r0	; 63
    c830:	cd bf       	out	0x3d, r28	; 61
    c832:	4c 01       	movw	r8, r24
    c834:	5b 01       	movw	r10, r22
    c836:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c838:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    c83c:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5060
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    c840:	26 0f       	add	r18, r22
    c842:	37 1f       	adc	r19, r23
    c844:	48 0f       	add	r20, r24
    c846:	59 1f       	adc	r21, r25
    c848:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5061
  remote_tds_get_complete(args2, &active, name);
    c84c:	ae 01       	movw	r20, r28
    c84e:	45 5c       	subi	r20, 0xC5	; 197
    c850:	5f 4f       	sbci	r21, 0xFF	; 255
    c852:	be 01       	movw	r22, r28
    c854:	63 5b       	subi	r22, 0xB3	; 179
    c856:	7f 4f       	sbci	r23, 0xFF	; 255
    c858:	8e 2d       	mov	r24, r14
    c85a:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5062
  if (active == 1)
    c85e:	2e 96       	adiw	r28, 0x0e	; 14
    c860:	8f ad       	ldd	r24, Y+63	; 0x3f
    c862:	2e 97       	sbiw	r28, 0x0e	; 14
    c864:	81 30       	cpi	r24, 0x01	; 1
    c866:	09 f0       	breq	.+2      	; 0xc86a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x68>
    c868:	c1 c0       	rjmp	.+386    	; 0xc9ec <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5065
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    c86a:	69 e1       	ldi	r22, 0x19	; 25
    c86c:	7d e3       	ldi	r23, 0x3D	; 61
    c86e:	ce 01       	movw	r24, r28
    c870:	01 96       	adiw	r24, 0x01	; 1
    c872:	6c 01       	movw	r12, r24
    c874:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5066
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    c878:	34 01       	movw	r6, r8
    c87a:	95 e0       	ldi	r25, 0x05	; 5
    c87c:	69 0e       	add	r6, r25
    c87e:	71 1c       	adc	r7, r1
    c880:	ee 24       	eor	r14, r14
    c882:	ea 94       	dec	r14
    c884:	fe 2c       	mov	r15, r14
    c886:	10 e0       	ldi	r17, 0x00	; 0
    c888:	00 e0       	ldi	r16, 0x00	; 0
    c88a:	22 e0       	ldi	r18, 0x02	; 2
    c88c:	a5 01       	movw	r20, r10
    c88e:	46 5f       	subi	r20, 0xF6	; 246
    c890:	5f 4f       	sbci	r21, 0xFF	; 255
    c892:	b3 01       	movw	r22, r6
    c894:	c6 01       	movw	r24, r12
    c896:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5067
    strcpy(str1, name);
    c89a:	be 01       	movw	r22, r28
    c89c:	65 5c       	subi	r22, 0xC5	; 197
    c89e:	7f 4f       	sbci	r23, 0xFF	; 255
    c8a0:	c6 01       	movw	r24, r12
    c8a2:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5068
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    c8a6:	b4 01       	movw	r22, r8
    c8a8:	6c 5e       	subi	r22, 0xEC	; 236
    c8aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c8ac:	22 e0       	ldi	r18, 0x02	; 2
    c8ae:	a5 01       	movw	r20, r10
    c8b0:	42 5e       	subi	r20, 0xE2	; 226
    c8b2:	5f 4f       	sbci	r21, 0xFF	; 255
    c8b4:	c6 01       	movw	r24, r12
    c8b6:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    c8ba:	89 e0       	ldi	r24, 0x09	; 9
    c8bc:	85 15       	cp	r24, r5
    c8be:	08 f4       	brcc	.+2      	; 0xc8c2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc0>
    c8c0:	ac c0       	rjmp	.+344    	; 0xca1a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
    c8c2:	85 2d       	mov	r24, r5
    c8c4:	0e 94 08 31 	call	0x6210	; 0x6210 <remote_tds_get_data(unsigned char) [clone .part.26]>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5070
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    c8c8:	bc 01       	movw	r22, r24
    c8ca:	99 0f       	add	r25, r25
    c8cc:	88 0b       	sbc	r24, r24
    c8ce:	99 0b       	sbc	r25, r25
    c8d0:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    c8d4:	20 e0       	ldi	r18, 0x00	; 0
    c8d6:	30 e0       	ldi	r19, 0x00	; 0
    c8d8:	4a e7       	ldi	r20, 0x7A	; 122
    c8da:	54 e4       	ldi	r21, 0x44	; 68
    c8dc:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5071
    dtostrf(te, 4, 2, str1);
    c8e0:	86 01       	movw	r16, r12
    c8e2:	22 e0       	ldi	r18, 0x02	; 2
    c8e4:	44 e0       	ldi	r20, 0x04	; 4
    c8e6:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5072
    strcat(str1, "C");
    c8ea:	61 ed       	ldi	r22, 0xD1	; 209
    c8ec:	76 e0       	ldi	r23, 0x06	; 6
    c8ee:	c6 01       	movw	r24, r12
    c8f0:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5073
    strcpy_P(str2, current_temp_short);
    c8f4:	4e 01       	movw	r8, r28
    c8f6:	91 e2       	ldi	r25, 0x21	; 33
    c8f8:	89 0e       	add	r8, r25
    c8fa:	91 1c       	adc	r9, r1
    c8fc:	60 e1       	ldi	r22, 0x10	; 16
    c8fe:	7d e3       	ldi	r23, 0x3D	; 61
    c900:	c4 01       	movw	r24, r8
    c902:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5074
    strcat(str2, str1);
    c906:	b6 01       	movw	r22, r12
    c908:	c4 01       	movw	r24, r8
    c90a:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5075
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    c90e:	ee 24       	eor	r14, r14
    c910:	ea 94       	dec	r14
    c912:	fe 2c       	mov	r15, r14
    c914:	10 e0       	ldi	r17, 0x00	; 0
    c916:	00 e0       	ldi	r16, 0x00	; 0
    c918:	22 e0       	ldi	r18, 0x02	; 2
    c91a:	a5 01       	movw	r20, r10
    c91c:	44 5c       	subi	r20, 0xC4	; 196
    c91e:	5f 4f       	sbci	r21, 0xFF	; 255
    c920:	b3 01       	movw	r22, r6
    c922:	c4 01       	movw	r24, r8
    c924:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    c928:	89 e0       	ldi	r24, 0x09	; 9
    c92a:	85 15       	cp	r24, r5
    c92c:	08 f4       	brcc	.+2      	; 0xc930 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x12e>
    c92e:	78 c0       	rjmp	.+240    	; 0xca20 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    c930:	93 e0       	ldi	r25, 0x03	; 3
    c932:	59 9e       	mul	r5, r25
    c934:	b0 01       	movw	r22, r0
    c936:	11 24       	eor	r1, r1
    c938:	6a 59       	subi	r22, 0x9A	; 154
    c93a:	7f 4f       	sbci	r23, 0xFF	; 255
    c93c:	07 2e       	mov	r0, r23
    c93e:	00 0c       	add	r0, r0
    c940:	88 0b       	sbc	r24, r24
    c942:	99 0b       	sbc	r25, r25
    c944:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
    c948:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5078
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    c94a:	6a ef       	ldi	r22, 0xFA	; 250
    c94c:	7c e3       	ldi	r23, 0x3C	; 60
    c94e:	c4 01       	movw	r24, r8
    c950:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
    sprintf(str1, "%s: %d", str2, last_update);
    c954:	1f 92       	push	r1
    c956:	5f 92       	push	r5
    c958:	9f 92       	push	r9
    c95a:	8f 92       	push	r8
    c95c:	83 ea       	ldi	r24, 0xA3	; 163
    c95e:	93 e0       	ldi	r25, 0x03	; 3
    c960:	9f 93       	push	r25
    c962:	8f 93       	push	r24
    c964:	df 92       	push	r13
    c966:	cf 92       	push	r12
    c968:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5080
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    c96c:	ee 24       	eor	r14, r14
    c96e:	ea 94       	dec	r14
    c970:	fe 2c       	mov	r15, r14
    c972:	10 e0       	ldi	r17, 0x00	; 0
    c974:	00 e0       	ldi	r16, 0x00	; 0
    c976:	21 e0       	ldi	r18, 0x01	; 1
    c978:	a5 01       	movw	r20, r10
    c97a:	40 5b       	subi	r20, 0xB0	; 176
    c97c:	5f 4f       	sbci	r21, 0xFF	; 255
    c97e:	b3 01       	movw	r22, r6
    c980:	c6 01       	movw	r24, r12
    c982:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5082
    active = 1;
    if (last_update >= 250) active = 0;
    c986:	0f b6       	in	r0, 0x3f	; 63
    c988:	f8 94       	cli
    c98a:	de bf       	out	0x3e, r29	; 62
    c98c:	0f be       	out	0x3f, r0	; 63
    c98e:	cd bf       	out	0x3d, r28	; 61
    c990:	99 ef       	ldi	r25, 0xF9	; 249
    c992:	95 15       	cp	r25, r5
    c994:	08 f4       	brcc	.+2      	; 0xc998 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x196>
    c996:	47 c0       	rjmp	.+142    	; 0xca26 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5081
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    c998:	81 e0       	ldi	r24, 0x01	; 1
    c99a:	2e 96       	adiw	r28, 0x0e	; 14
    c99c:	8f af       	std	Y+63, r24	; 0x3f
    c99e:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5083
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    c9a0:	63 ef       	ldi	r22, 0xF3	; 243
    c9a2:	7c e3       	ldi	r23, 0x3C	; 60
    c9a4:	c4 01       	movw	r24, r8
    c9a6:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5084
    sprintf(str1, "%s: %d", str2, active);
    c9aa:	2e 96       	adiw	r28, 0x0e	; 14
    c9ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    c9ae:	2e 97       	sbiw	r28, 0x0e	; 14
    c9b0:	1f 92       	push	r1
    c9b2:	8f 93       	push	r24
    c9b4:	9f 92       	push	r9
    c9b6:	8f 92       	push	r8
    c9b8:	83 ea       	ldi	r24, 0xA3	; 163
    c9ba:	93 e0       	ldi	r25, 0x03	; 3
    c9bc:	9f 93       	push	r25
    c9be:	8f 93       	push	r24
    c9c0:	df 92       	push	r13
    c9c2:	cf 92       	push	r12
    c9c4:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5085
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    c9c8:	a5 01       	movw	r20, r10
    c9ca:	4c 59       	subi	r20, 0x9C	; 156
    c9cc:	5f 4f       	sbci	r21, 0xFF	; 255
    c9ce:	ee 24       	eor	r14, r14
    c9d0:	ea 94       	dec	r14
    c9d2:	fe 2c       	mov	r15, r14
    c9d4:	10 e0       	ldi	r17, 0x00	; 0
    c9d6:	00 e0       	ldi	r16, 0x00	; 0
    c9d8:	22 e0       	ldi	r18, 0x02	; 2
    c9da:	b3 01       	movw	r22, r6
    c9dc:	c6 01       	movw	r24, r12
    c9de:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    c9e2:	0f b6       	in	r0, 0x3f	; 63
    c9e4:	f8 94       	cli
    c9e6:	de bf       	out	0x3e, r29	; 62
    c9e8:	0f be       	out	0x3f, r0	; 63
    c9ea:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5087
  }
}
    c9ec:	c3 5b       	subi	r28, 0xB3	; 179
    c9ee:	df 4f       	sbci	r29, 0xFF	; 255
    c9f0:	0f b6       	in	r0, 0x3f	; 63
    c9f2:	f8 94       	cli
    c9f4:	de bf       	out	0x3e, r29	; 62
    c9f6:	0f be       	out	0x3f, r0	; 63
    c9f8:	cd bf       	out	0x3d, r28	; 61
    c9fa:	df 91       	pop	r29
    c9fc:	cf 91       	pop	r28
    c9fe:	1f 91       	pop	r17
    ca00:	0f 91       	pop	r16
    ca02:	ff 90       	pop	r15
    ca04:	ef 90       	pop	r14
    ca06:	df 90       	pop	r13
    ca08:	cf 90       	pop	r12
    ca0a:	bf 90       	pop	r11
    ca0c:	af 90       	pop	r10
    ca0e:	9f 90       	pop	r9
    ca10:	8f 90       	pop	r8
    ca12:	7f 90       	pop	r7
    ca14:	6f 90       	pop	r6
    ca16:	5f 90       	pop	r5
    ca18:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    ca1a:	90 e0       	ldi	r25, 0x00	; 0
    ca1c:	80 e0       	ldi	r24, 0x00	; 0
    ca1e:	54 cf       	rjmp	.-344    	; 0xc8c8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    ca20:	55 24       	eor	r5, r5
    ca22:	5a 94       	dec	r5
    ca24:	92 cf       	rjmp	.-220    	; 0xc94a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5082
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    ca26:	2e 96       	adiw	r28, 0x0e	; 14
    ca28:	1f ae       	std	Y+63, r1	; 0x3f
    ca2a:	2e 97       	sbiw	r28, 0x0e	; 14
    ca2c:	b9 cf       	rjmp	.-142    	; 0xc9a0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>

0000ca2e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4948
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    ca2e:	2f 92       	push	r2
    ca30:	3f 92       	push	r3
    ca32:	4f 92       	push	r4
    ca34:	5f 92       	push	r5
    ca36:	6f 92       	push	r6
    ca38:	7f 92       	push	r7
    ca3a:	8f 92       	push	r8
    ca3c:	9f 92       	push	r9
    ca3e:	af 92       	push	r10
    ca40:	bf 92       	push	r11
    ca42:	cf 92       	push	r12
    ca44:	df 92       	push	r13
    ca46:	ef 92       	push	r14
    ca48:	ff 92       	push	r15
    ca4a:	0f 93       	push	r16
    ca4c:	1f 93       	push	r17
    ca4e:	cf 93       	push	r28
    ca50:	df 93       	push	r29
    ca52:	cd b7       	in	r28, 0x3d	; 61
    ca54:	de b7       	in	r29, 0x3e	; 62
    ca56:	ce 54       	subi	r28, 0x4E	; 78
    ca58:	d1 09       	sbc	r29, r1
    ca5a:	0f b6       	in	r0, 0x3f	; 63
    ca5c:	f8 94       	cli
    ca5e:	de bf       	out	0x3e, r29	; 62
    ca60:	0f be       	out	0x3f, r0	; 63
    ca62:	cd bf       	out	0x3d, r28	; 61
    ca64:	5c 01       	movw	r10, r24
    ca66:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4953
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    ca68:	64 ec       	ldi	r22, 0xC4	; 196
    ca6a:	7c e3       	ldi	r23, 0x3C	; 60
    ca6c:	ce 01       	movw	r24, r28
    ca6e:	01 96       	adiw	r24, 0x01	; 1
    ca70:	6c 01       	movw	r12, r24
    ca72:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4954
  stat = get_global_temp(default_show_temp, str2, &te);
    ca76:	10 91 f9 08 	lds	r17, 0x08F9	; 0x8008f9 <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5535
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    ca7a:	66 ed       	ldi	r22, 0xD6	; 214
    ca7c:	7c e3       	ldi	r23, 0x3C	; 60
    ca7e:	ce 01       	movw	r24, r28
    ca80:	c7 96       	adiw	r24, 0x37	; 55
    ca82:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
    ca86:	51 2c       	mov	r5, r1
    ca88:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    ca8a:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5545
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    ca8c:	0e e1       	ldi	r16, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5539
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    ca8e:	be 01       	movw	r22, r28
    ca90:	6f 5d       	subi	r22, 0xDF	; 223
    ca92:	7f 4f       	sbci	r23, 0xFF	; 255
    ca94:	84 2d       	mov	r24, r4
    ca96:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    ca9a:	81 30       	cpi	r24, 0x01	; 1
    ca9c:	09 f0       	breq	.+2      	; 0xcaa0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x72>
    ca9e:	9c c0       	rjmp	.+312    	; 0xcbd8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5540
      if (tds.used == 1)
    caa0:	89 a1       	ldd	r24, Y+33	; 0x21
    caa2:	81 30       	cpi	r24, 0x01	; 1
    caa4:	09 f0       	breq	.+2      	; 0xcaa8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7a>
    caa6:	98 c0       	rjmp	.+304    	; 0xcbd8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
      {
        if (cri == device)
    caa8:	17 11       	cpse	r17, r7
    caaa:	95 c0       	rjmp	.+298    	; 0xcbd6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5544
        {
          strcpy(name, tds.name);
    caac:	be 01       	movw	r22, r28
    caae:	63 5d       	subi	r22, 0xD3	; 211
    cab0:	7f 4f       	sbci	r23, 0xFF	; 255
    cab2:	ce 01       	movw	r24, r28
    cab4:	c7 96       	adiw	r24, 0x37	; 55
    cab6:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5545
          if (status_tds18s20[idx].online == True)
    caba:	04 9d       	mul	r16, r4
    cabc:	f0 01       	movw	r30, r0
    cabe:	05 9d       	mul	r16, r5
    cac0:	f0 0d       	add	r31, r0
    cac2:	11 24       	eor	r1, r1
    cac4:	ec 58       	subi	r30, 0x8C	; 140
    cac6:	f5 4f       	sbci	r31, 0xF5	; 245
    cac8:	93 8d       	ldd	r25, Z+27	; 0x1b
    caca:	2d 96       	adiw	r28, 0x0d	; 13
    cacc:	9f af       	std	Y+63, r25	; 0x3f
    cace:	2d 97       	sbiw	r28, 0x0d	; 13
    cad0:	91 30       	cpi	r25, 0x01	; 1
    cad2:	09 f0       	breq	.+2      	; 0xcad6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa8>
    cad4:	80 c0       	rjmp	.+256    	; 0xcbd6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5547
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    cad6:	65 81       	ldd	r22, Z+5	; 0x05
    cad8:	76 81       	ldd	r23, Z+6	; 0x06
    cada:	07 2e       	mov	r0, r23
    cadc:	00 0c       	add	r0, r0
    cade:	88 0b       	sbc	r24, r24
    cae0:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5565
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    cae2:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    cae6:	20 e0       	ldi	r18, 0x00	; 0
    cae8:	30 e0       	ldi	r19, 0x00	; 0
    caea:	4a e7       	ldi	r20, 0x7A	; 122
    caec:	54 e4       	ldi	r21, 0x44	; 68
    caee:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
    caf2:	1b 01       	movw	r2, r22
    caf4:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4955
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    caf6:	be 01       	movw	r22, r28
    caf8:	69 5c       	subi	r22, 0xC9	; 201
    cafa:	7f 4f       	sbci	r23, 0xFF	; 255
    cafc:	c6 01       	movw	r24, r12
    cafe:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4956
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    cb02:	ee 24       	eor	r14, r14
    cb04:	ea 94       	dec	r14
    cb06:	fe 2c       	mov	r15, r14
    cb08:	10 e0       	ldi	r17, 0x00	; 0
    cb0a:	00 e0       	ldi	r16, 0x00	; 0
    cb0c:	21 e0       	ldi	r18, 0x01	; 1
    cb0e:	a4 01       	movw	r20, r8
    cb10:	4b 5f       	subi	r20, 0xFB	; 251
    cb12:	5f 4f       	sbci	r21, 0xFF	; 255
    cb14:	b5 01       	movw	r22, r10
    cb16:	6b 5f       	subi	r22, 0xFB	; 251
    cb18:	7f 4f       	sbci	r23, 0xFF	; 255
    cb1a:	c6 01       	movw	r24, r12
    cb1c:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    cb20:	34 01       	movw	r6, r8
    cb22:	94 e1       	ldi	r25, 0x14	; 20
    cb24:	69 0e       	add	r6, r25
    cb26:	71 1c       	adc	r7, r1
    cb28:	c5 01       	movw	r24, r10
    cb2a:	04 96       	adiw	r24, 0x04	; 4
    cb2c:	2f 96       	adiw	r28, 0x0f	; 15
    cb2e:	9f af       	std	Y+63, r25	; 0x3f
    cb30:	8e af       	std	Y+62, r24	; 0x3e
    cb32:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4957
  if (stat == 1)
    cb34:	2d 96       	adiw	r28, 0x0d	; 13
    cb36:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb38:	2d 97       	sbiw	r28, 0x0d	; 13
    cb3a:	91 30       	cpi	r25, 0x01	; 1
    cb3c:	09 f0       	breq	.+2      	; 0xcb40 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x112>
    cb3e:	95 c0       	rjmp	.+298    	; 0xcc6a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4959
  {
    dtostrf(te, 4, 1, str1);
    cb40:	86 01       	movw	r16, r12
    cb42:	21 e0       	ldi	r18, 0x01	; 1
    cb44:	44 e0       	ldi	r20, 0x04	; 4
    cb46:	c2 01       	movw	r24, r4
    cb48:	b1 01       	movw	r22, r2
    cb4a:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4960
    if (strlen(str1) <= 4)
    cb4e:	f6 01       	movw	r30, r12
    cb50:	01 90       	ld	r0, Z+
    cb52:	00 20       	and	r0, r0
    cb54:	e9 f7       	brne	.-6      	; 0xcb50 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    cb56:	31 97       	sbiw	r30, 0x01	; 1
    cb58:	ec 19       	sub	r30, r12
    cb5a:	fd 09       	sbc	r31, r13
    cb5c:	35 97       	sbiw	r30, 0x05	; 5
    cb5e:	28 f4       	brcc	.+10     	; 0xcb6a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4961
      strcat(str1, "C");
    cb60:	61 ed       	ldi	r22, 0xD1	; 209
    cb62:	76 e0       	ldi	r23, 0x06	; 6
    cb64:	c6 01       	movw	r24, r12
    cb66:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4962
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    cb6a:	ee 24       	eor	r14, r14
    cb6c:	ea 94       	dec	r14
    cb6e:	fe 2c       	mov	r15, r14
    cb70:	10 e0       	ldi	r17, 0x00	; 0
    cb72:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4967
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    cb74:	28 e0       	ldi	r18, 0x08	; 8
    cb76:	a3 01       	movw	r20, r6
    cb78:	2f 96       	adiw	r28, 0x0f	; 15
    cb7a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb7c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb7e:	2f 97       	sbiw	r28, 0x0f	; 15
    cb80:	c6 01       	movw	r24, r12
    cb82:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    cb86:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <my_lcd+0xb>
    cb8a:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4970
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    cb8e:	94 01       	movw	r18, r8
    cb90:	2c 5a       	subi	r18, 0xAC	; 172
    cb92:	3f 4f       	sbci	r19, 0xFF	; 255
    cb94:	a5 01       	movw	r20, r10
    cb96:	4c 50       	subi	r20, 0x0C	; 12
    cb98:	5f 4f       	sbci	r21, 0xFF	; 255
    cb9a:	b4 01       	movw	r22, r8
    cb9c:	c5 01       	movw	r24, r10
    cb9e:	0e 94 c3 8a 	call	0x11586	; 0x11586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4971
}
    cba2:	c2 5b       	subi	r28, 0xB2	; 178
    cba4:	df 4f       	sbci	r29, 0xFF	; 255
    cba6:	0f b6       	in	r0, 0x3f	; 63
    cba8:	f8 94       	cli
    cbaa:	de bf       	out	0x3e, r29	; 62
    cbac:	0f be       	out	0x3f, r0	; 63
    cbae:	cd bf       	out	0x3d, r28	; 61
    cbb0:	df 91       	pop	r29
    cbb2:	cf 91       	pop	r28
    cbb4:	1f 91       	pop	r17
    cbb6:	0f 91       	pop	r16
    cbb8:	ff 90       	pop	r15
    cbba:	ef 90       	pop	r14
    cbbc:	df 90       	pop	r13
    cbbe:	cf 90       	pop	r12
    cbc0:	bf 90       	pop	r11
    cbc2:	af 90       	pop	r10
    cbc4:	9f 90       	pop	r9
    cbc6:	8f 90       	pop	r8
    cbc8:	7f 90       	pop	r7
    cbca:	6f 90       	pop	r6
    cbcc:	5f 90       	pop	r5
    cbce:	4f 90       	pop	r4
    cbd0:	3f 90       	pop	r3
    cbd2:	2f 90       	pop	r2
    cbd4:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5552
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    cbd6:	73 94       	inc	r7
    cbd8:	8f ef       	ldi	r24, 0xFF	; 255
    cbda:	48 1a       	sub	r4, r24
    cbdc:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5538
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    cbde:	96 e0       	ldi	r25, 0x06	; 6
    cbe0:	49 16       	cp	r4, r25
    cbe2:	51 04       	cpc	r5, r1
    cbe4:	09 f0       	breq	.+2      	; 0xcbe8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ba>
    cbe6:	53 cf       	rjmp	.-346    	; 0xca8e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x60>
    cbe8:	36 e6       	ldi	r19, 0x66	; 102
    cbea:	23 2e       	mov	r2, r19
    cbec:	31 2c       	mov	r3, r1
    cbee:	41 2c       	mov	r4, r1
    cbf0:	51 2c       	mov	r5, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5555
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cbf2:	61 2c       	mov	r6, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5557
  {
    remote_tds_get_active(idx, &active);
    cbf4:	be 01       	movw	r22, r28
    cbf6:	65 5b       	subi	r22, 0xB5	; 181
    cbf8:	7f 4f       	sbci	r23, 0xFF	; 255
    cbfa:	86 2d       	mov	r24, r6
    cbfc:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5558
    if (active == 1)
    cc00:	2c 96       	adiw	r28, 0x0c	; 12
    cc02:	8f ad       	ldd	r24, Y+63	; 0x3f
    cc04:	2c 97       	sbiw	r28, 0x0c	; 12
    cc06:	2d 96       	adiw	r28, 0x0d	; 13
    cc08:	8f af       	std	Y+63, r24	; 0x3f
    cc0a:	2d 97       	sbiw	r28, 0x0d	; 13
    cc0c:	81 30       	cpi	r24, 0x01	; 1
    cc0e:	d1 f4       	brne	.+52     	; 0xcc44 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5560
    {
      if (cri == device)
    cc10:	17 11       	cpse	r17, r7
    cc12:	17 c0       	rjmp	.+46     	; 0xcc42 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5562
      {
        remote_tds_get_complete(idx, &active, name);
    cc14:	ae 01       	movw	r20, r28
    cc16:	49 5c       	subi	r20, 0xC9	; 201
    cc18:	5f 4f       	sbci	r21, 0xFF	; 255
    cc1a:	be 01       	movw	r22, r28
    cc1c:	65 5b       	subi	r22, 0xB5	; 181
    cc1e:	7f 4f       	sbci	r23, 0xFF	; 255
    cc20:	86 2d       	mov	r24, r6
    cc22:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    cc26:	c2 01       	movw	r24, r4
    cc28:	b1 01       	movw	r22, r2
    cc2a:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5563
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    cc2e:	8a 3f       	cpi	r24, 0xFA	; 250
    cc30:	40 f4       	brcc	.+16     	; 0xcc42 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
remote_tds_get_data():
    cc32:	86 2d       	mov	r24, r6
    cc34:	0e 94 08 31 	call	0x6210	; 0x6210 <remote_tds_get_data(unsigned char) [clone .part.26]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5565
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    cc38:	bc 01       	movw	r22, r24
    cc3a:	99 0f       	add	r25, r25
    cc3c:	88 0b       	sbc	r24, r24
    cc3e:	99 0b       	sbc	r25, r25
    cc40:	50 cf       	rjmp	.-352    	; 0xcae2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5570
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    cc42:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5555
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cc44:	63 94       	inc	r6
    cc46:	93 e0       	ldi	r25, 0x03	; 3
    cc48:	29 0e       	add	r2, r25
    cc4a:	31 1c       	adc	r3, r1
    cc4c:	41 1c       	adc	r4, r1
    cc4e:	51 1c       	adc	r5, r1
    cc50:	84 e8       	ldi	r24, 0x84	; 132
    cc52:	28 16       	cp	r2, r24
    cc54:	31 04       	cpc	r3, r1
    cc56:	41 04       	cpc	r4, r1
    cc58:	51 04       	cpc	r5, r1
    cc5a:	61 f6       	brne	.-104    	; 0xcbf4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5536
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    cc5c:	21 2c       	mov	r2, r1
    cc5e:	31 2c       	mov	r3, r1
    cc60:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5533
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    cc62:	2d 96       	adiw	r28, 0x0d	; 13
    cc64:	1f ae       	std	Y+63, r1	; 0x3f
    cc66:	2d 97       	sbiw	r28, 0x0d	; 13
    cc68:	46 cf       	rjmp	.-372    	; 0xcaf6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4966
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    cc6a:	66 ed       	ldi	r22, 0xD6	; 214
    cc6c:	7c e3       	ldi	r23, 0x3C	; 60
    cc6e:	c6 01       	movw	r24, r12
    cc70:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4967
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    cc74:	ee 24       	eor	r14, r14
    cc76:	ea 94       	dec	r14
    cc78:	fe 2c       	mov	r15, r14
    cc7a:	00 e0       	ldi	r16, 0x00	; 0
    cc7c:	18 ef       	ldi	r17, 0xF8	; 248
    cc7e:	7a cf       	rjmp	.-268    	; 0xcb74 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x146>

0000cc80 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    cc80:	cf 92       	push	r12
    cc82:	df 92       	push	r13
    cc84:	ef 92       	push	r14
    cc86:	ff 92       	push	r15
    cc88:	1f 93       	push	r17
    cc8a:	cf 93       	push	r28
    cc8c:	df 93       	push	r29
    cc8e:	cd b7       	in	r28, 0x3d	; 61
    cc90:	de b7       	in	r29, 0x3e	; 62
    cc92:	63 97       	sbiw	r28, 0x13	; 19
    cc94:	0f b6       	in	r0, 0x3f	; 63
    cc96:	f8 94       	cli
    cc98:	de bf       	out	0x3e, r29	; 62
    cc9a:	0f be       	out	0x3f, r0	; 63
    cc9c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
  uint8_t active = 0;
    cc9e:	1b 8a       	std	Y+19, r1	; 0x13
    cca0:	86 e6       	ldi	r24, 0x66	; 102
    cca2:	c8 2e       	mov	r12, r24
    cca4:	d1 2c       	mov	r13, r1
    cca6:	e1 2c       	mov	r14, r1
    cca8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ccaa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
  {
    remote_tds_get_complete(idx, &active, payload);
    ccac:	ae 01       	movw	r20, r28
    ccae:	4f 5f       	subi	r20, 0xFF	; 255
    ccb0:	5f 4f       	sbci	r21, 0xFF	; 255
    ccb2:	be 01       	movw	r22, r28
    ccb4:	6d 5e       	subi	r22, 0xED	; 237
    ccb6:	7f 4f       	sbci	r23, 0xFF	; 255
    ccb8:	81 2f       	mov	r24, r17
    ccba:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    ccbe:	8b 89       	ldd	r24, Y+19	; 0x13
    ccc0:	81 30       	cpi	r24, 0x01	; 1
    ccc2:	09 f0       	breq	.+2      	; 0xccc6 <send_mqtt_remote_tds_status()+0x46>
    ccc4:	44 c0       	rjmp	.+136    	; 0xcd4e <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    ccc6:	9e 01       	movw	r18, r28
    ccc8:	2f 5f       	subi	r18, 0xFF	; 255
    ccca:	3f 4f       	sbci	r19, 0xFF	; 255
    cccc:	45 eb       	ldi	r20, 0xB5	; 181
    ccce:	53 e0       	ldi	r21, 0x03	; 3
    ccd0:	61 2f       	mov	r22, r17
    ccd2:	8a eb       	ldi	r24, 0xBA	; 186
    ccd4:	93 e0       	ldi	r25, 0x03	; 3
    ccd6:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3983
      itoa(active, payload, 10);
    ccda:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ccdc:	4a e0       	ldi	r20, 0x0A	; 10
    ccde:	be 01       	movw	r22, r28
    cce0:	6f 5f       	subi	r22, 0xFF	; 255
    cce2:	7f 4f       	sbci	r23, 0xFF	; 255
    cce4:	90 e0       	ldi	r25, 0x00	; 0
    cce6:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    ccea:	9e 01       	movw	r18, r28
    ccec:	2f 5f       	subi	r18, 0xFF	; 255
    ccee:	3f 4f       	sbci	r19, 0xFF	; 255
    ccf0:	4f eb       	ldi	r20, 0xBF	; 191
    ccf2:	53 e0       	ldi	r21, 0x03	; 3
    ccf4:	61 2f       	mov	r22, r17
    ccf6:	8a eb       	ldi	r24, 0xBA	; 186
    ccf8:	93 e0       	ldi	r25, 0x03	; 3
    ccfa:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_data():
    ccfe:	81 2f       	mov	r24, r17
    cd00:	0e 94 08 31 	call	0x6210	; 0x6210 <remote_tds_get_data(unsigned char) [clone .part.26]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    cd04:	4a e0       	ldi	r20, 0x0A	; 10
    cd06:	be 01       	movw	r22, r28
    cd08:	6f 5f       	subi	r22, 0xFF	; 255
    cd0a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd0c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3986
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    cd10:	9e 01       	movw	r18, r28
    cd12:	2f 5f       	subi	r18, 0xFF	; 255
    cd14:	3f 4f       	sbci	r19, 0xFF	; 255
    cd16:	46 ec       	ldi	r20, 0xC6	; 198
    cd18:	53 e0       	ldi	r21, 0x03	; 3
    cd1a:	61 2f       	mov	r22, r17
    cd1c:	8a eb       	ldi	r24, 0xBA	; 186
    cd1e:	93 e0       	ldi	r25, 0x03	; 3
    cd20:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    cd24:	c7 01       	movw	r24, r14
    cd26:	b6 01       	movw	r22, r12
    cd28:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    cd2c:	4a e0       	ldi	r20, 0x0A	; 10
    cd2e:	be 01       	movw	r22, r28
    cd30:	6f 5f       	subi	r22, 0xFF	; 255
    cd32:	7f 4f       	sbci	r23, 0xFF	; 255
    cd34:	90 e0       	ldi	r25, 0x00	; 0
    cd36:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3988
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    cd3a:	9e 01       	movw	r18, r28
    cd3c:	2f 5f       	subi	r18, 0xFF	; 255
    cd3e:	3f 4f       	sbci	r19, 0xFF	; 255
    cd40:	4b ec       	ldi	r20, 0xCB	; 203
    cd42:	53 e0       	ldi	r21, 0x03	; 3
    cd44:	61 2f       	mov	r22, r17
    cd46:	8a eb       	ldi	r24, 0xBA	; 186
    cd48:	93 e0       	ldi	r25, 0x03	; 3
    cd4a:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cd4e:	1f 5f       	subi	r17, 0xFF	; 255
    cd50:	83 e0       	ldi	r24, 0x03	; 3
    cd52:	c8 0e       	add	r12, r24
    cd54:	d1 1c       	adc	r13, r1
    cd56:	e1 1c       	adc	r14, r1
    cd58:	f1 1c       	adc	r15, r1
    cd5a:	84 e8       	ldi	r24, 0x84	; 132
    cd5c:	c8 16       	cp	r12, r24
    cd5e:	d1 04       	cpc	r13, r1
    cd60:	e1 04       	cpc	r14, r1
    cd62:	f1 04       	cpc	r15, r1
    cd64:	09 f0       	breq	.+2      	; 0xcd68 <send_mqtt_remote_tds_status()+0xe8>
    cd66:	a2 cf       	rjmp	.-188    	; 0xccac <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    cd68:	63 96       	adiw	r28, 0x13	; 19
    cd6a:	0f b6       	in	r0, 0x3f	; 63
    cd6c:	f8 94       	cli
    cd6e:	de bf       	out	0x3e, r29	; 62
    cd70:	0f be       	out	0x3f, r0	; 63
    cd72:	cd bf       	out	0x3d, r28	; 61
    cd74:	df 91       	pop	r29
    cd76:	cf 91       	pop	r28
    cd78:	1f 91       	pop	r17
    cd7a:	ff 90       	pop	r15
    cd7c:	ef 90       	pop	r14
    cd7e:	df 90       	pop	r13
    cd80:	cf 90       	pop	r12
    cd82:	08 95       	ret

0000cd84 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    cd84:	ef 92       	push	r14
    cd86:	ff 92       	push	r15
    cd88:	0f 93       	push	r16
    cd8a:	1f 93       	push	r17
    cd8c:	cf 93       	push	r28
    cd8e:	df 93       	push	r29
    cd90:	cd b7       	in	r28, 0x3d	; 61
    cd92:	de b7       	in	r29, 0x3e	; 62
    cd94:	63 97       	sbiw	r28, 0x13	; 19
    cd96:	0f b6       	in	r0, 0x3f	; 63
    cd98:	f8 94       	cli
    cd9a:	de bf       	out	0x3e, r29	; 62
    cd9c:	0f be       	out	0x3f, r0	; 63
    cd9e:	cd bf       	out	0x3d, r28	; 61
    cda0:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cda2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    cda4:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    cda6:	ae 01       	movw	r20, r28
    cda8:	4f 5f       	subi	r20, 0xFF	; 255
    cdaa:	5f 4f       	sbci	r21, 0xFF	; 255
    cdac:	be 01       	movw	r22, r28
    cdae:	6d 5e       	subi	r22, 0xED	; 237
    cdb0:	7f 4f       	sbci	r23, 0xFF	; 255
    cdb2:	81 2f       	mov	r24, r17
    cdb4:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
    if (strcmp(name, tmp_name) == 0)
    cdb8:	be 01       	movw	r22, r28
    cdba:	6f 5f       	subi	r22, 0xFF	; 255
    cdbc:	7f 4f       	sbci	r23, 0xFF	; 255
    cdbe:	c7 01       	movw	r24, r14
    cdc0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    cdc4:	89 2b       	or	r24, r25
    cdc6:	09 f4       	brne	.+2      	; 0xcdca <remote_tds_name_exist(char*)+0x46>
    cdc8:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cdca:	1f 5f       	subi	r17, 0xFF	; 255
    cdcc:	1a 30       	cpi	r17, 0x0A	; 10
    cdce:	59 f7       	brne	.-42     	; 0xcda6 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    cdd0:	80 2f       	mov	r24, r16
    cdd2:	63 96       	adiw	r28, 0x13	; 19
    cdd4:	0f b6       	in	r0, 0x3f	; 63
    cdd6:	f8 94       	cli
    cdd8:	de bf       	out	0x3e, r29	; 62
    cdda:	0f be       	out	0x3f, r0	; 63
    cddc:	cd bf       	out	0x3d, r28	; 61
    cdde:	df 91       	pop	r29
    cde0:	cf 91       	pop	r28
    cde2:	1f 91       	pop	r17
    cde4:	0f 91       	pop	r16
    cde6:	ff 90       	pop	r15
    cde8:	ef 90       	pop	r14
    cdea:	08 95       	ret

0000cdec <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5493
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    cdec:	1f 93       	push	r17
    cdee:	cf 93       	push	r28
    cdf0:	df 93       	push	r29
    cdf2:	cd b7       	in	r28, 0x3d	; 61
    cdf4:	de b7       	in	r29, 0x3e	; 62
    cdf6:	62 97       	sbiw	r28, 0x12	; 18
    cdf8:	0f b6       	in	r0, 0x3f	; 63
    cdfa:	f8 94       	cli
    cdfc:	de bf       	out	0x3e, r29	; 62
    cdfe:	0f be       	out	0x3f, r0	; 63
    ce00:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    ce02:	10 91 2b 09 	lds	r17, 0x092B	; 0x80092b <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    ce06:	6d e2       	ldi	r22, 0x2D	; 45
    ce08:	79 e0       	ldi	r23, 0x09	; 9
    ce0a:	ce 01       	movw	r24, r28
    ce0c:	01 96       	adiw	r24, 0x01	; 1
    ce0e:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5498
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    ce12:	89 81       	ldd	r24, Y+1	; 0x01
    ce14:	88 23       	and	r24, r24
    ce16:	71 f0       	breq	.+28     	; 0xce34 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5500
  {
    if (remote_tds_name_exist(name) == 255)
    ce18:	ce 01       	movw	r24, r28
    ce1a:	01 96       	adiw	r24, 0x01	; 1
    ce1c:	0e 94 c2 66 	call	0xcd84	; 0xcd84 <remote_tds_name_exist(char*)>
    ce20:	8f 3f       	cpi	r24, 0xFF	; 255
    ce22:	41 f4       	brne	.+16     	; 0xce34 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    ce24:	1a 30       	cpi	r17, 0x0A	; 10
    ce26:	30 f4       	brcc	.+12     	; 0xce34 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
    ce28:	be 01       	movw	r22, r28
    ce2a:	6f 5f       	subi	r22, 0xFF	; 255
    ce2c:	7f 4f       	sbci	r23, 0xFF	; 255
    ce2e:	81 2f       	mov	r24, r17
    ce30:	0e 94 ac 59 	call	0xb358	; 0xb358 <remote_tds_set_name(unsigned char, char*) [clone .part.22]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5503
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    ce34:	62 96       	adiw	r28, 0x12	; 18
    ce36:	0f b6       	in	r0, 0x3f	; 63
    ce38:	f8 94       	cli
    ce3a:	de bf       	out	0x3e, r29	; 62
    ce3c:	0f be       	out	0x3f, r0	; 63
    ce3e:	cd bf       	out	0x3d, r28	; 61
    ce40:	df 91       	pop	r29
    ce42:	cf 91       	pop	r28
    ce44:	1f 91       	pop	r17
    ce46:	08 95       	ret

0000ce48 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    ce48:	cf 93       	push	r28
    ce4a:	df 93       	push	r29
    ce4c:	cd b7       	in	r28, 0x3d	; 61
    ce4e:	de b7       	in	r29, 0x3e	; 62
    ce50:	c1 58       	subi	r28, 0x81	; 129
    ce52:	d1 09       	sbc	r29, r1
    ce54:	0f b6       	in	r0, 0x3f	; 63
    ce56:	f8 94       	cli
    ce58:	de bf       	out	0x3e, r29	; 62
    ce5a:	0f be       	out	0x3f, r0	; 63
    ce5c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    ce5e:	cf 57       	subi	r28, 0x7F	; 127
    ce60:	df 4f       	sbci	r29, 0xFF	; 255
    ce62:	18 82       	st	Y, r1
    ce64:	c1 58       	subi	r28, 0x81	; 129
    ce66:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2843
  remote_tds_get_complete(idx, &active, tmp1);
    ce68:	ae 01       	movw	r20, r28
    ce6a:	4f 5f       	subi	r20, 0xFF	; 255
    ce6c:	5f 4f       	sbci	r21, 0xFF	; 255
    ce6e:	be 01       	movw	r22, r28
    ce70:	6f 57       	subi	r22, 0x7F	; 127
    ce72:	7f 4f       	sbci	r23, 0xFF	; 255
    ce74:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
  if (active == 1)
    ce78:	cf 57       	subi	r28, 0x7F	; 127
    ce7a:	df 4f       	sbci	r29, 0xFF	; 255
    ce7c:	88 81       	ld	r24, Y
    ce7e:	c1 58       	subi	r28, 0x81	; 129
    ce80:	d0 40       	sbci	r29, 0x00	; 0
    ce82:	81 30       	cpi	r24, 0x01	; 1
    ce84:	a1 f4       	brne	.+40     	; 0xceae <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
  {
    strcpy(tmp2, "/rtds/");
    ce86:	67 ed       	ldi	r22, 0xD7	; 215
    ce88:	73 e0       	ldi	r23, 0x03	; 3
    ce8a:	ce 01       	movw	r24, r28
    ce8c:	8f 5b       	subi	r24, 0xBF	; 191
    ce8e:	9f 4f       	sbci	r25, 0xFF	; 255
    ce90:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
    strcat(tmp2, tmp1);
    ce94:	be 01       	movw	r22, r28
    ce96:	6f 5f       	subi	r22, 0xFF	; 255
    ce98:	7f 4f       	sbci	r23, 0xFF	; 255
    ce9a:	ce 01       	movw	r24, r28
    ce9c:	8f 5b       	subi	r24, 0xBF	; 191
    ce9e:	9f 4f       	sbci	r25, 0xFF	; 255
    cea0:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2848
    mqtt_client.subscribe(tmp2);
    cea4:	ce 01       	movw	r24, r28
    cea6:	8f 5b       	subi	r24, 0xBF	; 191
    cea8:	9f 4f       	sbci	r25, 0xFF	; 255
    ceaa:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
  }
}
    ceae:	cf 57       	subi	r28, 0x7F	; 127
    ceb0:	df 4f       	sbci	r29, 0xFF	; 255
    ceb2:	0f b6       	in	r0, 0x3f	; 63
    ceb4:	f8 94       	cli
    ceb6:	de bf       	out	0x3e, r29	; 62
    ceb8:	0f be       	out	0x3f, r0	; 63
    ceba:	cd bf       	out	0x3d, r28	; 61
    cebc:	df 91       	pop	r29
    cebe:	cf 91       	pop	r28
    cec0:	08 95       	ret

0000cec2 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5478

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    cec2:	1f 93       	push	r17
    cec4:	cf 93       	push	r28
    cec6:	df 93       	push	r29
    cec8:	cd b7       	in	r28, 0x3d	; 61
    ceca:	de b7       	in	r29, 0x3e	; 62
    cecc:	62 97       	sbiw	r28, 0x12	; 18
    cece:	0f b6       	in	r0, 0x3f	; 63
    ced0:	f8 94       	cli
    ced2:	de bf       	out	0x3e, r29	; 62
    ced4:	0f be       	out	0x3f, r0	; 63
    ced6:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    ced8:	10 91 2b 09 	lds	r17, 0x092B	; 0x80092b <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    cedc:	6d e2       	ldi	r22, 0x2D	; 45
    cede:	79 e0       	ldi	r23, 0x09	; 9
    cee0:	ce 01       	movw	r24, r28
    cee2:	01 96       	adiw	r24, 0x01	; 1
    cee4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5484
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    cee8:	89 81       	ldd	r24, Y+1	; 0x01
    ceea:	88 23       	and	r24, r24
    ceec:	81 f0       	breq	.+32     	; 0xcf0e <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5485
    if (remote_tds_name_exist(name) == 255)
    ceee:	ce 01       	movw	r24, r28
    cef0:	01 96       	adiw	r24, 0x01	; 1
    cef2:	0e 94 c2 66 	call	0xcd84	; 0xcd84 <remote_tds_name_exist(char*)>
    cef6:	8f 3f       	cpi	r24, 0xFF	; 255
    cef8:	51 f4       	brne	.+20     	; 0xcf0e <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5487
    {
      remote_tds_set_complete(idx, active, name);
    cefa:	ae 01       	movw	r20, r28
    cefc:	4f 5f       	subi	r20, 0xFF	; 255
    cefe:	5f 4f       	sbci	r21, 0xFF	; 255
    cf00:	61 e0       	ldi	r22, 0x01	; 1
    cf02:	81 2f       	mov	r24, r17
    cf04:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5488
      remote_tds_subscibe_topic(idx);
    cf08:	81 2f       	mov	r24, r17
    cf0a:	0e 94 24 67 	call	0xce48	; 0xce48 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5490
    }
}
    cf0e:	62 96       	adiw	r28, 0x12	; 18
    cf10:	0f b6       	in	r0, 0x3f	; 63
    cf12:	f8 94       	cli
    cf14:	de bf       	out	0x3e, r29	; 62
    cf16:	0f be       	out	0x3f, r0	; 63
    cf18:	cd bf       	out	0x3d, r28	; 61
    cf1a:	df 91       	pop	r29
    cf1c:	cf 91       	pop	r28
    cf1e:	1f 91       	pop	r17
    cf20:	08 95       	ret

0000cf22 <click_rtds_subscribe(unsigned char, unsigned char)>:
_Z20click_rtds_subscribehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5375
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
}
////
void click_rtds_subscribe(uint8_t args1, uint8_t idx)
{
    cf22:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5377
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    cf24:	0c 94 24 67 	jmp	0xce48	; 0xce48 <remote_tds_subscibe_topic(unsigned char)>

0000cf28 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    cf28:	2f 92       	push	r2
    cf2a:	3f 92       	push	r3
    cf2c:	4f 92       	push	r4
    cf2e:	5f 92       	push	r5
    cf30:	6f 92       	push	r6
    cf32:	7f 92       	push	r7
    cf34:	8f 92       	push	r8
    cf36:	9f 92       	push	r9
    cf38:	af 92       	push	r10
    cf3a:	bf 92       	push	r11
    cf3c:	cf 92       	push	r12
    cf3e:	df 92       	push	r13
    cf40:	ef 92       	push	r14
    cf42:	ff 92       	push	r15
    cf44:	0f 93       	push	r16
    cf46:	1f 93       	push	r17
    cf48:	cf 93       	push	r28
    cf4a:	df 93       	push	r29
    cf4c:	cd b7       	in	r28, 0x3d	; 61
    cf4e:	de b7       	in	r29, 0x3e	; 62
    cf50:	cc 52       	subi	r28, 0x2C	; 44
    cf52:	d1 40       	sbci	r29, 0x01	; 1
    cf54:	0f b6       	in	r0, 0x3f	; 63
    cf56:	f8 94       	cli
    cf58:	de bf       	out	0x3e, r29	; 62
    cf5a:	0f be       	out	0x3f, r0	; 63
    cf5c:	cd bf       	out	0x3d, r28	; 61
    cf5e:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    cf60:	1b 82       	std	Y+3, r1	; 0x03
    cf62:	8e ed       	ldi	r24, 0xDE	; 222
    cf64:	93 e0       	ldi	r25, 0x03	; 3
    cf66:	9d 83       	std	Y+5, r25	; 0x05
    cf68:	8c 83       	std	Y+4, r24	; 0x04
    cf6a:	89 e3       	ldi	r24, 0x39	; 57
    cf6c:	95 e0       	ldi	r25, 0x05	; 5
    cf6e:	9f 83       	std	Y+7, r25	; 0x07
    cf70:	8e 83       	std	Y+6, r24	; 0x06
    cf72:	18 86       	std	Y+8, r1	; 0x08
    cf74:	19 86       	std	Y+9, r1	; 0x09
    cf76:	1a 86       	std	Y+10, r1	; 0x0a
    cf78:	1b 86       	std	Y+11, r1	; 0x0b
    cf7a:	80 e6       	ldi	r24, 0x60	; 96
    cf7c:	9a ee       	ldi	r25, 0xEA	; 234
    cf7e:	a0 e0       	ldi	r26, 0x00	; 0
    cf80:	b0 e0       	ldi	r27, 0x00	; 0
    cf82:	8c 87       	std	Y+12, r24	; 0x0c
    cf84:	9d 87       	std	Y+13, r25	; 0x0d
    cf86:	ae 87       	std	Y+14, r26	; 0x0e
    cf88:	bf 87       	std	Y+15, r27	; 0x0f
    cf8a:	18 8a       	std	Y+16, r1	; 0x10
    cf8c:	19 8a       	std	Y+17, r1	; 0x11
    cf8e:	1a 8a       	std	Y+18, r1	; 0x12
    cf90:	1b 8a       	std	Y+19, r1	; 0x13
    cf92:	1c 8a       	std	Y+20, r1	; 0x14
    cf94:	1d 8a       	std	Y+21, r1	; 0x15
    cf96:	1e 8a       	std	Y+22, r1	; 0x16
    cf98:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    cf9a:	8a e8       	ldi	r24, 0x8A	; 138
    cf9c:	90 e1       	ldi	r25, 0x10	; 16
    cf9e:	9a 83       	std	Y+2, r25	; 0x02
    cfa0:	89 83       	std	Y+1, r24	; 0x01
    cfa2:	e6 e3       	ldi	r30, 0x36	; 54
    cfa4:	fb e0       	ldi	r31, 0x0B	; 11
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    cfa6:	80 e0       	ldi	r24, 0x00	; 0
    cfa8:	11 92       	st	Z+, r1
    cfaa:	8f 5f       	subi	r24, 0xFF	; 255
    cfac:	80 38       	cpi	r24, 0x80	; 128
    cfae:	e1 f7       	brne	.-8      	; 0xcfa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    cfb0:	80 91 5f 0a 	lds	r24, 0x0A5F	; 0x800a5f <mqtt_receive_message>
    cfb4:	90 91 60 0a 	lds	r25, 0x0A60	; 0x800a60 <mqtt_receive_message+0x1>
    cfb8:	01 96       	adiw	r24, 0x01	; 1
    cfba:	90 93 60 0a 	sts	0x0A60, r25	; 0x800a60 <mqtt_receive_message+0x1>
    cfbe:	80 93 5f 0a 	sts	0x0A5F, r24	; 0x800a5f <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
  strncpy(my_payload, (char*) payload, length);
    cfc2:	86 e3       	ldi	r24, 0x36	; 54
    cfc4:	9b e0       	ldi	r25, 0x0B	; 11
    cfc6:	0e 94 1d be 	call	0x17c3a	; 0x17c3a <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    cfca:	5e 01       	movw	r10, r28
    cfcc:	28 ec       	ldi	r18, 0xC8	; 200
    cfce:	a2 0e       	add	r10, r18
    cfd0:	b1 1c       	adc	r11, r1
    cfd2:	6b ec       	ldi	r22, 0xCB	; 203
    cfd4:	7a e3       	ldi	r23, 0x3A	; 58
    cfd6:	c5 01       	movw	r24, r10
    cfd8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
  if (strcmp(str1, topic) == 0)
    cfdc:	b4 01       	movw	r22, r8
    cfde:	c5 01       	movw	r24, r10
    cfe0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    cfe4:	89 2b       	or	r24, r25
    cfe6:	49 f4       	brne	.+18     	; 0xcffa <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    cfe8:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    cfec:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    cff0:	01 96       	adiw	r24, 0x01	; 1
    cff2:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    cff6:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3052
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    cffa:	62 ee       	ldi	r22, 0xE2	; 226
    cffc:	7a e3       	ldi	r23, 0x3A	; 58
    cffe:	c5 01       	movw	r24, r10
    d000:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
  if (strcmp(str1, topic) == 0)
    d004:	b4 01       	movw	r22, r8
    d006:	c5 01       	movw	r24, r10
    d008:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d00c:	89 2b       	or	r24, r25
    d00e:	49 f4       	brne	.+18     	; 0xd022 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
  {
    mqtt_process_message++;
    d010:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d014:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d018:	01 96       	adiw	r24, 0x01	; 1
    d01a:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d01e:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3061
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    d022:	69 e0       	ldi	r22, 0x09	; 9
    d024:	7b e3       	ldi	r23, 0x3B	; 59
    d026:	c5 01       	movw	r24, r10
    d028:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
  strcat_P(str1, global_time_set);
    d02c:	6d ea       	ldi	r22, 0xAD	; 173
    d02e:	7a e3       	ldi	r23, 0x3A	; 58
    d030:	c5 01       	movw	r24, r10
    d032:	0e 94 77 b1 	call	0x162ee	; 0x162ee <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3063
  if (strcmp(str1, topic) == 0)
    d036:	b4 01       	movw	r22, r8
    d038:	c5 01       	movw	r24, r10
    d03a:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d03e:	89 2b       	or	r24, r25
    d040:	09 f0       	breq	.+2      	; 0xd044 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    d042:	bb c0       	rjmp	.+374    	; 0xd1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3065
  {
    mqtt_process_message++;
    d044:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d048:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d04c:	01 96       	adiw	r24, 0x01	; 1
    d04e:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d052:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    d056:	20 91 e8 0c 	lds	r18, 0x0CE8	; 0x800ce8 <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    d05a:	86 e3       	ldi	r24, 0x36	; 54
    d05c:	9b e0       	ldi	r25, 0x0B	; 11
    d05e:	89 2b       	or	r24, r25
    d060:	09 f0       	breq	.+2      	; 0xd064 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    d062:	3a c2       	rjmp	.+1140   	; 0xd4d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    d064:	82 ef       	ldi	r24, 0xF2	; 242
    d066:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    d068:	49 ee       	ldi	r20, 0xE9	; 233
    d06a:	5c e0       	ldi	r21, 0x0C	; 12
    d06c:	2a 96       	adiw	r28, 0x0a	; 10
    d06e:	5f af       	std	Y+63, r21	; 0x3f
    d070:	4e af       	std	Y+62, r20	; 0x3e
    d072:	2a 97       	sbiw	r28, 0x0a	; 10
    d074:	2c 96       	adiw	r28, 0x0c	; 12
    d076:	9f af       	std	Y+63, r25	; 0x3f
    d078:	8e af       	std	Y+62, r24	; 0x3e
    d07a:	2c 97       	sbiw	r28, 0x0c	; 12
    d07c:	86 e3       	ldi	r24, 0x36	; 54
    d07e:	9b e0       	ldi	r25, 0x0B	; 11
    d080:	2e 96       	adiw	r28, 0x0e	; 14
    d082:	9f af       	std	Y+63, r25	; 0x3f
    d084:	8e af       	std	Y+62, r24	; 0x3e
    d086:	2e 97       	sbiw	r28, 0x0e	; 14
    d088:	2f 96       	adiw	r28, 0x0f	; 15
    d08a:	2f af       	std	Y+63, r18	; 0x3f
    d08c:	2f 97       	sbiw	r28, 0x0f	; 15
    d08e:	61 96       	adiw	r28, 0x11	; 17
    d090:	1f ae       	std	Y+63, r1	; 0x3f
    d092:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    d094:	10 92 f0 0c 	sts	0x0CF0, r1	; 0x800cf0 <doc+0x8>
    d098:	10 92 ef 0c 	sts	0x0CEF, r1	; 0x800cef <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    d09c:	81 ef       	ldi	r24, 0xF1	; 241
    d09e:	9d e0       	ldi	r25, 0x0D	; 13
    d0a0:	89 2b       	or	r24, r25
    d0a2:	09 f4       	brne	.+2      	; 0xd0a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    d0a4:	1c c2       	rjmp	.+1080   	; 0xd4de <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    d0a6:	10 92 f2 0d 	sts	0x0DF2, r1	; 0x800df2 <doc+0x10a>
    d0aa:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    d0ae:	ca 01       	movw	r24, r20
    d0b0:	ac 01       	movw	r20, r24
    d0b2:	61 ef       	ldi	r22, 0xF1	; 241
    d0b4:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    d0b6:	ce 01       	movw	r24, r28
    d0b8:	88 5b       	subi	r24, 0xB8	; 184
    d0ba:	9f 4f       	sbci	r25, 0xFF	; 255
    d0bc:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    d0c0:	81 ef       	ldi	r24, 0xF1	; 241
    d0c2:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    d0c4:	01 ef       	ldi	r16, 0xF1	; 241
    d0c6:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    d0c8:	89 2b       	or	r24, r25
    d0ca:	51 f0       	breq	.+20     	; 0xd0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    d0cc:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <doc+0x109>
    d0d0:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    d0d4:	03 ef       	ldi	r16, 0xF3	; 243
    d0d6:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    d0d8:	09 97       	sbiw	r24, 0x09	; 9
    d0da:	11 f0       	breq	.+4      	; 0xd0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    d0dc:	10 e0       	ldi	r17, 0x00	; 0
    d0de:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    d0e0:	6b ee       	ldi	r22, 0xEB	; 235
    d0e2:	73 e0       	ldi	r23, 0x03	; 3
    d0e4:	c8 01       	movw	r24, r16
    d0e6:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d0ea:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    d0ec:	89 2b       	or	r24, r25
    d0ee:	09 f4       	brne	.+2      	; 0xd0f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    d0f0:	64 c0       	rjmp	.+200    	; 0xd1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d0f2:	60 ef       	ldi	r22, 0xF0	; 240
    d0f4:	73 e0       	ldi	r23, 0x03	; 3
    d0f6:	c8 01       	movw	r24, r16
    d0f8:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d0fc:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    d0fe:	89 2b       	or	r24, r25
    d100:	09 f4       	brne	.+2      	; 0xd104 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    d102:	5b c0       	rjmp	.+182    	; 0xd1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d104:	66 ef       	ldi	r22, 0xF6	; 246
    d106:	73 e0       	ldi	r23, 0x03	; 3
    d108:	c8 01       	movw	r24, r16
    d10a:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d10e:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    d110:	89 2b       	or	r24, r25
    d112:	09 f4       	brne	.+2      	; 0xd116 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    d114:	52 c0       	rjmp	.+164    	; 0xd1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d116:	6b ef       	ldi	r22, 0xFB	; 251
    d118:	73 e0       	ldi	r23, 0x03	; 3
    d11a:	c8 01       	movw	r24, r16
    d11c:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    d120:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    d122:	89 2b       	or	r24, r25
    d124:	09 f4       	brne	.+2      	; 0xd128 <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    d126:	49 c0       	rjmp	.+146    	; 0xd1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d128:	62 e0       	ldi	r22, 0x02	; 2
    d12a:	74 e0       	ldi	r23, 0x04	; 4
    d12c:	c8 01       	movw	r24, r16
    d12e:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    d132:	00 97       	sbiw	r24, 0x00	; 0
    d134:	09 f4       	brne	.+2      	; 0xd138 <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    d136:	41 c0       	rjmp	.+130    	; 0xd1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    d138:	0e 94 c5 a3 	call	0x1478a	; 0x1478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d13c:	38 2e       	mov	r3, r24
    d13e:	c6 01       	movw	r24, r12
    d140:	0e 94 c5 a3 	call	0x1478a	; 0x1478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d144:	d8 2e       	mov	r13, r24
    d146:	c3 01       	movw	r24, r6
    d148:	0e 94 c5 a3 	call	0x1478a	; 0x1478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d14c:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    d14e:	69 e0       	ldi	r22, 0x09	; 9
    d150:	74 e0       	ldi	r23, 0x04	; 4
    d152:	c8 01       	movw	r24, r16
    d154:	0e 94 a9 2c 	call	0x5952	; 0x5952 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    d158:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    d15a:	00 97       	sbiw	r24, 0x00	; 0
    d15c:	19 f0       	breq	.+6      	; 0xd164 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    d15e:	0e 94 c5 a3 	call	0x1478a	; 0x1478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d162:	18 2f       	mov	r17, r24
    d164:	c2 01       	movw	r24, r4
    d166:	0e 94 c5 a3 	call	0x1478a	; 0x1478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    d16a:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    d16c:	d7 01       	movw	r26, r14
    d16e:	8d 91       	ld	r24, X+
    d170:	9c 91       	ld	r25, X
    d172:	11 97       	sbiw	r26, 0x01	; 1
    d174:	87 30       	cpi	r24, 0x07	; 7
    d176:	91 05       	cpc	r25, r1
    d178:	08 f0       	brcs	.+2      	; 0xd17c <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    d17a:	b4 c1       	rjmp	.+872    	; 0xd4e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    d17c:	85 30       	cpi	r24, 0x05	; 5
    d17e:	91 05       	cpc	r25, r1
    d180:	08 f0       	brcs	.+2      	; 0xd184 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    d182:	be c1       	rjmp	.+892    	; 0xd500 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    d184:	03 97       	sbiw	r24, 0x03	; 3
    d186:	08 f0       	brcs	.+2      	; 0xd18a <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    d188:	cd c1       	rjmp	.+922    	; 0xd524 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    d18a:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    d18c:	29 96       	adiw	r28, 0x09	; 9
    d18e:	6f af       	std	Y+63, r22	; 0x3f
    d190:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d192:	2a 96       	adiw	r28, 0x0a	; 10
    d194:	0f af       	std	Y+63, r16	; 0x3f
    d196:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d198:	2b 96       	adiw	r28, 0x0b	; 11
    d19a:	1f af       	std	Y+63, r17	; 0x3f
    d19c:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d19e:	2c 96       	adiw	r28, 0x0c	; 12
    d1a0:	cf ae       	std	Y+63, r12	; 0x3f
    d1a2:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d1a4:	2d 96       	adiw	r28, 0x0d	; 13
    d1a6:	df ae       	std	Y+63, r13	; 0x3f
    d1a8:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d1aa:	2e 96       	adiw	r28, 0x0e	; 14
    d1ac:	3f ae       	std	Y+63, r3	; 0x3f
    d1ae:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    d1b0:	ce 01       	movw	r24, r28
    d1b2:	88 5b       	subi	r24, 0xB8	; 184
    d1b4:	9f 4f       	sbci	r25, 0xFF	; 255
    d1b6:	0e 94 0f 9a 	call	0x1341e	; 0x1341e <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    d1ba:	69 e0       	ldi	r22, 0x09	; 9
    d1bc:	7b e3       	ldi	r23, 0x3B	; 59
    d1be:	c5 01       	movw	r24, r10
    d1c0:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
  strcat_P(str1, global_time_ntp);
    d1c4:	6d e9       	ldi	r22, 0x9D	; 157
    d1c6:	7a e3       	ldi	r23, 0x3A	; 58
    d1c8:	c5 01       	movw	r24, r10
    d1ca:	0e 94 77 b1 	call	0x162ee	; 0x162ee <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
  if (strcmp(str1, topic) == 0)
    d1ce:	b4 01       	movw	r22, r8
    d1d0:	c5 01       	movw	r24, r10
    d1d2:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d1d6:	89 2b       	or	r24, r25
    d1d8:	09 f0       	breq	.+2      	; 0xd1dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    d1da:	e5 c0       	rjmp	.+458    	; 0xd3a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
  {
    mqtt_process_message++;
    d1dc:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d1e0:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d1e4:	01 96       	adiw	r24, 0x01	; 1
    d1e6:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d1ea:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    d1ee:	81 e0       	ldi	r24, 0x01	; 1
    d1f0:	90 e0       	ldi	r25, 0x00	; 0
    d1f2:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    d1f6:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    d1f8:	7e 01       	movw	r14, r28
    d1fa:	28 e4       	ldi	r18, 0x48	; 72
    d1fc:	e2 0e       	add	r14, r18
    d1fe:	f1 1c       	adc	r15, r1
    d200:	d7 01       	movw	r26, r14
    d202:	1c 92       	st	X, r1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    d204:	0a e0       	ldi	r16, 0x0A	; 10
    d206:	24 e0       	ldi	r18, 0x04	; 4
    d208:	48 ec       	ldi	r20, 0xC8	; 200
    d20a:	5c e0       	ldi	r21, 0x0C	; 12
    d20c:	6e e2       	ldi	r22, 0x2E	; 46
    d20e:	c7 01       	movw	r24, r14
    d210:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    d214:	ce 01       	movw	r24, r28
    d216:	01 96       	adiw	r24, 0x01	; 1
    d218:	0e 94 f3 95 	call	0x12be6	; 0x12be6 <NTPClient::begin()>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    d21c:	20 e1       	ldi	r18, 0x10	; 16
    d21e:	3e e0       	ldi	r19, 0x0E	; 14
    d220:	12 9f       	mul	r17, r18
    d222:	c0 01       	movw	r24, r0
    d224:	13 9f       	mul	r17, r19
    d226:	90 0d       	add	r25, r0
    d228:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    d22a:	09 2e       	mov	r0, r25
    d22c:	00 0c       	add	r0, r0
    d22e:	aa 0b       	sbc	r26, r26
    d230:	bb 0b       	sbc	r27, r27
    d232:	88 87       	std	Y+8, r24	; 0x08
    d234:	99 87       	std	Y+9, r25	; 0x09
    d236:	aa 87       	std	Y+10, r26	; 0x0a
    d238:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    d23a:	fd 82       	std	Y+5, r15	; 0x05
    d23c:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    d23e:	ce 01       	movw	r24, r28
    d240:	01 96       	adiw	r24, 0x01	; 1
    d242:	0e 94 0a 96 	call	0x12c14	; 0x12c14 <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    d246:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    d248:	88 23       	and	r24, r24
    d24a:	09 f4       	brne	.+2      	; 0xd24e <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    d24c:	9a c0       	rjmp	.+308    	; 0xd382 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    d24e:	ce 01       	movw	r24, r28
    d250:	01 96       	adiw	r24, 0x01	; 1
    d252:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <NTPClient::getEpochTime() const>
    d256:	1c e3       	ldi	r17, 0x3C	; 60
    d258:	c1 2e       	mov	r12, r17
    d25a:	d1 2c       	mov	r13, r1
    d25c:	e1 2c       	mov	r14, r1
    d25e:	f1 2c       	mov	r15, r1
    d260:	a7 01       	movw	r20, r14
    d262:	96 01       	movw	r18, r12
    d264:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
    d268:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    d26a:	ce 01       	movw	r24, r28
    d26c:	01 96       	adiw	r24, 0x01	; 1
    d26e:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <NTPClient::getEpochTime() const>
    d272:	00 e1       	ldi	r16, 0x10	; 16
    d274:	40 2e       	mov	r4, r16
    d276:	0e e0       	ldi	r16, 0x0E	; 14
    d278:	50 2e       	mov	r5, r16
    d27a:	61 2c       	mov	r6, r1
    d27c:	71 2c       	mov	r7, r1
    d27e:	a3 01       	movw	r20, r6
    d280:	92 01       	movw	r18, r4
    d282:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
    d286:	a7 01       	movw	r20, r14
    d288:	96 01       	movw	r18, r12
    d28a:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
    d28e:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    d290:	ce 01       	movw	r24, r28
    d292:	01 96       	adiw	r24, 0x01	; 1
    d294:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <NTPClient::getEpochTime() const>
    d298:	20 e8       	ldi	r18, 0x80	; 128
    d29a:	31 e5       	ldi	r19, 0x51	; 81
    d29c:	41 e0       	ldi	r20, 0x01	; 1
    d29e:	50 e0       	ldi	r21, 0x00	; 0
    d2a0:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
    d2a4:	a3 01       	movw	r20, r6
    d2a6:	92 01       	movw	r18, r4
    d2a8:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
    d2ac:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    d2ae:	ce 01       	movw	r24, r28
    d2b0:	01 96       	adiw	r24, 0x01	; 1
    d2b2:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <NTPClient::getEpochTime() const>
    d2b6:	c8 57       	subi	r28, 0x78	; 120
    d2b8:	df 4f       	sbci	r29, 0xFF	; 255
    d2ba:	68 83       	st	Y, r22
    d2bc:	79 83       	std	Y+1, r23	; 0x01
    d2be:	8a 83       	std	Y+2, r24	; 0x02
    d2c0:	9b 83       	std	Y+3, r25	; 0x03
    d2c2:	c8 58       	subi	r28, 0x88	; 136
    d2c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    d2c6:	ce 01       	movw	r24, r28
    d2c8:	88 57       	subi	r24, 0x78	; 120
    d2ca:	9f 4f       	sbci	r25, 0xFF	; 255
    d2cc:	0e 94 95 a2 	call	0x1452a	; 0x1452a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    d2d0:	fc 01       	movw	r30, r24
    d2d2:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    d2d4:	ce 01       	movw	r24, r28
    d2d6:	01 96       	adiw	r24, 0x01	; 1
    d2d8:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <NTPClient::getEpochTime() const>
    d2dc:	c8 57       	subi	r28, 0x78	; 120
    d2de:	df 4f       	sbci	r29, 0xFF	; 255
    d2e0:	68 83       	st	Y, r22
    d2e2:	79 83       	std	Y+1, r23	; 0x01
    d2e4:	8a 83       	std	Y+2, r24	; 0x02
    d2e6:	9b 83       	std	Y+3, r25	; 0x03
    d2e8:	c8 58       	subi	r28, 0x88	; 136
    d2ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    d2ec:	ce 01       	movw	r24, r28
    d2ee:	88 57       	subi	r24, 0x78	; 120
    d2f0:	9f 4f       	sbci	r25, 0xFF	; 255
    d2f2:	0e 94 95 a2 	call	0x1452a	; 0x1452a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    d2f6:	dc 01       	movw	r26, r24
    d2f8:	15 96       	adiw	r26, 0x05	; 5
    d2fa:	0c 91       	ld	r16, X
    d2fc:	00 2e       	mov	r0, r16
    d2fe:	00 0c       	add	r0, r0
    d300:	11 0b       	sbc	r17, r17
    d302:	0f 5f       	subi	r16, 0xFF	; 255
    d304:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    d306:	ce 01       	movw	r24, r28
    d308:	01 96       	adiw	r24, 0x01	; 1
    d30a:	0e 94 d7 95 	call	0x12bae	; 0x12bae <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    d30e:	80 3d       	cpi	r24, 0xD0	; 208
    d310:	b7 e0       	ldi	r27, 0x07	; 7
    d312:	9b 07       	cpc	r25, r27
    d314:	10 f0       	brcs	.+4      	; 0xd31a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    d316:	80 5d       	subi	r24, 0xD0	; 208
    d318:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    d31a:	c8 57       	subi	r28, 0x78	; 120
    d31c:	df 4f       	sbci	r29, 0xFF	; 255
    d31e:	88 83       	st	Y, r24
    d320:	c8 58       	subi	r28, 0x88	; 136
    d322:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d324:	c7 57       	subi	r28, 0x77	; 119
    d326:	df 4f       	sbci	r29, 0xFF	; 255
    d328:	08 83       	st	Y, r16
    d32a:	c9 58       	subi	r28, 0x89	; 137
    d32c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d32e:	c6 57       	subi	r28, 0x76	; 118
    d330:	df 4f       	sbci	r29, 0xFF	; 255
    d332:	c8 82       	st	Y, r12
    d334:	ca 58       	subi	r28, 0x8A	; 138
    d336:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d338:	c5 57       	subi	r28, 0x75	; 117
    d33a:	df 4f       	sbci	r29, 0xFF	; 255
    d33c:	d8 82       	st	Y, r13
    d33e:	cb 58       	subi	r28, 0x8B	; 139
    d340:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d342:	c4 57       	subi	r28, 0x74	; 116
    d344:	df 4f       	sbci	r29, 0xFF	; 255
    d346:	e8 82       	st	Y, r14
    d348:	cc 58       	subi	r28, 0x8C	; 140
    d34a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d34c:	c3 57       	subi	r28, 0x73	; 115
    d34e:	df 4f       	sbci	r29, 0xFF	; 255
    d350:	38 82       	st	Y, r3
    d352:	cd 58       	subi	r28, 0x8D	; 141
    d354:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:409
    d356:	ce 01       	movw	r24, r28
    d358:	88 57       	subi	r24, 0x78	; 120
    d35a:	9f 4f       	sbci	r25, 0xFF	; 255
    d35c:	0e 94 0f 9a 	call	0x1341e	; 0x1341e <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    d360:	ce 01       	movw	r24, r28
    d362:	01 96       	adiw	r24, 0x01	; 1
    d364:	0e 94 d7 95 	call	0x12bae	; 0x12bae <NTPClient::getYear() const>
    d368:	9f 93       	push	r25
    d36a:	8f 93       	push	r24
    d36c:	8d e0       	ldi	r24, 0x0D	; 13
    d36e:	94 e0       	ldi	r25, 0x04	; 4
    d370:	9f 93       	push	r25
    d372:	8f 93       	push	r24
    d374:	0e 94 2c be 	call	0x17c58	; 0x17c58 <printf>
    d378:	0f 90       	pop	r0
    d37a:	0f 90       	pop	r0
    d37c:	0f 90       	pop	r0
    d37e:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    d380:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    d382:	89 81       	ldd	r24, Y+1	; 0x01
    d384:	9a 81       	ldd	r25, Y+2	; 0x02
    d386:	dc 01       	movw	r26, r24
    d388:	ed 91       	ld	r30, X+
    d38a:	fc 91       	ld	r31, X
    d38c:	02 88       	ldd	r0, Z+18	; 0x12
    d38e:	f3 89       	ldd	r31, Z+19	; 0x13
    d390:	e0 2d       	mov	r30, r0
    d392:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    d394:	1b 82       	std	Y+3, r1	; 0x03
    d396:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    d39a:	11 30       	cpi	r17, 0x01	; 1
    d39c:	09 f0       	breq	.+2      	; 0xd3a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    d39e:	ef c0       	rjmp	.+478    	; 0xd57e <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    d3a0:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    d3a2:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3083
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    d3a6:	69 e0       	ldi	r22, 0x09	; 9
    d3a8:	7b e3       	ldi	r23, 0x3B	; 59
    d3aa:	c5 01       	movw	r24, r10
    d3ac:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
  strcat_P(str1, global_time_offset);
    d3b0:	66 e8       	ldi	r22, 0x86	; 134
    d3b2:	7a e3       	ldi	r23, 0x3A	; 58
    d3b4:	c5 01       	movw	r24, r10
    d3b6:	0e 94 77 b1 	call	0x162ee	; 0x162ee <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3085
  if (strcmp(str1, topic) == 0)
    d3ba:	b4 01       	movw	r22, r8
    d3bc:	c5 01       	movw	r24, r10
    d3be:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d3c2:	89 2b       	or	r24, r25
    d3c4:	91 f4       	brne	.+36     	; 0xd3ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3087
  {
    mqtt_process_message++;
    d3c6:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d3ca:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d3ce:	01 96       	adiw	r24, 0x01	; 1
    d3d0:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d3d4:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
    time_set_offset(atoi(my_payload));
    d3d8:	86 e3       	ldi	r24, 0x36	; 54
    d3da:	9b e0       	ldi	r25, 0x0B	; 11
    d3dc:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4128
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    d3e0:	68 2f       	mov	r22, r24
    d3e2:	81 e0       	ldi	r24, 0x01	; 1
    d3e4:	90 e0       	ldi	r25, 0x00	; 0
    d3e6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3092
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    d3ea:	69 e0       	ldi	r22, 0x09	; 9
    d3ec:	7b e3       	ldi	r23, 0x3B	; 59
    d3ee:	c5 01       	movw	r24, r10
    d3f0:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
  strcat(str1, device.nazev);
    d3f4:	60 e9       	ldi	r22, 0x90	; 144
    d3f6:	7c e0       	ldi	r23, 0x0C	; 12
    d3f8:	c5 01       	movw	r24, r10
    d3fa:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  strcat(str1, "/tds/associate");
    d3fe:	62 e1       	ldi	r22, 0x12	; 18
    d400:	74 e0       	ldi	r23, 0x04	; 4
    d402:	c5 01       	movw	r24, r10
    d404:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
  if (strcmp(str1, topic) == 0)
    d408:	b4 01       	movw	r22, r8
    d40a:	c5 01       	movw	r24, r10
    d40c:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3033
  const char tmp1[16];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    d410:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    d412:	89 2b       	or	r24, r25
    d414:	b1 f4       	brne	.+44     	; 0xd442 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
  {
    mqtt_process_message++;
    d416:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d41a:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d41e:	01 96       	adiw	r24, 0x01	; 1
    d420:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d424:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
    id = atoi(my_payload);
    d428:	86 e3       	ldi	r24, 0x36	; 54
    d42a:	9b e0       	ldi	r25, 0x0B	; 11
    d42c:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d430:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    if (tds_associate(id) == 255)
    d432:	0e 94 6c 5d 	call	0xbad8	; 0xbad8 <tds_associate(unsigned char)>
    d436:	8f 3f       	cpi	r24, 0xFF	; 255
    d438:	21 f4       	brne	.+8      	; 0xd442 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
      log_error(&mqtt_client, "tds/associate full or bad id");
    d43a:	81 e2       	ldi	r24, 0x21	; 33
    d43c:	94 e0       	ldi	r25, 0x04	; 4
    d43e:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    d442:	69 e0       	ldi	r22, 0x09	; 9
    d444:	7b e3       	ldi	r23, 0x3B	; 59
    d446:	c5 01       	movw	r24, r10
    d448:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
  strcat(str1, device.nazev);
    d44c:	60 e9       	ldi	r22, 0x90	; 144
    d44e:	7c e0       	ldi	r23, 0x0C	; 12
    d450:	c5 01       	movw	r24, r10
    d452:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3108
  strcat(str1, "/tds/set/");
    d456:	6e e3       	ldi	r22, 0x3E	; 62
    d458:	74 e0       	ldi	r23, 0x04	; 4
    d45a:	c5 01       	movw	r24, r10
    d45c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3109
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d460:	f5 01       	movw	r30, r10
    d462:	01 90       	ld	r0, Z+
    d464:	00 20       	and	r0, r0
    d466:	e9 f7       	brne	.-6      	; 0xd462 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    d468:	31 97       	sbiw	r30, 0x01	; 1
    d46a:	af 01       	movw	r20, r30
    d46c:	4a 19       	sub	r20, r10
    d46e:	5b 09       	sbc	r21, r11
    d470:	b4 01       	movw	r22, r8
    d472:	c5 01       	movw	r24, r10
    d474:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d478:	89 2b       	or	r24, r25
    d47a:	09 f0       	breq	.+2      	; 0xd47e <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    d47c:	02 c1       	rjmp	.+516    	; 0xd682 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3111
  {
    mqtt_process_message++;
    d47e:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d482:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d486:	01 96       	adiw	r24, 0x01	; 1
    d488:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d48c:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d490:	f5 01       	movw	r30, r10
    d492:	01 90       	ld	r0, Z+
    d494:	00 20       	and	r0, r0
    d496:	e9 f7       	brne	.-6      	; 0xd492 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    d498:	31 97       	sbiw	r30, 0x01	; 1
    d49a:	ea 19       	sub	r30, r10
    d49c:	fb 09       	sbc	r31, r11
    d49e:	9e 2f       	mov	r25, r30
    d4a0:	4e 2f       	mov	r20, r30
    d4a2:	84 2f       	mov	r24, r20
    d4a4:	89 1b       	sub	r24, r25
    d4a6:	24 2f       	mov	r18, r20
    d4a8:	30 e0       	ldi	r19, 0x00	; 0
    d4aa:	d4 01       	movw	r26, r8
    d4ac:	0d 90       	ld	r0, X+
    d4ae:	00 20       	and	r0, r0
    d4b0:	e9 f7       	brne	.-6      	; 0xd4ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    d4b2:	11 97       	sbiw	r26, 0x01	; 1
    d4b4:	a8 19       	sub	r26, r8
    d4b6:	b9 09       	sbc	r27, r9
    d4b8:	2a 17       	cp	r18, r26
    d4ba:	3b 07       	cpc	r19, r27
    d4bc:	08 f0       	brcs	.+2      	; 0xd4c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    d4be:	61 c0       	rjmp	.+194    	; 0xd582 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3115
    {
      str1[cnt] = topic[f];
    d4c0:	d5 01       	movw	r26, r10
    d4c2:	a8 0f       	add	r26, r24
    d4c4:	b1 1d       	adc	r27, r1
    d4c6:	28 0d       	add	r18, r8
    d4c8:	39 1d       	adc	r19, r9
    d4ca:	f9 01       	movw	r30, r18
    d4cc:	80 81       	ld	r24, Z
    d4ce:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3116
      str1[cnt + 1] = 0;
    d4d0:	11 96       	adiw	r26, 0x01	; 1
    d4d2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d4d4:	4f 5f       	subi	r20, 0xFF	; 255
    d4d6:	e5 cf       	rjmp	.-54     	; 0xd4a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    d4d8:	86 e3       	ldi	r24, 0x36	; 54
    d4da:	9b e0       	ldi	r25, 0x0B	; 11
    d4dc:	c5 cd       	rjmp	.-1142   	; 0xd068 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    d4de:	81 ef       	ldi	r24, 0xF1	; 241
    d4e0:	9d e0       	ldi	r25, 0x0D	; 13
    d4e2:	e6 cd       	rjmp	.-1076   	; 0xd0b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    d4e4:	87 30       	cpi	r24, 0x07	; 7
    d4e6:	91 05       	cpc	r25, r1
    d4e8:	b1 f0       	breq	.+44     	; 0xd516 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    d4ea:	0a 97       	sbiw	r24, 0x0a	; 10
    d4ec:	09 f0       	breq	.+2      	; 0xd4f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    d4ee:	4d ce       	rjmp	.-870    	; 0xd18a <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    d4f0:	f7 01       	movw	r30, r14
    d4f2:	62 81       	ldd	r22, Z+2	; 0x02
    d4f4:	73 81       	ldd	r23, Z+3	; 0x03
    d4f6:	84 81       	ldd	r24, Z+4	; 0x04
    d4f8:	95 81       	ldd	r25, Z+5	; 0x05
    d4fa:	0e 94 b2 bc 	call	0x17964	; 0x17964 <__fixunssfsi>
    d4fe:	03 c0       	rjmp	.+6      	; 0xd506 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    d500:	f7 01       	movw	r30, r14
    d502:	62 81       	ldd	r22, Z+2	; 0x02
    d504:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    d506:	60 3d       	cpi	r22, 0xD0	; 208
    d508:	f7 e0       	ldi	r31, 0x07	; 7
    d50a:	7f 07       	cpc	r23, r31
    d50c:	08 f4       	brcc	.+2      	; 0xd510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    d50e:	3e ce       	rjmp	.-900    	; 0xd18c <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    d510:	60 5d       	subi	r22, 0xD0	; 208
    d512:	77 40       	sbci	r23, 0x07	; 7
    d514:	3b ce       	rjmp	.-906    	; 0xd18c <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    d516:	12 96       	adiw	r26, 0x02	; 2
    d518:	6d 91       	ld	r22, X+
    d51a:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    d51c:	71 95       	neg	r23
    d51e:	61 95       	neg	r22
    d520:	71 09       	sbc	r23, r1
    d522:	f1 cf       	rjmp	.-30     	; 0xd506 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    d524:	12 96       	adiw	r26, 0x02	; 2
    d526:	ed 91       	ld	r30, X+
    d528:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    d52a:	30 97       	sbiw	r30, 0x00	; 0
    d52c:	09 f4       	brne	.+2      	; 0xd530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    d52e:	2d ce       	rjmp	.-934    	; 0xd18a <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    d530:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    d532:	61 e0       	ldi	r22, 0x01	; 1
    d534:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    d536:	84 37       	cpi	r24, 0x74	; 116
    d538:	09 f4       	brne	.+2      	; 0xd53c <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    d53a:	28 ce       	rjmp	.-944    	; 0xd18c <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    d53c:	8b 32       	cpi	r24, 0x2B	; 43
    d53e:	c9 f0       	breq	.+50     	; 0xd572 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    d540:	8d 32       	cpi	r24, 0x2D	; 45
    d542:	c1 f4       	brne	.+48     	; 0xd574 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    d544:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    d546:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    d548:	70 e0       	ldi	r23, 0x00	; 0
    d54a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    d54c:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    d54e:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    d550:	20 ed       	ldi	r18, 0xD0	; 208
    d552:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    d554:	2a 30       	cpi	r18, 0x0A	; 10
    d556:	80 f4       	brcc	.+32     	; 0xd578 <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    d558:	46 9f       	mul	r20, r22
    d55a:	90 01       	movw	r18, r0
    d55c:	47 9f       	mul	r20, r23
    d55e:	30 0d       	add	r19, r0
    d560:	11 24       	eor	r1, r1
    d562:	b9 01       	movw	r22, r18
    d564:	60 53       	subi	r22, 0x30	; 48
    d566:	71 09       	sbc	r23, r1
    d568:	69 0f       	add	r22, r25
    d56a:	71 1d       	adc	r23, r1
    d56c:	97 fd       	sbrc	r25, 7
    d56e:	7a 95       	dec	r23
    d570:	ee cf       	rjmp	.-36     	; 0xd54e <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    d572:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    d574:	80 e0       	ldi	r24, 0x00	; 0
    d576:	e8 cf       	rjmp	.-48     	; 0xd548 <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    d578:	81 11       	cpse	r24, r1
    d57a:	d0 cf       	rjmp	.-96     	; 0xd51c <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    d57c:	c4 cf       	rjmp	.-120    	; 0xd506 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    d57e:	82 60       	ori	r24, 0x02	; 2
    d580:	10 cf       	rjmp	.-480    	; 0xd3a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d582:	6c ed       	ldi	r22, 0xDC	; 220
    d584:	73 e0       	ldi	r23, 0x03	; 3
    d586:	c5 01       	movw	r24, r10
    d588:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    d58c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d58e:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    d590:	b8 e4       	ldi	r27, 0x48	; 72
    d592:	eb 2e       	mov	r14, r27
    d594:	f1 2c       	mov	r15, r1
    d596:	ec 0e       	add	r14, r28
    d598:	fd 1e       	adc	r15, r29
    d59a:	fc e0       	ldi	r31, 0x0C	; 12
    d59c:	ef 0e       	add	r14, r31
    d59e:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3121
    pch = strtok (str1, "/");
    while (pch != NULL)
    d5a0:	01 15       	cp	r16, r1
    d5a2:	11 05       	cpc	r17, r1
    d5a4:	09 f4       	brne	.+2      	; 0xd5a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    d5a6:	6d c0       	rjmp	.+218    	; 0xd682 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3123
    {
      if (cnt == 0) id = atoi(pch);
    d5a8:	61 10       	cpse	r6, r1
    d5aa:	0d c0       	rjmp	.+26     	; 0xd5c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    d5ac:	c8 01       	movw	r24, r16
    d5ae:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d5b2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3124
      if (id < HW_ONEWIRE_MAXROMS)
    d5b4:	25 e0       	ldi	r18, 0x05	; 5
    d5b6:	28 17       	cp	r18, r24
    d5b8:	08 f0       	brcs	.+2      	; 0xd5bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    d5ba:	5a c0       	rjmp	.+180    	; 0xd670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3132
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    d5bc:	8f e7       	ldi	r24, 0x7F	; 127
    d5be:	94 e0       	ldi	r25, 0x04	; 4
    d5c0:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d5c4:	55 c0       	rjmp	.+170    	; 0xd670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3124
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    d5c6:	85 e0       	ldi	r24, 0x05	; 5
    d5c8:	87 15       	cp	r24, r7
    d5ca:	c0 f3       	brcs	.-16     	; 0xd5bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3126
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    d5cc:	a1 e0       	ldi	r26, 0x01	; 1
    d5ce:	6a 12       	cpse	r6, r26
    d5d0:	4f c0       	rjmp	.+158    	; 0xd670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    d5d2:	65 eb       	ldi	r22, 0xB5	; 181
    d5d4:	73 e0       	ldi	r23, 0x03	; 3
    d5d6:	c8 01       	movw	r24, r16
    d5d8:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d5dc:	89 2b       	or	r24, r25
    d5de:	89 f4       	brne	.+34     	; 0xd602 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d5e0:	be 01       	movw	r22, r28
    d5e2:	68 5b       	subi	r22, 0xB8	; 184
    d5e4:	7f 4f       	sbci	r23, 0xFF	; 255
    d5e6:	87 2d       	mov	r24, r7
    d5e8:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    d5ec:	66 e3       	ldi	r22, 0x36	; 54
    d5ee:	7b e0       	ldi	r23, 0x0B	; 11
    d5f0:	c7 01       	movw	r24, r14
    d5f2:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    d5f6:	be 01       	movw	r22, r28
    d5f8:	68 5b       	subi	r22, 0xB8	; 184
    d5fa:	7f 4f       	sbci	r23, 0xFF	; 255
    d5fc:	87 2d       	mov	r24, r7
    d5fe:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3127
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    d602:	60 ec       	ldi	r22, 0xC0	; 192
    d604:	77 e0       	ldi	r23, 0x07	; 7
    d606:	c8 01       	movw	r24, r16
    d608:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d60c:	89 2b       	or	r24, r25
    d60e:	a9 f4       	brne	.+42     	; 0xd63a <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    d610:	86 e3       	ldi	r24, 0x36	; 54
    d612:	9b e0       	ldi	r25, 0x0B	; 11
    d614:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d618:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d61a:	be 01       	movw	r22, r28
    d61c:	68 5b       	subi	r22, 0xB8	; 184
    d61e:	7f 4f       	sbci	r23, 0xFF	; 255
    d620:	87 2d       	mov	r24, r7
    d622:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    d626:	64 96       	adiw	r28, 0x14	; 20
    d628:	df ae       	std	Y+63, r13	; 0x3f
    d62a:	ce ae       	std	Y+62, r12	; 0x3e
    d62c:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    d62e:	be 01       	movw	r22, r28
    d630:	68 5b       	subi	r22, 0xB8	; 184
    d632:	7f 4f       	sbci	r23, 0xFF	; 255
    d634:	87 2d       	mov	r24, r7
    d636:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3128
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    d63a:	63 e4       	ldi	r22, 0x43	; 67
    d63c:	76 e0       	ldi	r23, 0x06	; 6
    d63e:	c8 01       	movw	r24, r16
    d640:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d644:	89 2b       	or	r24, r25
    d646:	a1 f4       	brne	.+40     	; 0xd670 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    d648:	86 e3       	ldi	r24, 0x36	; 54
    d64a:	9b e0       	ldi	r25, 0x0B	; 11
    d64c:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d650:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    d652:	be 01       	movw	r22, r28
    d654:	68 5b       	subi	r22, 0xB8	; 184
    d656:	7f 4f       	sbci	r23, 0xFF	; 255
    d658:	87 2d       	mov	r24, r7
    d65a:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3128
    d65e:	6d 96       	adiw	r28, 0x1d	; 29
    d660:	1f af       	std	Y+63, r17	; 0x3f
    d662:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    d664:	be 01       	movw	r22, r28
    d666:	68 5b       	subi	r22, 0xB8	; 184
    d668:	7f 4f       	sbci	r23, 0xFF	; 255
    d66a:	87 2d       	mov	r24, r7
    d66c:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3134
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    d670:	6c ed       	ldi	r22, 0xDC	; 220
    d672:	73 e0       	ldi	r23, 0x03	; 3
    d674:	90 e0       	ldi	r25, 0x00	; 0
    d676:	80 e0       	ldi	r24, 0x00	; 0
    d678:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    d67c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3135
      cnt++;
    d67e:	63 94       	inc	r6
    d680:	8f cf       	rjmp	.-226    	; 0xd5a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    d682:	69 e0       	ldi	r22, 0x09	; 9
    d684:	7b e3       	ldi	r23, 0x3B	; 59
    d686:	c5 01       	movw	r24, r10
    d688:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3141
  strcat(str1, device.nazev);
    d68c:	60 e9       	ldi	r22, 0x90	; 144
    d68e:	7c e0       	ldi	r23, 0x0C	; 12
    d690:	c5 01       	movw	r24, r10
    d692:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3142
  strcat(str1, "/tds/clear");
    d696:	68 e4       	ldi	r22, 0x48	; 72
    d698:	74 e0       	ldi	r23, 0x04	; 4
    d69a:	c5 01       	movw	r24, r10
    d69c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d6a0:	f5 01       	movw	r30, r10
    d6a2:	01 90       	ld	r0, Z+
    d6a4:	00 20       	and	r0, r0
    d6a6:	e9 f7       	brne	.-6      	; 0xd6a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    d6a8:	31 97       	sbiw	r30, 0x01	; 1
    d6aa:	af 01       	movw	r20, r30
    d6ac:	4a 19       	sub	r20, r10
    d6ae:	5b 09       	sbc	r21, r11
    d6b0:	b4 01       	movw	r22, r8
    d6b2:	c5 01       	movw	r24, r10
    d6b4:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d6b8:	89 2b       	or	r24, r25
    d6ba:	a1 f4       	brne	.+40     	; 0xd6e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3145
  {
    mqtt_process_message++;
    d6bc:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d6c0:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d6c4:	01 96       	adiw	r24, 0x01	; 1
    d6c6:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d6ca:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3146
    id = atoi(my_payload);
    d6ce:	86 e3       	ldi	r24, 0x36	; 54
    d6d0:	9b e0       	ldi	r25, 0x0B	; 11
    d6d2:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d6d6:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3147
    if (id < HW_ONEWIRE_MAXROMS)
    d6d8:	b5 e0       	ldi	r27, 0x05	; 5
    d6da:	b8 17       	cp	r27, r24
    d6dc:	08 f4       	brcc	.+2      	; 0xd6e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    d6de:	83 c0       	rjmp	.+262    	; 0xd7e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3148
      tds_set_clear(id);
    d6e0:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3157
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    d6e4:	69 e0       	ldi	r22, 0x09	; 9
    d6e6:	7b e3       	ldi	r23, 0x3B	; 59
    d6e8:	c5 01       	movw	r24, r10
    d6ea:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3158
  strcat(str1, device.nazev);
    d6ee:	60 e9       	ldi	r22, 0x90	; 144
    d6f0:	7c e0       	ldi	r23, 0x0C	; 12
    d6f2:	c5 01       	movw	r24, r10
    d6f4:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3159
  strcat(str1, "/rtds/register");
    d6f8:	64 e6       	ldi	r22, 0x64	; 100
    d6fa:	74 e0       	ldi	r23, 0x04	; 4
    d6fc:	c5 01       	movw	r24, r10
    d6fe:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d702:	f5 01       	movw	r30, r10
    d704:	01 90       	ld	r0, Z+
    d706:	00 20       	and	r0, r0
    d708:	e9 f7       	brne	.-6      	; 0xd704 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    d70a:	31 97       	sbiw	r30, 0x01	; 1
    d70c:	af 01       	movw	r20, r30
    d70e:	4a 19       	sub	r20, r10
    d710:	5b 09       	sbc	r21, r11
    d712:	b4 01       	movw	r22, r8
    d714:	c5 01       	movw	r24, r10
    d716:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d71a:	89 2b       	or	r24, r25
    d71c:	d1 f4       	brne	.+52     	; 0xd752 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3162
  {
    mqtt_process_message++;
    d71e:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d722:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d726:	01 96       	adiw	r24, 0x01	; 1
    d728:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d72c:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3163
    if (remote_tds_name_exist(my_payload) == 255)
    d730:	86 e3       	ldi	r24, 0x36	; 54
    d732:	9b e0       	ldi	r25, 0x0B	; 11
    d734:	0e 94 c2 66 	call	0xcd84	; 0xcd84 <remote_tds_name_exist(char*)>
    d738:	8f 3f       	cpi	r24, 0xFF	; 255
    d73a:	59 f4       	brne	.+22     	; 0xd752 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
    {
      id = remote_tds_find_free();
    d73c:	0e 94 bc 62 	call	0xc578	; 0xc578 <remote_tds_find_free()>
    d740:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3166
      remote_tds_set_complete(id, 1, my_payload);
    d742:	46 e3       	ldi	r20, 0x36	; 54
    d744:	5b e0       	ldi	r21, 0x0B	; 11
    d746:	61 e0       	ldi	r22, 0x01	; 1
    d748:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3167
      remote_tds_subscibe_topic(id);
    d74c:	87 2d       	mov	r24, r7
    d74e:	0e 94 24 67 	call	0xce48	; 0xce48 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3173
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    d752:	69 e0       	ldi	r22, 0x09	; 9
    d754:	7b e3       	ldi	r23, 0x3B	; 59
    d756:	c5 01       	movw	r24, r10
    d758:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3174
  strcat(str1, device.nazev);
    d75c:	60 e9       	ldi	r22, 0x90	; 144
    d75e:	7c e0       	ldi	r23, 0x0C	; 12
    d760:	c5 01       	movw	r24, r10
    d762:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
  strcat(str1, "/rtds/set/");
    d766:	63 e7       	ldi	r22, 0x73	; 115
    d768:	74 e0       	ldi	r23, 0x04	; 4
    d76a:	c5 01       	movw	r24, r10
    d76c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d770:	f5 01       	movw	r30, r10
    d772:	01 90       	ld	r0, Z+
    d774:	00 20       	and	r0, r0
    d776:	e9 f7       	brne	.-6      	; 0xd772 <mqtt_callback(char*, unsigned char*, unsigned int)+0x84a>
    d778:	31 97       	sbiw	r30, 0x01	; 1
    d77a:	af 01       	movw	r20, r30
    d77c:	4a 19       	sub	r20, r10
    d77e:	5b 09       	sbc	r21, r11
    d780:	b4 01       	movw	r22, r8
    d782:	c5 01       	movw	r24, r10
    d784:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d788:	89 2b       	or	r24, r25
    d78a:	09 f0       	breq	.+2      	; 0xd78e <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    d78c:	6a c0       	rjmp	.+212    	; 0xd862 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
  {
    mqtt_process_message++;
    d78e:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d792:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d796:	01 96       	adiw	r24, 0x01	; 1
    d798:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d79c:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3180
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d7a0:	f5 01       	movw	r30, r10
    d7a2:	01 90       	ld	r0, Z+
    d7a4:	00 20       	and	r0, r0
    d7a6:	e9 f7       	brne	.-6      	; 0xd7a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
    d7a8:	31 97       	sbiw	r30, 0x01	; 1
    d7aa:	ea 19       	sub	r30, r10
    d7ac:	fb 09       	sbc	r31, r11
    d7ae:	9e 2f       	mov	r25, r30
    d7b0:	4e 2f       	mov	r20, r30
    d7b2:	84 2f       	mov	r24, r20
    d7b4:	89 1b       	sub	r24, r25
    d7b6:	24 2f       	mov	r18, r20
    d7b8:	30 e0       	ldi	r19, 0x00	; 0
    d7ba:	d4 01       	movw	r26, r8
    d7bc:	0d 90       	ld	r0, X+
    d7be:	00 20       	and	r0, r0
    d7c0:	e9 f7       	brne	.-6      	; 0xd7bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x894>
    d7c2:	11 97       	sbiw	r26, 0x01	; 1
    d7c4:	a8 19       	sub	r26, r8
    d7c6:	b9 09       	sbc	r27, r9
    d7c8:	2a 17       	cp	r18, r26
    d7ca:	3b 07       	cpc	r19, r27
    d7cc:	88 f4       	brcc	.+34     	; 0xd7f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3182
    {
      str1[cnt] = topic[f];
    d7ce:	d5 01       	movw	r26, r10
    d7d0:	a8 0f       	add	r26, r24
    d7d2:	b1 1d       	adc	r27, r1
    d7d4:	28 0d       	add	r18, r8
    d7d6:	39 1d       	adc	r19, r9
    d7d8:	f9 01       	movw	r30, r18
    d7da:	80 81       	ld	r24, Z
    d7dc:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3183
      str1[cnt + 1] = 0;
    d7de:	11 96       	adiw	r26, 0x01	; 1
    d7e0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3180
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d7e2:	4f 5f       	subi	r20, 0xFF	; 255
    d7e4:	e6 cf       	rjmp	.-52     	; 0xd7b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3150
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    d7e6:	83 e5       	ldi	r24, 0x53	; 83
    d7e8:	94 e0       	ldi	r25, 0x04	; 4
    d7ea:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d7ee:	7a cf       	rjmp	.-268    	; 0xd6e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3187
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d7f0:	6c ed       	ldi	r22, 0xDC	; 220
    d7f2:	73 e0       	ldi	r23, 0x03	; 3
    d7f4:	c5 01       	movw	r24, r10
    d7f6:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3186
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d7fa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3188
    pch = strtok (str1, "/");
    while (pch != NULL)
    d7fc:	00 97       	sbiw	r24, 0x00	; 0
    d7fe:	89 f1       	breq	.+98     	; 0xd862 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
    {
      if (cnt == 0) id = atoi(pch);
    d800:	11 11       	cpse	r17, r1
    d802:	0b c0       	rjmp	.+22     	; 0xd81a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f2>
    d804:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d808:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3204
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    d80a:	6c ed       	ldi	r22, 0xDC	; 220
    d80c:	73 e0       	ldi	r23, 0x03	; 3
    d80e:	90 e0       	ldi	r25, 0x00	; 0
    d810:	80 e0       	ldi	r24, 0x00	; 0
    d812:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
      cnt++;
    d816:	1f 5f       	subi	r17, 0xFF	; 255
    d818:	f1 cf       	rjmp	.-30     	; 0xd7fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3191
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    d81a:	11 30       	cpi	r17, 0x01	; 1
    d81c:	b1 f7       	brne	.-20     	; 0xd80a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
    d81e:	65 eb       	ldi	r22, 0xB5	; 181
    d820:	73 e0       	ldi	r23, 0x03	; 3
    d822:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    d826:	89 2b       	or	r24, r25
    d828:	81 f7       	brne	.-32     	; 0xd80a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
      {
        remote_tds_get_active(id, &active);
    d82a:	be 01       	movw	r22, r28
    d82c:	64 5d       	subi	r22, 0xD4	; 212
    d82e:	7e 4f       	sbci	r23, 0xFE	; 254
    d830:	87 2d       	mov	r24, r7
    d832:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3194
        if (active == 0)
    d836:	c4 5d       	subi	r28, 0xD4	; 212
    d838:	de 4f       	sbci	r29, 0xFE	; 254
    d83a:	88 81       	ld	r24, Y
    d83c:	cc 52       	subi	r28, 0x2C	; 44
    d83e:	d1 40       	sbci	r29, 0x01	; 1
    d840:	81 11       	cpse	r24, r1
    d842:	0a c0       	rjmp	.+20     	; 0xd858 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3196
        {
          remote_tds_set_complete(id, 1, my_payload);
    d844:	46 e3       	ldi	r20, 0x36	; 54
    d846:	5b e0       	ldi	r21, 0x0B	; 11
    d848:	61 e0       	ldi	r22, 0x01	; 1
    d84a:	87 2d       	mov	r24, r7
    d84c:	0e 94 da 59 	call	0xb3b4	; 0xb3b4 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
          remote_tds_subscibe_topic(id);
    d850:	87 2d       	mov	r24, r7
    d852:	0e 94 24 67 	call	0xce48	; 0xce48 <remote_tds_subscibe_topic(unsigned char)>
    d856:	d9 cf       	rjmp	.-78     	; 0xd80a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3201
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    d858:	8e e7       	ldi	r24, 0x7E	; 126
    d85a:	94 e0       	ldi	r25, 0x04	; 4
    d85c:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d860:	d4 cf       	rjmp	.-88     	; 0xd80a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    d862:	69 e0       	ldi	r22, 0x09	; 9
    d864:	7b e3       	ldi	r23, 0x3B	; 59
    d866:	c5 01       	movw	r24, r10
    d868:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
  strcat(str1, device.nazev);
    d86c:	60 e9       	ldi	r22, 0x90	; 144
    d86e:	7c e0       	ldi	r23, 0x0C	; 12
    d870:	c5 01       	movw	r24, r10
    d872:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
  strcat(str1, "/rtds/clear");
    d876:	6e e8       	ldi	r22, 0x8E	; 142
    d878:	74 e0       	ldi	r23, 0x04	; 4
    d87a:	c5 01       	movw	r24, r10
    d87c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d880:	f5 01       	movw	r30, r10
    d882:	01 90       	ld	r0, Z+
    d884:	00 20       	and	r0, r0
    d886:	e9 f7       	brne	.-6      	; 0xd882 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    d888:	31 97       	sbiw	r30, 0x01	; 1
    d88a:	af 01       	movw	r20, r30
    d88c:	4a 19       	sub	r20, r10
    d88e:	5b 09       	sbc	r21, r11
    d890:	b4 01       	movw	r22, r8
    d892:	c5 01       	movw	r24, r10
    d894:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d898:	89 2b       	or	r24, r25
    d89a:	09 f0       	breq	.+2      	; 0xd89e <mqtt_callback(char*, unsigned char*, unsigned int)+0x976>
    d89c:	6f c0       	rjmp	.+222    	; 0xd97c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3216
  {
    mqtt_process_message++;
    d89e:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d8a2:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d8a6:	01 96       	adiw	r24, 0x01	; 1
    d8a8:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d8ac:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3217
    id = atoi(my_payload);
    d8b0:	86 e3       	ldi	r24, 0x36	; 54
    d8b2:	9b e0       	ldi	r25, 0x0B	; 11
    d8b4:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    d8b8:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    d8ba:	c8 5f       	subi	r28, 0xF8	; 248
    d8bc:	de 4f       	sbci	r29, 0xFE	; 254
    d8be:	18 82       	st	Y, r1
    d8c0:	c8 50       	subi	r28, 0x08	; 8
    d8c2:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2858
  remote_tds_get_complete(idx, &active, tmp1);
    d8c4:	ae 01       	movw	r20, r28
    d8c6:	48 57       	subi	r20, 0x78	; 120
    d8c8:	5f 4f       	sbci	r21, 0xFF	; 255
    d8ca:	be 01       	movw	r22, r28
    d8cc:	68 5f       	subi	r22, 0xF8	; 248
    d8ce:	7e 4f       	sbci	r23, 0xFE	; 254
    d8d0:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2859
  if (active == 1)
    d8d4:	c8 5f       	subi	r28, 0xF8	; 248
    d8d6:	de 4f       	sbci	r29, 0xFE	; 254
    d8d8:	88 81       	ld	r24, Y
    d8da:	c8 50       	subi	r28, 0x08	; 8
    d8dc:	d1 40       	sbci	r29, 0x01	; 1
    d8de:	81 30       	cpi	r24, 0x01	; 1
    d8e0:	09 f0       	breq	.+2      	; 0xd8e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
    d8e2:	49 c0       	rjmp	.+146    	; 0xd976 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2861
  {
    strcpy(tmp2, "/rtds/");
    d8e4:	8e 01       	movw	r16, r28
    d8e6:	08 5b       	subi	r16, 0xB8	; 184
    d8e8:	1f 4f       	sbci	r17, 0xFF	; 255
    d8ea:	67 ed       	ldi	r22, 0xD7	; 215
    d8ec:	73 e0       	ldi	r23, 0x03	; 3
    d8ee:	c8 01       	movw	r24, r16
    d8f0:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2862
    strcat(tmp2, tmp1);
    d8f4:	be 01       	movw	r22, r28
    d8f6:	68 57       	subi	r22, 0x78	; 120
    d8f8:	7f 4f       	sbci	r23, 0xFF	; 255
    d8fa:	c8 01       	movw	r24, r16
    d8fc:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    d900:	d8 01       	movw	r26, r16
    d902:	0d 90       	ld	r0, X+
    d904:	00 20       	and	r0, r0
    d906:	e9 f7       	brne	.-6      	; 0xd902 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
    d908:	cd 01       	movw	r24, r26
    d90a:	80 1b       	sub	r24, r16
    d90c:	91 0b       	sbc	r25, r17
    d90e:	08 96       	adiw	r24, 0x08	; 8
    d910:	81 30       	cpi	r24, 0x01	; 1
    d912:	92 40       	sbci	r25, 0x02	; 2
    d914:	80 f5       	brcc	.+96     	; 0xd976 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    d916:	8d e6       	ldi	r24, 0x6D	; 109
    d918:	9e e0       	ldi	r25, 0x0E	; 14
    d91a:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
    d91e:	88 23       	and	r24, r24
    d920:	51 f1       	breq	.+84     	; 0xd976 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    d922:	80 91 6f 10 	lds	r24, 0x106F	; 0x80106f <mqtt_client+0x202>
    d926:	90 91 70 10 	lds	r25, 0x1070	; 0x801070 <mqtt_client+0x203>
    d92a:	01 96       	adiw	r24, 0x01	; 1
    d92c:	90 93 70 10 	sts	0x1070, r25	; 0x801070 <mqtt_client+0x203>
    d930:	80 93 6f 10 	sts	0x106F, r24	; 0x80106f <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    d934:	89 2b       	or	r24, r25
    d936:	31 f4       	brne	.+12     	; 0xd944 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    d938:	81 e0       	ldi	r24, 0x01	; 1
    d93a:	90 e0       	ldi	r25, 0x00	; 0
    d93c:	90 93 70 10 	sts	0x1070, r25	; 0x801070 <mqtt_client+0x203>
    d940:	80 93 6f 10 	sts	0x106F, r24	; 0x80106f <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    d944:	80 91 6f 10 	lds	r24, 0x106F	; 0x80106f <mqtt_client+0x202>
    d948:	90 91 70 10 	lds	r25, 0x1070	; 0x801070 <mqtt_client+0x203>
    d94c:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    d950:	80 93 75 0e 	sts	0x0E75, r24	; 0x800e75 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    d954:	47 e0       	ldi	r20, 0x07	; 7
    d956:	50 e0       	ldi	r21, 0x00	; 0
    d958:	6f e6       	ldi	r22, 0x6F	; 111
    d95a:	7e e0       	ldi	r23, 0x0E	; 14
    d95c:	c8 01       	movw	r24, r16
    d95e:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    d962:	9c 01       	movw	r18, r24
    d964:	25 50       	subi	r18, 0x05	; 5
    d966:	31 09       	sbc	r19, r1
    d968:	4f e6       	ldi	r20, 0x6F	; 111
    d96a:	5e e0       	ldi	r21, 0x0E	; 14
    d96c:	62 ea       	ldi	r22, 0xA2	; 162
    d96e:	8d e6       	ldi	r24, 0x6D	; 109
    d970:	9e e0       	ldi	r25, 0x0E	; 14
    d972:	0e 94 16 9c 	call	0x1382c	; 0x1382c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3220
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    d976:	87 2d       	mov	r24, r7
    d978:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3224
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    d97c:	69 e0       	ldi	r22, 0x09	; 9
    d97e:	7b e3       	ldi	r23, 0x3B	; 59
    d980:	c5 01       	movw	r24, r10
    d982:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
  strcat(str1, device.nazev);
    d986:	60 e9       	ldi	r22, 0x90	; 144
    d988:	7c e0       	ldi	r23, 0x0C	; 12
    d98a:	c5 01       	movw	r24, r10
    d98c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
  strcat(str1, "/rtds/get");
    d990:	6a e9       	ldi	r22, 0x9A	; 154
    d992:	74 e0       	ldi	r23, 0x04	; 4
    d994:	c5 01       	movw	r24, r10
    d996:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3227
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d99a:	f5 01       	movw	r30, r10
    d99c:	01 90       	ld	r0, Z+
    d99e:	00 20       	and	r0, r0
    d9a0:	e9 f7       	brne	.-6      	; 0xd99c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    d9a2:	31 97       	sbiw	r30, 0x01	; 1
    d9a4:	af 01       	movw	r20, r30
    d9a6:	4a 19       	sub	r20, r10
    d9a8:	5b 09       	sbc	r21, r11
    d9aa:	b4 01       	movw	r22, r8
    d9ac:	c5 01       	movw	r24, r10
    d9ae:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d9b2:	89 2b       	or	r24, r25
    d9b4:	11 f4       	brne	.+4      	; 0xd9ba <mqtt_callback(char*, unsigned char*, unsigned int)+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3229
  {
    send_mqtt_remote_tds_status();
    d9b6:	0e 94 40 66 	call	0xcc80	; 0xcc80 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    d9ba:	67 ed       	ldi	r22, 0xD7	; 215
    d9bc:	73 e0       	ldi	r23, 0x03	; 3
    d9be:	c5 01       	movw	r24, r10
    d9c0:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d9c4:	f5 01       	movw	r30, r10
    d9c6:	01 90       	ld	r0, Z+
    d9c8:	00 20       	and	r0, r0
    d9ca:	e9 f7       	brne	.-6      	; 0xd9c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa9e>
    d9cc:	31 97       	sbiw	r30, 0x01	; 1
    d9ce:	af 01       	movw	r20, r30
    d9d0:	4a 19       	sub	r20, r10
    d9d2:	5b 09       	sbc	r21, r11
    d9d4:	b4 01       	movw	r22, r8
    d9d6:	c5 01       	movw	r24, r10
    d9d8:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    d9dc:	89 2b       	or	r24, r25
    d9de:	09 f0       	breq	.+2      	; 0xd9e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
    d9e0:	74 c0       	rjmp	.+232    	; 0xdaca <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236
  {
    mqtt_process_message++;
    d9e2:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    d9e6:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    d9ea:	01 96       	adiw	r24, 0x01	; 1
    d9ec:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    d9f0:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d9f4:	f5 01       	movw	r30, r10
    d9f6:	01 90       	ld	r0, Z+
    d9f8:	00 20       	and	r0, r0
    d9fa:	e9 f7       	brne	.-6      	; 0xd9f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
    d9fc:	31 97       	sbiw	r30, 0x01	; 1
    d9fe:	ea 19       	sub	r30, r10
    da00:	fb 09       	sbc	r31, r11
    da02:	9e 2f       	mov	r25, r30
    da04:	4e 2f       	mov	r20, r30
    da06:	84 2f       	mov	r24, r20
    da08:	89 1b       	sub	r24, r25
    da0a:	24 2f       	mov	r18, r20
    da0c:	30 e0       	ldi	r19, 0x00	; 0
    da0e:	d4 01       	movw	r26, r8
    da10:	0d 90       	ld	r0, X+
    da12:	00 20       	and	r0, r0
    da14:	e9 f7       	brne	.-6      	; 0xda10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae8>
    da16:	11 97       	sbiw	r26, 0x01	; 1
    da18:	a8 19       	sub	r26, r8
    da1a:	b9 09       	sbc	r27, r9
    da1c:	2a 17       	cp	r18, r26
    da1e:	3b 07       	cpc	r19, r27
    da20:	60 f4       	brcc	.+24     	; 0xda3a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3240
    {
      str1[cnt] = topic[f];
    da22:	d5 01       	movw	r26, r10
    da24:	a8 0f       	add	r26, r24
    da26:	b1 1d       	adc	r27, r1
    da28:	28 0d       	add	r18, r8
    da2a:	39 1d       	adc	r19, r9
    da2c:	f9 01       	movw	r30, r18
    da2e:	80 81       	ld	r24, Z
    da30:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3241
      str1[cnt + 1] = 0;
    da32:	11 96       	adiw	r26, 0x01	; 1
    da34:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    da36:	4f 5f       	subi	r20, 0xFF	; 255
    da38:	e6 cf       	rjmp	.-52     	; 0xda06 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    da3a:	a4 e6       	ldi	r26, 0x64	; 100
    da3c:	ca 2e       	mov	r12, r26
    da3e:	d1 2c       	mov	r13, r1
    da40:	e1 2c       	mov	r14, r1
    da42:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    da44:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3246
    {
      uint8_t active = 0;
    da46:	29 96       	adiw	r28, 0x09	; 9
    da48:	1f ae       	std	Y+63, r1	; 0x3f
    da4a:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3247
      remote_tds_get_complete(idx, &active, tmp1);
    da4c:	ae 01       	movw	r20, r28
    da4e:	44 5e       	subi	r20, 0xE4	; 228
    da50:	5e 4f       	sbci	r21, 0xFE	; 254
    da52:	be 01       	movw	r22, r28
    da54:	68 5b       	subi	r22, 0xB8	; 184
    da56:	7f 4f       	sbci	r23, 0xFF	; 255
    da58:	81 2f       	mov	r24, r17
    da5a:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
      if (active == 1 && strcmp(tmp1, str1) == 0)
    da5e:	29 96       	adiw	r28, 0x09	; 9
    da60:	8f ad       	ldd	r24, Y+63	; 0x3f
    da62:	29 97       	sbiw	r28, 0x09	; 9
    da64:	81 30       	cpi	r24, 0x01	; 1
    da66:	21 f5       	brne	.+72     	; 0xdab0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
    da68:	b5 01       	movw	r22, r10
    da6a:	ce 01       	movw	r24, r28
    da6c:	84 5e       	subi	r24, 0xE4	; 228
    da6e:	9e 4f       	sbci	r25, 0xFE	; 254
    da70:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    da74:	89 2b       	or	r24, r25
    da76:	e1 f4       	brne	.+56     	; 0xdab0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3250
      {
        remote_tds_set_data(idx, atoi(my_payload));
    da78:	86 e3       	ldi	r24, 0x36	; 54
    da7a:	9b e0       	ldi	r25, 0x0B	; 11
    da7c:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    da80:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2907
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    da82:	48 2f       	mov	r20, r24
    da84:	c7 01       	movw	r24, r14
    da86:	b6 01       	movw	r22, r12
    da88:	0e 94 f2 90 	call	0x121e4	; 0x121e4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2908
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    da8c:	40 2f       	mov	r20, r16
    da8e:	c7 01       	movw	r24, r14
    da90:	b6 01       	movw	r22, r12
    da92:	6f 5f       	subi	r22, 0xFF	; 255
    da94:	7f 4f       	sbci	r23, 0xFF	; 255
    da96:	8f 4f       	sbci	r24, 0xFF	; 255
    da98:	9f 4f       	sbci	r25, 0xFF	; 255
    da9a:	0e 94 f2 90 	call	0x121e4	; 0x121e4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2909
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    da9e:	40 e0       	ldi	r20, 0x00	; 0
    daa0:	c7 01       	movw	r24, r14
    daa2:	b6 01       	movw	r22, r12
    daa4:	6e 5f       	subi	r22, 0xFE	; 254
    daa6:	7f 4f       	sbci	r23, 0xFF	; 255
    daa8:	8f 4f       	sbci	r24, 0xFF	; 255
    daaa:	9f 4f       	sbci	r25, 0xFF	; 255
    daac:	0e 94 f2 90 	call	0x121e4	; 0x121e4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    dab0:	1f 5f       	subi	r17, 0xFF	; 255
    dab2:	f3 e0       	ldi	r31, 0x03	; 3
    dab4:	cf 0e       	add	r12, r31
    dab6:	d1 1c       	adc	r13, r1
    dab8:	e1 1c       	adc	r14, r1
    daba:	f1 1c       	adc	r15, r1
    dabc:	22 e8       	ldi	r18, 0x82	; 130
    dabe:	c2 16       	cp	r12, r18
    dac0:	d1 04       	cpc	r13, r1
    dac2:	e1 04       	cpc	r14, r1
    dac4:	f1 04       	cpc	r15, r1
    dac6:	09 f0       	breq	.+2      	; 0xdaca <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
    dac8:	be cf       	rjmp	.-132    	; 0xda46 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3254
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    daca:	64 ea       	ldi	r22, 0xA4	; 164
    dacc:	74 e0       	ldi	r23, 0x04	; 4
    dace:	c5 01       	movw	r24, r10
    dad0:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3269
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    dad4:	69 e0       	ldi	r22, 0x09	; 9
    dad6:	7b e3       	ldi	r23, 0x3B	; 59
    dad8:	c5 01       	movw	r24, r10
    dada:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3270
  strcat(str1, device.nazev);
    dade:	60 e9       	ldi	r22, 0x90	; 144
    dae0:	7c e0       	ldi	r23, 0x0C	; 12
    dae2:	c5 01       	movw	r24, r10
    dae4:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3271
  strcat(str1, "/prog/set/");
    dae8:	6f ea       	ldi	r22, 0xAF	; 175
    daea:	74 e0       	ldi	r23, 0x04	; 4
    daec:	c5 01       	movw	r24, r10
    daee:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3272
  if (strncmp(str1, topic, strlen(str1)) == 0)
    daf2:	f5 01       	movw	r30, r10
    daf4:	01 90       	ld	r0, Z+
    daf6:	00 20       	and	r0, r0
    daf8:	e9 f7       	brne	.-6      	; 0xdaf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
    dafa:	31 97       	sbiw	r30, 0x01	; 1
    dafc:	af 01       	movw	r20, r30
    dafe:	4a 19       	sub	r20, r10
    db00:	5b 09       	sbc	r21, r11
    db02:	b4 01       	movw	r22, r8
    db04:	c5 01       	movw	r24, r10
    db06:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    db0a:	89 2b       	or	r24, r25
    db0c:	09 f0       	breq	.+2      	; 0xdb10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe8>
    db0e:	75 c0       	rjmp	.+234    	; 0xdbfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3274
  {
    mqtt_process_message++;
    db10:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    db14:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    db18:	01 96       	adiw	r24, 0x01	; 1
    db1a:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    db1e:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    db22:	f5 01       	movw	r30, r10
    db24:	01 90       	ld	r0, Z+
    db26:	00 20       	and	r0, r0
    db28:	e9 f7       	brne	.-6      	; 0xdb24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfc>
    db2a:	31 97       	sbiw	r30, 0x01	; 1
    db2c:	ea 19       	sub	r30, r10
    db2e:	fb 09       	sbc	r31, r11
    db30:	9e 2f       	mov	r25, r30
    db32:	4e 2f       	mov	r20, r30
    db34:	84 2f       	mov	r24, r20
    db36:	89 1b       	sub	r24, r25
    db38:	24 2f       	mov	r18, r20
    db3a:	30 e0       	ldi	r19, 0x00	; 0
    db3c:	d4 01       	movw	r26, r8
    db3e:	0d 90       	ld	r0, X+
    db40:	00 20       	and	r0, r0
    db42:	e9 f7       	brne	.-6      	; 0xdb3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc16>
    db44:	11 97       	sbiw	r26, 0x01	; 1
    db46:	a8 19       	sub	r26, r8
    db48:	b9 09       	sbc	r27, r9
    db4a:	2a 17       	cp	r18, r26
    db4c:	3b 07       	cpc	r19, r27
    db4e:	60 f4       	brcc	.+24     	; 0xdb68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3278
    {
      str1[cnt] = topic[f];
    db50:	d5 01       	movw	r26, r10
    db52:	a8 0f       	add	r26, r24
    db54:	b1 1d       	adc	r27, r1
    db56:	28 0d       	add	r18, r8
    db58:	39 1d       	adc	r19, r9
    db5a:	f9 01       	movw	r30, r18
    db5c:	80 81       	ld	r24, Z
    db5e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3279
      str1[cnt + 1] = 0;
    db60:	11 96       	adiw	r26, 0x01	; 1
    db62:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    db64:	4f 5f       	subi	r20, 0xFF	; 255
    db66:	e6 cf       	rjmp	.-52     	; 0xdb34 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3283
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    db68:	6c ed       	ldi	r22, 0xDC	; 220
    db6a:	73 e0       	ldi	r23, 0x03	; 3
    db6c:	c5 01       	movw	r24, r10
    db6e:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    db72:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    db74:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    db76:	fd e4       	ldi	r31, 0x4D	; 77
    db78:	ef 2e       	mov	r14, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3284
    pch = strtok (str1, "/");
    while (pch != NULL)
    db7a:	01 15       	cp	r16, r1
    db7c:	11 05       	cpc	r17, r1
    db7e:	e9 f1       	breq	.+122    	; 0xdbfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
    {
      if (cnt == 0) id = atoi(pch);
    db80:	f1 10       	cpse	r15, r1
    db82:	0c c0       	rjmp	.+24     	; 0xdb9c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    db84:	c8 01       	movw	r24, r16
    db86:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    db8a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
      if (id < AVAILABLE_PROGRAM)
    db8c:	f7 e0       	ldi	r31, 0x07	; 7
    db8e:	f8 17       	cp	r31, r24
    db90:	58 f5       	brcc	.+86     	; 0xdbe8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3294
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    db92:	8a eb       	ldi	r24, 0xBA	; 186
    db94:	94 e0       	ldi	r25, 0x04	; 4
    db96:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    db9a:	26 c0       	rjmp	.+76     	; 0xdbe8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    db9c:	27 e0       	ldi	r18, 0x07	; 7
    db9e:	27 15       	cp	r18, r7
    dba0:	c0 f3       	brcs	.-16     	; 0xdb92 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3289
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    dba2:	81 e0       	ldi	r24, 0x01	; 1
    dba4:	f8 12       	cpse	r15, r24
    dba6:	20 c0       	rjmp	.+64     	; 0xdbe8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    dba8:	65 eb       	ldi	r22, 0xB5	; 181
    dbaa:	73 e0       	ldi	r23, 0x03	; 3
    dbac:	c8 01       	movw	r24, r16
    dbae:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    dbb2:	89 2b       	or	r24, r25
    dbb4:	29 f4       	brne	.+10     	; 0xdbc0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc98>
    dbb6:	66 e3       	ldi	r22, 0x36	; 54
    dbb8:	7b e0       	ldi	r23, 0x0B	; 11
    dbba:	87 2d       	mov	r24, r7
    dbbc:	0e 94 ad 56 	call	0xad5a	; 0xad5a <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    dbc0:	6f eb       	ldi	r22, 0xBF	; 191
    dbc2:	73 e0       	ldi	r23, 0x03	; 3
    dbc4:	c8 01       	movw	r24, r16
    dbc6:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    dbca:	89 2b       	or	r24, r25
    dbcc:	69 f4       	brne	.+26     	; 0xdbe8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    dbce:	86 e3       	ldi	r24, 0x36	; 54
    dbd0:	9b e0       	ldi	r25, 0x0B	; 11
    dbd2:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:295
    dbd6:	7e 9c       	mul	r7, r14
    dbd8:	90 01       	movw	r18, r0
    dbda:	11 24       	eor	r1, r1
    dbdc:	68 2f       	mov	r22, r24
    dbde:	c9 01       	movw	r24, r18
    dbe0:	8f 50       	subi	r24, 0x0F	; 15
    dbe2:	9e 4f       	sbci	r25, 0xFE	; 254
    dbe4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3296
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    dbe8:	6c ed       	ldi	r22, 0xDC	; 220
    dbea:	73 e0       	ldi	r23, 0x03	; 3
    dbec:	90 e0       	ldi	r25, 0x00	; 0
    dbee:	80 e0       	ldi	r24, 0x00	; 0
    dbf0:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    dbf4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3297
      cnt++;
    dbf6:	f3 94       	inc	r15
    dbf8:	c0 cf       	rjmp	.-128    	; 0xdb7a <mqtt_callback(char*, unsigned char*, unsigned int)+0xc52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    dbfa:	69 e0       	ldi	r22, 0x09	; 9
    dbfc:	7b e3       	ldi	r23, 0x3B	; 59
    dbfe:	c5 01       	movw	r24, r10
    dc00:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3302
  strcat(str1, device.nazev);
    dc04:	60 e9       	ldi	r22, 0x90	; 144
    dc06:	7c e0       	ldi	r23, 0x0C	; 12
    dc08:	c5 01       	movw	r24, r10
    dc0a:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
  strcat(str1, "/prog/clear");
    dc0e:	6a ec       	ldi	r22, 0xCA	; 202
    dc10:	74 e0       	ldi	r23, 0x04	; 4
    dc12:	c5 01       	movw	r24, r10
    dc14:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
  if (strncmp(str1, topic, strlen(str1)) == 0)
    dc18:	f5 01       	movw	r30, r10
    dc1a:	01 90       	ld	r0, Z+
    dc1c:	00 20       	and	r0, r0
    dc1e:	e9 f7       	brne	.-6      	; 0xdc1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
    dc20:	31 97       	sbiw	r30, 0x01	; 1
    dc22:	af 01       	movw	r20, r30
    dc24:	4a 19       	sub	r20, r10
    dc26:	5b 09       	sbc	r21, r11
    dc28:	b4 01       	movw	r22, r8
    dc2a:	c5 01       	movw	r24, r10
    dc2c:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    dc30:	89 2b       	or	r24, r25
    dc32:	09 f0       	breq	.+2      	; 0xdc36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    dc34:	52 c0       	rjmp	.+164    	; 0xdcda <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
  {
    mqtt_process_message++;
    dc36:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    dc3a:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    dc3e:	01 96       	adiw	r24, 0x01	; 1
    dc40:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    dc44:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
    id = atoi(my_payload);
    dc48:	86 e3       	ldi	r24, 0x36	; 54
    dc4a:	9b e0       	ldi	r25, 0x0B	; 11
    dc4c:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    dc50:	18 2f       	mov	r17, r24
    dc52:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3308
    if (id < AVAILABLE_PROGRAM)
    dc54:	a7 e0       	ldi	r26, 0x07	; 7
    dc56:	a8 17       	cp	r26, r24
    dc58:	08 f4       	brcc	.+2      	; 0xdc5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
    dc5a:	89 c0       	rjmp	.+274    	; 0xdd6e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3310
    {
      strcpy(tmp2, "PROG");
    dc5c:	66 ed       	ldi	r22, 0xD6	; 214
    dc5e:	74 e0       	ldi	r23, 0x04	; 4
    dc60:	ce 01       	movw	r24, r28
    dc62:	88 57       	subi	r24, 0x78	; 120
    dc64:	9f 4f       	sbci	r25, 0xFF	; 255
    dc66:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3311
      thermostat_program_set_name(id, tmp2);
    dc6a:	be 01       	movw	r22, r28
    dc6c:	68 57       	subi	r22, 0x78	; 120
    dc6e:	7f 4f       	sbci	r23, 0xFF	; 255
    dc70:	81 2f       	mov	r24, r17
    dc72:	0e 94 ad 56 	call	0xad5a	; 0xad5a <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:295
    dc76:	bd e4       	ldi	r27, 0x4D	; 77
    dc78:	1b 9f       	mul	r17, r27
    dc7a:	c0 01       	movw	r24, r0
    dc7c:	11 24       	eor	r1, r1
    dc7e:	60 e0       	ldi	r22, 0x00	; 0
    dc80:	8f 50       	subi	r24, 0x0F	; 15
    dc82:	9e 4f       	sbci	r25, 0xFE	; 254
    dc84:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3313
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    dc88:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3315
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    dc8a:	c1 2c       	mov	r12, r1
    dc8c:	e1 2c       	mov	r14, r1
    dc8e:	00 e0       	ldi	r16, 0x00	; 0
    dc90:	20 e0       	ldi	r18, 0x00	; 0
    dc92:	40 e0       	ldi	r20, 0x00	; 0
    dc94:	61 2f       	mov	r22, r17
    dc96:	87 2d       	mov	r24, r7
    dc98:	0e 94 71 56 	call	0xace2	; 0xace2 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3316
        thermostat_program_set_threshold(id, progid, 220);
    dc9c:	4c ed       	ldi	r20, 0xDC	; 220
    dc9e:	50 e0       	ldi	r21, 0x00	; 0
    dca0:	61 2f       	mov	r22, r17
    dca2:	87 2d       	mov	r24, r7
    dca4:	0e 94 55 56 	call	0xacaa	; 0xacaa <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3317
        thermostat_program_set_week(id, progid, 0);
    dca8:	40 e0       	ldi	r20, 0x00	; 0
    dcaa:	61 2f       	mov	r22, r17
    dcac:	87 2d       	mov	r24, r7
    dcae:	0e 94 47 56 	call	0xac8e	; 0xac8e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3313
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    dcb2:	1f 5f       	subi	r17, 0xFF	; 255
    dcb4:	1b 30       	cpi	r17, 0x0B	; 11
    dcb6:	49 f7       	brne	.-46     	; 0xdc8a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    dcb8:	0b e5       	ldi	r16, 0x5B	; 91
    dcba:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    dcbc:	c8 01       	movw	r24, r16
    dcbe:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    dcc2:	78 12       	cpse	r7, r24
    dcc4:	04 c0       	rjmp	.+8      	; 0xdcce <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
thermostat_ring_set_program_id():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    dcc6:	6f ef       	ldi	r22, 0xFF	; 255
    dcc8:	c8 01       	movw	r24, r16
    dcca:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    dcce:	0f 5d       	subi	r16, 0xDF	; 223
    dcd0:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    dcd2:	01 15       	cp	r16, r1
    dcd4:	e2 e0       	ldi	r30, 0x02	; 2
    dcd6:	1e 07       	cpc	r17, r30
    dcd8:	89 f7       	brne	.-30     	; 0xdcbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    dcda:	69 e0       	ldi	r22, 0x09	; 9
    dcdc:	7b e3       	ldi	r23, 0x3B	; 59
    dcde:	c5 01       	movw	r24, r10
    dce0:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3334
  strcat(str1, device.nazev);
    dce4:	60 e9       	ldi	r22, 0x90	; 144
    dce6:	7c e0       	ldi	r23, 0x0C	; 12
    dce8:	c5 01       	movw	r24, r10
    dcea:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
  strcat(str1, "/prog_interval/set/");
    dcee:	6d ee       	ldi	r22, 0xED	; 237
    dcf0:	74 e0       	ldi	r23, 0x04	; 4
    dcf2:	c5 01       	movw	r24, r10
    dcf4:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3336
  if (strncmp(str1, topic, strlen(str1)) == 0)
    dcf8:	f5 01       	movw	r30, r10
    dcfa:	01 90       	ld	r0, Z+
    dcfc:	00 20       	and	r0, r0
    dcfe:	e9 f7       	brne	.-6      	; 0xdcfa <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd2>
    dd00:	31 97       	sbiw	r30, 0x01	; 1
    dd02:	af 01       	movw	r20, r30
    dd04:	4a 19       	sub	r20, r10
    dd06:	5b 09       	sbc	r21, r11
    dd08:	b4 01       	movw	r22, r8
    dd0a:	c5 01       	movw	r24, r10
    dd0c:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    dd10:	89 2b       	or	r24, r25
    dd12:	09 f0       	breq	.+2      	; 0xdd16 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdee>
    dd14:	02 c1       	rjmp	.+516    	; 0xdf1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3338
  {
    mqtt_process_message++;
    dd16:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    dd1a:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    dd1e:	01 96       	adiw	r24, 0x01	; 1
    dd20:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    dd24:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dd28:	f5 01       	movw	r30, r10
    dd2a:	01 90       	ld	r0, Z+
    dd2c:	00 20       	and	r0, r0
    dd2e:	e9 f7       	brne	.-6      	; 0xdd2a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe02>
    dd30:	31 97       	sbiw	r30, 0x01	; 1
    dd32:	ea 19       	sub	r30, r10
    dd34:	fb 09       	sbc	r31, r11
    dd36:	9e 2f       	mov	r25, r30
    dd38:	4e 2f       	mov	r20, r30
    dd3a:	84 2f       	mov	r24, r20
    dd3c:	89 1b       	sub	r24, r25
    dd3e:	24 2f       	mov	r18, r20
    dd40:	30 e0       	ldi	r19, 0x00	; 0
    dd42:	d4 01       	movw	r26, r8
    dd44:	0d 90       	ld	r0, X+
    dd46:	00 20       	and	r0, r0
    dd48:	e9 f7       	brne	.-6      	; 0xdd44 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1c>
    dd4a:	11 97       	sbiw	r26, 0x01	; 1
    dd4c:	a8 19       	sub	r26, r8
    dd4e:	b9 09       	sbc	r27, r9
    dd50:	2a 17       	cp	r18, r26
    dd52:	3b 07       	cpc	r19, r27
    dd54:	88 f4       	brcc	.+34     	; 0xdd78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
    {
      str1[cnt] = topic[f];
    dd56:	d5 01       	movw	r26, r10
    dd58:	a8 0f       	add	r26, r24
    dd5a:	b1 1d       	adc	r27, r1
    dd5c:	28 0d       	add	r18, r8
    dd5e:	39 1d       	adc	r19, r9
    dd60:	f9 01       	movw	r30, r18
    dd62:	80 81       	ld	r24, Z
    dd64:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
      str1[cnt + 1] = 0;
    dd66:	11 96       	adiw	r26, 0x01	; 1
    dd68:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dd6a:	4f 5f       	subi	r20, 0xFF	; 255
    dd6c:	e6 cf       	rjmp	.-52     	; 0xdd3a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3329
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    dd6e:	8b ed       	ldi	r24, 0xDB	; 219
    dd70:	94 e0       	ldi	r25, 0x04	; 4
    dd72:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    dd76:	b1 cf       	rjmp	.-158    	; 0xdcda <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    dd78:	6c ed       	ldi	r22, 0xDC	; 220
    dd7a:	73 e0       	ldi	r23, 0x03	; 3
    dd7c:	c5 01       	movw	r24, r10
    dd7e:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    dd82:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3034
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    dd84:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3346
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dd86:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    dd88:	76 e0       	ldi	r23, 0x06	; 6
    dd8a:	37 2e       	mov	r3, r23
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:305
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    dd8c:	ef e0       	ldi	r30, 0x0F	; 15
    dd8e:	6e 2e       	mov	r6, r30
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3348
    pch = strtok (str1, "/");
    while (pch != NULL)
    dd90:	41 14       	cp	r4, r1
    dd92:	51 04       	cpc	r5, r1
    dd94:	09 f4       	brne	.+2      	; 0xdd98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
    dd96:	c1 c0       	rjmp	.+386    	; 0xdf1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3350
    {
      if (cnt == 0) id = atoi(pch);
    dd98:	d1 10       	cpse	r13, r1
    dd9a:	7e c0       	rjmp	.+252    	; 0xde98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf70>
    dd9c:	c2 01       	movw	r24, r4
    dd9e:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    dda2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    dda4:	27 e0       	ldi	r18, 0x07	; 7
    dda6:	27 15       	cp	r18, r7
    dda8:	08 f4       	brcc	.+2      	; 0xddac <mqtt_callback(char*, unsigned char*, unsigned int)+0xe84>
    ddaa:	b2 c0       	rjmp	.+356    	; 0xdf10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe8>
    ddac:	8a e0       	ldi	r24, 0x0A	; 10
    ddae:	8f 15       	cp	r24, r15
    ddb0:	08 f4       	brcc	.+2      	; 0xddb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe8c>
    ddb2:	ae c0       	rjmp	.+348    	; 0xdf10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3354
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    ddb4:	a2 e0       	ldi	r26, 0x02	; 2
    ddb6:	da 12       	cpse	r13, r26
    ddb8:	a2 c0       	rjmp	.+324    	; 0xdefe <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
    ddba:	6f eb       	ldi	r22, 0xBF	; 191
    ddbc:	73 e0       	ldi	r23, 0x03	; 3
    ddbe:	c2 01       	movw	r24, r4
    ddc0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    ddc4:	89 2b       	or	r24, r25
    ddc6:	a1 f5       	brne	.+104    	; 0xde30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf08>
    ddc8:	86 e3       	ldi	r24, 0x36	; 54
    ddca:	9b e0       	ldi	r25, 0x0B	; 11
    ddcc:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    ddd0:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    ddd2:	bd e4       	ldi	r27, 0x4D	; 77
    ddd4:	7b 9e       	mul	r7, r27
    ddd6:	80 01       	movw	r16, r0
    ddd8:	11 24       	eor	r1, r1
    ddda:	0f 50       	subi	r16, 0x0F	; 15
    dddc:	1e 4f       	sbci	r17, 0xFE	; 254
    ddde:	f3 9c       	mul	r15, r3
    dde0:	00 0d       	add	r16, r0
    dde2:	11 1d       	adc	r17, r1
    dde4:	11 24       	eor	r1, r1
    dde6:	c8 01       	movw	r24, r16
    dde8:	02 96       	adiw	r24, 0x02	; 2
    ddea:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ddee:	28 2e       	mov	r2, r24
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    ddf0:	c8 01       	movw	r24, r16
    ddf2:	03 96       	adiw	r24, 0x03	; 3
    ddf4:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    ddf8:	42 2d       	mov	r20, r2
    ddfa:	46 95       	lsr	r20
    ddfc:	46 95       	lsr	r20
    ddfe:	46 95       	lsr	r20
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    de00:	22 2d       	mov	r18, r2
    de02:	30 e0       	ldi	r19, 0x00	; 0
    de04:	35 95       	asr	r19
    de06:	27 95       	ror	r18
    de08:	23 70       	andi	r18, 0x03	; 3
    de0a:	26 9d       	mul	r18, r6
    de0c:	20 2d       	mov	r18, r0
    de0e:	11 24       	eor	r1, r1
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    de10:	08 2f       	mov	r16, r24
    de12:	06 95       	lsr	r16
    de14:	06 95       	lsr	r16
    de16:	06 95       	lsr	r16
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    de18:	83 70       	andi	r24, 0x03	; 3
    de1a:	86 9d       	mul	r24, r6
    de1c:	e0 2c       	mov	r14, r0
    de1e:	11 24       	eor	r1, r1
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    de20:	82 2d       	mov	r24, r2
    de22:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:380
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    de24:	c8 16       	cp	r12, r24
    de26:	21 f0       	breq	.+8      	; 0xde30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf08>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    de28:	6f 2d       	mov	r22, r15
    de2a:	87 2d       	mov	r24, r7
    de2c:	0e 94 71 56 	call	0xace2	; 0xace2 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3355
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    de30:	6a e4       	ldi	r22, 0x4A	; 74
    de32:	76 e0       	ldi	r23, 0x06	; 6
    de34:	c2 01       	movw	r24, r4
    de36:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    de3a:	89 2b       	or	r24, r25
    de3c:	49 f4       	brne	.+18     	; 0xde50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf28>
    de3e:	86 e3       	ldi	r24, 0x36	; 54
    de40:	9b e0       	ldi	r25, 0x0B	; 11
    de42:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    de46:	ac 01       	movw	r20, r24
    de48:	6f 2d       	mov	r22, r15
    de4a:	87 2d       	mov	r24, r7
    de4c:	0e 94 55 56 	call	0xacaa	; 0xacaa <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3356
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    de50:	68 e9       	ldi	r22, 0x98	; 152
    de52:	76 e0       	ldi	r23, 0x06	; 6
    de54:	c2 01       	movw	r24, r4
    de56:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    de5a:	89 2b       	or	r24, r25
    de5c:	09 f0       	breq	.+2      	; 0xde60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf38>
    de5e:	4f c0       	rjmp	.+158    	; 0xdefe <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
thermostat_program_set_parse_interval():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    de60:	61 e0       	ldi	r22, 0x01	; 1
    de62:	75 e0       	ldi	r23, 0x05	; 5
    de64:	86 e3       	ldi	r24, 0x36	; 54
    de66:	9b e0       	ldi	r25, 0x0B	; 11
    de68:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    de6c:	51 2c       	mov	r5, r1
    de6e:	c1 2c       	mov	r12, r1
    de70:	e1 2c       	mov	r14, r1
    de72:	00 e0       	ldi	r16, 0x00	; 0
    de74:	21 2c       	mov	r2, r1
    de76:	41 2c       	mov	r4, r1
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
    de78:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
    de7a:	00 97       	sbiw	r24, 0x00	; 0
    de7c:	99 f1       	breq	.+102    	; 0xdee4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbc>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
    de7e:	11 11       	cpse	r17, r1
    de80:	13 c0       	rjmp	.+38     	; 0xdea8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf80>
    de82:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    de86:	48 2e       	mov	r4, r24
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    de88:	61 e0       	ldi	r22, 0x01	; 1
    de8a:	75 e0       	ldi	r23, 0x05	; 5
    de8c:	90 e0       	ldi	r25, 0x00	; 0
    de8e:	80 e0       	ldi	r24, 0x00	; 0
    de90:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:354
    cnt++;
    de94:	1f 5f       	subi	r17, 0xFF	; 255
    de96:	f1 cf       	rjmp	.-30     	; 0xde7a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf52>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    de98:	f1 e0       	ldi	r31, 0x01	; 1
    de9a:	df 12       	cpse	r13, r31
    de9c:	83 cf       	rjmp	.-250    	; 0xdda4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    de9e:	c2 01       	movw	r24, r4
    dea0:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    dea4:	f8 2e       	mov	r15, r24
    dea6:	7e cf       	rjmp	.-260    	; 0xdda4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
thermostat_program_set_parse_interval():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    dea8:	11 30       	cpi	r17, 0x01	; 1
    deaa:	21 f4       	brne	.+8      	; 0xdeb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8c>
    deac:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    deb0:	28 2e       	mov	r2, r24
    deb2:	ea cf       	rjmp	.-44     	; 0xde88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
    deb4:	12 30       	cpi	r17, 0x02	; 2
    deb6:	21 f4       	brne	.+8      	; 0xdec0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf98>
    deb8:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    debc:	08 2f       	mov	r16, r24
    debe:	e4 cf       	rjmp	.-56     	; 0xde88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
    dec0:	13 30       	cpi	r17, 0x03	; 3
    dec2:	21 f4       	brne	.+8      	; 0xdecc <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa4>
    dec4:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    dec8:	e8 2e       	mov	r14, r24
    deca:	de cf       	rjmp	.-68     	; 0xde88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
    decc:	14 30       	cpi	r17, 0x04	; 4
    dece:	21 f4       	brne	.+8      	; 0xded8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb0>
    ded0:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    ded4:	58 2e       	mov	r5, r24
    ded6:	d8 cf       	rjmp	.-80     	; 0xde88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
    ded8:	15 30       	cpi	r17, 0x05	; 5
    deda:	b1 f6       	brne	.-84     	; 0xde88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
    dedc:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    dee0:	c8 2e       	mov	r12, r24
    dee2:	d2 cf       	rjmp	.-92     	; 0xde88 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf60>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    dee4:	16 30       	cpi	r17, 0x06	; 6
    dee6:	59 f4       	brne	.+22     	; 0xdefe <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    dee8:	22 2d       	mov	r18, r2
    deea:	44 2d       	mov	r20, r4
    deec:	6f 2d       	mov	r22, r15
    deee:	87 2d       	mov	r24, r7
    def0:	0e 94 71 56 	call	0xace2	; 0xace2 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
    def4:	45 2d       	mov	r20, r5
    def6:	6f 2d       	mov	r22, r15
    def8:	87 2d       	mov	r24, r7
    defa:	0e 94 47 56 	call	0xac8e	; 0xac8e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3362
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    defe:	6c ed       	ldi	r22, 0xDC	; 220
    df00:	73 e0       	ldi	r23, 0x03	; 3
    df02:	90 e0       	ldi	r25, 0x00	; 0
    df04:	80 e0       	ldi	r24, 0x00	; 0
    df06:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    df0a:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363
      cnt++;
    df0c:	d3 94       	inc	r13
    df0e:	40 cf       	rjmp	.-384    	; 0xdd90 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    df10:	83 e0       	ldi	r24, 0x03	; 3
    df12:	95 e0       	ldi	r25, 0x05	; 5
    df14:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    df18:	f2 cf       	rjmp	.-28     	; 0xdefe <mqtt_callback(char*, unsigned char*, unsigned int)+0xfd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    df1a:	69 e0       	ldi	r22, 0x09	; 9
    df1c:	7b e3       	ldi	r23, 0x3B	; 59
    df1e:	c5 01       	movw	r24, r10
    df20:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3369
  strcat(str1, device.nazev);
    df24:	60 e9       	ldi	r22, 0x90	; 144
    df26:	7c e0       	ldi	r23, 0x0C	; 12
    df28:	c5 01       	movw	r24, r10
    df2a:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3370
  strcat(str1, "/ring/default");
    df2e:	6c e1       	ldi	r22, 0x1C	; 28
    df30:	75 e0       	ldi	r23, 0x05	; 5
    df32:	c5 01       	movw	r24, r10
    df34:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3371
  if (strcmp(str1, topic) == 0)
    df38:	b4 01       	movw	r22, r8
    df3a:	c5 01       	movw	r24, r10
    df3c:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    df40:	89 2b       	or	r24, r25
    df42:	a1 f4       	brne	.+40     	; 0xdf6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1044>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3373
  {
    mqtt_process_message++;
    df44:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    df48:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    df4c:	01 96       	adiw	r24, 0x01	; 1
    df4e:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    df52:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3374
    default_ring = atoi(my_payload);
    df56:	86 e3       	ldi	r24, 0x36	; 54
    df58:	9b e0       	ldi	r25, 0x0B	; 11
    df5a:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    df5e:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    df62:	68 2f       	mov	r22, r24
    df64:	8c e5       	ldi	r24, 0x5C	; 92
    df66:	90 e0       	ldi	r25, 0x00	; 0
    df68:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3379
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    df6c:	69 e0       	ldi	r22, 0x09	; 9
    df6e:	7b e3       	ldi	r23, 0x3B	; 59
    df70:	c5 01       	movw	r24, r10
    df72:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3380
  strcat(str1, device.nazev);
    df76:	60 e9       	ldi	r22, 0x90	; 144
    df78:	7c e0       	ldi	r23, 0x0C	; 12
    df7a:	c5 01       	movw	r24, r10
    df7c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
  strcat(str1, "/ring/get/");
    df80:	6a e2       	ldi	r22, 0x2A	; 42
    df82:	75 e0       	ldi	r23, 0x05	; 5
    df84:	c5 01       	movw	r24, r10
    df86:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3382
  if (strncmp(str1, topic, strlen(str1)) == 0)
    df8a:	f5 01       	movw	r30, r10
    df8c:	01 90       	ld	r0, Z+
    df8e:	00 20       	and	r0, r0
    df90:	e9 f7       	brne	.-6      	; 0xdf8c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1064>
    df92:	31 97       	sbiw	r30, 0x01	; 1
    df94:	8f 01       	movw	r16, r30
    df96:	0a 19       	sub	r16, r10
    df98:	1b 09       	sbc	r17, r11
    df9a:	a8 01       	movw	r20, r16
    df9c:	b4 01       	movw	r22, r8
    df9e:	c5 01       	movw	r24, r10
    dfa0:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    dfa4:	89 2b       	or	r24, r25
    dfa6:	09 f0       	breq	.+2      	; 0xdfaa <mqtt_callback(char*, unsigned char*, unsigned int)+0x1082>
    dfa8:	47 c0       	rjmp	.+142    	; 0xe038 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3385
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dfaa:	90 2f       	mov	r25, r16
    dfac:	80 2f       	mov	r24, r16
    dfae:	89 1b       	sub	r24, r25
    dfb0:	20 2f       	mov	r18, r16
    dfb2:	30 e0       	ldi	r19, 0x00	; 0
    dfb4:	f4 01       	movw	r30, r8
    dfb6:	01 90       	ld	r0, Z+
    dfb8:	00 20       	and	r0, r0
    dfba:	e9 f7       	brne	.-6      	; 0xdfb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x108e>
    dfbc:	31 97       	sbiw	r30, 0x01	; 1
    dfbe:	e8 19       	sub	r30, r8
    dfc0:	f9 09       	sbc	r31, r9
    dfc2:	2e 17       	cp	r18, r30
    dfc4:	3f 07       	cpc	r19, r31
    dfc6:	58 f4       	brcc	.+22     	; 0xdfde <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3387
    {
      str1[cnt] = topic[f];
    dfc8:	f5 01       	movw	r30, r10
    dfca:	e8 0f       	add	r30, r24
    dfcc:	f1 1d       	adc	r31, r1
    dfce:	28 0d       	add	r18, r8
    dfd0:	39 1d       	adc	r19, r9
    dfd2:	d9 01       	movw	r26, r18
    dfd4:	8c 91       	ld	r24, X
    dfd6:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3388
      str1[cnt + 1] = 0;
    dfd8:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3385
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dfda:	0f 5f       	subi	r16, 0xFF	; 255
    dfdc:	e7 cf       	rjmp	.-50     	; 0xdfac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1084>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    dfde:	6c ed       	ldi	r22, 0xDC	; 220
    dfe0:	73 e0       	ldi	r23, 0x03	; 3
    dfe2:	c5 01       	movw	r24, r10
    dfe4:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dfe8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
    pch = strtok (str1, "/");
    while (pch != NULL)
    dfea:	00 97       	sbiw	r24, 0x00	; 0
    dfec:	29 f1       	breq	.+74     	; 0xe038 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3395
    {
      if (cnt == 0) id = atoi(my_payload);
    dfee:	11 11       	cpse	r17, r1
    dff0:	0d c0       	rjmp	.+26     	; 0xe00c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e4>
    dff2:	86 e3       	ldi	r24, 0x36	; 54
    dff4:	9b e0       	ldi	r25, 0x0B	; 11
    dff6:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    dffa:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
      if (id < MAX_THERMOSTAT)
    dffc:	b4 e0       	ldi	r27, 0x04	; 4
    dffe:	b8 17       	cp	r27, r24
    e000:	98 f4       	brcc	.+38     	; 0xe028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3402
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    e002:	85 e3       	ldi	r24, 0x35	; 53
    e004:	95 e0       	ldi	r25, 0x05	; 5
    e006:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    e00a:	0e c0       	rjmp	.+28     	; 0xe028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    e00c:	e4 e0       	ldi	r30, 0x04	; 4
    e00e:	e7 15       	cp	r30, r7
    e010:	c0 f3       	brcs	.-16     	; 0xe002 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3398
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    e012:	11 30       	cpi	r17, 0x01	; 1
    e014:	49 f4       	brne	.+18     	; 0xe028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
    e016:	62 e5       	ldi	r22, 0x52	; 82
    e018:	73 e0       	ldi	r23, 0x03	; 3
    e01a:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e01e:	89 2b       	or	r24, r25
    e020:	19 f4       	brne	.+6      	; 0xe028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1100>
    e022:	87 2d       	mov	r24, r7
    e024:	0e 94 ce 42 	call	0x859c	; 0x859c <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3404
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    e028:	6c ed       	ldi	r22, 0xDC	; 220
    e02a:	73 e0       	ldi	r23, 0x03	; 3
    e02c:	90 e0       	ldi	r25, 0x00	; 0
    e02e:	80 e0       	ldi	r24, 0x00	; 0
    e030:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3405
      cnt++;
    e034:	1f 5f       	subi	r17, 0xFF	; 255
    e036:	d9 cf       	rjmp	.-78     	; 0xdfea <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3424
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    e038:	69 e0       	ldi	r22, 0x09	; 9
    e03a:	7b e3       	ldi	r23, 0x3B	; 59
    e03c:	c5 01       	movw	r24, r10
    e03e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
  strcat(str1, device.nazev);
    e042:	60 e9       	ldi	r22, 0x90	; 144
    e044:	7c e0       	ldi	r23, 0x0C	; 12
    e046:	c5 01       	movw	r24, r10
    e048:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
  strcat(str1, "/ring/set/");
    e04c:	65 e4       	ldi	r22, 0x45	; 69
    e04e:	75 e0       	ldi	r23, 0x05	; 5
    e050:	c5 01       	movw	r24, r10
    e052:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3427
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e056:	f5 01       	movw	r30, r10
    e058:	01 90       	ld	r0, Z+
    e05a:	00 20       	and	r0, r0
    e05c:	e9 f7       	brne	.-6      	; 0xe058 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1130>
    e05e:	31 97       	sbiw	r30, 0x01	; 1
    e060:	8f 01       	movw	r16, r30
    e062:	0a 19       	sub	r16, r10
    e064:	1b 09       	sbc	r17, r11
    e066:	a8 01       	movw	r20, r16
    e068:	b4 01       	movw	r22, r8
    e06a:	c5 01       	movw	r24, r10
    e06c:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    e070:	89 2b       	or	r24, r25
    e072:	09 f0       	breq	.+2      	; 0xe076 <mqtt_callback(char*, unsigned char*, unsigned int)+0x114e>
    e074:	b4 c1       	rjmp	.+872    	; 0xe3de <mqtt_callback(char*, unsigned char*, unsigned int)+0x14b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e076:	90 2f       	mov	r25, r16
    e078:	80 2f       	mov	r24, r16
    e07a:	89 1b       	sub	r24, r25
    e07c:	20 2f       	mov	r18, r16
    e07e:	30 e0       	ldi	r19, 0x00	; 0
    e080:	f4 01       	movw	r30, r8
    e082:	01 90       	ld	r0, Z+
    e084:	00 20       	and	r0, r0
    e086:	e9 f7       	brne	.-6      	; 0xe082 <mqtt_callback(char*, unsigned char*, unsigned int)+0x115a>
    e088:	31 97       	sbiw	r30, 0x01	; 1
    e08a:	e8 19       	sub	r30, r8
    e08c:	f9 09       	sbc	r31, r9
    e08e:	2e 17       	cp	r18, r30
    e090:	3f 07       	cpc	r19, r31
    e092:	58 f4       	brcc	.+22     	; 0xe0aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x1182>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3432
    {
      str1[cnt] = topic[f];
    e094:	f5 01       	movw	r30, r10
    e096:	e8 0f       	add	r30, r24
    e098:	f1 1d       	adc	r31, r1
    e09a:	28 0d       	add	r18, r8
    e09c:	39 1d       	adc	r19, r9
    e09e:	d9 01       	movw	r26, r18
    e0a0:	8c 91       	ld	r24, X
    e0a2:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3433
      str1[cnt + 1] = 0;
    e0a4:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e0a6:	0f 5f       	subi	r16, 0xFF	; 255
    e0a8:	e7 cf       	rjmp	.-50     	; 0xe078 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e0aa:	6c ed       	ldi	r22, 0xDC	; 220
    e0ac:	73 e0       	ldi	r23, 0x03	; 3
    e0ae:	c5 01       	movw	r24, r10
    e0b0:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    e0b4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e0b6:	e1 2c       	mov	r14, r1
thermostat_ring_set_output():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    e0b8:	51 e2       	ldi	r21, 0x21	; 33
    e0ba:	d5 2e       	mov	r13, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3438
    pch = strtok (str1, "/");
    while (pch != NULL)
    e0bc:	01 15       	cp	r16, r1
    e0be:	11 05       	cpc	r17, r1
    e0c0:	09 f4       	brne	.+2      	; 0xe0c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x119c>
    e0c2:	8d c1       	rjmp	.+794    	; 0xe3de <mqtt_callback(char*, unsigned char*, unsigned int)+0x14b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3440
    {
      if (cnt == 0) id = atoi(pch);
    e0c4:	e1 10       	cpse	r14, r1
    e0c6:	0d c0       	rjmp	.+26     	; 0xe0e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ba>
    e0c8:	c8 01       	movw	r24, r16
    e0ca:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e0ce:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3441
      if (id < MAX_THERMOSTAT)
    e0d0:	b4 e0       	ldi	r27, 0x04	; 4
    e0d2:	b8 17       	cp	r27, r24
    e0d4:	08 f0       	brcs	.+2      	; 0xe0d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b0>
    e0d6:	7a c1       	rjmp	.+756    	; 0xe3cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x14a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    e0d8:	85 e3       	ldi	r24, 0x35	; 53
    e0da:	95 e0       	ldi	r25, 0x05	; 5
    e0dc:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    e0e0:	75 c1       	rjmp	.+746    	; 0xe3cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x14a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3441
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    e0e2:	e4 e0       	ldi	r30, 0x04	; 4
    e0e4:	e7 15       	cp	r30, r7
    e0e6:	c0 f3       	brcs	.-16     	; 0xe0d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    e0e8:	f1 e0       	ldi	r31, 0x01	; 1
    e0ea:	ef 12       	cpse	r14, r31
    e0ec:	6f c1       	rjmp	.+734    	; 0xe3cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x14a4>
    e0ee:	65 eb       	ldi	r22, 0xB5	; 181
    e0f0:	73 e0       	ldi	r23, 0x03	; 3
    e0f2:	c8 01       	movw	r24, r16
    e0f4:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e0f8:	89 2b       	or	r24, r25
    e0fa:	29 f4       	brne	.+10     	; 0xe106 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11de>
    e0fc:	66 e3       	ldi	r22, 0x36	; 54
    e0fe:	7b e0       	ldi	r23, 0x0B	; 11
    e100:	87 2d       	mov	r24, r7
    e102:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    e106:	64 e5       	ldi	r22, 0x54	; 84
    e108:	76 e0       	ldi	r23, 0x06	; 6
    e10a:	c8 01       	movw	r24, r16
    e10c:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e110:	89 2b       	or	r24, r25
    e112:	81 f4       	brne	.+32     	; 0xe134 <mqtt_callback(char*, unsigned char*, unsigned int)+0x120c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    e114:	86 e3       	ldi	r24, 0x36	; 54
    e116:	9b e0       	ldi	r25, 0x0B	; 11
    e118:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e11c:	88 30       	cpi	r24, 0x08	; 8
    e11e:	91 05       	cpc	r25, r1
    e120:	4c f4       	brge	.+18     	; 0xe134 <mqtt_callback(char*, unsigned char*, unsigned int)+0x120c>
thermostat_ring_set_program_id():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    e122:	7d 9c       	mul	r7, r13
    e124:	90 01       	movw	r18, r0
    e126:	11 24       	eor	r1, r1
    e128:	68 2f       	mov	r22, r24
    e12a:	c9 01       	movw	r24, r18
    e12c:	85 5a       	subi	r24, 0xA5	; 165
    e12e:	9e 4f       	sbci	r25, 0xFE	; 254
    e130:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3447
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    e134:	6c e5       	ldi	r22, 0x5C	; 92
    e136:	76 e0       	ldi	r23, 0x06	; 6
    e138:	c8 01       	movw	r24, r16
    e13a:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e13e:	89 2b       	or	r24, r25
    e140:	79 f4       	brne	.+30     	; 0xe160 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1238>
    e142:	86 e3       	ldi	r24, 0x36	; 54
    e144:	9b e0       	ldi	r25, 0x0B	; 11
    e146:	0e 94 4c b1 	call	0x16298	; 0x16298 <atof>
    e14a:	20 e0       	ldi	r18, 0x00	; 0
    e14c:	30 e0       	ldi	r19, 0x00	; 0
    e14e:	40 e2       	ldi	r20, 0x20	; 32
    e150:	51 e4       	ldi	r21, 0x41	; 65
    e152:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
    e156:	0e 94 ab bc 	call	0x17956	; 0x17956 <__fixsfsi>
    e15a:	87 2d       	mov	r24, r7
    e15c:	0e 94 7a 57 	call	0xaef4	; 0xaef4 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    e160:	6a e4       	ldi	r22, 0x4A	; 74
    e162:	76 e0       	ldi	r23, 0x06	; 6
    e164:	c8 01       	movw	r24, r16
    e166:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e16a:	89 2b       	or	r24, r25
    e16c:	41 f4       	brne	.+16     	; 0xe17e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1256>
    e16e:	86 e3       	ldi	r24, 0x36	; 54
    e170:	9b e0       	ldi	r25, 0x0B	; 11
    e172:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e176:	bc 01       	movw	r22, r24
    e178:	87 2d       	mov	r24, r7
    e17a:	0e 94 7a 57 	call	0xaef4	; 0xaef4 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3449
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    e17e:	68 e6       	ldi	r22, 0x68	; 104
    e180:	76 e0       	ldi	r23, 0x06	; 6
    e182:	c8 01       	movw	r24, r16
    e184:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e188:	89 2b       	or	r24, r25
    e18a:	09 f0       	breq	.+2      	; 0xe18e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1266>
    e18c:	52 c0       	rjmp	.+164    	; 0xe232 <mqtt_callback(char*, unsigned char*, unsigned int)+0x130a>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    e18e:	60 e5       	ldi	r22, 0x50	; 80
    e190:	75 e0       	ldi	r23, 0x05	; 5
    e192:	86 e3       	ldi	r24, 0x36	; 54
    e194:	9b e0       	ldi	r25, 0x0B	; 11
    e196:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e19a:	ff 24       	eor	r15, r15
    e19c:	f3 94       	inc	r15
    e19e:	89 2b       	or	r24, r25
    e1a0:	09 f0       	breq	.+2      	; 0xe1a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x127c>
    e1a2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    e1a4:	65 e5       	ldi	r22, 0x55	; 85
    e1a6:	75 e0       	ldi	r23, 0x05	; 5
    e1a8:	86 e3       	ldi	r24, 0x36	; 54
    e1aa:	9b e0       	ldi	r25, 0x0B	; 11
    e1ac:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e1b0:	89 2b       	or	r24, r25
    e1b2:	11 f4       	brne	.+4      	; 0xe1b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1290>
_Z13mqtt_callbackPcPhj():
    e1b4:	43 e0       	ldi	r20, 0x03	; 3
    e1b6:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    e1b8:	6c e5       	ldi	r22, 0x5C	; 92
    e1ba:	75 e0       	ldi	r23, 0x05	; 5
    e1bc:	86 e3       	ldi	r24, 0x36	; 54
    e1be:	9b e0       	ldi	r25, 0x0B	; 11
    e1c0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e1c4:	89 2b       	or	r24, r25
    e1c6:	11 f4       	brne	.+4      	; 0xe1cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x12a4>
_Z13mqtt_callbackPcPhj():
    e1c8:	32 e0       	ldi	r19, 0x02	; 2
    e1ca:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4160
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    e1cc:	61 e6       	ldi	r22, 0x61	; 97
    e1ce:	75 e0       	ldi	r23, 0x05	; 5
    e1d0:	86 e3       	ldi	r24, 0x36	; 54
    e1d2:	9b e0       	ldi	r25, 0x0B	; 11
    e1d4:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e1d8:	89 2b       	or	r24, r25
    e1da:	11 f4       	brne	.+4      	; 0xe1e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12b8>
_Z13mqtt_callbackPcPhj():
    e1dc:	24 e0       	ldi	r18, 0x04	; 4
    e1de:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    e1e0:	66 e6       	ldi	r22, 0x66	; 102
    e1e2:	75 e0       	ldi	r23, 0x05	; 5
    e1e4:	86 e3       	ldi	r24, 0x36	; 54
    e1e6:	9b e0       	ldi	r25, 0x0B	; 11
    e1e8:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e1ec:	89 2b       	or	r24, r25
    e1ee:	11 f4       	brne	.+4      	; 0xe1f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12cc>
_Z13mqtt_callbackPcPhj():
    e1f0:	96 e0       	ldi	r25, 0x06	; 6
    e1f2:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3451
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    e1f4:	c4 5d       	subi	r28, 0xD4	; 212
    e1f6:	de 4f       	sbci	r29, 0xFE	; 254
    e1f8:	f8 82       	st	Y, r15
    e1fa:	cc 52       	subi	r28, 0x2C	; 44
    e1fc:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3452
          thermostat_ring_set_mode(id, active);
    e1fe:	6f 2d       	mov	r22, r15
    e200:	87 2d       	mov	r24, r7
    e202:	0e 94 5f 57 	call	0xaebe	; 0xaebe <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3453
          if (active == TERM_MODE_MAN_HEAT)
    e206:	c4 5d       	subi	r28, 0xD4	; 212
    e208:	de 4f       	sbci	r29, 0xFE	; 254
    e20a:	88 81       	ld	r24, Y
    e20c:	cc 52       	subi	r28, 0x2C	; 44
    e20e:	d1 40       	sbci	r29, 0x01	; 1
    e210:	83 30       	cpi	r24, 0x03	; 3
    e212:	21 f4       	brne	.+8      	; 0xe21c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3454
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    e214:	60 e0       	ldi	r22, 0x00	; 0
    e216:	87 2d       	mov	r24, r7
    e218:	0e 94 b3 9d 	call	0x13b66	; 0x13b66 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3455
          if (active == TERM_MODE_MAN_COOL)
    e21c:	c4 5d       	subi	r28, 0xD4	; 212
    e21e:	de 4f       	sbci	r29, 0xFE	; 254
    e220:	88 81       	ld	r24, Y
    e222:	cc 52       	subi	r28, 0x2C	; 44
    e224:	d1 40       	sbci	r29, 0x01	; 1
    e226:	85 30       	cpi	r24, 0x05	; 5
    e228:	21 f4       	brne	.+8      	; 0xe232 <mqtt_callback(char*, unsigned char*, unsigned int)+0x130a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3456
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    e22a:	61 e0       	ldi	r22, 0x01	; 1
    e22c:	87 2d       	mov	r24, r7
    e22e:	0e 94 b3 9d 	call	0x13b66	; 0x13b66 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    e232:	6d e6       	ldi	r22, 0x6D	; 109
    e234:	76 e0       	ldi	r23, 0x06	; 6
    e236:	c8 01       	movw	r24, r16
    e238:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e23c:	89 2b       	or	r24, r25
    e23e:	19 f5       	brne	.+70     	; 0xe286 <mqtt_callback(char*, unsigned char*, unsigned int)+0x135e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3460
        {
          active = atoi(my_payload);
    e240:	86 e3       	ldi	r24, 0x36	; 54
    e242:	9b e0       	ldi	r25, 0x0B	; 11
    e244:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e248:	c4 5d       	subi	r28, 0xD4	; 212
    e24a:	de 4f       	sbci	r29, 0xFE	; 254
    e24c:	88 83       	st	Y, r24
    e24e:	cc 52       	subi	r28, 0x2C	; 44
    e250:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
          thermostat_ring_set_mode(id, active);
    e252:	68 2f       	mov	r22, r24
    e254:	87 2d       	mov	r24, r7
    e256:	0e 94 5f 57 	call	0xaebe	; 0xaebe <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
          if (active == TERM_MODE_MAN_HEAT)
    e25a:	c4 5d       	subi	r28, 0xD4	; 212
    e25c:	de 4f       	sbci	r29, 0xFE	; 254
    e25e:	88 81       	ld	r24, Y
    e260:	cc 52       	subi	r28, 0x2C	; 44
    e262:	d1 40       	sbci	r29, 0x01	; 1
    e264:	83 30       	cpi	r24, 0x03	; 3
    e266:	21 f4       	brne	.+8      	; 0xe270 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    e268:	60 e0       	ldi	r22, 0x00	; 0
    e26a:	87 2d       	mov	r24, r7
    e26c:	0e 94 b3 9d 	call	0x13b66	; 0x13b66 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
          if (active == TERM_MODE_MAN_COOL)
    e270:	c4 5d       	subi	r28, 0xD4	; 212
    e272:	de 4f       	sbci	r29, 0xFE	; 254
    e274:	88 81       	ld	r24, Y
    e276:	cc 52       	subi	r28, 0x2C	; 44
    e278:	d1 40       	sbci	r29, 0x01	; 1
    e27a:	85 30       	cpi	r24, 0x05	; 5
    e27c:	21 f4       	brne	.+8      	; 0xe286 <mqtt_callback(char*, unsigned char*, unsigned int)+0x135e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3465
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    e27e:	61 e0       	ldi	r22, 0x01	; 1
    e280:	87 2d       	mov	r24, r7
    e282:	0e 94 b3 9d 	call	0x13b66	; 0x13b66 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3467
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    e286:	62 e7       	ldi	r22, 0x72	; 114
    e288:	76 e0       	ldi	r23, 0x06	; 6
    e28a:	c8 01       	movw	r24, r16
    e28c:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e290:	89 2b       	or	r24, r25
    e292:	69 f4       	brne	.+26     	; 0xe2ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1386>
    e294:	86 e3       	ldi	r24, 0x36	; 54
    e296:	9b e0       	ldi	r25, 0x0B	; 11
    e298:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    e29c:	7d 9c       	mul	r7, r13
    e29e:	90 01       	movw	r18, r0
    e2a0:	11 24       	eor	r1, r1
    e2a2:	68 2f       	mov	r22, r24
    e2a4:	c9 01       	movw	r24, r18
    e2a6:	84 5a       	subi	r24, 0xA4	; 164
    e2a8:	9e 4f       	sbci	r25, 0xFE	; 254
    e2aa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    e2ae:	6f eb       	ldi	r22, 0xBF	; 191
    e2b0:	73 e0       	ldi	r23, 0x03	; 3
    e2b2:	c8 01       	movw	r24, r16
    e2b4:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e2b8:	89 2b       	or	r24, r25
    e2ba:	69 f4       	brne	.+26     	; 0xe2d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13ae>
    e2bc:	86 e3       	ldi	r24, 0x36	; 54
    e2be:	9b e0       	ldi	r25, 0x0B	; 11
    e2c0:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    e2c4:	7d 9c       	mul	r7, r13
    e2c6:	90 01       	movw	r18, r0
    e2c8:	11 24       	eor	r1, r1
    e2ca:	68 2f       	mov	r22, r24
    e2cc:	c9 01       	movw	r24, r18
    e2ce:	83 5a       	subi	r24, 0xA3	; 163
    e2d0:	9e 4f       	sbci	r25, 0xFE	; 254
    e2d2:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    e2d6:	68 e7       	ldi	r22, 0x78	; 120
    e2d8:	76 e0       	ldi	r23, 0x06	; 6
    e2da:	c8 01       	movw	r24, r16
    e2dc:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e2e0:	89 2b       	or	r24, r25
    e2e2:	69 f4       	brne	.+26     	; 0xe2fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x13d6>
    e2e4:	86 e3       	ldi	r24, 0x36	; 54
    e2e6:	9b e0       	ldi	r25, 0x0B	; 11
    e2e8:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    e2ec:	7d 9c       	mul	r7, r13
    e2ee:	90 01       	movw	r18, r0
    e2f0:	11 24       	eor	r1, r1
    e2f2:	68 2f       	mov	r22, r24
    e2f4:	c9 01       	movw	r24, r18
    e2f6:	81 5a       	subi	r24, 0xA1	; 161
    e2f8:	9e 4f       	sbci	r25, 0xFE	; 254
    e2fa:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3471
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    e2fe:	6f e7       	ldi	r22, 0x7F	; 127
    e300:	76 e0       	ldi	r23, 0x06	; 6
    e302:	c8 01       	movw	r24, r16
    e304:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e308:	89 2b       	or	r24, r25
    e30a:	a1 f4       	brne	.+40     	; 0xe334 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140c>
    e30c:	86 e3       	ldi	r24, 0x36	; 54
    e30e:	9b e0       	ldi	r25, 0x0B	; 11
    e310:	0e 94 4c b1 	call	0x16298	; 0x16298 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    e314:	24 e0       	ldi	r18, 0x04	; 4
    e316:	72 9e       	mul	r7, r18
    e318:	f0 01       	movw	r30, r0
    e31a:	11 24       	eor	r1, r1
    e31c:	ee 52       	subi	r30, 0x2E	; 46
    e31e:	f6 4f       	sbci	r31, 0xF6	; 246
    e320:	60 83       	st	Z, r22
    e322:	71 83       	std	Z+1, r23	; 0x01
    e324:	82 83       	std	Z+2, r24	; 0x02
    e326:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    e328:	87 2d       	mov	r24, r7
    e32a:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    e32e:	87 2d       	mov	r24, r7
    e330:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    e334:	66 e8       	ldi	r22, 0x86	; 134
    e336:	76 e0       	ldi	r23, 0x06	; 6
    e338:	c8 01       	movw	r24, r16
    e33a:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e33e:	89 2b       	or	r24, r25
    e340:	a1 f4       	brne	.+40     	; 0xe36a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1442>
    e342:	86 e3       	ldi	r24, 0x36	; 54
    e344:	9b e0       	ldi	r25, 0x0B	; 11
    e346:	0e 94 4c b1 	call	0x16298	; 0x16298 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    e34a:	a4 e0       	ldi	r26, 0x04	; 4
    e34c:	7a 9e       	mul	r7, r26
    e34e:	f0 01       	movw	r30, r0
    e350:	11 24       	eor	r1, r1
    e352:	ea 51       	subi	r30, 0x1A	; 26
    e354:	f6 4f       	sbci	r31, 0xF6	; 246
    e356:	60 83       	st	Z, r22
    e358:	71 83       	std	Z+1, r23	; 0x01
    e35a:	82 83       	std	Z+2, r24	; 0x02
    e35c:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    e35e:	87 2d       	mov	r24, r7
    e360:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    e364:	87 2d       	mov	r24, r7
    e366:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    e36a:	6d e8       	ldi	r22, 0x8D	; 141
    e36c:	76 e0       	ldi	r23, 0x06	; 6
    e36e:	c8 01       	movw	r24, r16
    e370:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e374:	89 2b       	or	r24, r25
    e376:	a1 f4       	brne	.+40     	; 0xe3a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1478>
    e378:	86 e3       	ldi	r24, 0x36	; 54
    e37a:	9b e0       	ldi	r25, 0x0B	; 11
    e37c:	0e 94 4c b1 	call	0x16298	; 0x16298 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    e380:	b4 e0       	ldi	r27, 0x04	; 4
    e382:	7b 9e       	mul	r7, r27
    e384:	f0 01       	movw	r30, r0
    e386:	11 24       	eor	r1, r1
    e388:	e6 50       	subi	r30, 0x06	; 6
    e38a:	f6 4f       	sbci	r31, 0xF6	; 246
    e38c:	60 83       	st	Z, r22
    e38e:	71 83       	std	Z+1, r23	; 0x01
    e390:	82 83       	std	Z+2, r24	; 0x02
    e392:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    e394:	87 2d       	mov	r24, r7
    e396:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    e39a:	87 2d       	mov	r24, r7
    e39c:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    e3a0:	64 e9       	ldi	r22, 0x94	; 148
    e3a2:	76 e0       	ldi	r23, 0x06	; 6
    e3a4:	c8 01       	movw	r24, r16
    e3a6:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e3aa:	89 2b       	or	r24, r25
    e3ac:	79 f4       	brne	.+30     	; 0xe3cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x14a4>
    e3ae:	86 e3       	ldi	r24, 0x36	; 54
    e3b0:	9b e0       	ldi	r25, 0x0B	; 11
    e3b2:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    e3b6:	e7 2d       	mov	r30, r7
    e3b8:	f0 e0       	ldi	r31, 0x00	; 0
    e3ba:	e2 5f       	subi	r30, 0xF2	; 242
    e3bc:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
    e3be:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    e3c0:	87 2d       	mov	r24, r7
    e3c2:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    e3c6:	87 2d       	mov	r24, r7
    e3c8:	0e 94 d5 56 	call	0xadaa	; 0xadaa <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3480
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    e3cc:	6c ed       	ldi	r22, 0xDC	; 220
    e3ce:	73 e0       	ldi	r23, 0x03	; 3
    e3d0:	90 e0       	ldi	r25, 0x00	; 0
    e3d2:	80 e0       	ldi	r24, 0x00	; 0
    e3d4:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    e3d8:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3481
      cnt++;
    e3da:	e3 94       	inc	r14
    e3dc:	6f ce       	rjmp	.-802    	; 0xe0bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1194>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3486
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    e3de:	69 e0       	ldi	r22, 0x09	; 9
    e3e0:	7b e3       	ldi	r23, 0x3B	; 59
    e3e2:	c5 01       	movw	r24, r10
    e3e4:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3487
  strcat(str1, device.nazev);
    e3e8:	60 e9       	ldi	r22, 0x90	; 144
    e3ea:	7c e0       	ldi	r23, 0x0C	; 12
    e3ec:	c5 01       	movw	r24, r10
    e3ee:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
  strcat(str1, "/ring/clear");
    e3f2:	6f e6       	ldi	r22, 0x6F	; 111
    e3f4:	75 e0       	ldi	r23, 0x05	; 5
    e3f6:	c5 01       	movw	r24, r10
    e3f8:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e3fc:	f5 01       	movw	r30, r10
    e3fe:	01 90       	ld	r0, Z+
    e400:	00 20       	and	r0, r0
    e402:	e9 f7       	brne	.-6      	; 0xe3fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x14d6>
    e404:	31 97       	sbiw	r30, 0x01	; 1
    e406:	af 01       	movw	r20, r30
    e408:	4a 19       	sub	r20, r10
    e40a:	5b 09       	sbc	r21, r11
    e40c:	b4 01       	movw	r22, r8
    e40e:	c5 01       	movw	r24, r10
    e410:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    e414:	89 2b       	or	r24, r25
    e416:	a1 f4       	brne	.+40     	; 0xe440 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1518>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3491
  {
    mqtt_process_message++;
    e418:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    e41c:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    e420:	01 96       	adiw	r24, 0x01	; 1
    e422:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    e426:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3492
    id = atoi(my_payload);
    e42a:	86 e3       	ldi	r24, 0x36	; 54
    e42c:	9b e0       	ldi	r25, 0x0B	; 11
    e42e:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e432:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3493
    if (id < MAX_THERMOSTAT)
    e434:	e4 e0       	ldi	r30, 0x04	; 4
    e436:	e8 17       	cp	r30, r24
    e438:	08 f4       	brcc	.+2      	; 0xe43c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1514>
    e43a:	99 c1       	rjmp	.+818    	; 0xe76e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1846>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
    {
      thermostat_ring_clear(id);
    e43c:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3506
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    e440:	69 e0       	ldi	r22, 0x09	; 9
    e442:	7b e3       	ldi	r23, 0x3B	; 59
    e444:	c5 01       	movw	r24, r10
    e446:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3507
  strcat(str1, device.nazev);
    e44a:	60 e9       	ldi	r22, 0x90	; 144
    e44c:	7c e0       	ldi	r23, 0x0C	; 12
    e44e:	c5 01       	movw	r24, r10
    e450:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
  strcat(str1, "/network/get/config");
    e454:	6d e8       	ldi	r22, 0x8D	; 141
    e456:	75 e0       	ldi	r23, 0x05	; 5
    e458:	c5 01       	movw	r24, r10
    e45a:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e45e:	f5 01       	movw	r30, r10
    e460:	01 90       	ld	r0, Z+
    e462:	00 20       	and	r0, r0
    e464:	e9 f7       	brne	.-6      	; 0xe460 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1538>
    e466:	31 97       	sbiw	r30, 0x01	; 1
    e468:	af 01       	movw	r20, r30
    e46a:	4a 19       	sub	r20, r10
    e46c:	5b 09       	sbc	r21, r11
    e46e:	b4 01       	movw	r22, r8
    e470:	c5 01       	movw	r24, r10
    e472:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    e476:	89 2b       	or	r24, r25
    e478:	09 f0       	breq	.+2      	; 0xe47c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1554>
    e47a:	2f c1       	rjmp	.+606    	; 0xe6da <mqtt_callback(char*, unsigned char*, unsigned int)+0x17b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
  {
    mqtt_process_message++;
    e47c:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    e480:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    e484:	01 96       	adiw	r24, 0x01	; 1
    e486:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    e48a:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
send_network_config():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    e48e:	c8 5f       	subi	r28, 0xF8	; 248
    e490:	de 4f       	sbci	r29, 0xFE	; 254
    e492:	18 82       	st	Y, r1
    e494:	c8 50       	subi	r28, 0x08	; 8
    e496:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    e498:	00 e1       	ldi	r16, 0x10	; 16
    e49a:	26 e0       	ldi	r18, 0x06	; 6
    e49c:	4a e7       	ldi	r20, 0x7A	; 122
    e49e:	5c e0       	ldi	r21, 0x0C	; 12
    e4a0:	6a e3       	ldi	r22, 0x3A	; 58
    e4a2:	ce 01       	movw	r24, r28
    e4a4:	88 5f       	subi	r24, 0xF8	; 248
    e4a6:	9e 4f       	sbci	r25, 0xFE	; 254
    e4a8:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    e4ac:	6a e7       	ldi	r22, 0x7A	; 122
    e4ae:	7a e3       	ldi	r23, 0x3A	; 58
    e4b0:	ce 01       	movw	r24, r28
    e4b2:	88 5b       	subi	r24, 0xB8	; 184
    e4b4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4b6:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e4ba:	ae 01       	movw	r20, r28
    e4bc:	48 5f       	subi	r20, 0xF8	; 248
    e4be:	5e 4f       	sbci	r21, 0xFE	; 254
    e4c0:	be 01       	movw	r22, r28
    e4c2:	68 5b       	subi	r22, 0xB8	; 184
    e4c4:	7f 4f       	sbci	r23, 0xFF	; 255
    e4c6:	8d e6       	ldi	r24, 0x6D	; 109
    e4c8:	9e e0       	ldi	r25, 0x0E	; 14
    e4ca:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    e4ce:	c8 5f       	subi	r28, 0xF8	; 248
    e4d0:	de 4f       	sbci	r29, 0xFE	; 254
    e4d2:	18 82       	st	Y, r1
    e4d4:	c8 50       	subi	r28, 0x08	; 8
    e4d6:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    e4d8:	0a e0       	ldi	r16, 0x0A	; 10
    e4da:	24 e0       	ldi	r18, 0x04	; 4
    e4dc:	40 e8       	ldi	r20, 0x80	; 128
    e4de:	5c e0       	ldi	r21, 0x0C	; 12
    e4e0:	6e e2       	ldi	r22, 0x2E	; 46
    e4e2:	ce 01       	movw	r24, r28
    e4e4:	88 5f       	subi	r24, 0xF8	; 248
    e4e6:	9e 4f       	sbci	r25, 0xFE	; 254
    e4e8:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    e4ec:	64 e6       	ldi	r22, 0x64	; 100
    e4ee:	7e e3       	ldi	r23, 0x3E	; 62
    e4f0:	ce 01       	movw	r24, r28
    e4f2:	88 5b       	subi	r24, 0xB8	; 184
    e4f4:	9f 4f       	sbci	r25, 0xFF	; 255
    e4f6:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e4fa:	ae 01       	movw	r20, r28
    e4fc:	48 5f       	subi	r20, 0xF8	; 248
    e4fe:	5e 4f       	sbci	r21, 0xFE	; 254
    e500:	be 01       	movw	r22, r28
    e502:	68 5b       	subi	r22, 0xB8	; 184
    e504:	7f 4f       	sbci	r23, 0xFF	; 255
    e506:	8d e6       	ldi	r24, 0x6D	; 109
    e508:	9e e0       	ldi	r25, 0x0E	; 14
    e50a:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    e50e:	c8 5f       	subi	r28, 0xF8	; 248
    e510:	de 4f       	sbci	r29, 0xFE	; 254
    e512:	18 82       	st	Y, r1
    e514:	c8 50       	subi	r28, 0x08	; 8
    e516:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    e518:	24 e0       	ldi	r18, 0x04	; 4
    e51a:	44 e8       	ldi	r20, 0x84	; 132
    e51c:	5c e0       	ldi	r21, 0x0C	; 12
    e51e:	6e e2       	ldi	r22, 0x2E	; 46
    e520:	ce 01       	movw	r24, r28
    e522:	88 5f       	subi	r24, 0xF8	; 248
    e524:	9e 4f       	sbci	r25, 0xFE	; 254
    e526:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    e52a:	6a e6       	ldi	r22, 0x6A	; 106
    e52c:	7a e3       	ldi	r23, 0x3A	; 58
    e52e:	ce 01       	movw	r24, r28
    e530:	88 5b       	subi	r24, 0xB8	; 184
    e532:	9f 4f       	sbci	r25, 0xFF	; 255
    e534:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e538:	ae 01       	movw	r20, r28
    e53a:	48 5f       	subi	r20, 0xF8	; 248
    e53c:	5e 4f       	sbci	r21, 0xFE	; 254
    e53e:	be 01       	movw	r22, r28
    e540:	68 5b       	subi	r22, 0xB8	; 184
    e542:	7f 4f       	sbci	r23, 0xFF	; 255
    e544:	8d e6       	ldi	r24, 0x6D	; 109
    e546:	9e e0       	ldi	r25, 0x0E	; 14
    e548:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    e54c:	c8 5f       	subi	r28, 0xF8	; 248
    e54e:	de 4f       	sbci	r29, 0xFE	; 254
    e550:	18 82       	st	Y, r1
    e552:	c8 50       	subi	r28, 0x08	; 8
    e554:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    e556:	24 e0       	ldi	r18, 0x04	; 4
    e558:	4c e8       	ldi	r20, 0x8C	; 140
    e55a:	5c e0       	ldi	r21, 0x0C	; 12
    e55c:	6e e2       	ldi	r22, 0x2E	; 46
    e55e:	ce 01       	movw	r24, r28
    e560:	88 5f       	subi	r24, 0xF8	; 248
    e562:	9e 4f       	sbci	r25, 0xFE	; 254
    e564:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    e568:	6f e5       	ldi	r22, 0x5F	; 95
    e56a:	7a e3       	ldi	r23, 0x3A	; 58
    e56c:	ce 01       	movw	r24, r28
    e56e:	88 5b       	subi	r24, 0xB8	; 184
    e570:	9f 4f       	sbci	r25, 0xFF	; 255
    e572:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e576:	ae 01       	movw	r20, r28
    e578:	48 5f       	subi	r20, 0xF8	; 248
    e57a:	5e 4f       	sbci	r21, 0xFE	; 254
    e57c:	be 01       	movw	r22, r28
    e57e:	68 5b       	subi	r22, 0xB8	; 184
    e580:	7f 4f       	sbci	r23, 0xFF	; 255
    e582:	8d e6       	ldi	r24, 0x6D	; 109
    e584:	9e e0       	ldi	r25, 0x0E	; 14
    e586:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    e58a:	c8 5f       	subi	r28, 0xF8	; 248
    e58c:	de 4f       	sbci	r29, 0xFE	; 254
    e58e:	18 82       	st	Y, r1
    e590:	c8 50       	subi	r28, 0x08	; 8
    e592:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    e594:	24 e0       	ldi	r18, 0x04	; 4
    e596:	48 e8       	ldi	r20, 0x88	; 136
    e598:	5c e0       	ldi	r21, 0x0C	; 12
    e59a:	6e e2       	ldi	r22, 0x2E	; 46
    e59c:	ce 01       	movw	r24, r28
    e59e:	88 5f       	subi	r24, 0xF8	; 248
    e5a0:	9e 4f       	sbci	r25, 0xFE	; 254
    e5a2:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    e5a6:	63 e5       	ldi	r22, 0x53	; 83
    e5a8:	7a e3       	ldi	r23, 0x3A	; 58
    e5aa:	ce 01       	movw	r24, r28
    e5ac:	88 5b       	subi	r24, 0xB8	; 184
    e5ae:	9f 4f       	sbci	r25, 0xFF	; 255
    e5b0:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e5b4:	ae 01       	movw	r20, r28
    e5b6:	48 5f       	subi	r20, 0xF8	; 248
    e5b8:	5e 4f       	sbci	r21, 0xFE	; 254
    e5ba:	be 01       	movw	r22, r28
    e5bc:	68 5b       	subi	r22, 0xB8	; 184
    e5be:	7f 4f       	sbci	r23, 0xFF	; 255
    e5c0:	8d e6       	ldi	r24, 0x6D	; 109
    e5c2:	9e e0       	ldi	r25, 0x0E	; 14
    e5c4:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    e5c8:	c8 5f       	subi	r28, 0xF8	; 248
    e5ca:	de 4f       	sbci	r29, 0xFE	; 254
    e5cc:	18 82       	st	Y, r1
    e5ce:	c8 50       	subi	r28, 0x08	; 8
    e5d0:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    e5d2:	24 e0       	ldi	r18, 0x04	; 4
    e5d4:	48 ec       	ldi	r20, 0xC8	; 200
    e5d6:	5c e0       	ldi	r21, 0x0C	; 12
    e5d8:	6e e2       	ldi	r22, 0x2E	; 46
    e5da:	ce 01       	movw	r24, r28
    e5dc:	88 5f       	subi	r24, 0xF8	; 248
    e5de:	9e 4f       	sbci	r25, 0xFE	; 254
    e5e0:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    e5e4:	67 e4       	ldi	r22, 0x47	; 71
    e5e6:	7a e3       	ldi	r23, 0x3A	; 58
    e5e8:	ce 01       	movw	r24, r28
    e5ea:	88 5b       	subi	r24, 0xB8	; 184
    e5ec:	9f 4f       	sbci	r25, 0xFF	; 255
    e5ee:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e5f2:	ae 01       	movw	r20, r28
    e5f4:	48 5f       	subi	r20, 0xF8	; 248
    e5f6:	5e 4f       	sbci	r21, 0xFE	; 254
    e5f8:	be 01       	movw	r22, r28
    e5fa:	68 5b       	subi	r22, 0xB8	; 184
    e5fc:	7f 4f       	sbci	r23, 0xFF	; 255
    e5fe:	8d e6       	ldi	r24, 0x6D	; 109
    e600:	9e e0       	ldi	r25, 0x0E	; 14
    e602:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    e606:	c8 5f       	subi	r28, 0xF8	; 248
    e608:	de 4f       	sbci	r29, 0xFE	; 254
    e60a:	18 82       	st	Y, r1
    e60c:	c8 50       	subi	r28, 0x08	; 8
    e60e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    e610:	24 e0       	ldi	r18, 0x04	; 4
    e612:	4a e9       	ldi	r20, 0x9A	; 154
    e614:	5c e0       	ldi	r21, 0x0C	; 12
    e616:	6e e2       	ldi	r22, 0x2E	; 46
    e618:	ce 01       	movw	r24, r28
    e61a:	88 5f       	subi	r24, 0xF8	; 248
    e61c:	9e 4f       	sbci	r25, 0xFE	; 254
    e61e:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    e622:	65 e3       	ldi	r22, 0x35	; 53
    e624:	7a e3       	ldi	r23, 0x3A	; 58
    e626:	ce 01       	movw	r24, r28
    e628:	88 5b       	subi	r24, 0xB8	; 184
    e62a:	9f 4f       	sbci	r25, 0xFF	; 255
    e62c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e630:	ae 01       	movw	r20, r28
    e632:	48 5f       	subi	r20, 0xF8	; 248
    e634:	5e 4f       	sbci	r21, 0xFE	; 254
    e636:	be 01       	movw	r22, r28
    e638:	68 5b       	subi	r22, 0xB8	; 184
    e63a:	7f 4f       	sbci	r23, 0xFF	; 255
    e63c:	8d e6       	ldi	r24, 0x6D	; 109
    e63e:	9e e0       	ldi	r25, 0x0E	; 14
    e640:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    e644:	4a e0       	ldi	r20, 0x0A	; 10
    e646:	be 01       	movw	r22, r28
    e648:	68 5f       	subi	r22, 0xF8	; 248
    e64a:	7e 4f       	sbci	r23, 0xFE	; 254
    e64c:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <device+0x24>
    e650:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <device+0x25>
    e654:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    e658:	63 e2       	ldi	r22, 0x23	; 35
    e65a:	7a e3       	ldi	r23, 0x3A	; 58
    e65c:	ce 01       	movw	r24, r28
    e65e:	88 5b       	subi	r24, 0xB8	; 184
    e660:	9f 4f       	sbci	r25, 0xFF	; 255
    e662:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    e666:	ae 01       	movw	r20, r28
    e668:	48 5f       	subi	r20, 0xF8	; 248
    e66a:	5e 4f       	sbci	r21, 0xFE	; 254
    e66c:	be 01       	movw	r22, r28
    e66e:	68 5b       	subi	r22, 0xB8	; 184
    e670:	7f 4f       	sbci	r23, 0xFF	; 255
    e672:	8d e6       	ldi	r24, 0x6D	; 109
    e674:	9e e0       	ldi	r25, 0x0E	; 14
    e676:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    e67a:	61 e1       	ldi	r22, 0x11	; 17
    e67c:	7a e3       	ldi	r23, 0x3A	; 58
    e67e:	ce 01       	movw	r24, r28
    e680:	88 5b       	subi	r24, 0xB8	; 184
    e682:	9f 4f       	sbci	r25, 0xFF	; 255
    e684:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    e688:	40 ea       	ldi	r20, 0xA0	; 160
    e68a:	5c e0       	ldi	r21, 0x0C	; 12
    e68c:	be 01       	movw	r22, r28
    e68e:	68 5b       	subi	r22, 0xB8	; 184
    e690:	7f 4f       	sbci	r23, 0xFF	; 255
    e692:	8d e6       	ldi	r24, 0x6D	; 109
    e694:	9e e0       	ldi	r25, 0x0E	; 14
    e696:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    e69a:	60 e0       	ldi	r22, 0x00	; 0
    e69c:	7a e3       	ldi	r23, 0x3A	; 58
    e69e:	ce 01       	movw	r24, r28
    e6a0:	88 5b       	subi	r24, 0xB8	; 184
    e6a2:	9f 4f       	sbci	r25, 0xFF	; 255
    e6a4:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    e6a8:	44 eb       	ldi	r20, 0xB4	; 180
    e6aa:	5c e0       	ldi	r21, 0x0C	; 12
    e6ac:	be 01       	movw	r22, r28
    e6ae:	68 5b       	subi	r22, 0xB8	; 184
    e6b0:	7f 4f       	sbci	r23, 0xFF	; 255
    e6b2:	8d e6       	ldi	r24, 0x6D	; 109
    e6b4:	9e e0       	ldi	r25, 0x0E	; 14
    e6b6:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    e6ba:	63 ef       	ldi	r22, 0xF3	; 243
    e6bc:	79 e3       	ldi	r23, 0x39	; 57
    e6be:	ce 01       	movw	r24, r28
    e6c0:	88 5b       	subi	r24, 0xB8	; 184
    e6c2:	9f 4f       	sbci	r25, 0xFF	; 255
    e6c4:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    e6c8:	40 e9       	ldi	r20, 0x90	; 144
    e6ca:	5c e0       	ldi	r21, 0x0C	; 12
    e6cc:	be 01       	movw	r22, r28
    e6ce:	68 5b       	subi	r22, 0xB8	; 184
    e6d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e6d2:	8d e6       	ldi	r24, 0x6D	; 109
    e6d4:	9e e0       	ldi	r25, 0x0E	; 14
    e6d6:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3526
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    e6da:	69 e0       	ldi	r22, 0x09	; 9
    e6dc:	7b e3       	ldi	r23, 0x3B	; 59
    e6de:	c5 01       	movw	r24, r10
    e6e0:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3527
  strcat(str1, device.nazev);
    e6e4:	60 e9       	ldi	r22, 0x90	; 144
    e6e6:	7c e0       	ldi	r23, 0x0C	; 12
    e6e8:	c5 01       	movw	r24, r10
    e6ea:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
  strcat(str1, "/network/set/");
    e6ee:	61 ea       	ldi	r22, 0xA1	; 161
    e6f0:	75 e0       	ldi	r23, 0x05	; 5
    e6f2:	c5 01       	movw	r24, r10
    e6f4:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3529
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e6f8:	f5 01       	movw	r30, r10
    e6fa:	01 90       	ld	r0, Z+
    e6fc:	00 20       	and	r0, r0
    e6fe:	e9 f7       	brne	.-6      	; 0xe6fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x17d2>
    e700:	31 97       	sbiw	r30, 0x01	; 1
    e702:	af 01       	movw	r20, r30
    e704:	4a 19       	sub	r20, r10
    e706:	5b 09       	sbc	r21, r11
    e708:	b4 01       	movw	r22, r8
    e70a:	c5 01       	movw	r24, r10
    e70c:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    e710:	89 2b       	or	r24, r25
    e712:	09 f0       	breq	.+2      	; 0xe716 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17ee>
    e714:	f1 c0       	rjmp	.+482    	; 0xe8f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
  {
    mqtt_process_message++;
    e716:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    e71a:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    e71e:	01 96       	adiw	r24, 0x01	; 1
    e720:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    e724:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3533
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e728:	f5 01       	movw	r30, r10
    e72a:	01 90       	ld	r0, Z+
    e72c:	00 20       	and	r0, r0
    e72e:	e9 f7       	brne	.-6      	; 0xe72a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1802>
    e730:	31 97       	sbiw	r30, 0x01	; 1
    e732:	ea 19       	sub	r30, r10
    e734:	fb 09       	sbc	r31, r11
    e736:	9e 2f       	mov	r25, r30
    e738:	4e 2f       	mov	r20, r30
    e73a:	84 2f       	mov	r24, r20
    e73c:	89 1b       	sub	r24, r25
    e73e:	24 2f       	mov	r18, r20
    e740:	30 e0       	ldi	r19, 0x00	; 0
    e742:	d4 01       	movw	r26, r8
    e744:	0d 90       	ld	r0, X+
    e746:	00 20       	and	r0, r0
    e748:	e9 f7       	brne	.-6      	; 0xe744 <mqtt_callback(char*, unsigned char*, unsigned int)+0x181c>
    e74a:	11 97       	sbiw	r26, 0x01	; 1
    e74c:	a8 19       	sub	r26, r8
    e74e:	b9 09       	sbc	r27, r9
    e750:	2a 17       	cp	r18, r26
    e752:	3b 07       	cpc	r19, r27
    e754:	88 f4       	brcc	.+34     	; 0xe778 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1850>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3535
    {
      str1[cnt] = topic[f];
    e756:	d5 01       	movw	r26, r10
    e758:	a8 0f       	add	r26, r24
    e75a:	b1 1d       	adc	r27, r1
    e75c:	28 0d       	add	r18, r8
    e75e:	39 1d       	adc	r19, r9
    e760:	f9 01       	movw	r30, r18
    e762:	80 81       	ld	r24, Z
    e764:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3536
      str1[cnt + 1] = 0;
    e766:	11 96       	adiw	r26, 0x01	; 1
    e768:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3533
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e76a:	4f 5f       	subi	r20, 0xFF	; 255
    e76c:	e6 cf       	rjmp	.-52     	; 0xe73a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1812>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3499
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    e76e:	8b e7       	ldi	r24, 0x7B	; 123
    e770:	95 e0       	ldi	r25, 0x05	; 5
    e772:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    e776:	64 ce       	rjmp	.-824    	; 0xe440 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1518>
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    e778:	6c ed       	ldi	r22, 0xDC	; 220
    e77a:	73 e0       	ldi	r23, 0x03	; 3
    e77c:	c5 01       	movw	r24, r10
    e77e:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    e782:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    e784:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    e786:	e1 14       	cp	r14, r1
    e788:	f1 04       	cpc	r15, r1
    e78a:	09 f4       	brne	.+2      	; 0xe78e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1866>
    e78c:	a9 c0       	rjmp	.+338    	; 0xe8e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b8>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    e78e:	6f ea       	ldi	r22, 0xAF	; 175
    e790:	75 e0       	ldi	r23, 0x05	; 5
    e792:	c7 01       	movw	r24, r14
    e794:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e798:	89 2b       	or	r24, r25
    e79a:	41 f4       	brne	.+16     	; 0xe7ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1884>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    e79c:	46 e0       	ldi	r20, 0x06	; 6
    e79e:	50 e0       	ldi	r21, 0x00	; 0
    e7a0:	6a e7       	ldi	r22, 0x7A	; 122
    e7a2:	7c e0       	ldi	r23, 0x0C	; 12
    e7a4:	8a e3       	ldi	r24, 0x3A	; 58
    e7a6:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    e7aa:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    e7ac:	63 eb       	ldi	r22, 0xB3	; 179
    e7ae:	75 e0       	ldi	r23, 0x05	; 5
    e7b0:	c7 01       	movw	r24, r14
    e7b2:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e7b6:	89 2b       	or	r24, r25
    e7b8:	41 f4       	brne	.+16     	; 0xe7ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x18a2>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    e7ba:	44 e0       	ldi	r20, 0x04	; 4
    e7bc:	50 e0       	ldi	r21, 0x00	; 0
    e7be:	60 e8       	ldi	r22, 0x80	; 128
    e7c0:	7c e0       	ldi	r23, 0x0C	; 12
    e7c2:	8e e2       	ldi	r24, 0x2E	; 46
    e7c4:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    e7c8:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    e7ca:	66 eb       	ldi	r22, 0xB6	; 182
    e7cc:	75 e0       	ldi	r23, 0x05	; 5
    e7ce:	c7 01       	movw	r24, r14
    e7d0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e7d4:	89 2b       	or	r24, r25
    e7d6:	41 f4       	brne	.+16     	; 0xe7e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18c0>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    e7d8:	44 e0       	ldi	r20, 0x04	; 4
    e7da:	50 e0       	ldi	r21, 0x00	; 0
    e7dc:	64 e8       	ldi	r22, 0x84	; 132
    e7de:	7c e0       	ldi	r23, 0x0C	; 12
    e7e0:	8e e2       	ldi	r24, 0x2E	; 46
    e7e2:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    e7e6:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    e7e8:	6e eb       	ldi	r22, 0xBE	; 190
    e7ea:	75 e0       	ldi	r23, 0x05	; 5
    e7ec:	c7 01       	movw	r24, r14
    e7ee:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e7f2:	89 2b       	or	r24, r25
    e7f4:	41 f4       	brne	.+16     	; 0xe806 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18de>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    e7f6:	44 e0       	ldi	r20, 0x04	; 4
    e7f8:	50 e0       	ldi	r21, 0x00	; 0
    e7fa:	6c e8       	ldi	r22, 0x8C	; 140
    e7fc:	7c e0       	ldi	r23, 0x0C	; 12
    e7fe:	8e e2       	ldi	r24, 0x2E	; 46
    e800:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    e804:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    e806:	61 ec       	ldi	r22, 0xC1	; 193
    e808:	75 e0       	ldi	r23, 0x05	; 5
    e80a:	c7 01       	movw	r24, r14
    e80c:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e810:	89 2b       	or	r24, r25
    e812:	41 f4       	brne	.+16     	; 0xe824 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18fc>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    e814:	44 e0       	ldi	r20, 0x04	; 4
    e816:	50 e0       	ldi	r21, 0x00	; 0
    e818:	68 e8       	ldi	r22, 0x88	; 136
    e81a:	7c e0       	ldi	r23, 0x0C	; 12
    e81c:	8e e2       	ldi	r24, 0x2E	; 46
    e81e:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    e822:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    e824:	65 ec       	ldi	r22, 0xC5	; 197
    e826:	75 e0       	ldi	r23, 0x05	; 5
    e828:	c7 01       	movw	r24, r14
    e82a:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e82e:	89 2b       	or	r24, r25
    e830:	41 f4       	brne	.+16     	; 0xe842 <mqtt_callback(char*, unsigned char*, unsigned int)+0x191a>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    e832:	44 e0       	ldi	r20, 0x04	; 4
    e834:	50 e0       	ldi	r21, 0x00	; 0
    e836:	68 ec       	ldi	r22, 0xC8	; 200
    e838:	7c e0       	ldi	r23, 0x0C	; 12
    e83a:	8e e2       	ldi	r24, 0x2E	; 46
    e83c:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    e840:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    e842:	69 ec       	ldi	r22, 0xC9	; 201
    e844:	75 e0       	ldi	r23, 0x05	; 5
    e846:	c7 01       	movw	r24, r14
    e848:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e84c:	89 2b       	or	r24, r25
    e84e:	41 f4       	brne	.+16     	; 0xe860 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1938>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    e850:	44 e0       	ldi	r20, 0x04	; 4
    e852:	50 e0       	ldi	r21, 0x00	; 0
    e854:	6a e9       	ldi	r22, 0x9A	; 154
    e856:	7c e0       	ldi	r23, 0x0C	; 12
    e858:	8e e2       	ldi	r24, 0x2E	; 46
    e85a:	0e 94 f2 8f 	call	0x11fe4	; 0x11fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    e85e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    e860:	63 ed       	ldi	r22, 0xD3	; 211
    e862:	75 e0       	ldi	r23, 0x05	; 5
    e864:	c7 01       	movw	r24, r14
    e866:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e86a:	89 2b       	or	r24, r25
    e86c:	49 f4       	brne	.+18     	; 0xe880 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1958>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    e86e:	86 e3       	ldi	r24, 0x36	; 54
    e870:	9b e0       	ldi	r25, 0x0B	; 11
    e872:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e876:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <device+0x25>
    e87a:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    e87e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    e880:	6d ed       	ldi	r22, 0xDD	; 221
    e882:	75 e0       	ldi	r23, 0x05	; 5
    e884:	c7 01       	movw	r24, r14
    e886:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e88a:	89 2b       	or	r24, r25
    e88c:	39 f4       	brne	.+14     	; 0xe89c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1974>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    e88e:	66 e3       	ldi	r22, 0x36	; 54
    e890:	7b e0       	ldi	r23, 0x0B	; 11
    e892:	80 ea       	ldi	r24, 0xA0	; 160
    e894:	9c e0       	ldi	r25, 0x0C	; 12
    e896:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    e89a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    e89c:	67 ee       	ldi	r22, 0xE7	; 231
    e89e:	75 e0       	ldi	r23, 0x05	; 5
    e8a0:	c7 01       	movw	r24, r14
    e8a2:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e8a6:	89 2b       	or	r24, r25
    e8a8:	39 f4       	brne	.+14     	; 0xe8b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1990>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    e8aa:	66 e3       	ldi	r22, 0x36	; 54
    e8ac:	7b e0       	ldi	r23, 0x0B	; 11
    e8ae:	84 eb       	ldi	r24, 0xB4	; 180
    e8b0:	9c e0       	ldi	r25, 0x0C	; 12
    e8b2:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    e8b6:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    e8b8:	65 eb       	ldi	r22, 0xB5	; 181
    e8ba:	73 e0       	ldi	r23, 0x03	; 3
    e8bc:	c7 01       	movw	r24, r14
    e8be:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    e8c2:	89 2b       	or	r24, r25
    e8c4:	29 f4       	brne	.+10     	; 0xe8d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19a8>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    e8c6:	86 e3       	ldi	r24, 0x36	; 54
    e8c8:	9b e0       	ldi	r25, 0x0B	; 11
    e8ca:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    e8ce:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    e8d0:	6c ed       	ldi	r22, 0xDC	; 220
    e8d2:	73 e0       	ldi	r23, 0x03	; 3
    e8d4:	90 e0       	ldi	r25, 0x00	; 0
    e8d6:	80 e0       	ldi	r24, 0x00	; 0
    e8d8:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    e8dc:	7c 01       	movw	r14, r24
    e8de:	53 cf       	rjmp	.-346    	; 0xe786 <mqtt_callback(char*, unsigned char*, unsigned int)+0x185e>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3540
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    e8e0:	11 30       	cpi	r17, 0x01	; 1
    e8e2:	41 f4       	brne	.+16     	; 0xe8f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
    {
      save_setup_network();
    e8e4:	0e 94 0d 59 	call	0xb21a	; 0xb21a <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3547
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    e8e8:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
    e8ec:	80 68       	ori	r24, 0x80	; 128
    e8ee:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <selftest_data>
    e8f2:	02 c0       	rjmp	.+4      	; 0xe8f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3545
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    e8f4:	12 30       	cpi	r17, 0x02	; 2
    e8f6:	c1 f3       	breq	.-16     	; 0xe8e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3552
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    e8f8:	69 e0       	ldi	r22, 0x09	; 9
    e8fa:	7b e3       	ldi	r23, 0x3B	; 59
    e8fc:	c5 01       	movw	r24, r10
    e8fe:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3553
  strcat(str1, device.nazev);
    e902:	60 e9       	ldi	r22, 0x90	; 144
    e904:	7c e0       	ldi	r23, 0x0C	; 12
    e906:	c5 01       	movw	r24, r10
    e908:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
  strcat(str1, "/light/set/");
    e90c:	61 ef       	ldi	r22, 0xF1	; 241
    e90e:	75 e0       	ldi	r23, 0x05	; 5
    e910:	c5 01       	movw	r24, r10
    e912:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3555
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e916:	f5 01       	movw	r30, r10
    e918:	01 90       	ld	r0, Z+
    e91a:	00 20       	and	r0, r0
    e91c:	e9 f7       	brne	.-6      	; 0xe918 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f0>
    e91e:	31 97       	sbiw	r30, 0x01	; 1
    e920:	af 01       	movw	r20, r30
    e922:	4a 19       	sub	r20, r10
    e924:	5b 09       	sbc	r21, r11
    e926:	b4 01       	movw	r22, r8
    e928:	c5 01       	movw	r24, r10
    e92a:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    e92e:	89 2b       	or	r24, r25
    e930:	09 f0       	breq	.+2      	; 0xe934 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a0c>
    e932:	41 c0       	rjmp	.+130    	; 0xe9b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3557
  {
    mqtt_process_message++;
    e934:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    e938:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    e93c:	01 96       	adiw	r24, 0x01	; 1
    e93e:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    e942:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3560
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e946:	f5 01       	movw	r30, r10
    e948:	01 90       	ld	r0, Z+
    e94a:	00 20       	and	r0, r0
    e94c:	e9 f7       	brne	.-6      	; 0xe948 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a20>
    e94e:	31 97       	sbiw	r30, 0x01	; 1
    e950:	ea 19       	sub	r30, r10
    e952:	fb 09       	sbc	r31, r11
    e954:	9e 2f       	mov	r25, r30
    e956:	4e 2f       	mov	r20, r30
    e958:	84 2f       	mov	r24, r20
    e95a:	89 1b       	sub	r24, r25
    e95c:	24 2f       	mov	r18, r20
    e95e:	30 e0       	ldi	r19, 0x00	; 0
    e960:	d4 01       	movw	r26, r8
    e962:	0d 90       	ld	r0, X+
    e964:	00 20       	and	r0, r0
    e966:	e9 f7       	brne	.-6      	; 0xe962 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a3a>
    e968:	11 97       	sbiw	r26, 0x01	; 1
    e96a:	a8 19       	sub	r26, r8
    e96c:	b9 09       	sbc	r27, r9
    e96e:	2a 17       	cp	r18, r26
    e970:	3b 07       	cpc	r19, r27
    e972:	60 f4       	brcc	.+24     	; 0xe98c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3562
    {
      str1[cnt] = topic[f];
    e974:	d5 01       	movw	r26, r10
    e976:	a8 0f       	add	r26, r24
    e978:	b1 1d       	adc	r27, r1
    e97a:	28 0d       	add	r18, r8
    e97c:	39 1d       	adc	r19, r9
    e97e:	f9 01       	movw	r30, r18
    e980:	80 81       	ld	r24, Z
    e982:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
      str1[cnt + 1] = 0;
    e984:	11 96       	adiw	r26, 0x01	; 1
    e986:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3560
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e988:	4f 5f       	subi	r20, 0xFF	; 255
    e98a:	e6 cf       	rjmp	.-52     	; 0xe958 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    e98c:	6c ed       	ldi	r22, 0xDC	; 220
    e98e:	73 e0       	ldi	r23, 0x03	; 3
    e990:	c5 01       	movw	r24, r10
    e992:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3566
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    e996:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
    pch = strtok (str1, "/");
    while (pch != NULL)
    e998:	00 97       	sbiw	r24, 0x00	; 0
    e99a:	69 f0       	breq	.+26     	; 0xe9b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
    {
      if (cnt == 0) id = atoi(pch);
    e99c:	11 11       	cpse	r17, r1
    e99e:	03 c0       	rjmp	.+6      	; 0xe9a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a7e>
    e9a0:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    e9a4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3573
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    e9a6:	6c ed       	ldi	r22, 0xDC	; 220
    e9a8:	73 e0       	ldi	r23, 0x03	; 3
    e9aa:	90 e0       	ldi	r25, 0x00	; 0
    e9ac:	80 e0       	ldi	r24, 0x00	; 0
    e9ae:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3574
      cnt++;
    e9b2:	1f 5f       	subi	r17, 0xFF	; 255
    e9b4:	f1 cf       	rjmp	.-30     	; 0xe998 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3579
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    e9b6:	6d eb       	ldi	r22, 0xBD	; 189
    e9b8:	7a e3       	ldi	r23, 0x3A	; 58
    e9ba:	c5 01       	movw	r24, r10
    e9bc:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
  strcat(str1, "output/");
    e9c0:	6d ef       	ldi	r22, 0xFD	; 253
    e9c2:	75 e0       	ldi	r23, 0x05	; 5
    e9c4:	c5 01       	movw	r24, r10
    e9c6:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3581
  if (strncmp(str1, topic, strlen(str1)) == 0)
    e9ca:	f5 01       	movw	r30, r10
    e9cc:	01 90       	ld	r0, Z+
    e9ce:	00 20       	and	r0, r0
    e9d0:	e9 f7       	brne	.-6      	; 0xe9cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa4>
    e9d2:	31 97       	sbiw	r30, 0x01	; 1
    e9d4:	af 01       	movw	r20, r30
    e9d6:	4a 19       	sub	r20, r10
    e9d8:	5b 09       	sbc	r21, r11
    e9da:	b4 01       	movw	r22, r8
    e9dc:	c5 01       	movw	r24, r10
    e9de:	0e 94 0f be 	call	0x17c1e	; 0x17c1e <strncmp>
    e9e2:	89 2b       	or	r24, r25
    e9e4:	09 f0       	breq	.+2      	; 0xe9e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac0>
    e9e6:	73 c0       	rjmp	.+230    	; 0xeace <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
  {
    mqtt_process_message++;
    e9e8:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    e9ec:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    e9f0:	01 96       	adiw	r24, 0x01	; 1
    e9f2:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    e9f6:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    e9fa:	f5 01       	movw	r30, r10
    e9fc:	01 90       	ld	r0, Z+
    e9fe:	00 20       	and	r0, r0
    ea00:	e9 f7       	brne	.-6      	; 0xe9fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ad4>
    ea02:	31 97       	sbiw	r30, 0x01	; 1
    ea04:	ea 19       	sub	r30, r10
    ea06:	fb 09       	sbc	r31, r11
    ea08:	9e 2f       	mov	r25, r30
    ea0a:	4e 2f       	mov	r20, r30
    ea0c:	84 2f       	mov	r24, r20
    ea0e:	89 1b       	sub	r24, r25
    ea10:	24 2f       	mov	r18, r20
    ea12:	30 e0       	ldi	r19, 0x00	; 0
    ea14:	d4 01       	movw	r26, r8
    ea16:	0d 90       	ld	r0, X+
    ea18:	00 20       	and	r0, r0
    ea1a:	e9 f7       	brne	.-6      	; 0xea16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aee>
    ea1c:	11 97       	sbiw	r26, 0x01	; 1
    ea1e:	a8 19       	sub	r26, r8
    ea20:	b9 09       	sbc	r27, r9
    ea22:	2a 17       	cp	r18, r26
    ea24:	3b 07       	cpc	r19, r27
    ea26:	60 f4       	brcc	.+24     	; 0xea40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
    {
      str1[cnt] = topic[f];
    ea28:	d5 01       	movw	r26, r10
    ea2a:	a8 0f       	add	r26, r24
    ea2c:	b1 1d       	adc	r27, r1
    ea2e:	28 0d       	add	r18, r8
    ea30:	39 1d       	adc	r19, r9
    ea32:	f9 01       	movw	r30, r18
    ea34:	80 81       	ld	r24, Z
    ea36:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
      str1[cnt + 1] = 0;
    ea38:	11 96       	adiw	r26, 0x01	; 1
    ea3a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ea3c:	4f 5f       	subi	r20, 0xFF	; 255
    ea3e:	e6 cf       	rjmp	.-52     	; 0xea0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ae4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ea40:	6c ed       	ldi	r22, 0xDC	; 220
    ea42:	73 e0       	ldi	r23, 0x03	; 3
    ea44:	c5 01       	movw	r24, r10
    ea46:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    ea4a:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ea4c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
    pch = strtok (str1, "/");
    while (pch != NULL)
    ea4e:	01 15       	cp	r16, r1
    ea50:	11 05       	cpc	r17, r1
    ea52:	e9 f1       	breq	.+122    	; 0xeace <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3595
    {
      if (cnt == 0) id = atoi(pch);
    ea54:	f1 10       	cpse	r15, r1
    ea56:	0d c0       	rjmp	.+26     	; 0xea72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4a>
    ea58:	c8 01       	movw	r24, r16
    ea5a:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    ea5e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    ea60:	6c ed       	ldi	r22, 0xDC	; 220
    ea62:	73 e0       	ldi	r23, 0x03	; 3
    ea64:	90 e0       	ldi	r25, 0x00	; 0
    ea66:	80 e0       	ldi	r24, 0x00	; 0
    ea68:	0e 94 89 b1 	call	0x16312	; 0x16312 <strtok>
    ea6c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607
      cnt++;
    ea6e:	f3 94       	inc	r15
    ea70:	ee cf       	rjmp	.-36     	; 0xea4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    ea72:	f1 e0       	ldi	r31, 0x01	; 1
    ea74:	ff 12       	cpse	r15, r31
    ea76:	f4 cf       	rjmp	.-24     	; 0xea60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
    ea78:	8f e5       	ldi	r24, 0x5F	; 95
    ea7a:	c8 2e       	mov	r12, r24
    ea7c:	dd 24       	eor	r13, r13
    ea7e:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    ea80:	c6 01       	movw	r24, r12
    ea82:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3599
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    ea86:	78 12       	cpse	r7, r24
    ea88:	19 c0       	rjmp	.+50     	; 0xeabc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3601
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    ea8a:	65 e0       	ldi	r22, 0x05	; 5
    ea8c:	76 e0       	ldi	r23, 0x06	; 6
    ea8e:	c8 01       	movw	r24, r16
    ea90:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    ea94:	89 2b       	or	r24, r25
    ea96:	29 f0       	breq	.+10     	; 0xeaa2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b7a>
    ea98:	e7 2d       	mov	r30, r7
    ea9a:	f0 e0       	ldi	r31, 0x00	; 0
    ea9c:	e1 59       	subi	r30, 0x91	; 145
    ea9e:	f5 4f       	sbci	r31, 0xF5	; 245
    eaa0:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    eaa2:	69 e0       	ldi	r22, 0x09	; 9
    eaa4:	76 e0       	ldi	r23, 0x06	; 6
    eaa6:	c8 01       	movw	r24, r16
    eaa8:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    eaac:	89 2b       	or	r24, r25
    eaae:	c1 f2       	breq	.-80     	; 0xea60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
    eab0:	e7 2d       	mov	r30, r7
    eab2:	f0 e0       	ldi	r31, 0x00	; 0
    eab4:	e1 59       	subi	r30, 0x91	; 145
    eab6:	f5 4f       	sbci	r31, 0xF5	; 245
    eab8:	10 82       	st	Z, r1
    eaba:	d2 cf       	rjmp	.-92     	; 0xea60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
    eabc:	21 e2       	ldi	r18, 0x21	; 33
    eabe:	c2 0e       	add	r12, r18
    eac0:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3598
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    eac2:	84 e0       	ldi	r24, 0x04	; 4
    eac4:	c8 16       	cp	r12, r24
    eac6:	82 e0       	ldi	r24, 0x02	; 2
    eac8:	d8 06       	cpc	r13, r24
    eaca:	d1 f6       	brne	.-76     	; 0xea80 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b58>
    eacc:	c9 cf       	rjmp	.-110    	; 0xea60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    eace:	69 e0       	ldi	r22, 0x09	; 9
    ead0:	7b e3       	ldi	r23, 0x3B	; 59
    ead2:	c5 01       	movw	r24, r10
    ead4:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
  strcat(str1, device.nazev);
    ead8:	60 e9       	ldi	r22, 0x90	; 144
    eada:	7c e0       	ldi	r23, 0x0C	; 12
    eadc:	c5 01       	movw	r24, r10
    eade:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
  strcat(str1, "/reload");
    eae2:	6f e0       	ldi	r22, 0x0F	; 15
    eae4:	76 e0       	ldi	r23, 0x06	; 6
    eae6:	c5 01       	movw	r24, r10
    eae8:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
  if (strcmp(str1, topic) == 0)
    eaec:	b4 01       	movw	r22, r8
    eaee:	c5 01       	movw	r24, r10
    eaf0:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    eaf4:	8c 01       	movw	r16, r24
    eaf6:	89 2b       	or	r24, r25
    eaf8:	79 f4       	brne	.+30     	; 0xeb18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3617
  {
    mqtt_process_message++;
    eafa:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    eafe:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    eb02:	01 96       	adiw	r24, 0x01	; 1
    eb04:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    eb08:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618
    log_error(&mqtt_client, "reload ..... ");
    eb0c:	87 e1       	ldi	r24, 0x17	; 23
    eb0e:	96 e0       	ldi	r25, 0x06	; 6
    eb10:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3619
    resetFunc();
    eb14:	f8 01       	movw	r30, r16
    eb16:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    eb18:	69 e0       	ldi	r22, 0x09	; 9
    eb1a:	7b e3       	ldi	r23, 0x3B	; 59
    eb1c:	c5 01       	movw	r24, r10
    eb1e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
  strcat(str1, device.nazev);
    eb22:	60 e9       	ldi	r22, 0x90	; 144
    eb24:	7c e0       	ldi	r23, 0x0C	; 12
    eb26:	c5 01       	movw	r24, r10
    eb28:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3625
  strcat(str1, "/bootloader");
    eb2c:	65 e2       	ldi	r22, 0x25	; 37
    eb2e:	76 e0       	ldi	r23, 0x06	; 6
    eb30:	c5 01       	movw	r24, r10
    eb32:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3626
  if (strcmp(str1, topic) == 0)
    eb36:	b4 01       	movw	r22, r8
    eb38:	c5 01       	movw	r24, r10
    eb3a:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    eb3e:	89 2b       	or	r24, r25
    eb40:	e9 f4       	brne	.+58     	; 0xeb7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
  {
    mqtt_process_message++;
    eb42:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    eb46:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    eb4a:	01 96       	adiw	r24, 0x01	; 1
    eb4c:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    eb50:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
    log_error(&mqtt_client, "bootloader ..... ");
    eb54:	81 e3       	ldi	r24, 0x31	; 49
    eb56:	96 e0       	ldi	r25, 0x06	; 6
    eb58:	0e 94 cc 8f 	call	0x11f98	; 0x11f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3630
    EEPROM.write(bootloader_tag, 255);
    eb5c:	6f ef       	ldi	r22, 0xFF	; 255
    eb5e:	90 e0       	ldi	r25, 0x00	; 0
    eb60:	80 e0       	ldi	r24, 0x00	; 0
    eb62:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    eb66:	88 e1       	ldi	r24, 0x18	; 24
    eb68:	9e e0       	ldi	r25, 0x0E	; 14
    eb6a:	0f b6       	in	r0, 0x3f	; 63
    eb6c:	f8 94       	cli
    eb6e:	a8 95       	wdr
    eb70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    eb74:	0f be       	out	0x3f, r0	; 63
    eb76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    eb7a:	ff cf       	rjmp	.-2      	; 0xeb7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c52>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    eb7c:	69 e0       	ldi	r22, 0x09	; 9
    eb7e:	7b e3       	ldi	r23, 0x3B	; 59
    eb80:	c5 01       	movw	r24, r10
    eb82:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
  strcat(str1, device.nazev);
    eb86:	60 e9       	ldi	r22, 0x90	; 144
    eb88:	7c e0       	ldi	r23, 0x0C	; 12
    eb8a:	c5 01       	movw	r24, r10
    eb8c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
  strcat(str1, "/default");
    eb90:	61 e2       	ldi	r22, 0x21	; 33
    eb92:	75 e0       	ldi	r23, 0x05	; 5
    eb94:	c5 01       	movw	r24, r10
    eb96:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639
  if (strcmp(str1, topic) == 0)
    eb9a:	b4 01       	movw	r22, r8
    eb9c:	c5 01       	movw	r24, r10
    eb9e:	0e 94 ff bd 	call	0x17bfe	; 0x17bfe <strcmp>
    eba2:	89 2b       	or	r24, r25
    eba4:	91 f4       	brne	.+36     	; 0xebca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
  {
    mqtt_process_message++;
    eba6:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
    ebaa:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
    ebae:	01 96       	adiw	r24, 0x01	; 1
    ebb0:	90 93 5e 0a 	sts	0x0A5E, r25	; 0x800a5e <mqtt_process_message+0x1>
    ebb4:	80 93 5d 0a 	sts	0x0A5D, r24	; 0x800a5d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    ebb8:	86 e3       	ldi	r24, 0x36	; 54
    ebba:	9b e0       	ldi	r25, 0x0B	; 11
    ebbc:	0e 94 50 b1 	call	0x162a0	; 0x162a0 <atoi>
    ebc0:	68 2f       	mov	r22, r24
    ebc2:	8a e5       	ldi	r24, 0x5A	; 90
    ebc4:	90 e0       	ldi	r25, 0x00	; 0
    ebc6:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
  }

}
    ebca:	c4 5d       	subi	r28, 0xD4	; 212
    ebcc:	de 4f       	sbci	r29, 0xFE	; 254
    ebce:	0f b6       	in	r0, 0x3f	; 63
    ebd0:	f8 94       	cli
    ebd2:	de bf       	out	0x3e, r29	; 62
    ebd4:	0f be       	out	0x3f, r0	; 63
    ebd6:	cd bf       	out	0x3d, r28	; 61
    ebd8:	df 91       	pop	r29
    ebda:	cf 91       	pop	r28
    ebdc:	1f 91       	pop	r17
    ebde:	0f 91       	pop	r16
    ebe0:	ff 90       	pop	r15
    ebe2:	ef 90       	pop	r14
    ebe4:	df 90       	pop	r13
    ebe6:	cf 90       	pop	r12
    ebe8:	bf 90       	pop	r11
    ebea:	af 90       	pop	r10
    ebec:	9f 90       	pop	r9
    ebee:	8f 90       	pop	r8
    ebf0:	7f 90       	pop	r7
    ebf2:	6f 90       	pop	r6
    ebf4:	5f 90       	pop	r5
    ebf6:	4f 90       	pop	r4
    ebf8:	3f 90       	pop	r3
    ebfa:	2f 90       	pop	r2
    ebfc:	08 95       	ret

0000ebfe <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    ebfe:	0f 93       	push	r16
    ec00:	1f 93       	push	r17
    ec02:	cf 93       	push	r28
    ec04:	df 93       	push	r29
    ec06:	cd b7       	in	r28, 0x3d	; 61
    ec08:	de b7       	in	r29, 0x3e	; 62
    ec0a:	a5 97       	sbiw	r28, 0x25	; 37
    ec0c:	0f b6       	in	r0, 0x3f	; 63
    ec0e:	f8 94       	cli
    ec10:	de bf       	out	0x3e, r29	; 62
    ec12:	0f be       	out	0x3f, r0	; 63
    ec14:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    ec16:	ce 01       	movw	r24, r28
    ec18:	4b 96       	adiw	r24, 0x1b	; 27
    ec1a:	0e 94 dc 61 	call	0xc3b8	; 0xc3b8 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
  if (!mqtt_client.connected())
    ec1e:	8d e6       	ldi	r24, 0x6D	; 109
    ec20:	9e e0       	ldi	r25, 0x0E	; 14
    ec22:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
    ec26:	81 11       	cpse	r24, r1
    ec28:	97 c0       	rjmp	.+302    	; 0xed58 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    ec2a:	8d e6       	ldi	r24, 0x6D	; 109
    ec2c:	9e e0       	ldi	r25, 0x0E	; 14
    ec2e:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
    ec32:	81 11       	cpse	r24, r1
    ec34:	d0 c0       	rjmp	.+416    	; 0xedd6 <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    ec36:	60 91 82 10 	lds	r22, 0x1082	; 0x801082 <mqtt_client+0x215>
    ec3a:	70 91 83 10 	lds	r23, 0x1083	; 0x801083 <mqtt_client+0x216>
    ec3e:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
    ec42:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
    ec46:	dc 01       	movw	r26, r24
    ec48:	ed 91       	ld	r30, X+
    ec4a:	fc 91       	ld	r31, X
    ec4c:	40 91 84 10 	lds	r20, 0x1084	; 0x801084 <mqtt_client+0x217>
    ec50:	50 91 85 10 	lds	r21, 0x1085	; 0x801085 <mqtt_client+0x218>
    ec54:	61 15       	cp	r22, r1
    ec56:	71 05       	cpc	r23, r1
    ec58:	09 f4       	brne	.+2      	; 0xec5c <mqtt_reconnect()+0x5e>
    ec5a:	8b c0       	rjmp	.+278    	; 0xed72 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    ec5c:	00 88       	ldd	r0, Z+16	; 0x10
    ec5e:	f1 89       	ldd	r31, Z+17	; 0x11
    ec60:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    ec62:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    ec64:	81 30       	cpi	r24, 0x01	; 1
    ec66:	91 05       	cpc	r25, r1
    ec68:	09 f0       	breq	.+2      	; 0xec6c <mqtt_reconnect()+0x6e>
    ec6a:	12 c1       	rjmp	.+548    	; 0xee90 <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    ec6c:	90 93 70 10 	sts	0x1070, r25	; 0x801070 <mqtt_client+0x203>
    ec70:	80 93 6f 10 	sts	0x106F, r24	; 0x80106f <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    ec74:	87 e0       	ldi	r24, 0x07	; 7
    ec76:	e6 e1       	ldi	r30, 0x16	; 22
    ec78:	f2 e0       	ldi	r31, 0x02	; 2
    ec7a:	de 01       	movw	r26, r28
    ec7c:	11 96       	adiw	r26, 0x01	; 1
    ec7e:	01 90       	ld	r0, Z+
    ec80:	0d 92       	st	X+, r0
    ec82:	8a 95       	dec	r24
    ec84:	e1 f7       	brne	.-8      	; 0xec7e <mqtt_reconnect()+0x80>
    ec86:	fe 01       	movw	r30, r28
    ec88:	31 96       	adiw	r30, 0x01	; 1
    ec8a:	a4 e7       	ldi	r26, 0x74	; 116
    ec8c:	be e0       	ldi	r27, 0x0E	; 14
    ec8e:	ce 01       	movw	r24, r28
    ec90:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    ec92:	21 91       	ld	r18, Z+
    ec94:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    ec96:	8e 17       	cp	r24, r30
    ec98:	9f 07       	cpc	r25, r31
    ec9a:	d9 f7       	brne	.-10     	; 0xec92 <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    ec9c:	82 e0       	ldi	r24, 0x02	; 2
    ec9e:	80 93 7b 0e 	sts	0x0E7B, r24	; 0x800e7b <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    eca2:	10 92 7c 0e 	sts	0x0E7C, r1	; 0x800e7c <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    eca6:	8f e0       	ldi	r24, 0x0F	; 15
    eca8:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    ecac:	4f e0       	ldi	r20, 0x0F	; 15
    ecae:	50 e0       	ldi	r21, 0x00	; 0
    ecb0:	6f e6       	ldi	r22, 0x6F	; 111
    ecb2:	7e e0       	ldi	r23, 0x0E	; 14
    ecb4:	ce 01       	movw	r24, r28
    ecb6:	4b 96       	adiw	r24, 0x1b	; 27
    ecb8:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    ecbc:	9c 01       	movw	r18, r24
    ecbe:	25 50       	subi	r18, 0x05	; 5
    ecc0:	31 09       	sbc	r19, r1
    ecc2:	4f e6       	ldi	r20, 0x6F	; 111
    ecc4:	5e e0       	ldi	r21, 0x0E	; 14
    ecc6:	60 e1       	ldi	r22, 0x10	; 16
    ecc8:	8d e6       	ldi	r24, 0x6D	; 109
    ecca:	9e e0       	ldi	r25, 0x0E	; 14
    eccc:	0e 94 16 9c 	call	0x1382c	; 0x1382c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    ecd0:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    ecd4:	60 93 71 10 	sts	0x1071, r22	; 0x801071 <mqtt_client+0x204>
    ecd8:	70 93 72 10 	sts	0x1072, r23	; 0x801072 <mqtt_client+0x205>
    ecdc:	80 93 73 10 	sts	0x1073, r24	; 0x801073 <mqtt_client+0x206>
    ece0:	90 93 74 10 	sts	0x1074, r25	; 0x801074 <mqtt_client+0x207>
    ece4:	60 93 75 10 	sts	0x1075, r22	; 0x801075 <mqtt_client+0x208>
    ece8:	70 93 76 10 	sts	0x1076, r23	; 0x801076 <mqtt_client+0x209>
    ecec:	80 93 77 10 	sts	0x1077, r24	; 0x801077 <mqtt_client+0x20a>
    ecf0:	90 93 78 10 	sts	0x1078, r25	; 0x801078 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    ecf4:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
    ecf8:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
    ecfc:	dc 01       	movw	r26, r24
    ecfe:	ed 91       	ld	r30, X+
    ed00:	fc 91       	ld	r31, X
    ed02:	00 84       	ldd	r0, Z+8	; 0x08
    ed04:	f1 85       	ldd	r31, Z+9	; 0x09
    ed06:	e0 2d       	mov	r30, r0
    ed08:	19 95       	eicall
    ed0a:	89 2b       	or	r24, r25
    ed0c:	09 f0       	breq	.+2      	; 0xed10 <mqtt_reconnect()+0x112>
    ed0e:	48 c0       	rjmp	.+144    	; 0xeda0 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    ed10:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    ed14:	00 91 75 10 	lds	r16, 0x1075	; 0x801075 <mqtt_client+0x208>
    ed18:	10 91 76 10 	lds	r17, 0x1076	; 0x801076 <mqtt_client+0x209>
    ed1c:	20 91 77 10 	lds	r18, 0x1077	; 0x801077 <mqtt_client+0x20a>
    ed20:	30 91 78 10 	lds	r19, 0x1078	; 0x801078 <mqtt_client+0x20b>
    ed24:	60 1b       	sub	r22, r16
    ed26:	71 0b       	sbc	r23, r17
    ed28:	82 0b       	sbc	r24, r18
    ed2a:	93 0b       	sbc	r25, r19
    ed2c:	64 36       	cpi	r22, 0x64	; 100
    ed2e:	71 05       	cpc	r23, r1
    ed30:	81 05       	cpc	r24, r1
    ed32:	91 05       	cpc	r25, r1
    ed34:	f8 f2       	brcs	.-66     	; 0xecf4 <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    ed36:	8c ef       	ldi	r24, 0xFC	; 252
    ed38:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    ed3a:	90 93 89 10 	sts	0x1089, r25	; 0x801089 <mqtt_client+0x21c>
    ed3e:	80 93 88 10 	sts	0x1088, r24	; 0x801088 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    ed42:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
    ed46:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
    ed4a:	dc 01       	movw	r26, r24
    ed4c:	ed 91       	ld	r30, X+
    ed4e:	fc 91       	ld	r31, X
    ed50:	04 88       	ldd	r0, Z+20	; 0x14
    ed52:	f5 89       	ldd	r31, Z+21	; 0x15
    ed54:	e0 2d       	mov	r30, r0
    ed56:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    ed58:	80 91 88 10 	lds	r24, 0x1088	; 0x801088 <mqtt_client+0x21b>
    ed5c:	a5 96       	adiw	r28, 0x25	; 37
    ed5e:	0f b6       	in	r0, 0x3f	; 63
    ed60:	f8 94       	cli
    ed62:	de bf       	out	0x3e, r29	; 62
    ed64:	0f be       	out	0x3f, r0	; 63
    ed66:	cd bf       	out	0x3d, r28	; 61
    ed68:	df 91       	pop	r29
    ed6a:	cf 91       	pop	r28
    ed6c:	1f 91       	pop	r17
    ed6e:	0f 91       	pop	r16
    ed70:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    ed72:	06 84       	ldd	r0, Z+14	; 0x0e
    ed74:	f7 85       	ldd	r31, Z+15	; 0x0f
    ed76:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    ed78:	22 ee       	ldi	r18, 0xE2	; 226
    ed7a:	32 e0       	ldi	r19, 0x02	; 2
    ed7c:	3a 83       	std	Y+2, r19	; 0x02
    ed7e:	29 83       	std	Y+1, r18	; 0x01
    ed80:	00 91 7e 10 	lds	r16, 0x107E	; 0x80107e <mqtt_client+0x211>
    ed84:	10 91 7f 10 	lds	r17, 0x107F	; 0x80107f <mqtt_client+0x212>
    ed88:	20 91 80 10 	lds	r18, 0x1080	; 0x801080 <mqtt_client+0x213>
    ed8c:	30 91 81 10 	lds	r19, 0x1081	; 0x801081 <mqtt_client+0x214>
    ed90:	0b 83       	std	Y+3, r16	; 0x03
    ed92:	1c 83       	std	Y+4, r17	; 0x04
    ed94:	2d 83       	std	Y+5, r18	; 0x05
    ed96:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    ed98:	be 01       	movw	r22, r28
    ed9a:	6f 5f       	subi	r22, 0xFF	; 255
    ed9c:	7f 4f       	sbci	r23, 0xFF	; 255
    ed9e:	61 cf       	rjmp	.-318    	; 0xec62 <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    eda0:	ce 01       	movw	r24, r28
    eda2:	85 96       	adiw	r24, 0x25	; 37
    eda4:	0e 94 ca 93 	call	0x12794	; 0x12794 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    eda8:	04 97       	sbiw	r24, 0x04	; 4
    edaa:	59 f6       	brne	.-106    	; 0xed42 <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    edac:	80 91 72 0e 	lds	r24, 0x0E72	; 0x800e72 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    edb0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    edb2:	81 11       	cpse	r24, r1
    edb4:	c2 cf       	rjmp	.-124    	; 0xed3a <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    edb6:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    edba:	60 93 75 10 	sts	0x1075, r22	; 0x801075 <mqtt_client+0x208>
    edbe:	70 93 76 10 	sts	0x1076, r23	; 0x801076 <mqtt_client+0x209>
    edc2:	80 93 77 10 	sts	0x1077, r24	; 0x801077 <mqtt_client+0x20a>
    edc6:	90 93 78 10 	sts	0x1078, r25	; 0x801078 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    edca:	10 92 79 10 	sts	0x1079, r1	; 0x801079 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    edce:	10 92 89 10 	sts	0x1089, r1	; 0x801089 <mqtt_client+0x21c>
    edd2:	10 92 88 10 	sts	0x1088, r1	; 0x801088 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    edd6:	69 e0       	ldi	r22, 0x09	; 9
    edd8:	7b e3       	ldi	r23, 0x3B	; 59
    edda:	ce 01       	movw	r24, r28
    eddc:	01 96       	adiw	r24, 0x01	; 1
    edde:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      strcat(topic, nazev);
    ede2:	be 01       	movw	r22, r28
    ede4:	65 5e       	subi	r22, 0xE5	; 229
    ede6:	7f 4f       	sbci	r23, 0xFF	; 255
    ede8:	ce 01       	movw	r24, r28
    edea:	01 96       	adiw	r24, 0x01	; 1
    edec:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      strcat(topic, "/#");
    edf0:	63 ea       	ldi	r22, 0xA3	; 163
    edf2:	76 e0       	ldi	r23, 0x06	; 6
    edf4:	ce 01       	movw	r24, r28
    edf6:	01 96       	adiw	r24, 0x01	; 1
    edf8:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3663
      mqtt_client.subscribe(topic);
    edfc:	ce 01       	movw	r24, r28
    edfe:	01 96       	adiw	r24, 0x01	; 1
    ee00:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      strcpy_P(topic, thermctl_header_in);
    ee04:	69 e0       	ldi	r22, 0x09	; 9
    ee06:	7b e3       	ldi	r23, 0x3B	; 59
    ee08:	ce 01       	movw	r24, r28
    ee0a:	01 96       	adiw	r24, 0x01	; 1
    ee0c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665
      strcat(topic, "global/#");
    ee10:	6d e9       	ldi	r22, 0x9D	; 157
    ee12:	76 e0       	ldi	r23, 0x06	; 6
    ee14:	ce 01       	movw	r24, r28
    ee16:	01 96       	adiw	r24, 0x01	; 1
    ee18:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      mqtt_client.subscribe(topic);
    ee1c:	ce 01       	movw	r24, r28
    ee1e:	01 96       	adiw	r24, 0x01	; 1
    ee20:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ee24:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
        remote_tds_subscibe_topic(idx);
    ee26:	81 2f       	mov	r24, r17
    ee28:	0e 94 24 67 	call	0xce48	; 0xce48 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ee2c:	1f 5f       	subi	r17, 0xFF	; 255
    ee2e:	1a 30       	cpi	r17, 0x0A	; 10
    ee30:	d1 f7       	brne	.-12     	; 0xee26 <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    ee32:	6a ef       	ldi	r22, 0xFA	; 250
    ee34:	7a e3       	ldi	r23, 0x3A	; 58
    ee36:	ce 01       	movw	r24, r28
    ee38:	01 96       	adiw	r24, 0x01	; 1
    ee3a:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
      strcat(topic, "/#");
    ee3e:	63 ea       	ldi	r22, 0xA3	; 163
    ee40:	76 e0       	ldi	r23, 0x06	; 6
    ee42:	ce 01       	movw	r24, r28
    ee44:	01 96       	adiw	r24, 0x01	; 1
    ee46:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3673
      mqtt_client.subscribe(topic);
    ee4a:	ce 01       	movw	r24, r28
    ee4c:	01 96       	adiw	r24, 0x01	; 1
    ee4e:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    ee52:	62 ee       	ldi	r22, 0xE2	; 226
    ee54:	7a e3       	ldi	r23, 0x3A	; 58
    ee56:	ce 01       	movw	r24, r28
    ee58:	01 96       	adiw	r24, 0x01	; 1
    ee5a:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      mqtt_client.subscribe(topic);
    ee5e:	ce 01       	movw	r24, r28
    ee60:	01 96       	adiw	r24, 0x01	; 1
    ee62:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    ee66:	6b ec       	ldi	r22, 0xCB	; 203
    ee68:	7a e3       	ldi	r23, 0x3A	; 58
    ee6a:	ce 01       	movw	r24, r28
    ee6c:	01 96       	adiw	r24, 0x01	; 1
    ee6e:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
      mqtt_client.subscribe(topic);
    ee72:	ce 01       	movw	r24, r28
    ee74:	01 96       	adiw	r24, 0x01	; 1
    ee76:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    ee7a:	6d eb       	ldi	r22, 0xBD	; 189
    ee7c:	7a e3       	ldi	r23, 0x3A	; 58
    ee7e:	ce 01       	movw	r24, r28
    ee80:	01 96       	adiw	r24, 0x01	; 1
    ee82:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3682
      mqtt_client.subscribe(topic);
    ee86:	ce 01       	movw	r24, r28
    ee88:	01 96       	adiw	r24, 0x01	; 1
    ee8a:	0e 94 84 9c 	call	0x13908	; 0x13908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
    ee8e:	64 cf       	rjmp	.-312    	; 0xed58 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    ee90:	8e ef       	ldi	r24, 0xFE	; 254
    ee92:	9f ef       	ldi	r25, 0xFF	; 255
    ee94:	90 93 89 10 	sts	0x1089, r25	; 0x801089 <mqtt_client+0x21c>
    ee98:	80 93 88 10 	sts	0x1088, r24	; 0x801088 <mqtt_client+0x21b>
    ee9c:	5d cf       	rjmp	.-326    	; 0xed58 <mqtt_reconnect()+0x15a>

0000ee9e <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4351
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    ee9e:	2f 92       	push	r2
    eea0:	3f 92       	push	r3
    eea2:	4f 92       	push	r4
    eea4:	5f 92       	push	r5
    eea6:	6f 92       	push	r6
    eea8:	7f 92       	push	r7
    eeaa:	8f 92       	push	r8
    eeac:	9f 92       	push	r9
    eeae:	af 92       	push	r10
    eeb0:	bf 92       	push	r11
    eeb2:	cf 92       	push	r12
    eeb4:	df 92       	push	r13
    eeb6:	ef 92       	push	r14
    eeb8:	ff 92       	push	r15
    eeba:	0f 93       	push	r16
    eebc:	1f 93       	push	r17
    eebe:	cf 93       	push	r28
    eec0:	df 93       	push	r29
    eec2:	cd b7       	in	r28, 0x3d	; 61
    eec4:	de b7       	in	r29, 0x3e	; 62
    eec6:	cd 54       	subi	r28, 0x4D	; 77
    eec8:	d1 40       	sbci	r29, 0x01	; 1
    eeca:	0f b6       	in	r0, 0x3f	; 63
    eecc:	f8 94       	cli
    eece:	de bf       	out	0x3e, r29	; 62
    eed0:	0f be       	out	0x3f, r0	; 63
    eed2:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    eed4:	1b 82       	std	Y+3, r1	; 0x03
    eed6:	8e ed       	ldi	r24, 0xDE	; 222
    eed8:	93 e0       	ldi	r25, 0x03	; 3
    eeda:	9d 83       	std	Y+5, r25	; 0x05
    eedc:	8c 83       	std	Y+4, r24	; 0x04
    eede:	89 e3       	ldi	r24, 0x39	; 57
    eee0:	95 e0       	ldi	r25, 0x05	; 5
    eee2:	9f 83       	std	Y+7, r25	; 0x07
    eee4:	8e 83       	std	Y+6, r24	; 0x06
    eee6:	18 86       	std	Y+8, r1	; 0x08
    eee8:	19 86       	std	Y+9, r1	; 0x09
    eeea:	1a 86       	std	Y+10, r1	; 0x0a
    eeec:	1b 86       	std	Y+11, r1	; 0x0b
    eeee:	80 e6       	ldi	r24, 0x60	; 96
    eef0:	9a ee       	ldi	r25, 0xEA	; 234
    eef2:	a0 e0       	ldi	r26, 0x00	; 0
    eef4:	b0 e0       	ldi	r27, 0x00	; 0
    eef6:	8c 87       	std	Y+12, r24	; 0x0c
    eef8:	9d 87       	std	Y+13, r25	; 0x0d
    eefa:	ae 87       	std	Y+14, r26	; 0x0e
    eefc:	bf 87       	std	Y+15, r27	; 0x0f
    eefe:	18 8a       	std	Y+16, r1	; 0x10
    ef00:	19 8a       	std	Y+17, r1	; 0x11
    ef02:	1a 8a       	std	Y+18, r1	; 0x12
    ef04:	1b 8a       	std	Y+19, r1	; 0x13
    ef06:	1c 8a       	std	Y+20, r1	; 0x14
    ef08:	1d 8a       	std	Y+21, r1	; 0x15
    ef0a:	1e 8a       	std	Y+22, r1	; 0x16
    ef0c:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    ef0e:	8a e8       	ldi	r24, 0x8A	; 138
    ef10:	90 e1       	ldi	r25, 0x10	; 16
    ef12:	9a 83       	std	Y+2, r25	; 0x02
    ef14:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4135
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    ef16:	61 e0       	ldi	r22, 0x01	; 1
    ef18:	86 e0       	ldi	r24, 0x06	; 6
    ef1a:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4136
  pinMode(ETH_CS, OUTPUT);
    ef1e:	61 e0       	ldi	r22, 0x01	; 1
    ef20:	8f e0       	ldi	r24, 0x0F	; 15
    ef22:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4137
  pinMode(LED, OUTPUT);
    ef26:	61 e0       	ldi	r22, 0x01	; 1
    ef28:	88 e0       	ldi	r24, 0x08	; 8
    ef2a:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4138
  pinMode(PIEZO, OUTPUT);
    ef2e:	61 e0       	ldi	r22, 0x01	; 1
    ef30:	8c e0       	ldi	r24, 0x0C	; 12
    ef32:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4139
  pinMode(STORAGE_RAM_CS, OUTPUT);
    ef36:	61 e0       	ldi	r22, 0x01	; 1
    ef38:	86 e1       	ldi	r24, 0x16	; 22
    ef3a:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4140
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    ef3e:	61 e0       	ldi	r22, 0x01	; 1
    ef40:	87 e1       	ldi	r24, 0x17	; 23
    ef42:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4141
  pinMode(JUMPER, INPUT_PULLUP);
    ef46:	62 e0       	ldi	r22, 0x02	; 2
    ef48:	8e e0       	ldi	r24, 0x0E	; 14
    ef4a:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143

  digitalWrite(PIEZO, LOW);
    ef4e:	60 e0       	ldi	r22, 0x00	; 0
    ef50:	8c e0       	ldi	r24, 0x0C	; 12
    ef52:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4144
  delay(1000);
    ef56:	68 ee       	ldi	r22, 0xE8	; 232
    ef58:	73 e0       	ldi	r23, 0x03	; 3
    ef5a:	80 e0       	ldi	r24, 0x00	; 0
    ef5c:	90 e0       	ldi	r25, 0x00	; 0
    ef5e:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4145
  digitalWrite(PIEZO, HIGH);
    ef62:	61 e0       	ldi	r22, 0x01	; 1
    ef64:	8c e0       	ldi	r24, 0x0C	; 12
    ef66:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    ef6a:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
  SPI.begin();
    ef6c:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4369
  Wire.begin();
    ef70:	0e 94 c4 91 	call	0x12388	; 0x12388 <TwoWire::begin() [clone .constprop.63]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    ef74:	0e 94 c4 91 	call	0x12388	; 0x12388 <TwoWire::begin() [clone .constprop.63]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    ef78:	8d e6       	ldi	r24, 0x6D	; 109
    ef7a:	9e e0       	ldi	r25, 0x0E	; 14
    ef7c:	90 93 4e 09 	sts	0x094E, r25	; 0x80094e <pub_mqtt_client+0x1>
    ef80:	80 93 4d 09 	sts	0x094D, r24	; 0x80094d <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4373
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    ef84:	70 e0       	ldi	r23, 0x00	; 0
    ef86:	60 e0       	ldi	r22, 0x00	; 0
    ef88:	87 e5       	ldi	r24, 0x57	; 87
    ef8a:	92 e6       	ldi	r25, 0x62	; 98
    ef8c:	0e 94 ec b1 	call	0x163d8	; 0x163d8 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    ef90:	70 e0       	ldi	r23, 0x00	; 0
    ef92:	60 e0       	ldi	r22, 0x00	; 0
    ef94:	87 ed       	ldi	r24, 0xD7	; 215
    ef96:	97 e3       	ldi	r25, 0x37	; 55
    ef98:	0e 94 ec b1 	call	0x163d8	; 0x163d8 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
  printf_begin();

  swSPI.begin();
    ef9c:	8c ea       	ldi	r24, 0xAC	; 172
    ef9e:	90 e1       	ldi	r25, 0x10	; 16
    efa0:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    efa4:	e0 91 27 09 	lds	r30, 0x0927	; 0x800927 <MenuHistoryIndex>
    efa8:	f0 e0       	ldi	r31, 0x00	; 0
    efaa:	e9 5a       	subi	r30, 0xA9	; 169
    efac:	f7 4f       	sbci	r31, 0xF7	; 247
    efae:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    efb0:	0e 94 90 92 	call	0x12520	; 0x12520 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    efb4:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <my_lcd+0x1a>
    efb8:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <my_lcd+0x1b>
    efbc:	01 96       	adiw	r24, 0x01	; 1
    efbe:	09 f0       	breq	.+2      	; 0xefc2 <setup+0x124>
    efc0:	4c c0       	rjmp	.+152    	; 0xf05a <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    efc2:	60 e0       	ldi	r22, 0x00	; 0
    efc4:	84 e0       	ldi	r24, 0x04	; 4
    efc6:	90 e0       	ldi	r25, 0x00	; 0
    efc8:	0e 94 01 93 	call	0x12602	; 0x12602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    efcc:	89 2b       	or	r24, r25
    efce:	39 f5       	brne	.+78     	; 0xf01e <setup+0x180>
    efd0:	61 e0       	ldi	r22, 0x01	; 1
    efd2:	84 e0       	ldi	r24, 0x04	; 4
    efd4:	90 e0       	ldi	r25, 0x00	; 0
    efd6:	0e 94 01 93 	call	0x12602	; 0x12602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    efda:	81 15       	cp	r24, r1
    efdc:	90 48       	sbci	r25, 0x80	; 128
    efde:	f9 f4       	brne	.+62     	; 0xf01e <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    efe0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    efe4:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    efe8:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    efec:	2b 96       	adiw	r28, 0x0b	; 11
    efee:	8d af       	std	Y+61, r24	; 0x3d
    eff0:	9e af       	std	Y+62, r25	; 0x3e
    eff2:	af af       	std	Y+63, r26	; 0x3f
    eff4:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    eff6:	23 e0       	ldi	r18, 0x03	; 3
    eff8:	ae 01       	movw	r20, r28
    effa:	48 5b       	subi	r20, 0xB8	; 184
    effc:	5f 4f       	sbci	r21, 0xFF	; 255
    effe:	69 eb       	ldi	r22, 0xB9	; 185
    f000:	70 e0       	ldi	r23, 0x00	; 0
    f002:	85 e1       	ldi	r24, 0x15	; 21
    f004:	9e e0       	ldi	r25, 0x0E	; 14
    f006:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    f00a:	60 e0       	ldi	r22, 0x00	; 0
    f00c:	80 ed       	ldi	r24, 0xD0	; 208
    f00e:	90 e0       	ldi	r25, 0x00	; 0
    f010:	0e 94 01 93 	call	0x12602	; 0x12602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    f014:	61 e0       	ldi	r22, 0x01	; 1
    f016:	80 ed       	ldi	r24, 0xD0	; 208
    f018:	90 e0       	ldi	r25, 0x00	; 0
    f01a:	0e 94 01 93 	call	0x12602	; 0x12602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    f01e:	61 e0       	ldi	r22, 0x01	; 1
    f020:	83 ed       	ldi	r24, 0xD3	; 211
    f022:	90 e0       	ldi	r25, 0x00	; 0
    f024:	0e 94 01 93 	call	0x12602	; 0x12602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    f028:	81 34       	cpi	r24, 0x41	; 65
    f02a:	a3 e9       	ldi	r26, 0x93	; 147
    f02c:	9a 07       	cpc	r25, r26
    f02e:	89 f0       	breq	.+34     	; 0xf052 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    f030:	86 38       	cpi	r24, 0x86	; 134
    f032:	b4 e9       	ldi	r27, 0x94	; 148
    f034:	9b 07       	cpc	r25, r27
    f036:	69 f0       	breq	.+26     	; 0xf052 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    f038:	88 38       	cpi	r24, 0x88	; 136
    f03a:	e4 e9       	ldi	r30, 0x94	; 148
    f03c:	9e 07       	cpc	r25, r30
    f03e:	49 f0       	breq	.+18     	; 0xf052 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    f040:	86 39       	cpi	r24, 0x96	; 150
    f042:	f7 e7       	ldi	r31, 0x77	; 119
    f044:	9f 07       	cpc	r25, r31
    f046:	29 f0       	breq	.+10     	; 0xf052 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    f048:	60 e0       	ldi	r22, 0x00	; 0
    f04a:	90 e0       	ldi	r25, 0x00	; 0
    f04c:	80 e0       	ldi	r24, 0x00	; 0
    f04e:	0e 94 01 93 	call	0x12602	; 0x12602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    f052:	90 93 30 0e 	sts	0x0E30, r25	; 0x800e30 <my_lcd+0x1b>
    f056:	80 93 2f 0e 	sts	0x0E2F, r24	; 0x800e2f <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    f05a:	00 91 2f 0e 	lds	r16, 0x0E2F	; 0x800e2f <my_lcd+0x1a>
    f05e:	10 91 30 0e 	lds	r17, 0x0E30	; 0x800e30 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    f062:	0e 94 90 92 	call	0x12520	; 0x12520 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    f066:	68 ec       	ldi	r22, 0xC8	; 200
    f068:	70 e0       	ldi	r23, 0x00	; 0
    f06a:	80 e0       	ldi	r24, 0x00	; 0
    f06c:	90 e0       	ldi	r25, 0x00	; 0
    f06e:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    f072:	06 39       	cpi	r16, 0x96	; 150
    f074:	17 47       	sbci	r17, 0x77	; 119
    f076:	09 f0       	breq	.+2      	; 0xf07a <setup+0x1dc>
    f078:	34 c3       	rjmp	.+1640   	; 0xf6e2 <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    f07a:	89 e0       	ldi	r24, 0x09	; 9
    f07c:	90 e0       	ldi	r25, 0x00	; 0
    f07e:	90 93 2e 0e 	sts	0x0E2E, r25	; 0x800e2e <my_lcd+0x19>
    f082:	80 93 2d 0e 	sts	0x0E2D, r24	; 0x800e2d <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    f086:	8a e2       	ldi	r24, 0x2A	; 42
    f088:	90 e0       	ldi	r25, 0x00	; 0
    f08a:	90 93 32 0e 	sts	0x0E32, r25	; 0x800e32 <my_lcd+0x1d>
    f08e:	80 93 31 0e 	sts	0x0E31, r24	; 0x800e31 <my_lcd+0x1c>
    f092:	8b e2       	ldi	r24, 0x2B	; 43
    f094:	90 e0       	ldi	r25, 0x00	; 0
    f096:	90 93 34 0e 	sts	0x0E34, r25	; 0x800e34 <my_lcd+0x1f>
    f09a:	80 93 33 0e 	sts	0x0E33, r24	; 0x800e33 <my_lcd+0x1e>
    f09e:	8c e2       	ldi	r24, 0x2C	; 44
    f0a0:	90 e0       	ldi	r25, 0x00	; 0
    f0a2:	90 93 36 0e 	sts	0x0E36, r25	; 0x800e36 <my_lcd+0x21>
    f0a6:	80 93 35 0e 	sts	0x0E35, r24	; 0x800e35 <my_lcd+0x20>
    f0aa:	8e e2       	ldi	r24, 0x2E	; 46
    f0ac:	90 e0       	ldi	r25, 0x00	; 0
    f0ae:	90 93 38 0e 	sts	0x0E38, r25	; 0x800e38 <my_lcd+0x23>
    f0b2:	80 93 37 0e 	sts	0x0E37, r24	; 0x800e37 <my_lcd+0x22>
    f0b6:	83 e3       	ldi	r24, 0x33	; 51
    f0b8:	90 e0       	ldi	r25, 0x00	; 0
    f0ba:	90 93 3a 0e 	sts	0x0E3A, r25	; 0x800e3a <my_lcd+0x25>
    f0be:	80 93 39 0e 	sts	0x0E39, r24	; 0x800e39 <my_lcd+0x24>
    f0c2:	87 e3       	ldi	r24, 0x37	; 55
    f0c4:	90 e0       	ldi	r25, 0x00	; 0
    f0c6:	90 93 3c 0e 	sts	0x0E3C, r25	; 0x800e3c <my_lcd+0x27>
    f0ca:	80 93 3b 0e 	sts	0x0E3B, r24	; 0x800e3b <my_lcd+0x26>
    f0ce:	86 e3       	ldi	r24, 0x36	; 54
    f0d0:	90 e0       	ldi	r25, 0x00	; 0
    f0d2:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <my_lcd+0x29>
    f0d6:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <my_lcd+0x28>
    f0da:	10 92 40 0e 	sts	0x0E40, r1	; 0x800e40 <my_lcd+0x2b>
    f0de:	10 92 3f 0e 	sts	0x0E3F, r1	; 0x800e3f <my_lcd+0x2a>
    f0e2:	10 92 42 0e 	sts	0x0E42, r1	; 0x800e42 <my_lcd+0x2d>
    f0e6:	10 92 41 0e 	sts	0x0E41, r1	; 0x800e41 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    f0ea:	27 e1       	ldi	r18, 0x17	; 23
    f0ec:	e2 2e       	mov	r14, r18
    f0ee:	2b e3       	ldi	r18, 0x3B	; 59
    f0f0:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    f0f2:	3c e6       	ldi	r19, 0x6C	; 108
    f0f4:	c3 2e       	mov	r12, r19
    f0f6:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    f0f8:	f7 01       	movw	r30, r14
    f0fa:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    f0fc:	31 96       	adiw	r30, 0x01	; 1
    f0fe:	14 91       	lpm	r17, Z
    f100:	f2 e0       	ldi	r31, 0x02	; 2
    f102:	ef 0e       	add	r14, r31
    f104:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    f106:	6f 37       	cpi	r22, 0x7F	; 127
    f108:	89 f0       	breq	.+34     	; 0xf12c <setup+0x28e>
    f10a:	de 01       	movw	r26, r28
    f10c:	a8 5b       	subi	r26, 0xB8	; 184
    f10e:	bf 4f       	sbci	r27, 0xFF	; 255
    f110:	30 e0       	ldi	r19, 0x00	; 0
    f112:	20 e0       	ldi	r18, 0x00	; 0
    f114:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    f116:	21 17       	cp	r18, r17
    f118:	08 f0       	brcs	.+2      	; 0xf11c <setup+0x27e>
    f11a:	da c2       	rjmp	.+1460   	; 0xf6d0 <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    f11c:	f7 01       	movw	r30, r14
    f11e:	e2 0f       	add	r30, r18
    f120:	f3 1f       	adc	r31, r19
    f122:	e4 91       	lpm	r30, Z
    f124:	ed 93       	st	X+, r30
    f126:	2f 5f       	subi	r18, 0xFF	; 255
    f128:	3f 4f       	sbci	r19, 0xFF	; 255
    f12a:	f5 cf       	rjmp	.-22     	; 0xf116 <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    f12c:	61 2f       	mov	r22, r17
    f12e:	70 e0       	ldi	r23, 0x00	; 0
    f130:	90 e0       	ldi	r25, 0x00	; 0
    f132:	80 e0       	ldi	r24, 0x00	; 0
    f134:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    f138:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    f13a:	61 2f       	mov	r22, r17
    f13c:	70 e0       	ldi	r23, 0x00	; 0
    f13e:	6e 5f       	subi	r22, 0xFE	; 254
    f140:	7f 4f       	sbci	r23, 0xFF	; 255
    f142:	c6 1a       	sub	r12, r22
    f144:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    f146:	1c 14       	cp	r1, r12
    f148:	1d 04       	cpc	r1, r13
    f14a:	b4 f2       	brlt	.-84     	; 0xf0f8 <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    f14c:	80 91 2b 0e 	lds	r24, 0x0E2B	; 0x800e2b <my_lcd+0x16>
    f150:	0e 94 2b 8d 	call	0x11a56	; 0x11a56 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    f154:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
    f158:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
    f15c:	80 81       	ld	r24, Z
    f15e:	90 91 4f 0e 	lds	r25, 0x0E4F	; 0x800e4f <my_lcd+0x3a>
    f162:	89 23       	and	r24, r25
    f164:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    f166:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    f16a:	20 91 2d 0e 	lds	r18, 0x0E2D	; 0x800e2d <my_lcd+0x18>
    f16e:	30 91 2e 0e 	lds	r19, 0x0E2E	; 0x800e2e <my_lcd+0x19>
    f172:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
    f176:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
    f17a:	80 91 50 0e 	lds	r24, 0x0E50	; 0x800e50 <my_lcd+0x3b>
    f17e:	21 15       	cp	r18, r1
    f180:	31 05       	cpc	r19, r1
    f182:	09 f0       	breq	.+2      	; 0xf186 <setup+0x2e8>
    f184:	b5 c2       	rjmp	.+1386   	; 0xf6f0 <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    f186:	20 81       	ld	r18, Z
    f188:	82 23       	and	r24, r18
    f18a:	80 83       	st	Z, r24
    f18c:	81 e6       	ldi	r24, 0x61	; 97
    f18e:	82 b9       	out	0x02, r24	; 2
    f190:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f194:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f198:	80 81       	ld	r24, Z
    f19a:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
    f19e:	82 23       	and	r24, r18
    f1a0:	80 83       	st	Z, r24
    f1a2:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f1a6:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f1aa:	80 81       	ld	r24, Z
    f1ac:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
    f1b0:	82 2b       	or	r24, r18
    f1b2:	80 83       	st	Z, r24
    f1b4:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
    f1b8:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
    f1bc:	80 81       	ld	r24, Z
    f1be:	20 91 4c 0e 	lds	r18, 0x0E4C	; 0x800e4c <my_lcd+0x37>
    f1c2:	82 2b       	or	r24, r18
    f1c4:	80 83       	st	Z, r24
    f1c6:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    f1c8:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f1cc:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f1d0:	80 81       	ld	r24, Z
    f1d2:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
    f1d6:	89 23       	and	r24, r25
    f1d8:	80 83       	st	Z, r24
    f1da:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f1de:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f1e2:	80 81       	ld	r24, Z
    f1e4:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    f1e8:	89 2b       	or	r24, r25
    f1ea:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    f1ec:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
    f1f0:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
    f1f4:	80 81       	ld	r24, Z
    f1f6:	90 91 4b 0e 	lds	r25, 0x0E4B	; 0x800e4b <my_lcd+0x36>
    f1fa:	89 2b       	or	r24, r25
    f1fc:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4381
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    f1fe:	83 e0       	ldi	r24, 0x03	; 3
    f200:	0e 94 2b 8d 	call	0x11a56	; 0x11a56 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    f204:	83 e0       	ldi	r24, 0x03	; 3
    f206:	80 93 04 0e 	sts	0x0E04, r24	; 0x800e04 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    f20a:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <my_lcd+0x14>
    f20e:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    f212:	40 91 27 0e 	lds	r20, 0x0E27	; 0x800e27 <my_lcd+0x12>
    f216:	50 91 28 0e 	lds	r21, 0x0E28	; 0x800e28 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    f21a:	90 91 2b 0e 	lds	r25, 0x0E2B	; 0x800e2b <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    f21e:	e0 91 0c 0e 	lds	r30, 0x0E0C	; 0x800e0c <my_touch+0x15>
    f222:	f0 91 0d 0e 	lds	r31, 0x0E0D	; 0x800e0d <my_touch+0x16>
    f226:	80 81       	ld	r24, Z
    f228:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <my_touch+0x1c>
    f22c:	86 2b       	or	r24, r22
    f22e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    f230:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_touch+0x11>
    f234:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_touch+0x12>
    f238:	80 81       	ld	r24, Z
    f23a:	60 91 11 0e 	lds	r22, 0x0E11	; 0x800e11 <my_touch+0x1a>
    f23e:	86 2b       	or	r24, r22
    f240:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    f242:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_touch+0xf>
    f246:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_touch+0x10>
    f24a:	80 81       	ld	r24, Z
    f24c:	60 91 10 0e 	lds	r22, 0x0E10	; 0x800e10 <my_touch+0x19>
    f250:	86 2b       	or	r24, r22
    f252:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    f254:	50 93 00 0e 	sts	0x0E00, r21	; 0x800e00 <my_touch+0x9>
    f258:	40 93 ff 0d 	sts	0x0DFF, r20	; 0x800dff <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    f25c:	30 93 02 0e 	sts	0x0E02, r19	; 0x800e02 <my_touch+0xb>
    f260:	20 93 01 0e 	sts	0x0E01, r18	; 0x800e01 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    f264:	90 93 05 0e 	sts	0x0E05, r25	; 0x800e05 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    f268:	8f ef       	ldi	r24, 0xFF	; 255
    f26a:	9f ef       	ldi	r25, 0xFF	; 255
    f26c:	0e 94 86 8b 	call	0x1170c	; 0x1170c <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    f270:	8f e1       	ldi	r24, 0x1F	; 31
    f272:	90 e0       	ldi	r25, 0x00	; 0
    f274:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
    f278:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    f27c:	1e 01       	movw	r2, r28
    f27e:	28 e4       	ldi	r18, 0x48	; 72
    f280:	22 0e       	add	r2, r18
    f282:	31 1c       	adc	r3, r1
    f284:	6e e8       	ldi	r22, 0x8E	; 142
    f286:	7c e3       	ldi	r23, 0x3C	; 60
    f288:	c1 01       	movw	r24, r2
    f28a:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4387
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    f28e:	ee 24       	eor	r14, r14
    f290:	ea 94       	dec	r14
    f292:	fe 2c       	mov	r15, r14
    f294:	0f e1       	ldi	r16, 0x1F	; 31
    f296:	10 e0       	ldi	r17, 0x00	; 0
    f298:	22 e0       	ldi	r18, 0x02	; 2
    f29a:	4a e0       	ldi	r20, 0x0A	; 10
    f29c:	50 e0       	ldi	r21, 0x00	; 0
    f29e:	6e e1       	ldi	r22, 0x1E	; 30
    f2a0:	70 e0       	ldi	r23, 0x00	; 0
    f2a2:	c1 01       	movw	r24, r2
    f2a4:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f2a8:	8e e1       	ldi	r24, 0x1E	; 30
    f2aa:	90 e0       	ldi	r25, 0x00	; 0
    f2ac:	c4 5c       	subi	r28, 0xC4	; 196
    f2ae:	de 4f       	sbci	r29, 0xFE	; 254
    f2b0:	99 83       	std	Y+1, r25	; 0x01
    f2b2:	88 83       	st	Y, r24
    f2b4:	cc 53       	subi	r28, 0x3C	; 60
    f2b6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
  ///
  for (uint8_t init = 0;  init < 16; init++)
    f2b8:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    f2ba:	d2 2c       	mov	r13, r2
    f2bc:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f2be:	a2 e3       	ldi	r26, 0x32	; 50
    f2c0:	b1 e0       	ldi	r27, 0x01	; 1
    f2c2:	ac 0f       	add	r26, r28
    f2c4:	bd 1f       	adc	r27, r29
    f2c6:	12 96       	adiw	r26, 0x02	; 2
    f2c8:	cc 5b       	subi	r28, 0xBC	; 188
    f2ca:	de 4f       	sbci	r29, 0xFE	; 254
    f2cc:	b9 83       	std	Y+1, r27	; 0x01
    f2ce:	a8 83       	st	Y, r26
    f2d0:	c4 54       	subi	r28, 0x44	; 68
    f2d2:	d1 40       	sbci	r29, 0x01	; 1
    f2d4:	ec e2       	ldi	r30, 0x2C	; 44
    f2d6:	f1 e0       	ldi	r31, 0x01	; 1
    f2d8:	ec 0f       	add	r30, r28
    f2da:	fd 1f       	adc	r31, r29
    f2dc:	32 96       	adiw	r30, 0x02	; 2
    f2de:	ca 5b       	subi	r28, 0xBA	; 186
    f2e0:	de 4f       	sbci	r29, 0xFE	; 254
    f2e2:	f9 83       	std	Y+1, r31	; 0x01
    f2e4:	e8 83       	st	Y, r30
    f2e6:	c6 54       	subi	r28, 0x46	; 70
    f2e8:	d1 40       	sbci	r29, 0x01	; 1
    f2ea:	26 e2       	ldi	r18, 0x26	; 38
    f2ec:	31 e0       	ldi	r19, 0x01	; 1
    f2ee:	2c 0f       	add	r18, r28
    f2f0:	3d 1f       	adc	r19, r29
    f2f2:	2e 5f       	subi	r18, 0xFE	; 254
    f2f4:	3f 4f       	sbci	r19, 0xFF	; 255
    f2f6:	c8 5b       	subi	r28, 0xB8	; 184
    f2f8:	de 4f       	sbci	r29, 0xFE	; 254
    f2fa:	39 83       	std	Y+1, r19	; 0x01
    f2fc:	28 83       	st	Y, r18
    f2fe:	c8 54       	subi	r28, 0x48	; 72
    f300:	d1 40       	sbci	r29, 0x01	; 1
    f302:	8e ed       	ldi	r24, 0xDE	; 222
    f304:	90 e0       	ldi	r25, 0x00	; 0
    f306:	8c 0f       	add	r24, r28
    f308:	9d 1f       	adc	r25, r29
    f30a:	02 96       	adiw	r24, 0x02	; 2
    f30c:	c6 5b       	subi	r28, 0xB6	; 182
    f30e:	de 4f       	sbci	r29, 0xFE	; 254
    f310:	99 83       	std	Y+1, r25	; 0x01
    f312:	88 83       	st	Y, r24
    f314:	ca 54       	subi	r28, 0x4A	; 74
    f316:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4491
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    f318:	a8 ec       	ldi	r26, 0xC8	; 200
    f31a:	b0 e0       	ldi	r27, 0x00	; 0
    f31c:	ac 0f       	add	r26, r28
    f31e:	bd 1f       	adc	r27, r29
    f320:	1c 96       	adiw	r26, 0x0c	; 12
    f322:	c4 5b       	subi	r28, 0xB4	; 180
    f324:	de 4f       	sbci	r29, 0xFE	; 254
    f326:	b9 83       	std	Y+1, r27	; 0x01
    f328:	a8 83       	st	Y, r26
    f32a:	cc 54       	subi	r28, 0x4C	; 76
    f32c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4391
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    f32e:	ee 24       	eor	r14, r14
    f330:	ea 94       	dec	r14
    f332:	fe 2c       	mov	r15, r14
    f334:	00 e0       	ldi	r16, 0x00	; 0
    f336:	18 ef       	ldi	r17, 0xF8	; 248
    f338:	21 e0       	ldi	r18, 0x01	; 1
    f33a:	4e e1       	ldi	r20, 0x1E	; 30
    f33c:	50 e0       	ldi	r21, 0x00	; 0
    f33e:	c4 5c       	subi	r28, 0xC4	; 196
    f340:	de 4f       	sbci	r29, 0xFE	; 254
    f342:	68 81       	ld	r22, Y
    f344:	79 81       	ldd	r23, Y+1	; 0x01
    f346:	cc 53       	subi	r28, 0x3C	; 60
    f348:	d1 40       	sbci	r29, 0x01	; 1
    f34a:	86 ea       	ldi	r24, 0xA6	; 166
    f34c:	96 e0       	ldi	r25, 0x06	; 6
    f34e:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4393
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    f352:	a1 10       	cpse	r10, r1
    f354:	18 c2       	rjmp	.+1072   	; 0xf786 <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4395
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f356:	6e e7       	ldi	r22, 0x7E	; 126
    f358:	7c e3       	ldi	r23, 0x3C	; 60
    f35a:	c1 01       	movw	r24, r2
    f35c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4396
      strcat(str1, ":1");
    f360:	68 ea       	ldi	r22, 0xA8	; 168
    f362:	76 e0       	ldi	r23, 0x06	; 6
    f364:	c1 01       	movw	r24, r2
    f366:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4397
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f36a:	00 ee       	ldi	r16, 0xE0	; 224
    f36c:	17 e0       	ldi	r17, 0x07	; 7
    f36e:	21 e0       	ldi	r18, 0x01	; 1
    f370:	42 e3       	ldi	r20, 0x32	; 50
    f372:	50 e0       	ldi	r21, 0x00	; 0
    f374:	6e e1       	ldi	r22, 0x1E	; 30
    f376:	70 e0       	ldi	r23, 0x00	; 0
    f378:	c1 01       	movw	r24, r2
    f37a:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399

      tritri = 0;
    f37e:	10 92 68 0a 	sts	0x0A68, r1	; 0x800a68 <tritri+0x1>
    f382:	10 92 67 0a 	sts	0x0A67, r1	; 0x800a67 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4400
      petnula = 0;
    f386:	10 92 66 0a 	sts	0x0A66, r1	; 0x800a66 <petnula+0x1>
    f38a:	10 92 65 0a 	sts	0x0A65, r1	; 0x800a65 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401
      dvanact = 0;
    f38e:	10 92 64 0a 	sts	0x0A64, r1	; 0x800a64 <dvanact+0x1>
    f392:	10 92 63 0a 	sts	0x0A63, r1	; 0x800a63 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4403
      dvanact = 0;
      light_curr = 0;
    f396:	10 92 2c 0b 	sts	0x0B2C, r1	; 0x800b2c <light_curr+0x1>
    f39a:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    f39e:	88 ef       	ldi	r24, 0xF8	; 248
    f3a0:	80 93 29 0b 	sts	0x0B29, r24	; 0x800b29 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    f3a4:	83 e0       	ldi	r24, 0x03	; 3
    f3a6:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    f3aa:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    f3ae:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    f3b2:	8e e8       	ldi	r24, 0x8E	; 142
    f3b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    f3b8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    f3bc:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <a2d_reference>
    f3c0:	b0 e4       	ldi	r27, 0x40	; 64
    f3c2:	8b 9f       	mul	r24, r27
    f3c4:	c0 01       	movw	r24, r0
    f3c6:	11 24       	eor	r1, r1
    f3c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    f3cc:	86 e9       	ldi	r24, 0x96	; 150
    f3ce:	99 e2       	ldi	r25, 0x29	; 41
    f3d0:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
    f3d4:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <_ZL17a2d_interupt_func.lto_priv.228>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4409
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    f3d8:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
      a2d_start_first(A_PROUD);
    f3dc:	83 e0       	ldi	r24, 0x03	; 3
    f3de:	0e 94 92 95 	call	0x12b24	; 0x12b24 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
      milis = millis();
    f3e2:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f3e6:	2b 01       	movw	r4, r22
    f3e8:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4412
      while (a2d_run_now == 0 && millis() - milis < 10);
    f3ea:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <a2d_run_now>
    f3ee:	81 11       	cpse	r24, r1
    f3f0:	0b c0       	rjmp	.+22     	; 0xf408 <setup+0x56a>
    f3f2:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f3f6:	64 19       	sub	r22, r4
    f3f8:	75 09       	sbc	r23, r5
    f3fa:	86 09       	sbc	r24, r6
    f3fc:	97 09       	sbc	r25, r7
    f3fe:	6a 30       	cpi	r22, 0x0A	; 10
    f400:	71 05       	cpc	r23, r1
    f402:	81 05       	cpc	r24, r1
    f404:	91 05       	cpc	r25, r1
    f406:	88 f3       	brcs	.-30     	; 0xf3ea <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4414
      /// regulator 3.3V
      a2d_run_now = 0;
    f408:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
      a2d_start_first(A_TRIV);
    f40c:	86 e0       	ldi	r24, 0x06	; 6
    f40e:	0e 94 92 95 	call	0x12b24	; 0x12b24 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4416
      milis = millis();
    f412:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f416:	2b 01       	movw	r4, r22
    f418:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4417
      while (a2d_run_now == 0 && millis() - milis < 10);
    f41a:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <a2d_run_now>
    f41e:	81 11       	cpse	r24, r1
    f420:	0b c0       	rjmp	.+22     	; 0xf438 <setup+0x59a>
    f422:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f426:	64 19       	sub	r22, r4
    f428:	75 09       	sbc	r23, r5
    f42a:	86 09       	sbc	r24, r6
    f42c:	97 09       	sbc	r25, r7
    f42e:	6a 30       	cpi	r22, 0x0A	; 10
    f430:	71 05       	cpc	r23, r1
    f432:	81 05       	cpc	r24, r1
    f434:	91 05       	cpc	r25, r1
    f436:	88 f3       	brcs	.-30     	; 0xf41a <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
      /// regulator 5.0V
      a2d_run_now = 0;
    f438:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
      a2d_start_first(A_PETV);
    f43c:	85 e0       	ldi	r24, 0x05	; 5
    f43e:	0e 94 92 95 	call	0x12b24	; 0x12b24 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4421
      milis = millis();
    f442:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f446:	2b 01       	movw	r4, r22
    f448:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4422
      while (a2d_run_now == 0 && millis() - milis < 10);
    f44a:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <a2d_run_now>
    f44e:	81 11       	cpse	r24, r1
    f450:	0b c0       	rjmp	.+22     	; 0xf468 <setup+0x5ca>
    f452:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f456:	64 19       	sub	r22, r4
    f458:	75 09       	sbc	r23, r5
    f45a:	86 09       	sbc	r24, r6
    f45c:	97 09       	sbc	r25, r7
    f45e:	6a 30       	cpi	r22, 0x0A	; 10
    f460:	71 05       	cpc	r23, r1
    f462:	81 05       	cpc	r24, r1
    f464:	91 05       	cpc	r25, r1
    f466:	88 f3       	brcs	.-30     	; 0xf44a <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
      /// vstupni napeti 12V
      a2d_run_now = 0;
    f468:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
      a2d_start_first(A_DVANACTV);
    f46c:	84 e0       	ldi	r24, 0x04	; 4
    f46e:	0e 94 92 95 	call	0x12b24	; 0x12b24 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
      milis = millis();
    f472:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f476:	2b 01       	movw	r4, r22
    f478:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
      while (a2d_run_now == 0 && millis() - milis < 10);
    f47a:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <a2d_run_now>
    f47e:	81 11       	cpse	r24, r1
    f480:	0b c0       	rjmp	.+22     	; 0xf498 <setup+0x5fa>
    f482:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f486:	64 19       	sub	r22, r4
    f488:	75 09       	sbc	r23, r5
    f48a:	86 09       	sbc	r24, r6
    f48c:	97 09       	sbc	r25, r7
    f48e:	6a 30       	cpi	r22, 0x0A	; 10
    f490:	71 05       	cpc	r23, r1
    f492:	81 05       	cpc	r24, r1
    f494:	91 05       	cpc	r25, r1
    f496:	88 f3       	brcs	.-30     	; 0xf47a <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4429
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    f498:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      a2d_start_first(A_LIGHT);
    f49c:	87 e0       	ldi	r24, 0x07	; 7
    f49e:	0e 94 92 95 	call	0x12b24	; 0x12b24 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
      milis = millis();
    f4a2:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f4a6:	2b 01       	movw	r4, r22
    f4a8:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4432
      while (a2d_run_now == 0 && millis() - milis < 10);
    f4aa:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <a2d_run_now>
    f4ae:	81 11       	cpse	r24, r1
    f4b0:	0b c0       	rjmp	.+22     	; 0xf4c8 <setup+0x62a>
    f4b2:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
    f4b6:	64 19       	sub	r22, r4
    f4b8:	75 09       	sbc	r23, r5
    f4ba:	86 09       	sbc	r24, r6
    f4bc:	97 09       	sbc	r25, r7
    f4be:	6a 30       	cpi	r22, 0x0A	; 10
    f4c0:	71 05       	cpc	r23, r1
    f4c2:	81 05       	cpc	r24, r1
    f4c4:	91 05       	cpc	r25, r1
    f4c6:	88 f3       	brcs	.-30     	; 0xf4aa <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    f4c8:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f4cc:	4e 01       	movw	r8, r28
    f4ce:	ea ef       	ldi	r30, 0xFA	; 250
    f4d0:	8e 1a       	sub	r8, r30
    f4d2:	ee ef       	ldi	r30, 0xFE	; 254
    f4d4:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f4d6:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <tritri>
    f4da:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <tritri+0x1>
    f4de:	25 e0       	ldi	r18, 0x05	; 5
    f4e0:	28 9f       	mul	r18, r24
    f4e2:	b0 01       	movw	r22, r0
    f4e4:	29 9f       	mul	r18, r25
    f4e6:	70 0d       	add	r23, r0
    f4e8:	11 24       	eor	r1, r1
    f4ea:	90 e0       	ldi	r25, 0x00	; 0
    f4ec:	80 e0       	ldi	r24, 0x00	; 0
    f4ee:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    f4f2:	20 e0       	ldi	r18, 0x00	; 0
    f4f4:	30 e0       	ldi	r19, 0x00	; 0
    f4f6:	4a e7       	ldi	r20, 0x7A	; 122
    f4f8:	54 e4       	ldi	r21, 0x44	; 68
    f4fa:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    f4fe:	84 01       	movw	r16, r8
    f500:	22 e0       	ldi	r18, 0x02	; 2
    f502:	44 e0       	ldi	r20, 0x04	; 4
    f504:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f508:	7e 01       	movw	r14, r28
    f50a:	f2 ef       	ldi	r31, 0xF2	; 242
    f50c:	ef 1a       	sub	r14, r31
    f50e:	fe ef       	ldi	r31, 0xFE	; 254
    f510:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f512:	60 91 65 0a 	lds	r22, 0x0A65	; 0x800a65 <petnula>
    f516:	70 91 66 0a 	lds	r23, 0x0A66	; 0x800a66 <petnula+0x1>
    f51a:	13 e0       	ldi	r17, 0x03	; 3
    f51c:	66 0f       	add	r22, r22
    f51e:	77 1f       	adc	r23, r23
    f520:	1a 95       	dec	r17
    f522:	e1 f7       	brne	.-8      	; 0xf51c <setup+0x67e>
    f524:	90 e0       	ldi	r25, 0x00	; 0
    f526:	80 e0       	ldi	r24, 0x00	; 0
    f528:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    f52c:	20 e0       	ldi	r18, 0x00	; 0
    f52e:	30 e0       	ldi	r19, 0x00	; 0
    f530:	4a e7       	ldi	r20, 0x7A	; 122
    f532:	54 e4       	ldi	r21, 0x44	; 68
    f534:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    f538:	87 01       	movw	r16, r14
    f53a:	22 e0       	ldi	r18, 0x02	; 2
    f53c:	44 e0       	ldi	r20, 0x04	; 4
    f53e:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f542:	3e 01       	movw	r6, r28
    f544:	2a ee       	ldi	r18, 0xEA	; 234
    f546:	62 1a       	sub	r6, r18
    f548:	2e ef       	ldi	r18, 0xFE	; 254
    f54a:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    f54c:	80 91 63 0a 	lds	r24, 0x0A63	; 0x800a63 <dvanact>
    f550:	90 91 64 0a 	lds	r25, 0x0A64	; 0x800a64 <dvanact+0x1>
    f554:	29 e3       	ldi	r18, 0x39	; 57
    f556:	28 9f       	mul	r18, r24
    f558:	b0 01       	movw	r22, r0
    f55a:	29 9f       	mul	r18, r25
    f55c:	70 0d       	add	r23, r0
    f55e:	11 24       	eor	r1, r1
    f560:	90 e0       	ldi	r25, 0x00	; 0
    f562:	80 e0       	ldi	r24, 0x00	; 0
    f564:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
    f568:	20 e0       	ldi	r18, 0x00	; 0
    f56a:	30 e0       	ldi	r19, 0x00	; 0
    f56c:	4a e7       	ldi	r20, 0x7A	; 122
    f56e:	54 e4       	ldi	r21, 0x44	; 68
    f570:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    f574:	83 01       	movw	r16, r6
    f576:	22 e0       	ldi	r18, 0x02	; 2
    f578:	44 e0       	ldi	r20, 0x04	; 4
    f57a:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    f57e:	2e 01       	movw	r4, r28
    f580:	32 ee       	ldi	r19, 0xE2	; 226
    f582:	43 1a       	sub	r4, r19
    f584:	3e ef       	ldi	r19, 0xFE	; 254
    f586:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4116
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    f588:	60 91 61 0a 	lds	r22, 0x0A61	; 0x800a61 <proud>
    f58c:	70 91 62 0a 	lds	r23, 0x0A62	; 0x800a62 <proud+0x1>
    f590:	90 e0       	ldi	r25, 0x00	; 0
    f592:	80 e0       	ldi	r24, 0x00	; 0
    f594:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    f598:	82 01       	movw	r16, r4
    f59a:	22 e0       	ldi	r18, 0x02	; 2
    f59c:	44 e0       	ldi	r20, 0x04	; 4
    f59e:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4440
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    f5a2:	5f 92       	push	r5
    f5a4:	4f 92       	push	r4
    f5a6:	7f 92       	push	r7
    f5a8:	6f 92       	push	r6
    f5aa:	ff 92       	push	r15
    f5ac:	ef 92       	push	r14
    f5ae:	9f 92       	push	r9
    f5b0:	8f 92       	push	r8
    f5b2:	8b ea       	ldi	r24, 0xAB	; 171
    f5b4:	96 e0       	ldi	r25, 0x06	; 6
    f5b6:	9f 93       	push	r25
    f5b8:	8f 93       	push	r24
    f5ba:	4e 01       	movw	r8, r28
    f5bc:	88 e8       	ldi	r24, 0x88	; 136
    f5be:	88 0e       	add	r8, r24
    f5c0:	91 1c       	adc	r9, r1
    f5c2:	9f 92       	push	r9
    f5c4:	8f 92       	push	r8
    f5c6:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4441
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f5ca:	ee 24       	eor	r14, r14
    f5cc:	ea 94       	dec	r14
    f5ce:	fe 2c       	mov	r15, r14
    f5d0:	00 ee       	ldi	r16, 0xE0	; 224
    f5d2:	17 e0       	ldi	r17, 0x07	; 7
    f5d4:	21 e0       	ldi	r18, 0x01	; 1
    f5d6:	42 e3       	ldi	r20, 0x32	; 50
    f5d8:	50 e0       	ldi	r21, 0x00	; 0
    f5da:	60 ea       	ldi	r22, 0xA0	; 160
    f5dc:	70 e0       	ldi	r23, 0x00	; 0
    f5de:	c4 01       	movw	r24, r8
    f5e0:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f5e4:	0f b6       	in	r0, 0x3f	; 63
    f5e6:	f8 94       	cli
    f5e8:	de bf       	out	0x3e, r29	; 62
    f5ea:	0f be       	out	0x3f, r0	; 63
    f5ec:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4731
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    f5ee:	2e e0       	ldi	r18, 0x0E	; 14
    f5f0:	a2 12       	cpse	r10, r18
    f5f2:	0c 94 2f 83 	jmp	0x1065e	; 0x1065e <__EEPROM_REGION_LENGTH__+0x65e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4733
    {
      strcpy_P(str1, text_ntp_cas);
    f5f6:	66 e9       	ldi	r22, 0x96	; 150
    f5f8:	7b e3       	ldi	r23, 0x3B	; 59
    f5fa:	c1 01       	movw	r24, r2
    f5fc:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f600:	ee 24       	eor	r14, r14
    f602:	ea 94       	dec	r14
    f604:	fe 2c       	mov	r15, r14
    f606:	00 ee       	ldi	r16, 0xE0	; 224
    f608:	17 e0       	ldi	r17, 0x07	; 7
    f60a:	21 e0       	ldi	r18, 0x01	; 1
    f60c:	4e eb       	ldi	r20, 0xBE	; 190
    f60e:	50 e0       	ldi	r21, 0x00	; 0
    f610:	6e e1       	ldi	r22, 0x1E	; 30
    f612:	70 e0       	ldi	r23, 0x00	; 0
    f614:	c1 01       	movw	r24, r2
    f616:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
ntp_check():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    f61a:	c2 52       	subi	r28, 0x22	; 34
    f61c:	df 4f       	sbci	r29, 0xFF	; 255
    f61e:	18 82       	st	Y, r1
    f620:	ce 5d       	subi	r28, 0xDE	; 222
    f622:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    f624:	0a e0       	ldi	r16, 0x0A	; 10
    f626:	24 e0       	ldi	r18, 0x04	; 4
    f628:	48 ec       	ldi	r20, 0xC8	; 200
    f62a:	5c e0       	ldi	r21, 0x0C	; 12
    f62c:	6e e2       	ldi	r22, 0x2E	; 46
    f62e:	ce 01       	movw	r24, r28
    f630:	82 52       	subi	r24, 0x22	; 34
    f632:	9f 4f       	sbci	r25, 0xFF	; 255
    f634:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    f638:	89 e3       	ldi	r24, 0x39	; 57
    f63a:	95 e0       	ldi	r25, 0x05	; 5
    f63c:	9f 83       	std	Y+7, r25	; 0x07
    f63e:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    f640:	89 81       	ldd	r24, Y+1	; 0x01
    f642:	9a 81       	ldd	r25, Y+2	; 0x02
    f644:	dc 01       	movw	r26, r24
    f646:	ed 91       	ld	r30, X+
    f648:	fc 91       	ld	r31, X
    f64a:	06 84       	ldd	r0, Z+14	; 0x0e
    f64c:	f7 85       	ldd	r31, Z+15	; 0x0f
    f64e:	e0 2d       	mov	r30, r0
    f650:	69 e3       	ldi	r22, 0x39	; 57
    f652:	75 e0       	ldi	r23, 0x05	; 5
    f654:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    f656:	81 e0       	ldi	r24, 0x01	; 1
    f658:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    f65a:	80 e1       	ldi	r24, 0x10	; 16
    f65c:	9e e0       	ldi	r25, 0x0E	; 14
    f65e:	a0 e0       	ldi	r26, 0x00	; 0
    f660:	b0 e0       	ldi	r27, 0x00	; 0
    f662:	88 87       	std	Y+8, r24	; 0x08
    f664:	99 87       	std	Y+9, r25	; 0x09
    f666:	aa 87       	std	Y+10, r26	; 0x0a
    f668:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    f66a:	ee ed       	ldi	r30, 0xDE	; 222
    f66c:	f0 e0       	ldi	r31, 0x00	; 0
    f66e:	ec 0f       	add	r30, r28
    f670:	fd 1f       	adc	r31, r29
    f672:	fd 83       	std	Y+5, r31	; 0x05
    f674:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    f676:	81 e0       	ldi	r24, 0x01	; 1
    f678:	90 e0       	ldi	r25, 0x00	; 0
    f67a:	a0 e0       	ldi	r26, 0x00	; 0
    f67c:	b0 e0       	ldi	r27, 0x00	; 0
    f67e:	8c 87       	std	Y+12, r24	; 0x0c
    f680:	9d 87       	std	Y+13, r25	; 0x0d
    f682:	ae 87       	std	Y+14, r26	; 0x0e
    f684:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    f686:	ce 01       	movw	r24, r28
    f688:	01 96       	adiw	r24, 0x01	; 1
    f68a:	0e 94 0a 96 	call	0x12c14	; 0x12c14 <NTPClient::update()>
    f68e:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    f690:	89 81       	ldd	r24, Y+1	; 0x01
    f692:	9a 81       	ldd	r25, Y+2	; 0x02
    f694:	dc 01       	movw	r26, r24
    f696:	ed 91       	ld	r30, X+
    f698:	fc 91       	ld	r31, X
    f69a:	02 88       	ldd	r0, Z+18	; 0x12
    f69c:	f3 89       	ldd	r31, Z+19	; 0x13
    f69e:	e0 2d       	mov	r30, r0
    f6a0:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    f6a2:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
      if (ntp_check(&timeClient) == 0)
    f6a4:	11 11       	cpse	r17, r1
    f6a6:	c5 c7       	rjmp	.+3978   	; 0x10632 <__EEPROM_REGION_LENGTH__+0x632>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4737
      {
        strcpy_P(str1, text_err);
    f6a8:	66 ed       	ldi	r22, 0xD6	; 214
    f6aa:	7c e3       	ldi	r23, 0x3C	; 60
    f6ac:	c1 01       	movw	r24, r2
    f6ae:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4738
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f6b2:	00 e0       	ldi	r16, 0x00	; 0
    f6b4:	18 ef       	ldi	r17, 0xF8	; 248
    f6b6:	21 e0       	ldi	r18, 0x01	; 1
    f6b8:	4e eb       	ldi	r20, 0xBE	; 190
    f6ba:	50 e0       	ldi	r21, 0x00	; 0
    f6bc:	60 ea       	ldi	r22, 0xA0	; 160
    f6be:	70 e0       	ldi	r23, 0x00	; 0
    f6c0:	c1 01       	movw	r24, r2
    f6c2:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f6c6:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
    f6ca:	82 60       	ori	r24, 0x02	; 2
    f6cc:	0c 94 c7 83 	jmp	0x1078e	; 0x1078e <__EEPROM_REGION_LENGTH__+0x78e>
    f6d0:	e1 0e       	add	r14, r17
    f6d2:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    f6d4:	70 e0       	ldi	r23, 0x00	; 0
    f6d6:	21 2f       	mov	r18, r17
    f6d8:	85 e1       	ldi	r24, 0x15	; 21
    f6da:	9e e0       	ldi	r25, 0x0E	; 14
    f6dc:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    f6e0:	2c cd       	rjmp	.-1448   	; 0xf13a <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    f6e2:	8f ef       	ldi	r24, 0xFF	; 255
    f6e4:	90 e0       	ldi	r25, 0x00	; 0
    f6e6:	90 93 2e 0e 	sts	0x0E2E, r25	; 0x800e2e <my_lcd+0x19>
    f6ea:	80 93 2d 0e 	sts	0x0E2D, r24	; 0x800e2d <my_lcd+0x18>
    f6ee:	2e cd       	rjmp	.-1444   	; 0xf14c <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    f6f0:	21 30       	cpi	r18, 0x01	; 1
    f6f2:	31 05       	cpc	r19, r1
    f6f4:	31 f5       	brne	.+76     	; 0xf742 <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    f6f6:	20 81       	ld	r18, Z
    f6f8:	82 23       	and	r24, r18
    f6fa:	80 83       	st	Z, r24
    f6fc:	81 e0       	ldi	r24, 0x01	; 1
    f6fe:	82 b9       	out	0x02, r24	; 2
    f700:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f704:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f708:	80 81       	ld	r24, Z
    f70a:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
    f70e:	82 23       	and	r24, r18
    f710:	80 83       	st	Z, r24
    f712:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f716:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f71a:	80 81       	ld	r24, Z
    f71c:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
    f720:	82 2b       	or	r24, r18
    f722:	80 83       	st	Z, r24
    f724:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
    f728:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
    f72c:	80 81       	ld	r24, Z
    f72e:	20 91 4c 0e 	lds	r18, 0x0E4C	; 0x800e4c <my_lcd+0x37>
    f732:	82 2b       	or	r24, r18
    f734:	80 83       	st	Z, r24
setup():
    f736:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    f738:	91 11       	cpse	r25, r1
    f73a:	01 c0       	rjmp	.+2      	; 0xf73e <setup+0x8a0>
setup():
    f73c:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    f73e:	82 b9       	out	0x02, r24	; 2
    f740:	43 cd       	rjmp	.-1402   	; 0xf1c8 <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    f742:	20 81       	ld	r18, Z
    f744:	82 23       	and	r24, r18
    f746:	80 83       	st	Z, r24
setup():
    f748:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    f74a:	91 11       	cpse	r25, r1
    f74c:	01 c0       	rjmp	.+2      	; 0xf750 <setup+0x8b2>
setup():
    f74e:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    f750:	82 b9       	out	0x02, r24	; 2
    f752:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f756:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f75a:	80 81       	ld	r24, Z
    f75c:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
    f760:	89 23       	and	r24, r25
    f762:	80 83       	st	Z, r24
    f764:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
    f768:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
    f76c:	80 81       	ld	r24, Z
    f76e:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
    f772:	89 2b       	or	r24, r25
    f774:	80 83       	st	Z, r24
    f776:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
    f77a:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
    f77e:	80 81       	ld	r24, Z
    f780:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
    f784:	31 cd       	rjmp	.-1438   	; 0xf1e8 <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    f786:	b1 e0       	ldi	r27, 0x01	; 1
    f788:	ab 12       	cpse	r10, r27
    f78a:	c3 c0       	rjmp	.+390    	; 0xf912 <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4447
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    f78c:	6e e7       	ldi	r22, 0x7E	; 126
    f78e:	7c e3       	ldi	r23, 0x3C	; 60
    f790:	c1 01       	movw	r24, r2
    f792:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4448
      strcat(str1, ":2");
    f796:	69 ec       	ldi	r22, 0xC9	; 201
    f798:	76 e0       	ldi	r23, 0x06	; 6
    f79a:	c1 01       	movw	r24, r2
    f79c:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4449
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f7a0:	ee 24       	eor	r14, r14
    f7a2:	ea 94       	dec	r14
    f7a4:	fe 2c       	mov	r15, r14
    f7a6:	00 ee       	ldi	r16, 0xE0	; 224
    f7a8:	17 e0       	ldi	r17, 0x07	; 7
    f7aa:	21 e0       	ldi	r18, 0x01	; 1
    f7ac:	4c e3       	ldi	r20, 0x3C	; 60
    f7ae:	50 e0       	ldi	r21, 0x00	; 0
    f7b0:	6e e1       	ldi	r22, 0x1E	; 30
    f7b2:	70 e0       	ldi	r23, 0x00	; 0
    f7b4:	c1 01       	movw	r24, r2
    f7b6:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    f7ba:	e0 91 6b 0e 	lds	r30, 0x0E6B	; 0x800e6b <lm75_temp+0xb>
    f7be:	f0 91 6c 0e 	lds	r31, 0x0E6C	; 0x800e6c <lm75_temp+0xc>
    f7c2:	04 80       	ldd	r0, Z+4	; 0x04
    f7c4:	f5 81       	ldd	r31, Z+5	; 0x05
    f7c6:	e0 2d       	mov	r30, r0
    f7c8:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    f7ca:	80 91 62 0e 	lds	r24, 0x0E62	; 0x800e62 <lm75_temp+0x2>
    f7ce:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    f7d2:	80 91 60 0e 	lds	r24, 0x0E60	; 0x800e60 <lm75_temp>
    f7d6:	90 91 61 0e 	lds	r25, 0x0E61	; 0x800e61 <lm75_temp+0x1>
    f7da:	dc 01       	movw	r26, r24
    f7dc:	ed 91       	ld	r30, X+
    f7de:	fc 91       	ld	r31, X
    f7e0:	01 90       	ld	r0, Z+
    f7e2:	f0 81       	ld	r31, Z
    f7e4:	e0 2d       	mov	r30, r0
    f7e6:	61 2f       	mov	r22, r17
    f7e8:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    f7ea:	80 91 60 0e 	lds	r24, 0x0E60	; 0x800e60 <lm75_temp>
    f7ee:	90 91 61 0e 	lds	r25, 0x0E61	; 0x800e61 <lm75_temp+0x1>
    f7f2:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    f7f6:	80 91 60 0e 	lds	r24, 0x0E60	; 0x800e60 <lm75_temp>
    f7fa:	90 91 61 0e 	lds	r25, 0x0E61	; 0x800e61 <lm75_temp+0x1>
    f7fe:	20 91 63 0e 	lds	r18, 0x0E63	; 0x800e63 <lm75_temp+0x3>
setup():
    f802:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    f804:	29 30       	cpi	r18, 0x09	; 9
    f806:	08 f0       	brcs	.+2      	; 0xf80a <setup+0x96c>
setup():
    f808:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    f80a:	60 91 62 0e 	lds	r22, 0x0E62	; 0x800e62 <lm75_temp+0x2>
    f80e:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    f812:	80 91 60 0e 	lds	r24, 0x0E60	; 0x800e60 <lm75_temp>
    f816:	90 91 61 0e 	lds	r25, 0x0E61	; 0x800e61 <lm75_temp+0x1>
    f81a:	dc 01       	movw	r26, r24
    f81c:	ed 91       	ld	r30, X+
    f81e:	fc 91       	ld	r31, X
    f820:	02 84       	ldd	r0, Z+10	; 0x0a
    f822:	f3 85       	ldd	r31, Z+11	; 0x0b
    f824:	e0 2d       	mov	r30, r0
    f826:	19 95       	eicall
    f828:	c1 5c       	subi	r28, 0xC1	; 193
    f82a:	de 4f       	sbci	r29, 0xFE	; 254
    f82c:	88 83       	st	Y, r24
    f82e:	cf 53       	subi	r28, 0x3F	; 63
    f830:	d1 40       	sbci	r29, 0x01	; 1
    f832:	c2 5c       	subi	r28, 0xC2	; 194
    f834:	de 4f       	sbci	r29, 0xFE	; 254
    f836:	18 82       	st	Y, r1
    f838:	ce 53       	subi	r28, 0x3E	; 62
    f83a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    f83c:	80 91 63 0e 	lds	r24, 0x0E63	; 0x800e63 <lm75_temp+0x3>
    f840:	89 30       	cpi	r24, 0x09	; 9
    f842:	c8 f0       	brcs	.+50     	; 0xf876 <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    f844:	80 91 60 0e 	lds	r24, 0x0E60	; 0x800e60 <lm75_temp>
    f848:	90 91 61 0e 	lds	r25, 0x0E61	; 0x800e61 <lm75_temp+0x1>
    f84c:	dc 01       	movw	r26, r24
    f84e:	ed 91       	ld	r30, X+
    f850:	fc 91       	ld	r31, X
    f852:	02 84       	ldd	r0, Z+10	; 0x0a
    f854:	f3 85       	ldd	r31, Z+11	; 0x0b
    f856:	e0 2d       	mov	r30, r0
    f858:	19 95       	eicall
    f85a:	c2 5c       	subi	r28, 0xC2	; 194
    f85c:	de 4f       	sbci	r29, 0xFE	; 254
    f85e:	e8 81       	ld	r30, Y
    f860:	f9 81       	ldd	r31, Y+1	; 0x01
    f862:	ce 53       	subi	r28, 0x3E	; 62
    f864:	d1 40       	sbci	r29, 0x01	; 1
    f866:	e8 2b       	or	r30, r24
    f868:	f9 2b       	or	r31, r25
    f86a:	c2 5c       	subi	r28, 0xC2	; 194
    f86c:	de 4f       	sbci	r29, 0xFE	; 254
    f86e:	f9 83       	std	Y+1, r31	; 0x01
    f870:	e8 83       	st	Y, r30
    f872:	ce 53       	subi	r28, 0x3E	; 62
    f874:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    f876:	80 91 60 0e 	lds	r24, 0x0E60	; 0x800e60 <lm75_temp>
    f87a:	90 91 61 0e 	lds	r25, 0x0E61	; 0x800e61 <lm75_temp+0x1>
    f87e:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    f882:	7e 01       	movw	r14, r28
    f884:	f2 ee       	ldi	r31, 0xE2	; 226
    f886:	ef 1a       	sub	r14, r31
    f888:	fe ef       	ldi	r31, 0xFE	; 254
    f88a:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    f88c:	60 91 64 0e 	lds	r22, 0x0E64	; 0x800e64 <lm75_temp+0x4>
    f890:	70 91 65 0e 	lds	r23, 0x0E65	; 0x800e65 <lm75_temp+0x5>
    f894:	c2 5c       	subi	r28, 0xC2	; 194
    f896:	de 4f       	sbci	r29, 0xFE	; 254
    f898:	28 81       	ld	r18, Y
    f89a:	39 81       	ldd	r19, Y+1	; 0x01
    f89c:	ce 53       	subi	r28, 0x3E	; 62
    f89e:	d1 40       	sbci	r29, 0x01	; 1
    f8a0:	62 23       	and	r22, r18
    f8a2:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    f8a4:	07 2e       	mov	r0, r23
    f8a6:	00 0c       	add	r0, r0
    f8a8:	88 0b       	sbc	r24, r24
    f8aa:	99 0b       	sbc	r25, r25
    f8ac:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
    f8b0:	20 91 67 0e 	lds	r18, 0x0E67	; 0x800e67 <lm75_temp+0x7>
    f8b4:	30 91 68 0e 	lds	r19, 0x0E68	; 0x800e68 <lm75_temp+0x8>
    f8b8:	40 91 69 0e 	lds	r20, 0x0E69	; 0x800e69 <lm75_temp+0x9>
    f8bc:	50 91 6a 0e 	lds	r21, 0x0E6A	; 0x800e6a <lm75_temp+0xa>
    f8c0:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
    f8c4:	87 01       	movw	r16, r14
    f8c6:	22 e0       	ldi	r18, 0x02	; 2
    f8c8:	44 e0       	ldi	r20, 0x04	; 4
    f8ca:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4451
      sprintf(str2, "iT=%sC", s_current);
    f8ce:	ff 92       	push	r15
    f8d0:	ef 92       	push	r14
    f8d2:	8c ec       	ldi	r24, 0xCC	; 204
    f8d4:	96 e0       	ldi	r25, 0x06	; 6
    f8d6:	9f 93       	push	r25
    f8d8:	8f 93       	push	r24
    f8da:	4e 01       	movw	r8, r28
    f8dc:	38 e8       	ldi	r19, 0x88	; 136
    f8de:	83 0e       	add	r8, r19
    f8e0:	91 1c       	adc	r9, r1
    f8e2:	9f 92       	push	r9
    f8e4:	8f 92       	push	r8
    f8e6:	0e 94 6b be 	call	0x17cd6	; 0x17cd6 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f8ea:	ee 24       	eor	r14, r14
    f8ec:	ea 94       	dec	r14
    f8ee:	fe 2c       	mov	r15, r14
    f8f0:	00 ee       	ldi	r16, 0xE0	; 224
    f8f2:	17 e0       	ldi	r17, 0x07	; 7
    f8f4:	21 e0       	ldi	r18, 0x01	; 1
    f8f6:	4c e3       	ldi	r20, 0x3C	; 60
    f8f8:	50 e0       	ldi	r21, 0x00	; 0
    f8fa:	60 ea       	ldi	r22, 0xA0	; 160
    f8fc:	70 e0       	ldi	r23, 0x00	; 0
    f8fe:	c4 01       	movw	r24, r8
    f900:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f904:	0f 90       	pop	r0
    f906:	0f 90       	pop	r0
    f908:	0f 90       	pop	r0
    f90a:	0f 90       	pop	r0
    f90c:	0f 90       	pop	r0
    f90e:	0f 90       	pop	r0
    f910:	6e ce       	rjmp	.-804    	; 0xf5ee <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    f912:	82 e0       	ldi	r24, 0x02	; 2
    f914:	a8 12       	cpse	r10, r24
    f916:	8c c1       	rjmp	.+792    	; 0xfc30 <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
    {
      if (EEPROM.read(set_default_values) == 255)
    f918:	8a e5       	ldi	r24, 0x5A	; 90
    f91a:	90 e0       	ldi	r25, 0x00	; 0
    f91c:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f920:	8f 3f       	cpi	r24, 0xFF	; 255
    f922:	09 f0       	breq	.+2      	; 0xf926 <setup+0xa88>
    f924:	74 c1       	rjmp	.+744    	; 0xfc0e <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4460
      {
        EEPROM.write(set_default_values, 0);
    f926:	60 e0       	ldi	r22, 0x00	; 0
    f928:	8a e5       	ldi	r24, 0x5A	; 90
    f92a:	90 e0       	ldi	r25, 0x00	; 0
    f92c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
        strcpy_P(str1, text_vychozi_nastaveni);
    f930:	6c e6       	ldi	r22, 0x6C	; 108
    f932:	7c e3       	ldi	r23, 0x3C	; 60
    f934:	8d 2d       	mov	r24, r13
    f936:	9b 2d       	mov	r25, r11
    f938:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    f93c:	ee 24       	eor	r14, r14
    f93e:	ea 94       	dec	r14
    f940:	fe 2c       	mov	r15, r14
    f942:	00 e0       	ldi	r16, 0x00	; 0
    f944:	18 ef       	ldi	r17, 0xF8	; 248
    f946:	21 e0       	ldi	r18, 0x01	; 1
    f948:	46 e4       	ldi	r20, 0x46	; 70
    f94a:	50 e0       	ldi	r21, 0x00	; 0
    f94c:	6e e1       	ldi	r22, 0x1E	; 30
    f94e:	70 e0       	ldi	r23, 0x00	; 0
    f950:	8d 2d       	mov	r24, r13
    f952:	9b 2d       	mov	r25, r11
    f954:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    f958:	6f ef       	ldi	r22, 0xFF	; 255
    f95a:	8d e5       	ldi	r24, 0x5D	; 93
    f95c:	90 e0       	ldi	r25, 0x00	; 0
    f95e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4467
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    f962:	80 e0       	ldi	r24, 0x00	; 0
    f964:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <thermostat_ring_clear(unsigned char)>
    f968:	81 e0       	ldi	r24, 0x01	; 1
    f96a:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <thermostat_ring_clear(unsigned char)>
    f96e:	82 e0       	ldi	r24, 0x02	; 2
    f970:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <thermostat_ring_clear(unsigned char)>
    f974:	83 e0       	ldi	r24, 0x03	; 3
    f976:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <thermostat_ring_clear(unsigned char)>
    f97a:	84 e0       	ldi	r24, 0x04	; 4
    f97c:	0e 94 c8 57 	call	0xaf90	; 0xaf90 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f980:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4471
        {
          strcpy(tmp1, "");
    f982:	62 ef       	ldi	r22, 0xF2	; 242
    f984:	72 e0       	ldi	r23, 0x02	; 2
    f986:	ce 01       	movw	r24, r28
    f988:	8e 50       	subi	r24, 0x0E	; 14
    f98a:	9f 4f       	sbci	r25, 0xFF	; 255
    f98c:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4472
          remote_tds_clear(idx);
    f990:	81 2f       	mov	r24, r17
    f992:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f996:	1f 5f       	subi	r17, 0xFF	; 255
    f998:	1a 30       	cpi	r17, 0x0A	; 10
    f99a:	99 f7       	brne	.-26     	; 0xf982 <setup+0xae4>
    f99c:	e1 ef       	ldi	r30, 0xF1	; 241
    f99e:	8e 2e       	mov	r8, r30
    f9a0:	99 24       	eor	r9, r9
    f9a2:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4475
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    f9a4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4477
        {
          strcpy(str2, "PROG");
    f9a6:	66 ed       	ldi	r22, 0xD6	; 214
    f9a8:	74 e0       	ldi	r23, 0x04	; 4
    f9aa:	ce 01       	movw	r24, r28
    f9ac:	88 57       	subi	r24, 0x78	; 120
    f9ae:	9f 4f       	sbci	r25, 0xFF	; 255
    f9b0:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4478
          thermostat_program_set_name(idx, str2);
    f9b4:	be 01       	movw	r22, r28
    f9b6:	68 57       	subi	r22, 0x78	; 120
    f9b8:	7f 4f       	sbci	r23, 0xFF	; 255
    f9ba:	81 2f       	mov	r24, r17
    f9bc:	0e 94 ad 56 	call	0xad5a	; 0xad5a <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    f9c0:	60 e0       	ldi	r22, 0x00	; 0
    f9c2:	c4 01       	movw	r24, r8
    f9c4:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    f9c8:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4482
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    f9ca:	c1 2c       	mov	r12, r1
    f9cc:	e1 2c       	mov	r14, r1
    f9ce:	00 e0       	ldi	r16, 0x00	; 0
    f9d0:	20 e0       	ldi	r18, 0x00	; 0
    f9d2:	40 e0       	ldi	r20, 0x00	; 0
    f9d4:	6f 2d       	mov	r22, r15
    f9d6:	81 2f       	mov	r24, r17
    f9d8:	0e 94 71 56 	call	0xace2	; 0xace2 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
            thermostat_program_set_threshold(idx, interval_id, 220);
    f9dc:	4c ed       	ldi	r20, 0xDC	; 220
    f9de:	50 e0       	ldi	r21, 0x00	; 0
    f9e0:	6f 2d       	mov	r22, r15
    f9e2:	81 2f       	mov	r24, r17
    f9e4:	0e 94 55 56 	call	0xacaa	; 0xacaa <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
            thermostat_program_set_week(idx, interval_id, 0);
    f9e8:	40 e0       	ldi	r20, 0x00	; 0
    f9ea:	6f 2d       	mov	r22, r15
    f9ec:	81 2f       	mov	r24, r17
    f9ee:	0e 94 47 56 	call	0xac8e	; 0xac8e <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    f9f2:	f3 94       	inc	r15
    f9f4:	9b e0       	ldi	r25, 0x0B	; 11
    f9f6:	f9 12       	cpse	r15, r25
    f9f8:	e8 cf       	rjmp	.-48     	; 0xf9ca <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4475
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    f9fa:	1f 5f       	subi	r17, 0xFF	; 255
    f9fc:	ad e4       	ldi	r26, 0x4D	; 77
    f9fe:	8a 0e       	add	r8, r26
    fa00:	91 1c       	adc	r9, r1
    fa02:	18 30       	cpi	r17, 0x08	; 8
    fa04:	81 f6       	brne	.-96     	; 0xf9a6 <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    fa06:	7a e0       	ldi	r23, 0x0A	; 10
    fa08:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    fa0a:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4490
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    fa0c:	be 01       	movw	r22, r28
    fa0e:	68 53       	subi	r22, 0x38	; 56
    fa10:	7f 4f       	sbci	r23, 0xFF	; 255
    fa12:	80 2f       	mov	r24, r16
    fa14:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4491
          strcpy(tds.name, "FREE");
    fa18:	63 e6       	ldi	r22, 0x63	; 99
    fa1a:	73 e0       	ldi	r23, 0x03	; 3
    fa1c:	c4 5b       	subi	r28, 0xB4	; 180
    fa1e:	de 4f       	sbci	r29, 0xFE	; 254
    fa20:	88 81       	ld	r24, Y
    fa22:	99 81       	ldd	r25, Y+1	; 0x01
    fa24:	cc 54       	subi	r28, 0x4C	; 76
    fa26:	d1 40       	sbci	r29, 0x01	; 1
    fa28:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492
          tds.used = 0;
    fa2c:	c8 53       	subi	r28, 0x38	; 56
    fa2e:	df 4f       	sbci	r29, 0xFF	; 255
    fa30:	18 82       	st	Y, r1
    fa32:	c8 5c       	subi	r28, 0xC8	; 200
    fa34:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
          tds.offset = 0;
    fa36:	ce 52       	subi	r28, 0x2E	; 46
    fa38:	df 4f       	sbci	r29, 0xFF	; 255
    fa3a:	19 82       	std	Y+1, r1	; 0x01
    fa3c:	18 82       	st	Y, r1
    fa3e:	c2 5d       	subi	r28, 0xD2	; 210
    fa40:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4494
          tds.assigned_ds2482 = 0;
    fa42:	cf 52       	subi	r28, 0x2F	; 47
    fa44:	df 4f       	sbci	r29, 0xFF	; 255
    fa46:	18 82       	st	Y, r1
    fa48:	c1 5d       	subi	r28, 0xD1	; 209
    fa4a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
          tds.period = 10;
    fa4c:	c4 52       	subi	r28, 0x24	; 36
    fa4e:	df 4f       	sbci	r29, 0xFF	; 255
    fa50:	f8 82       	st	Y, r15
    fa52:	cc 5d       	subi	r28, 0xDC	; 220
    fa54:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    fa56:	c7 53       	subi	r28, 0x37	; 55
    fa58:	df 4f       	sbci	r29, 0xFF	; 255
    fa5a:	18 83       	st	Y, r17
    fa5c:	c9 5c       	subi	r28, 0xC9	; 201
    fa5e:	d0 40       	sbci	r29, 0x00	; 0
    fa60:	c6 53       	subi	r28, 0x36	; 54
    fa62:	df 4f       	sbci	r29, 0xFF	; 255
    fa64:	18 83       	st	Y, r17
    fa66:	ca 5c       	subi	r28, 0xCA	; 202
    fa68:	d0 40       	sbci	r29, 0x00	; 0
    fa6a:	c5 53       	subi	r28, 0x35	; 53
    fa6c:	df 4f       	sbci	r29, 0xFF	; 255
    fa6e:	18 83       	st	Y, r17
    fa70:	cb 5c       	subi	r28, 0xCB	; 203
    fa72:	d0 40       	sbci	r29, 0x00	; 0
    fa74:	c4 53       	subi	r28, 0x34	; 52
    fa76:	df 4f       	sbci	r29, 0xFF	; 255
    fa78:	18 83       	st	Y, r17
    fa7a:	cc 5c       	subi	r28, 0xCC	; 204
    fa7c:	d0 40       	sbci	r29, 0x00	; 0
    fa7e:	c3 53       	subi	r28, 0x33	; 51
    fa80:	df 4f       	sbci	r29, 0xFF	; 255
    fa82:	18 83       	st	Y, r17
    fa84:	cd 5c       	subi	r28, 0xCD	; 205
    fa86:	d0 40       	sbci	r29, 0x00	; 0
    fa88:	c2 53       	subi	r28, 0x32	; 50
    fa8a:	df 4f       	sbci	r29, 0xFF	; 255
    fa8c:	18 83       	st	Y, r17
    fa8e:	ce 5c       	subi	r28, 0xCE	; 206
    fa90:	d0 40       	sbci	r29, 0x00	; 0
    fa92:	c1 53       	subi	r28, 0x31	; 49
    fa94:	df 4f       	sbci	r29, 0xFF	; 255
    fa96:	18 83       	st	Y, r17
    fa98:	cf 5c       	subi	r28, 0xCF	; 207
    fa9a:	d0 40       	sbci	r29, 0x00	; 0
    fa9c:	c0 53       	subi	r28, 0x30	; 48
    fa9e:	df 4f       	sbci	r29, 0xFF	; 255
    faa0:	18 83       	st	Y, r17
    faa2:	c0 5d       	subi	r28, 0xD0	; 208
    faa4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4497
          set_tds18s20(idx, &tds);
    faa6:	be 01       	movw	r22, r28
    faa8:	68 53       	subi	r22, 0x38	; 56
    faaa:	7f 4f       	sbci	r23, 0xFF	; 255
    faac:	80 2f       	mov	r24, r16
    faae:	0e 94 84 58 	call	0xb108	; 0xb108 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4488
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    fab2:	0f 5f       	subi	r16, 0xFF	; 255
    fab4:	06 30       	cpi	r16, 0x06	; 6
    fab6:	09 f0       	breq	.+2      	; 0xfaba <setup+0xc1c>
    fab8:	a9 cf       	rjmp	.-174    	; 0xfa0c <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    faba:	84 e1       	ldi	r24, 0x14	; 20
    fabc:	c2 52       	subi	r28, 0x22	; 34
    fabe:	df 4f       	sbci	r29, 0xFF	; 255
    fac0:	88 83       	st	Y, r24
    fac2:	ce 5d       	subi	r28, 0xDE	; 222
    fac4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    fac6:	8c e0       	ldi	r24, 0x0C	; 12
    fac8:	c1 52       	subi	r28, 0x21	; 33
    faca:	df 4f       	sbci	r29, 0xFF	; 255
    facc:	88 83       	st	Y, r24
    face:	cf 5d       	subi	r28, 0xDF	; 223
    fad0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    fad2:	8e e0       	ldi	r24, 0x0E	; 14
    fad4:	c0 52       	subi	r28, 0x20	; 32
    fad6:	df 4f       	sbci	r29, 0xFF	; 255
    fad8:	88 83       	st	Y, r24
    fada:	c0 5e       	subi	r28, 0xE0	; 224
    fadc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    fade:	91 e1       	ldi	r25, 0x11	; 17
    fae0:	cf 51       	subi	r28, 0x1F	; 31
    fae2:	df 4f       	sbci	r29, 0xFF	; 255
    fae4:	98 83       	st	Y, r25
    fae6:	c1 5e       	subi	r28, 0xE1	; 225
    fae8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    faea:	ce 51       	subi	r28, 0x1E	; 30
    faec:	df 4f       	sbci	r29, 0xFF	; 255
    faee:	88 83       	st	Y, r24
    faf0:	c2 5e       	subi	r28, 0xE2	; 226
    faf2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    faf4:	cd 51       	subi	r28, 0x1D	; 29
    faf6:	df 4f       	sbci	r29, 0xFF	; 255
    faf8:	18 82       	st	Y, r1
    fafa:	c3 5e       	subi	r28, 0xE3	; 227
    fafc:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4500
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    fafe:	ce 01       	movw	r24, r28
    fb00:	82 52       	subi	r24, 0x22	; 34
    fb02:	9f 4f       	sbci	r25, 0xFF	; 255
    fb04:	0e 94 0f 9a 	call	0x1341e	; 0x1341e <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4128
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    fb08:	61 e0       	ldi	r22, 0x01	; 1
    fb0a:	81 e0       	ldi	r24, 0x01	; 1
    fb0c:	90 e0       	ldi	r25, 0x00	; 0
    fb0e:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4503
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    fb12:	82 e0       	ldi	r24, 0x02	; 2
    fb14:	80 93 7a 0c 	sts	0x0C7A, r24	; 0x800c7a <device>
    fb18:	91 e0       	ldi	r25, 0x01	; 1
    fb1a:	90 93 7b 0c 	sts	0x0C7B, r25	; 0x800c7b <device+0x1>
    fb1e:	80 93 7c 0c 	sts	0x0C7C, r24	; 0x800c7c <device+0x2>
    fb22:	20 91 63 0a 	lds	r18, 0x0A63	; 0x800a63 <dvanact>
    fb26:	30 91 64 0a 	lds	r19, 0x0A64	; 0x800a64 <dvanact+0x1>
    fb2a:	36 95       	lsr	r19
    fb2c:	27 95       	ror	r18
    fb2e:	20 93 7d 0c 	sts	0x0C7D, r18	; 0x800c7d <device+0x3>
    fb32:	20 91 2b 0b 	lds	r18, 0x0B2B	; 0x800b2b <light_curr>
    fb36:	30 91 2c 0b 	lds	r19, 0x0B2C	; 0x800b2c <light_curr+0x1>
    fb3a:	36 95       	lsr	r19
    fb3c:	27 95       	ror	r18
    fb3e:	20 93 7e 0c 	sts	0x0C7E, r18	; 0x800c7e <device+0x4>
    fb42:	20 91 61 0a 	lds	r18, 0x0A61	; 0x800a61 <proud>
    fb46:	30 91 62 0a 	lds	r19, 0x0A62	; 0x800a62 <proud+0x1>
    fb4a:	36 95       	lsr	r19
    fb4c:	27 95       	ror	r18
    fb4e:	20 93 7f 0c 	sts	0x0C7F, r18	; 0x800c7f <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    fb52:	30 ec       	ldi	r19, 0xC0	; 192
    fb54:	30 93 80 0c 	sts	0x0C80, r19	; 0x800c80 <device+0x6>
    fb58:	28 ea       	ldi	r18, 0xA8	; 168
    fb5a:	20 93 81 0c 	sts	0x0C81, r18	; 0x800c81 <device+0x7>
    fb5e:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <device+0x8>
    fb62:	4e e6       	ldi	r20, 0x6E	; 110
    fb64:	40 93 83 0c 	sts	0x0C83, r20	; 0x800c83 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    fb68:	10 93 84 0c 	sts	0x0C84, r17	; 0x800c84 <device+0xa>
    fb6c:	10 93 85 0c 	sts	0x0C85, r17	; 0x800c85 <device+0xb>
    fb70:	10 93 86 0c 	sts	0x0C86, r17	; 0x800c86 <device+0xc>
    fb74:	10 92 87 0c 	sts	0x0C87, r1	; 0x800c87 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    fb78:	30 93 8c 0c 	sts	0x0C8C, r19	; 0x800c8c <device+0x12>
    fb7c:	20 93 8d 0c 	sts	0x0C8D, r18	; 0x800c8d <device+0x13>
    fb80:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <device+0x14>
    fb84:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    fb88:	30 93 88 0c 	sts	0x0C88, r19	; 0x800c88 <device+0xe>
    fb8c:	20 93 89 0c 	sts	0x0C89, r18	; 0x800c89 <device+0xf>
    fb90:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <device+0x10>
    fb94:	90 93 8b 0c 	sts	0x0C8B, r25	; 0x800c8b <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4509
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    fb98:	30 93 9a 0c 	sts	0x0C9A, r19	; 0x800c9a <device+0x20>
    fb9c:	20 93 9b 0c 	sts	0x0C9B, r18	; 0x800c9b <device+0x21>
    fba0:	80 93 9c 0c 	sts	0x0C9C, r24	; 0x800c9c <device+0x22>
    fba4:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    fba8:	30 93 c8 0c 	sts	0x0CC8, r19	; 0x800cc8 <device+0x4e>
    fbac:	20 93 c9 0c 	sts	0x0CC9, r18	; 0x800cc9 <device+0x4f>
    fbb0:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <device+0x50>
    fbb4:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
        device.mqtt_port = 1883;
    fbb8:	8b e5       	ldi	r24, 0x5B	; 91
    fbba:	97 e0       	ldi	r25, 0x07	; 7
    fbbc:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <device+0x25>
    fbc0:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4512
        strcpy(device.mqtt_user, "saric");
    fbc4:	63 ed       	ldi	r22, 0xD3	; 211
    fbc6:	76 e0       	ldi	r23, 0x06	; 6
    fbc8:	80 ea       	ldi	r24, 0xA0	; 160
    fbca:	9c e0       	ldi	r25, 0x0C	; 12
    fbcc:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
        strcpy(device.mqtt_key, "no");
    fbd0:	69 ed       	ldi	r22, 0xD9	; 217
    fbd2:	76 e0       	ldi	r23, 0x06	; 6
    fbd4:	84 eb       	ldi	r24, 0xB4	; 180
    fbd6:	9c e0       	ldi	r25, 0x0C	; 12
    fbd8:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
        save_setup_network();
    fbdc:	0e 94 0d 59 	call	0xb21a	; 0xb21a <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
        strcpy(str1, "TERM D1");
    fbe0:	6c ed       	ldi	r22, 0xDC	; 220
    fbe2:	76 e0       	ldi	r23, 0x06	; 6
    fbe4:	8d 2d       	mov	r24, r13
    fbe6:	9b 2d       	mov	r25, r11
    fbe8:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4516
        device_set_name(str1);
    fbec:	8d 2d       	mov	r24, r13
    fbee:	9b 2d       	mov	r25, r11
    fbf0:	0e 94 e5 58 	call	0xb1ca	; 0xb1ca <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4518
        char hostname[10];
        device_get_name(hostname);
    fbf4:	ce 01       	movw	r24, r28
    fbf6:	82 52       	subi	r24, 0x22	; 34
    fbf8:	9f 4f       	sbci	r25, 0xFF	; 255
    fbfa:	0e 94 dc 61 	call	0xc3b8	; 0xc3b8 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4519
        default_ring = 0;
    fbfe:	10 92 69 0a 	sts	0x0A69, r1	; 0x800a69 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    fc02:	60 e0       	ldi	r22, 0x00	; 0
    fc04:	8c e5       	ldi	r24, 0x5C	; 92
    fc06:	90 e0       	ldi	r25, 0x00	; 0
    fc08:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    fc0c:	f0 cc       	rjmp	.-1568   	; 0xf5ee <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    fc0e:	60 e6       	ldi	r22, 0x60	; 96
    fc10:	7c e3       	ldi	r23, 0x3C	; 60
    fc12:	8d 2d       	mov	r24, r13
    fc14:	9b 2d       	mov	r25, r11
    fc16:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fc1a:	ee 24       	eor	r14, r14
    fc1c:	ea 94       	dec	r14
    fc1e:	fe 2c       	mov	r15, r14
    fc20:	00 ee       	ldi	r16, 0xE0	; 224
    fc22:	17 e0       	ldi	r17, 0x07	; 7
    fc24:	21 e0       	ldi	r18, 0x01	; 1
    fc26:	46 e4       	ldi	r20, 0x46	; 70
    fc28:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4558
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fc2a:	6e e1       	ldi	r22, 0x1E	; 30
    fc2c:	70 e0       	ldi	r23, 0x00	; 0
    fc2e:	5d c0       	rjmp	.+186    	; 0xfcea <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    fc30:	b3 e0       	ldi	r27, 0x03	; 3
    fc32:	ab 12       	cpse	r10, r27
    fc34:	72 c0       	rjmp	.+228    	; 0xfd1a <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    fc36:	61 e0       	ldi	r22, 0x01	; 1
    fc38:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
    fc3c:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    fc40:	61 e0       	ldi	r22, 0x01	; 1
    fc42:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
    fc46:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    fc4a:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
    fc4e:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
    fc52:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    fc56:	60 e0       	ldi	r22, 0x00	; 0
    fc58:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
    fc5c:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    fc60:	61 e0       	ldi	r22, 0x01	; 1
    fc62:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
    fc66:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
    fc6a:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    fc6e:	60 e4       	ldi	r22, 0x40	; 64
    fc70:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
    fc74:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
    fc78:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    fc7c:	61 e0       	ldi	r22, 0x01	; 1
    fc7e:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
    fc82:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
    fc86:	4b ea       	ldi	r20, 0xAB	; 171
    fc88:	60 e0       	ldi	r22, 0x00	; 0
    fc8a:	70 e0       	ldi	r23, 0x00	; 0
    fc8c:	cb 01       	movw	r24, r22
    fc8e:	0e 94 f2 90 	call	0x121e4	; 0x121e4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4534
      if (SRAM.readByte(0) == 0xAB)
    fc92:	60 e0       	ldi	r22, 0x00	; 0
    fc94:	70 e0       	ldi	r23, 0x00	; 0
    fc96:	cb 01       	movw	r24, r22
    fc98:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
      {
        strcpy_P(str1, text_test_ram);
    fc9c:	63 e5       	ldi	r22, 0x53	; 83
    fc9e:	7c e3       	ldi	r23, 0x3C	; 60
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4534
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    fca0:	8b 3a       	cpi	r24, 0xAB	; 171
    fca2:	41 f5       	brne	.+80     	; 0xfcf4 <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
      {
        strcpy_P(str1, text_test_ram);
    fca4:	8d 2d       	mov	r24, r13
    fca6:	9b 2d       	mov	r25, r11
    fca8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
        strcat(str1, " init ...");
    fcac:	64 ee       	ldi	r22, 0xE4	; 228
    fcae:	76 e0       	ldi	r23, 0x06	; 6
    fcb0:	8d 2d       	mov	r24, r13
    fcb2:	9b 2d       	mov	r25, r11
    fcb4:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4538
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fcb8:	ee 24       	eor	r14, r14
    fcba:	ea 94       	dec	r14
    fcbc:	fe 2c       	mov	r15, r14
    fcbe:	00 ee       	ldi	r16, 0xE0	; 224
    fcc0:	17 e0       	ldi	r17, 0x07	; 7
    fcc2:	21 e0       	ldi	r18, 0x01	; 1
    fcc4:	40 e5       	ldi	r20, 0x50	; 80
    fcc6:	50 e0       	ldi	r21, 0x00	; 0
    fcc8:	6e e1       	ldi	r22, 0x1E	; 30
    fcca:	70 e0       	ldi	r23, 0x00	; 0
    fccc:	8d 2d       	mov	r24, r13
    fcce:	9b 2d       	mov	r25, r11
    fcd0:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4551
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    fcd4:	60 e5       	ldi	r22, 0x50	; 80
    fcd6:	7c e3       	ldi	r23, 0x3C	; 60
    fcd8:	8d 2d       	mov	r24, r13
    fcda:	9b 2d       	mov	r25, r11
    fcdc:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4552
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fce0:	21 e0       	ldi	r18, 0x01	; 1
    fce2:	40 e5       	ldi	r20, 0x50	; 80
    fce4:	50 e0       	ldi	r21, 0x00	; 0
    fce6:	62 ed       	ldi	r22, 0xD2	; 210
    fce8:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4558
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fcea:	8d 2d       	mov	r24, r13
    fcec:	9b 2d       	mov	r25, r11
    fcee:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    fcf2:	7d cc       	rjmp	.-1798   	; 0xf5ee <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4556
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    fcf4:	8d 2d       	mov	r24, r13
    fcf6:	9b 2d       	mov	r25, r11
    fcf8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4557
        strcat_P(str1, text_err);
    fcfc:	66 ed       	ldi	r22, 0xD6	; 214
    fcfe:	7c e3       	ldi	r23, 0x3C	; 60
    fd00:	8d 2d       	mov	r24, r13
    fd02:	9b 2d       	mov	r25, r11
    fd04:	0e 94 77 b1 	call	0x162ee	; 0x162ee <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4558
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fd08:	ee 24       	eor	r14, r14
    fd0a:	ea 94       	dec	r14
    fd0c:	fe 2c       	mov	r15, r14
    fd0e:	00 e0       	ldi	r16, 0x00	; 0
    fd10:	18 ef       	ldi	r17, 0xF8	; 248
    fd12:	21 e0       	ldi	r18, 0x01	; 1
    fd14:	40 e5       	ldi	r20, 0x50	; 80
    fd16:	50 e0       	ldi	r21, 0x00	; 0
    fd18:	88 cf       	rjmp	.-240    	; 0xfc2a <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4563
      }
    }

    //// init EEPROMKY
    if (init == 4)
    fd1a:	e4 e0       	ldi	r30, 0x04	; 4
    fd1c:	ae 12       	cpse	r10, r30
    fd1e:	e5 c4       	rjmp	.+2506   	; 0x106ea <__EEPROM_REGION_LENGTH__+0x6ea>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    fd20:	61 e0       	ldi	r22, 0x01	; 1
    fd22:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <SROM+0xa>
    fd26:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    fd2a:	61 e0       	ldi	r22, 0x01	; 1
    fd2c:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <SROM+0xa>
    fd30:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    fd34:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
    fd38:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
    fd3c:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    fd40:	80 91 d0 0c 	lds	r24, 0x0CD0	; 0x800cd0 <SROM+0x4>
    fd44:	90 91 d1 0c 	lds	r25, 0x0CD1	; 0x800cd1 <SROM+0x5>
    fd48:	a0 91 d2 0c 	lds	r26, 0x0CD2	; 0x800cd2 <SROM+0x6>
    fd4c:	b0 91 d3 0c 	lds	r27, 0x0CD3	; 0x800cd3 <SROM+0x7>
    fd50:	89 2b       	or	r24, r25
    fd52:	8a 2b       	or	r24, r26
    fd54:	8b 2b       	or	r24, r27
    fd56:	a9 f0       	breq	.+42     	; 0xfd82 <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    fd58:	0e 94 b3 91 	call	0x12366	; 0x12366 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    fd5c:	80 fd       	sbrc	r24, 0
    fd5e:	fc cf       	rjmp	.-8      	; 0xfd58 <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    fd60:	86 e0       	ldi	r24, 0x06	; 6
    fd62:	0e 94 6b 91 	call	0x122d6	; 0x122d6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    fd66:	0e 94 66 91 	call	0x122cc	; 0x122cc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    fd6a:	82 e0       	ldi	r24, 0x02	; 2
    fd6c:	0e 94 6b 91 	call	0x122d6	; 0x122d6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    fd70:	6a eb       	ldi	r22, 0xBA	; 186
    fd72:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
    fd76:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
    fd7a:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    fd7e:	0e 94 66 91 	call	0x122cc	; 0x122cc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    fd82:	80 91 d0 0c 	lds	r24, 0x0CD0	; 0x800cd0 <SROM+0x4>
    fd86:	90 91 d1 0c 	lds	r25, 0x0CD1	; 0x800cd1 <SROM+0x5>
    fd8a:	a0 91 d2 0c 	lds	r26, 0x0CD2	; 0x800cd2 <SROM+0x6>
    fd8e:	b0 91 d3 0c 	lds	r27, 0x0CD3	; 0x800cd3 <SROM+0x7>
    fd92:	89 2b       	or	r24, r25
    fd94:	8a 2b       	or	r24, r26
    fd96:	8b 2b       	or	r24, r27
    fd98:	71 f1       	breq	.+92     	; 0xfdf6 <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    fd9a:	0e 94 b3 91 	call	0x12366	; 0x12366 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    fd9e:	80 fd       	sbrc	r24, 0
    fda0:	fc cf       	rjmp	.-8      	; 0xfd9a <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    fda2:	83 e0       	ldi	r24, 0x03	; 3
    fda4:	0e 94 6b 91 	call	0x122d6	; 0x122d6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    fda8:	6f ef       	ldi	r22, 0xFF	; 255
    fdaa:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
    fdae:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
    fdb2:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
    fdb6:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    fdb8:	0e 94 66 91 	call	0x122cc	; 0x122cc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4567
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    fdbc:	1a 3b       	cpi	r17, 0xBA	; 186
    fdbe:	d9 f4       	brne	.+54     	; 0xfdf6 <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4570

      {
        strcpy_P(str1, text_test_eeprom);
    fdc0:	60 e4       	ldi	r22, 0x40	; 64
    fdc2:	7c e3       	ldi	r23, 0x3C	; 60
    fdc4:	8d 2d       	mov	r24, r13
    fdc6:	9b 2d       	mov	r25, r11
    fdc8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
        strcat_P(str1, text_ok);
    fdcc:	60 e5       	ldi	r22, 0x50	; 80
    fdce:	7c e3       	ldi	r23, 0x3C	; 60
    fdd0:	8d 2d       	mov	r24, r13
    fdd2:	9b 2d       	mov	r25, r11
    fdd4:	0e 94 77 b1 	call	0x162ee	; 0x162ee <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4572
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fdd8:	ee 24       	eor	r14, r14
    fdda:	ea 94       	dec	r14
    fddc:	fe 2c       	mov	r15, r14
    fdde:	00 ee       	ldi	r16, 0xE0	; 224
    fde0:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4578
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fde2:	21 e0       	ldi	r18, 0x01	; 1
    fde4:	4a e5       	ldi	r20, 0x5A	; 90
    fde6:	50 e0       	ldi	r21, 0x00	; 0
    fde8:	6e e1       	ldi	r22, 0x1E	; 30
    fdea:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fdec:	8d 2d       	mov	r24, r13
    fdee:	9b 2d       	mov	r25, r11
    fdf0:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    fdf4:	fc c0       	rjmp	.+504    	; 0xffee <__DATA_REGION_LENGTH__+0x1ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4576
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    fdf6:	60 e4       	ldi	r22, 0x40	; 64
    fdf8:	7c e3       	ldi	r23, 0x3C	; 60
    fdfa:	8d 2d       	mov	r24, r13
    fdfc:	9b 2d       	mov	r25, r11
    fdfe:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4577
        strcat_P(str1, text_err);
    fe02:	66 ed       	ldi	r22, 0xD6	; 214
    fe04:	7c e3       	ldi	r23, 0x3C	; 60
    fe06:	8d 2d       	mov	r24, r13
    fe08:	9b 2d       	mov	r25, r11
    fe0a:	0e 94 77 b1 	call	0x162ee	; 0x162ee <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4578
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    fe0e:	ee 24       	eor	r14, r14
    fe10:	ea 94       	dec	r14
    fe12:	fe 2c       	mov	r15, r14
    fe14:	00 e0       	ldi	r16, 0x00	; 0
    fe16:	18 ef       	ldi	r17, 0xF8	; 248
    fe18:	e4 cf       	rjmp	.-56     	; 0xfde2 <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4585
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    fe1a:	6e e2       	ldi	r22, 0x2E	; 46
    fe1c:	7c e3       	ldi	r23, 0x3C	; 60
    fe1e:	8d 2d       	mov	r24, r13
    fe20:	9b 2d       	mov	r25, r11
    fe22:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4586
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fe26:	ee 24       	eor	r14, r14
    fe28:	ea 94       	dec	r14
    fe2a:	fe 2c       	mov	r15, r14
    fe2c:	00 ee       	ldi	r16, 0xE0	; 224
    fe2e:	17 e0       	ldi	r17, 0x07	; 7
    fe30:	21 e0       	ldi	r18, 0x01	; 1
    fe32:	44 e6       	ldi	r20, 0x64	; 100
    fe34:	50 e0       	ldi	r21, 0x00	; 0
    fe36:	6e e1       	ldi	r22, 0x1E	; 30
    fe38:	70 e0       	ldi	r23, 0x00	; 0
    fe3a:	8d 2d       	mov	r24, r13
    fe3c:	9b 2d       	mov	r25, r11
    fe3e:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    fe42:	aa e7       	ldi	r26, 0x7A	; 122
    fe44:	ea 2e       	mov	r14, r26
    fe46:	ac e0       	ldi	r26, 0x0C	; 12
    fe48:	fa 2e       	mov	r15, r26
    fe4a:	0e e6       	ldi	r16, 0x6E	; 110
    fe4c:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    fe4e:	c8 01       	movw	r24, r16
    fe50:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe54:	d7 01       	movw	r26, r14
    fe56:	8d 93       	st	X+, r24
    fe58:	7d 01       	movw	r14, r26
    fe5a:	0f 5f       	subi	r16, 0xFF	; 255
    fe5c:	1f 4f       	sbci	r17, 0xFF	; 255
    fe5e:	04 37       	cpi	r16, 0x74	; 116
    fe60:	11 05       	cpc	r17, r1
    fe62:	a9 f7       	brne	.-22     	; 0xfe4e <__DATA_REGION_LENGTH__+0x4e>
    fe64:	e0 e8       	ldi	r30, 0x80	; 128
    fe66:	ee 2e       	mov	r14, r30
    fe68:	ec e0       	ldi	r30, 0x0C	; 12
    fe6a:	fe 2e       	mov	r15, r30
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    fe6c:	c8 01       	movw	r24, r16
    fe6e:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe72:	f7 01       	movw	r30, r14
    fe74:	81 93       	st	Z+, r24
    fe76:	7f 01       	movw	r14, r30
    fe78:	0f 5f       	subi	r16, 0xFF	; 255
    fe7a:	1f 4f       	sbci	r17, 0xFF	; 255
    fe7c:	08 37       	cpi	r16, 0x78	; 120
    fe7e:	11 05       	cpc	r17, r1
    fe80:	a9 f7       	brne	.-22     	; 0xfe6c <__DATA_REGION_LENGTH__+0x6c>
    fe82:	74 e8       	ldi	r23, 0x84	; 132
    fe84:	e7 2e       	mov	r14, r23
    fe86:	7c e0       	ldi	r23, 0x0C	; 12
    fe88:	f7 2e       	mov	r15, r23
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    fe8a:	c8 01       	movw	r24, r16
    fe8c:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fe90:	d7 01       	movw	r26, r14
    fe92:	8d 93       	st	X+, r24
    fe94:	7d 01       	movw	r14, r26
    fe96:	0f 5f       	subi	r16, 0xFF	; 255
    fe98:	1f 4f       	sbci	r17, 0xFF	; 255
    fe9a:	0c 37       	cpi	r16, 0x7C	; 124
    fe9c:	11 05       	cpc	r17, r1
    fe9e:	a9 f7       	brne	.-22     	; 0xfe8a <__DATA_REGION_LENGTH__+0x8a>
    fea0:	5c e8       	ldi	r21, 0x8C	; 140
    fea2:	85 2e       	mov	r8, r21
    fea4:	5c e0       	ldi	r21, 0x0C	; 12
    fea6:	95 2e       	mov	r9, r21
    fea8:	60 e8       	ldi	r22, 0x80	; 128
    feaa:	e6 2e       	mov	r14, r22
    feac:	f1 2c       	mov	r15, r1
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    feae:	c7 01       	movw	r24, r14
    feb0:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    feb4:	f4 01       	movw	r30, r8
    feb6:	81 93       	st	Z+, r24
    feb8:	4f 01       	movw	r8, r30
    feba:	ff ef       	ldi	r31, 0xFF	; 255
    febc:	ef 1a       	sub	r14, r31
    febe:	ff 0a       	sbc	r15, r31
    fec0:	24 e8       	ldi	r18, 0x84	; 132
    fec2:	e2 16       	cp	r14, r18
    fec4:	f1 04       	cpc	r15, r1
    fec6:	99 f7       	brne	.-26     	; 0xfeae <__DATA_REGION_LENGTH__+0xae>
    fec8:	48 e8       	ldi	r20, 0x88	; 136
    feca:	84 2e       	mov	r8, r20
    fecc:	4c e0       	ldi	r20, 0x0C	; 12
    fece:	94 2e       	mov	r9, r20
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    fed0:	c8 01       	movw	r24, r16
    fed2:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fed6:	d4 01       	movw	r26, r8
    fed8:	8d 93       	st	X+, r24
    feda:	4d 01       	movw	r8, r26
    fedc:	0f 5f       	subi	r16, 0xFF	; 255
    fede:	1f 4f       	sbci	r17, 0xFF	; 255
    fee0:	00 38       	cpi	r16, 0x80	; 128
    fee2:	11 05       	cpc	r17, r1
    fee4:	a9 f7       	brne	.-22     	; 0xfed0 <__DATA_REGION_LENGTH__+0xd0>
    fee6:	30 e9       	ldi	r19, 0x90	; 144
    fee8:	83 2e       	mov	r8, r19
    feea:	3c e0       	ldi	r19, 0x0C	; 12
    feec:	93 2e       	mov	r9, r19
    feee:	04 e6       	ldi	r16, 0x64	; 100
    fef0:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    fef2:	c8 01       	movw	r24, r16
    fef4:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    fef8:	f4 01       	movw	r30, r8
    fefa:	81 93       	st	Z+, r24
    fefc:	4f 01       	movw	r8, r30
    fefe:	0f 5f       	subi	r16, 0xFF	; 255
    ff00:	1f 4f       	sbci	r17, 0xFF	; 255
    ff02:	0d 36       	cpi	r16, 0x6D	; 109
    ff04:	11 05       	cpc	r17, r1
    ff06:	a9 f7       	brne	.-22     	; 0xfef2 <__DATA_REGION_LENGTH__+0xf2>
    ff08:	0a e9       	ldi	r16, 0x9A	; 154
    ff0a:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    ff0c:	c7 01       	movw	r24, r14
    ff0e:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff12:	d8 01       	movw	r26, r16
    ff14:	8d 93       	st	X+, r24
    ff16:	8d 01       	movw	r16, r26
    ff18:	bf ef       	ldi	r27, 0xFF	; 255
    ff1a:	eb 1a       	sub	r14, r27
    ff1c:	fb 0a       	sbc	r15, r27
    ff1e:	e8 e8       	ldi	r30, 0x88	; 136
    ff20:	ee 16       	cp	r14, r30
    ff22:	f1 04       	cpc	r15, r1
    ff24:	99 f7       	brne	.-26     	; 0xff0c <__DATA_REGION_LENGTH__+0x10c>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    ff26:	88 e8       	ldi	r24, 0x88	; 136
    ff28:	90 e0       	ldi	r25, 0x00	; 0
    ff2a:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff2e:	18 2f       	mov	r17, r24
    ff30:	89 e8       	ldi	r24, 0x89	; 137
    ff32:	90 e0       	ldi	r25, 0x00	; 0
    ff34:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff38:	21 2f       	mov	r18, r17
    ff3a:	30 e0       	ldi	r19, 0x00	; 0
    ff3c:	32 2f       	mov	r19, r18
    ff3e:	22 27       	eor	r18, r18
    ff40:	82 0f       	add	r24, r18
    ff42:	93 2f       	mov	r25, r19
    ff44:	91 1d       	adc	r25, r1
    ff46:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <device+0x25>
    ff4a:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <device+0x24>
    ff4e:	20 ea       	ldi	r18, 0xA0	; 160
    ff50:	e2 2e       	mov	r14, r18
    ff52:	2c e0       	ldi	r18, 0x0C	; 12
    ff54:	f2 2e       	mov	r15, r18
    ff56:	0a e8       	ldi	r16, 0x8A	; 138
    ff58:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    ff5a:	c8 01       	movw	r24, r16
    ff5c:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff60:	d7 01       	movw	r26, r14
    ff62:	8d 93       	st	X+, r24
    ff64:	7d 01       	movw	r14, r26
    ff66:	0f 5f       	subi	r16, 0xFF	; 255
    ff68:	1f 4f       	sbci	r17, 0xFF	; 255
    ff6a:	0e 39       	cpi	r16, 0x9E	; 158
    ff6c:	11 05       	cpc	r17, r1
    ff6e:	a9 f7       	brne	.-22     	; 0xff5a <__DATA_REGION_LENGTH__+0x15a>
    ff70:	84 eb       	ldi	r24, 0xB4	; 180
    ff72:	e8 2e       	mov	r14, r24
    ff74:	8c e0       	ldi	r24, 0x0C	; 12
    ff76:	f8 2e       	mov	r15, r24
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    ff78:	c8 01       	movw	r24, r16
    ff7a:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff7e:	f7 01       	movw	r30, r14
    ff80:	81 93       	st	Z+, r24
    ff82:	7f 01       	movw	r14, r30
    ff84:	0f 5f       	subi	r16, 0xFF	; 255
    ff86:	1f 4f       	sbci	r17, 0xFF	; 255
    ff88:	02 3b       	cpi	r16, 0xB2	; 178
    ff8a:	11 05       	cpc	r17, r1
    ff8c:	a9 f7       	brne	.-22     	; 0xff78 <__DATA_REGION_LENGTH__+0x178>
    ff8e:	b8 ec       	ldi	r27, 0xC8	; 200
    ff90:	eb 2e       	mov	r14, r27
    ff92:	bc e0       	ldi	r27, 0x0C	; 12
    ff94:	fb 2e       	mov	r15, r27
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    ff96:	c8 01       	movw	r24, r16
    ff98:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ff9c:	d7 01       	movw	r26, r14
    ff9e:	8d 93       	st	X+, r24
    ffa0:	7d 01       	movw	r14, r26
    ffa2:	0f 5f       	subi	r16, 0xFF	; 255
    ffa4:	1f 4f       	sbci	r17, 0xFF	; 255
    ffa6:	06 3b       	cpi	r16, 0xB6	; 182
    ffa8:	11 05       	cpc	r17, r1
    ffaa:	a9 f7       	brne	.-22     	; 0xff96 <__DATA_REGION_LENGTH__+0x196>
    ffac:	44 e7       	ldi	r20, 0x74	; 116
    ffae:	5a e0       	ldi	r21, 0x0A	; 10
    ffb0:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4592
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    ffb2:	60 e2       	ldi	r22, 0x20	; 32
    ffb4:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:35
    ffb6:	90 e0       	ldi	r25, 0x00	; 0
    ffb8:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4592
    ffba:	fc 01       	movw	r30, r24
    ffbc:	ee 0f       	add	r30, r30
    ffbe:	ff 1f       	adc	r31, r31
    ffc0:	e4 0f       	add	r30, r20
    ffc2:	f5 1f       	adc	r31, r21
    ffc4:	70 87       	std	Z+8, r23	; 0x08
    ffc6:	67 83       	std	Z+7, r22	; 0x07
    ffc8:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4591
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ffca:	8a 30       	cpi	r24, 0x0A	; 10
    ffcc:	91 05       	cpc	r25, r1
    ffce:	a9 f7       	brne	.-22     	; 0xffba <__DATA_REGION_LENGTH__+0x1ba>
    ffd0:	21 50       	subi	r18, 0x01	; 1
    ffd2:	42 5e       	subi	r20, 0xE2	; 226
    ffd4:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4590
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ffd6:	21 11       	cpse	r18, r1
    ffd8:	ee cf       	rjmp	.-36     	; 0xffb6 <__DATA_REGION_LENGTH__+0x1b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4595
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    ffda:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <last_output_update>
    ffde:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <last_output_update+0x1>
    ffe2:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <last_output_update+0x2>
    ffe6:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <last_output_update+0x3>
    ffea:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    ffee:	a3 94       	inc	r10
    fff0:	c4 5c       	subi	r28, 0xC4	; 196
    fff2:	de 4f       	sbci	r29, 0xFE	; 254
    fff4:	e8 81       	ld	r30, Y
    fff6:	f9 81       	ldd	r31, Y+1	; 0x01
    fff8:	cc 53       	subi	r28, 0x3C	; 60
    fffa:	d1 40       	sbci	r29, 0x01	; 1
    fffc:	3f 96       	adiw	r30, 0x0f	; 15
    fffe:	c4 5c       	subi	r28, 0xC4	; 196
   10000:	de 4f       	sbci	r29, 0xFE	; 254
   10002:	f9 83       	std	Y+1, r31	; 0x01
   10004:	e8 83       	st	Y, r30
   10006:	cc 53       	subi	r28, 0x3C	; 60
   10008:	d1 40       	sbci	r29, 0x01	; 1
   1000a:	f0 e1       	ldi	r31, 0x10	; 16
   1000c:	af 12       	cpse	r10, r31
   1000e:	8f c9       	rjmp	.-3298   	; 0xf32e <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4769
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   10010:	64 ef       	ldi	r22, 0xF4	; 244
   10012:	71 e0       	ldi	r23, 0x01	; 1
   10014:	80 e0       	ldi	r24, 0x00	; 0
   10016:	90 e0       	ldi	r25, 0x00	; 0
   10018:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4770
  MenuPrepareStyle();
   1001c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4771
  draw_menu(true);
   10020:	81 e0       	ldi	r24, 0x01	; 1
   10022:	0e 94 44 43 	call	0x8688	; 0x8688 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4772
  a2d_run_now = 1;
   10026:	81 e0       	ldi	r24, 0x01	; 1
   10028:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4774

}
   1002c:	c3 5b       	subi	r28, 0xB3	; 179
   1002e:	de 4f       	sbci	r29, 0xFE	; 254
   10030:	0f b6       	in	r0, 0x3f	; 63
   10032:	f8 94       	cli
   10034:	de bf       	out	0x3e, r29	; 62
   10036:	0f be       	out	0x3f, r0	; 63
   10038:	cd bf       	out	0x3d, r28	; 61
   1003a:	df 91       	pop	r29
   1003c:	cf 91       	pop	r28
   1003e:	1f 91       	pop	r17
   10040:	0f 91       	pop	r16
   10042:	ff 90       	pop	r15
   10044:	ef 90       	pop	r14
   10046:	df 90       	pop	r13
   10048:	cf 90       	pop	r12
   1004a:	bf 90       	pop	r11
   1004c:	af 90       	pop	r10
   1004e:	9f 90       	pop	r9
   10050:	8f 90       	pop	r8
   10052:	7f 90       	pop	r7
   10054:	6f 90       	pop	r6
   10056:	5f 90       	pop	r5
   10058:	4f 90       	pop	r4
   1005a:	3f 90       	pop	r3
   1005c:	2f 90       	pop	r2
   1005e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4601
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
   10060:	62 e2       	ldi	r22, 0x22	; 34
   10062:	7c e3       	ldi	r23, 0x3C	; 60
   10064:	c1 01       	movw	r24, r2
   10066:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4602
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1006a:	ee 24       	eor	r14, r14
   1006c:	ea 94       	dec	r14
   1006e:	fe 2c       	mov	r15, r14
   10070:	00 ee       	ldi	r16, 0xE0	; 224
   10072:	17 e0       	ldi	r17, 0x07	; 7
   10074:	21 e0       	ldi	r18, 0x01	; 1
   10076:	4e e6       	ldi	r20, 0x6E	; 110
   10078:	50 e0       	ldi	r21, 0x00	; 0
   1007a:	6e e1       	ldi	r22, 0x1E	; 30
   1007c:	70 e0       	ldi	r23, 0x00	; 0
   1007e:	c1 01       	movw	r24, r2
   10080:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   10084:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <my_lcd+0x14>
   10088:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   1008c:	40 91 27 0e 	lds	r20, 0x0E27	; 0x800e27 <my_lcd+0x12>
   10090:	50 91 28 0e 	lds	r21, 0x0E28	; 0x800e28 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   10094:	90 91 2b 0e 	lds	r25, 0x0E2B	; 0x800e2b <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   10098:	e0 91 0c 0e 	lds	r30, 0x0E0C	; 0x800e0c <my_touch+0x15>
   1009c:	f0 91 0d 0e 	lds	r31, 0x0E0D	; 0x800e0d <my_touch+0x16>
   100a0:	80 81       	ld	r24, Z
   100a2:	60 91 13 0e 	lds	r22, 0x0E13	; 0x800e13 <my_touch+0x1c>
   100a6:	86 2b       	or	r24, r22
   100a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
   100aa:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_touch+0x11>
   100ae:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_touch+0x12>
   100b2:	80 81       	ld	r24, Z
   100b4:	60 91 11 0e 	lds	r22, 0x0E11	; 0x800e11 <my_touch+0x1a>
   100b8:	86 2b       	or	r24, r22
   100ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
   100bc:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_touch+0xf>
   100c0:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_touch+0x10>
   100c4:	80 81       	ld	r24, Z
   100c6:	60 91 10 0e 	lds	r22, 0x0E10	; 0x800e10 <my_touch+0x19>
   100ca:	86 2b       	or	r24, r22
   100cc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
   100ce:	50 93 00 0e 	sts	0x0E00, r21	; 0x800e00 <my_touch+0x9>
   100d2:	40 93 ff 0d 	sts	0x0DFF, r20	; 0x800dff <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
   100d6:	30 93 02 0e 	sts	0x0E02, r19	; 0x800e02 <my_touch+0xb>
   100da:	20 93 01 0e 	sts	0x0E01, r18	; 0x800e01 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   100de:	90 93 05 0e 	sts	0x0E05, r25	; 0x800e05 <my_touch+0xe>
   100e2:	85 cf       	rjmp	.-246    	; 0xffee <__DATA_REGION_LENGTH__+0x1ee>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   100e4:	66 ed       	ldi	r22, 0xD6	; 214
   100e6:	7c e3       	ldi	r23, 0x3C	; 60
   100e8:	8d 2d       	mov	r24, r13
   100ea:	9b 2d       	mov	r25, r11
   100ec:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4629
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   100f0:	ee 24       	eor	r14, r14
   100f2:	ea 94       	dec	r14
   100f4:	fe 2c       	mov	r15, r14
   100f6:	00 e0       	ldi	r16, 0x00	; 0
   100f8:	18 ef       	ldi	r17, 0xF8	; 248
   100fa:	21 e0       	ldi	r18, 0x01	; 1
   100fc:	48 e7       	ldi	r20, 0x78	; 120
   100fe:	50 e0       	ldi	r21, 0x00	; 0
   10100:	60 ea       	ldi	r22, 0xA0	; 160
   10102:	70 e0       	ldi	r23, 0x00	; 0
   10104:	8d 2d       	mov	r24, r13
   10106:	9b 2d       	mov	r25, r11
   10108:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1010c:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
   10110:	84 60       	ori	r24, 0x04	; 4
   10112:	3d c3       	rjmp	.+1658   	; 0x1078e <__EEPROM_REGION_LENGTH__+0x78e>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4635
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   10114:	e8 e0       	ldi	r30, 0x08	; 8
   10116:	ae 12       	cpse	r10, r30
   10118:	9d c0       	rjmp	.+314    	; 0x10254 <__EEPROM_REGION_LENGTH__+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4637
    {
      strcpy_P(str1, text_onewire_hledam);
   1011a:	66 e0       	ldi	r22, 0x06	; 6
   1011c:	7c e3       	ldi	r23, 0x3C	; 60
   1011e:	8d 2d       	mov	r24, r13
   10120:	9b 2d       	mov	r25, r11
   10122:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4638
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10126:	ee 24       	eor	r14, r14
   10128:	ea 94       	dec	r14
   1012a:	fe 2c       	mov	r15, r14
   1012c:	00 ee       	ldi	r16, 0xE0	; 224
   1012e:	17 e0       	ldi	r17, 0x07	; 7
   10130:	21 e0       	ldi	r18, 0x01	; 1
   10132:	42 e8       	ldi	r20, 0x82	; 130
   10134:	50 e0       	ldi	r21, 0x00	; 0
   10136:	6e e1       	ldi	r22, 0x1E	; 30
   10138:	70 e0       	ldi	r23, 0x00	; 0
   1013a:	8d 2d       	mov	r24, r13
   1013c:	9b 2d       	mov	r25, r11
   1013e:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4639
      Global_HWwirenum = 0;
   10142:	10 92 5c 0a 	sts	0x0A5C, r1	; 0x800a5c <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   10146:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <ds2482_address+0x1>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   1014a:	10 91 d0 09 	lds	r17, 0x09D0	; 0x8009d0 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   1014e:	81 2f       	mov	r24, r17
   10150:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   10154:	84 e5       	ldi	r24, 0x54	; 84
   10156:	9e e0       	ldi	r25, 0x0E	; 14
   10158:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   1015c:	81 11       	cpse	r24, r1
   1015e:	10 c0       	rjmp	.+32     	; 0x10180 <__EEPROM_REGION_LENGTH__+0x180>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   10160:	81 2f       	mov	r24, r17
   10162:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   10166:	82 ed       	ldi	r24, 0xD2	; 210
   10168:	90 e0       	ldi	r25, 0x00	; 0
   1016a:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   1016e:	60 e0       	ldi	r22, 0x00	; 0
   10170:	84 e5       	ldi	r24, 0x54	; 84
   10172:	9e e0       	ldi	r25, 0x0E	; 14
   10174:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   10178:	84 e5       	ldi	r24, 0x54	; 84
   1017a:	9e e0       	ldi	r25, 0x0E	; 14
   1017c:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   10180:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <ds2482_address>
   10184:	0e 94 6d 98 	call	0x130da	; 0x130da <ds2482reset(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   10188:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <ds2482_address>
   1018c:	0e 94 37 99 	call	0x1326e	; 0x1326e <ds2482owReset(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   10190:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   10194:	10 92 bf 0b 	sts	0x0BBF, r1	; 0x800bbf <lastDevice>
   10198:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   1019c:	0e 94 6d 99 	call	0x132da	; 0x132da <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
one_hw_search_device():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   101a0:	81 11       	cpse	r24, r1
   101a2:	35 c0       	rjmp	.+106    	; 0x1020e <__EEPROM_REGION_LENGTH__+0x20e>
   101a4:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   101a6:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   101a8:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <ds2482_address+0x1>
   101ac:	86 30       	cpi	r24, 0x06	; 6
   101ae:	78 f5       	brcc	.+94     	; 0x1020e <__EEPROM_REGION_LENGTH__+0x20e>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   101b0:	20 91 5c 0a 	lds	r18, 0x0A5C	; 0x800a5c <Global_HWwirenum>
   101b4:	42 2f       	mov	r20, r18
   101b6:	50 e0       	ldi	r21, 0x00	; 0
   101b8:	a7 eb       	ldi	r26, 0xB7	; 183
   101ba:	bb e0       	ldi	r27, 0x0B	; 11
   101bc:	21 9f       	mul	r18, r17
   101be:	90 01       	movw	r18, r0
   101c0:	11 24       	eor	r1, r1
   101c2:	90 e0       	ldi	r25, 0x00	; 0
   101c4:	80 e0       	ldi	r24, 0x00	; 0
   101c6:	6d 91       	ld	r22, X+
   101c8:	fc 01       	movw	r30, r24
   101ca:	e2 0f       	add	r30, r18
   101cc:	f3 1f       	adc	r31, r19
   101ce:	e6 5e       	subi	r30, 0xE6	; 230
   101d0:	f5 4f       	sbci	r31, 0xF5	; 245
   101d2:	60 83       	st	Z, r22
   101d4:	01 96       	adiw	r24, 0x01	; 1
   101d6:	88 30       	cpi	r24, 0x08	; 8
   101d8:	91 05       	cpc	r25, r1
   101da:	a9 f7       	brne	.-22     	; 0x101c6 <__EEPROM_REGION_LENGTH__+0x1c6>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   101dc:	14 9f       	mul	r17, r20
   101de:	f0 01       	movw	r30, r0
   101e0:	15 9f       	mul	r17, r21
   101e2:	f0 0d       	add	r31, r0
   101e4:	11 24       	eor	r1, r1
   101e6:	e6 5e       	subi	r30, 0xE6	; 230
   101e8:	f5 4f       	sbci	r31, 0xF5	; 245
   101ea:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   101ec:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   101ee:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <ds2482_address>
   101f2:	0e 94 6d 99 	call	0x132da	; 0x132da <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   101f6:	90 91 d1 09 	lds	r25, 0x09D1	; 0x8009d1 <ds2482_address+0x1>
   101fa:	9f 5f       	subi	r25, 0xFF	; 255
   101fc:	90 93 d1 09 	sts	0x09D1, r25	; 0x8009d1 <ds2482_address+0x1>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   10200:	90 91 5c 0a 	lds	r25, 0x0A5C	; 0x800a5c <Global_HWwirenum>
   10204:	9f 5f       	subi	r25, 0xFF	; 255
   10206:	90 93 5c 0a 	sts	0x0A5C, r25	; 0x800a5c <Global_HWwirenum>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   1020a:	85 30       	cpi	r24, 0x05	; 5
   1020c:	69 f6       	brne	.-102    	; 0x101a8 <__EEPROM_REGION_LENGTH__+0x1a8>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4641
      one_hw_search_device(0);
      tds_update_associate();
   1020e:	0e 94 22 5d 	call	0xba44	; 0xba44 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4642
      strcpy (str1, "Nalezeno: ");
   10212:	6e ee       	ldi	r22, 0xEE	; 238
   10214:	76 e0       	ldi	r23, 0x06	; 6
   10216:	8d 2d       	mov	r24, r13
   10218:	9b 2d       	mov	r25, r11
   1021a:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4643
      itoa(Global_HWwirenum, str2, 10);
   1021e:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   10222:	4a e0       	ldi	r20, 0x0A	; 10
   10224:	be 01       	movw	r22, r28
   10226:	68 57       	subi	r22, 0x78	; 120
   10228:	7f 4f       	sbci	r23, 0xFF	; 255
   1022a:	90 e0       	ldi	r25, 0x00	; 0
   1022c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4644
      strcat(str1, str2);
   10230:	be 01       	movw	r22, r28
   10232:	68 57       	subi	r22, 0x78	; 120
   10234:	7f 4f       	sbci	r23, 0xFF	; 255
   10236:	8d 2d       	mov	r24, r13
   10238:	9b 2d       	mov	r25, r11
   1023a:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4645
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1023e:	ee 24       	eor	r14, r14
   10240:	ea 94       	dec	r14
   10242:	fe 2c       	mov	r15, r14
   10244:	00 ee       	ldi	r16, 0xE0	; 224
   10246:	17 e0       	ldi	r17, 0x07	; 7
   10248:	21 e0       	ldi	r18, 0x01	; 1
   1024a:	42 e8       	ldi	r20, 0x82	; 130
   1024c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1024e:	60 ea       	ldi	r22, 0xA0	; 160
   10250:	70 e0       	ldi	r23, 0x00	; 0
   10252:	cc cd       	rjmp	.-1128   	; 0xfdec <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4649
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   10254:	f9 e0       	ldi	r31, 0x09	; 9
   10256:	af 12       	cpse	r10, r31
   10258:	9d c2       	rjmp	.+1338   	; 0x10794 <__EEPROM_REGION_LENGTH__+0x794>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4651
    {
      digitalWrite(ETH_RST, HIGH);
   1025a:	61 e0       	ldi	r22, 0x01	; 1
   1025c:	86 e0       	ldi	r24, 0x06	; 6
   1025e:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4652
      delay(10);
   10262:	6a e0       	ldi	r22, 0x0A	; 10
   10264:	70 e0       	ldi	r23, 0x00	; 0
   10266:	80 e0       	ldi	r24, 0x00	; 0
   10268:	90 e0       	ldi	r25, 0x00	; 0
   1026a:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4653
      digitalWrite(ETH_RST, LOW);
   1026e:	60 e0       	ldi	r22, 0x00	; 0
   10270:	86 e0       	ldi	r24, 0x06	; 6
   10272:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4654
      delay(10);
   10276:	6a e0       	ldi	r22, 0x0A	; 10
   10278:	70 e0       	ldi	r23, 0x00	; 0
   1027a:	80 e0       	ldi	r24, 0x00	; 0
   1027c:	90 e0       	ldi	r25, 0x00	; 0
   1027e:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4655
      digitalWrite(ETH_RST, HIGH);
   10282:	61 e0       	ldi	r22, 0x01	; 1
   10284:	86 e0       	ldi	r24, 0x06	; 6
   10286:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4656
      delay(100);
   1028a:	64 e6       	ldi	r22, 0x64	; 100
   1028c:	70 e0       	ldi	r23, 0x00	; 0
   1028e:	80 e0       	ldi	r24, 0x00	; 0
   10290:	90 e0       	ldi	r25, 0x00	; 0
   10292:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   10296:	8f e0       	ldi	r24, 0x0F	; 15
   10298:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   1029c:	82 ee       	ldi	r24, 0xE2	; 226
   1029e:	92 e0       	ldi	r25, 0x02	; 2
   102a0:	ce 5c       	subi	r28, 0xCE	; 206
   102a2:	de 4f       	sbci	r29, 0xFE	; 254
   102a4:	99 83       	std	Y+1, r25	; 0x01
   102a6:	88 83       	st	Y, r24
   102a8:	c2 53       	subi	r28, 0x32	; 50
   102aa:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   102ac:	24 e0       	ldi	r18, 0x04	; 4
   102ae:	e4 e8       	ldi	r30, 0x84	; 132
   102b0:	fc e0       	ldi	r31, 0x0C	; 12
   102b2:	cc 5b       	subi	r28, 0xBC	; 188
   102b4:	de 4f       	sbci	r29, 0xFE	; 254
   102b6:	a8 81       	ld	r26, Y
   102b8:	b9 81       	ldd	r27, Y+1	; 0x01
   102ba:	c4 54       	subi	r28, 0x44	; 68
   102bc:	d1 40       	sbci	r29, 0x01	; 1
   102be:	01 90       	ld	r0, Z+
   102c0:	0d 92       	st	X+, r0
   102c2:	2a 95       	dec	r18
   102c4:	e1 f7       	brne	.-8      	; 0x102be <__EEPROM_REGION_LENGTH__+0x2be>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   102c6:	c4 5d       	subi	r28, 0xD4	; 212
   102c8:	de 4f       	sbci	r29, 0xFE	; 254
   102ca:	99 83       	std	Y+1, r25	; 0x01
   102cc:	88 83       	st	Y, r24
   102ce:	cc 52       	subi	r28, 0x2C	; 44
   102d0:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   102d2:	24 e0       	ldi	r18, 0x04	; 4
   102d4:	ec e8       	ldi	r30, 0x8C	; 140
   102d6:	fc e0       	ldi	r31, 0x0C	; 12
   102d8:	ca 5b       	subi	r28, 0xBA	; 186
   102da:	de 4f       	sbci	r29, 0xFE	; 254
   102dc:	a8 81       	ld	r26, Y
   102de:	b9 81       	ldd	r27, Y+1	; 0x01
   102e0:	c6 54       	subi	r28, 0x46	; 70
   102e2:	d1 40       	sbci	r29, 0x01	; 1
   102e4:	01 90       	ld	r0, Z+
   102e6:	0d 92       	st	X+, r0
   102e8:	2a 95       	dec	r18
   102ea:	e1 f7       	brne	.-8      	; 0x102e4 <__EEPROM_REGION_LENGTH__+0x2e4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   102ec:	ca 5d       	subi	r28, 0xDA	; 218
   102ee:	de 4f       	sbci	r29, 0xFE	; 254
   102f0:	99 83       	std	Y+1, r25	; 0x01
   102f2:	88 83       	st	Y, r24
   102f4:	c6 52       	subi	r28, 0x26	; 38
   102f6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   102f8:	24 e0       	ldi	r18, 0x04	; 4
   102fa:	e8 e8       	ldi	r30, 0x88	; 136
   102fc:	fc e0       	ldi	r31, 0x0C	; 12
   102fe:	c8 5b       	subi	r28, 0xB8	; 184
   10300:	de 4f       	sbci	r29, 0xFE	; 254
   10302:	a8 81       	ld	r26, Y
   10304:	b9 81       	ldd	r27, Y+1	; 0x01
   10306:	c8 54       	subi	r28, 0x48	; 72
   10308:	d1 40       	sbci	r29, 0x01	; 1
   1030a:	01 90       	ld	r0, Z+
   1030c:	0d 92       	st	X+, r0
   1030e:	2a 95       	dec	r18
   10310:	e1 f7       	brne	.-8      	; 0x1030a <__EEPROM_REGION_LENGTH__+0x30a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   10312:	c2 52       	subi	r28, 0x22	; 34
   10314:	df 4f       	sbci	r29, 0xFF	; 255
   10316:	99 83       	std	Y+1, r25	; 0x01
   10318:	88 83       	st	Y, r24
   1031a:	ce 5d       	subi	r28, 0xDE	; 222
   1031c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1031e:	84 e0       	ldi	r24, 0x04	; 4
   10320:	e0 e8       	ldi	r30, 0x80	; 128
   10322:	fc e0       	ldi	r31, 0x0C	; 12
   10324:	c6 5b       	subi	r28, 0xB6	; 182
   10326:	de 4f       	sbci	r29, 0xFE	; 254
   10328:	a8 81       	ld	r26, Y
   1032a:	b9 81       	ldd	r27, Y+1	; 0x01
   1032c:	ca 54       	subi	r28, 0x4A	; 74
   1032e:	d1 40       	sbci	r29, 0x01	; 1
   10330:	01 90       	ld	r0, Z+
   10332:	0d 92       	st	X+, r0
   10334:	8a 95       	dec	r24
   10336:	e1 f7       	brne	.-8      	; 0x10330 <__EEPROM_REGION_LENGTH__+0x330>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4658
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   10338:	9e 01       	movw	r18, r28
   1033a:	2e 5c       	subi	r18, 0xCE	; 206
   1033c:	3e 4f       	sbci	r19, 0xFE	; 254
   1033e:	ae 01       	movw	r20, r28
   10340:	44 5d       	subi	r20, 0xD4	; 212
   10342:	5e 4f       	sbci	r21, 0xFE	; 254
   10344:	be 01       	movw	r22, r28
   10346:	6a 5d       	subi	r22, 0xDA	; 218
   10348:	7e 4f       	sbci	r23, 0xFE	; 254
   1034a:	ce 01       	movw	r24, r28
   1034c:	82 52       	subi	r24, 0x22	; 34
   1034e:	9f 4f       	sbci	r25, 0xFF	; 255
   10350:	0e 94 e5 9e 	call	0x13dca	; 0x13dca <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659
      strcpy_P(str1, text_ethernet_rozhrani);
   10354:	64 ef       	ldi	r22, 0xF4	; 244
   10356:	7b e3       	ldi	r23, 0x3B	; 59
   10358:	8d 2d       	mov	r24, r13
   1035a:	9b 2d       	mov	r25, r11
   1035c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4660
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10360:	ee 24       	eor	r14, r14
   10362:	ea 94       	dec	r14
   10364:	fe 2c       	mov	r15, r14
   10366:	00 ee       	ldi	r16, 0xE0	; 224
   10368:	17 e0       	ldi	r17, 0x07	; 7
   1036a:	21 e0       	ldi	r18, 0x01	; 1
   1036c:	4c e8       	ldi	r20, 0x8C	; 140
   1036e:	50 e0       	ldi	r21, 0x00	; 0
   10370:	6e e1       	ldi	r22, 0x1E	; 30
   10372:	70 e0       	ldi	r23, 0x00	; 0
   10374:	8d 2d       	mov	r24, r13
   10376:	9b 2d       	mov	r25, r11
   10378:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4661
      delay(100);
   1037c:	64 e6       	ldi	r22, 0x64	; 100
   1037e:	70 e0       	ldi	r23, 0x00	; 0
   10380:	80 e0       	ldi	r24, 0x00	; 0
   10382:	90 e0       	ldi	r25, 0x00	; 0
   10384:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
   10388:	32 ce       	rjmp	.-924    	; 0xffee <__DATA_REGION_LENGTH__+0x1ee>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1038a:	90 62       	ori	r25, 0x20	; 32
   1038c:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <selftest_data>
   10390:	42 c2       	rjmp	.+1156   	; 0x10816 <__EEPROM_REGION_LENGTH__+0x816>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   10392:	60 e5       	ldi	r22, 0x50	; 80
   10394:	7c e3       	ldi	r23, 0x3C	; 60
   10396:	8d 2d       	mov	r24, r13
   10398:	9b 2d       	mov	r25, r11
   1039a:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1039e:	ee 24       	eor	r14, r14
   103a0:	ea 94       	dec	r14
   103a2:	fe 2c       	mov	r15, r14
   103a4:	00 ee       	ldi	r16, 0xE0	; 224
   103a6:	17 e0       	ldi	r17, 0x07	; 7
   103a8:	5b c2       	rjmp	.+1206   	; 0x10860 <__EEPROM_REGION_LENGTH__+0x860>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4699
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   103aa:	3b e0       	ldi	r19, 0x0B	; 11
   103ac:	a3 12       	cpse	r10, r19
   103ae:	0f c0       	rjmp	.+30     	; 0x103ce <__EEPROM_REGION_LENGTH__+0x3ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
    {
      strcpy_P(str1, text_rest_rozhrani);
   103b0:	65 ec       	ldi	r22, 0xC5	; 197
   103b2:	7b e3       	ldi	r23, 0x3B	; 59
   103b4:	8d 2d       	mov	r24, r13
   103b6:	9b 2d       	mov	r25, r11
   103b8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4702
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   103bc:	ee 24       	eor	r14, r14
   103be:	ea 94       	dec	r14
   103c0:	fe 2c       	mov	r15, r14
   103c2:	00 ee       	ldi	r16, 0xE0	; 224
   103c4:	17 e0       	ldi	r17, 0x07	; 7
   103c6:	21 e0       	ldi	r18, 0x01	; 1
   103c8:	40 ea       	ldi	r20, 0xA0	; 160
   103ca:	50 e0       	ldi	r21, 0x00	; 0
   103cc:	0d cd       	rjmp	.-1510   	; 0xfde8 <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4706
    }
    ///
    /// inicializace nrf
    if (init == 12)
   103ce:	8c e0       	ldi	r24, 0x0C	; 12
   103d0:	a8 12       	cpse	r10, r24
   103d2:	4a c2       	rjmp	.+1172   	; 0x10868 <__EEPROM_REGION_LENGTH__+0x868>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4708
    {
      strcpy_P(str1, text_nrf_rozhrani);
   103d4:	68 eb       	ldi	r22, 0xB8	; 184
   103d6:	7b e3       	ldi	r23, 0x3B	; 59
   103d8:	8d 2d       	mov	r24, r13
   103da:	9b 2d       	mov	r25, r11
   103dc:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4709
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   103e0:	ee 24       	eor	r14, r14
   103e2:	ea 94       	dec	r14
   103e4:	fe 2c       	mov	r15, r14
   103e6:	00 ee       	ldi	r16, 0xE0	; 224
   103e8:	17 e0       	ldi	r17, 0x07	; 7
   103ea:	21 e0       	ldi	r18, 0x01	; 1
   103ec:	4a ea       	ldi	r20, 0xAA	; 170
   103ee:	50 e0       	ldi	r21, 0x00	; 0
   103f0:	fb cc       	rjmp	.-1546   	; 0xfde8 <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   103f2:	d8 01       	movw	r26, r16
   103f4:	d2 96       	adiw	r26, 0x32	; 50
   103f6:	8d 91       	ld	r24, X+
   103f8:	9d 91       	ld	r25, X+
   103fa:	0d 90       	ld	r0, X+
   103fc:	bc 91       	ld	r27, X
   103fe:	a0 2d       	mov	r26, r0
   10400:	c8 5c       	subi	r28, 0xC8	; 200
   10402:	de 4f       	sbci	r29, 0xFE	; 254
   10404:	88 83       	st	Y, r24
   10406:	99 83       	std	Y+1, r25	; 0x01
   10408:	aa 83       	std	Y+2, r26	; 0x02
   1040a:	bb 83       	std	Y+3, r27	; 0x03
   1040c:	c8 53       	subi	r28, 0x38	; 56
   1040e:	d1 40       	sbci	r29, 0x01	; 1
   10410:	9c 01       	movw	r18, r24
   10412:	ad 01       	movw	r20, r26
   10414:	c3 01       	movw	r24, r6
   10416:	b2 01       	movw	r22, r4
   10418:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
   1041c:	87 fd       	sbrc	r24, 7
   1041e:	13 c3       	rjmp	.+1574   	; 0x10a46 <__EEPROM_REGION_LENGTH__+0xa46>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   10420:	d8 01       	movw	r26, r16
   10422:	da 96       	adiw	r26, 0x3a	; 58
   10424:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   10426:	f8 01       	movw	r30, r16
   10428:	12 aa       	std	Z+50, r1	; 0x32
   1042a:	13 aa       	std	Z+51, r1	; 0x33
   1042c:	14 aa       	std	Z+52, r1	; 0x34
   1042e:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   10430:	80 e0       	ldi	r24, 0x00	; 0
   10432:	90 e0       	ldi	r25, 0x00	; 0
   10434:	af e7       	ldi	r26, 0x7F	; 127
   10436:	b3 e4       	ldi	r27, 0x43	; 67
   10438:	86 ab       	std	Z+54, r24	; 0x36
   1043a:	97 ab       	std	Z+55, r25	; 0x37
   1043c:	a0 af       	std	Z+56, r26	; 0x38
   1043e:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   10440:	26 8d       	ldd	r18, Z+30	; 0x1e
   10442:	37 8d       	ldd	r19, Z+31	; 0x1f
   10444:	c8 5c       	subi	r28, 0xC8	; 200
   10446:	de 4f       	sbci	r29, 0xFE	; 254
   10448:	39 83       	std	Y+1, r19	; 0x01
   1044a:	28 83       	st	Y, r18
   1044c:	c8 53       	subi	r28, 0x38	; 56
   1044e:	d1 40       	sbci	r29, 0x01	; 1
   10450:	d9 01       	movw	r26, r18
   10452:	4d 90       	ld	r4, X+
   10454:	5d 90       	ld	r5, X+
   10456:	6d 90       	ld	r6, X+
   10458:	7c 90       	ld	r7, X
   1045a:	20 e0       	ldi	r18, 0x00	; 0
   1045c:	30 e0       	ldi	r19, 0x00	; 0
   1045e:	4f e7       	ldi	r20, 0x7F	; 127
   10460:	53 e4       	ldi	r21, 0x43	; 67
   10462:	c3 01       	movw	r24, r6
   10464:	b2 01       	movw	r22, r4
   10466:	0e 94 e1 bc 	call	0x179c2	; 0x179c2 <__gesf2>
   1046a:	18 16       	cp	r1, r24
   1046c:	94 f5       	brge	.+100    	; 0x104d2 <__EEPROM_REGION_LENGTH__+0x4d2>
   1046e:	80 e0       	ldi	r24, 0x00	; 0
   10470:	90 e0       	ldi	r25, 0x00	; 0
   10472:	af e7       	ldi	r26, 0x7F	; 127
   10474:	b3 e4       	ldi	r27, 0x43	; 67
   10476:	c8 5c       	subi	r28, 0xC8	; 200
   10478:	de 4f       	sbci	r29, 0xFE	; 254
   1047a:	e8 81       	ld	r30, Y
   1047c:	f9 81       	ldd	r31, Y+1	; 0x01
   1047e:	c8 53       	subi	r28, 0x38	; 56
   10480:	d1 40       	sbci	r29, 0x01	; 1
   10482:	80 83       	st	Z, r24
   10484:	91 83       	std	Z+1, r25	; 0x01
   10486:	a2 83       	std	Z+2, r26	; 0x02
   10488:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   1048a:	d8 01       	movw	r26, r16
   1048c:	96 96       	adiw	r26, 0x26	; 38
   1048e:	8d 91       	ld	r24, X+
   10490:	9d 91       	ld	r25, X+
   10492:	0d 90       	ld	r0, X+
   10494:	bc 91       	ld	r27, X
   10496:	a0 2d       	mov	r26, r0
   10498:	c8 5c       	subi	r28, 0xC8	; 200
   1049a:	de 4f       	sbci	r29, 0xFE	; 254
   1049c:	88 83       	st	Y, r24
   1049e:	99 83       	std	Y+1, r25	; 0x01
   104a0:	aa 83       	std	Y+2, r26	; 0x02
   104a2:	bb 83       	std	Y+3, r27	; 0x03
   104a4:	c8 53       	subi	r28, 0x38	; 56
   104a6:	d1 40       	sbci	r29, 0x01	; 1
   104a8:	f8 01       	movw	r30, r16
   104aa:	46 a8       	ldd	r4, Z+54	; 0x36
   104ac:	57 a8       	ldd	r5, Z+55	; 0x37
   104ae:	60 ac       	ldd	r6, Z+56	; 0x38
   104b0:	71 ac       	ldd	r7, Z+57	; 0x39
   104b2:	a3 01       	movw	r20, r6
   104b4:	92 01       	movw	r18, r4
   104b6:	bc 01       	movw	r22, r24
   104b8:	cd 01       	movw	r24, r26
   104ba:	0e 94 e1 bc 	call	0x179c2	; 0x179c2 <__gesf2>
   104be:	18 16       	cp	r1, r24
   104c0:	ec f4       	brge	.+58     	; 0x104fc <__EEPROM_REGION_LENGTH__+0x4fc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   104c2:	d8 01       	movw	r26, r16
   104c4:	96 96       	adiw	r26, 0x26	; 38
   104c6:	4d 92       	st	X+, r4
   104c8:	5d 92       	st	X+, r5
   104ca:	6d 92       	st	X+, r6
   104cc:	7c 92       	st	X, r7
   104ce:	99 97       	sbiw	r26, 0x29	; 41
   104d0:	28 c0       	rjmp	.+80     	; 0x10522 <__EEPROM_REGION_LENGTH__+0x522>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   104d2:	20 e0       	ldi	r18, 0x00	; 0
   104d4:	30 e0       	ldi	r19, 0x00	; 0
   104d6:	a9 01       	movw	r20, r18
   104d8:	c3 01       	movw	r24, r6
   104da:	b2 01       	movw	r22, r4
   104dc:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
   104e0:	87 ff       	sbrs	r24, 7
   104e2:	d3 cf       	rjmp	.-90     	; 0x1048a <__EEPROM_REGION_LENGTH__+0x48a>
   104e4:	c8 5c       	subi	r28, 0xC8	; 200
   104e6:	de 4f       	sbci	r29, 0xFE	; 254
   104e8:	a8 81       	ld	r26, Y
   104ea:	b9 81       	ldd	r27, Y+1	; 0x01
   104ec:	c8 53       	subi	r28, 0x38	; 56
   104ee:	d1 40       	sbci	r29, 0x01	; 1
   104f0:	1d 92       	st	X+, r1
   104f2:	1d 92       	st	X+, r1
   104f4:	1d 92       	st	X+, r1
   104f6:	1c 92       	st	X, r1
   104f8:	13 97       	sbiw	r26, 0x03	; 3
   104fa:	c7 cf       	rjmp	.-114    	; 0x1048a <__EEPROM_REGION_LENGTH__+0x48a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   104fc:	f8 01       	movw	r30, r16
   104fe:	42 a8       	ldd	r4, Z+50	; 0x32
   10500:	53 a8       	ldd	r5, Z+51	; 0x33
   10502:	64 a8       	ldd	r6, Z+52	; 0x34
   10504:	75 a8       	ldd	r7, Z+53	; 0x35
   10506:	a3 01       	movw	r20, r6
   10508:	92 01       	movw	r18, r4
   1050a:	c8 5c       	subi	r28, 0xC8	; 200
   1050c:	de 4f       	sbci	r29, 0xFE	; 254
   1050e:	68 81       	ld	r22, Y
   10510:	79 81       	ldd	r23, Y+1	; 0x01
   10512:	8a 81       	ldd	r24, Y+2	; 0x02
   10514:	9b 81       	ldd	r25, Y+3	; 0x03
   10516:	c8 53       	subi	r28, 0x38	; 56
   10518:	d1 40       	sbci	r29, 0x01	; 1
   1051a:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
   1051e:	87 fd       	sbrc	r24, 7
   10520:	d0 cf       	rjmp	.-96     	; 0x104c2 <__EEPROM_REGION_LENGTH__+0x4c2>
   10522:	c0 5c       	subi	r28, 0xC0	; 192
   10524:	de 4f       	sbci	r29, 0xFE	; 254
   10526:	e8 81       	ld	r30, Y
   10528:	f9 81       	ldd	r31, Y+1	; 0x01
   1052a:	c0 54       	subi	r28, 0x40	; 64
   1052c:	d1 40       	sbci	r29, 0x01	; 1
   1052e:	34 96       	adiw	r30, 0x04	; 4
   10530:	c0 5c       	subi	r28, 0xC0	; 192
   10532:	de 4f       	sbci	r29, 0xFE	; 254
   10534:	f9 83       	std	Y+1, r31	; 0x01
   10536:	e8 83       	st	Y, r30
   10538:	c0 54       	subi	r28, 0x40	; 64
   1053a:	d1 40       	sbci	r29, 0x01	; 1
   1053c:	ce 5b       	subi	r28, 0xBE	; 190
   1053e:	de 4f       	sbci	r29, 0xFE	; 254
   10540:	28 81       	ld	r18, Y
   10542:	39 81       	ldd	r19, Y+1	; 0x01
   10544:	c2 54       	subi	r28, 0x42	; 66
   10546:	d1 40       	sbci	r29, 0x01	; 1
   10548:	2c 5f       	subi	r18, 0xFC	; 252
   1054a:	3f 4f       	sbci	r19, 0xFF	; 255
   1054c:	ce 5b       	subi	r28, 0xBE	; 190
   1054e:	de 4f       	sbci	r29, 0xFE	; 254
   10550:	39 83       	std	Y+1, r19	; 0x01
   10552:	28 83       	st	Y, r18
   10554:	c2 54       	subi	r28, 0x42	; 66
   10556:	d1 40       	sbci	r29, 0x01	; 1
   10558:	34 e0       	ldi	r19, 0x04	; 4
   1055a:	e3 0e       	add	r14, r19
   1055c:	f1 1c       	adc	r15, r1
   1055e:	82 e0       	ldi	r24, 0x02	; 2
   10560:	88 0e       	add	r8, r24
   10562:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   10564:	9a e0       	ldi	r25, 0x0A	; 10
   10566:	89 16       	cp	r8, r25
   10568:	91 04       	cpc	r9, r1
   1056a:	09 f0       	breq	.+2      	; 0x1056e <__EEPROM_REGION_LENGTH__+0x56e>
   1056c:	ad c1       	rjmp	.+858    	; 0x108c8 <__EEPROM_REGION_LENGTH__+0x8c8>
   1056e:	aa e6       	ldi	r26, 0x6A	; 106
   10570:	ba e0       	ldi	r27, 0x0A	; 10
   10572:	c8 5c       	subi	r28, 0xC8	; 200
   10574:	de 4f       	sbci	r29, 0xFE	; 254
   10576:	b9 83       	std	Y+1, r27	; 0x01
   10578:	a8 83       	st	Y, r26
   1057a:	c8 53       	subi	r28, 0x38	; 56
   1057c:	d1 40       	sbci	r29, 0x01	; 1
   1057e:	42 ed       	ldi	r20, 0xD2	; 210
   10580:	44 2e       	mov	r4, r20
   10582:	49 e0       	ldi	r20, 0x09	; 9
   10584:	54 2e       	mov	r5, r20
   10586:	56 ee       	ldi	r21, 0xE6	; 230
   10588:	65 2e       	mov	r6, r21
   1058a:	59 e0       	ldi	r21, 0x09	; 9
   1058c:	75 2e       	mov	r7, r21
   1058e:	6a ef       	ldi	r22, 0xFA	; 250
   10590:	86 2e       	mov	r8, r22
   10592:	69 e0       	ldi	r22, 0x09	; 9
   10594:	96 2e       	mov	r9, r22
   10596:	7e e0       	ldi	r23, 0x0E	; 14
   10598:	e7 2e       	mov	r14, r23
   1059a:	7a e0       	ldi	r23, 0x0A	; 10
   1059c:	f7 2e       	mov	r15, r23
   1059e:	00 e6       	ldi	r16, 0x60	; 96
   105a0:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   105a2:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   105a4:	c8 5c       	subi	r28, 0xC8	; 200
   105a6:	de 4f       	sbci	r29, 0xFE	; 254
   105a8:	e8 81       	ld	r30, Y
   105aa:	f9 81       	ldd	r31, Y+1	; 0x01
   105ac:	c8 53       	subi	r28, 0x38	; 56
   105ae:	d1 40       	sbci	r29, 0x01	; 1
   105b0:	11 92       	st	Z+, r1
   105b2:	c8 5c       	subi	r28, 0xC8	; 200
   105b4:	de 4f       	sbci	r29, 0xFE	; 254
   105b6:	f9 83       	std	Y+1, r31	; 0x01
   105b8:	e8 83       	st	Y, r30
   105ba:	c8 53       	subi	r28, 0x38	; 56
   105bc:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   105be:	c8 01       	movw	r24, r16
   105c0:	0e 94 62 9e 	call	0x13cc4	; 0x13cc4 <EEPROMreadFloat(unsigned int)>
   105c4:	d2 01       	movw	r26, r4
   105c6:	6d 93       	st	X+, r22
   105c8:	7d 93       	st	X+, r23
   105ca:	8d 93       	st	X+, r24
   105cc:	9d 93       	st	X+, r25
   105ce:	2d 01       	movw	r4, r26
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   105d0:	c8 01       	movw	r24, r16
   105d2:	04 96       	adiw	r24, 0x04	; 4
   105d4:	0e 94 62 9e 	call	0x13cc4	; 0x13cc4 <EEPROMreadFloat(unsigned int)>
   105d8:	f3 01       	movw	r30, r6
   105da:	61 93       	st	Z+, r22
   105dc:	71 93       	st	Z+, r23
   105de:	81 93       	st	Z+, r24
   105e0:	91 93       	st	Z+, r25
   105e2:	3f 01       	movw	r6, r30
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   105e4:	c8 01       	movw	r24, r16
   105e6:	08 96       	adiw	r24, 0x08	; 8
   105e8:	0e 94 62 9e 	call	0x13cc4	; 0x13cc4 <EEPROMreadFloat(unsigned int)>
   105ec:	d4 01       	movw	r26, r8
   105ee:	6d 93       	st	X+, r22
   105f0:	7d 93       	st	X+, r23
   105f2:	8d 93       	st	X+, r24
   105f4:	9d 93       	st	X+, r25
   105f6:	4d 01       	movw	r8, r26
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   105f8:	c8 01       	movw	r24, r16
   105fa:	0c 96       	adiw	r24, 0x0c	; 12
   105fc:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   10600:	f7 01       	movw	r30, r14
   10602:	81 93       	st	Z+, r24
   10604:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4724
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   10606:	8c 2d       	mov	r24, r12
   10608:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1060c:	c3 94       	inc	r12
   1060e:	0f 5d       	subi	r16, 0xDF	; 223
   10610:	1f 4f       	sbci	r17, 0xFF	; 255
   10612:	f5 e0       	ldi	r31, 0x05	; 5
   10614:	cf 12       	cpse	r12, r31
   10616:	c6 cf       	rjmp	.-116    	; 0x105a4 <__EEPROM_REGION_LENGTH__+0x5a4>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   10618:	8c e5       	ldi	r24, 0x5C	; 92
   1061a:	90 e0       	ldi	r25, 0x00	; 0
   1061c:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
   10620:	80 93 69 0a 	sts	0x0A69, r24	; 0x800a69 <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   10624:	8d e5       	ldi	r24, 0x5D	; 93
   10626:	90 e0       	ldi	r25, 0x00	; 0
   10628:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4727
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
   1062c:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <default_show_temp>
   10630:	de cc       	rjmp	.-1604   	; 0xffee <__DATA_REGION_LENGTH__+0x1ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4743
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   10632:	60 e5       	ldi	r22, 0x50	; 80
   10634:	7c e3       	ldi	r23, 0x3C	; 60
   10636:	c1 01       	movw	r24, r2
   10638:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4744
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1063c:	ee 24       	eor	r14, r14
   1063e:	ea 94       	dec	r14
   10640:	fe 2c       	mov	r15, r14
   10642:	00 ee       	ldi	r16, 0xE0	; 224
   10644:	17 e0       	ldi	r17, 0x07	; 7
   10646:	21 e0       	ldi	r18, 0x01	; 1
   10648:	4e eb       	ldi	r20, 0xBE	; 190
   1064a:	50 e0       	ldi	r21, 0x00	; 0
   1064c:	60 ea       	ldi	r22, 0xA0	; 160
   1064e:	70 e0       	ldi	r23, 0x00	; 0
   10650:	c1 01       	movw	r24, r2
   10652:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   10656:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
   1065a:	8d 7f       	andi	r24, 0xFD	; 253
   1065c:	98 c0       	rjmp	.+304    	; 0x1078e <__EEPROM_REGION_LENGTH__+0x78e>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4750
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   1065e:	bf e0       	ldi	r27, 0x0F	; 15
   10660:	ab 12       	cpse	r10, r27
   10662:	c5 cc       	rjmp	.-1654   	; 0xffee <__DATA_REGION_LENGTH__+0x1ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
    {
      strcpy_P(str1, text_rtc_cas);
   10664:	63 e8       	ldi	r22, 0x83	; 131
   10666:	7b e3       	ldi	r23, 0x3B	; 59
   10668:	8d 2d       	mov	r24, r13
   1066a:	9b 2d       	mov	r25, r11
   1066c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4753
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10670:	ee 24       	eor	r14, r14
   10672:	ea 94       	dec	r14
   10674:	fe 2c       	mov	r15, r14
   10676:	00 ee       	ldi	r16, 0xE0	; 224
   10678:	17 e0       	ldi	r17, 0x07	; 7
   1067a:	21 e0       	ldi	r18, 0x01	; 1
   1067c:	48 ec       	ldi	r20, 0xC8	; 200
   1067e:	50 e0       	ldi	r21, 0x00	; 0
   10680:	6e e1       	ldi	r22, 0x1E	; 30
   10682:	70 e0       	ldi	r23, 0x00	; 0
   10684:	8d 2d       	mov	r24, r13
   10686:	9b 2d       	mov	r25, r11
   10688:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4754
      if (rtc.isrunning())
   1068c:	0e 94 56 98 	call	0x130ac	; 0x130ac <RTC_DS1307::isrunning() [clone .constprop.127]>
   10690:	88 23       	and	r24, r24
   10692:	99 f0       	breq	.+38     	; 0x106ba <__EEPROM_REGION_LENGTH__+0x6ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4756
      {
        strcpy_P(str1, text_ok);
   10694:	60 e5       	ldi	r22, 0x50	; 80
   10696:	7c e3       	ldi	r23, 0x3C	; 60
   10698:	8d 2d       	mov	r24, r13
   1069a:	9b 2d       	mov	r25, r11
   1069c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4757
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   106a0:	21 e0       	ldi	r18, 0x01	; 1
   106a2:	48 ec       	ldi	r20, 0xC8	; 200
   106a4:	50 e0       	ldi	r21, 0x00	; 0
   106a6:	60 ea       	ldi	r22, 0xA0	; 160
   106a8:	70 e0       	ldi	r23, 0x00	; 0
   106aa:	8d 2d       	mov	r24, r13
   106ac:	9b 2d       	mov	r25, r11
   106ae:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   106b2:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
   106b6:	8e 7f       	andi	r24, 0xFE	; 254
   106b8:	6a c0       	rjmp	.+212    	; 0x1078e <__EEPROM_REGION_LENGTH__+0x78e>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4762
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   106ba:	66 ed       	ldi	r22, 0xD6	; 214
   106bc:	7c e3       	ldi	r23, 0x3C	; 60
   106be:	8d 2d       	mov	r24, r13
   106c0:	9b 2d       	mov	r25, r11
   106c2:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4763
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   106c6:	ee 24       	eor	r14, r14
   106c8:	ea 94       	dec	r14
   106ca:	fe 2c       	mov	r15, r14
   106cc:	00 e0       	ldi	r16, 0x00	; 0
   106ce:	18 ef       	ldi	r17, 0xF8	; 248
   106d0:	21 e0       	ldi	r18, 0x01	; 1
   106d2:	48 ec       	ldi	r20, 0xC8	; 200
   106d4:	50 e0       	ldi	r21, 0x00	; 0
   106d6:	60 ea       	ldi	r22, 0xA0	; 160
   106d8:	70 e0       	ldi	r23, 0x00	; 0
   106da:	8d 2d       	mov	r24, r13
   106dc:	9b 2d       	mov	r25, r11
   106de:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   106e2:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
   106e6:	81 60       	ori	r24, 0x01	; 1
   106e8:	52 c0       	rjmp	.+164    	; 0x1078e <__EEPROM_REGION_LENGTH__+0x78e>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
   106ea:	25 e0       	ldi	r18, 0x05	; 5
   106ec:	a2 16       	cp	r10, r18
   106ee:	09 f4       	brne	.+2      	; 0x106f2 <__EEPROM_REGION_LENGTH__+0x6f2>
   106f0:	94 cb       	rjmp	.-2264   	; 0xfe1a <__DATA_REGION_LENGTH__+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4599
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   106f2:	36 e0       	ldi	r19, 0x06	; 6
   106f4:	a3 16       	cp	r10, r19
   106f6:	09 f4       	brne	.+2      	; 0x106fa <__EEPROM_REGION_LENGTH__+0x6fa>
   106f8:	b3 cc       	rjmp	.-1690   	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4607
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   106fa:	87 e0       	ldi	r24, 0x07	; 7
   106fc:	a8 12       	cpse	r10, r24
   106fe:	0a cd       	rjmp	.-1516   	; 0x10114 <__EEPROM_REGION_LENGTH__+0x114>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4609
    {
      strcpy_P(str1, text_onewire_rozhrani);
   10700:	63 e1       	ldi	r22, 0x13	; 19
   10702:	7c e3       	ldi	r23, 0x3C	; 60
   10704:	8d 2d       	mov	r24, r13
   10706:	9b 2d       	mov	r25, r11
   10708:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4610
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1070c:	ee 24       	eor	r14, r14
   1070e:	ea 94       	dec	r14
   10710:	fe 2c       	mov	r15, r14
   10712:	00 ee       	ldi	r16, 0xE0	; 224
   10714:	17 e0       	ldi	r17, 0x07	; 7
   10716:	21 e0       	ldi	r18, 0x01	; 1
   10718:	48 e7       	ldi	r20, 0x78	; 120
   1071a:	50 e0       	ldi	r21, 0x00	; 0
   1071c:	6e e1       	ldi	r22, 0x1E	; 30
   1071e:	70 e0       	ldi	r23, 0x00	; 0
   10720:	8d 2d       	mov	r24, r13
   10722:	9b 2d       	mov	r25, r11
   10724:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4611
      ds2482_address[0].i2c_addr = 0b0011000;
   10728:	88 e1       	ldi	r24, 0x18	; 24
   1072a:	80 93 d0 09 	sts	0x09D0, r24	; 0x8009d0 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4612
      ds2482_address[0].HWwirenum = 0;
   1072e:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <ds2482_address+0x1>
   10732:	e4 e7       	ldi	r30, 0x74	; 116
   10734:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4616
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   10736:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4617
        status_tds18s20[idx].period_now = 0;
   10738:	14 8e       	std	Z+28, r1	; 0x1c
   1073a:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4614
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   1073c:	bb e0       	ldi	r27, 0x0B	; 11
   1073e:	e8 32       	cpi	r30, 0x28	; 40
   10740:	fb 07       	cpc	r31, r27
   10742:	c9 f7       	brne	.-14     	; 0x10736 <__EEPROM_REGION_LENGTH__+0x736>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   10744:	4a e0       	ldi	r20, 0x0A	; 10
   10746:	be 01       	movw	r22, r28
   10748:	6e 50       	subi	r22, 0x0E	; 14
   1074a:	7f 4f       	sbci	r23, 0xFF	; 255
   1074c:	88 e1       	ldi	r24, 0x18	; 24
   1074e:	90 e0       	ldi	r25, 0x00	; 0
   10750:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4620
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   10754:	80 91 d0 09 	lds	r24, 0x09D0	; 0x8009d0 <ds2482_address>
   10758:	0e 94 6d 98 	call	0x130da	; 0x130da <ds2482reset(unsigned char)>
   1075c:	81 11       	cpse	r24, r1
   1075e:	c2 cc       	rjmp	.-1660   	; 0x100e4 <__EEPROM_REGION_LENGTH__+0xe4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4622
      {
        strcpy_P(str1, text_ok);
   10760:	60 e5       	ldi	r22, 0x50	; 80
   10762:	7c e3       	ldi	r23, 0x3C	; 60
   10764:	8d 2d       	mov	r24, r13
   10766:	9b 2d       	mov	r25, r11
   10768:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4623
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1076c:	ee 24       	eor	r14, r14
   1076e:	ea 94       	dec	r14
   10770:	fe 2c       	mov	r15, r14
   10772:	00 ee       	ldi	r16, 0xE0	; 224
   10774:	17 e0       	ldi	r17, 0x07	; 7
   10776:	21 e0       	ldi	r18, 0x01	; 1
   10778:	48 e7       	ldi	r20, 0x78	; 120
   1077a:	50 e0       	ldi	r21, 0x00	; 0
   1077c:	60 ea       	ldi	r22, 0xA0	; 160
   1077e:	70 e0       	ldi	r23, 0x00	; 0
   10780:	8d 2d       	mov	r24, r13
   10782:	9b 2d       	mov	r25, r11
   10784:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   10788:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
   1078c:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1078e:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <selftest_data>
   10792:	2d cc       	rjmp	.-1958   	; 0xffee <__DATA_REGION_LENGTH__+0x1ee>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   10794:	9a e0       	ldi	r25, 0x0A	; 10
   10796:	a9 12       	cpse	r10, r25
   10798:	08 ce       	rjmp	.-1008   	; 0x103aa <__EEPROM_REGION_LENGTH__+0x3aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4667
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   1079a:	66 ee       	ldi	r22, 0xE6	; 230
   1079c:	7b e3       	ldi	r23, 0x3B	; 59
   1079e:	c1 01       	movw	r24, r2
   107a0:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4668
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   107a4:	ee 24       	eor	r14, r14
   107a6:	ea 94       	dec	r14
   107a8:	fe 2c       	mov	r15, r14
   107aa:	00 ee       	ldi	r16, 0xE0	; 224
   107ac:	17 e0       	ldi	r17, 0x07	; 7
   107ae:	21 e0       	ldi	r18, 0x01	; 1
   107b0:	46 e9       	ldi	r20, 0x96	; 150
   107b2:	50 e0       	ldi	r21, 0x00	; 0
   107b4:	6e e1       	ldi	r22, 0x1E	; 30
   107b6:	70 e0       	ldi	r23, 0x00	; 0
   107b8:	c1 01       	movw	r24, r2
   107ba:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   107be:	80 91 9e 0c 	lds	r24, 0x0C9E	; 0x800c9e <device+0x24>
   107c2:	90 91 9f 0c 	lds	r25, 0x0C9F	; 0x800c9f <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   107c6:	20 91 9d 0c 	lds	r18, 0x0C9D	; 0x800c9d <device+0x23>
   107ca:	30 91 9c 0c 	lds	r19, 0x0C9C	; 0x800c9c <device+0x22>
   107ce:	40 91 9b 0c 	lds	r20, 0x0C9B	; 0x800c9b <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   107d2:	50 91 9a 0c 	lds	r21, 0x0C9A	; 0x800c9a <device+0x20>
   107d6:	50 93 7e 10 	sts	0x107E, r21	; 0x80107e <mqtt_client+0x211>
   107da:	40 93 7f 10 	sts	0x107F, r20	; 0x80107f <mqtt_client+0x212>
   107de:	30 93 80 10 	sts	0x1080, r19	; 0x801080 <mqtt_client+0x213>
   107e2:	20 93 81 10 	sts	0x1081, r18	; 0x801081 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   107e6:	90 93 85 10 	sts	0x1085, r25	; 0x801085 <mqtt_client+0x218>
   107ea:	80 93 84 10 	sts	0x1084, r24	; 0x801084 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   107ee:	10 92 83 10 	sts	0x1083, r1	; 0x801083 <mqtt_client+0x216>
   107f2:	10 92 82 10 	sts	0x1082, r1	; 0x801082 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   107f6:	84 e9       	ldi	r24, 0x94	; 148
   107f8:	97 e6       	ldi	r25, 0x67	; 103
   107fa:	90 93 7b 10 	sts	0x107B, r25	; 0x80107b <mqtt_client+0x20e>
   107fe:	80 93 7a 10 	sts	0x107A, r24	; 0x80107a <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
   10802:	87 ed       	ldi	r24, 0xD7	; 215
   10804:	9b e3       	ldi	r25, 0x3B	; 59
   10806:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <header_out+0x1>
   1080a:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4672
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   1080e:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   10812:	2b 01       	movw	r4, r22
   10814:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4673
      while ((millis() - milis) < 3000 )
   10816:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   1081a:	64 19       	sub	r22, r4
   1081c:	75 09       	sbc	r23, r5
   1081e:	86 09       	sbc	r24, r6
   10820:	97 09       	sbc	r25, r7
   10822:	68 3b       	cpi	r22, 0xB8	; 184
   10824:	7b 40       	sbci	r23, 0x0B	; 11
   10826:	81 05       	cpc	r24, r1
   10828:	91 05       	cpc	r25, r1
   1082a:	58 f4       	brcc	.+22     	; 0x10842 <__EEPROM_REGION_LENGTH__+0x842>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
      {
        mqtt_client.loop();
   1082c:	0e 94 b2 9a 	call	0x13564	; 0x13564 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4676
        if (mqtt_reconnect() == 0)
   10830:	0e 94 ff 75 	call	0xebfe	; 0xebfe <mqtt_reconnect()>
   10834:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <selftest_data>
   10838:	81 11       	cpse	r24, r1
   1083a:	a7 cd       	rjmp	.-1202   	; 0x1038a <__EEPROM_REGION_LENGTH__+0x38a>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1083c:	9f 7d       	andi	r25, 0xDF	; 223
   1083e:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   10842:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4685
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   10846:	85 ff       	sbrs	r24, 5
   10848:	a4 cd       	rjmp	.-1208   	; 0x10392 <__EEPROM_REGION_LENGTH__+0x392>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4687
      {
        strcpy_P(str1, text_err);
   1084a:	66 ed       	ldi	r22, 0xD6	; 214
   1084c:	7c e3       	ldi	r23, 0x3C	; 60
   1084e:	8d 2d       	mov	r24, r13
   10850:	9b 2d       	mov	r25, r11
   10852:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4688
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   10856:	ee 24       	eor	r14, r14
   10858:	ea 94       	dec	r14
   1085a:	fe 2c       	mov	r15, r14
   1085c:	00 e0       	ldi	r16, 0x00	; 0
   1085e:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   10860:	21 e0       	ldi	r18, 0x01	; 1
   10862:	46 e9       	ldi	r20, 0x96	; 150
   10864:	50 e0       	ldi	r21, 0x00	; 0
   10866:	f3 cc       	rjmp	.-1562   	; 0x1024e <__EEPROM_REGION_LENGTH__+0x24e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4713
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   10868:	ad e0       	ldi	r26, 0x0D	; 13
   1086a:	aa 12       	cpse	r10, r26
   1086c:	0c 94 f7 7a 	jmp	0xf5ee	; 0xf5ee <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4715
    {
      strcpy_P(str1, text_pid_regulator);
   10870:	6a ea       	ldi	r22, 0xAA	; 170
   10872:	7b e3       	ldi	r23, 0x3B	; 59
   10874:	8d 2d       	mov	r24, r13
   10876:	9b 2d       	mov	r25, r11
   10878:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4716
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1087c:	ee 24       	eor	r14, r14
   1087e:	ea 94       	dec	r14
   10880:	fe 2c       	mov	r15, r14
   10882:	00 ee       	ldi	r16, 0xE0	; 224
   10884:	17 e0       	ldi	r17, 0x07	; 7
   10886:	21 e0       	ldi	r18, 0x01	; 1
   10888:	44 eb       	ldi	r20, 0xB4	; 180
   1088a:	50 e0       	ldi	r21, 0x00	; 0
   1088c:	6e e1       	ldi	r22, 0x1E	; 30
   1088e:	70 e0       	ldi	r23, 0x00	; 0
   10890:	8d 2d       	mov	r24, r13
   10892:	9b 2d       	mov	r25, r11
   10894:	0e 94 9d 8b 	call	0x1173a	; 0x1173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
   10898:	a5 e7       	ldi	r26, 0x75	; 117
   1089a:	b8 e0       	ldi	r27, 0x08	; 8
   1089c:	c0 5c       	subi	r28, 0xC0	; 192
   1089e:	de 4f       	sbci	r29, 0xFE	; 254
   108a0:	b9 83       	std	Y+1, r27	; 0x01
   108a2:	a8 83       	st	Y, r26
   108a4:	c0 54       	subi	r28, 0x40	; 64
   108a6:	d1 40       	sbci	r29, 0x01	; 1
   108a8:	e1 e6       	ldi	r30, 0x61	; 97
   108aa:	f8 e0       	ldi	r31, 0x08	; 8
   108ac:	ce 5b       	subi	r28, 0xBE	; 190
   108ae:	de 4f       	sbci	r29, 0xFE	; 254
   108b0:	f9 83       	std	Y+1, r31	; 0x01
   108b2:	e8 83       	st	Y, r30
   108b4:	c2 54       	subi	r28, 0x42	; 66
   108b6:	d1 40       	sbci	r29, 0x01	; 1
   108b8:	f9 e8       	ldi	r31, 0x89	; 137
   108ba:	ef 2e       	mov	r14, r31
   108bc:	f8 e0       	ldi	r31, 0x08	; 8
   108be:	ff 2e       	mov	r15, r31
   108c0:	91 2c       	mov	r9, r1
   108c2:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
   108c4:	cc 24       	eor	r12, r12
   108c6:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   108c8:	8c e3       	ldi	r24, 0x3C	; 60
   108ca:	90 e0       	ldi	r25, 0x00	; 0
   108cc:	0e 94 ce b5 	call	0x16b9c	; 0x16b9c <malloc>
   108d0:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   108d2:	c0 5c       	subi	r28, 0xC0	; 192
   108d4:	de 4f       	sbci	r29, 0xFE	; 254
   108d6:	e8 81       	ld	r30, Y
   108d8:	f9 81       	ldd	r31, Y+1	; 0x01
   108da:	c0 54       	subi	r28, 0x40	; 64
   108dc:	d1 40       	sbci	r29, 0x01	; 1
   108de:	dc 01       	movw	r26, r24
   108e0:	5f 96       	adiw	r26, 0x1f	; 31
   108e2:	fc 93       	st	X, r31
   108e4:	ee 93       	st	-X, r30
   108e6:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   108e8:	ce 5b       	subi	r28, 0xBE	; 190
   108ea:	de 4f       	sbci	r29, 0xFE	; 254
   108ec:	28 81       	ld	r18, Y
   108ee:	39 81       	ldd	r19, Y+1	; 0x01
   108f0:	c2 54       	subi	r28, 0x42	; 66
   108f2:	d1 40       	sbci	r29, 0x01	; 1
   108f4:	5d 96       	adiw	r26, 0x1d	; 29
   108f6:	3c 93       	st	X, r19
   108f8:	2e 93       	st	-X, r18
   108fa:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   108fc:	91 96       	adiw	r26, 0x21	; 33
   108fe:	fc 92       	st	X, r15
   10900:	ee 92       	st	-X, r14
   10902:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   10904:	da 96       	adiw	r26, 0x3a	; 58
   10906:	1c 92       	st	X, r1
   10908:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   1090a:	d2 96       	adiw	r26, 0x32	; 50
   1090c:	1d 92       	st	X+, r1
   1090e:	1d 92       	st	X+, r1
   10910:	1d 92       	st	X+, r1
   10912:	1c 92       	st	X, r1
   10914:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   10916:	80 e0       	ldi	r24, 0x00	; 0
   10918:	90 e0       	ldi	r25, 0x00	; 0
   1091a:	af e7       	ldi	r26, 0x7F	; 127
   1091c:	b3 e4       	ldi	r27, 0x43	; 67
   1091e:	f8 01       	movw	r30, r16
   10920:	86 ab       	std	Z+54, r24	; 0x36
   10922:	97 ab       	std	Z+55, r25	; 0x37
   10924:	a0 af       	std	Z+56, r26	; 0x38
   10926:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   10928:	84 e6       	ldi	r24, 0x64	; 100
   1092a:	90 e0       	ldi	r25, 0x00	; 0
   1092c:	a0 e0       	ldi	r26, 0x00	; 0
   1092e:	b0 e0       	ldi	r27, 0x00	; 0
   10930:	86 a7       	std	Z+46, r24	; 0x2e
   10932:	97 a7       	std	Z+47, r25	; 0x2f
   10934:	a0 ab       	std	Z+48, r26	; 0x30
   10936:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
   10938:	11 8e       	std	Z+25, r1	; 0x19
   1093a:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   1093c:	21 e0       	ldi	r18, 0x01	; 1
   1093e:	30 e0       	ldi	r19, 0x00	; 0
   10940:	33 8f       	std	Z+27, r19	; 0x1b
   10942:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   10944:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   10946:	80 e0       	ldi	r24, 0x00	; 0
   10948:	90 e0       	ldi	r25, 0x00	; 0
   1094a:	a0 e0       	ldi	r26, 0x00	; 0
   1094c:	b0 e4       	ldi	r27, 0x40	; 64
   1094e:	80 83       	st	Z, r24
   10950:	91 83       	std	Z+1, r25	; 0x01
   10952:	a2 83       	std	Z+2, r26	; 0x02
   10954:	b3 83       	std	Z+3, r27	; 0x03
   10956:	80 e0       	ldi	r24, 0x00	; 0
   10958:	90 e0       	ldi	r25, 0x00	; 0
   1095a:	a0 ea       	ldi	r26, 0xA0	; 160
   1095c:	b0 e4       	ldi	r27, 0x40	; 64
   1095e:	84 83       	std	Z+4, r24	; 0x04
   10960:	95 83       	std	Z+5, r25	; 0x05
   10962:	a6 83       	std	Z+6, r26	; 0x06
   10964:	b7 83       	std	Z+7, r27	; 0x07
   10966:	80 e0       	ldi	r24, 0x00	; 0
   10968:	90 e0       	ldi	r25, 0x00	; 0
   1096a:	a0 e8       	ldi	r26, 0x80	; 128
   1096c:	bf e3       	ldi	r27, 0x3F	; 63
   1096e:	80 87       	std	Z+8, r24	; 0x08
   10970:	91 87       	std	Z+9, r25	; 0x09
   10972:	a2 87       	std	Z+10, r26	; 0x0a
   10974:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
   10976:	80 e0       	ldi	r24, 0x00	; 0
   10978:	90 e0       	ldi	r25, 0x00	; 0
   1097a:	a0 e0       	ldi	r26, 0x00	; 0
   1097c:	b0 e4       	ldi	r27, 0x40	; 64
   1097e:	84 87       	std	Z+12, r24	; 0x0c
   10980:	95 87       	std	Z+13, r25	; 0x0d
   10982:	a6 87       	std	Z+14, r26	; 0x0e
   10984:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   10986:	80 e0       	ldi	r24, 0x00	; 0
   10988:	90 e0       	ldi	r25, 0x00	; 0
   1098a:	a0 e0       	ldi	r26, 0x00	; 0
   1098c:	bf e3       	ldi	r27, 0x3F	; 63
   1098e:	80 8b       	std	Z+16, r24	; 0x10
   10990:	91 8b       	std	Z+17, r25	; 0x11
   10992:	a2 8b       	std	Z+18, r26	; 0x12
   10994:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   10996:	80 e0       	ldi	r24, 0x00	; 0
   10998:	90 e0       	ldi	r25, 0x00	; 0
   1099a:	a0 e2       	ldi	r26, 0x20	; 32
   1099c:	b1 e4       	ldi	r27, 0x41	; 65
   1099e:	84 8b       	std	Z+20, r24	; 0x14
   109a0:	95 8b       	std	Z+21, r25	; 0x15
   109a2:	a6 8b       	std	Z+22, r26	; 0x16
   109a4:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   109a6:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   109aa:	28 ee       	ldi	r18, 0xE8	; 232
   109ac:	33 e0       	ldi	r19, 0x03	; 3
   109ae:	40 e0       	ldi	r20, 0x00	; 0
   109b0:	50 e0       	ldi	r21, 0x00	; 0
   109b2:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
   109b6:	f8 01       	movw	r30, r16
   109b8:	86 a5       	ldd	r24, Z+46	; 0x2e
   109ba:	97 a5       	ldd	r25, Z+47	; 0x2f
   109bc:	a0 a9       	ldd	r26, Z+48	; 0x30
   109be:	b1 a9       	ldd	r27, Z+49	; 0x31
   109c0:	28 1b       	sub	r18, r24
   109c2:	39 0b       	sbc	r19, r25
   109c4:	4a 0b       	sbc	r20, r26
   109c6:	5b 0b       	sbc	r21, r27
   109c8:	d8 01       	movw	r26, r16
   109ca:	22 a3       	std	Z+34, r18	; 0x22
   109cc:	33 a3       	std	Z+35, r19	; 0x23
   109ce:	44 a3       	std	Z+36, r20	; 0x24
   109d0:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   109d2:	e0 91 78 0c 	lds	r30, 0x0C78	; 0x800c78 <array_pids>
   109d6:	f0 91 79 0c 	lds	r31, 0x0C79	; 0x800c79 <array_pids+0x1>
   109da:	e8 0d       	add	r30, r8
   109dc:	f9 1d       	adc	r31, r9
   109de:	11 83       	std	Z+1, r17	; 0x01
   109e0:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   109e2:	da 96       	adiw	r26, 0x3a	; 58
   109e4:	8c 91       	ld	r24, X
   109e6:	da 97       	sbiw	r26, 0x3a	; 58
   109e8:	81 11       	cpse	r24, r1
   109ea:	1a cd       	rjmp	.-1484   	; 0x10420 <__EEPROM_REGION_LENGTH__+0x420>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   109ec:	5e 96       	adiw	r26, 0x1e	; 30
   109ee:	ed 91       	ld	r30, X+
   109f0:	fc 91       	ld	r31, X
   109f2:	40 80       	ld	r4, Z
   109f4:	51 80       	ldd	r5, Z+1	; 0x01
   109f6:	62 80       	ldd	r6, Z+2	; 0x02
   109f8:	73 80       	ldd	r7, Z+3	; 0x03
   109fa:	f8 01       	movw	r30, r16
   109fc:	46 a2       	std	Z+38, r4	; 0x26
   109fe:	57 a2       	std	Z+39, r5	; 0x27
   10a00:	60 a6       	std	Z+40, r6	; 0x28
   10a02:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   10a04:	04 8c       	ldd	r0, Z+28	; 0x1c
   10a06:	f5 8d       	ldd	r31, Z+29	; 0x1d
   10a08:	e0 2d       	mov	r30, r0
   10a0a:	80 81       	ld	r24, Z
   10a0c:	91 81       	ldd	r25, Z+1	; 0x01
   10a0e:	a2 81       	ldd	r26, Z+2	; 0x02
   10a10:	b3 81       	ldd	r27, Z+3	; 0x03
   10a12:	f8 01       	movw	r30, r16
   10a14:	82 a7       	std	Z+42, r24	; 0x2a
   10a16:	93 a7       	std	Z+43, r25	; 0x2b
   10a18:	a4 a7       	std	Z+44, r26	; 0x2c
   10a1a:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   10a1c:	86 a9       	ldd	r24, Z+54	; 0x36
   10a1e:	97 a9       	ldd	r25, Z+55	; 0x37
   10a20:	a0 ad       	ldd	r26, Z+56	; 0x38
   10a22:	b1 ad       	ldd	r27, Z+57	; 0x39
   10a24:	c8 5c       	subi	r28, 0xC8	; 200
   10a26:	de 4f       	sbci	r29, 0xFE	; 254
   10a28:	88 83       	st	Y, r24
   10a2a:	99 83       	std	Y+1, r25	; 0x01
   10a2c:	aa 83       	std	Y+2, r26	; 0x02
   10a2e:	bb 83       	std	Y+3, r27	; 0x03
   10a30:	c8 53       	subi	r28, 0x38	; 56
   10a32:	d1 40       	sbci	r29, 0x01	; 1
   10a34:	9c 01       	movw	r18, r24
   10a36:	ad 01       	movw	r20, r26
   10a38:	c3 01       	movw	r24, r6
   10a3a:	b2 01       	movw	r22, r4
   10a3c:	0e 94 e1 bc 	call	0x179c2	; 0x179c2 <__gesf2>
   10a40:	18 16       	cp	r1, r24
   10a42:	0c f0       	brlt	.+2      	; 0x10a46 <__EEPROM_REGION_LENGTH__+0xa46>
   10a44:	d6 cc       	rjmp	.-1620   	; 0x103f2 <__EEPROM_REGION_LENGTH__+0x3f2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   10a46:	c8 5c       	subi	r28, 0xC8	; 200
   10a48:	de 4f       	sbci	r29, 0xFE	; 254
   10a4a:	88 81       	ld	r24, Y
   10a4c:	99 81       	ldd	r25, Y+1	; 0x01
   10a4e:	aa 81       	ldd	r26, Y+2	; 0x02
   10a50:	bb 81       	ldd	r27, Y+3	; 0x03
   10a52:	c8 53       	subi	r28, 0x38	; 56
   10a54:	d1 40       	sbci	r29, 0x01	; 1
   10a56:	f8 01       	movw	r30, r16
   10a58:	86 a3       	std	Z+38, r24	; 0x26
   10a5a:	97 a3       	std	Z+39, r25	; 0x27
   10a5c:	a0 a7       	std	Z+40, r26	; 0x28
   10a5e:	b1 a7       	std	Z+41, r27	; 0x29
   10a60:	df cc       	rjmp	.-1602   	; 0x10420 <__EEPROM_REGION_LENGTH__+0x420>

00010a62 <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
  display_element_set_string(name, 8, args2, &menu_tds_save_name);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
   10a62:	1f 93       	push	r17
   10a64:	cf 93       	push	r28
   10a66:	df 93       	push	r29
   10a68:	cd b7       	in	r28, 0x3d	; 61
   10a6a:	de b7       	in	r29, 0x3e	; 62
   10a6c:	63 97       	sbiw	r28, 0x13	; 19
   10a6e:	0f b6       	in	r0, 0x3f	; 63
   10a70:	f8 94       	cli
   10a72:	de bf       	out	0x3e, r29	; 62
   10a74:	0f be       	out	0x3f, r0	; 63
   10a76:	cd bf       	out	0x3d, r28	; 61
   10a78:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
   10a7a:	ae 01       	movw	r20, r28
   10a7c:	4f 5f       	subi	r20, 0xFF	; 255
   10a7e:	5f 4f       	sbci	r21, 0xFF	; 255
   10a80:	be 01       	movw	r22, r28
   10a82:	6d 5e       	subi	r22, 0xED	; 237
   10a84:	7f 4f       	sbci	r23, 0xFF	; 255
   10a86:	81 2f       	mov	r24, r17
   10a88:	0e 94 08 63 	call	0xc610	; 0xc610 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
   10a8c:	60 e0       	ldi	r22, 0x00	; 0
   10a8e:	87 e6       	ldi	r24, 0x67	; 103
   10a90:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
   10a94:	be 01       	movw	r22, r28
   10a96:	6f 5f       	subi	r22, 0xFF	; 255
   10a98:	7f 4f       	sbci	r23, 0xFF	; 255
   10a9a:	8d e2       	ldi	r24, 0x2D	; 45
   10a9c:	99 e0       	ldi	r25, 0x09	; 9
   10a9e:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2446
  dialog_set_string_max_length = max_length;
   10aa2:	82 e1       	ldi	r24, 0x12	; 18
   10aa4:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  dialog_set_string_args = idx;
   10aa8:	10 93 2b 09 	sts	0x092B, r17	; 0x80092b <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
  dialog_save_string_function = save_function;
   10aac:	86 ef       	ldi	r24, 0xF6	; 246
   10aae:	96 e6       	ldi	r25, 0x66	; 102
   10ab0:	90 93 2a 09 	sts	0x092A, r25	; 0x80092a <dialog_save_string_function+0x1>
   10ab4:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <dialog_save_string_function>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name);
  //dialog_save_variable_function = ;
}
   10ab8:	63 96       	adiw	r28, 0x13	; 19
   10aba:	0f b6       	in	r0, 0x3f	; 63
   10abc:	f8 94       	cli
   10abe:	de bf       	out	0x3e, r29	; 62
   10ac0:	0f be       	out	0x3f, r0	; 63
   10ac2:	cd bf       	out	0x3d, r28	; 61
   10ac4:	df 91       	pop	r29
   10ac6:	cf 91       	pop	r28
   10ac8:	1f 91       	pop	r17
   10aca:	08 95       	ret

00010acc <twi_readFrom.part.0.constprop.169>:
twi_readFrom.part.0.constprop.169():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   10acc:	90 91 8a 11 	lds	r25, 0x118A	; 0x80118a <twi_state>
   10ad0:	91 11       	cpse	r25, r1
   10ad2:	fc cf       	rjmp	.-8      	; 0x10acc <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   10ad4:	91 e0       	ldi	r25, 0x01	; 1
   10ad6:	90 93 8a 11 	sts	0x118A, r25	; 0x80118a <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   10ada:	90 93 89 11 	sts	0x1189, r25	; 0x801189 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   10ade:	2f ef       	ldi	r18, 0xFF	; 255
   10ae0:	20 93 88 11 	sts	0x1188, r18	; 0x801188 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   10ae4:	10 92 87 11 	sts	0x1187, r1	; 0x801187 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   10ae8:	26 0f       	add	r18, r22
   10aea:	20 93 86 11 	sts	0x1186, r18	; 0x801186 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   10aee:	90 93 85 11 	sts	0x1185, r25	; 0x801185 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   10af2:	90 91 85 11 	lds	r25, 0x1185	; 0x801185 <twi_slarw>
   10af6:	88 0f       	add	r24, r24
   10af8:	89 2b       	or	r24, r25
   10afa:	80 93 85 11 	sts	0x1185, r24	; 0x801185 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   10afe:	80 91 84 11 	lds	r24, 0x1184	; 0x801184 <twi_inRepStart>
   10b02:	81 30       	cpi	r24, 0x01	; 1
   10b04:	f9 f4       	brne	.+62     	; 0x10b44 <twi_readFrom.part.0.constprop.169+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   10b06:	10 92 84 11 	sts	0x1184, r1	; 0x801184 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   10b0a:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <twi_slarw>
   10b0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   10b12:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   10b16:	83 fd       	sbrc	r24, 3
   10b18:	f8 cf       	rjmp	.-16     	; 0x10b0a <twi_readFrom.part.0.constprop.169+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   10b1a:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   10b1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   10b20:	80 91 8a 11 	lds	r24, 0x118A	; 0x80118a <twi_state>
   10b24:	81 30       	cpi	r24, 0x01	; 1
   10b26:	e1 f3       	breq	.-8      	; 0x10b20 <twi_readFrom.part.0.constprop.169+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   10b28:	80 91 87 11 	lds	r24, 0x1187	; 0x801187 <twi_masterBufferIndex>
   10b2c:	86 17       	cp	r24, r22
   10b2e:	10 f4       	brcc	.+4      	; 0x10b34 <twi_readFrom.part.0.constprop.169+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   10b30:	60 91 87 11 	lds	r22, 0x1187	; 0x801187 <twi_masterBufferIndex>
   10b34:	a4 e6       	ldi	r26, 0x64	; 100
   10b36:	b1 e1       	ldi	r27, 0x11	; 17
   10b38:	e4 e4       	ldi	r30, 0x44	; 68
   10b3a:	f1 e1       	ldi	r31, 0x11	; 17
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   10b3c:	80 e0       	ldi	r24, 0x00	; 0
   10b3e:	86 13       	cpse	r24, r22
   10b40:	03 c0       	rjmp	.+6      	; 0x10b48 <twi_readFrom.part.0.constprop.169+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   10b42:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   10b44:	85 ee       	ldi	r24, 0xE5	; 229
   10b46:	ea cf       	rjmp	.-44     	; 0x10b1c <twi_readFrom.part.0.constprop.169+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   10b48:	9d 91       	ld	r25, X+
   10b4a:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   10b4c:	8f 5f       	subi	r24, 0xFF	; 255
   10b4e:	f7 cf       	rjmp	.-18     	; 0x10b3e <twi_readFrom.part.0.constprop.169+0x72>

00010b50 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10b50:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   10b54:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   10b58:	2f ef       	ldi	r18, 0xFF	; 255
   10b5a:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10b5c:	98 17       	cp	r25, r24
   10b5e:	48 f4       	brcc	.+18     	; 0x10b72 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   10b60:	e9 2f       	mov	r30, r25
   10b62:	f0 e0       	ldi	r31, 0x00	; 0
   10b64:	ec 5b       	subi	r30, 0xBC	; 188
   10b66:	fe 4e       	sbci	r31, 0xEE	; 238
   10b68:	20 81       	ld	r18, Z
   10b6a:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   10b6c:	9f 5f       	subi	r25, 0xFF	; 255
   10b6e:	90 93 3f 11 	sts	0x113F, r25	; 0x80113f <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   10b72:	c9 01       	movw	r24, r18
   10b74:	08 95       	ret

00010b76 <TwoWire::read() [clone .constprop.130]>:
_ZN7TwoWire4readEv.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10b76:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   10b7a:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   10b7e:	2f ef       	ldi	r18, 0xFF	; 255
   10b80:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   10b82:	98 17       	cp	r25, r24
   10b84:	48 f4       	brcc	.+18     	; 0x10b98 <TwoWire::read() [clone .constprop.130]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   10b86:	e9 2f       	mov	r30, r25
   10b88:	f0 e0       	ldi	r31, 0x00	; 0
   10b8a:	ec 5b       	subi	r30, 0xBC	; 188
   10b8c:	fe 4e       	sbci	r31, 0xEE	; 238
   10b8e:	20 81       	ld	r18, Z
   10b90:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   10b92:	9f 5f       	subi	r25, 0xFF	; 255
   10b94:	90 93 3f 11 	sts	0x113F, r25	; 0x80113f <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   10b98:	c9 01       	movw	r24, r18
   10b9a:	08 95       	ret

00010b9c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   10b9c:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   10ba0:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
   10ba4:	89 1b       	sub	r24, r25
   10ba6:	99 0b       	sbc	r25, r25
   10ba8:	08 95       	ret

00010baa <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
   10baa:	08 95       	ret

00010bac <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
   10bac:	08 95       	ret

00010bae <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   10bae:	fc 01       	movw	r30, r24
   10bb0:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   10bb2:	44 8d       	ldd	r20, Z+28	; 0x1c
   10bb4:	25 2f       	mov	r18, r21
   10bb6:	30 e0       	ldi	r19, 0x00	; 0
   10bb8:	84 2f       	mov	r24, r20
   10bba:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   10bbc:	82 1b       	sub	r24, r18
   10bbe:	93 0b       	sbc	r25, r19
   10bc0:	54 17       	cp	r21, r20
   10bc2:	10 f0       	brcs	.+4      	; 0x10bc8 <HardwareSerial::availableForWrite()+0x1a>
   10bc4:	cf 96       	adiw	r24, 0x3f	; 63
   10bc6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   10bc8:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   10bca:	08 95       	ret

00010bcc <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   10bcc:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   10bce:	91 8d       	ldd	r25, Z+25	; 0x19
   10bd0:	82 8d       	ldd	r24, Z+26	; 0x1a
   10bd2:	98 17       	cp	r25, r24
   10bd4:	61 f0       	breq	.+24     	; 0x10bee <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   10bd6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   10bd8:	ae 0f       	add	r26, r30
   10bda:	bf 2f       	mov	r27, r31
   10bdc:	b1 1d       	adc	r27, r1
   10bde:	5d 96       	adiw	r26, 0x1d	; 29
   10be0:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   10be2:	92 8d       	ldd	r25, Z+26	; 0x1a
   10be4:	9f 5f       	subi	r25, 0xFF	; 255
   10be6:	9f 73       	andi	r25, 0x3F	; 63
   10be8:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   10bea:	90 e0       	ldi	r25, 0x00	; 0
   10bec:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   10bee:	8f ef       	ldi	r24, 0xFF	; 255
   10bf0:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   10bf2:	08 95       	ret

00010bf4 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   10bf4:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   10bf6:	91 8d       	ldd	r25, Z+25	; 0x19
   10bf8:	82 8d       	ldd	r24, Z+26	; 0x1a
   10bfa:	98 17       	cp	r25, r24
   10bfc:	31 f0       	breq	.+12     	; 0x10c0a <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   10bfe:	82 8d       	ldd	r24, Z+26	; 0x1a
   10c00:	e8 0f       	add	r30, r24
   10c02:	f1 1d       	adc	r31, r1
   10c04:	85 8d       	ldd	r24, Z+29	; 0x1d
   10c06:	90 e0       	ldi	r25, 0x00	; 0
   10c08:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   10c0a:	8f ef       	ldi	r24, 0xFF	; 255
   10c0c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   10c0e:	08 95       	ret

00010c10 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   10c10:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   10c12:	91 8d       	ldd	r25, Z+25	; 0x19
   10c14:	22 8d       	ldd	r18, Z+26	; 0x1a
   10c16:	89 2f       	mov	r24, r25
   10c18:	90 e0       	ldi	r25, 0x00	; 0
   10c1a:	80 5c       	subi	r24, 0xC0	; 192
   10c1c:	9f 4f       	sbci	r25, 0xFF	; 255
   10c1e:	82 1b       	sub	r24, r18
   10c20:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   10c22:	8f 73       	andi	r24, 0x3F	; 63
   10c24:	99 27       	eor	r25, r25
   10c26:	08 95       	ret

00010c28 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   10c28:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   10c2a:	a4 8d       	ldd	r26, Z+28	; 0x1c
   10c2c:	a8 0f       	add	r26, r24
   10c2e:	b9 2f       	mov	r27, r25
   10c30:	b1 1d       	adc	r27, r1
   10c32:	a3 5a       	subi	r26, 0xA3	; 163
   10c34:	bf 4f       	sbci	r27, 0xFF	; 255
   10c36:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   10c38:	84 8d       	ldd	r24, Z+28	; 0x1c
   10c3a:	90 e0       	ldi	r25, 0x00	; 0
   10c3c:	01 96       	adiw	r24, 0x01	; 1
   10c3e:	8f 73       	andi	r24, 0x3F	; 63
   10c40:	99 27       	eor	r25, r25
   10c42:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   10c44:	a6 89       	ldd	r26, Z+22	; 0x16
   10c46:	b7 89       	ldd	r27, Z+23	; 0x17
   10c48:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   10c4a:	a0 89       	ldd	r26, Z+16	; 0x10
   10c4c:	b1 89       	ldd	r27, Z+17	; 0x11
   10c4e:	8c 91       	ld	r24, X
   10c50:	80 64       	ori	r24, 0x40	; 64
   10c52:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   10c54:	93 8d       	ldd	r25, Z+27	; 0x1b
   10c56:	84 8d       	ldd	r24, Z+28	; 0x1c
   10c58:	98 13       	cpse	r25, r24
   10c5a:	06 c0       	rjmp	.+12     	; 0x10c68 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   10c5c:	02 88       	ldd	r0, Z+18	; 0x12
   10c5e:	f3 89       	ldd	r31, Z+19	; 0x13
   10c60:	e0 2d       	mov	r30, r0
   10c62:	80 81       	ld	r24, Z
   10c64:	8f 7d       	andi	r24, 0xDF	; 223
   10c66:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   10c68:	08 95       	ret

00010c6a <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   10c6a:	ef 92       	push	r14
   10c6c:	ff 92       	push	r15
   10c6e:	0f 93       	push	r16
   10c70:	1f 93       	push	r17
   10c72:	cf 93       	push	r28
   10c74:	df 93       	push	r29
   10c76:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   10c78:	81 e0       	ldi	r24, 0x01	; 1
   10c7a:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   10c7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
   10c7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10c80:	98 13       	cpse	r25, r24
   10c82:	16 c0       	rjmp	.+44     	; 0x10cb0 <HardwareSerial::write(unsigned char)+0x46>
   10c84:	e8 89       	ldd	r30, Y+16	; 0x10
   10c86:	f9 89       	ldd	r31, Y+17	; 0x11
   10c88:	80 81       	ld	r24, Z
   10c8a:	85 ff       	sbrs	r24, 5
   10c8c:	11 c0       	rjmp	.+34     	; 0x10cb0 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   10c8e:	ee 89       	ldd	r30, Y+22	; 0x16
   10c90:	ff 89       	ldd	r31, Y+23	; 0x17
   10c92:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   10c94:	e8 89       	ldd	r30, Y+16	; 0x10
   10c96:	f9 89       	ldd	r31, Y+17	; 0x11
   10c98:	80 81       	ld	r24, Z
   10c9a:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   10c9c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   10c9e:	81 e0       	ldi	r24, 0x01	; 1
   10ca0:	90 e0       	ldi	r25, 0x00	; 0
   10ca2:	df 91       	pop	r29
   10ca4:	cf 91       	pop	r28
   10ca6:	1f 91       	pop	r17
   10ca8:	0f 91       	pop	r16
   10caa:	ff 90       	pop	r15
   10cac:	ef 90       	pop	r14
   10cae:	08 95       	ret
   10cb0:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   10cb2:	0b 8d       	ldd	r16, Y+27	; 0x1b
   10cb4:	10 e0       	ldi	r17, 0x00	; 0
   10cb6:	0f 5f       	subi	r16, 0xFF	; 255
   10cb8:	1f 4f       	sbci	r17, 0xFF	; 255
   10cba:	0f 73       	andi	r16, 0x3F	; 63
   10cbc:	11 27       	eor	r17, r17
   10cbe:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   10cc0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10cc2:	8e 11       	cpse	r24, r14
   10cc4:	0c c0       	rjmp	.+24     	; 0x10cde <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   10cc6:	0f b6       	in	r0, 0x3f	; 63
   10cc8:	07 fc       	sbrc	r0, 7
   10cca:	fa cf       	rjmp	.-12     	; 0x10cc0 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   10ccc:	e8 89       	ldd	r30, Y+16	; 0x10
   10cce:	f9 89       	ldd	r31, Y+17	; 0x11
   10cd0:	80 81       	ld	r24, Z
   10cd2:	85 ff       	sbrs	r24, 5
   10cd4:	f5 cf       	rjmp	.-22     	; 0x10cc0 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   10cd6:	ce 01       	movw	r24, r28
   10cd8:	0e 94 14 86 	call	0x10c28	; 0x10c28 <HardwareSerial::_tx_udr_empty_irq()>
   10cdc:	f1 cf       	rjmp	.-30     	; 0x10cc0 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   10cde:	eb 8d       	ldd	r30, Y+27	; 0x1b
   10ce0:	ec 0f       	add	r30, r28
   10ce2:	fd 2f       	mov	r31, r29
   10ce4:	f1 1d       	adc	r31, r1
   10ce6:	e3 5a       	subi	r30, 0xA3	; 163
   10ce8:	ff 4f       	sbci	r31, 0xFF	; 255
   10cea:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   10cec:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   10cee:	ea 89       	ldd	r30, Y+18	; 0x12
   10cf0:	fb 89       	ldd	r31, Y+19	; 0x13
   10cf2:	80 81       	ld	r24, Z
   10cf4:	80 62       	ori	r24, 0x20	; 32
   10cf6:	d2 cf       	rjmp	.-92     	; 0x10c9c <HardwareSerial::write(unsigned char)+0x32>

00010cf8 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   10cf8:	cf 93       	push	r28
   10cfa:	df 93       	push	r29
   10cfc:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   10cfe:	88 8d       	ldd	r24, Y+24	; 0x18
   10d00:	88 23       	and	r24, r24
   10d02:	b9 f0       	breq	.+46     	; 0x10d32 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   10d04:	aa 89       	ldd	r26, Y+18	; 0x12
   10d06:	bb 89       	ldd	r27, Y+19	; 0x13
   10d08:	e8 89       	ldd	r30, Y+16	; 0x10
   10d0a:	f9 89       	ldd	r31, Y+17	; 0x11
   10d0c:	8c 91       	ld	r24, X
   10d0e:	85 fd       	sbrc	r24, 5
   10d10:	03 c0       	rjmp	.+6      	; 0x10d18 <HardwareSerial::flush()+0x20>
   10d12:	80 81       	ld	r24, Z
   10d14:	86 fd       	sbrc	r24, 6
   10d16:	0d c0       	rjmp	.+26     	; 0x10d32 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   10d18:	0f b6       	in	r0, 0x3f	; 63
   10d1a:	07 fc       	sbrc	r0, 7
   10d1c:	f7 cf       	rjmp	.-18     	; 0x10d0c <HardwareSerial::flush()+0x14>
   10d1e:	8c 91       	ld	r24, X
   10d20:	85 ff       	sbrs	r24, 5
   10d22:	f2 cf       	rjmp	.-28     	; 0x10d08 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   10d24:	80 81       	ld	r24, Z
   10d26:	85 ff       	sbrs	r24, 5
   10d28:	ed cf       	rjmp	.-38     	; 0x10d04 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   10d2a:	ce 01       	movw	r24, r28
   10d2c:	0e 94 14 86 	call	0x10c28	; 0x10c28 <HardwareSerial::_tx_udr_empty_irq()>
   10d30:	e9 cf       	rjmp	.-46     	; 0x10d04 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   10d32:	df 91       	pop	r29
   10d34:	cf 91       	pop	r28
   10d36:	08 95       	ret

00010d38 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   10d38:	88 ec       	ldi	r24, 0xC8	; 200
   10d3a:	9b e0       	ldi	r25, 0x0B	; 11
   10d3c:	0e 94 08 86 	call	0x10c10	; 0x10c10 <HardwareSerial::available()>
   10d40:	21 e0       	ldi	r18, 0x01	; 1
   10d42:	89 2b       	or	r24, r25
   10d44:	09 f4       	brne	.+2      	; 0x10d48 <Serial0_available()+0x10>
   10d46:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   10d48:	82 2f       	mov	r24, r18
   10d4a:	08 95       	ret

00010d4c <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   10d4c:	80 e0       	ldi	r24, 0x00	; 0
   10d4e:	90 e0       	ldi	r25, 0x00	; 0
   10d50:	89 2b       	or	r24, r25
   10d52:	29 f0       	breq	.+10     	; 0x10d5e <serialEventRun()+0x12>
   10d54:	0e 94 9c 86 	call	0x10d38	; 0x10d38 <Serial0_available()>
   10d58:	81 11       	cpse	r24, r1
   10d5a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   10d5e:	80 e0       	ldi	r24, 0x00	; 0
   10d60:	90 e0       	ldi	r25, 0x00	; 0
   10d62:	89 2b       	or	r24, r25
   10d64:	49 f0       	breq	.+18     	; 0x10d78 <serialEventRun()+0x2c>
   10d66:	80 e0       	ldi	r24, 0x00	; 0
   10d68:	90 e0       	ldi	r25, 0x00	; 0
   10d6a:	89 2b       	or	r24, r25
   10d6c:	29 f0       	breq	.+10     	; 0x10d78 <serialEventRun()+0x2c>
   10d6e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   10d72:	81 11       	cpse	r24, r1
   10d74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   10d78:	08 95       	ret

00010d7a <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
   10d7a:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
   10d7c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
   10d7e:	80 91 33 11 	lds	r24, 0x1133	; 0x801133 <timer0_overflow_count>
   10d82:	90 91 34 11 	lds	r25, 0x1134	; 0x801134 <timer0_overflow_count+0x1>
   10d86:	a0 91 35 11 	lds	r26, 0x1135	; 0x801135 <timer0_overflow_count+0x2>
   10d8a:	b0 91 36 11 	lds	r27, 0x1136	; 0x801136 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   10d8e:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   10d90:	a8 9b       	sbis	0x15, 0	; 21
   10d92:	05 c0       	rjmp	.+10     	; 0x10d9e <micros+0x24>
   10d94:	2f 3f       	cpi	r18, 0xFF	; 255
   10d96:	19 f0       	breq	.+6      	; 0x10d9e <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
   10d98:	01 96       	adiw	r24, 0x01	; 1
   10d9a:	a1 1d       	adc	r26, r1
   10d9c:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
   10d9e:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
   10da0:	ba 2f       	mov	r27, r26
   10da2:	a9 2f       	mov	r26, r25
   10da4:	98 2f       	mov	r25, r24
   10da6:	88 27       	eor	r24, r24
   10da8:	bc 01       	movw	r22, r24
   10daa:	cd 01       	movw	r24, r26
   10dac:	62 0f       	add	r22, r18
   10dae:	71 1d       	adc	r23, r1
   10db0:	81 1d       	adc	r24, r1
   10db2:	91 1d       	adc	r25, r1
   10db4:	42 e0       	ldi	r20, 0x02	; 2
   10db6:	66 0f       	add	r22, r22
   10db8:	77 1f       	adc	r23, r23
   10dba:	88 1f       	adc	r24, r24
   10dbc:	99 1f       	adc	r25, r25
   10dbe:	4a 95       	dec	r20
   10dc0:	d1 f7       	brne	.-12     	; 0x10db6 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
   10dc2:	08 95       	ret

00010dc4 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   10dc4:	af 92       	push	r10
   10dc6:	bf 92       	push	r11
   10dc8:	cf 92       	push	r12
   10dca:	df 92       	push	r13
   10dcc:	ef 92       	push	r14
   10dce:	ff 92       	push	r15
   10dd0:	0f 93       	push	r16
   10dd2:	1f 93       	push	r17
   10dd4:	cf 93       	push	r28
   10dd6:	df 93       	push	r29
   10dd8:	6c 01       	movw	r12, r24
   10dda:	7b 01       	movw	r14, r22
   10ddc:	8b 01       	movw	r16, r22
   10dde:	04 0f       	add	r16, r20
   10de0:	15 1f       	adc	r17, r21
   10de2:	eb 01       	movw	r28, r22
   10de4:	5e 01       	movw	r10, r28
   10de6:	ae 18       	sub	r10, r14
   10de8:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
   10dea:	c0 17       	cp	r28, r16
   10dec:	d1 07       	cpc	r29, r17
   10dee:	59 f0       	breq	.+22     	; 0x10e06 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
   10df0:	69 91       	ld	r22, Y+
   10df2:	d6 01       	movw	r26, r12
   10df4:	ed 91       	ld	r30, X+
   10df6:	fc 91       	ld	r31, X
   10df8:	01 90       	ld	r0, Z+
   10dfa:	f0 81       	ld	r31, Z
   10dfc:	e0 2d       	mov	r30, r0
   10dfe:	c6 01       	movw	r24, r12
   10e00:	19 95       	eicall
   10e02:	89 2b       	or	r24, r25
   10e04:	79 f7       	brne	.-34     	; 0x10de4 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
   10e06:	c5 01       	movw	r24, r10
   10e08:	df 91       	pop	r29
   10e0a:	cf 91       	pop	r28
   10e0c:	1f 91       	pop	r17
   10e0e:	0f 91       	pop	r16
   10e10:	ff 90       	pop	r15
   10e12:	ef 90       	pop	r14
   10e14:	df 90       	pop	r13
   10e16:	cf 90       	pop	r12
   10e18:	bf 90       	pop	r11
   10e1a:	af 90       	pop	r10
   10e1c:	08 95       	ret

00010e1e <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   10e1e:	85 ed       	ldi	r24, 0xD5	; 213
   10e20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   10e24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   10e28:	84 fd       	sbrc	r24, 4
   10e2a:	fc cf       	rjmp	.-8      	; 0x10e24 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   10e2c:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
   10e30:	08 95       	ret

00010e32 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
   10e32:	20 91 f3 10 	lds	r18, 0x10F3	; 0x8010f3 <twi_txBufferLength>
   10e36:	26 0f       	add	r18, r22
   10e38:	33 27       	eor	r19, r19
   10e3a:	33 1f       	adc	r19, r19
   10e3c:	21 32       	cpi	r18, 0x21	; 33
   10e3e:	31 05       	cpc	r19, r1
   10e40:	ec f4       	brge	.+58     	; 0x10e7c <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
   10e42:	20 91 8a 11 	lds	r18, 0x118A	; 0x80118a <twi_state>
   10e46:	fc 01       	movw	r30, r24
   10e48:	90 e0       	ldi	r25, 0x00	; 0
   10e4a:	80 e0       	ldi	r24, 0x00	; 0
   10e4c:	24 30       	cpi	r18, 0x04	; 4
   10e4e:	69 f0       	breq	.+26     	; 0x10e6a <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
   10e50:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
   10e52:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
   10e54:	a0 91 f3 10 	lds	r26, 0x10F3	; 0x8010f3 <twi_txBufferLength>
   10e58:	21 91       	ld	r18, Z+
   10e5a:	ac 01       	movw	r20, r24
   10e5c:	4d 52       	subi	r20, 0x2D	; 45
   10e5e:	5f 4e       	sbci	r21, 0xEF	; 239
   10e60:	a4 0f       	add	r26, r20
   10e62:	b5 2f       	mov	r27, r21
   10e64:	b1 1d       	adc	r27, r1
   10e66:	2c 93       	st	X, r18
   10e68:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
   10e6a:	86 17       	cp	r24, r22
   10e6c:	98 f3       	brcs	.-26     	; 0x10e54 <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
   10e6e:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <twi_txBufferLength>
   10e72:	68 0f       	add	r22, r24
   10e74:	60 93 f3 10 	sts	0x10F3, r22	; 0x8010f3 <twi_txBufferLength>
   10e78:	80 e0       	ldi	r24, 0x00	; 0
   10e7a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
   10e7c:	81 e0       	ldi	r24, 0x01	; 1
   10e7e:	08 95       	ret

00010e80 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
   10e80:	08 95       	ret

00010e82 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
   10e82:	e0 91 3f 11 	lds	r30, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   10e86:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   10e8a:	e8 17       	cp	r30, r24
   10e8c:	30 f4       	brcc	.+12     	; 0x10e9a <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
   10e8e:	f0 e0       	ldi	r31, 0x00	; 0
   10e90:	ec 5b       	subi	r30, 0xBC	; 188
   10e92:	fe 4e       	sbci	r31, 0xEE	; 238
   10e94:	80 81       	ld	r24, Z
   10e96:	90 e0       	ldi	r25, 0x00	; 0
   10e98:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
   10e9a:	8f ef       	ldi	r24, 0xFF	; 255
   10e9c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
   10e9e:	08 95       	ret

00010ea0 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   10ea0:	cf 92       	push	r12
   10ea2:	df 92       	push	r13
   10ea4:	ef 92       	push	r14
   10ea6:	ff 92       	push	r15
   10ea8:	0f 93       	push	r16
   10eaa:	1f 93       	push	r17
   10eac:	cf 93       	push	r28
   10eae:	df 93       	push	r29
   10eb0:	7c 01       	movw	r14, r24
   10eb2:	cb 01       	movw	r24, r22
   10eb4:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
   10eb6:	20 91 43 11 	lds	r18, 0x1143	; 0x801143 <TwoWire::transmitting>
   10eba:	22 23       	and	r18, r18
   10ebc:	89 f0       	breq	.+34     	; 0x10ee0 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   10ebe:	eb 01       	movw	r28, r22
   10ec0:	6b 01       	movw	r12, r22
   10ec2:	c4 0e       	add	r12, r20
   10ec4:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
   10ec6:	cc 15       	cp	r28, r12
   10ec8:	dd 05       	cpc	r29, r13
   10eca:	69 f0       	breq	.+26     	; 0x10ee6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
   10ecc:	69 91       	ld	r22, Y+
   10ece:	d7 01       	movw	r26, r14
   10ed0:	ed 91       	ld	r30, X+
   10ed2:	fc 91       	ld	r31, X
   10ed4:	01 90       	ld	r0, Z+
   10ed6:	f0 81       	ld	r31, Z
   10ed8:	e0 2d       	mov	r30, r0
   10eda:	c7 01       	movw	r24, r14
   10edc:	19 95       	eicall
   10ede:	f3 cf       	rjmp	.-26     	; 0x10ec6 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
   10ee0:	64 2f       	mov	r22, r20
   10ee2:	0e 94 19 87 	call	0x10e32	; 0x10e32 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
   10ee6:	c8 01       	movw	r24, r16
   10ee8:	df 91       	pop	r29
   10eea:	cf 91       	pop	r28
   10eec:	1f 91       	pop	r17
   10eee:	0f 91       	pop	r16
   10ef0:	ff 90       	pop	r15
   10ef2:	ef 90       	pop	r14
   10ef4:	df 90       	pop	r13
   10ef6:	cf 90       	pop	r12
   10ef8:	08 95       	ret

00010efa <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
   10efa:	cf 93       	push	r28
   10efc:	df 93       	push	r29
   10efe:	1f 92       	push	r1
   10f00:	cd b7       	in	r28, 0x3d	; 61
   10f02:	de b7       	in	r29, 0x3e	; 62
   10f04:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
   10f06:	20 91 43 11 	lds	r18, 0x1143	; 0x801143 <TwoWire::transmitting>
   10f0a:	22 23       	and	r18, r18
   10f0c:	f9 f0       	breq	.+62     	; 0x10f4c <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
   10f0e:	20 91 40 11 	lds	r18, 0x1140	; 0x801140 <TwoWire::txBufferLength>
   10f12:	20 32       	cpi	r18, 0x20	; 32
   10f14:	58 f0       	brcs	.+22     	; 0x10f2c <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   10f16:	21 e0       	ldi	r18, 0x01	; 1
   10f18:	30 e0       	ldi	r19, 0x00	; 0
   10f1a:	fc 01       	movw	r30, r24
   10f1c:	33 83       	std	Z+3, r19	; 0x03
   10f1e:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
   10f20:	90 e0       	ldi	r25, 0x00	; 0
   10f22:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
   10f24:	0f 90       	pop	r0
   10f26:	df 91       	pop	r29
   10f28:	cf 91       	pop	r28
   10f2a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
   10f2c:	80 91 41 11 	lds	r24, 0x1141	; 0x801141 <TwoWire::txBufferIndex>
   10f30:	e8 2f       	mov	r30, r24
   10f32:	f0 e0       	ldi	r31, 0x00	; 0
   10f34:	ed 54       	subi	r30, 0x4D	; 77
   10f36:	ff 4e       	sbci	r31, 0xEF	; 239
   10f38:	99 81       	ldd	r25, Y+1	; 0x01
   10f3a:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
   10f3c:	8f 5f       	subi	r24, 0xFF	; 255
   10f3e:	80 93 41 11 	sts	0x1141, r24	; 0x801141 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
   10f42:	80 93 40 11 	sts	0x1140, r24	; 0x801140 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
   10f46:	81 e0       	ldi	r24, 0x01	; 1
   10f48:	90 e0       	ldi	r25, 0x00	; 0
   10f4a:	ec cf       	rjmp	.-40     	; 0x10f24 <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
   10f4c:	61 e0       	ldi	r22, 0x01	; 1
   10f4e:	ce 01       	movw	r24, r28
   10f50:	01 96       	adiw	r24, 0x01	; 1
   10f52:	0e 94 19 87 	call	0x10e32	; 0x10e32 <twi_transmit>
   10f56:	f7 cf       	rjmp	.-18     	; 0x10f46 <TwoWire::write(unsigned char)+0x4c>

00010f58 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   10f58:	08 95       	ret

00010f5a <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   10f5a:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   10f5c:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   10f5e:	0d b4       	in	r0, 0x2d	; 45
   10f60:	07 fe       	sbrs	r0, 7
   10f62:	fd cf       	rjmp	.-6      	; 0x10f5e <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
   10f64:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
   10f66:	08 95       	ret

00010f68 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   10f68:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   10f6a:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
   10f6c:	08 95       	ret

00010f6e <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   10f6e:	cf 93       	push	r28
   10f70:	df 93       	push	r29
   10f72:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   10f74:	89 8d       	ldd	r24, Y+25	; 0x19
   10f76:	9a 8d       	ldd	r25, Y+26	; 0x1a
   10f78:	89 2b       	or	r24, r25
   10f7a:	41 f0       	breq	.+16     	; 0x10f8c <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   10f7c:	e8 81       	ld	r30, Y
   10f7e:	f9 81       	ldd	r31, Y+1	; 0x01
   10f80:	02 84       	ldd	r0, Z+10	; 0x0a
   10f82:	f3 85       	ldd	r31, Z+11	; 0x0b
   10f84:	e0 2d       	mov	r30, r0
   10f86:	ce 01       	movw	r24, r28
   10f88:	19 95       	eicall
   10f8a:	f4 cf       	rjmp	.-24     	; 0x10f74 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
   10f8c:	df 91       	pop	r29
   10f8e:	cf 91       	pop	r28
   10f90:	08 95       	ret

00010f92 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   10f92:	cf 93       	push	r28
   10f94:	df 93       	push	r29
   10f96:	1f 92       	push	r1
   10f98:	cd b7       	in	r28, 0x3d	; 61
   10f9a:	de b7       	in	r29, 0x3e	; 62
   10f9c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   10f9e:	dc 01       	movw	r26, r24
   10fa0:	ed 91       	ld	r30, X+
   10fa2:	fc 91       	ld	r31, X
   10fa4:	02 80       	ldd	r0, Z+2	; 0x02
   10fa6:	f3 81       	ldd	r31, Z+3	; 0x03
   10fa8:	e0 2d       	mov	r30, r0
   10faa:	41 e0       	ldi	r20, 0x01	; 1
   10fac:	50 e0       	ldi	r21, 0x00	; 0
   10fae:	be 01       	movw	r22, r28
   10fb0:	6f 5f       	subi	r22, 0xFF	; 255
   10fb2:	7f 4f       	sbci	r23, 0xFF	; 255
   10fb4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   10fb6:	0f 90       	pop	r0
   10fb8:	df 91       	pop	r29
   10fba:	cf 91       	pop	r28
   10fbc:	08 95       	ret

00010fbe <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   10fbe:	fc 01       	movw	r30, r24
   10fc0:	81 8d       	ldd	r24, Z+25	; 0x19
   10fc2:	92 8d       	ldd	r25, Z+26	; 0x1a
   10fc4:	08 95       	ret

00010fc6 <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   10fc6:	fc 01       	movw	r30, r24
   10fc8:	85 89       	ldd	r24, Z+21	; 0x15
   10fca:	96 89       	ldd	r25, Z+22	; 0x16
   10fcc:	08 95       	ret

00010fce <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   10fce:	22 ee       	ldi	r18, 0xE2	; 226
   10fd0:	32 e0       	ldi	r19, 0x02	; 2
   10fd2:	fc 01       	movw	r30, r24
   10fd4:	31 83       	std	Z+1, r19	; 0x01
   10fd6:	20 83       	st	Z, r18
   10fd8:	fb 01       	movw	r30, r22
   10fda:	41 89       	ldd	r20, Z+17	; 0x11
   10fdc:	52 89       	ldd	r21, Z+18	; 0x12
   10fde:	63 89       	ldd	r22, Z+19	; 0x13
   10fe0:	74 89       	ldd	r23, Z+20	; 0x14
   10fe2:	fc 01       	movw	r30, r24
   10fe4:	42 83       	std	Z+2, r20	; 0x02
   10fe6:	53 83       	std	Z+3, r21	; 0x03
   10fe8:	64 83       	std	Z+4, r22	; 0x04
   10fea:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   10fec:	08 95       	ret

00010fee <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   10fee:	80 e0       	ldi	r24, 0x00	; 0
   10ff0:	08 95       	ret

00010ff2 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   10ff2:	fc 01       	movw	r30, r24
   10ff4:	94 85       	ldd	r25, Z+12	; 0x0c
   10ff6:	fb 01       	movw	r30, r22
   10ff8:	84 85       	ldd	r24, Z+12	; 0x0c
   10ffa:	98 13       	cpse	r25, r24
   10ffc:	03 c0       	rjmp	.+6      	; 0x11004 <EthernetClient::operator==(EthernetClient const&)+0x12>
   10ffe:	81 e0       	ldi	r24, 0x01	; 1
   11000:	98 30       	cpi	r25, 0x08	; 8
   11002:	09 f4       	brne	.+2      	; 0x11006 <EthernetClient::operator==(EthernetClient const&)+0x14>
   11004:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   11006:	08 95       	ret

00011008 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   11008:	21 e0       	ldi	r18, 0x01	; 1
   1100a:	fc 01       	movw	r30, r24
   1100c:	84 85       	ldd	r24, Z+12	; 0x0c
   1100e:	88 30       	cpi	r24, 0x08	; 8
   11010:	09 f4       	brne	.+2      	; 0x11014 <EthernetClient::operator bool()+0xc>
   11012:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   11014:	82 2f       	mov	r24, r18
   11016:	08 95       	ret

00011018 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
   11018:	08 95       	ret

0001101a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   1101a:	2f 92       	push	r2
   1101c:	3f 92       	push	r3
   1101e:	4f 92       	push	r4
   11020:	5f 92       	push	r5
   11022:	6f 92       	push	r6
   11024:	7f 92       	push	r7
   11026:	8f 92       	push	r8
   11028:	9f 92       	push	r9
   1102a:	af 92       	push	r10
   1102c:	bf 92       	push	r11
   1102e:	cf 92       	push	r12
   11030:	df 92       	push	r13
   11032:	ef 92       	push	r14
   11034:	ff 92       	push	r15
   11036:	0f 93       	push	r16
   11038:	1f 93       	push	r17
   1103a:	cf 93       	push	r28
   1103c:	df 93       	push	r29
   1103e:	cd b7       	in	r28, 0x3d	; 61
   11040:	de b7       	in	r29, 0x3e	; 62
   11042:	2d 97       	sbiw	r28, 0x0d	; 13
   11044:	0f b6       	in	r0, 0x3f	; 63
   11046:	f8 94       	cli
   11048:	de bf       	out	0x3e, r29	; 62
   1104a:	0f be       	out	0x3f, r0	; 63
   1104c:	cd bf       	out	0x3d, r28	; 61
   1104e:	fc 01       	movw	r30, r24
   11050:	a0 81       	ld	r26, Z
   11052:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   11054:	cb 01       	movw	r24, r22
   11056:	8e 50       	subi	r24, 0x0E	; 14
   11058:	97 42       	sbci	r25, 0x27	; 39
   1105a:	02 97       	sbiw	r24, 0x02	; 2
   1105c:	20 f5       	brcc	.+72     	; 0x110a6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   1105e:	fd 01       	movw	r30, r26
   11060:	01 90       	ld	r0, Z+
   11062:	00 20       	and	r0, r0
   11064:	e9 f7       	brne	.-6      	; 0x11060 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x46>
   11066:	31 97       	sbiw	r30, 0x01	; 1
   11068:	ea 1b       	sub	r30, r26
   1106a:	fb 0b       	sbc	r31, r27
   1106c:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <my_lcd+0xc>
   11070:	26 e0       	ldi	r18, 0x06	; 6
   11072:	82 9f       	mul	r24, r18
   11074:	c0 01       	movw	r24, r0
   11076:	11 24       	eor	r1, r1
   11078:	8e 9f       	mul	r24, r30
   1107a:	90 01       	movw	r18, r0
   1107c:	8f 9f       	mul	r24, r31
   1107e:	30 0d       	add	r19, r0
   11080:	9e 9f       	mul	r25, r30
   11082:	30 0d       	add	r19, r0
   11084:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   11086:	80 91 27 0e 	lds	r24, 0x0E27	; 0x800e27 <my_lcd+0x12>
   1108a:	90 91 28 0e 	lds	r25, 0x0E28	; 0x800e28 <my_lcd+0x13>
   1108e:	82 1b       	sub	r24, r18
   11090:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   11092:	6e 30       	cpi	r22, 0x0E	; 14
   11094:	77 42       	sbci	r23, 0x27	; 39
   11096:	89 f5       	brne	.+98     	; 0x110fa <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   11098:	bc 01       	movw	r22, r24
   1109a:	97 ff       	sbrs	r25, 7
   1109c:	02 c0       	rjmp	.+4      	; 0x110a2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x88>
   1109e:	6f 5f       	subi	r22, 0xFF	; 255
   110a0:	7f 4f       	sbci	r23, 0xFF	; 255
   110a2:	75 95       	asr	r23
   110a4:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   110a6:	70 93 18 0e 	sts	0x0E18, r23	; 0x800e18 <my_lcd+0x3>
   110aa:	60 93 17 0e 	sts	0x0E17, r22	; 0x800e17 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   110ae:	50 93 1a 0e 	sts	0x0E1A, r21	; 0x800e1a <my_lcd+0x5>
   110b2:	40 93 19 0e 	sts	0x0E19, r20	; 0x800e19 <my_lcd+0x4>
   110b6:	be 83       	std	Y+6, r27	; 0x06
   110b8:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   110ba:	ed 81       	ldd	r30, Y+5	; 0x05
   110bc:	fe 81       	ldd	r31, Y+6	; 0x06
   110be:	91 91       	ld	r25, Z+
   110c0:	fe 83       	std	Y+6, r31	; 0x06
   110c2:	ed 83       	std	Y+5, r30	; 0x05
   110c4:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   110c6:	99 23       	and	r25, r25
   110c8:	09 f4       	brne	.+2      	; 0x110cc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xb2>
   110ca:	dd c0       	rjmp	.+442    	; 0x11286 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   110cc:	9a 30       	cpi	r25, 0x0A	; 10
   110ce:	c9 f4       	brne	.+50     	; 0x11102 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   110d0:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <my_lcd+0xc>
   110d4:	f8 e0       	ldi	r31, 0x08	; 8
   110d6:	8f 9f       	mul	r24, r31
   110d8:	c0 01       	movw	r24, r0
   110da:	11 24       	eor	r1, r1
   110dc:	20 91 19 0e 	lds	r18, 0x0E19	; 0x800e19 <my_lcd+0x4>
   110e0:	30 91 1a 0e 	lds	r19, 0x0E1A	; 0x800e1a <my_lcd+0x5>
   110e4:	82 0f       	add	r24, r18
   110e6:	93 1f       	adc	r25, r19
   110e8:	90 93 1a 0e 	sts	0x0E1A, r25	; 0x800e1a <my_lcd+0x5>
   110ec:	80 93 19 0e 	sts	0x0E19, r24	; 0x800e19 <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   110f0:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <my_lcd+0x3>
   110f4:	10 92 17 0e 	sts	0x0E17, r1	; 0x800e17 <my_lcd+0x2>
   110f8:	e0 cf       	rjmp	.-64     	; 0x110ba <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   110fa:	bc 01       	movw	r22, r24
   110fc:	61 50       	subi	r22, 0x01	; 1
   110fe:	71 09       	sbc	r23, r1
   11100:	d2 cf       	rjmp	.-92     	; 0x110a6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   11102:	9d 30       	cpi	r25, 0x0D	; 13
   11104:	d1 f2       	breq	.-76     	; 0x110ba <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   11106:	20 91 17 0e 	lds	r18, 0x0E17	; 0x800e17 <my_lcd+0x2>
   1110a:	30 91 18 0e 	lds	r19, 0x0E18	; 0x800e18 <my_lcd+0x3>
   1110e:	39 87       	std	Y+9, r19	; 0x09
   11110:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   11112:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <my_lcd+0x12>
   11116:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <my_lcd+0x13>
   1111a:	48 85       	ldd	r20, Y+8	; 0x08
   1111c:	59 85       	ldd	r21, Y+9	; 0x09
   1111e:	42 17       	cp	r20, r18
   11120:	53 07       	cpc	r21, r19
   11122:	0c f0       	brlt	.+2      	; 0x11126 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x10c>
   11124:	88 c0       	rjmp	.+272    	; 0x11236 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   11126:	60 90 19 0e 	lds	r6, 0x0E19	; 0x800e19 <my_lcd+0x4>
   1112a:	70 90 1a 0e 	lds	r7, 0x0E1A	; 0x800e1a <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   1112e:	20 91 29 0e 	lds	r18, 0x0E29	; 0x800e29 <my_lcd+0x14>
   11132:	30 91 2a 0e 	lds	r19, 0x0E2A	; 0x800e2a <my_lcd+0x15>
   11136:	62 16       	cp	r6, r18
   11138:	73 06       	cpc	r7, r19
   1113a:	0c f0       	brlt	.+2      	; 0x1113e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x124>
   1113c:	7c c0       	rjmp	.+248    	; 0x11236 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1113e:	50 91 21 0e 	lds	r21, 0x0E21	; 0x800e21 <my_lcd+0xc>
   11142:	5a 83       	std	Y+2, r21	; 0x02
   11144:	c5 2e       	mov	r12, r21
   11146:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   11148:	28 85       	ldd	r18, Y+8	; 0x08
   1114a:	39 85       	ldd	r19, Y+9	; 0x09
   1114c:	e6 e0       	ldi	r30, 0x06	; 6
   1114e:	5e 9f       	mul	r21, r30
   11150:	20 0d       	add	r18, r0
   11152:	31 1d       	adc	r19, r1
   11154:	11 24       	eor	r1, r1
   11156:	12 16       	cp	r1, r18
   11158:	13 06       	cpc	r1, r19
   1115a:	0c f0       	brlt	.+2      	; 0x1115e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x144>
   1115c:	6c c0       	rjmp	.+216    	; 0x11236 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   1115e:	96 01       	movw	r18, r12
   11160:	93 e0       	ldi	r25, 0x03	; 3
   11162:	22 0f       	add	r18, r18
   11164:	33 1f       	adc	r19, r19
   11166:	9a 95       	dec	r25
   11168:	e1 f7       	brne	.-8      	; 0x11162 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x148>
   1116a:	26 0d       	add	r18, r6
   1116c:	37 1d       	adc	r19, r7
   1116e:	12 16       	cp	r1, r18
   11170:	13 06       	cpc	r1, r19
   11172:	0c f0       	brlt	.+2      	; 0x11176 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x15c>
   11174:	60 c0       	rjmp	.+192    	; 0x11236 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   11176:	80 3b       	cpi	r24, 0xB0	; 176
   11178:	08 f0       	brcs	.+2      	; 0x1117c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   1117a:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1117c:	f0 91 22 0e 	lds	r31, 0x0E22	; 0x800e22 <my_lcd+0xd>
   11180:	ff 83       	std	Y+7, r31	; 0x07
   11182:	20 90 1d 0e 	lds	r2, 0x0E1D	; 0x800e1d <my_lcd+0x8>
   11186:	30 90 1e 0e 	lds	r3, 0x0E1E	; 0x800e1e <my_lcd+0x9>
   1118a:	20 91 1b 0e 	lds	r18, 0x0E1B	; 0x800e1b <my_lcd+0x6>
   1118e:	30 91 1c 0e 	lds	r19, 0x0E1C	; 0x800e1c <my_lcd+0x7>
   11192:	3c 83       	std	Y+4, r19	; 0x04
   11194:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   11196:	48 85       	ldd	r20, Y+8	; 0x08
   11198:	59 85       	ldd	r21, Y+9	; 0x09
   1119a:	5d 87       	std	Y+13, r21	; 0x0d
   1119c:	4c 87       	std	Y+12, r20	; 0x0c
   1119e:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   111a0:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   111a2:	20 e0       	ldi	r18, 0x00	; 0
   111a4:	3f e3       	ldi	r19, 0x3F	; 63
   111a6:	24 1b       	sub	r18, r20
   111a8:	35 0b       	sbc	r19, r21
   111aa:	f9 01       	movw	r30, r18
   111ac:	45 e0       	ldi	r20, 0x05	; 5
   111ae:	84 9f       	mul	r24, r20
   111b0:	e0 0d       	add	r30, r0
   111b2:	f1 1d       	adc	r31, r1
   111b4:	11 24       	eor	r1, r1
   111b6:	fb 87       	std	Y+11, r31	; 0x0b
   111b8:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   111ba:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   111bc:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   111be:	55 30       	cpi	r21, 0x05	; 5
   111c0:	29 f0       	breq	.+10     	; 0x111cc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   111c2:	ea 85       	ldd	r30, Y+10	; 0x0a
   111c4:	fb 85       	ldd	r31, Y+11	; 0x0b
   111c6:	ea 0d       	add	r30, r10
   111c8:	fb 1d       	adc	r31, r11
   111ca:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   111cc:	23 01       	movw	r4, r6
   111ce:	91 2c       	mov	r9, r1
   111d0:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   111d2:	8e 2f       	mov	r24, r30
   111d4:	90 e0       	ldi	r25, 0x00	; 0
   111d6:	99 87       	std	Y+9, r25	; 0x09
   111d8:	88 87       	std	Y+8, r24	; 0x08
   111da:	e0 ff       	sbrs	r30, 0
   111dc:	3c c0       	rjmp	.+120    	; 0x11256 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   111de:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   111e0:	2b 81       	ldd	r18, Y+3	; 0x03
   111e2:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   111e4:	eb 80       	ldd	r14, Y+3	; 0x03
   111e6:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   111e8:	91 30       	cpi	r25, 0x01	; 1
   111ea:	09 f0       	breq	.+2      	; 0x111ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
   111ec:	42 c0       	rjmp	.+132    	; 0x11272 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   111ee:	a3 01       	movw	r20, r6
   111f0:	48 0d       	add	r20, r8
   111f2:	59 1d       	adc	r21, r9
   111f4:	b5 01       	movw	r22, r10
   111f6:	85 e1       	ldi	r24, 0x15	; 21
   111f8:	9e e0       	ldi	r25, 0x0E	; 14
   111fa:	0e 94 63 24 	call	0x48c6	; 0x48c6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   111fe:	e8 85       	ldd	r30, Y+8	; 0x08
   11200:	f9 85       	ldd	r31, Y+9	; 0x09
   11202:	f5 95       	asr	r31
   11204:	e7 95       	ror	r30
   11206:	3f ef       	ldi	r19, 0xFF	; 255
   11208:	83 1a       	sub	r8, r19
   1120a:	93 0a       	sbc	r9, r19
   1120c:	4c 0c       	add	r4, r12
   1120e:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   11210:	48 e0       	ldi	r20, 0x08	; 8
   11212:	84 16       	cp	r8, r20
   11214:	91 04       	cpc	r9, r1
   11216:	e9 f6       	brne	.-70     	; 0x111d2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b8>
   11218:	5f ef       	ldi	r21, 0xFF	; 255
   1121a:	a5 1a       	sub	r10, r21
   1121c:	b5 0a       	sbc	r11, r21
   1121e:	8c 85       	ldd	r24, Y+12	; 0x0c
   11220:	9d 85       	ldd	r25, Y+13	; 0x0d
   11222:	8c 0d       	add	r24, r12
   11224:	9d 1d       	adc	r25, r13
   11226:	9d 87       	std	Y+13, r25	; 0x0d
   11228:	8c 87       	std	Y+12, r24	; 0x0c
   1122a:	99 81       	ldd	r25, Y+1	; 0x01
   1122c:	9f 5f       	subi	r25, 0xFF	; 255
   1122e:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   11230:	96 30       	cpi	r25, 0x06	; 6
   11232:	09 f0       	breq	.+2      	; 0x11236 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   11234:	c2 cf       	rjmp	.-124    	; 0x111ba <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   11236:	20 91 21 0e 	lds	r18, 0x0E21	; 0x800e21 <my_lcd+0xc>
   1123a:	80 91 17 0e 	lds	r24, 0x0E17	; 0x800e17 <my_lcd+0x2>
   1123e:	90 91 18 0e 	lds	r25, 0x0E18	; 0x800e18 <my_lcd+0x3>
   11242:	e6 e0       	ldi	r30, 0x06	; 6
   11244:	2e 9f       	mul	r18, r30
   11246:	80 0d       	add	r24, r0
   11248:	91 1d       	adc	r25, r1
   1124a:	11 24       	eor	r1, r1
   1124c:	90 93 18 0e 	sts	0x0E18, r25	; 0x800e18 <my_lcd+0x3>
   11250:	80 93 17 0e 	sts	0x0E17, r24	; 0x800e17 <my_lcd+0x2>
   11254:	32 cf       	rjmp	.-412    	; 0x110ba <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   11256:	eb 81       	ldd	r30, Y+3	; 0x03
   11258:	fc 81       	ldd	r31, Y+4	; 0x04
   1125a:	2e 16       	cp	r2, r30
   1125c:	3f 06       	cpc	r3, r31
   1125e:	79 f2       	breq	.-98     	; 0x111fe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   11260:	ff 81       	ldd	r31, Y+7	; 0x07
   11262:	f1 11       	cpse	r31, r1
   11264:	cc cf       	rjmp	.-104    	; 0x111fe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   11266:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   11268:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   1126a:	21 30       	cpi	r18, 0x01	; 1
   1126c:	11 f4       	brne	.+4      	; 0x11272 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   1126e:	91 01       	movw	r18, r2
   11270:	be cf       	rjmp	.-132    	; 0x111ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   11272:	86 01       	movw	r16, r12
   11274:	96 01       	movw	r18, r12
   11276:	a2 01       	movw	r20, r4
   11278:	6c 85       	ldd	r22, Y+12	; 0x0c
   1127a:	7d 85       	ldd	r23, Y+13	; 0x0d
   1127c:	85 e1       	ldi	r24, 0x15	; 21
   1127e:	9e e0       	ldi	r25, 0x0E	; 14
   11280:	0e 94 b0 22 	call	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   11284:	bc cf       	rjmp	.-136    	; 0x111fe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   11286:	2d 96       	adiw	r28, 0x0d	; 13
   11288:	0f b6       	in	r0, 0x3f	; 63
   1128a:	f8 94       	cli
   1128c:	de bf       	out	0x3e, r29	; 62
   1128e:	0f be       	out	0x3f, r0	; 63
   11290:	cd bf       	out	0x3d, r28	; 61
   11292:	df 91       	pop	r29
   11294:	cf 91       	pop	r28
   11296:	1f 91       	pop	r17
   11298:	0f 91       	pop	r16
   1129a:	ff 90       	pop	r15
   1129c:	ef 90       	pop	r14
   1129e:	df 90       	pop	r13
   112a0:	cf 90       	pop	r12
   112a2:	bf 90       	pop	r11
   112a4:	af 90       	pop	r10
   112a6:	9f 90       	pop	r9
   112a8:	8f 90       	pop	r8
   112aa:	7f 90       	pop	r7
   112ac:	6f 90       	pop	r6
   112ae:	5f 90       	pop	r5
   112b0:	4f 90       	pop	r4
   112b2:	3f 90       	pop	r3
   112b4:	2f 90       	pop	r2
   112b6:	08 95       	ret

000112b8 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   112b8:	8f 92       	push	r8
   112ba:	9f 92       	push	r9
   112bc:	af 92       	push	r10
   112be:	bf 92       	push	r11
   112c0:	ef 92       	push	r14
   112c2:	ff 92       	push	r15
   112c4:	0f 93       	push	r16
   112c6:	1f 93       	push	r17
   112c8:	cf 93       	push	r28
   112ca:	df 93       	push	r29
   112cc:	cd b7       	in	r28, 0x3d	; 61
   112ce:	de b7       	in	r29, 0x3e	; 62
   112d0:	a1 97       	sbiw	r28, 0x21	; 33
   112d2:	0f b6       	in	r0, 0x3f	; 63
   112d4:	f8 94       	cli
   112d6:	de bf       	out	0x3e, r29	; 62
   112d8:	0f be       	out	0x3f, r0	; 63
   112da:	cd bf       	out	0x3d, r28	; 61
   112dc:	7c 01       	movw	r14, r24
   112de:	fa 01       	movw	r30, r20
   112e0:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   112e2:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   112e4:	22 30       	cpi	r18, 0x02	; 2
   112e6:	08 f4       	brcc	.+2      	; 0x112ea <Print::printNumber(unsigned long, unsigned char)+0x32>
   112e8:	2a e0       	ldi	r18, 0x0A	; 10
   112ea:	8e 01       	movw	r16, r28
   112ec:	0f 5d       	subi	r16, 0xDF	; 223
   112ee:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
   112f0:	82 2e       	mov	r8, r18
   112f2:	91 2c       	mov	r9, r1
   112f4:	b1 2c       	mov	r11, r1
   112f6:	a1 2c       	mov	r10, r1
   112f8:	bf 01       	movw	r22, r30
   112fa:	a5 01       	movw	r20, r10
   112fc:	94 01       	movw	r18, r8
   112fe:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
   11302:	f9 01       	movw	r30, r18
   11304:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   11306:	6a 30       	cpi	r22, 0x0A	; 10
   11308:	74 f5       	brge	.+92     	; 0x11366 <Print::printNumber(unsigned long, unsigned char)+0xae>
   1130a:	60 5d       	subi	r22, 0xD0	; 208
   1130c:	d8 01       	movw	r26, r16
   1130e:	6e 93       	st	-X, r22
   11310:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   11312:	23 2b       	or	r18, r19
   11314:	24 2b       	or	r18, r20
   11316:	25 2b       	or	r18, r21
   11318:	79 f7       	brne	.-34     	; 0x112f8 <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   1131a:	90 e0       	ldi	r25, 0x00	; 0
   1131c:	80 e0       	ldi	r24, 0x00	; 0
write():
   1131e:	10 97       	sbiw	r26, 0x00	; 0
   11320:	89 f0       	breq	.+34     	; 0x11344 <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   11322:	fd 01       	movw	r30, r26
   11324:	01 90       	ld	r0, Z+
   11326:	00 20       	and	r0, r0
   11328:	e9 f7       	brne	.-6      	; 0x11324 <Print::printNumber(unsigned long, unsigned char)+0x6c>
   1132a:	31 97       	sbiw	r30, 0x01	; 1
   1132c:	af 01       	movw	r20, r30
   1132e:	4a 1b       	sub	r20, r26
   11330:	5b 0b       	sbc	r21, r27
   11332:	d7 01       	movw	r26, r14
   11334:	ed 91       	ld	r30, X+
   11336:	fc 91       	ld	r31, X
   11338:	02 80       	ldd	r0, Z+2	; 0x02
   1133a:	f3 81       	ldd	r31, Z+3	; 0x03
   1133c:	e0 2d       	mov	r30, r0
   1133e:	b8 01       	movw	r22, r16
   11340:	c7 01       	movw	r24, r14
   11342:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   11344:	a1 96       	adiw	r28, 0x21	; 33
   11346:	0f b6       	in	r0, 0x3f	; 63
   11348:	f8 94       	cli
   1134a:	de bf       	out	0x3e, r29	; 62
   1134c:	0f be       	out	0x3f, r0	; 63
   1134e:	cd bf       	out	0x3d, r28	; 61
   11350:	df 91       	pop	r29
   11352:	cf 91       	pop	r28
   11354:	1f 91       	pop	r17
   11356:	0f 91       	pop	r16
   11358:	ff 90       	pop	r15
   1135a:	ef 90       	pop	r14
   1135c:	bf 90       	pop	r11
   1135e:	af 90       	pop	r10
   11360:	9f 90       	pop	r9
   11362:	8f 90       	pop	r8
   11364:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   11366:	69 5c       	subi	r22, 0xC9	; 201
   11368:	d1 cf       	rjmp	.-94     	; 0x1130c <Print::printNumber(unsigned long, unsigned char)+0x54>

0001136a <TwoWire::requestFrom(int, int) [clone .constprop.129]>:
_ZN7TwoWire11requestFromEii.constprop.129():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   1136a:	68 2f       	mov	r22, r24
   1136c:	88 e6       	ldi	r24, 0x68	; 104
   1136e:	0e 94 66 85 	call	0x10acc	; 0x10acc <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   11372:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   11376:	80 93 3e 11 	sts	0x113E, r24	; 0x80113e <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   1137a:	08 95       	ret

0001137c <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   1137c:	8f 92       	push	r8
   1137e:	9f 92       	push	r9
   11380:	af 92       	push	r10
   11382:	bf 92       	push	r11
   11384:	cf 92       	push	r12
   11386:	df 92       	push	r13
   11388:	ef 92       	push	r14
   1138a:	ff 92       	push	r15
   1138c:	0f 93       	push	r16
   1138e:	1f 93       	push	r17
   11390:	cf 93       	push	r28
   11392:	df 93       	push	r29
   11394:	7c 01       	movw	r14, r24
   11396:	eb 01       	movw	r28, r22
   11398:	6c 01       	movw	r12, r24
   1139a:	82 e0       	ldi	r24, 0x02	; 2
   1139c:	c8 0e       	add	r12, r24
   1139e:	d1 1c       	adc	r13, r1
   113a0:	47 01       	movw	r8, r14
   113a2:	e5 e0       	ldi	r30, 0x05	; 5
   113a4:	8e 0e       	add	r8, r30
   113a6:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   113a8:	10 e0       	ldi	r17, 0x00	; 0
   113aa:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   113ac:	f6 01       	movw	r30, r12
   113ae:	41 91       	ld	r20, Z+
   113b0:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   113b2:	50 e0       	ldi	r21, 0x00	; 0
   113b4:	70 e0       	ldi	r23, 0x00	; 0
   113b6:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   113b8:	2a e0       	ldi	r18, 0x0A	; 10
   113ba:	ce 01       	movw	r24, r28
   113bc:	0e 94 5c 89 	call	0x112b8	; 0x112b8 <Print::printNumber(unsigned long, unsigned char)>
   113c0:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   113c2:	e8 81       	ld	r30, Y
   113c4:	f9 81       	ldd	r31, Y+1	; 0x01
   113c6:	01 90       	ld	r0, Z+
   113c8:	f0 81       	ld	r31, Z
   113ca:	e0 2d       	mov	r30, r0
   113cc:	6e e2       	ldi	r22, 0x2E	; 46
   113ce:	ce 01       	movw	r24, r28
   113d0:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   113d2:	8a 0d       	add	r24, r10
   113d4:	9b 1d       	adc	r25, r11
   113d6:	08 0f       	add	r16, r24
   113d8:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   113da:	c8 14       	cp	r12, r8
   113dc:	d9 04       	cpc	r13, r9
   113de:	31 f7       	brne	.-52     	; 0x113ac <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   113e0:	f7 01       	movw	r30, r14
   113e2:	45 81       	ldd	r20, Z+5	; 0x05
   113e4:	50 e0       	ldi	r21, 0x00	; 0
   113e6:	70 e0       	ldi	r23, 0x00	; 0
   113e8:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   113ea:	2a e0       	ldi	r18, 0x0A	; 10
   113ec:	ce 01       	movw	r24, r28
   113ee:	0e 94 5c 89 	call	0x112b8	; 0x112b8 <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   113f2:	80 0f       	add	r24, r16
   113f4:	91 1f       	adc	r25, r17
   113f6:	df 91       	pop	r29
   113f8:	cf 91       	pop	r28
   113fa:	1f 91       	pop	r17
   113fc:	0f 91       	pop	r16
   113fe:	ff 90       	pop	r15
   11400:	ef 90       	pop	r14
   11402:	df 90       	pop	r13
   11404:	cf 90       	pop	r12
   11406:	bf 90       	pop	r11
   11408:	af 90       	pop	r10
   1140a:	9f 90       	pop	r9
   1140c:	8f 90       	pop	r8
   1140e:	08 95       	ret

00011410 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   11410:	1f 93       	push	r17
   11412:	cf 93       	push	r28
   11414:	df 93       	push	r29
   11416:	18 2f       	mov	r17, r24
   11418:	66 e2       	ldi	r22, 0x26	; 38
   1141a:	70 e0       	ldi	r23, 0x00	; 0
   1141c:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   11420:	c8 2f       	mov	r28, r24
   11422:	d0 e0       	ldi	r29, 0x00	; 0
   11424:	dc 2f       	mov	r29, r28
   11426:	cc 27       	eor	r28, r28
   11428:	67 e2       	ldi	r22, 0x27	; 39
   1142a:	70 e0       	ldi	r23, 0x00	; 0
   1142c:	81 2f       	mov	r24, r17
   1142e:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   11432:	8c 0f       	add	r24, r28
   11434:	9d 2f       	mov	r25, r29
   11436:	91 1d       	adc	r25, r1
   11438:	df 91       	pop	r29
   1143a:	cf 91       	pop	r28
   1143c:	1f 91       	pop	r17
   1143e:	08 95       	ret

00011440 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   11440:	1f 93       	push	r17
   11442:	cf 93       	push	r28
   11444:	df 93       	push	r29
   11446:	18 2f       	mov	r17, r24
   11448:	60 e2       	ldi	r22, 0x20	; 32
   1144a:	70 e0       	ldi	r23, 0x00	; 0
   1144c:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   11450:	c8 2f       	mov	r28, r24
   11452:	d0 e0       	ldi	r29, 0x00	; 0
   11454:	dc 2f       	mov	r29, r28
   11456:	cc 27       	eor	r28, r28
   11458:	61 e2       	ldi	r22, 0x21	; 33
   1145a:	70 e0       	ldi	r23, 0x00	; 0
   1145c:	81 2f       	mov	r24, r17
   1145e:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   11462:	8c 0f       	add	r24, r28
   11464:	9d 2f       	mov	r25, r29
   11466:	91 1d       	adc	r25, r1
   11468:	df 91       	pop	r29
   1146a:	cf 91       	pop	r28
   1146c:	1f 91       	pop	r17
   1146e:	08 95       	ret

00011470 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   11470:	0e 94 db bd 	call	0x17bb6	; 0x17bb6 <abort>

00011474 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   11474:	cf 92       	push	r12
   11476:	df 92       	push	r13
   11478:	ef 92       	push	r14
   1147a:	ff 92       	push	r15
   1147c:	0f 93       	push	r16
   1147e:	1f 93       	push	r17
   11480:	cf 93       	push	r28
   11482:	df 93       	push	r29
   11484:	cd b7       	in	r28, 0x3d	; 61
   11486:	de b7       	in	r29, 0x3e	; 62
   11488:	af 97       	sbiw	r28, 0x2f	; 47
   1148a:	0f b6       	in	r0, 0x3f	; 63
   1148c:	f8 94       	cli
   1148e:	de bf       	out	0x3e, r29	; 62
   11490:	0f be       	out	0x3f, r0	; 63
   11492:	cd bf       	out	0x3d, r28	; 61
   11494:	7c 01       	movw	r14, r24
   11496:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   11498:	02 ee       	ldi	r16, 0xE2	; 226
   1149a:	12 e0       	ldi	r17, 0x02	; 2
   1149c:	1a 83       	std	Y+2, r17	; 0x02
   1149e:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   114a0:	1c 86       	std	Y+12, r1	; 0x0c
   114a2:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
   114a4:	88 ee       	ldi	r24, 0xE8	; 232
   114a6:	93 e0       	ldi	r25, 0x03	; 3
   114a8:	a0 e0       	ldi	r26, 0x00	; 0
   114aa:	b0 e0       	ldi	r27, 0x00	; 0
   114ac:	8d 87       	std	Y+13, r24	; 0x0d
   114ae:	9e 87       	std	Y+14, r25	; 0x0e
   114b0:	af 87       	std	Y+15, r26	; 0x0f
   114b2:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   114b4:	88 e9       	ldi	r24, 0x98	; 152
   114b6:	92 e0       	ldi	r25, 0x02	; 2
   114b8:	9a 87       	std	Y+10, r25	; 0x0a
   114ba:	89 87       	std	Y+9, r24	; 0x09
   114bc:	88 e0       	ldi	r24, 0x08	; 8
   114be:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
   114c0:	19 8f       	std	Y+25, r17	; 0x19
   114c2:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   114c4:	1a 8e       	std	Y+26, r1	; 0x1a
   114c6:	1b 8e       	std	Y+27, r1	; 0x1b
   114c8:	1c 8e       	std	Y+28, r1	; 0x1c
   114ca:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   114cc:	1b a7       	std	Y+43, r17	; 0x2b
   114ce:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   114d0:	1c a6       	std	Y+44, r1	; 0x2c
   114d2:	1d a6       	std	Y+45, r1	; 0x2d
   114d4:	1e a6       	std	Y+46, r1	; 0x2e
   114d6:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   114d8:	80 91 67 0c 	lds	r24, 0x0C67	; 0x800c67 <Ethernet+0x2>
   114dc:	90 91 68 0c 	lds	r25, 0x0C68	; 0x800c68 <Ethernet+0x3>
   114e0:	a0 91 69 0c 	lds	r26, 0x0C69	; 0x800c69 <Ethernet+0x4>
   114e4:	b0 91 6a 0c 	lds	r27, 0x0C6A	; 0x800c6a <Ethernet+0x5>
   114e8:	8e a3       	std	Y+38, r24	; 0x26
   114ea:	9f a3       	std	Y+39, r25	; 0x27
   114ec:	a8 a7       	std	Y+40, r26	; 0x28
   114ee:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   114f0:	8b 83       	std	Y+3, r24	; 0x03
   114f2:	9c 83       	std	Y+4, r25	; 0x04
   114f4:	ad 83       	std	Y+5, r26	; 0x05
   114f6:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   114f8:	18 86       	std	Y+8, r1	; 0x08
   114fa:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   114fc:	ae 01       	movw	r20, r28
   114fe:	46 5d       	subi	r20, 0xD6	; 214
   11500:	5f 4f       	sbci	r21, 0xFF	; 255
   11502:	ce 01       	movw	r24, r28
   11504:	01 96       	adiw	r24, 0x01	; 1
   11506:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   1150a:	81 30       	cpi	r24, 0x01	; 1
   1150c:	91 05       	cpc	r25, r1
   1150e:	b1 f4       	brne	.+44     	; 0x1153c <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   11510:	d7 01       	movw	r26, r14
   11512:	ed 91       	ld	r30, X+
   11514:	fc 91       	ld	r31, X
   11516:	04 88       	ldd	r0, Z+20	; 0x14
   11518:	f5 89       	ldd	r31, Z+21	; 0x15
   1151a:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   1151c:	1d a3       	std	Y+37, r17	; 0x25
   1151e:	0c a3       	std	Y+36, r16	; 0x24
   11520:	8c a5       	ldd	r24, Y+44	; 0x2c
   11522:	9d a5       	ldd	r25, Y+45	; 0x2d
   11524:	ae a5       	ldd	r26, Y+46	; 0x2e
   11526:	bf a5       	ldd	r27, Y+47	; 0x2f
   11528:	8e a3       	std	Y+38, r24	; 0x26
   1152a:	9f a3       	std	Y+39, r25	; 0x27
   1152c:	a8 a7       	std	Y+40, r26	; 0x28
   1152e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   11530:	a6 01       	movw	r20, r12
   11532:	be 01       	movw	r22, r28
   11534:	6c 5d       	subi	r22, 0xDC	; 220
   11536:	7f 4f       	sbci	r23, 0xFF	; 255
   11538:	c7 01       	movw	r24, r14
   1153a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   1153c:	af 96       	adiw	r28, 0x2f	; 47
   1153e:	0f b6       	in	r0, 0x3f	; 63
   11540:	f8 94       	cli
   11542:	de bf       	out	0x3e, r29	; 62
   11544:	0f be       	out	0x3f, r0	; 63
   11546:	cd bf       	out	0x3d, r28	; 61
   11548:	df 91       	pop	r29
   1154a:	cf 91       	pop	r28
   1154c:	1f 91       	pop	r17
   1154e:	0f 91       	pop	r16
   11550:	ff 90       	pop	r15
   11552:	ef 90       	pop	r14
   11554:	df 90       	pop	r13
   11556:	cf 90       	pop	r12
   11558:	08 95       	ret

0001155a <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.190():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   1155a:	ef 92       	push	r14
   1155c:	ff 92       	push	r15
   1155e:	0f 93       	push	r16
   11560:	1f 93       	push	r17
   11562:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   11564:	e0 90 1f 0e 	lds	r14, 0x0E1F	; 0x800e1f <my_lcd+0xa>
   11568:	f0 90 20 0e 	lds	r15, 0x0E20	; 0x800e20 <my_lcd+0xb>
   1156c:	01 e0       	ldi	r16, 0x01	; 1
   1156e:	10 e0       	ldi	r17, 0x00	; 0
   11570:	ab 01       	movw	r20, r22
   11572:	bc 01       	movw	r22, r24
   11574:	85 e1       	ldi	r24, 0x15	; 21
   11576:	9e e0       	ldi	r25, 0x0E	; 14
   11578:	0e 94 b0 22 	call	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   1157c:	1f 91       	pop	r17
   1157e:	0f 91       	pop	r16
   11580:	ff 90       	pop	r15
   11582:	ef 90       	pop	r14
   11584:	08 95       	ret

00011586 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   11586:	8f 92       	push	r8
   11588:	9f 92       	push	r9
   1158a:	af 92       	push	r10
   1158c:	bf 92       	push	r11
   1158e:	cf 92       	push	r12
   11590:	df 92       	push	r13
   11592:	ef 92       	push	r14
   11594:	ff 92       	push	r15
   11596:	0f 93       	push	r16
   11598:	1f 93       	push	r17
   1159a:	cf 93       	push	r28
   1159c:	df 93       	push	r29
   1159e:	6c 01       	movw	r12, r24
   115a0:	eb 01       	movw	r28, r22
   115a2:	4a 01       	movw	r8, r20
   115a4:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   115a6:	9a 01       	movw	r18, r20
   115a8:	28 1b       	sub	r18, r24
   115aa:	39 0b       	sbc	r19, r25
   115ac:	89 01       	movw	r16, r18
   115ae:	0f 5f       	subi	r16, 0xFF	; 255
   115b0:	1f 4f       	sbci	r17, 0xFF	; 255
   115b2:	c7 01       	movw	r24, r14
   115b4:	86 1b       	sub	r24, r22
   115b6:	97 0b       	sbc	r25, r23
   115b8:	5c 01       	movw	r10, r24
   115ba:	4f ef       	ldi	r20, 0xFF	; 255
   115bc:	a4 1a       	sub	r10, r20
   115be:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   115c0:	17 ff       	sbrs	r17, 7
   115c2:	04 c0       	rjmp	.+8      	; 0x115cc <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   115c4:	89 01       	movw	r16, r18
   115c6:	00 95       	com	r16
   115c8:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   115ca:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   115cc:	b7 fe       	sbrs	r11, 7
   115ce:	04 c0       	rjmp	.+8      	; 0x115d8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   115d0:	5c 01       	movw	r10, r24
   115d2:	a0 94       	com	r10
   115d4:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   115d6:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   115d8:	a8 01       	movw	r20, r16
   115da:	be 01       	movw	r22, r28
   115dc:	c6 01       	movw	r24, r12
   115de:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   115e2:	a8 01       	movw	r20, r16
   115e4:	b7 01       	movw	r22, r14
   115e6:	c6 01       	movw	r24, r12
   115e8:	0e 94 ad 8a 	call	0x1155a	; 0x1155a <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   115ec:	e0 90 1f 0e 	lds	r14, 0x0E1F	; 0x800e1f <my_lcd+0xa>
   115f0:	f0 90 20 0e 	lds	r15, 0x0E20	; 0x800e20 <my_lcd+0xb>
   115f4:	85 01       	movw	r16, r10
   115f6:	21 e0       	ldi	r18, 0x01	; 1
   115f8:	30 e0       	ldi	r19, 0x00	; 0
   115fa:	ae 01       	movw	r20, r28
   115fc:	b6 01       	movw	r22, r12
   115fe:	85 e1       	ldi	r24, 0x15	; 21
   11600:	9e e0       	ldi	r25, 0x0E	; 14
   11602:	0e 94 b0 22 	call	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   11606:	e0 90 1f 0e 	lds	r14, 0x0E1F	; 0x800e1f <my_lcd+0xa>
   1160a:	f0 90 20 0e 	lds	r15, 0x0E20	; 0x800e20 <my_lcd+0xb>
   1160e:	21 e0       	ldi	r18, 0x01	; 1
   11610:	30 e0       	ldi	r19, 0x00	; 0
   11612:	ae 01       	movw	r20, r28
   11614:	b4 01       	movw	r22, r8
   11616:	85 e1       	ldi	r24, 0x15	; 21
   11618:	9e e0       	ldi	r25, 0x0E	; 14
   1161a:	0e 94 b0 22 	call	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   1161e:	df 91       	pop	r29
   11620:	cf 91       	pop	r28
   11622:	1f 91       	pop	r17
   11624:	0f 91       	pop	r16
   11626:	ff 90       	pop	r15
   11628:	ef 90       	pop	r14
   1162a:	df 90       	pop	r13
   1162c:	cf 90       	pop	r12
   1162e:	bf 90       	pop	r11
   11630:	af 90       	pop	r10
   11632:	9f 90       	pop	r9
   11634:	8f 90       	pop	r8
   11636:	08 95       	ret

00011638 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   11638:	ef 92       	push	r14
   1163a:	ff 92       	push	r15
   1163c:	0f 93       	push	r16
   1163e:	1f 93       	push	r17
   11640:	cf 93       	push	r28
   11642:	df 93       	push	r29
   11644:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   11646:	ea 01       	movw	r28, r20
   11648:	c8 1b       	sub	r28, r24
   1164a:	d9 0b       	sbc	r29, r25
   1164c:	9e 01       	movw	r18, r28
   1164e:	2f 5f       	subi	r18, 0xFF	; 255
   11650:	3f 4f       	sbci	r19, 0xFF	; 255
   11652:	df 01       	movw	r26, r30
   11654:	a6 1b       	sub	r26, r22
   11656:	b7 0b       	sbc	r27, r23
   11658:	8d 01       	movw	r16, r26
   1165a:	0f 5f       	subi	r16, 0xFF	; 255
   1165c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   1165e:	37 ff       	sbrs	r19, 7
   11660:	04 c0       	rjmp	.+8      	; 0x1166a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   11662:	9e 01       	movw	r18, r28
   11664:	20 95       	com	r18
   11666:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   11668:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   1166a:	17 ff       	sbrs	r17, 7
   1166c:	04 c0       	rjmp	.+8      	; 0x11676 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   1166e:	8d 01       	movw	r16, r26
   11670:	00 95       	com	r16
   11672:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   11674:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   11676:	e0 90 1f 0e 	lds	r14, 0x0E1F	; 0x800e1f <my_lcd+0xa>
   1167a:	f0 90 20 0e 	lds	r15, 0x0E20	; 0x800e20 <my_lcd+0xb>
   1167e:	ab 01       	movw	r20, r22
   11680:	bc 01       	movw	r22, r24
   11682:	85 e1       	ldi	r24, 0x15	; 21
   11684:	9e e0       	ldi	r25, 0x0E	; 14
   11686:	0e 94 b0 22 	call	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   1168a:	df 91       	pop	r29
   1168c:	cf 91       	pop	r28
   1168e:	1f 91       	pop	r17
   11690:	0f 91       	pop	r16
   11692:	ff 90       	pop	r15
   11694:	ef 90       	pop	r14
   11696:	08 95       	ret

00011698 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   11698:	cf 92       	push	r12
   1169a:	df 92       	push	r13
   1169c:	ef 92       	push	r14
   1169e:	ff 92       	push	r15
   116a0:	6b 01       	movw	r12, r22
   116a2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   116a4:	80 91 df 0c 	lds	r24, 0x0CDF	; 0x800cdf <SRAM+0x4>
   116a8:	90 91 e0 0c 	lds	r25, 0x0CE0	; 0x800ce0 <SRAM+0x5>
   116ac:	a0 91 e1 0c 	lds	r26, 0x0CE1	; 0x800ce1 <SRAM+0x6>
   116b0:	b0 91 e2 0c 	lds	r27, 0x0CE2	; 0x800ce2 <SRAM+0x7>
   116b4:	01 97       	sbiw	r24, 0x01	; 1
   116b6:	a1 40       	sbci	r26, 0x01	; 1
   116b8:	b1 05       	cpc	r27, r1
   116ba:	48 f0       	brcs	.+18     	; 0x116ce <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   116bc:	b7 01       	movw	r22, r14
   116be:	88 27       	eor	r24, r24
   116c0:	99 27       	eor	r25, r25
   116c2:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   116c6:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
   116ca:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   116ce:	99 27       	eor	r25, r25
   116d0:	8f 2d       	mov	r24, r15
   116d2:	7e 2d       	mov	r23, r14
   116d4:	6d 2d       	mov	r22, r13
   116d6:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   116da:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
   116de:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   116e2:	6c 2d       	mov	r22, r12
   116e4:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   116e8:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   116ec:	ff 90       	pop	r15
   116ee:	ef 90       	pop	r14
   116f0:	df 90       	pop	r13
   116f2:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   116f4:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>

000116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>:
_ZN7TwoWire17beginTransmissionEh.constprop.167():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   116f8:	91 e0       	ldi	r25, 0x01	; 1
   116fa:	90 93 43 11 	sts	0x1143, r25	; 0x801143 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   116fe:	80 93 42 11 	sts	0x1142, r24	; 0x801142 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   11702:	10 92 41 11 	sts	0x1141, r1	; 0x801141 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   11706:	10 92 40 11 	sts	0x1140, r1	; 0x801140 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
   1170a:	08 95       	ret

0001170c <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   1170c:	ef 92       	push	r14
   1170e:	ff 92       	push	r15
   11710:	0f 93       	push	r16
   11712:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   11714:	e5 e1       	ldi	r30, 0x15	; 21
   11716:	fe e0       	ldi	r31, 0x0E	; 14
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   11718:	04 89       	ldd	r16, Z+20	; 0x14
   1171a:	15 89       	ldd	r17, Z+21	; 0x15
   1171c:	22 89       	ldd	r18, Z+18	; 0x12
   1171e:	33 89       	ldd	r19, Z+19	; 0x13
   11720:	7c 01       	movw	r14, r24
   11722:	50 e0       	ldi	r21, 0x00	; 0
   11724:	40 e0       	ldi	r20, 0x00	; 0
   11726:	70 e0       	ldi	r23, 0x00	; 0
   11728:	60 e0       	ldi	r22, 0x00	; 0
   1172a:	cf 01       	movw	r24, r30
   1172c:	0e 94 b0 22 	call	0x4560	; 0x4560 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   11730:	1f 91       	pop	r17
   11732:	0f 91       	pop	r16
   11734:	ff 90       	pop	r15
   11736:	ef 90       	pop	r14
   11738:	08 95       	ret

0001173a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>:
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   1173a:	8f 92       	push	r8
   1173c:	9f 92       	push	r9
   1173e:	af 92       	push	r10
   11740:	bf 92       	push	r11
   11742:	cf 92       	push	r12
   11744:	df 92       	push	r13
   11746:	ef 92       	push	r14
   11748:	ff 92       	push	r15
   1174a:	0f 93       	push	r16
   1174c:	1f 93       	push	r17
   1174e:	cf 93       	push	r28
   11750:	df 93       	push	r29
   11752:	00 d0       	rcall	.+0      	; 0x11754 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1a>
   11754:	00 d0       	rcall	.+0      	; 0x11756 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1c>
   11756:	cd b7       	in	r28, 0x3d	; 61
   11758:	de b7       	in	r29, 0x3e	; 62
   1175a:	6c 01       	movw	r12, r24
   1175c:	5b 01       	movw	r10, r22
   1175e:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   11760:	10 92 22 0e 	sts	0x0E22, r1	; 0x800e22 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   11764:	20 93 21 0e 	sts	0x0E21, r18	; 0x800e21 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   11768:	10 93 1c 0e 	sts	0x0E1C, r17	; 0x800e1c <my_lcd+0x7>
   1176c:	00 93 1b 0e 	sts	0x0E1B, r16	; 0x800e1b <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   11770:	f0 92 1e 0e 	sts	0x0E1E, r15	; 0x800e1e <my_lcd+0x9>
   11774:	e0 92 1d 0e 	sts	0x0E1D, r14	; 0x800e1d <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   11778:	1a 82       	std	Y+2, r1	; 0x02
   1177a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1177c:	1c 82       	std	Y+4, r1	; 0x04
   1177e:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   11780:	1e 82       	std	Y+6, r1	; 0x06
   11782:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   11784:	00 97       	sbiw	r24, 0x00	; 0
   11786:	69 f1       	breq	.+90     	; 0x117e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0xa8>
   11788:	fc 01       	movw	r30, r24
   1178a:	01 90       	ld	r0, Z+
   1178c:	00 20       	and	r0, r0
   1178e:	e9 f7       	brne	.-6      	; 0x1178a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x50>
   11790:	31 97       	sbiw	r30, 0x01	; 1
   11792:	8f 01       	movw	r16, r30
   11794:	08 1b       	sub	r16, r24
   11796:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   11798:	b8 01       	movw	r22, r16
   1179a:	6f 5f       	subi	r22, 0xFF	; 255
   1179c:	7f 4f       	sbci	r23, 0xFF	; 255
   1179e:	90 e0       	ldi	r25, 0x00	; 0
   117a0:	80 e0       	ldi	r24, 0x00	; 0
   117a2:	0e 94 fa bc 	call	0x179f4	; 0x179f4 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   117a6:	00 97       	sbiw	r24, 0x00	; 0
   117a8:	81 f0       	breq	.+32     	; 0x117ca <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x90>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   117aa:	9a 83       	std	Y+2, r25	; 0x02
   117ac:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   117ae:	1c 83       	std	Y+4, r17	; 0x04
   117b0:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   117b2:	2d 81       	ldd	r18, Y+5	; 0x05
   117b4:	3e 81       	ldd	r19, Y+6	; 0x06
   117b6:	23 2b       	or	r18, r19
   117b8:	11 f4       	brne	.+4      	; 0x117be <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x84>
   117ba:	fc 01       	movw	r30, r24
   117bc:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   117be:	1e 83       	std	Y+6, r17	; 0x06
   117c0:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   117c2:	b6 01       	movw	r22, r12
   117c4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
   117c8:	0c c0       	rjmp	.+24     	; 0x117e2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0xa8>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   117ca:	89 81       	ldd	r24, Y+1	; 0x01
   117cc:	9a 81       	ldd	r25, Y+2	; 0x02
   117ce:	00 97       	sbiw	r24, 0x00	; 0
   117d0:	11 f0       	breq	.+4      	; 0x117d6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x9c>
   117d2:	0e 94 6a b6 	call	0x16cd4	; 0x16cd4 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   117d6:	1a 82       	std	Y+2, r1	; 0x02
   117d8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   117da:	1e 82       	std	Y+6, r1	; 0x06
   117dc:	1d 82       	std	Y+5, r1	; 0x05
   117de:	1c 82       	std	Y+4, r1	; 0x04
   117e0:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   117e2:	a4 01       	movw	r20, r8
   117e4:	b5 01       	movw	r22, r10
   117e6:	ce 01       	movw	r24, r28
   117e8:	01 96       	adiw	r24, 0x01	; 1
   117ea:	0e 94 0d 88 	call	0x1101a	; 0x1101a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   117ee:	89 81       	ldd	r24, Y+1	; 0x01
   117f0:	9a 81       	ldd	r25, Y+2	; 0x02
   117f2:	0e 94 6a b6 	call	0x16cd4	; 0x16cd4 <free>
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
}
   117f6:	26 96       	adiw	r28, 0x06	; 6
   117f8:	0f b6       	in	r0, 0x3f	; 63
   117fa:	f8 94       	cli
   117fc:	de bf       	out	0x3e, r29	; 62
   117fe:	0f be       	out	0x3f, r0	; 63
   11800:	cd bf       	out	0x3d, r28	; 61
   11802:	df 91       	pop	r29
   11804:	cf 91       	pop	r28
   11806:	1f 91       	pop	r17
   11808:	0f 91       	pop	r16
   1180a:	ff 90       	pop	r15
   1180c:	ef 90       	pop	r14
   1180e:	df 90       	pop	r13
   11810:	cf 90       	pop	r12
   11812:	bf 90       	pop	r11
   11814:	af 90       	pop	r10
   11816:	9f 90       	pop	r9
   11818:	8f 90       	pop	r8
   1181a:	08 95       	ret

0001181c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.148():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   1181c:	cf 93       	push	r28
   1181e:	df 93       	push	r29
   11820:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   11822:	fa 01       	movw	r30, r20
   11824:	32 96       	adiw	r30, 0x02	; 2
   11826:	e6 0f       	add	r30, r22
   11828:	f7 1f       	adc	r31, r23
   1182a:	dc 01       	movw	r26, r24
   1182c:	9d 01       	movw	r18, r26
   1182e:	2c 1b       	sub	r18, r28
   11830:	3d 0b       	sbc	r19, r29
   11832:	cf 01       	movw	r24, r30
   11834:	86 1b       	sub	r24, r22
   11836:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   11838:	4d 91       	ld	r20, X+
   1183a:	44 23       	and	r20, r20
   1183c:	11 f0       	breq	.+4      	; 0x11842 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   1183e:	41 93       	st	Z+, r20
   11840:	f5 cf       	rjmp	.-22     	; 0x1182c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   11842:	ac 01       	movw	r20, r24
   11844:	42 1b       	sub	r20, r18
   11846:	53 0b       	sbc	r21, r19
   11848:	64 0f       	add	r22, r20
   1184a:	75 1f       	adc	r23, r21
   1184c:	fb 01       	movw	r30, r22
   1184e:	32 97       	sbiw	r30, 0x02	; 2
   11850:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   11852:	61 50       	subi	r22, 0x01	; 1
   11854:	71 09       	sbc	r23, r1
   11856:	fb 01       	movw	r30, r22
   11858:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   1185a:	df 91       	pop	r29
   1185c:	cf 91       	pop	r28
   1185e:	08 95       	ret

00011860 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   11860:	ef 92       	push	r14
   11862:	ff 92       	push	r15
   11864:	0f 93       	push	r16
   11866:	1f 93       	push	r17
   11868:	cf 93       	push	r28
   1186a:	df 93       	push	r29
   1186c:	00 d0       	rcall	.+0      	; 0x1186e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0xe>
   1186e:	00 d0       	rcall	.+0      	; 0x11870 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x10>
   11870:	00 d0       	rcall	.+0      	; 0x11872 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x12>
   11872:	1f 92       	push	r1
   11874:	cd b7       	in	r28, 0x3d	; 61
   11876:	de b7       	in	r29, 0x3e	; 62
   11878:	fe 01       	movw	r30, r28
   1187a:	31 96       	adiw	r30, 0x01	; 1
   1187c:	ae 01       	movw	r20, r28
   1187e:	45 5f       	subi	r20, 0xF5	; 245
   11880:	5f 4f       	sbci	r21, 0xFF	; 255
   11882:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   11884:	20 91 06 0e 	lds	r18, 0x0E06	; 0x800e06 <my_touch+0xf>
   11888:	30 91 07 0e 	lds	r19, 0x0E07	; 0x800e07 <my_touch+0x10>
   1188c:	d9 01       	movw	r26, r18
   1188e:	6c 91       	ld	r22, X
   11890:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <my_touch+0x19>
   11894:	90 95       	com	r25
   11896:	96 23       	and	r25, r22
   11898:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
   1189a:	20 91 08 0e 	lds	r18, 0x0E08	; 0x800e08 <my_touch+0x11>
   1189e:	30 91 09 0e 	lds	r19, 0x0E09	; 0x800e09 <my_touch+0x12>
   118a2:	d9 01       	movw	r26, r18
   118a4:	6c 91       	ld	r22, X
   118a6:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_touch+0x1a>
   118aa:	90 95       	com	r25
   118ac:	96 23       	and	r25, r22
   118ae:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
   118b0:	20 91 0c 0e 	lds	r18, 0x0E0C	; 0x800e0c <my_touch+0x15>
   118b4:	30 91 0d 0e 	lds	r19, 0x0E0D	; 0x800e0d <my_touch+0x16>
   118b8:	d9 01       	movw	r26, r18
   118ba:	6c 91       	ld	r22, X
   118bc:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <my_touch+0x1c>
   118c0:	90 95       	com	r25
   118c2:	96 23       	and	r25, r22
   118c4:	9c 93       	st	X, r25
   118c6:	28 e0       	ldi	r18, 0x08	; 8
   118c8:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   118ca:	10 e8       	ldi	r17, 0x80	; 128
   118cc:	60 91 0c 0e 	lds	r22, 0x0E0C	; 0x800e0c <my_touch+0x15>
   118d0:	70 91 0d 0e 	lds	r23, 0x0E0D	; 0x800e0d <my_touch+0x16>
   118d4:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
   118d8:	08 2f       	mov	r16, r24
   118da:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   118dc:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
   118de:	09 f4       	brne	.+2      	; 0x118e2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x82>
   118e0:	b1 c0       	rjmp	.+354    	; 0x11a44 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   118e2:	0c 91       	ld	r16, X
   118e4:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
   118e6:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
   118e8:	60 91 08 0e 	lds	r22, 0x0E08	; 0x800e08 <my_touch+0x11>
   118ec:	70 91 09 0e 	lds	r23, 0x0E09	; 0x800e09 <my_touch+0x12>
   118f0:	db 01       	movw	r26, r22
   118f2:	0c 91       	ld	r16, X
   118f4:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_touch+0x1a>
   118f8:	90 95       	com	r25
   118fa:	90 23       	and	r25, r16
   118fc:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
   118fe:	60 91 08 0e 	lds	r22, 0x0E08	; 0x800e08 <my_touch+0x11>
   11902:	70 91 09 0e 	lds	r23, 0x0E09	; 0x800e09 <my_touch+0x12>
   11906:	db 01       	movw	r26, r22
   11908:	9c 91       	ld	r25, X
   1190a:	00 91 11 0e 	lds	r16, 0x0E11	; 0x800e11 <my_touch+0x1a>
   1190e:	90 2b       	or	r25, r16
   11910:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
   11912:	16 95       	lsr	r17
   11914:	21 50       	subi	r18, 0x01	; 1
   11916:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   11918:	c9 f6       	brne	.-78     	; 0x118cc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
   1191a:	20 91 08 0e 	lds	r18, 0x0E08	; 0x800e08 <my_touch+0x11>
   1191e:	30 91 09 0e 	lds	r19, 0x0E09	; 0x800e09 <my_touch+0x12>
   11922:	d9 01       	movw	r26, r18
   11924:	6c 91       	ld	r22, X
   11926:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_touch+0x1a>
   1192a:	90 95       	com	r25
   1192c:	96 23       	and	r25, r22
   1192e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
   11930:	20 91 08 0e 	lds	r18, 0x0E08	; 0x800e08 <my_touch+0x11>
   11934:	30 91 09 0e 	lds	r19, 0x0E09	; 0x800e09 <my_touch+0x12>
   11938:	d9 01       	movw	r26, r18
   1193a:	9c 91       	ld	r25, X
   1193c:	60 91 11 0e 	lds	r22, 0x0E11	; 0x800e11 <my_touch+0x1a>
   11940:	96 2b       	or	r25, r22
   11942:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
   11944:	20 91 08 0e 	lds	r18, 0x0E08	; 0x800e08 <my_touch+0x11>
   11948:	30 91 09 0e 	lds	r19, 0x0E09	; 0x800e09 <my_touch+0x12>
   1194c:	d9 01       	movw	r26, r18
   1194e:	6c 91       	ld	r22, X
   11950:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_touch+0x1a>
   11954:	90 95       	com	r25
   11956:	96 23       	and	r25, r22
   11958:	9c 93       	st	X, r25
   1195a:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   1195c:	30 e0       	ldi	r19, 0x00	; 0
   1195e:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   11960:	22 0f       	add	r18, r18
   11962:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
   11964:	00 91 08 0e 	lds	r16, 0x0E08	; 0x800e08 <my_touch+0x11>
   11968:	10 91 09 0e 	lds	r17, 0x0E09	; 0x800e09 <my_touch+0x12>
   1196c:	d8 01       	movw	r26, r16
   1196e:	7c 91       	ld	r23, X
   11970:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_touch+0x1a>
   11974:	90 95       	com	r25
   11976:	97 23       	and	r25, r23
   11978:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
   1197a:	00 91 08 0e 	lds	r16, 0x0E08	; 0x800e08 <my_touch+0x11>
   1197e:	10 91 09 0e 	lds	r17, 0x0E09	; 0x800e09 <my_touch+0x12>
   11982:	d8 01       	movw	r26, r16
   11984:	9c 91       	ld	r25, X
   11986:	70 91 11 0e 	lds	r23, 0x0E11	; 0x800e11 <my_touch+0x1a>
   1198a:	97 2b       	or	r25, r23
   1198c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
   1198e:	00 91 0a 0e 	lds	r16, 0x0E0A	; 0x800e0a <my_touch+0x13>
   11992:	10 91 0b 0e 	lds	r17, 0x0E0B	; 0x800e0b <my_touch+0x14>
   11996:	d8 01       	movw	r26, r16
   11998:	9c 91       	ld	r25, X
   1199a:	70 91 12 0e 	lds	r23, 0x0E12	; 0x800e12 <my_touch+0x1b>
   1199e:	97 23       	and	r25, r23
   119a0:	11 f0       	breq	.+4      	; 0x119a6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
   119a2:	2f 5f       	subi	r18, 0xFF	; 255
   119a4:	3f 4f       	sbci	r19, 0xFF	; 255
   119a6:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   119a8:	d9 f6       	brne	.-74     	; 0x11960 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
   119aa:	60 91 06 0e 	lds	r22, 0x0E06	; 0x800e06 <my_touch+0xf>
   119ae:	70 91 07 0e 	lds	r23, 0x0E07	; 0x800e07 <my_touch+0x10>
   119b2:	db 01       	movw	r26, r22
   119b4:	9c 91       	ld	r25, X
   119b6:	10 91 10 0e 	lds	r17, 0x0E10	; 0x800e10 <my_touch+0x19>
   119ba:	91 2b       	or	r25, r17
   119bc:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   119be:	94 e0       	ldi	r25, 0x04	; 4
   119c0:	36 95       	lsr	r19
   119c2:	27 95       	ror	r18
   119c4:	9a 95       	dec	r25
   119c6:	e1 f7       	brne	.-8      	; 0x119c0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   119c8:	d7 01       	movw	r26, r14
   119ca:	2d 93       	st	X+, r18
   119cc:	3d 93       	st	X+, r19
   119ce:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   119d0:	a4 17       	cp	r26, r20
   119d2:	b5 07       	cpc	r27, r21
   119d4:	09 f0       	breq	.+2      	; 0x119d8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x178>
   119d6:	56 cf       	rjmp	.-340    	; 0x11884 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x24>
   119d8:	cf 01       	movw	r24, r30
   119da:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   119dc:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   119de:	20 81       	ld	r18, Z
   119e0:	31 81       	ldd	r19, Z+1	; 0x01
   119e2:	12 96       	adiw	r26, 0x02	; 2
   119e4:	4d 91       	ld	r20, X+
   119e6:	5c 91       	ld	r21, X
   119e8:	13 97       	sbiw	r26, 0x03	; 3
   119ea:	42 17       	cp	r20, r18
   119ec:	53 07       	cpc	r21, r19
   119ee:	30 f4       	brcc	.+12     	; 0x119fc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   119f0:	51 83       	std	Z+1, r21	; 0x01
   119f2:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
   119f4:	13 96       	adiw	r26, 0x03	; 3
   119f6:	3c 93       	st	X, r19
   119f8:	2e 93       	st	-X, r18
   119fa:	12 97       	sbiw	r26, 0x02	; 2
   119fc:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   119fe:	8a 17       	cp	r24, r26
   11a00:	9b 07       	cpc	r25, r27
   11a02:	69 f7       	brne	.-38     	; 0x119de <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17e>
   11a04:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   11a06:	e8 17       	cp	r30, r24
   11a08:	f9 07       	cpc	r31, r25
   11a0a:	41 f7       	brne	.-48     	; 0x119dc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   11a0c:	8b 81       	ldd	r24, Y+3	; 0x03
   11a0e:	9c 81       	ldd	r25, Y+4	; 0x04
   11a10:	2d 81       	ldd	r18, Y+5	; 0x05
   11a12:	3e 81       	ldd	r19, Y+6	; 0x06
   11a14:	82 0f       	add	r24, r18
   11a16:	93 1f       	adc	r25, r19
   11a18:	2f 81       	ldd	r18, Y+7	; 0x07
   11a1a:	38 85       	ldd	r19, Y+8	; 0x08
   11a1c:	82 0f       	add	r24, r18
   11a1e:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   11a20:	63 e0       	ldi	r22, 0x03	; 3
   11a22:	70 e0       	ldi	r23, 0x00	; 0
   11a24:	0e 94 49 bb 	call	0x17692	; 0x17692 <__udivmodhi4>
   11a28:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
   11a2a:	2a 96       	adiw	r28, 0x0a	; 10
   11a2c:	0f b6       	in	r0, 0x3f	; 63
   11a2e:	f8 94       	cli
   11a30:	de bf       	out	0x3e, r29	; 62
   11a32:	0f be       	out	0x3f, r0	; 63
   11a34:	cd bf       	out	0x3d, r28	; 61
   11a36:	df 91       	pop	r29
   11a38:	cf 91       	pop	r28
   11a3a:	1f 91       	pop	r17
   11a3c:	0f 91       	pop	r16
   11a3e:	ff 90       	pop	r15
   11a40:	ef 90       	pop	r14
   11a42:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   11a44:	0c 91       	ld	r16, X
   11a46:	90 95       	com	r25
   11a48:	90 23       	and	r25, r16
   11a4a:	4d cf       	rjmp	.-358    	; 0x118e6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x86>

00011a4c <TwoWire::write(int) [clone .constprop.99]>:
_ZN7TwoWire5writeEi.constprop.99():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   11a4c:	68 2f       	mov	r22, r24
   11a4e:	84 e5       	ldi	r24, 0x54	; 84
   11a50:	9e e0       	ldi	r25, 0x0E	; 14
   11a52:	0c 94 7d 87 	jmp	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>

00011a56 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   11a56:	0f 93       	push	r16
   11a58:	1f 93       	push	r17
   11a5a:	cf 93       	push	r28
   11a5c:	df 93       	push	r29
   11a5e:	00 d0       	rcall	.+0      	; 0x11a60 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xa>
   11a60:	00 d0       	rcall	.+0      	; 0x11a62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xc>
   11a62:	cd b7       	in	r28, 0x3d	; 61
   11a64:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   11a66:	48 2f       	mov	r20, r24
   11a68:	43 70       	andi	r20, 0x03	; 3
   11a6a:	50 e0       	ldi	r21, 0x00	; 0
   11a6c:	50 93 2c 0e 	sts	0x0E2C, r21	; 0x800e2c <my_lcd+0x17>
   11a70:	40 93 2b 0e 	sts	0x0E2B, r20	; 0x800e2b <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   11a74:	28 2f       	mov	r18, r24
   11a76:	21 70       	andi	r18, 0x01	; 1
   11a78:	80 ff       	sbrs	r24, 0
   11a7a:	3d c1       	rjmp	.+634    	; 0x11cf6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2a0>
   11a7c:	80 91 25 0e 	lds	r24, 0x0E25	; 0x800e25 <my_lcd+0x10>
   11a80:	90 91 26 0e 	lds	r25, 0x0E26	; 0x800e26 <my_lcd+0x11>
   11a84:	90 93 28 0e 	sts	0x0E28, r25	; 0x800e28 <my_lcd+0x13>
   11a88:	80 93 27 0e 	sts	0x0E27, r24	; 0x800e27 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   11a8c:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <my_lcd+0xe>
   11a90:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <my_lcd+0xf>
   11a94:	21 11       	cpse	r18, r1
   11a96:	04 c0       	rjmp	.+8      	; 0x11aa0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4a>
   11a98:	80 91 25 0e 	lds	r24, 0x0E25	; 0x800e25 <my_lcd+0x10>
   11a9c:	90 91 26 0e 	lds	r25, 0x0E26	; 0x800e26 <my_lcd+0x11>
   11aa0:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_lcd+0x15>
   11aa4:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   11aa8:	a0 91 43 0e 	lds	r26, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   11aac:	b0 91 44 0e 	lds	r27, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   11ab0:	8c 91       	ld	r24, X
   11ab2:	90 91 4f 0e 	lds	r25, 0x0E4F	; 0x800e4f <my_lcd+0x3a>
   11ab6:	89 23       	and	r24, r25
   11ab8:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   11aba:	40 91 2d 0e 	lds	r20, 0x0E2D	; 0x800e2d <my_lcd+0x18>
   11abe:	50 91 2e 0e 	lds	r21, 0x0E2E	; 0x800e2e <my_lcd+0x19>
   11ac2:	80 91 2b 0e 	lds	r24, 0x0E2B	; 0x800e2b <my_lcd+0x16>
   11ac6:	90 91 2c 0e 	lds	r25, 0x0E2C	; 0x800e2c <my_lcd+0x17>
   11aca:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11ace:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11ad2:	20 91 50 0e 	lds	r18, 0x0E50	; 0x800e50 <my_lcd+0x3b>
   11ad6:	41 15       	cp	r20, r1
   11ad8:	51 05       	cpc	r21, r1
   11ada:	09 f0       	breq	.+2      	; 0x11ade <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x88>
   11adc:	13 c1       	rjmp	.+550    	; 0x11d04 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2ae>
   11ade:	01 97       	sbiw	r24, 0x01	; 1
   11ae0:	83 30       	cpi	r24, 0x03	; 3
   11ae2:	91 05       	cpc	r25, r1
   11ae4:	08 f0       	brcs	.+2      	; 0x11ae8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x92>
   11ae6:	0c c1       	rjmp	.+536    	; 0x11d00 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2aa>
   11ae8:	88 0f       	add	r24, r24
   11aea:	99 1f       	adc	r25, r25
   11aec:	fc 01       	movw	r30, r24
   11aee:	e0 5b       	subi	r30, 0xB0	; 176
   11af0:	fd 4f       	sbci	r31, 0xFD	; 253
   11af2:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   11af4:	30 91 3d 0e 	lds	r19, 0x0E3D	; 0x800e3d <my_lcd+0x28>
   11af8:	40 91 3e 0e 	lds	r20, 0x0E3E	; 0x800e3e <my_lcd+0x29>
   11afc:	8c 91       	ld	r24, X
   11afe:	28 23       	and	r18, r24
   11b00:	2c 93       	st	X, r18
   11b02:	42 b9       	out	0x02, r20	; 2
   11b04:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b08:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b0c:	80 81       	ld	r24, Z
   11b0e:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11b12:	82 23       	and	r24, r18
   11b14:	80 83       	st	Z, r24
   11b16:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b1a:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b1e:	80 81       	ld	r24, Z
   11b20:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11b24:	82 2b       	or	r24, r18
   11b26:	80 83       	st	Z, r24
   11b28:	32 b9       	out	0x02, r19	; 2
   11b2a:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b2e:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b32:	80 81       	ld	r24, Z
   11b34:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11b38:	82 23       	and	r24, r18
   11b3a:	80 83       	st	Z, r24
   11b3c:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b40:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b44:	80 81       	ld	r24, Z
   11b46:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11b4a:	82 2b       	or	r24, r18
   11b4c:	80 83       	st	Z, r24
   11b4e:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11b52:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11b56:	80 81       	ld	r24, Z
   11b58:	20 91 4c 0e 	lds	r18, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11b5c:	82 2b       	or	r24, r18
   11b5e:	80 83       	st	Z, r24
   11b60:	80 e1       	ldi	r24, 0x10	; 16
   11b62:	82 b9       	out	0x02, r24	; 2
   11b64:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b68:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b6c:	80 81       	ld	r24, Z
   11b6e:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11b72:	82 23       	and	r24, r18
   11b74:	80 83       	st	Z, r24
   11b76:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b7a:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b7e:	80 81       	ld	r24, Z
   11b80:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11b84:	82 2b       	or	r24, r18
   11b86:	80 83       	st	Z, r24
   11b88:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11b8a:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11b8e:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11b92:	80 81       	ld	r24, Z
   11b94:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11b98:	89 23       	and	r24, r25
   11b9a:	80 83       	st	Z, r24
   11b9c:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11ba0:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11ba4:	80 81       	ld	r24, Z
   11ba6:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11baa:	89 2b       	or	r24, r25
   11bac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   11bae:	00 91 29 0e 	lds	r16, 0x0E29	; 0x800e29 <my_lcd+0x14>
   11bb2:	10 91 2a 0e 	lds	r17, 0x0E2A	; 0x800e2a <my_lcd+0x15>
   11bb6:	01 50       	subi	r16, 0x01	; 1
   11bb8:	11 09       	sbc	r17, r1
   11bba:	20 91 27 0e 	lds	r18, 0x0E27	; 0x800e27 <my_lcd+0x12>
   11bbe:	30 91 28 0e 	lds	r19, 0x0E28	; 0x800e28 <my_lcd+0x13>
   11bc2:	21 50       	subi	r18, 0x01	; 1
   11bc4:	31 09       	sbc	r19, r1
   11bc6:	50 e0       	ldi	r21, 0x00	; 0
   11bc8:	40 e0       	ldi	r20, 0x00	; 0
   11bca:	70 e0       	ldi	r23, 0x00	; 0
   11bcc:	60 e0       	ldi	r22, 0x00	; 0
   11bce:	85 e1       	ldi	r24, 0x15	; 21
   11bd0:	9e e0       	ldi	r25, 0x0E	; 14
   11bd2:	0e 94 61 3d 	call	0x7ac2	; 0x7ac2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   11bd6:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_lcd+0x18>
   11bda:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <my_lcd+0x19>
   11bde:	89 2b       	or	r24, r25
   11be0:	09 f0       	breq	.+2      	; 0x11be4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x18e>
   11be2:	9e c1       	rjmp	.+828    	; 0x11f20 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   11be4:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11be8:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11bec:	80 81       	ld	r24, Z
   11bee:	90 91 50 0e 	lds	r25, 0x0E50	; 0x800e50 <my_lcd+0x3b>
   11bf2:	89 23       	and	r24, r25
   11bf4:	80 83       	st	Z, r24
   11bf6:	80 91 39 0e 	lds	r24, 0x0E39	; 0x800e39 <my_lcd+0x24>
   11bfa:	82 b9       	out	0x02, r24	; 2
   11bfc:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11c00:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11c04:	80 81       	ld	r24, Z
   11c06:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11c0a:	89 23       	and	r24, r25
   11c0c:	80 83       	st	Z, r24
   11c0e:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11c12:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11c16:	80 81       	ld	r24, Z
   11c18:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11c1c:	89 2b       	or	r24, r25
   11c1e:	80 83       	st	Z, r24
   11c20:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11c24:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11c28:	80 81       	ld	r24, Z
   11c2a:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11c2e:	89 2b       	or	r24, r25
   11c30:	80 83       	st	Z, r24
   11c32:	83 e0       	ldi	r24, 0x03	; 3
   11c34:	82 b9       	out	0x02, r24	; 2
   11c36:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11c3a:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11c3e:	80 81       	ld	r24, Z
   11c40:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11c44:	89 23       	and	r24, r25
   11c46:	80 83       	st	Z, r24
   11c48:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11c4c:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11c50:	80 81       	ld	r24, Z
   11c52:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11c56:	89 2b       	or	r24, r25
   11c58:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   11c5a:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11c5e:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11c62:	80 81       	ld	r24, Z
   11c64:	90 91 50 0e 	lds	r25, 0x0E50	; 0x800e50 <my_lcd+0x3b>
   11c68:	89 23       	and	r24, r25
   11c6a:	80 83       	st	Z, r24
   11c6c:	80 91 3b 0e 	lds	r24, 0x0E3B	; 0x800e3b <my_lcd+0x26>
   11c70:	82 b9       	out	0x02, r24	; 2
   11c72:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11c76:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11c7a:	80 81       	ld	r24, Z
   11c7c:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11c80:	89 23       	and	r24, r25
   11c82:	80 83       	st	Z, r24
   11c84:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11c88:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11c8c:	80 81       	ld	r24, Z
   11c8e:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11c92:	89 2b       	or	r24, r25
   11c94:	80 83       	st	Z, r24
   11c96:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11c9a:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11c9e:	80 81       	ld	r24, Z
   11ca0:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11ca4:	89 2b       	or	r24, r25
   11ca6:	80 83       	st	Z, r24
   11ca8:	12 b8       	out	0x02, r1	; 2
   11caa:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11cae:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11cb2:	80 81       	ld	r24, Z
   11cb4:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11cb8:	89 23       	and	r24, r25
   11cba:	80 83       	st	Z, r24
   11cbc:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11cc0:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11cc4:	80 81       	ld	r24, Z
   11cc6:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11cca:	89 2b       	or	r24, r25
   11ccc:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   11cce:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   11cd2:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   11cd6:	80 81       	ld	r24, Z
   11cd8:	90 91 4b 0e 	lds	r25, 0x0E4B	; 0x800e4b <my_lcd+0x36>
   11cdc:	89 2b       	or	r24, r25
   11cde:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   11ce0:	26 96       	adiw	r28, 0x06	; 6
   11ce2:	0f b6       	in	r0, 0x3f	; 63
   11ce4:	f8 94       	cli
   11ce6:	de bf       	out	0x3e, r29	; 62
   11ce8:	0f be       	out	0x3f, r0	; 63
   11cea:	cd bf       	out	0x3d, r28	; 61
   11cec:	df 91       	pop	r29
   11cee:	cf 91       	pop	r28
   11cf0:	1f 91       	pop	r17
   11cf2:	0f 91       	pop	r16
   11cf4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   11cf6:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <my_lcd+0xe>
   11cfa:	90 91 24 0e 	lds	r25, 0x0E24	; 0x800e24 <my_lcd+0xf>
   11cfe:	c2 ce       	rjmp	.-636    	; 0x11a84 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   11d00:	90 e3       	ldi	r25, 0x30	; 48
   11d02:	f8 ce       	rjmp	.-528    	; 0x11af4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   11d04:	46 30       	cpi	r20, 0x06	; 6
   11d06:	51 05       	cpc	r21, r1
   11d08:	99 f5       	brne	.+102    	; 0x11d70 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   11d0a:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   11d0c:	81 30       	cpi	r24, 0x01	; 1
   11d0e:	91 05       	cpc	r25, r1
   11d10:	51 f0       	breq	.+20     	; 0x11d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   11d12:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   11d14:	81 30       	cpi	r24, 0x01	; 1
   11d16:	91 05       	cpc	r25, r1
   11d18:	30 f0       	brcs	.+12     	; 0x11d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   11d1a:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   11d1c:	82 30       	cpi	r24, 0x02	; 2
   11d1e:	91 05       	cpc	r25, r1
   11d20:	11 f0       	breq	.+4      	; 0x11d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
   11d22:	03 97       	sbiw	r24, 0x03	; 3
   11d24:	19 f1       	breq	.+70     	; 0x11d6c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   11d26:	8c 91       	ld	r24, X
   11d28:	28 23       	and	r18, r24
   11d2a:	2c 93       	st	X, r18
   11d2c:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <my_lcd+0x28>
   11d30:	82 b9       	out	0x02, r24	; 2
   11d32:	a0 91 47 0e 	lds	r26, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11d36:	b0 91 48 0e 	lds	r27, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11d3a:	8c 91       	ld	r24, X
   11d3c:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11d40:	89 23       	and	r24, r25
   11d42:	8c 93       	st	X, r24
   11d44:	a0 91 47 0e 	lds	r26, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11d48:	b0 91 48 0e 	lds	r27, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11d4c:	8c 91       	ld	r24, X
   11d4e:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11d52:	89 2b       	or	r24, r25
   11d54:	8c 93       	st	X, r24
   11d56:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11d5a:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11d5e:	8c 91       	ld	r24, X
   11d60:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11d64:	89 2b       	or	r24, r25
   11d66:	8c 93       	st	X, r24
   11d68:	f2 b9       	out	0x02, r31	; 2
   11d6a:	0f cf       	rjmp	.-482    	; 0x11b8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   11d6c:	f0 e6       	ldi	r31, 0x60	; 96
   11d6e:	db cf       	rjmp	.-74     	; 0x11d26 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   11d70:	48 30       	cpi	r20, 0x08	; 8
   11d72:	51 05       	cpc	r21, r1
   11d74:	99 f5       	brne	.+102    	; 0x11ddc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   11d76:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   11d78:	81 30       	cpi	r24, 0x01	; 1
   11d7a:	91 05       	cpc	r25, r1
   11d7c:	51 f0       	breq	.+20     	; 0x11d92 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   11d7e:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   11d80:	81 30       	cpi	r24, 0x01	; 1
   11d82:	91 05       	cpc	r25, r1
   11d84:	30 f0       	brcs	.+12     	; 0x11d92 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   11d86:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   11d88:	82 30       	cpi	r24, 0x02	; 2
   11d8a:	91 05       	cpc	r25, r1
   11d8c:	11 f0       	breq	.+4      	; 0x11d92 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
   11d8e:	03 97       	sbiw	r24, 0x03	; 3
   11d90:	19 f1       	breq	.+70     	; 0x11dd8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11d92:	8c 91       	ld	r24, X
   11d94:	28 23       	and	r18, r24
   11d96:	2c 93       	st	X, r18
   11d98:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <my_lcd+0x28>
   11d9c:	82 b9       	out	0x02, r24	; 2
   11d9e:	a0 91 47 0e 	lds	r26, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11da2:	b0 91 48 0e 	lds	r27, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11da6:	8c 91       	ld	r24, X
   11da8:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11dac:	89 23       	and	r24, r25
   11dae:	8c 93       	st	X, r24
   11db0:	a0 91 47 0e 	lds	r26, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11db4:	b0 91 48 0e 	lds	r27, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11db8:	8c 91       	ld	r24, X
   11dba:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11dbe:	89 2b       	or	r24, r25
   11dc0:	8c 93       	st	X, r24
   11dc2:	a0 91 45 0e 	lds	r26, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11dc6:	b0 91 46 0e 	lds	r27, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11dca:	8c 91       	ld	r24, X
   11dcc:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11dd0:	89 2b       	or	r24, r25
   11dd2:	8c 93       	st	X, r24
   11dd4:	e2 b9       	out	0x02, r30	; 2
   11dd6:	d9 ce       	rjmp	.-590    	; 0x11b8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   11dd8:	e8 e2       	ldi	r30, 0x28	; 40
   11dda:	db cf       	rjmp	.-74     	; 0x11d92 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   11ddc:	45 30       	cpi	r20, 0x05	; 5
   11dde:	51 05       	cpc	r21, r1
   11de0:	a1 f5       	brne	.+104    	; 0x11e4a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   11de2:	81 30       	cpi	r24, 0x01	; 1
   11de4:	91 05       	cpc	r25, r1
   11de6:	49 f1       	breq	.+82     	; 0x11e3a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e4>
   11de8:	70 f1       	brcs	.+92     	; 0x11e46 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f0>
   11dea:	82 30       	cpi	r24, 0x02	; 2
   11dec:	91 05       	cpc	r25, r1
   11dee:	39 f1       	breq	.+78     	; 0x11e3e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e8>
   11df0:	03 97       	sbiw	r24, 0x03	; 3
   11df2:	39 f1       	breq	.+78     	; 0x11e42 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11df4:	8c 91       	ld	r24, X
   11df6:	28 23       	and	r18, r24
   11df8:	2c 93       	st	X, r18
   11dfa:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <my_lcd+0x28>
   11dfe:	82 b9       	out	0x02, r24	; 2
   11e00:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11e04:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11e08:	80 81       	ld	r24, Z
   11e0a:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11e0e:	89 23       	and	r24, r25
   11e10:	80 83       	st	Z, r24
   11e12:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11e16:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11e1a:	80 81       	ld	r24, Z
   11e1c:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11e20:	89 2b       	or	r24, r25
   11e22:	80 83       	st	Z, r24
   11e24:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11e28:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11e2c:	80 81       	ld	r24, Z
   11e2e:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11e32:	89 2b       	or	r24, r25
   11e34:	80 83       	st	Z, r24
   11e36:	72 b9       	out	0x02, r23	; 2
   11e38:	a8 ce       	rjmp	.-688    	; 0x11b8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   11e3a:	78 e7       	ldi	r23, 0x78	; 120
   11e3c:	db cf       	rjmp	.-74     	; 0x11df4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   11e3e:	78 ec       	ldi	r23, 0xC8	; 200
   11e40:	d9 cf       	rjmp	.-78     	; 0x11df4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11e42:	78 ea       	ldi	r23, 0xA8	; 168
   11e44:	d7 cf       	rjmp	.-82     	; 0x11df4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   11e46:	78 e0       	ldi	r23, 0x08	; 8
   11e48:	d5 cf       	rjmp	.-86     	; 0x11df4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   11e4a:	47 30       	cpi	r20, 0x07	; 7
   11e4c:	51 05       	cpc	r21, r1
   11e4e:	a1 f5       	brne	.+104    	; 0x11eb8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   11e50:	81 30       	cpi	r24, 0x01	; 1
   11e52:	91 05       	cpc	r25, r1
   11e54:	49 f1       	breq	.+82     	; 0x11ea8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x452>
   11e56:	70 f1       	brcs	.+92     	; 0x11eb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45e>
   11e58:	82 30       	cpi	r24, 0x02	; 2
   11e5a:	91 05       	cpc	r25, r1
   11e5c:	39 f1       	breq	.+78     	; 0x11eac <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x456>
   11e5e:	03 97       	sbiw	r24, 0x03	; 3
   11e60:	39 f1       	breq	.+78     	; 0x11eb0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11e62:	8c 91       	ld	r24, X
   11e64:	28 23       	and	r18, r24
   11e66:	2c 93       	st	X, r18
   11e68:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <my_lcd+0x28>
   11e6c:	82 b9       	out	0x02, r24	; 2
   11e6e:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11e72:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11e76:	80 81       	ld	r24, Z
   11e78:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11e7c:	89 23       	and	r24, r25
   11e7e:	80 83       	st	Z, r24
   11e80:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11e84:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11e88:	80 81       	ld	r24, Z
   11e8a:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11e8e:	89 2b       	or	r24, r25
   11e90:	80 83       	st	Z, r24
   11e92:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11e96:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11e9a:	80 81       	ld	r24, Z
   11e9c:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11ea0:	89 2b       	or	r24, r25
   11ea2:	80 83       	st	Z, r24
   11ea4:	62 b9       	out	0x02, r22	; 2
   11ea6:	71 ce       	rjmp	.-798    	; 0x11b8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   11ea8:	68 ea       	ldi	r22, 0xA8	; 168
   11eaa:	db cf       	rjmp	.-74     	; 0x11e62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   11eac:	68 e1       	ldi	r22, 0x18	; 24
   11eae:	d9 cf       	rjmp	.-78     	; 0x11e62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11eb0:	68 e7       	ldi	r22, 0x78	; 120
   11eb2:	d7 cf       	rjmp	.-82     	; 0x11e62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   11eb4:	68 ec       	ldi	r22, 0xC8	; 200
   11eb6:	d5 cf       	rjmp	.-86     	; 0x11e62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   11eb8:	81 30       	cpi	r24, 0x01	; 1
   11eba:	91 05       	cpc	r25, r1
   11ebc:	49 f1       	breq	.+82     	; 0x11f10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ba>
   11ebe:	70 f1       	brcs	.+92     	; 0x11f1c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c6>
   11ec0:	82 30       	cpi	r24, 0x02	; 2
   11ec2:	91 05       	cpc	r25, r1
   11ec4:	39 f1       	breq	.+78     	; 0x11f14 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4be>
   11ec6:	03 97       	sbiw	r24, 0x03	; 3
   11ec8:	39 f1       	breq	.+78     	; 0x11f18 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11eca:	8c 91       	ld	r24, X
   11ecc:	28 23       	and	r18, r24
   11ece:	2c 93       	st	X, r18
   11ed0:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <my_lcd+0x28>
   11ed4:	82 b9       	out	0x02, r24	; 2
   11ed6:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11eda:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11ede:	80 81       	ld	r24, Z
   11ee0:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   11ee4:	89 23       	and	r24, r25
   11ee6:	80 83       	st	Z, r24
   11ee8:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   11eec:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   11ef0:	80 81       	ld	r24, Z
   11ef2:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   11ef6:	89 2b       	or	r24, r25
   11ef8:	80 83       	st	Z, r24
   11efa:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   11efe:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   11f02:	80 81       	ld	r24, Z
   11f04:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   11f08:	89 2b       	or	r24, r25
   11f0a:	80 83       	st	Z, r24
   11f0c:	32 b9       	out	0x02, r19	; 2
   11f0e:	3d ce       	rjmp	.-902    	; 0x11b8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   11f10:	38 e2       	ldi	r19, 0x28	; 40
   11f12:	db cf       	rjmp	.-74     	; 0x11eca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   11f14:	38 e9       	ldi	r19, 0x98	; 152
   11f16:	d9 cf       	rjmp	.-78     	; 0x11eca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11f18:	38 ef       	ldi	r19, 0xF8	; 248
   11f1a:	d7 cf       	rjmp	.-82     	; 0x11eca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   11f1c:	38 e4       	ldi	r19, 0x48	; 72
   11f1e:	d5 cf       	rjmp	.-86     	; 0x11eca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   11f20:	80 91 25 0e 	lds	r24, 0x0E25	; 0x800e25 <my_lcd+0x10>
   11f24:	90 91 26 0e 	lds	r25, 0x0E26	; 0x800e26 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   11f28:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   11f2a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   11f2c:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   11f2e:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   11f30:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   11f32:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   11f34:	60 91 39 0e 	lds	r22, 0x0E39	; 0x800e39 <my_lcd+0x24>
   11f38:	70 91 3a 0e 	lds	r23, 0x0E3A	; 0x800e3a <my_lcd+0x25>
   11f3c:	26 e0       	ldi	r18, 0x06	; 6
   11f3e:	ae 01       	movw	r20, r28
   11f40:	4f 5f       	subi	r20, 0xFF	; 255
   11f42:	5f 4f       	sbci	r21, 0xFF	; 255
   11f44:	85 e1       	ldi	r24, 0x15	; 21
   11f46:	9e e0       	ldi	r25, 0x0E	; 14
   11f48:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   11f4c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   11f4e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   11f50:	60 91 3b 0e 	lds	r22, 0x0E3B	; 0x800e3b <my_lcd+0x26>
   11f54:	70 91 3c 0e 	lds	r23, 0x0E3C	; 0x800e3c <my_lcd+0x27>
   11f58:	22 e0       	ldi	r18, 0x02	; 2
   11f5a:	ae 01       	movw	r20, r28
   11f5c:	4f 5f       	subi	r20, 0xFF	; 255
   11f5e:	5f 4f       	sbci	r21, 0xFF	; 255
   11f60:	85 e1       	ldi	r24, 0x15	; 21
   11f62:	9e e0       	ldi	r25, 0x0E	; 14
   11f64:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   11f68:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_lcd+0x18>
   11f6c:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <my_lcd+0x19>
   11f70:	01 97       	sbiw	r24, 0x01	; 1
   11f72:	61 f4       	brne	.+24     	; 0x11f8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   11f74:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   11f76:	21 e0       	ldi	r18, 0x01	; 1
   11f78:	ae 01       	movw	r20, r28
   11f7a:	4f 5f       	subi	r20, 0xFF	; 255
   11f7c:	5f 4f       	sbci	r21, 0xFF	; 255
   11f7e:	61 e0       	ldi	r22, 0x01	; 1
   11f80:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   11f82:	85 e1       	ldi	r24, 0x15	; 21
   11f84:	9e e0       	ldi	r25, 0x0E	; 14
   11f86:	0e 94 e4 3c 	call	0x79c8	; 0x79c8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   11f8a:	a1 ce       	rjmp	.-702    	; 0x11cce <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x278>
   11f8c:	20 e0       	ldi	r18, 0x00	; 0
   11f8e:	50 e0       	ldi	r21, 0x00	; 0
   11f90:	40 e0       	ldi	r20, 0x00	; 0
   11f92:	63 e1       	ldi	r22, 0x13	; 19
   11f94:	70 e0       	ldi	r23, 0x00	; 0
   11f96:	f5 cf       	rjmp	.-22     	; 0x11f82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x52c>

00011f98 <log_error(PubSubClient*, char*) [clone .constprop.60]>:
_Z9log_errorP12PubSubClientPc.constprop.60():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   11f98:	0f 93       	push	r16
   11f9a:	1f 93       	push	r17
   11f9c:	cf 93       	push	r28
   11f9e:	df 93       	push	r29
   11fa0:	cd b7       	in	r28, 0x3d	; 61
   11fa2:	de b7       	in	r29, 0x3e	; 62
   11fa4:	60 97       	sbiw	r28, 0x10	; 16
   11fa6:	0f b6       	in	r0, 0x3f	; 63
   11fa8:	f8 94       	cli
   11faa:	de bf       	out	0x3e, r29	; 62
   11fac:	0f be       	out	0x3f, r0	; 63
   11fae:	cd bf       	out	0x3d, r28	; 61
   11fb0:	8c 01       	movw	r16, r24
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
   11fb2:	69 ef       	ldi	r22, 0xF9	; 249
   11fb4:	76 e0       	ldi	r23, 0x06	; 6
   11fb6:	ce 01       	movw	r24, r28
   11fb8:	01 96       	adiw	r24, 0x01	; 1
   11fba:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
   11fbe:	a8 01       	movw	r20, r16
   11fc0:	be 01       	movw	r22, r28
   11fc2:	6f 5f       	subi	r22, 0xFF	; 255
   11fc4:	7f 4f       	sbci	r23, 0xFF	; 255
   11fc6:	8d e6       	ldi	r24, 0x6D	; 109
   11fc8:	9e e0       	ldi	r25, 0x0E	; 14
   11fca:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:455
}
   11fce:	60 96       	adiw	r28, 0x10	; 16
   11fd0:	0f b6       	in	r0, 0x3f	; 63
   11fd2:	f8 94       	cli
   11fd4:	de bf       	out	0x3e, r29	; 62
   11fd6:	0f be       	out	0x3f, r0	; 63
   11fd8:	cd bf       	out	0x3d, r28	; 61
   11fda:	df 91       	pop	r29
   11fdc:	cf 91       	pop	r28
   11fde:	1f 91       	pop	r17
   11fe0:	0f 91       	pop	r16
   11fe2:	08 95       	ret

00011fe4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>:
_Z10parseBytesPKccPhii.constprop.59():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   11fe4:	cf 92       	push	r12
   11fe6:	df 92       	push	r13
   11fe8:	ef 92       	push	r14
   11fea:	ff 92       	push	r15
   11fec:	0f 93       	push	r16
   11fee:	1f 93       	push	r17
   11ff0:	cf 93       	push	r28
   11ff2:	df 93       	push	r29
   11ff4:	8b 01       	movw	r16, r22
   11ff6:	7b 01       	movw	r14, r22
   11ff8:	e4 0e       	add	r14, r20
   11ffa:	f5 1e       	adc	r15, r21
   11ffc:	c6 e3       	ldi	r28, 0x36	; 54
   11ffe:	db e0       	ldi	r29, 0x0B	; 11
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   12000:	c8 2e       	mov	r12, r24
   12002:	88 0f       	add	r24, r24
   12004:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   12006:	4a e0       	ldi	r20, 0x0A	; 10
   12008:	50 e0       	ldi	r21, 0x00	; 0
   1200a:	70 e0       	ldi	r23, 0x00	; 0
   1200c:	60 e0       	ldi	r22, 0x00	; 0
   1200e:	ce 01       	movw	r24, r28
   12010:	0e 94 49 b0 	call	0x16092	; 0x16092 <strtoul>
   12014:	f8 01       	movw	r30, r16
   12016:	61 93       	st	Z+, r22
   12018:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    str = strchr(str, sep);               // Find next separator
   1201a:	b6 01       	movw	r22, r12
   1201c:	ce 01       	movw	r24, r28
   1201e:	0e 94 f4 bd 	call	0x17be8	; 0x17be8 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    if (str == NULL || *str == '\0') {
   12022:	00 97       	sbiw	r24, 0x00	; 0
   12024:	49 f0       	breq	.+18     	; 0x12038 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
   12026:	fc 01       	movw	r30, r24
   12028:	20 81       	ld	r18, Z
   1202a:	22 23       	and	r18, r18
   1202c:	29 f0       	breq	.+10     	; 0x12038 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   1202e:	ec 01       	movw	r28, r24
   12030:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   12032:	0e 15       	cp	r16, r14
   12034:	1f 05       	cpc	r17, r15
   12036:	39 f7       	brne	.-50     	; 0x12006 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:113
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   12038:	df 91       	pop	r29
   1203a:	cf 91       	pop	r28
   1203c:	1f 91       	pop	r17
   1203e:	0f 91       	pop	r16
   12040:	ff 90       	pop	r15
   12042:	ef 90       	pop	r14
   12044:	df 90       	pop	r13
   12046:	cf 90       	pop	r12
   12048:	08 95       	ret

0001204a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1204a:	ff 92       	push	r15
   1204c:	0f 93       	push	r16
   1204e:	1f 93       	push	r17
   12050:	cf 93       	push	r28
   12052:	df 93       	push	r29
   12054:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   12056:	10 e0       	ldi	r17, 0x00	; 0
   12058:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1205a:	8f 2d       	mov	r24, r15
   1205c:	0e 94 20 8a 	call	0x11440	; 0x11440 <W5500Class::readSnTX_FSR(unsigned char)>
   12060:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   12062:	89 2b       	or	r24, r25
   12064:	21 f0       	breq	.+8      	; 0x1206e <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   12066:	8f 2d       	mov	r24, r15
   12068:	0e 94 20 8a 	call	0x11440	; 0x11440 <W5500Class::readSnTX_FSR(unsigned char)>
   1206c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   1206e:	c0 17       	cp	r28, r16
   12070:	d1 07       	cpc	r29, r17
   12072:	99 f7       	brne	.-26     	; 0x1205a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   12074:	ce 01       	movw	r24, r28
   12076:	df 91       	pop	r29
   12078:	cf 91       	pop	r28
   1207a:	1f 91       	pop	r17
   1207c:	0f 91       	pop	r16
   1207e:	ff 90       	pop	r15
   12080:	08 95       	ret

00012082 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   12082:	ff 92       	push	r15
   12084:	0f 93       	push	r16
   12086:	1f 93       	push	r17
   12088:	cf 93       	push	r28
   1208a:	df 93       	push	r29
   1208c:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   1208e:	10 e0       	ldi	r17, 0x00	; 0
   12090:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   12092:	8f 2d       	mov	r24, r15
   12094:	0e 94 08 8a 	call	0x11410	; 0x11410 <W5500Class::readSnRX_RSR(unsigned char)>
   12098:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   1209a:	89 2b       	or	r24, r25
   1209c:	21 f0       	breq	.+8      	; 0x120a6 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   1209e:	8f 2d       	mov	r24, r15
   120a0:	0e 94 08 8a 	call	0x11410	; 0x11410 <W5500Class::readSnRX_RSR(unsigned char)>
   120a4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   120a6:	c0 17       	cp	r28, r16
   120a8:	d1 07       	cpc	r29, r17
   120aa:	99 f7       	brne	.-26     	; 0x12092 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   120ac:	ce 01       	movw	r24, r28
   120ae:	df 91       	pop	r29
   120b0:	cf 91       	pop	r28
   120b2:	1f 91       	pop	r17
   120b4:	0f 91       	pop	r16
   120b6:	ff 90       	pop	r15
   120b8:	08 95       	ret

000120ba <turnOffPWM.lto_priv.233>:
turnOffPWM.lto_priv.233():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   120ba:	82 50       	subi	r24, 0x02	; 2
   120bc:	82 31       	cpi	r24, 0x12	; 18
   120be:	08 f0       	brcs	.+2      	; 0x120c2 <turnOffPWM.lto_priv.233+0x8>
   120c0:	5f c0       	rjmp	.+190    	; 0x12180 <turnOffPWM.lto_priv.233+0xc6>
   120c2:	e8 2f       	mov	r30, r24
   120c4:	f0 e0       	ldi	r31, 0x00	; 0
   120c6:	88 27       	eor	r24, r24
   120c8:	e7 59       	subi	r30, 0x97	; 151
   120ca:	ff 46       	sbci	r31, 0x6F	; 111
   120cc:	8f 4f       	sbci	r24, 0xFF	; 255
   120ce:	0c 94 f2 bc 	jmp	0x179e4	; 0x179e4 <__tablejump2__>
   120d2:	bd 90       	ld	r11, X+
   120d4:	c1 90       	ld	r12, Z+
   120d6:	7b 90       	.word	0x907b	; ????
   120d8:	81 90       	ld	r8, Z+
   120da:	85 90       	lpm	r8, Z+
   120dc:	c0 90 89 90 	lds	r12, 0x9089	; 0x809089 <__bss_end+0x7ceb>
   120e0:	8f 90       	pop	r8
   120e2:	93 90       	.word	0x9093	; ????
   120e4:	99 90       	ld	r9, Y+
   120e6:	9d 90       	ld	r9, X+
   120e8:	a1 90       	ld	r10, Z+
   120ea:	a7 90       	elpm	r10, Z+
   120ec:	ab 90       	.word	0x90ab	; ????
   120ee:	c0 90 af 90 	lds	r12, 0x90AF	; 0x8090af <__bss_end+0x7d11>
   120f2:	b5 90       	lpm	r11, Z+
   120f4:	b9 90       	ld	r11, Y+
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   120f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   120fa:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   120fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   12100:	08 95       	ret
   12102:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   12106:	8f 7d       	andi	r24, 0xDF	; 223
   12108:	f9 cf       	rjmp	.-14     	; 0x120fc <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1210a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1210e:	87 7f       	andi	r24, 0xF7	; 247
   12110:	f5 cf       	rjmp	.-22     	; 0x120fc <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   12112:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   12116:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   12118:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1211c:	08 95       	ret
   1211e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   12122:	8f 7d       	andi	r24, 0xDF	; 223
   12124:	f9 cf       	rjmp	.-14     	; 0x12118 <turnOffPWM.lto_priv.233+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   12126:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1212a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1212c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   12130:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   12132:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   12136:	8f 7d       	andi	r24, 0xDF	; 223
   12138:	f9 cf       	rjmp	.-14     	; 0x1212c <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1213a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1213e:	87 7f       	andi	r24, 0xF7	; 247
   12140:	f5 cf       	rjmp	.-22     	; 0x1212c <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   12142:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   12146:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   12148:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1214c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   1214e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   12152:	8f 7d       	andi	r24, 0xDF	; 223
   12154:	f9 cf       	rjmp	.-14     	; 0x12148 <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   12156:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1215a:	87 7f       	andi	r24, 0xF7	; 247
   1215c:	f5 cf       	rjmp	.-22     	; 0x12148 <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   1215e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   12162:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   12164:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   12168:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1216a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1216e:	8f 7d       	andi	r24, 0xDF	; 223
   12170:	f9 cf       	rjmp	.-14     	; 0x12164 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   12172:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   12176:	87 7f       	andi	r24, 0xF7	; 247
   12178:	f5 cf       	rjmp	.-22     	; 0x12164 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   1217a:	84 b5       	in	r24, 0x24	; 36
   1217c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   1217e:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   12180:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   12182:	84 b5       	in	r24, 0x24	; 36
   12184:	8f 7d       	andi	r24, 0xDF	; 223
   12186:	fb cf       	rjmp	.-10     	; 0x1217e <turnOffPWM.lto_priv.233+0xc4>

00012188 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   12188:	1f 93       	push	r17
   1218a:	cf 93       	push	r28
   1218c:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   1218e:	28 2f       	mov	r18, r24
   12190:	30 e0       	ldi	r19, 0x00	; 0
   12192:	f9 01       	movw	r30, r18
   12194:	e6 53       	subi	r30, 0x36	; 54
   12196:	f1 4c       	sbci	r31, 0xC1	; 193
   12198:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1219a:	f9 01       	movw	r30, r18
   1219c:	e5 5f       	subi	r30, 0xF5	; 245
   1219e:	fb 4b       	sbci	r31, 0xBB	; 187
   121a0:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   121a2:	f9 01       	movw	r30, r18
   121a4:	ef 5a       	subi	r30, 0xAF	; 175
   121a6:	fb 4b       	sbci	r31, 0xBB	; 187
   121a8:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   121aa:	cc 23       	and	r28, r28
   121ac:	a9 f0       	breq	.+42     	; 0x121d8 <digitalWrite+0x50>
   121ae:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   121b0:	81 11       	cpse	r24, r1
   121b2:	0e 94 5d 90 	call	0x120ba	; 0x120ba <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   121b6:	ec 2f       	mov	r30, r28
   121b8:	f0 e0       	ldi	r31, 0x00	; 0
   121ba:	ee 0f       	add	r30, r30
   121bc:	ff 1f       	adc	r31, r31
   121be:	ef 5b       	subi	r30, 0xBF	; 191
   121c0:	fb 4b       	sbci	r31, 0xBB	; 187
   121c2:	a5 91       	lpm	r26, Z+
   121c4:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   121c6:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   121c8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   121ca:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   121cc:	11 11       	cpse	r17, r1
   121ce:	08 c0       	rjmp	.+16     	; 0x121e0 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   121d0:	d0 95       	com	r29
   121d2:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   121d4:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   121d6:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
   121d8:	df 91       	pop	r29
   121da:	cf 91       	pop	r28
   121dc:	1f 91       	pop	r17
   121de:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   121e0:	de 2b       	or	r29, r30
   121e2:	f8 cf       	rjmp	.-16     	; 0x121d4 <digitalWrite+0x4c>

000121e4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   121e4:	cf 92       	push	r12
   121e6:	df 92       	push	r13
   121e8:	ef 92       	push	r14
   121ea:	ff 92       	push	r15
   121ec:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   121ee:	c0 90 df 0c 	lds	r12, 0x0CDF	; 0x800cdf <SRAM+0x4>
   121f2:	d0 90 e0 0c 	lds	r13, 0x0CE0	; 0x800ce0 <SRAM+0x5>
   121f6:	e0 90 e1 0c 	lds	r14, 0x0CE1	; 0x800ce1 <SRAM+0x6>
   121fa:	f0 90 e2 0c 	lds	r15, 0x0CE2	; 0x800ce2 <SRAM+0x7>
   121fe:	6c 15       	cp	r22, r12
   12200:	7d 05       	cpc	r23, r13
   12202:	8e 05       	cpc	r24, r14
   12204:	9f 05       	cpc	r25, r15
   12206:	38 f5       	brcc	.+78     	; 0x12256 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x72>
   12208:	c4 2f       	mov	r28, r20
   1220a:	6b 01       	movw	r12, r22
   1220c:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1220e:	60 e0       	ldi	r22, 0x00	; 0
   12210:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
   12214:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   12218:	62 e0       	ldi	r22, 0x02	; 2
   1221a:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   1221e:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
   12222:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   12226:	c7 01       	movw	r24, r14
   12228:	b6 01       	movw	r22, r12
   1222a:	0e 94 4c 8b 	call	0x11698	; 0x11698 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   1222e:	6c 2f       	mov	r22, r28
   12230:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   12234:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
   12238:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1223c:	61 e0       	ldi	r22, 0x01	; 1
   1223e:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
   12242:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
   12246:	81 e0       	ldi	r24, 0x01	; 1
   12248:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   1224a:	cf 91       	pop	r28
   1224c:	ff 90       	pop	r15
   1224e:	ef 90       	pop	r14
   12250:	df 90       	pop	r13
   12252:	cf 90       	pop	r12
   12254:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   12256:	90 e0       	ldi	r25, 0x00	; 0
   12258:	80 e0       	ldi	r24, 0x00	; 0
   1225a:	f7 cf       	rjmp	.-18     	; 0x1224a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x66>

0001225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>:
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   1225c:	cf 92       	push	r12
   1225e:	df 92       	push	r13
   12260:	ef 92       	push	r14
   12262:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   12264:	c0 90 df 0c 	lds	r12, 0x0CDF	; 0x800cdf <SRAM+0x4>
   12268:	d0 90 e0 0c 	lds	r13, 0x0CE0	; 0x800ce0 <SRAM+0x5>
   1226c:	e0 90 e1 0c 	lds	r14, 0x0CE1	; 0x800ce1 <SRAM+0x6>
   12270:	f0 90 e2 0c 	lds	r15, 0x0CE2	; 0x800ce2 <SRAM+0x7>
   12274:	6c 15       	cp	r22, r12
   12276:	7d 05       	cpc	r23, r13
   12278:	8e 05       	cpc	r24, r14
   1227a:	9f 05       	cpc	r25, r15
   1227c:	28 f5       	brcc	.+74     	; 0x122c8 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x6c>
   1227e:	6b 01       	movw	r12, r22
   12280:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   12282:	60 e0       	ldi	r22, 0x00	; 0
   12284:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
   12288:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1228c:	63 e0       	ldi	r22, 0x03	; 3
   1228e:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   12292:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
   12296:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   1229a:	c7 01       	movw	r24, r14
   1229c:	b6 01       	movw	r22, r12
   1229e:	0e 94 4c 8b 	call	0x11698	; 0x11698 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   122a2:	6f ef       	ldi	r22, 0xFF	; 255
   122a4:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <SRAM>
   122a8:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <SRAM+0x1>
   122ac:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
   122b0:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   122b2:	61 e0       	ldi	r22, 0x01	; 1
   122b4:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <SRAM+0x8>
   122b8:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   122bc:	8f 2d       	mov	r24, r15
   122be:	ff 90       	pop	r15
   122c0:	ef 90       	pop	r14
   122c2:	df 90       	pop	r13
   122c4:	cf 90       	pop	r12
   122c6:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   122c8:	f1 2c       	mov	r15, r1
   122ca:	f8 cf       	rjmp	.-16     	; 0x122bc <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x60>

000122cc <EEPROM_CAT25::endCommand() [clone .constprop.90]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.90():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   122cc:	61 e0       	ldi	r22, 0x01	; 1
   122ce:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <SROM+0xa>
   122d2:	0c 94 c4 90 	jmp	0x12188	; 0x12188 <digitalWrite>

000122d6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   122d6:	cf 93       	push	r28
   122d8:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   122da:	60 e0       	ldi	r22, 0x00	; 0
   122dc:	80 91 d6 0c 	lds	r24, 0x0CD6	; 0x800cd6 <SROM+0xa>
   122e0:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   122e4:	6c 2f       	mov	r22, r28
   122e6:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
   122ea:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
   122ee:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   122f2:	c2 50       	subi	r28, 0x02	; 2
   122f4:	c2 30       	cpi	r28, 0x02	; 2
   122f6:	a8 f5       	brcc	.+106    	; 0x12362 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   122f8:	80 91 d0 0c 	lds	r24, 0x0CD0	; 0x800cd0 <SROM+0x4>
   122fc:	90 91 d1 0c 	lds	r25, 0x0CD1	; 0x800cd1 <SROM+0x5>
   12300:	a0 91 d2 0c 	lds	r26, 0x0CD2	; 0x800cd2 <SROM+0x6>
   12304:	b0 91 d3 0c 	lds	r27, 0x0CD3	; 0x800cd3 <SROM+0x7>
   12308:	01 97       	sbiw	r24, 0x01	; 1
   1230a:	a1 40       	sbci	r26, 0x01	; 1
   1230c:	b1 05       	cpc	r27, r1
   1230e:	38 f0       	brcs	.+14     	; 0x1231e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   12310:	60 e0       	ldi	r22, 0x00	; 0
   12312:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
   12316:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
   1231a:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1231e:	80 91 d0 0c 	lds	r24, 0x0CD0	; 0x800cd0 <SROM+0x4>
   12322:	90 91 d1 0c 	lds	r25, 0x0CD1	; 0x800cd1 <SROM+0x5>
   12326:	a0 91 d2 0c 	lds	r26, 0x0CD2	; 0x800cd2 <SROM+0x6>
   1232a:	b0 91 d3 0c 	lds	r27, 0x0CD3	; 0x800cd3 <SROM+0x7>
   1232e:	81 30       	cpi	r24, 0x01	; 1
   12330:	91 40       	sbci	r25, 0x01	; 1
   12332:	a1 05       	cpc	r26, r1
   12334:	b1 05       	cpc	r27, r1
   12336:	68 f0       	brcs	.+26     	; 0x12352 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
   12338:	80 91 ce 0c 	lds	r24, 0x0CCE	; 0x800cce <SROM+0x2>
   1233c:	90 91 cf 0c 	lds	r25, 0x0CCF	; 0x800ccf <SROM+0x3>
   12340:	0b 97       	sbiw	r24, 0x0b	; 11
   12342:	39 f0       	breq	.+14     	; 0x12352 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   12344:	60 e0       	ldi	r22, 0x00	; 0
   12346:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
   1234a:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
   1234e:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   12352:	60 e0       	ldi	r22, 0x00	; 0
   12354:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
   12358:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1235c:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1235e:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   12362:	cf 91       	pop	r28
   12364:	08 95       	ret

00012366 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.87():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   12366:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   12368:	85 e0       	ldi	r24, 0x05	; 5
   1236a:	0e 94 6b 91 	call	0x122d6	; 0x122d6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1236e:	6f ef       	ldi	r22, 0xFF	; 255
   12370:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <SROM>
   12374:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <SROM+0x1>
   12378:	0e 94 1b 3c 	call	0x7836	; 0x7836 <SoftSPIB::transfer(unsigned char)>
   1237c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   1237e:	0e 94 66 91 	call	0x122cc	; 0x122cc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   12382:	8c 2f       	mov	r24, r28
   12384:	cf 91       	pop	r28
   12386:	08 95       	ret

00012388 <TwoWire::begin() [clone .constprop.63]>:
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   12388:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   1238c:	10 92 3e 11 	sts	0x113E, r1	; 0x80113e <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   12390:	10 92 41 11 	sts	0x1141, r1	; 0x801141 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   12394:	10 92 40 11 	sts	0x1140, r1	; 0x801140 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   12398:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   1239c:	81 e0       	ldi	r24, 0x01	; 1
   1239e:	80 93 89 11 	sts	0x1189, r24	; 0x801189 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   123a2:	10 92 84 11 	sts	0x1184, r1	; 0x801184 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   123a6:	61 e0       	ldi	r22, 0x01	; 1
   123a8:	83 e1       	ldi	r24, 0x13	; 19
   123aa:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   123ae:	61 e0       	ldi	r22, 0x01	; 1
   123b0:	82 e1       	ldi	r24, 0x12	; 18
   123b2:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   123b6:	e9 eb       	ldi	r30, 0xB9	; 185
   123b8:	f0 e0       	ldi	r31, 0x00	; 0
   123ba:	80 81       	ld	r24, Z
   123bc:	8e 7f       	andi	r24, 0xFE	; 254
   123be:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   123c0:	80 81       	ld	r24, Z
   123c2:	8d 7f       	andi	r24, 0xFD	; 253
   123c4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   123c6:	88 e4       	ldi	r24, 0x48	; 72
   123c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   123cc:	85 e4       	ldi	r24, 0x45	; 69
   123ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   123d2:	85 ed       	ldi	r24, 0xD5	; 213
   123d4:	95 e8       	ldi	r25, 0x85	; 133
   123d6:	90 93 3c 11 	sts	0x113C, r25	; 0x80113c <twi_onSlaveTransmit+0x1>
   123da:	80 93 3b 11 	sts	0x113B, r24	; 0x80113b <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   123de:	86 ed       	ldi	r24, 0xD6	; 214
   123e0:	95 e8       	ldi	r25, 0x85	; 133
   123e2:	90 93 3a 11 	sts	0x113A, r25	; 0x80113a <twi_onSlaveReceive+0x1>
   123e6:	80 93 39 11 	sts	0x1139, r24	; 0x801139 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   123ea:	08 95       	ret

000123ec <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   123ec:	61 e0       	ldi	r22, 0x01	; 1
   123ee:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <SPI_CS>
   123f2:	0c 94 c4 90 	jmp	0x12188	; 0x12188 <digitalWrite>

000123f6 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   123f6:	60 e0       	ldi	r22, 0x00	; 0
   123f8:	80 91 3d 11 	lds	r24, 0x113D	; 0x80113d <SPI_CS>
   123fc:	0c 94 c4 90 	jmp	0x12188	; 0x12188 <digitalWrite>

00012400 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   12400:	1f 93       	push	r17
   12402:	cf 93       	push	r28
   12404:	df 93       	push	r29
   12406:	18 2f       	mov	r17, r24
   12408:	d6 2f       	mov	r29, r22
   1240a:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   1240c:	80 91 97 11 	lds	r24, 0x1197	; 0x801197 <wiznet_SPI_settings>
   12410:	90 91 98 11 	lds	r25, 0x1198	; 0x801198 <wiznet_SPI_settings+0x1>
   12414:	0e 94 b4 87 	call	0x10f68	; 0x10f68 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   12418:	0e 94 fb 91 	call	0x123f6	; 0x123f6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   1241c:	80 e0       	ldi	r24, 0x00	; 0
   1241e:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   12422:	81 2f       	mov	r24, r17
   12424:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   12428:	8d 2f       	mov	r24, r29
   1242a:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   1242e:	8c 2f       	mov	r24, r28
   12430:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   12434:	0e 94 f6 91 	call	0x123ec	; 0x123ec <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   12438:	81 e0       	ldi	r24, 0x01	; 1
   1243a:	df 91       	pop	r29
   1243c:	cf 91       	pop	r28
   1243e:	1f 91       	pop	r17
   12440:	08 95       	ret

00012442 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   12442:	cf 93       	push	r28
   12444:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   12446:	90 e0       	ldi	r25, 0x00	; 0
   12448:	fc 01       	movw	r30, r24
   1244a:	e5 5f       	subi	r30, 0xF5	; 245
   1244c:	fb 4b       	sbci	r31, 0xBB	; 187
   1244e:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   12450:	8f 5a       	subi	r24, 0xAF	; 175
   12452:	9b 4b       	sbci	r25, 0xBB	; 187
   12454:	fc 01       	movw	r30, r24
   12456:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   12458:	88 23       	and	r24, r24
   1245a:	c9 f0       	breq	.+50     	; 0x1248e <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1245c:	90 e0       	ldi	r25, 0x00	; 0
   1245e:	88 0f       	add	r24, r24
   12460:	99 1f       	adc	r25, r25
   12462:	fc 01       	movw	r30, r24
   12464:	e6 54       	subi	r30, 0x46	; 70
   12466:	f1 4c       	sbci	r31, 0xC1	; 193
   12468:	a5 91       	lpm	r26, Z+
   1246a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1246c:	fc 01       	movw	r30, r24
   1246e:	ef 5b       	subi	r30, 0xBF	; 191
   12470:	fb 4b       	sbci	r31, 0xBB	; 187
   12472:	c5 91       	lpm	r28, Z+
   12474:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   12476:	61 11       	cpse	r22, r1
   12478:	0d c0       	rjmp	.+26     	; 0x12494 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   1247a:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   1247c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   1247e:	8c 91       	ld	r24, X
   12480:	20 95       	com	r18
   12482:	82 23       	and	r24, r18
   12484:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   12486:	88 81       	ld	r24, Y
   12488:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1248a:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1248c:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1248e:	df 91       	pop	r29
   12490:	cf 91       	pop	r28
   12492:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   12494:	62 30       	cpi	r22, 0x02	; 2
   12496:	51 f4       	brne	.+20     	; 0x124ac <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   12498:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1249a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1249c:	3c 91       	ld	r19, X
   1249e:	82 2f       	mov	r24, r18
   124a0:	80 95       	com	r24
   124a2:	83 23       	and	r24, r19
   124a4:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   124a6:	e8 81       	ld	r30, Y
   124a8:	2e 2b       	or	r18, r30
   124aa:	ef cf       	rjmp	.-34     	; 0x1248a <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   124ac:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   124ae:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   124b0:	ec 91       	ld	r30, X
   124b2:	2e 2b       	or	r18, r30
   124b4:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   124b6:	8f bf       	out	0x3f, r24	; 63
   124b8:	ea cf       	rjmp	.-44     	; 0x1248e <pinMode+0x4c>

000124ba <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
   124ba:	8f 92       	push	r8
   124bc:	9f 92       	push	r9
   124be:	af 92       	push	r10
   124c0:	bf 92       	push	r11
   124c2:	cf 92       	push	r12
   124c4:	df 92       	push	r13
   124c6:	ef 92       	push	r14
   124c8:	ff 92       	push	r15
   124ca:	6b 01       	movw	r12, r22
   124cc:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
   124ce:	0e 94 bd 86 	call	0x10d7a	; 0x10d7a <micros>
   124d2:	4b 01       	movw	r8, r22
   124d4:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
   124d6:	c1 14       	cp	r12, r1
   124d8:	d1 04       	cpc	r13, r1
   124da:	e1 04       	cpc	r14, r1
   124dc:	f1 04       	cpc	r15, r1
   124de:	b9 f0       	breq	.+46     	; 0x1250e <delay+0x54>
   124e0:	0e 94 bd 86 	call	0x10d7a	; 0x10d7a <micros>
   124e4:	68 19       	sub	r22, r8
   124e6:	79 09       	sbc	r23, r9
   124e8:	8a 09       	sbc	r24, r10
   124ea:	9b 09       	sbc	r25, r11
   124ec:	68 3e       	cpi	r22, 0xE8	; 232
   124ee:	73 40       	sbci	r23, 0x03	; 3
   124f0:	81 05       	cpc	r24, r1
   124f2:	91 05       	cpc	r25, r1
   124f4:	80 f3       	brcs	.-32     	; 0x124d6 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
   124f6:	21 e0       	ldi	r18, 0x01	; 1
   124f8:	c2 1a       	sub	r12, r18
   124fa:	d1 08       	sbc	r13, r1
   124fc:	e1 08       	sbc	r14, r1
   124fe:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
   12500:	88 ee       	ldi	r24, 0xE8	; 232
   12502:	88 0e       	add	r8, r24
   12504:	83 e0       	ldi	r24, 0x03	; 3
   12506:	98 1e       	adc	r9, r24
   12508:	a1 1c       	adc	r10, r1
   1250a:	b1 1c       	adc	r11, r1
   1250c:	e4 cf       	rjmp	.-56     	; 0x124d6 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
   1250e:	ff 90       	pop	r15
   12510:	ef 90       	pop	r14
   12512:	df 90       	pop	r13
   12514:	cf 90       	pop	r12
   12516:	bf 90       	pop	r11
   12518:	af 90       	pop	r10
   1251a:	9f 90       	pop	r9
   1251c:	8f 90       	pop	r8
   1251e:	08 95       	ret

00012520 <LCDWIKI_KBV::reset() [clone .constprop.71]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.71():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   12520:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   12524:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   12528:	80 81       	ld	r24, Z
   1252a:	90 91 4b 0e 	lds	r25, 0x0E4B	; 0x800e4b <my_lcd+0x36>
   1252e:	89 2b       	or	r24, r25
   12530:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   12532:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <my_lcd+0x34>
   12536:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <my_lcd+0x35>
   1253a:	80 81       	ld	r24, Z
   1253c:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <my_lcd+0x39>
   12540:	89 2b       	or	r24, r25
   12542:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   12544:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   12548:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   1254c:	80 81       	ld	r24, Z
   1254e:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   12552:	89 2b       	or	r24, r25
   12554:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   12556:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <my_lcd+0x3e>
   1255a:	88 23       	and	r24, r24
   1255c:	71 f0       	breq	.+28     	; 0x1257a <LCDWIKI_KBV::reset() [clone .constprop.71]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   1255e:	60 e0       	ldi	r22, 0x00	; 0
   12560:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   12564:	62 e0       	ldi	r22, 0x02	; 2
   12566:	70 e0       	ldi	r23, 0x00	; 0
   12568:	80 e0       	ldi	r24, 0x00	; 0
   1256a:	90 e0       	ldi	r25, 0x00	; 0
   1256c:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   12570:	61 e0       	ldi	r22, 0x01	; 1
   12572:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <my_lcd+0x3e>
   12576:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   1257a:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   1257e:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   12582:	80 81       	ld	r24, Z
   12584:	90 91 4f 0e 	lds	r25, 0x0E4F	; 0x800e4f <my_lcd+0x3a>
   12588:	89 23       	and	r24, r25
   1258a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1258c:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   12590:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   12594:	80 81       	ld	r24, Z
   12596:	90 91 50 0e 	lds	r25, 0x0E50	; 0x800e50 <my_lcd+0x3b>
   1259a:	89 23       	and	r24, r25
   1259c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   1259e:	12 b8       	out	0x02, r1	; 2
   125a0:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   125a4:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   125a8:	80 81       	ld	r24, Z
   125aa:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   125ae:	89 23       	and	r24, r25
   125b0:	80 83       	st	Z, r24
   125b2:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   125b6:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   125ba:	80 81       	ld	r24, Z
   125bc:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   125c0:	89 2b       	or	r24, r25
   125c2:	80 83       	st	Z, r24
   125c4:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   125c6:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   125ca:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   125ce:	90 81       	ld	r25, Z
   125d0:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   125d4:	92 23       	and	r25, r18
   125d6:	90 83       	st	Z, r25
   125d8:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   125dc:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   125e0:	90 81       	ld	r25, Z
   125e2:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   125e6:	92 2b       	or	r25, r18
   125e8:	90 83       	st	Z, r25
   125ea:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   125ec:	61 f7       	brne	.-40     	; 0x125c6 <LCDWIKI_KBV::reset() [clone .constprop.71]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   125ee:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   125f2:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   125f6:	80 81       	ld	r24, Z
   125f8:	90 91 4b 0e 	lds	r25, 0x0E4B	; 0x800e4b <my_lcd+0x36>
   125fc:	89 2b       	or	r24, r25
   125fe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   12600:	08 95       	ret

00012602 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.69():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   12602:	cf 93       	push	r28
   12604:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   12606:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   1260a:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   1260e:	90 81       	ld	r25, Z
   12610:	20 91 4f 0e 	lds	r18, 0x0E4F	; 0x800e4f <my_lcd+0x3a>
   12614:	92 23       	and	r25, r18
   12616:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   12618:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   1261c:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   12620:	90 81       	ld	r25, Z
   12622:	20 91 50 0e 	lds	r18, 0x0E50	; 0x800e50 <my_lcd+0x3b>
   12626:	92 23       	and	r25, r18
   12628:	90 83       	st	Z, r25
   1262a:	12 b8       	out	0x02, r1	; 2
   1262c:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   12630:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   12634:	90 81       	ld	r25, Z
   12636:	20 91 51 0e 	lds	r18, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   1263a:	92 23       	and	r25, r18
   1263c:	90 83       	st	Z, r25
   1263e:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   12642:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   12646:	90 81       	ld	r25, Z
   12648:	20 91 4d 0e 	lds	r18, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   1264c:	92 2b       	or	r25, r18
   1264e:	90 83       	st	Z, r25
   12650:	82 b9       	out	0x02, r24	; 2
   12652:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   12656:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   1265a:	80 81       	ld	r24, Z
   1265c:	90 91 51 0e 	lds	r25, 0x0E51	; 0x800e51 <my_lcd+0x3c>
   12660:	89 23       	and	r24, r25
   12662:	80 83       	st	Z, r24
   12664:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   12668:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   1266c:	80 81       	ld	r24, Z
   1266e:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   12672:	89 2b       	or	r24, r25
   12674:	80 83       	st	Z, r24
   12676:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   1267a:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   1267e:	80 81       	ld	r24, Z
   12680:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   12684:	89 2b       	or	r24, r25
   12686:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   12688:	81 b1       	in	r24, 0x01	; 1
   1268a:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1268c:	61 e0       	ldi	r22, 0x01	; 1
   1268e:	70 e0       	ldi	r23, 0x00	; 0
   12690:	80 e0       	ldi	r24, 0x00	; 0
   12692:	90 e0       	ldi	r25, 0x00	; 0
   12694:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   12698:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <my_lcd+0x34>
   1269c:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <my_lcd+0x35>
   126a0:	80 81       	ld	r24, Z
   126a2:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <my_lcd+0x3d>
   126a6:	89 23       	and	r24, r25
   126a8:	80 83       	st	Z, r24
   126aa:	20 b1       	in	r18, 0x00	; 0
   126ac:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <my_lcd+0x34>
   126b0:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <my_lcd+0x35>
   126b4:	90 81       	ld	r25, Z
   126b6:	80 91 4e 0e 	lds	r24, 0x0E4E	; 0x800e4e <my_lcd+0x39>
   126ba:	98 2b       	or	r25, r24
   126bc:	90 83       	st	Z, r25
   126be:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <my_lcd+0x34>
   126c2:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <my_lcd+0x35>
   126c6:	90 81       	ld	r25, Z
   126c8:	80 91 52 0e 	lds	r24, 0x0E52	; 0x800e52 <my_lcd+0x3d>
   126cc:	98 23       	and	r25, r24
   126ce:	90 83       	st	Z, r25
   126d0:	80 b1       	in	r24, 0x00	; 0
   126d2:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <my_lcd+0x34>
   126d6:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <my_lcd+0x35>
   126da:	90 81       	ld	r25, Z
   126dc:	30 91 4e 0e 	lds	r19, 0x0E4E	; 0x800e4e <my_lcd+0x39>
   126e0:	93 2b       	or	r25, r19
   126e2:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   126e4:	c1 30       	cpi	r28, 0x01	; 1
   126e6:	79 f0       	breq	.+30     	; 0x12706 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   126e8:	e0 91 43 0e 	lds	r30, 0x0E43	; 0x800e43 <my_lcd+0x2e>
   126ec:	f0 91 44 0e 	lds	r31, 0x0E44	; 0x800e44 <my_lcd+0x2f>
   126f0:	90 81       	ld	r25, Z
   126f2:	30 91 4b 0e 	lds	r19, 0x0E4B	; 0x800e4b <my_lcd+0x36>
   126f6:	93 2b       	or	r25, r19
   126f8:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   126fa:	91 b1       	in	r25, 0x01	; 1
   126fc:	9f ef       	ldi	r25, 0xFF	; 255
   126fe:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   12700:	92 2f       	mov	r25, r18
   12702:	cf 91       	pop	r28
   12704:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   12706:	c0 e0       	ldi	r28, 0x00	; 0
   12708:	c7 cf       	rjmp	.-114    	; 0x12698 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x96>

0001270a <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1270a:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1270c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
   1270e:	60 91 2f 11 	lds	r22, 0x112F	; 0x80112f <timer0_millis>
   12712:	70 91 30 11 	lds	r23, 0x1130	; 0x801130 <timer0_millis+0x1>
   12716:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <timer0_millis+0x2>
   1271a:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
   1271e:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
   12720:	08 95       	ret

00012722 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>:
_ZN12PubSubClient8readByteEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   12722:	cf 92       	push	r12
   12724:	df 92       	push	r13
   12726:	ef 92       	push	r14
   12728:	ff 92       	push	r15
   1272a:	cf 93       	push	r28
   1272c:	df 93       	push	r29
   1272e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   12730:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   12734:	6b 01       	movw	r12, r22
   12736:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   12738:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
   1273c:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
   12740:	dc 01       	movw	r26, r24
   12742:	ed 91       	ld	r30, X+
   12744:	fc 91       	ld	r31, X
   12746:	00 84       	ldd	r0, Z+8	; 0x08
   12748:	f1 85       	ldd	r31, Z+9	; 0x09
   1274a:	e0 2d       	mov	r30, r0
   1274c:	19 95       	eicall
   1274e:	89 2b       	or	r24, r25
   12750:	69 f4       	brne	.+26     	; 0x1276c <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   12752:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   12756:	6c 19       	sub	r22, r12
   12758:	7d 09       	sbc	r23, r13
   1275a:	8e 09       	sbc	r24, r14
   1275c:	9f 09       	sbc	r25, r15
   1275e:	64 36       	cpi	r22, 0x64	; 100
   12760:	71 05       	cpc	r23, r1
   12762:	81 05       	cpc	r24, r1
   12764:	91 05       	cpc	r25, r1
   12766:	40 f3       	brcs	.-48     	; 0x12738 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   12768:	80 e0       	ldi	r24, 0x00	; 0
   1276a:	0d c0       	rjmp	.+26     	; 0x12786 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   1276c:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
   12770:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
   12774:	dc 01       	movw	r26, r24
   12776:	ed 91       	ld	r30, X+
   12778:	fc 91       	ld	r31, X
   1277a:	02 84       	ldd	r0, Z+10	; 0x0a
   1277c:	f3 85       	ldd	r31, Z+11	; 0x0b
   1277e:	e0 2d       	mov	r30, r0
   12780:	19 95       	eicall
   12782:	88 83       	st	Y, r24
   12784:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   12786:	df 91       	pop	r29
   12788:	cf 91       	pop	r28
   1278a:	ff 90       	pop	r15
   1278c:	ef 90       	pop	r14
   1278e:	df 90       	pop	r13
   12790:	cf 90       	pop	r12
   12792:	08 95       	ret

00012794 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>:
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   12794:	3f 92       	push	r3
   12796:	4f 92       	push	r4
   12798:	5f 92       	push	r5
   1279a:	6f 92       	push	r6
   1279c:	7f 92       	push	r7
   1279e:	8f 92       	push	r8
   127a0:	9f 92       	push	r9
   127a2:	af 92       	push	r10
   127a4:	bf 92       	push	r11
   127a6:	cf 92       	push	r12
   127a8:	df 92       	push	r13
   127aa:	ef 92       	push	r14
   127ac:	ff 92       	push	r15
   127ae:	0f 93       	push	r16
   127b0:	1f 93       	push	r17
   127b2:	cf 93       	push	r28
   127b4:	df 93       	push	r29
   127b6:	1f 92       	push	r1
   127b8:	cd b7       	in	r28, 0x3d	; 61
   127ba:	de b7       	in	r29, 0x3e	; 62
   127bc:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   127be:	8f e6       	ldi	r24, 0x6F	; 111
   127c0:	9e e0       	ldi	r25, 0x0E	; 14
   127c2:	0e 94 91 93 	call	0x12722	; 0x12722 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   127c6:	81 11       	cpse	r24, r1
   127c8:	16 c0       	rjmp	.+44     	; 0x127f6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   127ca:	10 e0       	ldi	r17, 0x00	; 0
   127cc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   127ce:	c8 01       	movw	r24, r16
   127d0:	0f 90       	pop	r0
   127d2:	df 91       	pop	r29
   127d4:	cf 91       	pop	r28
   127d6:	1f 91       	pop	r17
   127d8:	0f 91       	pop	r16
   127da:	ff 90       	pop	r15
   127dc:	ef 90       	pop	r14
   127de:	df 90       	pop	r13
   127e0:	cf 90       	pop	r12
   127e2:	bf 90       	pop	r11
   127e4:	af 90       	pop	r10
   127e6:	9f 90       	pop	r9
   127e8:	8f 90       	pop	r8
   127ea:	7f 90       	pop	r7
   127ec:	6f 90       	pop	r6
   127ee:	5f 90       	pop	r5
   127f0:	4f 90       	pop	r4
   127f2:	3f 90       	pop	r3
   127f4:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   127f6:	30 90 6f 0e 	lds	r3, 0x0E6F	; 0x800e6f <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   127fa:	19 82       	std	Y+1, r1	; 0x01
   127fc:	30 e7       	ldi	r19, 0x70	; 112
   127fe:	83 2e       	mov	r8, r19
   12800:	3e e0       	ldi	r19, 0x0E	; 14
   12802:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   12804:	ee 24       	eor	r14, r14
   12806:	e3 94       	inc	r14
   12808:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   1280a:	d1 2c       	mov	r13, r1
   1280c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   1280e:	41 2c       	mov	r4, r1
   12810:	51 2c       	mov	r5, r1
   12812:	32 01       	movw	r6, r4
   12814:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   12816:	ce 01       	movw	r24, r28
   12818:	01 96       	adiw	r24, 0x01	; 1
   1281a:	0e 94 91 93 	call	0x12722	; 0x12722 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   1281e:	88 23       	and	r24, r24
   12820:	a1 f2       	breq	.-88     	; 0x127ca <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   12822:	87 01       	movw	r16, r14
   12824:	0f 5f       	subi	r16, 0xFF	; 255
   12826:	1f 4f       	sbci	r17, 0xFF	; 255
   12828:	89 81       	ldd	r24, Y+1	; 0x01
   1282a:	d4 01       	movw	r26, r8
   1282c:	8d 93       	st	X+, r24
   1282e:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   12830:	28 2f       	mov	r18, r24
   12832:	2f 77       	andi	r18, 0x7F	; 127
   12834:	30 e0       	ldi	r19, 0x00	; 0
   12836:	24 9d       	mul	r18, r4
   12838:	a0 01       	movw	r20, r0
   1283a:	25 9d       	mul	r18, r5
   1283c:	50 0d       	add	r21, r0
   1283e:	34 9d       	mul	r19, r4
   12840:	50 0d       	add	r21, r0
   12842:	11 24       	eor	r1, r1
   12844:	c4 0e       	add	r12, r20
   12846:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   12848:	27 e0       	ldi	r18, 0x07	; 7
   1284a:	44 0c       	add	r4, r4
   1284c:	55 1c       	adc	r5, r5
   1284e:	66 1c       	adc	r6, r6
   12850:	77 1c       	adc	r7, r7
   12852:	2a 95       	dec	r18
   12854:	d1 f7       	brne	.-12     	; 0x1284a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   12856:	87 fd       	sbrc	r24, 7
   12858:	31 c0       	rjmp	.+98     	; 0x128bc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x128>
   1285a:	b3 2d       	mov	r27, r3
   1285c:	b0 7f       	andi	r27, 0xF0	; 240
   1285e:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   12860:	8f ef       	ldi	r24, 0xFF	; 255
   12862:	80 0f       	add	r24, r16
   12864:	f5 01       	movw	r30, r10
   12866:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   12868:	f0 e3       	ldi	r31, 0x30	; 48
   1286a:	bf 13       	cpse	r27, r31
   1286c:	29 c0       	rjmp	.+82     	; 0x128c0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   1286e:	c8 01       	movw	r24, r16
   12870:	81 59       	subi	r24, 0x91	; 145
   12872:	91 4f       	sbci	r25, 0xF1	; 241
   12874:	0e 94 91 93 	call	0x12722	; 0x12722 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   12878:	88 23       	and	r24, r24
   1287a:	09 f4       	brne	.+2      	; 0x1287e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xea>
   1287c:	a6 cf       	rjmp	.-180    	; 0x127ca <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   1287e:	c7 01       	movw	r24, r14
   12880:	8f 58       	subi	r24, 0x8F	; 143
   12882:	91 4f       	sbci	r25, 0xF1	; 241
   12884:	0e 94 91 93 	call	0x12722	; 0x12722 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   12888:	88 23       	and	r24, r24
   1288a:	09 f4       	brne	.+2      	; 0x1288e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xfa>
   1288c:	9e cf       	rjmp	.-196    	; 0x127ca <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   1288e:	0e 5f       	subi	r16, 0xFE	; 254
   12890:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   12892:	d5 01       	movw	r26, r10
   12894:	ec 91       	ld	r30, X
   12896:	f0 e0       	ldi	r31, 0x00	; 0
   12898:	e3 59       	subi	r30, 0x93	; 147
   1289a:	f1 4f       	sbci	r31, 0xF1	; 241
   1289c:	e3 80       	ldd	r14, Z+3	; 0x03
   1289e:	f1 2c       	mov	r15, r1
   128a0:	fe 2c       	mov	r15, r14
   128a2:	ee 24       	eor	r14, r14
   128a4:	84 81       	ldd	r24, Z+4	; 0x04
   128a6:	e8 0e       	add	r14, r24
   128a8:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   128aa:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <mqtt_client+0x2>
   128ae:	81 ff       	sbrs	r24, 1
   128b0:	03 c0       	rjmp	.+6      	; 0x128b8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   128b2:	b2 e0       	ldi	r27, 0x02	; 2
   128b4:	eb 0e       	add	r14, r27
   128b6:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   128b8:	92 e0       	ldi	r25, 0x02	; 2
   128ba:	05 c0       	rjmp	.+10     	; 0x128c6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   128bc:	78 01       	movw	r14, r16
   128be:	ab cf       	rjmp	.-170    	; 0x12816 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   128c0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   128c2:	f1 2c       	mov	r15, r1
   128c4:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   128c6:	69 2e       	mov	r6, r25
   128c8:	71 2c       	mov	r7, r1
   128ca:	60 1a       	sub	r6, r16
   128cc:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   128ce:	8e ef       	ldi	r24, 0xFE	; 254
   128d0:	88 2e       	mov	r8, r24
   128d2:	99 24       	eor	r9, r9
   128d4:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   128d6:	c3 01       	movw	r24, r6
   128d8:	80 0f       	add	r24, r16
   128da:	91 1f       	adc	r25, r17
   128dc:	8c 15       	cp	r24, r12
   128de:	9d 05       	cpc	r25, r13
   128e0:	78 f5       	brcc	.+94     	; 0x12940 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   128e2:	ce 01       	movw	r24, r28
   128e4:	01 96       	adiw	r24, 0x01	; 1
   128e6:	0e 94 91 93 	call	0x12722	; 0x12722 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   128ea:	88 23       	and	r24, r24
   128ec:	09 f4       	brne	.+2      	; 0x128f0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x15c>
   128ee:	6d cf       	rjmp	.-294    	; 0x127ca <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   128f0:	80 91 86 10 	lds	r24, 0x1086	; 0x801086 <mqtt_client+0x219>
   128f4:	90 91 87 10 	lds	r25, 0x1087	; 0x801087 <mqtt_client+0x21a>
   128f8:	00 97       	sbiw	r24, 0x00	; 0
   128fa:	b1 f0       	breq	.+44     	; 0x12928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   128fc:	e0 e3       	ldi	r30, 0x30	; 48
   128fe:	3e 12       	cpse	r3, r30
   12900:	13 c0       	rjmp	.+38     	; 0x12928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
   12902:	d5 01       	movw	r26, r10
   12904:	2c 91       	ld	r18, X
   12906:	f4 01       	movw	r30, r8
   12908:	e2 1b       	sub	r30, r18
   1290a:	f1 09       	sbc	r31, r1
   1290c:	9f 01       	movw	r18, r30
   1290e:	20 0f       	add	r18, r16
   12910:	31 1f       	adc	r19, r17
   12912:	e2 16       	cp	r14, r18
   12914:	f3 06       	cpc	r15, r19
   12916:	40 f4       	brcc	.+16     	; 0x12928 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   12918:	dc 01       	movw	r26, r24
   1291a:	ed 91       	ld	r30, X+
   1291c:	fc 91       	ld	r31, X
   1291e:	01 90       	ld	r0, Z+
   12920:	f0 81       	ld	r31, Z
   12922:	e0 2d       	mov	r30, r0
   12924:	69 81       	ldd	r22, Y+1	; 0x01
   12926:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   12928:	01 15       	cp	r16, r1
   1292a:	b2 e0       	ldi	r27, 0x02	; 2
   1292c:	1b 07       	cpc	r17, r27
   1292e:	28 f4       	brcc	.+10     	; 0x1293a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   12930:	89 81       	ldd	r24, Y+1	; 0x01
   12932:	f8 01       	movw	r30, r16
   12934:	e3 59       	subi	r30, 0x93	; 147
   12936:	f1 4f       	sbci	r31, 0xF1	; 241
   12938:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   1293a:	0f 5f       	subi	r16, 0xFF	; 255
   1293c:	1f 4f       	sbci	r17, 0xFF	; 255
   1293e:	cb cf       	rjmp	.-106    	; 0x128d6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   12940:	80 91 86 10 	lds	r24, 0x1086	; 0x801086 <mqtt_client+0x219>
   12944:	90 91 87 10 	lds	r25, 0x1087	; 0x801087 <mqtt_client+0x21a>
   12948:	89 2b       	or	r24, r25
   1294a:	09 f0       	breq	.+2      	; 0x1294e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ba>
   1294c:	40 cf       	rjmp	.-384    	; 0x127ce <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>
   1294e:	01 30       	cpi	r16, 0x01	; 1
   12950:	e2 e0       	ldi	r30, 0x02	; 2
   12952:	1e 07       	cpc	r17, r30
   12954:	08 f0       	brcs	.+2      	; 0x12958 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1c4>
   12956:	39 cf       	rjmp	.-398    	; 0x127ca <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   12958:	3a cf       	rjmp	.-396    	; 0x127ce <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>

0001295a <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   1295a:	1f 92       	push	r1
   1295c:	0f 92       	push	r0
   1295e:	0f b6       	in	r0, 0x3f	; 63
   12960:	0f 92       	push	r0
   12962:	11 24       	eor	r1, r1
   12964:	2f 93       	push	r18
   12966:	3f 93       	push	r19
   12968:	8f 93       	push	r24
   1296a:	9f 93       	push	r25
   1296c:	af 93       	push	r26
   1296e:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   12970:	80 91 2f 11 	lds	r24, 0x112F	; 0x80112f <timer0_millis>
   12974:	90 91 30 11 	lds	r25, 0x1130	; 0x801130 <timer0_millis+0x1>
   12978:	a0 91 31 11 	lds	r26, 0x1131	; 0x801131 <timer0_millis+0x2>
   1297c:	b0 91 32 11 	lds	r27, 0x1132	; 0x801132 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
   12980:	30 91 2e 11 	lds	r19, 0x112E	; 0x80112e <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
   12984:	23 e0       	ldi	r18, 0x03	; 3
   12986:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
   12988:	2d 37       	cpi	r18, 0x7D	; 125
   1298a:	58 f5       	brcc	.+86     	; 0x129e2 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
   1298c:	01 96       	adiw	r24, 0x01	; 1
   1298e:	a1 1d       	adc	r26, r1
   12990:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
   12992:	20 93 2e 11 	sts	0x112E, r18	; 0x80112e <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
   12996:	80 93 2f 11 	sts	0x112F, r24	; 0x80112f <timer0_millis>
   1299a:	90 93 30 11 	sts	0x1130, r25	; 0x801130 <timer0_millis+0x1>
   1299e:	a0 93 31 11 	sts	0x1131, r26	; 0x801131 <timer0_millis+0x2>
   129a2:	b0 93 32 11 	sts	0x1132, r27	; 0x801132 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
   129a6:	80 91 33 11 	lds	r24, 0x1133	; 0x801133 <timer0_overflow_count>
   129aa:	90 91 34 11 	lds	r25, 0x1134	; 0x801134 <timer0_overflow_count+0x1>
   129ae:	a0 91 35 11 	lds	r26, 0x1135	; 0x801135 <timer0_overflow_count+0x2>
   129b2:	b0 91 36 11 	lds	r27, 0x1136	; 0x801136 <timer0_overflow_count+0x3>
   129b6:	01 96       	adiw	r24, 0x01	; 1
   129b8:	a1 1d       	adc	r26, r1
   129ba:	b1 1d       	adc	r27, r1
   129bc:	80 93 33 11 	sts	0x1133, r24	; 0x801133 <timer0_overflow_count>
   129c0:	90 93 34 11 	sts	0x1134, r25	; 0x801134 <timer0_overflow_count+0x1>
   129c4:	a0 93 35 11 	sts	0x1135, r26	; 0x801135 <timer0_overflow_count+0x2>
   129c8:	b0 93 36 11 	sts	0x1136, r27	; 0x801136 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
   129cc:	bf 91       	pop	r27
   129ce:	af 91       	pop	r26
   129d0:	9f 91       	pop	r25
   129d2:	8f 91       	pop	r24
   129d4:	3f 91       	pop	r19
   129d6:	2f 91       	pop	r18
   129d8:	0f 90       	pop	r0
   129da:	0f be       	out	0x3f, r0	; 63
   129dc:	0f 90       	pop	r0
   129de:	1f 90       	pop	r1
   129e0:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
   129e2:	26 e8       	ldi	r18, 0x86	; 134
   129e4:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
   129e6:	02 96       	adiw	r24, 0x02	; 2
   129e8:	a1 1d       	adc	r26, r1
   129ea:	b1 1d       	adc	r27, r1
   129ec:	d2 cf       	rjmp	.-92     	; 0x12992 <__vector_23+0x38>

000129ee <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   129ee:	1f 92       	push	r1
   129f0:	0f 92       	push	r0
   129f2:	0f b6       	in	r0, 0x3f	; 63
   129f4:	0f 92       	push	r0
   129f6:	11 24       	eor	r1, r1
   129f8:	0b b6       	in	r0, 0x3b	; 59
   129fa:	0f 92       	push	r0
   129fc:	2f 93       	push	r18
   129fe:	3f 93       	push	r19
   12a00:	4f 93       	push	r20
   12a02:	5f 93       	push	r21
   12a04:	6f 93       	push	r22
   12a06:	7f 93       	push	r23
   12a08:	8f 93       	push	r24
   12a0a:	9f 93       	push	r25
   12a0c:	af 93       	push	r26
   12a0e:	bf 93       	push	r27
   12a10:	ef 93       	push	r30
   12a12:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   12a14:	88 ec       	ldi	r24, 0xC8	; 200
   12a16:	9b e0       	ldi	r25, 0x0B	; 11
   12a18:	0e 94 14 86 	call	0x10c28	; 0x10c28 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   12a1c:	ff 91       	pop	r31
   12a1e:	ef 91       	pop	r30
   12a20:	bf 91       	pop	r27
   12a22:	af 91       	pop	r26
   12a24:	9f 91       	pop	r25
   12a26:	8f 91       	pop	r24
   12a28:	7f 91       	pop	r23
   12a2a:	6f 91       	pop	r22
   12a2c:	5f 91       	pop	r21
   12a2e:	4f 91       	pop	r20
   12a30:	3f 91       	pop	r19
   12a32:	2f 91       	pop	r18
   12a34:	0f 90       	pop	r0
   12a36:	0b be       	out	0x3b, r0	; 59
   12a38:	0f 90       	pop	r0
   12a3a:	0f be       	out	0x3f, r0	; 63
   12a3c:	0f 90       	pop	r0
   12a3e:	1f 90       	pop	r1
   12a40:	18 95       	reti

00012a42 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   12a42:	1f 92       	push	r1
   12a44:	0f 92       	push	r0
   12a46:	0f b6       	in	r0, 0x3f	; 63
   12a48:	0f 92       	push	r0
   12a4a:	11 24       	eor	r1, r1
   12a4c:	0b b6       	in	r0, 0x3b	; 59
   12a4e:	0f 92       	push	r0
   12a50:	2f 93       	push	r18
   12a52:	8f 93       	push	r24
   12a54:	9f 93       	push	r25
   12a56:	ef 93       	push	r30
   12a58:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   12a5a:	e0 91 d8 0b 	lds	r30, 0x0BD8	; 0x800bd8 <Serial+0x10>
   12a5e:	f0 91 d9 0b 	lds	r31, 0x0BD9	; 0x800bd9 <Serial+0x11>
   12a62:	80 81       	ld	r24, Z
   12a64:	e0 91 de 0b 	lds	r30, 0x0BDE	; 0x800bde <Serial+0x16>
   12a68:	f0 91 df 0b 	lds	r31, 0x0BDF	; 0x800bdf <Serial+0x17>
   12a6c:	82 fd       	sbrc	r24, 2
   12a6e:	1d c0       	rjmp	.+58     	; 0x12aaa <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   12a70:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   12a72:	80 91 e1 0b 	lds	r24, 0x0BE1	; 0x800be1 <Serial+0x19>
   12a76:	8f 5f       	subi	r24, 0xFF	; 255
   12a78:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   12a7a:	20 91 e2 0b 	lds	r18, 0x0BE2	; 0x800be2 <Serial+0x1a>
   12a7e:	82 17       	cp	r24, r18
   12a80:	41 f0       	breq	.+16     	; 0x12a92 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   12a82:	e0 91 e1 0b 	lds	r30, 0x0BE1	; 0x800be1 <Serial+0x19>
   12a86:	f0 e0       	ldi	r31, 0x00	; 0
   12a88:	e8 53       	subi	r30, 0x38	; 56
   12a8a:	f4 4f       	sbci	r31, 0xF4	; 244
   12a8c:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   12a8e:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   12a92:	ff 91       	pop	r31
   12a94:	ef 91       	pop	r30
   12a96:	9f 91       	pop	r25
   12a98:	8f 91       	pop	r24
   12a9a:	2f 91       	pop	r18
   12a9c:	0f 90       	pop	r0
   12a9e:	0b be       	out	0x3b, r0	; 59
   12aa0:	0f 90       	pop	r0
   12aa2:	0f be       	out	0x3f, r0	; 63
   12aa4:	0f 90       	pop	r0
   12aa6:	1f 90       	pop	r1
   12aa8:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   12aaa:	80 81       	ld	r24, Z
   12aac:	f2 cf       	rjmp	.-28     	; 0x12a92 <__vector_25+0x50>

00012aae <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   12aae:	1f 92       	push	r1
   12ab0:	0f 92       	push	r0
   12ab2:	0f b6       	in	r0, 0x3f	; 63
   12ab4:	0f 92       	push	r0
   12ab6:	11 24       	eor	r1, r1
   12ab8:	0b b6       	in	r0, 0x3b	; 59
   12aba:	0f 92       	push	r0
   12abc:	2f 93       	push	r18
   12abe:	3f 93       	push	r19
   12ac0:	4f 93       	push	r20
   12ac2:	5f 93       	push	r21
   12ac4:	6f 93       	push	r22
   12ac6:	7f 93       	push	r23
   12ac8:	8f 93       	push	r24
   12aca:	9f 93       	push	r25
   12acc:	af 93       	push	r26
   12ace:	bf 93       	push	r27
   12ad0:	cf 93       	push	r28
   12ad2:	ef 93       	push	r30
   12ad4:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   12ad6:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   12ad8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   12adc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   12ae0:	e0 91 16 0a 	lds	r30, 0x0A16	; 0x800a16 <_ZL17a2d_interupt_func.lto_priv.228>
   12ae4:	f0 91 17 0a 	lds	r31, 0x0A17	; 0x800a17 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   12ae8:	68 2f       	mov	r22, r24
   12aea:	70 e0       	ldi	r23, 0x00	; 0
   12aec:	76 2f       	mov	r23, r22
   12aee:	66 27       	eor	r22, r22
   12af0:	69 0f       	add	r22, r25
   12af2:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   12af4:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <a2d_input>
   12af8:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   12afa:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   12afc:	ff 91       	pop	r31
   12afe:	ef 91       	pop	r30
   12b00:	cf 91       	pop	r28
   12b02:	bf 91       	pop	r27
   12b04:	af 91       	pop	r26
   12b06:	9f 91       	pop	r25
   12b08:	8f 91       	pop	r24
   12b0a:	7f 91       	pop	r23
   12b0c:	6f 91       	pop	r22
   12b0e:	5f 91       	pop	r21
   12b10:	4f 91       	pop	r20
   12b12:	3f 91       	pop	r19
   12b14:	2f 91       	pop	r18
   12b16:	0f 90       	pop	r0
   12b18:	0b be       	out	0x3b, r0	; 59
   12b1a:	0f 90       	pop	r0
   12b1c:	0f be       	out	0x3f, r0	; 63
   12b1e:	0f 90       	pop	r0
   12b20:	1f 90       	pop	r1
   12b22:	18 95       	reti

00012b24 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   12b24:	20 91 14 0a 	lds	r18, 0x0A14	; 0x800a14 <a2d_reference>
   12b28:	90 e4       	ldi	r25, 0x40	; 64
   12b2a:	29 9f       	mul	r18, r25
   12b2c:	90 01       	movw	r18, r0
   12b2e:	11 24       	eor	r1, r1
   12b30:	28 0f       	add	r18, r24
   12b32:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   12b36:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   12b3a:	ea e7       	ldi	r30, 0x7A	; 122
   12b3c:	f0 e0       	ldi	r31, 0x00	; 0
   12b3e:	80 81       	ld	r24, Z
   12b40:	80 64       	ori	r24, 0x40	; 64
   12b42:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   12b44:	08 95       	ret

00012b46 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   12b46:	cf 92       	push	r12
   12b48:	df 92       	push	r13
   12b4a:	ef 92       	push	r14
   12b4c:	ff 92       	push	r15
   12b4e:	0f 93       	push	r16
   12b50:	1f 93       	push	r17
   12b52:	cf 93       	push	r28
   12b54:	df 93       	push	r29
   12b56:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   12b58:	cf 80       	ldd	r12, Y+7	; 0x07
   12b5a:	d8 84       	ldd	r13, Y+8	; 0x08
   12b5c:	e9 84       	ldd	r14, Y+9	; 0x09
   12b5e:	fa 84       	ldd	r15, Y+10	; 0x0a
   12b60:	8f 85       	ldd	r24, Y+15	; 0x0f
   12b62:	98 89       	ldd	r25, Y+16	; 0x10
   12b64:	a9 89       	ldd	r26, Y+17	; 0x11
   12b66:	ba 89       	ldd	r27, Y+18	; 0x12
   12b68:	c8 0e       	add	r12, r24
   12b6a:	d9 1e       	adc	r13, r25
   12b6c:	ea 1e       	adc	r14, r26
   12b6e:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   12b70:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   12b74:	0b 89       	ldd	r16, Y+19	; 0x13
   12b76:	1c 89       	ldd	r17, Y+20	; 0x14
   12b78:	2d 89       	ldd	r18, Y+21	; 0x15
   12b7a:	3e 89       	ldd	r19, Y+22	; 0x16
   12b7c:	60 1b       	sub	r22, r16
   12b7e:	71 0b       	sbc	r23, r17
   12b80:	82 0b       	sbc	r24, r18
   12b82:	93 0b       	sbc	r25, r19
   12b84:	28 ee       	ldi	r18, 0xE8	; 232
   12b86:	33 e0       	ldi	r19, 0x03	; 3
   12b88:	40 e0       	ldi	r20, 0x00	; 0
   12b8a:	50 e0       	ldi	r21, 0x00	; 0
   12b8c:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
   12b90:	ca 01       	movw	r24, r20
   12b92:	b9 01       	movw	r22, r18
   12b94:	6c 0d       	add	r22, r12
   12b96:	7d 1d       	adc	r23, r13
   12b98:	8e 1d       	adc	r24, r14
   12b9a:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   12b9c:	df 91       	pop	r29
   12b9e:	cf 91       	pop	r28
   12ba0:	1f 91       	pop	r17
   12ba2:	0f 91       	pop	r16
   12ba4:	ff 90       	pop	r15
   12ba6:	ef 90       	pop	r14
   12ba8:	df 90       	pop	r13
   12baa:	cf 90       	pop	r12
   12bac:	08 95       	ret

00012bae <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   12bae:	cf 93       	push	r28
   12bb0:	df 93       	push	r29
   12bb2:	00 d0       	rcall	.+0      	; 0x12bb4 <NTPClient::getYear() const+0x6>
   12bb4:	1f 92       	push	r1
   12bb6:	cd b7       	in	r28, 0x3d	; 61
   12bb8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   12bba:	0e 94 a3 95 	call	0x12b46	; 0x12b46 <NTPClient::getEpochTime() const>
   12bbe:	69 83       	std	Y+1, r22	; 0x01
   12bc0:	7a 83       	std	Y+2, r23	; 0x02
   12bc2:	8b 83       	std	Y+3, r24	; 0x03
   12bc4:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   12bc6:	ce 01       	movw	r24, r28
   12bc8:	01 96       	adiw	r24, 0x01	; 1
   12bca:	0e 94 95 a2 	call	0x1452a	; 0x1452a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   12bce:	fc 01       	movw	r30, r24
   12bd0:	86 81       	ldd	r24, Z+6	; 0x06
   12bd2:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   12bd4:	84 59       	subi	r24, 0x94	; 148
   12bd6:	98 4f       	sbci	r25, 0xF8	; 248
   12bd8:	0f 90       	pop	r0
   12bda:	0f 90       	pop	r0
   12bdc:	0f 90       	pop	r0
   12bde:	0f 90       	pop	r0
   12be0:	df 91       	pop	r29
   12be2:	cf 91       	pop	r28
   12be4:	08 95       	ret

00012be6 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   12be6:	cf 93       	push	r28
   12be8:	df 93       	push	r29
   12bea:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   12bec:	89 e3       	ldi	r24, 0x39	; 57
   12bee:	95 e0       	ldi	r25, 0x05	; 5
   12bf0:	9e 83       	std	Y+6, r25	; 0x06
   12bf2:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   12bf4:	88 81       	ld	r24, Y
   12bf6:	99 81       	ldd	r25, Y+1	; 0x01
   12bf8:	dc 01       	movw	r26, r24
   12bfa:	ed 91       	ld	r30, X+
   12bfc:	fc 91       	ld	r31, X
   12bfe:	06 84       	ldd	r0, Z+14	; 0x0e
   12c00:	f7 85       	ldd	r31, Z+15	; 0x0f
   12c02:	e0 2d       	mov	r30, r0
   12c04:	69 e3       	ldi	r22, 0x39	; 57
   12c06:	75 e0       	ldi	r23, 0x05	; 5
   12c08:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   12c0a:	81 e0       	ldi	r24, 0x01	; 1
   12c0c:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   12c0e:	df 91       	pop	r29
   12c10:	cf 91       	pop	r28
   12c12:	08 95       	ret

00012c14 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   12c14:	cf 92       	push	r12
   12c16:	df 92       	push	r13
   12c18:	ef 92       	push	r14
   12c1a:	ff 92       	push	r15
   12c1c:	0f 93       	push	r16
   12c1e:	1f 93       	push	r17
   12c20:	cf 93       	push	r28
   12c22:	df 93       	push	r29
   12c24:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   12c26:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   12c2a:	0b 89       	ldd	r16, Y+19	; 0x13
   12c2c:	1c 89       	ldd	r17, Y+20	; 0x14
   12c2e:	2d 89       	ldd	r18, Y+21	; 0x15
   12c30:	3e 89       	ldd	r19, Y+22	; 0x16
   12c32:	60 1b       	sub	r22, r16
   12c34:	71 0b       	sbc	r23, r17
   12c36:	82 0b       	sbc	r24, r18
   12c38:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   12c3a:	cb 84       	ldd	r12, Y+11	; 0x0b
   12c3c:	dc 84       	ldd	r13, Y+12	; 0x0c
   12c3e:	ed 84       	ldd	r14, Y+13	; 0x0d
   12c40:	fe 84       	ldd	r15, Y+14	; 0x0e
   12c42:	6c 15       	cp	r22, r12
   12c44:	7d 05       	cpc	r23, r13
   12c46:	8e 05       	cpc	r24, r14
   12c48:	9f 05       	cpc	r25, r15
   12c4a:	28 f4       	brcc	.+10     	; 0x12c56 <NTPClient::update()+0x42>
   12c4c:	01 2b       	or	r16, r17
   12c4e:	02 2b       	or	r16, r18
   12c50:	03 2b       	or	r16, r19
   12c52:	09 f0       	breq	.+2      	; 0x12c56 <NTPClient::update()+0x42>
   12c54:	9e c0       	rjmp	.+316    	; 0x12d92 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   12c56:	8a 81       	ldd	r24, Y+2	; 0x02
   12c58:	81 11       	cpse	r24, r1
   12c5a:	03 c0       	rjmp	.+6      	; 0x12c62 <NTPClient::update()+0x4e>
   12c5c:	ce 01       	movw	r24, r28
   12c5e:	0e 94 f3 95 	call	0x12be6	; 0x12be6 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   12c62:	7e 01       	movw	r14, r28
   12c64:	87 e1       	ldi	r24, 0x17	; 23
   12c66:	e8 0e       	add	r14, r24
   12c68:	f1 1c       	adc	r15, r1
   12c6a:	8c e2       	ldi	r24, 0x2C	; 44
   12c6c:	fe 01       	movw	r30, r28
   12c6e:	7b 96       	adiw	r30, 0x1b	; 27
   12c70:	df 01       	movw	r26, r30
   12c72:	1d 92       	st	X+, r1
   12c74:	8a 95       	dec	r24
   12c76:	e9 f7       	brne	.-6      	; 0x12c72 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   12c78:	83 ee       	ldi	r24, 0xE3	; 227
   12c7a:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   12c7c:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   12c7e:	86 e0       	ldi	r24, 0x06	; 6
   12c80:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   12c82:	8c ee       	ldi	r24, 0xEC	; 236
   12c84:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   12c86:	81 e3       	ldi	r24, 0x31	; 49
   12c88:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   12c8a:	9e e4       	ldi	r25, 0x4E	; 78
   12c8c:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   12c8e:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   12c90:	84 e3       	ldi	r24, 0x34	; 52
   12c92:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   12c94:	88 81       	ld	r24, Y
   12c96:	99 81       	ldd	r25, Y+1	; 0x01
   12c98:	6b 81       	ldd	r22, Y+3	; 0x03
   12c9a:	7c 81       	ldd	r23, Y+4	; 0x04
   12c9c:	dc 01       	movw	r26, r24
   12c9e:	ed 91       	ld	r30, X+
   12ca0:	fc 91       	ld	r31, X
   12ca2:	06 88       	ldd	r0, Z+22	; 0x16
   12ca4:	f7 89       	ldd	r31, Z+23	; 0x17
   12ca6:	e0 2d       	mov	r30, r0
   12ca8:	4b e7       	ldi	r20, 0x7B	; 123
   12caa:	50 e0       	ldi	r21, 0x00	; 0
   12cac:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   12cae:	88 81       	ld	r24, Y
   12cb0:	99 81       	ldd	r25, Y+1	; 0x01
   12cb2:	dc 01       	movw	r26, r24
   12cb4:	ed 91       	ld	r30, X+
   12cb6:	fc 91       	ld	r31, X
   12cb8:	02 80       	ldd	r0, Z+2	; 0x02
   12cba:	f3 81       	ldd	r31, Z+3	; 0x03
   12cbc:	e0 2d       	mov	r30, r0
   12cbe:	40 e3       	ldi	r20, 0x30	; 48
   12cc0:	50 e0       	ldi	r21, 0x00	; 0
   12cc2:	b7 01       	movw	r22, r14
   12cc4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   12cc6:	88 81       	ld	r24, Y
   12cc8:	99 81       	ldd	r25, Y+1	; 0x01
   12cca:	dc 01       	movw	r26, r24
   12ccc:	ed 91       	ld	r30, X+
   12cce:	fc 91       	ld	r31, X
   12cd0:	00 8c       	ldd	r0, Z+24	; 0x18
   12cd2:	f1 8d       	ldd	r31, Z+25	; 0x19
   12cd4:	e0 2d       	mov	r30, r0
   12cd6:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   12cd8:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   12cda:	6a e0       	ldi	r22, 0x0A	; 10
   12cdc:	70 e0       	ldi	r23, 0x00	; 0
   12cde:	80 e0       	ldi	r24, 0x00	; 0
   12ce0:	90 e0       	ldi	r25, 0x00	; 0
   12ce2:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   12ce6:	88 81       	ld	r24, Y
   12ce8:	99 81       	ldd	r25, Y+1	; 0x01
   12cea:	dc 01       	movw	r26, r24
   12cec:	ed 91       	ld	r30, X+
   12cee:	fc 91       	ld	r31, X
   12cf0:	02 8c       	ldd	r0, Z+26	; 0x1a
   12cf2:	f3 8d       	ldd	r31, Z+27	; 0x1b
   12cf4:	e0 2d       	mov	r30, r0
   12cf6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   12cf8:	15 36       	cpi	r17, 0x65	; 101
   12cfa:	09 f4       	brne	.+2      	; 0x12cfe <NTPClient::update()+0xea>
   12cfc:	54 c0       	rjmp	.+168    	; 0x12da6 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   12cfe:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   12d00:	89 2b       	or	r24, r25
   12d02:	59 f3       	breq	.-42     	; 0x12cda <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   12d04:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   12d08:	21 2f       	mov	r18, r17
   12d0a:	30 e0       	ldi	r19, 0x00	; 0
   12d0c:	a9 01       	movw	r20, r18
   12d0e:	4f 5f       	subi	r20, 0xFF	; 255
   12d10:	5f 4f       	sbci	r21, 0xFF	; 255
   12d12:	ea e0       	ldi	r30, 0x0A	; 10
   12d14:	e4 9f       	mul	r30, r20
   12d16:	90 01       	movw	r18, r0
   12d18:	e5 9f       	mul	r30, r21
   12d1a:	30 0d       	add	r19, r0
   12d1c:	11 24       	eor	r1, r1
   12d1e:	89 01       	movw	r16, r18
   12d20:	33 0f       	add	r19, r19
   12d22:	22 0b       	sbc	r18, r18
   12d24:	33 0b       	sbc	r19, r19
   12d26:	ab 01       	movw	r20, r22
   12d28:	bc 01       	movw	r22, r24
   12d2a:	40 1b       	sub	r20, r16
   12d2c:	51 0b       	sbc	r21, r17
   12d2e:	62 0b       	sbc	r22, r18
   12d30:	73 0b       	sbc	r23, r19
   12d32:	4b 8b       	std	Y+19, r20	; 0x13
   12d34:	5c 8b       	std	Y+20, r21	; 0x14
   12d36:	6d 8b       	std	Y+21, r22	; 0x15
   12d38:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   12d3a:	88 81       	ld	r24, Y
   12d3c:	99 81       	ldd	r25, Y+1	; 0x01
   12d3e:	dc 01       	movw	r26, r24
   12d40:	ed 91       	ld	r30, X+
   12d42:	fc 91       	ld	r31, X
   12d44:	04 8c       	ldd	r0, Z+28	; 0x1c
   12d46:	f5 8d       	ldd	r31, Z+29	; 0x1d
   12d48:	e0 2d       	mov	r30, r0
   12d4a:	40 e3       	ldi	r20, 0x30	; 48
   12d4c:	50 e0       	ldi	r21, 0x00	; 0
   12d4e:	b7 01       	movw	r22, r14
   12d50:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   12d52:	fe 01       	movw	r30, r28
   12d54:	ff 96       	adiw	r30, 0x3f	; 63
   12d56:	80 81       	ld	r24, Z
   12d58:	91 81       	ldd	r25, Z+1	; 0x01
   12d5a:	98 27       	eor	r25, r24
   12d5c:	89 27       	eor	r24, r25
   12d5e:	98 27       	eor	r25, r24
   12d60:	b0 e0       	ldi	r27, 0x00	; 0
   12d62:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   12d64:	dc 01       	movw	r26, r24
   12d66:	99 27       	eor	r25, r25
   12d68:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   12d6a:	32 96       	adiw	r30, 0x02	; 2
   12d6c:	40 81       	ld	r20, Z
   12d6e:	51 81       	ldd	r21, Z+1	; 0x01
   12d70:	54 27       	eor	r21, r20
   12d72:	45 27       	eor	r20, r21
   12d74:	54 27       	eor	r21, r20
   12d76:	70 e0       	ldi	r23, 0x00	; 0
   12d78:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   12d7a:	84 2b       	or	r24, r20
   12d7c:	95 2b       	or	r25, r21
   12d7e:	a6 2b       	or	r26, r22
   12d80:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   12d82:	80 58       	subi	r24, 0x80	; 128
   12d84:	9e 47       	sbci	r25, 0x7E	; 126
   12d86:	aa 4a       	sbci	r26, 0xAA	; 170
   12d88:	b3 48       	sbci	r27, 0x83	; 131
   12d8a:	8f 87       	std	Y+15, r24	; 0x0f
   12d8c:	98 8b       	std	Y+16, r25	; 0x10
   12d8e:	a9 8b       	std	Y+17, r26	; 0x11
   12d90:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   12d92:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   12d94:	df 91       	pop	r29
   12d96:	cf 91       	pop	r28
   12d98:	1f 91       	pop	r17
   12d9a:	0f 91       	pop	r16
   12d9c:	ff 90       	pop	r15
   12d9e:	ef 90       	pop	r14
   12da0:	df 90       	pop	r13
   12da2:	cf 90       	pop	r12
   12da4:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   12da6:	80 e0       	ldi	r24, 0x00	; 0
   12da8:	f5 cf       	rjmp	.-22     	; 0x12d94 <NTPClient::update()+0x180>

00012daa <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   12daa:	1f 92       	push	r1
   12dac:	0f 92       	push	r0
   12dae:	0f b6       	in	r0, 0x3f	; 63
   12db0:	0f 92       	push	r0
   12db2:	11 24       	eor	r1, r1
   12db4:	0b b6       	in	r0, 0x3b	; 59
   12db6:	0f 92       	push	r0
   12db8:	2f 93       	push	r18
   12dba:	3f 93       	push	r19
   12dbc:	4f 93       	push	r20
   12dbe:	5f 93       	push	r21
   12dc0:	6f 93       	push	r22
   12dc2:	7f 93       	push	r23
   12dc4:	8f 93       	push	r24
   12dc6:	9f 93       	push	r25
   12dc8:	af 93       	push	r26
   12dca:	bf 93       	push	r27
   12dcc:	ef 93       	push	r30
   12dce:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   12dd0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   12dd4:	88 7f       	andi	r24, 0xF8	; 248
   12dd6:	80 36       	cpi	r24, 0x60	; 96
   12dd8:	09 f4       	brne	.+2      	; 0x12ddc <__vector_39+0x32>
   12dda:	4d c0       	rjmp	.+154    	; 0x12e76 <__vector_39+0xcc>
   12ddc:	08 f0       	brcs	.+2      	; 0x12de0 <__vector_39+0x36>
   12dde:	40 c0       	rjmp	.+128    	; 0x12e60 <__vector_39+0xb6>
   12de0:	88 32       	cpi	r24, 0x28	; 40
   12de2:	09 f4       	brne	.+2      	; 0x12de6 <__vector_39+0x3c>
   12de4:	a9 c0       	rjmp	.+338    	; 0x12f38 <__vector_39+0x18e>
   12de6:	28 f5       	brcc	.+74     	; 0x12e32 <__vector_39+0x88>
   12de8:	80 31       	cpi	r24, 0x10	; 16
   12dea:	09 f4       	brne	.+2      	; 0x12dee <__vector_39+0x44>
   12dec:	9d c0       	rjmp	.+314    	; 0x12f28 <__vector_39+0x17e>
   12dee:	c8 f4       	brcc	.+50     	; 0x12e22 <__vector_39+0x78>
   12df0:	88 23       	and	r24, r24
   12df2:	09 f4       	brne	.+2      	; 0x12df6 <__vector_39+0x4c>
   12df4:	fb c0       	rjmp	.+502    	; 0x12fec <__vector_39+0x242>
   12df6:	88 30       	cpi	r24, 0x08	; 8
   12df8:	09 f4       	brne	.+2      	; 0x12dfc <__vector_39+0x52>
   12dfa:	96 c0       	rjmp	.+300    	; 0x12f28 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   12dfc:	ff 91       	pop	r31
   12dfe:	ef 91       	pop	r30
   12e00:	bf 91       	pop	r27
   12e02:	af 91       	pop	r26
   12e04:	9f 91       	pop	r25
   12e06:	8f 91       	pop	r24
   12e08:	7f 91       	pop	r23
   12e0a:	6f 91       	pop	r22
   12e0c:	5f 91       	pop	r21
   12e0e:	4f 91       	pop	r20
   12e10:	3f 91       	pop	r19
   12e12:	2f 91       	pop	r18
   12e14:	0f 90       	pop	r0
   12e16:	0b be       	out	0x3b, r0	; 59
   12e18:	0f 90       	pop	r0
   12e1a:	0f be       	out	0x3f, r0	; 63
   12e1c:	0f 90       	pop	r0
   12e1e:	1f 90       	pop	r1
   12e20:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e22:	88 31       	cpi	r24, 0x18	; 24
   12e24:	09 f4       	brne	.+2      	; 0x12e28 <__vector_39+0x7e>
   12e26:	88 c0       	rjmp	.+272    	; 0x12f38 <__vector_39+0x18e>
   12e28:	80 32       	cpi	r24, 0x20	; 32
   12e2a:	41 f7       	brne	.-48     	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   12e2c:	80 93 88 11 	sts	0x1188, r24	; 0x801188 <twi_error>
   12e30:	14 c0       	rjmp	.+40     	; 0x12e5a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e32:	80 34       	cpi	r24, 0x40	; 64
   12e34:	09 f4       	brne	.+2      	; 0x12e38 <__vector_39+0x8e>
   12e36:	9d c0       	rjmp	.+314    	; 0x12f72 <__vector_39+0x1c8>
   12e38:	40 f4       	brcc	.+16     	; 0x12e4a <__vector_39+0xa0>
   12e3a:	80 33       	cpi	r24, 0x30	; 48
   12e3c:	b9 f3       	breq	.-18     	; 0x12e2c <__vector_39+0x82>
   12e3e:	88 33       	cpi	r24, 0x38	; 56
   12e40:	e9 f6       	brne	.-70     	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   12e42:	80 93 88 11 	sts	0x1188, r24	; 0x801188 <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12e46:	85 ec       	ldi	r24, 0xC5	; 197
   12e48:	b0 c0       	rjmp	.+352    	; 0x12faa <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e4a:	80 35       	cpi	r24, 0x50	; 80
   12e4c:	09 f4       	brne	.+2      	; 0x12e50 <__vector_39+0xa6>
   12e4e:	85 c0       	rjmp	.+266    	; 0x12f5a <__vector_39+0x1b0>
   12e50:	88 35       	cpi	r24, 0x58	; 88
   12e52:	09 f4       	brne	.+2      	; 0x12e56 <__vector_39+0xac>
   12e54:	96 c0       	rjmp	.+300    	; 0x12f82 <__vector_39+0x1d8>
   12e56:	88 34       	cpi	r24, 0x48	; 72
   12e58:	89 f6       	brne	.-94     	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   12e5a:	0e 94 0f 87 	call	0x10e1e	; 0x10e1e <twi_stop>
   12e5e:	ce cf       	rjmp	.-100    	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e60:	88 39       	cpi	r24, 0x98	; 152
   12e62:	09 f4       	brne	.+2      	; 0x12e66 <__vector_39+0xbc>
   12e64:	8c c0       	rjmp	.+280    	; 0x12f7e <__vector_39+0x1d4>
   12e66:	38 f5       	brcc	.+78     	; 0x12eb6 <__vector_39+0x10c>
   12e68:	88 37       	cpi	r24, 0x78	; 120
   12e6a:	29 f0       	breq	.+10     	; 0x12e76 <__vector_39+0xcc>
   12e6c:	50 f4       	brcc	.+20     	; 0x12e82 <__vector_39+0xd8>
   12e6e:	88 36       	cpi	r24, 0x68	; 104
   12e70:	11 f0       	breq	.+4      	; 0x12e76 <__vector_39+0xcc>
   12e72:	80 37       	cpi	r24, 0x70	; 112
   12e74:	19 f6       	brne	.-122    	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   12e76:	83 e0       	ldi	r24, 0x03	; 3
   12e78:	80 93 8a 11 	sts	0x118A, r24	; 0x80118a <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   12e7c:	10 92 15 11 	sts	0x1115, r1	; 0x801115 <twi_rxBufferIndex>
   12e80:	57 c0       	rjmp	.+174    	; 0x12f30 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12e82:	88 38       	cpi	r24, 0x88	; 136
   12e84:	09 f4       	brne	.+2      	; 0x12e88 <__vector_39+0xde>
   12e86:	7b c0       	rjmp	.+246    	; 0x12f7e <__vector_39+0x1d4>
   12e88:	80 39       	cpi	r24, 0x90	; 144
   12e8a:	19 f0       	breq	.+6      	; 0x12e92 <__vector_39+0xe8>
   12e8c:	80 38       	cpi	r24, 0x80	; 128
   12e8e:	09 f0       	breq	.+2      	; 0x12e92 <__vector_39+0xe8>
   12e90:	b5 cf       	rjmp	.-150    	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   12e92:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <twi_rxBufferIndex>
   12e96:	80 32       	cpi	r24, 0x20	; 32
   12e98:	08 f0       	brcs	.+2      	; 0x12e9c <__vector_39+0xf2>
   12e9a:	71 c0       	rjmp	.+226    	; 0x12f7e <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   12e9c:	e0 91 15 11 	lds	r30, 0x1115	; 0x801115 <twi_rxBufferIndex>
   12ea0:	81 e0       	ldi	r24, 0x01	; 1
   12ea2:	8e 0f       	add	r24, r30
   12ea4:	80 93 15 11 	sts	0x1115, r24	; 0x801115 <twi_rxBufferIndex>
   12ea8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12eac:	f0 e0       	ldi	r31, 0x00	; 0
   12eae:	eb 50       	subi	r30, 0x0B	; 11
   12eb0:	ff 4e       	sbci	r31, 0xEF	; 239
   12eb2:	80 83       	st	Z, r24
   12eb4:	3d c0       	rjmp	.+122    	; 0x12f30 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12eb6:	80 3b       	cpi	r24, 0xB0	; 176
   12eb8:	39 f0       	breq	.+14     	; 0x12ec8 <__vector_39+0x11e>
   12eba:	e0 f4       	brcc	.+56     	; 0x12ef4 <__vector_39+0x14a>
   12ebc:	80 3a       	cpi	r24, 0xA0	; 160
   12ebe:	09 f4       	brne	.+2      	; 0x12ec2 <__vector_39+0x118>
   12ec0:	79 c0       	rjmp	.+242    	; 0x12fb4 <__vector_39+0x20a>
   12ec2:	88 3a       	cpi	r24, 0xA8	; 168
   12ec4:	09 f0       	breq	.+2      	; 0x12ec8 <__vector_39+0x11e>
   12ec6:	9a cf       	rjmp	.-204    	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   12ec8:	84 e0       	ldi	r24, 0x04	; 4
   12eca:	80 93 8a 11 	sts	0x118A, r24	; 0x80118a <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   12ece:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   12ed2:	10 92 f3 10 	sts	0x10F3, r1	; 0x8010f3 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   12ed6:	e0 91 3b 11 	lds	r30, 0x113B	; 0x80113b <twi_onSlaveTransmit>
   12eda:	f0 91 3c 11 	lds	r31, 0x113C	; 0x80113c <twi_onSlaveTransmit+0x1>
   12ede:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   12ee0:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <twi_txBufferLength>
   12ee4:	81 11       	cpse	r24, r1
   12ee6:	0f c0       	rjmp	.+30     	; 0x12f06 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   12ee8:	81 e0       	ldi	r24, 0x01	; 1
   12eea:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   12eee:	10 92 d3 10 	sts	0x10D3, r1	; 0x8010d3 <twi_txBuffer>
   12ef2:	09 c0       	rjmp	.+18     	; 0x12f06 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12ef4:	80 3c       	cpi	r24, 0xC0	; 192
   12ef6:	09 f4       	brne	.+2      	; 0x12efa <__vector_39+0x150>
   12ef8:	a6 cf       	rjmp	.-180    	; 0x12e46 <__vector_39+0x9c>
   12efa:	88 3c       	cpi	r24, 0xC8	; 200
   12efc:	09 f4       	brne	.+2      	; 0x12f00 <__vector_39+0x156>
   12efe:	a3 cf       	rjmp	.-186    	; 0x12e46 <__vector_39+0x9c>
   12f00:	88 3b       	cpi	r24, 0xB8	; 184
   12f02:	09 f0       	breq	.+2      	; 0x12f06 <__vector_39+0x15c>
   12f04:	7b cf       	rjmp	.-266    	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   12f06:	e0 91 f4 10 	lds	r30, 0x10F4	; 0x8010f4 <twi_txBufferIndex>
   12f0a:	81 e0       	ldi	r24, 0x01	; 1
   12f0c:	8e 0f       	add	r24, r30
   12f0e:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <twi_txBufferIndex>
   12f12:	f0 e0       	ldi	r31, 0x00	; 0
   12f14:	ed 52       	subi	r30, 0x2D	; 45
   12f16:	ff 4e       	sbci	r31, 0xEF	; 239
   12f18:	80 81       	ld	r24, Z
   12f1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   12f1e:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <twi_txBufferIndex>
   12f22:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <twi_txBufferLength>
   12f26:	29 c0       	rjmp	.+82     	; 0x12f7a <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   12f28:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   12f2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12f30:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12f32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12f36:	62 cf       	rjmp	.-316    	; 0x12dfc <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   12f38:	90 91 87 11 	lds	r25, 0x1187	; 0x801187 <twi_masterBufferIndex>
   12f3c:	80 91 86 11 	lds	r24, 0x1186	; 0x801186 <twi_masterBufferLength>
   12f40:	98 17       	cp	r25, r24
   12f42:	58 f5       	brcc	.+86     	; 0x12f9a <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   12f44:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <twi_masterBufferIndex>
   12f48:	81 e0       	ldi	r24, 0x01	; 1
   12f4a:	8e 0f       	add	r24, r30
   12f4c:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <twi_masterBufferIndex>
   12f50:	f0 e0       	ldi	r31, 0x00	; 0
   12f52:	ec 59       	subi	r30, 0x9C	; 156
   12f54:	fe 4e       	sbci	r31, 0xEE	; 238
   12f56:	80 81       	ld	r24, Z
   12f58:	e9 cf       	rjmp	.-46     	; 0x12f2c <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   12f5a:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <twi_masterBufferIndex>
   12f5e:	81 e0       	ldi	r24, 0x01	; 1
   12f60:	8e 0f       	add	r24, r30
   12f62:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <twi_masterBufferIndex>
   12f66:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12f6a:	f0 e0       	ldi	r31, 0x00	; 0
   12f6c:	ec 59       	subi	r30, 0x9C	; 156
   12f6e:	fe 4e       	sbci	r31, 0xEE	; 238
   12f70:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   12f72:	90 91 87 11 	lds	r25, 0x1187	; 0x801187 <twi_masterBufferIndex>
   12f76:	80 91 86 11 	lds	r24, 0x1186	; 0x801186 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   12f7a:	98 17       	cp	r25, r24
   12f7c:	c8 f2       	brcs	.-78     	; 0x12f30 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12f7e:	85 e8       	ldi	r24, 0x85	; 133
   12f80:	d8 cf       	rjmp	.-80     	; 0x12f32 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   12f82:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <twi_masterBufferIndex>
   12f86:	81 e0       	ldi	r24, 0x01	; 1
   12f88:	8e 0f       	add	r24, r30
   12f8a:	80 93 87 11 	sts	0x1187, r24	; 0x801187 <twi_masterBufferIndex>
   12f8e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12f92:	f0 e0       	ldi	r31, 0x00	; 0
   12f94:	ec 59       	subi	r30, 0x9C	; 156
   12f96:	fe 4e       	sbci	r31, 0xEE	; 238
   12f98:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   12f9a:	80 91 89 11 	lds	r24, 0x1189	; 0x801189 <twi_sendStop>
   12f9e:	81 11       	cpse	r24, r1
   12fa0:	5c cf       	rjmp	.-328    	; 0x12e5a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   12fa2:	81 e0       	ldi	r24, 0x01	; 1
   12fa4:	80 93 84 11 	sts	0x1184, r24	; 0x801184 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   12fa8:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12faa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   12fae:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <twi_state>
   12fb2:	24 cf       	rjmp	.-440    	; 0x12dfc <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   12fb4:	85 ec       	ldi	r24, 0xC5	; 197
   12fb6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   12fba:	10 92 8a 11 	sts	0x118A, r1	; 0x80118a <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   12fbe:	80 91 15 11 	lds	r24, 0x1115	; 0x801115 <twi_rxBufferIndex>
   12fc2:	80 32       	cpi	r24, 0x20	; 32
   12fc4:	30 f4       	brcc	.+12     	; 0x12fd2 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   12fc6:	e0 91 15 11 	lds	r30, 0x1115	; 0x801115 <twi_rxBufferIndex>
   12fca:	f0 e0       	ldi	r31, 0x00	; 0
   12fcc:	eb 50       	subi	r30, 0x0B	; 11
   12fce:	ff 4e       	sbci	r31, 0xEF	; 239
   12fd0:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   12fd2:	60 91 15 11 	lds	r22, 0x1115	; 0x801115 <twi_rxBufferIndex>
   12fd6:	70 e0       	ldi	r23, 0x00	; 0
   12fd8:	e0 91 39 11 	lds	r30, 0x1139	; 0x801139 <twi_onSlaveReceive>
   12fdc:	f0 91 3a 11 	lds	r31, 0x113A	; 0x80113a <twi_onSlaveReceive+0x1>
   12fe0:	85 ef       	ldi	r24, 0xF5	; 245
   12fe2:	90 e1       	ldi	r25, 0x10	; 16
   12fe4:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   12fe6:	10 92 15 11 	sts	0x1115, r1	; 0x801115 <twi_rxBufferIndex>
   12fea:	08 cf       	rjmp	.-496    	; 0x12dfc <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   12fec:	10 92 88 11 	sts	0x1188, r1	; 0x801188 <twi_error>
   12ff0:	34 cf       	rjmp	.-408    	; 0x12e5a <__vector_39+0xb0>

00012ff2 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   12ff2:	20 91 40 11 	lds	r18, 0x1140	; 0x801140 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   12ff6:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   12ff8:	21 32       	cpi	r18, 0x21	; 33
   12ffa:	08 f0       	brcs	.+2      	; 0x12ffe <TwoWire::endTransmission()+0xc>
   12ffc:	44 c0       	rjmp	.+136    	; 0x13086 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   12ffe:	80 91 8a 11 	lds	r24, 0x118A	; 0x80118a <twi_state>
   13002:	81 11       	cpse	r24, r1
   13004:	fc cf       	rjmp	.-8      	; 0x12ffe <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
   13006:	80 91 42 11 	lds	r24, 0x1142	; 0x801142 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   1300a:	92 e0       	ldi	r25, 0x02	; 2
   1300c:	90 93 8a 11 	sts	0x118A, r25	; 0x80118a <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   13010:	91 e0       	ldi	r25, 0x01	; 1
   13012:	90 93 89 11 	sts	0x1189, r25	; 0x801189 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   13016:	9f ef       	ldi	r25, 0xFF	; 255
   13018:	90 93 88 11 	sts	0x1188, r25	; 0x801188 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   1301c:	10 92 87 11 	sts	0x1187, r1	; 0x801187 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   13020:	20 93 86 11 	sts	0x1186, r18	; 0x801186 <twi_masterBufferLength>
   13024:	a3 eb       	ldi	r26, 0xB3	; 179
   13026:	b0 e1       	ldi	r27, 0x10	; 16
   13028:	e4 e6       	ldi	r30, 0x64	; 100
   1302a:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1302c:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   1302e:	29 13       	cpse	r18, r25
   13030:	31 c0       	rjmp	.+98     	; 0x13094 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   13032:	10 92 85 11 	sts	0x1185, r1	; 0x801185 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   13036:	90 91 85 11 	lds	r25, 0x1185	; 0x801185 <twi_slarw>
   1303a:	88 0f       	add	r24, r24
   1303c:	89 2b       	or	r24, r25
   1303e:	80 93 85 11 	sts	0x1185, r24	; 0x801185 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   13042:	80 91 84 11 	lds	r24, 0x1184	; 0x801184 <twi_inRepStart>
   13046:	81 30       	cpi	r24, 0x01	; 1
   13048:	49 f5       	brne	.+82     	; 0x1309c <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   1304a:	10 92 84 11 	sts	0x1184, r1	; 0x801184 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   1304e:	80 91 85 11 	lds	r24, 0x1185	; 0x801185 <twi_slarw>
   13052:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   13056:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1305a:	83 fd       	sbrc	r24, 3
   1305c:	f8 cf       	rjmp	.-16     	; 0x1304e <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   1305e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   13060:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   13064:	80 91 8a 11 	lds	r24, 0x118A	; 0x80118a <twi_state>
   13068:	82 30       	cpi	r24, 0x02	; 2
   1306a:	e1 f3       	breq	.-8      	; 0x13064 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   1306c:	80 91 88 11 	lds	r24, 0x1188	; 0x801188 <twi_error>
   13070:	8f 3f       	cpi	r24, 0xFF	; 255
   13072:	b1 f0       	breq	.+44     	; 0x130a0 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   13074:	80 91 88 11 	lds	r24, 0x1188	; 0x801188 <twi_error>
   13078:	80 32       	cpi	r24, 0x20	; 32
   1307a:	a1 f0       	breq	.+40     	; 0x130a4 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   1307c:	80 91 88 11 	lds	r24, 0x1188	; 0x801188 <twi_error>
   13080:	80 33       	cpi	r24, 0x30	; 48
   13082:	91 f0       	breq	.+36     	; 0x130a8 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   13084:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   13086:	10 92 41 11 	sts	0x1141, r1	; 0x801141 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   1308a:	10 92 40 11 	sts	0x1140, r1	; 0x801140 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   1308e:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   13092:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   13094:	3d 91       	ld	r19, X+
   13096:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   13098:	9f 5f       	subi	r25, 0xFF	; 255
   1309a:	c9 cf       	rjmp	.-110    	; 0x1302e <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   1309c:	85 ee       	ldi	r24, 0xE5	; 229
   1309e:	e0 cf       	rjmp	.-64     	; 0x13060 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   130a0:	80 e0       	ldi	r24, 0x00	; 0
   130a2:	f1 cf       	rjmp	.-30     	; 0x13086 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   130a4:	82 e0       	ldi	r24, 0x02	; 2
   130a6:	ef cf       	rjmp	.-34     	; 0x13086 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   130a8:	83 e0       	ldi	r24, 0x03	; 3
   130aa:	ed cf       	rjmp	.-38     	; 0x13086 <TwoWire::endTransmission()+0x94>

000130ac <RTC_DS1307::isrunning() [clone .constprop.127]>:
_ZN10RTC_DS13079isrunningEv.constprop.127():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   130ac:	88 e6       	ldi	r24, 0x68	; 104
   130ae:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   130b2:	60 e0       	ldi	r22, 0x00	; 0
   130b4:	84 e5       	ldi	r24, 0x54	; 84
   130b6:	9e e0       	ldi	r25, 0x0E	; 14
   130b8:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   130bc:	84 e5       	ldi	r24, 0x54	; 84
   130be:	9e e0       	ldi	r25, 0x0E	; 14
   130c0:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   130c4:	81 e0       	ldi	r24, 0x01	; 1
   130c6:	90 e0       	ldi	r25, 0x00	; 0
   130c8:	0e 94 b5 89 	call	0x1136a	; 0x1136a <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   130cc:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   130d0:	80 58       	subi	r24, 0x80	; 128
   130d2:	87 fb       	bst	r24, 7
   130d4:	88 27       	eor	r24, r24
   130d6:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   130d8:	08 95       	ret

000130da <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   130da:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   130de:	80 ef       	ldi	r24, 0xF0	; 240
   130e0:	90 e0       	ldi	r25, 0x00	; 0
   130e2:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   130e6:	84 e5       	ldi	r24, 0x54	; 84
   130e8:	9e e0       	ldi	r25, 0x0E	; 14
   130ea:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   130ee:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   130f0:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   130f2:	08 95       	ret

000130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   130f4:	86 2f       	mov	r24, r22
twi_readFrom():
   130f6:	64 2f       	mov	r22, r20
   130f8:	0e 94 66 85 	call	0x10acc	; 0x10acc <twi_readFrom.part.0.constprop.169>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   130fc:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   13100:	80 93 3e 11 	sts	0x113E, r24	; 0x80113e <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   13104:	08 95       	ret

00013106 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   13106:	ff 92       	push	r15
   13108:	0f 93       	push	r16
   1310a:	1f 93       	push	r17
   1310c:	cf 93       	push	r28
   1310e:	df 93       	push	r29
   13110:	d8 2f       	mov	r29, r24
   13112:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   13114:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   13118:	86 e9       	ldi	r24, 0x96	; 150
   1311a:	90 e0       	ldi	r25, 0x00	; 0
   1311c:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   13120:	84 e5       	ldi	r24, 0x54	; 84
   13122:	9e e0       	ldi	r25, 0x0E	; 14
   13124:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   13128:	ce ef       	ldi	r28, 0xFE	; 254
   1312a:	88 23       	and	r24, r24
   1312c:	41 f0       	breq	.+16     	; 0x1313e <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   1312e:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   13130:	8c 2f       	mov	r24, r28
   13132:	df 91       	pop	r29
   13134:	cf 91       	pop	r28
   13136:	1f 91       	pop	r17
   13138:	0f 91       	pop	r16
   1313a:	ff 90       	pop	r15
   1313c:	08 95       	ret
   1313e:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   13140:	e1 f1       	breq	.+120    	; 0x131ba <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   13142:	41 e0       	ldi	r20, 0x01	; 1
   13144:	6d 2f       	mov	r22, r29
   13146:	84 e5       	ldi	r24, 0x54	; 84
   13148:	9e e0       	ldi	r25, 0x0E	; 14
   1314a:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   1314e:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   13152:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   13156:	89 1b       	sub	r24, r25
   13158:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   1315a:	18 16       	cp	r1, r24
   1315c:	19 06       	cpc	r1, r25
   1315e:	1c f4       	brge	.+6      	; 0x13166 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   13160:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
   13164:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   13166:	f0 fc       	sbrc	r15, 0
   13168:	ea cf       	rjmp	.-44     	; 0x1313e <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   1316a:	8d 2f       	mov	r24, r29
   1316c:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   13170:	81 ee       	ldi	r24, 0xE1	; 225
   13172:	90 e0       	ldi	r25, 0x00	; 0
   13174:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   13178:	61 ee       	ldi	r22, 0xE1	; 225
   1317a:	84 e5       	ldi	r24, 0x54	; 84
   1317c:	9e e0       	ldi	r25, 0x0E	; 14
   1317e:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   13182:	84 e5       	ldi	r24, 0x54	; 84
   13184:	9e e0       	ldi	r25, 0x0E	; 14
   13186:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   1318a:	c8 2f       	mov	r28, r24
   1318c:	81 11       	cpse	r24, r1
   1318e:	cf cf       	rjmp	.-98     	; 0x1312e <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   13190:	41 e0       	ldi	r20, 0x01	; 1
   13192:	6d 2f       	mov	r22, r29
   13194:	84 e5       	ldi	r24, 0x54	; 84
   13196:	9e e0       	ldi	r25, 0x0E	; 14
   13198:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   1319c:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   131a0:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   131a4:	89 1b       	sub	r24, r25
   131a6:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   131a8:	18 16       	cp	r1, r24
   131aa:	19 06       	cpc	r1, r25
   131ac:	0c f0       	brlt	.+2      	; 0x131b0 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   131ae:	c0 cf       	rjmp	.-128    	; 0x13130 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   131b0:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
   131b4:	f8 01       	movw	r30, r16
   131b6:	80 83       	st	Z, r24
   131b8:	bb cf       	rjmp	.-138    	; 0x13130 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   131ba:	c4 e0       	ldi	r28, 0x04	; 4
   131bc:	b9 cf       	rjmp	.-142    	; 0x13130 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

000131be <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   131be:	0f 93       	push	r16
   131c0:	1f 93       	push	r17
   131c2:	cf 93       	push	r28
   131c4:	df 93       	push	r29
   131c6:	08 2f       	mov	r16, r24
   131c8:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   131ca:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   131ce:	85 ea       	ldi	r24, 0xA5	; 165
   131d0:	90 e0       	ldi	r25, 0x00	; 0
   131d2:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   131d6:	6d 2f       	mov	r22, r29
   131d8:	84 e5       	ldi	r24, 0x54	; 84
   131da:	9e e0       	ldi	r25, 0x0E	; 14
   131dc:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   131e0:	84 e5       	ldi	r24, 0x54	; 84
   131e2:	9e e0       	ldi	r25, 0x0E	; 14
   131e4:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   131e8:	c8 2f       	mov	r28, r24
   131ea:	81 11       	cpse	r24, r1
   131ec:	1d c0       	rjmp	.+58     	; 0x13228 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   131ee:	1e ef       	ldi	r17, 0xFE	; 254
   131f0:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   131f2:	e1 f0       	breq	.+56     	; 0x1322c <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   131f4:	41 e0       	ldi	r20, 0x01	; 1
   131f6:	60 2f       	mov	r22, r16
   131f8:	84 e5       	ldi	r24, 0x54	; 84
   131fa:	9e e0       	ldi	r25, 0x0E	; 14
   131fc:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   13200:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   13204:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   13208:	89 1b       	sub	r24, r25
   1320a:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1320c:	18 16       	cp	r1, r24
   1320e:	19 06       	cpc	r1, r25
   13210:	1c f4       	brge	.+6      	; 0x13218 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   13212:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
   13216:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   13218:	d0 fd       	sbrc	r29, 0
   1321a:	ea cf       	rjmp	.-44     	; 0x131f0 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1321c:	8c 2f       	mov	r24, r28
   1321e:	df 91       	pop	r29
   13220:	cf 91       	pop	r28
   13222:	1f 91       	pop	r17
   13224:	0f 91       	pop	r16
   13226:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   13228:	c3 e0       	ldi	r28, 0x03	; 3
   1322a:	f8 cf       	rjmp	.-16     	; 0x1321c <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1322c:	c4 e0       	ldi	r28, 0x04	; 4
   1322e:	f6 cf       	rjmp	.-20     	; 0x1321c <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

00013230 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   13230:	ef 92       	push	r14
   13232:	ff 92       	push	r15
   13234:	1f 93       	push	r17
   13236:	cf 93       	push	r28
   13238:	df 93       	push	r29
   1323a:	18 2f       	mov	r17, r24
   1323c:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   1323e:	65 e5       	ldi	r22, 0x55	; 85
   13240:	0e 94 df 98 	call	0x131be	; 0x131be <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   13244:	81 11       	cpse	r24, r1
   13246:	0d c0       	rjmp	.+26     	; 0x13262 <owMatchRom(unsigned char, unsigned char*)+0x32>
   13248:	e7 01       	movw	r28, r14
   1324a:	88 e0       	ldi	r24, 0x08	; 8
   1324c:	e8 0e       	add	r14, r24
   1324e:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   13250:	69 91       	ld	r22, Y+
   13252:	81 2f       	mov	r24, r17
   13254:	0e 94 df 98 	call	0x131be	; 0x131be <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   13258:	81 11       	cpse	r24, r1
   1325a:	03 c0       	rjmp	.+6      	; 0x13262 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   1325c:	ec 16       	cp	r14, r28
   1325e:	fd 06       	cpc	r15, r29
   13260:	b9 f7       	brne	.-18     	; 0x13250 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   13262:	df 91       	pop	r29
   13264:	cf 91       	pop	r28
   13266:	1f 91       	pop	r17
   13268:	ff 90       	pop	r15
   1326a:	ef 90       	pop	r14
   1326c:	08 95       	ret

0001326e <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   1326e:	0f 93       	push	r16
   13270:	1f 93       	push	r17
   13272:	cf 93       	push	r28
   13274:	df 93       	push	r29
   13276:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   13278:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   1327c:	84 eb       	ldi	r24, 0xB4	; 180
   1327e:	90 e0       	ldi	r25, 0x00	; 0
   13280:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   13284:	84 e5       	ldi	r24, 0x54	; 84
   13286:	9e e0       	ldi	r25, 0x0E	; 14
   13288:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   1328c:	c8 2f       	mov	r28, r24
   1328e:	81 11       	cpse	r24, r1
   13290:	1b c0       	rjmp	.+54     	; 0x132c8 <ds2482owReset(unsigned char)+0x5a>
   13292:	de ef       	ldi	r29, 0xFE	; 254
   13294:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   13296:	f9 f0       	breq	.+62     	; 0x132d6 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   13298:	41 e0       	ldi	r20, 0x01	; 1
   1329a:	60 2f       	mov	r22, r16
   1329c:	84 e5       	ldi	r24, 0x54	; 84
   1329e:	9e e0       	ldi	r25, 0x0E	; 14
   132a0:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   132a4:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   132a8:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   132ac:	89 1b       	sub	r24, r25
   132ae:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   132b0:	18 16       	cp	r1, r24
   132b2:	19 06       	cpc	r1, r25
   132b4:	1c f4       	brge	.+6      	; 0x132bc <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   132b6:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
   132ba:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   132bc:	10 fd       	sbrc	r17, 0
   132be:	ea cf       	rjmp	.-44     	; 0x13294 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   132c0:	11 fd       	sbrc	r17, 1
   132c2:	03 c0       	rjmp	.+6      	; 0x132ca <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   132c4:	c5 e0       	ldi	r28, 0x05	; 5
   132c6:	01 c0       	rjmp	.+2      	; 0x132ca <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   132c8:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   132ca:	8c 2f       	mov	r24, r28
   132cc:	df 91       	pop	r29
   132ce:	cf 91       	pop	r28
   132d0:	1f 91       	pop	r17
   132d2:	0f 91       	pop	r16
   132d4:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   132d6:	c4 e0       	ldi	r28, 0x04	; 4
   132d8:	f8 cf       	rjmp	.-16     	; 0x132ca <ds2482owReset(unsigned char)+0x5c>

000132da <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>:
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   132da:	df 92       	push	r13
   132dc:	ef 92       	push	r14
   132de:	ff 92       	push	r15
   132e0:	0f 93       	push	r16
   132e2:	1f 93       	push	r17
   132e4:	cf 93       	push	r28
   132e6:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   132e8:	90 91 bf 0b 	lds	r25, 0x0BBF	; 0x800bbf <lastDevice>
   132ec:	99 23       	and	r25, r25
   132ee:	51 f0       	breq	.+20     	; 0x13304 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   132f0:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   132f2:	8d 2f       	mov	r24, r29
   132f4:	df 91       	pop	r29
   132f6:	cf 91       	pop	r28
   132f8:	1f 91       	pop	r17
   132fa:	0f 91       	pop	r16
   132fc:	ff 90       	pop	r15
   132fe:	ef 90       	pop	r14
   13300:	df 90       	pop	r13
   13302:	08 95       	ret
   13304:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   13306:	0e 94 37 99 	call	0x1326e	; 0x1326e <ds2482owReset(unsigned char)>
   1330a:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1330c:	81 11       	cpse	r24, r1
   1330e:	f1 cf       	rjmp	.-30     	; 0x132f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   13310:	60 ef       	ldi	r22, 0xF0	; 240
   13312:	8f 2d       	mov	r24, r15
   13314:	0e 94 df 98 	call	0x131be	; 0x131be <ds2482owWriteByte(unsigned char, unsigned char)>
   13318:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1331a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1331c:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   1331e:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   13320:	81 11       	cpse	r24, r1
   13322:	e7 cf       	rjmp	.-50     	; 0x132f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   13324:	80 91 b6 0b 	lds	r24, 0x0BB6	; 0x800bb6 <lastDiscrepancy>
   13328:	08 17       	cp	r16, r24
   1332a:	50 f4       	brcc	.+20     	; 0x13340 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1332c:	ee 2d       	mov	r30, r14
   1332e:	f0 e0       	ldi	r31, 0x00	; 0
   13330:	e9 54       	subi	r30, 0x49	; 73
   13332:	f4 4f       	sbci	r31, 0xF4	; 244
   13334:	80 81       	ld	r24, Z
   13336:	81 23       	and	r24, r17
   13338:	c1 e0       	ldi	r28, 0x01	; 1
   1333a:	29 f4       	brne	.+10     	; 0x13346 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1333c:	c0 e0       	ldi	r28, 0x00	; 0
   1333e:	03 c0       	rjmp	.+6      	; 0x13346 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
   13340:	c1 e0       	ldi	r28, 0x01	; 1
   13342:	80 13       	cpse	r24, r16
   13344:	fb cf       	rjmp	.-10     	; 0x1333c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   13346:	8f 2d       	mov	r24, r15
   13348:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1334c:	88 e7       	ldi	r24, 0x78	; 120
   1334e:	90 e0       	ldi	r25, 0x00	; 0
   13350:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   13354:	90 e0       	ldi	r25, 0x00	; 0
   13356:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   13358:	cc 23       	and	r28, r28
   1335a:	11 f0       	breq	.+4      	; 0x13360 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x86>
_Z11owMatchNexthPh.constprop.97():
   1335c:	80 e8       	ldi	r24, 0x80	; 128
   1335e:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   13360:	0e 94 26 8d 	call	0x11a4c	; 0x11a4c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   13364:	84 e5       	ldi	r24, 0x54	; 84
   13366:	9e e0       	ldi	r25, 0x0E	; 14
   13368:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
   1336c:	81 11       	cpse	r24, r1
   1336e:	53 c0       	rjmp	.+166    	; 0x13416 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x13c>
   13370:	6e ef       	ldi	r22, 0xFE	; 254
   13372:	d6 2e       	mov	r13, r22
   13374:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   13376:	dd 20       	and	r13, r13
   13378:	09 f4       	brne	.+2      	; 0x1337c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xa2>
   1337a:	4f c0       	rjmp	.+158    	; 0x1341a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1337c:	41 e0       	ldi	r20, 0x01	; 1
   1337e:	6f 2d       	mov	r22, r15
   13380:	84 e5       	ldi	r24, 0x54	; 84
   13382:	9e e0       	ldi	r25, 0x0E	; 14
   13384:	0e 94 7a 98 	call	0x130f4	; 0x130f4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   13388:	80 91 3e 11 	lds	r24, 0x113E	; 0x80113e <TwoWire::rxBufferLength>
   1338c:	90 91 3f 11 	lds	r25, 0x113F	; 0x80113f <TwoWire::rxBufferIndex>
   13390:	89 1b       	sub	r24, r25
   13392:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   13394:	18 16       	cp	r1, r24
   13396:	19 06       	cpc	r1, r25
   13398:	1c f4       	brge	.+6      	; 0x133a0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1339a:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
   1339e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   133a0:	c0 fd       	sbrc	r28, 0
   133a2:	e8 cf       	rjmp	.-48     	; 0x13374 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x9a>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   133a4:	2c 2f       	mov	r18, r28
   133a6:	30 e0       	ldi	r19, 0x00	; 0
   133a8:	c9 01       	movw	r24, r18
   133aa:	45 e0       	ldi	r20, 0x05	; 5
   133ac:	95 95       	asr	r25
   133ae:	87 95       	ror	r24
   133b0:	4a 95       	dec	r20
   133b2:	e1 f7       	brne	.-8      	; 0x133ac <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xd2>
   133b4:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   133b6:	22 0f       	add	r18, r18
   133b8:	23 2f       	mov	r18, r19
   133ba:	22 1f       	adc	r18, r18
   133bc:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   133be:	83 30       	cpi	r24, 0x03	; 3
   133c0:	99 f0       	breq	.+38     	; 0x133e8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x10e>
   133c2:	ee 2d       	mov	r30, r14
   133c4:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   133c6:	81 11       	cpse	r24, r1
   133c8:	1b c0       	rjmp	.+54     	; 0x13400 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   133ca:	22 23       	and	r18, r18
   133cc:	11 f1       	breq	.+68     	; 0x13412 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   133ce:	e9 54       	subi	r30, 0x49	; 73
   133d0:	f4 4f       	sbci	r31, 0xF4	; 244
   133d2:	80 81       	ld	r24, Z
   133d4:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   133d6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   133d8:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   133da:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   133dc:	11 f4       	brne	.+4      	; 0x133e2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   133de:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   133e0:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   133e2:	88 e0       	ldi	r24, 0x08	; 8
   133e4:	e8 12       	cpse	r14, r24
   133e6:	9e cf       	rjmp	.-196    	; 0x13324 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   133e8:	01 34       	cpi	r16, 0x41	; 65
   133ea:	08 f4       	brcc	.+2      	; 0x133ee <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x114>
   133ec:	81 cf       	rjmp	.-254    	; 0x132f0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   133ee:	d0 93 b6 0b 	sts	0x0BB6, r29	; 0x800bb6 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   133f2:	81 e0       	ldi	r24, 0x01	; 1
   133f4:	d1 11       	cpse	r29, r1
   133f6:	80 e0       	ldi	r24, 0x00	; 0
   133f8:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   133fc:	d0 e0       	ldi	r29, 0x00	; 0
   133fe:	79 cf       	rjmp	.-270    	; 0x132f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   13400:	21 11       	cpse	r18, r1
   13402:	e5 cf       	rjmp	.-54     	; 0x133ce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   13404:	e9 54       	subi	r30, 0x49	; 73
   13406:	f4 4f       	sbci	r31, 0xF4	; 244
   13408:	80 81       	ld	r24, Z
   1340a:	91 2f       	mov	r25, r17
   1340c:	90 95       	com	r25
   1340e:	89 23       	and	r24, r25
   13410:	e2 cf       	rjmp	.-60     	; 0x133d6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   13412:	d0 2f       	mov	r29, r16
   13414:	f7 cf       	rjmp	.-18     	; 0x13404 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   13416:	d3 e0       	ldi	r29, 0x03	; 3
   13418:	6c cf       	rjmp	.-296    	; 0x132f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1341a:	d4 e0       	ldi	r29, 0x04	; 4
   1341c:	6a cf       	rjmp	.-300    	; 0x132f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>

0001341e <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   1341e:	1f 93       	push	r17
   13420:	cf 93       	push	r28
   13422:	df 93       	push	r29
   13424:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   13426:	88 e6       	ldi	r24, 0x68	; 104
   13428:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   1342c:	60 e0       	ldi	r22, 0x00	; 0
   1342e:	84 e5       	ldi	r24, 0x54	; 84
   13430:	9e e0       	ldi	r25, 0x0E	; 14
   13432:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
   13436:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   13438:	1a e0       	ldi	r17, 0x0A	; 10
   1343a:	82 2f       	mov	r24, r18
   1343c:	61 2f       	mov	r22, r17
   1343e:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
   13442:	68 2f       	mov	r22, r24
   13444:	66 0f       	add	r22, r22
   13446:	68 0f       	add	r22, r24
   13448:	66 0f       	add	r22, r22
   1344a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   1344c:	84 e5       	ldi	r24, 0x54	; 84
   1344e:	9e e0       	ldi	r25, 0x0E	; 14
   13450:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
   13454:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   13456:	82 2f       	mov	r24, r18
   13458:	61 2f       	mov	r22, r17
   1345a:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
   1345e:	68 2f       	mov	r22, r24
   13460:	66 0f       	add	r22, r22
   13462:	68 0f       	add	r22, r24
   13464:	66 0f       	add	r22, r22
   13466:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   13468:	84 e5       	ldi	r24, 0x54	; 84
   1346a:	9e e0       	ldi	r25, 0x0E	; 14
   1346c:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
   13470:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   13472:	82 2f       	mov	r24, r18
   13474:	61 2f       	mov	r22, r17
   13476:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
   1347a:	68 2f       	mov	r22, r24
   1347c:	66 0f       	add	r22, r22
   1347e:	68 0f       	add	r22, r24
   13480:	66 0f       	add	r22, r22
   13482:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   13484:	84 e5       	ldi	r24, 0x54	; 84
   13486:	9e e0       	ldi	r25, 0x0E	; 14
   13488:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   1348c:	60 e0       	ldi	r22, 0x00	; 0
   1348e:	84 e5       	ldi	r24, 0x54	; 84
   13490:	9e e0       	ldi	r25, 0x0E	; 14
   13492:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
   13496:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   13498:	82 2f       	mov	r24, r18
   1349a:	61 2f       	mov	r22, r17
   1349c:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
   134a0:	68 2f       	mov	r22, r24
   134a2:	66 0f       	add	r22, r22
   134a4:	68 0f       	add	r22, r24
   134a6:	66 0f       	add	r22, r22
   134a8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   134aa:	84 e5       	ldi	r24, 0x54	; 84
   134ac:	9e e0       	ldi	r25, 0x0E	; 14
   134ae:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
   134b2:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   134b4:	82 2f       	mov	r24, r18
   134b6:	61 2f       	mov	r22, r17
   134b8:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
   134bc:	68 2f       	mov	r22, r24
   134be:	66 0f       	add	r22, r22
   134c0:	68 0f       	add	r22, r24
   134c2:	66 0f       	add	r22, r22
   134c4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   134c6:	84 e5       	ldi	r24, 0x54	; 84
   134c8:	9e e0       	ldi	r25, 0x0E	; 14
   134ca:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
   134ce:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   134d0:	82 2f       	mov	r24, r18
   134d2:	61 2f       	mov	r22, r17
   134d4:	0e 94 e6 bc 	call	0x179cc	; 0x179cc <__udivmodqi4>
   134d8:	68 2f       	mov	r22, r24
   134da:	66 0f       	add	r22, r22
   134dc:	68 0f       	add	r22, r24
   134de:	66 0f       	add	r22, r22
   134e0:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   134e2:	84 e5       	ldi	r24, 0x54	; 84
   134e4:	9e e0       	ldi	r25, 0x0E	; 14
   134e6:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   134ea:	84 e5       	ldi	r24, 0x54	; 84
   134ec:	9e e0       	ldi	r25, 0x0E	; 14
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   134ee:	df 91       	pop	r29
   134f0:	cf 91       	pop	r28
   134f2:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   134f4:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>

000134f8 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   134f8:	cf 93       	push	r28
   134fa:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   134fc:	fc 01       	movw	r30, r24
   134fe:	a0 81       	ld	r26, Z
   13500:	b1 81       	ldd	r27, Z+1	; 0x01
   13502:	10 97       	sbiw	r26, 0x00	; 0
   13504:	21 f4       	brne	.+8      	; 0x1350e <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   13506:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   13508:	df 91       	pop	r29
   1350a:	cf 91       	pop	r28
   1350c:	08 95       	ret
   1350e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   13510:	ed 91       	ld	r30, X+
   13512:	fc 91       	ld	r31, X
   13514:	11 97       	sbiw	r26, 0x01	; 1
   13516:	06 88       	ldd	r0, Z+22	; 0x16
   13518:	f7 89       	ldd	r31, Z+23	; 0x17
   1351a:	e0 2d       	mov	r30, r0
   1351c:	cd 01       	movw	r24, r26
   1351e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   13520:	81 11       	cpse	r24, r1
   13522:	1e c0       	rjmp	.+60     	; 0x13560 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   13524:	fe 01       	movw	r30, r28
   13526:	e5 5e       	subi	r30, 0xE5	; 229
   13528:	fd 4f       	sbci	r31, 0xFD	; 253
   1352a:	80 81       	ld	r24, Z
   1352c:	91 81       	ldd	r25, Z+1	; 0x01
   1352e:	89 2b       	or	r24, r25
   13530:	51 f7       	brne	.-44     	; 0x13506 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   13532:	8d ef       	ldi	r24, 0xFD	; 253
   13534:	9f ef       	ldi	r25, 0xFF	; 255
   13536:	91 83       	std	Z+1, r25	; 0x01
   13538:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   1353a:	88 81       	ld	r24, Y
   1353c:	99 81       	ldd	r25, Y+1	; 0x01
   1353e:	dc 01       	movw	r26, r24
   13540:	ed 91       	ld	r30, X+
   13542:	fc 91       	ld	r31, X
   13544:	06 80       	ldd	r0, Z+6	; 0x06
   13546:	f7 81       	ldd	r31, Z+7	; 0x07
   13548:	e0 2d       	mov	r30, r0
   1354a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   1354c:	88 81       	ld	r24, Y
   1354e:	99 81       	ldd	r25, Y+1	; 0x01
   13550:	dc 01       	movw	r26, r24
   13552:	ed 91       	ld	r30, X+
   13554:	fc 91       	ld	r31, X
   13556:	04 88       	ldd	r0, Z+20	; 0x14
   13558:	f5 89       	ldd	r31, Z+21	; 0x15
   1355a:	e0 2d       	mov	r30, r0
   1355c:	19 95       	eicall
   1355e:	d3 cf       	rjmp	.-90     	; 0x13506 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   13560:	81 e0       	ldi	r24, 0x01	; 1
   13562:	d2 cf       	rjmp	.-92     	; 0x13508 <PubSubClient::connected()+0x10>

00013564 <PubSubClient::loop() [clone .constprop.106]>:
_ZN12PubSubClient4loopEv.constprop.106():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   13564:	3f 92       	push	r3
   13566:	4f 92       	push	r4
   13568:	5f 92       	push	r5
   1356a:	6f 92       	push	r6
   1356c:	7f 92       	push	r7
   1356e:	8f 92       	push	r8
   13570:	9f 92       	push	r9
   13572:	af 92       	push	r10
   13574:	bf 92       	push	r11
   13576:	cf 92       	push	r12
   13578:	df 92       	push	r13
   1357a:	ef 92       	push	r14
   1357c:	ff 92       	push	r15
   1357e:	0f 93       	push	r16
   13580:	1f 93       	push	r17
   13582:	cf 93       	push	r28
   13584:	df 93       	push	r29
   13586:	1f 92       	push	r1
   13588:	cd b7       	in	r28, 0x3d	; 61
   1358a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1358c:	4d b6       	in	r4, 0x3d	; 61
   1358e:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   13590:	8d e6       	ldi	r24, 0x6D	; 109
   13592:	9e e0       	ldi	r25, 0x0E	; 14
   13594:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
   13598:	98 2e       	mov	r9, r24
   1359a:	88 23       	and	r24, r24
   1359c:	09 f4       	brne	.+2      	; 0x135a0 <PubSubClient::loop() [clone .constprop.106]+0x3c>
   1359e:	45 c0       	rjmp	.+138    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   135a0:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   135a4:	6b 01       	movw	r12, r22
   135a6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   135a8:	80 91 75 10 	lds	r24, 0x1075	; 0x801075 <mqtt_client+0x208>
   135ac:	90 91 76 10 	lds	r25, 0x1076	; 0x801076 <mqtt_client+0x209>
   135b0:	a0 91 77 10 	lds	r26, 0x1077	; 0x801077 <mqtt_client+0x20a>
   135b4:	b0 91 78 10 	lds	r27, 0x1078	; 0x801078 <mqtt_client+0x20b>
   135b8:	a7 01       	movw	r20, r14
   135ba:	96 01       	movw	r18, r12
   135bc:	28 1b       	sub	r18, r24
   135be:	39 0b       	sbc	r19, r25
   135c0:	4a 0b       	sbc	r20, r26
   135c2:	5b 0b       	sbc	r21, r27
   135c4:	da 01       	movw	r26, r20
   135c6:	c9 01       	movw	r24, r18
   135c8:	89 39       	cpi	r24, 0x99	; 153
   135ca:	9a 43       	sbci	r25, 0x3A	; 58
   135cc:	a1 05       	cpc	r26, r1
   135ce:	b1 05       	cpc	r27, r1
   135d0:	b0 f4       	brcc	.+44     	; 0x135fe <PubSubClient::loop() [clone .constprop.106]+0x9a>
   135d2:	80 91 71 10 	lds	r24, 0x1071	; 0x801071 <mqtt_client+0x204>
   135d6:	90 91 72 10 	lds	r25, 0x1072	; 0x801072 <mqtt_client+0x205>
   135da:	a0 91 73 10 	lds	r26, 0x1073	; 0x801073 <mqtt_client+0x206>
   135de:	b0 91 74 10 	lds	r27, 0x1074	; 0x801074 <mqtt_client+0x207>
   135e2:	a7 01       	movw	r20, r14
   135e4:	96 01       	movw	r18, r12
   135e6:	28 1b       	sub	r18, r24
   135e8:	39 0b       	sbc	r19, r25
   135ea:	4a 0b       	sbc	r20, r26
   135ec:	5b 0b       	sbc	r21, r27
   135ee:	da 01       	movw	r26, r20
   135f0:	c9 01       	movw	r24, r18
   135f2:	89 39       	cpi	r24, 0x99	; 153
   135f4:	9a 43       	sbci	r25, 0x3A	; 58
   135f6:	a1 05       	cpc	r26, r1
   135f8:	b1 05       	cpc	r27, r1
   135fa:	08 f4       	brcc	.+2      	; 0x135fe <PubSubClient::loop() [clone .constprop.106]+0x9a>
   135fc:	52 c0       	rjmp	.+164    	; 0x136a2 <PubSubClient::loop() [clone .constprop.106]+0x13e>
   135fe:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
   13602:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   13606:	20 91 79 10 	lds	r18, 0x1079	; 0x801079 <mqtt_client+0x20c>
   1360a:	22 23       	and	r18, r18
   1360c:	39 f1       	breq	.+78     	; 0x1365c <PubSubClient::loop() [clone .constprop.106]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   1360e:	2c ef       	ldi	r18, 0xFC	; 252
   13610:	3f ef       	ldi	r19, 0xFF	; 255
   13612:	30 93 89 10 	sts	0x1089, r19	; 0x801089 <mqtt_client+0x21c>
   13616:	20 93 88 10 	sts	0x1088, r18	; 0x801088 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   1361a:	dc 01       	movw	r26, r24
   1361c:	ed 91       	ld	r30, X+
   1361e:	fc 91       	ld	r31, X
   13620:	04 88       	ldd	r0, Z+20	; 0x14
   13622:	f5 89       	ldd	r31, Z+21	; 0x15
   13624:	e0 2d       	mov	r30, r0
   13626:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   13628:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1362a:	89 2d       	mov	r24, r9
   1362c:	0f b6       	in	r0, 0x3f	; 63
   1362e:	f8 94       	cli
   13630:	5e be       	out	0x3e, r5	; 62
   13632:	0f be       	out	0x3f, r0	; 63
   13634:	4d be       	out	0x3d, r4	; 61
   13636:	0f 90       	pop	r0
   13638:	df 91       	pop	r29
   1363a:	cf 91       	pop	r28
   1363c:	1f 91       	pop	r17
   1363e:	0f 91       	pop	r16
   13640:	ff 90       	pop	r15
   13642:	ef 90       	pop	r14
   13644:	df 90       	pop	r13
   13646:	cf 90       	pop	r12
   13648:	bf 90       	pop	r11
   1364a:	af 90       	pop	r10
   1364c:	9f 90       	pop	r9
   1364e:	8f 90       	pop	r8
   13650:	7f 90       	pop	r7
   13652:	6f 90       	pop	r6
   13654:	5f 90       	pop	r5
   13656:	4f 90       	pop	r4
   13658:	3f 90       	pop	r3
   1365a:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   1365c:	20 ec       	ldi	r18, 0xC0	; 192
   1365e:	20 93 6f 0e 	sts	0x0E6F, r18	; 0x800e6f <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   13662:	10 92 70 0e 	sts	0x0E70, r1	; 0x800e70 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   13666:	dc 01       	movw	r26, r24
   13668:	ed 91       	ld	r30, X+
   1366a:	fc 91       	ld	r31, X
   1366c:	02 80       	ldd	r0, Z+2	; 0x02
   1366e:	f3 81       	ldd	r31, Z+3	; 0x03
   13670:	e0 2d       	mov	r30, r0
   13672:	42 e0       	ldi	r20, 0x02	; 2
   13674:	50 e0       	ldi	r21, 0x00	; 0
   13676:	6f e6       	ldi	r22, 0x6F	; 111
   13678:	7e e0       	ldi	r23, 0x0E	; 14
   1367a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1367c:	c0 92 71 10 	sts	0x1071, r12	; 0x801071 <mqtt_client+0x204>
   13680:	d0 92 72 10 	sts	0x1072, r13	; 0x801072 <mqtt_client+0x205>
   13684:	e0 92 73 10 	sts	0x1073, r14	; 0x801073 <mqtt_client+0x206>
   13688:	f0 92 74 10 	sts	0x1074, r15	; 0x801074 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1368c:	c0 92 75 10 	sts	0x1075, r12	; 0x801075 <mqtt_client+0x208>
   13690:	d0 92 76 10 	sts	0x1076, r13	; 0x801076 <mqtt_client+0x209>
   13694:	e0 92 77 10 	sts	0x1077, r14	; 0x801077 <mqtt_client+0x20a>
   13698:	f0 92 78 10 	sts	0x1078, r15	; 0x801078 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1369c:	81 e0       	ldi	r24, 0x01	; 1
   1369e:	80 93 79 10 	sts	0x1079, r24	; 0x801079 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   136a2:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
   136a6:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
   136aa:	dc 01       	movw	r26, r24
   136ac:	ed 91       	ld	r30, X+
   136ae:	fc 91       	ld	r31, X
   136b0:	00 84       	ldd	r0, Z+8	; 0x08
   136b2:	f1 85       	ldd	r31, Z+9	; 0x09
   136b4:	e0 2d       	mov	r30, r0
   136b6:	19 95       	eicall
   136b8:	89 2b       	or	r24, r25
   136ba:	09 f4       	brne	.+2      	; 0x136be <PubSubClient::loop() [clone .constprop.106]+0x15a>
   136bc:	b6 cf       	rjmp	.-148    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   136be:	ce 01       	movw	r24, r28
   136c0:	01 96       	adiw	r24, 0x01	; 1
   136c2:	0e 94 ca 93 	call	0x12794	; 0x12794 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
   136c6:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   136c8:	89 2b       	or	r24, r25
   136ca:	09 f4       	brne	.+2      	; 0x136ce <PubSubClient::loop() [clone .constprop.106]+0x16a>
   136cc:	ae cf       	rjmp	.-164    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   136ce:	c0 92 75 10 	sts	0x1075, r12	; 0x801075 <mqtt_client+0x208>
   136d2:	d0 92 76 10 	sts	0x1076, r13	; 0x801076 <mqtt_client+0x209>
   136d6:	e0 92 77 10 	sts	0x1077, r14	; 0x801077 <mqtt_client+0x20a>
   136da:	f0 92 78 10 	sts	0x1078, r15	; 0x801078 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   136de:	80 90 6f 0e 	lds	r8, 0x0E6F	; 0x800e6f <mqtt_client+0x2>
   136e2:	88 2d       	mov	r24, r8
   136e4:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   136e6:	80 33       	cpi	r24, 0x30	; 48
   136e8:	09 f0       	breq	.+2      	; 0x136ec <PubSubClient::loop() [clone .constprop.106]+0x188>
   136ea:	83 c0       	rjmp	.+262    	; 0x137f2 <PubSubClient::loop() [clone .constprop.106]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   136ec:	a0 90 7a 10 	lds	r10, 0x107A	; 0x80107a <mqtt_client+0x20d>
   136f0:	b0 90 7b 10 	lds	r11, 0x107B	; 0x80107b <mqtt_client+0x20e>
   136f4:	a1 14       	cp	r10, r1
   136f6:	b1 04       	cpc	r11, r1
   136f8:	09 f4       	brne	.+2      	; 0x136fc <PubSubClient::loop() [clone .constprop.106]+0x198>
   136fa:	97 cf       	rjmp	.-210    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   136fc:	6d b6       	in	r6, 0x3d	; 61
   136fe:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   13700:	69 81       	ldd	r22, Y+1	; 0x01
   13702:	70 e0       	ldi	r23, 0x00	; 0
   13704:	fb 01       	movw	r30, r22
   13706:	e3 59       	subi	r30, 0x93	; 147
   13708:	f1 4f       	sbci	r31, 0xF1	; 241
   1370a:	23 81       	ldd	r18, Z+3	; 0x03
   1370c:	30 e0       	ldi	r19, 0x00	; 0
   1370e:	32 2f       	mov	r19, r18
   13710:	22 27       	eor	r18, r18
   13712:	84 81       	ldd	r24, Z+4	; 0x04
   13714:	28 0f       	add	r18, r24
   13716:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   13718:	c9 01       	movw	r24, r18
   1371a:	01 96       	adiw	r24, 0x01	; 1
   1371c:	ed b7       	in	r30, 0x3d	; 61
   1371e:	fe b7       	in	r31, 0x3e	; 62
   13720:	e8 1b       	sub	r30, r24
   13722:	f9 0b       	sbc	r31, r25
   13724:	0f b6       	in	r0, 0x3f	; 63
   13726:	f8 94       	cli
   13728:	fe bf       	out	0x3e, r31	; 62
   1372a:	0f be       	out	0x3f, r0	; 63
   1372c:	ed bf       	out	0x3d, r30	; 61
   1372e:	8d b7       	in	r24, 0x3d	; 61
   13730:	9e b7       	in	r25, 0x3e	; 62
   13732:	01 96       	adiw	r24, 0x01	; 1
   13734:	db 01       	movw	r26, r22
   13736:	ae 58       	subi	r26, 0x8E	; 142
   13738:	b1 4f       	sbci	r27, 0xF1	; 241
   1373a:	fc 01       	movw	r30, r24
   1373c:	8c 01       	movw	r16, r24
   1373e:	02 0f       	add	r16, r18
   13740:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   13742:	e0 17       	cp	r30, r16
   13744:	f1 07       	cpc	r31, r17
   13746:	19 f0       	breq	.+6      	; 0x1374e <PubSubClient::loop() [clone .constprop.106]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   13748:	3d 90       	ld	r3, X+
   1374a:	31 92       	st	Z+, r3
   1374c:	fa cf       	rjmp	.-12     	; 0x13742 <PubSubClient::loop() [clone .constprop.106]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   1374e:	10 82       	st	Z, r1
   13750:	da 01       	movw	r26, r20
   13752:	a6 1b       	sub	r26, r22
   13754:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   13756:	f8 2d       	mov	r31, r8
   13758:	f6 70       	andi	r31, 0x06	; 6
   1375a:	8f 2e       	mov	r8, r31
   1375c:	42 e0       	ldi	r20, 0x02	; 2
   1375e:	f4 13       	cpse	r31, r20
   13760:	3c c0       	rjmp	.+120    	; 0x137da <PubSubClient::loop() [clone .constprop.106]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   13762:	62 0f       	add	r22, r18
   13764:	73 1f       	adc	r23, r19
   13766:	fb 01       	movw	r30, r22
   13768:	e3 59       	subi	r30, 0x93	; 147
   1376a:	f1 4f       	sbci	r31, 0xF1	; 241
   1376c:	45 81       	ldd	r20, Z+5	; 0x05
   1376e:	50 e0       	ldi	r21, 0x00	; 0
   13770:	54 2f       	mov	r21, r20
   13772:	44 27       	eor	r20, r20
   13774:	06 81       	ldd	r16, Z+6	; 0x06
   13776:	04 0f       	add	r16, r20
   13778:	15 2f       	mov	r17, r21
   1377a:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1377c:	ad 01       	movw	r20, r26
   1377e:	42 1b       	sub	r20, r18
   13780:	53 0b       	sbc	r21, r19
   13782:	45 50       	subi	r20, 0x05	; 5
   13784:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   13786:	6c 58       	subi	r22, 0x8C	; 140
   13788:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   1378a:	f5 01       	movw	r30, r10
   1378c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   1378e:	80 e4       	ldi	r24, 0x40	; 64
   13790:	80 93 6f 0e 	sts	0x0E6F, r24	; 0x800e6f <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   13794:	80 92 70 0e 	sts	0x0E70, r8	; 0x800e70 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   13798:	10 93 71 0e 	sts	0x0E71, r17	; 0x800e71 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1379c:	00 93 72 0e 	sts	0x0E72, r16	; 0x800e72 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   137a0:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
   137a4:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
   137a8:	dc 01       	movw	r26, r24
   137aa:	ed 91       	ld	r30, X+
   137ac:	fc 91       	ld	r31, X
   137ae:	02 80       	ldd	r0, Z+2	; 0x02
   137b0:	f3 81       	ldd	r31, Z+3	; 0x03
   137b2:	e0 2d       	mov	r30, r0
   137b4:	44 e0       	ldi	r20, 0x04	; 4
   137b6:	50 e0       	ldi	r21, 0x00	; 0
   137b8:	6f e6       	ldi	r22, 0x6F	; 111
   137ba:	7e e0       	ldi	r23, 0x0E	; 14
   137bc:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   137be:	c0 92 71 10 	sts	0x1071, r12	; 0x801071 <mqtt_client+0x204>
   137c2:	d0 92 72 10 	sts	0x1072, r13	; 0x801072 <mqtt_client+0x205>
   137c6:	e0 92 73 10 	sts	0x1073, r14	; 0x801073 <mqtt_client+0x206>
   137ca:	f0 92 74 10 	sts	0x1074, r15	; 0x801074 <mqtt_client+0x207>
   137ce:	0f b6       	in	r0, 0x3f	; 63
   137d0:	f8 94       	cli
   137d2:	7e be       	out	0x3e, r7	; 62
   137d4:	0f be       	out	0x3f, r0	; 63
   137d6:	6d be       	out	0x3d, r6	; 61
   137d8:	28 cf       	rjmp	.-432    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   137da:	ad 01       	movw	r20, r26
   137dc:	42 1b       	sub	r20, r18
   137de:	53 0b       	sbc	r21, r19
   137e0:	43 50       	subi	r20, 0x03	; 3
   137e2:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   137e4:	62 0f       	add	r22, r18
   137e6:	73 1f       	adc	r23, r19
   137e8:	6e 58       	subi	r22, 0x8E	; 142
   137ea:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   137ec:	f5 01       	movw	r30, r10
   137ee:	19 95       	eicall
   137f0:	ee cf       	rjmp	.-36     	; 0x137ce <PubSubClient::loop() [clone .constprop.106]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   137f2:	80 3c       	cpi	r24, 0xC0	; 192
   137f4:	a9 f4       	brne	.+42     	; 0x13820 <PubSubClient::loop() [clone .constprop.106]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   137f6:	80 ed       	ldi	r24, 0xD0	; 208
   137f8:	80 93 6f 0e 	sts	0x0E6F, r24	; 0x800e6f <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   137fc:	10 92 70 0e 	sts	0x0E70, r1	; 0x800e70 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   13800:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <mqtt_client>
   13804:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <mqtt_client+0x1>
   13808:	dc 01       	movw	r26, r24
   1380a:	ed 91       	ld	r30, X+
   1380c:	fc 91       	ld	r31, X
   1380e:	02 80       	ldd	r0, Z+2	; 0x02
   13810:	f3 81       	ldd	r31, Z+3	; 0x03
   13812:	e0 2d       	mov	r30, r0
   13814:	42 e0       	ldi	r20, 0x02	; 2
   13816:	50 e0       	ldi	r21, 0x00	; 0
   13818:	6f e6       	ldi	r22, 0x6F	; 111
   1381a:	7e e0       	ldi	r23, 0x0E	; 14
   1381c:	19 95       	eicall
   1381e:	05 cf       	rjmp	.-502    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   13820:	80 3d       	cpi	r24, 0xD0	; 208
   13822:	09 f0       	breq	.+2      	; 0x13826 <PubSubClient::loop() [clone .constprop.106]+0x2c2>
   13824:	02 cf       	rjmp	.-508    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   13826:	10 92 79 10 	sts	0x1079, r1	; 0x801079 <mqtt_client+0x20c>
   1382a:	ff ce       	rjmp	.-514    	; 0x1362a <PubSubClient::loop() [clone .constprop.106]+0xc6>

0001382c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   1382c:	bf 92       	push	r11
   1382e:	cf 92       	push	r12
   13830:	df 92       	push	r13
   13832:	ef 92       	push	r14
   13834:	ff 92       	push	r15
   13836:	0f 93       	push	r16
   13838:	1f 93       	push	r17
   1383a:	cf 93       	push	r28
   1383c:	df 93       	push	r29
   1383e:	00 d0       	rcall	.+0      	; 0x13840 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   13840:	1f 92       	push	r1
   13842:	cd b7       	in	r28, 0x3d	; 61
   13844:	de b7       	in	r29, 0x3e	; 62
   13846:	7c 01       	movw	r14, r24
   13848:	b6 2e       	mov	r11, r22
   1384a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   1384c:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   1384e:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   13850:	be 01       	movw	r22, r28
   13852:	6f 5f       	subi	r22, 0xFF	; 255
   13854:	7f 4f       	sbci	r23, 0xFF	; 255
   13856:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   13858:	28 2f       	mov	r18, r24
   1385a:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   1385c:	88 0f       	add	r24, r24
   1385e:	89 2f       	mov	r24, r25
   13860:	88 1f       	adc	r24, r24
   13862:	99 0b       	sbc	r25, r25
   13864:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   13866:	00 97       	sbiw	r24, 0x00	; 0
   13868:	09 f0       	breq	.+2      	; 0x1386c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   1386a:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   1386c:	f6 01       	movw	r30, r12
   1386e:	e3 0f       	add	r30, r19
   13870:	f1 1d       	adc	r31, r1
   13872:	20 83       	st	Z, r18
   13874:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   13876:	00 97       	sbiw	r24, 0x00	; 0
   13878:	79 f7       	brne	.-34     	; 0x13858 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   1387a:	e3 2f       	mov	r30, r19
   1387c:	f0 e0       	ldi	r31, 0x00	; 0
   1387e:	ba 01       	movw	r22, r20
   13880:	6e 1b       	sub	r22, r30
   13882:	7f 0b       	sbc	r23, r31
   13884:	6c 5f       	subi	r22, 0xFC	; 252
   13886:	7f 4f       	sbci	r23, 0xFF	; 255
   13888:	db 01       	movw	r26, r22
   1388a:	bc 92       	st	X, r11
   1388c:	4e 1b       	sub	r20, r30
   1388e:	5f 0b       	sbc	r21, r31
   13890:	4b 5f       	subi	r20, 0xFB	; 251
   13892:	5f 4f       	sbci	r21, 0xFF	; 255
   13894:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   13896:	9c 01       	movw	r18, r24
   13898:	2c 19       	sub	r18, r12
   1389a:	3d 09       	sbc	r19, r13
   1389c:	2e 17       	cp	r18, r30
   1389e:	3f 07       	cpc	r19, r31
   138a0:	3c f4       	brge	.+14     	; 0x138b0 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   138a2:	dc 01       	movw	r26, r24
   138a4:	2d 91       	ld	r18, X+
   138a6:	cd 01       	movw	r24, r26
   138a8:	da 01       	movw	r26, r20
   138aa:	2d 93       	st	X+, r18
   138ac:	ad 01       	movw	r20, r26
   138ae:	f3 cf       	rjmp	.-26     	; 0x13896 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   138b0:	d7 01       	movw	r26, r14
   138b2:	8d 91       	ld	r24, X+
   138b4:	9c 91       	ld	r25, X
   138b6:	0f 5f       	subi	r16, 0xFF	; 255
   138b8:	1f 4f       	sbci	r17, 0xFF	; 255
   138ba:	0e 0f       	add	r16, r30
   138bc:	1f 1f       	adc	r17, r31
   138be:	dc 01       	movw	r26, r24
   138c0:	ed 91       	ld	r30, X+
   138c2:	fc 91       	ld	r31, X
   138c4:	02 80       	ldd	r0, Z+2	; 0x02
   138c6:	f3 81       	ldd	r31, Z+3	; 0x03
   138c8:	e0 2d       	mov	r30, r0
   138ca:	a8 01       	movw	r20, r16
   138cc:	19 95       	eicall
   138ce:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   138d0:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   138d4:	f7 01       	movw	r30, r14
   138d6:	ec 5f       	subi	r30, 0xFC	; 252
   138d8:	fd 4f       	sbci	r31, 0xFD	; 253
   138da:	60 83       	st	Z, r22
   138dc:	71 83       	std	Z+1, r23	; 0x01
   138de:	82 83       	std	Z+2, r24	; 0x02
   138e0:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   138e2:	81 e0       	ldi	r24, 0x01	; 1
   138e4:	0c 15       	cp	r16, r12
   138e6:	1d 05       	cpc	r17, r13
   138e8:	09 f0       	breq	.+2      	; 0x138ec <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   138ea:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   138ec:	0f 90       	pop	r0
   138ee:	0f 90       	pop	r0
   138f0:	0f 90       	pop	r0
   138f2:	0f 90       	pop	r0
   138f4:	df 91       	pop	r29
   138f6:	cf 91       	pop	r28
   138f8:	1f 91       	pop	r17
   138fa:	0f 91       	pop	r16
   138fc:	ff 90       	pop	r15
   138fe:	ef 90       	pop	r14
   13900:	df 90       	pop	r13
   13902:	cf 90       	pop	r12
   13904:	bf 90       	pop	r11
   13906:	08 95       	ret

00013908 <PubSubClient::subscribe(char const*) [clone .constprop.145]>:
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   13908:	cf 93       	push	r28
   1390a:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   1390c:	fc 01       	movw	r30, r24
   1390e:	01 90       	ld	r0, Z+
   13910:	00 20       	and	r0, r0
   13912:	e9 f7       	brne	.-6      	; 0x1390e <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x6>
   13914:	9f 01       	movw	r18, r30
   13916:	28 1b       	sub	r18, r24
   13918:	39 0b       	sbc	r19, r25
   1391a:	28 5f       	subi	r18, 0xF8	; 248
   1391c:	3f 4f       	sbci	r19, 0xFF	; 255
   1391e:	21 30       	cpi	r18, 0x01	; 1
   13920:	32 40       	sbci	r19, 0x02	; 2
   13922:	98 f5       	brcc	.+102    	; 0x1398a <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
   13924:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   13926:	8d e6       	ldi	r24, 0x6D	; 109
   13928:	9e e0       	ldi	r25, 0x0E	; 14
   1392a:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
   1392e:	88 23       	and	r24, r24
   13930:	61 f1       	breq	.+88     	; 0x1398a <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   13932:	80 91 6f 10 	lds	r24, 0x106F	; 0x80106f <mqtt_client+0x202>
   13936:	90 91 70 10 	lds	r25, 0x1070	; 0x801070 <mqtt_client+0x203>
   1393a:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   1393c:	19 f1       	breq	.+70     	; 0x13984 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   1393e:	90 93 70 10 	sts	0x1070, r25	; 0x801070 <mqtt_client+0x203>
   13942:	80 93 6f 10 	sts	0x106F, r24	; 0x80106f <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   13946:	80 91 6f 10 	lds	r24, 0x106F	; 0x80106f <mqtt_client+0x202>
   1394a:	90 91 70 10 	lds	r25, 0x1070	; 0x801070 <mqtt_client+0x203>
   1394e:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   13952:	80 93 75 0e 	sts	0x0E75, r24	; 0x800e75 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   13956:	47 e0       	ldi	r20, 0x07	; 7
   13958:	50 e0       	ldi	r21, 0x00	; 0
   1395a:	6f e6       	ldi	r22, 0x6F	; 111
   1395c:	7e e0       	ldi	r23, 0x0E	; 14
   1395e:	ce 01       	movw	r24, r28
   13960:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   13964:	fc 01       	movw	r30, r24
   13966:	e3 59       	subi	r30, 0x93	; 147
   13968:	f1 4f       	sbci	r31, 0xF1	; 241
   1396a:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   1396c:	9c 01       	movw	r18, r24
   1396e:	24 50       	subi	r18, 0x04	; 4
   13970:	31 09       	sbc	r19, r1
   13972:	4f e6       	ldi	r20, 0x6F	; 111
   13974:	5e e0       	ldi	r21, 0x0E	; 14
   13976:	62 e8       	ldi	r22, 0x82	; 130
   13978:	8d e6       	ldi	r24, 0x6D	; 109
   1397a:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   1397c:	df 91       	pop	r29
   1397e:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   13980:	0c 94 16 9c 	jmp	0x1382c	; 0x1382c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   13984:	81 e0       	ldi	r24, 0x01	; 1
   13986:	90 e0       	ldi	r25, 0x00	; 0
   13988:	da cf       	rjmp	.-76     	; 0x1393e <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   1398a:	80 e0       	ldi	r24, 0x00	; 0
   1398c:	df 91       	pop	r29
   1398e:	cf 91       	pop	r28
   13990:	08 95       	ret

00013992 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   13992:	af 92       	push	r10
   13994:	bf 92       	push	r11
   13996:	cf 92       	push	r12
   13998:	df 92       	push	r13
   1399a:	ef 92       	push	r14
   1399c:	ff 92       	push	r15
   1399e:	0f 93       	push	r16
   139a0:	1f 93       	push	r17
   139a2:	cf 93       	push	r28
   139a4:	df 93       	push	r29
   139a6:	7c 01       	movw	r14, r24
   139a8:	5b 01       	movw	r10, r22
   139aa:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   139ac:	ea 01       	movw	r28, r20
   139ae:	09 90       	ld	r0, Y+
   139b0:	00 20       	and	r0, r0
   139b2:	e9 f7       	brne	.-6      	; 0x139ae <PubSubClient::publish(char const*, char const*)+0x1c>
   139b4:	21 97       	sbiw	r28, 0x01	; 1
   139b6:	c4 1b       	sub	r28, r20
   139b8:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   139ba:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
   139be:	88 23       	and	r24, r24
   139c0:	c9 f1       	breq	.+114    	; 0x13a34 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   139c2:	f5 01       	movw	r30, r10
   139c4:	01 90       	ld	r0, Z+
   139c6:	00 20       	and	r0, r0
   139c8:	e9 f7       	brne	.-6      	; 0x139c4 <PubSubClient::publish(char const*, char const*)+0x32>
   139ca:	31 97       	sbiw	r30, 0x01	; 1
   139cc:	ea 19       	sub	r30, r10
   139ce:	fb 09       	sbc	r31, r11
   139d0:	ce 01       	movw	r24, r28
   139d2:	07 96       	adiw	r24, 0x07	; 7
   139d4:	e8 0f       	add	r30, r24
   139d6:	f9 1f       	adc	r31, r25
   139d8:	e1 30       	cpi	r30, 0x01	; 1
   139da:	f2 40       	sbci	r31, 0x02	; 2
   139dc:	58 f5       	brcc	.+86     	; 0x13a34 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   139de:	67 01       	movw	r12, r14
   139e0:	82 e0       	ldi	r24, 0x02	; 2
   139e2:	c8 0e       	add	r12, r24
   139e4:	d1 1c       	adc	r13, r1
   139e6:	45 e0       	ldi	r20, 0x05	; 5
   139e8:	50 e0       	ldi	r21, 0x00	; 0
   139ea:	b6 01       	movw	r22, r12
   139ec:	c5 01       	movw	r24, r10
   139ee:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
   139f2:	f8 01       	movw	r30, r16
   139f4:	dc 01       	movw	r26, r24
   139f6:	12 96       	adiw	r26, 0x02	; 2
   139f8:	ae 0d       	add	r26, r14
   139fa:	bf 1d       	adc	r27, r15
   139fc:	a8 01       	movw	r20, r16
   139fe:	4c 0f       	add	r20, r28
   13a00:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   13a02:	e4 17       	cp	r30, r20
   13a04:	f5 07       	cpc	r31, r21
   13a06:	19 f0       	breq	.+6      	; 0x13a0e <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   13a08:	21 91       	ld	r18, Z+
   13a0a:	2d 93       	st	X+, r18
   13a0c:	fa cf       	rjmp	.-12     	; 0x13a02 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   13a0e:	25 97       	sbiw	r28, 0x05	; 5
   13a10:	9e 01       	movw	r18, r28
   13a12:	28 0f       	add	r18, r24
   13a14:	39 1f       	adc	r19, r25
   13a16:	a6 01       	movw	r20, r12
   13a18:	60 e3       	ldi	r22, 0x30	; 48
   13a1a:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   13a1c:	df 91       	pop	r29
   13a1e:	cf 91       	pop	r28
   13a20:	1f 91       	pop	r17
   13a22:	0f 91       	pop	r16
   13a24:	ff 90       	pop	r15
   13a26:	ef 90       	pop	r14
   13a28:	df 90       	pop	r13
   13a2a:	cf 90       	pop	r12
   13a2c:	bf 90       	pop	r11
   13a2e:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   13a30:	0c 94 16 9c 	jmp	0x1382c	; 0x1382c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   13a34:	80 e0       	ldi	r24, 0x00	; 0
   13a36:	df 91       	pop	r29
   13a38:	cf 91       	pop	r28
   13a3a:	1f 91       	pop	r17
   13a3c:	0f 91       	pop	r16
   13a3e:	ff 90       	pop	r15
   13a40:	ef 90       	pop	r14
   13a42:	df 90       	pop	r13
   13a44:	cf 90       	pop	r12
   13a46:	bf 90       	pop	r11
   13a48:	af 90       	pop	r10
   13a4a:	08 95       	ret

00013a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   13a4c:	af 92       	push	r10
   13a4e:	bf 92       	push	r11
   13a50:	df 92       	push	r13
   13a52:	ef 92       	push	r14
   13a54:	ff 92       	push	r15
   13a56:	0f 93       	push	r16
   13a58:	1f 93       	push	r17
   13a5a:	cf 93       	push	r28
   13a5c:	df 93       	push	r29
   13a5e:	cd b7       	in	r28, 0x3d	; 61
   13a60:	de b7       	in	r29, 0x3e	; 62
   13a62:	c6 55       	subi	r28, 0x56	; 86
   13a64:	d1 09       	sbc	r29, r1
   13a66:	0f b6       	in	r0, 0x3f	; 63
   13a68:	f8 94       	cli
   13a6a:	de bf       	out	0x3e, r29	; 62
   13a6c:	0f be       	out	0x3f, r0	; 63
   13a6e:	cd bf       	out	0x3d, r28	; 61
   13a70:	5c 01       	movw	r10, r24
   13a72:	d6 2e       	mov	r13, r22
   13a74:	7a 01       	movw	r14, r20
   13a76:	89 01       	movw	r16, r18
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   13a78:	8d e6       	ldi	r24, 0x6D	; 109
   13a7a:	9e e0       	ldi	r25, 0x0E	; 14
   13a7c:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
   13a80:	88 23       	and	r24, r24
   13a82:	09 f4       	brne	.+2      	; 0x13a86 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0x3a>
   13a84:	52 c0       	rjmp	.+164    	; 0x13b2a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xde>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   13a86:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mqtt_send_message>
   13a8a:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mqtt_send_message+0x1>
   13a8e:	01 96       	adiw	r24, 0x01	; 1
   13a90:	90 93 c5 0b 	sts	0x0BC5, r25	; 0x800bc5 <mqtt_send_message+0x1>
   13a94:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mqtt_send_message>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   13a98:	ce 01       	movw	r24, r28
   13a9a:	83 5b       	subi	r24, 0xB3	; 179
   13a9c:	9f 4f       	sbci	r25, 0xFF	; 255
   13a9e:	0e 94 dc 61 	call	0xc3b8	; 0xc3b8 <device_get_name(char*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   13aa2:	60 91 c2 0b 	lds	r22, 0x0BC2	; 0x800bc2 <header_out>
   13aa6:	70 91 c3 0b 	lds	r23, 0x0BC3	; 0x800bc3 <header_out+0x1>
   13aaa:	ce 01       	movw	r24, r28
   13aac:	01 96       	adiw	r24, 0x01	; 1
   13aae:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   13ab2:	be 01       	movw	r22, r28
   13ab4:	63 5b       	subi	r22, 0xB3	; 179
   13ab6:	7f 4f       	sbci	r23, 0xFF	; 255
   13ab8:	ce 01       	movw	r24, r28
   13aba:	01 96       	adiw	r24, 0x01	; 1
   13abc:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   13ac0:	6c ed       	ldi	r22, 0xDC	; 220
   13ac2:	73 e0       	ldi	r23, 0x03	; 3
   13ac4:	ce 01       	movw	r24, r28
   13ac6:	01 96       	adiw	r24, 0x01	; 1
   13ac8:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   13acc:	b5 01       	movw	r22, r10
   13ace:	ce 01       	movw	r24, r28
   13ad0:	01 96       	adiw	r24, 0x01	; 1
   13ad2:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   13ad6:	6c ed       	ldi	r22, 0xDC	; 220
   13ad8:	73 e0       	ldi	r23, 0x03	; 3
   13ada:	ce 01       	movw	r24, r28
   13adc:	01 96       	adiw	r24, 0x01	; 1
   13ade:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13ae2:	4a e0       	ldi	r20, 0x0A	; 10
   13ae4:	be 01       	movw	r22, r28
   13ae6:	6f 5b       	subi	r22, 0xBF	; 191
   13ae8:	7f 4f       	sbci	r23, 0xFF	; 255
   13aea:	8d 2d       	mov	r24, r13
   13aec:	90 e0       	ldi	r25, 0x00	; 0
   13aee:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   13af2:	be 01       	movw	r22, r28
   13af4:	6f 5b       	subi	r22, 0xBF	; 191
   13af6:	7f 4f       	sbci	r23, 0xFF	; 255
   13af8:	ce 01       	movw	r24, r28
   13afa:	01 96       	adiw	r24, 0x01	; 1
   13afc:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   13b00:	6c ed       	ldi	r22, 0xDC	; 220
   13b02:	73 e0       	ldi	r23, 0x03	; 3
   13b04:	ce 01       	movw	r24, r28
   13b06:	01 96       	adiw	r24, 0x01	; 1
   13b08:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   13b0c:	b7 01       	movw	r22, r14
   13b0e:	ce 01       	movw	r24, r28
   13b10:	01 96       	adiw	r24, 0x01	; 1
   13b12:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   13b16:	a8 01       	movw	r20, r16
   13b18:	be 01       	movw	r22, r28
   13b1a:	6f 5f       	subi	r22, 0xFF	; 255
   13b1c:	7f 4f       	sbci	r23, 0xFF	; 255
   13b1e:	8d e6       	ldi	r24, 0x6D	; 109
   13b20:	9e e0       	ldi	r25, 0x0E	; 14
   13b22:	0e 94 c9 9c 	call	0x13992	; 0x13992 <PubSubClient::publish(char const*, char const*)>
   13b26:	81 11       	cpse	r24, r1
   13b28:	09 c0       	rjmp	.+18     	; 0x13b3c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xf0>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   13b2a:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <mqtt_error>
   13b2e:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <mqtt_error+0x1>
   13b32:	01 96       	adiw	r24, 0x01	; 1
   13b34:	90 93 c7 0b 	sts	0x0BC7, r25	; 0x800bc7 <mqtt_error+0x1>
   13b38:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <mqtt_error>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:187
}
   13b3c:	ca 5a       	subi	r28, 0xAA	; 170
   13b3e:	df 4f       	sbci	r29, 0xFF	; 255
   13b40:	0f b6       	in	r0, 0x3f	; 63
   13b42:	f8 94       	cli
   13b44:	de bf       	out	0x3e, r29	; 62
   13b46:	0f be       	out	0x3f, r0	; 63
   13b48:	cd bf       	out	0x3d, r28	; 61
   13b4a:	df 91       	pop	r29
   13b4c:	cf 91       	pop	r28
   13b4e:	1f 91       	pop	r17
   13b50:	0f 91       	pop	r16
   13b52:	ff 90       	pop	r15
   13b54:	ef 90       	pop	r14
   13b56:	df 90       	pop	r13
   13b58:	bf 90       	pop	r11
   13b5a:	af 90       	pop	r10
   13b5c:	08 95       	ret

00013b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.223():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   13b5e:	0c 94 2b bb 	jmp	0x17656	; 0x17656 <eeprom_write_byte>

00013b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.227():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   13b62:	0c 94 23 bb 	jmp	0x17646	; 0x17646 <eeprom_read_byte>

00013b66 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>:
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   13b66:	1f 93       	push	r17
   13b68:	cf 93       	push	r28
   13b6a:	df 93       	push	r29
   13b6c:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   13b6e:	91 e2       	ldi	r25, 0x21	; 33
   13b70:	89 9f       	mul	r24, r25
   13b72:	e0 01       	movw	r28, r0
   13b74:	11 24       	eor	r1, r1
   13b76:	c8 5a       	subi	r28, 0xA8	; 168
   13b78:	de 4f       	sbci	r29, 0xFE	; 254
   13b7a:	ce 01       	movw	r24, r28
   13b7c:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   13b80:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   13b82:	11 11       	cpse	r17, r1
   13b84:	07 c0       	rjmp	.+14     	; 0x13b94 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x2e>
   13b86:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   13b88:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   13b8a:	df 91       	pop	r29
   13b8c:	cf 91       	pop	r28
   13b8e:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   13b90:	0c 94 af 9d 	jmp	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   13b94:	61 60       	ori	r22, 0x01	; 1
   13b96:	f8 cf       	rjmp	.-16     	; 0x13b88 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x22>

00013b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:118



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   13b98:	4f 92       	push	r4
   13b9a:	5f 92       	push	r5
   13b9c:	6f 92       	push	r6
   13b9e:	7f 92       	push	r7
   13ba0:	8f 92       	push	r8
   13ba2:	9f 92       	push	r9
   13ba4:	af 92       	push	r10
   13ba6:	bf 92       	push	r11
   13ba8:	cf 92       	push	r12
   13baa:	df 92       	push	r13
   13bac:	ef 92       	push	r14
   13bae:	ff 92       	push	r15
   13bb0:	0f 93       	push	r16
   13bb2:	1f 93       	push	r17
   13bb4:	cf 93       	push	r28
   13bb6:	df 93       	push	r29
   13bb8:	00 d0       	rcall	.+0      	; 0x13bba <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   13bba:	00 d0       	rcall	.+0      	; 0x13bbc <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   13bbc:	1f 92       	push	r1
   13bbe:	1f 92       	push	r1
   13bc0:	cd b7       	in	r28, 0x3d	; 61
   13bc2:	de b7       	in	r29, 0x3e	; 62
   13bc4:	6c 01       	movw	r12, r24
   13bc6:	46 2e       	mov	r4, r22
   13bc8:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
  char tmp1[8];
  str[0] = 0;
   13bca:	fc 01       	movw	r30, r24
   13bcc:	10 82       	st	Z, r1
   13bce:	3a 01       	movw	r6, r20
   13bd0:	f1 2c       	mov	r15, r1
   13bd2:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   13bd4:	a0 2e       	mov	r10, r16
   13bd6:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   13bd8:	8e 01       	movw	r16, r28
   13bda:	0f 5f       	subi	r16, 0xFF	; 255
   13bdc:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   13bde:	82 2f       	mov	r24, r18
   13be0:	81 50       	subi	r24, 0x01	; 1
   13be2:	99 0b       	sbc	r25, r25
   13be4:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   13be6:	f3 01       	movw	r30, r6
   13be8:	81 91       	ld	r24, Z+
   13bea:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   13bec:	a5 01       	movw	r20, r10
   13bee:	b8 01       	movw	r22, r16
   13bf0:	90 e0       	ldi	r25, 0x00	; 0
   13bf2:	0e 94 b4 b1 	call	0x16368	; 0x16368 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    if (strlen(tmp1) < 2)
   13bf6:	f8 01       	movw	r30, r16
   13bf8:	01 90       	ld	r0, Z+
   13bfa:	00 20       	and	r0, r0
   13bfc:	e9 f7       	brne	.-6      	; 0x13bf8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   13bfe:	31 97       	sbiw	r30, 0x01	; 1
   13c00:	e0 1b       	sub	r30, r16
   13c02:	f1 0b       	sbc	r31, r17
   13c04:	32 97       	sbiw	r30, 0x02	; 2
   13c06:	28 f4       	brcc	.+10     	; 0x13c12 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
      strcat(str, "0");
   13c08:	61 e0       	ldi	r22, 0x01	; 1
   13c0a:	77 e0       	ldi	r23, 0x07	; 7
   13c0c:	c6 01       	movw	r24, r12
   13c0e:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
    strcat(str, tmp1); 
   13c12:	b8 01       	movw	r22, r16
   13c14:	c6 01       	movw	r24, r12
   13c16:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    if (a < maxBytes - 1)
   13c1a:	e8 14       	cp	r14, r8
   13c1c:	f9 04       	cpc	r15, r9
   13c1e:	34 f4       	brge	.+12     	; 0x13c2c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:129
    {
      tmp1[0] = sep;
   13c20:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[1] = 0;
   13c22:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      strcat(str, tmp1);
   13c24:	b8 01       	movw	r22, r16
   13c26:	c6 01       	movw	r24, r12
   13c28:	0e 94 e9 bd 	call	0x17bd2	; 0x17bd2 <strcat>
   13c2c:	ff ef       	ldi	r31, 0xFF	; 255
   13c2e:	ef 1a       	sub	r14, r31
   13c30:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   13c32:	e5 14       	cp	r14, r5
   13c34:	c0 f2       	brcs	.-80     	; 0x13be6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:134
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   13c36:	28 96       	adiw	r28, 0x08	; 8
   13c38:	0f b6       	in	r0, 0x3f	; 63
   13c3a:	f8 94       	cli
   13c3c:	de bf       	out	0x3e, r29	; 62
   13c3e:	0f be       	out	0x3f, r0	; 63
   13c40:	cd bf       	out	0x3d, r28	; 61
   13c42:	df 91       	pop	r29
   13c44:	cf 91       	pop	r28
   13c46:	1f 91       	pop	r17
   13c48:	0f 91       	pop	r16
   13c4a:	ff 90       	pop	r15
   13c4c:	ef 90       	pop	r14
   13c4e:	df 90       	pop	r13
   13c50:	cf 90       	pop	r12
   13c52:	bf 90       	pop	r11
   13c54:	af 90       	pop	r10
   13c56:	9f 90       	pop	r9
   13c58:	8f 90       	pop	r8
   13c5a:	7f 90       	pop	r7
   13c5c:	6f 90       	pop	r6
   13c5e:	5f 90       	pop	r5
   13c60:	4f 90       	pop	r4
   13c62:	08 95       	ret

00013c64 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   13c64:	cf 92       	push	r12
   13c66:	df 92       	push	r13
   13c68:	ef 92       	push	r14
   13c6a:	ff 92       	push	r15
   13c6c:	0f 93       	push	r16
   13c6e:	1f 93       	push	r17
   13c70:	cf 93       	push	r28
   13c72:	df 93       	push	r29
   13c74:	00 d0       	rcall	.+0      	; 0x13c76 <EEPROMwriteFloat(unsigned int, float)+0x12>
   13c76:	1f 92       	push	r1
   13c78:	cd b7       	in	r28, 0x3d	; 61
   13c7a:	de b7       	in	r29, 0x3e	; 62
   13c7c:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   13c7e:	49 83       	std	Y+1, r20	; 0x01
   13c80:	5a 83       	std	Y+2, r21	; 0x02
   13c82:	6b 83       	std	Y+3, r22	; 0x03
   13c84:	7c 83       	std	Y+4, r23	; 0x04
   13c86:	ce 01       	movw	r24, r28
   13c88:	01 96       	adiw	r24, 0x01	; 1
   13c8a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   13c8c:	10 e0       	ldi	r17, 0x00	; 0
   13c8e:	00 e0       	ldi	r16, 0x00	; 0
   13c90:	f7 01       	movw	r30, r14
   13c92:	61 91       	ld	r22, Z+
   13c94:	7f 01       	movw	r14, r30
   13c96:	c8 01       	movw	r24, r16
   13c98:	8c 0d       	add	r24, r12
   13c9a:	9d 1d       	adc	r25, r13
   13c9c:	0e 94 af 9d 	call	0x13b5e	; 0x13b5e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
   13ca0:	0f 5f       	subi	r16, 0xFF	; 255
   13ca2:	1f 4f       	sbci	r17, 0xFF	; 255
   13ca4:	04 30       	cpi	r16, 0x04	; 4
   13ca6:	11 05       	cpc	r17, r1
   13ca8:	99 f7       	brne	.-26     	; 0x13c90 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   13caa:	0f 90       	pop	r0
   13cac:	0f 90       	pop	r0
   13cae:	0f 90       	pop	r0
   13cb0:	0f 90       	pop	r0
   13cb2:	df 91       	pop	r29
   13cb4:	cf 91       	pop	r28
   13cb6:	1f 91       	pop	r17
   13cb8:	0f 91       	pop	r16
   13cba:	ff 90       	pop	r15
   13cbc:	ef 90       	pop	r14
   13cbe:	df 90       	pop	r13
   13cc0:	cf 90       	pop	r12
   13cc2:	08 95       	ret

00013cc4 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   13cc4:	cf 92       	push	r12
   13cc6:	df 92       	push	r13
   13cc8:	ef 92       	push	r14
   13cca:	ff 92       	push	r15
   13ccc:	0f 93       	push	r16
   13cce:	1f 93       	push	r17
   13cd0:	cf 93       	push	r28
   13cd2:	df 93       	push	r29
   13cd4:	00 d0       	rcall	.+0      	; 0x13cd6 <EEPROMreadFloat(unsigned int)+0x12>
   13cd6:	1f 92       	push	r1
   13cd8:	cd b7       	in	r28, 0x3d	; 61
   13cda:	de b7       	in	r29, 0x3e	; 62
   13cdc:	7e 01       	movw	r14, r28
   13cde:	25 e0       	ldi	r18, 0x05	; 5
   13ce0:	e2 0e       	add	r14, r18
   13ce2:	f1 1c       	adc	r15, r1
   13ce4:	8e 01       	movw	r16, r28
   13ce6:	0f 5f       	subi	r16, 0xFF	; 255
   13ce8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   13cea:	6c 01       	movw	r12, r24
   13cec:	c0 1a       	sub	r12, r16
   13cee:	d1 0a       	sbc	r13, r17
   13cf0:	c6 01       	movw	r24, r12
   13cf2:	80 0f       	add	r24, r16
   13cf4:	91 1f       	adc	r25, r17
   13cf6:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   13cfa:	f8 01       	movw	r30, r16
   13cfc:	81 93       	st	Z+, r24
   13cfe:	8f 01       	movw	r16, r30
   13d00:	ee 15       	cp	r30, r14
   13d02:	ff 05       	cpc	r31, r15
   13d04:	a9 f7       	brne	.-22     	; 0x13cf0 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   13d06:	69 81       	ldd	r22, Y+1	; 0x01
   13d08:	7a 81       	ldd	r23, Y+2	; 0x02
   13d0a:	8b 81       	ldd	r24, Y+3	; 0x03
   13d0c:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   13d0e:	0f 90       	pop	r0
   13d10:	0f 90       	pop	r0
   13d12:	0f 90       	pop	r0
   13d14:	0f 90       	pop	r0
   13d16:	df 91       	pop	r29
   13d18:	cf 91       	pop	r28
   13d1a:	1f 91       	pop	r17
   13d1c:	0f 91       	pop	r16
   13d1e:	ff 90       	pop	r15
   13d20:	ef 90       	pop	r14
   13d22:	df 90       	pop	r13
   13d24:	cf 90       	pop	r12
   13d26:	08 95       	ret

00013d28 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   13d28:	cf 93       	push	r28
   13d2a:	df 93       	push	r29
   13d2c:	d8 2f       	mov	r29, r24
   13d2e:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   13d30:	80 91 97 11 	lds	r24, 0x1197	; 0x801197 <wiznet_SPI_settings>
   13d34:	90 91 98 11 	lds	r25, 0x1198	; 0x801198 <wiznet_SPI_settings+0x1>
   13d38:	0e 94 b4 87 	call	0x10f68	; 0x10f68 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   13d3c:	0e 94 fb 91 	call	0x123f6	; 0x123f6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   13d40:	80 e0       	ldi	r24, 0x00	; 0
   13d42:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   13d46:	8d 2f       	mov	r24, r29
   13d48:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   13d4c:	8c 2f       	mov	r24, r28
   13d4e:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   13d52:	80 e0       	ldi	r24, 0x00	; 0
   13d54:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
   13d58:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   13d5a:	0e 94 f6 91 	call	0x123ec	; 0x123ec <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   13d5e:	8c 2f       	mov	r24, r28
   13d60:	df 91       	pop	r29
   13d62:	cf 91       	pop	r28
   13d64:	08 95       	ret

00013d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   13d66:	df 92       	push	r13
   13d68:	ef 92       	push	r14
   13d6a:	ff 92       	push	r15
   13d6c:	0f 93       	push	r16
   13d6e:	1f 93       	push	r17
   13d70:	cf 93       	push	r28
   13d72:	df 93       	push	r29
   13d74:	d8 2f       	mov	r29, r24
   13d76:	d9 2e       	mov	r13, r25
   13d78:	c6 2f       	mov	r28, r22
   13d7a:	7a 01       	movw	r14, r20
   13d7c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   13d7e:	80 91 97 11 	lds	r24, 0x1197	; 0x801197 <wiznet_SPI_settings>
   13d82:	90 91 98 11 	lds	r25, 0x1198	; 0x801198 <wiznet_SPI_settings+0x1>
   13d86:	0e 94 b4 87 	call	0x10f68	; 0x10f68 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   13d8a:	0e 94 fb 91 	call	0x123f6	; 0x123f6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   13d8e:	8d 2d       	mov	r24, r13
   13d90:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   13d94:	8d 2f       	mov	r24, r29
   13d96:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   13d9a:	8c 2f       	mov	r24, r28
   13d9c:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
   13da0:	e7 01       	movw	r28, r14
   13da2:	e0 0e       	add	r14, r16
   13da4:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   13da6:	ce 15       	cp	r28, r14
   13da8:	df 05       	cpc	r29, r15
   13daa:	21 f0       	breq	.+8      	; 0x13db4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   13dac:	89 91       	ld	r24, Y+
   13dae:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
   13db2:	f9 cf       	rjmp	.-14     	; 0x13da6 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   13db4:	0e 94 f6 91 	call	0x123ec	; 0x123ec <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   13db8:	c8 01       	movw	r24, r16
   13dba:	df 91       	pop	r29
   13dbc:	cf 91       	pop	r28
   13dbe:	1f 91       	pop	r17
   13dc0:	0f 91       	pop	r16
   13dc2:	ff 90       	pop	r15
   13dc4:	ef 90       	pop	r14
   13dc6:	df 90       	pop	r13
   13dc8:	08 95       	ret

00013dca <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   13dca:	8f 92       	push	r8
   13dcc:	9f 92       	push	r9
   13dce:	af 92       	push	r10
   13dd0:	bf 92       	push	r11
   13dd2:	cf 92       	push	r12
   13dd4:	df 92       	push	r13
   13dd6:	ef 92       	push	r14
   13dd8:	ff 92       	push	r15
   13dda:	0f 93       	push	r16
   13ddc:	1f 93       	push	r17
   13dde:	cf 93       	push	r28
   13de0:	5c 01       	movw	r10, r24
   13de2:	6b 01       	movw	r12, r22
   13de4:	7a 01       	movw	r14, r20
   13de6:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   13de8:	c0 91 71 0c 	lds	r28, 0x0C71	; 0x800c71 <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   13dec:	c0 93 3d 11 	sts	0x113D, r28	; 0x80113d <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   13df0:	68 ee       	ldi	r22, 0xE8	; 232
   13df2:	73 e0       	ldi	r23, 0x03	; 3
   13df4:	80 e0       	ldi	r24, 0x00	; 0
   13df6:	90 e0       	ldi	r25, 0x00	; 0
   13df8:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   13dfc:	61 e0       	ldi	r22, 0x01	; 1
   13dfe:	8c 2f       	mov	r24, r28
   13e00:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   13e04:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   13e08:	60 e0       	ldi	r22, 0x00	; 0
   13e0a:	90 e0       	ldi	r25, 0x00	; 0
   13e0c:	80 e0       	ldi	r24, 0x00	; 0
   13e0e:	0e 94 94 9e 	call	0x13d28	; 0x13d28 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   13e12:	48 2f       	mov	r20, r24
   13e14:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   13e16:	64 e0       	ldi	r22, 0x04	; 4
   13e18:	90 e0       	ldi	r25, 0x00	; 0
   13e1a:	80 e0       	ldi	r24, 0x00	; 0
   13e1c:	0e 94 00 92 	call	0x12400	; 0x12400 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   13e20:	cc e0       	ldi	r28, 0x0C	; 12
   13e22:	88 e0       	ldi	r24, 0x08	; 8
   13e24:	88 2e       	mov	r8, r24
   13e26:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   13e28:	42 e0       	ldi	r20, 0x02	; 2
   13e2a:	6c 2f       	mov	r22, r28
   13e2c:	8e e1       	ldi	r24, 0x1E	; 30
   13e2e:	90 e0       	ldi	r25, 0x00	; 0
   13e30:	0e 94 00 92 	call	0x12400	; 0x12400 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   13e34:	42 e0       	ldi	r20, 0x02	; 2
   13e36:	6c 2f       	mov	r22, r28
   13e38:	8f e1       	ldi	r24, 0x1F	; 31
   13e3a:	90 e0       	ldi	r25, 0x00	; 0
   13e3c:	0e 94 00 92 	call	0x12400	; 0x12400 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   13e40:	81 e0       	ldi	r24, 0x01	; 1
   13e42:	88 1a       	sub	r8, r24
   13e44:	91 08       	sbc	r9, r1
   13e46:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   13e48:	81 14       	cp	r8, r1
   13e4a:	91 04       	cpc	r9, r1
   13e4c:	69 f7       	brne	.-38     	; 0x13e28 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   13e4e:	26 e0       	ldi	r18, 0x06	; 6
   13e50:	30 e0       	ldi	r19, 0x00	; 0
   13e52:	4a e7       	ldi	r20, 0x7A	; 122
   13e54:	5c e0       	ldi	r21, 0x0C	; 12
   13e56:	64 e0       	ldi	r22, 0x04	; 4
   13e58:	89 e0       	ldi	r24, 0x09	; 9
   13e5a:	90 e0       	ldi	r25, 0x00	; 0
   13e5c:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   13e60:	a5 01       	movw	r20, r10
   13e62:	4e 5f       	subi	r20, 0xFE	; 254
   13e64:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   13e66:	24 e0       	ldi	r18, 0x04	; 4
   13e68:	30 e0       	ldi	r19, 0x00	; 0
   13e6a:	64 e0       	ldi	r22, 0x04	; 4
   13e6c:	8f e0       	ldi	r24, 0x0F	; 15
   13e6e:	90 e0       	ldi	r25, 0x00	; 0
   13e70:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   13e74:	a7 01       	movw	r20, r14
   13e76:	4e 5f       	subi	r20, 0xFE	; 254
   13e78:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   13e7a:	24 e0       	ldi	r18, 0x04	; 4
   13e7c:	30 e0       	ldi	r19, 0x00	; 0
   13e7e:	64 e0       	ldi	r22, 0x04	; 4
   13e80:	81 e0       	ldi	r24, 0x01	; 1
   13e82:	90 e0       	ldi	r25, 0x00	; 0
   13e84:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   13e88:	a8 01       	movw	r20, r16
   13e8a:	4e 5f       	subi	r20, 0xFE	; 254
   13e8c:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   13e8e:	24 e0       	ldi	r18, 0x04	; 4
   13e90:	30 e0       	ldi	r19, 0x00	; 0
   13e92:	64 e0       	ldi	r22, 0x04	; 4
   13e94:	85 e0       	ldi	r24, 0x05	; 5
   13e96:	90 e0       	ldi	r25, 0x00	; 0
   13e98:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   13e9c:	f6 01       	movw	r30, r12
   13e9e:	82 81       	ldd	r24, Z+2	; 0x02
   13ea0:	93 81       	ldd	r25, Z+3	; 0x03
   13ea2:	a4 81       	ldd	r26, Z+4	; 0x04
   13ea4:	b5 81       	ldd	r27, Z+5	; 0x05
   13ea6:	80 93 67 0c 	sts	0x0C67, r24	; 0x800c67 <Ethernet+0x2>
   13eaa:	90 93 68 0c 	sts	0x0C68, r25	; 0x800c68 <Ethernet+0x3>
   13eae:	a0 93 69 0c 	sts	0x0C69, r26	; 0x800c69 <Ethernet+0x4>
   13eb2:	b0 93 6a 0c 	sts	0x0C6A, r27	; 0x800c6a <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   13eb6:	cf 91       	pop	r28
   13eb8:	1f 91       	pop	r17
   13eba:	0f 91       	pop	r16
   13ebc:	ff 90       	pop	r15
   13ebe:	ef 90       	pop	r14
   13ec0:	df 90       	pop	r13
   13ec2:	cf 90       	pop	r12
   13ec4:	bf 90       	pop	r11
   13ec6:	af 90       	pop	r10
   13ec8:	9f 90       	pop	r9
   13eca:	8f 90       	pop	r8
   13ecc:	08 95       	ret

00013ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   13ece:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   13ed0:	82 95       	swap	r24
   13ed2:	88 0f       	add	r24, r24
   13ed4:	80 7e       	andi	r24, 0xE0	; 224
   13ed6:	6c e0       	ldi	r22, 0x0C	; 12
   13ed8:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   13eda:	c9 01       	movw	r24, r18
   13edc:	0c 94 00 92 	jmp	0x12400	; 0x12400 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00013ee0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   13ee0:	bf 92       	push	r11
   13ee2:	cf 92       	push	r12
   13ee4:	df 92       	push	r13
   13ee6:	ef 92       	push	r14
   13ee8:	ff 92       	push	r15
   13eea:	0f 93       	push	r16
   13eec:	1f 93       	push	r17
   13eee:	cf 93       	push	r28
   13ef0:	df 93       	push	r29
   13ef2:	b8 2e       	mov	r11, r24
   13ef4:	6b 01       	movw	r12, r22
   13ef6:	7a 01       	movw	r14, r20
   13ef8:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   13efa:	64 e2       	ldi	r22, 0x24	; 36
   13efc:	70 e0       	ldi	r23, 0x00	; 0
   13efe:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   13f02:	c8 2f       	mov	r28, r24
   13f04:	65 e2       	ldi	r22, 0x25	; 37
   13f06:	70 e0       	ldi	r23, 0x00	; 0
   13f08:	8b 2d       	mov	r24, r11
   13f0a:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   13f0e:	d0 e0       	ldi	r29, 0x00	; 0
   13f10:	dc 2f       	mov	r29, r28
   13f12:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   13f14:	8c 0d       	add	r24, r12
   13f16:	9d 2d       	mov	r25, r13
   13f18:	91 1d       	adc	r25, r1
   13f1a:	c8 0f       	add	r28, r24
   13f1c:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   13f1e:	6b 2d       	mov	r22, r11
   13f20:	62 95       	swap	r22
   13f22:	66 0f       	add	r22, r22
   13f24:	60 7e       	andi	r22, 0xE0	; 224
   13f26:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   13f28:	98 01       	movw	r18, r16
   13f2a:	a7 01       	movw	r20, r14
   13f2c:	ce 01       	movw	r24, r28
   13f2e:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   13f32:	c0 0f       	add	r28, r16
   13f34:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   13f36:	4d 2f       	mov	r20, r29
   13f38:	64 e2       	ldi	r22, 0x24	; 36
   13f3a:	70 e0       	ldi	r23, 0x00	; 0
   13f3c:	8b 2d       	mov	r24, r11
   13f3e:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   13f42:	4c 2f       	mov	r20, r28
   13f44:	65 e2       	ldi	r22, 0x25	; 37
   13f46:	70 e0       	ldi	r23, 0x00	; 0
   13f48:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   13f4a:	df 91       	pop	r29
   13f4c:	cf 91       	pop	r28
   13f4e:	1f 91       	pop	r17
   13f50:	0f 91       	pop	r16
   13f52:	ff 90       	pop	r15
   13f54:	ef 90       	pop	r14
   13f56:	df 90       	pop	r13
   13f58:	cf 90       	pop	r12
   13f5a:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   13f5c:	0c 94 67 9f 	jmp	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00013f60 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   13f60:	af 92       	push	r10
   13f62:	bf 92       	push	r11
   13f64:	cf 92       	push	r12
   13f66:	df 92       	push	r13
   13f68:	ff 92       	push	r15
   13f6a:	0f 93       	push	r16
   13f6c:	1f 93       	push	r17
   13f6e:	cf 93       	push	r28
   13f70:	df 93       	push	r29
   13f72:	8c 01       	movw	r16, r24
   13f74:	5b 01       	movw	r10, r22
   13f76:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   13f78:	fc 01       	movw	r30, r24
   13f7a:	c7 88       	ldd	r12, Z+23	; 0x17
   13f7c:	d0 8c       	ldd	r13, Z+24	; 0x18
   13f7e:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   13f80:	8f 2d       	mov	r24, r15
   13f82:	0e 94 25 90 	call	0x1204a	; 0x1204a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   13f86:	8c 17       	cp	r24, r28
   13f88:	9d 07       	cpc	r25, r29
   13f8a:	20 f4       	brcc	.+8      	; 0x13f94 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   13f8c:	8f 2d       	mov	r24, r15
   13f8e:	0e 94 25 90 	call	0x1204a	; 0x1204a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   13f92:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   13f94:	9e 01       	movw	r18, r28
   13f96:	a5 01       	movw	r20, r10
   13f98:	b6 01       	movw	r22, r12
   13f9a:	8f 2d       	mov	r24, r15
   13f9c:	0e 94 70 9f 	call	0x13ee0	; 0x13ee0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   13fa0:	f8 01       	movw	r30, r16
   13fa2:	87 89       	ldd	r24, Z+23	; 0x17
   13fa4:	90 8d       	ldd	r25, Z+24	; 0x18
   13fa6:	8c 0f       	add	r24, r28
   13fa8:	9d 1f       	adc	r25, r29
   13faa:	90 8f       	std	Z+24, r25	; 0x18
   13fac:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   13fae:	ce 01       	movw	r24, r28
   13fb0:	df 91       	pop	r29
   13fb2:	cf 91       	pop	r28
   13fb4:	1f 91       	pop	r17
   13fb6:	0f 91       	pop	r16
   13fb8:	ff 90       	pop	r15
   13fba:	df 90       	pop	r13
   13fbc:	cf 90       	pop	r12
   13fbe:	bf 90       	pop	r11
   13fc0:	af 90       	pop	r10
   13fc2:	08 95       	ret

00013fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   13fc4:	cf 93       	push	r28
   13fc6:	c8 2f       	mov	r28, r24
   13fc8:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   13fca:	61 e0       	ldi	r22, 0x01	; 1
   13fcc:	70 e0       	ldi	r23, 0x00	; 0
   13fce:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   13fd2:	61 e0       	ldi	r22, 0x01	; 1
   13fd4:	70 e0       	ldi	r23, 0x00	; 0
   13fd6:	8c 2f       	mov	r24, r28
   13fd8:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   13fdc:	81 11       	cpse	r24, r1
   13fde:	f9 cf       	rjmp	.-14     	; 0x13fd2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   13fe0:	cf 91       	pop	r28
   13fe2:	08 95       	ret

00013fe4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   13fe4:	af 92       	push	r10
   13fe6:	bf 92       	push	r11
   13fe8:	cf 92       	push	r12
   13fea:	df 92       	push	r13
   13fec:	ef 92       	push	r14
   13fee:	ff 92       	push	r15
   13ff0:	0f 93       	push	r16
   13ff2:	1f 93       	push	r17
   13ff4:	cf 93       	push	r28
   13ff6:	df 93       	push	r29
   13ff8:	f8 2e       	mov	r15, r24
   13ffa:	5b 01       	movw	r10, r22
   13ffc:	6a 01       	movw	r12, r20
   13ffe:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   14000:	68 e2       	ldi	r22, 0x28	; 40
   14002:	70 e0       	ldi	r23, 0x00	; 0
   14004:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   14008:	08 2f       	mov	r16, r24
   1400a:	10 e0       	ldi	r17, 0x00	; 0
   1400c:	10 2f       	mov	r17, r16
   1400e:	00 27       	eor	r16, r16
   14010:	69 e2       	ldi	r22, 0x29	; 41
   14012:	70 e0       	ldi	r23, 0x00	; 0
   14014:	8f 2d       	mov	r24, r15
   14016:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
   1401a:	e8 01       	movw	r28, r16
   1401c:	c8 0f       	add	r28, r24
   1401e:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   14020:	80 91 97 11 	lds	r24, 0x1197	; 0x801197 <wiznet_SPI_settings>
   14024:	90 91 98 11 	lds	r25, 0x1198	; 0x801198 <wiznet_SPI_settings+0x1>
   14028:	0e 94 b4 87 	call	0x10f68	; 0x10f68 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   1402c:	0e 94 fb 91 	call	0x123f6	; 0x123f6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   14030:	8d 2f       	mov	r24, r29
   14032:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   14036:	8c 2f       	mov	r24, r28
   14038:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   1403c:	8f 2d       	mov	r24, r15
   1403e:	82 95       	swap	r24
   14040:	88 0f       	add	r24, r24
   14042:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   14044:	88 5e       	subi	r24, 0xE8	; 232
   14046:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
   1404a:	85 01       	movw	r16, r10
   1404c:	ac 0c       	add	r10, r12
   1404e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   14050:	80 e0       	ldi	r24, 0x00	; 0
   14052:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <SPIClass::transfer(unsigned char)>
   14056:	f8 01       	movw	r30, r16
   14058:	81 93       	st	Z+, r24
   1405a:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   1405c:	ea 15       	cp	r30, r10
   1405e:	fb 05       	cpc	r31, r11
   14060:	b9 f7       	brne	.-18     	; 0x14050 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   14062:	0e 94 f6 91 	call	0x123ec	; 0x123ec <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   14066:	e1 10       	cpse	r14, r1
   14068:	18 c0       	rjmp	.+48     	; 0x1409a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   1406a:	cc 0d       	add	r28, r12
   1406c:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1406e:	4d 2f       	mov	r20, r29
   14070:	68 e2       	ldi	r22, 0x28	; 40
   14072:	70 e0       	ldi	r23, 0x00	; 0
   14074:	8f 2d       	mov	r24, r15
   14076:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1407a:	4c 2f       	mov	r20, r28
   1407c:	69 e2       	ldi	r22, 0x29	; 41
   1407e:	70 e0       	ldi	r23, 0x00	; 0
   14080:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   14082:	df 91       	pop	r29
   14084:	cf 91       	pop	r28
   14086:	1f 91       	pop	r17
   14088:	0f 91       	pop	r16
   1408a:	ff 90       	pop	r15
   1408c:	ef 90       	pop	r14
   1408e:	df 90       	pop	r13
   14090:	cf 90       	pop	r12
   14092:	bf 90       	pop	r11
   14094:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   14096:	0c 94 67 9f 	jmp	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   1409a:	df 91       	pop	r29
   1409c:	cf 91       	pop	r28
   1409e:	1f 91       	pop	r17
   140a0:	0f 91       	pop	r16
   140a2:	ff 90       	pop	r15
   140a4:	ef 90       	pop	r14
   140a6:	df 90       	pop	r13
   140a8:	cf 90       	pop	r12
   140aa:	bf 90       	pop	r11
   140ac:	af 90       	pop	r10
   140ae:	08 95       	ret

000140b0 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   140b0:	cf 92       	push	r12
   140b2:	df 92       	push	r13
   140b4:	ef 92       	push	r14
   140b6:	ff 92       	push	r15
   140b8:	1f 93       	push	r17
   140ba:	cf 93       	push	r28
   140bc:	df 93       	push	r29
   140be:	18 2f       	mov	r17, r24
   140c0:	6b 01       	movw	r12, r22
   140c2:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   140c4:	0e 94 41 90 	call	0x12082	; 0x12082 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   140c8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   140ca:	00 97       	sbiw	r24, 0x00	; 0
   140cc:	d9 f4       	brne	.+54     	; 0x14104 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   140ce:	63 e0       	ldi	r22, 0x03	; 3
   140d0:	70 e0       	ldi	r23, 0x00	; 0
   140d2:	81 2f       	mov	r24, r17
   140d4:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   140d8:	84 31       	cpi	r24, 0x14	; 20
   140da:	59 f0       	breq	.+22     	; 0x140f2 <recv(unsigned char, unsigned char*, int)+0x42>
   140dc:	88 23       	and	r24, r24
   140de:	49 f0       	breq	.+18     	; 0x140f2 <recv(unsigned char, unsigned char*, int)+0x42>
   140e0:	c1 e0       	ldi	r28, 0x01	; 1
   140e2:	d0 e0       	ldi	r29, 0x00	; 0
   140e4:	8c 31       	cpi	r24, 0x1C	; 28
   140e6:	11 f4       	brne	.+4      	; 0x140ec <recv(unsigned char, unsigned char*, int)+0x3c>
   140e8:	d0 e0       	ldi	r29, 0x00	; 0
   140ea:	c0 e0       	ldi	r28, 0x00	; 0
   140ec:	d1 95       	neg	r29
   140ee:	c1 95       	neg	r28
   140f0:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   140f2:	ce 01       	movw	r24, r28
   140f4:	df 91       	pop	r29
   140f6:	cf 91       	pop	r28
   140f8:	1f 91       	pop	r17
   140fa:	ff 90       	pop	r15
   140fc:	ef 90       	pop	r14
   140fe:	df 90       	pop	r13
   14100:	cf 90       	pop	r12
   14102:	08 95       	ret
   14104:	e8 16       	cp	r14, r24
   14106:	f9 06       	cpc	r15, r25
   14108:	0c f4       	brge	.+2      	; 0x1410c <recv(unsigned char, unsigned char*, int)+0x5c>
   1410a:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   1410c:	1c 16       	cp	r1, r28
   1410e:	1d 06       	cpc	r1, r29
   14110:	84 f7       	brge	.-32     	; 0x140f2 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   14112:	20 e0       	ldi	r18, 0x00	; 0
   14114:	ae 01       	movw	r20, r28
   14116:	b6 01       	movw	r22, r12
   14118:	81 2f       	mov	r24, r17
   1411a:	0e 94 f2 9f 	call	0x13fe4	; 0x13fe4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   1411e:	60 e4       	ldi	r22, 0x40	; 64
   14120:	70 e0       	ldi	r23, 0x00	; 0
   14122:	81 2f       	mov	r24, r17
   14124:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   14128:	e4 cf       	rjmp	.-56     	; 0x140f2 <recv(unsigned char, unsigned char*, int)+0x42>

0001412a <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   1412a:	cf 93       	push	r28
   1412c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   1412e:	fc 01       	movw	r30, r24
   14130:	21 8d       	ldd	r18, Z+25	; 0x19
   14132:	32 8d       	ldd	r19, Z+26	; 0x1a
   14134:	21 15       	cp	r18, r1
   14136:	31 05       	cpc	r19, r1
   14138:	29 f4       	brne	.+10     	; 0x14144 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   1413a:	8f ef       	ldi	r24, 0xFF	; 255
   1413c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   1413e:	df 91       	pop	r29
   14140:	cf 91       	pop	r28
   14142:	08 95       	ret
   14144:	ec 01       	movw	r28, r24
   14146:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   14148:	42 17       	cp	r20, r18
   1414a:	53 07       	cpc	r21, r19
   1414c:	08 f0       	brcs	.+2      	; 0x14150 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   1414e:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   14150:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   14154:	18 16       	cp	r1, r24
   14156:	19 06       	cpc	r1, r25
   14158:	84 f7       	brge	.-32     	; 0x1413a <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   1415a:	29 8d       	ldd	r18, Y+25	; 0x19
   1415c:	3a 8d       	ldd	r19, Y+26	; 0x1a
   1415e:	28 1b       	sub	r18, r24
   14160:	39 0b       	sbc	r19, r25
   14162:	3a 8f       	std	Y+26, r19	; 0x1a
   14164:	29 8f       	std	Y+25, r18	; 0x19
   14166:	eb cf       	rjmp	.-42     	; 0x1413e <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00014168 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   14168:	0f 93       	push	r16
   1416a:	1f 93       	push	r17
   1416c:	cf 93       	push	r28
   1416e:	df 93       	push	r29
   14170:	1f 92       	push	r1
   14172:	cd b7       	in	r28, 0x3d	; 61
   14174:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   14176:	fc 01       	movw	r30, r24
   14178:	21 8d       	ldd	r18, Z+25	; 0x19
   1417a:	32 8d       	ldd	r19, Z+26	; 0x1a
   1417c:	23 2b       	or	r18, r19
   1417e:	41 f4       	brne	.+16     	; 0x14190 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   14180:	8f ef       	ldi	r24, 0xFF	; 255
   14182:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   14184:	0f 90       	pop	r0
   14186:	df 91       	pop	r29
   14188:	cf 91       	pop	r28
   1418a:	1f 91       	pop	r17
   1418c:	0f 91       	pop	r16
   1418e:	08 95       	ret
   14190:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   14192:	41 e0       	ldi	r20, 0x01	; 1
   14194:	50 e0       	ldi	r21, 0x00	; 0
   14196:	be 01       	movw	r22, r28
   14198:	6f 5f       	subi	r22, 0xFF	; 255
   1419a:	7f 4f       	sbci	r23, 0xFF	; 255
   1419c:	fc 01       	movw	r30, r24
   1419e:	84 85       	ldd	r24, Z+12	; 0x0c
   141a0:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <recv(unsigned char, unsigned char*, int)>
   141a4:	18 16       	cp	r1, r24
   141a6:	19 06       	cpc	r1, r25
   141a8:	5c f7       	brge	.-42     	; 0x14180 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   141aa:	f8 01       	movw	r30, r16
   141ac:	81 8d       	ldd	r24, Z+25	; 0x19
   141ae:	92 8d       	ldd	r25, Z+26	; 0x1a
   141b0:	01 97       	sbiw	r24, 0x01	; 1
   141b2:	92 8f       	std	Z+26, r25	; 0x1a
   141b4:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   141b6:	89 81       	ldd	r24, Y+1	; 0x01
   141b8:	90 e0       	ldi	r25, 0x00	; 0
   141ba:	e4 cf       	rjmp	.-56     	; 0x14184 <EthernetUDP::read()+0x1c>

000141bc <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   141bc:	0f 93       	push	r16
   141be:	1f 93       	push	r17
   141c0:	cf 93       	push	r28
   141c2:	df 93       	push	r29
   141c4:	00 d0       	rcall	.+0      	; 0x141c6 <EthernetUDP::parsePacket()+0xa>
   141c6:	00 d0       	rcall	.+0      	; 0x141c8 <EthernetUDP::parsePacket()+0xc>
   141c8:	1f 92       	push	r1
   141ca:	1f 92       	push	r1
   141cc:	cd b7       	in	r28, 0x3d	; 61
   141ce:	de b7       	in	r29, 0x3e	; 62
   141d0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   141d2:	dc 01       	movw	r26, r24
   141d4:	ed 91       	ld	r30, X+
   141d6:	fc 91       	ld	r31, X
   141d8:	06 80       	ldd	r0, Z+6	; 0x06
   141da:	f7 81       	ldd	r31, Z+7	; 0x07
   141dc:	e0 2d       	mov	r30, r0
   141de:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   141e0:	f8 01       	movw	r30, r16
   141e2:	84 85       	ldd	r24, Z+12	; 0x0c
   141e4:	0e 94 41 90 	call	0x12082	; 0x12082 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   141e8:	89 2b       	or	r24, r25
   141ea:	b1 f1       	breq	.+108    	; 0x14258 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   141ec:	48 e0       	ldi	r20, 0x08	; 8
   141ee:	50 e0       	ldi	r21, 0x00	; 0
   141f0:	be 01       	movw	r22, r28
   141f2:	6f 5f       	subi	r22, 0xFF	; 255
   141f4:	7f 4f       	sbci	r23, 0xFF	; 255
   141f6:	d8 01       	movw	r26, r16
   141f8:	1c 96       	adiw	r26, 0x0c	; 12
   141fa:	8c 91       	ld	r24, X
   141fc:	0e 94 58 a0 	call	0x140b0	; 0x140b0 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   14200:	18 16       	cp	r1, r24
   14202:	19 06       	cpc	r1, r25
   14204:	f4 f4       	brge	.+60     	; 0x14242 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   14206:	d8 01       	movw	r26, r16
   14208:	51 96       	adiw	r26, 0x11	; 17
   1420a:	84 e0       	ldi	r24, 0x04	; 4
   1420c:	fe 01       	movw	r30, r28
   1420e:	31 96       	adiw	r30, 0x01	; 1
   14210:	01 90       	ld	r0, Z+
   14212:	0d 92       	st	X+, r0
   14214:	8a 95       	dec	r24
   14216:	e1 f7       	brne	.-8      	; 0x14210 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   14218:	8d 81       	ldd	r24, Y+5	; 0x05
   1421a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   1421c:	98 2f       	mov	r25, r24
   1421e:	88 27       	eor	r24, r24
   14220:	2e 81       	ldd	r18, Y+6	; 0x06
   14222:	82 0f       	add	r24, r18
   14224:	91 1d       	adc	r25, r1
   14226:	f8 01       	movw	r30, r16
   14228:	96 8b       	std	Z+22, r25	; 0x16
   1422a:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   1422c:	8f 81       	ldd	r24, Y+7	; 0x07
   1422e:	28 2f       	mov	r18, r24
   14230:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   14232:	32 2f       	mov	r19, r18
   14234:	22 27       	eor	r18, r18
   14236:	88 85       	ldd	r24, Y+8	; 0x08
   14238:	82 0f       	add	r24, r18
   1423a:	93 2f       	mov	r25, r19
   1423c:	91 1d       	adc	r25, r1
   1423e:	92 8f       	std	Z+26, r25	; 0x1a
   14240:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   14242:	28 96       	adiw	r28, 0x08	; 8
   14244:	0f b6       	in	r0, 0x3f	; 63
   14246:	f8 94       	cli
   14248:	de bf       	out	0x3e, r29	; 62
   1424a:	0f be       	out	0x3f, r0	; 63
   1424c:	cd bf       	out	0x3d, r28	; 61
   1424e:	df 91       	pop	r29
   14250:	cf 91       	pop	r28
   14252:	1f 91       	pop	r17
   14254:	0f 91       	pop	r16
   14256:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   14258:	90 e0       	ldi	r25, 0x00	; 0
   1425a:	80 e0       	ldi	r24, 0x00	; 0
   1425c:	f2 cf       	rjmp	.-28     	; 0x14242 <EthernetUDP::parsePacket()+0x86>

0001425e <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   1425e:	cf 93       	push	r28
   14260:	df 93       	push	r29
   14262:	1f 92       	push	r1
   14264:	cd b7       	in	r28, 0x3d	; 61
   14266:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   14268:	fc 01       	movw	r30, r24
   1426a:	21 8d       	ldd	r18, Z+25	; 0x19
   1426c:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   1426e:	8f ef       	ldi	r24, 0xFF	; 255
   14270:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   14272:	23 2b       	or	r18, r19
   14274:	59 f0       	breq	.+22     	; 0x1428c <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   14276:	21 e0       	ldi	r18, 0x01	; 1
   14278:	41 e0       	ldi	r20, 0x01	; 1
   1427a:	50 e0       	ldi	r21, 0x00	; 0
   1427c:	be 01       	movw	r22, r28
   1427e:	6f 5f       	subi	r22, 0xFF	; 255
   14280:	7f 4f       	sbci	r23, 0xFF	; 255
   14282:	84 85       	ldd	r24, Z+12	; 0x0c
   14284:	0e 94 f2 9f 	call	0x13fe4	; 0x13fe4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   14288:	89 81       	ldd	r24, Y+1	; 0x01
   1428a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   1428c:	0f 90       	pop	r0
   1428e:	df 91       	pop	r29
   14290:	cf 91       	pop	r28
   14292:	08 95       	ret

00014294 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   14294:	cf 93       	push	r28
   14296:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   14298:	60 e1       	ldi	r22, 0x10	; 16
   1429a:	70 e0       	ldi	r23, 0x00	; 0
   1429c:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   142a0:	4f ef       	ldi	r20, 0xFF	; 255
   142a2:	62 e0       	ldi	r22, 0x02	; 2
   142a4:	70 e0       	ldi	r23, 0x00	; 0
   142a6:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   142a8:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   142aa:	0c 94 67 9f 	jmp	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000142ae <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   142ae:	0f 93       	push	r16
   142b0:	1f 93       	push	r17
   142b2:	cf 93       	push	r28
   142b4:	df 93       	push	r29
   142b6:	c8 2f       	mov	r28, r24
   142b8:	d6 2f       	mov	r29, r22
   142ba:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   142bc:	0e 94 4a a1 	call	0x14294	; 0x14294 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   142c0:	4d 2f       	mov	r20, r29
   142c2:	70 e0       	ldi	r23, 0x00	; 0
   142c4:	60 e0       	ldi	r22, 0x00	; 0
   142c6:	8c 2f       	mov	r24, r28
   142c8:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   142cc:	01 15       	cp	r16, r1
   142ce:	11 05       	cpc	r17, r1
   142d0:	b9 f0       	breq	.+46     	; 0x14300 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   142d2:	41 2f       	mov	r20, r17
   142d4:	64 e0       	ldi	r22, 0x04	; 4
   142d6:	70 e0       	ldi	r23, 0x00	; 0
   142d8:	8c 2f       	mov	r24, r28
   142da:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   142de:	40 2f       	mov	r20, r16
   142e0:	65 e0       	ldi	r22, 0x05	; 5
   142e2:	70 e0       	ldi	r23, 0x00	; 0
   142e4:	8c 2f       	mov	r24, r28
   142e6:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   142ea:	61 e0       	ldi	r22, 0x01	; 1
   142ec:	70 e0       	ldi	r23, 0x00	; 0
   142ee:	8c 2f       	mov	r24, r28
   142f0:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   142f4:	81 e0       	ldi	r24, 0x01	; 1
   142f6:	df 91       	pop	r29
   142f8:	cf 91       	pop	r28
   142fa:	1f 91       	pop	r17
   142fc:	0f 91       	pop	r16
   142fe:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   14300:	00 91 37 11 	lds	r16, 0x1137	; 0x801137 <local_port>
   14304:	10 91 38 11 	lds	r17, 0x1138	; 0x801138 <local_port+0x1>
   14308:	0f 5f       	subi	r16, 0xFF	; 255
   1430a:	1f 4f       	sbci	r17, 0xFF	; 255
   1430c:	10 93 38 11 	sts	0x1138, r17	; 0x801138 <local_port+0x1>
   14310:	00 93 37 11 	sts	0x1137, r16	; 0x801137 <local_port>
   14314:	de cf       	rjmp	.-68     	; 0x142d2 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

00014316 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   14316:	ef 92       	push	r14
   14318:	ff 92       	push	r15
   1431a:	1f 93       	push	r17
   1431c:	cf 93       	push	r28
   1431e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   14320:	fc 01       	movw	r30, r24
   14322:	24 85       	ldd	r18, Z+12	; 0x0c
   14324:	28 30       	cpi	r18, 0x08	; 8
   14326:	39 f0       	breq	.+14     	; 0x14336 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   14328:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   1432a:	df 91       	pop	r29
   1432c:	cf 91       	pop	r28
   1432e:	1f 91       	pop	r17
   14330:	ff 90       	pop	r15
   14332:	ef 90       	pop	r14
   14334:	08 95       	ret
   14336:	7b 01       	movw	r14, r22
   14338:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   1433a:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1433c:	63 e0       	ldi	r22, 0x03	; 3
   1433e:	70 e0       	ldi	r23, 0x00	; 0
   14340:	81 2f       	mov	r24, r17
   14342:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   14346:	81 11       	cpse	r24, r1
   14348:	0e c0       	rjmp	.+28     	; 0x14366 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   1434a:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1434c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1434e:	88 30       	cpi	r24, 0x08	; 8
   14350:	59 f3       	breq	.-42     	; 0x14328 <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   14352:	fe 86       	std	Y+14, r15	; 0x0e
   14354:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   14356:	1a 8e       	std	Y+26, r1	; 0x1a
   14358:	19 8e       	std	Y+25, r1	; 0x19
socket():
   1435a:	a7 01       	movw	r20, r14
   1435c:	62 e0       	ldi	r22, 0x02	; 2
   1435e:	0e 94 57 a1 	call	0x142ae	; 0x142ae <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   14362:	81 e0       	ldi	r24, 0x01	; 1
   14364:	e2 cf       	rjmp	.-60     	; 0x1432a <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   14366:	88 31       	cpi	r24, 0x18	; 24
   14368:	81 f3       	breq	.-32     	; 0x1434a <EthernetUDP::begin(unsigned int)+0x34>
   1436a:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1436c:	18 30       	cpi	r17, 0x08	; 8
   1436e:	31 f7       	brne	.-52     	; 0x1433c <EthernetUDP::begin(unsigned int)+0x26>
   14370:	ed cf       	rjmp	.-38     	; 0x1434c <EthernetUDP::begin(unsigned int)+0x36>

00014372 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   14372:	cf 93       	push	r28
   14374:	df 93       	push	r29
   14376:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   14378:	8c 85       	ldd	r24, Y+12	; 0x0c
   1437a:	88 30       	cpi	r24, 0x08	; 8
   1437c:	21 f0       	breq	.+8      	; 0x14386 <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   1437e:	0e 94 4a a1 	call	0x14294	; 0x14294 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   14382:	88 e0       	ldi	r24, 0x08	; 8
   14384:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   14386:	df 91       	pop	r29
   14388:	cf 91       	pop	r28
   1438a:	08 95       	ret

0001438c <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   1438c:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   1438e:	fc 01       	movw	r30, r24
   14390:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   14392:	60 e2       	ldi	r22, 0x20	; 32
   14394:	70 e0       	ldi	r23, 0x00	; 0
   14396:	8c 2f       	mov	r24, r28
   14398:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1439c:	62 e0       	ldi	r22, 0x02	; 2
   1439e:	70 e0       	ldi	r23, 0x00	; 0
   143a0:	8c 2f       	mov	r24, r28
   143a2:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   143a6:	84 fd       	sbrc	r24, 4
   143a8:	11 c0       	rjmp	.+34     	; 0x143cc <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   143aa:	62 e0       	ldi	r22, 0x02	; 2
   143ac:	70 e0       	ldi	r23, 0x00	; 0
   143ae:	8c 2f       	mov	r24, r28
   143b0:	0e 94 e3 37 	call	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   143b4:	83 ff       	sbrs	r24, 3
   143b6:	f2 cf       	rjmp	.-28     	; 0x1439c <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   143b8:	48 e1       	ldi	r20, 0x18	; 24
   143ba:	62 e0       	ldi	r22, 0x02	; 2
   143bc:	70 e0       	ldi	r23, 0x00	; 0
   143be:	8c 2f       	mov	r24, r28
   143c0:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   143c4:	90 e0       	ldi	r25, 0x00	; 0
   143c6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   143c8:	cf 91       	pop	r28
   143ca:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   143cc:	40 e1       	ldi	r20, 0x10	; 16
   143ce:	62 e0       	ldi	r22, 0x02	; 2
   143d0:	70 e0       	ldi	r23, 0x00	; 0
   143d2:	8c 2f       	mov	r24, r28
   143d4:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   143d8:	81 e0       	ldi	r24, 0x01	; 1
   143da:	90 e0       	ldi	r25, 0x00	; 0
   143dc:	f5 cf       	rjmp	.-22     	; 0x143c8 <EthernetUDP::endPacket()+0x3c>

000143de <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   143de:	1f 93       	push	r17
   143e0:	cf 93       	push	r28
   143e2:	df 93       	push	r29
   143e4:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   143e6:	dc 01       	movw	r26, r24
   143e8:	58 96       	adiw	r26, 0x18	; 24
   143ea:	1c 92       	st	X, r1
   143ec:	1e 92       	st	-X, r1
   143ee:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   143f0:	22 81       	ldd	r18, Z+2	; 0x02
   143f2:	21 11       	cpse	r18, r1
   143f4:	09 c0       	rjmp	.+18     	; 0x14408 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   143f6:	23 81       	ldd	r18, Z+3	; 0x03
   143f8:	21 11       	cpse	r18, r1
   143fa:	06 c0       	rjmp	.+12     	; 0x14408 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   143fc:	24 81       	ldd	r18, Z+4	; 0x04
   143fe:	21 11       	cpse	r18, r1
   14400:	03 c0       	rjmp	.+6      	; 0x14408 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   14402:	25 81       	ldd	r18, Z+5	; 0x05
   14404:	22 23       	and	r18, r18
   14406:	39 f1       	breq	.+78     	; 0x14456 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   14408:	41 15       	cp	r20, r1
   1440a:	51 05       	cpc	r21, r1
   1440c:	21 f1       	breq	.+72     	; 0x14456 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1440e:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   14410:	dc 01       	movw	r26, r24
   14412:	1c 96       	adiw	r26, 0x0c	; 12
   14414:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   14416:	af 01       	movw	r20, r30
   14418:	4e 5f       	subi	r20, 0xFE	; 254
   1441a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1441c:	61 2f       	mov	r22, r17
   1441e:	62 95       	swap	r22
   14420:	66 0f       	add	r22, r22
   14422:	60 7e       	andi	r22, 0xE0	; 224
   14424:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   14426:	24 e0       	ldi	r18, 0x04	; 4
   14428:	30 e0       	ldi	r19, 0x00	; 0
   1442a:	8c e0       	ldi	r24, 0x0C	; 12
   1442c:	90 e0       	ldi	r25, 0x00	; 0
   1442e:	0e 94 b3 9e 	call	0x13d66	; 0x13d66 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   14432:	4d 2f       	mov	r20, r29
   14434:	60 e1       	ldi	r22, 0x10	; 16
   14436:	70 e0       	ldi	r23, 0x00	; 0
   14438:	81 2f       	mov	r24, r17
   1443a:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1443e:	4c 2f       	mov	r20, r28
   14440:	61 e1       	ldi	r22, 0x11	; 17
   14442:	70 e0       	ldi	r23, 0x00	; 0
   14444:	81 2f       	mov	r24, r17
   14446:	0e 94 67 9f 	call	0x13ece	; 0x13ece <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1444a:	81 e0       	ldi	r24, 0x01	; 1
   1444c:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   1444e:	df 91       	pop	r29
   14450:	cf 91       	pop	r28
   14452:	1f 91       	pop	r17
   14454:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   14456:	90 e0       	ldi	r25, 0x00	; 0
   14458:	80 e0       	ldi	r24, 0x00	; 0
   1445a:	f9 cf       	rjmp	.-14     	; 0x1444e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0001445c <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1445c:	fc 01       	movw	r30, r24
   1445e:	84 85       	ldd	r24, Z+12	; 0x0c
   14460:	88 30       	cpi	r24, 0x08	; 8
   14462:	21 f0       	breq	.+8      	; 0x1446c <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   14464:	63 e0       	ldi	r22, 0x03	; 3
   14466:	70 e0       	ldi	r23, 0x00	; 0
   14468:	0c 94 e3 37 	jmp	0x6fc6	; 0x6fc6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1446c:	80 e0       	ldi	r24, 0x00	; 0
   1446e:	08 95       	ret

00014470 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   14470:	cf 93       	push	r28
   14472:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   14474:	fc 01       	movw	r30, r24
   14476:	24 85       	ldd	r18, Z+12	; 0x0c
   14478:	28 30       	cpi	r18, 0x08	; 8
   1447a:	d9 f0       	breq	.+54     	; 0x144b2 <EthernetClient::connected()+0x42>
   1447c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   1447e:	0e 94 2e a2 	call	0x1445c	; 0x1445c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   14482:	84 31       	cpi	r24, 0x14	; 20
   14484:	89 f0       	breq	.+34     	; 0x144a8 <EthernetClient::connected()+0x38>
   14486:	88 23       	and	r24, r24
   14488:	79 f0       	breq	.+30     	; 0x144a8 <EthernetClient::connected()+0x38>
   1448a:	88 31       	cpi	r24, 0x18	; 24
   1448c:	69 f0       	breq	.+26     	; 0x144a8 <EthernetClient::connected()+0x38>
   1448e:	21 e0       	ldi	r18, 0x01	; 1
   14490:	8c 31       	cpi	r24, 0x1C	; 28
   14492:	59 f4       	brne	.+22     	; 0x144aa <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   14494:	e8 81       	ld	r30, Y
   14496:	f9 81       	ldd	r31, Y+1	; 0x01
   14498:	00 84       	ldd	r0, Z+8	; 0x08
   1449a:	f1 85       	ldd	r31, Z+9	; 0x09
   1449c:	e0 2d       	mov	r30, r0
   1449e:	ce 01       	movw	r24, r28
   144a0:	19 95       	eicall
   144a2:	21 e0       	ldi	r18, 0x01	; 1
   144a4:	89 2b       	or	r24, r25
   144a6:	09 f4       	brne	.+2      	; 0x144aa <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   144a8:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   144aa:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   144ac:	df 91       	pop	r29
   144ae:	cf 91       	pop	r28
   144b0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   144b2:	80 e0       	ldi	r24, 0x00	; 0
   144b4:	fb cf       	rjmp	.-10     	; 0x144ac <EthernetClient::connected()+0x3c>

000144b6 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   144b6:	cf 92       	push	r12
   144b8:	df 92       	push	r13
   144ba:	ef 92       	push	r14
   144bc:	ff 92       	push	r15
   144be:	cf 93       	push	r28
   144c0:	df 93       	push	r29
   144c2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   144c4:	8c 85       	ldd	r24, Y+12	; 0x0c
   144c6:	88 30       	cpi	r24, 0x08	; 8
   144c8:	49 f1       	breq	.+82     	; 0x1451c <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   144ca:	68 e0       	ldi	r22, 0x08	; 8
   144cc:	70 e0       	ldi	r23, 0x00	; 0
   144ce:	0e 94 e2 9f 	call	0x13fc4	; 0x13fc4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   144d2:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   144d6:	6b 01       	movw	r12, r22
   144d8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   144da:	ce 01       	movw	r24, r28
   144dc:	0e 94 2e a2 	call	0x1445c	; 0x1445c <EthernetClient::status()>
   144e0:	88 23       	and	r24, r24
   144e2:	91 f0       	breq	.+36     	; 0x14508 <EthernetClient::stop()+0x52>
   144e4:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   144e8:	6c 19       	sub	r22, r12
   144ea:	7d 09       	sbc	r23, r13
   144ec:	8e 09       	sbc	r24, r14
   144ee:	9f 09       	sbc	r25, r15
   144f0:	68 3e       	cpi	r22, 0xE8	; 232
   144f2:	73 40       	sbci	r23, 0x03	; 3
   144f4:	81 05       	cpc	r24, r1
   144f6:	91 05       	cpc	r25, r1
   144f8:	38 f4       	brcc	.+14     	; 0x14508 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   144fa:	61 e0       	ldi	r22, 0x01	; 1
   144fc:	70 e0       	ldi	r23, 0x00	; 0
   144fe:	80 e0       	ldi	r24, 0x00	; 0
   14500:	90 e0       	ldi	r25, 0x00	; 0
   14502:	0e 94 5d 92 	call	0x124ba	; 0x124ba <delay>
   14506:	e9 cf       	rjmp	.-46     	; 0x144da <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   14508:	ce 01       	movw	r24, r28
   1450a:	0e 94 2e a2 	call	0x1445c	; 0x1445c <EthernetClient::status()>
   1450e:	88 23       	and	r24, r24
   14510:	19 f0       	breq	.+6      	; 0x14518 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   14512:	8c 85       	ldd	r24, Y+12	; 0x0c
   14514:	0e 94 4a a1 	call	0x14294	; 0x14294 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   14518:	88 e0       	ldi	r24, 0x08	; 8
   1451a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1451c:	df 91       	pop	r29
   1451e:	cf 91       	pop	r28
   14520:	ff 90       	pop	r15
   14522:	ef 90       	pop	r14
   14524:	df 90       	pop	r13
   14526:	cf 90       	pop	r12
   14528:	08 95       	ret

0001452a <localtime>:
localtime():
   1452a:	66 e8       	ldi	r22, 0x86	; 134
   1452c:	73 e1       	ldi	r23, 0x13	; 19
   1452e:	0e 94 9c a2 	call	0x14538	; 0x14538 <localtime_r>
   14532:	86 e8       	ldi	r24, 0x86	; 134
   14534:	93 e1       	ldi	r25, 0x13	; 19
   14536:	08 95       	ret

00014538 <localtime_r>:
localtime_r():
   14538:	cf 92       	push	r12
   1453a:	df 92       	push	r13
   1453c:	ef 92       	push	r14
   1453e:	ff 92       	push	r15
   14540:	0f 93       	push	r16
   14542:	1f 93       	push	r17
   14544:	cf 93       	push	r28
   14546:	df 93       	push	r29
   14548:	00 d0       	rcall	.+0      	; 0x1454a <localtime_r+0x12>
   1454a:	1f 92       	push	r1
   1454c:	cd b7       	in	r28, 0x3d	; 61
   1454e:	de b7       	in	r29, 0x3e	; 62
   14550:	6c 01       	movw	r12, r24
   14552:	7b 01       	movw	r14, r22
   14554:	e0 91 9c 13 	lds	r30, 0x139C	; 0x80139c <__dst_ptr>
   14558:	f0 91 9d 13 	lds	r31, 0x139D	; 0x80139d <__dst_ptr+0x1>
   1455c:	0f ef       	ldi	r16, 0xFF	; 255
   1455e:	1f ef       	ldi	r17, 0xFF	; 255
   14560:	30 97       	sbiw	r30, 0x00	; 0
   14562:	21 f0       	breq	.+8      	; 0x1456c <localtime_r+0x34>
   14564:	62 e9       	ldi	r22, 0x92	; 146
   14566:	73 e1       	ldi	r23, 0x13	; 19
   14568:	19 95       	eicall
   1456a:	8c 01       	movw	r16, r24
   1456c:	f6 01       	movw	r30, r12
   1456e:	80 81       	ld	r24, Z
   14570:	91 81       	ldd	r25, Z+1	; 0x01
   14572:	a2 81       	ldd	r26, Z+2	; 0x02
   14574:	b3 81       	ldd	r27, Z+3	; 0x03
   14576:	40 91 92 13 	lds	r20, 0x1392	; 0x801392 <__utc_offset>
   1457a:	50 91 93 13 	lds	r21, 0x1393	; 0x801393 <__utc_offset+0x1>
   1457e:	60 91 94 13 	lds	r22, 0x1394	; 0x801394 <__utc_offset+0x2>
   14582:	70 91 95 13 	lds	r23, 0x1395	; 0x801395 <__utc_offset+0x3>
   14586:	84 0f       	add	r24, r20
   14588:	95 1f       	adc	r25, r21
   1458a:	a6 1f       	adc	r26, r22
   1458c:	b7 1f       	adc	r27, r23
   1458e:	10 16       	cp	r1, r16
   14590:	11 06       	cpc	r1, r17
   14592:	cc f0       	brlt	.+50     	; 0x145c6 <localtime_r+0x8e>
   14594:	89 83       	std	Y+1, r24	; 0x01
   14596:	9a 83       	std	Y+2, r25	; 0x02
   14598:	ab 83       	std	Y+3, r26	; 0x03
   1459a:	bc 83       	std	Y+4, r27	; 0x04
   1459c:	b7 01       	movw	r22, r14
   1459e:	ce 01       	movw	r24, r28
   145a0:	01 96       	adiw	r24, 0x01	; 1
   145a2:	0e 94 ed a2 	call	0x145da	; 0x145da <gmtime_r>
   145a6:	f7 01       	movw	r30, r14
   145a8:	13 87       	std	Z+11, r17	; 0x0b
   145aa:	02 87       	std	Z+10, r16	; 0x0a
   145ac:	0f 90       	pop	r0
   145ae:	0f 90       	pop	r0
   145b0:	0f 90       	pop	r0
   145b2:	0f 90       	pop	r0
   145b4:	df 91       	pop	r29
   145b6:	cf 91       	pop	r28
   145b8:	1f 91       	pop	r17
   145ba:	0f 91       	pop	r16
   145bc:	ff 90       	pop	r15
   145be:	ef 90       	pop	r14
   145c0:	df 90       	pop	r13
   145c2:	cf 90       	pop	r12
   145c4:	08 95       	ret
   145c6:	a8 01       	movw	r20, r16
   145c8:	01 2e       	mov	r0, r17
   145ca:	00 0c       	add	r0, r0
   145cc:	66 0b       	sbc	r22, r22
   145ce:	77 0b       	sbc	r23, r23
   145d0:	84 0f       	add	r24, r20
   145d2:	95 1f       	adc	r25, r21
   145d4:	a6 1f       	adc	r26, r22
   145d6:	b7 1f       	adc	r27, r23
   145d8:	dd cf       	rjmp	.-70     	; 0x14594 <localtime_r+0x5c>

000145da <gmtime_r>:
gmtime_r():
   145da:	cf 92       	push	r12
   145dc:	df 92       	push	r13
   145de:	ef 92       	push	r14
   145e0:	ff 92       	push	r15
   145e2:	0f 93       	push	r16
   145e4:	1f 93       	push	r17
   145e6:	cf 93       	push	r28
   145e8:	df 93       	push	r29
   145ea:	00 d0       	rcall	.+0      	; 0x145ec <gmtime_r+0x12>
   145ec:	00 d0       	rcall	.+0      	; 0x145ee <gmtime_r+0x14>
   145ee:	1f 92       	push	r1
   145f0:	1f 92       	push	r1
   145f2:	cd b7       	in	r28, 0x3d	; 61
   145f4:	de b7       	in	r29, 0x3e	; 62
   145f6:	8b 01       	movw	r16, r22
   145f8:	fc 01       	movw	r30, r24
   145fa:	60 81       	ld	r22, Z
   145fc:	71 81       	ldd	r23, Z+1	; 0x01
   145fe:	82 81       	ldd	r24, Z+2	; 0x02
   14600:	93 81       	ldd	r25, Z+3	; 0x03
   14602:	20 e8       	ldi	r18, 0x80	; 128
   14604:	31 e5       	ldi	r19, 0x51	; 81
   14606:	41 e0       	ldi	r20, 0x01	; 1
   14608:	50 e0       	ldi	r21, 0x00	; 0
   1460a:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
   1460e:	69 01       	movw	r12, r18
   14610:	7a 01       	movw	r14, r20
   14612:	2c e3       	ldi	r18, 0x3C	; 60
   14614:	30 e0       	ldi	r19, 0x00	; 0
   14616:	40 e0       	ldi	r20, 0x00	; 0
   14618:	50 e0       	ldi	r21, 0x00	; 0
   1461a:	0e 94 93 bb 	call	0x17726	; 0x17726 <__divmodsi4>
   1461e:	29 83       	std	Y+1, r18	; 0x01
   14620:	3a 83       	std	Y+2, r19	; 0x02
   14622:	4b 83       	std	Y+3, r20	; 0x03
   14624:	5c 83       	std	Y+4, r21	; 0x04
   14626:	89 81       	ldd	r24, Y+1	; 0x01
   14628:	9a 81       	ldd	r25, Y+2	; 0x02
   1462a:	ab 81       	ldd	r26, Y+3	; 0x03
   1462c:	bc 81       	ldd	r27, Y+4	; 0x04
   1462e:	f8 01       	movw	r30, r16
   14630:	60 83       	st	Z, r22
   14632:	6c e3       	ldi	r22, 0x3C	; 60
   14634:	70 e0       	ldi	r23, 0x00	; 0
   14636:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   1463a:	dc 01       	movw	r26, r24
   1463c:	f8 01       	movw	r30, r16
   1463e:	a1 83       	std	Z+1, r26	; 0x01
   14640:	62 83       	std	Z+2, r22	; 0x02
   14642:	c6 01       	movw	r24, r12
   14644:	06 96       	adiw	r24, 0x06	; 6
   14646:	67 e0       	ldi	r22, 0x07	; 7
   14648:	70 e0       	ldi	r23, 0x00	; 0
   1464a:	0e 94 49 bb 	call	0x17692	; 0x17692 <__udivmodhi4>
   1464e:	84 83       	std	Z+4, r24	; 0x04
   14650:	2d ea       	ldi	r18, 0xAD	; 173
   14652:	3e e8       	ldi	r19, 0x8E	; 142
   14654:	40 e0       	ldi	r20, 0x00	; 0
   14656:	50 e0       	ldi	r21, 0x00	; 0
   14658:	c7 01       	movw	r24, r14
   1465a:	b6 01       	movw	r22, r12
   1465c:	0e 94 93 bb 	call	0x17726	; 0x17726 <__divmodsi4>
   14660:	29 83       	std	Y+1, r18	; 0x01
   14662:	3a 83       	std	Y+2, r19	; 0x02
   14664:	6d 83       	std	Y+5, r22	; 0x05
   14666:	7e 83       	std	Y+6, r23	; 0x06
   14668:	8f 83       	std	Y+7, r24	; 0x07
   1466a:	98 87       	std	Y+8, r25	; 0x08
   1466c:	89 81       	ldd	r24, Y+1	; 0x01
   1466e:	9a 81       	ldd	r25, Y+2	; 0x02
   14670:	24 e6       	ldi	r18, 0x64	; 100
   14672:	28 9f       	mul	r18, r24
   14674:	60 01       	movw	r12, r0
   14676:	29 9f       	mul	r18, r25
   14678:	d0 0c       	add	r13, r0
   1467a:	11 24       	eor	r1, r1
   1467c:	6d 81       	ldd	r22, Y+5	; 0x05
   1467e:	7e 81       	ldd	r23, Y+6	; 0x06
   14680:	8f 81       	ldd	r24, Y+7	; 0x07
   14682:	98 85       	ldd	r25, Y+8	; 0x08
   14684:	25 eb       	ldi	r18, 0xB5	; 181
   14686:	35 e0       	ldi	r19, 0x05	; 5
   14688:	40 e0       	ldi	r20, 0x00	; 0
   1468a:	50 e0       	ldi	r21, 0x00	; 0
   1468c:	0e 94 93 bb 	call	0x17726	; 0x17726 <__divmodsi4>
   14690:	29 83       	std	Y+1, r18	; 0x01
   14692:	3a 83       	std	Y+2, r19	; 0x02
   14694:	6d 83       	std	Y+5, r22	; 0x05
   14696:	7e 83       	std	Y+6, r23	; 0x06
   14698:	e9 80       	ldd	r14, Y+1	; 0x01
   1469a:	fa 80       	ldd	r15, Y+2	; 0x02
   1469c:	ee 0c       	add	r14, r14
   1469e:	ff 1c       	adc	r15, r15
   146a0:	ee 0c       	add	r14, r14
   146a2:	ff 1c       	adc	r15, r15
   146a4:	ec 0c       	add	r14, r12
   146a6:	fd 1c       	adc	r15, r13
   146a8:	8d 81       	ldd	r24, Y+5	; 0x05
   146aa:	9e 81       	ldd	r25, Y+6	; 0x06
   146ac:	f5 e6       	ldi	r31, 0x65	; 101
   146ae:	ef 16       	cp	r14, r31
   146b0:	f1 04       	cpc	r15, r1
   146b2:	08 f4       	brcc	.+2      	; 0x146b6 <gmtime_r+0xdc>
   146b4:	3f c0       	rjmp	.+126    	; 0x14734 <gmtime_r+0x15a>
   146b6:	01 96       	adiw	r24, 0x01	; 1
   146b8:	21 e0       	ldi	r18, 0x01	; 1
   146ba:	30 e0       	ldi	r19, 0x00	; 0
   146bc:	a9 01       	movw	r20, r18
   146be:	44 59       	subi	r20, 0x94	; 148
   146c0:	5e 4f       	sbci	r21, 0xFE	; 254
   146c2:	48 17       	cp	r20, r24
   146c4:	59 07       	cpc	r21, r25
   146c6:	60 f4       	brcc	.+24     	; 0x146e0 <gmtime_r+0x106>
   146c8:	6d e6       	ldi	r22, 0x6D	; 109
   146ca:	71 e0       	ldi	r23, 0x01	; 1
   146cc:	82 1b       	sub	r24, r18
   146ce:	93 0b       	sbc	r25, r19
   146d0:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   146d4:	dc 01       	movw	r26, r24
   146d6:	e6 0e       	add	r14, r22
   146d8:	f7 1e       	adc	r15, r23
   146da:	cd 01       	movw	r24, r26
   146dc:	30 e0       	ldi	r19, 0x00	; 0
   146de:	20 e0       	ldi	r18, 0x00	; 0
   146e0:	44 e6       	ldi	r20, 0x64	; 100
   146e2:	e4 0e       	add	r14, r20
   146e4:	f1 1c       	adc	r15, r1
   146e6:	f8 01       	movw	r30, r16
   146e8:	f7 82       	std	Z+7, r15	; 0x07
   146ea:	e6 82       	std	Z+6, r14	; 0x06
   146ec:	91 87       	std	Z+9, r25	; 0x09
   146ee:	80 87       	std	Z+8, r24	; 0x08
   146f0:	25 5c       	subi	r18, 0xC5	; 197
   146f2:	3f 4f       	sbci	r19, 0xFF	; 255
   146f4:	82 17       	cp	r24, r18
   146f6:	93 07       	cpc	r25, r19
   146f8:	38 f5       	brcc	.+78     	; 0x14748 <gmtime_r+0x16e>
   146fa:	6f e1       	ldi	r22, 0x1F	; 31
   146fc:	70 e0       	ldi	r23, 0x00	; 0
   146fe:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   14702:	dc 01       	movw	r26, r24
   14704:	f8 01       	movw	r30, r16
   14706:	65 83       	std	Z+5, r22	; 0x05
   14708:	a3 83       	std	Z+3, r26	; 0x03
   1470a:	f8 01       	movw	r30, r16
   1470c:	13 86       	std	Z+11, r1	; 0x0b
   1470e:	12 86       	std	Z+10, r1	; 0x0a
   14710:	83 81       	ldd	r24, Z+3	; 0x03
   14712:	8f 5f       	subi	r24, 0xFF	; 255
   14714:	83 83       	std	Z+3, r24	; 0x03
   14716:	28 96       	adiw	r28, 0x08	; 8
   14718:	0f b6       	in	r0, 0x3f	; 63
   1471a:	f8 94       	cli
   1471c:	de bf       	out	0x3e, r29	; 62
   1471e:	0f be       	out	0x3f, r0	; 63
   14720:	cd bf       	out	0x3d, r28	; 61
   14722:	df 91       	pop	r29
   14724:	cf 91       	pop	r28
   14726:	1f 91       	pop	r17
   14728:	0f 91       	pop	r16
   1472a:	ff 90       	pop	r15
   1472c:	ef 90       	pop	r14
   1472e:	df 90       	pop	r13
   14730:	cf 90       	pop	r12
   14732:	08 95       	ret
   14734:	51 e0       	ldi	r21, 0x01	; 1
   14736:	40 e0       	ldi	r20, 0x00	; 0
   14738:	24 e6       	ldi	r18, 0x64	; 100
   1473a:	e2 16       	cp	r14, r18
   1473c:	f1 04       	cpc	r15, r1
   1473e:	09 f4       	brne	.+2      	; 0x14742 <gmtime_r+0x168>
   14740:	50 e0       	ldi	r21, 0x00	; 0
   14742:	25 2f       	mov	r18, r21
   14744:	34 2f       	mov	r19, r20
   14746:	ba cf       	rjmp	.-140    	; 0x146bc <gmtime_r+0xe2>
   14748:	69 e9       	ldi	r22, 0x99	; 153
   1474a:	70 e0       	ldi	r23, 0x00	; 0
   1474c:	82 1b       	sub	r24, r18
   1474e:	93 0b       	sbc	r25, r19
   14750:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   14754:	dc 01       	movw	r26, r24
   14756:	26 2f       	mov	r18, r22
   14758:	22 0f       	add	r18, r18
   1475a:	22 0f       	add	r18, r18
   1475c:	f2 2e       	mov	r15, r18
   1475e:	f6 0e       	add	r15, r22
   14760:	6d e3       	ldi	r22, 0x3D	; 61
   14762:	70 e0       	ldi	r23, 0x00	; 0
   14764:	cd 01       	movw	r24, r26
   14766:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   1476a:	dc 01       	movw	r26, r24
   1476c:	e6 2e       	mov	r14, r22
   1476e:	ee 0c       	add	r14, r14
   14770:	6f e1       	ldi	r22, 0x1F	; 31
   14772:	70 e0       	ldi	r23, 0x00	; 0
   14774:	cd 01       	movw	r24, r26
   14776:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   1477a:	dc 01       	movw	r26, r24
   1477c:	22 e0       	ldi	r18, 0x02	; 2
   1477e:	26 0f       	add	r18, r22
   14780:	2f 0d       	add	r18, r15
   14782:	2e 0d       	add	r18, r14
   14784:	f8 01       	movw	r30, r16
   14786:	25 83       	std	Z+5, r18	; 0x05
   14788:	bf cf       	rjmp	.-130    	; 0x14708 <gmtime_r+0x12e>

0001478a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1478a:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1478c:	80 81       	ld	r24, Z
   1478e:	91 81       	ldd	r25, Z+1	; 0x01
   14790:	87 30       	cpi	r24, 0x07	; 7
   14792:	91 05       	cpc	r25, r1
   14794:	38 f4       	brcc	.+14     	; 0x147a4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   14796:	85 30       	cpi	r24, 0x05	; 5
   14798:	91 05       	cpc	r25, r1
   1479a:	88 f4       	brcc	.+34     	; 0x147be <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1479c:	03 97       	sbiw	r24, 0x03	; 3
   1479e:	a0 f4       	brcc	.+40     	; 0x147c8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   147a0:	80 e0       	ldi	r24, 0x00	; 0
   147a2:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   147a4:	87 30       	cpi	r24, 0x07	; 7
   147a6:	91 05       	cpc	r25, r1
   147a8:	61 f0       	breq	.+24     	; 0x147c2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   147aa:	0a 97       	sbiw	r24, 0x0a	; 10
   147ac:	c9 f7       	brne	.-14     	; 0x147a0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   147ae:	62 81       	ldd	r22, Z+2	; 0x02
   147b0:	73 81       	ldd	r23, Z+3	; 0x03
   147b2:	84 81       	ldd	r24, Z+4	; 0x04
   147b4:	95 81       	ldd	r25, Z+5	; 0x05
   147b6:	0e 94 b2 bc 	call	0x17964	; 0x17964 <__fixunssfsi>
   147ba:	86 2f       	mov	r24, r22
   147bc:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   147be:	82 81       	ldd	r24, Z+2	; 0x02
   147c0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   147c2:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   147c4:	81 95       	neg	r24
   147c6:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   147c8:	02 80       	ldd	r0, Z+2	; 0x02
   147ca:	f3 81       	ldd	r31, Z+3	; 0x03
   147cc:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   147ce:	30 97       	sbiw	r30, 0x00	; 0
   147d0:	39 f3       	breq	.-50     	; 0x147a0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   147d2:	80 81       	ld	r24, Z
   147d4:	84 37       	cpi	r24, 0x74	; 116
   147d6:	c9 f0       	breq	.+50     	; 0x1480a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   147d8:	8b 32       	cpi	r24, 0x2B	; 43
   147da:	89 f0       	breq	.+34     	; 0x147fe <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   147dc:	8d 32       	cpi	r24, 0x2D	; 45
   147de:	81 f4       	brne	.+32     	; 0x14800 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   147e0:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   147e2:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   147e4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   147e6:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   147e8:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   147ea:	30 ed       	ldi	r19, 0xD0	; 208
   147ec:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   147ee:	3a 30       	cpi	r19, 0x0A	; 10
   147f0:	48 f4       	brcc	.+18     	; 0x14804 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   147f2:	82 9f       	mul	r24, r18
   147f4:	60 0d       	add	r22, r0
   147f6:	11 24       	eor	r1, r1
   147f8:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   147fa:	80 53       	subi	r24, 0x30	; 48
   147fc:	f5 cf       	rjmp	.-22     	; 0x147e8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   147fe:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   14800:	90 e0       	ldi	r25, 0x00	; 0
   14802:	f0 cf       	rjmp	.-32     	; 0x147e4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   14804:	91 11       	cpse	r25, r1
   14806:	de cf       	rjmp	.-68     	; 0x147c4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   14808:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   1480a:	81 e0       	ldi	r24, 0x01	; 1
   1480c:	fd cf       	rjmp	.-6      	; 0x14808 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0001480e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7082():
   1480e:	0f 93       	push	r16
   14810:	1f 93       	push	r17
   14812:	cf 93       	push	r28
   14814:	df 93       	push	r29
   14816:	10 92 cb 0b 	sts	0x0BCB, r1	; 0x800bcb <Serial+0x3>
   1481a:	10 92 ca 0b 	sts	0x0BCA, r1	; 0x800bca <Serial+0x2>
   1481e:	88 ee       	ldi	r24, 0xE8	; 232
   14820:	93 e0       	ldi	r25, 0x03	; 3
   14822:	a0 e0       	ldi	r26, 0x00	; 0
   14824:	b0 e0       	ldi	r27, 0x00	; 0
   14826:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <Serial+0x4>
   1482a:	90 93 cd 0b 	sts	0x0BCD, r25	; 0x800bcd <Serial+0x5>
   1482e:	a0 93 ce 0b 	sts	0x0BCE, r26	; 0x800bce <Serial+0x6>
   14832:	b0 93 cf 0b 	sts	0x0BCF, r27	; 0x800bcf <Serial+0x7>
   14836:	2a e5       	ldi	r18, 0x5A	; 90
   14838:	32 e0       	ldi	r19, 0x02	; 2
   1483a:	30 93 c9 0b 	sts	0x0BC9, r19	; 0x800bc9 <Serial+0x1>
   1483e:	20 93 c8 0b 	sts	0x0BC8, r18	; 0x800bc8 <Serial>
   14842:	25 ec       	ldi	r18, 0xC5	; 197
   14844:	30 e0       	ldi	r19, 0x00	; 0
   14846:	30 93 d5 0b 	sts	0x0BD5, r19	; 0x800bd5 <Serial+0xd>
   1484a:	20 93 d4 0b 	sts	0x0BD4, r18	; 0x800bd4 <Serial+0xc>
   1484e:	24 ec       	ldi	r18, 0xC4	; 196
   14850:	30 e0       	ldi	r19, 0x00	; 0
   14852:	30 93 d7 0b 	sts	0x0BD7, r19	; 0x800bd7 <Serial+0xf>
   14856:	20 93 d6 0b 	sts	0x0BD6, r18	; 0x800bd6 <Serial+0xe>
   1485a:	20 ec       	ldi	r18, 0xC0	; 192
   1485c:	30 e0       	ldi	r19, 0x00	; 0
   1485e:	30 93 d9 0b 	sts	0x0BD9, r19	; 0x800bd9 <Serial+0x11>
   14862:	20 93 d8 0b 	sts	0x0BD8, r18	; 0x800bd8 <Serial+0x10>
   14866:	21 ec       	ldi	r18, 0xC1	; 193
   14868:	30 e0       	ldi	r19, 0x00	; 0
   1486a:	30 93 db 0b 	sts	0x0BDB, r19	; 0x800bdb <Serial+0x13>
   1486e:	20 93 da 0b 	sts	0x0BDA, r18	; 0x800bda <Serial+0x12>
   14872:	22 ec       	ldi	r18, 0xC2	; 194
   14874:	30 e0       	ldi	r19, 0x00	; 0
   14876:	30 93 dd 0b 	sts	0x0BDD, r19	; 0x800bdd <Serial+0x15>
   1487a:	20 93 dc 0b 	sts	0x0BDC, r18	; 0x800bdc <Serial+0x14>
   1487e:	26 ec       	ldi	r18, 0xC6	; 198
   14880:	30 e0       	ldi	r19, 0x00	; 0
   14882:	30 93 df 0b 	sts	0x0BDF, r19	; 0x800bdf <Serial+0x17>
   14886:	20 93 de 0b 	sts	0x0BDE, r18	; 0x800bde <Serial+0x16>
   1488a:	10 92 e1 0b 	sts	0x0BE1, r1	; 0x800be1 <Serial+0x19>
   1488e:	10 92 e2 0b 	sts	0x0BE2, r1	; 0x800be2 <Serial+0x1a>
   14892:	10 92 e3 0b 	sts	0x0BE3, r1	; 0x800be3 <Serial+0x1b>
   14896:	10 92 e4 0b 	sts	0x0BE4, r1	; 0x800be4 <Serial+0x1c>
   1489a:	c2 ee       	ldi	r28, 0xE2	; 226
   1489c:	d2 e0       	ldi	r29, 0x02	; 2
   1489e:	d0 93 8c 11 	sts	0x118C, r29	; 0x80118c <_ZL11INADDR_NONE.lto_priv.203+0x1>
   148a2:	c0 93 8b 11 	sts	0x118B, r28	; 0x80118b <_ZL11INADDR_NONE.lto_priv.203>
   148a6:	10 92 8d 11 	sts	0x118D, r1	; 0x80118d <_ZL11INADDR_NONE.lto_priv.203+0x2>
   148aa:	10 92 8e 11 	sts	0x118E, r1	; 0x80118e <_ZL11INADDR_NONE.lto_priv.203+0x3>
   148ae:	10 92 8f 11 	sts	0x118F, r1	; 0x80118f <_ZL11INADDR_NONE.lto_priv.203+0x4>
   148b2:	10 92 90 11 	sts	0x1190, r1	; 0x801190 <_ZL11INADDR_NONE.lto_priv.203+0x5>
   148b6:	10 92 57 0e 	sts	0x0E57, r1	; 0x800e57 <Wire+0x3>
   148ba:	10 92 56 0e 	sts	0x0E56, r1	; 0x800e56 <Wire+0x2>
   148be:	80 93 58 0e 	sts	0x0E58, r24	; 0x800e58 <Wire+0x4>
   148c2:	90 93 59 0e 	sts	0x0E59, r25	; 0x800e59 <Wire+0x5>
   148c6:	a0 93 5a 0e 	sts	0x0E5A, r26	; 0x800e5a <Wire+0x6>
   148ca:	b0 93 5b 0e 	sts	0x0E5B, r27	; 0x800e5b <Wire+0x7>
   148ce:	8c e6       	ldi	r24, 0x6C	; 108
   148d0:	92 e0       	ldi	r25, 0x02	; 2
   148d2:	90 93 55 0e 	sts	0x0E55, r25	; 0x800e55 <Wire+0x1>
   148d6:	80 93 54 0e 	sts	0x0E54, r24	; 0x800e54 <Wire>
   148da:	d0 93 92 11 	sts	0x1192, r29	; 0x801192 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   148de:	c0 93 91 11 	sts	0x1191, r28	; 0x801191 <_ZL11INADDR_NONE.lto_priv.202>
   148e2:	10 92 93 11 	sts	0x1193, r1	; 0x801193 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   148e6:	10 92 94 11 	sts	0x1194, r1	; 0x801194 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   148ea:	10 92 95 11 	sts	0x1195, r1	; 0x801195 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   148ee:	10 92 96 11 	sts	0x1196, r1	; 0x801196 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   148f2:	80 e5       	ldi	r24, 0x50	; 80
   148f4:	80 93 97 11 	sts	0x1197, r24	; 0x801197 <wiznet_SPI_settings>
   148f8:	81 e0       	ldi	r24, 0x01	; 1
   148fa:	80 93 98 11 	sts	0x1198, r24	; 0x801198 <wiznet_SPI_settings+0x1>
   148fe:	d0 93 9a 11 	sts	0x119A, r29	; 0x80119a <_ZL11INADDR_NONE.lto_priv.201+0x1>
   14902:	c0 93 99 11 	sts	0x1199, r28	; 0x801199 <_ZL11INADDR_NONE.lto_priv.201>
   14906:	10 92 9b 11 	sts	0x119B, r1	; 0x80119b <_ZL11INADDR_NONE.lto_priv.201+0x2>
   1490a:	10 92 9c 11 	sts	0x119C, r1	; 0x80119c <_ZL11INADDR_NONE.lto_priv.201+0x3>
   1490e:	10 92 9d 11 	sts	0x119D, r1	; 0x80119d <_ZL11INADDR_NONE.lto_priv.201+0x4>
   14912:	10 92 9e 11 	sts	0x119E, r1	; 0x80119e <_ZL11INADDR_NONE.lto_priv.201+0x5>
   14916:	d0 93 a0 11 	sts	0x11A0, r29	; 0x8011a0 <_ZL11INADDR_NONE.lto_priv.200+0x1>
   1491a:	c0 93 9f 11 	sts	0x119F, r28	; 0x80119f <_ZL11INADDR_NONE.lto_priv.200>
   1491e:	10 92 a1 11 	sts	0x11A1, r1	; 0x8011a1 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   14922:	10 92 a2 11 	sts	0x11A2, r1	; 0x8011a2 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   14926:	10 92 a3 11 	sts	0x11A3, r1	; 0x8011a3 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   1492a:	10 92 a4 11 	sts	0x11A4, r1	; 0x8011a4 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   1492e:	d0 93 a6 11 	sts	0x11A6, r29	; 0x8011a6 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   14932:	c0 93 a5 11 	sts	0x11A5, r28	; 0x8011a5 <_ZL11INADDR_NONE.lto_priv.199>
   14936:	10 92 a7 11 	sts	0x11A7, r1	; 0x8011a7 <_ZL11INADDR_NONE.lto_priv.199+0x2>
   1493a:	10 92 a8 11 	sts	0x11A8, r1	; 0x8011a8 <_ZL11INADDR_NONE.lto_priv.199+0x3>
   1493e:	10 92 a9 11 	sts	0x11A9, r1	; 0x8011a9 <_ZL11INADDR_NONE.lto_priv.199+0x4>
   14942:	10 92 aa 11 	sts	0x11AA, r1	; 0x8011aa <_ZL11INADDR_NONE.lto_priv.199+0x5>
   14946:	d0 93 ac 11 	sts	0x11AC, r29	; 0x8011ac <_ZL11INADDR_NONE.lto_priv.198+0x1>
   1494a:	c0 93 ab 11 	sts	0x11AB, r28	; 0x8011ab <_ZL11INADDR_NONE.lto_priv.198>
   1494e:	10 92 ad 11 	sts	0x11AD, r1	; 0x8011ad <_ZL11INADDR_NONE.lto_priv.198+0x2>
   14952:	10 92 ae 11 	sts	0x11AE, r1	; 0x8011ae <_ZL11INADDR_NONE.lto_priv.198+0x3>
   14956:	10 92 af 11 	sts	0x11AF, r1	; 0x8011af <_ZL11INADDR_NONE.lto_priv.198+0x4>
   1495a:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <_ZL11INADDR_NONE.lto_priv.198+0x5>
   1495e:	d0 93 b2 11 	sts	0x11B2, r29	; 0x8011b2 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   14962:	c0 93 b1 11 	sts	0x11B1, r28	; 0x8011b1 <_ZL11INADDR_NONE.lto_priv.197>
   14966:	10 92 b3 11 	sts	0x11B3, r1	; 0x8011b3 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   1496a:	10 92 b4 11 	sts	0x11B4, r1	; 0x8011b4 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   1496e:	10 92 b5 11 	sts	0x11B5, r1	; 0x8011b5 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   14972:	10 92 b6 11 	sts	0x11B6, r1	; 0x8011b6 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   14976:	d0 93 66 0c 	sts	0x0C66, r29	; 0x800c66 <Ethernet+0x1>
   1497a:	c0 93 65 0c 	sts	0x0C65, r28	; 0x800c65 <Ethernet>
   1497e:	10 92 67 0c 	sts	0x0C67, r1	; 0x800c67 <Ethernet+0x2>
   14982:	10 92 68 0c 	sts	0x0C68, r1	; 0x800c68 <Ethernet+0x3>
   14986:	10 92 69 0c 	sts	0x0C69, r1	; 0x800c69 <Ethernet+0x4>
   1498a:	10 92 6a 0c 	sts	0x0C6A, r1	; 0x800c6a <Ethernet+0x5>
   1498e:	10 92 70 0c 	sts	0x0C70, r1	; 0x800c70 <Ethernet+0xb>
   14992:	10 92 6f 0c 	sts	0x0C6F, r1	; 0x800c6f <Ethernet+0xa>
   14996:	8a e0       	ldi	r24, 0x0A	; 10
   14998:	80 93 71 0c 	sts	0x0C71, r24	; 0x800c71 <Ethernet+0xc>
   1499c:	d0 93 73 0c 	sts	0x0C73, r29	; 0x800c73 <_ZL11INADDR_NONE.lto_priv.196+0x1>
   149a0:	c0 93 72 0c 	sts	0x0C72, r28	; 0x800c72 <_ZL11INADDR_NONE.lto_priv.196>
   149a4:	10 92 74 0c 	sts	0x0C74, r1	; 0x800c74 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   149a8:	10 92 75 0c 	sts	0x0C75, r1	; 0x800c75 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   149ac:	10 92 76 0c 	sts	0x0C76, r1	; 0x800c76 <_ZL11INADDR_NONE.lto_priv.196+0x4>
   149b0:	10 92 77 0c 	sts	0x0C77, r1	; 0x800c77 <_ZL11INADDR_NONE.lto_priv.196+0x5>
   149b4:	d0 93 b8 11 	sts	0x11B8, r29	; 0x8011b8 <_ZL11INADDR_NONE.lto_priv.195+0x1>
   149b8:	c0 93 b7 11 	sts	0x11B7, r28	; 0x8011b7 <_ZL11INADDR_NONE.lto_priv.195>
   149bc:	10 92 b9 11 	sts	0x11B9, r1	; 0x8011b9 <_ZL11INADDR_NONE.lto_priv.195+0x2>
   149c0:	10 92 ba 11 	sts	0x11BA, r1	; 0x8011ba <_ZL11INADDR_NONE.lto_priv.195+0x3>
   149c4:	10 92 bb 11 	sts	0x11BB, r1	; 0x8011bb <_ZL11INADDR_NONE.lto_priv.195+0x4>
   149c8:	10 92 bc 11 	sts	0x11BC, r1	; 0x8011bc <_ZL11INADDR_NONE.lto_priv.195+0x5>
   149cc:	8a e0       	ldi	r24, 0x0A	; 10
   149ce:	90 e0       	ldi	r25, 0x00	; 0
   149d0:	0e 94 ce b5 	call	0x16b9c	; 0x16b9c <malloc>
   149d4:	90 93 79 0c 	sts	0x0C79, r25	; 0x800c79 <array_pids+0x1>
   149d8:	80 93 78 0c 	sts	0x0C78, r24	; 0x800c78 <array_pids>
   149dc:	d0 93 be 11 	sts	0x11BE, r29	; 0x8011be <_ZL11INADDR_NONE.lto_priv.194+0x1>
   149e0:	c0 93 bd 11 	sts	0x11BD, r28	; 0x8011bd <_ZL11INADDR_NONE.lto_priv.194>
   149e4:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <_ZL11INADDR_NONE.lto_priv.194+0x2>
   149e8:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <_ZL11INADDR_NONE.lto_priv.194+0x3>
   149ec:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <_ZL11INADDR_NONE.lto_priv.194+0x4>
   149f0:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <_ZL11INADDR_NONE.lto_priv.194+0x5>
   149f4:	d0 93 c4 11 	sts	0x11C4, r29	; 0x8011c4 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   149f8:	c0 93 c3 11 	sts	0x11C3, r28	; 0x8011c3 <_ZL11INADDR_NONE.lto_priv.193>
   149fc:	10 92 c5 11 	sts	0x11C5, r1	; 0x8011c5 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   14a00:	10 92 c6 11 	sts	0x11C6, r1	; 0x8011c6 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   14a04:	10 92 c7 11 	sts	0x11C7, r1	; 0x8011c7 <_ZL11INADDR_NONE.lto_priv.193+0x4>
   14a08:	10 92 c8 11 	sts	0x11C8, r1	; 0x8011c8 <_ZL11INADDR_NONE.lto_priv.193+0x5>
   14a0c:	8b e5       	ldi	r24, 0x5B	; 91
   14a0e:	97 e0       	ldi	r25, 0x07	; 7
   14a10:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <device+0x25>
   14a14:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <device+0x24>
   14a18:	d0 93 79 13 	sts	0x1379, r29	; 0x801379 <_ZL11INADDR_NONE.lto_priv.192+0x1>
   14a1c:	c0 93 78 13 	sts	0x1378, r28	; 0x801378 <_ZL11INADDR_NONE.lto_priv.192>
   14a20:	10 92 7a 13 	sts	0x137A, r1	; 0x80137a <_ZL11INADDR_NONE.lto_priv.192+0x2>
   14a24:	10 92 7b 13 	sts	0x137B, r1	; 0x80137b <_ZL11INADDR_NONE.lto_priv.192+0x3>
   14a28:	10 92 7c 13 	sts	0x137C, r1	; 0x80137c <_ZL11INADDR_NONE.lto_priv.192+0x4>
   14a2c:	10 92 7d 13 	sts	0x137D, r1	; 0x80137d <_ZL11INADDR_NONE.lto_priv.192+0x5>
   14a30:	88 e1       	ldi	r24, 0x18	; 24
   14a32:	80 93 b0 10 	sts	0x10B0, r24	; 0x8010b0 <swSPI+0x4>
   14a36:	8a e1       	ldi	r24, 0x1A	; 26
   14a38:	80 93 af 10 	sts	0x10AF, r24	; 0x8010af <swSPI+0x3>
   14a3c:	89 e1       	ldi	r24, 0x19	; 25
   14a3e:	80 93 b1 10 	sts	0x10B1, r24	; 0x8010b1 <swSPI+0x5>
   14a42:	82 e0       	ldi	r24, 0x02	; 2
   14a44:	80 93 ae 10 	sts	0x10AE, r24	; 0x8010ae <swSPI+0x2>
   14a48:	10 92 ac 10 	sts	0x10AC, r1	; 0x8010ac <swSPI>
   14a4c:	10 92 ad 10 	sts	0x10AD, r1	; 0x8010ad <swSPI+0x1>
   14a50:	10 92 b2 10 	sts	0x10B2, r1	; 0x8010b2 <swSPI+0x6>
   14a54:	60 e0       	ldi	r22, 0x00	; 0
   14a56:	89 e1       	ldi	r24, 0x19	; 25
   14a58:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
   14a5c:	80 e1       	ldi	r24, 0x10	; 16
   14a5e:	80 93 aa 10 	sts	0x10AA, r24	; 0x8010aa <now+0x5>
   14a62:	8c e1       	ldi	r24, 0x1C	; 28
   14a64:	80 93 a9 10 	sts	0x10A9, r24	; 0x8010a9 <now+0x4>
   14a68:	86 e0       	ldi	r24, 0x06	; 6
   14a6a:	80 93 a8 10 	sts	0x10A8, r24	; 0x8010a8 <now+0x3>
   14a6e:	40 e0       	ldi	r20, 0x00	; 0
   14a70:	81 e6       	ldi	r24, 0x61	; 97
   14a72:	97 e9       	ldi	r25, 0x97	; 151
   14a74:	e3 e9       	ldi	r30, 0x93	; 147
   14a76:	fe ef       	ldi	r31, 0xFE	; 254
   14a78:	54 2f       	mov	r21, r20
   14a7a:	53 70       	andi	r21, 0x03	; 3
   14a7c:	21 e0       	ldi	r18, 0x01	; 1
   14a7e:	09 f0       	breq	.+2      	; 0x14a82 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x274>
   14a80:	20 e0       	ldi	r18, 0x00	; 0
   14a82:	61 e0       	ldi	r22, 0x01	; 1
   14a84:	64 0f       	add	r22, r20
   14a86:	30 e0       	ldi	r19, 0x00	; 0
   14a88:	d9 01       	movw	r26, r18
   14a8a:	a3 59       	subi	r26, 0x93	; 147
   14a8c:	be 4f       	sbci	r27, 0xFE	; 254
   14a8e:	8a 17       	cp	r24, r26
   14a90:	9b 07       	cpc	r25, r27
   14a92:	38 f0       	brcs	.+14     	; 0x14aa2 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x294>
   14a94:	af 01       	movw	r20, r30
   14a96:	42 1b       	sub	r20, r18
   14a98:	53 0b       	sbc	r21, r19
   14a9a:	84 0f       	add	r24, r20
   14a9c:	95 1f       	adc	r25, r21
   14a9e:	46 2f       	mov	r20, r22
   14aa0:	eb cf       	rjmp	.-42     	; 0x14a78 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x26a>
   14aa2:	40 93 a5 10 	sts	0x10A5, r20	; 0x8010a5 <now>
   14aa6:	21 e0       	ldi	r18, 0x01	; 1
   14aa8:	62 2f       	mov	r22, r18
   14aaa:	61 50       	subi	r22, 0x01	; 1
   14aac:	77 0b       	sbc	r23, r23
   14aae:	fb 01       	movw	r30, r22
   14ab0:	e9 57       	subi	r30, 0x79	; 121
   14ab2:	fb 4b       	sbci	r31, 0xBB	; 187
   14ab4:	e4 91       	lpm	r30, Z
   14ab6:	51 11       	cpse	r21, r1
   14ab8:	03 c0       	rjmp	.+6      	; 0x14ac0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x2b2>
   14aba:	22 30       	cpi	r18, 0x02	; 2
   14abc:	09 f4       	brne	.+2      	; 0x14ac0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x2b2>
   14abe:	ef 5f       	subi	r30, 0xFF	; 255
   14ac0:	f0 e0       	ldi	r31, 0x00	; 0
   14ac2:	31 e0       	ldi	r19, 0x01	; 1
   14ac4:	32 0f       	add	r19, r18
   14ac6:	8e 17       	cp	r24, r30
   14ac8:	9f 07       	cpc	r25, r31
   14aca:	20 f0       	brcs	.+8      	; 0x14ad4 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x2c6>
   14acc:	8e 1b       	sub	r24, r30
   14ace:	9f 0b       	sbc	r25, r31
   14ad0:	23 2f       	mov	r18, r19
   14ad2:	ea cf       	rjmp	.-44     	; 0x14aa8 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x29a>
   14ad4:	20 93 a6 10 	sts	0x10A6, r18	; 0x8010a6 <now+0x1>
   14ad8:	8f 5f       	subi	r24, 0xFF	; 255
   14ada:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <now+0x2>
   14ade:	10 92 6e 13 	sts	0x136E, r1	; 0x80136e <ethClient+0x3>
   14ae2:	10 92 6d 13 	sts	0x136D, r1	; 0x80136d <ethClient+0x2>
   14ae6:	48 ee       	ldi	r20, 0xE8	; 232
   14ae8:	53 e0       	ldi	r21, 0x03	; 3
   14aea:	60 e0       	ldi	r22, 0x00	; 0
   14aec:	70 e0       	ldi	r23, 0x00	; 0
   14aee:	40 93 6f 13 	sts	0x136F, r20	; 0x80136f <ethClient+0x4>
   14af2:	50 93 70 13 	sts	0x1370, r21	; 0x801370 <ethClient+0x5>
   14af6:	60 93 71 13 	sts	0x1371, r22	; 0x801371 <ethClient+0x6>
   14afa:	70 93 72 13 	sts	0x1372, r23	; 0x801372 <ethClient+0x7>
   14afe:	80 ec       	ldi	r24, 0xC0	; 192
   14b00:	92 e0       	ldi	r25, 0x02	; 2
   14b02:	90 93 6c 13 	sts	0x136C, r25	; 0x80136c <ethClient+0x1>
   14b06:	80 93 6b 13 	sts	0x136B, r24	; 0x80136b <ethClient>
   14b0a:	88 e0       	ldi	r24, 0x08	; 8
   14b0c:	80 93 77 13 	sts	0x1377, r24	; 0x801377 <ethClient+0xc>
   14b10:	10 92 8d 10 	sts	0x108D, r1	; 0x80108d <udpClient+0x3>
   14b14:	10 92 8c 10 	sts	0x108C, r1	; 0x80108c <udpClient+0x2>
   14b18:	40 93 8e 10 	sts	0x108E, r20	; 0x80108e <udpClient+0x4>
   14b1c:	50 93 8f 10 	sts	0x108F, r21	; 0x80108f <udpClient+0x5>
   14b20:	60 93 90 10 	sts	0x1090, r22	; 0x801090 <udpClient+0x6>
   14b24:	70 93 91 10 	sts	0x1091, r23	; 0x801091 <udpClient+0x7>
   14b28:	28 e9       	ldi	r18, 0x98	; 152
   14b2a:	32 e0       	ldi	r19, 0x02	; 2
   14b2c:	30 93 8b 10 	sts	0x108B, r19	; 0x80108b <udpClient+0x1>
   14b30:	20 93 8a 10 	sts	0x108A, r18	; 0x80108a <udpClient>
   14b34:	80 93 96 10 	sts	0x1096, r24	; 0x801096 <udpClient+0xc>
   14b38:	82 ee       	ldi	r24, 0xE2	; 226
   14b3a:	92 e0       	ldi	r25, 0x02	; 2
   14b3c:	90 93 9a 10 	sts	0x109A, r25	; 0x80109a <udpClient+0x10>
   14b40:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <udpClient+0xf>
   14b44:	10 92 9b 10 	sts	0x109B, r1	; 0x80109b <udpClient+0x11>
   14b48:	10 92 9c 10 	sts	0x109C, r1	; 0x80109c <udpClient+0x12>
   14b4c:	10 92 9d 10 	sts	0x109D, r1	; 0x80109d <udpClient+0x13>
   14b50:	10 92 9e 10 	sts	0x109E, r1	; 0x80109e <udpClient+0x14>
   14b54:	90 93 7d 10 	sts	0x107D, r25	; 0x80107d <mqtt_client+0x210>
   14b58:	80 93 7c 10 	sts	0x107C, r24	; 0x80107c <mqtt_client+0x20f>
   14b5c:	10 92 7e 10 	sts	0x107E, r1	; 0x80107e <mqtt_client+0x211>
   14b60:	10 92 7f 10 	sts	0x107F, r1	; 0x80107f <mqtt_client+0x212>
   14b64:	10 92 80 10 	sts	0x1080, r1	; 0x801080 <mqtt_client+0x213>
   14b68:	10 92 81 10 	sts	0x1081, r1	; 0x801081 <mqtt_client+0x214>
   14b6c:	0f ef       	ldi	r16, 0xFF	; 255
   14b6e:	1f ef       	ldi	r17, 0xFF	; 255
   14b70:	10 93 89 10 	sts	0x1089, r17	; 0x801089 <mqtt_client+0x21c>
   14b74:	00 93 88 10 	sts	0x1088, r16	; 0x801088 <mqtt_client+0x21b>
   14b78:	8b e6       	ldi	r24, 0x6B	; 107
   14b7a:	93 e1       	ldi	r25, 0x13	; 19
   14b7c:	90 93 6e 0e 	sts	0x0E6E, r25	; 0x800e6e <mqtt_client+0x1>
   14b80:	80 93 6d 0e 	sts	0x0E6D, r24	; 0x800e6d <mqtt_client>
   14b84:	10 92 87 10 	sts	0x1087, r1	; 0x801087 <mqtt_client+0x21a>
   14b88:	10 92 86 10 	sts	0x1086, r1	; 0x801086 <mqtt_client+0x219>
   14b8c:	83 e5       	ldi	r24, 0x53	; 83
   14b8e:	93 e1       	ldi	r25, 0x13	; 19
   14b90:	23 e0       	ldi	r18, 0x03	; 3
   14b92:	30 e0       	ldi	r19, 0x00	; 0
   14b94:	30 93 54 13 	sts	0x1354, r19	; 0x801354 <radio+0x1>
   14b98:	20 93 53 13 	sts	0x1353, r18	; 0x801353 <radio>
   14b9c:	22 e0       	ldi	r18, 0x02	; 2
   14b9e:	30 e0       	ldi	r19, 0x00	; 0
   14ba0:	30 93 56 13 	sts	0x1356, r19	; 0x801356 <radio+0x3>
   14ba4:	20 93 55 13 	sts	0x1355, r18	; 0x801355 <radio+0x2>
   14ba8:	10 92 59 13 	sts	0x1359, r1	; 0x801359 <radio+0x6>
   14bac:	20 e2       	ldi	r18, 0x20	; 32
   14bae:	20 93 5a 13 	sts	0x135A, r18	; 0x80135a <radio+0x7>
   14bb2:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <radio+0x8>
   14bb6:	25 e0       	ldi	r18, 0x05	; 5
   14bb8:	20 93 61 13 	sts	0x1361, r18	; 0x801361 <radio+0xe>
   14bbc:	45 e0       	ldi	r20, 0x05	; 5
   14bbe:	50 e0       	ldi	r21, 0x00	; 0
   14bc0:	60 e0       	ldi	r22, 0x00	; 0
   14bc2:	70 e0       	ldi	r23, 0x00	; 0
   14bc4:	40 93 67 13 	sts	0x1367, r20	; 0x801367 <radio+0x14>
   14bc8:	50 93 68 13 	sts	0x1368, r21	; 0x801368 <radio+0x15>
   14bcc:	60 93 69 13 	sts	0x1369, r22	; 0x801369 <radio+0x16>
   14bd0:	70 93 6a 13 	sts	0x136A, r23	; 0x80136a <radio+0x17>
   14bd4:	10 92 5c 13 	sts	0x135C, r1	; 0x80135c <radio+0x9>
   14bd8:	90 93 11 12 	sts	0x1211, r25	; 0x801211 <network+0x30>
   14bdc:	80 93 10 12 	sts	0x1210, r24	; 0x801210 <network+0x2f>
   14be0:	26 e1       	ldi	r18, 0x16	; 22
   14be2:	32 e1       	ldi	r19, 0x12	; 18
   14be4:	30 93 b1 12 	sts	0x12B1, r19	; 0x8012b1 <network+0xd0>
   14be8:	20 93 b0 12 	sts	0x12B0, r18	; 0x8012b0 <network+0xcf>
   14bec:	2e eb       	ldi	r18, 0xBE	; 190
   14bee:	32 e1       	ldi	r19, 0x12	; 18
   14bf0:	30 93 bd 12 	sts	0x12BD, r19	; 0x8012bd <network+0xdc>
   14bf4:	20 93 bc 12 	sts	0x12BC, r18	; 0x8012bc <network+0xdb>
   14bf8:	22 eb       	ldi	r18, 0xB2	; 178
   14bfa:	32 e1       	ldi	r19, 0x12	; 18
   14bfc:	30 93 09 12 	sts	0x1209, r19	; 0x801209 <network+0x28>
   14c00:	20 93 08 12 	sts	0x1208, r18	; 0x801208 <network+0x27>
   14c04:	10 92 0c 12 	sts	0x120C, r1	; 0x80120c <network+0x2b>
   14c08:	10 92 0d 12 	sts	0x120D, r1	; 0x80120d <network+0x2c>
   14c0c:	10 92 0e 12 	sts	0x120E, r1	; 0x80120e <network+0x2d>
   14c10:	10 92 0f 12 	sts	0x120F, r1	; 0x80120f <network+0x2e>
   14c14:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <network+0x2a>
   14c18:	10 92 0a 12 	sts	0x120A, r1	; 0x80120a <network+0x29>
   14c1c:	10 92 e1 11 	sts	0x11E1, r1	; 0x8011e1 <network>
   14c20:	90 93 d0 11 	sts	0x11D0, r25	; 0x8011d0 <mesh+0x7>
   14c24:	80 93 cf 11 	sts	0x11CF, r24	; 0x8011cf <mesh+0x6>
   14c28:	81 ee       	ldi	r24, 0xE1	; 225
   14c2a:	91 e1       	ldi	r25, 0x11	; 17
   14c2c:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <mesh+0x9>
   14c30:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <mesh+0x8>
   14c34:	84 e5       	ldi	r24, 0x54	; 84
   14c36:	9e e0       	ldi	r25, 0x0E	; 14
   14c38:	90 93 61 0e 	sts	0x0E61, r25	; 0x800e61 <lm75_temp+0x1>
   14c3c:	80 93 60 0e 	sts	0x0E60, r24	; 0x800e60 <lm75_temp>
   14c40:	88 e4       	ldi	r24, 0x48	; 72
   14c42:	80 93 62 0e 	sts	0x0E62, r24	; 0x800e62 <lm75_temp+0x2>
   14c46:	8a e0       	ldi	r24, 0x0A	; 10
   14c48:	92 e0       	ldi	r25, 0x02	; 2
   14c4a:	90 93 6c 0e 	sts	0x0E6C, r25	; 0x800e6c <lm75_temp+0xc>
   14c4e:	80 93 6b 0e 	sts	0x0E6B, r24	; 0x800e6b <lm75_temp+0xb>
   14c52:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   14c56:	90 93 63 0e 	sts	0x0E63, r25	; 0x800e63 <lm75_temp+0x3>
   14c5a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   14c5e:	89 1b       	sub	r24, r25
   14c60:	99 0b       	sbc	r25, r25
   14c62:	c1 e0       	ldi	r28, 0x01	; 1
   14c64:	d0 e0       	ldi	r29, 0x00	; 0
   14c66:	9e 01       	movw	r18, r28
   14c68:	02 c0       	rjmp	.+4      	; 0x14c6e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x460>
   14c6a:	22 0f       	add	r18, r18
   14c6c:	33 1f       	adc	r19, r19
   14c6e:	8a 95       	dec	r24
   14c70:	e2 f7       	brpl	.-8      	; 0x14c6a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x45c>
   14c72:	c9 01       	movw	r24, r18
   14c74:	91 95       	neg	r25
   14c76:	81 95       	neg	r24
   14c78:	91 09       	sbc	r25, r1
   14c7a:	90 93 65 0e 	sts	0x0E65, r25	; 0x800e65 <lm75_temp+0x5>
   14c7e:	80 93 64 0e 	sts	0x0E64, r24	; 0x800e64 <lm75_temp+0x4>
   14c82:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   14c86:	80 93 66 0e 	sts	0x0E66, r24	; 0x800e66 <lm75_temp+0x6>
   14c8a:	be 01       	movw	r22, r28
   14c8c:	02 c0       	rjmp	.+4      	; 0x14c92 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x484>
   14c8e:	66 0f       	add	r22, r22
   14c90:	77 1f       	adc	r23, r23
   14c92:	8a 95       	dec	r24
   14c94:	e2 f7       	brpl	.-8      	; 0x14c8e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7082+0x480>
   14c96:	07 2e       	mov	r0, r23
   14c98:	00 0c       	add	r0, r0
   14c9a:	88 0b       	sbc	r24, r24
   14c9c:	99 0b       	sbc	r25, r25
   14c9e:	0e 94 06 ba 	call	0x1740c	; 0x1740c <__floatsisf>
   14ca2:	9b 01       	movw	r18, r22
   14ca4:	ac 01       	movw	r20, r24
   14ca6:	60 e0       	ldi	r22, 0x00	; 0
   14ca8:	70 e0       	ldi	r23, 0x00	; 0
   14caa:	80 e8       	ldi	r24, 0x80	; 128
   14cac:	9f e3       	ldi	r25, 0x3F	; 63
   14cae:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
   14cb2:	60 93 67 0e 	sts	0x0E67, r22	; 0x800e67 <lm75_temp+0x7>
   14cb6:	70 93 68 0e 	sts	0x0E68, r23	; 0x800e68 <lm75_temp+0x8>
   14cba:	80 93 69 0e 	sts	0x0E69, r24	; 0x800e69 <lm75_temp+0x9>
   14cbe:	90 93 6a 0e 	sts	0x0E6A, r25	; 0x800e6a <lm75_temp+0xa>
   14cc2:	80 e0       	ldi	r24, 0x00	; 0
   14cc4:	98 ef       	ldi	r25, 0xF8	; 248
   14cc6:	90 93 1e 0e 	sts	0x0E1E, r25	; 0x800e1e <my_lcd+0x9>
   14cca:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <my_lcd+0x8>
   14cce:	20 ee       	ldi	r18, 0xE0	; 224
   14cd0:	37 e0       	ldi	r19, 0x07	; 7
   14cd2:	30 93 1c 0e 	sts	0x0E1C, r19	; 0x800e1c <my_lcd+0x7>
   14cd6:	20 93 1b 0e 	sts	0x0E1B, r18	; 0x800e1b <my_lcd+0x6>
   14cda:	90 93 20 0e 	sts	0x0E20, r25	; 0x800e20 <my_lcd+0xb>
   14cde:	80 93 1f 0e 	sts	0x0E1F, r24	; 0x800e1f <my_lcd+0xa>
   14ce2:	81 e0       	ldi	r24, 0x01	; 1
   14ce4:	80 93 21 0e 	sts	0x0E21, r24	; 0x800e21 <my_lcd+0xc>
   14ce8:	10 92 22 0e 	sts	0x0E22, r1	; 0x800e22 <my_lcd+0xd>
   14cec:	84 e8       	ldi	r24, 0x84	; 132
   14cee:	92 e0       	ldi	r25, 0x02	; 2
   14cf0:	90 93 16 0e 	sts	0x0E16, r25	; 0x800e16 <my_lcd+0x1>
   14cf4:	80 93 15 0e 	sts	0x0E15, r24	; 0x800e15 <my_lcd>
   14cf8:	82 e2       	ldi	r24, 0x22	; 34
   14cfa:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <my_lcd+0x3e>
   14cfe:	e2 e7       	ldi	r30, 0x72	; 114
   14d00:	f4 e4       	ldi	r31, 0x44	; 68
   14d02:	e4 91       	lpm	r30, Z
   14d04:	f0 e0       	ldi	r31, 0x00	; 0
   14d06:	ee 0f       	add	r30, r30
   14d08:	ff 1f       	adc	r31, r31
   14d0a:	ef 5b       	subi	r30, 0xBF	; 191
   14d0c:	fb 4b       	sbci	r31, 0xBB	; 187
   14d0e:	a5 91       	lpm	r26, Z+
   14d10:	b4 91       	lpm	r27, Z
   14d12:	b0 93 44 0e 	sts	0x0E44, r27	; 0x800e44 <my_lcd+0x2f>
   14d16:	a0 93 43 0e 	sts	0x0E43, r26	; 0x800e43 <my_lcd+0x2e>
   14d1a:	e4 e7       	ldi	r30, 0x74	; 116
   14d1c:	f4 e4       	ldi	r31, 0x44	; 68
   14d1e:	e4 91       	lpm	r30, Z
   14d20:	f0 e0       	ldi	r31, 0x00	; 0
   14d22:	ee 0f       	add	r30, r30
   14d24:	ff 1f       	adc	r31, r31
   14d26:	ef 5b       	subi	r30, 0xBF	; 191
   14d28:	fb 4b       	sbci	r31, 0xBB	; 187
   14d2a:	85 91       	lpm	r24, Z+
   14d2c:	94 91       	lpm	r25, Z
   14d2e:	90 93 46 0e 	sts	0x0E46, r25	; 0x800e46 <my_lcd+0x31>
   14d32:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <my_lcd+0x30>
   14d36:	e5 e7       	ldi	r30, 0x75	; 117
   14d38:	f4 e4       	ldi	r31, 0x44	; 68
   14d3a:	e4 91       	lpm	r30, Z
   14d3c:	f0 e0       	ldi	r31, 0x00	; 0
   14d3e:	ee 0f       	add	r30, r30
   14d40:	ff 1f       	adc	r31, r31
   14d42:	ef 5b       	subi	r30, 0xBF	; 191
   14d44:	fb 4b       	sbci	r31, 0xBB	; 187
   14d46:	85 91       	lpm	r24, Z+
   14d48:	94 91       	lpm	r25, Z
   14d4a:	90 93 48 0e 	sts	0x0E48, r25	; 0x800e48 <my_lcd+0x33>
   14d4e:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <my_lcd+0x32>
   14d52:	e1 e7       	ldi	r30, 0x71	; 113
   14d54:	f4 e4       	ldi	r31, 0x44	; 68
   14d56:	e4 91       	lpm	r30, Z
   14d58:	f0 e0       	ldi	r31, 0x00	; 0
   14d5a:	ee 0f       	add	r30, r30
   14d5c:	ff 1f       	adc	r31, r31
   14d5e:	ef 5b       	subi	r30, 0xBF	; 191
   14d60:	fb 4b       	sbci	r31, 0xBB	; 187
   14d62:	85 91       	lpm	r24, Z+
   14d64:	94 91       	lpm	r25, Z
   14d66:	90 93 4a 0e 	sts	0x0E4A, r25	; 0x800e4a <my_lcd+0x35>
   14d6a:	80 93 49 0e 	sts	0x0E49, r24	; 0x800e49 <my_lcd+0x34>
   14d6e:	ec e2       	ldi	r30, 0x2C	; 44
   14d70:	f4 e4       	ldi	r31, 0x44	; 68
   14d72:	84 91       	lpm	r24, Z
   14d74:	80 93 4b 0e 	sts	0x0E4B, r24	; 0x800e4b <my_lcd+0x36>
   14d78:	ee e2       	ldi	r30, 0x2E	; 46
   14d7a:	f4 e4       	ldi	r31, 0x44	; 68
   14d7c:	24 91       	lpm	r18, Z
   14d7e:	20 93 4c 0e 	sts	0x0E4C, r18	; 0x800e4c <my_lcd+0x37>
   14d82:	ef e2       	ldi	r30, 0x2F	; 47
   14d84:	f4 e4       	ldi	r31, 0x44	; 68
   14d86:	94 91       	lpm	r25, Z
   14d88:	90 93 4d 0e 	sts	0x0E4D, r25	; 0x800e4d <my_lcd+0x38>
   14d8c:	eb e2       	ldi	r30, 0x2B	; 43
   14d8e:	f4 e4       	ldi	r31, 0x44	; 68
   14d90:	e4 91       	lpm	r30, Z
   14d92:	e0 93 4e 0e 	sts	0x0E4E, r30	; 0x800e4e <my_lcd+0x39>
   14d96:	38 2f       	mov	r19, r24
   14d98:	30 95       	com	r19
   14d9a:	30 93 4f 0e 	sts	0x0E4F, r19	; 0x800e4f <my_lcd+0x3a>
   14d9e:	20 95       	com	r18
   14da0:	20 93 50 0e 	sts	0x0E50, r18	; 0x800e50 <my_lcd+0x3b>
   14da4:	90 95       	com	r25
   14da6:	90 93 51 0e 	sts	0x0E51, r25	; 0x800e51 <my_lcd+0x3c>
   14daa:	e0 95       	com	r30
   14dac:	e0 93 52 0e 	sts	0x0E52, r30	; 0x800e52 <my_lcd+0x3d>
   14db0:	ec 91       	ld	r30, X
   14db2:	e8 2b       	or	r30, r24
   14db4:	ec 93       	st	X, r30
   14db6:	e0 91 45 0e 	lds	r30, 0x0E45	; 0x800e45 <my_lcd+0x30>
   14dba:	f0 91 46 0e 	lds	r31, 0x0E46	; 0x800e46 <my_lcd+0x31>
   14dbe:	80 81       	ld	r24, Z
   14dc0:	90 91 4c 0e 	lds	r25, 0x0E4C	; 0x800e4c <my_lcd+0x37>
   14dc4:	89 2b       	or	r24, r25
   14dc6:	80 83       	st	Z, r24
   14dc8:	e0 91 47 0e 	lds	r30, 0x0E47	; 0x800e47 <my_lcd+0x32>
   14dcc:	f0 91 48 0e 	lds	r31, 0x0E48	; 0x800e48 <my_lcd+0x33>
   14dd0:	80 81       	ld	r24, Z
   14dd2:	90 91 4d 0e 	lds	r25, 0x0E4D	; 0x800e4d <my_lcd+0x38>
   14dd6:	89 2b       	or	r24, r25
   14dd8:	80 83       	st	Z, r24
   14dda:	e0 91 49 0e 	lds	r30, 0x0E49	; 0x800e49 <my_lcd+0x34>
   14dde:	f0 91 4a 0e 	lds	r31, 0x0E4A	; 0x800e4a <my_lcd+0x35>
   14de2:	80 81       	ld	r24, Z
   14de4:	90 91 4e 0e 	lds	r25, 0x0E4E	; 0x800e4e <my_lcd+0x39>
   14de8:	89 2b       	or	r24, r25
   14dea:	80 83       	st	Z, r24
   14dec:	61 e0       	ldi	r22, 0x01	; 1
   14dee:	81 e2       	ldi	r24, 0x21	; 33
   14df0:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14df4:	61 e0       	ldi	r22, 0x01	; 1
   14df6:	83 e2       	ldi	r24, 0x23	; 35
   14df8:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14dfc:	61 e0       	ldi	r22, 0x01	; 1
   14dfe:	84 e2       	ldi	r24, 0x24	; 36
   14e00:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14e04:	61 e0       	ldi	r22, 0x01	; 1
   14e06:	80 e2       	ldi	r24, 0x20	; 32
   14e08:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14e0c:	61 e0       	ldi	r22, 0x01	; 1
   14e0e:	82 e2       	ldi	r24, 0x22	; 34
   14e10:	0e 94 c4 90 	call	0x12188	; 0x12188 <digitalWrite>
   14e14:	61 e0       	ldi	r22, 0x01	; 1
   14e16:	82 e2       	ldi	r24, 0x22	; 34
   14e18:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14e1c:	10 92 2c 0e 	sts	0x0E2C, r1	; 0x800e2c <my_lcd+0x17>
   14e20:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <my_lcd+0x16>
   14e24:	86 e9       	ldi	r24, 0x96	; 150
   14e26:	97 e7       	ldi	r25, 0x77	; 119
   14e28:	90 93 30 0e 	sts	0x0E30, r25	; 0x800e30 <my_lcd+0x1b>
   14e2c:	80 93 2f 0e 	sts	0x0E2F, r24	; 0x800e2f <my_lcd+0x1a>
   14e30:	20 e4       	ldi	r18, 0x40	; 64
   14e32:	31 e0       	ldi	r19, 0x01	; 1
   14e34:	30 93 24 0e 	sts	0x0E24, r19	; 0x800e24 <my_lcd+0xf>
   14e38:	20 93 23 0e 	sts	0x0E23, r18	; 0x800e23 <my_lcd+0xe>
   14e3c:	80 ee       	ldi	r24, 0xE0	; 224
   14e3e:	91 e0       	ldi	r25, 0x01	; 1
   14e40:	90 93 26 0e 	sts	0x0E26, r25	; 0x800e26 <my_lcd+0x11>
   14e44:	80 93 25 0e 	sts	0x0E25, r24	; 0x800e25 <my_lcd+0x10>
   14e48:	41 b1       	in	r20, 0x01	; 1
   14e4a:	4f ef       	ldi	r20, 0xFF	; 255
   14e4c:	41 b9       	out	0x01, r20	; 1
   14e4e:	30 93 28 0e 	sts	0x0E28, r19	; 0x800e28 <my_lcd+0x13>
   14e52:	20 93 27 0e 	sts	0x0E27, r18	; 0x800e27 <my_lcd+0x12>
   14e56:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_lcd+0x15>
   14e5a:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_lcd+0x14>
   14e5e:	ed e6       	ldi	r30, 0x6D	; 109
   14e60:	f4 e4       	ldi	r31, 0x44	; 68
   14e62:	e4 91       	lpm	r30, Z
   14e64:	f0 e0       	ldi	r31, 0x00	; 0
   14e66:	ee 0f       	add	r30, r30
   14e68:	ff 1f       	adc	r31, r31
   14e6a:	ef 5b       	subi	r30, 0xBF	; 191
   14e6c:	fb 4b       	sbci	r31, 0xBB	; 187
   14e6e:	85 91       	lpm	r24, Z+
   14e70:	94 91       	lpm	r25, Z
   14e72:	90 93 07 0e 	sts	0x0E07, r25	; 0x800e07 <my_touch+0x10>
   14e76:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <my_touch+0xf>
   14e7a:	ec e6       	ldi	r30, 0x6C	; 108
   14e7c:	f4 e4       	ldi	r31, 0x44	; 68
   14e7e:	e4 91       	lpm	r30, Z
   14e80:	f0 e0       	ldi	r31, 0x00	; 0
   14e82:	ee 0f       	add	r30, r30
   14e84:	ff 1f       	adc	r31, r31
   14e86:	ef 5b       	subi	r30, 0xBF	; 191
   14e88:	fb 4b       	sbci	r31, 0xBB	; 187
   14e8a:	85 91       	lpm	r24, Z+
   14e8c:	94 91       	lpm	r25, Z
   14e8e:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <my_touch+0x12>
   14e92:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <my_touch+0x11>
   14e96:	ee e6       	ldi	r30, 0x6E	; 110
   14e98:	f4 e4       	ldi	r31, 0x44	; 68
   14e9a:	e4 91       	lpm	r30, Z
   14e9c:	f0 e0       	ldi	r31, 0x00	; 0
   14e9e:	ee 0f       	add	r30, r30
   14ea0:	ff 1f       	adc	r31, r31
   14ea2:	e5 50       	subi	r30, 0x05	; 5
   14ea4:	fc 4b       	sbci	r31, 0xBC	; 188
   14ea6:	85 91       	lpm	r24, Z+
   14ea8:	94 91       	lpm	r25, Z
   14eaa:	90 93 0b 0e 	sts	0x0E0B, r25	; 0x800e0b <my_touch+0x14>
   14eae:	80 93 0a 0e 	sts	0x0E0A, r24	; 0x800e0a <my_touch+0x13>
   14eb2:	ef e6       	ldi	r30, 0x6F	; 111
   14eb4:	f4 e4       	ldi	r31, 0x44	; 68
   14eb6:	e4 91       	lpm	r30, Z
   14eb8:	f0 e0       	ldi	r31, 0x00	; 0
   14eba:	ee 0f       	add	r30, r30
   14ebc:	ff 1f       	adc	r31, r31
   14ebe:	ef 5b       	subi	r30, 0xBF	; 191
   14ec0:	fb 4b       	sbci	r31, 0xBB	; 187
   14ec2:	85 91       	lpm	r24, Z+
   14ec4:	94 91       	lpm	r25, Z
   14ec6:	90 93 0d 0e 	sts	0x0E0D, r25	; 0x800e0d <my_touch+0x16>
   14eca:	80 93 0c 0e 	sts	0x0E0C, r24	; 0x800e0c <my_touch+0x15>
   14ece:	e8 e5       	ldi	r30, 0x58	; 88
   14ed0:	f4 e4       	ldi	r31, 0x44	; 68
   14ed2:	e4 91       	lpm	r30, Z
   14ed4:	f0 e0       	ldi	r31, 0x00	; 0
   14ed6:	ee 0f       	add	r30, r30
   14ed8:	ff 1f       	adc	r31, r31
   14eda:	e5 50       	subi	r30, 0x05	; 5
   14edc:	fc 4b       	sbci	r31, 0xBC	; 188
   14ede:	85 91       	lpm	r24, Z+
   14ee0:	94 91       	lpm	r25, Z
   14ee2:	90 93 0f 0e 	sts	0x0E0F, r25	; 0x800e0f <my_touch+0x18>
   14ee6:	80 93 0e 0e 	sts	0x0E0E, r24	; 0x800e0e <my_touch+0x17>
   14eea:	e7 e2       	ldi	r30, 0x27	; 39
   14eec:	f4 e4       	ldi	r31, 0x44	; 68
   14eee:	e4 91       	lpm	r30, Z
   14ef0:	e0 93 10 0e 	sts	0x0E10, r30	; 0x800e10 <my_touch+0x19>
   14ef4:	e6 e2       	ldi	r30, 0x26	; 38
   14ef6:	f4 e4       	ldi	r31, 0x44	; 68
   14ef8:	e4 91       	lpm	r30, Z
   14efa:	e0 93 11 0e 	sts	0x0E11, r30	; 0x800e11 <my_touch+0x1a>
   14efe:	e8 e2       	ldi	r30, 0x28	; 40
   14f00:	f4 e4       	ldi	r31, 0x44	; 68
   14f02:	e4 91       	lpm	r30, Z
   14f04:	e0 93 12 0e 	sts	0x0E12, r30	; 0x800e12 <my_touch+0x1b>
   14f08:	e9 e2       	ldi	r30, 0x29	; 41
   14f0a:	f4 e4       	ldi	r31, 0x44	; 68
   14f0c:	e4 91       	lpm	r30, Z
   14f0e:	e0 93 13 0e 	sts	0x0E13, r30	; 0x800e13 <my_touch+0x1c>
   14f12:	e2 e1       	ldi	r30, 0x12	; 18
   14f14:	f4 e4       	ldi	r31, 0x44	; 68
   14f16:	e4 91       	lpm	r30, Z
   14f18:	e0 93 14 0e 	sts	0x0E14, r30	; 0x800e14 <my_touch+0x1d>
   14f1c:	61 e0       	ldi	r22, 0x01	; 1
   14f1e:	8c e1       	ldi	r24, 0x1C	; 28
   14f20:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14f24:	61 e0       	ldi	r22, 0x01	; 1
   14f26:	8b e1       	ldi	r24, 0x1B	; 27
   14f28:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14f2c:	60 e0       	ldi	r22, 0x00	; 0
   14f2e:	8d e1       	ldi	r24, 0x1D	; 29
   14f30:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14f34:	61 e0       	ldi	r22, 0x01	; 1
   14f36:	8e e1       	ldi	r24, 0x1E	; 30
   14f38:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14f3c:	60 e0       	ldi	r22, 0x00	; 0
   14f3e:	87 e0       	ldi	r24, 0x07	; 7
   14f40:	0e 94 21 92 	call	0x12442	; 0x12442 <pinMode>
   14f44:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <my_touch+0xc>
   14f48:	10 92 04 0e 	sts	0x0E04, r1	; 0x800e04 <my_touch+0xd>
   14f4c:	10 92 05 0e 	sts	0x0E05, r1	; 0x800e05 <my_touch+0xe>
   14f50:	10 92 00 0e 	sts	0x0E00, r1	; 0x800e00 <my_touch+0x9>
   14f54:	10 92 ff 0d 	sts	0x0DFF, r1	; 0x800dff <my_touch+0x8>
   14f58:	10 92 02 0e 	sts	0x0E02, r1	; 0x800e02 <my_touch+0xb>
   14f5c:	10 92 01 0e 	sts	0x0E01, r1	; 0x800e01 <my_touch+0xa>
   14f60:	10 92 f8 0d 	sts	0x0DF8, r1	; 0x800df8 <my_touch+0x1>
   14f64:	10 92 f7 0d 	sts	0x0DF7, r1	; 0x800df7 <my_touch>
   14f68:	10 92 fa 0d 	sts	0x0DFA, r1	; 0x800dfa <my_touch+0x3>
   14f6c:	10 92 f9 0d 	sts	0x0DF9, r1	; 0x800df9 <my_touch+0x2>
   14f70:	10 93 fc 0d 	sts	0x0DFC, r17	; 0x800dfc <my_touch+0x5>
   14f74:	00 93 fb 0d 	sts	0x0DFB, r16	; 0x800dfb <my_touch+0x4>
   14f78:	10 93 fe 0d 	sts	0x0DFE, r17	; 0x800dfe <my_touch+0x7>
   14f7c:	00 93 fd 0d 	sts	0x0DFD, r16	; 0x800dfd <my_touch+0x6>
   14f80:	8a e0       	ldi	r24, 0x0A	; 10
   14f82:	80 93 e8 0c 	sts	0x0CE8, r24	; 0x800ce8 <doc>
   14f86:	81 ef       	ldi	r24, 0xF1	; 241
   14f88:	9c e0       	ldi	r25, 0x0C	; 12
   14f8a:	90 93 ec 0c 	sts	0x0CEC, r25	; 0x800cec <doc+0x4>
   14f8e:	80 93 eb 0c 	sts	0x0CEB, r24	; 0x800ceb <doc+0x3>
   14f92:	20 e0       	ldi	r18, 0x00	; 0
   14f94:	31 e0       	ldi	r19, 0x01	; 1
   14f96:	30 93 ee 0c 	sts	0x0CEE, r19	; 0x800cee <doc+0x6>
   14f9a:	20 93 ed 0c 	sts	0x0CED, r18	; 0x800ced <doc+0x5>
   14f9e:	10 92 f0 0c 	sts	0x0CF0, r1	; 0x800cf0 <doc+0x8>
   14fa2:	10 92 ef 0c 	sts	0x0CEF, r1	; 0x800cef <doc+0x7>
   14fa6:	8e e7       	ldi	r24, 0x7E	; 126
   14fa8:	92 e0       	ldi	r25, 0x02	; 2
   14faa:	90 93 ea 0c 	sts	0x0CEA, r25	; 0x800cea <doc+0x2>
   14fae:	80 93 e9 0c 	sts	0x0CE9, r24	; 0x800ce9 <doc+0x1>
   14fb2:	10 92 f2 0d 	sts	0x0DF2, r1	; 0x800df2 <doc+0x10a>
   14fb6:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <doc+0x109>
   14fba:	80 e0       	ldi	r24, 0x00	; 0
   14fbc:	90 e0       	ldi	r25, 0x00	; 0
   14fbe:	a2 e0       	ldi	r26, 0x02	; 2
   14fc0:	b0 e0       	ldi	r27, 0x00	; 0
   14fc2:	80 93 df 0c 	sts	0x0CDF, r24	; 0x800cdf <SRAM+0x4>
   14fc6:	90 93 e0 0c 	sts	0x0CE0, r25	; 0x800ce0 <SRAM+0x5>
   14fca:	a0 93 e1 0c 	sts	0x0CE1, r26	; 0x800ce1 <SRAM+0x6>
   14fce:	b0 93 e2 0c 	sts	0x0CE2, r27	; 0x800ce2 <SRAM+0x7>
   14fd2:	d0 93 de 0c 	sts	0x0CDE, r29	; 0x800cde <SRAM+0x3>
   14fd6:	c0 93 dd 0c 	sts	0x0CDD, r28	; 0x800cdd <SRAM+0x2>
   14fda:	8c ea       	ldi	r24, 0xAC	; 172
   14fdc:	90 e1       	ldi	r25, 0x10	; 16
   14fde:	90 93 dc 0c 	sts	0x0CDC, r25	; 0x800cdc <SRAM+0x1>
   14fe2:	80 93 db 0c 	sts	0x0CDB, r24	; 0x800cdb <SRAM>
   14fe6:	46 e1       	ldi	r20, 0x16	; 22
   14fe8:	40 93 e3 0c 	sts	0x0CE3, r20	; 0x800ce3 <SRAM+0x8>
   14fec:	40 e0       	ldi	r20, 0x00	; 0
   14fee:	50 e0       	ldi	r21, 0x00	; 0
   14ff0:	64 e0       	ldi	r22, 0x04	; 4
   14ff2:	70 e0       	ldi	r23, 0x00	; 0
   14ff4:	40 93 d0 0c 	sts	0x0CD0, r20	; 0x800cd0 <SROM+0x4>
   14ff8:	50 93 d1 0c 	sts	0x0CD1, r21	; 0x800cd1 <SROM+0x5>
   14ffc:	60 93 d2 0c 	sts	0x0CD2, r22	; 0x800cd2 <SROM+0x6>
   15000:	70 93 d3 0c 	sts	0x0CD3, r23	; 0x800cd3 <SROM+0x7>
   15004:	30 93 d5 0c 	sts	0x0CD5, r19	; 0x800cd5 <SROM+0x9>
   15008:	20 93 d4 0c 	sts	0x0CD4, r18	; 0x800cd4 <SROM+0x8>
   1500c:	10 92 cf 0c 	sts	0x0CCF, r1	; 0x800ccf <SROM+0x3>
   15010:	10 92 ce 0c 	sts	0x0CCE, r1	; 0x800cce <SROM+0x2>
   15014:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <SROM+0x1>
   15018:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <SROM>
   1501c:	87 e1       	ldi	r24, 0x17	; 23
   1501e:	80 93 d6 0c 	sts	0x0CD6, r24	; 0x800cd6 <SROM+0xa>
   15022:	df 91       	pop	r29
   15024:	cf 91       	pop	r28
   15026:	1f 91       	pop	r17
   15028:	0f 91       	pop	r16
   1502a:	08 95       	ret

0001502c <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   1502c:	cf 93       	push	r28
   1502e:	df 93       	push	r29
   15030:	cd b7       	in	r28, 0x3d	; 61
   15032:	de b7       	in	r29, 0x3e	; 62
   15034:	c7 58       	subi	r28, 0x87	; 135
   15036:	d1 09       	sbc	r29, r1
   15038:	0f b6       	in	r0, 0x3f	; 63
   1503a:	f8 94       	cli
   1503c:	de bf       	out	0x3e, r29	; 62
   1503e:	0f be       	out	0x3f, r0	; 63
   15040:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   15042:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   15044:	84 b5       	in	r24, 0x24	; 36
   15046:	83 60       	ori	r24, 0x03	; 3
   15048:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1504a:	85 b5       	in	r24, 0x25	; 37
   1504c:	83 60       	ori	r24, 0x03	; 3
   1504e:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   15050:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   15054:	81 60       	ori	r24, 0x01	; 1
   15056:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1505a:	82 e0       	ldi	r24, 0x02	; 2
   1505c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   15060:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   15064:	81 60       	ori	r24, 0x01	; 1
   15066:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1506a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1506e:	81 60       	ori	r24, 0x01	; 1
   15070:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   15074:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   15078:	84 60       	ori	r24, 0x04	; 4
   1507a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1507e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   15082:	81 60       	ori	r24, 0x01	; 1
   15084:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   15088:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1508c:	83 60       	ori	r24, 0x03	; 3
   1508e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   15092:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   15096:	81 60       	ori	r24, 0x01	; 1
   15098:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1509c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   150a0:	83 60       	ori	r24, 0x03	; 3
   150a2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   150a6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   150aa:	81 60       	ori	r24, 0x01	; 1
   150ac:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   150b0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   150b4:	83 60       	ori	r24, 0x03	; 3
   150b6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   150ba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   150be:	81 60       	ori	r24, 0x01	; 1
   150c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   150c4:	87 e8       	ldi	r24, 0x87	; 135
   150c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   150ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   150ce:	0e 94 4f 77 	call	0xee9e	; 0xee9e <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   150d2:	21 e4       	ldi	r18, 0x41	; 65
   150d4:	30 e0       	ldi	r19, 0x00	; 0
   150d6:	2c 0f       	add	r18, r28
   150d8:	3d 1f       	adc	r19, r29
   150da:	24 5f       	subi	r18, 0xF4	; 244
   150dc:	3f 4f       	sbci	r19, 0xFF	; 255
   150de:	cc 57       	subi	r28, 0x7C	; 124
   150e0:	df 4f       	sbci	r29, 0xFF	; 255
   150e2:	39 83       	std	Y+1, r19	; 0x01
   150e4:	28 83       	st	Y, r18
   150e6:	c4 58       	subi	r28, 0x84	; 132
   150e8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   150ea:	41 e4       	ldi	r20, 0x41	; 65
   150ec:	50 e0       	ldi	r21, 0x00	; 0
   150ee:	4c 0f       	add	r20, r28
   150f0:	5d 1f       	adc	r21, r29
   150f2:	4f 5f       	subi	r20, 0xFF	; 255
   150f4:	5f 4f       	sbci	r21, 0xFF	; 255
   150f6:	ca 57       	subi	r28, 0x7A	; 122
   150f8:	df 4f       	sbci	r29, 0xFF	; 255
   150fa:	59 83       	std	Y+1, r21	; 0x01
   150fc:	48 83       	st	Y, r20
   150fe:	c6 58       	subi	r28, 0x86	; 134
   15100:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4788
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   15102:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15106:	6b 01       	movw	r12, r22
   15108:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4789
  if (mqtt_reconnect() == 0)
   1510a:	0e 94 ff 75 	call	0xebfe	; 0xebfe <mqtt_reconnect()>
   1510e:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <selftest_data>
   15112:	81 11       	cpse	r24, r1
   15114:	8a c0       	rjmp	.+276    	; 0x1522a <main+0x1fe>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   15116:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   15118:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4794
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   1511c:	0e 94 b2 9a 	call	0x13564	; 0x13564 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797


  if (draw_menu(false) == true)
   15120:	80 e0       	ldi	r24, 0x00	; 0
   15122:	0e 94 44 43 	call	0x8688	; 0x8688 <draw_menu(bool)>
   15126:	88 23       	and	r24, r24
   15128:	19 f0       	breq	.+6      	; 0x15130 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4798
    draw_menu(true);
   1512a:	81 e0       	ldi	r24, 0x01	; 1
   1512c:	0e 94 44 43 	call	0x8688	; 0x8688 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   15130:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15134:	00 91 2a 11 	lds	r16, 0x112A	; 0x80112a <milis_10s>
   15138:	10 91 2b 11 	lds	r17, 0x112B	; 0x80112b <milis_10s+0x1>
   1513c:	20 91 2c 11 	lds	r18, 0x112C	; 0x80112c <milis_10s+0x2>
   15140:	30 91 2d 11 	lds	r19, 0x112D	; 0x80112d <milis_10s+0x3>
   15144:	60 1b       	sub	r22, r16
   15146:	71 0b       	sbc	r23, r17
   15148:	82 0b       	sbc	r24, r18
   1514a:	93 0b       	sbc	r25, r19
   1514c:	61 31       	cpi	r22, 0x11	; 17
   1514e:	77 42       	sbci	r23, 0x27	; 39
   15150:	81 05       	cpc	r24, r1
   15152:	91 05       	cpc	r25, r1
   15154:	08 f4       	brcc	.+2      	; 0x15158 <main+0x12c>
   15156:	99 c4       	rjmp	.+2354   	; 0x15a8a <main+0xa5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4804
  {
    milis_10s = millis();
   15158:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   1515c:	60 93 2a 11 	sts	0x112A, r22	; 0x80112a <milis_10s>
   15160:	70 93 2b 11 	sts	0x112B, r23	; 0x80112b <milis_10s+0x1>
   15164:	80 93 2c 11 	sts	0x112C, r24	; 0x80112c <milis_10s+0x2>
   15168:	90 93 2d 11 	sts	0x112D, r25	; 0x80112d <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4807


    menu_redraw10s = 1;
   1516c:	81 e0       	ldi	r24, 0x01	; 1
   1516e:	80 93 35 0b 	sts	0x0B35, r24	; 0x800b35 <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   15172:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   15176:	4a e0       	ldi	r20, 0x0A	; 10
   15178:	be 01       	movw	r22, r28
   1517a:	6f 5f       	subi	r22, 0xFF	; 255
   1517c:	7f 4f       	sbci	r23, 0xFF	; 255
   1517e:	90 e0       	ldi	r25, 0x00	; 0
   15180:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   15184:	ae 01       	movw	r20, r28
   15186:	4f 5f       	subi	r20, 0xFF	; 255
   15188:	5f 4f       	sbci	r21, 0xFF	; 255
   1518a:	63 e0       	ldi	r22, 0x03	; 3
   1518c:	77 e0       	ldi	r23, 0x07	; 7
   1518e:	8d e6       	ldi	r24, 0x6D	; 109
   15190:	9e e0       	ldi	r25, 0x0E	; 14
   15192:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   15196:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   15198:	ab e0       	ldi	r26, 0x0B	; 11
   1519a:	9a 2e       	mov	r9, r26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1519c:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <Global_HWwirenum>
   151a0:	18 17       	cp	r17, r24
   151a2:	08 f0       	brcs	.+2      	; 0x151a6 <main+0x17a>
   151a4:	44 c0       	rjmp	.+136    	; 0x1522e <main+0x202>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   151a6:	19 9d       	mul	r17, r9
   151a8:	c0 01       	movw	r24, r0
   151aa:	11 24       	eor	r1, r1
   151ac:	dc 01       	movw	r26, r24
   151ae:	a6 5e       	subi	r26, 0xE6	; 230
   151b0:	b5 4f       	sbci	r27, 0xF5	; 245
   151b2:	5d 01       	movw	r10, r26
   151b4:	00 e1       	ldi	r16, 0x10	; 16
   151b6:	28 e0       	ldi	r18, 0x08	; 8
   151b8:	ad 01       	movw	r20, r26
   151ba:	6a e3       	ldi	r22, 0x3A	; 58
   151bc:	ce 01       	movw	r24, r28
   151be:	01 96       	adiw	r24, 0x01	; 1
   151c0:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   151c4:	9e 01       	movw	r18, r28
   151c6:	2f 5f       	subi	r18, 0xFF	; 255
   151c8:	3f 4f       	sbci	r19, 0xFF	; 255
   151ca:	4f e0       	ldi	r20, 0x0F	; 15
   151cc:	57 e0       	ldi	r21, 0x07	; 7
   151ce:	61 2f       	mov	r22, r17
   151d0:	83 e1       	ldi	r24, 0x13	; 19
   151d2:	97 e0       	ldi	r25, 0x07	; 7
   151d4:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   151d8:	f5 01       	movw	r30, r10
   151da:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   151dc:	4a e0       	ldi	r20, 0x0A	; 10
   151de:	be 01       	movw	r22, r28
   151e0:	6f 5f       	subi	r22, 0xFF	; 255
   151e2:	7f 4f       	sbci	r23, 0xFF	; 255
   151e4:	90 e0       	ldi	r25, 0x00	; 0
   151e6:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   151ea:	9e 01       	movw	r18, r28
   151ec:	2f 5f       	subi	r18, 0xFF	; 255
   151ee:	3f 4f       	sbci	r19, 0xFF	; 255
   151f0:	49 e1       	ldi	r20, 0x19	; 25
   151f2:	57 e0       	ldi	r21, 0x07	; 7
   151f4:	61 2f       	mov	r22, r17
   151f6:	83 e1       	ldi	r24, 0x13	; 19
   151f8:	97 e0       	ldi	r25, 0x07	; 7
   151fa:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   151fe:	d5 01       	movw	r26, r10
   15200:	1a 96       	adiw	r26, 0x0a	; 10
   15202:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15204:	4a e0       	ldi	r20, 0x0A	; 10
   15206:	be 01       	movw	r22, r28
   15208:	6f 5f       	subi	r22, 0xFF	; 255
   1520a:	7f 4f       	sbci	r23, 0xFF	; 255
   1520c:	90 e0       	ldi	r25, 0x00	; 0
   1520e:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   15212:	9e 01       	movw	r18, r28
   15214:	2f 5f       	subi	r18, 0xFF	; 255
   15216:	3f 4f       	sbci	r19, 0xFF	; 255
   15218:	42 e2       	ldi	r20, 0x22	; 34
   1521a:	57 e0       	ldi	r21, 0x07	; 7
   1521c:	61 2f       	mov	r22, r17
   1521e:	83 e1       	ldi	r24, 0x13	; 19
   15220:	97 e0       	ldi	r25, 0x07	; 7
   15222:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   15226:	1f 5f       	subi	r17, 0xFF	; 255
   15228:	b9 cf       	rjmp	.-142    	; 0x1519c <main+0x170>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1522a:	90 62       	ori	r25, 0x20	; 32
   1522c:	75 cf       	rjmp	.-278    	; 0x15118 <main+0xec>
send_mqtt_status():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   1522e:	8d e6       	ldi	r24, 0x6D	; 109
   15230:	9e e0       	ldi	r25, 0x0E	; 14
   15232:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
   15236:	88 23       	and	r24, r24
   15238:	09 f4       	brne	.+2      	; 0x1523c <main+0x210>
   1523a:	ac c0       	rjmp	.+344    	; 0x15394 <main+0x368>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   1523c:	69 ea       	ldi	r22, 0xA9	; 169
   1523e:	7e e3       	ldi	r23, 0x3E	; 62
   15240:	ce 01       	movw	r24, r28
   15242:	8f 5b       	subi	r24, 0xBF	; 191
   15244:	9f 4f       	sbci	r25, 0xFF	; 255
   15246:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1524a:	4a e0       	ldi	r20, 0x0A	; 10
   1524c:	be 01       	movw	r22, r28
   1524e:	6f 5f       	subi	r22, 0xFF	; 255
   15250:	7f 4f       	sbci	r23, 0xFF	; 255
   15252:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mqtt_send_message>
   15256:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mqtt_send_message+0x1>
   1525a:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   1525e:	10 92 c5 0b 	sts	0x0BC5, r1	; 0x800bc5 <mqtt_send_message+0x1>
   15262:	10 92 c4 0b 	sts	0x0BC4, r1	; 0x800bc4 <mqtt_send_message>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   15266:	ae 01       	movw	r20, r28
   15268:	4f 5f       	subi	r20, 0xFF	; 255
   1526a:	5f 4f       	sbci	r21, 0xFF	; 255
   1526c:	be 01       	movw	r22, r28
   1526e:	6f 5b       	subi	r22, 0xBF	; 191
   15270:	7f 4f       	sbci	r23, 0xFF	; 255
   15272:	8d e6       	ldi	r24, 0x6D	; 109
   15274:	9e e0       	ldi	r25, 0x0E	; 14
   15276:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   1527a:	67 e9       	ldi	r22, 0x97	; 151
   1527c:	7e e3       	ldi	r23, 0x3E	; 62
   1527e:	ce 01       	movw	r24, r28
   15280:	8f 5b       	subi	r24, 0xBF	; 191
   15282:	9f 4f       	sbci	r25, 0xFF	; 255
   15284:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15288:	4a e0       	ldi	r20, 0x0A	; 10
   1528a:	be 01       	movw	r22, r28
   1528c:	6f 5f       	subi	r22, 0xFF	; 255
   1528e:	7f 4f       	sbci	r23, 0xFF	; 255
   15290:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <mqtt_error>
   15294:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <mqtt_error+0x1>
   15298:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1529c:	ae 01       	movw	r20, r28
   1529e:	4f 5f       	subi	r20, 0xFF	; 255
   152a0:	5f 4f       	sbci	r21, 0xFF	; 255
   152a2:	be 01       	movw	r22, r28
   152a4:	6f 5b       	subi	r22, 0xBF	; 191
   152a6:	7f 4f       	sbci	r23, 0xFF	; 255
   152a8:	8d e6       	ldi	r24, 0x6D	; 109
   152aa:	9e e0       	ldi	r25, 0x0E	; 14
   152ac:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   152b0:	63 e8       	ldi	r22, 0x83	; 131
   152b2:	7e e3       	ldi	r23, 0x3E	; 62
   152b4:	ce 01       	movw	r24, r28
   152b6:	8f 5b       	subi	r24, 0xBF	; 191
   152b8:	9f 4f       	sbci	r25, 0xFF	; 255
   152ba:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   152be:	4a e0       	ldi	r20, 0x0A	; 10
   152c0:	be 01       	movw	r22, r28
   152c2:	6f 5f       	subi	r22, 0xFF	; 255
   152c4:	7f 4f       	sbci	r23, 0xFF	; 255
   152c6:	80 91 5f 0a 	lds	r24, 0x0A5F	; 0x800a5f <mqtt_receive_message>
   152ca:	90 91 60 0a 	lds	r25, 0x0A60	; 0x800a60 <mqtt_receive_message+0x1>
   152ce:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   152d2:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <mqtt_receive_message+0x1>
   152d6:	10 92 5f 0a 	sts	0x0A5F, r1	; 0x800a5f <mqtt_receive_message>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   152da:	ae 01       	movw	r20, r28
   152dc:	4f 5f       	subi	r20, 0xFF	; 255
   152de:	5f 4f       	sbci	r21, 0xFF	; 255
   152e0:	be 01       	movw	r22, r28
   152e2:	6f 5b       	subi	r22, 0xBF	; 191
   152e4:	7f 4f       	sbci	r23, 0xFF	; 255
   152e6:	8d e6       	ldi	r24, 0x6D	; 109
   152e8:	9e e0       	ldi	r25, 0x0E	; 14
   152ea:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   152ee:	6f e6       	ldi	r22, 0x6F	; 111
   152f0:	7e e3       	ldi	r23, 0x3E	; 62
   152f2:	ce 01       	movw	r24, r28
   152f4:	8f 5b       	subi	r24, 0xBF	; 191
   152f6:	9f 4f       	sbci	r25, 0xFF	; 255
   152f8:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   152fc:	4a e0       	ldi	r20, 0x0A	; 10
   152fe:	be 01       	movw	r22, r28
   15300:	6f 5f       	subi	r22, 0xFF	; 255
   15302:	7f 4f       	sbci	r23, 0xFF	; 255
   15304:	80 91 5d 0a 	lds	r24, 0x0A5D	; 0x800a5d <mqtt_process_message>
   15308:	90 91 5e 0a 	lds	r25, 0x0A5E	; 0x800a5e <mqtt_process_message+0x1>
   1530c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   15310:	10 92 5e 0a 	sts	0x0A5E, r1	; 0x800a5e <mqtt_process_message+0x1>
   15314:	10 92 5d 0a 	sts	0x0A5D, r1	; 0x800a5d <mqtt_process_message>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   15318:	ae 01       	movw	r20, r28
   1531a:	4f 5f       	subi	r20, 0xFF	; 255
   1531c:	5f 4f       	sbci	r21, 0xFF	; 255
   1531e:	be 01       	movw	r22, r28
   15320:	6f 5b       	subi	r22, 0xBF	; 191
   15322:	7f 4f       	sbci	r23, 0xFF	; 255
   15324:	8d e6       	ldi	r24, 0x6D	; 109
   15326:	9e e0       	ldi	r25, 0x0E	; 14
   15328:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   1532c:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   1532e:	0a e0       	ldi	r16, 0x0A	; 10
   15330:	24 e0       	ldi	r18, 0x04	; 4
   15332:	40 e8       	ldi	r20, 0x80	; 128
   15334:	5c e0       	ldi	r21, 0x0C	; 12
   15336:	6e e2       	ldi	r22, 0x2E	; 46
   15338:	ce 01       	movw	r24, r28
   1533a:	01 96       	adiw	r24, 0x01	; 1
   1533c:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   15340:	64 e6       	ldi	r22, 0x64	; 100
   15342:	7e e3       	ldi	r23, 0x3E	; 62
   15344:	ce 01       	movw	r24, r28
   15346:	8f 5b       	subi	r24, 0xBF	; 191
   15348:	9f 4f       	sbci	r25, 0xFF	; 255
   1534a:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1534e:	ae 01       	movw	r20, r28
   15350:	4f 5f       	subi	r20, 0xFF	; 255
   15352:	5f 4f       	sbci	r21, 0xFF	; 255
   15354:	be 01       	movw	r22, r28
   15356:	6f 5b       	subi	r22, 0xBF	; 191
   15358:	7f 4f       	sbci	r23, 0xFF	; 255
   1535a:	8d e6       	ldi	r24, 0x6D	; 109
   1535c:	9e e0       	ldi	r25, 0x0E	; 14
   1535e:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   15362:	60 e5       	ldi	r22, 0x50	; 80
   15364:	7e e3       	ldi	r23, 0x3E	; 62
   15366:	ce 01       	movw	r24, r28
   15368:	8f 5b       	subi	r24, 0xBF	; 191
   1536a:	9f 4f       	sbci	r25, 0xFF	; 255
   1536c:	0e 94 82 b1 	call	0x16304	; 0x16304 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15370:	4a e0       	ldi	r20, 0x0A	; 10
   15372:	be 01       	movw	r22, r28
   15374:	6f 5f       	subi	r22, 0xFF	; 255
   15376:	7f 4f       	sbci	r23, 0xFF	; 255
   15378:	90 e0       	ldi	r25, 0x00	; 0
   1537a:	80 e0       	ldi	r24, 0x00	; 0
   1537c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   15380:	ae 01       	movw	r20, r28
   15382:	4f 5f       	subi	r20, 0xFF	; 255
   15384:	5f 4f       	sbci	r21, 0xFF	; 255
   15386:	be 01       	movw	r22, r28
   15388:	6f 5b       	subi	r22, 0xBF	; 191
   1538a:	7f 4f       	sbci	r23, 0xFF	; 255
   1538c:	8d e6       	ldi	r24, 0x6D	; 109
   1538e:	9e e0       	ldi	r25, 0x0E	; 14
   15390:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_109083/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   15394:	10 92 c7 0b 	sts	0x0BC7, r1	; 0x800bc7 <mqtt_error+0x1>
   15398:	10 92 c6 0b 	sts	0x0BC6, r1	; 0x800bc6 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3720
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1539c:	8d e6       	ldi	r24, 0x6D	; 109
   1539e:	9e e0       	ldi	r25, 0x0E	; 14
   153a0:	0e 94 7c 9a 	call	0x134f8	; 0x134f8 <PubSubClient::connected()>
   153a4:	88 23       	and	r24, r24
   153a6:	09 f4       	brne	.+2      	; 0x153aa <main+0x37e>
   153a8:	6c c1       	rjmp	.+728    	; 0x15682 <main+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
  {
    strcpy(str_topic, "status/uptime");
   153aa:	6a e2       	ldi	r22, 0x2A	; 42
   153ac:	77 e0       	ldi	r23, 0x07	; 7
   153ae:	ce 01       	movw	r24, r28
   153b0:	8f 5b       	subi	r24, 0xBF	; 191
   153b2:	9f 4f       	sbci	r25, 0xFF	; 255
   153b4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   153b8:	4a e0       	ldi	r20, 0x0A	; 10
   153ba:	be 01       	movw	r22, r28
   153bc:	6f 5f       	subi	r22, 0xFF	; 255
   153be:	7f 4f       	sbci	r23, 0xFF	; 255
   153c0:	80 91 31 0b 	lds	r24, 0x0B31	; 0x800b31 <uptime>
   153c4:	90 91 32 0b 	lds	r25, 0x0B32	; 0x800b32 <uptime+0x1>
   153c8:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   153cc:	ae 01       	movw	r20, r28
   153ce:	4f 5f       	subi	r20, 0xFF	; 255
   153d0:	5f 4f       	sbci	r21, 0xFF	; 255
   153d2:	be 01       	movw	r22, r28
   153d4:	6f 5b       	subi	r22, 0xBF	; 191
   153d6:	7f 4f       	sbci	r23, 0xFF	; 255
   153d8:	8d e6       	ldi	r24, 0x6D	; 109
   153da:	9e e0       	ldi	r25, 0x0E	; 14
   153dc:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
    ///
    strcpy(str_topic, "status/brigthness");
   153e0:	68 e3       	ldi	r22, 0x38	; 56
   153e2:	77 e0       	ldi	r23, 0x07	; 7
   153e4:	ce 01       	movw	r24, r28
   153e6:	8f 5b       	subi	r24, 0xBF	; 191
   153e8:	9f 4f       	sbci	r25, 0xFF	; 255
   153ea:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   153ee:	4a e0       	ldi	r20, 0x0A	; 10
   153f0:	be 01       	movw	r22, r28
   153f2:	6f 5f       	subi	r22, 0xFF	; 255
   153f4:	7f 4f       	sbci	r23, 0xFF	; 255
   153f6:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <light_curr>
   153fa:	90 91 2c 0b 	lds	r25, 0x0B2C	; 0x800b2c <light_curr+0x1>
   153fe:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3728
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15402:	ae 01       	movw	r20, r28
   15404:	4f 5f       	subi	r20, 0xFF	; 255
   15406:	5f 4f       	sbci	r21, 0xFF	; 255
   15408:	be 01       	movw	r22, r28
   1540a:	6f 5b       	subi	r22, 0xBF	; 191
   1540c:	7f 4f       	sbci	r23, 0xFF	; 255
   1540e:	8d e6       	ldi	r24, 0x6D	; 109
   15410:	9e e0       	ldi	r25, 0x0E	; 14
   15412:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   15416:	6a e4       	ldi	r22, 0x4A	; 74
   15418:	77 e0       	ldi	r23, 0x07	; 7
   1541a:	ce 01       	movw	r24, r28
   1541c:	8f 5b       	subi	r24, 0xBF	; 191
   1541e:	9f 4f       	sbci	r25, 0xFF	; 255
   15420:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15424:	4a e0       	ldi	r20, 0x0A	; 10
   15426:	be 01       	movw	r22, r28
   15428:	6f 5f       	subi	r22, 0xFF	; 255
   1542a:	7f 4f       	sbci	r23, 0xFF	; 255
   1542c:	90 e0       	ldi	r25, 0x00	; 0
   1542e:	80 e0       	ldi	r24, 0x00	; 0
   15430:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15434:	ae 01       	movw	r20, r28
   15436:	4f 5f       	subi	r20, 0xFF	; 255
   15438:	5f 4f       	sbci	r21, 0xFF	; 255
   1543a:	be 01       	movw	r22, r28
   1543c:	6f 5b       	subi	r22, 0xBF	; 191
   1543e:	7f 4f       	sbci	r23, 0xFF	; 255
   15440:	8d e6       	ldi	r24, 0x6D	; 109
   15442:	9e e0       	ldi	r25, 0x0E	; 14
   15444:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
    ///
    strcpy(str_topic, "status/load_min");
   15448:	61 e6       	ldi	r22, 0x61	; 97
   1544a:	77 e0       	ldi	r23, 0x07	; 7
   1544c:	ce 01       	movw	r24, r28
   1544e:	8f 5b       	subi	r24, 0xBF	; 191
   15450:	9f 4f       	sbci	r25, 0xFF	; 255
   15452:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15456:	4a e0       	ldi	r20, 0x0A	; 10
   15458:	be 01       	movw	r22, r28
   1545a:	6f 5f       	subi	r22, 0xFF	; 255
   1545c:	7f 4f       	sbci	r23, 0xFF	; 255
   1545e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   15462:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   15466:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1546a:	ae 01       	movw	r20, r28
   1546c:	4f 5f       	subi	r20, 0xFF	; 255
   1546e:	5f 4f       	sbci	r21, 0xFF	; 255
   15470:	be 01       	movw	r22, r28
   15472:	6f 5b       	subi	r22, 0xBF	; 191
   15474:	7f 4f       	sbci	r23, 0xFF	; 255
   15476:	8d e6       	ldi	r24, 0x6D	; 109
   15478:	9e e0       	ldi	r25, 0x0E	; 14
   1547a:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
    ///
    strcpy(str_topic, "status/load_max");
   1547e:	61 e7       	ldi	r22, 0x71	; 113
   15480:	77 e0       	ldi	r23, 0x07	; 7
   15482:	ce 01       	movw	r24, r28
   15484:	8f 5b       	subi	r24, 0xBF	; 191
   15486:	9f 4f       	sbci	r25, 0xFF	; 255
   15488:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1548c:	4a e0       	ldi	r20, 0x0A	; 10
   1548e:	be 01       	movw	r22, r28
   15490:	6f 5f       	subi	r22, 0xFF	; 255
   15492:	7f 4f       	sbci	r23, 0xFF	; 255
   15494:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <load_max>
   15498:	90 91 1b 11 	lds	r25, 0x111B	; 0x80111b <load_max+0x1>
   1549c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   154a0:	ae 01       	movw	r20, r28
   154a2:	4f 5f       	subi	r20, 0xFF	; 255
   154a4:	5f 4f       	sbci	r21, 0xFF	; 255
   154a6:	be 01       	movw	r22, r28
   154a8:	6f 5b       	subi	r22, 0xBF	; 191
   154aa:	7f 4f       	sbci	r23, 0xFF	; 255
   154ac:	8d e6       	ldi	r24, 0x6D	; 109
   154ae:	9e e0       	ldi	r25, 0x0E	; 14
   154b0:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
    ///
    load_max = 0;
   154b4:	10 92 1a 11 	sts	0x111A, r1	; 0x80111a <load_max>
   154b8:	10 92 1b 11 	sts	0x111B, r1	; 0x80111b <load_max+0x1>
   154bc:	10 92 1c 11 	sts	0x111C, r1	; 0x80111c <load_max+0x2>
   154c0:	10 92 1d 11 	sts	0x111D, r1	; 0x80111d <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
    load_min = 0xffffffff;
   154c4:	2f ef       	ldi	r18, 0xFF	; 255
   154c6:	3f ef       	ldi	r19, 0xFF	; 255
   154c8:	a9 01       	movw	r20, r18
   154ca:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   154ce:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   154d2:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   154d6:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
    ///
    strcpy(str_topic, "status/default_ring");
   154da:	61 e8       	ldi	r22, 0x81	; 129
   154dc:	77 e0       	ldi	r23, 0x07	; 7
   154de:	ce 01       	movw	r24, r28
   154e0:	8f 5b       	subi	r24, 0xBF	; 191
   154e2:	9f 4f       	sbci	r25, 0xFF	; 255
   154e4:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
    itoa(default_ring, payload, 10);
   154e8:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   154ec:	4a e0       	ldi	r20, 0x0A	; 10
   154ee:	be 01       	movw	r22, r28
   154f0:	6f 5f       	subi	r22, 0xFF	; 255
   154f2:	7f 4f       	sbci	r23, 0xFF	; 255
   154f4:	90 e0       	ldi	r25, 0x00	; 0
   154f6:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   154fa:	ae 01       	movw	r20, r28
   154fc:	4f 5f       	subi	r20, 0xFF	; 255
   154fe:	5f 4f       	sbci	r21, 0xFF	; 255
   15500:	be 01       	movw	r22, r28
   15502:	6f 5b       	subi	r22, 0xBF	; 191
   15504:	7f 4f       	sbci	r23, 0xFF	; 255
   15506:	8d e6       	ldi	r24, 0x6D	; 109
   15508:	9e e0       	ldi	r25, 0x0E	; 14
   1550a:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
    ///
    strcpy(str_topic, "status/selftest");
   1550e:	65 e9       	ldi	r22, 0x95	; 149
   15510:	77 e0       	ldi	r23, 0x07	; 7
   15512:	ce 01       	movw	r24, r28
   15514:	8f 5b       	subi	r24, 0xBF	; 191
   15516:	9f 4f       	sbci	r25, 0xFF	; 255
   15518:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
    itoa(selftest_data, payload, 10);
   1551c:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15520:	4a e0       	ldi	r20, 0x0A	; 10
   15522:	be 01       	movw	r22, r28
   15524:	6f 5f       	subi	r22, 0xFF	; 255
   15526:	7f 4f       	sbci	r23, 0xFF	; 255
   15528:	90 e0       	ldi	r25, 0x00	; 0
   1552a:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3755
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1552e:	ae 01       	movw	r20, r28
   15530:	4f 5f       	subi	r20, 0xFF	; 255
   15532:	5f 4f       	sbci	r21, 0xFF	; 255
   15534:	be 01       	movw	r22, r28
   15536:	6f 5b       	subi	r22, 0xBF	; 191
   15538:	7f 4f       	sbci	r23, 0xFF	; 255
   1553a:	8d e6       	ldi	r24, 0x6D	; 109
   1553c:	9e e0       	ldi	r25, 0x0E	; 14
   1553e:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757

    strcpy(str_topic, "status/rtds/count");
   15542:	65 ea       	ldi	r22, 0xA5	; 165
   15544:	77 e0       	ldi	r23, 0x07	; 7
   15546:	ce 01       	movw	r24, r28
   15548:	8f 5b       	subi	r24, 0xBF	; 191
   1554a:	9f 4f       	sbci	r25, 0xFF	; 255
   1554c:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
    itoa(use_rtds, payload, 10);
   15550:	80 91 2f 0b 	lds	r24, 0x0B2F	; 0x800b2f <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15554:	4a e0       	ldi	r20, 0x0A	; 10
   15556:	be 01       	movw	r22, r28
   15558:	6f 5f       	subi	r22, 0xFF	; 255
   1555a:	7f 4f       	sbci	r23, 0xFF	; 255
   1555c:	90 e0       	ldi	r25, 0x00	; 0
   1555e:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   15562:	ae 01       	movw	r20, r28
   15564:	4f 5f       	subi	r20, 0xFF	; 255
   15566:	5f 4f       	sbci	r21, 0xFF	; 255
   15568:	be 01       	movw	r22, r28
   1556a:	6f 5b       	subi	r22, 0xBF	; 191
   1556c:	7f 4f       	sbci	r23, 0xFF	; 255
   1556e:	8d e6       	ldi	r24, 0x6D	; 109
   15570:	9e e0       	ldi	r25, 0x0E	; 14
   15572:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   15576:	81 e0       	ldi	r24, 0x01	; 1
   15578:	90 e0       	ldi	r25, 0x00	; 0
   1557a:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1557e:	4a e0       	ldi	r20, 0x0A	; 10
   15580:	be 01       	movw	r22, r28
   15582:	6f 5f       	subi	r22, 0xFF	; 255
   15584:	7f 4f       	sbci	r23, 0xFF	; 255
   15586:	90 e0       	ldi	r25, 0x00	; 0
   15588:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3766
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1558c:	ae 01       	movw	r20, r28
   1558e:	4f 5f       	subi	r20, 0xFF	; 255
   15590:	5f 4f       	sbci	r21, 0xFF	; 255
   15592:	67 eb       	ldi	r22, 0xB7	; 183
   15594:	77 e0       	ldi	r23, 0x07	; 7
   15596:	8d e6       	ldi	r24, 0x6D	; 109
   15598:	9e e0       	ldi	r25, 0x0E	; 14
   1559a:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1559e:	80 91 67 0a 	lds	r24, 0x0A67	; 0x800a67 <tritri>
   155a2:	90 91 68 0a 	lds	r25, 0x0A68	; 0x800a68 <tritri+0x1>
   155a6:	25 e0       	ldi	r18, 0x05	; 5
   155a8:	28 9f       	mul	r18, r24
   155aa:	b0 01       	movw	r22, r0
   155ac:	29 9f       	mul	r18, r25
   155ae:	70 0d       	add	r23, r0
   155b0:	11 24       	eor	r1, r1
   155b2:	90 e0       	ldi	r25, 0x00	; 0
   155b4:	80 e0       	ldi	r24, 0x00	; 0
   155b6:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
   155ba:	20 e0       	ldi	r18, 0x00	; 0
   155bc:	30 e0       	ldi	r19, 0x00	; 0
   155be:	4a e7       	ldi	r20, 0x7A	; 122
   155c0:	54 e4       	ldi	r21, 0x44	; 68
   155c2:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3768
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   155c6:	8e 01       	movw	r16, r28
   155c8:	0f 5f       	subi	r16, 0xFF	; 255
   155ca:	1f 4f       	sbci	r17, 0xFF	; 255
   155cc:	22 e0       	ldi	r18, 0x02	; 2
   155ce:	44 e0       	ldi	r20, 0x04	; 4
   155d0:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   155d4:	a8 01       	movw	r20, r16
   155d6:	67 ec       	ldi	r22, 0xC7	; 199
   155d8:	77 e0       	ldi	r23, 0x07	; 7
   155da:	8d e6       	ldi	r24, 0x6D	; 109
   155dc:	9e e0       	ldi	r25, 0x0E	; 14
   155de:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   155e2:	60 91 65 0a 	lds	r22, 0x0A65	; 0x800a65 <petnula>
   155e6:	70 91 66 0a 	lds	r23, 0x0A66	; 0x800a66 <petnula+0x1>
   155ea:	f3 e0       	ldi	r31, 0x03	; 3
   155ec:	66 0f       	add	r22, r22
   155ee:	77 1f       	adc	r23, r23
   155f0:	fa 95       	dec	r31
   155f2:	e1 f7       	brne	.-8      	; 0x155ec <main+0x5c0>
   155f4:	90 e0       	ldi	r25, 0x00	; 0
   155f6:	80 e0       	ldi	r24, 0x00	; 0
   155f8:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
   155fc:	20 e0       	ldi	r18, 0x00	; 0
   155fe:	30 e0       	ldi	r19, 0x00	; 0
   15600:	4a e7       	ldi	r20, 0x7A	; 122
   15602:	54 e4       	ldi	r21, 0x44	; 68
   15604:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   15608:	22 e0       	ldi	r18, 0x02	; 2
   1560a:	44 e0       	ldi	r20, 0x04	; 4
   1560c:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   15610:	a8 01       	movw	r20, r16
   15612:	6a ed       	ldi	r22, 0xDA	; 218
   15614:	77 e0       	ldi	r23, 0x07	; 7
   15616:	8d e6       	ldi	r24, 0x6D	; 109
   15618:	9e e0       	ldi	r25, 0x0E	; 14
   1561a:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4101
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1561e:	80 91 63 0a 	lds	r24, 0x0A63	; 0x800a63 <dvanact>
   15622:	90 91 64 0a 	lds	r25, 0x0A64	; 0x800a64 <dvanact+0x1>
   15626:	29 e3       	ldi	r18, 0x39	; 57
   15628:	28 9f       	mul	r18, r24
   1562a:	b0 01       	movw	r22, r0
   1562c:	29 9f       	mul	r18, r25
   1562e:	70 0d       	add	r23, r0
   15630:	11 24       	eor	r1, r1
   15632:	90 e0       	ldi	r25, 0x00	; 0
   15634:	80 e0       	ldi	r24, 0x00	; 0
   15636:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
   1563a:	20 e0       	ldi	r18, 0x00	; 0
   1563c:	30 e0       	ldi	r19, 0x00	; 0
   1563e:	4a e7       	ldi	r20, 0x7A	; 122
   15640:	54 e4       	ldi	r21, 0x44	; 68
   15642:	0e 94 39 bc 	call	0x17872	; 0x17872 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3774
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   15646:	22 e0       	ldi	r18, 0x02	; 2
   15648:	44 e0       	ldi	r20, 0x04	; 4
   1564a:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   1564e:	a8 01       	movw	r20, r16
   15650:	6d ee       	ldi	r22, 0xED	; 237
   15652:	77 e0       	ldi	r23, 0x07	; 7
   15654:	8d e6       	ldi	r24, 0x6D	; 109
   15656:	9e e0       	ldi	r25, 0x0E	; 14
   15658:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4116
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1565c:	60 91 61 0a 	lds	r22, 0x0A61	; 0x800a61 <proud>
   15660:	70 91 62 0a 	lds	r23, 0x0A62	; 0x800a62 <proud+0x1>
   15664:	90 e0       	ldi	r25, 0x00	; 0
   15666:	80 e0       	ldi	r24, 0x00	; 0
   15668:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1566c:	22 e0       	ldi	r18, 0x02	; 2
   1566e:	44 e0       	ldi	r20, 0x04	; 4
   15670:	0e 94 2b b0 	call	0x16056	; 0x16056 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   15674:	a8 01       	movw	r20, r16
   15676:	60 e0       	ldi	r22, 0x00	; 0
   15678:	78 e0       	ldi	r23, 0x08	; 8
   1567a:	8d e6       	ldi	r24, 0x6D	; 109
   1567c:	9e e0       	ldi	r25, 0x0E	; 14
   1567e:	0e 94 f5 61 	call	0xc3ea	; 0xc3ea <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   15682:	ec e5       	ldi	r30, 0x5C	; 92
   15684:	ae 2e       	mov	r10, r30
   15686:	bb 24       	eor	r11, r11
   15688:	b3 94       	inc	r11
   1568a:	10 e0       	ldi	r17, 0x00	; 0
   1568c:	00 e0       	ldi	r16, 0x00	; 0
   1568e:	90 2e       	mov	r9, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   15690:	80 2f       	mov	r24, r16
   15692:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
   15696:	8f 3f       	cpi	r24, 0xFF	; 255
   15698:	09 f4       	brne	.+2      	; 0x1569c <main+0x670>
   1569a:	f1 c0       	rjmp	.+482    	; 0x1587e <main+0x852>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
    {
      thermostat_ring_get_name(idx, payload);
   1569c:	be 01       	movw	r22, r28
   1569e:	6f 5f       	subi	r22, 0xFF	; 255
   156a0:	7f 4f       	sbci	r23, 0xFF	; 255
   156a2:	80 2f       	mov	r24, r16
   156a4:	0e 94 54 5b 	call	0xb6a8	; 0xb6a8 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3801
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   156a8:	9e 01       	movw	r18, r28
   156aa:	2f 5f       	subi	r18, 0xFF	; 255
   156ac:	3f 4f       	sbci	r19, 0xFF	; 255
   156ae:	45 eb       	ldi	r20, 0xB5	; 181
   156b0:	53 e0       	ldi	r21, 0x03	; 3
   156b2:	60 2f       	mov	r22, r16
   156b4:	80 e9       	ldi	r24, 0x90	; 144
   156b6:	97 e0       	ldi	r25, 0x07	; 7
   156b8:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
      itoa(thermostat_ring_get_active(idx), payload, 10);
   156bc:	80 2f       	mov	r24, r16
   156be:	0e 94 e8 5a 	call	0xb5d0	; 0xb5d0 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   156c2:	4a e0       	ldi	r20, 0x0A	; 10
   156c4:	be 01       	movw	r22, r28
   156c6:	6f 5f       	subi	r22, 0xFF	; 255
   156c8:	7f 4f       	sbci	r23, 0xFF	; 255
   156ca:	90 e0       	ldi	r25, 0x00	; 0
   156cc:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   156d0:	9e 01       	movw	r18, r28
   156d2:	2f 5f       	subi	r18, 0xFF	; 255
   156d4:	3f 4f       	sbci	r19, 0xFF	; 255
   156d6:	4f eb       	ldi	r20, 0xBF	; 191
   156d8:	53 e0       	ldi	r21, 0x03	; 3
   156da:	60 2f       	mov	r22, r16
   156dc:	80 e9       	ldi	r24, 0x90	; 144
   156de:	97 e0       	ldi	r25, 0x07	; 7
   156e0:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_program_id():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   156e4:	c5 01       	movw	r24, r10
   156e6:	01 97       	sbiw	r24, 0x01	; 1
   156e8:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   156ec:	4a e0       	ldi	r20, 0x0A	; 10
   156ee:	be 01       	movw	r22, r28
   156f0:	6f 5f       	subi	r22, 0xFF	; 255
   156f2:	7f 4f       	sbci	r23, 0xFF	; 255
   156f4:	90 e0       	ldi	r25, 0x00	; 0
   156f6:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   156fa:	9e 01       	movw	r18, r28
   156fc:	2f 5f       	subi	r18, 0xFF	; 255
   156fe:	3f 4f       	sbci	r19, 0xFF	; 255
   15700:	44 e5       	ldi	r20, 0x54	; 84
   15702:	56 e0       	ldi	r21, 0x06	; 6
   15704:	60 2f       	mov	r22, r16
   15706:	80 e9       	ldi	r24, 0x90	; 144
   15708:	97 e0       	ldi	r25, 0x07	; 7
   1570a:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   1570e:	80 2f       	mov	r24, r16
   15710:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15714:	4a e0       	ldi	r20, 0x0A	; 10
   15716:	be 01       	movw	r22, r28
   15718:	6f 5f       	subi	r22, 0xFF	; 255
   1571a:	7f 4f       	sbci	r23, 0xFF	; 255
   1571c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3807
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   15720:	9e 01       	movw	r18, r28
   15722:	2f 5f       	subi	r18, 0xFF	; 255
   15724:	3f 4f       	sbci	r19, 0xFF	; 255
   15726:	4a e4       	ldi	r20, 0x4A	; 74
   15728:	56 e0       	ldi	r21, 0x06	; 6
   1572a:	60 2f       	mov	r22, r16
   1572c:	80 e9       	ldi	r24, 0x90	; 144
   1572e:	97 e0       	ldi	r25, 0x07	; 7
   15730:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   15734:	80 2f       	mov	r24, r16
   15736:	0e 94 16 5a 	call	0xb42c	; 0xb42c <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1573a:	4a e0       	ldi	r20, 0x0A	; 10
   1573c:	be 01       	movw	r22, r28
   1573e:	6f 5f       	subi	r22, 0xFF	; 255
   15740:	7f 4f       	sbci	r23, 0xFF	; 255
   15742:	90 e0       	ldi	r25, 0x00	; 0
   15744:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   15748:	9e 01       	movw	r18, r28
   1574a:	2f 5f       	subi	r18, 0xFF	; 255
   1574c:	3f 4f       	sbci	r19, 0xFF	; 255
   1574e:	4d e6       	ldi	r20, 0x6D	; 109
   15750:	56 e0       	ldi	r21, 0x06	; 6
   15752:	60 2f       	mov	r22, r16
   15754:	80 e9       	ldi	r24, 0x90	; 144
   15756:	97 e0       	ldi	r25, 0x07	; 7
   15758:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   1575c:	80 2f       	mov	r24, r16
   1575e:	0e 94 16 5a 	call	0xb42c	; 0xb42c <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4167
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   15762:	67 e1       	ldi	r22, 0x17	; 23
   15764:	78 e0       	ldi	r23, 0x08	; 8
   15766:	88 23       	and	r24, r24
   15768:	a1 f0       	breq	.+40     	; 0x15792 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4168
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1576a:	60 e5       	ldi	r22, 0x50	; 80
   1576c:	75 e0       	ldi	r23, 0x05	; 5
   1576e:	81 30       	cpi	r24, 0x01	; 1
   15770:	81 f0       	breq	.+32     	; 0x15792 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   15772:	65 e5       	ldi	r22, 0x55	; 85
   15774:	75 e0       	ldi	r23, 0x05	; 5
   15776:	83 30       	cpi	r24, 0x03	; 3
   15778:	61 f0       	breq	.+24     	; 0x15792 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4170
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1577a:	6c e5       	ldi	r22, 0x5C	; 92
   1577c:	75 e0       	ldi	r23, 0x05	; 5
   1577e:	82 30       	cpi	r24, 0x02	; 2
   15780:	41 f0       	breq	.+16     	; 0x15792 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4171
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   15782:	61 e6       	ldi	r22, 0x61	; 97
   15784:	75 e0       	ldi	r23, 0x05	; 5
   15786:	84 30       	cpi	r24, 0x04	; 4
   15788:	21 f0       	breq	.+8      	; 0x15792 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4172
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1578a:	86 30       	cpi	r24, 0x06	; 6
   1578c:	31 f4       	brne	.+12     	; 0x1579a <main+0x76e>
   1578e:	66 e6       	ldi	r22, 0x66	; 102
   15790:	75 e0       	ldi	r23, 0x05	; 5
   15792:	ce 01       	movw	r24, r28
   15794:	01 96       	adiw	r24, 0x01	; 1
   15796:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3811
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1579a:	9e 01       	movw	r18, r28
   1579c:	2f 5f       	subi	r18, 0xFF	; 255
   1579e:	3f 4f       	sbci	r19, 0xFF	; 255
   157a0:	48 e6       	ldi	r20, 0x68	; 104
   157a2:	56 e0       	ldi	r21, 0x06	; 6
   157a4:	69 2d       	mov	r22, r9
   157a6:	80 e9       	ldi	r24, 0x90	; 144
   157a8:	97 e0       	ldi	r25, 0x07	; 7
   157aa:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_state():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   157ae:	f8 01       	movw	r30, r16
   157b0:	e6 59       	subi	r30, 0x96	; 150
   157b2:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812
      itoa(thermostat_ring_get_state(idx), payload, 10);
   157b4:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   157b6:	4a e0       	ldi	r20, 0x0A	; 10
   157b8:	be 01       	movw	r22, r28
   157ba:	6f 5f       	subi	r22, 0xFF	; 255
   157bc:	7f 4f       	sbci	r23, 0xFF	; 255
   157be:	90 e0       	ldi	r25, 0x00	; 0
   157c0:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3813
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   157c4:	9e 01       	movw	r18, r28
   157c6:	2f 5f       	subi	r18, 0xFF	; 255
   157c8:	3f 4f       	sbci	r19, 0xFF	; 255
   157ca:	4b e1       	ldi	r20, 0x1B	; 27
   157cc:	58 e0       	ldi	r21, 0x08	; 8
   157ce:	69 2d       	mov	r22, r9
   157d0:	80 e9       	ldi	r24, 0x90	; 144
   157d2:	97 e0       	ldi	r25, 0x07	; 7
   157d4:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   157d8:	c5 01       	movw	r24, r10
   157da:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   157de:	4a e0       	ldi	r20, 0x0A	; 10
   157e0:	be 01       	movw	r22, r28
   157e2:	6f 5f       	subi	r22, 0xFF	; 255
   157e4:	7f 4f       	sbci	r23, 0xFF	; 255
   157e6:	90 e0       	ldi	r25, 0x00	; 0
   157e8:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3815
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   157ec:	9e 01       	movw	r18, r28
   157ee:	2f 5f       	subi	r18, 0xFF	; 255
   157f0:	3f 4f       	sbci	r19, 0xFF	; 255
   157f2:	42 e7       	ldi	r20, 0x72	; 114
   157f4:	56 e0       	ldi	r21, 0x06	; 6
   157f6:	69 2d       	mov	r22, r9
   157f8:	80 e9       	ldi	r24, 0x90	; 144
   157fa:	97 e0       	ldi	r25, 0x07	; 7
   157fc:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_output():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   15800:	c5 01       	movw	r24, r10
   15802:	03 96       	adiw	r24, 0x03	; 3
   15804:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15808:	4a e0       	ldi	r20, 0x0A	; 10
   1580a:	be 01       	movw	r22, r28
   1580c:	6f 5f       	subi	r22, 0xFF	; 255
   1580e:	7f 4f       	sbci	r23, 0xFF	; 255
   15810:	90 e0       	ldi	r25, 0x00	; 0
   15812:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3817
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   15816:	9e 01       	movw	r18, r28
   15818:	2f 5f       	subi	r18, 0xFF	; 255
   1581a:	3f 4f       	sbci	r19, 0xFF	; 255
   1581c:	48 e7       	ldi	r20, 0x78	; 120
   1581e:	56 e0       	ldi	r21, 0x06	; 6
   15820:	69 2d       	mov	r22, r9
   15822:	80 e9       	ldi	r24, 0x90	; 144
   15824:	97 e0       	ldi	r25, 0x07	; 7
   15826:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_status_data():
/tmp/arduino_build_109083/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1582a:	c5 01       	movw	r24, r10
   1582c:	04 97       	sbiw	r24, 0x04	; 4
   1582e:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15832:	4a e0       	ldi	r20, 0x0A	; 10
   15834:	be 01       	movw	r22, r28
   15836:	6f 5f       	subi	r22, 0xFF	; 255
   15838:	7f 4f       	sbci	r23, 0xFF	; 255
   1583a:	90 e0       	ldi	r25, 0x00	; 0
   1583c:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3820

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   15840:	9e 01       	movw	r18, r28
   15842:	2f 5f       	subi	r18, 0xFF	; 255
   15844:	3f 4f       	sbci	r19, 0xFF	; 255
   15846:	42 e2       	ldi	r20, 0x22	; 34
   15848:	58 e0       	ldi	r21, 0x08	; 8
   1584a:	69 2d       	mov	r22, r9
   1584c:	80 e9       	ldi	r24, 0x90	; 144
   1584e:	97 e0       	ldi	r25, 0x07	; 7
   15850:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3822

      itoa(last_output_update[idx], payload, 10);
   15854:	f8 01       	movw	r30, r16
   15856:	e1 59       	subi	r30, 0x91	; 145
   15858:	f5 4f       	sbci	r31, 0xF5	; 245
   1585a:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1585c:	4a e0       	ldi	r20, 0x0A	; 10
   1585e:	be 01       	movw	r22, r28
   15860:	6f 5f       	subi	r22, 0xFF	; 255
   15862:	7f 4f       	sbci	r23, 0xFF	; 255
   15864:	90 e0       	ldi	r25, 0x00	; 0
   15866:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   1586a:	9e 01       	movw	r18, r28
   1586c:	2f 5f       	subi	r18, 0xFF	; 255
   1586e:	3f 4f       	sbci	r19, 0xFF	; 255
   15870:	4f e2       	ldi	r20, 0x2F	; 47
   15872:	58 e0       	ldi	r21, 0x08	; 8
   15874:	69 2d       	mov	r22, r9
   15876:	80 e9       	ldi	r24, 0x90	; 144
   15878:	97 e0       	ldi	r25, 0x07	; 7
   1587a:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   1587e:	0f 5f       	subi	r16, 0xFF	; 255
   15880:	1f 4f       	sbci	r17, 0xFF	; 255
   15882:	31 e2       	ldi	r19, 0x21	; 33
   15884:	a3 0e       	add	r10, r19
   15886:	b1 1c       	adc	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3796
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   15888:	41 e0       	ldi	r20, 0x01	; 1
   1588a:	a4 16       	cp	r10, r20
   1588c:	42 e0       	ldi	r20, 0x02	; 2
   1588e:	b4 06       	cpc	r11, r20
   15890:	09 f0       	breq	.+2      	; 0x15894 <main+0x868>
   15892:	fd ce       	rjmp	.-518    	; 0x1568e <main+0x662>
   15894:	64 e7       	ldi	r22, 0x74	; 116
   15896:	a6 2e       	mov	r10, r22
   15898:	6a e0       	ldi	r22, 0x0A	; 10
   1589a:	b6 2e       	mov	r11, r22
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1589c:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   1589e:	7a e0       	ldi	r23, 0x0A	; 10
   158a0:	87 2e       	mov	r8, r23
   158a2:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   158a4:	be 01       	movw	r22, r28
   158a6:	6f 5b       	subi	r22, 0xBF	; 191
   158a8:	7f 4f       	sbci	r23, 0xFF	; 255
   158aa:	81 2f       	mov	r24, r17
   158ac:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
   158b0:	81 30       	cpi	r24, 0x01	; 1
   158b2:	09 f0       	breq	.+2      	; 0x158b6 <main+0x88a>
   158b4:	d2 c0       	rjmp	.+420    	; 0x15a5a <main+0xa2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   158b6:	22 96       	adiw	r28, 0x02	; 2
   158b8:	8f ad       	ldd	r24, Y+63	; 0x3f
   158ba:	22 97       	sbiw	r28, 0x02	; 2
   158bc:	81 30       	cpi	r24, 0x01	; 1
   158be:	09 f0       	breq	.+2      	; 0x158c2 <main+0x896>
   158c0:	cc c0       	rjmp	.+408    	; 0x15a5a <main+0xa2e>
   158c2:	d5 01       	movw	r26, r10
   158c4:	5b 96       	adiw	r26, 0x1b	; 27
   158c6:	8c 91       	ld	r24, X
   158c8:	5b 97       	sbiw	r26, 0x1b	; 27
   158ca:	81 30       	cpi	r24, 0x01	; 1
   158cc:	09 f0       	breq	.+2      	; 0x158d0 <main+0x8a4>
   158ce:	c5 c0       	rjmp	.+394    	; 0x15a5a <main+0xa2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
        {
          tt = status_tds18s20[id].temp / 10;
   158d0:	15 96       	adiw	r26, 0x05	; 5
   158d2:	8d 91       	ld	r24, X+
   158d4:	9c 91       	ld	r25, X
   158d6:	b4 01       	movw	r22, r8
   158d8:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   158dc:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   158de:	4a e0       	ldi	r20, 0x0A	; 10
   158e0:	be 01       	movw	r22, r28
   158e2:	6f 5f       	subi	r22, 0xFF	; 255
   158e4:	7f 4f       	sbci	r23, 0xFF	; 255
   158e6:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   158ea:	9e 01       	movw	r18, r28
   158ec:	2f 5f       	subi	r18, 0xFF	; 255
   158ee:	3f 4f       	sbci	r19, 0xFF	; 255
   158f0:	46 ec       	ldi	r20, 0xC6	; 198
   158f2:	53 e0       	ldi	r21, 0x03	; 3
   158f4:	61 2f       	mov	r22, r17
   158f6:	8b eb       	ldi	r24, 0xBB	; 187
   158f8:	93 e0       	ldi	r25, 0x03	; 3
   158fa:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   158fe:	30 e0       	ldi	r19, 0x00	; 0
   15900:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849
          avg = 0;
   15902:	60 e0       	ldi	r22, 0x00	; 0
   15904:	70 e0       	ldi	r23, 0x00	; 0
   15906:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3850
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   15908:	f9 01       	movw	r30, r18
   1590a:	ee 0f       	add	r30, r30
   1590c:	ff 1f       	adc	r31, r31
   1590e:	ea 0d       	add	r30, r10
   15910:	fb 1d       	adc	r31, r11
   15912:	47 80       	ldd	r4, Z+7	; 0x07
   15914:	50 84       	ldd	r5, Z+8	; 0x08
   15916:	05 2c       	mov	r0, r5
   15918:	00 0c       	add	r0, r0
   1591a:	66 08       	sbc	r6, r6
   1591c:	77 08       	sbc	r7, r7
   1591e:	64 0d       	add	r22, r4
   15920:	75 1d       	adc	r23, r5
   15922:	86 1d       	adc	r24, r6
   15924:	97 1d       	adc	r25, r7
   15926:	2f 5f       	subi	r18, 0xFF	; 255
   15928:	3f 4f       	sbci	r19, 0xFF	; 255
   1592a:	2a 30       	cpi	r18, 0x0A	; 10
   1592c:	31 05       	cpc	r19, r1
   1592e:	61 f7       	brne	.-40     	; 0x15908 <main+0x8dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   15930:	24 e6       	ldi	r18, 0x64	; 100
   15932:	30 e0       	ldi	r19, 0x00	; 0
   15934:	40 e0       	ldi	r20, 0x00	; 0
   15936:	50 e0       	ldi	r21, 0x00	; 0
   15938:	0e 94 93 bb 	call	0x17726	; 0x17726 <__divmodsi4>
   1593c:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1593e:	4a e0       	ldi	r20, 0x0A	; 10
   15940:	be 01       	movw	r22, r28
   15942:	6f 5f       	subi	r22, 0xFF	; 255
   15944:	7f 4f       	sbci	r23, 0xFF	; 255
   15946:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3854
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   1594a:	9e 01       	movw	r18, r28
   1594c:	2f 5f       	subi	r18, 0xFF	; 255
   1594e:	3f 4f       	sbci	r19, 0xFF	; 255
   15950:	4d e3       	ldi	r20, 0x3D	; 61
   15952:	58 e0       	ldi	r21, 0x08	; 8
   15954:	61 2f       	mov	r22, r17
   15956:	8b eb       	ldi	r24, 0xBB	; 187
   15958:	93 e0       	ldi	r25, 0x03	; 3
   1595a:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856

          strcpy(payload, tds.name);
   1595e:	cc 57       	subi	r28, 0x7C	; 124
   15960:	df 4f       	sbci	r29, 0xFF	; 255
   15962:	68 81       	ld	r22, Y
   15964:	79 81       	ldd	r23, Y+1	; 0x01
   15966:	c4 58       	subi	r28, 0x84	; 132
   15968:	d0 40       	sbci	r29, 0x00	; 0
   1596a:	ce 01       	movw	r24, r28
   1596c:	01 96       	adiw	r24, 0x01	; 1
   1596e:	0e 94 08 be 	call	0x17c10	; 0x17c10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3857
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   15972:	9e 01       	movw	r18, r28
   15974:	2f 5f       	subi	r18, 0xFF	; 255
   15976:	3f 4f       	sbci	r19, 0xFF	; 255
   15978:	45 eb       	ldi	r20, 0xB5	; 181
   1597a:	53 e0       	ldi	r21, 0x03	; 3
   1597c:	61 2f       	mov	r22, r17
   1597e:	8b eb       	ldi	r24, 0xBB	; 187
   15980:	93 e0       	ldi	r25, 0x03	; 3
   15982:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15986:	4a e0       	ldi	r20, 0x0A	; 10
   15988:	be 01       	movw	r22, r28
   1598a:	6f 5f       	subi	r22, 0xFF	; 255
   1598c:	7f 4f       	sbci	r23, 0xFF	; 255
   1598e:	2d 96       	adiw	r28, 0x0d	; 13
   15990:	8e ad       	ldd	r24, Y+62	; 0x3e
   15992:	9f ad       	ldd	r25, Y+63	; 0x3f
   15994:	2d 97       	sbiw	r28, 0x0d	; 13
   15996:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   1599a:	9e 01       	movw	r18, r28
   1599c:	2f 5f       	subi	r18, 0xFF	; 255
   1599e:	3f 4f       	sbci	r19, 0xFF	; 255
   159a0:	40 ec       	ldi	r20, 0xC0	; 192
   159a2:	57 e0       	ldi	r21, 0x07	; 7
   159a4:	61 2f       	mov	r22, r17
   159a6:	8b eb       	ldi	r24, 0xBB	; 187
   159a8:	93 e0       	ldi	r25, 0x03	; 3
   159aa:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
          tt = status_tds18s20[id].online;
   159ae:	f5 01       	movw	r30, r10
   159b0:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   159b2:	4a e0       	ldi	r20, 0x0A	; 10
   159b4:	be 01       	movw	r22, r28
   159b6:	6f 5f       	subi	r22, 0xFF	; 255
   159b8:	7f 4f       	sbci	r23, 0xFF	; 255
   159ba:	90 e0       	ldi	r25, 0x00	; 0
   159bc:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   159c0:	9e 01       	movw	r18, r28
   159c2:	2f 5f       	subi	r18, 0xFF	; 255
   159c4:	3f 4f       	sbci	r19, 0xFF	; 255
   159c6:	46 e4       	ldi	r20, 0x46	; 70
   159c8:	58 e0       	ldi	r21, 0x08	; 8
   159ca:	61 2f       	mov	r22, r17
   159cc:	8b eb       	ldi	r24, 0xBB	; 187
   159ce:	93 e0       	ldi	r25, 0x03	; 3
   159d0:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
          payload[0] = 0;
   159d4:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
          createString(payload, ':', tds.rom, 8, 16);
   159d6:	00 e1       	ldi	r16, 0x10	; 16
   159d8:	28 e0       	ldi	r18, 0x08	; 8
   159da:	ca 57       	subi	r28, 0x7A	; 122
   159dc:	df 4f       	sbci	r29, 0xFF	; 255
   159de:	48 81       	ld	r20, Y
   159e0:	59 81       	ldd	r21, Y+1	; 0x01
   159e2:	c6 58       	subi	r28, 0x86	; 134
   159e4:	d0 40       	sbci	r29, 0x00	; 0
   159e6:	6a e3       	ldi	r22, 0x3A	; 58
   159e8:	ce 01       	movw	r24, r28
   159ea:	01 96       	adiw	r24, 0x01	; 1
   159ec:	0e 94 cc 9d 	call	0x13b98	; 0x13b98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3866
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   159f0:	9e 01       	movw	r18, r28
   159f2:	2f 5f       	subi	r18, 0xFF	; 255
   159f4:	3f 4f       	sbci	r19, 0xFF	; 255
   159f6:	4f e0       	ldi	r20, 0x0F	; 15
   159f8:	57 e0       	ldi	r21, 0x07	; 7
   159fa:	61 2f       	mov	r22, r17
   159fc:	8b eb       	ldi	r24, 0xBB	; 187
   159fe:	93 e0       	ldi	r25, 0x03	; 3
   15a00:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3867
          tt = tds.period;
   15a04:	66 96       	adiw	r28, 0x16	; 22
   15a06:	8f ad       	ldd	r24, Y+63	; 0x3f
   15a08:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15a0a:	4a e0       	ldi	r20, 0x0A	; 10
   15a0c:	be 01       	movw	r22, r28
   15a0e:	6f 5f       	subi	r22, 0xFF	; 255
   15a10:	7f 4f       	sbci	r23, 0xFF	; 255
   15a12:	90 e0       	ldi	r25, 0x00	; 0
   15a14:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   15a18:	9e 01       	movw	r18, r28
   15a1a:	2f 5f       	subi	r18, 0xFF	; 255
   15a1c:	3f 4f       	sbci	r19, 0xFF	; 255
   15a1e:	43 e4       	ldi	r20, 0x43	; 67
   15a20:	56 e0       	ldi	r21, 0x06	; 6
   15a22:	61 2f       	mov	r22, r17
   15a24:	8b eb       	ldi	r24, 0xBB	; 187
   15a26:	93 e0       	ldi	r25, 0x03	; 3
   15a28:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3871

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   15a2c:	80 91 31 0b 	lds	r24, 0x0B31	; 0x800b31 <uptime>
   15a30:	d5 01       	movw	r26, r10
   15a32:	5c 96       	adiw	r26, 0x1c	; 28
   15a34:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   15a36:	4a e0       	ldi	r20, 0x0A	; 10
   15a38:	be 01       	movw	r22, r28
   15a3a:	6f 5f       	subi	r22, 0xFF	; 255
   15a3c:	7f 4f       	sbci	r23, 0xFF	; 255
   15a3e:	89 1b       	sub	r24, r25
   15a40:	99 0b       	sbc	r25, r25
   15a42:	0e 94 bf b1 	call	0x1637e	; 0x1637e <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3873
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   15a46:	9e 01       	movw	r18, r28
   15a48:	2f 5f       	subi	r18, 0xFF	; 255
   15a4a:	3f 4f       	sbci	r19, 0xFF	; 255
   15a4c:	4d e4       	ldi	r20, 0x4D	; 77
   15a4e:	58 e0       	ldi	r21, 0x08	; 8
   15a50:	61 2f       	mov	r22, r17
   15a52:	8b eb       	ldi	r24, 0xBB	; 187
   15a54:	93 e0       	ldi	r25, 0x03	; 3
   15a56:	0e 94 26 9d 	call	0x13a4c	; 0x13a4c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   15a5a:	1f 5f       	subi	r17, 0xFF	; 255
   15a5c:	be e1       	ldi	r27, 0x1E	; 30
   15a5e:	ab 0e       	add	r10, r27
   15a60:	b1 1c       	adc	r11, r1
   15a62:	16 30       	cpi	r17, 0x06	; 6
   15a64:	09 f0       	breq	.+2      	; 0x15a68 <main+0xa3c>
   15a66:	1e cf       	rjmp	.-452    	; 0x158a4 <main+0x878>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4820
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
      mqtt_send_pid_variable(idx);
   15a68:	80 e0       	ldi	r24, 0x00	; 0
   15a6a:	0e 94 ce 42 	call	0x859c	; 0x859c <mqtt_send_pid_variable(unsigned char)>
   15a6e:	81 e0       	ldi	r24, 0x01	; 1
   15a70:	0e 94 ce 42 	call	0x859c	; 0x859c <mqtt_send_pid_variable(unsigned char)>
   15a74:	82 e0       	ldi	r24, 0x02	; 2
   15a76:	0e 94 ce 42 	call	0x859c	; 0x859c <mqtt_send_pid_variable(unsigned char)>
   15a7a:	83 e0       	ldi	r24, 0x03	; 3
   15a7c:	0e 94 ce 42 	call	0x859c	; 0x859c <mqtt_send_pid_variable(unsigned char)>
   15a80:	84 e0       	ldi	r24, 0x04	; 4
   15a82:	0e 94 ce 42 	call	0x859c	; 0x859c <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4821
    send_mqtt_remote_tds_status();
   15a86:	0e 94 40 66 	call	0xcc80	; 0xcc80 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   15a8a:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15a8e:	00 91 26 11 	lds	r16, 0x1126	; 0x801126 <milis_1s>
   15a92:	10 91 27 11 	lds	r17, 0x1127	; 0x801127 <milis_1s+0x1>
   15a96:	20 91 28 11 	lds	r18, 0x1128	; 0x801128 <milis_1s+0x2>
   15a9a:	30 91 29 11 	lds	r19, 0x1129	; 0x801129 <milis_1s+0x3>
   15a9e:	60 1b       	sub	r22, r16
   15aa0:	71 0b       	sbc	r23, r17
   15aa2:	82 0b       	sbc	r24, r18
   15aa4:	93 0b       	sbc	r25, r19
   15aa6:	69 3e       	cpi	r22, 0xE9	; 233
   15aa8:	73 40       	sbci	r23, 0x03	; 3
   15aaa:	81 05       	cpc	r24, r1
   15aac:	91 05       	cpc	r25, r1
   15aae:	08 f4       	brcc	.+2      	; 0x15ab2 <main+0xa86>
   15ab0:	62 c1       	rjmp	.+708    	; 0x15d76 <main+0xd4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
  {
    milis_1s = millis();
   15ab2:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15ab6:	60 93 26 11 	sts	0x1126, r22	; 0x801126 <milis_1s>
   15aba:	70 93 27 11 	sts	0x1127, r23	; 0x801127 <milis_1s+0x1>
   15abe:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <milis_1s+0x2>
   15ac2:	90 93 29 11 	sts	0x1129, r25	; 0x801129 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4833
    uptime++;
   15ac6:	40 90 31 0b 	lds	r4, 0x0B31	; 0x800b31 <uptime>
   15aca:	50 90 32 0b 	lds	r5, 0x0B32	; 0x800b32 <uptime+0x1>
   15ace:	60 90 33 0b 	lds	r6, 0x0B33	; 0x800b33 <uptime+0x2>
   15ad2:	70 90 34 0b 	lds	r7, 0x0B34	; 0x800b34 <uptime+0x3>
   15ad6:	ff ef       	ldi	r31, 0xFF	; 255
   15ad8:	4f 1a       	sub	r4, r31
   15ada:	5f 0a       	sbc	r5, r31
   15adc:	6f 0a       	sbc	r6, r31
   15ade:	7f 0a       	sbc	r7, r31
   15ae0:	40 92 31 0b 	sts	0x0B31, r4	; 0x800b31 <uptime>
   15ae4:	50 92 32 0b 	sts	0x0B32, r5	; 0x800b32 <uptime+0x1>
   15ae8:	60 92 33 0b 	sts	0x0B33, r6	; 0x800b33 <uptime+0x2>
   15aec:	70 92 34 0b 	sts	0x0B34, r7	; 0x800b34 <uptime+0x3>
   15af0:	04 e7       	ldi	r16, 0x74	; 116
   15af2:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   15af4:	b1 2c       	mov	r11, r1
mereni_hwwire():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   15af6:	92 01       	movw	r18, r4
   15af8:	33 27       	eor	r19, r19
   15afa:	ce 57       	subi	r28, 0x7E	; 126
   15afc:	df 4f       	sbci	r29, 0xFF	; 255
   15afe:	39 83       	std	Y+1, r19	; 0x01
   15b00:	28 83       	st	Y, r18
   15b02:	c2 58       	subi	r28, 0x82	; 130
   15b04:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   15b06:	be 01       	movw	r22, r28
   15b08:	6f 5f       	subi	r22, 0xFF	; 255
   15b0a:	7f 4f       	sbci	r23, 0xFF	; 255
   15b0c:	8b 2d       	mov	r24, r11
   15b0e:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   15b12:	a9 80       	ldd	r10, Y+1	; 0x01
   15b14:	31 e0       	ldi	r19, 0x01	; 1
   15b16:	a3 12       	cpse	r10, r19
   15b18:	f7 c0       	rjmp	.+494    	; 0x15d08 <main+0xcdc>
   15b1a:	d8 01       	movw	r26, r16
   15b1c:	5c 96       	adiw	r26, 0x1c	; 28
   15b1e:	8c 91       	ld	r24, X
   15b20:	5c 97       	sbiw	r26, 0x1c	; 28
   15b22:	ce 57       	subi	r28, 0x7E	; 126
   15b24:	df 4f       	sbci	r29, 0xFF	; 255
   15b26:	e8 81       	ld	r30, Y
   15b28:	f9 81       	ldd	r31, Y+1	; 0x01
   15b2a:	c2 58       	subi	r28, 0x82	; 130
   15b2c:	d0 40       	sbci	r29, 0x00	; 0
   15b2e:	e8 1b       	sub	r30, r24
   15b30:	f1 09       	sbc	r31, r1
   15b32:	2d 89       	ldd	r18, Y+21	; 0x15
   15b34:	2e 17       	cp	r18, r30
   15b36:	1f 06       	cpc	r1, r31
   15b38:	08 f0       	brcs	.+2      	; 0x15b3c <main+0xb10>
   15b3a:	e6 c0       	rjmp	.+460    	; 0x15d08 <main+0xcdc>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   15b3c:	5d 96       	adiw	r26, 0x1d	; 29
   15b3e:	8c 91       	ld	r24, X
   15b40:	81 11       	cpse	r24, r1
   15b42:	10 c0       	rjmp	.+32     	; 0x15b64 <main+0xb38>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   15b44:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b46:	0e 94 37 99 	call	0x1326e	; 0x1326e <ds2482owReset(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   15b4a:	be 01       	movw	r22, r28
   15b4c:	6e 5f       	subi	r22, 0xFE	; 254
   15b4e:	7f 4f       	sbci	r23, 0xFF	; 255
   15b50:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b52:	0e 94 18 99 	call	0x13230	; 0x13230 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   15b56:	64 e4       	ldi	r22, 0x44	; 68
   15b58:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b5a:	0e 94 df 98 	call	0x131be	; 0x131be <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   15b5e:	d8 01       	movw	r26, r16
   15b60:	5d 96       	adiw	r26, 0x1d	; 29
   15b62:	ac 92       	st	X, r10
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   15b64:	f8 01       	movw	r30, r16
   15b66:	a5 8c       	ldd	r10, Z+29	; 0x1d
   15b68:	f1 e0       	ldi	r31, 0x01	; 1
   15b6a:	af 12       	cpse	r10, r31
   15b6c:	cd c0       	rjmp	.+410    	; 0x15d08 <main+0xcdc>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   15b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b70:	0e 94 37 99 	call	0x1326e	; 0x1326e <ds2482owReset(unsigned char)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   15b74:	be 01       	movw	r22, r28
   15b76:	6e 5f       	subi	r22, 0xFE	; 254
   15b78:	7f 4f       	sbci	r23, 0xFF	; 255
   15b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b7c:	0e 94 18 99 	call	0x13230	; 0x13230 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   15b80:	be 01       	movw	r22, r28
   15b82:	6f 57       	subi	r22, 0x7F	; 127
   15b84:	7f 4f       	sbci	r23, 0xFF	; 255
   15b86:	8a 85       	ldd	r24, Y+10	; 0x0a
   15b88:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:287
        if (t != 0)
   15b8c:	cf 57       	subi	r28, 0x7F	; 127
   15b8e:	df 4f       	sbci	r29, 0xFF	; 255
   15b90:	88 81       	ld	r24, Y
   15b92:	c1 58       	subi	r28, 0x81	; 129
   15b94:	d0 40       	sbci	r29, 0x00	; 0
   15b96:	88 23       	and	r24, r24
   15b98:	09 f4       	brne	.+2      	; 0x15b9c <main+0xb70>
   15b9a:	b6 c0       	rjmp	.+364    	; 0x15d08 <main+0xcdc>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   15b9c:	d8 01       	movw	r26, r16
   15b9e:	5d 96       	adiw	r26, 0x1d	; 29
   15ba0:	1c 92       	st	X, r1
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   15ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
   15ba4:	0e 94 37 99 	call	0x1326e	; 0x1326e <ds2482owReset(unsigned char)>
   15ba8:	38 2e       	mov	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   15baa:	be 01       	movw	r22, r28
   15bac:	6e 5f       	subi	r22, 0xFE	; 254
   15bae:	7f 4f       	sbci	r23, 0xFF	; 255
   15bb0:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bb2:	0e 94 18 99 	call	0x13230	; 0x13230 <owMatchRom(unsigned char, unsigned char*)>
   15bb6:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   15bb8:	6e eb       	ldi	r22, 0xBE	; 190
   15bba:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bbc:	0e 94 df 98 	call	0x131be	; 0x131be <ds2482owWriteByte(unsigned char, unsigned char)>
   15bc0:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   15bc2:	be 01       	movw	r22, r28
   15bc4:	6f 5b       	subi	r22, 0xBF	; 191
   15bc6:	7f 4f       	sbci	r23, 0xFF	; 255
   15bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bca:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15bce:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   15bd0:	22 96       	adiw	r28, 0x02	; 2
   15bd2:	9f ac       	ldd	r9, Y+63	; 0x3f
   15bd4:	22 97       	sbiw	r28, 0x02	; 2
   15bd6:	f8 01       	movw	r30, r16
   15bd8:	90 82       	st	Z, r9
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   15bda:	be 01       	movw	r22, r28
   15bdc:	6f 5b       	subi	r22, 0xBF	; 191
   15bde:	7f 4f       	sbci	r23, 0xFF	; 255
   15be0:	8a 85       	ldd	r24, Y+10	; 0x0a
   15be2:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15be6:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   15be8:	22 96       	adiw	r28, 0x02	; 2
   15bea:	8f ac       	ldd	r8, Y+63	; 0x3f
   15bec:	22 97       	sbiw	r28, 0x02	; 2
   15bee:	d8 01       	movw	r26, r16
   15bf0:	11 96       	adiw	r26, 0x01	; 1
   15bf2:	8c 92       	st	X, r8
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   15bf4:	be 01       	movw	r22, r28
   15bf6:	6f 5b       	subi	r22, 0xBF	; 191
   15bf8:	7f 4f       	sbci	r23, 0xFF	; 255
   15bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
   15bfc:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15c00:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   15c02:	be 01       	movw	r22, r28
   15c04:	6f 5b       	subi	r22, 0xBF	; 191
   15c06:	7f 4f       	sbci	r23, 0xFF	; 255
   15c08:	8a 85       	ldd	r24, Y+10	; 0x0a
   15c0a:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15c0e:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   15c10:	be 01       	movw	r22, r28
   15c12:	6f 5b       	subi	r22, 0xBF	; 191
   15c14:	7f 4f       	sbci	r23, 0xFF	; 255
   15c16:	8a 85       	ldd	r24, Y+10	; 0x0a
   15c18:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15c1c:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   15c1e:	be 01       	movw	r22, r28
   15c20:	6f 5b       	subi	r22, 0xBF	; 191
   15c22:	7f 4f       	sbci	r23, 0xFF	; 255
   15c24:	8a 85       	ldd	r24, Y+10	; 0x0a
   15c26:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15c2a:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   15c2c:	be 01       	movw	r22, r28
   15c2e:	6f 5b       	subi	r22, 0xBF	; 191
   15c30:	7f 4f       	sbci	r23, 0xFF	; 255
   15c32:	8a 85       	ldd	r24, Y+10	; 0x0a
   15c34:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15c38:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   15c3a:	22 96       	adiw	r28, 0x02	; 2
   15c3c:	8f ad       	ldd	r24, Y+63	; 0x3f
   15c3e:	22 97       	sbiw	r28, 0x02	; 2
   15c40:	f8 01       	movw	r30, r16
   15c42:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   15c44:	be 01       	movw	r22, r28
   15c46:	6f 5b       	subi	r22, 0xBF	; 191
   15c48:	7f 4f       	sbci	r23, 0xFF	; 255
   15c4a:	8a 85       	ldd	r24, Y+10	; 0x0a
   15c4c:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
   15c50:	38 0e       	add	r3, r24
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   15c52:	22 96       	adiw	r28, 0x02	; 2
   15c54:	2f ac       	ldd	r2, Y+63	; 0x3f
   15c56:	22 97       	sbiw	r28, 0x02	; 2
   15c58:	d8 01       	movw	r26, r16
   15c5a:	13 96       	adiw	r26, 0x03	; 3
   15c5c:	2c 92       	st	X, r2
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   15c5e:	be 01       	movw	r22, r28
   15c60:	6f 5b       	subi	r22, 0xBF	; 191
   15c62:	7f 4f       	sbci	r23, 0xFF	; 255
   15c64:	8a 85       	ldd	r24, Y+10	; 0x0a
   15c66:	0e 94 83 98 	call	0x13106	; 0x13106 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   15c6a:	22 96       	adiw	r28, 0x02	; 2
   15c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
   15c6e:	22 97       	sbiw	r28, 0x02	; 2
   15c70:	f8 01       	movw	r30, r16
   15c72:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   15c74:	83 0d       	add	r24, r3
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   15c76:	09 f0       	breq	.+2      	; 0x15c7a <main+0xc4e>
   15c78:	e2 c1       	rjmp	.+964    	; 0x1603e <main+0x1012>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   15c7a:	62 2d       	mov	r22, r2
   15c7c:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   15c7e:	28 2d       	mov	r18, r8
   15c80:	30 e0       	ldi	r19, 0x00	; 0
   15c82:	32 2f       	mov	r19, r18
   15c84:	22 27       	eor	r18, r18
   15c86:	33 0f       	add	r19, r19
   15c88:	33 0f       	add	r19, r19
   15c8a:	33 0f       	add	r19, r19
   15c8c:	f8 e0       	ldi	r31, 0x08	; 8
   15c8e:	9f 9e       	mul	r9, r31
   15c90:	c0 01       	movw	r24, r0
   15c92:	11 24       	eor	r1, r1
   15c94:	28 2b       	or	r18, r24
   15c96:	39 2b       	or	r19, r25
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   15c98:	b3 e0       	ldi	r27, 0x03	; 3
   15c9a:	22 0f       	add	r18, r18
   15c9c:	33 1f       	adc	r19, r19
   15c9e:	ba 95       	dec	r27
   15ca0:	e1 f7       	brne	.-8      	; 0x15c9a <main+0xc6e>
   15ca2:	20 78       	andi	r18, 0x80	; 128
   15ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
   15ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
   15ca8:	40 97       	sbiw	r24, 0x10	; 16
   15caa:	28 0f       	add	r18, r24
   15cac:	39 1f       	adc	r19, r25
   15cae:	cf 57       	subi	r28, 0x7F	; 127
   15cb0:	df 4f       	sbci	r29, 0xFF	; 255
   15cb2:	e8 81       	ld	r30, Y
   15cb4:	c1 58       	subi	r28, 0x81	; 129
   15cb6:	d0 40       	sbci	r29, 0x00	; 0
   15cb8:	4e e1       	ldi	r20, 0x1E	; 30
   15cba:	4e 9f       	mul	r20, r30
   15cbc:	f0 01       	movw	r30, r0
   15cbe:	11 24       	eor	r1, r1
   15cc0:	ec 58       	subi	r30, 0x8C	; 140
   15cc2:	f5 4f       	sbci	r31, 0xF5	; 245
   15cc4:	82 81       	ldd	r24, Z+2	; 0x02
   15cc6:	db 01       	movw	r26, r22
   15cc8:	a8 1b       	sub	r26, r24
   15cca:	b1 09       	sbc	r27, r1
   15ccc:	cd 01       	movw	r24, r26
   15cce:	96 95       	lsr	r25
   15cd0:	98 2f       	mov	r25, r24
   15cd2:	88 27       	eor	r24, r24
   15cd4:	97 95       	ror	r25
   15cd6:	87 95       	ror	r24
   15cd8:	0e 94 5d bb 	call	0x176ba	; 0x176ba <__divmodhi4>
   15cdc:	26 0f       	add	r18, r22
   15cde:	37 1f       	adc	r19, r23
   15ce0:	f8 01       	movw	r30, r16
   15ce2:	36 83       	std	Z+6, r19	; 0x06
   15ce4:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   15ce6:	a3 8e       	std	Z+27, r10	; 0x1b
   15ce8:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   15cea:	87 89       	ldd	r24, Z+23	; 0x17
   15cec:	90 8d       	ldd	r25, Z+24	; 0x18
   15cee:	92 8f       	std	Z+26, r25	; 0x1a
   15cf0:	81 8f       	std	Z+25, r24	; 0x19
   15cf2:	41 50       	subi	r20, 0x01	; 1
   15cf4:	32 97       	sbiw	r30, 0x02	; 2
   15cf6:	41 11       	cpse	r20, r1
   15cf8:	f8 cf       	rjmp	.-16     	; 0x15cea <main+0xcbe>
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   15cfa:	d8 01       	movw	r26, r16
   15cfc:	18 96       	adiw	r26, 0x08	; 8
   15cfe:	3c 93       	st	X, r19
   15d00:	2e 93       	st	-X, r18
   15d02:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   15d04:	5c 96       	adiw	r26, 0x1c	; 28
   15d06:	4c 92       	st	X, r4
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   15d08:	b3 94       	inc	r11
   15d0a:	02 5e       	subi	r16, 0xE2	; 226
   15d0c:	1f 4f       	sbci	r17, 0xFF	; 255
   15d0e:	f6 e0       	ldi	r31, 0x06	; 6
   15d10:	bf 12       	cpse	r11, r31
   15d12:	f9 ce       	rjmp	.-526    	; 0x15b06 <main+0xada>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   15d14:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3008
    if (get_tds18s20(id, &tds) == 1)
   15d16:	be 01       	movw	r22, r28
   15d18:	6f 5f       	subi	r22, 0xFF	; 255
   15d1a:	7f 4f       	sbci	r23, 0xFF	; 255
   15d1c:	81 2f       	mov	r24, r17
   15d1e:	0e 94 bd 5c 	call	0xb97a	; 0xb97a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   15d22:	1f 5f       	subi	r17, 0xFF	; 255
   15d24:	16 30       	cpi	r17, 0x06	; 6
   15d26:	b9 f7       	brne	.-18     	; 0x15d16 <main+0xcea>
   15d28:	f6 e6       	ldi	r31, 0x66	; 102
   15d2a:	8f 2e       	mov	r8, r31
   15d2c:	91 2c       	mov	r9, r1
   15d2e:	a1 2c       	mov	r10, r1
   15d30:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2953
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15d32:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
  {
    remote_tds_get_active(idx, &active);
   15d34:	be 01       	movw	r22, r28
   15d36:	6f 5f       	subi	r22, 0xFF	; 255
   15d38:	7f 4f       	sbci	r23, 0xFF	; 255
   15d3a:	81 2f       	mov	r24, r17
   15d3c:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2956
    if (active == 1)
   15d40:	89 81       	ldd	r24, Y+1	; 0x01
   15d42:	81 30       	cpi	r24, 0x01	; 1
   15d44:	61 f4       	brne	.+24     	; 0x15d5e <main+0xd32>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   15d46:	c5 01       	movw	r24, r10
   15d48:	b4 01       	movw	r22, r8
   15d4a:	0e 94 2e 91 	call	0x1225c	; 0x1225c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944
    if (last < 250)
   15d4e:	8a 3f       	cpi	r24, 0xFA	; 250
   15d50:	08 f4       	brcc	.+2      	; 0x15d54 <main+0xd28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
      last++;
   15d52:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   15d54:	48 2f       	mov	r20, r24
   15d56:	c5 01       	movw	r24, r10
   15d58:	b4 01       	movw	r22, r8
   15d5a:	0e 94 f2 90 	call	0x121e4	; 0x121e4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2953
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15d5e:	1f 5f       	subi	r17, 0xFF	; 255
   15d60:	23 e0       	ldi	r18, 0x03	; 3
   15d62:	82 0e       	add	r8, r18
   15d64:	91 1c       	adc	r9, r1
   15d66:	a1 1c       	adc	r10, r1
   15d68:	b1 1c       	adc	r11, r1
   15d6a:	34 e8       	ldi	r19, 0x84	; 132
   15d6c:	83 16       	cp	r8, r19
   15d6e:	91 04       	cpc	r9, r1
   15d70:	a1 04       	cpc	r10, r1
   15d72:	b1 04       	cpc	r11, r1
   15d74:	f9 f6       	brne	.-66     	; 0x15d34 <main+0xd08>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   15d76:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15d7a:	00 91 22 11 	lds	r16, 0x1122	; 0x801122 <milis_05s>
   15d7e:	10 91 23 11 	lds	r17, 0x1123	; 0x801123 <milis_05s+0x1>
   15d82:	20 91 24 11 	lds	r18, 0x1124	; 0x801124 <milis_05s+0x2>
   15d86:	30 91 25 11 	lds	r19, 0x1125	; 0x801125 <milis_05s+0x3>
   15d8a:	60 1b       	sub	r22, r16
   15d8c:	71 0b       	sbc	r23, r17
   15d8e:	82 0b       	sbc	r24, r18
   15d90:	93 0b       	sbc	r25, r19
   15d92:	65 3f       	cpi	r22, 0xF5	; 245
   15d94:	71 40       	sbci	r23, 0x01	; 1
   15d96:	81 05       	cpc	r24, r1
   15d98:	91 05       	cpc	r25, r1
   15d9a:	08 f4       	brcc	.+2      	; 0x15d9e <main+0xd72>
   15d9c:	bc c0       	rjmp	.+376    	; 0x15f16 <main+0xeea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4842
  {
    milis_05s = millis();
   15d9e:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15da2:	60 93 22 11 	sts	0x1122, r22	; 0x801122 <milis_05s>
   15da6:	70 93 23 11 	sts	0x1123, r23	; 0x801123 <milis_05s+0x1>
   15daa:	80 93 24 11 	sts	0x1124, r24	; 0x801124 <milis_05s+0x2>
   15dae:	90 93 25 11 	sts	0x1125, r25	; 0x801125 <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   15db2:	88 e6       	ldi	r24, 0x68	; 104
   15db4:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   15db8:	60 e0       	ldi	r22, 0x00	; 0
   15dba:	84 e5       	ldi	r24, 0x54	; 84
   15dbc:	9e e0       	ldi	r25, 0x0E	; 14
   15dbe:	0e 94 7d 87 	call	0x10efa	; 0x10efa <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   15dc2:	84 e5       	ldi	r24, 0x54	; 84
   15dc4:	9e e0       	ldi	r25, 0x0E	; 14
   15dc6:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   15dca:	87 e0       	ldi	r24, 0x07	; 7
   15dcc:	90 e0       	ldi	r25, 0x00	; 0
   15dce:	0e 94 b5 89 	call	0x1136a	; 0x1136a <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   15dd2:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
   15dd6:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15dd8:	28 2f       	mov	r18, r24
   15dda:	30 e0       	ldi	r19, 0x00	; 0
   15ddc:	94 e0       	ldi	r25, 0x04	; 4
   15dde:	35 95       	asr	r19
   15de0:	27 95       	ror	r18
   15de2:	9a 95       	dec	r25
   15de4:	e1 f7       	brne	.-8      	; 0x15dde <main+0xdb2>
   15de6:	92 2f       	mov	r25, r18
   15de8:	99 0f       	add	r25, r25
   15dea:	99 0f       	add	r25, r25
   15dec:	12 2f       	mov	r17, r18
   15dee:	19 1b       	sub	r17, r25
   15df0:	11 0f       	add	r17, r17
   15df2:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   15df4:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15df8:	9c 01       	movw	r18, r24
   15dfa:	44 e0       	ldi	r20, 0x04	; 4
   15dfc:	35 95       	asr	r19
   15dfe:	27 95       	ror	r18
   15e00:	4a 95       	dec	r20
   15e02:	e1 f7       	brne	.-8      	; 0x15dfc <main+0xdd0>
   15e04:	2f 70       	andi	r18, 0x0F	; 15
   15e06:	33 27       	eor	r19, r19
   15e08:	92 2f       	mov	r25, r18
   15e0a:	99 0f       	add	r25, r25
   15e0c:	99 0f       	add	r25, r25
   15e0e:	02 2f       	mov	r16, r18
   15e10:	09 1b       	sub	r16, r25
   15e12:	00 0f       	add	r16, r16
   15e14:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   15e16:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15e1a:	9c 01       	movw	r18, r24
   15e1c:	54 e0       	ldi	r21, 0x04	; 4
   15e1e:	35 95       	asr	r19
   15e20:	27 95       	ror	r18
   15e22:	5a 95       	dec	r21
   15e24:	e1 f7       	brne	.-8      	; 0x15e1e <main+0xdf2>
   15e26:	2f 70       	andi	r18, 0x0F	; 15
   15e28:	33 27       	eor	r19, r19
   15e2a:	92 2f       	mov	r25, r18
   15e2c:	99 0f       	add	r25, r25
   15e2e:	99 0f       	add	r25, r25
   15e30:	b2 2e       	mov	r11, r18
   15e32:	b9 1a       	sub	r11, r25
   15e34:	bb 0c       	add	r11, r11
   15e36:	b8 0e       	add	r11, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   15e38:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   15e3c:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15e40:	9c 01       	movw	r18, r24
   15e42:	64 e0       	ldi	r22, 0x04	; 4
   15e44:	35 95       	asr	r19
   15e46:	27 95       	ror	r18
   15e48:	6a 95       	dec	r22
   15e4a:	e1 f7       	brne	.-8      	; 0x15e44 <main+0xe18>
   15e4c:	2f 70       	andi	r18, 0x0F	; 15
   15e4e:	33 27       	eor	r19, r19
   15e50:	92 2f       	mov	r25, r18
   15e52:	99 0f       	add	r25, r25
   15e54:	99 0f       	add	r25, r25
   15e56:	a2 2e       	mov	r10, r18
   15e58:	a9 1a       	sub	r10, r25
   15e5a:	aa 0c       	add	r10, r10
   15e5c:	a8 0e       	add	r10, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   15e5e:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15e62:	9c 01       	movw	r18, r24
   15e64:	74 e0       	ldi	r23, 0x04	; 4
   15e66:	35 95       	asr	r19
   15e68:	27 95       	ror	r18
   15e6a:	7a 95       	dec	r23
   15e6c:	e1 f7       	brne	.-8      	; 0x15e66 <main+0xe3a>
   15e6e:	2f 70       	andi	r18, 0x0F	; 15
   15e70:	33 27       	eor	r19, r19
   15e72:	92 2f       	mov	r25, r18
   15e74:	99 0f       	add	r25, r25
   15e76:	99 0f       	add	r25, r25
   15e78:	92 2e       	mov	r9, r18
   15e7a:	99 1a       	sub	r9, r25
   15e7c:	99 0c       	add	r9, r9
   15e7e:	98 0e       	add	r9, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   15e80:	0e 94 bb 85 	call	0x10b76	; 0x10b76 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15e84:	9c 01       	movw	r18, r24
   15e86:	e4 e0       	ldi	r30, 0x04	; 4
   15e88:	35 95       	asr	r19
   15e8a:	27 95       	ror	r18
   15e8c:	ea 95       	dec	r30
   15e8e:	e1 f7       	brne	.-8      	; 0x15e88 <main+0xe5c>
   15e90:	2f 70       	andi	r18, 0x0F	; 15
   15e92:	33 27       	eor	r19, r19
   15e94:	92 2f       	mov	r25, r18
   15e96:	99 0f       	add	r25, r25
   15e98:	99 0f       	add	r25, r25
   15e9a:	29 1b       	sub	r18, r25
   15e9c:	22 0f       	add	r18, r18
   15e9e:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   15ea0:	80 93 a5 10 	sts	0x10A5, r24	; 0x8010a5 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4843
    now = rtc.now();
   15ea4:	90 92 a6 10 	sts	0x10A6, r9	; 0x8010a6 <now+0x1>
   15ea8:	a0 92 a7 10 	sts	0x10A7, r10	; 0x8010a7 <now+0x2>
   15eac:	b0 92 a8 10 	sts	0x10A8, r11	; 0x8010a8 <now+0x3>
   15eb0:	00 93 a9 10 	sts	0x10A9, r16	; 0x8010a9 <now+0x4>
   15eb4:	10 93 aa 10 	sts	0x10AA, r17	; 0x8010aa <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4085
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   15eb8:	0e 94 56 98 	call	0x130ac	; 0x130ac <RTC_DS1307::isrunning() [clone .constprop.127]>
   15ebc:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <selftest_data>
   15ec0:	81 11       	cpse	r24, r1
   15ec2:	bf c0       	rjmp	.+382    	; 0x16042 <main+0x1016>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
    sbi(selftest_data, SELFTEST_ERR_RTC);
   15ec4:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4088
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   15ec6:	90 93 28 0b 	sts	0x0B28, r25	; 0x800b28 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   15eca:	81 e0       	ldi	r24, 0x01	; 1
   15ecc:	80 93 30 0b 	sts	0x0B30, r24	; 0x800b30 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5452
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   15ed0:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5451

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   15ed2:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5453
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15ed4:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5455
  {
    remote_tds_get_active(idx, &active);
   15ed6:	be 01       	movw	r22, r28
   15ed8:	6f 5f       	subi	r22, 0xFF	; 255
   15eda:	7f 4f       	sbci	r23, 0xFF	; 255
   15edc:	81 2f       	mov	r24, r17
   15ede:	0e 94 8e 62 	call	0xc51c	; 0xc51c <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5456
    if (active == 1) cnt++;
   15ee2:	89 81       	ldd	r24, Y+1	; 0x01
   15ee4:	81 30       	cpi	r24, 0x01	; 1
   15ee6:	09 f4       	brne	.+2      	; 0x15eea <main+0xebe>
   15ee8:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5453
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15eea:	1f 5f       	subi	r17, 0xFF	; 255
   15eec:	1a 30       	cpi	r17, 0x0A	; 10
   15eee:	99 f7       	brne	.-26     	; 0x15ed6 <main+0xeaa>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4848
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   15ef0:	00 93 2f 0b 	sts	0x0B2F, r16	; 0x800b2f <use_rtds>
   15ef4:	08 ec       	ldi	r16, 0xC8	; 200
   15ef6:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   15ef8:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   15efa:	c8 01       	movw	r24, r16
   15efc:	0e 94 b1 9d 	call	0x13b62	; 0x13b62 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   15f00:	81 30       	cpi	r24, 0x01	; 1
   15f02:	09 f4       	brne	.+2      	; 0x15f06 <main+0xeda>
   15f04:	b3 94       	inc	r11
   15f06:	0a 5e       	subi	r16, 0xEA	; 234
   15f08:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   15f0a:	0c 34       	cpi	r16, 0x4C	; 76
   15f0c:	51 e0       	ldi	r21, 0x01	; 1
   15f0e:	15 07       	cpc	r17, r21
   15f10:	a1 f7       	brne	.-24     	; 0x15efa <main+0xece>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4849
    use_tds = count_use_tds();
   15f12:	b0 92 2e 0b 	sts	0x0B2E, r11	; 0x800b2e <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4858




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   15f16:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15f1a:	00 91 1e 11 	lds	r16, 0x111E	; 0x80111e <milis_005s>
   15f1e:	10 91 1f 11 	lds	r17, 0x111F	; 0x80111f <milis_005s+0x1>
   15f22:	20 91 20 11 	lds	r18, 0x1120	; 0x801120 <milis_005s+0x2>
   15f26:	30 91 21 11 	lds	r19, 0x1121	; 0x801121 <milis_005s+0x3>
   15f2a:	60 1b       	sub	r22, r16
   15f2c:	71 0b       	sbc	r23, r17
   15f2e:	82 0b       	sbc	r24, r18
   15f30:	93 0b       	sbc	r25, r19
   15f32:	63 33       	cpi	r22, 0x33	; 51
   15f34:	71 05       	cpc	r23, r1
   15f36:	81 05       	cpc	r24, r1
   15f38:	91 05       	cpc	r25, r1
   15f3a:	90 f1       	brcs	.+100    	; 0x15fa0 <main+0xf74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4860
  {
    milis_005s = millis();
   15f3c:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15f40:	60 93 1e 11 	sts	0x111E, r22	; 0x80111e <milis_005s>
   15f44:	70 93 1f 11 	sts	0x111F, r23	; 0x80111f <milis_005s+0x1>
   15f48:	80 93 20 11 	sts	0x1120, r24	; 0x801120 <milis_005s+0x2>
   15f4c:	90 93 21 11 	sts	0x1121, r25	; 0x801121 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   15f50:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <a2d_run_now>
   15f54:	81 30       	cpi	r24, 0x01	; 1
   15f56:	21 f5       	brne	.+72     	; 0x15fa0 <main+0xf74>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   15f58:	30 91 29 0b 	lds	r19, 0x0B29	; 0x800b29 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   15f5c:	20 91 2a 0b 	lds	r18, 0x0B2A	; 0x800b2a <a2d_index>
   15f60:	90 e0       	ldi	r25, 0x00	; 0
   15f62:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   15f64:	61 e0       	ldi	r22, 0x01	; 1
   15f66:	70 e0       	ldi	r23, 0x00	; 0
   15f68:	ab 01       	movw	r20, r22
   15f6a:	08 2e       	mov	r0, r24
   15f6c:	01 c0       	rjmp	.+2      	; 0x15f70 <main+0xf44>
   15f6e:	44 0f       	add	r20, r20
   15f70:	0a 94       	dec	r0
   15f72:	ea f7       	brpl	.-6      	; 0x15f6e <main+0xf42>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   15f74:	e3 2f       	mov	r30, r19
   15f76:	e4 23       	and	r30, r20
   15f78:	09 f4       	brne	.+2      	; 0x15f7c <main+0xf50>
   15f7a:	65 c0       	rjmp	.+202    	; 0x16046 <main+0x101a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   15f7c:	e2 2f       	mov	r30, r18
   15f7e:	e4 23       	and	r30, r20
   15f80:	09 f0       	breq	.+2      	; 0x15f84 <main+0xf58>
   15f82:	61 c0       	rjmp	.+194    	; 0x16046 <main+0x101a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   15f84:	24 2b       	or	r18, r20
   15f86:	20 93 2a 0b 	sts	0x0B2A, r18	; 0x800b2a <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   15f8a:	0e 94 92 95 	call	0x12b24	; 0x12b24 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4866
    {
      a2d_start_process();
      a2d_run_now = 0;
   15f8e:	10 92 2d 0b 	sts	0x0B2D, r1	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4867
      if (a2d_done() == 0) a2d_run_now = 1;
   15f92:	80 91 2a 0b 	lds	r24, 0x0B2A	; 0x800b2a <a2d_index>
   15f96:	81 11       	cpse	r24, r1
   15f98:	03 c0       	rjmp	.+6      	; 0x15fa0 <main+0xf74>
   15f9a:	81 e0       	ldi	r24, 0x01	; 1
   15f9c:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4871
    }
  }

  load = millis() - load_now;
   15fa0:	0e 94 85 93 	call	0x1270a	; 0x1270a <millis>
   15fa4:	dc 01       	movw	r26, r24
   15fa6:	cb 01       	movw	r24, r22
   15fa8:	8c 19       	sub	r24, r12
   15faa:	9d 09       	sbc	r25, r13
   15fac:	ae 09       	sbc	r26, r14
   15fae:	bf 09       	sbc	r27, r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
  if (load < load_min) load_min = load;
   15fb0:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   15fb4:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   15fb8:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   15fbc:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   15fc0:	80 17       	cp	r24, r16
   15fc2:	91 07       	cpc	r25, r17
   15fc4:	a2 07       	cpc	r26, r18
   15fc6:	b3 07       	cpc	r27, r19
   15fc8:	40 f4       	brcc	.+16     	; 0x15fda <main+0xfae>
   15fca:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   15fce:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   15fd2:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   15fd6:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4873
  if (load > load_max) load_max = load;
   15fda:	00 91 1a 11 	lds	r16, 0x111A	; 0x80111a <load_max>
   15fde:	10 91 1b 11 	lds	r17, 0x111B	; 0x80111b <load_max+0x1>
   15fe2:	20 91 1c 11 	lds	r18, 0x111C	; 0x80111c <load_max+0x2>
   15fe6:	30 91 1d 11 	lds	r19, 0x111D	; 0x80111d <load_max+0x3>
   15fea:	08 17       	cp	r16, r24
   15fec:	19 07       	cpc	r17, r25
   15fee:	2a 07       	cpc	r18, r26
   15ff0:	3b 07       	cpc	r19, r27
   15ff2:	40 f4       	brcc	.+16     	; 0x16004 <main+0xfd8>
   15ff4:	80 93 1a 11 	sts	0x111A, r24	; 0x80111a <load_max>
   15ff8:	90 93 1b 11 	sts	0x111B, r25	; 0x80111b <load_max+0x1>
   15ffc:	a0 93 1c 11 	sts	0x111C, r26	; 0x80111c <load_max+0x2>
   16000:	b0 93 1d 11 	sts	0x111D, r27	; 0x80111d <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4876

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   16004:	80 91 2b 0b 	lds	r24, 0x0B2B	; 0x800b2b <light_curr>
   16008:	90 91 2c 0b 	lds	r25, 0x0B2C	; 0x800b2c <light_curr+0x1>
   1600c:	20 91 18 11 	lds	r18, 0x1118	; 0x801118 <light_min>
   16010:	30 91 19 11 	lds	r19, 0x1119	; 0x801119 <light_min+0x1>
   16014:	82 17       	cp	r24, r18
   16016:	93 07       	cpc	r25, r19
   16018:	20 f4       	brcc	.+8      	; 0x16022 <main+0xff6>
   1601a:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <light_min+0x1>
   1601e:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4877
  if (light_curr > light_max) light_max = light_curr;
   16022:	20 91 16 11 	lds	r18, 0x1116	; 0x801116 <light_max>
   16026:	30 91 17 11 	lds	r19, 0x1117	; 0x801117 <light_max+0x1>
   1602a:	28 17       	cp	r18, r24
   1602c:	39 07       	cpc	r19, r25
   1602e:	20 f4       	brcc	.+8      	; 0x16038 <main+0x100c>
   16030:	90 93 17 11 	sts	0x1117, r25	; 0x801117 <light_max+0x1>
   16034:	80 93 16 11 	sts	0x1116, r24	; 0x801116 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   16038:	0e 94 a6 86 	call	0x10d4c	; 0x10d4c <serialEventRun()>
   1603c:	62 c8       	rjmp	.-3900   	; 0x15102 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_109083/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   1603e:	13 8e       	std	Z+27, r1	; 0x1b
   16040:	63 ce       	rjmp	.-826    	; 0x15d08 <main+0xcdc>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4088
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   16042:	9e 7f       	andi	r25, 0xFE	; 254
   16044:	40 cf       	rjmp	.-384    	; 0x15ec6 <main+0xe9a>
   16046:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   16048:	88 30       	cpi	r24, 0x08	; 8
   1604a:	91 05       	cpc	r25, r1
   1604c:	09 f0       	breq	.+2      	; 0x16050 <main+0x1024>
   1604e:	8c cf       	rjmp	.-232    	; 0x15f68 <main+0xf3c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   16050:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <a2d_index>
   16054:	9c cf       	rjmp	.-200    	; 0x15f8e <main+0xf62>

00016056 <dtostrf>:
dtostrf():
   16056:	ef 92       	push	r14
   16058:	0f 93       	push	r16
   1605a:	1f 93       	push	r17
   1605c:	cf 93       	push	r28
   1605e:	df 93       	push	r29
   16060:	e8 01       	movw	r28, r16
   16062:	34 e0       	ldi	r19, 0x04	; 4
   16064:	47 fd       	sbrc	r20, 7
   16066:	34 e1       	ldi	r19, 0x14	; 20
   16068:	04 2e       	mov	r0, r20
   1606a:	00 0c       	add	r0, r0
   1606c:	55 0b       	sbc	r21, r21
   1606e:	57 ff       	sbrs	r21, 7
   16070:	03 c0       	rjmp	.+6      	; 0x16078 <dtostrf+0x22>
   16072:	51 95       	neg	r21
   16074:	41 95       	neg	r20
   16076:	51 09       	sbc	r21, r1
   16078:	e3 2e       	mov	r14, r19
   1607a:	02 2f       	mov	r16, r18
   1607c:	24 2f       	mov	r18, r20
   1607e:	ae 01       	movw	r20, r28
   16080:	0e 94 55 b4 	call	0x168aa	; 0x168aa <dtoa_prf>
   16084:	ce 01       	movw	r24, r28
   16086:	df 91       	pop	r29
   16088:	cf 91       	pop	r28
   1608a:	1f 91       	pop	r17
   1608c:	0f 91       	pop	r16
   1608e:	ef 90       	pop	r14
   16090:	08 95       	ret

00016092 <strtoul>:
strtoul():
   16092:	3f 92       	push	r3
   16094:	4f 92       	push	r4
   16096:	5f 92       	push	r5
   16098:	6f 92       	push	r6
   1609a:	7f 92       	push	r7
   1609c:	8f 92       	push	r8
   1609e:	9f 92       	push	r9
   160a0:	af 92       	push	r10
   160a2:	bf 92       	push	r11
   160a4:	cf 92       	push	r12
   160a6:	df 92       	push	r13
   160a8:	ef 92       	push	r14
   160aa:	ff 92       	push	r15
   160ac:	0f 93       	push	r16
   160ae:	1f 93       	push	r17
   160b0:	cf 93       	push	r28
   160b2:	df 93       	push	r29
   160b4:	5c 01       	movw	r10, r24
   160b6:	6b 01       	movw	r12, r22
   160b8:	7a 01       	movw	r14, r20
   160ba:	61 15       	cp	r22, r1
   160bc:	71 05       	cpc	r23, r1
   160be:	19 f0       	breq	.+6      	; 0x160c6 <strtoul+0x34>
   160c0:	fb 01       	movw	r30, r22
   160c2:	91 83       	std	Z+1, r25	; 0x01
   160c4:	80 83       	st	Z, r24
   160c6:	e1 14       	cp	r14, r1
   160c8:	f1 04       	cpc	r15, r1
   160ca:	49 f0       	breq	.+18     	; 0x160de <strtoul+0x4c>
   160cc:	c7 01       	movw	r24, r14
   160ce:	02 97       	sbiw	r24, 0x02	; 2
   160d0:	83 97       	sbiw	r24, 0x23	; 35
   160d2:	28 f0       	brcs	.+10     	; 0x160de <strtoul+0x4c>
   160d4:	60 e0       	ldi	r22, 0x00	; 0
   160d6:	70 e0       	ldi	r23, 0x00	; 0
   160d8:	cb 01       	movw	r24, r22
   160da:	9b c0       	rjmp	.+310    	; 0x16212 <strtoul+0x180>
   160dc:	5e 01       	movw	r10, r28
   160de:	e5 01       	movw	r28, r10
   160e0:	21 96       	adiw	r28, 0x01	; 1
   160e2:	f5 01       	movw	r30, r10
   160e4:	10 81       	ld	r17, Z
   160e6:	81 2f       	mov	r24, r17
   160e8:	90 e0       	ldi	r25, 0x00	; 0
   160ea:	0e 94 6e b1 	call	0x162dc	; 0x162dc <isspace>
   160ee:	89 2b       	or	r24, r25
   160f0:	a9 f7       	brne	.-22     	; 0x160dc <strtoul+0x4a>
   160f2:	1d 32       	cpi	r17, 0x2D	; 45
   160f4:	09 f0       	breq	.+2      	; 0x160f8 <strtoul+0x66>
   160f6:	5c c0       	rjmp	.+184    	; 0x161b0 <strtoul+0x11e>
   160f8:	21 96       	adiw	r28, 0x01	; 1
   160fa:	f5 01       	movw	r30, r10
   160fc:	11 81       	ldd	r17, Z+1	; 0x01
   160fe:	01 e0       	ldi	r16, 0x01	; 1
   16100:	e1 14       	cp	r14, r1
   16102:	f1 04       	cpc	r15, r1
   16104:	09 f4       	brne	.+2      	; 0x16108 <strtoul+0x76>
   16106:	bb c0       	rjmp	.+374    	; 0x1627e <strtoul+0x1ec>
   16108:	f0 e1       	ldi	r31, 0x10	; 16
   1610a:	ef 16       	cp	r14, r31
   1610c:	f1 04       	cpc	r15, r1
   1610e:	09 f0       	breq	.+2      	; 0x16112 <strtoul+0x80>
   16110:	9b c0       	rjmp	.+310    	; 0x16248 <strtoul+0x1b6>
   16112:	10 33       	cpi	r17, 0x30	; 48
   16114:	41 f4       	brne	.+16     	; 0x16126 <strtoul+0x94>
   16116:	88 81       	ld	r24, Y
   16118:	8f 7d       	andi	r24, 0xDF	; 223
   1611a:	88 35       	cpi	r24, 0x58	; 88
   1611c:	09 f0       	breq	.+2      	; 0x16120 <strtoul+0x8e>
   1611e:	8f c0       	rjmp	.+286    	; 0x1623e <strtoul+0x1ac>
   16120:	19 81       	ldd	r17, Y+1	; 0x01
   16122:	22 96       	adiw	r28, 0x02	; 2
   16124:	02 60       	ori	r16, 0x02	; 2
   16126:	e0 e1       	ldi	r30, 0x10	; 16
   16128:	ee 2e       	mov	r14, r30
   1612a:	f1 2c       	mov	r15, r1
   1612c:	88 24       	eor	r8, r8
   1612e:	8a 94       	dec	r8
   16130:	98 2c       	mov	r9, r8
   16132:	a8 2c       	mov	r10, r8
   16134:	ff e0       	ldi	r31, 0x0F	; 15
   16136:	bf 2e       	mov	r11, r31
   16138:	20 e0       	ldi	r18, 0x00	; 0
   1613a:	60 e0       	ldi	r22, 0x00	; 0
   1613c:	70 e0       	ldi	r23, 0x00	; 0
   1613e:	cb 01       	movw	r24, r22
   16140:	27 01       	movw	r4, r14
   16142:	0f 2c       	mov	r0, r15
   16144:	00 0c       	add	r0, r0
   16146:	66 08       	sbc	r6, r6
   16148:	77 08       	sbc	r7, r7
   1614a:	fe 01       	movw	r30, r28
   1614c:	50 ed       	ldi	r21, 0xD0	; 208
   1614e:	35 2e       	mov	r3, r21
   16150:	31 0e       	add	r3, r17
   16152:	39 e0       	ldi	r19, 0x09	; 9
   16154:	33 15       	cp	r19, r3
   16156:	68 f4       	brcc	.+26     	; 0x16172 <strtoul+0xe0>
   16158:	3f eb       	ldi	r19, 0xBF	; 191
   1615a:	31 0f       	add	r19, r17
   1615c:	49 ec       	ldi	r20, 0xC9	; 201
   1615e:	34 2e       	mov	r3, r20
   16160:	3a 31       	cpi	r19, 0x1A	; 26
   16162:	30 f0       	brcs	.+12     	; 0x16170 <strtoul+0xde>
   16164:	3f e9       	ldi	r19, 0x9F	; 159
   16166:	31 0f       	add	r19, r17
   16168:	3a 31       	cpi	r19, 0x1A	; 26
   1616a:	b0 f5       	brcc	.+108    	; 0x161d8 <strtoul+0x146>
   1616c:	39 ea       	ldi	r19, 0xA9	; 169
   1616e:	33 2e       	mov	r3, r19
   16170:	31 0e       	add	r3, r17
   16172:	3e 14       	cp	r3, r14
   16174:	1f 04       	cpc	r1, r15
   16176:	84 f5       	brge	.+96     	; 0x161d8 <strtoul+0x146>
   16178:	2f 3f       	cpi	r18, 0xFF	; 255
   1617a:	b9 f0       	breq	.+46     	; 0x161aa <strtoul+0x118>
   1617c:	86 16       	cp	r8, r22
   1617e:	97 06       	cpc	r9, r23
   16180:	a8 06       	cpc	r10, r24
   16182:	b9 06       	cpc	r11, r25
   16184:	38 f1       	brcs	.+78     	; 0x161d4 <strtoul+0x142>
   16186:	a3 01       	movw	r20, r6
   16188:	92 01       	movw	r18, r4
   1618a:	0e 94 39 bb 	call	0x17672	; 0x17672 <__mulsi3>
   1618e:	23 2d       	mov	r18, r3
   16190:	30 e0       	ldi	r19, 0x00	; 0
   16192:	50 e0       	ldi	r21, 0x00	; 0
   16194:	40 e0       	ldi	r20, 0x00	; 0
   16196:	62 0f       	add	r22, r18
   16198:	73 1f       	adc	r23, r19
   1619a:	84 1f       	adc	r24, r20
   1619c:	95 1f       	adc	r25, r21
   1619e:	62 17       	cp	r22, r18
   161a0:	73 07       	cpc	r23, r19
   161a2:	84 07       	cpc	r24, r20
   161a4:	95 07       	cpc	r25, r21
   161a6:	b0 f0       	brcs	.+44     	; 0x161d4 <strtoul+0x142>
   161a8:	21 e0       	ldi	r18, 0x01	; 1
   161aa:	21 96       	adiw	r28, 0x01	; 1
   161ac:	10 81       	ld	r17, Z
   161ae:	cd cf       	rjmp	.-102    	; 0x1614a <strtoul+0xb8>
   161b0:	1b 32       	cpi	r17, 0x2B	; 43
   161b2:	21 f4       	brne	.+8      	; 0x161bc <strtoul+0x12a>
   161b4:	e5 01       	movw	r28, r10
   161b6:	22 96       	adiw	r28, 0x02	; 2
   161b8:	f5 01       	movw	r30, r10
   161ba:	11 81       	ldd	r17, Z+1	; 0x01
   161bc:	00 e0       	ldi	r16, 0x00	; 0
   161be:	a0 cf       	rjmp	.-192    	; 0x16100 <strtoul+0x6e>
   161c0:	78 e0       	ldi	r23, 0x08	; 8
   161c2:	e7 2e       	mov	r14, r23
   161c4:	f1 2c       	mov	r15, r1
   161c6:	88 24       	eor	r8, r8
   161c8:	8a 94       	dec	r8
   161ca:	98 2c       	mov	r9, r8
   161cc:	a8 2c       	mov	r10, r8
   161ce:	6f e1       	ldi	r22, 0x1F	; 31
   161d0:	b6 2e       	mov	r11, r22
   161d2:	b2 cf       	rjmp	.-156    	; 0x16138 <strtoul+0xa6>
   161d4:	2f ef       	ldi	r18, 0xFF	; 255
   161d6:	e9 cf       	rjmp	.-46     	; 0x161aa <strtoul+0x118>
   161d8:	c1 14       	cp	r12, r1
   161da:	d1 04       	cpc	r13, r1
   161dc:	31 f0       	breq	.+12     	; 0x161ea <strtoul+0x158>
   161de:	22 23       	and	r18, r18
   161e0:	51 f1       	breq	.+84     	; 0x16236 <strtoul+0x1a4>
   161e2:	21 97       	sbiw	r28, 0x01	; 1
   161e4:	f6 01       	movw	r30, r12
   161e6:	d1 83       	std	Z+1, r29	; 0x01
   161e8:	c0 83       	st	Z, r28
   161ea:	00 ff       	sbrs	r16, 0
   161ec:	07 c0       	rjmp	.+14     	; 0x161fc <strtoul+0x16a>
   161ee:	90 95       	com	r25
   161f0:	80 95       	com	r24
   161f2:	70 95       	com	r23
   161f4:	61 95       	neg	r22
   161f6:	7f 4f       	sbci	r23, 0xFF	; 255
   161f8:	8f 4f       	sbci	r24, 0xFF	; 255
   161fa:	9f 4f       	sbci	r25, 0xFF	; 255
   161fc:	2f 3f       	cpi	r18, 0xFF	; 255
   161fe:	49 f4       	brne	.+18     	; 0x16212 <strtoul+0x180>
   16200:	82 e2       	ldi	r24, 0x22	; 34
   16202:	90 e0       	ldi	r25, 0x00	; 0
   16204:	90 93 97 13 	sts	0x1397, r25	; 0x801397 <errno+0x1>
   16208:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <errno>
   1620c:	6f ef       	ldi	r22, 0xFF	; 255
   1620e:	7f ef       	ldi	r23, 0xFF	; 255
   16210:	cb 01       	movw	r24, r22
   16212:	df 91       	pop	r29
   16214:	cf 91       	pop	r28
   16216:	1f 91       	pop	r17
   16218:	0f 91       	pop	r16
   1621a:	ff 90       	pop	r15
   1621c:	ef 90       	pop	r14
   1621e:	df 90       	pop	r13
   16220:	cf 90       	pop	r12
   16222:	bf 90       	pop	r11
   16224:	af 90       	pop	r10
   16226:	9f 90       	pop	r9
   16228:	8f 90       	pop	r8
   1622a:	7f 90       	pop	r7
   1622c:	6f 90       	pop	r6
   1622e:	5f 90       	pop	r5
   16230:	4f 90       	pop	r4
   16232:	3f 90       	pop	r3
   16234:	08 95       	ret
   16236:	01 ff       	sbrs	r16, 1
   16238:	d8 cf       	rjmp	.-80     	; 0x161ea <strtoul+0x158>
   1623a:	22 97       	sbiw	r28, 0x02	; 2
   1623c:	d3 cf       	rjmp	.-90     	; 0x161e4 <strtoul+0x152>
   1623e:	10 e3       	ldi	r17, 0x30	; 48
   16240:	e1 14       	cp	r14, r1
   16242:	f1 04       	cpc	r15, r1
   16244:	09 f4       	brne	.+2      	; 0x16248 <strtoul+0x1b6>
   16246:	bc cf       	rjmp	.-136    	; 0x161c0 <strtoul+0x12e>
   16248:	3a e0       	ldi	r19, 0x0A	; 10
   1624a:	e3 16       	cp	r14, r19
   1624c:	f1 04       	cpc	r15, r1
   1624e:	e9 f0       	breq	.+58     	; 0x1628a <strtoul+0x1f8>
   16250:	80 e1       	ldi	r24, 0x10	; 16
   16252:	e8 16       	cp	r14, r24
   16254:	f1 04       	cpc	r15, r1
   16256:	09 f4       	brne	.+2      	; 0x1625a <strtoul+0x1c8>
   16258:	66 cf       	rjmp	.-308    	; 0x16126 <strtoul+0x94>
   1625a:	e8 e0       	ldi	r30, 0x08	; 8
   1625c:	ee 16       	cp	r14, r30
   1625e:	f1 04       	cpc	r15, r1
   16260:	09 f4       	brne	.+2      	; 0x16264 <strtoul+0x1d2>
   16262:	b1 cf       	rjmp	.-158    	; 0x161c6 <strtoul+0x134>
   16264:	6f ef       	ldi	r22, 0xFF	; 255
   16266:	7f ef       	ldi	r23, 0xFF	; 255
   16268:	cb 01       	movw	r24, r22
   1626a:	97 01       	movw	r18, r14
   1626c:	0f 2c       	mov	r0, r15
   1626e:	00 0c       	add	r0, r0
   16270:	44 0b       	sbc	r20, r20
   16272:	55 0b       	sbc	r21, r21
   16274:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
   16278:	49 01       	movw	r8, r18
   1627a:	5a 01       	movw	r10, r20
   1627c:	5d cf       	rjmp	.-326    	; 0x16138 <strtoul+0xa6>
   1627e:	10 33       	cpi	r17, 0x30	; 48
   16280:	09 f4       	brne	.+2      	; 0x16284 <strtoul+0x1f2>
   16282:	49 cf       	rjmp	.-366    	; 0x16116 <strtoul+0x84>
   16284:	9a e0       	ldi	r25, 0x0A	; 10
   16286:	e9 2e       	mov	r14, r25
   16288:	f1 2c       	mov	r15, r1
   1628a:	89 e9       	ldi	r24, 0x99	; 153
   1628c:	88 2e       	mov	r8, r24
   1628e:	98 2c       	mov	r9, r8
   16290:	a8 2c       	mov	r10, r8
   16292:	89 e1       	ldi	r24, 0x19	; 25
   16294:	b8 2e       	mov	r11, r24
   16296:	50 cf       	rjmp	.-352    	; 0x16138 <strtoul+0xa6>

00016298 <atof>:
atof():
   16298:	66 27       	eor	r22, r22
   1629a:	77 27       	eor	r23, r23
   1629c:	0c 94 f3 b6 	jmp	0x16de6	; 0x16de6 <strtod>

000162a0 <atoi>:
atoi():
   162a0:	fc 01       	movw	r30, r24
   162a2:	88 27       	eor	r24, r24
   162a4:	99 27       	eor	r25, r25
   162a6:	e8 94       	clt
   162a8:	21 91       	ld	r18, Z+
   162aa:	20 32       	cpi	r18, 0x20	; 32
   162ac:	e9 f3       	breq	.-6      	; 0x162a8 <atoi+0x8>
   162ae:	29 30       	cpi	r18, 0x09	; 9
   162b0:	10 f0       	brcs	.+4      	; 0x162b6 <atoi+0x16>
   162b2:	2e 30       	cpi	r18, 0x0E	; 14
   162b4:	c8 f3       	brcs	.-14     	; 0x162a8 <atoi+0x8>
   162b6:	2b 32       	cpi	r18, 0x2B	; 43
   162b8:	41 f0       	breq	.+16     	; 0x162ca <atoi+0x2a>
   162ba:	2d 32       	cpi	r18, 0x2D	; 45
   162bc:	39 f4       	brne	.+14     	; 0x162cc <atoi+0x2c>
   162be:	68 94       	set
   162c0:	04 c0       	rjmp	.+8      	; 0x162ca <atoi+0x2a>
   162c2:	0e 94 ca b1 	call	0x16394	; 0x16394 <__mulhi_const_10>
   162c6:	82 0f       	add	r24, r18
   162c8:	91 1d       	adc	r25, r1
   162ca:	21 91       	ld	r18, Z+
   162cc:	20 53       	subi	r18, 0x30	; 48
   162ce:	2a 30       	cpi	r18, 0x0A	; 10
   162d0:	c0 f3       	brcs	.-16     	; 0x162c2 <atoi+0x22>
   162d2:	1e f4       	brtc	.+6      	; 0x162da <atoi+0x3a>
   162d4:	90 95       	com	r25
   162d6:	81 95       	neg	r24
   162d8:	9f 4f       	sbci	r25, 0xFF	; 255
   162da:	08 95       	ret

000162dc <isspace>:
isspace():
   162dc:	91 11       	cpse	r25, r1
   162de:	0c 94 29 b9 	jmp	0x17252	; 0x17252 <__ctype_isfalse>
   162e2:	80 32       	cpi	r24, 0x20	; 32
   162e4:	19 f0       	breq	.+6      	; 0x162ec <isspace+0x10>
   162e6:	89 50       	subi	r24, 0x09	; 9
   162e8:	85 50       	subi	r24, 0x05	; 5
   162ea:	c8 f7       	brcc	.-14     	; 0x162de <isspace+0x2>
   162ec:	08 95       	ret

000162ee <strcat_P>:
strcat_P():
   162ee:	fb 01       	movw	r30, r22
   162f0:	dc 01       	movw	r26, r24
   162f2:	0d 90       	ld	r0, X+
   162f4:	00 20       	and	r0, r0
   162f6:	e9 f7       	brne	.-6      	; 0x162f2 <strcat_P+0x4>
   162f8:	11 97       	sbiw	r26, 0x01	; 1
   162fa:	05 90       	lpm	r0, Z+
   162fc:	0d 92       	st	X+, r0
   162fe:	00 20       	and	r0, r0
   16300:	e1 f7       	brne	.-8      	; 0x162fa <strcat_P+0xc>
   16302:	08 95       	ret

00016304 <strcpy_P>:
strcpy_P():
   16304:	fb 01       	movw	r30, r22
   16306:	dc 01       	movw	r26, r24
   16308:	05 90       	lpm	r0, Z+
   1630a:	0d 92       	st	X+, r0
   1630c:	00 20       	and	r0, r0
   1630e:	e1 f7       	brne	.-8      	; 0x16308 <strcpy_P+0x4>
   16310:	08 95       	ret

00016312 <strtok>:
strtok():
   16312:	4e e7       	ldi	r20, 0x7E	; 126
   16314:	53 e1       	ldi	r21, 0x13	; 19
   16316:	0c 94 8d b1 	jmp	0x1631a	; 0x1631a <strtok_r>

0001631a <strtok_r>:
strtok_r():
   1631a:	fa 01       	movw	r30, r20
   1631c:	a1 91       	ld	r26, Z+
   1631e:	b0 81       	ld	r27, Z
   16320:	00 97       	sbiw	r24, 0x00	; 0
   16322:	19 f4       	brne	.+6      	; 0x1632a <strtok_r+0x10>
   16324:	10 97       	sbiw	r26, 0x00	; 0
   16326:	e1 f0       	breq	.+56     	; 0x16360 <strtok_r+0x46>
   16328:	cd 01       	movw	r24, r26
   1632a:	dc 01       	movw	r26, r24
   1632c:	cd 01       	movw	r24, r26
   1632e:	0d 90       	ld	r0, X+
   16330:	00 20       	and	r0, r0
   16332:	11 f4       	brne	.+4      	; 0x16338 <strtok_r+0x1e>
   16334:	c0 01       	movw	r24, r0
   16336:	13 c0       	rjmp	.+38     	; 0x1635e <strtok_r+0x44>
   16338:	fb 01       	movw	r30, r22
   1633a:	21 91       	ld	r18, Z+
   1633c:	22 23       	and	r18, r18
   1633e:	19 f0       	breq	.+6      	; 0x16346 <strtok_r+0x2c>
   16340:	20 15       	cp	r18, r0
   16342:	d9 f7       	brne	.-10     	; 0x1633a <strtok_r+0x20>
   16344:	f3 cf       	rjmp	.-26     	; 0x1632c <strtok_r+0x12>
   16346:	fb 01       	movw	r30, r22
   16348:	21 91       	ld	r18, Z+
   1634a:	20 15       	cp	r18, r0
   1634c:	19 f4       	brne	.+6      	; 0x16354 <strtok_r+0x3a>
   1634e:	1e 92       	st	-X, r1
   16350:	11 96       	adiw	r26, 0x01	; 1
   16352:	06 c0       	rjmp	.+12     	; 0x16360 <strtok_r+0x46>
   16354:	22 23       	and	r18, r18
   16356:	c1 f7       	brne	.-16     	; 0x16348 <strtok_r+0x2e>
   16358:	0d 90       	ld	r0, X+
   1635a:	00 20       	and	r0, r0
   1635c:	a1 f7       	brne	.-24     	; 0x16346 <strtok_r+0x2c>
   1635e:	d0 01       	movw	r26, r0
   16360:	fa 01       	movw	r30, r20
   16362:	a1 93       	st	Z+, r26
   16364:	b0 83       	st	Z, r27
   16366:	08 95       	ret

00016368 <itoa>:
itoa():
   16368:	45 32       	cpi	r20, 0x25	; 37
   1636a:	51 05       	cpc	r21, r1
   1636c:	20 f4       	brcc	.+8      	; 0x16376 <itoa+0xe>
   1636e:	42 30       	cpi	r20, 0x02	; 2
   16370:	10 f0       	brcs	.+4      	; 0x16376 <itoa+0xe>
   16372:	0c 94 bf b1 	jmp	0x1637e	; 0x1637e <__itoa_ncheck>
   16376:	fb 01       	movw	r30, r22
   16378:	10 82       	st	Z, r1
   1637a:	cb 01       	movw	r24, r22
   1637c:	08 95       	ret

0001637e <__itoa_ncheck>:
__itoa_ncheck():
   1637e:	bb 27       	eor	r27, r27
   16380:	4a 30       	cpi	r20, 0x0A	; 10
   16382:	31 f4       	brne	.+12     	; 0x16390 <__itoa_ncheck+0x12>
   16384:	99 23       	and	r25, r25
   16386:	22 f4       	brpl	.+8      	; 0x16390 <__itoa_ncheck+0x12>
   16388:	bd e2       	ldi	r27, 0x2D	; 45
   1638a:	90 95       	com	r25
   1638c:	81 95       	neg	r24
   1638e:	9f 4f       	sbci	r25, 0xFF	; 255
   16390:	0c 94 d3 b1 	jmp	0x163a6	; 0x163a6 <__utoa_common>

00016394 <__mulhi_const_10>:
__mulhi_const_10():
   16394:	7a e0       	ldi	r23, 0x0A	; 10
   16396:	97 9f       	mul	r25, r23
   16398:	90 2d       	mov	r25, r0
   1639a:	87 9f       	mul	r24, r23
   1639c:	80 2d       	mov	r24, r0
   1639e:	91 0d       	add	r25, r1
   163a0:	11 24       	eor	r1, r1
   163a2:	08 95       	ret

000163a4 <__utoa_ncheck>:
__utoa_ncheck():
   163a4:	bb 27       	eor	r27, r27

000163a6 <__utoa_common>:
   163a6:	fb 01       	movw	r30, r22
   163a8:	55 27       	eor	r21, r21
   163aa:	aa 27       	eor	r26, r26
   163ac:	88 0f       	add	r24, r24
   163ae:	99 1f       	adc	r25, r25
   163b0:	aa 1f       	adc	r26, r26
   163b2:	a4 17       	cp	r26, r20
   163b4:	10 f0       	brcs	.+4      	; 0x163ba <__utoa_common+0x14>
   163b6:	a4 1b       	sub	r26, r20
   163b8:	83 95       	inc	r24
   163ba:	50 51       	subi	r21, 0x10	; 16
   163bc:	b9 f7       	brne	.-18     	; 0x163ac <__utoa_common+0x6>
   163be:	a0 5d       	subi	r26, 0xD0	; 208
   163c0:	aa 33       	cpi	r26, 0x3A	; 58
   163c2:	08 f0       	brcs	.+2      	; 0x163c6 <__utoa_common+0x20>
   163c4:	a9 5d       	subi	r26, 0xD9	; 217
   163c6:	a1 93       	st	Z+, r26
   163c8:	00 97       	sbiw	r24, 0x00	; 0
   163ca:	79 f7       	brne	.-34     	; 0x163aa <__utoa_common+0x4>
   163cc:	b1 11       	cpse	r27, r1
   163ce:	b1 93       	st	Z+, r27
   163d0:	11 92       	st	Z+, r1
   163d2:	cb 01       	movw	r24, r22
   163d4:	0c 94 61 b9 	jmp	0x172c2	; 0x172c2 <strrev>

000163d8 <fdevopen>:
fdevopen():
   163d8:	0f 93       	push	r16
   163da:	1f 93       	push	r17
   163dc:	cf 93       	push	r28
   163de:	df 93       	push	r29
   163e0:	00 97       	sbiw	r24, 0x00	; 0
   163e2:	59 f4       	brne	.+22     	; 0x163fa <fdevopen+0x22>
   163e4:	61 15       	cp	r22, r1
   163e6:	71 05       	cpc	r23, r1
   163e8:	41 f4       	brne	.+16     	; 0x163fa <fdevopen+0x22>
   163ea:	f0 e0       	ldi	r31, 0x00	; 0
   163ec:	e0 e0       	ldi	r30, 0x00	; 0
   163ee:	cf 01       	movw	r24, r30
   163f0:	df 91       	pop	r29
   163f2:	cf 91       	pop	r28
   163f4:	1f 91       	pop	r17
   163f6:	0f 91       	pop	r16
   163f8:	08 95       	ret
   163fa:	8b 01       	movw	r16, r22
   163fc:	ec 01       	movw	r28, r24
   163fe:	6e e0       	ldi	r22, 0x0E	; 14
   16400:	70 e0       	ldi	r23, 0x00	; 0
   16402:	81 e0       	ldi	r24, 0x01	; 1
   16404:	90 e0       	ldi	r25, 0x00	; 0
   16406:	0e 94 39 b4 	call	0x16872	; 0x16872 <calloc>
   1640a:	fc 01       	movw	r30, r24
   1640c:	89 2b       	or	r24, r25
   1640e:	69 f3       	breq	.-38     	; 0x163ea <fdevopen+0x12>
   16410:	80 e8       	ldi	r24, 0x80	; 128
   16412:	83 83       	std	Z+3, r24	; 0x03
   16414:	01 15       	cp	r16, r1
   16416:	11 05       	cpc	r17, r1
   16418:	71 f0       	breq	.+28     	; 0x16436 <fdevopen+0x5e>
   1641a:	13 87       	std	Z+11, r17	; 0x0b
   1641c:	02 87       	std	Z+10, r16	; 0x0a
   1641e:	81 e8       	ldi	r24, 0x81	; 129
   16420:	83 83       	std	Z+3, r24	; 0x03
   16422:	80 91 80 13 	lds	r24, 0x1380	; 0x801380 <__iob>
   16426:	90 91 81 13 	lds	r25, 0x1381	; 0x801381 <__iob+0x1>
   1642a:	89 2b       	or	r24, r25
   1642c:	21 f4       	brne	.+8      	; 0x16436 <fdevopen+0x5e>
   1642e:	f0 93 81 13 	sts	0x1381, r31	; 0x801381 <__iob+0x1>
   16432:	e0 93 80 13 	sts	0x1380, r30	; 0x801380 <__iob>
   16436:	20 97       	sbiw	r28, 0x00	; 0
   16438:	d1 f2       	breq	.-76     	; 0x163ee <fdevopen+0x16>
   1643a:	d1 87       	std	Z+9, r29	; 0x09
   1643c:	c0 87       	std	Z+8, r28	; 0x08
   1643e:	83 81       	ldd	r24, Z+3	; 0x03
   16440:	82 60       	ori	r24, 0x02	; 2
   16442:	83 83       	std	Z+3, r24	; 0x03
   16444:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <__iob+0x2>
   16448:	90 91 83 13 	lds	r25, 0x1383	; 0x801383 <__iob+0x3>
   1644c:	89 2b       	or	r24, r25
   1644e:	79 f6       	brne	.-98     	; 0x163ee <fdevopen+0x16>
   16450:	f0 93 83 13 	sts	0x1383, r31	; 0x801383 <__iob+0x3>
   16454:	e0 93 82 13 	sts	0x1382, r30	; 0x801382 <__iob+0x2>
   16458:	80 91 84 13 	lds	r24, 0x1384	; 0x801384 <__iob+0x4>
   1645c:	90 91 85 13 	lds	r25, 0x1385	; 0x801385 <__iob+0x5>
   16460:	89 2b       	or	r24, r25
   16462:	29 f6       	brne	.-118    	; 0x163ee <fdevopen+0x16>
   16464:	f0 93 85 13 	sts	0x1385, r31	; 0x801385 <__iob+0x5>
   16468:	e0 93 84 13 	sts	0x1384, r30	; 0x801384 <__iob+0x4>
   1646c:	c0 cf       	rjmp	.-128    	; 0x163ee <fdevopen+0x16>

0001646e <vfprintf>:
vfprintf():
   1646e:	2f 92       	push	r2
   16470:	3f 92       	push	r3
   16472:	4f 92       	push	r4
   16474:	5f 92       	push	r5
   16476:	6f 92       	push	r6
   16478:	7f 92       	push	r7
   1647a:	8f 92       	push	r8
   1647c:	9f 92       	push	r9
   1647e:	af 92       	push	r10
   16480:	bf 92       	push	r11
   16482:	cf 92       	push	r12
   16484:	df 92       	push	r13
   16486:	ef 92       	push	r14
   16488:	ff 92       	push	r15
   1648a:	0f 93       	push	r16
   1648c:	1f 93       	push	r17
   1648e:	cf 93       	push	r28
   16490:	df 93       	push	r29
   16492:	00 d0       	rcall	.+0      	; 0x16494 <vfprintf+0x26>
   16494:	00 d0       	rcall	.+0      	; 0x16496 <vfprintf+0x28>
   16496:	00 d0       	rcall	.+0      	; 0x16498 <vfprintf+0x2a>
   16498:	1f 92       	push	r1
   1649a:	1f 92       	push	r1
   1649c:	cd b7       	in	r28, 0x3d	; 61
   1649e:	de b7       	in	r29, 0x3e	; 62
   164a0:	7c 01       	movw	r14, r24
   164a2:	3b 01       	movw	r6, r22
   164a4:	8a 01       	movw	r16, r20
   164a6:	fc 01       	movw	r30, r24
   164a8:	17 82       	std	Z+7, r1	; 0x07
   164aa:	16 82       	std	Z+6, r1	; 0x06
   164ac:	83 81       	ldd	r24, Z+3	; 0x03
   164ae:	81 ff       	sbrs	r24, 1
   164b0:	dd c1       	rjmp	.+954    	; 0x1686c <vfprintf+0x3fe>
   164b2:	ce 01       	movw	r24, r28
   164b4:	01 96       	adiw	r24, 0x01	; 1
   164b6:	5c 01       	movw	r10, r24
   164b8:	f7 01       	movw	r30, r14
   164ba:	93 81       	ldd	r25, Z+3	; 0x03
   164bc:	f3 01       	movw	r30, r6
   164be:	93 fd       	sbrc	r25, 3
   164c0:	85 91       	lpm	r24, Z+
   164c2:	93 ff       	sbrs	r25, 3
   164c4:	81 91       	ld	r24, Z+
   164c6:	3f 01       	movw	r6, r30
   164c8:	88 23       	and	r24, r24
   164ca:	09 f4       	brne	.+2      	; 0x164ce <vfprintf+0x60>
   164cc:	53 c1       	rjmp	.+678    	; 0x16774 <vfprintf+0x306>
   164ce:	85 32       	cpi	r24, 0x25	; 37
   164d0:	39 f4       	brne	.+14     	; 0x164e0 <vfprintf+0x72>
   164d2:	93 fd       	sbrc	r25, 3
   164d4:	85 91       	lpm	r24, Z+
   164d6:	93 ff       	sbrs	r25, 3
   164d8:	81 91       	ld	r24, Z+
   164da:	3f 01       	movw	r6, r30
   164dc:	85 32       	cpi	r24, 0x25	; 37
   164de:	29 f4       	brne	.+10     	; 0x164ea <vfprintf+0x7c>
   164e0:	b7 01       	movw	r22, r14
   164e2:	90 e0       	ldi	r25, 0x00	; 0
   164e4:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   164e8:	e7 cf       	rjmp	.-50     	; 0x164b8 <vfprintf+0x4a>
   164ea:	91 2c       	mov	r9, r1
   164ec:	21 2c       	mov	r2, r1
   164ee:	31 2c       	mov	r3, r1
   164f0:	ff e1       	ldi	r31, 0x1F	; 31
   164f2:	f3 15       	cp	r31, r3
   164f4:	38 f0       	brcs	.+14     	; 0x16504 <vfprintf+0x96>
   164f6:	8b 32       	cpi	r24, 0x2B	; 43
   164f8:	11 f1       	breq	.+68     	; 0x1653e <vfprintf+0xd0>
   164fa:	90 f4       	brcc	.+36     	; 0x16520 <vfprintf+0xb2>
   164fc:	80 32       	cpi	r24, 0x20	; 32
   164fe:	09 f1       	breq	.+66     	; 0x16542 <vfprintf+0xd4>
   16500:	83 32       	cpi	r24, 0x23	; 35
   16502:	29 f1       	breq	.+74     	; 0x1654e <vfprintf+0xe0>
   16504:	37 fc       	sbrc	r3, 7
   16506:	3c c0       	rjmp	.+120    	; 0x16580 <vfprintf+0x112>
   16508:	20 ed       	ldi	r18, 0xD0	; 208
   1650a:	28 0f       	add	r18, r24
   1650c:	2a 30       	cpi	r18, 0x0A	; 10
   1650e:	50 f5       	brcc	.+84     	; 0x16564 <vfprintf+0xf6>
   16510:	36 fe       	sbrs	r3, 6
   16512:	20 c0       	rjmp	.+64     	; 0x16554 <vfprintf+0xe6>
   16514:	8a e0       	ldi	r24, 0x0A	; 10
   16516:	98 9e       	mul	r9, r24
   16518:	20 0d       	add	r18, r0
   1651a:	11 24       	eor	r1, r1
   1651c:	92 2e       	mov	r9, r18
   1651e:	06 c0       	rjmp	.+12     	; 0x1652c <vfprintf+0xbe>
   16520:	8d 32       	cpi	r24, 0x2D	; 45
   16522:	91 f0       	breq	.+36     	; 0x16548 <vfprintf+0xda>
   16524:	80 33       	cpi	r24, 0x30	; 48
   16526:	71 f7       	brne	.-36     	; 0x16504 <vfprintf+0x96>
   16528:	68 94       	set
   1652a:	30 f8       	bld	r3, 0
   1652c:	f3 01       	movw	r30, r6
   1652e:	93 fd       	sbrc	r25, 3
   16530:	85 91       	lpm	r24, Z+
   16532:	93 ff       	sbrs	r25, 3
   16534:	81 91       	ld	r24, Z+
   16536:	3f 01       	movw	r6, r30
   16538:	81 11       	cpse	r24, r1
   1653a:	da cf       	rjmp	.-76     	; 0x164f0 <vfprintf+0x82>
   1653c:	21 c0       	rjmp	.+66     	; 0x16580 <vfprintf+0x112>
   1653e:	68 94       	set
   16540:	31 f8       	bld	r3, 1
   16542:	68 94       	set
   16544:	32 f8       	bld	r3, 2
   16546:	f2 cf       	rjmp	.-28     	; 0x1652c <vfprintf+0xbe>
   16548:	68 94       	set
   1654a:	33 f8       	bld	r3, 3
   1654c:	ef cf       	rjmp	.-34     	; 0x1652c <vfprintf+0xbe>
   1654e:	68 94       	set
   16550:	34 f8       	bld	r3, 4
   16552:	ec cf       	rjmp	.-40     	; 0x1652c <vfprintf+0xbe>
   16554:	ea e0       	ldi	r30, 0x0A	; 10
   16556:	2e 9e       	mul	r2, r30
   16558:	20 0d       	add	r18, r0
   1655a:	11 24       	eor	r1, r1
   1655c:	22 2e       	mov	r2, r18
   1655e:	68 94       	set
   16560:	35 f8       	bld	r3, 5
   16562:	e4 cf       	rjmp	.-56     	; 0x1652c <vfprintf+0xbe>
   16564:	8e 32       	cpi	r24, 0x2E	; 46
   16566:	29 f4       	brne	.+10     	; 0x16572 <vfprintf+0x104>
   16568:	36 fc       	sbrc	r3, 6
   1656a:	04 c1       	rjmp	.+520    	; 0x16774 <vfprintf+0x306>
   1656c:	68 94       	set
   1656e:	36 f8       	bld	r3, 6
   16570:	dd cf       	rjmp	.-70     	; 0x1652c <vfprintf+0xbe>
   16572:	8c 36       	cpi	r24, 0x6C	; 108
   16574:	19 f4       	brne	.+6      	; 0x1657c <vfprintf+0x10e>
   16576:	68 94       	set
   16578:	37 f8       	bld	r3, 7
   1657a:	d8 cf       	rjmp	.-80     	; 0x1652c <vfprintf+0xbe>
   1657c:	88 36       	cpi	r24, 0x68	; 104
   1657e:	b1 f2       	breq	.-84     	; 0x1652c <vfprintf+0xbe>
   16580:	98 2f       	mov	r25, r24
   16582:	9f 7d       	andi	r25, 0xDF	; 223
   16584:	95 54       	subi	r25, 0x45	; 69
   16586:	93 30       	cpi	r25, 0x03	; 3
   16588:	e0 f0       	brcs	.+56     	; 0x165c2 <vfprintf+0x154>
   1658a:	83 36       	cpi	r24, 0x63	; 99
   1658c:	a1 f1       	breq	.+104    	; 0x165f6 <vfprintf+0x188>
   1658e:	83 37       	cpi	r24, 0x73	; 115
   16590:	c1 f1       	breq	.+112    	; 0x16602 <vfprintf+0x194>
   16592:	83 35       	cpi	r24, 0x53	; 83
   16594:	09 f0       	breq	.+2      	; 0x16598 <vfprintf+0x12a>
   16596:	63 c0       	rjmp	.+198    	; 0x1665e <vfprintf+0x1f0>
   16598:	28 01       	movw	r4, r16
   1659a:	f2 e0       	ldi	r31, 0x02	; 2
   1659c:	4f 0e       	add	r4, r31
   1659e:	51 1c       	adc	r5, r1
   165a0:	f8 01       	movw	r30, r16
   165a2:	c0 80       	ld	r12, Z
   165a4:	d1 80       	ldd	r13, Z+1	; 0x01
   165a6:	69 2d       	mov	r22, r9
   165a8:	70 e0       	ldi	r23, 0x00	; 0
   165aa:	36 fc       	sbrc	r3, 6
   165ac:	02 c0       	rjmp	.+4      	; 0x165b2 <vfprintf+0x144>
   165ae:	6f ef       	ldi	r22, 0xFF	; 255
   165b0:	7f ef       	ldi	r23, 0xFF	; 255
   165b2:	c6 01       	movw	r24, r12
   165b4:	0e 94 44 b9 	call	0x17288	; 0x17288 <strnlen_P>
   165b8:	4c 01       	movw	r8, r24
   165ba:	68 94       	set
   165bc:	37 f8       	bld	r3, 7
   165be:	82 01       	movw	r16, r4
   165c0:	0a c0       	rjmp	.+20     	; 0x165d6 <vfprintf+0x168>
   165c2:	0c 5f       	subi	r16, 0xFC	; 252
   165c4:	1f 4f       	sbci	r17, 0xFF	; 255
   165c6:	ff e3       	ldi	r31, 0x3F	; 63
   165c8:	f9 83       	std	Y+1, r31	; 0x01
   165ca:	88 24       	eor	r8, r8
   165cc:	83 94       	inc	r8
   165ce:	91 2c       	mov	r9, r1
   165d0:	65 01       	movw	r12, r10
   165d2:	e8 94       	clt
   165d4:	37 f8       	bld	r3, 7
   165d6:	33 fe       	sbrs	r3, 3
   165d8:	2d c0       	rjmp	.+90     	; 0x16634 <vfprintf+0x1c6>
   165da:	52 2c       	mov	r5, r2
   165dc:	81 14       	cp	r8, r1
   165de:	91 04       	cpc	r9, r1
   165e0:	71 f5       	brne	.+92     	; 0x1663e <vfprintf+0x1d0>
   165e2:	55 20       	and	r5, r5
   165e4:	09 f4       	brne	.+2      	; 0x165e8 <vfprintf+0x17a>
   165e6:	68 cf       	rjmp	.-304    	; 0x164b8 <vfprintf+0x4a>
   165e8:	b7 01       	movw	r22, r14
   165ea:	80 e2       	ldi	r24, 0x20	; 32
   165ec:	90 e0       	ldi	r25, 0x00	; 0
   165ee:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   165f2:	5a 94       	dec	r5
   165f4:	f6 cf       	rjmp	.-20     	; 0x165e2 <vfprintf+0x174>
   165f6:	f8 01       	movw	r30, r16
   165f8:	80 81       	ld	r24, Z
   165fa:	89 83       	std	Y+1, r24	; 0x01
   165fc:	0e 5f       	subi	r16, 0xFE	; 254
   165fe:	1f 4f       	sbci	r17, 0xFF	; 255
   16600:	e4 cf       	rjmp	.-56     	; 0x165ca <vfprintf+0x15c>
   16602:	28 01       	movw	r4, r16
   16604:	f2 e0       	ldi	r31, 0x02	; 2
   16606:	4f 0e       	add	r4, r31
   16608:	51 1c       	adc	r5, r1
   1660a:	f8 01       	movw	r30, r16
   1660c:	c0 80       	ld	r12, Z
   1660e:	d1 80       	ldd	r13, Z+1	; 0x01
   16610:	69 2d       	mov	r22, r9
   16612:	70 e0       	ldi	r23, 0x00	; 0
   16614:	36 fc       	sbrc	r3, 6
   16616:	02 c0       	rjmp	.+4      	; 0x1661c <vfprintf+0x1ae>
   16618:	6f ef       	ldi	r22, 0xFF	; 255
   1661a:	7f ef       	ldi	r23, 0xFF	; 255
   1661c:	c6 01       	movw	r24, r12
   1661e:	0e 94 56 b9 	call	0x172ac	; 0x172ac <strnlen>
   16622:	4c 01       	movw	r8, r24
   16624:	82 01       	movw	r16, r4
   16626:	d5 cf       	rjmp	.-86     	; 0x165d2 <vfprintf+0x164>
   16628:	b7 01       	movw	r22, r14
   1662a:	80 e2       	ldi	r24, 0x20	; 32
   1662c:	90 e0       	ldi	r25, 0x00	; 0
   1662e:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   16632:	2a 94       	dec	r2
   16634:	28 14       	cp	r2, r8
   16636:	19 04       	cpc	r1, r9
   16638:	09 f0       	breq	.+2      	; 0x1663c <vfprintf+0x1ce>
   1663a:	b0 f7       	brcc	.-20     	; 0x16628 <vfprintf+0x1ba>
   1663c:	ce cf       	rjmp	.-100    	; 0x165da <vfprintf+0x16c>
   1663e:	f6 01       	movw	r30, r12
   16640:	37 fc       	sbrc	r3, 7
   16642:	85 91       	lpm	r24, Z+
   16644:	37 fe       	sbrs	r3, 7
   16646:	81 91       	ld	r24, Z+
   16648:	6f 01       	movw	r12, r30
   1664a:	b7 01       	movw	r22, r14
   1664c:	90 e0       	ldi	r25, 0x00	; 0
   1664e:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   16652:	51 10       	cpse	r5, r1
   16654:	5a 94       	dec	r5
   16656:	f1 e0       	ldi	r31, 0x01	; 1
   16658:	8f 1a       	sub	r8, r31
   1665a:	91 08       	sbc	r9, r1
   1665c:	bf cf       	rjmp	.-130    	; 0x165dc <vfprintf+0x16e>
   1665e:	84 36       	cpi	r24, 0x64	; 100
   16660:	19 f0       	breq	.+6      	; 0x16668 <vfprintf+0x1fa>
   16662:	89 36       	cpi	r24, 0x69	; 105
   16664:	09 f0       	breq	.+2      	; 0x16668 <vfprintf+0x1fa>
   16666:	77 c0       	rjmp	.+238    	; 0x16756 <vfprintf+0x2e8>
   16668:	f8 01       	movw	r30, r16
   1666a:	37 fe       	sbrs	r3, 7
   1666c:	6b c0       	rjmp	.+214    	; 0x16744 <vfprintf+0x2d6>
   1666e:	60 81       	ld	r22, Z
   16670:	71 81       	ldd	r23, Z+1	; 0x01
   16672:	82 81       	ldd	r24, Z+2	; 0x02
   16674:	93 81       	ldd	r25, Z+3	; 0x03
   16676:	0c 5f       	subi	r16, 0xFC	; 252
   16678:	1f 4f       	sbci	r17, 0xFF	; 255
   1667a:	f3 2d       	mov	r31, r3
   1667c:	ff 76       	andi	r31, 0x6F	; 111
   1667e:	3f 2e       	mov	r3, r31
   16680:	97 ff       	sbrs	r25, 7
   16682:	09 c0       	rjmp	.+18     	; 0x16696 <vfprintf+0x228>
   16684:	90 95       	com	r25
   16686:	80 95       	com	r24
   16688:	70 95       	com	r23
   1668a:	61 95       	neg	r22
   1668c:	7f 4f       	sbci	r23, 0xFF	; 255
   1668e:	8f 4f       	sbci	r24, 0xFF	; 255
   16690:	9f 4f       	sbci	r25, 0xFF	; 255
   16692:	68 94       	set
   16694:	37 f8       	bld	r3, 7
   16696:	2a e0       	ldi	r18, 0x0A	; 10
   16698:	30 e0       	ldi	r19, 0x00	; 0
   1669a:	a5 01       	movw	r20, r10
   1669c:	0e 94 a1 b9 	call	0x17342	; 0x17342 <__ultoa_invert>
   166a0:	c8 2e       	mov	r12, r24
   166a2:	ca 18       	sub	r12, r10
   166a4:	8c 2c       	mov	r8, r12
   166a6:	43 2c       	mov	r4, r3
   166a8:	36 fe       	sbrs	r3, 6
   166aa:	0c c0       	rjmp	.+24     	; 0x166c4 <vfprintf+0x256>
   166ac:	e8 94       	clt
   166ae:	40 f8       	bld	r4, 0
   166b0:	c9 14       	cp	r12, r9
   166b2:	40 f4       	brcc	.+16     	; 0x166c4 <vfprintf+0x256>
   166b4:	34 fe       	sbrs	r3, 4
   166b6:	05 c0       	rjmp	.+10     	; 0x166c2 <vfprintf+0x254>
   166b8:	32 fc       	sbrc	r3, 2
   166ba:	03 c0       	rjmp	.+6      	; 0x166c2 <vfprintf+0x254>
   166bc:	f3 2d       	mov	r31, r3
   166be:	fe 7e       	andi	r31, 0xEE	; 238
   166c0:	4f 2e       	mov	r4, r31
   166c2:	89 2c       	mov	r8, r9
   166c4:	44 fe       	sbrs	r4, 4
   166c6:	aa c0       	rjmp	.+340    	; 0x1681c <vfprintf+0x3ae>
   166c8:	fe 01       	movw	r30, r28
   166ca:	ec 0d       	add	r30, r12
   166cc:	f1 1d       	adc	r31, r1
   166ce:	80 81       	ld	r24, Z
   166d0:	80 33       	cpi	r24, 0x30	; 48
   166d2:	09 f0       	breq	.+2      	; 0x166d6 <vfprintf+0x268>
   166d4:	9c c0       	rjmp	.+312    	; 0x1680e <vfprintf+0x3a0>
   166d6:	24 2d       	mov	r18, r4
   166d8:	29 7e       	andi	r18, 0xE9	; 233
   166da:	42 2e       	mov	r4, r18
   166dc:	84 2d       	mov	r24, r4
   166de:	88 70       	andi	r24, 0x08	; 8
   166e0:	58 2e       	mov	r5, r24
   166e2:	43 fc       	sbrc	r4, 3
   166e4:	aa c0       	rjmp	.+340    	; 0x1683a <vfprintf+0x3cc>
   166e6:	40 fe       	sbrs	r4, 0
   166e8:	a4 c0       	rjmp	.+328    	; 0x16832 <vfprintf+0x3c4>
   166ea:	9c 2c       	mov	r9, r12
   166ec:	82 14       	cp	r8, r2
   166ee:	18 f4       	brcc	.+6      	; 0x166f6 <vfprintf+0x288>
   166f0:	2c 0c       	add	r2, r12
   166f2:	92 2c       	mov	r9, r2
   166f4:	98 18       	sub	r9, r8
   166f6:	44 fe       	sbrs	r4, 4
   166f8:	a6 c0       	rjmp	.+332    	; 0x16846 <vfprintf+0x3d8>
   166fa:	b7 01       	movw	r22, r14
   166fc:	80 e3       	ldi	r24, 0x30	; 48
   166fe:	90 e0       	ldi	r25, 0x00	; 0
   16700:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   16704:	42 fe       	sbrs	r4, 2
   16706:	09 c0       	rjmp	.+18     	; 0x1671a <vfprintf+0x2ac>
   16708:	88 e7       	ldi	r24, 0x78	; 120
   1670a:	90 e0       	ldi	r25, 0x00	; 0
   1670c:	41 fe       	sbrs	r4, 1
   1670e:	02 c0       	rjmp	.+4      	; 0x16714 <vfprintf+0x2a6>
   16710:	88 e5       	ldi	r24, 0x58	; 88
   16712:	90 e0       	ldi	r25, 0x00	; 0
   16714:	b7 01       	movw	r22, r14
   16716:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   1671a:	c9 14       	cp	r12, r9
   1671c:	08 f4       	brcc	.+2      	; 0x16720 <vfprintf+0x2b2>
   1671e:	9f c0       	rjmp	.+318    	; 0x1685e <vfprintf+0x3f0>
   16720:	ca 94       	dec	r12
   16722:	d1 2c       	mov	r13, r1
   16724:	9f ef       	ldi	r25, 0xFF	; 255
   16726:	c9 1a       	sub	r12, r25
   16728:	d9 0a       	sbc	r13, r25
   1672a:	ca 0c       	add	r12, r10
   1672c:	db 1c       	adc	r13, r11
   1672e:	f6 01       	movw	r30, r12
   16730:	82 91       	ld	r24, -Z
   16732:	6f 01       	movw	r12, r30
   16734:	b7 01       	movw	r22, r14
   16736:	90 e0       	ldi	r25, 0x00	; 0
   16738:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   1673c:	ac 14       	cp	r10, r12
   1673e:	bd 04       	cpc	r11, r13
   16740:	b1 f7       	brne	.-20     	; 0x1672e <vfprintf+0x2c0>
   16742:	4f cf       	rjmp	.-354    	; 0x165e2 <vfprintf+0x174>
   16744:	60 81       	ld	r22, Z
   16746:	71 81       	ldd	r23, Z+1	; 0x01
   16748:	07 2e       	mov	r0, r23
   1674a:	00 0c       	add	r0, r0
   1674c:	88 0b       	sbc	r24, r24
   1674e:	99 0b       	sbc	r25, r25
   16750:	0e 5f       	subi	r16, 0xFE	; 254
   16752:	1f 4f       	sbci	r17, 0xFF	; 255
   16754:	92 cf       	rjmp	.-220    	; 0x1667a <vfprintf+0x20c>
   16756:	d3 2c       	mov	r13, r3
   16758:	e8 94       	clt
   1675a:	d4 f8       	bld	r13, 4
   1675c:	2a e0       	ldi	r18, 0x0A	; 10
   1675e:	30 e0       	ldi	r19, 0x00	; 0
   16760:	85 37       	cpi	r24, 0x75	; 117
   16762:	e1 f1       	breq	.+120    	; 0x167dc <vfprintf+0x36e>
   16764:	23 2d       	mov	r18, r3
   16766:	29 7f       	andi	r18, 0xF9	; 249
   16768:	d2 2e       	mov	r13, r18
   1676a:	8f 36       	cpi	r24, 0x6F	; 111
   1676c:	a9 f1       	breq	.+106    	; 0x167d8 <vfprintf+0x36a>
   1676e:	f0 f4       	brcc	.+60     	; 0x167ac <vfprintf+0x33e>
   16770:	88 35       	cpi	r24, 0x58	; 88
   16772:	51 f1       	breq	.+84     	; 0x167c8 <vfprintf+0x35a>
   16774:	f7 01       	movw	r30, r14
   16776:	86 81       	ldd	r24, Z+6	; 0x06
   16778:	97 81       	ldd	r25, Z+7	; 0x07
   1677a:	2b 96       	adiw	r28, 0x0b	; 11
   1677c:	0f b6       	in	r0, 0x3f	; 63
   1677e:	f8 94       	cli
   16780:	de bf       	out	0x3e, r29	; 62
   16782:	0f be       	out	0x3f, r0	; 63
   16784:	cd bf       	out	0x3d, r28	; 61
   16786:	df 91       	pop	r29
   16788:	cf 91       	pop	r28
   1678a:	1f 91       	pop	r17
   1678c:	0f 91       	pop	r16
   1678e:	ff 90       	pop	r15
   16790:	ef 90       	pop	r14
   16792:	df 90       	pop	r13
   16794:	cf 90       	pop	r12
   16796:	bf 90       	pop	r11
   16798:	af 90       	pop	r10
   1679a:	9f 90       	pop	r9
   1679c:	8f 90       	pop	r8
   1679e:	7f 90       	pop	r7
   167a0:	6f 90       	pop	r6
   167a2:	5f 90       	pop	r5
   167a4:	4f 90       	pop	r4
   167a6:	3f 90       	pop	r3
   167a8:	2f 90       	pop	r2
   167aa:	08 95       	ret
   167ac:	80 37       	cpi	r24, 0x70	; 112
   167ae:	49 f0       	breq	.+18     	; 0x167c2 <vfprintf+0x354>
   167b0:	88 37       	cpi	r24, 0x78	; 120
   167b2:	01 f7       	brne	.-64     	; 0x16774 <vfprintf+0x306>
   167b4:	d4 fe       	sbrs	r13, 4
   167b6:	02 c0       	rjmp	.+4      	; 0x167bc <vfprintf+0x34e>
   167b8:	68 94       	set
   167ba:	d2 f8       	bld	r13, 2
   167bc:	20 e1       	ldi	r18, 0x10	; 16
   167be:	30 e0       	ldi	r19, 0x00	; 0
   167c0:	0d c0       	rjmp	.+26     	; 0x167dc <vfprintf+0x36e>
   167c2:	68 94       	set
   167c4:	d4 f8       	bld	r13, 4
   167c6:	f6 cf       	rjmp	.-20     	; 0x167b4 <vfprintf+0x346>
   167c8:	34 fe       	sbrs	r3, 4
   167ca:	03 c0       	rjmp	.+6      	; 0x167d2 <vfprintf+0x364>
   167cc:	82 2f       	mov	r24, r18
   167ce:	86 60       	ori	r24, 0x06	; 6
   167d0:	d8 2e       	mov	r13, r24
   167d2:	20 e1       	ldi	r18, 0x10	; 16
   167d4:	32 e0       	ldi	r19, 0x02	; 2
   167d6:	02 c0       	rjmp	.+4      	; 0x167dc <vfprintf+0x36e>
   167d8:	28 e0       	ldi	r18, 0x08	; 8
   167da:	30 e0       	ldi	r19, 0x00	; 0
   167dc:	f8 01       	movw	r30, r16
   167de:	d7 fe       	sbrs	r13, 7
   167e0:	0f c0       	rjmp	.+30     	; 0x16800 <vfprintf+0x392>
   167e2:	60 81       	ld	r22, Z
   167e4:	71 81       	ldd	r23, Z+1	; 0x01
   167e6:	82 81       	ldd	r24, Z+2	; 0x02
   167e8:	93 81       	ldd	r25, Z+3	; 0x03
   167ea:	0c 5f       	subi	r16, 0xFC	; 252
   167ec:	1f 4f       	sbci	r17, 0xFF	; 255
   167ee:	a5 01       	movw	r20, r10
   167f0:	0e 94 a1 b9 	call	0x17342	; 0x17342 <__ultoa_invert>
   167f4:	c8 2e       	mov	r12, r24
   167f6:	ca 18       	sub	r12, r10
   167f8:	3d 2c       	mov	r3, r13
   167fa:	e8 94       	clt
   167fc:	37 f8       	bld	r3, 7
   167fe:	52 cf       	rjmp	.-348    	; 0x166a4 <vfprintf+0x236>
   16800:	60 81       	ld	r22, Z
   16802:	71 81       	ldd	r23, Z+1	; 0x01
   16804:	90 e0       	ldi	r25, 0x00	; 0
   16806:	80 e0       	ldi	r24, 0x00	; 0
   16808:	0e 5f       	subi	r16, 0xFE	; 254
   1680a:	1f 4f       	sbci	r17, 0xFF	; 255
   1680c:	f0 cf       	rjmp	.-32     	; 0x167ee <vfprintf+0x380>
   1680e:	42 fc       	sbrc	r4, 2
   16810:	02 c0       	rjmp	.+4      	; 0x16816 <vfprintf+0x3a8>
   16812:	83 94       	inc	r8
   16814:	63 cf       	rjmp	.-314    	; 0x166dc <vfprintf+0x26e>
   16816:	83 94       	inc	r8
   16818:	83 94       	inc	r8
   1681a:	60 cf       	rjmp	.-320    	; 0x166dc <vfprintf+0x26e>
   1681c:	84 2d       	mov	r24, r4
   1681e:	86 78       	andi	r24, 0x86	; 134
   16820:	09 f4       	brne	.+2      	; 0x16824 <vfprintf+0x3b6>
   16822:	5c cf       	rjmp	.-328    	; 0x166dc <vfprintf+0x26e>
   16824:	f6 cf       	rjmp	.-20     	; 0x16812 <vfprintf+0x3a4>
   16826:	b7 01       	movw	r22, r14
   16828:	80 e2       	ldi	r24, 0x20	; 32
   1682a:	90 e0       	ldi	r25, 0x00	; 0
   1682c:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   16830:	83 94       	inc	r8
   16832:	82 14       	cp	r8, r2
   16834:	c0 f3       	brcs	.-16     	; 0x16826 <vfprintf+0x3b8>
   16836:	51 2c       	mov	r5, r1
   16838:	5e cf       	rjmp	.-324    	; 0x166f6 <vfprintf+0x288>
   1683a:	52 2c       	mov	r5, r2
   1683c:	58 18       	sub	r5, r8
   1683e:	82 14       	cp	r8, r2
   16840:	08 f4       	brcc	.+2      	; 0x16844 <vfprintf+0x3d6>
   16842:	59 cf       	rjmp	.-334    	; 0x166f6 <vfprintf+0x288>
   16844:	f8 cf       	rjmp	.-16     	; 0x16836 <vfprintf+0x3c8>
   16846:	84 2d       	mov	r24, r4
   16848:	86 78       	andi	r24, 0x86	; 134
   1684a:	09 f4       	brne	.+2      	; 0x1684e <vfprintf+0x3e0>
   1684c:	66 cf       	rjmp	.-308    	; 0x1671a <vfprintf+0x2ac>
   1684e:	8b e2       	ldi	r24, 0x2B	; 43
   16850:	41 fe       	sbrs	r4, 1
   16852:	80 e2       	ldi	r24, 0x20	; 32
   16854:	47 fc       	sbrc	r4, 7
   16856:	8d e2       	ldi	r24, 0x2D	; 45
   16858:	b7 01       	movw	r22, r14
   1685a:	90 e0       	ldi	r25, 0x00	; 0
   1685c:	5c cf       	rjmp	.-328    	; 0x16716 <vfprintf+0x2a8>
   1685e:	b7 01       	movw	r22, r14
   16860:	80 e3       	ldi	r24, 0x30	; 48
   16862:	90 e0       	ldi	r25, 0x00	; 0
   16864:	0e 94 71 b9 	call	0x172e2	; 0x172e2 <fputc>
   16868:	9a 94       	dec	r9
   1686a:	57 cf       	rjmp	.-338    	; 0x1671a <vfprintf+0x2ac>
   1686c:	8f ef       	ldi	r24, 0xFF	; 255
   1686e:	9f ef       	ldi	r25, 0xFF	; 255
   16870:	84 cf       	rjmp	.-248    	; 0x1677a <vfprintf+0x30c>

00016872 <calloc>:
calloc():
   16872:	0f 93       	push	r16
   16874:	1f 93       	push	r17
   16876:	cf 93       	push	r28
   16878:	df 93       	push	r29
   1687a:	86 9f       	mul	r24, r22
   1687c:	80 01       	movw	r16, r0
   1687e:	87 9f       	mul	r24, r23
   16880:	10 0d       	add	r17, r0
   16882:	96 9f       	mul	r25, r22
   16884:	10 0d       	add	r17, r0
   16886:	11 24       	eor	r1, r1
   16888:	c8 01       	movw	r24, r16
   1688a:	0e 94 ce b5 	call	0x16b9c	; 0x16b9c <malloc>
   1688e:	ec 01       	movw	r28, r24
   16890:	00 97       	sbiw	r24, 0x00	; 0
   16892:	29 f0       	breq	.+10     	; 0x1689e <calloc+0x2c>
   16894:	a8 01       	movw	r20, r16
   16896:	70 e0       	ldi	r23, 0x00	; 0
   16898:	60 e0       	ldi	r22, 0x00	; 0
   1689a:	0e 94 4f b9 	call	0x1729e	; 0x1729e <memset>
   1689e:	ce 01       	movw	r24, r28
   168a0:	df 91       	pop	r29
   168a2:	cf 91       	pop	r28
   168a4:	1f 91       	pop	r17
   168a6:	0f 91       	pop	r16
   168a8:	08 95       	ret

000168aa <dtoa_prf>:
dtoa_prf():
   168aa:	8f 92       	push	r8
   168ac:	9f 92       	push	r9
   168ae:	af 92       	push	r10
   168b0:	bf 92       	push	r11
   168b2:	cf 92       	push	r12
   168b4:	df 92       	push	r13
   168b6:	ef 92       	push	r14
   168b8:	ff 92       	push	r15
   168ba:	0f 93       	push	r16
   168bc:	1f 93       	push	r17
   168be:	cf 93       	push	r28
   168c0:	df 93       	push	r29
   168c2:	00 d0       	rcall	.+0      	; 0x168c4 <dtoa_prf+0x1a>
   168c4:	00 d0       	rcall	.+0      	; 0x168c6 <dtoa_prf+0x1c>
   168c6:	00 d0       	rcall	.+0      	; 0x168c8 <dtoa_prf+0x1e>
   168c8:	cd b7       	in	r28, 0x3d	; 61
   168ca:	de b7       	in	r29, 0x3e	; 62
   168cc:	6a 01       	movw	r12, r20
   168ce:	f2 2e       	mov	r15, r18
   168d0:	b0 2e       	mov	r11, r16
   168d2:	10 2f       	mov	r17, r16
   168d4:	fb e3       	ldi	r31, 0x3B	; 59
   168d6:	af 2e       	mov	r10, r31
   168d8:	a0 16       	cp	r10, r16
   168da:	08 f4       	brcc	.+2      	; 0x168de <dtoa_prf+0x34>
   168dc:	1b e3       	ldi	r17, 0x3B	; 59
   168de:	1f 5f       	subi	r17, 0xFF	; 255
   168e0:	01 2f       	mov	r16, r17
   168e2:	27 e0       	ldi	r18, 0x07	; 7
   168e4:	ae 01       	movw	r20, r28
   168e6:	4f 5f       	subi	r20, 0xFF	; 255
   168e8:	5f 4f       	sbci	r21, 0xFF	; 255
   168ea:	0e 94 51 b8 	call	0x170a2	; 0x170a2 <__ftoa_engine>
   168ee:	bc 01       	movw	r22, r24
   168f0:	89 81       	ldd	r24, Y+1	; 0x01
   168f2:	98 2f       	mov	r25, r24
   168f4:	99 70       	andi	r25, 0x09	; 9
   168f6:	91 30       	cpi	r25, 0x01	; 1
   168f8:	09 f4       	brne	.+2      	; 0x168fc <dtoa_prf+0x52>
   168fa:	4e c0       	rjmp	.+156    	; 0x16998 <dtoa_prf+0xee>
   168fc:	9b e2       	ldi	r25, 0x2B	; 43
   168fe:	e1 fc       	sbrc	r14, 1
   16900:	04 c0       	rjmp	.+8      	; 0x1690a <dtoa_prf+0x60>
   16902:	9e 2d       	mov	r25, r14
   16904:	91 70       	andi	r25, 0x01	; 1
   16906:	e0 fc       	sbrc	r14, 0
   16908:	49 c0       	rjmp	.+146    	; 0x1699c <dtoa_prf+0xf2>
   1690a:	5e 2d       	mov	r21, r14
   1690c:	50 71       	andi	r21, 0x10	; 16
   1690e:	e8 2f       	mov	r30, r24
   16910:	e8 70       	andi	r30, 0x08	; 8
   16912:	83 ff       	sbrs	r24, 3
   16914:	55 c0       	rjmp	.+170    	; 0x169c0 <dtoa_prf+0x116>
   16916:	84 e0       	ldi	r24, 0x04	; 4
   16918:	91 11       	cpse	r25, r1
   1691a:	01 c0       	rjmp	.+2      	; 0x1691e <dtoa_prf+0x74>
   1691c:	83 e0       	ldi	r24, 0x03	; 3
   1691e:	ef 2d       	mov	r30, r15
   16920:	e8 1b       	sub	r30, r24
   16922:	8f 15       	cp	r24, r15
   16924:	08 f0       	brcs	.+2      	; 0x16928 <dtoa_prf+0x7e>
   16926:	e0 e0       	ldi	r30, 0x00	; 0
   16928:	d6 01       	movw	r26, r12
   1692a:	8e 2f       	mov	r24, r30
   1692c:	20 e2       	ldi	r18, 0x20	; 32
   1692e:	55 23       	and	r21, r21
   16930:	c9 f1       	breq	.+114    	; 0x169a4 <dtoa_prf+0xfa>
   16932:	99 23       	and	r25, r25
   16934:	29 f0       	breq	.+10     	; 0x16940 <dtoa_prf+0x96>
   16936:	d6 01       	movw	r26, r12
   16938:	9c 93       	st	X, r25
   1693a:	c6 01       	movw	r24, r12
   1693c:	01 96       	adiw	r24, 0x01	; 1
   1693e:	6c 01       	movw	r12, r24
   16940:	96 01       	movw	r18, r12
   16942:	2d 5f       	subi	r18, 0xFD	; 253
   16944:	3f 4f       	sbci	r19, 0xFF	; 255
   16946:	e2 fe       	sbrs	r14, 2
   16948:	33 c0       	rjmp	.+102    	; 0x169b0 <dtoa_prf+0x106>
   1694a:	8e e4       	ldi	r24, 0x4E	; 78
   1694c:	d6 01       	movw	r26, r12
   1694e:	8c 93       	st	X, r24
   16950:	91 e4       	ldi	r25, 0x41	; 65
   16952:	11 96       	adiw	r26, 0x01	; 1
   16954:	9c 93       	st	X, r25
   16956:	11 97       	sbiw	r26, 0x01	; 1
   16958:	12 96       	adiw	r26, 0x02	; 2
   1695a:	8c 93       	st	X, r24
   1695c:	d9 01       	movw	r26, r18
   1695e:	8e 2f       	mov	r24, r30
   16960:	90 e2       	ldi	r25, 0x20	; 32
   16962:	81 11       	cpse	r24, r1
   16964:	2a c0       	rjmp	.+84     	; 0x169ba <dtoa_prf+0x110>
   16966:	e2 0f       	add	r30, r18
   16968:	f3 2f       	mov	r31, r19
   1696a:	f1 1d       	adc	r31, r1
   1696c:	10 82       	st	Z, r1
   1696e:	8e ef       	ldi	r24, 0xFE	; 254
   16970:	9f ef       	ldi	r25, 0xFF	; 255
   16972:	29 96       	adiw	r28, 0x09	; 9
   16974:	0f b6       	in	r0, 0x3f	; 63
   16976:	f8 94       	cli
   16978:	de bf       	out	0x3e, r29	; 62
   1697a:	0f be       	out	0x3f, r0	; 63
   1697c:	cd bf       	out	0x3d, r28	; 61
   1697e:	df 91       	pop	r29
   16980:	cf 91       	pop	r28
   16982:	1f 91       	pop	r17
   16984:	0f 91       	pop	r16
   16986:	ff 90       	pop	r15
   16988:	ef 90       	pop	r14
   1698a:	df 90       	pop	r13
   1698c:	cf 90       	pop	r12
   1698e:	bf 90       	pop	r11
   16990:	af 90       	pop	r10
   16992:	9f 90       	pop	r9
   16994:	8f 90       	pop	r8
   16996:	08 95       	ret
   16998:	9d e2       	ldi	r25, 0x2D	; 45
   1699a:	b7 cf       	rjmp	.-146    	; 0x1690a <dtoa_prf+0x60>
   1699c:	90 e2       	ldi	r25, 0x20	; 32
   1699e:	b5 cf       	rjmp	.-150    	; 0x1690a <dtoa_prf+0x60>
   169a0:	2d 93       	st	X+, r18
   169a2:	81 50       	subi	r24, 0x01	; 1
   169a4:	81 11       	cpse	r24, r1
   169a6:	fc cf       	rjmp	.-8      	; 0x169a0 <dtoa_prf+0xf6>
   169a8:	ce 0e       	add	r12, r30
   169aa:	d1 1c       	adc	r13, r1
   169ac:	e0 e0       	ldi	r30, 0x00	; 0
   169ae:	c1 cf       	rjmp	.-126    	; 0x16932 <dtoa_prf+0x88>
   169b0:	8e e6       	ldi	r24, 0x6E	; 110
   169b2:	d6 01       	movw	r26, r12
   169b4:	8c 93       	st	X, r24
   169b6:	91 e6       	ldi	r25, 0x61	; 97
   169b8:	cc cf       	rjmp	.-104    	; 0x16952 <dtoa_prf+0xa8>
   169ba:	9d 93       	st	X+, r25
   169bc:	81 50       	subi	r24, 0x01	; 1
   169be:	d1 cf       	rjmp	.-94     	; 0x16962 <dtoa_prf+0xb8>
   169c0:	48 2f       	mov	r20, r24
   169c2:	44 70       	andi	r20, 0x04	; 4
   169c4:	82 ff       	sbrs	r24, 2
   169c6:	3d c0       	rjmp	.+122    	; 0x16a42 <dtoa_prf+0x198>
   169c8:	84 e0       	ldi	r24, 0x04	; 4
   169ca:	91 11       	cpse	r25, r1
   169cc:	01 c0       	rjmp	.+2      	; 0x169d0 <dtoa_prf+0x126>
   169ce:	83 e0       	ldi	r24, 0x03	; 3
   169d0:	8f 15       	cp	r24, r15
   169d2:	10 f4       	brcc	.+4      	; 0x169d8 <dtoa_prf+0x12e>
   169d4:	ef 2d       	mov	r30, r15
   169d6:	e8 1b       	sub	r30, r24
   169d8:	d6 01       	movw	r26, r12
   169da:	8e 2f       	mov	r24, r30
   169dc:	20 e2       	ldi	r18, 0x20	; 32
   169de:	55 23       	and	r21, r21
   169e0:	09 f1       	breq	.+66     	; 0x16a24 <dtoa_prf+0x17a>
   169e2:	99 23       	and	r25, r25
   169e4:	29 f0       	breq	.+10     	; 0x169f0 <dtoa_prf+0x146>
   169e6:	d6 01       	movw	r26, r12
   169e8:	9c 93       	st	X, r25
   169ea:	c6 01       	movw	r24, r12
   169ec:	01 96       	adiw	r24, 0x01	; 1
   169ee:	6c 01       	movw	r12, r24
   169f0:	96 01       	movw	r18, r12
   169f2:	2d 5f       	subi	r18, 0xFD	; 253
   169f4:	3f 4f       	sbci	r19, 0xFF	; 255
   169f6:	e2 fe       	sbrs	r14, 2
   169f8:	1b c0       	rjmp	.+54     	; 0x16a30 <dtoa_prf+0x186>
   169fa:	89 e4       	ldi	r24, 0x49	; 73
   169fc:	d6 01       	movw	r26, r12
   169fe:	8c 93       	st	X, r24
   16a00:	8e e4       	ldi	r24, 0x4E	; 78
   16a02:	11 96       	adiw	r26, 0x01	; 1
   16a04:	8c 93       	st	X, r24
   16a06:	11 97       	sbiw	r26, 0x01	; 1
   16a08:	86 e4       	ldi	r24, 0x46	; 70
   16a0a:	12 96       	adiw	r26, 0x02	; 2
   16a0c:	8c 93       	st	X, r24
   16a0e:	d9 01       	movw	r26, r18
   16a10:	8e 2f       	mov	r24, r30
   16a12:	90 e2       	ldi	r25, 0x20	; 32
   16a14:	88 23       	and	r24, r24
   16a16:	09 f4       	brne	.+2      	; 0x16a1a <dtoa_prf+0x170>
   16a18:	a6 cf       	rjmp	.-180    	; 0x16966 <dtoa_prf+0xbc>
   16a1a:	9d 93       	st	X+, r25
   16a1c:	81 50       	subi	r24, 0x01	; 1
   16a1e:	fa cf       	rjmp	.-12     	; 0x16a14 <dtoa_prf+0x16a>
   16a20:	2d 93       	st	X+, r18
   16a22:	81 50       	subi	r24, 0x01	; 1
   16a24:	81 11       	cpse	r24, r1
   16a26:	fc cf       	rjmp	.-8      	; 0x16a20 <dtoa_prf+0x176>
   16a28:	ce 0e       	add	r12, r30
   16a2a:	d1 1c       	adc	r13, r1
   16a2c:	e0 e0       	ldi	r30, 0x00	; 0
   16a2e:	d9 cf       	rjmp	.-78     	; 0x169e2 <dtoa_prf+0x138>
   16a30:	89 e6       	ldi	r24, 0x69	; 105
   16a32:	d6 01       	movw	r26, r12
   16a34:	8c 93       	st	X, r24
   16a36:	8e e6       	ldi	r24, 0x6E	; 110
   16a38:	11 96       	adiw	r26, 0x01	; 1
   16a3a:	8c 93       	st	X, r24
   16a3c:	11 97       	sbiw	r26, 0x01	; 1
   16a3e:	86 e6       	ldi	r24, 0x66	; 102
   16a40:	e4 cf       	rjmp	.-56     	; 0x16a0a <dtoa_prf+0x160>
   16a42:	9b 01       	movw	r18, r22
   16a44:	77 ff       	sbrs	r23, 7
   16a46:	02 c0       	rjmp	.+4      	; 0x16a4c <dtoa_prf+0x1a2>
   16a48:	30 e0       	ldi	r19, 0x00	; 0
   16a4a:	20 e0       	ldi	r18, 0x00	; 0
   16a4c:	a1 e0       	ldi	r26, 0x01	; 1
   16a4e:	b0 e0       	ldi	r27, 0x00	; 0
   16a50:	91 11       	cpse	r25, r1
   16a52:	02 c0       	rjmp	.+4      	; 0x16a58 <dtoa_prf+0x1ae>
   16a54:	b0 e0       	ldi	r27, 0x00	; 0
   16a56:	a0 e0       	ldi	r26, 0x00	; 0
   16a58:	f9 01       	movw	r30, r18
   16a5a:	31 96       	adiw	r30, 0x01	; 1
   16a5c:	ae 0f       	add	r26, r30
   16a5e:	bf 1f       	adc	r27, r31
   16a60:	8b 2c       	mov	r8, r11
   16a62:	91 2c       	mov	r9, r1
   16a64:	bb 20       	and	r11, r11
   16a66:	09 f4       	brne	.+2      	; 0x16a6a <dtoa_prf+0x1c0>
   16a68:	61 c0       	rjmp	.+194    	; 0x16b2c <dtoa_prf+0x282>
   16a6a:	54 01       	movw	r10, r8
   16a6c:	ef ef       	ldi	r30, 0xFF	; 255
   16a6e:	ae 1a       	sub	r10, r30
   16a70:	be 0a       	sbc	r11, r30
   16a72:	aa 0d       	add	r26, r10
   16a74:	bb 1d       	adc	r27, r11
   16a76:	fa 16       	cp	r15, r26
   16a78:	1b 06       	cpc	r1, r27
   16a7a:	19 f0       	breq	.+6      	; 0x16a82 <dtoa_prf+0x1d8>
   16a7c:	14 f0       	brlt	.+4      	; 0x16a82 <dtoa_prf+0x1d8>
   16a7e:	4f 2d       	mov	r20, r15
   16a80:	4a 1b       	sub	r20, r26
   16a82:	51 11       	cpse	r21, r1
   16a84:	88 c0       	rjmp	.+272    	; 0x16b96 <dtoa_prf+0x2ec>
   16a86:	e3 fc       	sbrc	r14, 3
   16a88:	59 c0       	rjmp	.+178    	; 0x16b3c <dtoa_prf+0x292>
   16a8a:	76 01       	movw	r14, r12
   16a8c:	a4 2f       	mov	r26, r20
   16a8e:	b0 e2       	ldi	r27, 0x20	; 32
   16a90:	a1 11       	cpse	r26, r1
   16a92:	4f c0       	rjmp	.+158    	; 0x16b32 <dtoa_prf+0x288>
   16a94:	c4 0e       	add	r12, r20
   16a96:	d1 1c       	adc	r13, r1
   16a98:	99 23       	and	r25, r25
   16a9a:	09 f4       	brne	.+2      	; 0x16a9e <dtoa_prf+0x1f4>
   16a9c:	5b c0       	rjmp	.+182    	; 0x16b54 <dtoa_prf+0x2aa>
   16a9e:	40 e0       	ldi	r20, 0x00	; 0
   16aa0:	d6 01       	movw	r26, r12
   16aa2:	11 96       	adiw	r26, 0x01	; 1
   16aa4:	f6 01       	movw	r30, r12
   16aa6:	90 83       	st	Z, r25
   16aa8:	6d 01       	movw	r12, r26
   16aaa:	55 23       	and	r21, r21
   16aac:	09 f4       	brne	.+2      	; 0x16ab0 <dtoa_prf+0x206>
   16aae:	48 c0       	rjmp	.+144    	; 0x16b40 <dtoa_prf+0x296>
   16ab0:	01 2f       	mov	r16, r17
   16ab2:	06 0f       	add	r16, r22
   16ab4:	9a 81       	ldd	r25, Y+2	; 0x02
   16ab6:	58 2f       	mov	r21, r24
   16ab8:	50 71       	andi	r21, 0x10	; 16
   16aba:	84 ff       	sbrs	r24, 4
   16abc:	03 c0       	rjmp	.+6      	; 0x16ac4 <dtoa_prf+0x21a>
   16abe:	91 33       	cpi	r25, 0x31	; 49
   16ac0:	09 f4       	brne	.+2      	; 0x16ac4 <dtoa_prf+0x21a>
   16ac2:	01 50       	subi	r16, 0x01	; 1
   16ac4:	10 16       	cp	r1, r16
   16ac6:	0c f0       	brlt	.+2      	; 0x16aca <dtoa_prf+0x220>
   16ac8:	47 c0       	rjmp	.+142    	; 0x16b58 <dtoa_prf+0x2ae>
   16aca:	09 30       	cpi	r16, 0x09	; 9
   16acc:	08 f0       	brcs	.+2      	; 0x16ad0 <dtoa_prf+0x226>
   16ace:	08 e0       	ldi	r16, 0x08	; 8
   16ad0:	ee e2       	ldi	r30, 0x2E	; 46
   16ad2:	fe 2e       	mov	r15, r30
   16ad4:	5b 01       	movw	r10, r22
   16ad6:	a0 1a       	sub	r10, r16
   16ad8:	b1 08       	sbc	r11, r1
   16ada:	85 01       	movw	r16, r10
   16adc:	91 94       	neg	r9
   16ade:	81 94       	neg	r8
   16ae0:	91 08       	sbc	r9, r1
   16ae2:	2f 3f       	cpi	r18, 0xFF	; 255
   16ae4:	32 07       	cpc	r19, r18
   16ae6:	29 f4       	brne	.+10     	; 0x16af2 <dtoa_prf+0x248>
   16ae8:	d6 01       	movw	r26, r12
   16aea:	fc 92       	st	X, r15
   16aec:	f6 01       	movw	r30, r12
   16aee:	31 96       	adiw	r30, 0x01	; 1
   16af0:	6f 01       	movw	r12, r30
   16af2:	62 17       	cp	r22, r18
   16af4:	73 07       	cpc	r23, r19
   16af6:	94 f1       	brlt	.+100    	; 0x16b5c <dtoa_prf+0x2b2>
   16af8:	02 17       	cp	r16, r18
   16afa:	13 07       	cpc	r17, r19
   16afc:	7c f5       	brge	.+94     	; 0x16b5c <dtoa_prf+0x2b2>
   16afe:	db 01       	movw	r26, r22
   16b00:	a2 1b       	sub	r26, r18
   16b02:	b3 0b       	sbc	r27, r19
   16b04:	aa 24       	eor	r10, r10
   16b06:	a3 94       	inc	r10
   16b08:	b1 2c       	mov	r11, r1
   16b0a:	ac 0e       	add	r10, r28
   16b0c:	bd 1e       	adc	r11, r29
   16b0e:	aa 0d       	add	r26, r10
   16b10:	bb 1d       	adc	r27, r11
   16b12:	11 96       	adiw	r26, 0x01	; 1
   16b14:	8c 91       	ld	r24, X
   16b16:	21 50       	subi	r18, 0x01	; 1
   16b18:	31 09       	sbc	r19, r1
   16b1a:	d6 01       	movw	r26, r12
   16b1c:	11 96       	adiw	r26, 0x01	; 1
   16b1e:	28 15       	cp	r18, r8
   16b20:	39 05       	cpc	r19, r9
   16b22:	f4 f0       	brlt	.+60     	; 0x16b60 <dtoa_prf+0x2b6>
   16b24:	f6 01       	movw	r30, r12
   16b26:	80 83       	st	Z, r24
   16b28:	6d 01       	movw	r12, r26
   16b2a:	db cf       	rjmp	.-74     	; 0x16ae2 <dtoa_prf+0x238>
   16b2c:	b1 2c       	mov	r11, r1
   16b2e:	a1 2c       	mov	r10, r1
   16b30:	a0 cf       	rjmp	.-192    	; 0x16a72 <dtoa_prf+0x1c8>
   16b32:	f7 01       	movw	r30, r14
   16b34:	b1 93       	st	Z+, r27
   16b36:	7f 01       	movw	r14, r30
   16b38:	a1 50       	subi	r26, 0x01	; 1
   16b3a:	aa cf       	rjmp	.-172    	; 0x16a90 <dtoa_prf+0x1e6>
   16b3c:	91 11       	cpse	r25, r1
   16b3e:	b0 cf       	rjmp	.-160    	; 0x16aa0 <dtoa_prf+0x1f6>
   16b40:	d6 01       	movw	r26, r12
   16b42:	94 2f       	mov	r25, r20
   16b44:	50 e3       	ldi	r21, 0x30	; 48
   16b46:	02 c0       	rjmp	.+4      	; 0x16b4c <dtoa_prf+0x2a2>
   16b48:	5d 93       	st	X+, r21
   16b4a:	91 50       	subi	r25, 0x01	; 1
   16b4c:	91 11       	cpse	r25, r1
   16b4e:	fc cf       	rjmp	.-8      	; 0x16b48 <dtoa_prf+0x29e>
   16b50:	c4 0e       	add	r12, r20
   16b52:	d1 1c       	adc	r13, r1
   16b54:	40 e0       	ldi	r20, 0x00	; 0
   16b56:	ac cf       	rjmp	.-168    	; 0x16ab0 <dtoa_prf+0x206>
   16b58:	01 e0       	ldi	r16, 0x01	; 1
   16b5a:	ba cf       	rjmp	.-140    	; 0x16ad0 <dtoa_prf+0x226>
   16b5c:	80 e3       	ldi	r24, 0x30	; 48
   16b5e:	db cf       	rjmp	.-74     	; 0x16b16 <dtoa_prf+0x26c>
   16b60:	62 17       	cp	r22, r18
   16b62:	73 07       	cpc	r23, r19
   16b64:	31 f4       	brne	.+12     	; 0x16b72 <dtoa_prf+0x2c8>
   16b66:	96 33       	cpi	r25, 0x36	; 54
   16b68:	88 f4       	brcc	.+34     	; 0x16b8c <dtoa_prf+0x2e2>
   16b6a:	95 33       	cpi	r25, 0x35	; 53
   16b6c:	11 f4       	brne	.+4      	; 0x16b72 <dtoa_prf+0x2c8>
   16b6e:	55 23       	and	r21, r21
   16b70:	69 f0       	breq	.+26     	; 0x16b8c <dtoa_prf+0x2e2>
   16b72:	f6 01       	movw	r30, r12
   16b74:	80 83       	st	Z, r24
   16b76:	fd 01       	movw	r30, r26
   16b78:	84 2f       	mov	r24, r20
   16b7a:	90 e2       	ldi	r25, 0x20	; 32
   16b7c:	81 11       	cpse	r24, r1
   16b7e:	08 c0       	rjmp	.+16     	; 0x16b90 <dtoa_prf+0x2e6>
   16b80:	a4 0f       	add	r26, r20
   16b82:	b1 1d       	adc	r27, r1
   16b84:	1c 92       	st	X, r1
   16b86:	90 e0       	ldi	r25, 0x00	; 0
   16b88:	80 e0       	ldi	r24, 0x00	; 0
   16b8a:	f3 ce       	rjmp	.-538    	; 0x16972 <dtoa_prf+0xc8>
   16b8c:	81 e3       	ldi	r24, 0x31	; 49
   16b8e:	f1 cf       	rjmp	.-30     	; 0x16b72 <dtoa_prf+0x2c8>
   16b90:	91 93       	st	Z+, r25
   16b92:	81 50       	subi	r24, 0x01	; 1
   16b94:	f3 cf       	rjmp	.-26     	; 0x16b7c <dtoa_prf+0x2d2>
   16b96:	91 11       	cpse	r25, r1
   16b98:	83 cf       	rjmp	.-250    	; 0x16aa0 <dtoa_prf+0x1f6>
   16b9a:	8a cf       	rjmp	.-236    	; 0x16ab0 <dtoa_prf+0x206>

00016b9c <malloc>:
malloc():
   16b9c:	0f 93       	push	r16
   16b9e:	1f 93       	push	r17
   16ba0:	cf 93       	push	r28
   16ba2:	df 93       	push	r29
   16ba4:	82 30       	cpi	r24, 0x02	; 2
   16ba6:	91 05       	cpc	r25, r1
   16ba8:	10 f4       	brcc	.+4      	; 0x16bae <malloc+0x12>
   16baa:	82 e0       	ldi	r24, 0x02	; 2
   16bac:	90 e0       	ldi	r25, 0x00	; 0
   16bae:	e0 91 9a 13 	lds	r30, 0x139A	; 0x80139a <__flp>
   16bb2:	f0 91 9b 13 	lds	r31, 0x139B	; 0x80139b <__flp+0x1>
   16bb6:	30 e0       	ldi	r19, 0x00	; 0
   16bb8:	20 e0       	ldi	r18, 0x00	; 0
   16bba:	b0 e0       	ldi	r27, 0x00	; 0
   16bbc:	a0 e0       	ldi	r26, 0x00	; 0
   16bbe:	30 97       	sbiw	r30, 0x00	; 0
   16bc0:	99 f4       	brne	.+38     	; 0x16be8 <malloc+0x4c>
   16bc2:	21 15       	cp	r18, r1
   16bc4:	31 05       	cpc	r19, r1
   16bc6:	09 f4       	brne	.+2      	; 0x16bca <malloc+0x2e>
   16bc8:	4a c0       	rjmp	.+148    	; 0x16c5e <malloc+0xc2>
   16bca:	28 1b       	sub	r18, r24
   16bcc:	39 0b       	sbc	r19, r25
   16bce:	24 30       	cpi	r18, 0x04	; 4
   16bd0:	31 05       	cpc	r19, r1
   16bd2:	d8 f5       	brcc	.+118    	; 0x16c4a <malloc+0xae>
   16bd4:	8a 81       	ldd	r24, Y+2	; 0x02
   16bd6:	9b 81       	ldd	r25, Y+3	; 0x03
   16bd8:	61 15       	cp	r22, r1
   16bda:	71 05       	cpc	r23, r1
   16bdc:	89 f1       	breq	.+98     	; 0x16c40 <malloc+0xa4>
   16bde:	fb 01       	movw	r30, r22
   16be0:	93 83       	std	Z+3, r25	; 0x03
   16be2:	82 83       	std	Z+2, r24	; 0x02
   16be4:	fe 01       	movw	r30, r28
   16be6:	11 c0       	rjmp	.+34     	; 0x16c0a <malloc+0x6e>
   16be8:	40 81       	ld	r20, Z
   16bea:	51 81       	ldd	r21, Z+1	; 0x01
   16bec:	02 81       	ldd	r16, Z+2	; 0x02
   16bee:	13 81       	ldd	r17, Z+3	; 0x03
   16bf0:	48 17       	cp	r20, r24
   16bf2:	59 07       	cpc	r21, r25
   16bf4:	e0 f0       	brcs	.+56     	; 0x16c2e <malloc+0x92>
   16bf6:	48 17       	cp	r20, r24
   16bf8:	59 07       	cpc	r21, r25
   16bfa:	99 f4       	brne	.+38     	; 0x16c22 <malloc+0x86>
   16bfc:	10 97       	sbiw	r26, 0x00	; 0
   16bfe:	61 f0       	breq	.+24     	; 0x16c18 <malloc+0x7c>
   16c00:	12 96       	adiw	r26, 0x02	; 2
   16c02:	0c 93       	st	X, r16
   16c04:	12 97       	sbiw	r26, 0x02	; 2
   16c06:	13 96       	adiw	r26, 0x03	; 3
   16c08:	1c 93       	st	X, r17
   16c0a:	32 96       	adiw	r30, 0x02	; 2
   16c0c:	cf 01       	movw	r24, r30
   16c0e:	df 91       	pop	r29
   16c10:	cf 91       	pop	r28
   16c12:	1f 91       	pop	r17
   16c14:	0f 91       	pop	r16
   16c16:	08 95       	ret
   16c18:	00 93 9a 13 	sts	0x139A, r16	; 0x80139a <__flp>
   16c1c:	10 93 9b 13 	sts	0x139B, r17	; 0x80139b <__flp+0x1>
   16c20:	f4 cf       	rjmp	.-24     	; 0x16c0a <malloc+0x6e>
   16c22:	21 15       	cp	r18, r1
   16c24:	31 05       	cpc	r19, r1
   16c26:	51 f0       	breq	.+20     	; 0x16c3c <malloc+0xa0>
   16c28:	42 17       	cp	r20, r18
   16c2a:	53 07       	cpc	r21, r19
   16c2c:	38 f0       	brcs	.+14     	; 0x16c3c <malloc+0xa0>
   16c2e:	a9 01       	movw	r20, r18
   16c30:	db 01       	movw	r26, r22
   16c32:	9a 01       	movw	r18, r20
   16c34:	bd 01       	movw	r22, r26
   16c36:	df 01       	movw	r26, r30
   16c38:	f8 01       	movw	r30, r16
   16c3a:	c1 cf       	rjmp	.-126    	; 0x16bbe <malloc+0x22>
   16c3c:	ef 01       	movw	r28, r30
   16c3e:	f9 cf       	rjmp	.-14     	; 0x16c32 <malloc+0x96>
   16c40:	90 93 9b 13 	sts	0x139B, r25	; 0x80139b <__flp+0x1>
   16c44:	80 93 9a 13 	sts	0x139A, r24	; 0x80139a <__flp>
   16c48:	cd cf       	rjmp	.-102    	; 0x16be4 <malloc+0x48>
   16c4a:	fe 01       	movw	r30, r28
   16c4c:	e2 0f       	add	r30, r18
   16c4e:	f3 1f       	adc	r31, r19
   16c50:	81 93       	st	Z+, r24
   16c52:	91 93       	st	Z+, r25
   16c54:	22 50       	subi	r18, 0x02	; 2
   16c56:	31 09       	sbc	r19, r1
   16c58:	39 83       	std	Y+1, r19	; 0x01
   16c5a:	28 83       	st	Y, r18
   16c5c:	d7 cf       	rjmp	.-82     	; 0x16c0c <malloc+0x70>
   16c5e:	20 91 98 13 	lds	r18, 0x1398	; 0x801398 <__brkval>
   16c62:	30 91 99 13 	lds	r19, 0x1399	; 0x801399 <__brkval+0x1>
   16c66:	23 2b       	or	r18, r19
   16c68:	41 f4       	brne	.+16     	; 0x16c7a <malloc+0xde>
   16c6a:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   16c6e:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   16c72:	30 93 99 13 	sts	0x1399, r19	; 0x801399 <__brkval+0x1>
   16c76:	20 93 98 13 	sts	0x1398, r18	; 0x801398 <__brkval>
   16c7a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   16c7e:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   16c82:	21 15       	cp	r18, r1
   16c84:	31 05       	cpc	r19, r1
   16c86:	41 f4       	brne	.+16     	; 0x16c98 <malloc+0xfc>
   16c88:	2d b7       	in	r18, 0x3d	; 61
   16c8a:	3e b7       	in	r19, 0x3e	; 62
   16c8c:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   16c90:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   16c94:	24 1b       	sub	r18, r20
   16c96:	35 0b       	sbc	r19, r21
   16c98:	e0 91 98 13 	lds	r30, 0x1398	; 0x801398 <__brkval>
   16c9c:	f0 91 99 13 	lds	r31, 0x1399	; 0x801399 <__brkval+0x1>
   16ca0:	e2 17       	cp	r30, r18
   16ca2:	f3 07       	cpc	r31, r19
   16ca4:	a0 f4       	brcc	.+40     	; 0x16cce <malloc+0x132>
   16ca6:	2e 1b       	sub	r18, r30
   16ca8:	3f 0b       	sbc	r19, r31
   16caa:	28 17       	cp	r18, r24
   16cac:	39 07       	cpc	r19, r25
   16cae:	78 f0       	brcs	.+30     	; 0x16cce <malloc+0x132>
   16cb0:	ac 01       	movw	r20, r24
   16cb2:	4e 5f       	subi	r20, 0xFE	; 254
   16cb4:	5f 4f       	sbci	r21, 0xFF	; 255
   16cb6:	24 17       	cp	r18, r20
   16cb8:	35 07       	cpc	r19, r21
   16cba:	48 f0       	brcs	.+18     	; 0x16cce <malloc+0x132>
   16cbc:	4e 0f       	add	r20, r30
   16cbe:	5f 1f       	adc	r21, r31
   16cc0:	50 93 99 13 	sts	0x1399, r21	; 0x801399 <__brkval+0x1>
   16cc4:	40 93 98 13 	sts	0x1398, r20	; 0x801398 <__brkval>
   16cc8:	81 93       	st	Z+, r24
   16cca:	91 93       	st	Z+, r25
   16ccc:	9f cf       	rjmp	.-194    	; 0x16c0c <malloc+0x70>
   16cce:	f0 e0       	ldi	r31, 0x00	; 0
   16cd0:	e0 e0       	ldi	r30, 0x00	; 0
   16cd2:	9c cf       	rjmp	.-200    	; 0x16c0c <malloc+0x70>

00016cd4 <free>:
free():
   16cd4:	cf 93       	push	r28
   16cd6:	df 93       	push	r29
   16cd8:	00 97       	sbiw	r24, 0x00	; 0
   16cda:	e9 f0       	breq	.+58     	; 0x16d16 <free+0x42>
   16cdc:	fc 01       	movw	r30, r24
   16cde:	32 97       	sbiw	r30, 0x02	; 2
   16ce0:	13 82       	std	Z+3, r1	; 0x03
   16ce2:	12 82       	std	Z+2, r1	; 0x02
   16ce4:	a0 91 9a 13 	lds	r26, 0x139A	; 0x80139a <__flp>
   16ce8:	b0 91 9b 13 	lds	r27, 0x139B	; 0x80139b <__flp+0x1>
   16cec:	ed 01       	movw	r28, r26
   16cee:	30 e0       	ldi	r19, 0x00	; 0
   16cf0:	20 e0       	ldi	r18, 0x00	; 0
   16cf2:	10 97       	sbiw	r26, 0x00	; 0
   16cf4:	a1 f4       	brne	.+40     	; 0x16d1e <free+0x4a>
   16cf6:	20 81       	ld	r18, Z
   16cf8:	31 81       	ldd	r19, Z+1	; 0x01
   16cfa:	82 0f       	add	r24, r18
   16cfc:	93 1f       	adc	r25, r19
   16cfe:	20 91 98 13 	lds	r18, 0x1398	; 0x801398 <__brkval>
   16d02:	30 91 99 13 	lds	r19, 0x1399	; 0x801399 <__brkval+0x1>
   16d06:	28 17       	cp	r18, r24
   16d08:	39 07       	cpc	r19, r25
   16d0a:	09 f0       	breq	.+2      	; 0x16d0e <free+0x3a>
   16d0c:	61 c0       	rjmp	.+194    	; 0x16dd0 <free+0xfc>
   16d0e:	f0 93 99 13 	sts	0x1399, r31	; 0x801399 <__brkval+0x1>
   16d12:	e0 93 98 13 	sts	0x1398, r30	; 0x801398 <__brkval>
   16d16:	df 91       	pop	r29
   16d18:	cf 91       	pop	r28
   16d1a:	08 95       	ret
   16d1c:	ea 01       	movw	r28, r20
   16d1e:	ce 17       	cp	r28, r30
   16d20:	df 07       	cpc	r29, r31
   16d22:	e8 f5       	brcc	.+122    	; 0x16d9e <free+0xca>
   16d24:	4a 81       	ldd	r20, Y+2	; 0x02
   16d26:	5b 81       	ldd	r21, Y+3	; 0x03
   16d28:	9e 01       	movw	r18, r28
   16d2a:	41 15       	cp	r20, r1
   16d2c:	51 05       	cpc	r21, r1
   16d2e:	b1 f7       	brne	.-20     	; 0x16d1c <free+0x48>
   16d30:	e9 01       	movw	r28, r18
   16d32:	fb 83       	std	Y+3, r31	; 0x03
   16d34:	ea 83       	std	Y+2, r30	; 0x02
   16d36:	49 91       	ld	r20, Y+
   16d38:	59 91       	ld	r21, Y+
   16d3a:	c4 0f       	add	r28, r20
   16d3c:	d5 1f       	adc	r29, r21
   16d3e:	ec 17       	cp	r30, r28
   16d40:	fd 07       	cpc	r31, r29
   16d42:	61 f4       	brne	.+24     	; 0x16d5c <free+0x88>
   16d44:	80 81       	ld	r24, Z
   16d46:	91 81       	ldd	r25, Z+1	; 0x01
   16d48:	02 96       	adiw	r24, 0x02	; 2
   16d4a:	84 0f       	add	r24, r20
   16d4c:	95 1f       	adc	r25, r21
   16d4e:	e9 01       	movw	r28, r18
   16d50:	99 83       	std	Y+1, r25	; 0x01
   16d52:	88 83       	st	Y, r24
   16d54:	82 81       	ldd	r24, Z+2	; 0x02
   16d56:	93 81       	ldd	r25, Z+3	; 0x03
   16d58:	9b 83       	std	Y+3, r25	; 0x03
   16d5a:	8a 83       	std	Y+2, r24	; 0x02
   16d5c:	f0 e0       	ldi	r31, 0x00	; 0
   16d5e:	e0 e0       	ldi	r30, 0x00	; 0
   16d60:	12 96       	adiw	r26, 0x02	; 2
   16d62:	8d 91       	ld	r24, X+
   16d64:	9c 91       	ld	r25, X
   16d66:	13 97       	sbiw	r26, 0x03	; 3
   16d68:	00 97       	sbiw	r24, 0x00	; 0
   16d6a:	b9 f5       	brne	.+110    	; 0x16dda <free+0x106>
   16d6c:	2d 91       	ld	r18, X+
   16d6e:	3c 91       	ld	r19, X
   16d70:	11 97       	sbiw	r26, 0x01	; 1
   16d72:	cd 01       	movw	r24, r26
   16d74:	02 96       	adiw	r24, 0x02	; 2
   16d76:	82 0f       	add	r24, r18
   16d78:	93 1f       	adc	r25, r19
   16d7a:	20 91 98 13 	lds	r18, 0x1398	; 0x801398 <__brkval>
   16d7e:	30 91 99 13 	lds	r19, 0x1399	; 0x801399 <__brkval+0x1>
   16d82:	28 17       	cp	r18, r24
   16d84:	39 07       	cpc	r19, r25
   16d86:	39 f6       	brne	.-114    	; 0x16d16 <free+0x42>
   16d88:	30 97       	sbiw	r30, 0x00	; 0
   16d8a:	51 f5       	brne	.+84     	; 0x16de0 <free+0x10c>
   16d8c:	10 92 9b 13 	sts	0x139B, r1	; 0x80139b <__flp+0x1>
   16d90:	10 92 9a 13 	sts	0x139A, r1	; 0x80139a <__flp>
   16d94:	b0 93 99 13 	sts	0x1399, r27	; 0x801399 <__brkval+0x1>
   16d98:	a0 93 98 13 	sts	0x1398, r26	; 0x801398 <__brkval>
   16d9c:	bc cf       	rjmp	.-136    	; 0x16d16 <free+0x42>
   16d9e:	d3 83       	std	Z+3, r29	; 0x03
   16da0:	c2 83       	std	Z+2, r28	; 0x02
   16da2:	40 81       	ld	r20, Z
   16da4:	51 81       	ldd	r21, Z+1	; 0x01
   16da6:	84 0f       	add	r24, r20
   16da8:	95 1f       	adc	r25, r21
   16daa:	c8 17       	cp	r28, r24
   16dac:	d9 07       	cpc	r29, r25
   16dae:	61 f4       	brne	.+24     	; 0x16dc8 <free+0xf4>
   16db0:	4e 5f       	subi	r20, 0xFE	; 254
   16db2:	5f 4f       	sbci	r21, 0xFF	; 255
   16db4:	88 81       	ld	r24, Y
   16db6:	99 81       	ldd	r25, Y+1	; 0x01
   16db8:	48 0f       	add	r20, r24
   16dba:	59 1f       	adc	r21, r25
   16dbc:	51 83       	std	Z+1, r21	; 0x01
   16dbe:	40 83       	st	Z, r20
   16dc0:	8a 81       	ldd	r24, Y+2	; 0x02
   16dc2:	9b 81       	ldd	r25, Y+3	; 0x03
   16dc4:	93 83       	std	Z+3, r25	; 0x03
   16dc6:	82 83       	std	Z+2, r24	; 0x02
   16dc8:	21 15       	cp	r18, r1
   16dca:	31 05       	cpc	r19, r1
   16dcc:	09 f0       	breq	.+2      	; 0x16dd0 <free+0xfc>
   16dce:	b0 cf       	rjmp	.-160    	; 0x16d30 <free+0x5c>
   16dd0:	f0 93 9b 13 	sts	0x139B, r31	; 0x80139b <__flp+0x1>
   16dd4:	e0 93 9a 13 	sts	0x139A, r30	; 0x80139a <__flp>
   16dd8:	9e cf       	rjmp	.-196    	; 0x16d16 <free+0x42>
   16dda:	fd 01       	movw	r30, r26
   16ddc:	dc 01       	movw	r26, r24
   16dde:	c0 cf       	rjmp	.-128    	; 0x16d60 <free+0x8c>
   16de0:	13 82       	std	Z+3, r1	; 0x03
   16de2:	12 82       	std	Z+2, r1	; 0x02
   16de4:	d7 cf       	rjmp	.-82     	; 0x16d94 <free+0xc0>

00016de6 <strtod>:
strtod():
   16de6:	8f 92       	push	r8
   16de8:	9f 92       	push	r9
   16dea:	af 92       	push	r10
   16dec:	bf 92       	push	r11
   16dee:	cf 92       	push	r12
   16df0:	df 92       	push	r13
   16df2:	ef 92       	push	r14
   16df4:	ff 92       	push	r15
   16df6:	0f 93       	push	r16
   16df8:	1f 93       	push	r17
   16dfa:	cf 93       	push	r28
   16dfc:	df 93       	push	r29
   16dfe:	5c 01       	movw	r10, r24
   16e00:	7b 01       	movw	r14, r22
   16e02:	61 15       	cp	r22, r1
   16e04:	71 05       	cpc	r23, r1
   16e06:	19 f0       	breq	.+6      	; 0x16e0e <strtod+0x28>
   16e08:	db 01       	movw	r26, r22
   16e0a:	8d 93       	st	X+, r24
   16e0c:	9c 93       	st	X, r25
   16e0e:	85 01       	movw	r16, r10
   16e10:	0f 5f       	subi	r16, 0xFF	; 255
   16e12:	1f 4f       	sbci	r17, 0xFF	; 255
   16e14:	f5 01       	movw	r30, r10
   16e16:	d0 81       	ld	r29, Z
   16e18:	8d 2f       	mov	r24, r29
   16e1a:	90 e0       	ldi	r25, 0x00	; 0
   16e1c:	0e 94 6e b1 	call	0x162dc	; 0x162dc <isspace>
   16e20:	6c 01       	movw	r12, r24
   16e22:	89 2b       	or	r24, r25
   16e24:	b9 f5       	brne	.+110    	; 0x16e94 <strtod+0xae>
   16e26:	dd 32       	cpi	r29, 0x2D	; 45
   16e28:	b9 f5       	brne	.+110    	; 0x16e98 <strtod+0xb2>
   16e2a:	0f 5f       	subi	r16, 0xFF	; 255
   16e2c:	1f 4f       	sbci	r17, 0xFF	; 255
   16e2e:	d5 01       	movw	r26, r10
   16e30:	11 96       	adiw	r26, 0x01	; 1
   16e32:	dc 91       	ld	r29, X
   16e34:	c1 e0       	ldi	r28, 0x01	; 1
   16e36:	58 01       	movw	r10, r16
   16e38:	f1 e0       	ldi	r31, 0x01	; 1
   16e3a:	af 1a       	sub	r10, r31
   16e3c:	b1 08       	sbc	r11, r1
   16e3e:	43 e0       	ldi	r20, 0x03	; 3
   16e40:	50 e0       	ldi	r21, 0x00	; 0
   16e42:	64 e7       	ldi	r22, 0x74	; 116
   16e44:	73 e0       	ldi	r23, 0x03	; 3
   16e46:	c5 01       	movw	r24, r10
   16e48:	0e 94 2c b9 	call	0x17258	; 0x17258 <strncasecmp_P>
   16e4c:	89 2b       	or	r24, r25
   16e4e:	69 f5       	brne	.+90     	; 0x16eaa <strtod+0xc4>
   16e50:	68 01       	movw	r12, r16
   16e52:	82 e0       	ldi	r24, 0x02	; 2
   16e54:	c8 0e       	add	r12, r24
   16e56:	d1 1c       	adc	r13, r1
   16e58:	45 e0       	ldi	r20, 0x05	; 5
   16e5a:	50 e0       	ldi	r21, 0x00	; 0
   16e5c:	6f e6       	ldi	r22, 0x6F	; 111
   16e5e:	73 e0       	ldi	r23, 0x03	; 3
   16e60:	c6 01       	movw	r24, r12
   16e62:	0e 94 2c b9 	call	0x17258	; 0x17258 <strncasecmp_P>
   16e66:	89 2b       	or	r24, r25
   16e68:	21 f4       	brne	.+8      	; 0x16e72 <strtod+0x8c>
   16e6a:	68 01       	movw	r12, r16
   16e6c:	97 e0       	ldi	r25, 0x07	; 7
   16e6e:	c9 0e       	add	r12, r25
   16e70:	d1 1c       	adc	r13, r1
   16e72:	e1 14       	cp	r14, r1
   16e74:	f1 04       	cpc	r15, r1
   16e76:	19 f0       	breq	.+6      	; 0x16e7e <strtod+0x98>
   16e78:	d7 01       	movw	r26, r14
   16e7a:	cd 92       	st	X+, r12
   16e7c:	dc 92       	st	X, r13
   16e7e:	60 e0       	ldi	r22, 0x00	; 0
   16e80:	70 e0       	ldi	r23, 0x00	; 0
   16e82:	80 e8       	ldi	r24, 0x80	; 128
   16e84:	9f ef       	ldi	r25, 0xFF	; 255
   16e86:	c1 11       	cpse	r28, r1
   16e88:	ff c0       	rjmp	.+510    	; 0x17088 <strtod+0x2a2>
   16e8a:	60 e0       	ldi	r22, 0x00	; 0
   16e8c:	70 e0       	ldi	r23, 0x00	; 0
   16e8e:	80 e8       	ldi	r24, 0x80	; 128
   16e90:	9f e7       	ldi	r25, 0x7F	; 127
   16e92:	fa c0       	rjmp	.+500    	; 0x17088 <strtod+0x2a2>
   16e94:	58 01       	movw	r10, r16
   16e96:	bb cf       	rjmp	.-138    	; 0x16e0e <strtod+0x28>
   16e98:	db 32       	cpi	r29, 0x2B	; 43
   16e9a:	29 f4       	brne	.+10     	; 0x16ea6 <strtod+0xc0>
   16e9c:	85 01       	movw	r16, r10
   16e9e:	0e 5f       	subi	r16, 0xFE	; 254
   16ea0:	1f 4f       	sbci	r17, 0xFF	; 255
   16ea2:	f5 01       	movw	r30, r10
   16ea4:	d1 81       	ldd	r29, Z+1	; 0x01
   16ea6:	c0 e0       	ldi	r28, 0x00	; 0
   16ea8:	c6 cf       	rjmp	.-116    	; 0x16e36 <strtod+0x50>
   16eaa:	43 e0       	ldi	r20, 0x03	; 3
   16eac:	50 e0       	ldi	r21, 0x00	; 0
   16eae:	6c e6       	ldi	r22, 0x6C	; 108
   16eb0:	73 e0       	ldi	r23, 0x03	; 3
   16eb2:	c5 01       	movw	r24, r10
   16eb4:	0e 94 2c b9 	call	0x17258	; 0x17258 <strncasecmp_P>
   16eb8:	89 2b       	or	r24, r25
   16eba:	e9 f0       	breq	.+58     	; 0x16ef6 <strtod+0x110>
   16ebc:	f8 01       	movw	r30, r16
   16ebe:	10 e0       	ldi	r17, 0x00	; 0
   16ec0:	00 e0       	ldi	r16, 0x00	; 0
   16ec2:	20 e0       	ldi	r18, 0x00	; 0
   16ec4:	30 e0       	ldi	r19, 0x00	; 0
   16ec6:	a9 01       	movw	r20, r18
   16ec8:	5f 01       	movw	r10, r30
   16eca:	b0 ed       	ldi	r27, 0xD0	; 208
   16ecc:	8b 2e       	mov	r8, r27
   16ece:	8d 0e       	add	r8, r29
   16ed0:	89 e0       	ldi	r24, 0x09	; 9
   16ed2:	88 15       	cp	r24, r8
   16ed4:	c8 f1       	brcs	.+114    	; 0x16f48 <strtod+0x162>
   16ed6:	9c 2e       	mov	r9, r28
   16ed8:	68 94       	set
   16eda:	91 f8       	bld	r9, 1
   16edc:	8c 2f       	mov	r24, r28
   16ede:	88 70       	andi	r24, 0x08	; 8
   16ee0:	c2 ff       	sbrs	r28, 2
   16ee2:	16 c0       	rjmp	.+44     	; 0x16f10 <strtod+0x12a>
   16ee4:	81 11       	cpse	r24, r1
   16ee6:	02 c0       	rjmp	.+4      	; 0x16eec <strtod+0x106>
   16ee8:	0f 5f       	subi	r16, 0xFF	; 255
   16eea:	1f 4f       	sbci	r17, 0xFF	; 255
   16eec:	31 96       	adiw	r30, 0x01	; 1
   16eee:	d5 01       	movw	r26, r10
   16ef0:	dc 91       	ld	r29, X
   16ef2:	c9 2d       	mov	r28, r9
   16ef4:	e9 cf       	rjmp	.-46     	; 0x16ec8 <strtod+0xe2>
   16ef6:	e1 14       	cp	r14, r1
   16ef8:	f1 04       	cpc	r15, r1
   16efa:	29 f0       	breq	.+10     	; 0x16f06 <strtod+0x120>
   16efc:	0e 5f       	subi	r16, 0xFE	; 254
   16efe:	1f 4f       	sbci	r17, 0xFF	; 255
   16f00:	f7 01       	movw	r30, r14
   16f02:	11 83       	std	Z+1, r17	; 0x01
   16f04:	00 83       	st	Z, r16
   16f06:	60 e0       	ldi	r22, 0x00	; 0
   16f08:	70 e0       	ldi	r23, 0x00	; 0
   16f0a:	80 ec       	ldi	r24, 0xC0	; 192
   16f0c:	9f e7       	ldi	r25, 0x7F	; 127
   16f0e:	bc c0       	rjmp	.+376    	; 0x17088 <strtod+0x2a2>
   16f10:	88 23       	and	r24, r24
   16f12:	11 f0       	breq	.+4      	; 0x16f18 <strtod+0x132>
   16f14:	01 50       	subi	r16, 0x01	; 1
   16f16:	11 09       	sbc	r17, r1
   16f18:	a5 e0       	ldi	r26, 0x05	; 5
   16f1a:	b0 e0       	ldi	r27, 0x00	; 0
   16f1c:	0e 94 b2 bb 	call	0x17764	; 0x17764 <__muluhisi3>
   16f20:	9b 01       	movw	r18, r22
   16f22:	ac 01       	movw	r20, r24
   16f24:	22 0f       	add	r18, r18
   16f26:	33 1f       	adc	r19, r19
   16f28:	44 1f       	adc	r20, r20
   16f2a:	55 1f       	adc	r21, r21
   16f2c:	28 0d       	add	r18, r8
   16f2e:	31 1d       	adc	r19, r1
   16f30:	41 1d       	adc	r20, r1
   16f32:	51 1d       	adc	r21, r1
   16f34:	28 39       	cpi	r18, 0x98	; 152
   16f36:	99 e9       	ldi	r25, 0x99	; 153
   16f38:	39 07       	cpc	r19, r25
   16f3a:	49 07       	cpc	r20, r25
   16f3c:	99 e1       	ldi	r25, 0x19	; 25
   16f3e:	59 07       	cpc	r21, r25
   16f40:	a8 f2       	brcs	.-86     	; 0x16eec <strtod+0x106>
   16f42:	c6 60       	ori	r28, 0x06	; 6
   16f44:	9c 2e       	mov	r9, r28
   16f46:	d2 cf       	rjmp	.-92     	; 0x16eec <strtod+0x106>
   16f48:	ae ef       	ldi	r26, 0xFE	; 254
   16f4a:	8a 12       	cpse	r8, r26
   16f4c:	06 c0       	rjmp	.+12     	; 0x16f5a <strtod+0x174>
   16f4e:	c3 fd       	sbrc	r28, 3
   16f50:	3c c0       	rjmp	.+120    	; 0x16fca <strtod+0x1e4>
   16f52:	9c 2e       	mov	r9, r28
   16f54:	68 94       	set
   16f56:	93 f8       	bld	r9, 3
   16f58:	c9 cf       	rjmp	.-110    	; 0x16eec <strtod+0x106>
   16f5a:	df 7d       	andi	r29, 0xDF	; 223
   16f5c:	d5 34       	cpi	r29, 0x45	; 69
   16f5e:	a9 f5       	brne	.+106    	; 0x16fca <strtod+0x1e4>
   16f60:	80 81       	ld	r24, Z
   16f62:	8d 32       	cpi	r24, 0x2D	; 45
   16f64:	39 f4       	brne	.+14     	; 0x16f74 <strtod+0x18e>
   16f66:	c0 61       	ori	r28, 0x10	; 16
   16f68:	df 01       	movw	r26, r30
   16f6a:	12 96       	adiw	r26, 0x02	; 2
   16f6c:	81 81       	ldd	r24, Z+1	; 0x01
   16f6e:	62 e0       	ldi	r22, 0x02	; 2
   16f70:	70 e0       	ldi	r23, 0x00	; 0
   16f72:	06 c0       	rjmp	.+12     	; 0x16f80 <strtod+0x19a>
   16f74:	df 01       	movw	r26, r30
   16f76:	8b 32       	cpi	r24, 0x2B	; 43
   16f78:	c1 f3       	breq	.-16     	; 0x16f6a <strtod+0x184>
   16f7a:	11 96       	adiw	r26, 0x01	; 1
   16f7c:	61 e0       	ldi	r22, 0x01	; 1
   16f7e:	70 e0       	ldi	r23, 0x00	; 0
   16f80:	80 53       	subi	r24, 0x30	; 48
   16f82:	5d 01       	movw	r10, r26
   16f84:	a6 1a       	sub	r10, r22
   16f86:	b7 0a       	sbc	r11, r23
   16f88:	8a 30       	cpi	r24, 0x0A	; 10
   16f8a:	f8 f4       	brcc	.+62     	; 0x16fca <strtod+0x1e4>
   16f8c:	e0 e8       	ldi	r30, 0x80	; 128
   16f8e:	ce 16       	cp	r12, r30
   16f90:	ec e0       	ldi	r30, 0x0C	; 12
   16f92:	de 06       	cpc	r13, r30
   16f94:	5c f4       	brge	.+22     	; 0x16fac <strtod+0x1c6>
   16f96:	b6 01       	movw	r22, r12
   16f98:	66 0f       	add	r22, r22
   16f9a:	77 1f       	adc	r23, r23
   16f9c:	66 0f       	add	r22, r22
   16f9e:	77 1f       	adc	r23, r23
   16fa0:	c6 0e       	add	r12, r22
   16fa2:	d7 1e       	adc	r13, r23
   16fa4:	cc 0c       	add	r12, r12
   16fa6:	dd 1c       	adc	r13, r13
   16fa8:	c8 0e       	add	r12, r24
   16faa:	d1 1c       	adc	r13, r1
   16fac:	5d 01       	movw	r10, r26
   16fae:	ff ef       	ldi	r31, 0xFF	; 255
   16fb0:	af 1a       	sub	r10, r31
   16fb2:	bf 0a       	sbc	r11, r31
   16fb4:	8c 91       	ld	r24, X
   16fb6:	80 53       	subi	r24, 0x30	; 48
   16fb8:	8a 30       	cpi	r24, 0x0A	; 10
   16fba:	a8 f1       	brcs	.+106    	; 0x17026 <strtod+0x240>
   16fbc:	c4 ff       	sbrs	r28, 4
   16fbe:	03 c0       	rjmp	.+6      	; 0x16fc6 <strtod+0x1e0>
   16fc0:	d1 94       	neg	r13
   16fc2:	c1 94       	neg	r12
   16fc4:	d1 08       	sbc	r13, r1
   16fc6:	0c 0d       	add	r16, r12
   16fc8:	1d 1d       	adc	r17, r13
   16fca:	c1 ff       	sbrs	r28, 1
   16fcc:	09 c0       	rjmp	.+18     	; 0x16fe0 <strtod+0x1fa>
   16fce:	e1 14       	cp	r14, r1
   16fd0:	f1 04       	cpc	r15, r1
   16fd2:	31 f0       	breq	.+12     	; 0x16fe0 <strtod+0x1fa>
   16fd4:	81 e0       	ldi	r24, 0x01	; 1
   16fd6:	a8 1a       	sub	r10, r24
   16fd8:	b1 08       	sbc	r11, r1
   16fda:	d7 01       	movw	r26, r14
   16fdc:	ad 92       	st	X+, r10
   16fde:	bc 92       	st	X, r11
   16fe0:	ca 01       	movw	r24, r20
   16fe2:	b9 01       	movw	r22, r18
   16fe4:	0e 94 04 ba 	call	0x17408	; 0x17408 <__floatunsisf>
   16fe8:	c3 70       	andi	r28, 0x03	; 3
   16fea:	c3 30       	cpi	r28, 0x03	; 3
   16fec:	09 f4       	brne	.+2      	; 0x16ff0 <strtod+0x20a>
   16fee:	90 58       	subi	r25, 0x80	; 128
   16ff0:	4b 01       	movw	r8, r22
   16ff2:	5c 01       	movw	r10, r24
   16ff4:	20 e0       	ldi	r18, 0x00	; 0
   16ff6:	30 e0       	ldi	r19, 0x00	; 0
   16ff8:	a9 01       	movw	r20, r18
   16ffa:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
   16ffe:	88 23       	and	r24, r24
   17000:	09 f4       	brne	.+2      	; 0x17004 <strtod+0x21e>
   17002:	40 c0       	rjmp	.+128    	; 0x17084 <strtod+0x29e>
   17004:	c3 ea       	ldi	r28, 0xA3	; 163
   17006:	d3 e0       	ldi	r29, 0x03	; 3
   17008:	17 ff       	sbrs	r17, 7
   1700a:	05 c0       	rjmp	.+10     	; 0x17016 <strtod+0x230>
   1700c:	11 95       	neg	r17
   1700e:	01 95       	neg	r16
   17010:	11 09       	sbc	r17, r1
   17012:	cb e8       	ldi	r28, 0x8B	; 139
   17014:	d3 e0       	ldi	r29, 0x03	; 3
   17016:	6e 01       	movw	r12, r28
   17018:	b8 e1       	ldi	r27, 0x18	; 24
   1701a:	cb 1a       	sub	r12, r27
   1701c:	d1 08       	sbc	r13, r1
   1701e:	80 e2       	ldi	r24, 0x20	; 32
   17020:	e8 2e       	mov	r14, r24
   17022:	f1 2c       	mov	r15, r1
   17024:	0f c0       	rjmp	.+30     	; 0x17044 <strtod+0x25e>
   17026:	d5 01       	movw	r26, r10
   17028:	b1 cf       	rjmp	.-158    	; 0x16f8c <strtod+0x1a6>
   1702a:	fe 01       	movw	r30, r28
   1702c:	25 91       	lpm	r18, Z+
   1702e:	35 91       	lpm	r19, Z+
   17030:	45 91       	lpm	r20, Z+
   17032:	54 91       	lpm	r21, Z
   17034:	0e 19       	sub	r16, r14
   17036:	1f 09       	sbc	r17, r15
   17038:	c5 01       	movw	r24, r10
   1703a:	b4 01       	movw	r22, r8
   1703c:	0e 94 65 ba 	call	0x174ca	; 0x174ca <__mulsf3>
   17040:	4b 01       	movw	r8, r22
   17042:	5c 01       	movw	r10, r24
   17044:	d5 01       	movw	r26, r10
   17046:	c4 01       	movw	r24, r8
   17048:	0e 15       	cp	r16, r14
   1704a:	1f 05       	cpc	r17, r15
   1704c:	74 f7       	brge	.-36     	; 0x1702a <strtod+0x244>
   1704e:	24 97       	sbiw	r28, 0x04	; 4
   17050:	f5 94       	asr	r15
   17052:	e7 94       	ror	r14
   17054:	cc 16       	cp	r12, r28
   17056:	dd 06       	cpc	r13, r29
   17058:	a9 f7       	brne	.-22     	; 0x17044 <strtod+0x25e>
   1705a:	8a 2f       	mov	r24, r26
   1705c:	88 0f       	add	r24, r24
   1705e:	8b 2f       	mov	r24, r27
   17060:	88 1f       	adc	r24, r24
   17062:	8f 3f       	cpi	r24, 0xFF	; 255
   17064:	49 f0       	breq	.+18     	; 0x17078 <strtod+0x292>
   17066:	20 e0       	ldi	r18, 0x00	; 0
   17068:	30 e0       	ldi	r19, 0x00	; 0
   1706a:	a9 01       	movw	r20, r18
   1706c:	c5 01       	movw	r24, r10
   1706e:	b4 01       	movw	r22, r8
   17070:	0e 94 ff b9 	call	0x173fe	; 0x173fe <__cmpsf2>
   17074:	81 11       	cpse	r24, r1
   17076:	06 c0       	rjmp	.+12     	; 0x17084 <strtod+0x29e>
   17078:	82 e2       	ldi	r24, 0x22	; 34
   1707a:	90 e0       	ldi	r25, 0x00	; 0
   1707c:	90 93 97 13 	sts	0x1397, r25	; 0x801397 <errno+0x1>
   17080:	80 93 96 13 	sts	0x1396, r24	; 0x801396 <errno>
   17084:	c5 01       	movw	r24, r10
   17086:	b4 01       	movw	r22, r8
   17088:	df 91       	pop	r29
   1708a:	cf 91       	pop	r28
   1708c:	1f 91       	pop	r17
   1708e:	0f 91       	pop	r16
   17090:	ff 90       	pop	r15
   17092:	ef 90       	pop	r14
   17094:	df 90       	pop	r13
   17096:	cf 90       	pop	r12
   17098:	bf 90       	pop	r11
   1709a:	af 90       	pop	r10
   1709c:	9f 90       	pop	r9
   1709e:	8f 90       	pop	r8
   170a0:	08 95       	ret

000170a2 <__ftoa_engine>:
__ftoa_engine():
   170a2:	28 30       	cpi	r18, 0x08	; 8
   170a4:	08 f0       	brcs	.+2      	; 0x170a8 <__ftoa_engine+0x6>
   170a6:	27 e0       	ldi	r18, 0x07	; 7
   170a8:	33 27       	eor	r19, r19
   170aa:	da 01       	movw	r26, r20
   170ac:	99 0f       	add	r25, r25
   170ae:	31 1d       	adc	r19, r1
   170b0:	87 fd       	sbrc	r24, 7
   170b2:	91 60       	ori	r25, 0x01	; 1
   170b4:	00 96       	adiw	r24, 0x00	; 0
   170b6:	61 05       	cpc	r22, r1
   170b8:	71 05       	cpc	r23, r1
   170ba:	39 f4       	brne	.+14     	; 0x170ca <__ftoa_engine+0x28>
   170bc:	32 60       	ori	r19, 0x02	; 2
   170be:	2e 5f       	subi	r18, 0xFE	; 254
   170c0:	3d 93       	st	X+, r19
   170c2:	30 e3       	ldi	r19, 0x30	; 48
   170c4:	2a 95       	dec	r18
   170c6:	e1 f7       	brne	.-8      	; 0x170c0 <__ftoa_engine+0x1e>
   170c8:	08 95       	ret
   170ca:	9f 3f       	cpi	r25, 0xFF	; 255
   170cc:	30 f0       	brcs	.+12     	; 0x170da <__ftoa_engine+0x38>
   170ce:	80 38       	cpi	r24, 0x80	; 128
   170d0:	71 05       	cpc	r23, r1
   170d2:	61 05       	cpc	r22, r1
   170d4:	09 f0       	breq	.+2      	; 0x170d8 <__ftoa_engine+0x36>
   170d6:	3c 5f       	subi	r19, 0xFC	; 252
   170d8:	3c 5f       	subi	r19, 0xFC	; 252
   170da:	3d 93       	st	X+, r19
   170dc:	91 30       	cpi	r25, 0x01	; 1
   170de:	08 f0       	brcs	.+2      	; 0x170e2 <__ftoa_engine+0x40>
   170e0:	80 68       	ori	r24, 0x80	; 128
   170e2:	91 1d       	adc	r25, r1
   170e4:	df 93       	push	r29
   170e6:	cf 93       	push	r28
   170e8:	1f 93       	push	r17
   170ea:	0f 93       	push	r16
   170ec:	ff 92       	push	r15
   170ee:	ef 92       	push	r14
   170f0:	19 2f       	mov	r17, r25
   170f2:	98 7f       	andi	r25, 0xF8	; 248
   170f4:	96 95       	lsr	r25
   170f6:	e9 2f       	mov	r30, r25
   170f8:	96 95       	lsr	r25
   170fa:	96 95       	lsr	r25
   170fc:	e9 0f       	add	r30, r25
   170fe:	ff 27       	eor	r31, r31
   17100:	ef 5f       	subi	r30, 0xFF	; 255
   17102:	fb 4f       	sbci	r31, 0xFB	; 251
   17104:	99 27       	eor	r25, r25
   17106:	33 27       	eor	r19, r19
   17108:	ee 24       	eor	r14, r14
   1710a:	ff 24       	eor	r15, r15
   1710c:	a7 01       	movw	r20, r14
   1710e:	e7 01       	movw	r28, r14
   17110:	05 90       	lpm	r0, Z+
   17112:	08 94       	sec
   17114:	07 94       	ror	r0
   17116:	28 f4       	brcc	.+10     	; 0x17122 <__ftoa_engine+0x80>
   17118:	36 0f       	add	r19, r22
   1711a:	e7 1e       	adc	r14, r23
   1711c:	f8 1e       	adc	r15, r24
   1711e:	49 1f       	adc	r20, r25
   17120:	51 1d       	adc	r21, r1
   17122:	66 0f       	add	r22, r22
   17124:	77 1f       	adc	r23, r23
   17126:	88 1f       	adc	r24, r24
   17128:	99 1f       	adc	r25, r25
   1712a:	06 94       	lsr	r0
   1712c:	a1 f7       	brne	.-24     	; 0x17116 <__ftoa_engine+0x74>
   1712e:	05 90       	lpm	r0, Z+
   17130:	07 94       	ror	r0
   17132:	28 f4       	brcc	.+10     	; 0x1713e <__ftoa_engine+0x9c>
   17134:	e7 0e       	add	r14, r23
   17136:	f8 1e       	adc	r15, r24
   17138:	49 1f       	adc	r20, r25
   1713a:	56 1f       	adc	r21, r22
   1713c:	c1 1d       	adc	r28, r1
   1713e:	77 0f       	add	r23, r23
   17140:	88 1f       	adc	r24, r24
   17142:	99 1f       	adc	r25, r25
   17144:	66 1f       	adc	r22, r22
   17146:	06 94       	lsr	r0
   17148:	a1 f7       	brne	.-24     	; 0x17132 <__ftoa_engine+0x90>
   1714a:	05 90       	lpm	r0, Z+
   1714c:	07 94       	ror	r0
   1714e:	28 f4       	brcc	.+10     	; 0x1715a <__ftoa_engine+0xb8>
   17150:	f8 0e       	add	r15, r24
   17152:	49 1f       	adc	r20, r25
   17154:	56 1f       	adc	r21, r22
   17156:	c7 1f       	adc	r28, r23
   17158:	d1 1d       	adc	r29, r1
   1715a:	88 0f       	add	r24, r24
   1715c:	99 1f       	adc	r25, r25
   1715e:	66 1f       	adc	r22, r22
   17160:	77 1f       	adc	r23, r23
   17162:	06 94       	lsr	r0
   17164:	a1 f7       	brne	.-24     	; 0x1714e <__ftoa_engine+0xac>
   17166:	05 90       	lpm	r0, Z+
   17168:	07 94       	ror	r0
   1716a:	20 f4       	brcc	.+8      	; 0x17174 <__ftoa_engine+0xd2>
   1716c:	49 0f       	add	r20, r25
   1716e:	56 1f       	adc	r21, r22
   17170:	c7 1f       	adc	r28, r23
   17172:	d8 1f       	adc	r29, r24
   17174:	99 0f       	add	r25, r25
   17176:	66 1f       	adc	r22, r22
   17178:	77 1f       	adc	r23, r23
   1717a:	88 1f       	adc	r24, r24
   1717c:	06 94       	lsr	r0
   1717e:	a9 f7       	brne	.-22     	; 0x1716a <__ftoa_engine+0xc8>
   17180:	84 91       	lpm	r24, Z
   17182:	10 95       	com	r17
   17184:	17 70       	andi	r17, 0x07	; 7
   17186:	41 f0       	breq	.+16     	; 0x17198 <__ftoa_engine+0xf6>
   17188:	d6 95       	lsr	r29
   1718a:	c7 95       	ror	r28
   1718c:	57 95       	ror	r21
   1718e:	47 95       	ror	r20
   17190:	f7 94       	ror	r15
   17192:	e7 94       	ror	r14
   17194:	1a 95       	dec	r17
   17196:	c1 f7       	brne	.-16     	; 0x17188 <__ftoa_engine+0xe6>
   17198:	e7 ea       	ldi	r30, 0xA7	; 167
   1719a:	f3 e0       	ldi	r31, 0x03	; 3
   1719c:	68 94       	set
   1719e:	15 90       	lpm	r1, Z+
   171a0:	15 91       	lpm	r17, Z+
   171a2:	35 91       	lpm	r19, Z+
   171a4:	65 91       	lpm	r22, Z+
   171a6:	95 91       	lpm	r25, Z+
   171a8:	05 90       	lpm	r0, Z+
   171aa:	7f e2       	ldi	r23, 0x2F	; 47
   171ac:	73 95       	inc	r23
   171ae:	e1 18       	sub	r14, r1
   171b0:	f1 0a       	sbc	r15, r17
   171b2:	43 0b       	sbc	r20, r19
   171b4:	56 0b       	sbc	r21, r22
   171b6:	c9 0b       	sbc	r28, r25
   171b8:	d0 09       	sbc	r29, r0
   171ba:	c0 f7       	brcc	.-16     	; 0x171ac <__ftoa_engine+0x10a>
   171bc:	e1 0c       	add	r14, r1
   171be:	f1 1e       	adc	r15, r17
   171c0:	43 1f       	adc	r20, r19
   171c2:	56 1f       	adc	r21, r22
   171c4:	c9 1f       	adc	r28, r25
   171c6:	d0 1d       	adc	r29, r0
   171c8:	7e f4       	brtc	.+30     	; 0x171e8 <__ftoa_engine+0x146>
   171ca:	70 33       	cpi	r23, 0x30	; 48
   171cc:	11 f4       	brne	.+4      	; 0x171d2 <__ftoa_engine+0x130>
   171ce:	8a 95       	dec	r24
   171d0:	e6 cf       	rjmp	.-52     	; 0x1719e <__ftoa_engine+0xfc>
   171d2:	e8 94       	clt
   171d4:	01 50       	subi	r16, 0x01	; 1
   171d6:	30 f0       	brcs	.+12     	; 0x171e4 <__ftoa_engine+0x142>
   171d8:	08 0f       	add	r16, r24
   171da:	0a f4       	brpl	.+2      	; 0x171de <__ftoa_engine+0x13c>
   171dc:	00 27       	eor	r16, r16
   171de:	02 17       	cp	r16, r18
   171e0:	08 f4       	brcc	.+2      	; 0x171e4 <__ftoa_engine+0x142>
   171e2:	20 2f       	mov	r18, r16
   171e4:	23 95       	inc	r18
   171e6:	02 2f       	mov	r16, r18
   171e8:	7a 33       	cpi	r23, 0x3A	; 58
   171ea:	28 f0       	brcs	.+10     	; 0x171f6 <__ftoa_engine+0x154>
   171ec:	79 e3       	ldi	r23, 0x39	; 57
   171ee:	7d 93       	st	X+, r23
   171f0:	2a 95       	dec	r18
   171f2:	e9 f7       	brne	.-6      	; 0x171ee <__ftoa_engine+0x14c>
   171f4:	10 c0       	rjmp	.+32     	; 0x17216 <__ftoa_engine+0x174>
   171f6:	7d 93       	st	X+, r23
   171f8:	2a 95       	dec	r18
   171fa:	89 f6       	brne	.-94     	; 0x1719e <__ftoa_engine+0xfc>
   171fc:	06 94       	lsr	r0
   171fe:	97 95       	ror	r25
   17200:	67 95       	ror	r22
   17202:	37 95       	ror	r19
   17204:	17 95       	ror	r17
   17206:	17 94       	ror	r1
   17208:	e1 18       	sub	r14, r1
   1720a:	f1 0a       	sbc	r15, r17
   1720c:	43 0b       	sbc	r20, r19
   1720e:	56 0b       	sbc	r21, r22
   17210:	c9 0b       	sbc	r28, r25
   17212:	d0 09       	sbc	r29, r0
   17214:	98 f0       	brcs	.+38     	; 0x1723c <__ftoa_engine+0x19a>
   17216:	23 95       	inc	r18
   17218:	7e 91       	ld	r23, -X
   1721a:	73 95       	inc	r23
   1721c:	7a 33       	cpi	r23, 0x3A	; 58
   1721e:	08 f0       	brcs	.+2      	; 0x17222 <__ftoa_engine+0x180>
   17220:	70 e3       	ldi	r23, 0x30	; 48
   17222:	7c 93       	st	X, r23
   17224:	20 13       	cpse	r18, r16
   17226:	b8 f7       	brcc	.-18     	; 0x17216 <__ftoa_engine+0x174>
   17228:	7e 91       	ld	r23, -X
   1722a:	70 61       	ori	r23, 0x10	; 16
   1722c:	7d 93       	st	X+, r23
   1722e:	30 f0       	brcs	.+12     	; 0x1723c <__ftoa_engine+0x19a>
   17230:	83 95       	inc	r24
   17232:	71 e3       	ldi	r23, 0x31	; 49
   17234:	7d 93       	st	X+, r23
   17236:	70 e3       	ldi	r23, 0x30	; 48
   17238:	2a 95       	dec	r18
   1723a:	e1 f7       	brne	.-8      	; 0x17234 <__ftoa_engine+0x192>
   1723c:	11 24       	eor	r1, r1
   1723e:	ef 90       	pop	r14
   17240:	ff 90       	pop	r15
   17242:	0f 91       	pop	r16
   17244:	1f 91       	pop	r17
   17246:	cf 91       	pop	r28
   17248:	df 91       	pop	r29
   1724a:	99 27       	eor	r25, r25
   1724c:	87 fd       	sbrc	r24, 7
   1724e:	90 95       	com	r25
   17250:	08 95       	ret

00017252 <__ctype_isfalse>:
__ctype_isfalse():
   17252:	99 27       	eor	r25, r25
   17254:	88 27       	eor	r24, r24

00017256 <__ctype_istrue>:
__ctype_istrue():
   17256:	08 95       	ret

00017258 <strncasecmp_P>:
strncasecmp_P():
   17258:	fb 01       	movw	r30, r22
   1725a:	dc 01       	movw	r26, r24
   1725c:	41 50       	subi	r20, 0x01	; 1
   1725e:	50 40       	sbci	r21, 0x00	; 0
   17260:	88 f0       	brcs	.+34     	; 0x17284 <strncasecmp_P+0x2c>
   17262:	8d 91       	ld	r24, X+
   17264:	81 34       	cpi	r24, 0x41	; 65
   17266:	1c f0       	brlt	.+6      	; 0x1726e <strncasecmp_P+0x16>
   17268:	8b 35       	cpi	r24, 0x5B	; 91
   1726a:	0c f4       	brge	.+2      	; 0x1726e <strncasecmp_P+0x16>
   1726c:	80 5e       	subi	r24, 0xE0	; 224
   1726e:	65 91       	lpm	r22, Z+
   17270:	61 34       	cpi	r22, 0x41	; 65
   17272:	1c f0       	brlt	.+6      	; 0x1727a <strncasecmp_P+0x22>
   17274:	6b 35       	cpi	r22, 0x5B	; 91
   17276:	0c f4       	brge	.+2      	; 0x1727a <strncasecmp_P+0x22>
   17278:	60 5e       	subi	r22, 0xE0	; 224
   1727a:	86 1b       	sub	r24, r22
   1727c:	61 11       	cpse	r22, r1
   1727e:	71 f3       	breq	.-36     	; 0x1725c <strncasecmp_P+0x4>
   17280:	99 0b       	sbc	r25, r25
   17282:	08 95       	ret
   17284:	88 1b       	sub	r24, r24
   17286:	fc cf       	rjmp	.-8      	; 0x17280 <strncasecmp_P+0x28>

00017288 <strnlen_P>:
strnlen_P():
   17288:	fc 01       	movw	r30, r24
   1728a:	05 90       	lpm	r0, Z+
   1728c:	61 50       	subi	r22, 0x01	; 1
   1728e:	70 40       	sbci	r23, 0x00	; 0
   17290:	01 10       	cpse	r0, r1
   17292:	d8 f7       	brcc	.-10     	; 0x1728a <strnlen_P+0x2>
   17294:	80 95       	com	r24
   17296:	90 95       	com	r25
   17298:	8e 0f       	add	r24, r30
   1729a:	9f 1f       	adc	r25, r31
   1729c:	08 95       	ret

0001729e <memset>:
memset():
   1729e:	dc 01       	movw	r26, r24
   172a0:	01 c0       	rjmp	.+2      	; 0x172a4 <memset+0x6>
   172a2:	6d 93       	st	X+, r22
   172a4:	41 50       	subi	r20, 0x01	; 1
   172a6:	50 40       	sbci	r21, 0x00	; 0
   172a8:	e0 f7       	brcc	.-8      	; 0x172a2 <memset+0x4>
   172aa:	08 95       	ret

000172ac <strnlen>:
strnlen():
   172ac:	fc 01       	movw	r30, r24
   172ae:	61 50       	subi	r22, 0x01	; 1
   172b0:	70 40       	sbci	r23, 0x00	; 0
   172b2:	01 90       	ld	r0, Z+
   172b4:	01 10       	cpse	r0, r1
   172b6:	d8 f7       	brcc	.-10     	; 0x172ae <strnlen+0x2>
   172b8:	80 95       	com	r24
   172ba:	90 95       	com	r25
   172bc:	8e 0f       	add	r24, r30
   172be:	9f 1f       	adc	r25, r31
   172c0:	08 95       	ret

000172c2 <strrev>:
strrev():
   172c2:	dc 01       	movw	r26, r24
   172c4:	fc 01       	movw	r30, r24
   172c6:	67 2f       	mov	r22, r23
   172c8:	71 91       	ld	r23, Z+
   172ca:	77 23       	and	r23, r23
   172cc:	e1 f7       	brne	.-8      	; 0x172c6 <strrev+0x4>
   172ce:	32 97       	sbiw	r30, 0x02	; 2
   172d0:	04 c0       	rjmp	.+8      	; 0x172da <strrev+0x18>
   172d2:	7c 91       	ld	r23, X
   172d4:	6d 93       	st	X+, r22
   172d6:	70 83       	st	Z, r23
   172d8:	62 91       	ld	r22, -Z
   172da:	ae 17       	cp	r26, r30
   172dc:	bf 07       	cpc	r27, r31
   172de:	c8 f3       	brcs	.-14     	; 0x172d2 <strrev+0x10>
   172e0:	08 95       	ret

000172e2 <fputc>:
fputc():
   172e2:	0f 93       	push	r16
   172e4:	1f 93       	push	r17
   172e6:	cf 93       	push	r28
   172e8:	df 93       	push	r29
   172ea:	18 2f       	mov	r17, r24
   172ec:	09 2f       	mov	r16, r25
   172ee:	eb 01       	movw	r28, r22
   172f0:	8b 81       	ldd	r24, Y+3	; 0x03
   172f2:	81 fd       	sbrc	r24, 1
   172f4:	09 c0       	rjmp	.+18     	; 0x17308 <fputc+0x26>
   172f6:	1f ef       	ldi	r17, 0xFF	; 255
   172f8:	0f ef       	ldi	r16, 0xFF	; 255
   172fa:	81 2f       	mov	r24, r17
   172fc:	90 2f       	mov	r25, r16
   172fe:	df 91       	pop	r29
   17300:	cf 91       	pop	r28
   17302:	1f 91       	pop	r17
   17304:	0f 91       	pop	r16
   17306:	08 95       	ret
   17308:	82 ff       	sbrs	r24, 2
   1730a:	14 c0       	rjmp	.+40     	; 0x17334 <fputc+0x52>
   1730c:	2e 81       	ldd	r18, Y+6	; 0x06
   1730e:	3f 81       	ldd	r19, Y+7	; 0x07
   17310:	8c 81       	ldd	r24, Y+4	; 0x04
   17312:	9d 81       	ldd	r25, Y+5	; 0x05
   17314:	28 17       	cp	r18, r24
   17316:	39 07       	cpc	r19, r25
   17318:	3c f4       	brge	.+14     	; 0x17328 <fputc+0x46>
   1731a:	e8 81       	ld	r30, Y
   1731c:	f9 81       	ldd	r31, Y+1	; 0x01
   1731e:	cf 01       	movw	r24, r30
   17320:	01 96       	adiw	r24, 0x01	; 1
   17322:	99 83       	std	Y+1, r25	; 0x01
   17324:	88 83       	st	Y, r24
   17326:	10 83       	st	Z, r17
   17328:	8e 81       	ldd	r24, Y+6	; 0x06
   1732a:	9f 81       	ldd	r25, Y+7	; 0x07
   1732c:	01 96       	adiw	r24, 0x01	; 1
   1732e:	9f 83       	std	Y+7, r25	; 0x07
   17330:	8e 83       	std	Y+6, r24	; 0x06
   17332:	e3 cf       	rjmp	.-58     	; 0x172fa <fputc+0x18>
   17334:	e8 85       	ldd	r30, Y+8	; 0x08
   17336:	f9 85       	ldd	r31, Y+9	; 0x09
   17338:	81 2f       	mov	r24, r17
   1733a:	19 95       	eicall
   1733c:	89 2b       	or	r24, r25
   1733e:	a1 f3       	breq	.-24     	; 0x17328 <fputc+0x46>
   17340:	da cf       	rjmp	.-76     	; 0x172f6 <fputc+0x14>

00017342 <__ultoa_invert>:
__ultoa_invert():
   17342:	fa 01       	movw	r30, r20
   17344:	aa 27       	eor	r26, r26
   17346:	28 30       	cpi	r18, 0x08	; 8
   17348:	51 f1       	breq	.+84     	; 0x1739e <__ultoa_invert+0x5c>
   1734a:	20 31       	cpi	r18, 0x10	; 16
   1734c:	81 f1       	breq	.+96     	; 0x173ae <__ultoa_invert+0x6c>
   1734e:	e8 94       	clt
   17350:	6f 93       	push	r22
   17352:	6e 7f       	andi	r22, 0xFE	; 254
   17354:	6e 5f       	subi	r22, 0xFE	; 254
   17356:	7f 4f       	sbci	r23, 0xFF	; 255
   17358:	8f 4f       	sbci	r24, 0xFF	; 255
   1735a:	9f 4f       	sbci	r25, 0xFF	; 255
   1735c:	af 4f       	sbci	r26, 0xFF	; 255
   1735e:	b1 e0       	ldi	r27, 0x01	; 1
   17360:	3e d0       	rcall	.+124    	; 0x173de <__ultoa_invert+0x9c>
   17362:	b4 e0       	ldi	r27, 0x04	; 4
   17364:	3c d0       	rcall	.+120    	; 0x173de <__ultoa_invert+0x9c>
   17366:	67 0f       	add	r22, r23
   17368:	78 1f       	adc	r23, r24
   1736a:	89 1f       	adc	r24, r25
   1736c:	9a 1f       	adc	r25, r26
   1736e:	a1 1d       	adc	r26, r1
   17370:	68 0f       	add	r22, r24
   17372:	79 1f       	adc	r23, r25
   17374:	8a 1f       	adc	r24, r26
   17376:	91 1d       	adc	r25, r1
   17378:	a1 1d       	adc	r26, r1
   1737a:	6a 0f       	add	r22, r26
   1737c:	71 1d       	adc	r23, r1
   1737e:	81 1d       	adc	r24, r1
   17380:	91 1d       	adc	r25, r1
   17382:	a1 1d       	adc	r26, r1
   17384:	20 d0       	rcall	.+64     	; 0x173c6 <__ultoa_invert+0x84>
   17386:	09 f4       	brne	.+2      	; 0x1738a <__ultoa_invert+0x48>
   17388:	68 94       	set
   1738a:	3f 91       	pop	r19
   1738c:	2a e0       	ldi	r18, 0x0A	; 10
   1738e:	26 9f       	mul	r18, r22
   17390:	11 24       	eor	r1, r1
   17392:	30 19       	sub	r19, r0
   17394:	30 5d       	subi	r19, 0xD0	; 208
   17396:	31 93       	st	Z+, r19
   17398:	de f6       	brtc	.-74     	; 0x17350 <__ultoa_invert+0xe>
   1739a:	cf 01       	movw	r24, r30
   1739c:	08 95       	ret
   1739e:	46 2f       	mov	r20, r22
   173a0:	47 70       	andi	r20, 0x07	; 7
   173a2:	40 5d       	subi	r20, 0xD0	; 208
   173a4:	41 93       	st	Z+, r20
   173a6:	b3 e0       	ldi	r27, 0x03	; 3
   173a8:	0f d0       	rcall	.+30     	; 0x173c8 <__ultoa_invert+0x86>
   173aa:	c9 f7       	brne	.-14     	; 0x1739e <__ultoa_invert+0x5c>
   173ac:	f6 cf       	rjmp	.-20     	; 0x1739a <__ultoa_invert+0x58>
   173ae:	46 2f       	mov	r20, r22
   173b0:	4f 70       	andi	r20, 0x0F	; 15
   173b2:	40 5d       	subi	r20, 0xD0	; 208
   173b4:	4a 33       	cpi	r20, 0x3A	; 58
   173b6:	18 f0       	brcs	.+6      	; 0x173be <__ultoa_invert+0x7c>
   173b8:	49 5d       	subi	r20, 0xD9	; 217
   173ba:	31 fd       	sbrc	r19, 1
   173bc:	40 52       	subi	r20, 0x20	; 32
   173be:	41 93       	st	Z+, r20
   173c0:	02 d0       	rcall	.+4      	; 0x173c6 <__ultoa_invert+0x84>
   173c2:	a9 f7       	brne	.-22     	; 0x173ae <__ultoa_invert+0x6c>
   173c4:	ea cf       	rjmp	.-44     	; 0x1739a <__ultoa_invert+0x58>
   173c6:	b4 e0       	ldi	r27, 0x04	; 4
   173c8:	a6 95       	lsr	r26
   173ca:	97 95       	ror	r25
   173cc:	87 95       	ror	r24
   173ce:	77 95       	ror	r23
   173d0:	67 95       	ror	r22
   173d2:	ba 95       	dec	r27
   173d4:	c9 f7       	brne	.-14     	; 0x173c8 <__ultoa_invert+0x86>
   173d6:	00 97       	sbiw	r24, 0x00	; 0
   173d8:	61 05       	cpc	r22, r1
   173da:	71 05       	cpc	r23, r1
   173dc:	08 95       	ret
   173de:	9b 01       	movw	r18, r22
   173e0:	ac 01       	movw	r20, r24
   173e2:	0a 2e       	mov	r0, r26
   173e4:	06 94       	lsr	r0
   173e6:	57 95       	ror	r21
   173e8:	47 95       	ror	r20
   173ea:	37 95       	ror	r19
   173ec:	27 95       	ror	r18
   173ee:	ba 95       	dec	r27
   173f0:	c9 f7       	brne	.-14     	; 0x173e4 <__ultoa_invert+0xa2>
   173f2:	62 0f       	add	r22, r18
   173f4:	73 1f       	adc	r23, r19
   173f6:	84 1f       	adc	r24, r20
   173f8:	95 1f       	adc	r25, r21
   173fa:	a0 1d       	adc	r26, r0
   173fc:	08 95       	ret

000173fe <__cmpsf2>:
__cmpsf2():
   173fe:	0e 94 41 ba 	call	0x17482	; 0x17482 <__fp_cmp>
   17402:	08 f4       	brcc	.+2      	; 0x17406 <__cmpsf2+0x8>
   17404:	81 e0       	ldi	r24, 0x01	; 1
   17406:	08 95       	ret

00017408 <__floatunsisf>:
__floatunsisf():
   17408:	e8 94       	clt
   1740a:	09 c0       	rjmp	.+18     	; 0x1741e <__floatsisf+0x12>

0001740c <__floatsisf>:
   1740c:	97 fb       	bst	r25, 7
   1740e:	3e f4       	brtc	.+14     	; 0x1741e <__floatsisf+0x12>
   17410:	90 95       	com	r25
   17412:	80 95       	com	r24
   17414:	70 95       	com	r23
   17416:	61 95       	neg	r22
   17418:	7f 4f       	sbci	r23, 0xFF	; 255
   1741a:	8f 4f       	sbci	r24, 0xFF	; 255
   1741c:	9f 4f       	sbci	r25, 0xFF	; 255
   1741e:	99 23       	and	r25, r25
   17420:	a9 f0       	breq	.+42     	; 0x1744c <__floatsisf+0x40>
   17422:	f9 2f       	mov	r31, r25
   17424:	96 e9       	ldi	r25, 0x96	; 150
   17426:	bb 27       	eor	r27, r27
   17428:	93 95       	inc	r25
   1742a:	f6 95       	lsr	r31
   1742c:	87 95       	ror	r24
   1742e:	77 95       	ror	r23
   17430:	67 95       	ror	r22
   17432:	b7 95       	ror	r27
   17434:	f1 11       	cpse	r31, r1
   17436:	f8 cf       	rjmp	.-16     	; 0x17428 <__floatsisf+0x1c>
   17438:	fa f4       	brpl	.+62     	; 0x17478 <__floatsisf+0x6c>
   1743a:	bb 0f       	add	r27, r27
   1743c:	11 f4       	brne	.+4      	; 0x17442 <__floatsisf+0x36>
   1743e:	60 ff       	sbrs	r22, 0
   17440:	1b c0       	rjmp	.+54     	; 0x17478 <__floatsisf+0x6c>
   17442:	6f 5f       	subi	r22, 0xFF	; 255
   17444:	7f 4f       	sbci	r23, 0xFF	; 255
   17446:	8f 4f       	sbci	r24, 0xFF	; 255
   17448:	9f 4f       	sbci	r25, 0xFF	; 255
   1744a:	16 c0       	rjmp	.+44     	; 0x17478 <__floatsisf+0x6c>
   1744c:	88 23       	and	r24, r24
   1744e:	11 f0       	breq	.+4      	; 0x17454 <__floatsisf+0x48>
   17450:	96 e9       	ldi	r25, 0x96	; 150
   17452:	11 c0       	rjmp	.+34     	; 0x17476 <__floatsisf+0x6a>
   17454:	77 23       	and	r23, r23
   17456:	21 f0       	breq	.+8      	; 0x17460 <__floatsisf+0x54>
   17458:	9e e8       	ldi	r25, 0x8E	; 142
   1745a:	87 2f       	mov	r24, r23
   1745c:	76 2f       	mov	r23, r22
   1745e:	05 c0       	rjmp	.+10     	; 0x1746a <__floatsisf+0x5e>
   17460:	66 23       	and	r22, r22
   17462:	71 f0       	breq	.+28     	; 0x17480 <__floatsisf+0x74>
   17464:	96 e8       	ldi	r25, 0x86	; 134
   17466:	86 2f       	mov	r24, r22
   17468:	70 e0       	ldi	r23, 0x00	; 0
   1746a:	60 e0       	ldi	r22, 0x00	; 0
   1746c:	2a f0       	brmi	.+10     	; 0x17478 <__floatsisf+0x6c>
   1746e:	9a 95       	dec	r25
   17470:	66 0f       	add	r22, r22
   17472:	77 1f       	adc	r23, r23
   17474:	88 1f       	adc	r24, r24
   17476:	da f7       	brpl	.-10     	; 0x1746e <__floatsisf+0x62>
   17478:	88 0f       	add	r24, r24
   1747a:	96 95       	lsr	r25
   1747c:	87 95       	ror	r24
   1747e:	97 f9       	bld	r25, 7
   17480:	08 95       	ret

00017482 <__fp_cmp>:
__fp_cmp():
   17482:	99 0f       	add	r25, r25
   17484:	00 08       	sbc	r0, r0
   17486:	55 0f       	add	r21, r21
   17488:	aa 0b       	sbc	r26, r26
   1748a:	e0 e8       	ldi	r30, 0x80	; 128
   1748c:	fe ef       	ldi	r31, 0xFE	; 254
   1748e:	16 16       	cp	r1, r22
   17490:	17 06       	cpc	r1, r23
   17492:	e8 07       	cpc	r30, r24
   17494:	f9 07       	cpc	r31, r25
   17496:	c0 f0       	brcs	.+48     	; 0x174c8 <__fp_cmp+0x46>
   17498:	12 16       	cp	r1, r18
   1749a:	13 06       	cpc	r1, r19
   1749c:	e4 07       	cpc	r30, r20
   1749e:	f5 07       	cpc	r31, r21
   174a0:	98 f0       	brcs	.+38     	; 0x174c8 <__fp_cmp+0x46>
   174a2:	62 1b       	sub	r22, r18
   174a4:	73 0b       	sbc	r23, r19
   174a6:	84 0b       	sbc	r24, r20
   174a8:	95 0b       	sbc	r25, r21
   174aa:	39 f4       	brne	.+14     	; 0x174ba <__fp_cmp+0x38>
   174ac:	0a 26       	eor	r0, r26
   174ae:	61 f0       	breq	.+24     	; 0x174c8 <__fp_cmp+0x46>
   174b0:	23 2b       	or	r18, r19
   174b2:	24 2b       	or	r18, r20
   174b4:	25 2b       	or	r18, r21
   174b6:	21 f4       	brne	.+8      	; 0x174c0 <__fp_cmp+0x3e>
   174b8:	08 95       	ret
   174ba:	0a 26       	eor	r0, r26
   174bc:	09 f4       	brne	.+2      	; 0x174c0 <__fp_cmp+0x3e>
   174be:	a1 40       	sbci	r26, 0x01	; 1
   174c0:	a6 95       	lsr	r26
   174c2:	8f ef       	ldi	r24, 0xFF	; 255
   174c4:	81 1d       	adc	r24, r1
   174c6:	81 1d       	adc	r24, r1
   174c8:	08 95       	ret

000174ca <__mulsf3>:
__mulsf3():
   174ca:	0e 94 78 ba 	call	0x174f0	; 0x174f0 <__mulsf3x>
   174ce:	0c 94 e9 ba 	jmp	0x175d2	; 0x175d2 <__fp_round>
   174d2:	0e 94 db ba 	call	0x175b6	; 0x175b6 <__fp_pscA>
   174d6:	38 f0       	brcs	.+14     	; 0x174e6 <__mulsf3+0x1c>
   174d8:	0e 94 e2 ba 	call	0x175c4	; 0x175c4 <__fp_pscB>
   174dc:	20 f0       	brcs	.+8      	; 0x174e6 <__mulsf3+0x1c>
   174de:	95 23       	and	r25, r21
   174e0:	11 f0       	breq	.+4      	; 0x174e6 <__mulsf3+0x1c>
   174e2:	0c 94 d2 ba 	jmp	0x175a4	; 0x175a4 <__fp_inf>
   174e6:	0c 94 d8 ba 	jmp	0x175b0	; 0x175b0 <__fp_nan>
   174ea:	11 24       	eor	r1, r1
   174ec:	0c 94 1d bb 	jmp	0x1763a	; 0x1763a <__fp_szero>

000174f0 <__mulsf3x>:
__mulsf3x():
   174f0:	0e 94 fa ba 	call	0x175f4	; 0x175f4 <__fp_split3>
   174f4:	70 f3       	brcs	.-36     	; 0x174d2 <__mulsf3+0x8>

000174f6 <__mulsf3_pse>:
   174f6:	95 9f       	mul	r25, r21
   174f8:	c1 f3       	breq	.-16     	; 0x174ea <__mulsf3+0x20>
   174fa:	95 0f       	add	r25, r21
   174fc:	50 e0       	ldi	r21, 0x00	; 0
   174fe:	55 1f       	adc	r21, r21
   17500:	62 9f       	mul	r22, r18
   17502:	f0 01       	movw	r30, r0
   17504:	72 9f       	mul	r23, r18
   17506:	bb 27       	eor	r27, r27
   17508:	f0 0d       	add	r31, r0
   1750a:	b1 1d       	adc	r27, r1
   1750c:	63 9f       	mul	r22, r19
   1750e:	aa 27       	eor	r26, r26
   17510:	f0 0d       	add	r31, r0
   17512:	b1 1d       	adc	r27, r1
   17514:	aa 1f       	adc	r26, r26
   17516:	64 9f       	mul	r22, r20
   17518:	66 27       	eor	r22, r22
   1751a:	b0 0d       	add	r27, r0
   1751c:	a1 1d       	adc	r26, r1
   1751e:	66 1f       	adc	r22, r22
   17520:	82 9f       	mul	r24, r18
   17522:	22 27       	eor	r18, r18
   17524:	b0 0d       	add	r27, r0
   17526:	a1 1d       	adc	r26, r1
   17528:	62 1f       	adc	r22, r18
   1752a:	73 9f       	mul	r23, r19
   1752c:	b0 0d       	add	r27, r0
   1752e:	a1 1d       	adc	r26, r1
   17530:	62 1f       	adc	r22, r18
   17532:	83 9f       	mul	r24, r19
   17534:	a0 0d       	add	r26, r0
   17536:	61 1d       	adc	r22, r1
   17538:	22 1f       	adc	r18, r18
   1753a:	74 9f       	mul	r23, r20
   1753c:	33 27       	eor	r19, r19
   1753e:	a0 0d       	add	r26, r0
   17540:	61 1d       	adc	r22, r1
   17542:	23 1f       	adc	r18, r19
   17544:	84 9f       	mul	r24, r20
   17546:	60 0d       	add	r22, r0
   17548:	21 1d       	adc	r18, r1
   1754a:	82 2f       	mov	r24, r18
   1754c:	76 2f       	mov	r23, r22
   1754e:	6a 2f       	mov	r22, r26
   17550:	11 24       	eor	r1, r1
   17552:	9f 57       	subi	r25, 0x7F	; 127
   17554:	50 40       	sbci	r21, 0x00	; 0
   17556:	9a f0       	brmi	.+38     	; 0x1757e <__mulsf3_pse+0x88>
   17558:	f1 f0       	breq	.+60     	; 0x17596 <__mulsf3_pse+0xa0>
   1755a:	88 23       	and	r24, r24
   1755c:	4a f0       	brmi	.+18     	; 0x17570 <__mulsf3_pse+0x7a>
   1755e:	ee 0f       	add	r30, r30
   17560:	ff 1f       	adc	r31, r31
   17562:	bb 1f       	adc	r27, r27
   17564:	66 1f       	adc	r22, r22
   17566:	77 1f       	adc	r23, r23
   17568:	88 1f       	adc	r24, r24
   1756a:	91 50       	subi	r25, 0x01	; 1
   1756c:	50 40       	sbci	r21, 0x00	; 0
   1756e:	a9 f7       	brne	.-22     	; 0x1755a <__mulsf3_pse+0x64>
   17570:	9e 3f       	cpi	r25, 0xFE	; 254
   17572:	51 05       	cpc	r21, r1
   17574:	80 f0       	brcs	.+32     	; 0x17596 <__mulsf3_pse+0xa0>
   17576:	0c 94 d2 ba 	jmp	0x175a4	; 0x175a4 <__fp_inf>
   1757a:	0c 94 1d bb 	jmp	0x1763a	; 0x1763a <__fp_szero>
   1757e:	5f 3f       	cpi	r21, 0xFF	; 255
   17580:	e4 f3       	brlt	.-8      	; 0x1757a <__mulsf3_pse+0x84>
   17582:	98 3e       	cpi	r25, 0xE8	; 232
   17584:	d4 f3       	brlt	.-12     	; 0x1757a <__mulsf3_pse+0x84>
   17586:	86 95       	lsr	r24
   17588:	77 95       	ror	r23
   1758a:	67 95       	ror	r22
   1758c:	b7 95       	ror	r27
   1758e:	f7 95       	ror	r31
   17590:	e7 95       	ror	r30
   17592:	9f 5f       	subi	r25, 0xFF	; 255
   17594:	c1 f7       	brne	.-16     	; 0x17586 <__mulsf3_pse+0x90>
   17596:	fe 2b       	or	r31, r30
   17598:	88 0f       	add	r24, r24
   1759a:	91 1d       	adc	r25, r1
   1759c:	96 95       	lsr	r25
   1759e:	87 95       	ror	r24
   175a0:	97 f9       	bld	r25, 7
   175a2:	08 95       	ret

000175a4 <__fp_inf>:
   175a4:	97 f9       	bld	r25, 7
   175a6:	9f 67       	ori	r25, 0x7F	; 127
   175a8:	80 e8       	ldi	r24, 0x80	; 128
   175aa:	70 e0       	ldi	r23, 0x00	; 0
   175ac:	60 e0       	ldi	r22, 0x00	; 0
   175ae:	08 95       	ret

000175b0 <__fp_nan>:
   175b0:	9f ef       	ldi	r25, 0xFF	; 255
   175b2:	80 ec       	ldi	r24, 0xC0	; 192
   175b4:	08 95       	ret

000175b6 <__fp_pscA>:
   175b6:	00 24       	eor	r0, r0
   175b8:	0a 94       	dec	r0
   175ba:	16 16       	cp	r1, r22
   175bc:	17 06       	cpc	r1, r23
   175be:	18 06       	cpc	r1, r24
   175c0:	09 06       	cpc	r0, r25
__fp_pscA():
   175c2:	08 95       	ret

000175c4 <__fp_pscB>:
__fp_pscB():
   175c4:	00 24       	eor	r0, r0
   175c6:	0a 94       	dec	r0
   175c8:	12 16       	cp	r1, r18
   175ca:	13 06       	cpc	r1, r19
   175cc:	14 06       	cpc	r1, r20
   175ce:	05 06       	cpc	r0, r21
   175d0:	08 95       	ret

000175d2 <__fp_round>:
__fp_round():
   175d2:	09 2e       	mov	r0, r25
   175d4:	03 94       	inc	r0
   175d6:	00 0c       	add	r0, r0
   175d8:	11 f4       	brne	.+4      	; 0x175de <__fp_round+0xc>
   175da:	88 23       	and	r24, r24
   175dc:	52 f0       	brmi	.+20     	; 0x175f2 <__fp_round+0x20>
   175de:	bb 0f       	add	r27, r27
   175e0:	40 f4       	brcc	.+16     	; 0x175f2 <__fp_round+0x20>
   175e2:	bf 2b       	or	r27, r31
   175e4:	11 f4       	brne	.+4      	; 0x175ea <__fp_round+0x18>
   175e6:	60 ff       	sbrs	r22, 0
   175e8:	04 c0       	rjmp	.+8      	; 0x175f2 <__fp_round+0x20>
   175ea:	6f 5f       	subi	r22, 0xFF	; 255
   175ec:	7f 4f       	sbci	r23, 0xFF	; 255
   175ee:	8f 4f       	sbci	r24, 0xFF	; 255
   175f0:	9f 4f       	sbci	r25, 0xFF	; 255
   175f2:	08 95       	ret

000175f4 <__fp_split3>:
__fp_split3():
   175f4:	57 fd       	sbrc	r21, 7
   175f6:	90 58       	subi	r25, 0x80	; 128
   175f8:	44 0f       	add	r20, r20
   175fa:	55 1f       	adc	r21, r21
   175fc:	59 f0       	breq	.+22     	; 0x17614 <__fp_splitA+0x10>
   175fe:	5f 3f       	cpi	r21, 0xFF	; 255
   17600:	71 f0       	breq	.+28     	; 0x1761e <__fp_splitA+0x1a>
   17602:	47 95       	ror	r20

00017604 <__fp_splitA>:
   17604:	88 0f       	add	r24, r24
   17606:	97 fb       	bst	r25, 7
   17608:	99 1f       	adc	r25, r25
   1760a:	61 f0       	breq	.+24     	; 0x17624 <__fp_splitA+0x20>
   1760c:	9f 3f       	cpi	r25, 0xFF	; 255
   1760e:	79 f0       	breq	.+30     	; 0x1762e <__fp_splitA+0x2a>
   17610:	87 95       	ror	r24
   17612:	08 95       	ret
   17614:	12 16       	cp	r1, r18
   17616:	13 06       	cpc	r1, r19
   17618:	14 06       	cpc	r1, r20
   1761a:	55 1f       	adc	r21, r21
   1761c:	f2 cf       	rjmp	.-28     	; 0x17602 <__fp_split3+0xe>
   1761e:	46 95       	lsr	r20
   17620:	f1 df       	rcall	.-30     	; 0x17604 <__fp_splitA>
   17622:	08 c0       	rjmp	.+16     	; 0x17634 <__fp_splitA+0x30>
   17624:	16 16       	cp	r1, r22
   17626:	17 06       	cpc	r1, r23
   17628:	18 06       	cpc	r1, r24
   1762a:	99 1f       	adc	r25, r25
   1762c:	f1 cf       	rjmp	.-30     	; 0x17610 <__fp_splitA+0xc>
   1762e:	86 95       	lsr	r24
   17630:	71 05       	cpc	r23, r1
   17632:	61 05       	cpc	r22, r1
   17634:	08 94       	sec
   17636:	08 95       	ret

00017638 <__fp_zero>:
__fp_zero():
   17638:	e8 94       	clt

0001763a <__fp_szero>:
   1763a:	bb 27       	eor	r27, r27
   1763c:	66 27       	eor	r22, r22
   1763e:	77 27       	eor	r23, r23
   17640:	cb 01       	movw	r24, r22
   17642:	97 f9       	bld	r25, 7
   17644:	08 95       	ret

00017646 <eeprom_read_byte>:
eeprom_read_byte():
   17646:	f9 99       	sbic	0x1f, 1	; 31
   17648:	fe cf       	rjmp	.-4      	; 0x17646 <eeprom_read_byte>
   1764a:	92 bd       	out	0x22, r25	; 34
   1764c:	81 bd       	out	0x21, r24	; 33
   1764e:	f8 9a       	sbi	0x1f, 0	; 31
   17650:	99 27       	eor	r25, r25
   17652:	80 b5       	in	r24, 0x20	; 32
   17654:	08 95       	ret

00017656 <eeprom_write_byte>:
eeprom_write_byte():
   17656:	26 2f       	mov	r18, r22

00017658 <eeprom_write_r18>:
   17658:	f9 99       	sbic	0x1f, 1	; 31
   1765a:	fe cf       	rjmp	.-4      	; 0x17658 <eeprom_write_r18>
   1765c:	1f ba       	out	0x1f, r1	; 31
   1765e:	92 bd       	out	0x22, r25	; 34
   17660:	81 bd       	out	0x21, r24	; 33
   17662:	20 bd       	out	0x20, r18	; 32
   17664:	0f b6       	in	r0, 0x3f	; 63
   17666:	f8 94       	cli
   17668:	fa 9a       	sbi	0x1f, 2	; 31
   1766a:	f9 9a       	sbi	0x1f, 1	; 31
   1766c:	0f be       	out	0x3f, r0	; 63
   1766e:	01 96       	adiw	r24, 0x01	; 1
   17670:	08 95       	ret

00017672 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   17672:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   17674:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   17676:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   17678:	0e 94 b2 bb 	call	0x17764	; 0x17764 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1767c:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1767e:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   17680:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   17682:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   17684:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   17686:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   17688:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1768a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1768c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1768e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   17690:	08 95       	ret

00017692 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   17692:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   17694:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   17696:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   17698:	07 c0       	rjmp	.+14     	; 0x176a8 <__udivmodhi4_ep>

0001769a <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1769a:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1769c:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1769e:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   176a0:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   176a2:	10 f0       	brcs	.+4      	; 0x176a8 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   176a4:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   176a6:	b7 0b       	sbc	r27, r23

000176a8 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   176a8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   176aa:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   176ac:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   176ae:	a9 f7       	brne	.-22     	; 0x1769a <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   176b0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   176b2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   176b4:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   176b6:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   176b8:	08 95       	ret

000176ba <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   176ba:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   176bc:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   176be:	16 f4       	brtc	.+4      	; 0x176c4 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   176c0:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   176c2:	07 d0       	rcall	.+14     	; 0x176d2 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   176c4:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   176c6:	09 d0       	rcall	.+18     	; 0x176da <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   176c8:	0e 94 49 bb 	call	0x17692	; 0x17692 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   176cc:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   176ce:	05 d0       	rcall	.+10     	; 0x176da <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   176d0:	3e f4       	brtc	.+14     	; 0x176e0 <__divmodhi4_exit>

000176d2 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   176d2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   176d4:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   176d6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   176d8:	08 95       	ret

000176da <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   176da:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   176dc:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   176de:	7f 4f       	sbci	r23, 0xFF	; 255

000176e0 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   176e0:	08 95       	ret

000176e2 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   176e2:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   176e4:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   176e6:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   176e8:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   176ea:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   176ec:	0d c0       	rjmp	.+26     	; 0x17708 <__udivmodsi4_ep>

000176ee <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   176ee:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   176f0:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   176f2:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   176f4:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   176f6:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   176f8:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   176fa:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   176fc:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   176fe:	20 f0       	brcs	.+8      	; 0x17708 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   17700:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   17702:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   17704:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   17706:	f5 0b       	sbc	r31, r21

00017708 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   17708:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1770a:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1770c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1770e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   17710:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   17712:	69 f7       	brne	.-38     	; 0x176ee <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   17714:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   17716:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   17718:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1771a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1771c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1771e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   17720:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   17722:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   17724:	08 95       	ret

00017726 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   17726:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   17728:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1772a:	1e f4       	brtc	.+6      	; 0x17732 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1772c:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1772e:	0e 94 aa bb 	call	0x17754	; 0x17754 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   17732:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   17734:	07 d0       	rcall	.+14     	; 0x17744 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   17736:	0e 94 71 bb 	call	0x176e2	; 0x176e2 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1773a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1773c:	03 d0       	rcall	.+6      	; 0x17744 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1773e:	4e f4       	brtc	.+18     	; 0x17752 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   17740:	0c 94 aa bb 	jmp	0x17754	; 0x17754 <__negsi2>

00017744 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   17744:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   17746:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   17748:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1774a:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1774c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1774e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   17750:	5f 4f       	sbci	r21, 0xFF	; 255

00017752 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   17752:	08 95       	ret

00017754 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   17754:	90 95       	com	r25
   17756:	80 95       	com	r24
   17758:	70 95       	com	r23
   1775a:	61 95       	neg	r22
   1775c:	7f 4f       	sbci	r23, 0xFF	; 255
   1775e:	8f 4f       	sbci	r24, 0xFF	; 255
   17760:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   17762:	08 95       	ret

00017764 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   17764:	0e 94 bd bb 	call	0x1777a	; 0x1777a <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   17768:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1776a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1776c:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1776e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   17770:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   17772:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   17774:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   17776:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   17778:	08 95       	ret

0001777a <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1777a:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1777c:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1777e:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   17780:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   17782:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   17784:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   17786:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   17788:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1778a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1778c:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1778e:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   17790:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   17792:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   17794:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   17796:	08 95       	ret

00017798 <__subsf3>:
__subsf3():
   17798:	50 58       	subi	r21, 0x80	; 128

0001779a <__addsf3>:
   1779a:	bb 27       	eor	r27, r27
   1779c:	aa 27       	eor	r26, r26
   1779e:	0e 94 e4 bb 	call	0x177c8	; 0x177c8 <__addsf3x>
   177a2:	0c 94 e9 ba 	jmp	0x175d2	; 0x175d2 <__fp_round>
__addsf3():
   177a6:	0e 94 db ba 	call	0x175b6	; 0x175b6 <__fp_pscA>
   177aa:	38 f0       	brcs	.+14     	; 0x177ba <__addsf3+0x20>
   177ac:	0e 94 e2 ba 	call	0x175c4	; 0x175c4 <__fp_pscB>
   177b0:	20 f0       	brcs	.+8      	; 0x177ba <__addsf3+0x20>
   177b2:	39 f4       	brne	.+14     	; 0x177c2 <__addsf3+0x28>
   177b4:	9f 3f       	cpi	r25, 0xFF	; 255
   177b6:	19 f4       	brne	.+6      	; 0x177be <__addsf3+0x24>
   177b8:	26 f4       	brtc	.+8      	; 0x177c2 <__addsf3+0x28>
   177ba:	0c 94 d8 ba 	jmp	0x175b0	; 0x175b0 <__fp_nan>
   177be:	0e f4       	brtc	.+2      	; 0x177c2 <__addsf3+0x28>
   177c0:	e0 95       	com	r30
   177c2:	e7 fb       	bst	r30, 7
   177c4:	0c 94 d2 ba 	jmp	0x175a4	; 0x175a4 <__fp_inf>

000177c8 <__addsf3x>:
__addsf3x():
   177c8:	e9 2f       	mov	r30, r25
   177ca:	0e 94 fa ba 	call	0x175f4	; 0x175f4 <__fp_split3>
   177ce:	58 f3       	brcs	.-42     	; 0x177a6 <__addsf3+0xc>
   177d0:	ba 17       	cp	r27, r26
   177d2:	62 07       	cpc	r22, r18
   177d4:	73 07       	cpc	r23, r19
   177d6:	84 07       	cpc	r24, r20
   177d8:	95 07       	cpc	r25, r21
   177da:	20 f0       	brcs	.+8      	; 0x177e4 <__addsf3x+0x1c>
   177dc:	79 f4       	brne	.+30     	; 0x177fc <__addsf3x+0x34>
   177de:	a6 f5       	brtc	.+104    	; 0x17848 <__addsf3x+0x80>
   177e0:	0c 94 1c bb 	jmp	0x17638	; 0x17638 <__fp_zero>
   177e4:	0e f4       	brtc	.+2      	; 0x177e8 <__addsf3x+0x20>
   177e6:	e0 95       	com	r30
   177e8:	0b 2e       	mov	r0, r27
   177ea:	ba 2f       	mov	r27, r26
   177ec:	a0 2d       	mov	r26, r0
   177ee:	0b 01       	movw	r0, r22
   177f0:	b9 01       	movw	r22, r18
   177f2:	90 01       	movw	r18, r0
   177f4:	0c 01       	movw	r0, r24
   177f6:	ca 01       	movw	r24, r20
   177f8:	a0 01       	movw	r20, r0
   177fa:	11 24       	eor	r1, r1
   177fc:	ff 27       	eor	r31, r31
   177fe:	59 1b       	sub	r21, r25
   17800:	99 f0       	breq	.+38     	; 0x17828 <__addsf3x+0x60>
   17802:	59 3f       	cpi	r21, 0xF9	; 249
   17804:	50 f4       	brcc	.+20     	; 0x1781a <__addsf3x+0x52>
   17806:	50 3e       	cpi	r21, 0xE0	; 224
   17808:	68 f1       	brcs	.+90     	; 0x17864 <__addsf3x+0x9c>
   1780a:	1a 16       	cp	r1, r26
   1780c:	f0 40       	sbci	r31, 0x00	; 0
   1780e:	a2 2f       	mov	r26, r18
   17810:	23 2f       	mov	r18, r19
   17812:	34 2f       	mov	r19, r20
   17814:	44 27       	eor	r20, r20
   17816:	58 5f       	subi	r21, 0xF8	; 248
   17818:	f3 cf       	rjmp	.-26     	; 0x17800 <__addsf3x+0x38>
   1781a:	46 95       	lsr	r20
   1781c:	37 95       	ror	r19
   1781e:	27 95       	ror	r18
   17820:	a7 95       	ror	r26
   17822:	f0 40       	sbci	r31, 0x00	; 0
   17824:	53 95       	inc	r21
   17826:	c9 f7       	brne	.-14     	; 0x1781a <__addsf3x+0x52>
   17828:	7e f4       	brtc	.+30     	; 0x17848 <__addsf3x+0x80>
   1782a:	1f 16       	cp	r1, r31
   1782c:	ba 0b       	sbc	r27, r26
   1782e:	62 0b       	sbc	r22, r18
   17830:	73 0b       	sbc	r23, r19
   17832:	84 0b       	sbc	r24, r20
   17834:	ba f0       	brmi	.+46     	; 0x17864 <__addsf3x+0x9c>
   17836:	91 50       	subi	r25, 0x01	; 1
   17838:	a1 f0       	breq	.+40     	; 0x17862 <__addsf3x+0x9a>
   1783a:	ff 0f       	add	r31, r31
   1783c:	bb 1f       	adc	r27, r27
   1783e:	66 1f       	adc	r22, r22
   17840:	77 1f       	adc	r23, r23
   17842:	88 1f       	adc	r24, r24
   17844:	c2 f7       	brpl	.-16     	; 0x17836 <__addsf3x+0x6e>
   17846:	0e c0       	rjmp	.+28     	; 0x17864 <__addsf3x+0x9c>
   17848:	ba 0f       	add	r27, r26
   1784a:	62 1f       	adc	r22, r18
   1784c:	73 1f       	adc	r23, r19
   1784e:	84 1f       	adc	r24, r20
   17850:	48 f4       	brcc	.+18     	; 0x17864 <__addsf3x+0x9c>
   17852:	87 95       	ror	r24
   17854:	77 95       	ror	r23
   17856:	67 95       	ror	r22
   17858:	b7 95       	ror	r27
   1785a:	f7 95       	ror	r31
   1785c:	9e 3f       	cpi	r25, 0xFE	; 254
   1785e:	08 f0       	brcs	.+2      	; 0x17862 <__addsf3x+0x9a>
   17860:	b0 cf       	rjmp	.-160    	; 0x177c2 <__addsf3+0x28>
   17862:	93 95       	inc	r25
   17864:	88 0f       	add	r24, r24
   17866:	08 f0       	brcs	.+2      	; 0x1786a <__addsf3x+0xa2>
   17868:	99 27       	eor	r25, r25
   1786a:	ee 0f       	add	r30, r30
   1786c:	97 95       	ror	r25
   1786e:	87 95       	ror	r24
   17870:	08 95       	ret

00017872 <__divsf3>:
   17872:	0e 94 4d bc 	call	0x1789a	; 0x1789a <__divsf3x>
   17876:	0c 94 e9 ba 	jmp	0x175d2	; 0x175d2 <__fp_round>
   1787a:	0e 94 e2 ba 	call	0x175c4	; 0x175c4 <__fp_pscB>
   1787e:	58 f0       	brcs	.+22     	; 0x17896 <__divsf3+0x24>
   17880:	0e 94 db ba 	call	0x175b6	; 0x175b6 <__fp_pscA>
   17884:	40 f0       	brcs	.+16     	; 0x17896 <__divsf3+0x24>
   17886:	29 f4       	brne	.+10     	; 0x17892 <__divsf3+0x20>
   17888:	5f 3f       	cpi	r21, 0xFF	; 255
   1788a:	29 f0       	breq	.+10     	; 0x17896 <__divsf3+0x24>
   1788c:	0c 94 d2 ba 	jmp	0x175a4	; 0x175a4 <__fp_inf>
   17890:	51 11       	cpse	r21, r1
   17892:	0c 94 1d bb 	jmp	0x1763a	; 0x1763a <__fp_szero>
__divsf3():
   17896:	0c 94 d8 ba 	jmp	0x175b0	; 0x175b0 <__fp_nan>

0001789a <__divsf3x>:
__divsf3x():
   1789a:	0e 94 fa ba 	call	0x175f4	; 0x175f4 <__fp_split3>
   1789e:	68 f3       	brcs	.-38     	; 0x1787a <__divsf3+0x8>

000178a0 <__divsf3_pse>:
   178a0:	99 23       	and	r25, r25
   178a2:	b1 f3       	breq	.-20     	; 0x17890 <__divsf3+0x1e>
   178a4:	55 23       	and	r21, r21
   178a6:	91 f3       	breq	.-28     	; 0x1788c <__divsf3+0x1a>
   178a8:	95 1b       	sub	r25, r21
   178aa:	55 0b       	sbc	r21, r21
   178ac:	bb 27       	eor	r27, r27
   178ae:	aa 27       	eor	r26, r26
   178b0:	62 17       	cp	r22, r18
   178b2:	73 07       	cpc	r23, r19
   178b4:	84 07       	cpc	r24, r20
   178b6:	38 f0       	brcs	.+14     	; 0x178c6 <__divsf3_pse+0x26>
   178b8:	9f 5f       	subi	r25, 0xFF	; 255
   178ba:	5f 4f       	sbci	r21, 0xFF	; 255
   178bc:	22 0f       	add	r18, r18
   178be:	33 1f       	adc	r19, r19
   178c0:	44 1f       	adc	r20, r20
   178c2:	aa 1f       	adc	r26, r26
   178c4:	a9 f3       	breq	.-22     	; 0x178b0 <__divsf3_pse+0x10>
   178c6:	35 d0       	rcall	.+106    	; 0x17932 <__divsf3_pse+0x92>
   178c8:	0e 2e       	mov	r0, r30
   178ca:	3a f0       	brmi	.+14     	; 0x178da <__divsf3_pse+0x3a>
   178cc:	e0 e8       	ldi	r30, 0x80	; 128
   178ce:	32 d0       	rcall	.+100    	; 0x17934 <__divsf3_pse+0x94>
   178d0:	91 50       	subi	r25, 0x01	; 1
   178d2:	50 40       	sbci	r21, 0x00	; 0
   178d4:	e6 95       	lsr	r30
   178d6:	00 1c       	adc	r0, r0
   178d8:	ca f7       	brpl	.-14     	; 0x178cc <__divsf3_pse+0x2c>
   178da:	2b d0       	rcall	.+86     	; 0x17932 <__divsf3_pse+0x92>
   178dc:	fe 2f       	mov	r31, r30
   178de:	29 d0       	rcall	.+82     	; 0x17932 <__divsf3_pse+0x92>
   178e0:	66 0f       	add	r22, r22
   178e2:	77 1f       	adc	r23, r23
   178e4:	88 1f       	adc	r24, r24
   178e6:	bb 1f       	adc	r27, r27
   178e8:	26 17       	cp	r18, r22
   178ea:	37 07       	cpc	r19, r23
   178ec:	48 07       	cpc	r20, r24
   178ee:	ab 07       	cpc	r26, r27
   178f0:	b0 e8       	ldi	r27, 0x80	; 128
   178f2:	09 f0       	breq	.+2      	; 0x178f6 <__divsf3_pse+0x56>
   178f4:	bb 0b       	sbc	r27, r27
   178f6:	80 2d       	mov	r24, r0
   178f8:	bf 01       	movw	r22, r30
   178fa:	ff 27       	eor	r31, r31
   178fc:	93 58       	subi	r25, 0x83	; 131
   178fe:	5f 4f       	sbci	r21, 0xFF	; 255
   17900:	3a f0       	brmi	.+14     	; 0x17910 <__divsf3_pse+0x70>
   17902:	9e 3f       	cpi	r25, 0xFE	; 254
   17904:	51 05       	cpc	r21, r1
   17906:	78 f0       	brcs	.+30     	; 0x17926 <__divsf3_pse+0x86>
   17908:	0c 94 d2 ba 	jmp	0x175a4	; 0x175a4 <__fp_inf>
   1790c:	0c 94 1d bb 	jmp	0x1763a	; 0x1763a <__fp_szero>
   17910:	5f 3f       	cpi	r21, 0xFF	; 255
   17912:	e4 f3       	brlt	.-8      	; 0x1790c <__divsf3_pse+0x6c>
   17914:	98 3e       	cpi	r25, 0xE8	; 232
   17916:	d4 f3       	brlt	.-12     	; 0x1790c <__divsf3_pse+0x6c>
   17918:	86 95       	lsr	r24
   1791a:	77 95       	ror	r23
   1791c:	67 95       	ror	r22
   1791e:	b7 95       	ror	r27
   17920:	f7 95       	ror	r31
   17922:	9f 5f       	subi	r25, 0xFF	; 255
   17924:	c9 f7       	brne	.-14     	; 0x17918 <__divsf3_pse+0x78>
   17926:	88 0f       	add	r24, r24
   17928:	91 1d       	adc	r25, r1
   1792a:	96 95       	lsr	r25
   1792c:	87 95       	ror	r24
   1792e:	97 f9       	bld	r25, 7
   17930:	08 95       	ret
   17932:	e1 e0       	ldi	r30, 0x01	; 1
   17934:	66 0f       	add	r22, r22
   17936:	77 1f       	adc	r23, r23
   17938:	88 1f       	adc	r24, r24
   1793a:	bb 1f       	adc	r27, r27
   1793c:	62 17       	cp	r22, r18
   1793e:	73 07       	cpc	r23, r19
   17940:	84 07       	cpc	r24, r20
   17942:	ba 07       	cpc	r27, r26
   17944:	20 f0       	brcs	.+8      	; 0x1794e <__divsf3_pse+0xae>
   17946:	62 1b       	sub	r22, r18
   17948:	73 0b       	sbc	r23, r19
   1794a:	84 0b       	sbc	r24, r20
   1794c:	ba 0b       	sbc	r27, r26
   1794e:	ee 1f       	adc	r30, r30
   17950:	88 f7       	brcc	.-30     	; 0x17934 <__divsf3_pse+0x94>
   17952:	e0 95       	com	r30
   17954:	08 95       	ret

00017956 <__fixsfsi>:
   17956:	0e 94 b2 bc 	call	0x17964	; 0x17964 <__fixunssfsi>
   1795a:	68 94       	set
   1795c:	b1 11       	cpse	r27, r1
   1795e:	0c 94 1d bb 	jmp	0x1763a	; 0x1763a <__fp_szero>
   17962:	08 95       	ret

00017964 <__fixunssfsi>:
   17964:	0e 94 02 bb 	call	0x17604	; 0x17604 <__fp_splitA>
   17968:	88 f0       	brcs	.+34     	; 0x1798c <__fixunssfsi+0x28>
   1796a:	9f 57       	subi	r25, 0x7F	; 127
   1796c:	98 f0       	brcs	.+38     	; 0x17994 <__fixunssfsi+0x30>
   1796e:	b9 2f       	mov	r27, r25
   17970:	99 27       	eor	r25, r25
   17972:	b7 51       	subi	r27, 0x17	; 23
   17974:	b0 f0       	brcs	.+44     	; 0x179a2 <__fixunssfsi+0x3e>
__fixunssfsi():
   17976:	e1 f0       	breq	.+56     	; 0x179b0 <__fixunssfsi+0x4c>
   17978:	66 0f       	add	r22, r22
   1797a:	77 1f       	adc	r23, r23
   1797c:	88 1f       	adc	r24, r24
   1797e:	99 1f       	adc	r25, r25
   17980:	1a f0       	brmi	.+6      	; 0x17988 <__fixunssfsi+0x24>
   17982:	ba 95       	dec	r27
   17984:	c9 f7       	brne	.-14     	; 0x17978 <__fixunssfsi+0x14>
   17986:	14 c0       	rjmp	.+40     	; 0x179b0 <__fixunssfsi+0x4c>
   17988:	b1 30       	cpi	r27, 0x01	; 1
   1798a:	91 f0       	breq	.+36     	; 0x179b0 <__fixunssfsi+0x4c>
   1798c:	0e 94 1c bb 	call	0x17638	; 0x17638 <__fp_zero>
   17990:	b1 e0       	ldi	r27, 0x01	; 1
   17992:	08 95       	ret
   17994:	0c 94 1c bb 	jmp	0x17638	; 0x17638 <__fp_zero>
   17998:	67 2f       	mov	r22, r23
   1799a:	78 2f       	mov	r23, r24
   1799c:	88 27       	eor	r24, r24
   1799e:	b8 5f       	subi	r27, 0xF8	; 248
   179a0:	39 f0       	breq	.+14     	; 0x179b0 <__fixunssfsi+0x4c>
   179a2:	b9 3f       	cpi	r27, 0xF9	; 249
   179a4:	cc f3       	brlt	.-14     	; 0x17998 <__fixunssfsi+0x34>
   179a6:	86 95       	lsr	r24
   179a8:	77 95       	ror	r23
   179aa:	67 95       	ror	r22
   179ac:	b3 95       	inc	r27
   179ae:	d9 f7       	brne	.-10     	; 0x179a6 <__fixunssfsi+0x42>
   179b0:	3e f4       	brtc	.+14     	; 0x179c0 <__fixunssfsi+0x5c>
   179b2:	90 95       	com	r25
   179b4:	80 95       	com	r24
   179b6:	70 95       	com	r23
   179b8:	61 95       	neg	r22
   179ba:	7f 4f       	sbci	r23, 0xFF	; 255
   179bc:	8f 4f       	sbci	r24, 0xFF	; 255
   179be:	9f 4f       	sbci	r25, 0xFF	; 255
   179c0:	08 95       	ret

000179c2 <__gesf2>:
__gesf2():
   179c2:	0e 94 41 ba 	call	0x17482	; 0x17482 <__fp_cmp>
   179c6:	08 f4       	brcc	.+2      	; 0x179ca <__gesf2+0x8>
   179c8:	8f ef       	ldi	r24, 0xFF	; 255
   179ca:	08 95       	ret

000179cc <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   179cc:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   179ce:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   179d0:	04 c0       	rjmp	.+8      	; 0x179da <__udivmodqi4_ep>

000179d2 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   179d2:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   179d4:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   179d6:	08 f0       	brcs	.+2      	; 0x179da <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   179d8:	96 1b       	sub	r25, r22

000179da <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   179da:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   179dc:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   179de:	c9 f7       	brne	.-14     	; 0x179d2 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   179e0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   179e2:	08 95       	ret

000179e4 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   179e4:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   179e6:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   179e8:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   179ea:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   179ec:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   179ee:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   179f0:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   179f2:	19 94       	eijmp

000179f4 <realloc>:
realloc():
   179f4:	4f 92       	push	r4
   179f6:	5f 92       	push	r5
   179f8:	6f 92       	push	r6
   179fa:	7f 92       	push	r7
   179fc:	8f 92       	push	r8
   179fe:	9f 92       	push	r9
   17a00:	af 92       	push	r10
   17a02:	bf 92       	push	r11
   17a04:	cf 92       	push	r12
   17a06:	df 92       	push	r13
   17a08:	ef 92       	push	r14
   17a0a:	ff 92       	push	r15
   17a0c:	0f 93       	push	r16
   17a0e:	1f 93       	push	r17
   17a10:	cf 93       	push	r28
   17a12:	df 93       	push	r29
   17a14:	8c 01       	movw	r16, r24
   17a16:	00 97       	sbiw	r24, 0x00	; 0
   17a18:	99 f4       	brne	.+38     	; 0x17a40 <realloc+0x4c>
   17a1a:	cb 01       	movw	r24, r22
   17a1c:	df 91       	pop	r29
   17a1e:	cf 91       	pop	r28
   17a20:	1f 91       	pop	r17
   17a22:	0f 91       	pop	r16
   17a24:	ff 90       	pop	r15
   17a26:	ef 90       	pop	r14
   17a28:	df 90       	pop	r13
   17a2a:	cf 90       	pop	r12
   17a2c:	bf 90       	pop	r11
   17a2e:	af 90       	pop	r10
   17a30:	9f 90       	pop	r9
   17a32:	8f 90       	pop	r8
   17a34:	7f 90       	pop	r7
   17a36:	6f 90       	pop	r6
   17a38:	5f 90       	pop	r5
   17a3a:	4f 90       	pop	r4
   17a3c:	0c 94 ce b5 	jmp	0x16b9c	; 0x16b9c <malloc>
   17a40:	fc 01       	movw	r30, r24
   17a42:	e6 0f       	add	r30, r22
   17a44:	f7 1f       	adc	r31, r23
   17a46:	9c 01       	movw	r18, r24
   17a48:	22 50       	subi	r18, 0x02	; 2
   17a4a:	31 09       	sbc	r19, r1
   17a4c:	e2 17       	cp	r30, r18
   17a4e:	f3 07       	cpc	r31, r19
   17a50:	08 f4       	brcc	.+2      	; 0x17a54 <realloc+0x60>
   17a52:	ae c0       	rjmp	.+348    	; 0x17bb0 <realloc+0x1bc>
   17a54:	d9 01       	movw	r26, r18
   17a56:	cd 91       	ld	r28, X+
   17a58:	dc 91       	ld	r29, X
   17a5a:	11 97       	sbiw	r26, 0x01	; 1
   17a5c:	c6 17       	cp	r28, r22
   17a5e:	d7 07       	cpc	r29, r23
   17a60:	20 f1       	brcs	.+72     	; 0x17aaa <realloc+0xb6>
   17a62:	c5 30       	cpi	r28, 0x05	; 5
   17a64:	d1 05       	cpc	r29, r1
   17a66:	78 f0       	brcs	.+30     	; 0x17a86 <realloc+0x92>
   17a68:	ce 01       	movw	r24, r28
   17a6a:	04 97       	sbiw	r24, 0x04	; 4
   17a6c:	86 17       	cp	r24, r22
   17a6e:	97 07       	cpc	r25, r23
   17a70:	50 f0       	brcs	.+20     	; 0x17a86 <realloc+0x92>
   17a72:	c6 1b       	sub	r28, r22
   17a74:	d7 0b       	sbc	r29, r23
   17a76:	22 97       	sbiw	r28, 0x02	; 2
   17a78:	c1 93       	st	Z+, r28
   17a7a:	d1 93       	st	Z+, r29
   17a7c:	6d 93       	st	X+, r22
   17a7e:	7c 93       	st	X, r23
   17a80:	cf 01       	movw	r24, r30
   17a82:	0e 94 6a b6 	call	0x16cd4	; 0x16cd4 <free>
   17a86:	c8 01       	movw	r24, r16
   17a88:	df 91       	pop	r29
   17a8a:	cf 91       	pop	r28
   17a8c:	1f 91       	pop	r17
   17a8e:	0f 91       	pop	r16
   17a90:	ff 90       	pop	r15
   17a92:	ef 90       	pop	r14
   17a94:	df 90       	pop	r13
   17a96:	cf 90       	pop	r12
   17a98:	bf 90       	pop	r11
   17a9a:	af 90       	pop	r10
   17a9c:	9f 90       	pop	r9
   17a9e:	8f 90       	pop	r8
   17aa0:	7f 90       	pop	r7
   17aa2:	6f 90       	pop	r6
   17aa4:	5f 90       	pop	r5
   17aa6:	4f 90       	pop	r4
   17aa8:	08 95       	ret
   17aaa:	5b 01       	movw	r10, r22
   17aac:	ac 1a       	sub	r10, r28
   17aae:	bd 0a       	sbc	r11, r29
   17ab0:	4c 01       	movw	r8, r24
   17ab2:	8c 0e       	add	r8, r28
   17ab4:	9d 1e       	adc	r9, r29
   17ab6:	a0 91 9a 13 	lds	r26, 0x139A	; 0x80139a <__flp>
   17aba:	b0 91 9b 13 	lds	r27, 0x139B	; 0x80139b <__flp+0x1>
   17abe:	51 2c       	mov	r5, r1
   17ac0:	41 2c       	mov	r4, r1
   17ac2:	f1 2c       	mov	r15, r1
   17ac4:	e1 2c       	mov	r14, r1
   17ac6:	10 97       	sbiw	r26, 0x00	; 0
   17ac8:	31 f5       	brne	.+76     	; 0x17b16 <realloc+0x122>
   17aca:	80 91 98 13 	lds	r24, 0x1398	; 0x801398 <__brkval>
   17ace:	90 91 99 13 	lds	r25, 0x1399	; 0x801399 <__brkval+0x1>
   17ad2:	88 15       	cp	r24, r8
   17ad4:	99 05       	cpc	r25, r9
   17ad6:	09 f0       	breq	.+2      	; 0x17ada <realloc+0xe6>
   17ad8:	5c c0       	rjmp	.+184    	; 0x17b92 <realloc+0x19e>
   17ada:	46 16       	cp	r4, r22
   17adc:	57 06       	cpc	r5, r23
   17ade:	08 f0       	brcs	.+2      	; 0x17ae2 <realloc+0xee>
   17ae0:	58 c0       	rjmp	.+176    	; 0x17b92 <realloc+0x19e>
   17ae2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   17ae6:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   17aea:	00 97       	sbiw	r24, 0x00	; 0
   17aec:	41 f4       	brne	.+16     	; 0x17afe <realloc+0x10a>
   17aee:	8d b7       	in	r24, 0x3d	; 61
   17af0:	9e b7       	in	r25, 0x3e	; 62
   17af2:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   17af6:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   17afa:	84 1b       	sub	r24, r20
   17afc:	95 0b       	sbc	r25, r21
   17afe:	e8 17       	cp	r30, r24
   17b00:	f9 07       	cpc	r31, r25
   17b02:	08 f0       	brcs	.+2      	; 0x17b06 <realloc+0x112>
   17b04:	55 c0       	rjmp	.+170    	; 0x17bb0 <realloc+0x1bc>
   17b06:	f0 93 99 13 	sts	0x1399, r31	; 0x801399 <__brkval+0x1>
   17b0a:	e0 93 98 13 	sts	0x1398, r30	; 0x801398 <__brkval>
   17b0e:	f9 01       	movw	r30, r18
   17b10:	71 83       	std	Z+1, r23	; 0x01
   17b12:	60 83       	st	Z, r22
   17b14:	b8 cf       	rjmp	.-144    	; 0x17a86 <realloc+0x92>
   17b16:	8d 91       	ld	r24, X+
   17b18:	9c 91       	ld	r25, X
   17b1a:	11 97       	sbiw	r26, 0x01	; 1
   17b1c:	12 96       	adiw	r26, 0x02	; 2
   17b1e:	6c 90       	ld	r6, X
   17b20:	12 97       	sbiw	r26, 0x02	; 2
   17b22:	13 96       	adiw	r26, 0x03	; 3
   17b24:	7c 90       	ld	r7, X
   17b26:	13 97       	sbiw	r26, 0x03	; 3
   17b28:	a8 15       	cp	r26, r8
   17b2a:	b9 05       	cpc	r27, r9
   17b2c:	59 f5       	brne	.+86     	; 0x17b84 <realloc+0x190>
   17b2e:	6c 01       	movw	r12, r24
   17b30:	42 e0       	ldi	r20, 0x02	; 2
   17b32:	c4 0e       	add	r12, r20
   17b34:	d1 1c       	adc	r13, r1
   17b36:	ca 14       	cp	r12, r10
   17b38:	db 04       	cpc	r13, r11
   17b3a:	20 f1       	brcs	.+72     	; 0x17b84 <realloc+0x190>
   17b3c:	ac 01       	movw	r20, r24
   17b3e:	4a 19       	sub	r20, r10
   17b40:	5b 09       	sbc	r21, r11
   17b42:	da 01       	movw	r26, r20
   17b44:	12 96       	adiw	r26, 0x02	; 2
   17b46:	15 97       	sbiw	r26, 0x05	; 5
   17b48:	80 f0       	brcs	.+32     	; 0x17b6a <realloc+0x176>
   17b4a:	62 82       	std	Z+2, r6	; 0x02
   17b4c:	73 82       	std	Z+3, r7	; 0x03
   17b4e:	51 83       	std	Z+1, r21	; 0x01
   17b50:	40 83       	st	Z, r20
   17b52:	d9 01       	movw	r26, r18
   17b54:	6d 93       	st	X+, r22
   17b56:	7c 93       	st	X, r23
   17b58:	e1 14       	cp	r14, r1
   17b5a:	f1 04       	cpc	r15, r1
   17b5c:	71 f0       	breq	.+28     	; 0x17b7a <realloc+0x186>
   17b5e:	d7 01       	movw	r26, r14
   17b60:	13 96       	adiw	r26, 0x03	; 3
   17b62:	fc 93       	st	X, r31
   17b64:	ee 93       	st	-X, r30
   17b66:	12 97       	sbiw	r26, 0x02	; 2
   17b68:	8e cf       	rjmp	.-228    	; 0x17a86 <realloc+0x92>
   17b6a:	22 96       	adiw	r28, 0x02	; 2
   17b6c:	8c 0f       	add	r24, r28
   17b6e:	9d 1f       	adc	r25, r29
   17b70:	f9 01       	movw	r30, r18
   17b72:	91 83       	std	Z+1, r25	; 0x01
   17b74:	80 83       	st	Z, r24
   17b76:	f3 01       	movw	r30, r6
   17b78:	ef cf       	rjmp	.-34     	; 0x17b58 <realloc+0x164>
   17b7a:	f0 93 9b 13 	sts	0x139B, r31	; 0x80139b <__flp+0x1>
   17b7e:	e0 93 9a 13 	sts	0x139A, r30	; 0x80139a <__flp>
   17b82:	81 cf       	rjmp	.-254    	; 0x17a86 <realloc+0x92>
   17b84:	48 16       	cp	r4, r24
   17b86:	59 06       	cpc	r5, r25
   17b88:	08 f4       	brcc	.+2      	; 0x17b8c <realloc+0x198>
   17b8a:	2c 01       	movw	r4, r24
   17b8c:	7d 01       	movw	r14, r26
   17b8e:	d3 01       	movw	r26, r6
   17b90:	9a cf       	rjmp	.-204    	; 0x17ac6 <realloc+0xd2>
   17b92:	cb 01       	movw	r24, r22
   17b94:	0e 94 ce b5 	call	0x16b9c	; 0x16b9c <malloc>
   17b98:	7c 01       	movw	r14, r24
   17b9a:	00 97       	sbiw	r24, 0x00	; 0
   17b9c:	49 f0       	breq	.+18     	; 0x17bb0 <realloc+0x1bc>
   17b9e:	ae 01       	movw	r20, r28
   17ba0:	b8 01       	movw	r22, r16
   17ba2:	0e 94 e0 bd 	call	0x17bc0	; 0x17bc0 <memcpy>
   17ba6:	c8 01       	movw	r24, r16
   17ba8:	0e 94 6a b6 	call	0x16cd4	; 0x16cd4 <free>
   17bac:	87 01       	movw	r16, r14
   17bae:	6b cf       	rjmp	.-298    	; 0x17a86 <realloc+0x92>
   17bb0:	10 e0       	ldi	r17, 0x00	; 0
   17bb2:	00 e0       	ldi	r16, 0x00	; 0
   17bb4:	68 cf       	rjmp	.-304    	; 0x17a86 <realloc+0x92>

00017bb6 <abort>:
abort():
   17bb6:	81 e0       	ldi	r24, 0x01	; 1
   17bb8:	90 e0       	ldi	r25, 0x00	; 0
   17bba:	f8 94       	cli
   17bbc:	0c 94 9b be 	jmp	0x17d36	; 0x17d36 <_exit>

00017bc0 <memcpy>:
memcpy():
   17bc0:	fb 01       	movw	r30, r22
   17bc2:	dc 01       	movw	r26, r24
   17bc4:	02 c0       	rjmp	.+4      	; 0x17bca <memcpy+0xa>
   17bc6:	01 90       	ld	r0, Z+
   17bc8:	0d 92       	st	X+, r0
   17bca:	41 50       	subi	r20, 0x01	; 1
   17bcc:	50 40       	sbci	r21, 0x00	; 0
   17bce:	d8 f7       	brcc	.-10     	; 0x17bc6 <memcpy+0x6>
   17bd0:	08 95       	ret

00017bd2 <strcat>:
strcat():
   17bd2:	fb 01       	movw	r30, r22
   17bd4:	dc 01       	movw	r26, r24
   17bd6:	0d 90       	ld	r0, X+
   17bd8:	00 20       	and	r0, r0
   17bda:	e9 f7       	brne	.-6      	; 0x17bd6 <strcat+0x4>
   17bdc:	11 97       	sbiw	r26, 0x01	; 1
   17bde:	01 90       	ld	r0, Z+
   17be0:	0d 92       	st	X+, r0
   17be2:	00 20       	and	r0, r0
   17be4:	e1 f7       	brne	.-8      	; 0x17bde <strcat+0xc>
   17be6:	08 95       	ret

00017be8 <strchr>:
strchr():
   17be8:	fc 01       	movw	r30, r24
   17bea:	81 91       	ld	r24, Z+
   17bec:	86 17       	cp	r24, r22
   17bee:	21 f0       	breq	.+8      	; 0x17bf8 <strchr+0x10>
   17bf0:	88 23       	and	r24, r24
   17bf2:	d9 f7       	brne	.-10     	; 0x17bea <strchr+0x2>
   17bf4:	99 27       	eor	r25, r25
   17bf6:	08 95       	ret
   17bf8:	31 97       	sbiw	r30, 0x01	; 1
   17bfa:	cf 01       	movw	r24, r30
   17bfc:	08 95       	ret

00017bfe <strcmp>:
strcmp():
   17bfe:	fb 01       	movw	r30, r22
   17c00:	dc 01       	movw	r26, r24
   17c02:	8d 91       	ld	r24, X+
   17c04:	01 90       	ld	r0, Z+
   17c06:	80 19       	sub	r24, r0
   17c08:	01 10       	cpse	r0, r1
   17c0a:	d9 f3       	breq	.-10     	; 0x17c02 <strcmp+0x4>
   17c0c:	99 0b       	sbc	r25, r25
   17c0e:	08 95       	ret

00017c10 <strcpy>:
strcpy():
   17c10:	fb 01       	movw	r30, r22
   17c12:	dc 01       	movw	r26, r24
   17c14:	01 90       	ld	r0, Z+
   17c16:	0d 92       	st	X+, r0
   17c18:	00 20       	and	r0, r0
   17c1a:	e1 f7       	brne	.-8      	; 0x17c14 <strcpy+0x4>
   17c1c:	08 95       	ret

00017c1e <strncmp>:
strncmp():
   17c1e:	fb 01       	movw	r30, r22
   17c20:	dc 01       	movw	r26, r24
   17c22:	41 50       	subi	r20, 0x01	; 1
   17c24:	50 40       	sbci	r21, 0x00	; 0
   17c26:	30 f0       	brcs	.+12     	; 0x17c34 <strncmp+0x16>
   17c28:	8d 91       	ld	r24, X+
   17c2a:	01 90       	ld	r0, Z+
   17c2c:	80 19       	sub	r24, r0
   17c2e:	19 f4       	brne	.+6      	; 0x17c36 <strncmp+0x18>
   17c30:	00 20       	and	r0, r0
   17c32:	b9 f7       	brne	.-18     	; 0x17c22 <strncmp+0x4>
   17c34:	88 1b       	sub	r24, r24
   17c36:	99 0b       	sbc	r25, r25
   17c38:	08 95       	ret

00017c3a <strncpy>:
strncpy():
   17c3a:	fb 01       	movw	r30, r22
   17c3c:	dc 01       	movw	r26, r24
   17c3e:	41 50       	subi	r20, 0x01	; 1
   17c40:	50 40       	sbci	r21, 0x00	; 0
   17c42:	48 f0       	brcs	.+18     	; 0x17c56 <strncpy+0x1c>
   17c44:	01 90       	ld	r0, Z+
   17c46:	0d 92       	st	X+, r0
   17c48:	00 20       	and	r0, r0
   17c4a:	c9 f7       	brne	.-14     	; 0x17c3e <strncpy+0x4>
   17c4c:	01 c0       	rjmp	.+2      	; 0x17c50 <strncpy+0x16>
   17c4e:	1d 92       	st	X+, r1
   17c50:	41 50       	subi	r20, 0x01	; 1
   17c52:	50 40       	sbci	r21, 0x00	; 0
   17c54:	e0 f7       	brcc	.-8      	; 0x17c4e <strncpy+0x14>
   17c56:	08 95       	ret

00017c58 <printf>:
printf():
   17c58:	cf 93       	push	r28
   17c5a:	df 93       	push	r29
   17c5c:	cd b7       	in	r28, 0x3d	; 61
   17c5e:	de b7       	in	r29, 0x3e	; 62
   17c60:	ae 01       	movw	r20, r28
   17c62:	4a 5f       	subi	r20, 0xFA	; 250
   17c64:	5f 4f       	sbci	r21, 0xFF	; 255
   17c66:	fa 01       	movw	r30, r20
   17c68:	61 91       	ld	r22, Z+
   17c6a:	71 91       	ld	r23, Z+
   17c6c:	af 01       	movw	r20, r30
   17c6e:	80 91 82 13 	lds	r24, 0x1382	; 0x801382 <__iob+0x2>
   17c72:	90 91 83 13 	lds	r25, 0x1383	; 0x801383 <__iob+0x3>
   17c76:	0e 94 37 b2 	call	0x1646e	; 0x1646e <vfprintf>
   17c7a:	df 91       	pop	r29
   17c7c:	cf 91       	pop	r28
   17c7e:	08 95       	ret

00017c80 <puts>:
puts():
   17c80:	0f 93       	push	r16
   17c82:	1f 93       	push	r17
   17c84:	cf 93       	push	r28
   17c86:	df 93       	push	r29
   17c88:	e0 91 82 13 	lds	r30, 0x1382	; 0x801382 <__iob+0x2>
   17c8c:	f0 91 83 13 	lds	r31, 0x1383	; 0x801383 <__iob+0x3>
   17c90:	23 81       	ldd	r18, Z+3	; 0x03
   17c92:	ec 01       	movw	r28, r24
   17c94:	10 e0       	ldi	r17, 0x00	; 0
   17c96:	00 e0       	ldi	r16, 0x00	; 0
   17c98:	21 fd       	sbrc	r18, 1
   17c9a:	08 c0       	rjmp	.+16     	; 0x17cac <puts+0x2c>
   17c9c:	0f ef       	ldi	r16, 0xFF	; 255
   17c9e:	1f ef       	ldi	r17, 0xFF	; 255
   17ca0:	14 c0       	rjmp	.+40     	; 0x17cca <puts+0x4a>
   17ca2:	19 95       	eicall
   17ca4:	89 2b       	or	r24, r25
   17ca6:	11 f0       	breq	.+4      	; 0x17cac <puts+0x2c>
   17ca8:	0f ef       	ldi	r16, 0xFF	; 255
   17caa:	1f ef       	ldi	r17, 0xFF	; 255
   17cac:	89 91       	ld	r24, Y+
   17cae:	60 91 82 13 	lds	r22, 0x1382	; 0x801382 <__iob+0x2>
   17cb2:	70 91 83 13 	lds	r23, 0x1383	; 0x801383 <__iob+0x3>
   17cb6:	db 01       	movw	r26, r22
   17cb8:	18 96       	adiw	r26, 0x08	; 8
   17cba:	ed 91       	ld	r30, X+
   17cbc:	fc 91       	ld	r31, X
   17cbe:	81 11       	cpse	r24, r1
   17cc0:	f0 cf       	rjmp	.-32     	; 0x17ca2 <puts+0x22>
   17cc2:	8a e0       	ldi	r24, 0x0A	; 10
   17cc4:	19 95       	eicall
   17cc6:	89 2b       	or	r24, r25
   17cc8:	49 f7       	brne	.-46     	; 0x17c9c <puts+0x1c>
   17cca:	c8 01       	movw	r24, r16
   17ccc:	df 91       	pop	r29
   17cce:	cf 91       	pop	r28
   17cd0:	1f 91       	pop	r17
   17cd2:	0f 91       	pop	r16
   17cd4:	08 95       	ret

00017cd6 <sprintf>:
sprintf():
   17cd6:	0f 93       	push	r16
   17cd8:	1f 93       	push	r17
   17cda:	cf 93       	push	r28
   17cdc:	df 93       	push	r29
   17cde:	cd b7       	in	r28, 0x3d	; 61
   17ce0:	de b7       	in	r29, 0x3e	; 62
   17ce2:	2e 97       	sbiw	r28, 0x0e	; 14
   17ce4:	0f b6       	in	r0, 0x3f	; 63
   17ce6:	f8 94       	cli
   17ce8:	de bf       	out	0x3e, r29	; 62
   17cea:	0f be       	out	0x3f, r0	; 63
   17cec:	cd bf       	out	0x3d, r28	; 61
   17cee:	0e 89       	ldd	r16, Y+22	; 0x16
   17cf0:	1f 89       	ldd	r17, Y+23	; 0x17
   17cf2:	86 e0       	ldi	r24, 0x06	; 6
   17cf4:	8c 83       	std	Y+4, r24	; 0x04
   17cf6:	1a 83       	std	Y+2, r17	; 0x02
   17cf8:	09 83       	std	Y+1, r16	; 0x01
   17cfa:	8f ef       	ldi	r24, 0xFF	; 255
   17cfc:	9f e7       	ldi	r25, 0x7F	; 127
   17cfe:	9e 83       	std	Y+6, r25	; 0x06
   17d00:	8d 83       	std	Y+5, r24	; 0x05
   17d02:	ae 01       	movw	r20, r28
   17d04:	46 5e       	subi	r20, 0xE6	; 230
   17d06:	5f 4f       	sbci	r21, 0xFF	; 255
   17d08:	68 8d       	ldd	r22, Y+24	; 0x18
   17d0a:	79 8d       	ldd	r23, Y+25	; 0x19
   17d0c:	ce 01       	movw	r24, r28
   17d0e:	01 96       	adiw	r24, 0x01	; 1
   17d10:	0e 94 37 b2 	call	0x1646e	; 0x1646e <vfprintf>
   17d14:	2f 81       	ldd	r18, Y+7	; 0x07
   17d16:	38 85       	ldd	r19, Y+8	; 0x08
   17d18:	02 0f       	add	r16, r18
   17d1a:	13 1f       	adc	r17, r19
   17d1c:	f8 01       	movw	r30, r16
   17d1e:	10 82       	st	Z, r1
   17d20:	2e 96       	adiw	r28, 0x0e	; 14
   17d22:	0f b6       	in	r0, 0x3f	; 63
   17d24:	f8 94       	cli
   17d26:	de bf       	out	0x3e, r29	; 62
   17d28:	0f be       	out	0x3f, r0	; 63
   17d2a:	cd bf       	out	0x3d, r28	; 61
   17d2c:	df 91       	pop	r29
   17d2e:	cf 91       	pop	r28
   17d30:	1f 91       	pop	r17
   17d32:	0f 91       	pop	r16
   17d34:	08 95       	ret

00017d36 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   17d36:	f8 94       	cli

00017d38 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   17d38:	ff cf       	rjmp	.-2      	; 0x17d38 <__stop_program>
