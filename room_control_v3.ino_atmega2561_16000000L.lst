
/tmp/arduino_build_832911/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__ctors_end>
       4:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
       8:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
       c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      10:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      14:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      18:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      1c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      20:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      24:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      28:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      2c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      30:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      34:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      38:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      3c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      40:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      44:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      48:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      4c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      50:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      54:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      58:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      5c:	0c 94 25 8b 	jmp	0x1164a	; 0x1164a <__vector_23>
      60:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      64:	0c 94 99 8b 	jmp	0x11732	; 0x11732 <__vector_25>
      68:	0c 94 6f 8b 	jmp	0x116de	; 0x116de <__vector_26>
      6c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      70:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      74:	0c 94 cf 8b 	jmp	0x1179e	; 0x1179e <__vector_29>
      78:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      7c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      80:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      84:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      88:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      8c:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      90:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      94:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      98:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      9c:	0c 94 4d 8d 	jmp	0x11a9a	; 0x11a9a <__vector_39>
      a0:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      a4:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      a8:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      ac:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      b0:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      b4:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      b8:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      bc:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      c0:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      c4:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>
      c8:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 3c 56 	jmp	0xac78	; 0xac78 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      d0:	0c 94 5b 59 	jmp	0xb2b6	; 0xb2b6 <get_function_default_temp(unsigned char, unsigned char, char*, char*)>
      d4:	0c 94 10 31 	jmp	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
      d8:	0c 94 fe 52 	jmp	0xa5fc	; 0xa5fc <get_function_thermostat_heat_or_cool(unsigned char)>
      dc:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <get_function_default_temp_max_items(unsigned char, unsigned char)>
      e0:	0c 94 03 98 	jmp	0x13006	; 0x13006 <EthernetUDP::begin(unsigned int)>
      e4:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
      e8:	0c 94 59 31 	jmp	0x62b2	; 0x62b2 <click_dialog_button_yes(unsigned char, unsigned char)>
      ec:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <display_function_set_variable_minus()>
      f0:	0c 94 01 87 	jmp	0x10e02	; 0x10e02 <turnOffPWM.lto_priv.233+0x58>
      f4:	0c 94 56 97 	jmp	0x12eac	; 0x12eac <EthernetUDP::parsePacket()>
      f8:	0c 94 27 87 	jmp	0x10e4e	; 0x10e4e <turnOffPWM.lto_priv.233+0xa4>
      fc:	0c 94 49 7c 	jmp	0xf892	; 0xf892 <TwoWire::available()>
     100:	0c 94 df 56 	jmp	0xadbe	; 0xadbe <display_menu_tds_set_period(unsigned char, unsigned char)>
     104:	0c 94 39 87 	jmp	0x10e72	; 0x10e72 <turnOffPWM.lto_priv.233+0xc8>
     108:	0c 94 38 80 	jmp	0x10070	; 0x10070 <IPAddress::printTo(Print&) const>
     10c:	0c 94 ac 51 	jmp	0xa358	; 0xa358 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     110:	0c 94 5a 7e 	jmp	0xfcb4	; 0xfcb4 <EthernetUDP::available()>
     114:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     118:	0c 94 b0 7c 	jmp	0xf960	; 0xf960 <HardwareSerial::write(unsigned char)>
     11c:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <Print::availableForWrite()>
     120:	0c 94 e1 2a 	jmp	0x55c2	; 0x55c2 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)>
     124:	0c 94 52 7c 	jmp	0xf8a4	; 0xf8a4 <HardwareSerial::availableForWrite()>
     128:	0c 94 31 87 	jmp	0x10e62	; 0x10e62 <turnOffPWM.lto_priv.233+0xb8>
     12c:	0c 94 9b 5d 	jmp	0xbb36	; 0xbb36 <mqtt_callback(char*, unsigned char*, unsigned int)>
     130:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <EthernetUDP::read(char*, unsigned int)>
     134:	0c 94 22 57 	jmp	0xae44	; 0xae44 <display_menu_tds_set_offset(unsigned char, unsigned char)>
     138:	0c 94 27 55 	jmp	0xaa4e	; 0xaa4e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     13c:	0c 94 90 24 	jmp	0x4920	; 0x4920 <display_function_vertical_slider_dec(unsigned char, unsigned char)>
     140:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     144:	0c 94 23 7c 	jmp	0xf846	; 0xf846 <TwoWire::read()>
     148:	0c 94 67 57 	jmp	0xaece	; 0xaece <menu_tds_save_name(unsigned char, unsigned char)>
     14c:	0c 94 62 7e 	jmp	0xfcc4	; 0xfcc4 <EthernetUDP::remoteIP()>
     150:	0c 94 23 87 	jmp	0x10e46	; 0x10e46 <turnOffPWM.lto_priv.233+0x9c>
     154:	0c 94 1e 5b 	jmp	0xb63c	; 0xb63c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     158:	0c 94 00 35 	jmp	0x6a00	; 0x6a00 <EthernetClient::connect(char const*, unsigned int)>
     15c:	0c 94 65 31 	jmp	0x62ca	; 0x62ca <serial_putc(char, __file*)>
     160:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <click_keyboard_number(unsigned char, unsigned char)>
     164:	0c 94 74 7e 	jmp	0xfce8	; 0xfce8 <EthernetClient::operator==(EthernetClient const&)>
     168:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <get_function_budik_text_state(unsigned char, unsigned char, char*)>
     16c:	0c 94 25 24 	jmp	0x484a	; 0x484a <get_function_default_temp_active(unsigned char, unsigned char, unsigned char)>
     170:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <EthernetClient::write(unsigned char const*, unsigned int)>
     174:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <get_function_keyboard_alfa_max_keys(unsigned char)>
     178:	0c 94 f9 86 	jmp	0x10df2	; 0x10df2 <turnOffPWM.lto_priv.233+0x48>
     17c:	0c 94 9f 51 	jmp	0xa33e	; 0xa33e <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     180:	0c 94 28 96 	jmp	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
     184:	0c 94 cc 53 	jmp	0xa798	; 0xa798 <tds_associate(unsigned char)>
     188:	0c 94 38 2e 	jmp	0x5c70	; 0x5c70 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     18c:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <EthernetClient::flush()>
     190:	0c 94 d4 24 	jmp	0x49a8	; 0x49a8 <menu_redraw_update_temp(unsigned char, unsigned char)>
     194:	0c 94 b6 58 	jmp	0xb16c	; 0xb16c <click_rtds_setting_sensor(unsigned char, unsigned char)>
     198:	0c 94 13 20 	jmp	0x4026	; 0x4026 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     19c:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     1a0:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>
     1a4:	0c 94 cb 7d 	jmp	0xfb96	; 0xfb96 <TwoWire::write(unsigned char const*, unsigned int)>
     1a8:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <EthernetClient::read()>
     1ac:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <LCDWIKI_KBV::Get_Width() const>
     1b0:	0c 94 3e 98 	jmp	0x1307c	; 0x1307c <EthernetUDP::endPacket()>
     1b4:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1b8:	0c 94 a7 97 	jmp	0x12f4e	; 0x12f4e <EthernetUDP::peek()>
     1bc:	0c 94 ee 25 	jmp	0x4bdc	; 0x4bdc <nullfce()>
     1c0:	0c 94 5b 52 	jmp	0xa4b6	; 0xa4b6 <click_thermostat_set_mode(unsigned char)>
     1c4:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <get_function_budik_enabled(unsigned char)>
     1c8:	0c 94 37 2b 	jmp	0x566e	; 0x566e <click_keyboard_alfa(unsigned char, unsigned char)>
     1cc:	0c 94 50 7c 	jmp	0xf8a0	; 0xf8a0 <TwoWire::onRequestService()>
     1d0:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>
     1d4:	0c 94 7f 9a 	jmp	0x134fe	; 0x134fe <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041>
     1d8:	0c 94 50 31 	jmp	0x62a0	; 0x62a0 <dialog_set_variable_button_click(unsigned char, unsigned char)>
     1dc:	0c 94 a6 54 	jmp	0xa94c	; 0xa94c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>
     1e0:	0c 94 c2 57 	jmp	0xaf84	; 0xaf84 <menu_tds_save_offset(unsigned char, unsigned char)>
     1e4:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <display_enable_show(unsigned char, unsigned char)>
     1e8:	0c 94 ac 7b 	jmp	0xf758	; 0xf758 <display_menu_rtds_update_name(unsigned char, unsigned char)>
     1ec:	0c 94 0b 87 	jmp	0x10e16	; 0x10e16 <turnOffPWM.lto_priv.233+0x6c>
     1f0:	0c 94 31 98 	jmp	0x13062	; 0x13062 <EthernetUDP::stop()>
     1f4:	0c 94 e9 58 	jmp	0xb1d2	; 0xb1d2 <click_rtds_add_sensor(unsigned char, unsigned char)>
     1f8:	0c 94 23 25 	jmp	0x4a46	; 0x4a46 <display_function_set_variable_plus()>
     1fc:	0c 94 83 7c 	jmp	0xf906	; 0xf906 <HardwareSerial::available()>
     200:	0c 94 bc 51 	jmp	0xa378	; 0xa378 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)>
     204:	0c 94 b4 80 	jmp	0x10168	; 0x10168 <EthernetUDP::beginPacket(char const*, unsigned int)>
     208:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <EthernetClient::operator!=(EthernetClient const&)>
     20c:	0c 94 ac 52 	jmp	0xa558	; 0xa558 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     210:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <EthernetClient::connect(IPAddress, unsigned int)>
     214:	0c 94 7f 7e 	jmp	0xfcfe	; 0xfcfe <EthernetClient::operator bool()>
     218:	0c 94 0f 52 	jmp	0xa41e	; 0xa41e <preload_regulator_menu(unsigned char, unsigned char, unsigned char)>
     21c:	0c 94 72 7e 	jmp	0xfce4	; 0xfce4 <UDP::beginMulticast(IPAddress, unsigned int)>
     220:	0c 94 5b 4f 	jmp	0x9eb6	; 0x9eb6 <helper_thermostat_set_mezni(int, unsigned char)>
     224:	0c 94 db 59 	jmp	0xb3b6	; 0xb3b6 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>
     228:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <menu_redraw_time05s(unsigned char, unsigned char)>
     22c:	0c 94 f3 86 	jmp	0x10de6	; 0x10de6 <turnOffPWM.lto_priv.233+0x3c>
     230:	0c 94 bc 7d 	jmp	0xfb78	; 0xfb78 <TwoWire::peek()>
     234:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <EthernetClient::write(unsigned char)>
     238:	0c 94 03 30 	jmp	0x6006	; 0x6006 <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     23c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <click_keyboard_type(unsigned char, unsigned char)>
     240:	0c 94 11 87 	jmp	0x10e22	; 0x10e22 <turnOffPWM.lto_priv.233+0x78>
     244:	0c 94 68 5d 	jmp	0xbad0	; 0xbad0 <menu_rtds_create_name(unsigned char, unsigned char)>
     248:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <get_function_return_args_1(unsigned char, unsigned char)>
     24c:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     250:	0c 94 fd 5c 	jmp	0xb9fa	; 0xb9fa <menu_rtds_update_name(unsigned char, unsigned char)>
     254:	0c 94 1f 87 	jmp	0x10e3e	; 0x10e3e <turnOffPWM.lto_priv.233+0x94>
     258:	0c 94 f7 7c 	jmp	0xf9ee	; 0xf9ee <HardwareSerial::flush()>
     25c:	0c 94 43 52 	jmp	0xa486	; 0xa486 <set_function_thermostat_heat_or_cool(unsigned char)>
     260:	0c 94 9a 57 	jmp	0xaf34	; 0xaf34 <menu_tds_save_period(unsigned char, unsigned char)>
     264:	0c 94 a6 56 	jmp	0xad4c	; 0xad4c <display_menu_tds_set_name(unsigned char, unsigned char)>
     268:	0c 94 67 98 	jmp	0x130ce	; 0x130ce <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     26c:	0c 94 29 26 	jmp	0x4c52	; 0x4c52 <EthernetClient::read(unsigned char*, unsigned int)>
     270:	0c 94 46 31 	jmp	0x628c	; 0x628c <MenuHistoryPrevMenu()>
     274:	0c 94 62 51 	jmp	0xa2c4	; 0xa2c4 <click_function_default_temp(unsigned char, unsigned char)>
     278:	0c 94 08 5a 	jmp	0xb410	; 0xb410 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     27c:	0c 94 51 7c 	jmp	0xf8a2	; 0xf8a2 <TwoWire::onReceiveService(unsigned char*, int)>
     280:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <menu_redraw_change_term_mode(unsigned char, unsigned char)>
     284:	0c 94 38 87 	jmp	0x10e70	; 0x10e70 <turnOffPWM.lto_priv.233+0xc6>
     288:	0c 94 b0 98 	jmp	0x13160	; 0x13160 <EthernetClient::connected()>
     28c:	0c 94 3e 24 	jmp	0x487c	; 0x487c <get_function_rtds_last_index_for_menu(unsigned char, unsigned char)>
     290:	0c 94 1f 25 	jmp	0x4a3e	; 0x4a3e <get_function_keyboard_number_max_keys(unsigned char, unsigned char, unsigned char)>
     294:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     298:	0c 94 15 87 	jmp	0x10e2a	; 0x10e2a <turnOffPWM.lto_priv.233+0x80>
     29c:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     2a0:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <LCDWIKI_KBV::Get_Height() const>
     2a4:	0c 94 98 5d 	jmp	0xbb30	; 0xbb30 <click_rtds_subscribe(unsigned char, unsigned char)>
     2a8:	0c 94 5d 7d 	jmp	0xfaba	; 0xfaba <Print::write(unsigned char const*, unsigned int)>
     2ac:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <EthernetClient::peek()>
     2b0:	0c 94 bb 7d 	jmp	0xfb76	; 0xfb76 <TwoWire::flush()>
     2b4:	0c 94 2d 87 	jmp	0x10e5a	; 0x10e5a <turnOffPWM.lto_priv.233+0xb0>
     2b8:	0c 94 b8 2e 	jmp	0x5d70	; 0x5d70 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2bc:	0c 94 23 31 	jmp	0x6246	; 0x6246 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)>
     2c0:	0c 94 d3 98 	jmp	0x131a6	; 0x131a6 <EthernetClient::stop()>
     2c4:	0c 94 6a 58 	jmp	0xb0d4	; 0xb0d4 <printf_via_mqtt(char, __file*)>
     2c8:	0c 94 32 7e 	jmp	0xfc64	; 0xfc64 <EthernetUDP::flush()>
     2cc:	0c 94 ad 24 	jmp	0x495a	; 0x495a <a2d_complete(unsigned char, unsigned int)>
     2d0:	0c 94 44 7e 	jmp	0xfc88	; 0xfc88 <EthernetUDP::write(unsigned char)>
     2d4:	0c 94 0d 97 	jmp	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
     2d8:	0c 94 ef 36 	jmp	0x6dde	; 0x6dde <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     2dc:	0c 94 74 52 	jmp	0xa4e8	; 0xa4e8 <get_function_thermostat_has_mode(unsigned char)>
     2e0:	0c 94 5e 7e 	jmp	0xfcbc	; 0xfcbc <EthernetUDP::remotePort()>
     2e4:	0c 94 35 87 	jmp	0x10e6a	; 0x10e6a <turnOffPWM.lto_priv.233+0xc0>
     2e8:	0c 94 64 2c 	jmp	0x58c8	; 0x58c8 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2ec:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <returnnullfceargs(unsigned int, unsigned int)>
     2f0:	0c 94 47 26 	jmp	0x4c8e	; 0x4c8e <EthernetClient::available()>
     2f4:	0c 94 2c 97 	jmp	0x12e58	; 0x12e58 <EthernetUDP::read()>
     2f8:	0c 94 f8 7d 	jmp	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
     2fc:	0c 94 75 7c 	jmp	0xf8ea	; 0xf8ea <HardwareSerial::peek()>
     300:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <display_element_set_string_del_char(unsigned char, unsigned char)>
     304:	0c 94 9b 54 	jmp	0xa936	; 0xa936 <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     308:	0c 94 19 87 	jmp	0x10e32	; 0x10e32 <turnOffPWM.lto_priv.233+0x88>
     30c:	0c 94 07 87 	jmp	0x10e0e	; 0x10e0e <turnOffPWM.lto_priv.233+0x64>
     310:	0c 94 fd 86 	jmp	0x10dfa	; 0x10dfa <turnOffPWM.lto_priv.233+0x50>
     314:	0c 94 31 24 	jmp	0x4862	; 0x4862 <get_function_one_wire_last_index_for_menu(unsigned char)>
     318:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     31c:	0c 94 61 7c 	jmp	0xf8c2	; 0xf8c2 <HardwareSerial::read()>
     320:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <display_function_vertical_slider_inc(unsigned char, unsigned char)>

00000324 <__trampolines_end>:
__trampolines_end():
     324:	4e 41       	sbci	r20, 0x1E	; 30
     326:	4e 49       	Address 0x0000000000000326 is out of bounds.
.word	0xffff	; ????

00000327 <pstr_inity>:
     327:	49 4e 49 54 59                                      INITY

0000032c <pstr_inf>:
     32c:	49 4e 46                                            INF

0000032f <pwr_m10>:
     32f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     33f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000347 <pwr_p10>:
     347:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     357:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     367:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     377:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     387:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     397:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3a7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     3b7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     3c7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     3d7:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     3e7:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     3f7:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     407:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     417:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     427:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     437:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     447:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     457:	3d 27                                               ='

00000459 <text_nastavit_pid>:
     459:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

00000463 <text_assocoivat_output>:
     463:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

00000473 <text_assocoivat>:
     473:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

00000482 <ring_text_setup>:
     482:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

0000048c <nastaveni_rtds_subscribe>:
     48c:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

0000049c <text_rtds_novy>:
     49c:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     4ac:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

000004b7 <button_mode_cool>:
     4b7:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

000004c0 <button_mode_heat>:
     4c0:	54 6f 70 65 6e 69 00                                Topeni.

000004c7 <nastaveni_ring_text>:
     4c7:	4e 61 73 74 61 76 65 6e 69 20 6f 6b 72 75 68 75     Nastaveni okruhu
	...

000004d8 <text_no>:
     4d8:	4e 65 00                                            Ne.

000004db <text_yes>:
     4db:	41 6e 6f 00                                         Ano.

000004df <text_special_case>:
     4df:	40 00                                               @.

000004e1 <text_lower_case>:
     4e1:	61 00                                               a.

000004e3 <text_upper_case>:
     4e3:	41 00                                               A.

000004e5 <text_delete_char>:
     4e5:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

000004ef <text_klavesnice>:
     4ef:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

000004fa <text_zrusit>:
     4fa:	5a 72 75 73 69 74 00                                Zrusit.

00000501 <text_ulozit>:
     501:	55 6c 6f 7a 69 74 00                                Ulozit.

00000508 <text_upozorneni>:
     508:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00000513 <nastaveni_tds_offset>:
     513:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

00000523 <nastaveni_name_sensor>:
     523:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

00000532 <nastaveni_delete_sensor>:
     532:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00000540 <text_tds_sensors>:
     540:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     550:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

0000055b <budik_text>:
     55b:	42 75 64 69 6b 00                                   Budik.

00000561 <text_select_default_temp>:
     561:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     571:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

0000057b <button_zpet>:
     57b:	5a 70 65 74 00                                      Zpet.

00000580 <nastaveni_default>:
     580:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000590 <nastaveni_nrf>:
     590:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

0000059e <nastaveni_site>:
     59e:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000005ad <nastaveni_text>:
     5ad:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000005b7 <funkce_text>:
     5b7:	46 75 6e 6b 63 65 00                                Funkce.

000005be <regulator_text>:
     5be:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

000005c8 <Menu_All>:
     5c8:	06 06 02 98 33 be 05 22 01 96 00 aa 00 28 00 02     ....3..".....(..
     5d8:	05 10 31 08 ea 25 b7 05 22 01 5a 00 aa 00 28 00     ..1..%..".Z...(.
     5e8:	02 01 10 31 08 ea 25 ad 05 22 01 1e 00 aa 00 28     ...1..%..".....(
     5f8:	00 02 02 10 31 08 ea 25 00 00 00 00 00 00 00 00     ....1..%........
	...
     674:	00 00 00 92 34 0a 00 dc 00 52 00 3c 00 03 9a d6     ....4....R.<....
     684:	ff ff 00 5b 52 74 52 0a ea 25 8e 34 64 00 dc 00     ...[RtR..%.4d...
     694:	52 00 3c 00 03 00 f8 ff ff 01 5b 52 74 52 0a ea     R.<.......[RtR..
     6a4:	25 7d 34 be 00 dc 00 52 00 3c 00 03 1f 00 ff ff     %}4....R.<......
     6b4:	07 5b 52 74 52 0a ea 25 85 34 18 01 dc 00 52 00     .[RtR..%.4....R.
     6c4:	3c 00 03 e0 ff ff ff 02 5b 52 74 52 0a ea 25 8a     <.......[RtR..%.
     6d4:	34 72 01 dc 00 52 00 3c 00 03 e0 07 ff ff 08 5b     4r...R.<.......[
     6e4:	52 74 52 0a ea 25 0a 00 82 00 00 1e 5b 00 00 00     RtR..%......[...
     6f4:	00 0c ee 25 ea 25 18 01 22 01 00 0a 30 00 00 00     ...%.%.."...0...
     704:	00 0c ee 25 ea 25 0a 00 1e 00 00 de 2b 00 00 00     ...%.%......+...
     714:	00 09 ee 25 ea 25 00 00 00 00 00 00 00 00 00 00     ...%.%..........
	...
     810:	03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     820:	01 01 ff ff 08 e6 24 dd 24 d4 24 ec 25 ad 05 9e     ......$.$.$.%...
     830:	05 0a 00 28 00 be 00 28 00 02 00 ee 25 08 ea 25     ...(...(....%..%
     840:	90 05 0a 00 64 00 be 00 28 00 02 00 ee 25 08 ea     ....d...(....%..
     850:	25 80 05 0a 00 a0 00 be 00 28 00 02 00 ee 25 08     %........(....%.
     860:	ea 25 7b 05 0a 00 dc 00 be 00 28 00 02 00 46 31     .%{.......(...F1
     870:	08 ea 25 60 34 18 01 64 00 be 00 28 00 02 06 10     ..%`4..d...(....
     880:	31 08 ea 25 6f 34 18 01 28 00 be 00 28 00 02 03     1..%o4..(...(...
     890:	10 31 08 ea 25 61 05 18 01 a0 00 be 00 28 00 01     .1..%a.......(..
     8a0:	08 10 31 08 ea 25 00 00 00 00 00 00 00 00 00 00     ..1..%..........
	...
     94c:	18 01 22 01 00 0a 30 00 00 00 00 0c ee 25 ea 25     .."...0......%.%
	...
     a70:	00 00 07 00 01 00 00 00 00 00 02 00 00 00 00 e0     ................
     a80:	01 40 01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 b7     .@......%.%.%.%.
     a90:	05 7b 05 0a 00 dc 00 be 00 28 00 02 00 46 31 08     .{.......(...F1.
     aa0:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
     bac:	00 00 18 01 22 01 00 0a 30 00 00 00 00 0c ee 25     ...."...0......%
     bbc:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
     bdc:	00 00 5b 05 0a 00 28 00 be 00 78 00 02 00 00 00     ..[...(...x.....
     bec:	00 01 ee 25 21 25 61 26 08 00 00 00 00 00 00 00     ...%!%a&........
	...
     cd4:	01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01 40     ...............@
     ce4:	01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 6f 34 7b     ......%.%.%.%o4{
     cf4:	05 0a 00 dc 00 be 00 28 00 02 00 46 31 08 ea 25     .......(...F1..%
	...
     e10:	18 01 22 01 00 0a 30 00 00 00 00 0c ee 25 ea 25     .."...0......%.%
     e20:	9a 01 48 00 00 38 2e 28 00 7e 00 08 ee 25 ea 25     ..H..8.(.~...%.%
     e30:	dc 00 14 00 00 64 2c f0 00 f0 00 08 ee 25 ea 25     .....d,......%.%
	...
     e84:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
     e94:	01 a6 54 23 31 31 24 08 00 00 00 00 00 00 00 00     ..T#11$.........
	...
     eb0:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 90 24     ...+....(.(....$
     ec0:	08 ea 25 2d 9a 01 c8 00 28 00 28 00 02 00 9c 24     ..%-....(.(....$
     ed0:	08 ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00     ..%.............
	...
     f34:	00 00 01 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
     f44:	01 40 01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 40     .@......%.%.%.%@
     f54:	05 7b 05 0a 00 dc 00 be 00 28 00 02 00 46 31 08     .{.......(...F1.
     f64:	ea 25 32 05 18 01 be 00 be 00 28 00 02 00 9b 54     .%2.......(....T
     f74:	08 ea 25 e6 33 18 01 8c 00 be 00 28 00 02 00 df     ..%.3......(....
     f84:	56 08 ea 25 23 05 18 01 5a 00 be 00 28 00 02 00     V..%#...Z...(...
     f94:	a6 56 08 ea 25 13 05 18 01 28 00 be 00 28 00 02     .V..%....(...(..
     fa4:	00 22 57 08 ea 25 00 00 00 00 00 00 00 00 00 00     ."W..%..........
	...
    1070:	00 00 18 01 22 01 00 0a 30 00 00 00 00 0c ee 25     ...."...0......%
    1080:	ea 25 14 00 14 00 00 27 55 00 00 00 00 08 ee 25     .%.....'U......%
    1090:	ea 25 14 00 14 00 00 3c 56 00 00 00 00 0c ee 25     .%.....<V......%
    10a0:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    1198:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    11a8:	01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 08 05 01     ......%.%.%.%...
    11b8:	05 0a 00 c8 00 82 00 28 00 02 00 50 31 08 ea 25     .......(...P1..%
    11c8:	fa 04 96 00 c8 00 82 00 28 00 02 00 46 31 08 ea     ........(...F1..
    11d8:	25 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     %...............
	...
    12d4:	64 00 2d 00 00 3e 2f b4 00 28 00 08 ee 25 ea 25     d.-..>/..(...%.%
	...
    1374:	00 00 00 2b 3c 00 2d 00 28 00 28 00 02 00 23 25     ...+<.-.(.(...#%
    1384:	08 ea 25 2d 18 01 2d 00 28 00 28 00 02 00 44 25     ..%-..-.(.(...D%
    1394:	08 ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00     ..%.............
	...
    13f8:	00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc     ..........f.....
    1408:	01 04 01 06 e0 ff 00 ec 25 ec 25 ec 25 ec 25 ef     ........%.%.%.%.
    1418:	04 01 05 0a 00 c8 00 82 00 28 00 02 00 50 31 08     .........(...P1.
    1428:	ea 25 fa 04 96 00 c8 00 82 00 28 00 02 00 46 31     .%........(...F1
    1438:	08 ea 25 e5 04 2c 01 c8 00 82 00 28 00 02 00 12     ..%..,.....(....
    1448:	2b 08 ea 25 e3 04 40 01 23 00 28 00 28 00 02 00     +..%..@.#.(.(...
    1458:	ef 24 08 ea 25 e1 04 6d 01 23 00 28 00 28 00 02     .$..%..m.#.(.(..
    1468:	01 ef 24 08 ea 25 df 04 9a 01 23 00 28 00 28 00     ..$..%....#.(.(.
    1478:	02 02 ef 24 08 ea 25 00 00 00 00 00 00 00 00 00     ...$..%.........
	...
    1534:	00 00 0a 00 23 00 00 b8 2e 2c 01 28 00 08 ee 25     ....#....,.(...%
    1544:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    15f8:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    1608:	03 f9 24 37 2b f2 24 08 00 00 00 00 00 00 00 00     ..$7+.$.........
	...
    165c:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    166c:	01 06 e0 ff 00 ec 25 ec 25 ec 25 ec 25 08 05 01     ......%.%.%.%...
    167c:	05 0a 00 c8 00 82 00 28 00 02 00 50 31 08 ea 25     .......(...P1..%
    168c:	fa 04 96 00 c8 00 82 00 28 00 02 00 46 31 08 ea     ........(...F1..
    169c:	25 e5 04 2c 01 c8 00 82 00 28 00 02 00 12 2b 08     %..,.....(....+.
    16ac:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    1798:	0a 00 23 00 00 b8 2e 2c 01 28 00 08 ee 25 ea 25     ..#....,.(...%.%
	...
    1858:	00 00 00 0a 00 3c 00 1e 00 1e 00 02 28 28 02 09     .....<......((..
    1868:	00 00 02 15 25 50 2b 1f 25 08 00 00 00 00 00 00     ....%P+.%.......
	...
    18bc:	00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc     ..........e.....
    18cc:	01 04 01 06 e0 ff 00 ec 25 ec 25 ec 25 ec 25 08     ........%.%.%.%.
    18dc:	05 db 04 1e 00 3c 00 64 00 28 00 02 00 59 31 08     .....<.d.(...Y1.
    18ec:	ea 25 d8 04 fa 00 3c 00 64 00 28 00 02 00 46 31     .%....<.d.(...F1
    18fc:	08 ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00     ..%.............
	...
    19f8:	00 00 14 00 23 00 00 fd 2a 00 00 00 00 08 ee 25     ....#...*......%
    1a08:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    1b20:	02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01 8c     ........d2.2.|..
    1b30:	00 06 e0 ff 00 ec 25 ec 25 ec 25 ec 25 be 05 7b     ......%.%.%.%..{
    1b40:	05 0a 00 dc 00 be 00 28 00 02 00 46 31 08 ea 25     .......(...F1..%
    1b50:	c7 04 0a 00 a0 00 be 00 28 00 01 09 10 31 08 ea     ........(....1..
    1b60:	25 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     %...............
	...
    1be8:	00 c0 04 f0 00 5a 00 64 00 28 00 01 00 f8 ff ff     .....Z.d.(......
    1bf8:	03 43 52 fe 52 0a ac 51 b7 04 68 01 5a 00 64 00     .CR.R..Q..h.Z.d.
    1c08:	28 00 01 1f 00 ff ff 05 43 52 fe 52 0a ac 51 00     (.......CR.R..Q.
	...
    1c5c:	18 01 22 01 00 0a 30 00 00 00 00 0c ee 25 ea 25     .."...0......%.%
    1c6c:	8c 00 05 00 00 ac 52 00 00 00 00 08 ee 25 ea 25     ......R......%.%
    1c7c:	18 01 28 00 00 03 30 8c 00 28 00 08 ee 25 ac 51     ..(...0..(...%.Q
	...
    1cd0:	00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01 00     ...(...(........
    1ce0:	01 e1 2a ee 25 d3 24 08 0a 00 64 00 be 00 28 00     ..*.%.$...d...(.
    1cf0:	01 01 01 00 01 01 00 01 bc 51 ee 25 d3 24 08 2b     .........Q.%.$.+
    1d00:	a4 01 28 00 28 00 28 00 02 00 23 25 08 ac 51 2d     ..(.(.(...#%..Q-
    1d10:	f0 00 28 00 28 00 28 00 02 00 44 25 08 ac 51 00     ..(.(.(...D%..Q.
	...
    1d80:	00 00 02 02 03 00 02 02 00 00 05 00 00 00 00 e0     ................
    1d90:	01 40 01 01 ff ff 08 ec 25 ec 25 ec 25 0f 52 60     .@......%.%.%.R`
    1da0:	34 7b 05 0a 00 dc 00 be 00 28 00 02 00 46 31 08     4{.......(...F1.
    1db0:	ea 25 9c 04 0a 00 28 00 be 00 28 00 01 00 e9 58     .%....(...(....X
    1dc0:	08 ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00     ..%.............
	...
    1ebc:	00 00 dc 00 14 00 00 64 2c f0 00 f0 00 08 ee 25     .......d,......%
    1ecc:	ea 25 18 01 22 01 00 0a 30 00 00 00 00 0c ee 25     .%.."...0......%
    1edc:	ea 25 9a 01 48 00 01 38 2e 28 00 7e 00 08 ee 25     .%..H..8.(.~...%
    1eec:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    1f30:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
    1f40:	01 01 04 db 59 b6 58 3e 24 08 00 00 00 00 00 00     ....Y.X>$.......
	...
    1f60:	00 2b 9a 01 1e 00 28 00 28 00 02 01 90 24 08 00     .+....(.(....$..
    1f70:	00 2d 9a 01 c8 00 28 00 28 00 02 01 9c 24 08 00     .-....(.(....$..
	...
    1fe4:	02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01 40     ...............@
    1ff4:	01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 60 34 7b     ......%.%.%.%`4{
    2004:	05 0a 00 dc 00 be 00 28 00 02 00 46 31 08 ea 25     .......(...F1..%
    2014:	32 05 18 01 5a 00 be 00 28 00 02 00 9f 51 08 ea     2...Z...(....Q..
    2024:	25 23 05 18 01 28 00 be 00 28 00 02 00 ac 7b 08     %#...(...(....{.
    2034:	ea 25 8c 04 18 01 8c 00 be 00 28 00 02 00 98 5d     .%........(....]
    2044:	08 ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00     ..%.............
	...
    2120:	14 00 14 00 00 08 5a 00 00 00 00 0c ee 25 ea 25     ......Z......%.%
	...
    2244:	00 00 04 00 01 00 00 00 00 00 07 00 00 00 00 e0     ................
    2254:	01 40 01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 61     .@......%.%.%.%a
    2264:	05 7b 05 0a 00 dc 00 be 00 28 00 02 00 46 31 08     .{.......(...F1.
    2274:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    2380:	00 00 18 01 22 01 00 0a 30 00 00 00 00 0c ee 25     ...."...0......%
    2390:	ea 25 9a 01 48 00 02 38 2e 28 00 56 00 08 ee 25     .%..H..8.(.V...%
    23a0:	ea 25 05 00 1e 00 00 64 2c cc 01 b4 00 08 ee 25     .%.....d,......%
    23b0:	ea 25 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .%..............
	...
    2424:	00 2b 9a 01 1e 00 28 00 28 00 02 02 90 24 08 00     .+....(.(....$..
    2434:	00 2d 9a 01 a0 00 28 00 28 00 02 02 9c 24 08 00     .-....(.(....$..
	...
    2488:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    2498:	82 50 02 03 02 02 00 5b 59 62 51 2b 24 25 24 08     .P.....[YbQ+$%$.
    24a8:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    24b8:	01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 82 04 7b     ......%.%.%.%..{
    24c8:	05 0a 00 dc 00 be 00 28 00 02 00 46 31 08 ea 25     .......(...F1..%
    24d8:	23 05 18 01 28 00 be 00 28 00 01 00 ee 25 08 ea     #...(...(....%..
    24e8:	25 73 04 18 01 64 00 be 00 28 00 01 00 ee 25 08     %s...d...(....%.
    24f8:	ea 25 63 04 18 01 a0 00 be 00 28 00 01 00 ee 25     .%c.......(....%
    2508:	08 ea 25 59 04 18 01 dc 00 be 00 28 00 01 00 ee     ..%Y.......(....
    2518:	25 08 ea 25 00 00 00 00 00 00 00 00 00 00 00 00     %..%............
	...
    25e4:	18 01 22 01 00 0a 30 00 00 00 00 0c ee 25 ea 25     .."...0......%.%
    25f4:	8c 00 05 00 00 ac 52 00 00 00 00 08 ee 25 ea 25     ......R......%.%
	...
    2708:	00 00 05 00 02 00 00 00 00 00 09 00 00 00 00 e0     ................
    2718:	01 40 01 01 ff ff 08 ec 25 ec 25 ec 25 ec 25 00     .@......%.%.%.%.
	...

000030af <keyboad_number_char_special>:
    30af:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    30bf:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

000030c9 <keyboad_number_char_lower>:
    30c9:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    30d9:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

000030e3 <keyboad_number_char_upper>:
    30e3:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    30f3:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

000030fd <network_name>:
    30fd:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

0000310a <network_mqtt_key>:
    310a:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

0000311b <network_mqtt_user>:
    311b:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    312b:	72 00                                               r.

0000312d <network_mqtt_port>:
    312d:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    313d:	74 00                                               t.

0000313f <network_mqtt_host>:
    313f:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    314f:	74 00                                               t.

00003151 <network_ntp>:
    3151:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

0000315d <network_dns>:
    315d:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00003169 <network_gw>:
    3169:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00003174 <network_netmask>:
    3174:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00003184 <network_mac>:
    3184:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00003190 <global_time_offset>:
    3190:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    31a0:	6f 66 66 73 65 74 00                                offset.

000031a7 <global_time_ntp>:
    31a7:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

000031b7 <global_time_set>:
    31b7:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

000031c7 <termbig_header_out>:
    31c7:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000031d5 <termbig_subscribe>:
    31d5:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    31e5:	73 63 72 69 62 65 00                                scribe.

000031ec <thermctl_subscribe>:
    31ec:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    31fc:	62 73 63 72 69 62 65 00                             bscribe.

00003204 <lightctl_header_out>:
    3204:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00003213 <thermctl_header_in>:
    3213:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00003221 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    3221:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    3231:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    3241:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    3251:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    3261:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    3271:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    3281:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

0000328d <text_rtc_cas>:
    328d:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    329d:	6e 79 00                                            ny.

000032a0 <text_ntp_cas>:
    32a0:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    32b0:	63 61 73 00                                         cas.

000032b4 <text_pid_regulator>:
    32b4:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

000032c2 <text_nrf_rozhrani>:
    32c2:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

000032cf <text_rest_rozhrani>:
    32cf:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    32df:	69 00                                               i.

000032e1 <thermctl_header_out>:
    32e1:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

000032f0 <text_mqtt_rozhrani>:
    32f0:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

000032fe <text_ethernet_rozhrani>:
    32fe:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    330e:	69 00                                               i.

00003310 <text_onewire_hledam>:
    3310:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

0000331d <text_onewire_rozhrani>:
    331d:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

0000332c <text_touchscreen>:
    332c:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00003338 <text_nastaveni_systemu>:
    3338:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    3348:	75 00                                               u.

0000334a <text_test_eeprom>:
    334a:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

0000335a <text_ok>:
    335a:	4f 4b 00                                            OK.

0000335d <text_test_ram>:
    335d:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

0000336a <text_bezny_start>:
    336a:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00003376 <text_vychozi_nastaveni>:
    3376:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    3386:	69 00                                               i.

00003388 <text_vnitrni_ochrany>:
    3388:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00003398 <term_title>:
    3398:	50 6f 6b 6f 6a 6f 76 79 20 74 65 72 6d 6f 73 74     Pokojovy termost
    33a8:	61 74 20 76 33 00                                   at v3.

000033ae <regulator_default_text>:
    33ae:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    33be:	72 3a 00                                            r:.

000033c1 <current_time>:
    33c1:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

000033ce <current_temp>:
    33ce:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    33de:	3a 00                                               :.

000033e0 <text_err>:
    33e0:	45 72 72 6f 72 00                                   Error.

000033e6 <nastaveni_tds_period>:
    33e6:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

000033f5 <temp_offset_short>:
    33f5:	6f 66 66 73 65 74 3a 00                             offset:.

000033fd <text_online>:
    33fd:	4f 6e 6c 69 6e 65 00                                Online.

00003404 <text_last_update>:
    3404:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    3414:	7a 61 63 65 3a 00                                   zace:.

0000341a <current_temp_short>:
    341a:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00003423 <text_nazev>:
    3423:	4e 61 7a 65 76 3a 00                                Nazev:.

0000342a <text_nastavit_tds>:
    342a:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    343a:	6c 6f 00                                            lo.

0000343d <text_not_used>:
    343d:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

0000344a <text_associovat_tds>:
    344a:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    345a:	64 6c 6f 00                                         dlo.

0000345e <text_rtds_prefix>:
    345e:	2f 00                                               /.

00003460 <nastaveni_rtds>:
    3460:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

0000346f <nastaveni_onewire>:
    346f:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

0000347d <button_term_min>:
    347d:	4d 49 4e 00                                         MIN.

00003481 <button_term_fan>:
    3481:	46 41 4e 00                                         FAN.

00003485 <button_term_prog>:
    3485:	50 52 4f 47 00                                      PROG.

0000348a <button_term_man>:
    348a:	4d 41 4e 00                                         MAN.

0000348e <button_term_max>:
    348e:	4d 41 58 00                                         MAX.

00003492 <button_term_off>:
    3492:	4f 46 46 00                                         OFF.

00003496 <status_know_devices>:
    3496:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    34a6:	63 65 73 00                                         ces.

000034aa <_ZL10network_ip.lto_priv.232>:
    34aa:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

000034b5 <status_mqtt_process>:
    34b5:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    34c5:	65 73 73 00                                         ess.

000034c9 <status_mqtt_receive>:
    34c9:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    34d9:	69 76 65 00                                         ive.

000034dd <status_mqtt_error>:
    34dd:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    34ed:	72 00                                               r.

000034ef <status_mqtt_send>:
    34ef:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00003500 <port_to_mode_PGM>:
    3500:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00003510 <digital_pin_to_timer_PGM>:
    3510:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    3544:	00 03                                               ..

00003546 <lcd_font>:
    3546:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    3556:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    3566:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    3576:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    3586:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    3596:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    35a6:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    35b6:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    35c6:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    35d6:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    35e6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    35f6:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    3606:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    3616:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    3626:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    3636:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    3646:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    3656:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    3666:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    3676:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    3686:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    3696:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    36a6:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    36b6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    36c6:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    36d6:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    36e6:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    36f6:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    3706:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    3716:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    3726:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    3736:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    3746:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    3756:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    3766:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    3776:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    3786:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    3796:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    37a6:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    37b6:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    37c6:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    37d6:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    37e6:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    37f6:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    3806:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    3816:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    3826:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    3836:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    3846:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    3856:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    3866:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    3876:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    3886:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    3896:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    38a6:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    38b6:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    38c6:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    38d6:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    38e6:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    38f6:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    3906:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    3916:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    3926:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    3936:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    3946:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    3956:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    3966:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    3976:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    3986:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    3996:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    39a6:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    39b6:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    39c6:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    39d6:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    39e6:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    39f6:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    3a06:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    3a16:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    3a26:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    3a36:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00003a41 <port_to_input_PGM>:
    3a41:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00003a51 <digital_pin_to_bit_mask_PGM>:
    3a51:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    3a61:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    3a71:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    3a81:	08 10 20 40 80 20                                   .. @. 

00003a87 <port_to_output_PGM>:
    3a87:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00003a97 <digital_pin_to_port_PGM>:
    3a97:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    3aa7:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    3ab7:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    3ac7:	06 06 06 06 06 07                                   ......

00003acd <daysInMonth>:
    3acd:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f 00              .............

00003ada <__ctors_start>:
__ctors_start():
    3ada:	7f 9a       	sbi	0x0f, 7	; 15

00003adc <__ctors_end>:
__dtors_end():
    3adc:	11 24       	eor	r1, r1
    3ade:	1f be       	out	0x3f, r1	; 63
    3ae0:	cf ef       	ldi	r28, 0xFF	; 255
    3ae2:	d1 e2       	ldi	r29, 0x21	; 33
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	00 e0       	ldi	r16, 0x00	; 0
    3aea:	0c bf       	out	0x3c, r16	; 60

00003aec <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    3aec:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    3aee:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    3af0:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    3af2:	e4 e4       	ldi	r30, 0x44	; 68
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    3af4:	fa e6       	ldi	r31, 0x6A	; 106
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    3af6:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    3af8:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    3afc:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    3afe:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    3b00:	a0 37       	cpi	r26, 0x70	; 112
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    3b02:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    3b04:	d9 f7       	brne	.-10     	; 0x3afc <__do_copy_data+0x10>

00003b06 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    3b06:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    3b08:	a0 e7       	ldi	r26, 0x70	; 112
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    3b0a:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    3b0c:	01 c0       	rjmp	.+2      	; 0x3b10 <.do_clear_bss_start>

00003b0e <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    3b0e:	1d 92       	st	X+, r1

00003b10 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    3b10:	af 35       	cpi	r26, 0x5F	; 95
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    3b12:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    3b14:	e1 f7       	brne	.-8      	; 0x3b0e <.do_clear_bss_loop>

00003b16 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    3b16:	1d e1       	ldi	r17, 0x1D	; 29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    3b18:	ce e6       	ldi	r28, 0x6E	; 110
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    3b1a:	dd e1       	ldi	r29, 0x1D	; 29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    3b1c:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    3b1e:	06 c0       	rjmp	.+12     	; 0x3b2c <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    3b20:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    3b22:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    3b24:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    3b26:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    3b28:	0e 94 77 b3 	call	0x166ee	; 0x166ee <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    3b2c:	cd 36       	cpi	r28, 0x6D	; 109
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    3b2e:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    3b30:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    3b32:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    3b34:	a9 f7       	brne	.-22     	; 0x3b20 <__do_global_ctors+0xa>
    3b36:	0e 94 8e 9e 	call	0x13d1c	; 0x13d1c <main>
    3b3a:	0c 94 20 b5 	jmp	0x16a40	; 0x16a40 <_exit>

00003b3e <__bad_interrupt>:
__vector_38():
    3b3e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003b42 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    3b42:	08 95       	ret

00003b44 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    3b44:	cf 93       	push	r28
    3b46:	df 93       	push	r29
    3b48:	1f 92       	push	r1
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
    3b4e:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    3b50:	dc 01       	movw	r26, r24
    3b52:	ed 91       	ld	r30, X+
    3b54:	fc 91       	ld	r31, X
    3b56:	02 80       	ldd	r0, Z+2	; 0x02
    3b58:	f3 81       	ldd	r31, Z+3	; 0x03
    3b5a:	e0 2d       	mov	r30, r0
    3b5c:	41 e0       	ldi	r20, 0x01	; 1
    3b5e:	50 e0       	ldi	r21, 0x00	; 0
    3b60:	be 01       	movw	r22, r28
    3b62:	6f 5f       	subi	r22, 0xFF	; 255
    3b64:	7f 4f       	sbci	r23, 0xFF	; 255
    3b66:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    3b68:	0f 90       	pop	r0
    3b6a:	df 91       	pop	r29
    3b6c:	cf 91       	pop	r28
    3b6e:	08 95       	ret

00003b70 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    3b70:	dc 01       	movw	r26, r24
    3b72:	ed 91       	ld	r30, X+
    3b74:	fc 91       	ld	r31, X
    3b76:	02 8c       	ldd	r0, Z+26	; 0x1a
    3b78:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3b7a:	e0 2d       	mov	r30, r0
    3b7c:	19 95       	eicall
    3b7e:	91 e0       	ldi	r25, 0x01	; 1
    3b80:	89 27       	eor	r24, r25
    3b82:	08 95       	ret

00003b84 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	08 95       	ret

00003b8a <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	ed 91       	ld	r30, X+
    3b8e:	fc 91       	ld	r31, X
    3b90:	04 8c       	ldd	r0, Z+28	; 0x1c
    3b92:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3b94:	e0 2d       	mov	r30, r0
    3b96:	19 94       	eijmp

00003b98 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    3b98:	fc 01       	movw	r30, r24
    3b9a:	84 89       	ldd	r24, Z+20	; 0x14
    3b9c:	95 89       	ldd	r25, Z+21	; 0x15
    3b9e:	08 95       	ret

00003ba0 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    3ba0:	fc 01       	movw	r30, r24
    3ba2:	82 89       	ldd	r24, Z+18	; 0x12
    3ba4:	93 89       	ldd	r25, Z+19	; 0x13
    3ba6:	08 95       	ret

00003ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    3ba8:	4f 92       	push	r4
    3baa:	5f 92       	push	r5
    3bac:	6f 92       	push	r6
    3bae:	7f 92       	push	r7
    3bb0:	8f 92       	push	r8
    3bb2:	9f 92       	push	r9
    3bb4:	af 92       	push	r10
    3bb6:	bf 92       	push	r11
    3bb8:	cf 92       	push	r12
    3bba:	df 92       	push	r13
    3bbc:	ef 92       	push	r14
    3bbe:	ff 92       	push	r15
    3bc0:	0f 93       	push	r16
    3bc2:	1f 93       	push	r17
    3bc4:	cf 93       	push	r28
    3bc6:	df 93       	push	r29
    3bc8:	ec 01       	movw	r28, r24
    3bca:	5a 01       	movw	r10, r20
    3bcc:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    3bce:	37 ff       	sbrs	r19, 7
    3bd0:	05 c0       	rjmp	.+10     	; 0x3bdc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    3bd2:	62 0f       	add	r22, r18
    3bd4:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    3bd6:	31 95       	neg	r19
    3bd8:	21 95       	neg	r18
    3bda:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    3bdc:	7b 01       	movw	r14, r22
    3bde:	e2 0e       	add	r14, r18
    3be0:	f3 1e       	adc	r15, r19
    3be2:	6b 01       	movw	r12, r22
    3be4:	77 ff       	sbrs	r23, 7
    3be6:	02 c0       	rjmp	.+4      	; 0x3bec <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    3be8:	d1 2c       	mov	r13, r1
    3bea:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    3bec:	e8 81       	ld	r30, Y
    3bee:	f9 81       	ldd	r31, Y+1	; 0x01
    3bf0:	06 84       	ldd	r0, Z+14	; 0x0e
    3bf2:	f7 85       	ldd	r31, Z+15	; 0x0f
    3bf4:	e0 2d       	mov	r30, r0
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	19 95       	eicall
    3bfa:	8e 15       	cp	r24, r14
    3bfc:	9f 05       	cpc	r25, r15
    3bfe:	44 f4       	brge	.+16     	; 0x3c10 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    3c00:	e8 81       	ld	r30, Y
    3c02:	f9 81       	ldd	r31, Y+1	; 0x01
    3c04:	06 84       	ldd	r0, Z+14	; 0x0e
    3c06:	f7 85       	ldd	r31, Z+15	; 0x0f
    3c08:	e0 2d       	mov	r30, r0
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	19 95       	eicall
    3c0e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    3c10:	47 01       	movw	r8, r14
    3c12:	8c 18       	sub	r8, r12
    3c14:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    3c16:	17 ff       	sbrs	r17, 7
    3c18:	05 c0       	rjmp	.+10     	; 0x3c24 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3c1a:	a0 0e       	add	r10, r16
    3c1c:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    3c1e:	11 95       	neg	r17
    3c20:	01 95       	neg	r16
    3c22:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    3c24:	0a 0d       	add	r16, r10
    3c26:	1b 1d       	adc	r17, r11
    3c28:	b7 fe       	sbrs	r11, 7
    3c2a:	02 c0       	rjmp	.+4      	; 0x3c30 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    3c2c:	b1 2c       	mov	r11, r1
    3c2e:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    3c30:	e8 81       	ld	r30, Y
    3c32:	f9 81       	ldd	r31, Y+1	; 0x01
    3c34:	04 84       	ldd	r0, Z+12	; 0x0c
    3c36:	f5 85       	ldd	r31, Z+13	; 0x0d
    3c38:	e0 2d       	mov	r30, r0
    3c3a:	ce 01       	movw	r24, r28
    3c3c:	19 95       	eicall
    3c3e:	80 17       	cp	r24, r16
    3c40:	91 07       	cpc	r25, r17
    3c42:	44 f4       	brge	.+16     	; 0x3c54 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    3c44:	e8 81       	ld	r30, Y
    3c46:	f9 81       	ldd	r31, Y+1	; 0x01
    3c48:	04 84       	ldd	r0, Z+12	; 0x0c
    3c4a:	f5 85       	ldd	r31, Z+13	; 0x0d
    3c4c:	e0 2d       	mov	r30, r0
    3c4e:	ce 01       	movw	r24, r28
    3c50:	19 95       	eicall
    3c52:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    3c54:	38 01       	movw	r6, r16
    3c56:	6a 18       	sub	r6, r10
    3c58:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    3c5a:	01 50       	subi	r16, 0x01	; 1
    3c5c:	11 09       	sbc	r17, r1
    3c5e:	97 01       	movw	r18, r14
    3c60:	21 50       	subi	r18, 0x01	; 1
    3c62:	31 09       	sbc	r19, r1
    3c64:	e8 81       	ld	r30, Y
    3c66:	f9 81       	ldd	r31, Y+1	; 0x01
    3c68:	06 80       	ldd	r0, Z+6	; 0x06
    3c6a:	f7 81       	ldd	r31, Z+7	; 0x07
    3c6c:	e0 2d       	mov	r30, r0
    3c6e:	a5 01       	movw	r20, r10
    3c70:	b6 01       	movw	r22, r12
    3c72:	ce 01       	movw	r24, r28
    3c74:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    3c76:	ee a5       	ldd	r30, Y+46	; 0x2e
    3c78:	ff a5       	ldd	r31, Y+47	; 0x2f
    3c7a:	80 81       	ld	r24, Z
    3c7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c7e:	89 23       	and	r24, r25
    3c80:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    3c82:	88 8d       	ldd	r24, Y+24	; 0x18
    3c84:	99 8d       	ldd	r25, Y+25	; 0x19
    3c86:	89 2b       	or	r24, r25
    3c88:	c9 f4       	brne	.+50     	; 0x3cbc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    3c8a:	e8 a9       	ldd	r30, Y+48	; 0x30
    3c8c:	f9 a9       	ldd	r31, Y+49	; 0x31
    3c8e:	80 81       	ld	r24, Z
    3c90:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c92:	89 23       	and	r24, r25
    3c94:	80 83       	st	Z, r24
    3c96:	12 b8       	out	0x02, r1	; 2
    3c98:	ea a9       	ldd	r30, Y+50	; 0x32
    3c9a:	fb a9       	ldd	r31, Y+51	; 0x33
    3c9c:	80 81       	ld	r24, Z
    3c9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ca0:	89 23       	and	r24, r25
    3ca2:	80 83       	st	Z, r24
    3ca4:	ea a9       	ldd	r30, Y+50	; 0x32
    3ca6:	fb a9       	ldd	r31, Y+51	; 0x33
    3ca8:	80 81       	ld	r24, Z
    3caa:	98 ad       	ldd	r25, Y+56	; 0x38
    3cac:	89 2b       	or	r24, r25
    3cae:	80 83       	st	Z, r24
    3cb0:	e8 a9       	ldd	r30, Y+48	; 0x30
    3cb2:	f9 a9       	ldd	r31, Y+49	; 0x31
    3cb4:	80 81       	ld	r24, Z
    3cb6:	9f a9       	ldd	r25, Y+55	; 0x37
    3cb8:	89 2b       	or	r24, r25
    3cba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    3cbc:	e8 a9       	ldd	r30, Y+48	; 0x30
    3cbe:	f9 a9       	ldd	r31, Y+49	; 0x31
    3cc0:	80 81       	ld	r24, Z
    3cc2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3cc4:	89 23       	and	r24, r25
    3cc6:	80 83       	st	Z, r24
    3cc8:	88 a1       	ldd	r24, Y+32	; 0x20
    3cca:	82 b9       	out	0x02, r24	; 2
    3ccc:	ea a9       	ldd	r30, Y+50	; 0x32
    3cce:	fb a9       	ldd	r31, Y+51	; 0x33
    3cd0:	80 81       	ld	r24, Z
    3cd2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3cd4:	89 23       	and	r24, r25
    3cd6:	80 83       	st	Z, r24
    3cd8:	ea a9       	ldd	r30, Y+50	; 0x32
    3cda:	fb a9       	ldd	r31, Y+51	; 0x33
    3cdc:	80 81       	ld	r24, Z
    3cde:	98 ad       	ldd	r25, Y+56	; 0x38
    3ce0:	89 2b       	or	r24, r25
    3ce2:	80 83       	st	Z, r24
    3ce4:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ce6:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ce8:	80 81       	ld	r24, Z
    3cea:	9f a9       	ldd	r25, Y+55	; 0x37
    3cec:	89 2b       	or	r24, r25
    3cee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    3cf0:	86 14       	cp	r8, r6
    3cf2:	97 04       	cpc	r9, r7
    3cf4:	2c f0       	brlt	.+10     	; 0x3d00 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    3cf6:	96 2d       	mov	r25, r6
    3cf8:	87 2d       	mov	r24, r7
    3cfa:	34 01       	movw	r6, r8
    3cfc:	89 2e       	mov	r8, r25
    3cfe:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    3d00:	18 14       	cp	r1, r8
    3d02:	19 04       	cpc	r1, r9
    3d04:	0c f5       	brge	.+66     	; 0x3d48 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    3d06:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    3d08:	52 b8       	out	0x02, r5	; 2
    3d0a:	ea a9       	ldd	r30, Y+50	; 0x32
    3d0c:	fb a9       	ldd	r31, Y+51	; 0x33
    3d0e:	20 81       	ld	r18, Z
    3d10:	3c ad       	ldd	r19, Y+60	; 0x3c
    3d12:	23 23       	and	r18, r19
    3d14:	20 83       	st	Z, r18
    3d16:	ea a9       	ldd	r30, Y+50	; 0x32
    3d18:	fb a9       	ldd	r31, Y+51	; 0x33
    3d1a:	20 81       	ld	r18, Z
    3d1c:	38 ad       	ldd	r19, Y+56	; 0x38
    3d1e:	23 2b       	or	r18, r19
    3d20:	20 83       	st	Z, r18
    3d22:	42 b8       	out	0x02, r4	; 2
    3d24:	ea a9       	ldd	r30, Y+50	; 0x32
    3d26:	fb a9       	ldd	r31, Y+51	; 0x33
    3d28:	20 81       	ld	r18, Z
    3d2a:	3c ad       	ldd	r19, Y+60	; 0x3c
    3d2c:	23 23       	and	r18, r19
    3d2e:	20 83       	st	Z, r18
    3d30:	ea a9       	ldd	r30, Y+50	; 0x32
    3d32:	fb a9       	ldd	r31, Y+51	; 0x33
    3d34:	20 81       	ld	r18, Z
    3d36:	38 ad       	ldd	r19, Y+56	; 0x38
    3d38:	23 2b       	or	r18, r19
    3d3a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	21 f7       	brne	.-56     	; 0x3d08 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	88 1a       	sub	r8, r24
    3d44:	91 08       	sbc	r9, r1
    3d46:	dc cf       	rjmp	.-72     	; 0x3d00 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    3d48:	88 8d       	ldd	r24, Y+24	; 0x18
    3d4a:	99 8d       	ldd	r25, Y+25	; 0x19
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	51 f5       	brne	.+84     	; 0x3da4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    3d50:	0c 89       	ldd	r16, Y+20	; 0x14
    3d52:	1d 89       	ldd	r17, Y+21	; 0x15
    3d54:	01 50       	subi	r16, 0x01	; 1
    3d56:	11 09       	sbc	r17, r1
    3d58:	2a 89       	ldd	r18, Y+18	; 0x12
    3d5a:	3b 89       	ldd	r19, Y+19	; 0x13
    3d5c:	21 50       	subi	r18, 0x01	; 1
    3d5e:	31 09       	sbc	r19, r1
    3d60:	e8 81       	ld	r30, Y
    3d62:	f9 81       	ldd	r31, Y+1	; 0x01
    3d64:	06 80       	ldd	r0, Z+6	; 0x06
    3d66:	f7 81       	ldd	r31, Z+7	; 0x07
    3d68:	e0 2d       	mov	r30, r0
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	70 e0       	ldi	r23, 0x00	; 0
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	ce 01       	movw	r24, r28
    3d74:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    3d76:	ee a5       	ldd	r30, Y+46	; 0x2e
    3d78:	ff a5       	ldd	r31, Y+47	; 0x2f
    3d7a:	80 81       	ld	r24, Z
    3d7c:	9e a9       	ldd	r25, Y+54	; 0x36
    3d7e:	89 2b       	or	r24, r25
    3d80:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	1f 91       	pop	r17
    3d88:	0f 91       	pop	r16
    3d8a:	ff 90       	pop	r15
    3d8c:	ef 90       	pop	r14
    3d8e:	df 90       	pop	r13
    3d90:	cf 90       	pop	r12
    3d92:	bf 90       	pop	r11
    3d94:	af 90       	pop	r10
    3d96:	9f 90       	pop	r9
    3d98:	8f 90       	pop	r8
    3d9a:	7f 90       	pop	r7
    3d9c:	6f 90       	pop	r6
    3d9e:	5f 90       	pop	r5
    3da0:	4f 90       	pop	r4
    3da2:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	39 f7       	brne	.-50     	; 0x3d76 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    3da8:	ee a5       	ldd	r30, Y+46	; 0x2e
    3daa:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    3dac:	80 81       	ld	r24, Z
    3dae:	9a ad       	ldd	r25, Y+58	; 0x3a
    3db0:	89 23       	and	r24, r25
    3db2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    3db4:	e8 a9       	ldd	r30, Y+48	; 0x30
    3db6:	f9 a9       	ldd	r31, Y+49	; 0x31
    3db8:	80 81       	ld	r24, Z
    3dba:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dbc:	89 23       	and	r24, r25
    3dbe:	80 83       	st	Z, r24
    3dc0:	84 e0       	ldi	r24, 0x04	; 4
    3dc2:	82 b9       	out	0x02, r24	; 2
    3dc4:	ea a9       	ldd	r30, Y+50	; 0x32
    3dc6:	fb a9       	ldd	r31, Y+51	; 0x33
    3dc8:	80 81       	ld	r24, Z
    3dca:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dcc:	89 23       	and	r24, r25
    3dce:	80 83       	st	Z, r24
    3dd0:	ea a9       	ldd	r30, Y+50	; 0x32
    3dd2:	fb a9       	ldd	r31, Y+51	; 0x33
    3dd4:	80 81       	ld	r24, Z
    3dd6:	98 ad       	ldd	r25, Y+56	; 0x38
    3dd8:	89 2b       	or	r24, r25
    3dda:	80 83       	st	Z, r24
    3ddc:	e8 a9       	ldd	r30, Y+48	; 0x30
    3dde:	f9 a9       	ldd	r31, Y+49	; 0x31
    3de0:	80 81       	ld	r24, Z
    3de2:	9f a9       	ldd	r25, Y+55	; 0x37
    3de4:	89 2b       	or	r24, r25
    3de6:	80 83       	st	Z, r24
    3de8:	8a 89       	ldd	r24, Y+18	; 0x12
    3dea:	9b 89       	ldd	r25, Y+19	; 0x13
    3dec:	01 97       	sbiw	r24, 0x01	; 1
    3dee:	92 b9       	out	0x02, r25	; 2
    3df0:	ea a9       	ldd	r30, Y+50	; 0x32
    3df2:	fb a9       	ldd	r31, Y+51	; 0x33
    3df4:	80 81       	ld	r24, Z
    3df6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3df8:	89 23       	and	r24, r25
    3dfa:	80 83       	st	Z, r24
    3dfc:	ea a9       	ldd	r30, Y+50	; 0x32
    3dfe:	fb a9       	ldd	r31, Y+51	; 0x33
    3e00:	80 81       	ld	r24, Z
    3e02:	98 ad       	ldd	r25, Y+56	; 0x38
    3e04:	89 2b       	or	r24, r25
    3e06:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    3e08:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e0a:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e0c:	80 81       	ld	r24, Z
    3e0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e10:	89 23       	and	r24, r25
    3e12:	80 83       	st	Z, r24
    3e14:	85 e0       	ldi	r24, 0x05	; 5
    3e16:	82 b9       	out	0x02, r24	; 2
    3e18:	ea a9       	ldd	r30, Y+50	; 0x32
    3e1a:	fb a9       	ldd	r31, Y+51	; 0x33
    3e1c:	80 81       	ld	r24, Z
    3e1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e20:	89 23       	and	r24, r25
    3e22:	80 83       	st	Z, r24
    3e24:	ea a9       	ldd	r30, Y+50	; 0x32
    3e26:	fb a9       	ldd	r31, Y+51	; 0x33
    3e28:	80 81       	ld	r24, Z
    3e2a:	98 ad       	ldd	r25, Y+56	; 0x38
    3e2c:	89 2b       	or	r24, r25
    3e2e:	80 83       	st	Z, r24
    3e30:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e32:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e34:	80 81       	ld	r24, Z
    3e36:	9f a9       	ldd	r25, Y+55	; 0x37
    3e38:	89 2b       	or	r24, r25
    3e3a:	80 83       	st	Z, r24
    3e3c:	8a 89       	ldd	r24, Y+18	; 0x12
    3e3e:	81 50       	subi	r24, 0x01	; 1
    3e40:	82 b9       	out	0x02, r24	; 2
    3e42:	ea a9       	ldd	r30, Y+50	; 0x32
    3e44:	fb a9       	ldd	r31, Y+51	; 0x33
    3e46:	80 81       	ld	r24, Z
    3e48:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e4a:	89 23       	and	r24, r25
    3e4c:	80 83       	st	Z, r24
    3e4e:	ea a9       	ldd	r30, Y+50	; 0x32
    3e50:	fb a9       	ldd	r31, Y+51	; 0x33
    3e52:	80 81       	ld	r24, Z
    3e54:	98 ad       	ldd	r25, Y+56	; 0x38
    3e56:	89 2b       	or	r24, r25
    3e58:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    3e5a:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e5c:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e5e:	80 81       	ld	r24, Z
    3e60:	9b ad       	ldd	r25, Y+59	; 0x3b
    3e62:	89 23       	and	r24, r25
    3e64:	80 83       	st	Z, r24
    3e66:	88 e0       	ldi	r24, 0x08	; 8
    3e68:	82 b9       	out	0x02, r24	; 2
    3e6a:	ea a9       	ldd	r30, Y+50	; 0x32
    3e6c:	fb a9       	ldd	r31, Y+51	; 0x33
    3e6e:	80 81       	ld	r24, Z
    3e70:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e72:	89 23       	and	r24, r25
    3e74:	80 83       	st	Z, r24
    3e76:	ea a9       	ldd	r30, Y+50	; 0x32
    3e78:	fb a9       	ldd	r31, Y+51	; 0x33
    3e7a:	80 81       	ld	r24, Z
    3e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    3e7e:	89 2b       	or	r24, r25
    3e80:	80 83       	st	Z, r24
    3e82:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e84:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e86:	80 81       	ld	r24, Z
    3e88:	9f a9       	ldd	r25, Y+55	; 0x37
    3e8a:	89 2b       	or	r24, r25
    3e8c:	80 83       	st	Z, r24
    3e8e:	8c 89       	ldd	r24, Y+20	; 0x14
    3e90:	9d 89       	ldd	r25, Y+21	; 0x15
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	92 b9       	out	0x02, r25	; 2
    3e96:	ea a9       	ldd	r30, Y+50	; 0x32
    3e98:	fb a9       	ldd	r31, Y+51	; 0x33
    3e9a:	80 81       	ld	r24, Z
    3e9c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e9e:	89 23       	and	r24, r25
    3ea0:	80 83       	st	Z, r24
    3ea2:	ea a9       	ldd	r30, Y+50	; 0x32
    3ea4:	fb a9       	ldd	r31, Y+51	; 0x33
    3ea6:	80 81       	ld	r24, Z
    3ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    3eaa:	89 2b       	or	r24, r25
    3eac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    3eae:	e8 a9       	ldd	r30, Y+48	; 0x30
    3eb0:	f9 a9       	ldd	r31, Y+49	; 0x31
    3eb2:	80 81       	ld	r24, Z
    3eb4:	9b ad       	ldd	r25, Y+59	; 0x3b
    3eb6:	89 23       	and	r24, r25
    3eb8:	80 83       	st	Z, r24
    3eba:	89 e0       	ldi	r24, 0x09	; 9
    3ebc:	82 b9       	out	0x02, r24	; 2
    3ebe:	ea a9       	ldd	r30, Y+50	; 0x32
    3ec0:	fb a9       	ldd	r31, Y+51	; 0x33
    3ec2:	80 81       	ld	r24, Z
    3ec4:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ec6:	89 23       	and	r24, r25
    3ec8:	80 83       	st	Z, r24
    3eca:	ea a9       	ldd	r30, Y+50	; 0x32
    3ecc:	fb a9       	ldd	r31, Y+51	; 0x33
    3ece:	80 81       	ld	r24, Z
    3ed0:	98 ad       	ldd	r25, Y+56	; 0x38
    3ed2:	89 2b       	or	r24, r25
    3ed4:	80 83       	st	Z, r24
    3ed6:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ed8:	f9 a9       	ldd	r31, Y+49	; 0x31
    3eda:	80 81       	ld	r24, Z
    3edc:	9f a9       	ldd	r25, Y+55	; 0x37
    3ede:	89 2b       	or	r24, r25
    3ee0:	80 83       	st	Z, r24
    3ee2:	8c 89       	ldd	r24, Y+20	; 0x14
    3ee4:	81 50       	subi	r24, 0x01	; 1
    3ee6:	82 b9       	out	0x02, r24	; 2
    3ee8:	ea a9       	ldd	r30, Y+50	; 0x32
    3eea:	fb a9       	ldd	r31, Y+51	; 0x33
    3eec:	80 81       	ld	r24, Z
    3eee:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ef0:	89 23       	and	r24, r25
    3ef2:	80 83       	st	Z, r24
    3ef4:	ea a9       	ldd	r30, Y+50	; 0x32
    3ef6:	fb a9       	ldd	r31, Y+51	; 0x33
    3ef8:	80 81       	ld	r24, Z
    3efa:	98 ad       	ldd	r25, Y+56	; 0x38
    3efc:	89 2b       	or	r24, r25
    3efe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    3f00:	ee a5       	ldd	r30, Y+46	; 0x2e
    3f02:	ff a5       	ldd	r31, Y+47	; 0x2f
    3f04:	80 81       	ld	r24, Z
    3f06:	9e a9       	ldd	r25, Y+54	; 0x36
    3f08:	89 2b       	or	r24, r25
    3f0a:	80 83       	st	Z, r24
    3f0c:	34 cf       	rjmp	.-408    	; 0x3d76 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00003f0e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    3f0e:	af 92       	push	r10
    3f10:	bf 92       	push	r11
    3f12:	cf 92       	push	r12
    3f14:	df 92       	push	r13
    3f16:	ef 92       	push	r14
    3f18:	ff 92       	push	r15
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	cf 93       	push	r28
    3f20:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    3f22:	77 fd       	sbrc	r23, 7
    3f24:	75 c0       	rjmp	.+234    	; 0x4010 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    3f26:	57 fd       	sbrc	r21, 7
    3f28:	73 c0       	rjmp	.+230    	; 0x4010 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    3f2a:	c3 2e       	mov	r12, r19
    3f2c:	d2 2e       	mov	r13, r18
    3f2e:	5a 01       	movw	r10, r20
    3f30:	7b 01       	movw	r14, r22
    3f32:	ec 01       	movw	r28, r24
    3f34:	e8 81       	ld	r30, Y
    3f36:	f9 81       	ldd	r31, Y+1	; 0x01
    3f38:	06 84       	ldd	r0, Z+14	; 0x0e
    3f3a:	f7 85       	ldd	r31, Z+15	; 0x0f
    3f3c:	e0 2d       	mov	r30, r0
    3f3e:	19 95       	eicall
    3f40:	8e 15       	cp	r24, r14
    3f42:	9f 05       	cpc	r25, r15
    3f44:	0c f4       	brge	.+2      	; 0x3f48 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    3f46:	64 c0       	rjmp	.+200    	; 0x4010 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    3f48:	e8 81       	ld	r30, Y
    3f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3f4c:	04 84       	ldd	r0, Z+12	; 0x0c
    3f4e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f50:	e0 2d       	mov	r30, r0
    3f52:	ce 01       	movw	r24, r28
    3f54:	19 95       	eicall
    3f56:	8a 15       	cp	r24, r10
    3f58:	9b 05       	cpc	r25, r11
    3f5a:	0c f4       	brge	.+2      	; 0x3f5e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    3f5c:	59 c0       	rjmp	.+178    	; 0x4010 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    3f5e:	e8 81       	ld	r30, Y
    3f60:	f9 81       	ldd	r31, Y+1	; 0x01
    3f62:	06 80       	ldd	r0, Z+6	; 0x06
    3f64:	f7 81       	ldd	r31, Z+7	; 0x07
    3f66:	e0 2d       	mov	r30, r0
    3f68:	85 01       	movw	r16, r10
    3f6a:	97 01       	movw	r18, r14
    3f6c:	a5 01       	movw	r20, r10
    3f6e:	b7 01       	movw	r22, r14
    3f70:	ce 01       	movw	r24, r28
    3f72:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    3f74:	ee a5       	ldd	r30, Y+46	; 0x2e
    3f76:	ff a5       	ldd	r31, Y+47	; 0x2f
    3f78:	80 81       	ld	r24, Z
    3f7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f7c:	89 23       	and	r24, r25
    3f7e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    3f80:	98 a1       	ldd	r25, Y+32	; 0x20
    3f82:	29 a1       	ldd	r18, Y+33	; 0x21
    3f84:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f86:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f88:	80 81       	ld	r24, Z
    3f8a:	3b ad       	ldd	r19, Y+59	; 0x3b
    3f8c:	83 23       	and	r24, r19
    3f8e:	80 83       	st	Z, r24
    3f90:	22 b9       	out	0x02, r18	; 2
    3f92:	ea a9       	ldd	r30, Y+50	; 0x32
    3f94:	fb a9       	ldd	r31, Y+51	; 0x33
    3f96:	80 81       	ld	r24, Z
    3f98:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f9a:	82 23       	and	r24, r18
    3f9c:	80 83       	st	Z, r24
    3f9e:	ea a9       	ldd	r30, Y+50	; 0x32
    3fa0:	fb a9       	ldd	r31, Y+51	; 0x33
    3fa2:	80 81       	ld	r24, Z
    3fa4:	28 ad       	ldd	r18, Y+56	; 0x38
    3fa6:	82 2b       	or	r24, r18
    3fa8:	80 83       	st	Z, r24
    3faa:	92 b9       	out	0x02, r25	; 2
    3fac:	ea a9       	ldd	r30, Y+50	; 0x32
    3fae:	fb a9       	ldd	r31, Y+51	; 0x33
    3fb0:	80 81       	ld	r24, Z
    3fb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fb4:	89 23       	and	r24, r25
    3fb6:	80 83       	st	Z, r24
    3fb8:	ea a9       	ldd	r30, Y+50	; 0x32
    3fba:	fb a9       	ldd	r31, Y+51	; 0x33
    3fbc:	80 81       	ld	r24, Z
    3fbe:	98 ad       	ldd	r25, Y+56	; 0x38
    3fc0:	89 2b       	or	r24, r25
    3fc2:	80 83       	st	Z, r24
    3fc4:	e8 a9       	ldd	r30, Y+48	; 0x30
    3fc6:	f9 a9       	ldd	r31, Y+49	; 0x31
    3fc8:	80 81       	ld	r24, Z
    3fca:	9f a9       	ldd	r25, Y+55	; 0x37
    3fcc:	89 2b       	or	r24, r25
    3fce:	80 83       	st	Z, r24
    3fd0:	c2 b8       	out	0x02, r12	; 2
    3fd2:	ea a9       	ldd	r30, Y+50	; 0x32
    3fd4:	fb a9       	ldd	r31, Y+51	; 0x33
    3fd6:	80 81       	ld	r24, Z
    3fd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fda:	89 23       	and	r24, r25
    3fdc:	80 83       	st	Z, r24
    3fde:	ea a9       	ldd	r30, Y+50	; 0x32
    3fe0:	fb a9       	ldd	r31, Y+51	; 0x33
    3fe2:	80 81       	ld	r24, Z
    3fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    3fe6:	89 2b       	or	r24, r25
    3fe8:	80 83       	st	Z, r24
    3fea:	d2 b8       	out	0x02, r13	; 2
    3fec:	ea a9       	ldd	r30, Y+50	; 0x32
    3fee:	fb a9       	ldd	r31, Y+51	; 0x33
    3ff0:	80 81       	ld	r24, Z
    3ff2:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ff4:	89 23       	and	r24, r25
    3ff6:	80 83       	st	Z, r24
    3ff8:	ea a9       	ldd	r30, Y+50	; 0x32
    3ffa:	fb a9       	ldd	r31, Y+51	; 0x33
    3ffc:	80 81       	ld	r24, Z
    3ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    4000:	89 2b       	or	r24, r25
    4002:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    4004:	ee a5       	ldd	r30, Y+46	; 0x2e
    4006:	ff a5       	ldd	r31, Y+47	; 0x2f
    4008:	80 81       	ld	r24, Z
    400a:	9e a9       	ldd	r25, Y+54	; 0x36
    400c:	89 2b       	or	r24, r25
    400e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    4010:	df 91       	pop	r29
    4012:	cf 91       	pop	r28
    4014:	1f 91       	pop	r17
    4016:	0f 91       	pop	r16
    4018:	ff 90       	pop	r15
    401a:	ef 90       	pop	r14
    401c:	df 90       	pop	r13
    401e:	cf 90       	pop	r12
    4020:	bf 90       	pop	r11
    4022:	af 90       	pop	r10
    4024:	08 95       	ret

00004026 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    4026:	7f 92       	push	r7
    4028:	8f 92       	push	r8
    402a:	9f 92       	push	r9
    402c:	af 92       	push	r10
    402e:	bf 92       	push	r11
    4030:	cf 92       	push	r12
    4032:	df 92       	push	r13
    4034:	ef 92       	push	r14
    4036:	ff 92       	push	r15
    4038:	0f 93       	push	r16
    403a:	1f 93       	push	r17
    403c:	cf 93       	push	r28
    403e:	df 93       	push	r29
    4040:	ec 01       	movw	r28, r24
    4042:	59 01       	movw	r10, r18
    4044:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    4046:	0e 9d       	mul	r16, r14
    4048:	60 01       	movw	r12, r0
    404a:	0f 9d       	mul	r16, r15
    404c:	d0 0c       	add	r13, r0
    404e:	1e 9d       	mul	r17, r14
    4050:	d0 0c       	add	r13, r0
    4052:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    4054:	87 01       	movw	r16, r14
    4056:	04 0f       	add	r16, r20
    4058:	15 1f       	adc	r17, r21
    405a:	01 50       	subi	r16, 0x01	; 1
    405c:	11 09       	sbc	r17, r1
    405e:	26 0f       	add	r18, r22
    4060:	37 1f       	adc	r19, r23
    4062:	21 50       	subi	r18, 0x01	; 1
    4064:	31 09       	sbc	r19, r1
    4066:	e8 81       	ld	r30, Y
    4068:	f9 81       	ldd	r31, Y+1	; 0x01
    406a:	06 80       	ldd	r0, Z+6	; 0x06
    406c:	f7 81       	ldd	r31, Z+7	; 0x07
    406e:	e0 2d       	mov	r30, r0
    4070:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    4072:	77 24       	eor	r7, r7
    4074:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    4076:	1c 14       	cp	r1, r12
    4078:	1d 04       	cpc	r1, r13
    407a:	0c f0       	brlt	.+2      	; 0x407e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    407c:	0a c1       	rjmp	.+532    	; 0x4292 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    407e:	ee a5       	ldd	r30, Y+46	; 0x2e
    4080:	ff a5       	ldd	r31, Y+47	; 0x2f
    4082:	80 81       	ld	r24, Z
    4084:	9a ad       	ldd	r25, Y+58	; 0x3a
    4086:	89 23       	and	r24, r25
    4088:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    408a:	e8 a9       	ldd	r30, Y+48	; 0x30
    408c:	f9 a9       	ldd	r31, Y+49	; 0x31
    408e:	80 81       	ld	r24, Z
    4090:	9b ad       	ldd	r25, Y+59	; 0x3b
    4092:	89 23       	and	r24, r25
    4094:	80 83       	st	Z, r24
    4096:	9a a1       	ldd	r25, Y+34	; 0x22
    4098:	8b a1       	ldd	r24, Y+35	; 0x23
    409a:	82 b9       	out	0x02, r24	; 2
    409c:	ea a9       	ldd	r30, Y+50	; 0x32
    409e:	fb a9       	ldd	r31, Y+51	; 0x33
    40a0:	80 81       	ld	r24, Z
    40a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    40a4:	82 23       	and	r24, r18
    40a6:	80 83       	st	Z, r24
    40a8:	ea a9       	ldd	r30, Y+50	; 0x32
    40aa:	fb a9       	ldd	r31, Y+51	; 0x33
    40ac:	80 81       	ld	r24, Z
    40ae:	28 ad       	ldd	r18, Y+56	; 0x38
    40b0:	82 2b       	or	r24, r18
    40b2:	80 83       	st	Z, r24
    40b4:	92 b9       	out	0x02, r25	; 2
    40b6:	ea a9       	ldd	r30, Y+50	; 0x32
    40b8:	fb a9       	ldd	r31, Y+51	; 0x33
    40ba:	80 81       	ld	r24, Z
    40bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    40be:	89 23       	and	r24, r25
    40c0:	80 83       	st	Z, r24
    40c2:	ea a9       	ldd	r30, Y+50	; 0x32
    40c4:	fb a9       	ldd	r31, Y+51	; 0x33
    40c6:	80 81       	ld	r24, Z
    40c8:	98 ad       	ldd	r25, Y+56	; 0x38
    40ca:	89 2b       	or	r24, r25
    40cc:	80 83       	st	Z, r24
    40ce:	e8 a9       	ldd	r30, Y+48	; 0x30
    40d0:	f9 a9       	ldd	r31, Y+49	; 0x31
    40d2:	80 81       	ld	r24, Z
    40d4:	9f a9       	ldd	r25, Y+55	; 0x37
    40d6:	89 2b       	or	r24, r25
    40d8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    40da:	81 b1       	in	r24, 0x01	; 1
    40dc:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    40de:	88 8d       	ldd	r24, Y+24	; 0x18
    40e0:	99 8d       	ldd	r25, Y+25	; 0x19
    40e2:	89 2b       	or	r24, r25
    40e4:	09 f0       	breq	.+2      	; 0x40e8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    40e6:	67 c0       	rjmp	.+206    	; 0x41b6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    40e8:	f5 01       	movw	r30, r10
    40ea:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    40ec:	42 e0       	ldi	r20, 0x02	; 2
    40ee:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    40f0:	ac a9       	ldd	r26, Y+52	; 0x34
    40f2:	bd a9       	ldd	r27, Y+53	; 0x35
    40f4:	2c 91       	ld	r18, X
    40f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    40f8:	23 23       	and	r18, r19
    40fa:	2c 93       	st	X, r18
    40fc:	20 b1       	in	r18, 0x00	; 0
    40fe:	ac a9       	ldd	r26, Y+52	; 0x34
    4100:	bd a9       	ldd	r27, Y+53	; 0x35
    4102:	2c 91       	ld	r18, X
    4104:	39 ad       	ldd	r19, Y+57	; 0x39
    4106:	23 2b       	or	r18, r19
    4108:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    410a:	ac a9       	ldd	r26, Y+52	; 0x34
    410c:	bd a9       	ldd	r27, Y+53	; 0x35
    410e:	2c 91       	ld	r18, X
    4110:	3d ad       	ldd	r19, Y+61	; 0x3d
    4112:	23 23       	and	r18, r19
    4114:	2c 93       	st	X, r18
    4116:	20 b1       	in	r18, 0x00	; 0
    4118:	ac a9       	ldd	r26, Y+52	; 0x34
    411a:	bd a9       	ldd	r27, Y+53	; 0x35
    411c:	2c 91       	ld	r18, X
    411e:	39 ad       	ldd	r19, Y+57	; 0x39
    4120:	23 2b       	or	r18, r19
    4122:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    4124:	ac a9       	ldd	r26, Y+52	; 0x34
    4126:	bd a9       	ldd	r27, Y+53	; 0x35
    4128:	2c 91       	ld	r18, X
    412a:	3d ad       	ldd	r19, Y+61	; 0x3d
    412c:	23 23       	and	r18, r19
    412e:	2c 93       	st	X, r18
    4130:	20 b1       	in	r18, 0x00	; 0
    4132:	ac a9       	ldd	r26, Y+52	; 0x34
    4134:	bd a9       	ldd	r27, Y+53	; 0x35
    4136:	3c 91       	ld	r19, X
    4138:	69 ad       	ldd	r22, Y+57	; 0x39
    413a:	36 2b       	or	r19, r22
    413c:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    413e:	ac a9       	ldd	r26, Y+52	; 0x34
    4140:	bd a9       	ldd	r27, Y+53	; 0x35
    4142:	3c 91       	ld	r19, X
    4144:	6d ad       	ldd	r22, Y+61	; 0x3d
    4146:	36 23       	and	r19, r22
    4148:	3c 93       	st	X, r19
    414a:	60 b1       	in	r22, 0x00	; 0
    414c:	ac a9       	ldd	r26, Y+52	; 0x34
    414e:	bd a9       	ldd	r27, Y+53	; 0x35
    4150:	3c 91       	ld	r19, X
    4152:	79 ad       	ldd	r23, Y+57	; 0x39
    4154:	37 2b       	or	r19, r23
    4156:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4158:	41 30       	cpi	r20, 0x01	; 1
    415a:	51 05       	cpc	r21, r1
    415c:	49 f5       	brne	.+82     	; 0x41b0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    415e:	32 2f       	mov	r19, r18
    4160:	26 2f       	mov	r18, r22
    4162:	21 93       	st	Z+, r18
    4164:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    4166:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    4168:	09 f0       	breq	.+2      	; 0x416c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    416a:	c0 cf       	rjmp	.-128    	; 0x40ec <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    416c:	cc 0c       	add	r12, r12
    416e:	dd 1c       	adc	r13, r13
    4170:	ac 0c       	add	r10, r12
    4172:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    4174:	0c 89       	ldd	r16, Y+20	; 0x14
    4176:	1d 89       	ldd	r17, Y+21	; 0x15
    4178:	01 50       	subi	r16, 0x01	; 1
    417a:	11 09       	sbc	r17, r1
    417c:	2a 89       	ldd	r18, Y+18	; 0x12
    417e:	3b 89       	ldd	r19, Y+19	; 0x13
    4180:	21 50       	subi	r18, 0x01	; 1
    4182:	31 09       	sbc	r19, r1
    4184:	e8 81       	ld	r30, Y
    4186:	f9 81       	ldd	r31, Y+1	; 0x01
    4188:	06 80       	ldd	r0, Z+6	; 0x06
    418a:	f7 81       	ldd	r31, Z+7	; 0x07
    418c:	e0 2d       	mov	r30, r0
    418e:	50 e0       	ldi	r21, 0x00	; 0
    4190:	40 e0       	ldi	r20, 0x00	; 0
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	ce 01       	movw	r24, r28
    4198:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    419a:	ee a5       	ldd	r30, Y+46	; 0x2e
    419c:	ff a5       	ldd	r31, Y+47	; 0x2f
    419e:	80 81       	ld	r24, Z
    41a0:	9e a9       	ldd	r25, Y+54	; 0x36
    41a2:	89 2b       	or	r24, r25
    41a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    41a6:	81 b1       	in	r24, 0x01	; 1
    41a8:	71 b8       	out	0x01, r7	; 1
    41aa:	d1 2c       	mov	r13, r1
    41ac:	c1 2c       	mov	r12, r1
    41ae:	63 cf       	rjmp	.-314    	; 0x4076 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    41b0:	41 e0       	ldi	r20, 0x01	; 1
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	9d cf       	rjmp	.-198    	; 0x40f0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    41b6:	ec a9       	ldd	r30, Y+52	; 0x34
    41b8:	fd a9       	ldd	r31, Y+53	; 0x35
    41ba:	80 81       	ld	r24, Z
    41bc:	9d ad       	ldd	r25, Y+61	; 0x3d
    41be:	89 23       	and	r24, r25
    41c0:	80 83       	st	Z, r24
    41c2:	80 b1       	in	r24, 0x00	; 0
    41c4:	ec a9       	ldd	r30, Y+52	; 0x34
    41c6:	fd a9       	ldd	r31, Y+53	; 0x35
    41c8:	80 81       	ld	r24, Z
    41ca:	99 ad       	ldd	r25, Y+57	; 0x39
    41cc:	89 2b       	or	r24, r25
    41ce:	80 83       	st	Z, r24
    41d0:	75 01       	movw	r14, r10
    41d2:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    41d4:	8c a5       	ldd	r24, Y+44	; 0x2c
    41d6:	9d a5       	ldd	r25, Y+45	; 0x2d
    41d8:	81 30       	cpi	r24, 0x01	; 1
    41da:	91 05       	cpc	r25, r1
    41dc:	d9 f5       	brne	.+118    	; 0x4254 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    41de:	ec a9       	ldd	r30, Y+52	; 0x34
    41e0:	fd a9       	ldd	r31, Y+53	; 0x35
    41e2:	80 81       	ld	r24, Z
    41e4:	9d ad       	ldd	r25, Y+61	; 0x3d
    41e6:	89 23       	and	r24, r25
    41e8:	80 83       	st	Z, r24
    41ea:	60 b1       	in	r22, 0x00	; 0
    41ec:	ec a9       	ldd	r30, Y+52	; 0x34
    41ee:	fd a9       	ldd	r31, Y+53	; 0x35
    41f0:	80 81       	ld	r24, Z
    41f2:	99 ad       	ldd	r25, Y+57	; 0x39
    41f4:	89 2b       	or	r24, r25
    41f6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    41f8:	ec a9       	ldd	r30, Y+52	; 0x34
    41fa:	fd a9       	ldd	r31, Y+53	; 0x35
    41fc:	80 81       	ld	r24, Z
    41fe:	9d ad       	ldd	r25, Y+61	; 0x3d
    4200:	89 23       	and	r24, r25
    4202:	80 83       	st	Z, r24
    4204:	40 b1       	in	r20, 0x00	; 0
    4206:	ec a9       	ldd	r30, Y+52	; 0x34
    4208:	fd a9       	ldd	r31, Y+53	; 0x35
    420a:	80 81       	ld	r24, Z
    420c:	99 ad       	ldd	r25, Y+57	; 0x39
    420e:	89 2b       	or	r24, r25
    4210:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    4212:	ec a9       	ldd	r30, Y+52	; 0x34
    4214:	fd a9       	ldd	r31, Y+53	; 0x35
    4216:	80 81       	ld	r24, Z
    4218:	9d ad       	ldd	r25, Y+61	; 0x3d
    421a:	89 23       	and	r24, r25
    421c:	80 83       	st	Z, r24
    421e:	20 b1       	in	r18, 0x00	; 0
    4220:	ec a9       	ldd	r30, Y+52	; 0x34
    4222:	fd a9       	ldd	r31, Y+53	; 0x35
    4224:	80 81       	ld	r24, Z
    4226:	99 ad       	ldd	r25, Y+57	; 0x39
    4228:	89 2b       	or	r24, r25
    422a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    422c:	e8 81       	ld	r30, Y
    422e:	f9 81       	ldd	r31, Y+1	; 0x01
    4230:	01 90       	ld	r0, Z+
    4232:	f0 81       	ld	r31, Z
    4234:	e0 2d       	mov	r30, r0
    4236:	ce 01       	movw	r24, r28
    4238:	19 95       	eicall
    423a:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    423c:	f7 01       	movw	r30, r14
    423e:	81 92       	st	Z+, r8
    4240:	91 92       	st	Z+, r9
    4242:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    4244:	01 50       	subi	r16, 0x01	; 1
    4246:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    4248:	29 f6       	brne	.-118    	; 0x41d4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    424a:	cc 0c       	add	r12, r12
    424c:	dd 1c       	adc	r13, r13
    424e:	ac 0c       	add	r10, r12
    4250:	bd 1c       	adc	r11, r13
    4252:	a3 cf       	rjmp	.-186    	; 0x419a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    4254:	89 2b       	or	r24, r25
    4256:	91 f7       	brne	.-28     	; 0x423c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    4258:	ec a9       	ldd	r30, Y+52	; 0x34
    425a:	fd a9       	ldd	r31, Y+53	; 0x35
    425c:	80 81       	ld	r24, Z
    425e:	9d ad       	ldd	r25, Y+61	; 0x3d
    4260:	89 23       	and	r24, r25
    4262:	80 83       	st	Z, r24
    4264:	80 b0       	in	r8, 0x00	; 0
    4266:	ec a9       	ldd	r30, Y+52	; 0x34
    4268:	fd a9       	ldd	r31, Y+53	; 0x35
    426a:	80 81       	ld	r24, Z
    426c:	99 ad       	ldd	r25, Y+57	; 0x39
    426e:	89 2b       	or	r24, r25
    4270:	80 83       	st	Z, r24
    4272:	ec a9       	ldd	r30, Y+52	; 0x34
    4274:	fd a9       	ldd	r31, Y+53	; 0x35
    4276:	80 81       	ld	r24, Z
    4278:	9d ad       	ldd	r25, Y+61	; 0x3d
    427a:	89 23       	and	r24, r25
    427c:	80 83       	st	Z, r24
    427e:	90 b1       	in	r25, 0x00	; 0
    4280:	ec a9       	ldd	r30, Y+52	; 0x34
    4282:	fd a9       	ldd	r31, Y+53	; 0x35
    4284:	80 81       	ld	r24, Z
    4286:	29 ad       	ldd	r18, Y+57	; 0x39
    4288:	82 2b       	or	r24, r18
    428a:	80 83       	st	Z, r24
    428c:	98 2c       	mov	r9, r8
    428e:	89 2e       	mov	r8, r25
    4290:	d5 cf       	rjmp	.-86     	; 0x423c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	df 91       	pop	r29
    4298:	cf 91       	pop	r28
    429a:	1f 91       	pop	r17
    429c:	0f 91       	pop	r16
    429e:	ff 90       	pop	r15
    42a0:	ef 90       	pop	r14
    42a2:	df 90       	pop	r13
    42a4:	cf 90       	pop	r12
    42a6:	bf 90       	pop	r11
    42a8:	af 90       	pop	r10
    42aa:	9f 90       	pop	r9
    42ac:	8f 90       	pop	r8
    42ae:	7f 90       	pop	r7
    42b0:	08 95       	ret

000042b2 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    42b2:	38 e0       	ldi	r19, 0x08	; 8
    42b4:	43 9f       	mul	r20, r19
    42b6:	c0 01       	movw	r24, r0
    42b8:	11 24       	eor	r1, r1
    42ba:	80 7e       	andi	r24, 0xE0	; 224
    42bc:	97 70       	andi	r25, 0x07	; 7
    42be:	26 95       	lsr	r18
    42c0:	26 95       	lsr	r18
    42c2:	26 95       	lsr	r18
    42c4:	82 2b       	or	r24, r18
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	76 2f       	mov	r23, r22
    42ca:	66 27       	eor	r22, r22
    42cc:	66 27       	eor	r22, r22
    42ce:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    42d0:	86 2b       	or	r24, r22
    42d2:	97 2b       	or	r25, r23
    42d4:	08 95       	ret

000042d6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    42d6:	0f 93       	push	r16
    42d8:	cf 93       	push	r28
    42da:	df 93       	push	r29
    42dc:	dc 01       	movw	r26, r24
    42de:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    42e0:	9e 96       	adiw	r26, 0x2e	; 46
    42e2:	ed 91       	ld	r30, X+
    42e4:	fc 91       	ld	r31, X
    42e6:	9f 97       	sbiw	r26, 0x2f	; 47
    42e8:	80 81       	ld	r24, Z
    42ea:	da 96       	adiw	r26, 0x3a	; 58
    42ec:	9c 91       	ld	r25, X
    42ee:	da 97       	sbiw	r26, 0x3a	; 58
    42f0:	89 23       	and	r24, r25
    42f2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    42f4:	22 23       	and	r18, r18
    42f6:	09 f4       	brne	.+2      	; 0x42fa <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    42f8:	5b c0       	rjmp	.+182    	; 0x43b0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    42fa:	58 96       	adiw	r26, 0x18	; 24
    42fc:	8d 91       	ld	r24, X+
    42fe:	9c 91       	ld	r25, X
    4300:	59 97       	sbiw	r26, 0x19	; 25
    4302:	89 2b       	or	r24, r25
    4304:	49 f5       	brne	.+82     	; 0x4358 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    4306:	d0 96       	adiw	r26, 0x30	; 48
    4308:	ed 91       	ld	r30, X+
    430a:	fc 91       	ld	r31, X
    430c:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    430e:	80 81       	ld	r24, Z
    4310:	db 96       	adiw	r26, 0x3b	; 59
    4312:	9c 91       	ld	r25, X
    4314:	db 97       	sbiw	r26, 0x3b	; 59
    4316:	89 23       	and	r24, r25
    4318:	80 83       	st	Z, r24
    431a:	12 b8       	out	0x02, r1	; 2
    431c:	d2 96       	adiw	r26, 0x32	; 50
    431e:	ed 91       	ld	r30, X+
    4320:	fc 91       	ld	r31, X
    4322:	d3 97       	sbiw	r26, 0x33	; 51
    4324:	80 81       	ld	r24, Z
    4326:	dc 96       	adiw	r26, 0x3c	; 60
    4328:	9c 91       	ld	r25, X
    432a:	dc 97       	sbiw	r26, 0x3c	; 60
    432c:	89 23       	and	r24, r25
    432e:	80 83       	st	Z, r24
    4330:	d2 96       	adiw	r26, 0x32	; 50
    4332:	ed 91       	ld	r30, X+
    4334:	fc 91       	ld	r31, X
    4336:	d3 97       	sbiw	r26, 0x33	; 51
    4338:	80 81       	ld	r24, Z
    433a:	d8 96       	adiw	r26, 0x38	; 56
    433c:	9c 91       	ld	r25, X
    433e:	d8 97       	sbiw	r26, 0x38	; 56
    4340:	89 2b       	or	r24, r25
    4342:	80 83       	st	Z, r24
    4344:	d0 96       	adiw	r26, 0x30	; 48
    4346:	ed 91       	ld	r30, X+
    4348:	fc 91       	ld	r31, X
    434a:	d1 97       	sbiw	r26, 0x31	; 49
    434c:	80 81       	ld	r24, Z
    434e:	d7 96       	adiw	r26, 0x37	; 55
    4350:	9c 91       	ld	r25, X
    4352:	d7 97       	sbiw	r26, 0x37	; 55
    4354:	89 2b       	or	r24, r25
    4356:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    4358:	d0 96       	adiw	r26, 0x30	; 48
    435a:	ed 91       	ld	r30, X+
    435c:	fc 91       	ld	r31, X
    435e:	d1 97       	sbiw	r26, 0x31	; 49
    4360:	80 81       	ld	r24, Z
    4362:	db 96       	adiw	r26, 0x3b	; 59
    4364:	9c 91       	ld	r25, X
    4366:	db 97       	sbiw	r26, 0x3b	; 59
    4368:	89 23       	and	r24, r25
    436a:	80 83       	st	Z, r24
    436c:	90 96       	adiw	r26, 0x20	; 32
    436e:	8c 91       	ld	r24, X
    4370:	90 97       	sbiw	r26, 0x20	; 32
    4372:	82 b9       	out	0x02, r24	; 2
    4374:	d2 96       	adiw	r26, 0x32	; 50
    4376:	ed 91       	ld	r30, X+
    4378:	fc 91       	ld	r31, X
    437a:	d3 97       	sbiw	r26, 0x33	; 51
    437c:	80 81       	ld	r24, Z
    437e:	dc 96       	adiw	r26, 0x3c	; 60
    4380:	9c 91       	ld	r25, X
    4382:	dc 97       	sbiw	r26, 0x3c	; 60
    4384:	89 23       	and	r24, r25
    4386:	80 83       	st	Z, r24
    4388:	d2 96       	adiw	r26, 0x32	; 50
    438a:	ed 91       	ld	r30, X+
    438c:	fc 91       	ld	r31, X
    438e:	d3 97       	sbiw	r26, 0x33	; 51
    4390:	80 81       	ld	r24, Z
    4392:	d8 96       	adiw	r26, 0x38	; 56
    4394:	9c 91       	ld	r25, X
    4396:	d8 97       	sbiw	r26, 0x38	; 56
    4398:	89 2b       	or	r24, r25
    439a:	80 83       	st	Z, r24
    439c:	d0 96       	adiw	r26, 0x30	; 48
    439e:	ed 91       	ld	r30, X+
    43a0:	fc 91       	ld	r31, X
    43a2:	d1 97       	sbiw	r26, 0x31	; 49
    43a4:	80 81       	ld	r24, Z
    43a6:	d7 96       	adiw	r26, 0x37	; 55
    43a8:	9c 91       	ld	r25, X
    43aa:	d7 97       	sbiw	r26, 0x37	; 55
    43ac:	89 2b       	or	r24, r25
    43ae:	80 83       	st	Z, r24
    43b0:	eb 01       	movw	r28, r22
    43b2:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    43b4:	18 16       	cp	r1, r24
    43b6:	19 06       	cpc	r1, r25
    43b8:	bc f5       	brge	.+110    	; 0x4428 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    43ba:	00 23       	and	r16, r16
    43bc:	91 f1       	breq	.+100    	; 0x4422 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    43be:	fe 01       	movw	r30, r28
    43c0:	45 91       	lpm	r20, Z+
    43c2:	54 91       	lpm	r21, Z
    43c4:	34 2f       	mov	r19, r20
    43c6:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    43c8:	22 b9       	out	0x02, r18	; 2
    43ca:	d2 96       	adiw	r26, 0x32	; 50
    43cc:	ed 91       	ld	r30, X+
    43ce:	fc 91       	ld	r31, X
    43d0:	d3 97       	sbiw	r26, 0x33	; 51
    43d2:	20 81       	ld	r18, Z
    43d4:	dc 96       	adiw	r26, 0x3c	; 60
    43d6:	4c 91       	ld	r20, X
    43d8:	dc 97       	sbiw	r26, 0x3c	; 60
    43da:	24 23       	and	r18, r20
    43dc:	20 83       	st	Z, r18
    43de:	d2 96       	adiw	r26, 0x32	; 50
    43e0:	ed 91       	ld	r30, X+
    43e2:	fc 91       	ld	r31, X
    43e4:	d3 97       	sbiw	r26, 0x33	; 51
    43e6:	20 81       	ld	r18, Z
    43e8:	d8 96       	adiw	r26, 0x38	; 56
    43ea:	4c 91       	ld	r20, X
    43ec:	d8 97       	sbiw	r26, 0x38	; 56
    43ee:	24 2b       	or	r18, r20
    43f0:	20 83       	st	Z, r18
    43f2:	32 b9       	out	0x02, r19	; 2
    43f4:	d2 96       	adiw	r26, 0x32	; 50
    43f6:	ed 91       	ld	r30, X+
    43f8:	fc 91       	ld	r31, X
    43fa:	d3 97       	sbiw	r26, 0x33	; 51
    43fc:	20 81       	ld	r18, Z
    43fe:	dc 96       	adiw	r26, 0x3c	; 60
    4400:	3c 91       	ld	r19, X
    4402:	dc 97       	sbiw	r26, 0x3c	; 60
    4404:	23 23       	and	r18, r19
    4406:	20 83       	st	Z, r18
    4408:	d2 96       	adiw	r26, 0x32	; 50
    440a:	ed 91       	ld	r30, X+
    440c:	fc 91       	ld	r31, X
    440e:	d3 97       	sbiw	r26, 0x33	; 51
    4410:	20 81       	ld	r18, Z
    4412:	d8 96       	adiw	r26, 0x38	; 56
    4414:	3c 91       	ld	r19, X
    4416:	d8 97       	sbiw	r26, 0x38	; 56
    4418:	23 2b       	or	r18, r19
    441a:	20 83       	st	Z, r18
    441c:	22 96       	adiw	r28, 0x02	; 2
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	c9 cf       	rjmp	.-110    	; 0x43b4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    4422:	38 81       	ld	r19, Y
    4424:	29 81       	ldd	r18, Y+1	; 0x01
    4426:	d0 cf       	rjmp	.-96     	; 0x43c8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    4428:	9e 96       	adiw	r26, 0x2e	; 46
    442a:	ed 91       	ld	r30, X+
    442c:	fc 91       	ld	r31, X
    442e:	9f 97       	sbiw	r26, 0x2f	; 47
    4430:	80 81       	ld	r24, Z
    4432:	d6 96       	adiw	r26, 0x36	; 54
    4434:	9c 91       	ld	r25, X
    4436:	89 2b       	or	r24, r25
    4438:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    443a:	df 91       	pop	r29
    443c:	cf 91       	pop	r28
    443e:	0f 91       	pop	r16
    4440:	08 95       	ret

00004442 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    4442:	2f 92       	push	r2
    4444:	3f 92       	push	r3
    4446:	4f 92       	push	r4
    4448:	5f 92       	push	r5
    444a:	6f 92       	push	r6
    444c:	7f 92       	push	r7
    444e:	8f 92       	push	r8
    4450:	9f 92       	push	r9
    4452:	af 92       	push	r10
    4454:	bf 92       	push	r11
    4456:	cf 92       	push	r12
    4458:	df 92       	push	r13
    445a:	ef 92       	push	r14
    445c:	ff 92       	push	r15
    445e:	0f 93       	push	r16
    4460:	1f 93       	push	r17
    4462:	cf 93       	push	r28
    4464:	df 93       	push	r29
    4466:	00 d0       	rcall	.+0      	; 0x4468 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    4468:	00 d0       	rcall	.+0      	; 0x446a <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    446e:	28 2e       	mov	r2, r24
    4470:	31 2c       	mov	r3, r1
    4472:	c1 01       	movw	r24, r2
    4474:	88 0f       	add	r24, r24
    4476:	99 1f       	adc	r25, r25
    4478:	e0 91 39 0c 	lds	r30, 0x0C39	; 0x800c39 <array_pids>
    447c:	f0 91 3a 0c 	lds	r31, 0x0C3A	; 0x800c3a <array_pids+0x1>
    4480:	e8 0f       	add	r30, r24
    4482:	f9 1f       	adc	r31, r25
    4484:	80 81       	ld	r24, Z
    4486:	91 81       	ldd	r25, Z+1	; 0x01
    4488:	9e 83       	std	Y+6, r25	; 0x06
    448a:	8d 83       	std	Y+5, r24	; 0x05
    448c:	81 01       	movw	r16, r2
    448e:	00 0f       	add	r16, r16
    4490:	11 1f       	adc	r17, r17
    4492:	00 0f       	add	r16, r16
    4494:	11 1f       	adc	r17, r17
    4496:	f8 01       	movw	r30, r16
    4498:	ed 56       	subi	r30, 0x6D	; 109
    449a:	f6 4f       	sbci	r31, 0xF6	; 246
    449c:	40 80       	ld	r4, Z
    449e:	51 80       	ldd	r5, Z+1	; 0x01
    44a0:	62 80       	ldd	r6, Z+2	; 0x02
    44a2:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	a9 01       	movw	r20, r18
    44aa:	c3 01       	movw	r24, r6
    44ac:	b2 01       	movw	r22, r4
    44ae:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
    44b2:	87 fd       	sbrc	r24, 7
    44b4:	97 c0       	rjmp	.+302    	; 0x45e4 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    44b6:	f8 01       	movw	r30, r16
    44b8:	e9 55       	subi	r30, 0x59	; 89
    44ba:	f6 4f       	sbci	r31, 0xF6	; 246
    44bc:	80 80       	ld	r8, Z
    44be:	91 80       	ldd	r9, Z+1	; 0x01
    44c0:	a2 80       	ldd	r10, Z+2	; 0x02
    44c2:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	a9 01       	movw	r20, r18
    44ca:	c5 01       	movw	r24, r10
    44cc:	b4 01       	movw	r22, r8
    44ce:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
    44d2:	87 fd       	sbrc	r24, 7
    44d4:	87 c0       	rjmp	.+270    	; 0x45e4 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    44d6:	f8 01       	movw	r30, r16
    44d8:	e5 54       	subi	r30, 0x45	; 69
    44da:	f6 4f       	sbci	r31, 0xF6	; 246
    44dc:	c0 80       	ld	r12, Z
    44de:	d1 80       	ldd	r13, Z+1	; 0x01
    44e0:	e2 80       	ldd	r14, Z+2	; 0x02
    44e2:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	a9 01       	movw	r20, r18
    44ea:	c7 01       	movw	r24, r14
    44ec:	b6 01       	movw	r22, r12
    44ee:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
    44f2:	87 fd       	sbrc	r24, 7
    44f4:	77 c0       	rjmp	.+238    	; 0x45e4 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	ed 81       	ldd	r30, Y+5	; 0x05
    44fa:	fe 81       	ldd	r31, Y+6	; 0x06
    44fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    44fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    4500:	21 30       	cpi	r18, 0x01	; 1
    4502:	31 05       	cpc	r19, r1
    4504:	09 f0       	breq	.+2      	; 0x4508 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	ed 81       	ldd	r30, Y+5	; 0x05
    450a:	fe 81       	ldd	r31, Y+6	; 0x06
    450c:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    450e:	40 82       	st	Z, r4
    4510:	51 82       	std	Z+1, r5	; 0x01
    4512:	62 82       	std	Z+2, r6	; 0x02
    4514:	73 82       	std	Z+3, r7	; 0x03
    4516:	84 82       	std	Z+4, r8	; 0x04
    4518:	95 82       	std	Z+5, r9	; 0x05
    451a:	a6 82       	std	Z+6, r10	; 0x06
    451c:	b7 82       	std	Z+7, r11	; 0x07
    451e:	c0 86       	std	Z+8, r12	; 0x08
    4520:	d1 86       	std	Z+9, r13	; 0x09
    4522:	e2 86       	std	Z+10, r14	; 0x0a
    4524:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    4526:	66 a5       	ldd	r22, Z+46	; 0x2e
    4528:	77 a5       	ldd	r23, Z+47	; 0x2f
    452a:	80 a9       	ldd	r24, Z+48	; 0x30
    452c:	91 a9       	ldd	r25, Z+49	; 0x31
    452e:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	4a e7       	ldi	r20, 0x7A	; 122
    4538:	54 e4       	ldi	r21, 0x44	; 68
    453a:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
    453e:	69 83       	std	Y+1, r22	; 0x01
    4540:	7a 83       	std	Y+2, r23	; 0x02
    4542:	8b 83       	std	Y+3, r24	; 0x03
    4544:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    4546:	ed 81       	ldd	r30, Y+5	; 0x05
    4548:	fe 81       	ldd	r31, Y+6	; 0x06
    454a:	44 86       	std	Z+12, r4	; 0x0c
    454c:	55 86       	std	Z+13, r5	; 0x0d
    454e:	66 86       	std	Z+14, r6	; 0x0e
    4550:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    4552:	9b 01       	movw	r18, r22
    4554:	ac 01       	movw	r20, r24
    4556:	c5 01       	movw	r24, r10
    4558:	b4 01       	movw	r22, r8
    455a:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
    455e:	4b 01       	movw	r8, r22
    4560:	5c 01       	movw	r10, r24
    4562:	ed 81       	ldd	r30, Y+5	; 0x05
    4564:	fe 81       	ldd	r31, Y+6	; 0x06
    4566:	80 8a       	std	Z+16, r8	; 0x10
    4568:	91 8a       	std	Z+17, r9	; 0x11
    456a:	a2 8a       	std	Z+18, r10	; 0x12
    456c:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    456e:	29 81       	ldd	r18, Y+1	; 0x01
    4570:	3a 81       	ldd	r19, Y+2	; 0x02
    4572:	4b 81       	ldd	r20, Y+3	; 0x03
    4574:	5c 81       	ldd	r21, Y+4	; 0x04
    4576:	c7 01       	movw	r24, r14
    4578:	b6 01       	movw	r22, r12
    457a:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
    457e:	6b 01       	movw	r12, r22
    4580:	7c 01       	movw	r14, r24
    4582:	ed 81       	ldd	r30, Y+5	; 0x05
    4584:	fe 81       	ldd	r31, Y+6	; 0x06
    4586:	c4 8a       	std	Z+20, r12	; 0x14
    4588:	d5 8a       	std	Z+21, r13	; 0x15
    458a:	e6 8a       	std	Z+22, r14	; 0x16
    458c:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    458e:	80 8d       	ldd	r24, Z+24	; 0x18
    4590:	91 8d       	ldd	r25, Z+25	; 0x19
    4592:	01 97       	sbiw	r24, 0x01	; 1
    4594:	39 f5       	brne	.+78     	; 0x45e4 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    4596:	a3 01       	movw	r20, r6
    4598:	92 01       	movw	r18, r4
    459a:	60 e0       	ldi	r22, 0x00	; 0
    459c:	70 e0       	ldi	r23, 0x00	; 0
    459e:	cb 01       	movw	r24, r22
    45a0:	0e 94 51 b2 	call	0x164a2	; 0x164a2 <__subsf3>
    45a4:	ed 81       	ldd	r30, Y+5	; 0x05
    45a6:	fe 81       	ldd	r31, Y+6	; 0x06
    45a8:	64 87       	std	Z+12, r22	; 0x0c
    45aa:	75 87       	std	Z+13, r23	; 0x0d
    45ac:	86 87       	std	Z+14, r24	; 0x0e
    45ae:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    45b0:	a5 01       	movw	r20, r10
    45b2:	94 01       	movw	r18, r8
    45b4:	60 e0       	ldi	r22, 0x00	; 0
    45b6:	70 e0       	ldi	r23, 0x00	; 0
    45b8:	cb 01       	movw	r24, r22
    45ba:	0e 94 51 b2 	call	0x164a2	; 0x164a2 <__subsf3>
    45be:	ed 81       	ldd	r30, Y+5	; 0x05
    45c0:	fe 81       	ldd	r31, Y+6	; 0x06
    45c2:	60 8b       	std	Z+16, r22	; 0x10
    45c4:	71 8b       	std	Z+17, r23	; 0x11
    45c6:	82 8b       	std	Z+18, r24	; 0x12
    45c8:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    45ca:	a7 01       	movw	r20, r14
    45cc:	96 01       	movw	r18, r12
    45ce:	60 e0       	ldi	r22, 0x00	; 0
    45d0:	70 e0       	ldi	r23, 0x00	; 0
    45d2:	cb 01       	movw	r24, r22
    45d4:	0e 94 51 b2 	call	0x164a2	; 0x164a2 <__subsf3>
    45d8:	ed 81       	ldd	r30, Y+5	; 0x05
    45da:	fe 81       	ldd	r31, Y+6	; 0x06
    45dc:	64 8b       	std	Z+20, r22	; 0x14
    45de:	75 8b       	std	Z+21, r23	; 0x15
    45e0:	86 8b       	std	Z+22, r24	; 0x16
    45e2:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    45e4:	f1 01       	movw	r30, r2
    45e6:	e1 53       	subi	r30, 0x31	; 49
    45e8:	f6 4f       	sbci	r31, 0xF6	; 246
    45ea:	10 81       	ld	r17, Z
    45ec:	61 2f       	mov	r22, r17
    45ee:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    45f0:	61 15       	cp	r22, r1
    45f2:	71 05       	cpc	r23, r1
    45f4:	f1 f1       	breq	.+124    	; 0x4672 <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    45f6:	07 2e       	mov	r0, r23
    45f8:	00 0c       	add	r0, r0
    45fa:	88 0b       	sbc	r24, r24
    45fc:	99 0b       	sbc	r25, r25
    45fe:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    4602:	6b 01       	movw	r12, r22
    4604:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    4606:	ed 81       	ldd	r30, Y+5	; 0x05
    4608:	fe 81       	ldd	r31, Y+6	; 0x06
    460a:	66 a5       	ldd	r22, Z+46	; 0x2e
    460c:	77 a5       	ldd	r23, Z+47	; 0x2f
    460e:	80 a9       	ldd	r24, Z+48	; 0x30
    4610:	91 a9       	ldd	r25, Z+49	; 0x31
    4612:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
    4616:	9b 01       	movw	r18, r22
    4618:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    461a:	c7 01       	movw	r24, r14
    461c:	b6 01       	movw	r22, r12
    461e:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
    4622:	6b 01       	movw	r12, r22
    4624:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    4626:	ac 01       	movw	r20, r24
    4628:	9b 01       	movw	r18, r22
    462a:	ed 81       	ldd	r30, Y+5	; 0x05
    462c:	fe 81       	ldd	r31, Y+6	; 0x06
    462e:	60 89       	ldd	r22, Z+16	; 0x10
    4630:	71 89       	ldd	r23, Z+17	; 0x11
    4632:	82 89       	ldd	r24, Z+18	; 0x12
    4634:	93 89       	ldd	r25, Z+19	; 0x13
    4636:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
    463a:	ed 81       	ldd	r30, Y+5	; 0x05
    463c:	fe 81       	ldd	r31, Y+6	; 0x06
    463e:	60 8b       	std	Z+16, r22	; 0x10
    4640:	71 8b       	std	Z+17, r23	; 0x11
    4642:	82 8b       	std	Z+18, r24	; 0x12
    4644:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    4646:	a7 01       	movw	r20, r14
    4648:	96 01       	movw	r18, r12
    464a:	64 89       	ldd	r22, Z+20	; 0x14
    464c:	75 89       	ldd	r23, Z+21	; 0x15
    464e:	86 89       	ldd	r24, Z+22	; 0x16
    4650:	97 89       	ldd	r25, Z+23	; 0x17
    4652:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
    4656:	ed 81       	ldd	r30, Y+5	; 0x05
    4658:	fe 81       	ldd	r31, Y+6	; 0x06
    465a:	64 8b       	std	Z+20, r22	; 0x14
    465c:	75 8b       	std	Z+21, r23	; 0x15
    465e:	86 8b       	std	Z+22, r24	; 0x16
    4660:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    4662:	81 2f       	mov	r24, r17
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	b0 e0       	ldi	r27, 0x00	; 0
    4668:	a0 e0       	ldi	r26, 0x00	; 0
    466a:	86 a7       	std	Z+46, r24	; 0x2e
    466c:	97 a7       	std	Z+47, r25	; 0x2f
    466e:	a0 ab       	std	Z+48, r26	; 0x30
    4670:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:221
}
    4672:	26 96       	adiw	r28, 0x06	; 6
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	f8 94       	cli
    4678:	de bf       	out	0x3e, r29	; 62
    467a:	0f be       	out	0x3f, r0	; 63
    467c:	cd bf       	out	0x3d, r28	; 61
    467e:	df 91       	pop	r29
    4680:	cf 91       	pop	r28
    4682:	1f 91       	pop	r17
    4684:	0f 91       	pop	r16
    4686:	ff 90       	pop	r15
    4688:	ef 90       	pop	r14
    468a:	df 90       	pop	r13
    468c:	cf 90       	pop	r12
    468e:	bf 90       	pop	r11
    4690:	af 90       	pop	r10
    4692:	9f 90       	pop	r9
    4694:	8f 90       	pop	r8
    4696:	7f 90       	pop	r7
    4698:	6f 90       	pop	r6
    469a:	5f 90       	pop	r5
    469c:	4f 90       	pop	r4
    469e:	3f 90       	pop	r3
    46a0:	2f 90       	pop	r2
    46a2:	08 95       	ret

000046a4 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    46a4:	fb 01       	movw	r30, r22
    46a6:	9c 01       	movw	r18, r24
    46a8:	28 5f       	subi	r18, 0xF8	; 248
    46aa:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    46ac:	dc 01       	movw	r26, r24
    46ae:	5d 91       	ld	r21, X+
    46b0:	cd 01       	movw	r24, r26
    46b2:	41 91       	ld	r20, Z+
    46b4:	54 13       	cpse	r21, r20
    46b6:	05 c0       	rjmp	.+10     	; 0x46c2 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    46b8:	a2 17       	cp	r26, r18
    46ba:	b3 07       	cpc	r27, r19
    46bc:	b9 f7       	brne	.-18     	; 0x46ac <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    46c2:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    46c4:	08 95       	ret

000046c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    46c6:	80 33       	cpi	r24, 0x30	; 48
    46c8:	9c f0       	brlt	.+38     	; 0x46f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    46ca:	8a 33       	cpi	r24, 0x3A	; 58
    46cc:	24 f0       	brlt	.+8      	; 0x46d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    46ce:	8f 35       	cpi	r24, 0x5F	; 95
    46d0:	24 f0       	brlt	.+8      	; 0x46da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    46d2:	8b 37       	cpi	r24, 0x7B	; 123
    46d4:	24 f4       	brge	.+8      	; 0x46de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    46d6:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    46d8:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    46da:	81 34       	cpi	r24, 0x41	; 65
    46dc:	4c f0       	brlt	.+18     	; 0x46f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    46de:	8b 35       	cpi	r24, 0x5B	; 91
    46e0:	d4 f3       	brlt	.-12     	; 0x46d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    46e2:	93 ed       	ldi	r25, 0xD3	; 211
    46e4:	98 0f       	add	r25, r24
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	92 30       	cpi	r25, 0x02	; 2
    46ea:	b0 f3       	brcs	.-20     	; 0x46d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	08 95       	ret
    46f0:	8b 32       	cpi	r24, 0x2B	; 43
    46f2:	b9 f7       	brne	.-18     	; 0x46e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    46f4:	f0 cf       	rjmp	.-32     	; 0x46d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

000046f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    46f6:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    46f8:	80 85       	ldd	r24, Z+8	; 0x08
    46fa:	81 11       	cpse	r24, r1
    46fc:	0a c0       	rjmp	.+20     	; 0x4712 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    46fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4700:	b3 81       	ldd	r27, Z+3	; 0x03
    4702:	cd 01       	movw	r24, r26
    4704:	01 96       	adiw	r24, 0x01	; 1
    4706:	93 83       	std	Z+3, r25	; 0x03
    4708:	82 83       	std	Z+2, r24	; 0x02
    470a:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    470c:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    4712:	87 81       	ldd	r24, Z+7	; 0x07
    4714:	08 95       	ret

00004716 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    4716:	df 92       	push	r13
    4718:	ef 92       	push	r14
    471a:	ff 92       	push	r15
    471c:	0f 93       	push	r16
    471e:	1f 93       	push	r17
    4720:	cf 93       	push	r28
    4722:	df 93       	push	r29
    4724:	ec 01       	movw	r28, r24
    4726:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    4728:	0c 81       	ldd	r16, Y+4	; 0x04
    472a:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    472c:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4730:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4732:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    4734:	ce 01       	movw	r24, r28
    4736:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    473a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    473c:	d8 16       	cp	r13, r24
    473e:	89 f1       	breq	.+98     	; 0x47a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    4740:	81 11       	cpse	r24, r1
    4742:	0a c0       	rjmp	.+20     	; 0x4758 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    4748:	df 91       	pop	r29
    474a:	cf 91       	pop	r28
    474c:	1f 91       	pop	r17
    474e:	0f 91       	pop	r16
    4750:	ff 90       	pop	r15
    4752:	ef 90       	pop	r14
    4754:	df 90       	pop	r13
    4756:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    4758:	8c 35       	cpi	r24, 0x5C	; 92
    475a:	d1 f4       	brne	.+52     	; 0x4790 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    475c:	ce 01       	movw	r24, r28
    475e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    4762:	88 23       	and	r24, r24
    4764:	79 f3       	breq	.-34     	; 0x4744 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    4766:	85 37       	cpi	r24, 0x75	; 117
    4768:	19 f4       	brne	.+6      	; 0x4770 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    476a:	84 e0       	ldi	r24, 0x04	; 4
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	ec cf       	rjmp	.-40     	; 0x4748 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    4770:	e8 ee       	ldi	r30, 0xE8	; 232
    4772:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    4774:	90 81       	ld	r25, Z
    4776:	99 23       	and	r25, r25
    4778:	51 f0       	breq	.+20     	; 0x478e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    477a:	89 13       	cpse	r24, r25
    477c:	06 c0       	rjmp	.+12     	; 0x478a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    477e:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    4780:	81 11       	cpse	r24, r1
    4782:	05 c0       	rjmp	.+10     	; 0x478e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    4784:	82 e0       	ldi	r24, 0x02	; 2
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	df cf       	rjmp	.-66     	; 0x4748 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    478a:	32 96       	adiw	r30, 0x02	; 2
    478c:	f3 cf       	rjmp	.-26     	; 0x4774 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    478e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    4790:	ec 81       	ldd	r30, Y+4	; 0x04
    4792:	fd 81       	ldd	r31, Y+5	; 0x05
    4794:	9f 01       	movw	r18, r30
    4796:	2f 5f       	subi	r18, 0xFF	; 255
    4798:	3f 4f       	sbci	r19, 0xFF	; 255
    479a:	3d 83       	std	Y+5, r19	; 0x05
    479c:	2c 83       	std	Y+4, r18	; 0x04
    479e:	80 83       	st	Z, r24
    47a0:	c9 cf       	rjmp	.-110    	; 0x4734 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    47a2:	ec 81       	ldd	r30, Y+4	; 0x04
    47a4:	fd 81       	ldd	r31, Y+5	; 0x05
    47a6:	cf 01       	movw	r24, r30
    47a8:	01 96       	adiw	r24, 0x01	; 1
    47aa:	9d 83       	std	Y+5, r25	; 0x05
    47ac:	8c 83       	std	Y+4, r24	; 0x04
    47ae:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    47b0:	f7 01       	movw	r30, r14
    47b2:	11 83       	std	Z+1, r17	; 0x01
    47b4:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    47b6:	83 e0       	ldi	r24, 0x03	; 3
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	01 2b       	or	r16, r17
    47bc:	29 f2       	breq	.-118    	; 0x4748 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	c2 cf       	rjmp	.-124    	; 0x4748 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

000047c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    47c4:	1f 93       	push	r17
    47c6:	cf 93       	push	r28
    47c8:	df 93       	push	r29
    47ca:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    47cc:	ce 01       	movw	r24, r28
    47ce:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    47d2:	8b 30       	cpi	r24, 0x0B	; 11
    47d4:	3c f4       	brge	.+14     	; 0x47e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    47d6:	89 30       	cpi	r24, 0x09	; 9
    47d8:	5c f4       	brge	.+22     	; 0x47f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    47da:	88 23       	and	r24, r24
    47dc:	e9 f0       	breq	.+58     	; 0x4818 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	1c c0       	rjmp	.+56     	; 0x481c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    47e4:	80 32       	cpi	r24, 0x20	; 32
    47e6:	21 f0       	breq	.+8      	; 0x47f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    47e8:	8f 32       	cpi	r24, 0x2F	; 47
    47ea:	21 f0       	breq	.+8      	; 0x47f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    47ec:	8d 30       	cpi	r24, 0x0D	; 13
    47ee:	b9 f7       	brne	.-18     	; 0x47de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    47f0:	18 86       	std	Y+8, r1	; 0x08
    47f2:	ec cf       	rjmp	.-40     	; 0x47cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    47f4:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    47f6:	ce 01       	movw	r24, r28
    47f8:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    47fc:	8a 32       	cpi	r24, 0x2A	; 42
    47fe:	29 f0       	breq	.+10     	; 0x480a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    4800:	8f 32       	cpi	r24, 0x2F	; 47
    4802:	d1 f0       	breq	.+52     	; 0x4838 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    4804:	82 e0       	ldi	r24, 0x02	; 2
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	09 c0       	rjmp	.+18     	; 0x481c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    480a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    480c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    480e:	ce 01       	movw	r24, r28
    4810:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    4814:	81 11       	cpse	r24, r1
    4816:	06 c0       	rjmp	.+12     	; 0x4824 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	1f 91       	pop	r17
    4822:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    4824:	8f 32       	cpi	r24, 0x2F	; 47
    4826:	11 f4       	brne	.+4      	; 0x482c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    4828:	11 11       	cpse	r17, r1
    482a:	e2 cf       	rjmp	.-60     	; 0x47f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    482c:	11 e0       	ldi	r17, 0x01	; 1
    482e:	8a 32       	cpi	r24, 0x2A	; 42
    4830:	09 f0       	breq	.+2      	; 0x4834 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    4832:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4834:	18 86       	std	Y+8, r1	; 0x08
    4836:	eb cf       	rjmp	.-42     	; 0x480e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    4838:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    483a:	ce 01       	movw	r24, r28
    483c:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    4840:	88 23       	and	r24, r24
    4842:	51 f3       	breq	.-44     	; 0x4818 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    4844:	8a 30       	cpi	r24, 0x0A	; 10
    4846:	c1 f7       	brne	.-16     	; 0x4838 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    4848:	c1 cf       	rjmp	.-126    	; 0x47cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000484a <get_function_default_temp_active(unsigned char, unsigned char, unsigned char)>:
_Z32get_function_default_temp_activehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4878


uint8_t get_function_default_temp_active(uint8_t args1, uint8_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <default_show_temp>
    4850:	94 13       	cpse	r25, r20
    4852:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4882
    ret = 1;

  return ret;
}
    4854:	08 95       	ret

00004856 <get_function_default_temp_max_items(unsigned char, unsigned char)>:
_Z35get_function_default_temp_max_itemshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4871
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t get_function_default_temp_max_items(uint8_t args1, uint8_t args2)
{
  return use_tds + use_rtds;
    4856:	90 91 ef 0a 	lds	r25, 0x0AEF	; 0x800aef <use_tds>
    485a:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
}
    485e:	89 0f       	add	r24, r25
    4860:	08 95       	ret

00004862 <get_function_one_wire_last_index_for_menu(unsigned char)>:
_Z41get_function_one_wire_last_index_for_menuh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4654
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint8_t idx)
{
    4862:	eb ed       	ldi	r30, 0xDB	; 219
    4864:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4655
  uint8_t active = 0;
    4866:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4657
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    4868:	91 85       	ldd	r25, Z+9	; 0x09
    486a:	91 30       	cpi	r25, 0x01	; 1
    486c:	09 f4       	brne	.+2      	; 0x4870 <get_function_one_wire_last_index_for_menu(unsigned char)+0xe>
    486e:	8f 5f       	subi	r24, 0xFF	; 255
    4870:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4656

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint8_t idx)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    4872:	9a e0       	ldi	r25, 0x0A	; 10
    4874:	ed 31       	cpi	r30, 0x1D	; 29
    4876:	f9 07       	cpc	r31, r25
    4878:	b9 f7       	brne	.-18     	; 0x4868 <get_function_one_wire_last_index_for_menu(unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    487a:	08 95       	ret

0000487c <get_function_rtds_last_index_for_menu(unsigned char, unsigned char)>:
_Z37get_function_rtds_last_index_for_menuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4570
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint8_t args1, uint8_t args2)
{
  return MAX_RTDS;
  //return use_rtds;
}
    487c:	8a e0       	ldi	r24, 0x0A	; 10
    487e:	08 95       	ret

00004880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4546
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    4880:	ef 92       	push	r14
    4882:	ff 92       	push	r15
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    4888:	80 17       	cp	r24, r16
    488a:	91 07       	cpc	r25, r17
    488c:	74 f4       	brge	.+28     	; 0x48aa <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4548
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    488e:	84 0f       	add	r24, r20
    4890:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    4892:	08 17       	cp	r16, r24
    4894:	19 07       	cpc	r17, r25
    4896:	4c f4       	brge	.+18     	; 0x48aa <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    4898:	6e 15       	cp	r22, r14
    489a:	7f 05       	cpc	r23, r15
    489c:	34 f4       	brge	.+12     	; 0x48aa <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4548
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    489e:	62 0f       	add	r22, r18
    48a0:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	e6 16       	cp	r14, r22
    48a6:	f7 06       	cpc	r15, r23
    48a8:	0c f0       	brlt	.+2      	; 0x48ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4547
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    48aa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4553
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    48ac:	1f 91       	pop	r17
    48ae:	0f 91       	pop	r16
    48b0:	ff 90       	pop	r15
    48b2:	ef 90       	pop	r14
    48b4:	08 95       	ret

000048b6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
    48ba:	fc 01       	movw	r30, r24
    48bc:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
  if (max_element > 0)
    48be:	22 23       	and	r18, r18
    48c0:	09 f1       	breq	.+66     	; 0x4904 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4413
  {
    menu_slider_data_max = *stop;
    48c2:	98 81       	ld	r25, Y
    48c4:	90 93 d4 08 	sts	0x08D4, r25	; 0x8008d4 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4414
    menu_slider_data_min = *start;
    48c8:	80 81       	ld	r24, Z
    48ca:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
    menu_slider_data_max_element = max_element;
    48ce:	20 93 d2 08 	sts	0x08D2, r18	; 0x8008d2 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4417
    ///
    *start = menu_slider_data_current[args];
    48d2:	a4 2f       	mov	r26, r20
    48d4:	b0 e0       	ldi	r27, 0x00	; 0
    48d6:	a3 53       	subi	r26, 0x33	; 51
    48d8:	b7 4f       	sbci	r27, 0xF7	; 247
    48da:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    48dc:	62 2f       	mov	r22, r18
    48de:	70 e0       	ldi	r23, 0x00	; 0
    48e0:	49 2f       	mov	r20, r25
    48e2:	50 e0       	ldi	r21, 0x00	; 0
    48e4:	db 01       	movw	r26, r22
    48e6:	a3 0f       	add	r26, r19
    48e8:	b1 1d       	adc	r27, r1
    48ea:	4a 17       	cp	r20, r26
    48ec:	5b 07       	cpc	r21, r27
    48ee:	6c f0       	brlt	.+26     	; 0x490a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4417
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    48f0:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    48f2:	80 81       	ld	r24, Z
    48f4:	98 17       	cp	r25, r24
    48f6:	08 f4       	brcc	.+2      	; 0x48fa <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4421
      *start = menu_slider_data_max;
    48f8:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    48fa:	29 17       	cp	r18, r25
    48fc:	78 f4       	brcc	.+30     	; 0x491c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    48fe:	80 81       	ld	r24, Z
    4900:	28 0f       	add	r18, r24
    4902:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    4904:	df 91       	pop	r29
    4906:	cf 91       	pop	r28
    4908:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    490a:	48 1b       	sub	r20, r24
    490c:	51 09       	sbc	r21, r1
    490e:	64 17       	cp	r22, r20
    4910:	75 07       	cpc	r23, r21
    4912:	74 f7       	brge	.-36     	; 0x48f0 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
      *start = menu_slider_data_max - max_element;
    4914:	89 2f       	mov	r24, r25
    4916:	82 1b       	sub	r24, r18
    4918:	80 83       	st	Z, r24
    491a:	eb cf       	rjmp	.-42     	; 0x48f2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    491c:	98 83       	st	Y, r25
    491e:	f2 cf       	rjmp	.-28     	; 0x4904 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

00004920 <display_function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4405
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    4920:	e8 2f       	mov	r30, r24
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	e3 53       	subi	r30, 0x33	; 51
    4926:	f7 4f       	sbci	r31, 0xF7	; 247
    4928:	80 81       	ld	r24, Z
    492a:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <menu_slider_data_min>
    492e:	98 17       	cp	r25, r24
    4930:	10 f4       	brcc	.+4      	; 0x4936 <display_function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
    menu_slider_data_current[args1]--;
    4932:	81 50       	subi	r24, 0x01	; 1
    4934:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4407
}
    4936:	08 95       	ret

00004938 <display_function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    4938:	e8 2f       	mov	r30, r24
    493a:	f0 e0       	ldi	r31, 0x00	; 0
    493c:	e3 53       	subi	r30, 0x33	; 51
    493e:	f7 4f       	sbci	r31, 0xF7	; 247
    4940:	80 81       	ld	r24, Z
    4942:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <menu_slider_data_max>
    4946:	90 91 d2 08 	lds	r25, 0x08D2	; 0x8008d2 <menu_slider_data_max_element>
    494a:	29 1b       	sub	r18, r25
    494c:	33 0b       	sbc	r19, r19
    494e:	82 17       	cp	r24, r18
    4950:	13 06       	cpc	r1, r19
    4952:	14 f4       	brge	.+4      	; 0x4958 <display_function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4400
    menu_slider_data_current[args1]++;
    4954:	8f 5f       	subi	r24, 0xFF	; 255
    4956:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401
}
    4958:	08 95       	ret

0000495a <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3292
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    495a:	83 30       	cpi	r24, 0x03	; 3
    495c:	41 f4       	brne	.+16     	; 0x496e <a2d_complete(unsigned char, unsigned int)+0x14>
    495e:	70 93 23 0a 	sts	0x0A23, r23	; 0x800a23 <proud+0x1>
    4962:	60 93 22 0a 	sts	0x0A22, r22	; 0x800a22 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3297
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3298
}
    496c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    496e:	86 30       	cpi	r24, 0x06	; 6
    4970:	29 f4       	brne	.+10     	; 0x497c <a2d_complete(unsigned char, unsigned int)+0x22>
    4972:	70 93 29 0a 	sts	0x0A29, r23	; 0x800a29 <tritri+0x1>
    4976:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <tritri>
    497a:	f5 cf       	rjmp	.-22     	; 0x4966 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3294
  if (channel == A_PETV) petnula = data;
    497c:	85 30       	cpi	r24, 0x05	; 5
    497e:	29 f4       	brne	.+10     	; 0x498a <a2d_complete(unsigned char, unsigned int)+0x30>
    4980:	70 93 27 0a 	sts	0x0A27, r23	; 0x800a27 <petnula+0x1>
    4984:	60 93 26 0a 	sts	0x0A26, r22	; 0x800a26 <petnula>
    4988:	ee cf       	rjmp	.-36     	; 0x4966 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3295
  if (channel == A_DVANACTV) dvanact = data;
    498a:	84 30       	cpi	r24, 0x04	; 4
    498c:	29 f4       	brne	.+10     	; 0x4998 <a2d_complete(unsigned char, unsigned int)+0x3e>
    498e:	70 93 25 0a 	sts	0x0A25, r23	; 0x800a25 <dvanact+0x1>
    4992:	60 93 24 0a 	sts	0x0A24, r22	; 0x800a24 <dvanact>
    4996:	e7 cf       	rjmp	.-50     	; 0x4966 <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3296
  if (channel == A_LIGHT) light_curr = data;
    4998:	87 30       	cpi	r24, 0x07	; 7
    499a:	29 f7       	brne	.-54     	; 0x4966 <a2d_complete(unsigned char, unsigned int)+0xc>
    499c:	70 93 ed 0a 	sts	0x0AED, r23	; 0x800aed <light_curr+0x1>
    49a0:	60 93 ec 0a 	sts	0x0AEC, r22	; 0x800aec <light_curr>
    49a4:	e0 cf       	rjmp	.-64     	; 0x4966 <a2d_complete(unsigned char, unsigned int)+0xc>

000049a6 <get_function_return_args_1(unsigned char, unsigned char)>:
_Z26get_function_return_args_1hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946


uint8_t get_function_return_args_1(uint8_t args1, uint8_t args2)
{
  return args1;
}
    49a6:	08 95       	ret

000049a8 <menu_redraw_update_temp(unsigned char, unsigned char)>:
_Z23menu_redraw_update_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
  return 0;
}

uint8_t menu_redraw_update_temp(uint8_t args1, uint8_t args2)
{
  if (menu_redraw10s == 1)
    49a8:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <menu_redraw10s>
    49ac:	81 30       	cpi	r24, 0x01	; 1
    49ae:	19 f4       	brne	.+6      	; 0x49b6 <menu_redraw_update_temp(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
  {
    menu_redraw10s = 0;
    49b0:	10 92 f6 0a 	sts	0x0AF6, r1	; 0x800af6 <menu_redraw10s>
    49b4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
    return 1;
  }
  return 0;
    49b6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
}
    49b8:	08 95       	ret

000049ba <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    49ba:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <change_term_mode>
    49be:	81 30       	cpi	r24, 0x01	; 1
    49c0:	19 f4       	brne	.+6      	; 0x49c8 <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
  {
    change_term_mode = 0;
    49c2:	10 92 0d 09 	sts	0x090D, r1	; 0x80090d <change_term_mode>
    49c6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
    return 1;
  }
  return 0;
    49c8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
}
    49ca:	08 95       	ret

000049cc <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1914
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    49cc:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <menu_redraw05s>
    49d0:	81 30       	cpi	r24, 0x01	; 1
    49d2:	19 f4       	brne	.+6      	; 0x49da <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
  {
    menu_redraw05s = 0;
    49d4:	10 92 f1 0a 	sts	0x0AF1, r1	; 0x800af1 <menu_redraw05s>
    49d8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
    return 1;
  }
  return 0;
    49da:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
}
    49dc:	08 95       	ret

000049de <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    49de:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <dialog_set_string_keyboard_type>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
}
    49e2:	08 95       	ret

000049e4 <get_function_keyboard_alfa_max_keys(unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint8_t idx)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    49e4:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <dialog_set_string_keyboard_type>
    49e8:	83 30       	cpi	r24, 0x03	; 3
    49ea:	08 f0       	brcs	.+2      	; 0x49ee <get_function_keyboard_alfa_max_keys(unsigned char)+0xa>
    49ec:	08 95       	ret
    49ee:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1875
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    49f0:	08 95       	ret

000049f2 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1841

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    49f2:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <dialog_set_string_keyboard_type>
    49f6:	91 11       	cpse	r25, r1
    49f8:	0a c0       	rjmp	.+20     	; 0x4a0e <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1842
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    49fa:	e8 2f       	mov	r30, r24
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	ed 51       	subi	r30, 0x1D	; 29
    4a00:	ff 4c       	sbci	r31, 0xCF	; 207
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    4a02:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
  line1[0] = znak;
    4a04:	da 01       	movw	r26, r20
    4a06:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1848
  line2[0] = 0;
    4a08:	f9 01       	movw	r30, r18
    4a0a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
}
    4a0c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1843
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    4a0e:	91 30       	cpi	r25, 0x01	; 1
    4a10:	29 f4       	brne	.+10     	; 0x4a1c <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1844
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    4a12:	e8 2f       	mov	r30, r24
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	e7 53       	subi	r30, 0x37	; 55
    4a18:	ff 4c       	sbci	r31, 0xCF	; 207
    4a1a:	f3 cf       	rjmp	.-26     	; 0x4a02 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1845
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    4a1c:	92 30       	cpi	r25, 0x02	; 2
    4a1e:	91 f7       	brne	.-28     	; 0x4a04 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    4a20:	e8 2f       	mov	r30, r24
    4a22:	f0 e0       	ldi	r31, 0x00	; 0
    4a24:	e1 55       	subi	r30, 0x51	; 81
    4a26:	ff 4c       	sbci	r31, 0xCF	; 207
    4a28:	ec cf       	rjmp	.-40     	; 0x4a02 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>

00004a2a <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4a2a:	8a 30       	cpi	r24, 0x0A	; 10
    4a2c:	31 f0       	breq	.+12     	; 0x4a3a <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    4a2e:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
  if (args1 == 10) line1[0] = '.';
    4a30:	fa 01       	movw	r30, r20
    4a32:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
  line2[0] = 0;
    4a34:	f9 01       	movw	r30, r18
    4a36:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1835
}
    4a38:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4a3a:	8e e2       	ldi	r24, 0x2E	; 46
    4a3c:	f9 cf       	rjmp	.-14     	; 0x4a30 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x6>

00004a3e <get_function_keyboard_number_max_keys(unsigned char, unsigned char, unsigned char)>:
_Z37get_function_keyboard_number_max_keyshhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint8_t args1, uint8_t args2, uint8_t args3)
{
  return 11;
}
    4a3e:	8b e0       	ldi	r24, 0x0B	; 11
    4a40:	08 95       	ret

00004a42 <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	08 95       	ret

00004a46 <display_function_set_variable_plus()>:
_Z34display_function_set_variable_plusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1673
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args);
  }
}
void display_function_set_variable_plus(void)
{
  if ((menu_dialog_set_variable_now + menu_dialog_set_variable_step) <= menu_dialog_set_variable_max)
    4a46:	80 91 7c 08 	lds	r24, 0x087C	; 0x80087c <menu_dialog_set_variable_step>
    4a4a:	20 91 c9 08 	lds	r18, 0x08C9	; 0x8008c9 <menu_dialog_set_variable_now>
    4a4e:	30 91 ca 08 	lds	r19, 0x08CA	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    4a52:	82 0f       	add	r24, r18
    4a54:	93 2f       	mov	r25, r19
    4a56:	91 1d       	adc	r25, r1
    4a58:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <menu_dialog_set_variable_max>
    4a5c:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <menu_dialog_set_variable_max+0x1>
    4a60:	28 17       	cp	r18, r24
    4a62:	39 07       	cpc	r19, r25
    4a64:	84 f0       	brlt	.+32     	; 0x4a86 <display_function_set_variable_plus()+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1675
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
    4a66:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    4a6a:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1676
    if (menu_dialog_set_variable_update_now == H_TRUE)
    4a6e:	20 91 7a 08 	lds	r18, 0x087A	; 0x80087a <menu_dialog_set_variable_update_now>
    4a72:	21 30       	cpi	r18, 0x01	; 1
    4a74:	41 f4       	brne	.+16     	; 0x4a86 <display_function_set_variable_plus()+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args);
    4a76:	60 91 7b 08 	lds	r22, 0x087B	; 0x80087b <menu_dialog_set_variable_args>
    4a7a:	70 e0       	ldi	r23, 0x00	; 0
    4a7c:	e0 91 f9 08 	lds	r30, 0x08F9	; 0x8008f9 <dialog_save_variable_function>
    4a80:	f0 91 fa 08 	lds	r31, 0x08FA	; 0x8008fa <dialog_save_variable_function+0x1>
    4a84:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
  }
}
    4a86:	08 95       	ret

00004a88 <display_function_set_variable_minus()>:
_Z35display_function_set_variable_minusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1664
  return menu_dialog_set_variable_now;
}

void display_function_set_variable_minus(void)
{
  if (menu_dialog_set_variable_now - menu_dialog_set_variable_step >= menu_dialog_set_variable_min)
    4a88:	20 91 7c 08 	lds	r18, 0x087C	; 0x80087c <menu_dialog_set_variable_step>
    4a8c:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <menu_dialog_set_variable_now>
    4a90:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    4a94:	82 1b       	sub	r24, r18
    4a96:	91 09       	sbc	r25, r1
    4a98:	20 91 7f 08 	lds	r18, 0x087F	; 0x80087f <menu_dialog_set_variable_min>
    4a9c:	30 91 80 08 	lds	r19, 0x0880	; 0x800880 <menu_dialog_set_variable_min+0x1>
    4aa0:	82 17       	cp	r24, r18
    4aa2:	93 07       	cpc	r25, r19
    4aa4:	84 f0       	brlt	.+32     	; 0x4ac6 <display_function_set_variable_minus()+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now - menu_dialog_set_variable_step;
    4aa6:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    4aaa:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1667
    if (menu_dialog_set_variable_update_now == H_TRUE)
    4aae:	20 91 7a 08 	lds	r18, 0x087A	; 0x80087a <menu_dialog_set_variable_update_now>
    4ab2:	21 30       	cpi	r18, 0x01	; 1
    4ab4:	41 f4       	brne	.+16     	; 0x4ac6 <display_function_set_variable_minus()+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args);
    4ab6:	60 91 7b 08 	lds	r22, 0x087B	; 0x80087b <menu_dialog_set_variable_args>
    4aba:	70 e0       	ldi	r23, 0x00	; 0
    4abc:	e0 91 f9 08 	lds	r30, 0x08F9	; 0x8008f9 <dialog_save_variable_function>
    4ac0:	f0 91 fa 08 	lds	r31, 0x08FA	; 0x8008fa <dialog_save_variable_function+0x1>
    4ac4:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
  }
}
    4ac6:	08 95       	ret

00004ac8 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1592
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    4ac8:	ff 92       	push	r15
    4aca:	0f 93       	push	r16
    4acc:	1f 93       	push	r17
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1597
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4ad4:	20 91 8c 08 	lds	r18, 0x088C	; 0x80088c <MenuHistoryIndex>
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1594
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	68 ec       	ldi	r22, 0xC8	; 200
    4ade:	75 e0       	ldi	r23, 0x05	; 5
    4ae0:	c2 e6       	ldi	r28, 0x62	; 98
    4ae2:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1597
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4ae4:	89 01       	movw	r16, r18
    4ae6:	0e 57       	subi	r16, 0x7E	; 126
    4ae8:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1594
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4aea:	fb 01       	movw	r30, r22
    4aec:	84 91       	lpm	r24, Z
    4aee:	98 17       	cp	r25, r24
    4af0:	e8 f4       	brcc	.+58     	; 0x4b2c <MenuHistoryGetMenu(unsigned char*)+0x64>
    4af2:	9c 9f       	mul	r25, r28
    4af4:	a0 01       	movw	r20, r0
    4af6:	9d 9f       	mul	r25, r29
    4af8:	50 0d       	add	r21, r0
    4afa:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1597
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4afc:	fa 01       	movw	r30, r20
    4afe:	e8 5e       	subi	r30, 0xE8	; 232
    4b00:	f7 4f       	sbci	r31, 0xF7	; 247
    4b02:	f4 90       	lpm	r15, Z
    4b04:	f8 01       	movw	r30, r16
    4b06:	80 81       	ld	r24, Z
    4b08:	8f 11       	cpse	r24, r15
    4b0a:	0e c0       	rjmp	.+28     	; 0x4b28 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1596
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    4b0c:	45 53       	subi	r20, 0x35	; 53
    4b0e:	5a 4f       	sbci	r21, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1618
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    4b10:	20 59       	subi	r18, 0x90	; 144
    4b12:	37 4f       	sbci	r19, 0xF7	; 247
    4b14:	f9 01       	movw	r30, r18
    4b16:	20 81       	ld	r18, Z
    4b18:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1624
      return menus;
    }
  }


}
    4b1a:	ca 01       	movw	r24, r20
    4b1c:	df 91       	pop	r29
    4b1e:	cf 91       	pop	r28
    4b20:	1f 91       	pop	r17
    4b22:	0f 91       	pop	r16
    4b24:	ff 90       	pop	r15
    4b26:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1594
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4b28:	9f 5f       	subi	r25, 0xFF	; 255
    4b2a:	df cf       	rjmp	.-66     	; 0x4aea <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1603
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	69 ec       	ldi	r22, 0xC9	; 201
    4b30:	75 e0       	ldi	r23, 0x05	; 5
    4b32:	c2 e6       	ldi	r28, 0x62	; 98
    4b34:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1606
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4b36:	89 01       	movw	r16, r18
    4b38:	0e 57       	subi	r16, 0x7E	; 126
    4b3a:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1603
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4b3c:	fb 01       	movw	r30, r22
    4b3e:	84 91       	lpm	r24, Z
    4b40:	98 17       	cp	r25, r24
    4b42:	90 f4       	brcc	.+36     	; 0x4b68 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    4b44:	9c 9f       	mul	r25, r28
    4b46:	a0 01       	movw	r20, r0
    4b48:	9d 9f       	mul	r25, r29
    4b4a:	50 0d       	add	r21, r0
    4b4c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1606
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4b4e:	fa 01       	movw	r30, r20
    4b50:	ec 59       	subi	r30, 0x9C	; 156
    4b52:	f9 4e       	sbci	r31, 0xE9	; 233
    4b54:	f4 90       	lpm	r15, Z
    4b56:	f8 01       	movw	r30, r16
    4b58:	80 81       	ld	r24, Z
    4b5a:	8f 11       	cpse	r24, r15
    4b5c:	03 c0       	rjmp	.+6      	; 0x4b64 <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1605
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    4b5e:	49 5e       	subi	r20, 0xE9	; 233
    4b60:	5b 4e       	sbci	r21, 0xEB	; 235
    4b62:	d6 cf       	rjmp	.-84     	; 0x4b10 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1603
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4b64:	9f 5f       	subi	r25, 0xFF	; 255
    4b66:	ea cf       	rjmp	.-44     	; 0x4b3c <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1613
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	6a ec       	ldi	r22, 0xCA	; 202
    4b6c:	75 e0       	ldi	r23, 0x05	; 5
    4b6e:	c2 e6       	ldi	r28, 0x62	; 98
    4b70:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1616
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4b72:	89 01       	movw	r16, r18
    4b74:	0e 57       	subi	r16, 0x7E	; 126
    4b76:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1613
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4b78:	fb 01       	movw	r30, r22
    4b7a:	84 91       	lpm	r24, Z
    4b7c:	98 17       	cp	r25, r24
    4b7e:	68 f6       	brcc	.-102    	; 0x4b1a <MenuHistoryGetMenu(unsigned char*)+0x52>
    4b80:	9c 9f       	mul	r25, r28
    4b82:	a0 01       	movw	r20, r0
    4b84:	9d 9f       	mul	r25, r29
    4b86:	50 0d       	add	r21, r0
    4b88:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1616
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4b8a:	fa 01       	movw	r30, r20
    4b8c:	e0 55       	subi	r30, 0x50	; 80
    4b8e:	fb 4d       	sbci	r31, 0xDB	; 219
    4b90:	f4 90       	lpm	r15, Z
    4b92:	f8 01       	movw	r30, r16
    4b94:	80 81       	ld	r24, Z
    4b96:	8f 11       	cpse	r24, r15
    4b98:	03 c0       	rjmp	.+6      	; 0x4ba0 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1615
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    4b9a:	4d 59       	subi	r20, 0x9D	; 157
    4b9c:	5d 4d       	sbci	r21, 0xDD	; 221
    4b9e:	b8 cf       	rjmp	.-144    	; 0x4b10 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1613
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4ba0:	9f 5f       	subi	r25, 0xFF	; 255
    4ba2:	ea cf       	rjmp	.-44     	; 0x4b78 <MenuHistoryGetMenu(unsigned char*)+0xb0>

00004ba4 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1036




bool enable_redraw(uint8_t mask, uint8_t data)
{
    4ba4:	30 e0       	ldi	r19, 0x00	; 0
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    4ba8:	e1 e0       	ldi	r30, 0x01	; 1
    4baa:	f0 e0       	ldi	r31, 0x00	; 0
    4bac:	af 01       	movw	r20, r30
    4bae:	02 2e       	mov	r0, r18
    4bb0:	01 c0       	rjmp	.+2      	; 0x4bb4 <enable_redraw(unsigned char, unsigned char)+0x10>
    4bb2:	44 0f       	add	r20, r20
    4bb4:	0a 94       	dec	r0
    4bb6:	ea f7       	brpl	.-6      	; 0x4bb2 <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1041
    if ( (mask & v) != 0 )
    4bb8:	98 2f       	mov	r25, r24
    4bba:	94 23       	and	r25, r20
    4bbc:	11 f0       	breq	.+4      	; 0x4bc2 <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1042
      if ( (data & v) != 0)
    4bbe:	46 23       	and	r20, r22
    4bc0:	39 f4       	brne	.+14     	; 0x4bd0 <enable_redraw(unsigned char, unsigned char)+0x2c>
    4bc2:	2f 5f       	subi	r18, 0xFF	; 255
    4bc4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1038


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    4bc6:	28 30       	cpi	r18, 0x08	; 8
    4bc8:	31 05       	cpc	r19, r1
    4bca:	81 f7       	brne	.-32     	; 0x4bac <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1044
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1049
        break;
      }
  }
  return ret;
}
    4bd2:	08 95       	ret

00004bd4 <display_enable_show(unsigned char, unsigned char)>:
_Z19display_enable_showhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1024
  return 0;
}
uint8_t display_enable_show(uint8_t args1, uint8_t args2)
{
  return 1;
}
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	08 95       	ret

00004bd8 <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1020
void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2)
{
  return 0;
}
    4bd8:	80 e0       	ldi	r24, 0x00	; 0
    4bda:	08 95       	ret

00004bdc <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1015





void nullfce(void) {};
    4bdc:	08 95       	ret

00004bde <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    4bde:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    4be0:	86 81       	ldd	r24, Z+6	; 0x06
    4be2:	97 81       	ldd	r25, Z+7	; 0x07
    4be4:	68 0f       	add	r22, r24
    4be6:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4be8:	24 81       	ldd	r18, Z+4	; 0x04
    4bea:	35 81       	ldd	r19, Z+5	; 0x05
    4bec:	26 17       	cp	r18, r22
    4bee:	37 07       	cpc	r19, r23
    4bf0:	38 f0       	brcs	.+14     	; 0x4c00 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    4bf2:	22 81       	ldd	r18, Z+2	; 0x02
    4bf4:	33 81       	ldd	r19, Z+3	; 0x03
    4bf6:	82 0f       	add	r24, r18
    4bf8:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    4bfa:	77 83       	std	Z+7, r23	; 0x07
    4bfc:	66 83       	std	Z+6, r22	; 0x06
    4bfe:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    4c04:	08 95       	ret

00004c06 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    4c06:	0f 93       	push	r16
    4c08:	1f 93       	push	r17
    4c0a:	cf 93       	push	r28
    4c0c:	df 93       	push	r29
    4c0e:	1f 92       	push	r1
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    4c16:	dc 01       	movw	r26, r24
    4c18:	ed 91       	ld	r30, X+
    4c1a:	fc 91       	ld	r31, X
    4c1c:	00 84       	ldd	r0, Z+8	; 0x08
    4c1e:	f1 85       	ldd	r31, Z+9	; 0x09
    4c20:	e0 2d       	mov	r30, r0
    4c22:	19 95       	eicall
    4c24:	89 2b       	or	r24, r25
    4c26:	91 f0       	breq	.+36     	; 0x4c4c <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    4c28:	21 e0       	ldi	r18, 0x01	; 1
    4c2a:	41 e0       	ldi	r20, 0x01	; 1
    4c2c:	50 e0       	ldi	r21, 0x00	; 0
    4c2e:	be 01       	movw	r22, r28
    4c30:	6f 5f       	subi	r22, 0xFF	; 255
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	f8 01       	movw	r30, r16
    4c36:	84 85       	ldd	r24, Z+12	; 0x0c
    4c38:	0e 94 6a 96 	call	0x12cd4	; 0x12cd4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    4c3c:	89 81       	ldd	r24, Y+1	; 0x01
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    4c40:	0f 90       	pop	r0
    4c42:	df 91       	pop	r29
    4c44:	cf 91       	pop	r28
    4c46:	1f 91       	pop	r17
    4c48:	0f 91       	pop	r16
    4c4a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    4c4c:	8f ef       	ldi	r24, 0xFF	; 255
    4c4e:	9f ef       	ldi	r25, 0xFF	; 255
    4c50:	f7 cf       	rjmp	.-18     	; 0x4c40 <EthernetClient::peek()+0x3a>

00004c52 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    4c52:	fc 01       	movw	r30, r24
    4c54:	84 85       	ldd	r24, Z+12	; 0x0c
    4c56:	0c 94 d0 96 	jmp	0x12da0	; 0x12da0 <recv(unsigned char, unsigned char*, int)>

00004c5a <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    4c5a:	cf 93       	push	r28
    4c5c:	df 93       	push	r29
    4c5e:	1f 92       	push	r1
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    4c64:	41 e0       	ldi	r20, 0x01	; 1
    4c66:	50 e0       	ldi	r21, 0x00	; 0
    4c68:	be 01       	movw	r22, r28
    4c6a:	6f 5f       	subi	r22, 0xFF	; 255
    4c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6e:	fc 01       	movw	r30, r24
    4c70:	84 85       	ldd	r24, Z+12	; 0x0c
    4c72:	0e 94 d0 96 	call	0x12da0	; 0x12da0 <recv(unsigned char, unsigned char*, int)>
    4c76:	18 16       	cp	r1, r24
    4c78:	19 06       	cpc	r1, r25
    4c7a:	34 f4       	brge	.+12     	; 0x4c88 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    4c80:	0f 90       	pop	r0
    4c82:	df 91       	pop	r29
    4c84:	cf 91       	pop	r28
    4c86:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    4c88:	8f ef       	ldi	r24, 0xFF	; 255
    4c8a:	9f ef       	ldi	r25, 0xFF	; 255
    4c8c:	f9 cf       	rjmp	.-14     	; 0x4c80 <EthernetClient::read()+0x26>

00004c8e <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    4c8e:	fc 01       	movw	r30, r24
    4c90:	84 85       	ldd	r24, Z+12	; 0x0c
    4c92:	88 30       	cpi	r24, 0x08	; 8
    4c94:	11 f0       	breq	.+4      	; 0x4c9a <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    4c96:	0c 94 b9 86 	jmp	0x10d72	; 0x10d72 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	80 e0       	ldi	r24, 0x00	; 0
    4c9e:	08 95       	ret

00004ca0 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    4ca4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    4caa:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb2:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    4cb6:	61 e0       	ldi	r22, 0x01	; 1
    4cb8:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    4cba:	df 91       	pop	r29
    4cbc:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    4cbe:	0c 94 99 88 	jmp	0x11132	; 0x11132 <pinMode>

00004cc2 <get_function_budik_text_state(unsigned char, unsigned char, char*)>:
_Z29get_function_budik_text_statehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, char *text)
{
    4cc2:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
  strcpy(text, "Zapnuto 06:45");
    4cc4:	63 ef       	ldi	r22, 0xF3	; 243
    4cc6:	72 e0       	ldi	r23, 0x02	; 2
    4cc8:	0c 94 8d b4 	jmp	0x1691a	; 0x1691a <strcpy>

00004ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.33():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    4ccc:	0f 93       	push	r16
    4cce:	1f 93       	push	r17
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    4cd4:	00 97       	sbiw	r24, 0x00	; 0
    4cd6:	01 f1       	breq	.+64     	; 0x4d18 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x4c>
    4cd8:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    4cda:	fc 01       	movw	r30, r24
    4cdc:	c0 81       	ld	r28, Z
    4cde:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    4ce0:	20 97       	sbiw	r28, 0x00	; 0
    4ce2:	d1 f0       	breq	.+52     	; 0x4d18 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    4ce4:	6a 85       	ldd	r22, Y+10	; 0x0a
    4ce6:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    4ce8:	01 15       	cp	r16, r1
    4cea:	11 05       	cpc	r17, r1
    4cec:	19 f0       	breq	.+6      	; 0x4cf4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x28>
    4cee:	61 15       	cp	r22, r1
    4cf0:	71 05       	cpc	r23, r1
    4cf2:	49 f4       	brne	.+18     	; 0x4d06 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x3a>
    4cf4:	06 17       	cp	r16, r22
    4cf6:	17 07       	cpc	r17, r23
    4cf8:	59 f4       	brne	.+22     	; 0x4d10 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.33():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	1f 91       	pop	r17
    4d02:	0f 91       	pop	r16
    4d04:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    4d06:	c8 01       	movw	r24, r16
    4d08:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    4d0c:	89 2b       	or	r24, r25
    4d0e:	a9 f3       	breq	.-22     	; 0x4cfa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.33():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    4d10:	0e 80       	ldd	r0, Y+6	; 0x06
    4d12:	df 81       	ldd	r29, Y+7	; 0x07
    4d14:	c0 2d       	mov	r28, r0
    4d16:	e4 cf       	rjmp	.-56     	; 0x4ce0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    4d18:	d0 e0       	ldi	r29, 0x00	; 0
    4d1a:	c0 e0       	ldi	r28, 0x00	; 0
    4d1c:	ee cf       	rjmp	.-36     	; 0x4cfa <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]+0x2e>

00004d1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    4d1e:	4f 92       	push	r4
    4d20:	5f 92       	push	r5
    4d22:	6f 92       	push	r6
    4d24:	7f 92       	push	r7
    4d26:	8f 92       	push	r8
    4d28:	9f 92       	push	r9
    4d2a:	af 92       	push	r10
    4d2c:	bf 92       	push	r11
    4d2e:	df 92       	push	r13
    4d30:	ef 92       	push	r14
    4d32:	ff 92       	push	r15
    4d34:	0f 93       	push	r16
    4d36:	1f 93       	push	r17
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	c4 54       	subi	r28, 0x44	; 68
    4d42:	d1 09       	sbc	r29, r1
    4d44:	0f b6       	in	r0, 0x3f	; 63
    4d46:	f8 94       	cli
    4d48:	de bf       	out	0x3e, r29	; 62
    4d4a:	0f be       	out	0x3f, r0	; 63
    4d4c:	cd bf       	out	0x3d, r28	; 61
    4d4e:	8c 01       	movw	r16, r24
    4d50:	4a 01       	movw	r8, r20
    4d52:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    4d54:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    4d58:	00 97       	sbiw	r24, 0x00	; 0
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    4d5c:	b0 c0       	rjmp	.+352    	; 0x4ebe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    4d5e:	c8 01       	movw	r24, r16
    4d60:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4d64:	75 01       	movw	r14, r10
    4d66:	8b 35       	cpi	r24, 0x5B	; 91
    4d68:	49 f1       	breq	.+82     	; 0x4dbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    4d6a:	8b 37       	cpi	r24, 0x7B	; 123
    4d6c:	09 f4       	brne	.+2      	; 0x4d70 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    4d6e:	d2 c0       	rjmp	.+420    	; 0x4f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    4d70:	c8 01       	movw	r24, r16
    4d72:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    4d76:	87 32       	cpi	r24, 0x27	; 39
    4d78:	09 f4       	brne	.+2      	; 0x4d7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    4d7a:	eb c1       	rjmp	.+982    	; 0x5152 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    4d7c:	82 32       	cpi	r24, 0x22	; 34
    4d7e:	09 f4       	brne	.+2      	; 0x4d82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    4d80:	e8 c1       	rjmp	.+976    	; 0x5152 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    4d82:	c8 01       	movw	r24, r16
    4d84:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4d88:	b8 2e       	mov	r11, r24
    4d8a:	ce 01       	movw	r24, r28
    4d8c:	01 96       	adiw	r24, 0x01	; 1
    4d8e:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    4d90:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    4d92:	8b 2d       	mov	r24, r11
    4d94:	0e 94 63 23 	call	0x46c6	; 0x46c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4d98:	88 23       	and	r24, r24
    4d9a:	09 f4       	brne	.+2      	; 0x4d9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    4d9c:	f5 c1       	rjmp	.+1002   	; 0x5188 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    4d9e:	bf e3       	ldi	r27, 0x3F	; 63
    4da0:	db 16       	cp	r13, r27
    4da2:	09 f4       	brne	.+2      	; 0x4da6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    4da4:	f1 c1       	rjmp	.+994    	; 0x5188 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4da6:	f8 01       	movw	r30, r16
    4da8:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    4daa:	d3 94       	inc	r13
    4dac:	d4 01       	movw	r26, r8
    4dae:	bd 92       	st	X+, r11
    4db0:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    4db2:	c8 01       	movw	r24, r16
    4db4:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4db8:	b8 2e       	mov	r11, r24
    4dba:	eb cf       	rjmp	.-42     	; 0x4d92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    4dbc:	d8 01       	movw	r26, r16
    4dbe:	16 96       	adiw	r26, 0x06	; 6
    4dc0:	8c 91       	ld	r24, X
    4dc2:	88 23       	and	r24, r24
    4dc4:	09 f4       	brne	.+2      	; 0x4dc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    4dc6:	c1 c1       	rjmp	.+898    	; 0x514a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    4dc8:	a1 14       	cp	r10, r1
    4dca:	b1 04       	cpc	r11, r1
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    4dce:	2d c1       	rjmp	.+602    	; 0x502a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    4dd0:	88 e0       	ldi	r24, 0x08	; 8
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	f5 01       	movw	r30, r10
    4dd6:	91 83       	std	Z+1, r25	; 0x01
    4dd8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    4dda:	13 82       	std	Z+3, r1	; 0x03
    4ddc:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    4dde:	15 82       	std	Z+5, r1	; 0x05
    4de0:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4de2:	c8 01       	movw	r24, r16
    4de4:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4de8:	8b 35       	cpi	r24, 0x5B	; 91
    4dea:	09 f0       	breq	.+2      	; 0x4dee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    4dec:	ef c0       	rjmp	.+478    	; 0x4fcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4dee:	d8 01       	movw	r26, r16
    4df0:	18 96       	adiw	r26, 0x08	; 8
    4df2:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    4df4:	c8 01       	movw	r24, r16
    4df6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4dfa:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    4dfc:	89 2b       	or	r24, r25
    4dfe:	09 f0       	breq	.+2      	; 0x4e02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    4e00:	5d c0       	rjmp	.+186    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4e02:	c8 01       	movw	r24, r16
    4e04:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4e08:	8d 35       	cpi	r24, 0x5D	; 93
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    4e0c:	55 c0       	rjmp	.+170    	; 0x4eb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    4e0e:	8c e0       	ldi	r24, 0x0C	; 12
    4e10:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    4e12:	d4 01       	movw	r26, r8
    4e14:	ed 91       	ld	r30, X+
    4e16:	fc 91       	ld	r31, X
    4e18:	01 90       	ld	r0, Z+
    4e1a:	f0 81       	ld	r31, Z
    4e1c:	e0 2d       	mov	r30, r0
    4e1e:	6c e0       	ldi	r22, 0x0C	; 12
    4e20:	70 e0       	ldi	r23, 0x00	; 0
    4e22:	c4 01       	movw	r24, r8
    4e24:	19 95       	eicall
    4e26:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    4e28:	00 97       	sbiw	r24, 0x00	; 0
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    4e2c:	64 c0       	rjmp	.+200    	; 0x4ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    4e2e:	dc 01       	movw	r26, r24
    4e30:	2d 2d       	mov	r18, r13
    4e32:	1d 92       	st	X+, r1
    4e34:	2a 95       	dec	r18
    4e36:	e9 f7       	brne	.-6      	; 0x4e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    4e38:	11 82       	std	Z+1, r1	; 0x01
    4e3a:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    4e3c:	d7 01       	movw	r26, r14
    4e3e:	14 96       	adiw	r26, 0x04	; 4
    4e40:	8d 91       	ld	r24, X+
    4e42:	9c 91       	ld	r25, X
    4e44:	15 97       	sbiw	r26, 0x05	; 5
    4e46:	00 97       	sbiw	r24, 0x00	; 0
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    4e4a:	50 c0       	rjmp	.+160    	; 0x4eec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    4e4c:	91 87       	std	Z+9, r25	; 0x09
    4e4e:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    4e50:	14 96       	adiw	r26, 0x04	; 4
    4e52:	8d 91       	ld	r24, X+
    4e54:	9c 91       	ld	r25, X
    4e56:	dc 01       	movw	r26, r24
    4e58:	17 96       	adiw	r26, 0x07	; 7
    4e5a:	fc 93       	st	X, r31
    4e5c:	ee 93       	st	-X, r30
    4e5e:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    4e60:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    4e62:	15 96       	adiw	r26, 0x05	; 5
    4e64:	fc 93       	st	X, r31
    4e66:	ee 93       	st	-X, r30
    4e68:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    4e6a:	98 2d       	mov	r25, r8
    4e6c:	89 2d       	mov	r24, r9
    4e6e:	49 2e       	mov	r4, r25
    4e70:	58 2e       	mov	r5, r24
    4e72:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    4e74:	ef 2b       	or	r30, r31
    4e76:	09 f4       	brne	.+2      	; 0x4e7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    4e78:	d8 c0       	rjmp	.+432    	; 0x502a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    4e7a:	f8 01       	movw	r30, r16
    4e7c:	86 81       	ldd	r24, Z+6	; 0x06
    4e7e:	81 50       	subi	r24, 0x01	; 1
    4e80:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    4e82:	b3 01       	movw	r22, r6
    4e84:	a2 01       	movw	r20, r4
    4e86:	c8 01       	movw	r24, r16
    4e88:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    4e8c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    4e8e:	d8 01       	movw	r26, r16
    4e90:	16 96       	adiw	r26, 0x06	; 6
    4e92:	8c 91       	ld	r24, X
    4e94:	16 97       	sbiw	r26, 0x06	; 6
    4e96:	8f 5f       	subi	r24, 0xFF	; 255
    4e98:	16 96       	adiw	r26, 0x06	; 6
    4e9a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    4e9c:	a1 14       	cp	r10, r1
    4e9e:	b1 04       	cpc	r11, r1
    4ea0:	69 f4       	brne	.+26     	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    4ea2:	c8 01       	movw	r24, r16
    4ea4:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4ea8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    4eaa:	89 2b       	or	r24, r25
    4eac:	39 f4       	brne	.+14     	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4eae:	c8 01       	movw	r24, r16
    4eb0:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4eb4:	8d 35       	cpi	r24, 0x5D	; 93
    4eb6:	21 f5       	brne	.+72     	; 0x4f00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4eb8:	f8 01       	movw	r30, r16
    4eba:	10 86       	std	Z+8, r1	; 0x08
    4ebc:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    4ebe:	cc 5b       	subi	r28, 0xBC	; 188
    4ec0:	df 4f       	sbci	r29, 0xFF	; 255
    4ec2:	0f b6       	in	r0, 0x3f	; 63
    4ec4:	f8 94       	cli
    4ec6:	de bf       	out	0x3e, r29	; 62
    4ec8:	0f be       	out	0x3f, r0	; 63
    4eca:	cd bf       	out	0x3d, r28	; 61
    4ecc:	df 91       	pop	r29
    4ece:	cf 91       	pop	r28
    4ed0:	1f 91       	pop	r17
    4ed2:	0f 91       	pop	r16
    4ed4:	ff 90       	pop	r15
    4ed6:	ef 90       	pop	r14
    4ed8:	df 90       	pop	r13
    4eda:	bf 90       	pop	r11
    4edc:	af 90       	pop	r10
    4ede:	9f 90       	pop	r9
    4ee0:	8f 90       	pop	r8
    4ee2:	7f 90       	pop	r7
    4ee4:	6f 90       	pop	r6
    4ee6:	5f 90       	pop	r5
    4ee8:	4f 90       	pop	r4
    4eea:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    4eec:	13 96       	adiw	r26, 0x03	; 3
    4eee:	fc 93       	st	X, r31
    4ef0:	ee 93       	st	-X, r30
    4ef2:	12 97       	sbiw	r26, 0x02	; 2
    4ef4:	b6 cf       	rjmp	.-148    	; 0x4e62 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	e0 e0       	ldi	r30, 0x00	; 0
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	80 e0       	ldi	r24, 0x00	; 0
    4efe:	b7 cf       	rjmp	.-146    	; 0x4e6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4f00:	c8 01       	movw	r24, r16
    4f02:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f06:	8c 32       	cpi	r24, 0x2C	; 44
    4f08:	09 f0       	breq	.+2      	; 0x4f0c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    4f0a:	60 c0       	rjmp	.+192    	; 0x4fcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4f0c:	d8 01       	movw	r26, r16
    4f0e:	18 96       	adiw	r26, 0x08	; 8
    4f10:	1c 92       	st	X, r1
    4f12:	7f cf       	rjmp	.-258    	; 0x4e12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    4f14:	f8 01       	movw	r30, r16
    4f16:	86 81       	ldd	r24, Z+6	; 0x06
    4f18:	88 23       	and	r24, r24
    4f1a:	09 f4       	brne	.+2      	; 0x4f1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    4f1c:	16 c1       	rjmp	.+556    	; 0x514a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    4f1e:	a1 14       	cp	r10, r1
    4f20:	b1 04       	cpc	r11, r1
    4f22:	09 f4       	brne	.+2      	; 0x4f26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    4f24:	82 c0       	rjmp	.+260    	; 0x502a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    4f26:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    4f28:	89 e0       	ldi	r24, 0x09	; 9
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	d5 01       	movw	r26, r10
    4f2e:	11 96       	adiw	r26, 0x01	; 1
    4f30:	9c 93       	st	X, r25
    4f32:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    4f34:	13 96       	adiw	r26, 0x03	; 3
    4f36:	1c 92       	st	X, r1
    4f38:	1e 92       	st	-X, r1
    4f3a:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    4f3c:	15 96       	adiw	r26, 0x05	; 5
    4f3e:	1c 92       	st	X, r1
    4f40:	1e 92       	st	-X, r1
    4f42:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    4f44:	45 01       	movw	r8, r10
    4f46:	b2 e0       	ldi	r27, 0x02	; 2
    4f48:	8b 0e       	add	r8, r27
    4f4a:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4f4c:	c8 01       	movw	r24, r16
    4f4e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f52:	8b 37       	cpi	r24, 0x7B	; 123
    4f54:	d9 f5       	brne	.+118    	; 0x4fcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4f56:	f8 01       	movw	r30, r16
    4f58:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    4f5a:	c8 01       	movw	r24, r16
    4f5c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4f60:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    4f62:	89 2b       	or	r24, r25
    4f64:	09 f0       	breq	.+2      	; 0x4f68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    4f66:	aa cf       	rjmp	.-172    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4f68:	c8 01       	movw	r24, r16
    4f6a:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f6e:	8d 37       	cpi	r24, 0x7D	; 125
    4f70:	09 f4       	brne	.+2      	; 0x4f74 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    4f72:	9c c0       	rjmp	.+312    	; 0x50ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    4f74:	bc e0       	ldi	r27, 0x0C	; 12
    4f76:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    4f78:	c8 01       	movw	r24, r16
    4f7a:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    4f7e:	87 32       	cpi	r24, 0x27	; 39
    4f80:	79 f0       	breq	.+30     	; 0x4fa0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    4f82:	82 32       	cpi	r24, 0x22	; 34
    4f84:	69 f0       	breq	.+26     	; 0x4fa0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    4f86:	f8 01       	movw	r30, r16
    4f88:	a4 80       	ldd	r10, Z+4	; 0x04
    4f8a:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    4f8c:	c8 01       	movw	r24, r16
    4f8e:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f92:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    4f94:	81 11       	cpse	r24, r1
    4f96:	1e c0       	rjmp	.+60     	; 0x4fd4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    4f98:	aa 24       	eor	r10, r10
    4f9a:	a3 94       	inc	r10
    4f9c:	b1 2c       	mov	r11, r1
    4f9e:	8e cf       	rjmp	.-228    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    4fa0:	be 01       	movw	r22, r28
    4fa2:	6f 5f       	subi	r22, 0xFF	; 255
    4fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa6:	c8 01       	movw	r24, r16
    4fa8:	0e 94 8b 23 	call	0x4716	; 0x4716 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    4fac:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    4fae:	89 2b       	or	r24, r25
    4fb0:	09 f0       	breq	.+2      	; 0x4fb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    4fb2:	84 cf       	rjmp	.-248    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    4fb4:	c8 01       	movw	r24, r16
    4fb6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4fba:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    4fbc:	89 2b       	or	r24, r25
    4fbe:	09 f0       	breq	.+2      	; 0x4fc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    4fc0:	7d cf       	rjmp	.-262    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4fc2:	c8 01       	movw	r24, r16
    4fc4:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4fc8:	8a 33       	cpi	r24, 0x3A	; 58
    4fca:	99 f1       	breq	.+102    	; 0x5032 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    4fcc:	72 e0       	ldi	r23, 0x02	; 2
    4fce:	a7 2e       	mov	r10, r23
    4fd0:	b1 2c       	mov	r11, r1
    4fd2:	74 cf       	rjmp	.-280    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    4fd4:	0e 94 63 23 	call	0x46c6	; 0x46c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4fd8:	88 23       	and	r24, r24
    4fda:	c1 f3       	breq	.-16     	; 0x4fcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4fdc:	d8 01       	movw	r26, r16
    4fde:	18 96       	adiw	r26, 0x08	; 8
    4fe0:	1c 92       	st	X, r1
    4fe2:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    4fe4:	14 96       	adiw	r26, 0x04	; 4
    4fe6:	ed 91       	ld	r30, X+
    4fe8:	fc 91       	ld	r31, X
    4fea:	15 97       	sbiw	r26, 0x05	; 5
    4fec:	cf 01       	movw	r24, r30
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	15 96       	adiw	r26, 0x05	; 5
    4ff2:	9c 93       	st	X, r25
    4ff4:	8e 93       	st	-X, r24
    4ff6:	14 97       	sbiw	r26, 0x04	; 4
    4ff8:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    4ffa:	c8 01       	movw	r24, r16
    4ffc:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5000:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    5002:	0e 94 63 23 	call	0x46c6	; 0x46c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5006:	81 11       	cpse	r24, r1
    5008:	e9 cf       	rjmp	.-46     	; 0x4fdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    500a:	d8 01       	movw	r26, r16
    500c:	14 96       	adiw	r26, 0x04	; 4
    500e:	ed 91       	ld	r30, X+
    5010:	fc 91       	ld	r31, X
    5012:	15 97       	sbiw	r26, 0x05	; 5
    5014:	cf 01       	movw	r24, r30
    5016:	01 96       	adiw	r24, 0x01	; 1
    5018:	15 96       	adiw	r26, 0x05	; 5
    501a:	9c 93       	st	X, r25
    501c:	8e 93       	st	-X, r24
    501e:	14 97       	sbiw	r26, 0x04	; 4
    5020:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    5022:	ba 82       	std	Y+2, r11	; 0x02
    5024:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    5026:	ab 28       	or	r10, r11
    5028:	29 f6       	brne	.-118    	; 0x4fb4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    502a:	e3 e0       	ldi	r30, 0x03	; 3
    502c:	ae 2e       	mov	r10, r30
    502e:	b1 2c       	mov	r11, r1
    5030:	45 cf       	rjmp	.-374    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5032:	f8 01       	movw	r30, r16
    5034:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    5036:	a9 80       	ldd	r10, Y+1	; 0x01
    5038:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    503a:	a1 14       	cp	r10, r1
    503c:	b1 04       	cpc	r11, r1
    503e:	d1 f5       	brne	.+116    	; 0x50b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    5048:	22 96       	adiw	r28, 0x02	; 2
    504a:	3f af       	std	Y+63, r19	; 0x3f
    504c:	22 97       	sbiw	r28, 0x02	; 2
    504e:	23 96       	adiw	r28, 0x03	; 3
    5050:	2f af       	std	Y+63, r18	; 0x3f
    5052:	23 97       	sbiw	r28, 0x03	; 3
    5054:	25 96       	adiw	r28, 0x05	; 5
    5056:	9f af       	std	Y+63, r25	; 0x3f
    5058:	8e af       	std	Y+62, r24	; 0x3e
    505a:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    505c:	89 2b       	or	r24, r25
    505e:	29 f3       	breq	.-54     	; 0x502a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    5060:	d8 01       	movw	r26, r16
    5062:	16 96       	adiw	r26, 0x06	; 6
    5064:	8c 91       	ld	r24, X
    5066:	16 97       	sbiw	r26, 0x06	; 6
    5068:	81 50       	subi	r24, 0x01	; 1
    506a:	16 96       	adiw	r26, 0x06	; 6
    506c:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    506e:	25 96       	adiw	r28, 0x05	; 5
    5070:	4c ad       	ldd	r20, Y+60	; 0x3c
    5072:	5d ad       	ldd	r21, Y+61	; 0x3d
    5074:	6e ad       	ldd	r22, Y+62	; 0x3e
    5076:	7f ad       	ldd	r23, Y+63	; 0x3f
    5078:	25 97       	sbiw	r28, 0x05	; 5
    507a:	c8 01       	movw	r24, r16
    507c:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5080:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    5082:	f8 01       	movw	r30, r16
    5084:	86 81       	ldd	r24, Z+6	; 0x06
    5086:	8f 5f       	subi	r24, 0xFF	; 255
    5088:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    508a:	a1 14       	cp	r10, r1
    508c:	b1 04       	cpc	r11, r1
    508e:	09 f0       	breq	.+2      	; 0x5092 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    5090:	15 cf       	rjmp	.-470    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    5092:	c8 01       	movw	r24, r16
    5094:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5098:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    509a:	89 2b       	or	r24, r25
    509c:	09 f0       	breq	.+2      	; 0x50a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    509e:	0e cf       	rjmp	.-484    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    50a0:	c8 01       	movw	r24, r16
    50a2:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50a6:	8d 37       	cpi	r24, 0x7D	; 125
    50a8:	09 f0       	breq	.+2      	; 0x50ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    50aa:	3f c0       	rjmp	.+126    	; 0x512a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    50ac:	d8 01       	movw	r26, r16
    50ae:	18 96       	adiw	r26, 0x08	; 8
    50b0:	1c 92       	st	X, r1
    50b2:	04 cf       	rjmp	.-504    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    50b4:	b5 01       	movw	r22, r10
    50b6:	c4 01       	movw	r24, r8
    50b8:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    50bc:	00 97       	sbiw	r24, 0x00	; 0
    50be:	49 f5       	brne	.+82     	; 0x5112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    50c0:	d3 01       	movw	r26, r6
    50c2:	ed 91       	ld	r30, X+
    50c4:	fc 91       	ld	r31, X
    50c6:	01 90       	ld	r0, Z+
    50c8:	f0 81       	ld	r31, Z
    50ca:	e0 2d       	mov	r30, r0
    50cc:	6c e0       	ldi	r22, 0x0C	; 12
    50ce:	70 e0       	ldi	r23, 0x00	; 0
    50d0:	c3 01       	movw	r24, r6
    50d2:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    50d4:	00 97       	sbiw	r24, 0x00	; 0
    50d6:	09 f4       	brne	.+2      	; 0x50da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    50d8:	b3 cf       	rjmp	.-154    	; 0x5040 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    50da:	fc 01       	movw	r30, r24
    50dc:	25 2d       	mov	r18, r5
    50de:	11 92       	st	Z+, r1
    50e0:	2a 95       	dec	r18
    50e2:	e9 f7       	brne	.-6      	; 0x50de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    50e4:	dc 01       	movw	r26, r24
    50e6:	1d 92       	st	X+, r1
    50e8:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    50ea:	d7 01       	movw	r26, r14
    50ec:	14 96       	adiw	r26, 0x04	; 4
    50ee:	ed 91       	ld	r30, X+
    50f0:	fc 91       	ld	r31, X
    50f2:	15 97       	sbiw	r26, 0x05	; 5
    50f4:	30 97       	sbiw	r30, 0x00	; 0
    50f6:	81 f0       	breq	.+32     	; 0x5118 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    50f8:	dc 01       	movw	r26, r24
    50fa:	19 96       	adiw	r26, 0x09	; 9
    50fc:	fc 93       	st	X, r31
    50fe:	ee 93       	st	-X, r30
    5100:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    5102:	97 83       	std	Z+7, r25	; 0x07
    5104:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    5106:	f7 01       	movw	r30, r14
    5108:	95 83       	std	Z+5, r25	; 0x05
    510a:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    510c:	fc 01       	movw	r30, r24
    510e:	b3 86       	std	Z+11, r11	; 0x0b
    5110:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    5112:	36 2d       	mov	r19, r6
    5114:	27 2d       	mov	r18, r7
    5116:	98 cf       	rjmp	.-208    	; 0x5048 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    5118:	13 96       	adiw	r26, 0x03	; 3
    511a:	9c 93       	st	X, r25
    511c:	8e 93       	st	-X, r24
    511e:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    5120:	15 96       	adiw	r26, 0x05	; 5
    5122:	9c 93       	st	X, r25
    5124:	8e 93       	st	-X, r24
    5126:	14 97       	sbiw	r26, 0x04	; 4
    5128:	f1 cf       	rjmp	.-30     	; 0x510c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    512a:	c8 01       	movw	r24, r16
    512c:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5130:	8c 32       	cpi	r24, 0x2C	; 44
    5132:	09 f0       	breq	.+2      	; 0x5136 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    5134:	4b cf       	rjmp	.-362    	; 0x4fcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5136:	f8 01       	movw	r30, r16
    5138:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    513a:	c8 01       	movw	r24, r16
    513c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5140:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    5142:	89 2b       	or	r24, r25
    5144:	09 f4       	brne	.+2      	; 0x5148 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    5146:	18 cf       	rjmp	.-464    	; 0x4f78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    5148:	b9 ce       	rjmp	.-654    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    514a:	f5 e0       	ldi	r31, 0x05	; 5
    514c:	af 2e       	mov	r10, r31
    514e:	b1 2c       	mov	r11, r1
    5150:	b5 ce       	rjmp	.-662    	; 0x4ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    5152:	be 01       	movw	r22, r28
    5154:	6f 5f       	subi	r22, 0xFF	; 255
    5156:	7f 4f       	sbci	r23, 0xFF	; 255
    5158:	c8 01       	movw	r24, r16
    515a:	0e 94 8b 23 	call	0x4716	; 0x4716 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	09 f0       	breq	.+2      	; 0x5164 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    5162:	ad ce       	rjmp	.-678    	; 0x4ebe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    5164:	e1 14       	cp	r14, r1
    5166:	f1 04       	cpc	r15, r1
    5168:	61 f0       	breq	.+24     	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    516a:	89 81       	ldd	r24, Y+1	; 0x01
    516c:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    516e:	23 e0       	ldi	r18, 0x03	; 3
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	d7 01       	movw	r26, r14
    5174:	11 96       	adiw	r26, 0x01	; 1
    5176:	3c 93       	st	X, r19
    5178:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    517a:	13 96       	adiw	r26, 0x03	; 3
    517c:	9c 93       	st	X, r25
    517e:	8e 93       	st	-X, r24
    5180:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	9b ce       	rjmp	.-714    	; 0x4ebe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    5188:	e1 e0       	ldi	r30, 0x01	; 1
    518a:	f0 e0       	ldi	r31, 0x00	; 0
    518c:	ec 0f       	add	r30, r28
    518e:	fd 1f       	adc	r31, r29
    5190:	ed 0d       	add	r30, r13
    5192:	f1 1d       	adc	r31, r1
    5194:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    5196:	19 81       	ldd	r17, Y+1	; 0x01
    5198:	11 23       	and	r17, r17
    519a:	09 f4       	brne	.+2      	; 0x519e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    519c:	51 c0       	rjmp	.+162    	; 0x5240 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    519e:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    51a0:	1d 32       	cpi	r17, 0x2D	; 45
    51a2:	71 f1       	breq	.+92     	; 0x5200 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    51a4:	1b 32       	cpi	r17, 0x2B	; 43
    51a6:	61 f1       	breq	.+88     	; 0x5200 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    51a8:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    51aa:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    51ac:	90 ed       	ldi	r25, 0xD0	; 208
    51ae:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    51b0:	9a 30       	cpi	r25, 0x0A	; 10
    51b2:	d8 f3       	brcs	.-10     	; 0x51aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    51b4:	81 11       	cpse	r24, r1
    51b6:	44 c0       	rjmp	.+136    	; 0x5240 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    51b8:	14 37       	cpi	r17, 0x74	; 116
    51ba:	09 f4       	brne	.+2      	; 0x51be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    51bc:	dd c1       	rjmp	.+954    	; 0x5578 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    51be:	1b 32       	cpi	r17, 0x2B	; 43
    51c0:	09 f1       	breq	.+66     	; 0x5204 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    51c2:	1d 32       	cpi	r17, 0x2D	; 45
    51c4:	19 f1       	breq	.+70     	; 0x520c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    51c6:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    51c8:	fe 01       	movw	r30, r28
    51ca:	31 96       	adiw	r30, 0x01	; 1
    51cc:	20 e0       	ldi	r18, 0x00	; 0
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    51d2:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    51d4:	80 ed       	ldi	r24, 0xD0	; 208
    51d6:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    51d8:	8a 30       	cpi	r24, 0x0A	; 10
    51da:	d0 f4       	brcc	.+52     	; 0x5210 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    51dc:	aa e0       	ldi	r26, 0x0A	; 10
    51de:	b0 e0       	ldi	r27, 0x00	; 0
    51e0:	0e 94 37 b2 	call	0x1646e	; 0x1646e <__muluhisi3>
    51e4:	20 2f       	mov	r18, r16
    51e6:	00 0f       	add	r16, r16
    51e8:	33 0b       	sbc	r19, r19
    51ea:	20 53       	subi	r18, 0x30	; 48
    51ec:	31 09       	sbc	r19, r1
    51ee:	03 2e       	mov	r0, r19
    51f0:	00 0c       	add	r0, r0
    51f2:	44 0b       	sbc	r20, r20
    51f4:	55 0b       	sbc	r21, r21
    51f6:	26 0f       	add	r18, r22
    51f8:	37 1f       	adc	r19, r23
    51fa:	48 1f       	adc	r20, r24
    51fc:	59 1f       	adc	r21, r25
    51fe:	e9 cf       	rjmp	.-46     	; 0x51d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    5200:	32 96       	adiw	r30, 0x02	; 2
    5202:	d3 cf       	rjmp	.-90     	; 0x51aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    5204:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    5206:	fe 01       	movw	r30, r28
    5208:	32 96       	adiw	r30, 0x02	; 2
    520a:	e0 cf       	rjmp	.-64     	; 0x51cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    520c:	11 e0       	ldi	r17, 0x01	; 1
    520e:	fb cf       	rjmp	.-10     	; 0x5206 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    5210:	11 23       	and	r17, r17
    5212:	09 f4       	brne	.+2      	; 0x5216 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    5214:	b5 c1       	rjmp	.+874    	; 0x5580 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    5216:	e1 14       	cp	r14, r1
    5218:	f1 04       	cpc	r15, r1
    521a:	09 f4       	brne	.+2      	; 0x521e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    521c:	b2 cf       	rjmp	.-156    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    521e:	87 e0       	ldi	r24, 0x07	; 7
    5220:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    5222:	21 15       	cp	r18, r1
    5224:	31 05       	cpc	r19, r1
    5226:	41 05       	cpc	r20, r1
    5228:	51 05       	cpc	r21, r1
    522a:	11 f4       	brne	.+4      	; 0x5230 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    522c:	86 e0       	ldi	r24, 0x06	; 6
    522e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    5230:	f7 01       	movw	r30, r14
    5232:	91 83       	std	Z+1, r25	; 0x01
    5234:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    5236:	22 83       	std	Z+2, r18	; 0x02
    5238:	33 83       	std	Z+3, r19	; 0x03
    523a:	44 83       	std	Z+4, r20	; 0x04
    523c:	55 83       	std	Z+5, r21	; 0x05
    523e:	a1 cf       	rjmp	.-190    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    5240:	61 e0       	ldi	r22, 0x01	; 1
    5242:	73 e0       	ldi	r23, 0x03	; 3
    5244:	ce 01       	movw	r24, r28
    5246:	01 96       	adiw	r24, 0x01	; 1
    5248:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    524c:	89 2b       	or	r24, r25
    524e:	09 f4       	brne	.+2      	; 0x5252 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    5250:	46 c0       	rjmp	.+140    	; 0x52de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    5252:	5e 01       	movw	r10, r28
    5254:	f2 e0       	ldi	r31, 0x02	; 2
    5256:	af 0e       	add	r10, r31
    5258:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    525a:	1d 32       	cpi	r17, 0x2D	; 45
    525c:	49 f0       	breq	.+18     	; 0x5270 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    525e:	fe 01       	movw	r30, r28
    5260:	31 96       	adiw	r30, 0x01	; 1
    5262:	5f 01       	movw	r10, r30
    5264:	1b 32       	cpi	r17, 0x2B	; 43
    5266:	21 f4       	brne	.+8      	; 0x5270 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    5268:	5e 01       	movw	r10, r28
    526a:	22 e0       	ldi	r18, 0x02	; 2
    526c:	a2 0e       	add	r10, r18
    526e:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    5270:	65 e0       	ldi	r22, 0x05	; 5
    5272:	73 e0       	ldi	r23, 0x03	; 3
    5274:	c5 01       	movw	r24, r10
    5276:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    527a:	89 2b       	or	r24, r25
    527c:	81 f1       	breq	.+96     	; 0x52de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    527e:	d5 01       	movw	r26, r10
    5280:	8c 91       	ld	r24, X
    5282:	88 23       	and	r24, r24
    5284:	09 f4       	brne	.+2      	; 0x5288 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    5286:	3b c1       	rjmp	.+630    	; 0x54fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5288:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    528a:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    528c:	90 ed       	ldi	r25, 0xD0	; 208
    528e:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    5290:	9a 30       	cpi	r25, 0x0A	; 10
    5292:	d0 f3       	brcs	.-12     	; 0x5288 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    5294:	8e 32       	cpi	r24, 0x2E	; 46
    5296:	41 f4       	brne	.+16     	; 0x52a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    5298:	9d 01       	movw	r18, r26
    529a:	f9 01       	movw	r30, r18
    529c:	2f 5f       	subi	r18, 0xFF	; 255
    529e:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    52a0:	80 81       	ld	r24, Z
    52a2:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    52a4:	8a 30       	cpi	r24, 0x0A	; 10
    52a6:	c8 f3       	brcs	.-14     	; 0x529a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    52a8:	80 81       	ld	r24, Z
    52aa:	8f 7d       	andi	r24, 0xDF	; 223
    52ac:	85 34       	cpi	r24, 0x45	; 69
    52ae:	a1 f4       	brne	.+40     	; 0x52d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    52b0:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    52b2:	8d 32       	cpi	r24, 0x2D	; 45
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    52b6:	57 c0       	rjmp	.+174    	; 0x5366 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    52b8:	8b 32       	cpi	r24, 0x2B	; 43
    52ba:	09 f4       	brne	.+2      	; 0x52be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    52bc:	54 c0       	rjmp	.+168    	; 0x5366 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    52be:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    52c0:	80 81       	ld	r24, Z
    52c2:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    52c4:	8a 30       	cpi	r24, 0x0A	; 10
    52c6:	08 f0       	brcs	.+2      	; 0x52ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    52c8:	1a c1       	rjmp	.+564    	; 0x54fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    52ca:	cf 01       	movw	r24, r30
    52cc:	fc 01       	movw	r30, r24
    52ce:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    52d0:	20 81       	ld	r18, Z
    52d2:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    52d4:	2a 30       	cpi	r18, 0x0A	; 10
    52d6:	d0 f3       	brcs	.-12     	; 0x52cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    52d8:	80 81       	ld	r24, Z
    52da:	81 11       	cpse	r24, r1
    52dc:	10 c1       	rjmp	.+544    	; 0x54fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    52de:	1b 32       	cpi	r17, 0x2B	; 43
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    52e2:	43 c0       	rjmp	.+134    	; 0x536a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    52e4:	1d 32       	cpi	r17, 0x2D	; 45
    52e6:	09 f0       	breq	.+2      	; 0x52ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    52e8:	47 c0       	rjmp	.+142    	; 0x5378 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    52ea:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    52ec:	dd 24       	eor	r13, r13
    52ee:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    52f0:	5e 01       	movw	r10, r28
    52f2:	b2 e0       	ldi	r27, 0x02	; 2
    52f4:	ab 0e       	add	r10, r27
    52f6:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    52f8:	60 e0       	ldi	r22, 0x00	; 0
    52fa:	70 e0       	ldi	r23, 0x00	; 0
    52fc:	80 e8       	ldi	r24, 0x80	; 128
    52fe:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    5300:	14 37       	cpi	r17, 0x74	; 116
    5302:	09 f4       	brne	.+2      	; 0x5306 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    5304:	d2 c0       	rjmp	.+420    	; 0x54aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    5306:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5308:	60 e0       	ldi	r22, 0x00	; 0
    530a:	70 e0       	ldi	r23, 0x00	; 0
    530c:	80 ec       	ldi	r24, 0xC0	; 192
    530e:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    5310:	1e 34       	cpi	r17, 0x4E	; 78
    5312:	09 f4       	brne	.+2      	; 0x5316 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    5314:	ca c0       	rjmp	.+404    	; 0x54aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    5316:	19 34       	cpi	r17, 0x49	; 73
    5318:	09 f4       	brne	.+2      	; 0x531c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    531a:	97 c0       	rjmp	.+302    	; 0x544a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    531c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	a9 01       	movw	r20, r18
    5324:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    5326:	d5 01       	movw	r26, r10
    5328:	1d 91       	ld	r17, X+
    532a:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    532c:	80 ed       	ldi	r24, 0xD0	; 208
    532e:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    5330:	8a 30       	cpi	r24, 0x0A	; 10
    5332:	48 f5       	brcc	.+82     	; 0x5386 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    5334:	2c 3c       	cpi	r18, 0xCC	; 204
    5336:	bc ec       	ldi	r27, 0xCC	; 204
    5338:	3b 07       	cpc	r19, r27
    533a:	bc e0       	ldi	r27, 0x0C	; 12
    533c:	4b 07       	cpc	r20, r27
    533e:	51 05       	cpc	r21, r1
    5340:	04 f5       	brge	.+64     	; 0x5382 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    5342:	aa e0       	ldi	r26, 0x0A	; 10
    5344:	b0 e0       	ldi	r27, 0x00	; 0
    5346:	0e 94 37 b2 	call	0x1646e	; 0x1646e <__muluhisi3>
    534a:	21 2f       	mov	r18, r17
    534c:	11 0f       	add	r17, r17
    534e:	33 0b       	sbc	r19, r19
    5350:	20 53       	subi	r18, 0x30	; 48
    5352:	31 09       	sbc	r19, r1
    5354:	03 2e       	mov	r0, r19
    5356:	00 0c       	add	r0, r0
    5358:	44 0b       	sbc	r20, r20
    535a:	55 0b       	sbc	r21, r21
    535c:	26 0f       	add	r18, r22
    535e:	37 1f       	adc	r19, r23
    5360:	48 1f       	adc	r20, r24
    5362:	59 1f       	adc	r21, r25
    5364:	df cf       	rjmp	.-66     	; 0x5324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    5366:	32 96       	adiw	r30, 0x02	; 2
    5368:	ab cf       	rjmp	.-170    	; 0x52c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    536a:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    536c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    536e:	5e 01       	movw	r10, r28
    5370:	e2 e0       	ldi	r30, 0x02	; 2
    5372:	ae 0e       	add	r10, r30
    5374:	b1 1c       	adc	r11, r1
    5376:	c0 cf       	rjmp	.-128    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5378:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    537a:	ce 01       	movw	r24, r28
    537c:	01 96       	adiw	r24, 0x01	; 1
    537e:	5c 01       	movw	r10, r24
    5380:	bb cf       	rjmp	.-138    	; 0x52f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    5382:	0f 5f       	subi	r16, 0xFF	; 255
    5384:	cf cf       	rjmp	.-98     	; 0x5324 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    5386:	1e 32       	cpi	r17, 0x2E	; 46
    5388:	31 f5       	brne	.+76     	; 0x53d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    538a:	5f 01       	movw	r10, r30
    538c:	8f ef       	ldi	r24, 0xFF	; 255
    538e:	a8 1a       	sub	r10, r24
    5390:	b8 0a       	sbc	r11, r24
    5392:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    5394:	d5 01       	movw	r26, r10
    5396:	1d 91       	ld	r17, X+
    5398:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    539a:	80 ed       	ldi	r24, 0xD0	; 208
    539c:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    539e:	8a 30       	cpi	r24, 0x0A	; 10
    53a0:	d0 f4       	brcc	.+52     	; 0x53d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    53a2:	2c 3c       	cpi	r18, 0xCC	; 204
    53a4:	bc ec       	ldi	r27, 0xCC	; 204
    53a6:	3b 07       	cpc	r19, r27
    53a8:	bc e0       	ldi	r27, 0x0C	; 12
    53aa:	4b 07       	cpc	r20, r27
    53ac:	51 05       	cpc	r21, r1
    53ae:	8c f7       	brge	.-30     	; 0x5392 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    53b0:	aa e0       	ldi	r26, 0x0A	; 10
    53b2:	b0 e0       	ldi	r27, 0x00	; 0
    53b4:	0e 94 37 b2 	call	0x1646e	; 0x1646e <__muluhisi3>
    53b8:	21 2f       	mov	r18, r17
    53ba:	11 0f       	add	r17, r17
    53bc:	33 0b       	sbc	r19, r19
    53be:	20 53       	subi	r18, 0x30	; 48
    53c0:	31 09       	sbc	r19, r1
    53c2:	03 2e       	mov	r0, r19
    53c4:	00 0c       	add	r0, r0
    53c6:	44 0b       	sbc	r20, r20
    53c8:	55 0b       	sbc	r21, r21
    53ca:	26 0f       	add	r18, r22
    53cc:	37 1f       	adc	r19, r23
    53ce:	48 1f       	adc	r20, r24
    53d0:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    53d2:	01 50       	subi	r16, 0x01	; 1
    53d4:	de cf       	rjmp	.-68     	; 0x5392 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    53d6:	80 81       	ld	r24, Z
    53d8:	8f 7d       	andi	r24, 0xDF	; 223
    53da:	00 2e       	mov	r0, r16
    53dc:	00 0c       	add	r0, r0
    53de:	11 0b       	sbc	r17, r17
    53e0:	85 34       	cpi	r24, 0x45	; 69
    53e2:	09 f0       	breq	.+2      	; 0x53e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    53e4:	70 c0       	rjmp	.+224    	; 0x54c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    53e6:	81 81       	ldd	r24, Z+1	; 0x01
    53e8:	8d 32       	cpi	r24, 0x2D	; 45
    53ea:	41 f5       	brne	.+80     	; 0x543c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    53ec:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    53ee:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    53f4:	6a e0       	ldi	r22, 0x0A	; 10
    53f6:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    53f8:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    53fa:	60 ed       	ldi	r22, 0xD0	; 208
    53fc:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    53fe:	6a 30       	cpi	r22, 0x0A	; 10
    5400:	78 f5       	brcc	.+94     	; 0x5460 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    5402:	b8 9e       	mul	r11, r24
    5404:	b0 01       	movw	r22, r0
    5406:	b9 9e       	mul	r11, r25
    5408:	70 0d       	add	r23, r0
    540a:	11 24       	eor	r1, r1
    540c:	8a 2f       	mov	r24, r26
    540e:	aa 0f       	add	r26, r26
    5410:	99 0b       	sbc	r25, r25
    5412:	c0 97       	sbiw	r24, 0x30	; 48
    5414:	86 0f       	add	r24, r22
    5416:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    5418:	b8 01       	movw	r22, r16
    541a:	68 0f       	add	r22, r24
    541c:	79 1f       	adc	r23, r25
    541e:	67 32       	cpi	r22, 0x27	; 39
    5420:	71 05       	cpc	r23, r1
    5422:	54 f3       	brlt	.-44     	; 0x53f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    5424:	bb 23       	and	r27, r27
    5426:	89 f0       	breq	.+34     	; 0x544a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	70 e0       	ldi	r23, 0x00	; 0
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    5430:	d1 10       	cpse	r13, r1
    5432:	3b c0       	rjmp	.+118    	; 0x54aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	70 e0       	ldi	r23, 0x00	; 0
    5438:	cb 01       	movw	r24, r22
    543a:	37 c0       	rjmp	.+110    	; 0x54aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    543c:	8b 32       	cpi	r24, 0x2B	; 43
    543e:	19 f0       	breq	.+6      	; 0x5446 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    5440:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    5442:	b0 e0       	ldi	r27, 0x00	; 0
    5444:	d5 cf       	rjmp	.-86     	; 0x53f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    5446:	32 96       	adiw	r30, 0x02	; 2
    5448:	fc cf       	rjmp	.-8      	; 0x5442 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    544a:	60 e0       	ldi	r22, 0x00	; 0
    544c:	70 e0       	ldi	r23, 0x00	; 0
    544e:	80 e8       	ldi	r24, 0x80	; 128
    5450:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    5452:	d1 10       	cpse	r13, r1
    5454:	2a c0       	rjmp	.+84     	; 0x54aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    5456:	60 e0       	ldi	r22, 0x00	; 0
    5458:	70 e0       	ldi	r23, 0x00	; 0
    545a:	80 e8       	ldi	r24, 0x80	; 128
    545c:	9f e7       	ldi	r25, 0x7F	; 127
    545e:	25 c0       	rjmp	.+74     	; 0x54aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    5460:	bb 23       	and	r27, r27
    5462:	19 f0       	breq	.+6      	; 0x546a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    5464:	91 95       	neg	r25
    5466:	81 95       	neg	r24
    5468:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    546a:	08 0f       	add	r16, r24
    546c:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    546e:	ca 01       	movw	r24, r20
    5470:	b9 01       	movw	r22, r18
    5472:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    5476:	10 16       	cp	r1, r16
    5478:	11 06       	cpc	r1, r17
    547a:	44 f5       	brge	.+80     	; 0x54cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    547c:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    547e:	00 ff       	sbrs	r16, 0
    5480:	0c c0       	rjmp	.+24     	; 0x549a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    5482:	24 e0       	ldi	r18, 0x04	; 4
    5484:	b2 9e       	mul	r11, r18
    5486:	f0 01       	movw	r30, r0
    5488:	11 24       	eor	r1, r1
    548a:	e8 5c       	subi	r30, 0xC8	; 200
    548c:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    548e:	20 81       	ld	r18, Z
    5490:	31 81       	ldd	r19, Z+1	; 0x01
    5492:	42 81       	ldd	r20, Z+2	; 0x02
    5494:	53 81       	ldd	r21, Z+3	; 0x03
    5496:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    549a:	15 95       	asr	r17
    549c:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    549e:	b3 94       	inc	r11
    54a0:	01 15       	cp	r16, r1
    54a2:	11 05       	cpc	r17, r1
    54a4:	61 f7       	brne	.-40     	; 0x547e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    54a6:	d1 10       	cpse	r13, r1
    54a8:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    54aa:	e1 14       	cp	r14, r1
    54ac:	f1 04       	cpc	r15, r1
    54ae:	09 f4       	brne	.+2      	; 0x54b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    54b0:	68 ce       	rjmp	.-816    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    54b2:	2a e0       	ldi	r18, 0x0A	; 10
    54b4:	30 e0       	ldi	r19, 0x00	; 0
    54b6:	f7 01       	movw	r30, r14
    54b8:	31 83       	std	Z+1, r19	; 0x01
    54ba:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    54bc:	62 83       	std	Z+2, r22	; 0x02
    54be:	73 83       	std	Z+3, r23	; 0x03
    54c0:	84 83       	std	Z+4, r24	; 0x04
    54c2:	95 83       	std	Z+5, r25	; 0x05
    54c4:	5e ce       	rjmp	.-836    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	80 e0       	ldi	r24, 0x00	; 0
    54ca:	cf cf       	rjmp	.-98     	; 0x546a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    54cc:	11 95       	neg	r17
    54ce:	01 95       	neg	r16
    54d0:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    54d2:	b1 2c       	mov	r11, r1
make_float():
    54d4:	01 15       	cp	r16, r1
    54d6:	11 05       	cpc	r17, r1
    54d8:	31 f3       	breq	.-52     	; 0x54a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    54da:	00 ff       	sbrs	r16, 0
    54dc:	0c c0       	rjmp	.+24     	; 0x54f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    54de:	a4 e0       	ldi	r26, 0x04	; 4
    54e0:	ba 9e       	mul	r11, r26
    54e2:	f0 01       	movw	r30, r0
    54e4:	11 24       	eor	r1, r1
    54e6:	e0 5e       	subi	r30, 0xE0	; 224
    54e8:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    54ea:	20 81       	ld	r18, Z
    54ec:	31 81       	ldd	r19, Z+1	; 0x01
    54ee:	42 81       	ldd	r20, Z+2	; 0x02
    54f0:	53 81       	ldd	r21, Z+3	; 0x03
    54f2:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    54f6:	15 95       	asr	r17
    54f8:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    54fa:	b3 94       	inc	r11
    54fc:	eb cf       	rjmp	.-42     	; 0x54d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    54fe:	6e e0       	ldi	r22, 0x0E	; 14
    5500:	73 e0       	ldi	r23, 0x03	; 3
    5502:	ce 01       	movw	r24, r28
    5504:	01 96       	adiw	r24, 0x01	; 1
    5506:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    550a:	89 2b       	or	r24, r25
    550c:	91 f4       	brne	.+36     	; 0x5532 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    550e:	e1 14       	cp	r14, r1
    5510:	f1 04       	cpc	r15, r1
    5512:	09 f4       	brne	.+2      	; 0x5516 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    5514:	36 ce       	rjmp	.-916    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    5516:	85 e0       	ldi	r24, 0x05	; 5
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	f7 01       	movw	r30, r14
    551c:	91 83       	std	Z+1, r25	; 0x01
    551e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	a0 e0       	ldi	r26, 0x00	; 0
    5526:	b0 e0       	ldi	r27, 0x00	; 0
    5528:	82 83       	std	Z+2, r24	; 0x02
    552a:	93 83       	std	Z+3, r25	; 0x03
    552c:	a4 83       	std	Z+4, r26	; 0x04
    552e:	b5 83       	std	Z+5, r27	; 0x05
    5530:	28 ce       	rjmp	.-944    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    5532:	63 e1       	ldi	r22, 0x13	; 19
    5534:	73 e0       	ldi	r23, 0x03	; 3
    5536:	ce 01       	movw	r24, r28
    5538:	01 96       	adiw	r24, 0x01	; 1
    553a:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    553e:	89 2b       	or	r24, r25
    5540:	79 f4       	brne	.+30     	; 0x5560 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    5542:	e1 14       	cp	r14, r1
    5544:	f1 04       	cpc	r15, r1
    5546:	09 f4       	brne	.+2      	; 0x554a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    5548:	1c ce       	rjmp	.-968    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    554a:	85 e0       	ldi	r24, 0x05	; 5
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	d7 01       	movw	r26, r14
    5550:	8d 93       	st	X+, r24
    5552:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    5554:	f7 01       	movw	r30, r14
    5556:	12 82       	std	Z+2, r1	; 0x02
    5558:	13 82       	std	Z+3, r1	; 0x03
    555a:	14 82       	std	Z+4, r1	; 0x04
    555c:	15 82       	std	Z+5, r1	; 0x05
    555e:	11 ce       	rjmp	.-990    	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    5560:	69 e1       	ldi	r22, 0x19	; 25
    5562:	73 e0       	ldi	r23, 0x03	; 3
    5564:	ce 01       	movw	r24, r28
    5566:	01 96       	adiw	r24, 0x01	; 1
    5568:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    556c:	89 2b       	or	r24, r25
    556e:	09 f4       	brne	.+2      	; 0x5572 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    5570:	08 ce       	rjmp	.-1008   	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    5572:	82 e0       	ldi	r24, 0x02	; 2
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	a3 cc       	rjmp	.-1722   	; 0x4ebe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    5578:	21 e0       	ldi	r18, 0x01	; 1
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	40 e0       	ldi	r20, 0x00	; 0
    557e:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    5580:	e1 14       	cp	r14, r1
    5582:	f1 04       	cpc	r15, r1
    5584:	09 f0       	breq	.+2      	; 0x5588 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    5586:	52 ce       	rjmp	.-860    	; 0x522c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    5588:	fc cd       	rjmp	.-1032   	; 0x5182 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

0000558a <remote_tds_get_data(unsigned char) [clone .part.24]>:
_Z19remote_tds_get_datah.part.24():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2155
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    558e:	93 e0       	ldi	r25, 0x03	; 3
    5590:	89 9f       	mul	r24, r25
    5592:	e0 01       	movw	r28, r0
    5594:	11 24       	eor	r1, r1
    5596:	be 01       	movw	r22, r28
    5598:	6b 59       	subi	r22, 0x9B	; 155
    559a:	7f 4f       	sbci	r23, 0xFF	; 255
    559c:	07 2e       	mov	r0, r23
    559e:	00 0c       	add	r0, r0
    55a0:	88 0b       	sbc	r24, r24
    55a2:	99 0b       	sbc	r25, r25
    55a4:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2156
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    55a8:	be 01       	movw	r22, r28
    55aa:	6c 59       	subi	r22, 0x9C	; 156
    55ac:	7f 4f       	sbci	r23, 0xFF	; 255
    55ae:	07 2e       	mov	r0, r23
    55b0:	00 0c       	add	r0, r0
    55b2:	88 0b       	sbc	r24, r24
    55b4:	99 0b       	sbc	r25, r25
    55b6:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
  }
  return temp;
}
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	df 91       	pop	r29
    55be:	cf 91       	pop	r28
    55c0:	08 95       	ret

000055c2 <get_funtion_default_ring(unsigned char, unsigned char, char*, char*)>:
_Z24get_funtion_default_ringhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4893
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void get_funtion_default_ring(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    55c2:	cf 93       	push	r28
    55c4:	df 93       	push	r29
    55c6:	ea 01       	movw	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894
  sprintf(line2, "Vychozi ring %d", default_ring);
    55c8:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <default_ring>
    55cc:	1f 92       	push	r1
    55ce:	8f 93       	push	r24
    55d0:	8e e1       	ldi	r24, 0x1E	; 30
    55d2:	93 e0       	ldi	r25, 0x03	; 3
    55d4:	9f 93       	push	r25
    55d6:	8f 93       	push	r24
    55d8:	3f 93       	push	r19
    55da:	2f 93       	push	r18
    55dc:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895
  sprintf(line1, "Zmenit vychozi ring");
    55e0:	0f 90       	pop	r0
    55e2:	0f 90       	pop	r0
    55e4:	0f 90       	pop	r0
    55e6:	0f 90       	pop	r0
    55e8:	0f 90       	pop	r0
    55ea:	0f 90       	pop	r0
    55ec:	6e e2       	ldi	r22, 0x2E	; 46
    55ee:	73 e0       	ldi	r23, 0x03	; 3
    55f0:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4896
}
    55f2:	df 91       	pop	r29
    55f4:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895


void get_funtion_default_ring(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  sprintf(line2, "Vychozi ring %d", default_ring);
  sprintf(line1, "Zmenit vychozi ring");
    55f6:	0c 94 8d b4 	jmp	0x1691a	; 0x1691a <strcpy>

000055fa <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4233
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    55fa:	ef 92       	push	r14
    55fc:	ff 92       	push	r15
    55fe:	0f 93       	push	r16
    5600:	1f 93       	push	r17
    5602:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4234
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    5604:	ee 24       	eor	r14, r14
    5606:	ea 94       	dec	r14
    5608:	fe 2c       	mov	r15, r14
    560a:	10 e0       	ldi	r17, 0x00	; 0
    560c:	00 e0       	ldi	r16, 0x00	; 0
    560e:	22 e0       	ldi	r18, 0x02	; 2
    5610:	bc 01       	movw	r22, r24
    5612:	85 ed       	ldi	r24, 0xD5	; 213
    5614:	98 e0       	ldi	r25, 0x08	; 8
    5616:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4235
}
    561a:	1f 91       	pop	r17
    561c:	0f 91       	pop	r16
    561e:	ff 90       	pop	r15
    5620:	ef 90       	pop	r14
    5622:	08 95       	ret

00005624 <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1721
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    5624:	8b ef       	ldi	r24, 0xFB	; 251
    5626:	98 e0       	ldi	r25, 0x08	; 8
    5628:	fc 01       	movw	r30, r24
    562a:	01 90       	ld	r0, Z+
    562c:	00 20       	and	r0, r0
    562e:	e9 f7       	brne	.-6      	; 0x562a <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    5630:	cf 01       	movw	r24, r30
    5632:	8c 5f       	subi	r24, 0xFC	; 252
    5634:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722
  if (len > 0)
    5636:	88 23       	and	r24, r24
    5638:	29 f0       	breq	.+10     	; 0x5644 <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1723
    dialog_set_string[len - 1] = 0;
    563a:	99 27       	eor	r25, r25
    563c:	fc 01       	movw	r30, r24
    563e:	e6 50       	subi	r30, 0x06	; 6
    5640:	f7 4f       	sbci	r31, 0xF7	; 247
    5642:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1724
}
    5644:	08 95       	ret

00005646 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1711
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    5646:	eb ef       	ldi	r30, 0xFB	; 251
    5648:	f8 e0       	ldi	r31, 0x08	; 8
    564a:	01 90       	ld	r0, Z+
    564c:	00 20       	and	r0, r0
    564e:	e9 f7       	brne	.-6      	; 0x564a <display_element_set_string_add_char(char)+0x4>
    5650:	ec 5f       	subi	r30, 0xFC	; 252
    5652:	f8 40       	sbci	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1712
  if (len  < dialog_set_string_max_length - 1)
    5654:	ff 27       	eor	r31, r31
    5656:	20 91 f8 08 	lds	r18, 0x08F8	; 0x8008f8 <dialog_set_string_max_length>
    565a:	21 50       	subi	r18, 0x01	; 1
    565c:	33 0b       	sbc	r19, r19
    565e:	e2 17       	cp	r30, r18
    5660:	f3 07       	cpc	r31, r19
    5662:	24 f4       	brge	.+8      	; 0x566c <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1714
  {
    dialog_set_string[len] = znak;
    5664:	e5 50       	subi	r30, 0x05	; 5
    5666:	f7 4f       	sbci	r31, 0xF7	; 247
    5668:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1715
    dialog_set_string[len + 1] = 0;
    566a:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1717
  }
}
    566c:	08 95       	ret

0000566e <click_keyboard_alfa(unsigned char, unsigned char)>:
_Z19click_keyboard_alfahh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
   args2 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    566e:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <dialog_set_string_keyboard_type>
    5672:	91 11       	cpse	r25, r1
    5674:	07 c0       	rjmp	.+14     	; 0x5684 <click_keyboard_alfa(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1858
    znak = pgm_read_byte(&keyboad_number_char_upper[args2]);
    5676:	e6 2f       	mov	r30, r22
    5678:	f0 e0       	ldi	r31, 0x00	; 0
    567a:	ed 51       	subi	r30, 0x1D	; 29
    567c:	ff 4c       	sbci	r31, 0xCF	; 207
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args2]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args2]);
    567e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
  ///
  display_element_set_string_add_char(znak);
    5680:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1859
void click_keyboard_alfa(uint8_t args1, uint8_t args2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args2]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    5684:	91 30       	cpi	r25, 0x01	; 1
    5686:	29 f4       	brne	.+10     	; 0x5692 <click_keyboard_alfa(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1860
    znak = pgm_read_byte(&keyboad_number_char_lower[args2]);
    5688:	e6 2f       	mov	r30, r22
    568a:	f0 e0       	ldi	r31, 0x00	; 0
    568c:	e7 53       	subi	r30, 0x37	; 55
    568e:	ff 4c       	sbci	r31, 0xCF	; 207
    5690:	f6 cf       	rjmp	.-20     	; 0x567e <click_keyboard_alfa(unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    5692:	92 30       	cpi	r25, 0x02	; 2
    5694:	a9 f7       	brne	.-22     	; 0x5680 <click_keyboard_alfa(unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
    znak = pgm_read_byte(&keyboad_number_char_special[args2]);
    5696:	e6 2f       	mov	r30, r22
    5698:	f0 e0       	ldi	r31, 0x00	; 0
    569a:	e1 55       	subi	r30, 0x51	; 81
    569c:	ff 4c       	sbci	r31, 0xCF	; 207
    569e:	ef cf       	rjmp	.-34     	; 0x567e <click_keyboard_alfa(unsigned char, unsigned char)+0x10>

000056a0 <click_keyboard_number(unsigned char, unsigned char)>:
_Z21click_keyboard_numberhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
  if (args1 == 10) znak = '.';
    56a0:	8a 30       	cpi	r24, 0x0A	; 10
    56a2:	21 f0       	breq	.+8      	; 0x56ac <click_keyboard_number(unsigned char, unsigned char)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1821
   args2 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
    56a4:	80 e3       	ldi	r24, 0x30	; 48
    56a6:	86 0f       	add	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
  if (args1 == 10) znak = '.';
  display_element_set_string_add_char(znak);
    56a8:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
*/
void click_keyboard_number(uint8_t args1, uint8_t args2)
{
  char znak;
  znak = '0' + args2;
  if (args1 == 10) znak = '.';
    56ac:	8e e2       	ldi	r24, 0x2E	; 46
    56ae:	fc cf       	rjmp	.-8      	; 0x56a8 <click_keyboard_number(unsigned char, unsigned char)+0x8>

000056b0 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    56b0:	2f 92       	push	r2
    56b2:	3f 92       	push	r3
    56b4:	4f 92       	push	r4
    56b6:	5f 92       	push	r5
    56b8:	6f 92       	push	r6
    56ba:	7f 92       	push	r7
    56bc:	9f 92       	push	r9
    56be:	af 92       	push	r10
    56c0:	bf 92       	push	r11
    56c2:	cf 92       	push	r12
    56c4:	df 92       	push	r13
    56c6:	ef 92       	push	r14
    56c8:	ff 92       	push	r15
    56ca:	0f 93       	push	r16
    56cc:	1f 93       	push	r17
    56ce:	cf 93       	push	r28
    56d0:	df 93       	push	r29
    56d2:	00 d0       	rcall	.+0      	; 0x56d4 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    56d4:	1f 92       	push	r1
    56d6:	1f 92       	push	r1
    56d8:	cd b7       	in	r28, 0x3d	; 61
    56da:	de b7       	in	r29, 0x3e	; 62
    56dc:	6c 01       	movw	r12, r24
    56de:	5b 01       	movw	r10, r22
    56e0:	1a 01       	movw	r2, r20
    56e2:	29 01       	movw	r4, r18
    56e4:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    56e6:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    56ea:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    56ee:	10 e0       	ldi	r17, 0x00	; 0
    56f0:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4535
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    56f2:	3b 01       	movw	r6, r22
    56f4:	62 0e       	add	r6, r18
    56f6:	73 1e       	adc	r7, r19
    56f8:	84 0f       	add	r24, r20
    56fa:	95 1f       	adc	r25, r21
    56fc:	9d 83       	std	Y+5, r25	; 0x05
    56fe:	8c 83       	std	Y+4, r24	; 0x04
    5700:	93 01       	movw	r18, r6
    5702:	20 1b       	sub	r18, r16
    5704:	31 0b       	sbc	r19, r17
    5706:	4c 81       	ldd	r20, Y+4	; 0x04
    5708:	5d 81       	ldd	r21, Y+5	; 0x05
    570a:	40 1b       	sub	r20, r16
    570c:	51 0b       	sbc	r21, r17
    570e:	b5 01       	movw	r22, r10
    5710:	60 0f       	add	r22, r16
    5712:	71 1f       	adc	r23, r17
    5714:	c6 01       	movw	r24, r12
    5716:	80 0f       	add	r24, r16
    5718:	91 1f       	adc	r25, r17
    571a:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    571e:	0f 5f       	subi	r16, 0xFF	; 255
    5720:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4534
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5722:	03 30       	cpi	r16, 0x03	; 3
    5724:	11 05       	cpc	r17, r1
    5726:	61 f7       	brne	.-40     	; 0x5700 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    5728:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
  str1[1] = 0;
    572a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4539
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    572c:	ce 01       	movw	r24, r28
    572e:	01 96       	adiw	r24, 0x01	; 1
    5730:	fc 01       	movw	r30, r24
    5732:	01 90       	ld	r0, Z+
    5734:	00 20       	and	r0, r0
    5736:	e9 f7       	brne	.-6      	; 0x5732 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    5738:	31 97       	sbiw	r30, 0x01	; 1
    573a:	e8 1b       	sub	r30, r24
    573c:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    573e:	29 2d       	mov	r18, r9
    5740:	22 0f       	add	r18, r18
    5742:	29 0d       	add	r18, r9
    5744:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4541
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    5746:	a2 01       	movw	r20, r4
    5748:	42 1b       	sub	r20, r18
    574a:	51 09       	sbc	r21, r1
    574c:	56 95       	lsr	r21
    574e:	47 95       	ror	r20
    5750:	56 95       	lsr	r21
    5752:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4542
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    5754:	4a 0d       	add	r20, r10
    5756:	5b 2d       	mov	r21, r11
    5758:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    575a:	26 e0       	ldi	r18, 0x06	; 6
    575c:	e2 9f       	mul	r30, r18
    575e:	f0 01       	movw	r30, r0
    5760:	11 24       	eor	r1, r1
    5762:	9e 9e       	mul	r9, r30
    5764:	90 01       	movw	r18, r0
    5766:	9f 9e       	mul	r9, r31
    5768:	30 0d       	add	r19, r0
    576a:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4540
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    576c:	33 27       	eor	r19, r19
    576e:	b1 01       	movw	r22, r2
    5770:	62 1b       	sub	r22, r18
    5772:	73 0b       	sbc	r23, r19
    5774:	76 95       	lsr	r23
    5776:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4542
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    5778:	6c 0d       	add	r22, r12
    577a:	7d 2d       	mov	r23, r13
    577c:	71 1d       	adc	r23, r1
    577e:	ee 24       	eor	r14, r14
    5780:	ea 94       	dec	r14
    5782:	fe 2c       	mov	r15, r14
    5784:	10 e0       	ldi	r17, 0x00	; 0
    5786:	00 e0       	ldi	r16, 0x00	; 0
    5788:	29 2d       	mov	r18, r9
    578a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4543
}
    578e:	0f 90       	pop	r0
    5790:	0f 90       	pop	r0
    5792:	0f 90       	pop	r0
    5794:	0f 90       	pop	r0
    5796:	0f 90       	pop	r0
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	1f 91       	pop	r17
    579e:	0f 91       	pop	r16
    57a0:	ff 90       	pop	r15
    57a2:	ef 90       	pop	r14
    57a4:	df 90       	pop	r13
    57a6:	cf 90       	pop	r12
    57a8:	bf 90       	pop	r11
    57aa:	af 90       	pop	r10
    57ac:	9f 90       	pop	r9
    57ae:	7f 90       	pop	r7
    57b0:	6f 90       	pop	r6
    57b2:	5f 90       	pop	r5
    57b4:	4f 90       	pop	r4
    57b6:	3f 90       	pop	r3
    57b8:	2f 90       	pop	r2
    57ba:	08 95       	ret

000057bc <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
}


/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    57bc:	8f 92       	push	r8
    57be:	9f 92       	push	r9
    57c0:	af 92       	push	r10
    57c2:	bf 92       	push	r11
    57c4:	cf 92       	push	r12
    57c6:	df 92       	push	r13
    57c8:	ef 92       	push	r14
    57ca:	ff 92       	push	r15
    57cc:	0f 93       	push	r16
    57ce:	1f 93       	push	r17
    57d0:	cf 93       	push	r28
    57d2:	df 93       	push	r29
    57d4:	cd b7       	in	r28, 0x3d	; 61
    57d6:	de b7       	in	r29, 0x3e	; 62
    57d8:	68 97       	sbiw	r28, 0x18	; 24
    57da:	0f b6       	in	r0, 0x3f	; 63
    57dc:	f8 94       	cli
    57de:	de bf       	out	0x3e, r29	; 62
    57e0:	0f be       	out	0x3f, r0	; 63
    57e2:	cd bf       	out	0x3d, r28	; 61
    57e4:	5c 01       	movw	r10, r24
    57e6:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4172
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    57e8:	61 ec       	ldi	r22, 0xC1	; 193
    57ea:	73 e3       	ldi	r23, 0x33	; 51
    57ec:	ce 01       	movw	r24, r28
    57ee:	01 96       	adiw	r24, 0x01	; 1
    57f0:	6c 01       	movw	r12, r24
    57f2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4174
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    57f6:	a4 01       	movw	r20, r8
    57f8:	4b 5f       	subi	r20, 0xFB	; 251
    57fa:	5f 4f       	sbci	r21, 0xFF	; 255
    57fc:	b5 01       	movw	r22, r10
    57fe:	61 5b       	subi	r22, 0xB1	; 177
    5800:	7f 4f       	sbci	r23, 0xFF	; 255
    5802:	ee 24       	eor	r14, r14
    5804:	ea 94       	dec	r14
    5806:	fe 2c       	mov	r15, r14
    5808:	10 e0       	ldi	r17, 0x00	; 0
    580a:	00 e0       	ldi	r16, 0x00	; 0
    580c:	21 e0       	ldi	r18, 0x01	; 1
    580e:	c6 01       	movw	r24, r12
    5810:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    5814:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4175
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    5818:	80 fd       	sbrc	r24, 0
    581a:	50 c0       	rjmp	.+160    	; 0x58bc <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    581c:	90 91 6a 10 	lds	r25, 0x106A	; 0x80106a <now+0x4>
    5820:	80 91 69 10 	lds	r24, 0x1069	; 0x801069 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
  {
    if (uptime % 2 )
    5824:	20 91 f2 0a 	lds	r18, 0x0AF2	; 0x800af2 <uptime>
    5828:	20 ff       	sbrs	r18, 0
    582a:	41 c0       	rjmp	.+130    	; 0x58ae <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4178
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    582c:	1f 92       	push	r1
    582e:	9f 93       	push	r25
    5830:	1f 92       	push	r1
    5832:	8f 93       	push	r24
    5834:	82 e4       	ldi	r24, 0x42	; 66
    5836:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    5838:	9f 93       	push	r25
    583a:	8f 93       	push	r24
    583c:	df 92       	push	r13
    583e:	cf 92       	push	r12
    5840:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
    5844:	0f b6       	in	r0, 0x3f	; 63
    5846:	f8 94       	cli
    5848:	de bf       	out	0x3e, r29	; 62
    584a:	0f be       	out	0x3f, r0	; 63
    584c:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    584e:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5852:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4187
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    5856:	a4 01       	movw	r20, r8
    5858:	4c 5e       	subi	r20, 0xEC	; 236
    585a:	5f 4f       	sbci	r21, 0xFF	; 255
    585c:	b5 01       	movw	r22, r10
    585e:	6c 5f       	subi	r22, 0xFC	; 252
    5860:	7f 4f       	sbci	r23, 0xFF	; 255
    5862:	ee 24       	eor	r14, r14
    5864:	ea 94       	dec	r14
    5866:	fe 2c       	mov	r15, r14
    5868:	10 e0       	ldi	r17, 0x00	; 0
    586a:	00 e0       	ldi	r16, 0x00	; 0
    586c:	28 e0       	ldi	r18, 0x08	; 8
    586e:	c6 01       	movw	r24, r12
    5870:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4188
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    5874:	94 01       	movw	r18, r8
    5876:	2c 5a       	subi	r18, 0xAC	; 172
    5878:	3f 4f       	sbci	r19, 0xFF	; 255
    587a:	a5 01       	movw	r20, r10
    587c:	4c 50       	subi	r20, 0x0C	; 12
    587e:	5f 4f       	sbci	r21, 0xFF	; 255
    5880:	b4 01       	movw	r22, r8
    5882:	c5 01       	movw	r24, r10
    5884:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4189
}
    5888:	68 96       	adiw	r28, 0x18	; 24
    588a:	0f b6       	in	r0, 0x3f	; 63
    588c:	f8 94       	cli
    588e:	de bf       	out	0x3e, r29	; 62
    5890:	0f be       	out	0x3f, r0	; 63
    5892:	cd bf       	out	0x3d, r28	; 61
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	1f 91       	pop	r17
    589a:	0f 91       	pop	r16
    589c:	ff 90       	pop	r15
    589e:	ef 90       	pop	r14
    58a0:	df 90       	pop	r13
    58a2:	cf 90       	pop	r12
    58a4:	bf 90       	pop	r11
    58a6:	af 90       	pop	r10
    58a8:	9f 90       	pop	r9
    58aa:	8f 90       	pop	r8
    58ac:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4180
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    58ae:	1f 92       	push	r1
    58b0:	9f 93       	push	r25
    58b2:	1f 92       	push	r1
    58b4:	8f 93       	push	r24
    58b6:	8c e4       	ldi	r24, 0x4C	; 76
    58b8:	93 e0       	ldi	r25, 0x03	; 3
    58ba:	be cf       	rjmp	.-132    	; 0x5838 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4184
  }
  else
  {
    strcpy(str1, "--:--");
    58bc:	66 e5       	ldi	r22, 0x56	; 86
    58be:	73 e0       	ldi	r23, 0x03	; 3
    58c0:	c6 01       	movw	r24, r12
    58c2:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
    58c6:	c3 cf       	rjmp	.-122    	; 0x584e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

000058c8 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4139
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    58c8:	26 0f       	add	r18, r22
    58ca:	37 1f       	adc	r19, r23
    58cc:	48 0f       	add	r20, r24
    58ce:	59 1f       	adc	r21, r25
    58d0:	0c 94 3d 81 	jmp	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>

000058d4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4470
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    58d4:	2f 92       	push	r2
    58d6:	3f 92       	push	r3
    58d8:	4f 92       	push	r4
    58da:	5f 92       	push	r5
    58dc:	6f 92       	push	r6
    58de:	7f 92       	push	r7
    58e0:	8f 92       	push	r8
    58e2:	9f 92       	push	r9
    58e4:	af 92       	push	r10
    58e6:	bf 92       	push	r11
    58e8:	cf 92       	push	r12
    58ea:	df 92       	push	r13
    58ec:	ef 92       	push	r14
    58ee:	ff 92       	push	r15
    58f0:	0f 93       	push	r16
    58f2:	1f 93       	push	r17
    58f4:	cf 93       	push	r28
    58f6:	df 93       	push	r29
    58f8:	1f 92       	push	r1
    58fa:	1f 92       	push	r1
    58fc:	cd b7       	in	r28, 0x3d	; 61
    58fe:	de b7       	in	r29, 0x3e	; 62
    5900:	2c 01       	movw	r4, r24
    5902:	3b 01       	movw	r6, r22
    5904:	09 83       	std	Y+1, r16	; 0x01
    5906:	ea 82       	std	Y+2, r14	; 0x02
    5908:	3a 2c       	mov	r3, r10
    590a:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  back_color = color_inactive;
  if (state == 1)
    590c:	31 e0       	ldi	r19, 0x01	; 1
    590e:	83 12       	cpse	r8, r19
    5910:	02 c0       	rjmp	.+4      	; 0x5916 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4482
    back_color = color_active;
    5912:	3c 2c       	mov	r3, r12
    5914:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5916:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    591a:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    591e:	10 e0       	ldi	r17, 0x00	; 0
    5920:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5922:	a2 2e       	mov	r10, r18
    5924:	b1 2c       	mov	r11, r1
    5926:	84 2e       	mov	r8, r20
    5928:	91 2c       	mov	r9, r1
    592a:	65 01       	movw	r12, r10
    592c:	c6 0c       	add	r12, r6
    592e:	d7 1c       	adc	r13, r7
    5930:	74 01       	movw	r14, r8
    5932:	e4 0c       	add	r14, r4
    5934:	f5 1c       	adc	r15, r5
    5936:	96 01       	movw	r18, r12
    5938:	20 1b       	sub	r18, r16
    593a:	31 0b       	sbc	r19, r17
    593c:	a7 01       	movw	r20, r14
    593e:	40 1b       	sub	r20, r16
    5940:	51 0b       	sbc	r21, r17
    5942:	b3 01       	movw	r22, r6
    5944:	60 0f       	add	r22, r16
    5946:	71 1f       	adc	r23, r17
    5948:	c2 01       	movw	r24, r4
    594a:	80 0f       	add	r24, r16
    594c:	91 1f       	adc	r25, r17
    594e:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5952:	0f 5f       	subi	r16, 0xFF	; 255
    5954:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
  uint8_t num_lines_const = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5956:	03 30       	cpi	r16, 0x03	; 3
    5958:	11 05       	cpc	r17, r1
    595a:	69 f7       	brne	.-38     	; 0x5936 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    595c:	30 92 e0 0d 	sts	0x0DE0, r3	; 0x800de0 <my_lcd+0xa>
    5960:	20 92 e1 0d 	sts	0x0DE1, r2	; 0x800de1 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4489
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);


  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5964:	93 01       	movw	r18, r6
    5966:	23 50       	subi	r18, 0x03	; 3
    5968:	31 09       	sbc	r19, r1
    596a:	2a 0d       	add	r18, r10
    596c:	3b 1d       	adc	r19, r11
    596e:	a2 01       	movw	r20, r4
    5970:	43 50       	subi	r20, 0x03	; 3
    5972:	51 09       	sbc	r21, r1
    5974:	48 0d       	add	r20, r8
    5976:	59 1d       	adc	r21, r9
    5978:	b3 01       	movw	r22, r6
    597a:	6d 5f       	subi	r22, 0xFD	; 253
    597c:	7f 4f       	sbci	r23, 0xFF	; 255
    597e:	c2 01       	movw	r24, r4
    5980:	03 96       	adiw	r24, 0x03	; 3
    5982:	0e 94 96 81 	call	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4491

  if (strlen(line1) > 0)
    5986:	e8 8d       	ldd	r30, Y+24	; 0x18
    5988:	f9 8d       	ldd	r31, Y+25	; 0x19
    598a:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    598c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    598e:	d1 2c       	mov	r13, r1
    5990:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4491


  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  if (strlen(line1) > 0)
    5992:	88 23       	and	r24, r24
    5994:	b1 f1       	breq	.+108    	; 0x5a02 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x12e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4494
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    5996:	01 90       	ld	r0, Z+
    5998:	00 20       	and	r0, r0
    599a:	e9 f7       	brne	.-6      	; 0x5996 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc2>
    599c:	31 97       	sbiw	r30, 0x01	; 1
    599e:	28 8d       	ldd	r18, Y+24	; 0x18
    59a0:	39 8d       	ldd	r19, Y+25	; 0x19
    59a2:	e2 1b       	sub	r30, r18
    59a4:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    59a6:	89 81       	ldd	r24, Y+1	; 0x01
    59a8:	88 0f       	add	r24, r24
    59aa:	39 81       	ldd	r19, Y+1	; 0x01
    59ac:	83 0f       	add	r24, r19
    59ae:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    59b0:	65 01       	movw	r12, r10
    59b2:	c8 1a       	sub	r12, r24
    59b4:	d1 08       	sbc	r13, r1
    59b6:	d7 fe       	sbrs	r13, 7
    59b8:	03 c0       	rjmp	.+6      	; 0x59c0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    59ba:	8f ef       	ldi	r24, 0xFF	; 255
    59bc:	c8 1a       	sub	r12, r24
    59be:	d8 0a       	sbc	r13, r24
    59c0:	d5 94       	asr	r13
    59c2:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4497
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    59c4:	a3 01       	movw	r20, r6
    59c6:	41 50       	subi	r20, 0x01	; 1
    59c8:	51 09       	sbc	r21, r1
    59ca:	4c 0d       	add	r20, r12
    59cc:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    59ce:	96 e0       	ldi	r25, 0x06	; 6
    59d0:	e9 9f       	mul	r30, r25
    59d2:	f0 01       	movw	r30, r0
    59d4:	11 24       	eor	r1, r1
    59d6:	29 81       	ldd	r18, Y+1	; 0x01
    59d8:	2e 9f       	mul	r18, r30
    59da:	c0 01       	movw	r24, r0
    59dc:	2f 9f       	mul	r18, r31
    59de:	90 0d       	add	r25, r0
    59e0:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495

  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    59e2:	b4 01       	movw	r22, r8
    59e4:	68 1b       	sub	r22, r24
    59e6:	79 0b       	sbc	r23, r25
    59e8:	76 95       	lsr	r23
    59ea:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4497
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    59ec:	64 0d       	add	r22, r4
    59ee:	75 1d       	adc	r23, r5
    59f0:	e3 2c       	mov	r14, r3
    59f2:	f2 2c       	mov	r15, r2
    59f4:	10 e0       	ldi	r17, 0x00	; 0
    59f6:	00 e0       	ldi	r16, 0x00	; 0
    59f8:	88 8d       	ldd	r24, Y+24	; 0x18
    59fa:	99 8d       	ldd	r25, Y+25	; 0x19
    59fc:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    5a00:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4499
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (strlen(line2) > 0)
    5a02:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5a04:	fb 8d       	ldd	r31, Y+27	; 0x1b
    5a06:	80 81       	ld	r24, Z
    5a08:	88 23       	and	r24, r24
    5a0a:	b1 f1       	breq	.+108    	; 0x5a78 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4502
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5a0c:	01 90       	ld	r0, Z+
    5a0e:	00 20       	and	r0, r0
    5a10:	e9 f7       	brne	.-6      	; 0x5a0c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x138>
    5a12:	31 97       	sbiw	r30, 0x01	; 1
    5a14:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5a16:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5a18:	e2 1b       	sub	r30, r18
    5a1a:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a1e:	88 0f       	add	r24, r24
    5a20:	3a 81       	ldd	r19, Y+2	; 0x02
    5a22:	83 0f       	add	r24, r19
    5a24:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5a26:	95 01       	movw	r18, r10
    5a28:	28 1b       	sub	r18, r24
    5a2a:	31 09       	sbc	r19, r1
    5a2c:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4501
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    5a2e:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5a30:	70 e0       	ldi	r23, 0x00	; 0
    5a32:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    5a36:	31 e0       	ldi	r19, 0x01	; 1
    5a38:	63 1a       	sub	r6, r19
    5a3a:	71 08       	sbc	r7, r1
    5a3c:	c6 0c       	add	r12, r6
    5a3e:	d7 1c       	adc	r13, r7
    5a40:	ab 01       	movw	r20, r22
    5a42:	4c 0d       	add	r20, r12
    5a44:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5a46:	86 e0       	ldi	r24, 0x06	; 6
    5a48:	e8 9f       	mul	r30, r24
    5a4a:	f0 01       	movw	r30, r0
    5a4c:	11 24       	eor	r1, r1
    5a4e:	2a 81       	ldd	r18, Y+2	; 0x02
    5a50:	2e 9f       	mul	r18, r30
    5a52:	c0 01       	movw	r24, r0
    5a54:	2f 9f       	mul	r18, r31
    5a56:	90 0d       	add	r25, r0
    5a58:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4503
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5a5a:	b4 01       	movw	r22, r8
    5a5c:	68 1b       	sub	r22, r24
    5a5e:	79 0b       	sbc	r23, r25
    5a60:	76 95       	lsr	r23
    5a62:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    5a64:	64 0d       	add	r22, r4
    5a66:	75 1d       	adc	r23, r5
    5a68:	e3 2c       	mov	r14, r3
    5a6a:	f2 2c       	mov	r15, r2
    5a6c:	10 e0       	ldi	r17, 0x00	; 0
    5a6e:	00 e0       	ldi	r16, 0x00	; 0
    5a70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5a72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5a74:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507
  }
}
    5a78:	0f 90       	pop	r0
    5a7a:	0f 90       	pop	r0
    5a7c:	df 91       	pop	r29
    5a7e:	cf 91       	pop	r28
    5a80:	1f 91       	pop	r17
    5a82:	0f 91       	pop	r16
    5a84:	ff 90       	pop	r15
    5a86:	ef 90       	pop	r14
    5a88:	df 90       	pop	r13
    5a8a:	cf 90       	pop	r12
    5a8c:	bf 90       	pop	r11
    5a8e:	af 90       	pop	r10
    5a90:	9f 90       	pop	r9
    5a92:	8f 90       	pop	r8
    5a94:	7f 90       	pop	r7
    5a96:	6f 90       	pop	r6
    5a98:	5f 90       	pop	r5
    5a9a:	4f 90       	pop	r4
    5a9c:	3f 90       	pop	r3
    5a9e:	2f 90       	pop	r2
    5aa0:	08 95       	ret

00005aa2 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    5aa2:	2f 92       	push	r2
    5aa4:	3f 92       	push	r3
    5aa6:	4f 92       	push	r4
    5aa8:	5f 92       	push	r5
    5aaa:	6f 92       	push	r6
    5aac:	7f 92       	push	r7
    5aae:	8f 92       	push	r8
    5ab0:	9f 92       	push	r9
    5ab2:	af 92       	push	r10
    5ab4:	bf 92       	push	r11
    5ab6:	cf 92       	push	r12
    5ab8:	df 92       	push	r13
    5aba:	ef 92       	push	r14
    5abc:	ff 92       	push	r15
    5abe:	0f 93       	push	r16
    5ac0:	1f 93       	push	r17
    5ac2:	cf 93       	push	r28
    5ac4:	df 93       	push	r29
    5ac6:	00 d0       	rcall	.+0      	; 0x5ac8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    5ac8:	1f 92       	push	r1
    5aca:	1f 92       	push	r1
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	2c 01       	movw	r4, r24
    5ad2:	3b 01       	movw	r6, r22
    5ad4:	5a 83       	std	Y+2, r21	; 0x02
    5ad6:	49 83       	std	Y+1, r20	; 0x01
    5ad8:	19 01       	movw	r2, r18
    5ada:	90 2e       	mov	r9, r16
    5adc:	eb 82       	std	Y+3, r14	; 0x03
    5ade:	dd 82       	std	Y+5, r13	; 0x05
    5ae0:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5ae2:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5ae6:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    5aea:	10 e0       	ldi	r17, 0x00	; 0
    5aec:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5aee:	6b 01       	movw	r12, r22
    5af0:	c2 0e       	add	r12, r18
    5af2:	d3 1e       	adc	r13, r19
    5af4:	7a 01       	movw	r14, r20
    5af6:	e8 0e       	add	r14, r24
    5af8:	f9 1e       	adc	r15, r25
    5afa:	96 01       	movw	r18, r12
    5afc:	20 1b       	sub	r18, r16
    5afe:	31 0b       	sbc	r19, r17
    5b00:	a7 01       	movw	r20, r14
    5b02:	40 1b       	sub	r20, r16
    5b04:	51 0b       	sbc	r21, r17
    5b06:	b8 01       	movw	r22, r16
    5b08:	66 0d       	add	r22, r6
    5b0a:	77 1d       	adc	r23, r7
    5b0c:	c8 01       	movw	r24, r16
    5b0e:	84 0d       	add	r24, r4
    5b10:	95 1d       	adc	r25, r5
    5b12:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5b16:	0f 5f       	subi	r16, 0xFF	; 255
    5b18:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4443
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5b1a:	03 30       	cpi	r16, 0x03	; 3
    5b1c:	11 05       	cpc	r17, r1
    5b1e:	69 f7       	brne	.-38     	; 0x5afa <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    5b20:	91 01       	movw	r18, r2
    5b22:	23 50       	subi	r18, 0x03	; 3
    5b24:	31 09       	sbc	r19, r1
    5b26:	49 81       	ldd	r20, Y+1	; 0x01
    5b28:	5a 81       	ldd	r21, Y+2	; 0x02
    5b2a:	43 50       	subi	r20, 0x03	; 3
    5b2c:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    5b2e:	61 e0       	ldi	r22, 0x01	; 1
    5b30:	86 12       	cpse	r8, r22
    5b32:	11 c0       	rjmp	.+34     	; 0x5b56 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5b34:	8f ef       	ldi	r24, 0xFF	; 255
    5b36:	9f ef       	ldi	r25, 0xFF	; 255
    5b38:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    5b3c:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4448
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5b40:	26 0d       	add	r18, r6
    5b42:	37 1d       	adc	r19, r7
    5b44:	44 0d       	add	r20, r4
    5b46:	55 1d       	adc	r21, r5
    5b48:	b3 01       	movw	r22, r6
    5b4a:	6d 5f       	subi	r22, 0xFD	; 253
    5b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b4e:	c2 01       	movw	r24, r4
    5b50:	03 96       	adiw	r24, 0x03	; 3
    5b52:	0e 94 96 81 	call	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
  }
  if (strlen(line1) > 0)
    5b56:	ec 81       	ldd	r30, Y+4	; 0x04
    5b58:	fd 81       	ldd	r31, Y+5	; 0x05
    5b5a:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4441
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5b5c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5b5e:	d1 2c       	mov	r13, r1
    5b60:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    5b62:	88 23       	and	r24, r24
    5b64:	91 f1       	breq	.+100    	; 0x5bca <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4453
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    5b66:	01 90       	ld	r0, Z+
    5b68:	00 20       	and	r0, r0
    5b6a:	e9 f7       	brne	.-6      	; 0x5b66 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    5b6c:	31 97       	sbiw	r30, 0x01	; 1
    5b6e:	4c 81       	ldd	r20, Y+4	; 0x04
    5b70:	5d 81       	ldd	r21, Y+5	; 0x05
    5b72:	e4 1b       	sub	r30, r20
    5b74:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5b76:	89 2d       	mov	r24, r9
    5b78:	88 0f       	add	r24, r24
    5b7a:	89 0d       	add	r24, r9
    5b7c:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4455
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5b7e:	61 01       	movw	r12, r2
    5b80:	c8 1a       	sub	r12, r24
    5b82:	d1 08       	sbc	r13, r1
    5b84:	d6 94       	lsr	r13
    5b86:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5b88:	a3 01       	movw	r20, r6
    5b8a:	41 50       	subi	r20, 0x01	; 1
    5b8c:	51 09       	sbc	r21, r1
    5b8e:	4c 0d       	add	r20, r12
    5b90:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5b92:	66 e0       	ldi	r22, 0x06	; 6
    5b94:	e6 9f       	mul	r30, r22
    5b96:	f0 01       	movw	r30, r0
    5b98:	11 24       	eor	r1, r1
    5b9a:	9e 9e       	mul	r9, r30
    5b9c:	c0 01       	movw	r24, r0
    5b9e:	9f 9e       	mul	r9, r31
    5ba0:	90 0d       	add	r25, r0
    5ba2:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4454
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    5ba4:	69 81       	ldd	r22, Y+1	; 0x01
    5ba6:	7a 81       	ldd	r23, Y+2	; 0x02
    5ba8:	68 1b       	sub	r22, r24
    5baa:	79 0b       	sbc	r23, r25
    5bac:	76 95       	lsr	r23
    5bae:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5bb0:	64 0d       	add	r22, r4
    5bb2:	75 1d       	adc	r23, r5
    5bb4:	ee 24       	eor	r14, r14
    5bb6:	ea 94       	dec	r14
    5bb8:	fe 2c       	mov	r15, r14
    5bba:	10 e0       	ldi	r17, 0x00	; 0
    5bbc:	00 e0       	ldi	r16, 0x00	; 0
    5bbe:	29 2d       	mov	r18, r9
    5bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    5bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    5bc4:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    5bc8:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    5bca:	f5 01       	movw	r30, r10
    5bcc:	80 81       	ld	r24, Z
    5bce:	88 23       	and	r24, r24
    5bd0:	b9 f1       	breq	.+110    	; 0x5c40 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5bd2:	01 90       	ld	r0, Z+
    5bd4:	00 20       	and	r0, r0
    5bd6:	e9 f7       	brne	.-6      	; 0x5bd2 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    5bd8:	9f 01       	movw	r18, r30
    5bda:	21 50       	subi	r18, 0x01	; 1
    5bdc:	31 09       	sbc	r19, r1
    5bde:	2a 19       	sub	r18, r10
    5be0:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5be2:	8b 81       	ldd	r24, Y+3	; 0x03
    5be4:	88 0f       	add	r24, r24
    5be6:	fb 81       	ldd	r31, Y+3	; 0x03
    5be8:	8f 0f       	add	r24, r31
    5bea:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5bec:	a1 01       	movw	r20, r2
    5bee:	48 1b       	sub	r20, r24
    5bf0:	51 09       	sbc	r21, r1
    5bf2:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4460
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    5bf4:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5bf6:	70 e0       	ldi	r23, 0x00	; 0
    5bf8:	0e 94 ce b1 	call	0x1639c	; 0x1639c <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    5bfc:	51 e0       	ldi	r21, 0x01	; 1
    5bfe:	65 1a       	sub	r6, r21
    5c00:	71 08       	sbc	r7, r1
    5c02:	c6 0c       	add	r12, r6
    5c04:	d7 1c       	adc	r13, r7
    5c06:	ab 01       	movw	r20, r22
    5c08:	4c 0d       	add	r20, r12
    5c0a:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5c0c:	66 e0       	ldi	r22, 0x06	; 6
    5c0e:	26 9f       	mul	r18, r22
    5c10:	90 01       	movw	r18, r0
    5c12:	11 24       	eor	r1, r1
    5c14:	f2 9f       	mul	r31, r18
    5c16:	c0 01       	movw	r24, r0
    5c18:	f3 9f       	mul	r31, r19
    5c1a:	90 0d       	add	r25, r0
    5c1c:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5c1e:	69 81       	ldd	r22, Y+1	; 0x01
    5c20:	7a 81       	ldd	r23, Y+2	; 0x02
    5c22:	68 1b       	sub	r22, r24
    5c24:	79 0b       	sbc	r23, r25
    5c26:	76 95       	lsr	r23
    5c28:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    5c2a:	64 0d       	add	r22, r4
    5c2c:	75 1d       	adc	r23, r5
    5c2e:	ee 24       	eor	r14, r14
    5c30:	ea 94       	dec	r14
    5c32:	fe 2c       	mov	r15, r14
    5c34:	10 e0       	ldi	r17, 0x00	; 0
    5c36:	00 e0       	ldi	r16, 0x00	; 0
    5c38:	2f 2f       	mov	r18, r31
    5c3a:	c5 01       	movw	r24, r10
    5c3c:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
  }
}
    5c40:	0f 90       	pop	r0
    5c42:	0f 90       	pop	r0
    5c44:	0f 90       	pop	r0
    5c46:	0f 90       	pop	r0
    5c48:	0f 90       	pop	r0
    5c4a:	df 91       	pop	r29
    5c4c:	cf 91       	pop	r28
    5c4e:	1f 91       	pop	r17
    5c50:	0f 91       	pop	r16
    5c52:	ff 90       	pop	r15
    5c54:	ef 90       	pop	r14
    5c56:	df 90       	pop	r13
    5c58:	cf 90       	pop	r12
    5c5a:	bf 90       	pop	r11
    5c5c:	af 90       	pop	r10
    5c5e:	9f 90       	pop	r9
    5c60:	8f 90       	pop	r8
    5c62:	7f 90       	pop	r7
    5c64:	6f 90       	pop	r6
    5c66:	5f 90       	pop	r5
    5c68:	4f 90       	pop	r4
    5c6a:	3f 90       	pop	r3
    5c6c:	2f 90       	pop	r2
    5c6e:	08 95       	ret

00005c70 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5c70:	4f 92       	push	r4
    5c72:	5f 92       	push	r5
    5c74:	6f 92       	push	r6
    5c76:	7f 92       	push	r7
    5c78:	8f 92       	push	r8
    5c7a:	9f 92       	push	r9
    5c7c:	af 92       	push	r10
    5c7e:	bf 92       	push	r11
    5c80:	cf 92       	push	r12
    5c82:	df 92       	push	r13
    5c84:	ef 92       	push	r14
    5c86:	ff 92       	push	r15
    5c88:	0f 93       	push	r16
    5c8a:	cf 93       	push	r28
    5c8c:	df 93       	push	r29
    5c8e:	ec 01       	movw	r28, r24
    5c90:	6b 01       	movw	r12, r22
    5c92:	2a 01       	movw	r4, r20
    5c94:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5c96:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5c9a:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    5c9e:	f1 2c       	mov	r15, r1
    5ca0:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5ca2:	3b 01       	movw	r6, r22
    5ca4:	62 0e       	add	r6, r18
    5ca6:	73 1e       	adc	r7, r19
    5ca8:	4c 01       	movw	r8, r24
    5caa:	84 0e       	add	r8, r20
    5cac:	95 1e       	adc	r9, r21
    5cae:	93 01       	movw	r18, r6
    5cb0:	2e 19       	sub	r18, r14
    5cb2:	3f 09       	sbc	r19, r15
    5cb4:	a4 01       	movw	r20, r8
    5cb6:	4e 19       	sub	r20, r14
    5cb8:	5f 09       	sbc	r21, r15
    5cba:	b7 01       	movw	r22, r14
    5cbc:	6c 0d       	add	r22, r12
    5cbe:	7d 1d       	adc	r23, r13
    5cc0:	c7 01       	movw	r24, r14
    5cc2:	8c 0f       	add	r24, r28
    5cc4:	9d 1f       	adc	r25, r29
    5cc6:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5cca:	8f ef       	ldi	r24, 0xFF	; 255
    5ccc:	e8 1a       	sub	r14, r24
    5cce:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5cd0:	83 e0       	ldi	r24, 0x03	; 3
    5cd2:	e8 16       	cp	r14, r24
    5cd4:	f1 04       	cpc	r15, r1
    5cd6:	59 f7       	brne	.-42     	; 0x5cae <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5cd8:	8f ef       	ldi	r24, 0xFF	; 255
    5cda:	9f ef       	ldi	r25, 0xFF	; 255
    5cdc:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    5ce0:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4391
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5ce4:	83 e0       	ldi	r24, 0x03	; 3
    5ce6:	48 1a       	sub	r4, r24
    5ce8:	51 08       	sbc	r5, r1
    5cea:	4c 0e       	add	r4, r28
    5cec:	5d 1e       	adc	r5, r29
    5cee:	23 96       	adiw	r28, 0x03	; 3
    5cf0:	95 01       	movw	r18, r10
    5cf2:	23 50       	subi	r18, 0x03	; 3
    5cf4:	31 09       	sbc	r19, r1
    5cf6:	2c 0d       	add	r18, r12
    5cf8:	3d 1d       	adc	r19, r13
    5cfa:	b6 01       	movw	r22, r12
    5cfc:	6d 5f       	subi	r22, 0xFD	; 253
    5cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5d00:	a2 01       	movw	r20, r4
    5d02:	ce 01       	movw	r24, r28
    5d04:	0e 94 96 81 	call	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4392
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    5d08:	60 91 d4 08 	lds	r22, 0x08D4	; 0x8008d4 <menu_slider_data_max>
    5d0c:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <menu_slider_data_max_element>
    5d10:	68 1b       	sub	r22, r24
    5d12:	77 0b       	sbc	r23, r23
    5d14:	6f 5f       	subi	r22, 0xFF	; 255
    5d16:	7f 4f       	sbci	r23, 0xFF	; 255
    5d18:	c5 01       	movw	r24, r10
    5d1a:	0e 94 ce b1 	call	0x1639c	; 0x1639c <__udivmodhi4>
    5d1e:	e0 2f       	mov	r30, r16
    5d20:	f0 e0       	ldi	r31, 0x00	; 0
    5d22:	e3 53       	subi	r30, 0x33	; 51
    5d24:	f7 4f       	sbci	r31, 0xF7	; 247
    5d26:	80 81       	ld	r24, Z
    5d28:	86 9f       	mul	r24, r22
    5d2a:	60 2d       	mov	r22, r0
    5d2c:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5d2e:	8a e9       	ldi	r24, 0x9A	; 154
    5d30:	96 ed       	ldi	r25, 0xD6	; 214
    5d32:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    5d36:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4394
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5d3a:	6c 0d       	add	r22, r12
    5d3c:	7d 2d       	mov	r23, r13
    5d3e:	71 1d       	adc	r23, r1
    5d40:	9b 01       	movw	r18, r22
    5d42:	26 5f       	subi	r18, 0xF6	; 246
    5d44:	3f 4f       	sbci	r19, 0xFF	; 255
    5d46:	6b 5f       	subi	r22, 0xFB	; 251
    5d48:	7f 4f       	sbci	r23, 0xFF	; 255
    5d4a:	a2 01       	movw	r20, r4
    5d4c:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4395
}
    5d4e:	df 91       	pop	r29
    5d50:	cf 91       	pop	r28
    5d52:	0f 91       	pop	r16
    5d54:	ff 90       	pop	r15
    5d56:	ef 90       	pop	r14
    5d58:	df 90       	pop	r13
    5d5a:	cf 90       	pop	r12
    5d5c:	bf 90       	pop	r11
    5d5e:	af 90       	pop	r10
    5d60:	9f 90       	pop	r9
    5d62:	8f 90       	pop	r8
    5d64:	7f 90       	pop	r7
    5d66:	6f 90       	pop	r6
    5d68:	5f 90       	pop	r5
    5d6a:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4394
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5d6c:	0c 94 96 81 	jmp	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>

00005d70 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5d70:	6f 92       	push	r6
    5d72:	7f 92       	push	r7
    5d74:	8f 92       	push	r8
    5d76:	9f 92       	push	r9
    5d78:	af 92       	push	r10
    5d7a:	bf 92       	push	r11
    5d7c:	cf 92       	push	r12
    5d7e:	df 92       	push	r13
    5d80:	ef 92       	push	r14
    5d82:	ff 92       	push	r15
    5d84:	0f 93       	push	r16
    5d86:	1f 93       	push	r17
    5d88:	cf 93       	push	r28
    5d8a:	df 93       	push	r29
    5d8c:	6c 01       	movw	r12, r24
    5d8e:	8b 01       	movw	r16, r22
    5d90:	3a 01       	movw	r6, r20
    5d92:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5d94:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5d98:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    5d9c:	f1 2c       	mov	r15, r1
    5d9e:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5da0:	4b 01       	movw	r8, r22
    5da2:	82 0e       	add	r8, r18
    5da4:	93 1e       	adc	r9, r19
    5da6:	5c 01       	movw	r10, r24
    5da8:	a4 0e       	add	r10, r20
    5daa:	b5 1e       	adc	r11, r21
    5dac:	94 01       	movw	r18, r8
    5dae:	2e 19       	sub	r18, r14
    5db0:	3f 09       	sbc	r19, r15
    5db2:	a5 01       	movw	r20, r10
    5db4:	4e 19       	sub	r20, r14
    5db6:	5f 09       	sbc	r21, r15
    5db8:	b7 01       	movw	r22, r14
    5dba:	60 0f       	add	r22, r16
    5dbc:	71 1f       	adc	r23, r17
    5dbe:	c7 01       	movw	r24, r14
    5dc0:	8c 0d       	add	r24, r12
    5dc2:	9d 1d       	adc	r25, r13
    5dc4:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5dc8:	2f ef       	ldi	r18, 0xFF	; 255
    5dca:	e2 1a       	sub	r14, r18
    5dcc:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5dce:	83 e0       	ldi	r24, 0x03	; 3
    5dd0:	e8 16       	cp	r14, r24
    5dd2:	f1 04       	cpc	r15, r1
    5dd4:	59 f7       	brne	.-42     	; 0x5dac <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5dd6:	8f ef       	ldi	r24, 0xFF	; 255
    5dd8:	9f ef       	ldi	r25, 0xFF	; 255
    5dda:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    5dde:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4370
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5de2:	9e 01       	movw	r18, r28
    5de4:	23 50       	subi	r18, 0x03	; 3
    5de6:	31 09       	sbc	r19, r1
    5de8:	20 0f       	add	r18, r16
    5dea:	31 1f       	adc	r19, r17
    5dec:	a3 01       	movw	r20, r6
    5dee:	43 50       	subi	r20, 0x03	; 3
    5df0:	51 09       	sbc	r21, r1
    5df2:	4c 0d       	add	r20, r12
    5df4:	5d 1d       	adc	r21, r13
    5df6:	b8 01       	movw	r22, r16
    5df8:	6d 5f       	subi	r22, 0xFD	; 253
    5dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfc:	c6 01       	movw	r24, r12
    5dfe:	03 96       	adiw	r24, 0x03	; 3
    5e00:	0e 94 96 81 	call	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5e04:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5e08:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4373

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    5e0c:	8b ef       	ldi	r24, 0xFB	; 251
    5e0e:	98 e0       	ldi	r25, 0x08	; 8
    5e10:	fc 01       	movw	r30, r24
    5e12:	01 90       	ld	r0, Z+
    5e14:	00 20       	and	r0, r0
    5e16:	e9 f7       	brne	.-6      	; 0x5e12 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    5e18:	cf 01       	movw	r24, r30
    5e1a:	8c 5f       	subi	r24, 0xFC	; 252
    5e1c:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4375
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    5e1e:	ae 01       	movw	r20, r28
    5e20:	4c 50       	subi	r20, 0x0C	; 12
    5e22:	51 09       	sbc	r21, r1
    5e24:	56 95       	lsr	r21
    5e26:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5e28:	01 50       	subi	r16, 0x01	; 1
    5e2a:	11 09       	sbc	r17, r1
    5e2c:	40 0f       	add	r20, r16
    5e2e:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5e30:	f6 e0       	ldi	r31, 0x06	; 6
    5e32:	8f 9f       	mul	r24, r31
    5e34:	c0 01       	movw	r24, r0
    5e36:	11 24       	eor	r1, r1
    5e38:	88 0f       	add	r24, r24
    5e3a:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4374
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    5e3c:	b3 01       	movw	r22, r6
    5e3e:	68 1b       	sub	r22, r24
    5e40:	79 0b       	sbc	r23, r25
    5e42:	76 95       	lsr	r23
    5e44:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5e46:	6c 0d       	add	r22, r12
    5e48:	7d 1d       	adc	r23, r13
    5e4a:	ee 24       	eor	r14, r14
    5e4c:	ea 94       	dec	r14
    5e4e:	fe 2c       	mov	r15, r14
    5e50:	10 e0       	ldi	r17, 0x00	; 0
    5e52:	00 e0       	ldi	r16, 0x00	; 0
    5e54:	22 e0       	ldi	r18, 0x02	; 2
    5e56:	8b ef       	ldi	r24, 0xFB	; 251
    5e58:	98 e0       	ldi	r25, 0x08	; 8
    5e5a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
}
    5e5e:	df 91       	pop	r29
    5e60:	cf 91       	pop	r28
    5e62:	1f 91       	pop	r17
    5e64:	0f 91       	pop	r16
    5e66:	ff 90       	pop	r15
    5e68:	ef 90       	pop	r14
    5e6a:	df 90       	pop	r13
    5e6c:	cf 90       	pop	r12
    5e6e:	bf 90       	pop	r11
    5e70:	af 90       	pop	r10
    5e72:	9f 90       	pop	r9
    5e74:	8f 90       	pop	r8
    5e76:	7f 90       	pop	r7
    5e78:	6f 90       	pop	r6
    5e7a:	08 95       	ret

00005e7c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4335
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5e7c:	4f 92       	push	r4
    5e7e:	5f 92       	push	r5
    5e80:	6f 92       	push	r6
    5e82:	7f 92       	push	r7
    5e84:	8f 92       	push	r8
    5e86:	9f 92       	push	r9
    5e88:	af 92       	push	r10
    5e8a:	bf 92       	push	r11
    5e8c:	cf 92       	push	r12
    5e8e:	df 92       	push	r13
    5e90:	ef 92       	push	r14
    5e92:	ff 92       	push	r15
    5e94:	0f 93       	push	r16
    5e96:	1f 93       	push	r17
    5e98:	cf 93       	push	r28
    5e9a:	df 93       	push	r29
    5e9c:	cd b7       	in	r28, 0x3d	; 61
    5e9e:	de b7       	in	r29, 0x3e	; 62
    5ea0:	2d 97       	sbiw	r28, 0x0d	; 13
    5ea2:	0f b6       	in	r0, 0x3f	; 63
    5ea4:	f8 94       	cli
    5ea6:	de bf       	out	0x3e, r29	; 62
    5ea8:	0f be       	out	0x3f, r0	; 63
    5eaa:	cd bf       	out	0x3d, r28	; 61
    5eac:	6c 01       	movw	r12, r24
    5eae:	7b 01       	movw	r14, r22
    5eb0:	2a 01       	movw	r4, r20
    5eb2:	39 01       	movw	r6, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5eb4:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5eb8:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    5ebc:	10 e0       	ldi	r17, 0x00	; 0
    5ebe:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5ec0:	4b 01       	movw	r8, r22
    5ec2:	82 0e       	add	r8, r18
    5ec4:	93 1e       	adc	r9, r19
    5ec6:	5c 01       	movw	r10, r24
    5ec8:	a4 0e       	add	r10, r20
    5eca:	b5 1e       	adc	r11, r21
    5ecc:	94 01       	movw	r18, r8
    5ece:	20 1b       	sub	r18, r16
    5ed0:	31 0b       	sbc	r19, r17
    5ed2:	a5 01       	movw	r20, r10
    5ed4:	40 1b       	sub	r20, r16
    5ed6:	51 0b       	sbc	r21, r17
    5ed8:	b8 01       	movw	r22, r16
    5eda:	6e 0d       	add	r22, r14
    5edc:	7f 1d       	adc	r23, r15
    5ede:	c8 01       	movw	r24, r16
    5ee0:	8c 0d       	add	r24, r12
    5ee2:	9d 1d       	adc	r25, r13
    5ee4:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5ee8:	0f 5f       	subi	r16, 0xFF	; 255
    5eea:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5eec:	03 30       	cpi	r16, 0x03	; 3
    5eee:	11 05       	cpc	r17, r1
    5ef0:	69 f7       	brne	.-38     	; 0x5ecc <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x50>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5ef2:	8f ef       	ldi	r24, 0xFF	; 255
    5ef4:	9f ef       	ldi	r25, 0xFF	; 255
    5ef6:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    5efa:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5efe:	93 01       	movw	r18, r6
    5f00:	23 50       	subi	r18, 0x03	; 3
    5f02:	31 09       	sbc	r19, r1
    5f04:	2e 0d       	add	r18, r14
    5f06:	3f 1d       	adc	r19, r15
    5f08:	a2 01       	movw	r20, r4
    5f0a:	43 50       	subi	r20, 0x03	; 3
    5f0c:	51 09       	sbc	r21, r1
    5f0e:	4c 0d       	add	r20, r12
    5f10:	5d 1d       	adc	r21, r13
    5f12:	b7 01       	movw	r22, r14
    5f14:	6d 5f       	subi	r22, 0xFD	; 253
    5f16:	7f 4f       	sbci	r23, 0xFF	; 255
    5f18:	c6 01       	movw	r24, r12
    5f1a:	03 96       	adiw	r24, 0x03	; 3
    5f1c:	0e 94 96 81 	call	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4346

  if (menu_dialog_set_divider != 0)
    5f20:	00 91 cb 08 	lds	r16, 0x08CB	; 0x8008cb <menu_dialog_set_divider>
    5f24:	10 91 cc 08 	lds	r17, 0x08CC	; 0x8008cc <menu_dialog_set_divider+0x1>
    5f28:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <menu_dialog_set_variable_now>
    5f2c:	90 91 ca 08 	lds	r25, 0x08CA	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    5f30:	9e 01       	movw	r18, r28
    5f32:	2f 5f       	subi	r18, 0xFF	; 255
    5f34:	3f 4f       	sbci	r19, 0xFF	; 255
    5f36:	59 01       	movw	r10, r18
    5f38:	01 15       	cp	r16, r1
    5f3a:	11 05       	cpc	r17, r1
    5f3c:	09 f4       	brne	.+2      	; 0x5f40 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
    5f3e:	5e c0       	rjmp	.+188    	; 0x5ffc <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x180>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4348
  {
    te = menu_dialog_set_variable_now / (menu_dialog_set_divider * 1.0);
    5f40:	bc 01       	movw	r22, r24
    5f42:	99 0f       	add	r25, r25
    5f44:	88 0b       	sbc	r24, r24
    5f46:	99 0b       	sbc	r25, r25
    5f48:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    5f4c:	6a 87       	std	Y+10, r22	; 0x0a
    5f4e:	7b 87       	std	Y+11, r23	; 0x0b
    5f50:	8c 87       	std	Y+12, r24	; 0x0c
    5f52:	9d 87       	std	Y+13, r25	; 0x0d
    5f54:	b8 01       	movw	r22, r16
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	80 e0       	ldi	r24, 0x00	; 0
    5f5a:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
    5f5e:	9b 01       	movw	r18, r22
    5f60:	ac 01       	movw	r20, r24
    5f62:	6a 85       	ldd	r22, Y+10	; 0x0a
    5f64:	7b 85       	ldd	r23, Y+11	; 0x0b
    5f66:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f68:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f6a:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4349
    dtostrf(te, 4, 2, line1);
    5f6e:	85 01       	movw	r16, r10
    5f70:	22 e0       	ldi	r18, 0x02	; 2
    5f72:	44 e0       	ldi	r20, 0x04	; 4
    5f74:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5f78:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    5f7c:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4357
    itoa(menu_dialog_set_variable_now, line1, 10);
  my_lcd.Set_Draw_color(BLACK);



  tmp1 = show_string_size_width(strlen(line1), 2);
    5f80:	f5 01       	movw	r30, r10
    5f82:	01 90       	ld	r0, Z+
    5f84:	00 20       	and	r0, r0
    5f86:	e9 f7       	brne	.-6      	; 0x5f82 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x106>
    5f88:	31 97       	sbiw	r30, 0x01	; 1
    5f8a:	ea 19       	sub	r30, r10
    5f8c:	fb 09       	sbc	r31, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4359
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    5f8e:	a3 01       	movw	r20, r6
    5f90:	4c 50       	subi	r20, 0x0C	; 12
    5f92:	51 09       	sbc	r21, r1
    5f94:	56 95       	lsr	r21
    5f96:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4360
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5f98:	31 e0       	ldi	r19, 0x01	; 1
    5f9a:	e3 1a       	sub	r14, r19
    5f9c:	f1 08       	sbc	r15, r1
    5f9e:	4e 0d       	add	r20, r14
    5fa0:	5f 1d       	adc	r21, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5fa2:	86 e0       	ldi	r24, 0x06	; 6
    5fa4:	e8 9f       	mul	r30, r24
    5fa6:	f0 01       	movw	r30, r0
    5fa8:	11 24       	eor	r1, r1
    5faa:	ee 0f       	add	r30, r30
    5fac:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4358
  my_lcd.Set_Draw_color(BLACK);



  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    5fae:	b2 01       	movw	r22, r4
    5fb0:	6e 1b       	sub	r22, r30
    5fb2:	7f 0b       	sbc	r23, r31
    5fb4:	76 95       	lsr	r23
    5fb6:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4360
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5fb8:	6c 0d       	add	r22, r12
    5fba:	7d 1d       	adc	r23, r13
    5fbc:	ee 24       	eor	r14, r14
    5fbe:	ea 94       	dec	r14
    5fc0:	fe 2c       	mov	r15, r14
    5fc2:	10 e0       	ldi	r17, 0x00	; 0
    5fc4:	00 e0       	ldi	r16, 0x00	; 0
    5fc6:	22 e0       	ldi	r18, 0x02	; 2
    5fc8:	c5 01       	movw	r24, r10
    5fca:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4361
}
    5fce:	2d 96       	adiw	r28, 0x0d	; 13
    5fd0:	0f b6       	in	r0, 0x3f	; 63
    5fd2:	f8 94       	cli
    5fd4:	de bf       	out	0x3e, r29	; 62
    5fd6:	0f be       	out	0x3f, r0	; 63
    5fd8:	cd bf       	out	0x3d, r28	; 61
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	1f 91       	pop	r17
    5fe0:	0f 91       	pop	r16
    5fe2:	ff 90       	pop	r15
    5fe4:	ef 90       	pop	r14
    5fe6:	df 90       	pop	r13
    5fe8:	cf 90       	pop	r12
    5fea:	bf 90       	pop	r11
    5fec:	af 90       	pop	r10
    5fee:	9f 90       	pop	r9
    5ff0:	8f 90       	pop	r8
    5ff2:	7f 90       	pop	r7
    5ff4:	6f 90       	pop	r6
    5ff6:	5f 90       	pop	r5
    5ff8:	4f 90       	pop	r4
    5ffa:	08 95       	ret
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    5ffc:	4a e0       	ldi	r20, 0x0A	; 10
    5ffe:	b9 01       	movw	r22, r18
    6000:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
    6004:	b9 cf       	rjmp	.-142    	; 0x5f78 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xfc>

00006006 <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z37display_element_default_ring_set_tempjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4162
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
}
////
void display_element_default_ring_set_temp(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6006:	ef 92       	push	r14
    6008:	0f 93       	push	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163
  display_element_dialog_set_variable(x, y, size_x, size_y, args1, args2);
    600a:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4164
}
    600e:	0f 91       	pop	r16
    6010:	ef 90       	pop	r14
    6012:	08 95       	ret

00006014 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4219
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    6014:	af 92       	push	r10
    6016:	bf 92       	push	r11
    6018:	cf 92       	push	r12
    601a:	df 92       	push	r13
    601c:	ef 92       	push	r14
    601e:	ff 92       	push	r15
    6020:	0f 93       	push	r16
    6022:	1f 93       	push	r17
    6024:	cf 93       	push	r28
    6026:	df 93       	push	r29
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	60 97       	sbiw	r28, 0x10	; 16
    602e:	0f b6       	in	r0, 0x3f	; 63
    6030:	f8 94       	cli
    6032:	de bf       	out	0x3e, r29	; 62
    6034:	0f be       	out	0x3f, r0	; 63
    6036:	cd bf       	out	0x3d, r28	; 61
    6038:	5c 01       	movw	r10, r24
    603a:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    603c:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    6040:	9e 01       	movw	r18, r28
    6042:	2f 5f       	subi	r18, 0xFF	; 255
    6044:	3f 4f       	sbci	r19, 0xFF	; 255
    6046:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4221
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    6048:	80 fd       	sbrc	r24, 0
    604a:	4e c0       	rjmp	.+156    	; 0x60e8 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    604c:	80 91 66 10 	lds	r24, 0x1066	; 0x801066 <now>
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	80 53       	subi	r24, 0x30	; 48
    6054:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4223
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    6056:	9f 93       	push	r25
    6058:	8f 93       	push	r24
    605a:	80 91 67 10 	lds	r24, 0x1067	; 0x801067 <now+0x1>
    605e:	1f 92       	push	r1
    6060:	8f 93       	push	r24
    6062:	80 91 68 10 	lds	r24, 0x1068	; 0x801068 <now+0x2>
    6066:	1f 92       	push	r1
    6068:	8f 93       	push	r24
    606a:	8c e5       	ldi	r24, 0x5C	; 92
    606c:	93 e0       	ldi	r25, 0x03	; 3
    606e:	9f 93       	push	r25
    6070:	8f 93       	push	r24
    6072:	3f 93       	push	r19
    6074:	2f 93       	push	r18
    6076:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
    607a:	0f b6       	in	r0, 0x3f	; 63
    607c:	f8 94       	cli
    607e:	de bf       	out	0x3e, r29	; 62
    6080:	0f be       	out	0x3f, r0	; 63
    6082:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6084:	8f ef       	ldi	r24, 0xFF	; 255
    6086:	9f ef       	ldi	r25, 0xFF	; 255
    6088:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    608c:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4229
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    6090:	4e e8       	ldi	r20, 0x8E	; 142
    6092:	50 e0       	ldi	r21, 0x00	; 0
    6094:	b8 01       	movw	r22, r16
    6096:	c5 01       	movw	r24, r10
    6098:	0e 94 27 81 	call	0x1024e	; 0x1024e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    609c:	b8 01       	movw	r22, r16
    609e:	6f 5f       	subi	r22, 0xFF	; 255
    60a0:	7f 4f       	sbci	r23, 0xFF	; 255
    60a2:	4e e8       	ldi	r20, 0x8E	; 142
    60a4:	50 e0       	ldi	r21, 0x00	; 0
    60a6:	c5 01       	movw	r24, r10
    60a8:	0e 94 27 81 	call	0x1024e	; 0x1024e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    60ac:	a8 01       	movw	r20, r16
    60ae:	4e 5f       	subi	r20, 0xFE	; 254
    60b0:	5f 4f       	sbci	r21, 0xFF	; 255
    60b2:	ee 24       	eor	r14, r14
    60b4:	ea 94       	dec	r14
    60b6:	fe 2c       	mov	r15, r14
    60b8:	10 e0       	ldi	r17, 0x00	; 0
    60ba:	00 e0       	ldi	r16, 0x00	; 0
    60bc:	23 e0       	ldi	r18, 0x03	; 3
    60be:	b5 01       	movw	r22, r10
    60c0:	c6 01       	movw	r24, r12
    60c2:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4230
}
    60c6:	60 96       	adiw	r28, 0x10	; 16
    60c8:	0f b6       	in	r0, 0x3f	; 63
    60ca:	f8 94       	cli
    60cc:	de bf       	out	0x3e, r29	; 62
    60ce:	0f be       	out	0x3f, r0	; 63
    60d0:	cd bf       	out	0x3d, r28	; 61
    60d2:	df 91       	pop	r29
    60d4:	cf 91       	pop	r28
    60d6:	1f 91       	pop	r17
    60d8:	0f 91       	pop	r16
    60da:	ff 90       	pop	r15
    60dc:	ef 90       	pop	r14
    60de:	df 90       	pop	r13
    60e0:	cf 90       	pop	r12
    60e2:	bf 90       	pop	r11
    60e4:	af 90       	pop	r10
    60e6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4227
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    60e8:	6b e6       	ldi	r22, 0x6B	; 107
    60ea:	73 e0       	ldi	r23, 0x03	; 3
    60ec:	c9 01       	movw	r24, r18
    60ee:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
    60f2:	c8 cf       	rjmp	.-112    	; 0x6084 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

000060f4 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1514



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    60f4:	4f 92       	push	r4
    60f6:	5f 92       	push	r5
    60f8:	6f 92       	push	r6
    60fa:	7f 92       	push	r7
    60fc:	8f 92       	push	r8
    60fe:	9f 92       	push	r9
    6100:	af 92       	push	r10
    6102:	bf 92       	push	r11
    6104:	cf 92       	push	r12
    6106:	df 92       	push	r13
    6108:	ef 92       	push	r14
    610a:	ff 92       	push	r15
    610c:	0f 93       	push	r16
    610e:	1f 93       	push	r17
    6110:	cf 93       	push	r28
    6112:	df 93       	push	r29
    6114:	1f 92       	push	r1
    6116:	cd b7       	in	r28, 0x3d	; 61
    6118:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1525
  uint16_t color_background;
  uint8_t args1;
  Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
    611a:	ce 01       	movw	r24, r28
    611c:	01 96       	adiw	r24, 0x01	; 1
    611e:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <MenuHistoryGetMenu(unsigned char*)>
    6122:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
  attr = pgm_read_byte(&current->atributes);
    6124:	fc 01       	movw	r30, r24
    6126:	ea 5a       	subi	r30, 0xAA	; 170
    6128:	fd 4f       	sbci	r31, 0xFD	; 253
    612a:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
  x = pgm_read_word(&current->x);
    612c:	38 97       	sbiw	r30, 0x08	; 8
    612e:	c5 90       	lpm	r12, Z+
    6130:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
  y = pgm_read_word(&current->y);
    6132:	fc 01       	movw	r30, r24
    6134:	e0 5b       	subi	r30, 0xB0	; 176
    6136:	fd 4f       	sbci	r31, 0xFD	; 253
    6138:	e5 90       	lpm	r14, Z+
    613a:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1529
  size_x = pgm_read_word(&current->size_x);
    613c:	fc 01       	movw	r30, r24
    613e:	ee 5a       	subi	r30, 0xAE	; 174
    6140:	fd 4f       	sbci	r31, 0xFD	; 253
    6142:	a5 90       	lpm	r10, Z+
    6144:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1530
  size_y = pgm_read_word(&current->size_y);
    6146:	fc 01       	movw	r30, r24
    6148:	ec 5a       	subi	r30, 0xAC	; 172
    614a:	fd 4f       	sbci	r31, 0xFD	; 253
    614c:	65 90       	lpm	r6, Z+
    614e:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1531
  color_background = pgm_read_word(&current->color_background);
    6150:	fc 01       	movw	r30, r24
    6152:	e9 5a       	subi	r30, 0xA9	; 169
    6154:	fd 4f       	sbci	r31, 0xFD	; 253
    6156:	85 90       	lpm	r8, Z+
    6158:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1533

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    615a:	50 fe       	sbrs	r5, 0
    615c:	03 c0       	rjmp	.+6      	; 0x6164 <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628

}
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    615e:	c4 01       	movw	r24, r8
    6160:	0e 94 00 82 	call	0x10400	; 0x10400 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1538
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    6164:	51 fe       	sbrs	r5, 1
    6166:	0e c0       	rjmp	.+28     	; 0x6184 <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6168:	90 92 e1 0d 	sts	0x0DE1, r9	; 0x800de1 <my_lcd+0xb>
    616c:	80 92 e0 0d 	sts	0x0DE0, r8	; 0x800de0 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    6170:	97 01       	movw	r18, r14
    6172:	26 0d       	add	r18, r6
    6174:	37 1d       	adc	r19, r7
    6176:	a6 01       	movw	r20, r12
    6178:	4a 0d       	add	r20, r10
    617a:	5b 1d       	adc	r21, r11
    617c:	b7 01       	movw	r22, r14
    617e:	c6 01       	movw	r24, r12
    6180:	0e 94 96 81 	call	0x1032c	; 0x1032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1544
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    6184:	52 fe       	sbrs	r5, 2
    6186:	2a c0       	rjmp	.+84     	; 0x61dc <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6188:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    618c:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    6190:	91 2c       	mov	r9, r1
    6192:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1549
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    6194:	6e 0c       	add	r6, r14
    6196:	7f 1c       	adc	r7, r15
    6198:	26 01       	movw	r4, r12
    619a:	4a 0c       	add	r4, r10
    619c:	5b 1c       	adc	r5, r11
    619e:	93 01       	movw	r18, r6
    61a0:	28 19       	sub	r18, r8
    61a2:	39 09       	sbc	r19, r9
    61a4:	a2 01       	movw	r20, r4
    61a6:	48 19       	sub	r20, r8
    61a8:	59 09       	sbc	r21, r9
    61aa:	b7 01       	movw	r22, r14
    61ac:	c6 01       	movw	r24, r12
    61ae:	88 0d       	add	r24, r8
    61b0:	99 1d       	adc	r25, r9
    61b2:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1550
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    61b6:	a5 01       	movw	r20, r10
    61b8:	48 19       	sub	r20, r8
    61ba:	59 09       	sbc	r21, r9
    61bc:	b7 01       	movw	r22, r14
    61be:	69 5e       	subi	r22, 0xE9	; 233
    61c0:	7f 4f       	sbci	r23, 0xFF	; 255
    61c2:	c6 01       	movw	r24, r12
    61c4:	0e 94 27 81 	call	0x1024e	; 0x1024e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    61c8:	8f ef       	ldi	r24, 0xFF	; 255
    61ca:	88 1a       	sub	r8, r24
    61cc:	98 0a       	sbc	r9, r24
    61ce:	ef ef       	ldi	r30, 0xFF	; 255
    61d0:	ee 1a       	sub	r14, r30
    61d2:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1547
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    61d4:	f4 e0       	ldi	r31, 0x04	; 4
    61d6:	8f 16       	cp	r8, r31
    61d8:	91 04       	cpc	r9, r1
    61da:	09 f7       	brne	.-62     	; 0x619e <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1553
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt =  pgm_read_word(&current->preload_function);
    61dc:	f8 01       	movw	r30, r16
    61de:	e0 5a       	subi	r30, 0xA0	; 160
    61e0:	fd 4f       	sbci	r31, 0xFD	; 253
    61e2:	25 91       	lpm	r18, Z+
    61e4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1554
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
    61e6:	f8 01       	movw	r30, r16
    61e8:	e3 5b       	subi	r30, 0xB3	; 179
    61ea:	fd 4f       	sbci	r31, 0xFD	; 253
    61ec:	e4 91       	lpm	r30, Z
    61ee:	40 e0       	ldi	r20, 0x00	; 0
    61f0:	70 e0       	ldi	r23, 0x00	; 0
    61f2:	60 e0       	ldi	r22, 0x00	; 0
    61f4:	8e 2f       	mov	r24, r30
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	f9 01       	movw	r30, r18
    61fa:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1556

}
    61fc:	0f 90       	pop	r0
    61fe:	df 91       	pop	r29
    6200:	cf 91       	pop	r28
    6202:	1f 91       	pop	r17
    6204:	0f 91       	pop	r16
    6206:	ff 90       	pop	r15
    6208:	ef 90       	pop	r14
    620a:	df 90       	pop	r13
    620c:	cf 90       	pop	r12
    620e:	bf 90       	pop	r11
    6210:	af 90       	pop	r10
    6212:	9f 90       	pop	r9
    6214:	8f 90       	pop	r8
    6216:	7f 90       	pop	r7
    6218:	6f 90       	pop	r6
    621a:	5f 90       	pop	r5
    621c:	4f 90       	pop	r4
    621e:	08 95       	ret

00006220 <MenuHistoryNextMenu(unsigned char, unsigned char)>:
_Z19MenuHistoryNextMenuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1577
  }
}
///
void MenuHistoryNextMenu(uint8_t id, uint8_t args1)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    6220:	20 91 8c 08 	lds	r18, 0x088C	; 0x80088c <MenuHistoryIndex>
    6224:	2a 30       	cpi	r18, 0x0A	; 10
    6226:	70 f4       	brcc	.+28     	; 0x6244 <MenuHistoryNextMenu(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1579
  {
    MenuHistoryIndex++;
    6228:	2f 5f       	subi	r18, 0xFF	; 255
    622a:	20 93 8c 08 	sts	0x088C, r18	; 0x80088c <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1580
    MenuHistory[MenuHistoryIndex] = id;
    622e:	30 e0       	ldi	r19, 0x00	; 0
    6230:	f9 01       	movw	r30, r18
    6232:	ee 57       	subi	r30, 0x7E	; 126
    6234:	f7 4f       	sbci	r31, 0xF7	; 247
    6236:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1581
    Global_menu_args1[MenuHistoryIndex] = args1;
    6238:	20 59       	subi	r18, 0x90	; 144
    623a:	37 4f       	sbci	r19, 0xF7	; 247
    623c:	f9 01       	movw	r30, r18
    623e:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1582
    MenuPrepareStyle();
    6240:	0c 94 7a 30 	jmp	0x60f4	; 0x60f4 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1584
  }
}
    6244:	08 95       	ret

00006246 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4662
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t idx)
{
    6246:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    6248:	8b e0       	ldi	r24, 0x0B	; 11
    624a:	68 9f       	mul	r22, r24
    624c:	f0 01       	movw	r30, r0
    624e:	11 24       	eor	r1, r1
    6250:	e5 52       	subi	r30, 0x25	; 37
    6252:	f6 4f       	sbci	r31, 0xF6	; 246
    6254:	82 85       	ldd	r24, Z+10	; 0x0a
    6256:	8f 3f       	cpi	r24, 0xFF	; 255
    6258:	a1 f4       	brne	.+40     	; 0x6282 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char)+0x3c>
    625a:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4666
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    625c:	60 e0       	ldi	r22, 0x00	; 0
    625e:	84 e6       	ldi	r24, 0x64	; 100
    6260:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4667
    dialog_yes_function = &tds_associate;
    6264:	8c ec       	ldi	r24, 0xCC	; 204
    6266:	93 e5       	ldi	r25, 0x53	; 83
    6268:	90 93 f7 08 	sts	0x08F7, r25	; 0x8008f7 <dialog_yes_function+0x1>
    626c:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4668
    dialog_yes_args1 = idx;
    6270:	c0 93 f5 08 	sts	0x08F5, r28	; 0x8008f5 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
    strcpy_P(dialog_text, text_associovat_tds);
    6274:	6a e4       	ldi	r22, 0x4A	; 74
    6276:	74 e3       	ldi	r23, 0x34	; 52
    6278:	85 ed       	ldi	r24, 0xD5	; 213
    627a:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
  }
}
    627c:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    627e:	0c 94 07 a8 	jmp	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4673
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6282:	68 2f       	mov	r22, r24
    6284:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
  }
}
    6286:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4673
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6288:	0c 94 10 31 	jmp	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>

0000628c <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1567

/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{

  if (MenuHistoryIndex > 0)
    628c:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <MenuHistoryIndex>
    6290:	88 23       	and	r24, r24
    6292:	29 f0       	breq	.+10     	; 0x629e <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1569
  {
    MenuHistoryIndex--;
    6294:	81 50       	subi	r24, 0x01	; 1
    6296:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1570
    MenuPrepareStyle();
    629a:	0c 94 7a 30 	jmp	0x60f4	; 0x60f4 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1573

  }
}
    629e:	08 95       	ret

000062a0 <dialog_set_variable_button_click(unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2)
{
  dialog_save_variable_function(args1, args2);
    62a0:	70 e0       	ldi	r23, 0x00	; 0
    62a2:	e0 91 f9 08 	lds	r30, 0x08F9	; 0x8008f9 <dialog_save_variable_function>
    62a6:	f0 91 fa 08 	lds	r31, 0x08FA	; 0x8008fa <dialog_save_variable_function+0x1>
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
  MenuHistoryPrevMenu();
    62ae:	0c 94 46 31 	jmp	0x628c	; 0x628c <MenuHistoryPrevMenu()>

000062b2 <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0);
    62b2:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <dialog_yes_args1>
    62b6:	e0 91 f6 08 	lds	r30, 0x08F6	; 0x8008f6 <dialog_yes_function>
    62ba:	f0 91 f7 08 	lds	r31, 0x08F7	; 0x8008f7 <dialog_yes_function+0x1>
    62be:	70 e0       	ldi	r23, 0x00	; 0
    62c0:	60 e0       	ldi	r22, 0x00	; 0
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1891
  MenuHistoryPrevMenu();
    62c6:	0c 94 46 31 	jmp	0x628c	; 0x628c <MenuHistoryPrevMenu()>

000062ca <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    62ca:	cf 93       	push	r28
    62cc:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    62ce:	68 2f       	mov	r22, r24
    62d0:	89 e8       	ldi	r24, 0x89	; 137
    62d2:	9b e0       	ldi	r25, 0x0B	; 11
    62d4:	0e 94 b0 7c 	call	0xf960	; 0xf960 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    62d8:	8c 2f       	mov	r24, r28
    62da:	cc 0f       	add	r28, r28
    62dc:	99 0b       	sbc	r25, r25
    62de:	cf 91       	pop	r28
    62e0:	08 95       	ret

000062e2 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    62e2:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    62e4:	82 95       	swap	r24
    62e6:	88 0f       	add	r24, r24
    62e8:	80 7e       	andi	r24, 0xE0	; 224
    62ea:	68 e0       	ldi	r22, 0x08	; 8
    62ec:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    62ee:	c9 01       	movw	r24, r18
    62f0:	0c 94 0c 95 	jmp	0x12a18	; 0x12a18 <W5500Class::read(unsigned int, unsigned char)>

000062f4 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    62f4:	8f 92       	push	r8
    62f6:	9f 92       	push	r9
    62f8:	af 92       	push	r10
    62fa:	bf 92       	push	r11
    62fc:	cf 92       	push	r12
    62fe:	df 92       	push	r13
    6300:	ef 92       	push	r14
    6302:	ff 92       	push	r15
    6304:	0f 93       	push	r16
    6306:	1f 93       	push	r17
    6308:	cf 93       	push	r28
    630a:	6c 01       	movw	r12, r24
    630c:	5b 01       	movw	r10, r22
    630e:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    6310:	fc 01       	movw	r30, r24
    6312:	c4 85       	ldd	r28, Z+12	; 0x0c
    6314:	c8 30       	cpi	r28, 0x08	; 8
    6316:	a1 f4       	brne	.+40     	; 0x6340 <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	f6 01       	movw	r30, r12
    631e:	93 83       	std	Z+3, r25	; 0x03
    6320:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    6322:	f1 2c       	mov	r15, r1
    6324:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    6326:	c7 01       	movw	r24, r14
    6328:	cf 91       	pop	r28
    632a:	1f 91       	pop	r17
    632c:	0f 91       	pop	r16
    632e:	ff 90       	pop	r15
    6330:	ef 90       	pop	r14
    6332:	df 90       	pop	r13
    6334:	cf 90       	pop	r12
    6336:	bf 90       	pop	r11
    6338:	af 90       	pop	r10
    633a:	9f 90       	pop	r9
    633c:	8f 90       	pop	r8
    633e:	08 95       	ret
    6340:	8a 01       	movw	r16, r20
    6342:	41 30       	cpi	r20, 0x01	; 1
    6344:	58 40       	sbci	r21, 0x08	; 8
    6346:	10 f0       	brcs	.+4      	; 0x634c <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    6348:	00 e0       	ldi	r16, 0x00	; 0
    634a:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    634c:	8c 2f       	mov	r24, r28
    634e:	0e 94 9d 86 	call	0x10d3a	; 0x10d3a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    6352:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6354:	63 e0       	ldi	r22, 0x03	; 3
    6356:	70 e0       	ldi	r23, 0x00	; 0
    6358:	8c 2f       	mov	r24, r28
    635a:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    635e:	87 31       	cpi	r24, 0x17	; 23
    6360:	11 f0       	breq	.+4      	; 0x6366 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    6362:	8c 31       	cpi	r24, 0x1C	; 28
    6364:	09 f5       	brne	.+66     	; 0x63a8 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    6366:	80 16       	cp	r8, r16
    6368:	91 06       	cpc	r9, r17
    636a:	80 f3       	brcs	.-32     	; 0x634c <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    636c:	98 01       	movw	r18, r16
    636e:	a5 01       	movw	r20, r10
    6370:	70 e0       	ldi	r23, 0x00	; 0
    6372:	60 e0       	ldi	r22, 0x00	; 0
    6374:	8c 2f       	mov	r24, r28
    6376:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    637a:	60 e2       	ldi	r22, 0x20	; 32
    637c:	70 e0       	ldi	r23, 0x00	; 0
    637e:	8c 2f       	mov	r24, r28
    6380:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    6384:	62 e0       	ldi	r22, 0x02	; 2
    6386:	70 e0       	ldi	r23, 0x00	; 0
    6388:	8c 2f       	mov	r24, r28
    638a:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    638e:	84 fd       	sbrc	r24, 4
    6390:	0e c0       	rjmp	.+28     	; 0x63ae <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6392:	63 e0       	ldi	r22, 0x03	; 3
    6394:	70 e0       	ldi	r23, 0x00	; 0
    6396:	8c 2f       	mov	r24, r28
    6398:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    639c:	81 11       	cpse	r24, r1
    639e:	f2 cf       	rjmp	.-28     	; 0x6384 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    63a0:	8c 2f       	mov	r24, r28
    63a2:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <close(unsigned char)>
    63a6:	b8 cf       	rjmp	.-144    	; 0x6318 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    63a8:	10 e0       	ldi	r17, 0x00	; 0
    63aa:	00 e0       	ldi	r16, 0x00	; 0
    63ac:	df cf       	rjmp	.-66     	; 0x636c <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    63ae:	40 e1       	ldi	r20, 0x10	; 16
    63b0:	62 e0       	ldi	r22, 0x02	; 2
    63b2:	70 e0       	ldi	r23, 0x00	; 0
    63b4:	8c 2f       	mov	r24, r28
    63b6:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    63ba:	01 2b       	or	r16, r17
    63bc:	09 f0       	breq	.+2      	; 0x63c0 <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    63be:	b3 cf       	rjmp	.-154    	; 0x6326 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    63c0:	ab cf       	rjmp	.-170    	; 0x6318 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

000063c2 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    63c2:	df 92       	push	r13
    63c4:	ef 92       	push	r14
    63c6:	ff 92       	push	r15
    63c8:	0f 93       	push	r16
    63ca:	1f 93       	push	r17
    63cc:	cf 93       	push	r28
    63ce:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    63d0:	fc 01       	movw	r30, r24
    63d2:	24 85       	ldd	r18, Z+12	; 0x0c
    63d4:	28 30       	cpi	r18, 0x08	; 8
    63d6:	51 f0       	breq	.+20     	; 0x63ec <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    63dc:	df 91       	pop	r29
    63de:	cf 91       	pop	r28
    63e0:	1f 91       	pop	r17
    63e2:	0f 91       	pop	r16
    63e4:	ff 90       	pop	r15
    63e6:	ef 90       	pop	r14
    63e8:	df 90       	pop	r13
    63ea:	08 95       	ret
    63ec:	7a 01       	movw	r14, r20
    63ee:	eb 01       	movw	r28, r22
    63f0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    63f2:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    63f4:	63 e0       	ldi	r22, 0x03	; 3
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	8d 2d       	mov	r24, r13
    63fa:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    63fe:	81 11       	cpse	r24, r1
    6400:	28 c0       	rjmp	.+80     	; 0x6452 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    6402:	f8 01       	movw	r30, r16
    6404:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    6406:	f8 01       	movw	r30, r16
    6408:	84 85       	ldd	r24, Z+12	; 0x0c
    640a:	88 30       	cpi	r24, 0x08	; 8
    640c:	29 f3       	breq	.-54     	; 0x63d8 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    640e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6412:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6416:	2f 5f       	subi	r18, 0xFF	; 255
    6418:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    641a:	19 f1       	breq	.+70     	; 0x6462 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    641c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    6420:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    6424:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    6428:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    642c:	61 e0       	ldi	r22, 0x01	; 1
    642e:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    6432:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    6434:	8f 3f       	cpi	r24, 0xFF	; 255
    6436:	c1 f4       	brne	.+48     	; 0x6468 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    6438:	8b 81       	ldd	r24, Y+3	; 0x03
    643a:	8f 3f       	cpi	r24, 0xFF	; 255
    643c:	01 f5       	brne	.+64     	; 0x647e <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    643e:	8c 81       	ldd	r24, Y+4	; 0x04
    6440:	8f 3f       	cpi	r24, 0xFF	; 255
    6442:	e9 f4       	brne	.+58     	; 0x647e <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6444:	8d 81       	ldd	r24, Y+5	; 0x05
    6446:	8f 3f       	cpi	r24, 0xFF	; 255
    6448:	d1 f4       	brne	.+52     	; 0x647e <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    644a:	88 e0       	ldi	r24, 0x08	; 8
    644c:	f8 01       	movw	r30, r16
    644e:	84 87       	std	Z+12, r24	; 0x0c
    6450:	c3 cf       	rjmp	.-122    	; 0x63d8 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    6452:	8b 7f       	andi	r24, 0xFB	; 251
    6454:	88 31       	cpi	r24, 0x18	; 24
    6456:	a9 f2       	breq	.-86     	; 0x6402 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    6458:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    645a:	f8 e0       	ldi	r31, 0x08	; 8
    645c:	df 12       	cpse	r13, r31
    645e:	ca cf       	rjmp	.-108    	; 0x63f4 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    6460:	d2 cf       	rjmp	.-92     	; 0x6406 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    6462:	20 e0       	ldi	r18, 0x00	; 0
    6464:	34 e0       	ldi	r19, 0x04	; 4
    6466:	da cf       	rjmp	.-76     	; 0x641c <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    6468:	81 11       	cpse	r24, r1
    646a:	09 c0       	rjmp	.+18     	; 0x647e <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    646c:	8b 81       	ldd	r24, Y+3	; 0x03
    646e:	81 11       	cpse	r24, r1
    6470:	06 c0       	rjmp	.+12     	; 0x647e <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6472:	8c 81       	ldd	r24, Y+4	; 0x04
    6474:	81 11       	cpse	r24, r1
    6476:	03 c0       	rjmp	.+6      	; 0x647e <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6478:	8d 81       	ldd	r24, Y+5	; 0x05
    647a:	88 23       	and	r24, r24
    647c:	31 f3       	breq	.-52     	; 0x644a <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    647e:	e1 14       	cp	r14, r1
    6480:	f1 04       	cpc	r15, r1
    6482:	19 f3       	breq	.-58     	; 0x644a <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    6484:	f8 01       	movw	r30, r16
    6486:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    6488:	ae 01       	movw	r20, r28
    648a:	4e 5f       	subi	r20, 0xFE	; 254
    648c:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    648e:	6d 2d       	mov	r22, r13
    6490:	62 95       	swap	r22
    6492:	66 0f       	add	r22, r22
    6494:	60 7e       	andi	r22, 0xE0	; 224
    6496:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    6498:	24 e0       	ldi	r18, 0x04	; 4
    649a:	30 e0       	ldi	r19, 0x00	; 0
    649c:	8c e0       	ldi	r24, 0x0C	; 12
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    64a4:	4f 2d       	mov	r20, r15
    64a6:	60 e1       	ldi	r22, 0x10	; 16
    64a8:	70 e0       	ldi	r23, 0x00	; 0
    64aa:	8d 2d       	mov	r24, r13
    64ac:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    64b0:	4e 2d       	mov	r20, r14
    64b2:	61 e1       	ldi	r22, 0x11	; 17
    64b4:	70 e0       	ldi	r23, 0x00	; 0
    64b6:	8d 2d       	mov	r24, r13
    64b8:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    64bc:	64 e0       	ldi	r22, 0x04	; 4
    64be:	70 e0       	ldi	r23, 0x00	; 0
    64c0:	8d 2d       	mov	r24, r13
    64c2:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    64c6:	c8 01       	movw	r24, r16
    64c8:	0e 94 a6 98 	call	0x1314c	; 0x1314c <EthernetClient::status()>
    64cc:	87 31       	cpi	r24, 0x17	; 23
    64ce:	61 f0       	breq	.+24     	; 0x64e8 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    64d0:	61 e0       	ldi	r22, 0x01	; 1
    64d2:	70 e0       	ldi	r23, 0x00	; 0
    64d4:	80 e0       	ldi	r24, 0x00	; 0
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    64dc:	c8 01       	movw	r24, r16
    64de:	0e 94 a6 98 	call	0x1314c	; 0x1314c <EthernetClient::status()>
    64e2:	81 11       	cpse	r24, r1
    64e4:	f0 cf       	rjmp	.-32     	; 0x64c6 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    64e6:	b1 cf       	rjmp	.-158    	; 0x644a <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	77 cf       	rjmp	.-274    	; 0x63dc <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

000064ee <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    64ee:	4f 92       	push	r4
    64f0:	5f 92       	push	r5
    64f2:	6f 92       	push	r6
    64f4:	7f 92       	push	r7
    64f6:	8f 92       	push	r8
    64f8:	9f 92       	push	r9
    64fa:	af 92       	push	r10
    64fc:	bf 92       	push	r11
    64fe:	cf 92       	push	r12
    6500:	df 92       	push	r13
    6502:	ef 92       	push	r14
    6504:	ff 92       	push	r15
    6506:	0f 93       	push	r16
    6508:	1f 93       	push	r17
    650a:	cf 93       	push	r28
    650c:	df 93       	push	r29
    650e:	cd b7       	in	r28, 0x3d	; 61
    6510:	de b7       	in	r29, 0x3e	; 62
    6512:	63 97       	sbiw	r28, 0x13	; 19
    6514:	0f b6       	in	r0, 0x3f	; 63
    6516:	f8 94       	cli
    6518:	de bf       	out	0x3e, r29	; 62
    651a:	0f be       	out	0x3f, r0	; 63
    651c:	cd bf       	out	0x3d, r28	; 61
    651e:	7c 01       	movw	r14, r24
    6520:	6b 01       	movw	r12, r22
    6522:	3a 01       	movw	r6, r20
    6524:	fb 01       	movw	r30, r22
    6526:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    6528:	8d 91       	ld	r24, X+
    652a:	81 11       	cpse	r24, r1
    652c:	fd cf       	rjmp	.-6      	; 0x6528 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    652e:	30 e0       	ldi	r19, 0x00	; 0
    6530:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    6536:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    6538:	41 91       	ld	r20, Z+
    653a:	44 23       	and	r20, r20
    653c:	01 f1       	breq	.+64     	; 0x657e <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    653e:	84 30       	cpi	r24, 0x04	; 4
    6540:	91 05       	cpc	r25, r1
    6542:	0c f0       	brlt	.+2      	; 0x6546 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    6544:	42 c0       	rjmp	.+132    	; 0x65ca <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    6546:	4e 32       	cpi	r20, 0x2E	; 46
    6548:	69 f4       	brne	.+26     	; 0x6564 <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    654a:	2f 3f       	cpi	r18, 0xFF	; 255
    654c:	31 05       	cpc	r19, r1
    654e:	09 f0       	breq	.+2      	; 0x6552 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    6550:	e4 f5       	brge	.+120    	; 0x65ca <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    6552:	d3 01       	movw	r26, r6
    6554:	a8 0f       	add	r26, r24
    6556:	b9 1f       	adc	r27, r25
    6558:	12 96       	adiw	r26, 0x02	; 2
    655a:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    655c:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    655e:	30 e0       	ldi	r19, 0x00	; 0
    6560:	20 e0       	ldi	r18, 0x00	; 0
    6562:	ea cf       	rjmp	.-44     	; 0x6538 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    6564:	52 9f       	mul	r21, r18
    6566:	b0 01       	movw	r22, r0
    6568:	53 9f       	mul	r21, r19
    656a:	70 0d       	add	r23, r0
    656c:	11 24       	eor	r1, r1
    656e:	24 2f       	mov	r18, r20
    6570:	44 0f       	add	r20, r20
    6572:	33 0b       	sbc	r19, r19
    6574:	20 53       	subi	r18, 0x30	; 48
    6576:	31 09       	sbc	r19, r1
    6578:	26 0f       	add	r18, r22
    657a:	37 1f       	adc	r19, r23
    657c:	dd cf       	rjmp	.-70     	; 0x6538 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    657e:	2f 3f       	cpi	r18, 0xFF	; 255
    6580:	31 05       	cpc	r19, r1
    6582:	09 f0       	breq	.+2      	; 0x6586 <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    6584:	14 f5       	brge	.+68     	; 0x65ca <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    6586:	84 30       	cpi	r24, 0x04	; 4
    6588:	91 05       	cpc	r25, r1
    658a:	fc f4       	brge	.+62     	; 0x65ca <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    658c:	68 0e       	add	r6, r24
    658e:	79 1e       	adc	r7, r25
    6590:	f3 01       	movw	r30, r6
    6592:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    6594:	cc 24       	eor	r12, r12
    6596:	c3 94       	inc	r12
    6598:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    659a:	c6 01       	movw	r24, r12
    659c:	63 96       	adiw	r28, 0x13	; 19
    659e:	0f b6       	in	r0, 0x3f	; 63
    65a0:	f8 94       	cli
    65a2:	de bf       	out	0x3e, r29	; 62
    65a4:	0f be       	out	0x3f, r0	; 63
    65a6:	cd bf       	out	0x3d, r28	; 61
    65a8:	df 91       	pop	r29
    65aa:	cf 91       	pop	r28
    65ac:	1f 91       	pop	r17
    65ae:	0f 91       	pop	r16
    65b0:	ff 90       	pop	r15
    65b2:	ef 90       	pop	r14
    65b4:	df 90       	pop	r13
    65b6:	cf 90       	pop	r12
    65b8:	bf 90       	pop	r11
    65ba:	af 90       	pop	r10
    65bc:	9f 90       	pop	r9
    65be:	8f 90       	pop	r8
    65c0:	7f 90       	pop	r7
    65c2:	6f 90       	pop	r6
    65c4:	5f 90       	pop	r5
    65c6:	4f 90       	pop	r4
    65c8:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    65ca:	f7 01       	movw	r30, r14
    65cc:	42 81       	ldd	r20, Z+2	; 0x02
    65ce:	53 81       	ldd	r21, Z+3	; 0x03
    65d0:	64 81       	ldd	r22, Z+4	; 0x04
    65d2:	75 81       	ldd	r23, Z+5	; 0x05
    65d4:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    65d8:	90 91 36 0c 	lds	r25, 0x0C36	; 0x800c36 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    65dc:	a0 91 37 0c 	lds	r26, 0x0C37	; 0x800c37 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    65e0:	b0 91 38 0c 	lds	r27, 0x0C38	; 0x800c38 <_ZL11INADDR_NONE.lto_priv.196+0x5>
    65e4:	48 17       	cp	r20, r24
    65e6:	59 07       	cpc	r21, r25
    65e8:	6a 07       	cpc	r22, r26
    65ea:	7b 07       	cpc	r23, r27
    65ec:	09 f4       	brne	.+2      	; 0x65f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    65ee:	00 c2       	rjmp	.+1024   	; 0x69f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    65f0:	87 01       	movw	r16, r14
    65f2:	08 5f       	subi	r16, 0xF8	; 248
    65f4:	1f 4f       	sbci	r17, 0xFF	; 255
    65f6:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    65fa:	6f 70       	andi	r22, 0x0F	; 15
    65fc:	77 27       	eor	r23, r23
    65fe:	7c 5f       	subi	r23, 0xFC	; 252
    6600:	c8 01       	movw	r24, r16
    6602:	0e 94 03 98 	call	0x13006	; 0x13006 <EthernetUDP::begin(unsigned int)>
    6606:	81 30       	cpi	r24, 0x01	; 1
    6608:	09 f0       	breq	.+2      	; 0x660c <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    660a:	f7 c1       	rjmp	.+1006   	; 0x69fa <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    660c:	82 ee       	ldi	r24, 0xE2	; 226
    660e:	92 e0       	ldi	r25, 0x02	; 2
    6610:	9a 83       	std	Y+2, r25	; 0x02
    6612:	89 83       	std	Y+1, r24	; 0x01
    6614:	f7 01       	movw	r30, r14
    6616:	82 81       	ldd	r24, Z+2	; 0x02
    6618:	93 81       	ldd	r25, Z+3	; 0x03
    661a:	a4 81       	ldd	r26, Z+4	; 0x04
    661c:	b5 81       	ldd	r27, Z+5	; 0x05
    661e:	8b 83       	std	Y+3, r24	; 0x03
    6620:	9c 83       	std	Y+4, r25	; 0x04
    6622:	ad 83       	std	Y+5, r26	; 0x05
    6624:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    6626:	45 e3       	ldi	r20, 0x35	; 53
    6628:	50 e0       	ldi	r21, 0x00	; 0
    662a:	be 01       	movw	r22, r28
    662c:	6f 5f       	subi	r22, 0xFF	; 255
    662e:	7f 4f       	sbci	r23, 0xFF	; 255
    6630:	c8 01       	movw	r24, r16
    6632:	0e 94 67 98 	call	0x130ce	; 0x130ce <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    6636:	89 2b       	or	r24, r25
    6638:	31 f4       	brne	.+12     	; 0x6646 <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    663a:	d1 2c       	mov	r13, r1
    663c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    663e:	c8 01       	movw	r24, r16
    6640:	0e 94 31 98 	call	0x13062	; 0x13062 <EthernetUDP::stop()>
    6644:	aa cf       	rjmp	.-172    	; 0x659a <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    6646:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    664a:	f7 01       	movw	r30, r14
    664c:	77 83       	std	Z+7, r23	; 0x07
    664e:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    6650:	42 e0       	ldi	r20, 0x02	; 2
    6652:	50 e0       	ldi	r21, 0x00	; 0
    6654:	b7 01       	movw	r22, r14
    6656:	6a 5f       	subi	r22, 0xFA	; 250
    6658:	7f 4f       	sbci	r23, 0xFF	; 255
    665a:	c8 01       	movw	r24, r16
    665c:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    6660:	81 e0       	ldi	r24, 0x01	; 1
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	9a 83       	std	Y+2, r25	; 0x02
    6666:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6668:	42 e0       	ldi	r20, 0x02	; 2
    666a:	50 e0       	ldi	r21, 0x00	; 0
    666c:	be 01       	movw	r22, r28
    666e:	6f 5f       	subi	r22, 0xFF	; 255
    6670:	7f 4f       	sbci	r23, 0xFF	; 255
    6672:	c8 01       	movw	r24, r16
    6674:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    6678:	80 e0       	ldi	r24, 0x00	; 0
    667a:	91 e0       	ldi	r25, 0x01	; 1
    667c:	9a 83       	std	Y+2, r25	; 0x02
    667e:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6680:	42 e0       	ldi	r20, 0x02	; 2
    6682:	50 e0       	ldi	r21, 0x00	; 0
    6684:	be 01       	movw	r22, r28
    6686:	6f 5f       	subi	r22, 0xFF	; 255
    6688:	7f 4f       	sbci	r23, 0xFF	; 255
    668a:	c8 01       	movw	r24, r16
    668c:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    6690:	1a 82       	std	Y+2, r1	; 0x02
    6692:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6694:	42 e0       	ldi	r20, 0x02	; 2
    6696:	50 e0       	ldi	r21, 0x00	; 0
    6698:	be 01       	movw	r22, r28
    669a:	6f 5f       	subi	r22, 0xFF	; 255
    669c:	7f 4f       	sbci	r23, 0xFF	; 255
    669e:	c8 01       	movw	r24, r16
    66a0:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    66a4:	42 e0       	ldi	r20, 0x02	; 2
    66a6:	50 e0       	ldi	r21, 0x00	; 0
    66a8:	be 01       	movw	r22, r28
    66aa:	6f 5f       	subi	r22, 0xFF	; 255
    66ac:	7f 4f       	sbci	r23, 0xFF	; 255
    66ae:	c8 01       	movw	r24, r16
    66b0:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    66b4:	42 e0       	ldi	r20, 0x02	; 2
    66b6:	50 e0       	ldi	r21, 0x00	; 0
    66b8:	be 01       	movw	r22, r28
    66ba:	6f 5f       	subi	r22, 0xFF	; 255
    66bc:	7f 4f       	sbci	r23, 0xFF	; 255
    66be:	c8 01       	movw	r24, r16
    66c0:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    66c4:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    66c6:	f6 01       	movw	r30, r12
    66c8:	80 81       	ld	r24, Z
    66ca:	88 23       	and	r24, r24
    66cc:	01 f1       	breq	.+64     	; 0x670e <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    66ce:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    66d0:	f6 01       	movw	r30, r12
    66d2:	81 91       	ld	r24, Z+
    66d4:	2f 01       	movw	r4, r30
    66d6:	88 23       	and	r24, r24
    66d8:	11 f0       	breq	.+4      	; 0x66de <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    66da:	8e 32       	cpi	r24, 0x2E	; 46
    66dc:	b1 f4       	brne	.+44     	; 0x670a <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    66de:	46 01       	movw	r8, r12
    66e0:	8a 18       	sub	r8, r10
    66e2:	9b 08       	sbc	r9, r11
    66e4:	18 14       	cp	r1, r8
    66e6:	19 04       	cpc	r1, r9
    66e8:	74 f4       	brge	.+28     	; 0x6706 <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    66ea:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    66ec:	41 e0       	ldi	r20, 0x01	; 1
    66ee:	50 e0       	ldi	r21, 0x00	; 0
    66f0:	be 01       	movw	r22, r28
    66f2:	63 5f       	subi	r22, 0xF3	; 243
    66f4:	7f 4f       	sbci	r23, 0xFF	; 255
    66f6:	c8 01       	movw	r24, r16
    66f8:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    66fc:	a4 01       	movw	r20, r8
    66fe:	b5 01       	movw	r22, r10
    6700:	c8 01       	movw	r24, r16
    6702:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    6706:	52 01       	movw	r10, r4
    6708:	de cf       	rjmp	.-68     	; 0x66c6 <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    670a:	62 01       	movw	r12, r4
    670c:	e1 cf       	rjmp	.-62     	; 0x66d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    670e:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    6710:	41 e0       	ldi	r20, 0x01	; 1
    6712:	50 e0       	ldi	r21, 0x00	; 0
    6714:	be 01       	movw	r22, r28
    6716:	63 5f       	subi	r22, 0xF3	; 243
    6718:	7f 4f       	sbci	r23, 0xFF	; 255
    671a:	c8 01       	movw	r24, r16
    671c:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    6720:	c1 2c       	mov	r12, r1
    6722:	dd 24       	eor	r13, r13
    6724:	d3 94       	inc	r13
    6726:	da 82       	std	Y+2, r13	; 0x02
    6728:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    672a:	42 e0       	ldi	r20, 0x02	; 2
    672c:	50 e0       	ldi	r21, 0x00	; 0
    672e:	be 01       	movw	r22, r28
    6730:	6f 5f       	subi	r22, 0xFF	; 255
    6732:	7f 4f       	sbci	r23, 0xFF	; 255
    6734:	c8 01       	movw	r24, r16
    6736:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    673a:	da 82       	std	Y+2, r13	; 0x02
    673c:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    673e:	42 e0       	ldi	r20, 0x02	; 2
    6740:	50 e0       	ldi	r21, 0x00	; 0
    6742:	be 01       	movw	r22, r28
    6744:	6f 5f       	subi	r22, 0xFF	; 255
    6746:	7f 4f       	sbci	r23, 0xFF	; 255
    6748:	c8 01       	movw	r24, r16
    674a:	0e 94 28 96 	call	0x12c50	; 0x12c50 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    674e:	c8 01       	movw	r24, r16
    6750:	0e 94 3e 98 	call	0x1307c	; 0x1307c <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    6754:	89 2b       	or	r24, r25
    6756:	09 f4       	brne	.+2      	; 0x675a <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    6758:	70 cf       	rjmp	.-288    	; 0x663a <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    675a:	f3 e0       	ldi	r31, 0x03	; 3
    675c:	af 2e       	mov	r10, r31
    675e:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    6760:	23 01       	movw	r4, r6
    6762:	22 e0       	ldi	r18, 0x02	; 2
    6764:	42 0e       	add	r4, r18
    6766:	51 1c       	adc	r5, r1
    6768:	43 c0       	rjmp	.+134    	; 0x67f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    676a:	f7 01       	movw	r30, r14
    676c:	42 81       	ldd	r20, Z+2	; 0x02
    676e:	53 81       	ldd	r21, Z+3	; 0x03
    6770:	64 81       	ldd	r22, Z+4	; 0x04
    6772:	75 81       	ldd	r23, Z+5	; 0x05
    6774:	81 8d       	ldd	r24, Z+25	; 0x19
    6776:	92 8d       	ldd	r25, Z+26	; 0x1a
    6778:	a3 8d       	ldd	r26, Z+27	; 0x1b
    677a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    677c:	48 17       	cp	r20, r24
    677e:	59 07       	cpc	r21, r25
    6780:	6a 07       	cpc	r22, r26
    6782:	7b 07       	cpc	r23, r27
    6784:	09 f0       	breq	.+2      	; 0x6788 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    6786:	2a c1       	rjmp	.+596    	; 0x69dc <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    6788:	85 8d       	ldd	r24, Z+29	; 0x1d
    678a:	96 8d       	ldd	r25, Z+30	; 0x1e
    678c:	c5 97       	sbiw	r24, 0x35	; 53
    678e:	09 f0       	breq	.+2      	; 0x6792 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    6790:	25 c1       	rjmp	.+586    	; 0x69dc <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    6792:	81 a1       	ldd	r24, Z+33	; 0x21
    6794:	92 a1       	ldd	r25, Z+34	; 0x22
    6796:	0c 97       	sbiw	r24, 0x0c	; 12
    6798:	0c f4       	brge	.+2      	; 0x679c <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    679a:	25 c1       	rjmp	.+586    	; 0x69e6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    679c:	4c e0       	ldi	r20, 0x0C	; 12
    679e:	50 e0       	ldi	r21, 0x00	; 0
    67a0:	be 01       	movw	r22, r28
    67a2:	6f 5f       	subi	r22, 0xFF	; 255
    67a4:	7f 4f       	sbci	r23, 0xFF	; 255
    67a6:	c8 01       	movw	r24, r16
    67a8:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    67ac:	8b 81       	ldd	r24, Y+3	; 0x03
    67ae:	9c 81       	ldd	r25, Y+4	; 0x04
    67b0:	98 27       	eor	r25, r24
    67b2:	89 27       	eor	r24, r25
    67b4:	98 27       	eor	r25, r24
    67b6:	9a 8b       	std	Y+18, r25	; 0x12
    67b8:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    67ba:	f7 01       	movw	r30, r14
    67bc:	46 81       	ldd	r20, Z+6	; 0x06
    67be:	57 81       	ldd	r21, Z+7	; 0x07
    67c0:	29 81       	ldd	r18, Y+1	; 0x01
    67c2:	3a 81       	ldd	r19, Y+2	; 0x02
    67c4:	42 17       	cp	r20, r18
    67c6:	53 07       	cpc	r21, r19
    67c8:	11 f4       	brne	.+4      	; 0x67ce <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    67ca:	97 fd       	sbrc	r25, 7
    67cc:	2f c0       	rjmp	.+94     	; 0x682c <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    67ce:	c8 01       	movw	r24, r16
    67d0:	0e 94 32 7e 	call	0xfc64	; 0xfc64 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    67d4:	ec ef       	ldi	r30, 0xFC	; 252
    67d6:	ce 2e       	mov	r12, r30
    67d8:	dd 24       	eor	r13, r13
    67da:	da 94       	dec	r13
    67dc:	81 e0       	ldi	r24, 0x01	; 1
    67de:	a8 1a       	sub	r10, r24
    67e0:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    67e2:	09 f4       	brne	.+2      	; 0x67e6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    67e4:	2c cf       	rjmp	.-424    	; 0x663e <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    67e6:	ff ef       	ldi	r31, 0xFF	; 255
    67e8:	cf 16       	cp	r12, r31
    67ea:	df 06       	cpc	r13, r31
    67ec:	09 f0       	breq	.+2      	; 0x67f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    67ee:	27 cf       	rjmp	.-434    	; 0x663e <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    67f0:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    67f4:	3b 01       	movw	r6, r22
    67f6:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    67f8:	c8 01       	movw	r24, r16
    67fa:	0e 94 56 97 	call	0x12eac	; 0x12eac <EthernetUDP::parsePacket()>
    67fe:	18 16       	cp	r1, r24
    6800:	19 06       	cpc	r1, r25
    6802:	0c f4       	brge	.+2      	; 0x6806 <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    6804:	b2 cf       	rjmp	.-156    	; 0x676a <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    6806:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    680a:	66 19       	sub	r22, r6
    680c:	77 09       	sbc	r23, r7
    680e:	88 09       	sbc	r24, r8
    6810:	99 09       	sbc	r25, r9
    6812:	69 38       	cpi	r22, 0x89	; 137
    6814:	73 41       	sbci	r23, 0x13	; 19
    6816:	81 05       	cpc	r24, r1
    6818:	91 05       	cpc	r25, r1
    681a:	08 f0       	brcs	.+2      	; 0x681e <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    681c:	db c0       	rjmp	.+438    	; 0x69d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    681e:	62 e3       	ldi	r22, 0x32	; 50
    6820:	70 e0       	ldi	r23, 0x00	; 0
    6822:	80 e0       	ldi	r24, 0x00	; 0
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
    682a:	e6 cf       	rjmp	.-52     	; 0x67f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    682c:	8f 70       	andi	r24, 0x0F	; 15
    682e:	92 70       	andi	r25, 0x02	; 2
    6830:	89 2b       	or	r24, r25
    6832:	41 f0       	breq	.+16     	; 0x6844 <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    6834:	c8 01       	movw	r24, r16
    6836:	0e 94 32 7e 	call	0xfc64	; 0xfc64 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    683a:	7b ef       	ldi	r23, 0xFB	; 251
    683c:	c7 2e       	mov	r12, r23
    683e:	dd 24       	eor	r13, r13
    6840:	da 94       	dec	r13
    6842:	cc cf       	rjmp	.-104    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    6844:	6f 80       	ldd	r6, Y+7	; 0x07
    6846:	78 84       	ldd	r7, Y+8	; 0x08
    6848:	76 24       	eor	r7, r6
    684a:	67 24       	eor	r6, r7
    684c:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    684e:	d1 2c       	mov	r13, r1
    6850:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    6852:	61 14       	cp	r6, r1
    6854:	71 04       	cpc	r7, r1
    6856:	d1 f4       	brne	.+52     	; 0x688c <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    6858:	c8 01       	movw	r24, r16
    685a:	0e 94 32 7e 	call	0xfc64	; 0xfc64 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    685e:	6a ef       	ldi	r22, 0xFA	; 250
    6860:	c6 2e       	mov	r12, r22
    6862:	dd 24       	eor	r13, r13
    6864:	da 94       	dec	r13
    6866:	ba cf       	rjmp	.-140    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    6868:	8d 85       	ldd	r24, Y+13	; 0x0d
    686a:	81 11       	cpse	r24, r1
    686c:	17 c0       	rjmp	.+46     	; 0x689c <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    686e:	c8 01       	movw	r24, r16
    6870:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    6874:	c8 01       	movw	r24, r16
    6876:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    687a:	c8 01       	movw	r24, r16
    687c:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    6880:	c8 01       	movw	r24, r16
    6882:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6886:	ff ef       	ldi	r31, 0xFF	; 255
    6888:	cf 1a       	sub	r12, r31
    688a:	df 0a       	sbc	r13, r31
    688c:	8d 81       	ldd	r24, Y+5	; 0x05
    688e:	9e 81       	ldd	r25, Y+6	; 0x06
    6890:	98 27       	eor	r25, r24
    6892:	89 27       	eor	r24, r25
    6894:	98 27       	eor	r25, r24
    6896:	c8 16       	cp	r12, r24
    6898:	d9 06       	cpc	r13, r25
    689a:	a8 f4       	brcc	.+42     	; 0x68c6 <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    689c:	41 e0       	ldi	r20, 0x01	; 1
    689e:	50 e0       	ldi	r21, 0x00	; 0
    68a0:	be 01       	movw	r22, r28
    68a2:	63 5f       	subi	r22, 0xF3	; 243
    68a4:	7f 4f       	sbci	r23, 0xFF	; 255
    68a6:	c8 01       	movw	r24, r16
    68a8:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    68ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    68ae:	88 23       	and	r24, r24
    68b0:	d9 f2       	breq	.-74     	; 0x6868 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    68b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    68b4:	9f ef       	ldi	r25, 0xFF	; 255
    68b6:	98 0f       	add	r25, r24
    68b8:	9d 87       	std	Y+13, r25	; 0x0d
    68ba:	88 23       	and	r24, r24
    68bc:	a9 f2       	breq	.-86     	; 0x6868 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    68be:	c8 01       	movw	r24, r16
    68c0:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    68c4:	f6 cf       	rjmp	.-20     	; 0x68b2 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    68c6:	91 2c       	mov	r9, r1
    68c8:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    68ca:	41 e0       	ldi	r20, 0x01	; 1
    68cc:	50 e0       	ldi	r21, 0x00	; 0
    68ce:	be 01       	movw	r22, r28
    68d0:	6d 5e       	subi	r22, 0xED	; 237
    68d2:	7f 4f       	sbci	r23, 0xFF	; 255
    68d4:	c8 01       	movw	r24, r16
    68d6:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    68da:	8b 89       	ldd	r24, Y+19	; 0x13
    68dc:	98 2f       	mov	r25, r24
    68de:	90 7c       	andi	r25, 0xC0	; 192
    68e0:	61 f4       	brne	.+24     	; 0x68fa <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    68e2:	88 23       	and	r24, r24
    68e4:	89 f0       	breq	.+34     	; 0x6908 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    68e6:	8b 89       	ldd	r24, Y+19	; 0x13
    68e8:	9f ef       	ldi	r25, 0xFF	; 255
    68ea:	98 0f       	add	r25, r24
    68ec:	9b 8b       	std	Y+19, r25	; 0x13
    68ee:	88 23       	and	r24, r24
    68f0:	41 f0       	breq	.+16     	; 0x6902 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    68f2:	c8 01       	movw	r24, r16
    68f4:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    68f8:	f6 cf       	rjmp	.-20     	; 0x68e6 <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    68fa:	c8 01       	movw	r24, r16
    68fc:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    6900:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    6902:	8b 89       	ldd	r24, Y+19	; 0x13
    6904:	81 11       	cpse	r24, r1
    6906:	e1 cf       	rjmp	.-62     	; 0x68ca <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    6908:	42 e0       	ldi	r20, 0x02	; 2
    690a:	50 e0       	ldi	r21, 0x00	; 0
    690c:	be 01       	movw	r22, r28
    690e:	61 5f       	subi	r22, 0xF1	; 241
    6910:	7f 4f       	sbci	r23, 0xFF	; 255
    6912:	c8 01       	movw	r24, r16
    6914:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    6918:	42 e0       	ldi	r20, 0x02	; 2
    691a:	50 e0       	ldi	r21, 0x00	; 0
    691c:	be 01       	movw	r22, r28
    691e:	63 5f       	subi	r22, 0xF3	; 243
    6920:	7f 4f       	sbci	r23, 0xFF	; 255
    6922:	c8 01       	movw	r24, r16
    6924:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6928:	c8 01       	movw	r24, r16
    692a:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    692e:	c8 01       	movw	r24, r16
    6930:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    6934:	c8 01       	movw	r24, r16
    6936:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
    693a:	c8 01       	movw	r24, r16
    693c:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    6940:	42 e0       	ldi	r20, 0x02	; 2
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	be 01       	movw	r22, r28
    6946:	6f 5e       	subi	r22, 0xEF	; 239
    6948:	7f 4f       	sbci	r23, 0xFF	; 255
    694a:	c8 01       	movw	r24, r16
    694c:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6950:	8f 85       	ldd	r24, Y+15	; 0x0f
    6952:	98 89       	ldd	r25, Y+16	; 0x10
    6954:	81 15       	cp	r24, r1
    6956:	91 40       	sbci	r25, 0x01	; 1
    6958:	e9 f4       	brne	.+58     	; 0x6994 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    695a:	cd 84       	ldd	r12, Y+13	; 0x0d
    695c:	de 84       	ldd	r13, Y+14	; 0x0e
    695e:	dc 24       	eor	r13, r12
    6960:	cd 24       	eor	r12, r13
    6962:	dc 24       	eor	r13, r12
    6964:	81 e0       	ldi	r24, 0x01	; 1
    6966:	c8 16       	cp	r12, r24
    6968:	d1 04       	cpc	r13, r1
    696a:	a1 f4       	brne	.+40     	; 0x6994 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    696c:	89 89       	ldd	r24, Y+17	; 0x11
    696e:	9a 89       	ldd	r25, Y+18	; 0x12
    6970:	81 15       	cp	r24, r1
    6972:	94 40       	sbci	r25, 0x04	; 4
    6974:	41 f0       	breq	.+16     	; 0x6986 <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    6976:	c8 01       	movw	r24, r16
    6978:	0e 94 32 7e 	call	0xfc64	; 0xfc64 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    697c:	57 ef       	ldi	r21, 0xF7	; 247
    697e:	c5 2e       	mov	r12, r21
    6980:	dd 24       	eor	r13, r13
    6982:	da 94       	dec	r13
    6984:	2b cf       	rjmp	.-426    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    6986:	44 e0       	ldi	r20, 0x04	; 4
    6988:	50 e0       	ldi	r21, 0x00	; 0
    698a:	b2 01       	movw	r22, r4
    698c:	c8 01       	movw	r24, r16
    698e:	0e 94 0d 97 	call	0x12e1a	; 0x12e1a <EthernetUDP::read(unsigned char*, unsigned int)>
    6992:	24 cf       	rjmp	.-440    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6994:	d1 2c       	mov	r13, r1
    6996:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6998:	89 89       	ldd	r24, Y+17	; 0x11
    699a:	9a 89       	ldd	r25, Y+18	; 0x12
    699c:	98 27       	eor	r25, r24
    699e:	89 27       	eor	r24, r25
    69a0:	98 27       	eor	r25, r24
    69a2:	c8 16       	cp	r12, r24
    69a4:	d9 06       	cpc	r13, r25
    69a6:	38 f4       	brcc	.+14     	; 0x69b6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    69a8:	c8 01       	movw	r24, r16
    69aa:	0e 94 2c 97 	call	0x12e58	; 0x12e58 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    69ae:	ff ef       	ldi	r31, 0xFF	; 255
    69b0:	cf 1a       	sub	r12, r31
    69b2:	df 0a       	sbc	r13, r31
    69b4:	f1 cf       	rjmp	.-30     	; 0x6998 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    69b6:	2f ef       	ldi	r18, 0xFF	; 255
    69b8:	82 1a       	sub	r8, r18
    69ba:	92 0a       	sbc	r9, r18
    69bc:	68 14       	cp	r6, r8
    69be:	79 04       	cpc	r7, r9
    69c0:	09 f0       	breq	.+2      	; 0x69c4 <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    69c2:	83 cf       	rjmp	.-250    	; 0x68ca <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    69c4:	c8 01       	movw	r24, r16
    69c6:	0e 94 32 7e 	call	0xfc64	; 0xfc64 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    69ca:	46 ef       	ldi	r20, 0xF6	; 246
    69cc:	c4 2e       	mov	r12, r20
    69ce:	dd 24       	eor	r13, r13
    69d0:	da 94       	dec	r13
    69d2:	04 cf       	rjmp	.-504    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    69d4:	cc 24       	eor	r12, r12
    69d6:	ca 94       	dec	r12
    69d8:	dc 2c       	mov	r13, r12
    69da:	00 cf       	rjmp	.-512    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    69dc:	2e ef       	ldi	r18, 0xFE	; 254
    69de:	c2 2e       	mov	r12, r18
    69e0:	dd 24       	eor	r13, r13
    69e2:	da 94       	dec	r13
    69e4:	fb ce       	rjmp	.-522    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    69e6:	9d ef       	ldi	r25, 0xFD	; 253
    69e8:	c9 2e       	mov	r12, r25
    69ea:	dd 24       	eor	r13, r13
    69ec:	da 94       	dec	r13
    69ee:	f6 ce       	rjmp	.-532    	; 0x67dc <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    69f0:	8e ef       	ldi	r24, 0xFE	; 254
    69f2:	c8 2e       	mov	r12, r24
    69f4:	dd 24       	eor	r13, r13
    69f6:	da 94       	dec	r13
    69f8:	d0 cd       	rjmp	.-1120   	; 0x659a <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    69fa:	d1 2c       	mov	r13, r1
    69fc:	c1 2c       	mov	r12, r1
    69fe:	cd cd       	rjmp	.-1126   	; 0x659a <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00006a00 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    6a00:	cf 92       	push	r12
    6a02:	df 92       	push	r13
    6a04:	ef 92       	push	r14
    6a06:	ff 92       	push	r15
    6a08:	0f 93       	push	r16
    6a0a:	1f 93       	push	r17
    6a0c:	cf 93       	push	r28
    6a0e:	df 93       	push	r29
    6a10:	cd b7       	in	r28, 0x3d	; 61
    6a12:	de b7       	in	r29, 0x3e	; 62
    6a14:	af 97       	sbiw	r28, 0x2f	; 47
    6a16:	0f b6       	in	r0, 0x3f	; 63
    6a18:	f8 94       	cli
    6a1a:	de bf       	out	0x3e, r29	; 62
    6a1c:	0f be       	out	0x3f, r0	; 63
    6a1e:	cd bf       	out	0x3d, r28	; 61
    6a20:	7c 01       	movw	r14, r24
    6a22:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6a24:	02 ee       	ldi	r16, 0xE2	; 226
    6a26:	12 e0       	ldi	r17, 0x02	; 2
    6a28:	1a 83       	std	Y+2, r17	; 0x02
    6a2a:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    6a2c:	1c 86       	std	Y+12, r1	; 0x0c
    6a2e:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6a30:	88 ee       	ldi	r24, 0xE8	; 232
    6a32:	93 e0       	ldi	r25, 0x03	; 3
    6a34:	a0 e0       	ldi	r26, 0x00	; 0
    6a36:	b0 e0       	ldi	r27, 0x00	; 0
    6a38:	8d 87       	std	Y+13, r24	; 0x0d
    6a3a:	9e 87       	std	Y+14, r25	; 0x0e
    6a3c:	af 87       	std	Y+15, r26	; 0x0f
    6a3e:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    6a40:	88 e9       	ldi	r24, 0x98	; 152
    6a42:	92 e0       	ldi	r25, 0x02	; 2
    6a44:	9a 87       	std	Y+10, r25	; 0x0a
    6a46:	89 87       	std	Y+9, r24	; 0x09
    6a48:	88 e0       	ldi	r24, 0x08	; 8
    6a4a:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    6a4c:	19 8f       	std	Y+25, r17	; 0x19
    6a4e:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    6a50:	1a 8e       	std	Y+26, r1	; 0x1a
    6a52:	1b 8e       	std	Y+27, r1	; 0x1b
    6a54:	1c 8e       	std	Y+28, r1	; 0x1c
    6a56:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6a58:	1b a7       	std	Y+43, r17	; 0x2b
    6a5a:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    6a5c:	1c a6       	std	Y+44, r1	; 0x2c
    6a5e:	1d a6       	std	Y+45, r1	; 0x2d
    6a60:	1e a6       	std	Y+46, r1	; 0x2e
    6a62:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6a64:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <Ethernet+0x2>
    6a68:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <Ethernet+0x3>
    6a6c:	a0 91 2a 0c 	lds	r26, 0x0C2A	; 0x800c2a <Ethernet+0x4>
    6a70:	b0 91 2b 0c 	lds	r27, 0x0C2B	; 0x800c2b <Ethernet+0x5>
    6a74:	8e a3       	std	Y+38, r24	; 0x26
    6a76:	9f a3       	std	Y+39, r25	; 0x27
    6a78:	a8 a7       	std	Y+40, r26	; 0x28
    6a7a:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    6a7c:	8b 83       	std	Y+3, r24	; 0x03
    6a7e:	9c 83       	std	Y+4, r25	; 0x04
    6a80:	ad 83       	std	Y+5, r26	; 0x05
    6a82:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    6a84:	18 86       	std	Y+8, r1	; 0x08
    6a86:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    6a88:	ae 01       	movw	r20, r28
    6a8a:	46 5d       	subi	r20, 0xD6	; 214
    6a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    6a8e:	ce 01       	movw	r24, r28
    6a90:	01 96       	adiw	r24, 0x01	; 1
    6a92:	0e 94 77 32 	call	0x64ee	; 0x64ee <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    6a96:	81 30       	cpi	r24, 0x01	; 1
    6a98:	91 05       	cpc	r25, r1
    6a9a:	b1 f4       	brne	.+44     	; 0x6ac8 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    6a9c:	d7 01       	movw	r26, r14
    6a9e:	ed 91       	ld	r30, X+
    6aa0:	fc 91       	ld	r31, X
    6aa2:	06 84       	ldd	r0, Z+14	; 0x0e
    6aa4:	f7 85       	ldd	r31, Z+15	; 0x0f
    6aa6:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    6aa8:	1d a3       	std	Y+37, r17	; 0x25
    6aaa:	0c a3       	std	Y+36, r16	; 0x24
    6aac:	8c a5       	ldd	r24, Y+44	; 0x2c
    6aae:	9d a5       	ldd	r25, Y+45	; 0x2d
    6ab0:	ae a5       	ldd	r26, Y+46	; 0x2e
    6ab2:	bf a5       	ldd	r27, Y+47	; 0x2f
    6ab4:	8e a3       	std	Y+38, r24	; 0x26
    6ab6:	9f a3       	std	Y+39, r25	; 0x27
    6ab8:	a8 a7       	std	Y+40, r26	; 0x28
    6aba:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    6abc:	a6 01       	movw	r20, r12
    6abe:	be 01       	movw	r22, r28
    6ac0:	6c 5d       	subi	r22, 0xDC	; 220
    6ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ac4:	c7 01       	movw	r24, r14
    6ac6:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    6ac8:	af 96       	adiw	r28, 0x2f	; 47
    6aca:	0f b6       	in	r0, 0x3f	; 63
    6acc:	f8 94       	cli
    6ace:	de bf       	out	0x3e, r29	; 62
    6ad0:	0f be       	out	0x3f, r0	; 63
    6ad2:	cd bf       	out	0x3d, r28	; 61
    6ad4:	df 91       	pop	r29
    6ad6:	cf 91       	pop	r28
    6ad8:	1f 91       	pop	r17
    6ada:	0f 91       	pop	r16
    6adc:	ff 90       	pop	r15
    6ade:	ef 90       	pop	r14
    6ae0:	df 90       	pop	r13
    6ae2:	cf 90       	pop	r12
    6ae4:	08 95       	ret

00006ae6 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6ae6:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    6ae8:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6aea:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    6aec:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <SPIClass::initialized>
    6af0:	81 11       	cpse	r24, r1
    6af2:	27 c0       	rjmp	.+78     	; 0x6b42 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6af4:	ef e9       	ldi	r30, 0x9F	; 159
    6af6:	fa e3       	ldi	r31, 0x3A	; 58
    6af8:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    6afa:	e9 e5       	ldi	r30, 0x59	; 89
    6afc:	fa e3       	ldi	r31, 0x3A	; 58
    6afe:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    6b00:	e8 2f       	mov	r30, r24
    6b02:	f0 e0       	ldi	r31, 0x00	; 0
    6b04:	ee 0f       	add	r30, r30
    6b06:	ff 1f       	adc	r31, r31
    6b08:	e0 50       	subi	r30, 0x00	; 0
    6b0a:	fb 4c       	sbci	r31, 0xCB	; 203
    6b0c:	a5 91       	lpm	r26, Z+
    6b0e:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6b10:	ec 91       	ld	r30, X
    6b12:	e9 23       	and	r30, r25
    6b14:	21 f4       	brne	.+8      	; 0x6b1e <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    6b16:	61 e0       	ldi	r22, 0x01	; 1
    6b18:	88 e0       	ldi	r24, 0x08	; 8
    6b1a:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6b1e:	61 e0       	ldi	r22, 0x01	; 1
    6b20:	88 e0       	ldi	r24, 0x08	; 8
    6b22:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6b26:	8c b5       	in	r24, 0x2c	; 44
    6b28:	80 61       	ori	r24, 0x10	; 16
    6b2a:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    6b2c:	8c b5       	in	r24, 0x2c	; 44
    6b2e:	80 64       	ori	r24, 0x40	; 64
    6b30:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    6b32:	61 e0       	ldi	r22, 0x01	; 1
    6b34:	89 e0       	ldi	r24, 0x09	; 9
    6b36:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    6b3a:	61 e0       	ldi	r22, 0x01	; 1
    6b3c:	8a e0       	ldi	r24, 0x0A	; 10
    6b3e:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    6b42:	80 91 d4 09 	lds	r24, 0x09D4	; 0x8009d4 <SPIClass::initialized>
    6b46:	8f 5f       	subi	r24, 0xFF	; 255
    6b48:	80 93 d4 09 	sts	0x09D4, r24	; 0x8009d4 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    6b4c:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    6b4e:	cf 91       	pop	r28
    6b50:	08 95       	ret

00006b52 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    6b52:	7f 92       	push	r7
    6b54:	8f 92       	push	r8
    6b56:	9f 92       	push	r9
    6b58:	af 92       	push	r10
    6b5a:	bf 92       	push	r11
    6b5c:	cf 92       	push	r12
    6b5e:	df 92       	push	r13
    6b60:	ef 92       	push	r14
    6b62:	ff 92       	push	r15
    6b64:	0f 93       	push	r16
    6b66:	1f 93       	push	r17
    6b68:	cf 93       	push	r28
    6b6a:	df 93       	push	r29
    6b6c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    6b6e:	fc 01       	movw	r30, r24
    6b70:	86 81       	ldd	r24, Z+6	; 0x06
    6b72:	81 11       	cpse	r24, r1
    6b74:	35 c0       	rjmp	.+106    	; 0x6be0 <SoftSPIB::transfer(unsigned char)+0x8e>
    6b76:	86 2f       	mov	r24, r22
    6b78:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    6b7a:	ec 01       	movw	r28, r24
    6b7c:	d6 95       	lsr	r29
    6b7e:	dc 2f       	mov	r29, r28
    6b80:	cc 27       	eor	r28, r28
    6b82:	d7 95       	ror	r29
    6b84:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    6b86:	66 1f       	adc	r22, r22
    6b88:	66 27       	eor	r22, r22
    6b8a:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6b8c:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    6b8e:	ec 01       	movw	r28, r24
    6b90:	55 e0       	ldi	r21, 0x05	; 5
    6b92:	cc 0f       	add	r28, r28
    6b94:	dd 1f       	adc	r29, r29
    6b96:	5a 95       	dec	r21
    6b98:	e1 f7       	brne	.-8      	; 0x6b92 <SoftSPIB::transfer(unsigned char)+0x40>
    6b9a:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6b9c:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    6b9e:	ec 01       	movw	r28, r24
    6ba0:	73 e0       	ldi	r23, 0x03	; 3
    6ba2:	cc 0f       	add	r28, r28
    6ba4:	dd 1f       	adc	r29, r29
    6ba6:	7a 95       	dec	r23
    6ba8:	e1 f7       	brne	.-8      	; 0x6ba2 <SoftSPIB::transfer(unsigned char)+0x50>
    6baa:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6bac:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    6bae:	ec 01       	movw	r28, r24
    6bb0:	cc 0f       	add	r28, r28
    6bb2:	dd 1f       	adc	r29, r29
    6bb4:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6bb6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    6bb8:	ec 01       	movw	r28, r24
    6bba:	d5 95       	asr	r29
    6bbc:	c7 95       	ror	r28
    6bbe:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6bc0:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    6bc2:	ec 01       	movw	r28, r24
    6bc4:	a3 e0       	ldi	r26, 0x03	; 3
    6bc6:	d5 95       	asr	r29
    6bc8:	c7 95       	ror	r28
    6bca:	aa 95       	dec	r26
    6bcc:	e1 f7       	brne	.-8      	; 0x6bc6 <SoftSPIB::transfer(unsigned char)+0x74>
    6bce:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    6bd0:	6c 2b       	or	r22, r28
    6bd2:	b5 e0       	ldi	r27, 0x05	; 5
    6bd4:	95 95       	asr	r25
    6bd6:	87 95       	ror	r24
    6bd8:	ba 95       	dec	r27
    6bda:	e1 f7       	brne	.-8      	; 0x6bd4 <SoftSPIB::transfer(unsigned char)+0x82>
    6bdc:	82 70       	andi	r24, 0x02	; 2
    6bde:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    6be0:	91 e0       	ldi	r25, 0x01	; 1
    6be2:	80 e0       	ldi	r24, 0x00	; 0
    6be4:	f8 01       	movw	r30, r16
    6be6:	21 81       	ldd	r18, Z+1	; 0x01
    6be8:	21 11       	cpse	r18, r1
    6bea:	01 c0       	rjmp	.+2      	; 0x6bee <SoftSPIB::transfer(unsigned char)+0x9c>
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	e9 2e       	mov	r14, r25
    6bf0:	f8 2e       	mov	r15, r24
    6bf2:	d1 2c       	mov	r13, r1
    6bf4:	c1 2c       	mov	r12, r1
    6bf6:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6bf8:	c6 2f       	mov	r28, r22
    6bfa:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    6bfc:	f8 01       	movw	r30, r16
    6bfe:	80 81       	ld	r24, Z
    6c00:	88 23       	and	r24, r24
    6c02:	39 f0       	breq	.+14     	; 0x6c12 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    6c04:	f1 e0       	ldi	r31, 0x01	; 1
    6c06:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    6c08:	6e 2d       	mov	r22, r14
    6c0a:	f8 01       	movw	r30, r16
    6c0c:	85 81       	ldd	r24, Z+5	; 0x05
    6c0e:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6c12:	be 01       	movw	r22, r28
    6c14:	0c 2c       	mov	r0, r12
    6c16:	02 c0       	rjmp	.+4      	; 0x6c1c <SoftSPIB::transfer(unsigned char)+0xca>
    6c18:	75 95       	asr	r23
    6c1a:	67 95       	ror	r22
    6c1c:	0a 94       	dec	r0
    6c1e:	e2 f7       	brpl	.-8      	; 0x6c18 <SoftSPIB::transfer(unsigned char)+0xc6>
    6c20:	61 70       	andi	r22, 0x01	; 1
    6c22:	f8 01       	movw	r30, r16
    6c24:	84 81       	ldd	r24, Z+4	; 0x04
    6c26:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    6c2a:	57 01       	movw	r10, r14
    6c2c:	f1 e0       	ldi	r31, 0x01	; 1
    6c2e:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    6c30:	6a 2d       	mov	r22, r10
    6c32:	f8 01       	movw	r30, r16
    6c34:	85 81       	ldd	r24, Z+5	; 0x05
    6c36:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    6c3a:	f8 01       	movw	r30, r16
    6c3c:	23 81       	ldd	r18, Z+3	; 0x03
    6c3e:	30 e0       	ldi	r19, 0x00	; 0
    6c40:	f9 01       	movw	r30, r18
    6c42:	e0 5f       	subi	r30, 0xF0	; 240
    6c44:	fa 4c       	sbci	r31, 0xCA	; 202
    6c46:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6c48:	f9 01       	movw	r30, r18
    6c4a:	ef 5a       	subi	r30, 0xAF	; 175
    6c4c:	f5 4c       	sbci	r31, 0xC5	; 197
    6c4e:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    6c50:	f9 01       	movw	r30, r18
    6c52:	e9 56       	subi	r30, 0x69	; 105
    6c54:	f5 4c       	sbci	r31, 0xC5	; 197
    6c56:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6c58:	77 20       	and	r7, r7
    6c5a:	a9 f1       	breq	.+106    	; 0x6cc6 <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6c5c:	81 11       	cpse	r24, r1
    6c5e:	0e 94 d5 86 	call	0x10daa	; 0x10daa <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6c62:	e7 2d       	mov	r30, r7
    6c64:	f0 e0       	ldi	r31, 0x00	; 0
    6c66:	ee 0f       	add	r30, r30
    6c68:	ff 1f       	adc	r31, r31
    6c6a:	ef 5b       	subi	r30, 0xBF	; 191
    6c6c:	f5 4c       	sbci	r31, 0xC5	; 197
    6c6e:	a5 91       	lpm	r26, Z+
    6c70:	b4 91       	lpm	r27, Z
    6c72:	ec 91       	ld	r30, X
    6c74:	8e 22       	and	r8, r30
    6c76:	31 e0       	ldi	r19, 0x01	; 1
    6c78:	20 e0       	ldi	r18, 0x00	; 0
    6c7a:	09 f4       	brne	.+2      	; 0x6c7e <SoftSPIB::transfer(unsigned char)+0x12c>
    6c7c:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    6c7e:	83 2f       	mov	r24, r19
    6c80:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    6c82:	f8 01       	movw	r30, r16
    6c84:	26 81       	ldd	r18, Z+6	; 0x06
    6c86:	21 11       	cpse	r18, r1
    6c88:	21 c0       	rjmp	.+66     	; 0x6ccc <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    6c8a:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    6c8c:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    6c8e:	f8 01       	movw	r30, r16
    6c90:	80 81       	ld	r24, Z
    6c92:	88 23       	and	r24, r24
    6c94:	11 f1       	breq	.+68     	; 0x6cda <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    6c96:	75 01       	movw	r14, r10
    6c98:	ff ef       	ldi	r31, 0xFF	; 255
    6c9a:	cf 1a       	sub	r12, r31
    6c9c:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    6c9e:	28 e0       	ldi	r18, 0x08	; 8
    6ca0:	c2 16       	cp	r12, r18
    6ca2:	d1 04       	cpc	r13, r1
    6ca4:	09 f0       	breq	.+2      	; 0x6ca8 <SoftSPIB::transfer(unsigned char)+0x156>
    6ca6:	aa cf       	rjmp	.-172    	; 0x6bfc <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    6ca8:	89 2d       	mov	r24, r9
    6caa:	df 91       	pop	r29
    6cac:	cf 91       	pop	r28
    6cae:	1f 91       	pop	r17
    6cb0:	0f 91       	pop	r16
    6cb2:	ff 90       	pop	r15
    6cb4:	ef 90       	pop	r14
    6cb6:	df 90       	pop	r13
    6cb8:	cf 90       	pop	r12
    6cba:	bf 90       	pop	r11
    6cbc:	af 90       	pop	r10
    6cbe:	9f 90       	pop	r9
    6cc0:	8f 90       	pop	r8
    6cc2:	7f 90       	pop	r7
    6cc4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    6cc6:	90 e0       	ldi	r25, 0x00	; 0
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	db cf       	rjmp	.-74     	; 0x6c82 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    6ccc:	96 95       	lsr	r25
    6cce:	98 2f       	mov	r25, r24
    6cd0:	88 27       	eor	r24, r24
    6cd2:	97 95       	ror	r25
    6cd4:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    6cd6:	96 94       	lsr	r9
    6cd8:	d9 cf       	rjmp	.-78     	; 0x6c8c <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    6cda:	6e 2d       	mov	r22, r14
    6cdc:	85 81       	ldd	r24, Z+5	; 0x05
    6cde:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
    6ce2:	da cf       	rjmp	.-76     	; 0x6c98 <SoftSPIB::transfer(unsigned char)+0x146>

00006ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6ce4:	cf 93       	push	r28
    6ce6:	df 93       	push	r29
    6ce8:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    6cea:	a6 a5       	ldd	r26, Z+46	; 0x2e
    6cec:	b7 a5       	ldd	r27, Z+47	; 0x2f
    6cee:	8c 91       	ld	r24, X
    6cf0:	92 ad       	ldd	r25, Z+58	; 0x3a
    6cf2:	89 23       	and	r24, r25
    6cf4:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    6cf6:	a0 a9       	ldd	r26, Z+48	; 0x30
    6cf8:	b1 a9       	ldd	r27, Z+49	; 0x31
    6cfa:	8c 91       	ld	r24, X
    6cfc:	93 ad       	ldd	r25, Z+59	; 0x3b
    6cfe:	89 23       	and	r24, r25
    6d00:	8c 93       	st	X, r24
    6d02:	72 b9       	out	0x02, r23	; 2
    6d04:	a2 a9       	ldd	r26, Z+50	; 0x32
    6d06:	b3 a9       	ldd	r27, Z+51	; 0x33
    6d08:	8c 91       	ld	r24, X
    6d0a:	94 ad       	ldd	r25, Z+60	; 0x3c
    6d0c:	89 23       	and	r24, r25
    6d0e:	8c 93       	st	X, r24
    6d10:	a2 a9       	ldd	r26, Z+50	; 0x32
    6d12:	b3 a9       	ldd	r27, Z+51	; 0x33
    6d14:	8c 91       	ld	r24, X
    6d16:	90 ad       	ldd	r25, Z+56	; 0x38
    6d18:	89 2b       	or	r24, r25
    6d1a:	8c 93       	st	X, r24
    6d1c:	62 b9       	out	0x02, r22	; 2
    6d1e:	a2 a9       	ldd	r26, Z+50	; 0x32
    6d20:	b3 a9       	ldd	r27, Z+51	; 0x33
    6d22:	8c 91       	ld	r24, X
    6d24:	94 ad       	ldd	r25, Z+60	; 0x3c
    6d26:	89 23       	and	r24, r25
    6d28:	8c 93       	st	X, r24
    6d2a:	a2 a9       	ldd	r26, Z+50	; 0x32
    6d2c:	b3 a9       	ldd	r27, Z+51	; 0x33
    6d2e:	8c 91       	ld	r24, X
    6d30:	90 ad       	ldd	r25, Z+56	; 0x38
    6d32:	89 2b       	or	r24, r25
    6d34:	8c 93       	st	X, r24
    6d36:	a0 a9       	ldd	r26, Z+48	; 0x30
    6d38:	b1 a9       	ldd	r27, Z+49	; 0x31
    6d3a:	8c 91       	ld	r24, X
    6d3c:	97 a9       	ldd	r25, Z+55	; 0x37
    6d3e:	89 2b       	or	r24, r25
    6d40:	8c 93       	st	X, r24
    6d42:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    6d44:	9f ef       	ldi	r25, 0xFF	; 255
    6d46:	92 0f       	add	r25, r18
    6d48:	12 16       	cp	r1, r18
    6d4a:	0c f0       	brlt	.+2      	; 0x6d4e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    6d4c:	3f c0       	rjmp	.+126    	; 0x6dcc <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    6d4e:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    6d50:	82 b9       	out	0x02, r24	; 2
    6d52:	c2 a9       	ldd	r28, Z+50	; 0x32
    6d54:	d3 a9       	ldd	r29, Z+51	; 0x33
    6d56:	88 81       	ld	r24, Y
    6d58:	24 ad       	ldd	r18, Z+60	; 0x3c
    6d5a:	82 23       	and	r24, r18
    6d5c:	88 83       	st	Y, r24
    6d5e:	c2 a9       	ldd	r28, Z+50	; 0x32
    6d60:	d3 a9       	ldd	r29, Z+51	; 0x33
    6d62:	88 81       	ld	r24, Y
    6d64:	20 ad       	ldd	r18, Z+56	; 0x38
    6d66:	82 2b       	or	r24, r18
    6d68:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    6d6a:	99 23       	and	r25, r25
    6d6c:	69 f1       	breq	.+90     	; 0x6dc8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    6d6e:	20 8d       	ldd	r18, Z+24	; 0x18
    6d70:	31 8d       	ldd	r19, Z+25	; 0x19
    6d72:	21 30       	cpi	r18, 0x01	; 1
    6d74:	31 05       	cpc	r19, r1
    6d76:	41 f5       	brne	.+80     	; 0x6dc8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    6d78:	6f 5f       	subi	r22, 0xFF	; 255
    6d7a:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    6d7c:	c0 a9       	ldd	r28, Z+48	; 0x30
    6d7e:	d1 a9       	ldd	r29, Z+49	; 0x31
    6d80:	88 81       	ld	r24, Y
    6d82:	23 ad       	ldd	r18, Z+59	; 0x3b
    6d84:	82 23       	and	r24, r18
    6d86:	88 83       	st	Y, r24
    6d88:	72 b9       	out	0x02, r23	; 2
    6d8a:	c2 a9       	ldd	r28, Z+50	; 0x32
    6d8c:	d3 a9       	ldd	r29, Z+51	; 0x33
    6d8e:	88 81       	ld	r24, Y
    6d90:	24 ad       	ldd	r18, Z+60	; 0x3c
    6d92:	82 23       	and	r24, r18
    6d94:	88 83       	st	Y, r24
    6d96:	c2 a9       	ldd	r28, Z+50	; 0x32
    6d98:	d3 a9       	ldd	r29, Z+51	; 0x33
    6d9a:	88 81       	ld	r24, Y
    6d9c:	20 ad       	ldd	r18, Z+56	; 0x38
    6d9e:	82 2b       	or	r24, r18
    6da0:	88 83       	st	Y, r24
    6da2:	62 b9       	out	0x02, r22	; 2
    6da4:	c2 a9       	ldd	r28, Z+50	; 0x32
    6da6:	d3 a9       	ldd	r29, Z+51	; 0x33
    6da8:	88 81       	ld	r24, Y
    6daa:	24 ad       	ldd	r18, Z+60	; 0x3c
    6dac:	82 23       	and	r24, r18
    6dae:	88 83       	st	Y, r24
    6db0:	c2 a9       	ldd	r28, Z+50	; 0x32
    6db2:	d3 a9       	ldd	r29, Z+51	; 0x33
    6db4:	88 81       	ld	r24, Y
    6db6:	20 ad       	ldd	r18, Z+56	; 0x38
    6db8:	82 2b       	or	r24, r18
    6dba:	88 83       	st	Y, r24
    6dbc:	c0 a9       	ldd	r28, Z+48	; 0x30
    6dbe:	d1 a9       	ldd	r29, Z+49	; 0x31
    6dc0:	88 81       	ld	r24, Y
    6dc2:	27 a9       	ldd	r18, Z+55	; 0x37
    6dc4:	82 2b       	or	r24, r18
    6dc6:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6dc8:	29 2f       	mov	r18, r25
    6dca:	bc cf       	rjmp	.-136    	; 0x6d44 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    6dcc:	a6 a5       	ldd	r26, Z+46	; 0x2e
    6dce:	b7 a5       	ldd	r27, Z+47	; 0x2f
    6dd0:	8c 91       	ld	r24, X
    6dd2:	96 a9       	ldd	r25, Z+54	; 0x36
    6dd4:	89 2b       	or	r24, r25
    6dd6:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    6dd8:	df 91       	pop	r29
    6dda:	cf 91       	pop	r28
    6ddc:	08 95       	ret

00006dde <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    6dde:	af 92       	push	r10
    6de0:	bf 92       	push	r11
    6de2:	cf 92       	push	r12
    6de4:	df 92       	push	r13
    6de6:	ef 92       	push	r14
    6de8:	ff 92       	push	r15
    6dea:	0f 93       	push	r16
    6dec:	1f 93       	push	r17
    6dee:	cf 93       	push	r28
    6df0:	df 93       	push	r29
    6df2:	00 d0       	rcall	.+0      	; 0x6df4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    6df4:	00 d0       	rcall	.+0      	; 0x6df6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    6df6:	1f 92       	push	r1
    6df8:	1f 92       	push	r1
    6dfa:	cd b7       	in	r28, 0x3d	; 61
    6dfc:	de b7       	in	r29, 0x3e	; 62
    6dfe:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    6e00:	dc 01       	movw	r26, r24
    6e02:	9e 96       	adiw	r26, 0x2e	; 46
    6e04:	ed 91       	ld	r30, X+
    6e06:	fc 91       	ld	r31, X
    6e08:	9f 97       	sbiw	r26, 0x2f	; 47
    6e0a:	80 81       	ld	r24, Z
    6e0c:	da 96       	adiw	r26, 0x3a	; 58
    6e0e:	9c 91       	ld	r25, X
    6e10:	da 97       	sbiw	r26, 0x3a	; 58
    6e12:	89 23       	and	r24, r25
    6e14:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    6e16:	58 96       	adiw	r26, 0x18	; 24
    6e18:	8d 91       	ld	r24, X+
    6e1a:	9c 91       	ld	r25, X
    6e1c:	59 97       	sbiw	r26, 0x19	; 25
    6e1e:	00 97       	sbiw	r24, 0x00	; 0
    6e20:	09 f0       	breq	.+2      	; 0x6e24 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    6e22:	44 c3       	rjmp	.+1672   	; 0x74ac <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    6e24:	56 96       	adiw	r26, 0x16	; 22
    6e26:	8d 91       	ld	r24, X+
    6e28:	9c 91       	ld	r25, X
    6e2a:	57 97       	sbiw	r26, 0x17	; 23
    6e2c:	82 30       	cpi	r24, 0x02	; 2
    6e2e:	91 05       	cpc	r25, r1
    6e30:	09 f4       	brne	.+2      	; 0x6e34 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    6e32:	0b c3       	rjmp	.+1558   	; 0x744a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    6e34:	83 30       	cpi	r24, 0x03	; 3
    6e36:	91 05       	cpc	r25, r1
    6e38:	09 f4       	brne	.+2      	; 0x6e3c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    6e3a:	23 c3       	rjmp	.+1606   	; 0x7482 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    6e3c:	01 97       	sbiw	r24, 0x01	; 1
    6e3e:	09 f0       	breq	.+2      	; 0x6e42 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    6e40:	32 c3       	rjmp	.+1636   	; 0x74a6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    6e42:	1e 96       	adiw	r26, 0x0e	; 14
    6e44:	0d 90       	ld	r0, X+
    6e46:	bc 91       	ld	r27, X
    6e48:	a0 2d       	mov	r26, r0
    6e4a:	68 01       	movw	r12, r16
    6e4c:	c0 94       	com	r12
    6e4e:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    6e50:	40 95       	com	r20
    6e52:	50 95       	com	r21
    6e54:	fa 01       	movw	r30, r20
    6e56:	ea 0f       	add	r30, r26
    6e58:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    6e5a:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    6e5c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    6e5e:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    6e60:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    6e62:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    6e64:	6a 0f       	add	r22, r26
    6e66:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    6e68:	d7 01       	movw	r26, r14
    6e6a:	d0 96       	adiw	r26, 0x30	; 48
    6e6c:	cd 90       	ld	r12, X+
    6e6e:	dc 90       	ld	r13, X
    6e70:	d6 01       	movw	r26, r12
    6e72:	bc 90       	ld	r11, X
    6e74:	d7 01       	movw	r26, r14
    6e76:	db 96       	adiw	r26, 0x3b	; 59
    6e78:	ac 90       	ld	r10, X
    6e7a:	ba 20       	and	r11, r10
    6e7c:	d6 01       	movw	r26, r12
    6e7e:	bc 92       	st	X, r11
    6e80:	12 b8       	out	0x02, r1	; 2
    6e82:	d7 01       	movw	r26, r14
    6e84:	d2 96       	adiw	r26, 0x32	; 50
    6e86:	cd 90       	ld	r12, X+
    6e88:	dc 90       	ld	r13, X
    6e8a:	d6 01       	movw	r26, r12
    6e8c:	bc 90       	ld	r11, X
    6e8e:	d7 01       	movw	r26, r14
    6e90:	dc 96       	adiw	r26, 0x3c	; 60
    6e92:	ac 90       	ld	r10, X
    6e94:	ba 20       	and	r11, r10
    6e96:	d6 01       	movw	r26, r12
    6e98:	bc 92       	st	X, r11
    6e9a:	d7 01       	movw	r26, r14
    6e9c:	d2 96       	adiw	r26, 0x32	; 50
    6e9e:	cd 90       	ld	r12, X+
    6ea0:	dc 90       	ld	r13, X
    6ea2:	d6 01       	movw	r26, r12
    6ea4:	bc 90       	ld	r11, X
    6ea6:	d7 01       	movw	r26, r14
    6ea8:	d8 96       	adiw	r26, 0x38	; 56
    6eaa:	ac 90       	ld	r10, X
    6eac:	ba 28       	or	r11, r10
    6eae:	d6 01       	movw	r26, r12
    6eb0:	bc 92       	st	X, r11
    6eb2:	a0 e5       	ldi	r26, 0x50	; 80
    6eb4:	a2 b9       	out	0x02, r26	; 2
    6eb6:	d7 01       	movw	r26, r14
    6eb8:	d2 96       	adiw	r26, 0x32	; 50
    6eba:	cd 90       	ld	r12, X+
    6ebc:	dc 90       	ld	r13, X
    6ebe:	d6 01       	movw	r26, r12
    6ec0:	bc 90       	ld	r11, X
    6ec2:	d7 01       	movw	r26, r14
    6ec4:	dc 96       	adiw	r26, 0x3c	; 60
    6ec6:	ac 90       	ld	r10, X
    6ec8:	ba 20       	and	r11, r10
    6eca:	d6 01       	movw	r26, r12
    6ecc:	bc 92       	st	X, r11
    6ece:	d7 01       	movw	r26, r14
    6ed0:	d2 96       	adiw	r26, 0x32	; 50
    6ed2:	cd 90       	ld	r12, X+
    6ed4:	dc 90       	ld	r13, X
    6ed6:	d6 01       	movw	r26, r12
    6ed8:	bc 90       	ld	r11, X
    6eda:	d7 01       	movw	r26, r14
    6edc:	d8 96       	adiw	r26, 0x38	; 56
    6ede:	ac 90       	ld	r10, X
    6ee0:	ba 28       	or	r11, r10
    6ee2:	d6 01       	movw	r26, r12
    6ee4:	bc 92       	st	X, r11
    6ee6:	d7 01       	movw	r26, r14
    6ee8:	d0 96       	adiw	r26, 0x30	; 48
    6eea:	cd 90       	ld	r12, X+
    6eec:	dc 90       	ld	r13, X
    6eee:	d6 01       	movw	r26, r12
    6ef0:	bc 90       	ld	r11, X
    6ef2:	d7 01       	movw	r26, r14
    6ef4:	d7 96       	adiw	r26, 0x37	; 55
    6ef6:	ac 90       	ld	r10, X
    6ef8:	ba 28       	or	r11, r10
    6efa:	d6 01       	movw	r26, r12
    6efc:	bc 92       	st	X, r11
    6efe:	72 b9       	out	0x02, r23	; 2
    6f00:	d7 01       	movw	r26, r14
    6f02:	d2 96       	adiw	r26, 0x32	; 50
    6f04:	ad 90       	ld	r10, X+
    6f06:	bc 90       	ld	r11, X
    6f08:	d5 01       	movw	r26, r10
    6f0a:	7c 91       	ld	r23, X
    6f0c:	d7 01       	movw	r26, r14
    6f0e:	dc 96       	adiw	r26, 0x3c	; 60
    6f10:	dc 90       	ld	r13, X
    6f12:	7d 21       	and	r23, r13
    6f14:	d5 01       	movw	r26, r10
    6f16:	7c 93       	st	X, r23
    6f18:	d7 01       	movw	r26, r14
    6f1a:	d2 96       	adiw	r26, 0x32	; 50
    6f1c:	ad 90       	ld	r10, X+
    6f1e:	bc 90       	ld	r11, X
    6f20:	d5 01       	movw	r26, r10
    6f22:	7c 91       	ld	r23, X
    6f24:	d7 01       	movw	r26, r14
    6f26:	d8 96       	adiw	r26, 0x38	; 56
    6f28:	dc 90       	ld	r13, X
    6f2a:	7d 29       	or	r23, r13
    6f2c:	d5 01       	movw	r26, r10
    6f2e:	7c 93       	st	X, r23
    6f30:	62 b9       	out	0x02, r22	; 2
    6f32:	d7 01       	movw	r26, r14
    6f34:	d2 96       	adiw	r26, 0x32	; 50
    6f36:	cd 90       	ld	r12, X+
    6f38:	dc 90       	ld	r13, X
    6f3a:	d6 01       	movw	r26, r12
    6f3c:	6c 91       	ld	r22, X
    6f3e:	d7 01       	movw	r26, r14
    6f40:	dc 96       	adiw	r26, 0x3c	; 60
    6f42:	7c 91       	ld	r23, X
    6f44:	67 23       	and	r22, r23
    6f46:	d6 01       	movw	r26, r12
    6f48:	6c 93       	st	X, r22
    6f4a:	d7 01       	movw	r26, r14
    6f4c:	d2 96       	adiw	r26, 0x32	; 50
    6f4e:	cd 90       	ld	r12, X+
    6f50:	dc 90       	ld	r13, X
    6f52:	d6 01       	movw	r26, r12
    6f54:	6c 91       	ld	r22, X
    6f56:	d7 01       	movw	r26, r14
    6f58:	d8 96       	adiw	r26, 0x38	; 56
    6f5a:	7c 91       	ld	r23, X
    6f5c:	67 2b       	or	r22, r23
    6f5e:	d6 01       	movw	r26, r12
    6f60:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    6f62:	d7 01       	movw	r26, r14
    6f64:	d0 96       	adiw	r26, 0x30	; 48
    6f66:	cd 90       	ld	r12, X+
    6f68:	dc 90       	ld	r13, X
    6f6a:	d6 01       	movw	r26, r12
    6f6c:	6c 91       	ld	r22, X
    6f6e:	d7 01       	movw	r26, r14
    6f70:	db 96       	adiw	r26, 0x3b	; 59
    6f72:	7c 91       	ld	r23, X
    6f74:	67 23       	and	r22, r23
    6f76:	d6 01       	movw	r26, r12
    6f78:	6c 93       	st	X, r22
    6f7a:	12 b8       	out	0x02, r1	; 2
    6f7c:	d7 01       	movw	r26, r14
    6f7e:	d2 96       	adiw	r26, 0x32	; 50
    6f80:	cd 90       	ld	r12, X+
    6f82:	dc 90       	ld	r13, X
    6f84:	d6 01       	movw	r26, r12
    6f86:	6c 91       	ld	r22, X
    6f88:	d7 01       	movw	r26, r14
    6f8a:	dc 96       	adiw	r26, 0x3c	; 60
    6f8c:	7c 91       	ld	r23, X
    6f8e:	67 23       	and	r22, r23
    6f90:	d6 01       	movw	r26, r12
    6f92:	6c 93       	st	X, r22
    6f94:	d7 01       	movw	r26, r14
    6f96:	d2 96       	adiw	r26, 0x32	; 50
    6f98:	cd 90       	ld	r12, X+
    6f9a:	dc 90       	ld	r13, X
    6f9c:	d6 01       	movw	r26, r12
    6f9e:	6c 91       	ld	r22, X
    6fa0:	d7 01       	movw	r26, r14
    6fa2:	d8 96       	adiw	r26, 0x38	; 56
    6fa4:	7c 91       	ld	r23, X
    6fa6:	67 2b       	or	r22, r23
    6fa8:	d6 01       	movw	r26, r12
    6faa:	6c 93       	st	X, r22
    6fac:	61 e5       	ldi	r22, 0x51	; 81
    6fae:	62 b9       	out	0x02, r22	; 2
    6fb0:	d7 01       	movw	r26, r14
    6fb2:	d2 96       	adiw	r26, 0x32	; 50
    6fb4:	cd 90       	ld	r12, X+
    6fb6:	dc 90       	ld	r13, X
    6fb8:	d6 01       	movw	r26, r12
    6fba:	6c 91       	ld	r22, X
    6fbc:	d7 01       	movw	r26, r14
    6fbe:	dc 96       	adiw	r26, 0x3c	; 60
    6fc0:	7c 91       	ld	r23, X
    6fc2:	67 23       	and	r22, r23
    6fc4:	d6 01       	movw	r26, r12
    6fc6:	6c 93       	st	X, r22
    6fc8:	d7 01       	movw	r26, r14
    6fca:	d2 96       	adiw	r26, 0x32	; 50
    6fcc:	cd 90       	ld	r12, X+
    6fce:	dc 90       	ld	r13, X
    6fd0:	d6 01       	movw	r26, r12
    6fd2:	6c 91       	ld	r22, X
    6fd4:	d7 01       	movw	r26, r14
    6fd6:	d8 96       	adiw	r26, 0x38	; 56
    6fd8:	7c 91       	ld	r23, X
    6fda:	67 2b       	or	r22, r23
    6fdc:	d6 01       	movw	r26, r12
    6fde:	6c 93       	st	X, r22
    6fe0:	d7 01       	movw	r26, r14
    6fe2:	d0 96       	adiw	r26, 0x30	; 48
    6fe4:	cd 90       	ld	r12, X+
    6fe6:	dc 90       	ld	r13, X
    6fe8:	d6 01       	movw	r26, r12
    6fea:	6c 91       	ld	r22, X
    6fec:	d7 01       	movw	r26, r14
    6fee:	d7 96       	adiw	r26, 0x37	; 55
    6ff0:	7c 91       	ld	r23, X
    6ff2:	67 2b       	or	r22, r23
    6ff4:	d6 01       	movw	r26, r12
    6ff6:	6c 93       	st	X, r22
    6ff8:	32 b9       	out	0x02, r19	; 2
    6ffa:	d7 01       	movw	r26, r14
    6ffc:	d2 96       	adiw	r26, 0x32	; 50
    6ffe:	cd 90       	ld	r12, X+
    7000:	dc 90       	ld	r13, X
    7002:	d6 01       	movw	r26, r12
    7004:	3c 91       	ld	r19, X
    7006:	d7 01       	movw	r26, r14
    7008:	dc 96       	adiw	r26, 0x3c	; 60
    700a:	6c 91       	ld	r22, X
    700c:	36 23       	and	r19, r22
    700e:	d6 01       	movw	r26, r12
    7010:	3c 93       	st	X, r19
    7012:	d7 01       	movw	r26, r14
    7014:	d2 96       	adiw	r26, 0x32	; 50
    7016:	cd 90       	ld	r12, X+
    7018:	dc 90       	ld	r13, X
    701a:	d6 01       	movw	r26, r12
    701c:	3c 91       	ld	r19, X
    701e:	d7 01       	movw	r26, r14
    7020:	d8 96       	adiw	r26, 0x38	; 56
    7022:	6c 91       	ld	r22, X
    7024:	36 2b       	or	r19, r22
    7026:	d6 01       	movw	r26, r12
    7028:	3c 93       	st	X, r19
    702a:	22 b9       	out	0x02, r18	; 2
    702c:	d7 01       	movw	r26, r14
    702e:	d2 96       	adiw	r26, 0x32	; 50
    7030:	6d 91       	ld	r22, X+
    7032:	7c 91       	ld	r23, X
    7034:	db 01       	movw	r26, r22
    7036:	2c 91       	ld	r18, X
    7038:	d7 01       	movw	r26, r14
    703a:	dc 96       	adiw	r26, 0x3c	; 60
    703c:	3c 91       	ld	r19, X
    703e:	23 23       	and	r18, r19
    7040:	db 01       	movw	r26, r22
    7042:	2c 93       	st	X, r18
    7044:	d7 01       	movw	r26, r14
    7046:	d2 96       	adiw	r26, 0x32	; 50
    7048:	6d 91       	ld	r22, X+
    704a:	7c 91       	ld	r23, X
    704c:	db 01       	movw	r26, r22
    704e:	2c 91       	ld	r18, X
    7050:	d7 01       	movw	r26, r14
    7052:	d8 96       	adiw	r26, 0x38	; 56
    7054:	3c 91       	ld	r19, X
    7056:	23 2b       	or	r18, r19
    7058:	db 01       	movw	r26, r22
    705a:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    705c:	d7 01       	movw	r26, r14
    705e:	d0 96       	adiw	r26, 0x30	; 48
    7060:	6d 91       	ld	r22, X+
    7062:	7c 91       	ld	r23, X
    7064:	db 01       	movw	r26, r22
    7066:	2c 91       	ld	r18, X
    7068:	d7 01       	movw	r26, r14
    706a:	db 96       	adiw	r26, 0x3b	; 59
    706c:	3c 91       	ld	r19, X
    706e:	23 23       	and	r18, r19
    7070:	db 01       	movw	r26, r22
    7072:	2c 93       	st	X, r18
    7074:	12 b8       	out	0x02, r1	; 2
    7076:	d7 01       	movw	r26, r14
    7078:	d2 96       	adiw	r26, 0x32	; 50
    707a:	6d 91       	ld	r22, X+
    707c:	7c 91       	ld	r23, X
    707e:	db 01       	movw	r26, r22
    7080:	2c 91       	ld	r18, X
    7082:	d7 01       	movw	r26, r14
    7084:	dc 96       	adiw	r26, 0x3c	; 60
    7086:	3c 91       	ld	r19, X
    7088:	23 23       	and	r18, r19
    708a:	db 01       	movw	r26, r22
    708c:	2c 93       	st	X, r18
    708e:	d7 01       	movw	r26, r14
    7090:	d2 96       	adiw	r26, 0x32	; 50
    7092:	6d 91       	ld	r22, X+
    7094:	7c 91       	ld	r23, X
    7096:	db 01       	movw	r26, r22
    7098:	2c 91       	ld	r18, X
    709a:	d7 01       	movw	r26, r14
    709c:	d8 96       	adiw	r26, 0x38	; 56
    709e:	3c 91       	ld	r19, X
    70a0:	23 2b       	or	r18, r19
    70a2:	db 01       	movw	r26, r22
    70a4:	2c 93       	st	X, r18
    70a6:	22 e5       	ldi	r18, 0x52	; 82
    70a8:	22 b9       	out	0x02, r18	; 2
    70aa:	d7 01       	movw	r26, r14
    70ac:	d2 96       	adiw	r26, 0x32	; 50
    70ae:	6d 91       	ld	r22, X+
    70b0:	7c 91       	ld	r23, X
    70b2:	db 01       	movw	r26, r22
    70b4:	2c 91       	ld	r18, X
    70b6:	d7 01       	movw	r26, r14
    70b8:	dc 96       	adiw	r26, 0x3c	; 60
    70ba:	3c 91       	ld	r19, X
    70bc:	23 23       	and	r18, r19
    70be:	db 01       	movw	r26, r22
    70c0:	2c 93       	st	X, r18
    70c2:	d7 01       	movw	r26, r14
    70c4:	d2 96       	adiw	r26, 0x32	; 50
    70c6:	6d 91       	ld	r22, X+
    70c8:	7c 91       	ld	r23, X
    70ca:	db 01       	movw	r26, r22
    70cc:	2c 91       	ld	r18, X
    70ce:	d7 01       	movw	r26, r14
    70d0:	d8 96       	adiw	r26, 0x38	; 56
    70d2:	3c 91       	ld	r19, X
    70d4:	23 2b       	or	r18, r19
    70d6:	db 01       	movw	r26, r22
    70d8:	2c 93       	st	X, r18
    70da:	d7 01       	movw	r26, r14
    70dc:	d0 96       	adiw	r26, 0x30	; 48
    70de:	6d 91       	ld	r22, X+
    70e0:	7c 91       	ld	r23, X
    70e2:	db 01       	movw	r26, r22
    70e4:	2c 91       	ld	r18, X
    70e6:	d7 01       	movw	r26, r14
    70e8:	d7 96       	adiw	r26, 0x37	; 55
    70ea:	3c 91       	ld	r19, X
    70ec:	23 2b       	or	r18, r19
    70ee:	db 01       	movw	r26, r22
    70f0:	2c 93       	st	X, r18
    70f2:	52 b9       	out	0x02, r21	; 2
    70f4:	d7 01       	movw	r26, r14
    70f6:	d2 96       	adiw	r26, 0x32	; 50
    70f8:	6d 91       	ld	r22, X+
    70fa:	7c 91       	ld	r23, X
    70fc:	db 01       	movw	r26, r22
    70fe:	2c 91       	ld	r18, X
    7100:	d7 01       	movw	r26, r14
    7102:	dc 96       	adiw	r26, 0x3c	; 60
    7104:	3c 91       	ld	r19, X
    7106:	23 23       	and	r18, r19
    7108:	db 01       	movw	r26, r22
    710a:	2c 93       	st	X, r18
    710c:	d7 01       	movw	r26, r14
    710e:	d2 96       	adiw	r26, 0x32	; 50
    7110:	6d 91       	ld	r22, X+
    7112:	7c 91       	ld	r23, X
    7114:	db 01       	movw	r26, r22
    7116:	2c 91       	ld	r18, X
    7118:	d7 01       	movw	r26, r14
    711a:	d8 96       	adiw	r26, 0x38	; 56
    711c:	3c 91       	ld	r19, X
    711e:	23 2b       	or	r18, r19
    7120:	db 01       	movw	r26, r22
    7122:	2c 93       	st	X, r18
    7124:	42 b9       	out	0x02, r20	; 2
    7126:	d7 01       	movw	r26, r14
    7128:	d2 96       	adiw	r26, 0x32	; 50
    712a:	4d 91       	ld	r20, X+
    712c:	5c 91       	ld	r21, X
    712e:	da 01       	movw	r26, r20
    7130:	2c 91       	ld	r18, X
    7132:	d7 01       	movw	r26, r14
    7134:	dc 96       	adiw	r26, 0x3c	; 60
    7136:	3c 91       	ld	r19, X
    7138:	23 23       	and	r18, r19
    713a:	da 01       	movw	r26, r20
    713c:	2c 93       	st	X, r18
    713e:	d7 01       	movw	r26, r14
    7140:	d2 96       	adiw	r26, 0x32	; 50
    7142:	4d 91       	ld	r20, X+
    7144:	5c 91       	ld	r21, X
    7146:	da 01       	movw	r26, r20
    7148:	2c 91       	ld	r18, X
    714a:	d7 01       	movw	r26, r14
    714c:	d8 96       	adiw	r26, 0x38	; 56
    714e:	3c 91       	ld	r19, X
    7150:	23 2b       	or	r18, r19
    7152:	da 01       	movw	r26, r20
    7154:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    7156:	d7 01       	movw	r26, r14
    7158:	d0 96       	adiw	r26, 0x30	; 48
    715a:	4d 91       	ld	r20, X+
    715c:	5c 91       	ld	r21, X
    715e:	da 01       	movw	r26, r20
    7160:	2c 91       	ld	r18, X
    7162:	d7 01       	movw	r26, r14
    7164:	db 96       	adiw	r26, 0x3b	; 59
    7166:	3c 91       	ld	r19, X
    7168:	23 23       	and	r18, r19
    716a:	da 01       	movw	r26, r20
    716c:	2c 93       	st	X, r18
    716e:	12 b8       	out	0x02, r1	; 2
    7170:	d7 01       	movw	r26, r14
    7172:	d2 96       	adiw	r26, 0x32	; 50
    7174:	4d 91       	ld	r20, X+
    7176:	5c 91       	ld	r21, X
    7178:	da 01       	movw	r26, r20
    717a:	2c 91       	ld	r18, X
    717c:	d7 01       	movw	r26, r14
    717e:	dc 96       	adiw	r26, 0x3c	; 60
    7180:	3c 91       	ld	r19, X
    7182:	23 23       	and	r18, r19
    7184:	da 01       	movw	r26, r20
    7186:	2c 93       	st	X, r18
    7188:	d7 01       	movw	r26, r14
    718a:	d2 96       	adiw	r26, 0x32	; 50
    718c:	4d 91       	ld	r20, X+
    718e:	5c 91       	ld	r21, X
    7190:	da 01       	movw	r26, r20
    7192:	2c 91       	ld	r18, X
    7194:	d7 01       	movw	r26, r14
    7196:	d8 96       	adiw	r26, 0x38	; 56
    7198:	3c 91       	ld	r19, X
    719a:	23 2b       	or	r18, r19
    719c:	da 01       	movw	r26, r20
    719e:	2c 93       	st	X, r18
    71a0:	23 e5       	ldi	r18, 0x53	; 83
    71a2:	22 b9       	out	0x02, r18	; 2
    71a4:	d7 01       	movw	r26, r14
    71a6:	d2 96       	adiw	r26, 0x32	; 50
    71a8:	4d 91       	ld	r20, X+
    71aa:	5c 91       	ld	r21, X
    71ac:	da 01       	movw	r26, r20
    71ae:	2c 91       	ld	r18, X
    71b0:	d7 01       	movw	r26, r14
    71b2:	dc 96       	adiw	r26, 0x3c	; 60
    71b4:	3c 91       	ld	r19, X
    71b6:	23 23       	and	r18, r19
    71b8:	da 01       	movw	r26, r20
    71ba:	2c 93       	st	X, r18
    71bc:	d7 01       	movw	r26, r14
    71be:	d2 96       	adiw	r26, 0x32	; 50
    71c0:	4d 91       	ld	r20, X+
    71c2:	5c 91       	ld	r21, X
    71c4:	da 01       	movw	r26, r20
    71c6:	2c 91       	ld	r18, X
    71c8:	d7 01       	movw	r26, r14
    71ca:	d8 96       	adiw	r26, 0x38	; 56
    71cc:	3c 91       	ld	r19, X
    71ce:	23 2b       	or	r18, r19
    71d0:	da 01       	movw	r26, r20
    71d2:	2c 93       	st	X, r18
    71d4:	d7 01       	movw	r26, r14
    71d6:	d0 96       	adiw	r26, 0x30	; 48
    71d8:	4d 91       	ld	r20, X+
    71da:	5c 91       	ld	r21, X
    71dc:	da 01       	movw	r26, r20
    71de:	2c 91       	ld	r18, X
    71e0:	d7 01       	movw	r26, r14
    71e2:	d7 96       	adiw	r26, 0x37	; 55
    71e4:	3c 91       	ld	r19, X
    71e6:	23 2b       	or	r18, r19
    71e8:	da 01       	movw	r26, r20
    71ea:	2c 93       	st	X, r18
    71ec:	12 b9       	out	0x02, r17	; 2
    71ee:	d7 01       	movw	r26, r14
    71f0:	d2 96       	adiw	r26, 0x32	; 50
    71f2:	4d 91       	ld	r20, X+
    71f4:	5c 91       	ld	r21, X
    71f6:	da 01       	movw	r26, r20
    71f8:	2c 91       	ld	r18, X
    71fa:	d7 01       	movw	r26, r14
    71fc:	dc 96       	adiw	r26, 0x3c	; 60
    71fe:	3c 91       	ld	r19, X
    7200:	23 23       	and	r18, r19
    7202:	da 01       	movw	r26, r20
    7204:	2c 93       	st	X, r18
    7206:	d7 01       	movw	r26, r14
    7208:	d2 96       	adiw	r26, 0x32	; 50
    720a:	4d 91       	ld	r20, X+
    720c:	5c 91       	ld	r21, X
    720e:	da 01       	movw	r26, r20
    7210:	2c 91       	ld	r18, X
    7212:	d7 01       	movw	r26, r14
    7214:	d8 96       	adiw	r26, 0x38	; 56
    7216:	3c 91       	ld	r19, X
    7218:	23 2b       	or	r18, r19
    721a:	da 01       	movw	r26, r20
    721c:	2c 93       	st	X, r18
    721e:	02 b9       	out	0x02, r16	; 2
    7220:	d7 01       	movw	r26, r14
    7222:	d2 96       	adiw	r26, 0x32	; 50
    7224:	4d 91       	ld	r20, X+
    7226:	5c 91       	ld	r21, X
    7228:	da 01       	movw	r26, r20
    722a:	2c 91       	ld	r18, X
    722c:	d7 01       	movw	r26, r14
    722e:	dc 96       	adiw	r26, 0x3c	; 60
    7230:	3c 91       	ld	r19, X
    7232:	23 23       	and	r18, r19
    7234:	da 01       	movw	r26, r20
    7236:	2c 93       	st	X, r18
    7238:	d7 01       	movw	r26, r14
    723a:	d2 96       	adiw	r26, 0x32	; 50
    723c:	4d 91       	ld	r20, X+
    723e:	5c 91       	ld	r21, X
    7240:	da 01       	movw	r26, r20
    7242:	2c 91       	ld	r18, X
    7244:	d7 01       	movw	r26, r14
    7246:	d8 96       	adiw	r26, 0x38	; 56
    7248:	3c 91       	ld	r19, X
    724a:	23 2b       	or	r18, r19
    724c:	da 01       	movw	r26, r20
    724e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    7250:	d7 01       	movw	r26, r14
    7252:	d0 96       	adiw	r26, 0x30	; 48
    7254:	4d 91       	ld	r20, X+
    7256:	5c 91       	ld	r21, X
    7258:	da 01       	movw	r26, r20
    725a:	2c 91       	ld	r18, X
    725c:	d7 01       	movw	r26, r14
    725e:	db 96       	adiw	r26, 0x3b	; 59
    7260:	3c 91       	ld	r19, X
    7262:	23 23       	and	r18, r19
    7264:	da 01       	movw	r26, r20
    7266:	2c 93       	st	X, r18
    7268:	12 b8       	out	0x02, r1	; 2
    726a:	d7 01       	movw	r26, r14
    726c:	d2 96       	adiw	r26, 0x32	; 50
    726e:	4d 91       	ld	r20, X+
    7270:	5c 91       	ld	r21, X
    7272:	da 01       	movw	r26, r20
    7274:	2c 91       	ld	r18, X
    7276:	d7 01       	movw	r26, r14
    7278:	dc 96       	adiw	r26, 0x3c	; 60
    727a:	3c 91       	ld	r19, X
    727c:	23 23       	and	r18, r19
    727e:	da 01       	movw	r26, r20
    7280:	2c 93       	st	X, r18
    7282:	d7 01       	movw	r26, r14
    7284:	d2 96       	adiw	r26, 0x32	; 50
    7286:	4d 91       	ld	r20, X+
    7288:	5c 91       	ld	r21, X
    728a:	da 01       	movw	r26, r20
    728c:	2c 91       	ld	r18, X
    728e:	d7 01       	movw	r26, r14
    7290:	d8 96       	adiw	r26, 0x38	; 56
    7292:	3c 91       	ld	r19, X
    7294:	23 2b       	or	r18, r19
    7296:	da 01       	movw	r26, r20
    7298:	2c 93       	st	X, r18
    729a:	20 e2       	ldi	r18, 0x20	; 32
    729c:	22 b9       	out	0x02, r18	; 2
    729e:	d7 01       	movw	r26, r14
    72a0:	d2 96       	adiw	r26, 0x32	; 50
    72a2:	4d 91       	ld	r20, X+
    72a4:	5c 91       	ld	r21, X
    72a6:	da 01       	movw	r26, r20
    72a8:	2c 91       	ld	r18, X
    72aa:	d7 01       	movw	r26, r14
    72ac:	dc 96       	adiw	r26, 0x3c	; 60
    72ae:	3c 91       	ld	r19, X
    72b0:	23 23       	and	r18, r19
    72b2:	da 01       	movw	r26, r20
    72b4:	2c 93       	st	X, r18
    72b6:	d7 01       	movw	r26, r14
    72b8:	d2 96       	adiw	r26, 0x32	; 50
    72ba:	4d 91       	ld	r20, X+
    72bc:	5c 91       	ld	r21, X
    72be:	da 01       	movw	r26, r20
    72c0:	2c 91       	ld	r18, X
    72c2:	d7 01       	movw	r26, r14
    72c4:	d8 96       	adiw	r26, 0x38	; 56
    72c6:	3c 91       	ld	r19, X
    72c8:	23 2b       	or	r18, r19
    72ca:	da 01       	movw	r26, r20
    72cc:	2c 93       	st	X, r18
    72ce:	d7 01       	movw	r26, r14
    72d0:	d0 96       	adiw	r26, 0x30	; 48
    72d2:	4d 91       	ld	r20, X+
    72d4:	5c 91       	ld	r21, X
    72d6:	da 01       	movw	r26, r20
    72d8:	2c 91       	ld	r18, X
    72da:	d7 01       	movw	r26, r14
    72dc:	d7 96       	adiw	r26, 0x37	; 55
    72de:	3c 91       	ld	r19, X
    72e0:	23 2b       	or	r18, r19
    72e2:	da 01       	movw	r26, r20
    72e4:	2c 93       	st	X, r18
    72e6:	f2 b9       	out	0x02, r31	; 2
    72e8:	d7 01       	movw	r26, r14
    72ea:	d2 96       	adiw	r26, 0x32	; 50
    72ec:	4d 91       	ld	r20, X+
    72ee:	5c 91       	ld	r21, X
    72f0:	da 01       	movw	r26, r20
    72f2:	2c 91       	ld	r18, X
    72f4:	d7 01       	movw	r26, r14
    72f6:	dc 96       	adiw	r26, 0x3c	; 60
    72f8:	3c 91       	ld	r19, X
    72fa:	23 23       	and	r18, r19
    72fc:	da 01       	movw	r26, r20
    72fe:	2c 93       	st	X, r18
    7300:	d7 01       	movw	r26, r14
    7302:	d2 96       	adiw	r26, 0x32	; 50
    7304:	4d 91       	ld	r20, X+
    7306:	5c 91       	ld	r21, X
    7308:	da 01       	movw	r26, r20
    730a:	2c 91       	ld	r18, X
    730c:	d7 01       	movw	r26, r14
    730e:	d8 96       	adiw	r26, 0x38	; 56
    7310:	3c 91       	ld	r19, X
    7312:	23 2b       	or	r18, r19
    7314:	da 01       	movw	r26, r20
    7316:	2c 93       	st	X, r18
    7318:	e2 b9       	out	0x02, r30	; 2
    731a:	d7 01       	movw	r26, r14
    731c:	d2 96       	adiw	r26, 0x32	; 50
    731e:	ed 91       	ld	r30, X+
    7320:	fc 91       	ld	r31, X
    7322:	d3 97       	sbiw	r26, 0x33	; 51
    7324:	20 81       	ld	r18, Z
    7326:	dc 96       	adiw	r26, 0x3c	; 60
    7328:	3c 91       	ld	r19, X
    732a:	dc 97       	sbiw	r26, 0x3c	; 60
    732c:	23 23       	and	r18, r19
    732e:	20 83       	st	Z, r18
    7330:	d2 96       	adiw	r26, 0x32	; 50
    7332:	ed 91       	ld	r30, X+
    7334:	fc 91       	ld	r31, X
    7336:	d3 97       	sbiw	r26, 0x33	; 51
    7338:	20 81       	ld	r18, Z
    733a:	d8 96       	adiw	r26, 0x38	; 56
    733c:	3c 91       	ld	r19, X
    733e:	d8 97       	sbiw	r26, 0x38	; 56
    7340:	23 2b       	or	r18, r19
    7342:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    7344:	d0 96       	adiw	r26, 0x30	; 48
    7346:	ed 91       	ld	r30, X+
    7348:	fc 91       	ld	r31, X
    734a:	d1 97       	sbiw	r26, 0x31	; 49
    734c:	20 81       	ld	r18, Z
    734e:	db 96       	adiw	r26, 0x3b	; 59
    7350:	3c 91       	ld	r19, X
    7352:	db 97       	sbiw	r26, 0x3b	; 59
    7354:	23 23       	and	r18, r19
    7356:	20 83       	st	Z, r18
    7358:	12 b8       	out	0x02, r1	; 2
    735a:	d2 96       	adiw	r26, 0x32	; 50
    735c:	ed 91       	ld	r30, X+
    735e:	fc 91       	ld	r31, X
    7360:	d3 97       	sbiw	r26, 0x33	; 51
    7362:	20 81       	ld	r18, Z
    7364:	dc 96       	adiw	r26, 0x3c	; 60
    7366:	3c 91       	ld	r19, X
    7368:	dc 97       	sbiw	r26, 0x3c	; 60
    736a:	23 23       	and	r18, r19
    736c:	20 83       	st	Z, r18
    736e:	d2 96       	adiw	r26, 0x32	; 50
    7370:	ed 91       	ld	r30, X+
    7372:	fc 91       	ld	r31, X
    7374:	d3 97       	sbiw	r26, 0x33	; 51
    7376:	20 81       	ld	r18, Z
    7378:	d8 96       	adiw	r26, 0x38	; 56
    737a:	3c 91       	ld	r19, X
    737c:	d8 97       	sbiw	r26, 0x38	; 56
    737e:	23 2b       	or	r18, r19
    7380:	20 83       	st	Z, r18
    7382:	21 e2       	ldi	r18, 0x21	; 33
    7384:	22 b9       	out	0x02, r18	; 2
    7386:	d2 96       	adiw	r26, 0x32	; 50
    7388:	ed 91       	ld	r30, X+
    738a:	fc 91       	ld	r31, X
    738c:	d3 97       	sbiw	r26, 0x33	; 51
    738e:	20 81       	ld	r18, Z
    7390:	dc 96       	adiw	r26, 0x3c	; 60
    7392:	3c 91       	ld	r19, X
    7394:	dc 97       	sbiw	r26, 0x3c	; 60
    7396:	23 23       	and	r18, r19
    7398:	20 83       	st	Z, r18
    739a:	d2 96       	adiw	r26, 0x32	; 50
    739c:	ed 91       	ld	r30, X+
    739e:	fc 91       	ld	r31, X
    73a0:	d3 97       	sbiw	r26, 0x33	; 51
    73a2:	20 81       	ld	r18, Z
    73a4:	d8 96       	adiw	r26, 0x38	; 56
    73a6:	3c 91       	ld	r19, X
    73a8:	d8 97       	sbiw	r26, 0x38	; 56
    73aa:	23 2b       	or	r18, r19
    73ac:	20 83       	st	Z, r18
    73ae:	d0 96       	adiw	r26, 0x30	; 48
    73b0:	ed 91       	ld	r30, X+
    73b2:	fc 91       	ld	r31, X
    73b4:	d1 97       	sbiw	r26, 0x31	; 49
    73b6:	20 81       	ld	r18, Z
    73b8:	d7 96       	adiw	r26, 0x37	; 55
    73ba:	3c 91       	ld	r19, X
    73bc:	d7 97       	sbiw	r26, 0x37	; 55
    73be:	23 2b       	or	r18, r19
    73c0:	20 83       	st	Z, r18
    73c2:	92 b9       	out	0x02, r25	; 2
    73c4:	d2 96       	adiw	r26, 0x32	; 50
    73c6:	ed 91       	ld	r30, X+
    73c8:	fc 91       	ld	r31, X
    73ca:	d3 97       	sbiw	r26, 0x33	; 51
    73cc:	90 81       	ld	r25, Z
    73ce:	dc 96       	adiw	r26, 0x3c	; 60
    73d0:	2c 91       	ld	r18, X
    73d2:	dc 97       	sbiw	r26, 0x3c	; 60
    73d4:	92 23       	and	r25, r18
    73d6:	90 83       	st	Z, r25
    73d8:	d2 96       	adiw	r26, 0x32	; 50
    73da:	ed 91       	ld	r30, X+
    73dc:	fc 91       	ld	r31, X
    73de:	d3 97       	sbiw	r26, 0x33	; 51
    73e0:	90 81       	ld	r25, Z
    73e2:	d8 96       	adiw	r26, 0x38	; 56
    73e4:	2c 91       	ld	r18, X
    73e6:	d8 97       	sbiw	r26, 0x38	; 56
    73e8:	92 2b       	or	r25, r18
    73ea:	90 83       	st	Z, r25
    73ec:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    73ee:	d2 96       	adiw	r26, 0x32	; 50
    73f0:	ed 91       	ld	r30, X+
    73f2:	fc 91       	ld	r31, X
    73f4:	d3 97       	sbiw	r26, 0x33	; 51
    73f6:	80 81       	ld	r24, Z
    73f8:	dc 96       	adiw	r26, 0x3c	; 60
    73fa:	9c 91       	ld	r25, X
    73fc:	dc 97       	sbiw	r26, 0x3c	; 60
    73fe:	89 23       	and	r24, r25
    7400:	80 83       	st	Z, r24
    7402:	d2 96       	adiw	r26, 0x32	; 50
    7404:	ed 91       	ld	r30, X+
    7406:	fc 91       	ld	r31, X
    7408:	d3 97       	sbiw	r26, 0x33	; 51
    740a:	80 81       	ld	r24, Z
    740c:	d8 96       	adiw	r26, 0x38	; 56
    740e:	9c 91       	ld	r25, X
    7410:	89 2b       	or	r24, r25
    7412:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    7414:	d7 01       	movw	r26, r14
    7416:	9e 96       	adiw	r26, 0x2e	; 46
    7418:	ed 91       	ld	r30, X+
    741a:	fc 91       	ld	r31, X
    741c:	9f 97       	sbiw	r26, 0x2f	; 47
    741e:	80 81       	ld	r24, Z
    7420:	d6 96       	adiw	r26, 0x36	; 54
    7422:	9c 91       	ld	r25, X
    7424:	89 2b       	or	r24, r25
    7426:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    7428:	28 96       	adiw	r28, 0x08	; 8
    742a:	0f b6       	in	r0, 0x3f	; 63
    742c:	f8 94       	cli
    742e:	de bf       	out	0x3e, r29	; 62
    7430:	0f be       	out	0x3f, r0	; 63
    7432:	cd bf       	out	0x3d, r28	; 61
    7434:	df 91       	pop	r29
    7436:	cf 91       	pop	r28
    7438:	1f 91       	pop	r17
    743a:	0f 91       	pop	r16
    743c:	ff 90       	pop	r15
    743e:	ef 90       	pop	r14
    7440:	df 90       	pop	r13
    7442:	cf 90       	pop	r12
    7444:	bf 90       	pop	r11
    7446:	af 90       	pop	r10
    7448:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    744a:	f7 01       	movw	r30, r14
    744c:	a6 85       	ldd	r26, Z+14	; 0x0e
    744e:	b7 85       	ldd	r27, Z+15	; 0x0f
    7450:	59 01       	movw	r10, r18
    7452:	a0 94       	com	r10
    7454:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    7456:	9d 01       	movw	r18, r26
    7458:	26 1b       	sub	r18, r22
    745a:	37 0b       	sbc	r19, r23
    745c:	21 50       	subi	r18, 0x01	; 1
    745e:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    7460:	60 89       	ldd	r22, Z+16	; 0x10
    7462:	71 89       	ldd	r23, Z+17	; 0x11
    7464:	68 01       	movw	r12, r16
    7466:	c0 94       	com	r12
    7468:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    746a:	8a 01       	movw	r16, r20
    746c:	00 95       	com	r16
    746e:	10 95       	com	r17
    7470:	06 0f       	add	r16, r22
    7472:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    7474:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    7476:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    7478:	a6 01       	movw	r20, r12
    747a:	46 0f       	add	r20, r22
    747c:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    747e:	b5 01       	movw	r22, r10
    7480:	f1 cc       	rjmp	.-1566   	; 0x6e64 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    7482:	f7 01       	movw	r30, r14
    7484:	a0 89       	ldd	r26, Z+16	; 0x10
    7486:	b1 89       	ldd	r27, Z+17	; 0x11
    7488:	69 01       	movw	r12, r18
    748a:	c0 94       	com	r12
    748c:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    748e:	cd 01       	movw	r24, r26
    7490:	86 1b       	sub	r24, r22
    7492:	97 0b       	sbc	r25, r23
    7494:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    7496:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    7498:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    749a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    749c:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    749e:	a6 01       	movw	r20, r12
    74a0:	4a 0f       	add	r20, r26
    74a2:	5b 1f       	adc	r21, r27
    74a4:	e1 cc       	rjmp	.-1598   	; 0x6e68 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    74a6:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    74a8:	fb 01       	movw	r30, r22
    74aa:	de cc       	rjmp	.-1604   	; 0x6e68 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    74ac:	01 97       	sbiw	r24, 0x01	; 1
    74ae:	09 f0       	breq	.+2      	; 0x74b2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    74b0:	e5 c1       	rjmp	.+970    	; 0x787c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    74b2:	d0 96       	adiw	r26, 0x30	; 48
    74b4:	ed 91       	ld	r30, X+
    74b6:	fc 91       	ld	r31, X
    74b8:	d1 97       	sbiw	r26, 0x31	; 49
    74ba:	80 81       	ld	r24, Z
    74bc:	db 96       	adiw	r26, 0x3b	; 59
    74be:	9c 91       	ld	r25, X
    74c0:	db 97       	sbiw	r26, 0x3b	; 59
    74c2:	89 23       	and	r24, r25
    74c4:	80 83       	st	Z, r24
    74c6:	82 e0       	ldi	r24, 0x02	; 2
    74c8:	82 b9       	out	0x02, r24	; 2
    74ca:	d2 96       	adiw	r26, 0x32	; 50
    74cc:	ed 91       	ld	r30, X+
    74ce:	fc 91       	ld	r31, X
    74d0:	d3 97       	sbiw	r26, 0x33	; 51
    74d2:	80 81       	ld	r24, Z
    74d4:	dc 96       	adiw	r26, 0x3c	; 60
    74d6:	9c 91       	ld	r25, X
    74d8:	dc 97       	sbiw	r26, 0x3c	; 60
    74da:	89 23       	and	r24, r25
    74dc:	80 83       	st	Z, r24
    74de:	d2 96       	adiw	r26, 0x32	; 50
    74e0:	ed 91       	ld	r30, X+
    74e2:	fc 91       	ld	r31, X
    74e4:	d3 97       	sbiw	r26, 0x33	; 51
    74e6:	80 81       	ld	r24, Z
    74e8:	d8 96       	adiw	r26, 0x38	; 56
    74ea:	9c 91       	ld	r25, X
    74ec:	d8 97       	sbiw	r26, 0x38	; 56
    74ee:	89 2b       	or	r24, r25
    74f0:	80 83       	st	Z, r24
    74f2:	d0 96       	adiw	r26, 0x30	; 48
    74f4:	ed 91       	ld	r30, X+
    74f6:	fc 91       	ld	r31, X
    74f8:	d1 97       	sbiw	r26, 0x31	; 49
    74fa:	80 81       	ld	r24, Z
    74fc:	d7 96       	adiw	r26, 0x37	; 55
    74fe:	9c 91       	ld	r25, X
    7500:	d7 97       	sbiw	r26, 0x37	; 55
    7502:	89 2b       	or	r24, r25
    7504:	80 83       	st	Z, r24
    7506:	72 b9       	out	0x02, r23	; 2
    7508:	d2 96       	adiw	r26, 0x32	; 50
    750a:	ed 91       	ld	r30, X+
    750c:	fc 91       	ld	r31, X
    750e:	d3 97       	sbiw	r26, 0x33	; 51
    7510:	80 81       	ld	r24, Z
    7512:	dc 96       	adiw	r26, 0x3c	; 60
    7514:	9c 91       	ld	r25, X
    7516:	dc 97       	sbiw	r26, 0x3c	; 60
    7518:	89 23       	and	r24, r25
    751a:	80 83       	st	Z, r24
    751c:	d2 96       	adiw	r26, 0x32	; 50
    751e:	ed 91       	ld	r30, X+
    7520:	fc 91       	ld	r31, X
    7522:	d3 97       	sbiw	r26, 0x33	; 51
    7524:	80 81       	ld	r24, Z
    7526:	d8 96       	adiw	r26, 0x38	; 56
    7528:	9c 91       	ld	r25, X
    752a:	d8 97       	sbiw	r26, 0x38	; 56
    752c:	89 2b       	or	r24, r25
    752e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    7530:	d0 96       	adiw	r26, 0x30	; 48
    7532:	ed 91       	ld	r30, X+
    7534:	fc 91       	ld	r31, X
    7536:	d1 97       	sbiw	r26, 0x31	; 49
    7538:	80 81       	ld	r24, Z
    753a:	db 96       	adiw	r26, 0x3b	; 59
    753c:	9c 91       	ld	r25, X
    753e:	db 97       	sbiw	r26, 0x3b	; 59
    7540:	89 23       	and	r24, r25
    7542:	80 83       	st	Z, r24
    7544:	83 e0       	ldi	r24, 0x03	; 3
    7546:	82 b9       	out	0x02, r24	; 2
    7548:	d2 96       	adiw	r26, 0x32	; 50
    754a:	ed 91       	ld	r30, X+
    754c:	fc 91       	ld	r31, X
    754e:	d3 97       	sbiw	r26, 0x33	; 51
    7550:	80 81       	ld	r24, Z
    7552:	dc 96       	adiw	r26, 0x3c	; 60
    7554:	9c 91       	ld	r25, X
    7556:	dc 97       	sbiw	r26, 0x3c	; 60
    7558:	89 23       	and	r24, r25
    755a:	80 83       	st	Z, r24
    755c:	d2 96       	adiw	r26, 0x32	; 50
    755e:	ed 91       	ld	r30, X+
    7560:	fc 91       	ld	r31, X
    7562:	d3 97       	sbiw	r26, 0x33	; 51
    7564:	80 81       	ld	r24, Z
    7566:	d8 96       	adiw	r26, 0x38	; 56
    7568:	9c 91       	ld	r25, X
    756a:	d8 97       	sbiw	r26, 0x38	; 56
    756c:	89 2b       	or	r24, r25
    756e:	80 83       	st	Z, r24
    7570:	d0 96       	adiw	r26, 0x30	; 48
    7572:	ed 91       	ld	r30, X+
    7574:	fc 91       	ld	r31, X
    7576:	d1 97       	sbiw	r26, 0x31	; 49
    7578:	80 81       	ld	r24, Z
    757a:	d7 96       	adiw	r26, 0x37	; 55
    757c:	9c 91       	ld	r25, X
    757e:	d7 97       	sbiw	r26, 0x37	; 55
    7580:	89 2b       	or	r24, r25
    7582:	80 83       	st	Z, r24
    7584:	62 b9       	out	0x02, r22	; 2
    7586:	d2 96       	adiw	r26, 0x32	; 50
    7588:	ed 91       	ld	r30, X+
    758a:	fc 91       	ld	r31, X
    758c:	d3 97       	sbiw	r26, 0x33	; 51
    758e:	80 81       	ld	r24, Z
    7590:	dc 96       	adiw	r26, 0x3c	; 60
    7592:	9c 91       	ld	r25, X
    7594:	dc 97       	sbiw	r26, 0x3c	; 60
    7596:	89 23       	and	r24, r25
    7598:	80 83       	st	Z, r24
    759a:	d2 96       	adiw	r26, 0x32	; 50
    759c:	ed 91       	ld	r30, X+
    759e:	fc 91       	ld	r31, X
    75a0:	d3 97       	sbiw	r26, 0x33	; 51
    75a2:	80 81       	ld	r24, Z
    75a4:	d8 96       	adiw	r26, 0x38	; 56
    75a6:	9c 91       	ld	r25, X
    75a8:	d8 97       	sbiw	r26, 0x38	; 56
    75aa:	89 2b       	or	r24, r25
    75ac:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    75ae:	d0 96       	adiw	r26, 0x30	; 48
    75b0:	ed 91       	ld	r30, X+
    75b2:	fc 91       	ld	r31, X
    75b4:	d1 97       	sbiw	r26, 0x31	; 49
    75b6:	80 81       	ld	r24, Z
    75b8:	db 96       	adiw	r26, 0x3b	; 59
    75ba:	9c 91       	ld	r25, X
    75bc:	db 97       	sbiw	r26, 0x3b	; 59
    75be:	89 23       	and	r24, r25
    75c0:	80 83       	st	Z, r24
    75c2:	86 e0       	ldi	r24, 0x06	; 6
    75c4:	82 b9       	out	0x02, r24	; 2
    75c6:	d2 96       	adiw	r26, 0x32	; 50
    75c8:	ed 91       	ld	r30, X+
    75ca:	fc 91       	ld	r31, X
    75cc:	d3 97       	sbiw	r26, 0x33	; 51
    75ce:	80 81       	ld	r24, Z
    75d0:	dc 96       	adiw	r26, 0x3c	; 60
    75d2:	9c 91       	ld	r25, X
    75d4:	dc 97       	sbiw	r26, 0x3c	; 60
    75d6:	89 23       	and	r24, r25
    75d8:	80 83       	st	Z, r24
    75da:	d2 96       	adiw	r26, 0x32	; 50
    75dc:	ed 91       	ld	r30, X+
    75de:	fc 91       	ld	r31, X
    75e0:	d3 97       	sbiw	r26, 0x33	; 51
    75e2:	80 81       	ld	r24, Z
    75e4:	d8 96       	adiw	r26, 0x38	; 56
    75e6:	9c 91       	ld	r25, X
    75e8:	d8 97       	sbiw	r26, 0x38	; 56
    75ea:	89 2b       	or	r24, r25
    75ec:	80 83       	st	Z, r24
    75ee:	d0 96       	adiw	r26, 0x30	; 48
    75f0:	ed 91       	ld	r30, X+
    75f2:	fc 91       	ld	r31, X
    75f4:	d1 97       	sbiw	r26, 0x31	; 49
    75f6:	80 81       	ld	r24, Z
    75f8:	d7 96       	adiw	r26, 0x37	; 55
    75fa:	9c 91       	ld	r25, X
    75fc:	d7 97       	sbiw	r26, 0x37	; 55
    75fe:	89 2b       	or	r24, r25
    7600:	80 83       	st	Z, r24
    7602:	52 b9       	out	0x02, r21	; 2
    7604:	d2 96       	adiw	r26, 0x32	; 50
    7606:	ed 91       	ld	r30, X+
    7608:	fc 91       	ld	r31, X
    760a:	d3 97       	sbiw	r26, 0x33	; 51
    760c:	80 81       	ld	r24, Z
    760e:	dc 96       	adiw	r26, 0x3c	; 60
    7610:	9c 91       	ld	r25, X
    7612:	dc 97       	sbiw	r26, 0x3c	; 60
    7614:	89 23       	and	r24, r25
    7616:	80 83       	st	Z, r24
    7618:	d2 96       	adiw	r26, 0x32	; 50
    761a:	ed 91       	ld	r30, X+
    761c:	fc 91       	ld	r31, X
    761e:	d3 97       	sbiw	r26, 0x33	; 51
    7620:	80 81       	ld	r24, Z
    7622:	d8 96       	adiw	r26, 0x38	; 56
    7624:	9c 91       	ld	r25, X
    7626:	d8 97       	sbiw	r26, 0x38	; 56
    7628:	89 2b       	or	r24, r25
    762a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    762c:	d0 96       	adiw	r26, 0x30	; 48
    762e:	ed 91       	ld	r30, X+
    7630:	fc 91       	ld	r31, X
    7632:	d1 97       	sbiw	r26, 0x31	; 49
    7634:	80 81       	ld	r24, Z
    7636:	db 96       	adiw	r26, 0x3b	; 59
    7638:	9c 91       	ld	r25, X
    763a:	db 97       	sbiw	r26, 0x3b	; 59
    763c:	89 23       	and	r24, r25
    763e:	80 83       	st	Z, r24
    7640:	87 e0       	ldi	r24, 0x07	; 7
    7642:	82 b9       	out	0x02, r24	; 2
    7644:	d2 96       	adiw	r26, 0x32	; 50
    7646:	ed 91       	ld	r30, X+
    7648:	fc 91       	ld	r31, X
    764a:	d3 97       	sbiw	r26, 0x33	; 51
    764c:	80 81       	ld	r24, Z
    764e:	dc 96       	adiw	r26, 0x3c	; 60
    7650:	9c 91       	ld	r25, X
    7652:	dc 97       	sbiw	r26, 0x3c	; 60
    7654:	89 23       	and	r24, r25
    7656:	80 83       	st	Z, r24
    7658:	d2 96       	adiw	r26, 0x32	; 50
    765a:	ed 91       	ld	r30, X+
    765c:	fc 91       	ld	r31, X
    765e:	d3 97       	sbiw	r26, 0x33	; 51
    7660:	80 81       	ld	r24, Z
    7662:	d8 96       	adiw	r26, 0x38	; 56
    7664:	9c 91       	ld	r25, X
    7666:	d8 97       	sbiw	r26, 0x38	; 56
    7668:	89 2b       	or	r24, r25
    766a:	80 83       	st	Z, r24
    766c:	d0 96       	adiw	r26, 0x30	; 48
    766e:	ed 91       	ld	r30, X+
    7670:	fc 91       	ld	r31, X
    7672:	d1 97       	sbiw	r26, 0x31	; 49
    7674:	80 81       	ld	r24, Z
    7676:	d7 96       	adiw	r26, 0x37	; 55
    7678:	9c 91       	ld	r25, X
    767a:	d7 97       	sbiw	r26, 0x37	; 55
    767c:	89 2b       	or	r24, r25
    767e:	80 83       	st	Z, r24
    7680:	42 b9       	out	0x02, r20	; 2
    7682:	d2 96       	adiw	r26, 0x32	; 50
    7684:	ed 91       	ld	r30, X+
    7686:	fc 91       	ld	r31, X
    7688:	d3 97       	sbiw	r26, 0x33	; 51
    768a:	80 81       	ld	r24, Z
    768c:	dc 96       	adiw	r26, 0x3c	; 60
    768e:	9c 91       	ld	r25, X
    7690:	dc 97       	sbiw	r26, 0x3c	; 60
    7692:	89 23       	and	r24, r25
    7694:	80 83       	st	Z, r24
    7696:	d2 96       	adiw	r26, 0x32	; 50
    7698:	ed 91       	ld	r30, X+
    769a:	fc 91       	ld	r31, X
    769c:	d3 97       	sbiw	r26, 0x33	; 51
    769e:	80 81       	ld	r24, Z
    76a0:	d8 96       	adiw	r26, 0x38	; 56
    76a2:	9c 91       	ld	r25, X
    76a4:	d8 97       	sbiw	r26, 0x38	; 56
    76a6:	89 2b       	or	r24, r25
    76a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    76aa:	d0 96       	adiw	r26, 0x30	; 48
    76ac:	ed 91       	ld	r30, X+
    76ae:	fc 91       	ld	r31, X
    76b0:	d1 97       	sbiw	r26, 0x31	; 49
    76b2:	80 81       	ld	r24, Z
    76b4:	db 96       	adiw	r26, 0x3b	; 59
    76b6:	9c 91       	ld	r25, X
    76b8:	db 97       	sbiw	r26, 0x3b	; 59
    76ba:	89 23       	and	r24, r25
    76bc:	80 83       	st	Z, r24
    76be:	84 e0       	ldi	r24, 0x04	; 4
    76c0:	82 b9       	out	0x02, r24	; 2
    76c2:	d2 96       	adiw	r26, 0x32	; 50
    76c4:	ed 91       	ld	r30, X+
    76c6:	fc 91       	ld	r31, X
    76c8:	d3 97       	sbiw	r26, 0x33	; 51
    76ca:	80 81       	ld	r24, Z
    76cc:	dc 96       	adiw	r26, 0x3c	; 60
    76ce:	9c 91       	ld	r25, X
    76d0:	dc 97       	sbiw	r26, 0x3c	; 60
    76d2:	89 23       	and	r24, r25
    76d4:	80 83       	st	Z, r24
    76d6:	d2 96       	adiw	r26, 0x32	; 50
    76d8:	ed 91       	ld	r30, X+
    76da:	fc 91       	ld	r31, X
    76dc:	d3 97       	sbiw	r26, 0x33	; 51
    76de:	80 81       	ld	r24, Z
    76e0:	d8 96       	adiw	r26, 0x38	; 56
    76e2:	9c 91       	ld	r25, X
    76e4:	d8 97       	sbiw	r26, 0x38	; 56
    76e6:	89 2b       	or	r24, r25
    76e8:	80 83       	st	Z, r24
    76ea:	d0 96       	adiw	r26, 0x30	; 48
    76ec:	ed 91       	ld	r30, X+
    76ee:	fc 91       	ld	r31, X
    76f0:	d1 97       	sbiw	r26, 0x31	; 49
    76f2:	80 81       	ld	r24, Z
    76f4:	d7 96       	adiw	r26, 0x37	; 55
    76f6:	9c 91       	ld	r25, X
    76f8:	d7 97       	sbiw	r26, 0x37	; 55
    76fa:	89 2b       	or	r24, r25
    76fc:	80 83       	st	Z, r24
    76fe:	32 b9       	out	0x02, r19	; 2
    7700:	d2 96       	adiw	r26, 0x32	; 50
    7702:	ed 91       	ld	r30, X+
    7704:	fc 91       	ld	r31, X
    7706:	d3 97       	sbiw	r26, 0x33	; 51
    7708:	80 81       	ld	r24, Z
    770a:	dc 96       	adiw	r26, 0x3c	; 60
    770c:	9c 91       	ld	r25, X
    770e:	dc 97       	sbiw	r26, 0x3c	; 60
    7710:	89 23       	and	r24, r25
    7712:	80 83       	st	Z, r24
    7714:	d2 96       	adiw	r26, 0x32	; 50
    7716:	ed 91       	ld	r30, X+
    7718:	fc 91       	ld	r31, X
    771a:	d3 97       	sbiw	r26, 0x33	; 51
    771c:	80 81       	ld	r24, Z
    771e:	d8 96       	adiw	r26, 0x38	; 56
    7720:	9c 91       	ld	r25, X
    7722:	d8 97       	sbiw	r26, 0x38	; 56
    7724:	89 2b       	or	r24, r25
    7726:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    7728:	d0 96       	adiw	r26, 0x30	; 48
    772a:	ed 91       	ld	r30, X+
    772c:	fc 91       	ld	r31, X
    772e:	d1 97       	sbiw	r26, 0x31	; 49
    7730:	80 81       	ld	r24, Z
    7732:	db 96       	adiw	r26, 0x3b	; 59
    7734:	9c 91       	ld	r25, X
    7736:	db 97       	sbiw	r26, 0x3b	; 59
    7738:	89 23       	and	r24, r25
    773a:	80 83       	st	Z, r24
    773c:	85 e0       	ldi	r24, 0x05	; 5
    773e:	82 b9       	out	0x02, r24	; 2
    7740:	d2 96       	adiw	r26, 0x32	; 50
    7742:	ed 91       	ld	r30, X+
    7744:	fc 91       	ld	r31, X
    7746:	d3 97       	sbiw	r26, 0x33	; 51
    7748:	80 81       	ld	r24, Z
    774a:	dc 96       	adiw	r26, 0x3c	; 60
    774c:	9c 91       	ld	r25, X
    774e:	dc 97       	sbiw	r26, 0x3c	; 60
    7750:	89 23       	and	r24, r25
    7752:	80 83       	st	Z, r24
    7754:	d2 96       	adiw	r26, 0x32	; 50
    7756:	ed 91       	ld	r30, X+
    7758:	fc 91       	ld	r31, X
    775a:	d3 97       	sbiw	r26, 0x33	; 51
    775c:	80 81       	ld	r24, Z
    775e:	d8 96       	adiw	r26, 0x38	; 56
    7760:	9c 91       	ld	r25, X
    7762:	d8 97       	sbiw	r26, 0x38	; 56
    7764:	89 2b       	or	r24, r25
    7766:	80 83       	st	Z, r24
    7768:	d0 96       	adiw	r26, 0x30	; 48
    776a:	ed 91       	ld	r30, X+
    776c:	fc 91       	ld	r31, X
    776e:	d1 97       	sbiw	r26, 0x31	; 49
    7770:	80 81       	ld	r24, Z
    7772:	d7 96       	adiw	r26, 0x37	; 55
    7774:	9c 91       	ld	r25, X
    7776:	d7 97       	sbiw	r26, 0x37	; 55
    7778:	89 2b       	or	r24, r25
    777a:	80 83       	st	Z, r24
    777c:	22 b9       	out	0x02, r18	; 2
    777e:	d2 96       	adiw	r26, 0x32	; 50
    7780:	ed 91       	ld	r30, X+
    7782:	fc 91       	ld	r31, X
    7784:	d3 97       	sbiw	r26, 0x33	; 51
    7786:	80 81       	ld	r24, Z
    7788:	dc 96       	adiw	r26, 0x3c	; 60
    778a:	9c 91       	ld	r25, X
    778c:	dc 97       	sbiw	r26, 0x3c	; 60
    778e:	89 23       	and	r24, r25
    7790:	80 83       	st	Z, r24
    7792:	d2 96       	adiw	r26, 0x32	; 50
    7794:	ed 91       	ld	r30, X+
    7796:	fc 91       	ld	r31, X
    7798:	d3 97       	sbiw	r26, 0x33	; 51
    779a:	80 81       	ld	r24, Z
    779c:	d8 96       	adiw	r26, 0x38	; 56
    779e:	9c 91       	ld	r25, X
    77a0:	d8 97       	sbiw	r26, 0x38	; 56
    77a2:	89 2b       	or	r24, r25
    77a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    77a6:	d0 96       	adiw	r26, 0x30	; 48
    77a8:	ed 91       	ld	r30, X+
    77aa:	fc 91       	ld	r31, X
    77ac:	d1 97       	sbiw	r26, 0x31	; 49
    77ae:	80 81       	ld	r24, Z
    77b0:	db 96       	adiw	r26, 0x3b	; 59
    77b2:	9c 91       	ld	r25, X
    77b4:	db 97       	sbiw	r26, 0x3b	; 59
    77b6:	89 23       	and	r24, r25
    77b8:	80 83       	st	Z, r24
    77ba:	88 e0       	ldi	r24, 0x08	; 8
    77bc:	82 b9       	out	0x02, r24	; 2
    77be:	d2 96       	adiw	r26, 0x32	; 50
    77c0:	ed 91       	ld	r30, X+
    77c2:	fc 91       	ld	r31, X
    77c4:	d3 97       	sbiw	r26, 0x33	; 51
    77c6:	80 81       	ld	r24, Z
    77c8:	dc 96       	adiw	r26, 0x3c	; 60
    77ca:	9c 91       	ld	r25, X
    77cc:	dc 97       	sbiw	r26, 0x3c	; 60
    77ce:	89 23       	and	r24, r25
    77d0:	80 83       	st	Z, r24
    77d2:	d2 96       	adiw	r26, 0x32	; 50
    77d4:	ed 91       	ld	r30, X+
    77d6:	fc 91       	ld	r31, X
    77d8:	d3 97       	sbiw	r26, 0x33	; 51
    77da:	80 81       	ld	r24, Z
    77dc:	d8 96       	adiw	r26, 0x38	; 56
    77de:	9c 91       	ld	r25, X
    77e0:	d8 97       	sbiw	r26, 0x38	; 56
    77e2:	89 2b       	or	r24, r25
    77e4:	80 83       	st	Z, r24
    77e6:	d0 96       	adiw	r26, 0x30	; 48
    77e8:	ed 91       	ld	r30, X+
    77ea:	fc 91       	ld	r31, X
    77ec:	d1 97       	sbiw	r26, 0x31	; 49
    77ee:	80 81       	ld	r24, Z
    77f0:	d7 96       	adiw	r26, 0x37	; 55
    77f2:	9c 91       	ld	r25, X
    77f4:	d7 97       	sbiw	r26, 0x37	; 55
    77f6:	89 2b       	or	r24, r25
    77f8:	80 83       	st	Z, r24
    77fa:	12 b9       	out	0x02, r17	; 2
    77fc:	d2 96       	adiw	r26, 0x32	; 50
    77fe:	ed 91       	ld	r30, X+
    7800:	fc 91       	ld	r31, X
    7802:	d3 97       	sbiw	r26, 0x33	; 51
    7804:	80 81       	ld	r24, Z
    7806:	dc 96       	adiw	r26, 0x3c	; 60
    7808:	9c 91       	ld	r25, X
    780a:	dc 97       	sbiw	r26, 0x3c	; 60
    780c:	89 23       	and	r24, r25
    780e:	80 83       	st	Z, r24
    7810:	d2 96       	adiw	r26, 0x32	; 50
    7812:	ed 91       	ld	r30, X+
    7814:	fc 91       	ld	r31, X
    7816:	d3 97       	sbiw	r26, 0x33	; 51
    7818:	80 81       	ld	r24, Z
    781a:	d8 96       	adiw	r26, 0x38	; 56
    781c:	9c 91       	ld	r25, X
    781e:	d8 97       	sbiw	r26, 0x38	; 56
    7820:	89 2b       	or	r24, r25
    7822:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    7824:	d0 96       	adiw	r26, 0x30	; 48
    7826:	ed 91       	ld	r30, X+
    7828:	fc 91       	ld	r31, X
    782a:	d1 97       	sbiw	r26, 0x31	; 49
    782c:	80 81       	ld	r24, Z
    782e:	db 96       	adiw	r26, 0x3b	; 59
    7830:	9c 91       	ld	r25, X
    7832:	db 97       	sbiw	r26, 0x3b	; 59
    7834:	89 23       	and	r24, r25
    7836:	80 83       	st	Z, r24
    7838:	89 e0       	ldi	r24, 0x09	; 9
    783a:	82 b9       	out	0x02, r24	; 2
    783c:	d2 96       	adiw	r26, 0x32	; 50
    783e:	ed 91       	ld	r30, X+
    7840:	fc 91       	ld	r31, X
    7842:	d3 97       	sbiw	r26, 0x33	; 51
    7844:	80 81       	ld	r24, Z
    7846:	dc 96       	adiw	r26, 0x3c	; 60
    7848:	9c 91       	ld	r25, X
    784a:	dc 97       	sbiw	r26, 0x3c	; 60
    784c:	89 23       	and	r24, r25
    784e:	80 83       	st	Z, r24
    7850:	d2 96       	adiw	r26, 0x32	; 50
    7852:	ed 91       	ld	r30, X+
    7854:	fc 91       	ld	r31, X
    7856:	d3 97       	sbiw	r26, 0x33	; 51
    7858:	80 81       	ld	r24, Z
    785a:	d8 96       	adiw	r26, 0x38	; 56
    785c:	9c 91       	ld	r25, X
    785e:	d8 97       	sbiw	r26, 0x38	; 56
    7860:	89 2b       	or	r24, r25
    7862:	80 83       	st	Z, r24
    7864:	d0 96       	adiw	r26, 0x30	; 48
    7866:	ed 91       	ld	r30, X+
    7868:	fc 91       	ld	r31, X
    786a:	d1 97       	sbiw	r26, 0x31	; 49
    786c:	80 81       	ld	r24, Z
    786e:	d7 96       	adiw	r26, 0x37	; 55
    7870:	9c 91       	ld	r25, X
    7872:	d7 97       	sbiw	r26, 0x37	; 55
    7874:	89 2b       	or	r24, r25
    7876:	80 83       	st	Z, r24
    7878:	02 b9       	out	0x02, r16	; 2
    787a:	b9 cd       	rjmp	.-1166   	; 0x73ee <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    787c:	7d 83       	std	Y+5, r23	; 0x05
    787e:	6e 83       	std	Y+6, r22	; 0x06
    7880:	3f 83       	std	Y+7, r19	; 0x07
    7882:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    7884:	59 83       	std	Y+1, r21	; 0x01
    7886:	4a 83       	std	Y+2, r20	; 0x02
    7888:	1b 83       	std	Y+3, r17	; 0x03
    788a:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    788c:	f7 01       	movw	r30, r14
    788e:	64 8d       	ldd	r22, Z+28	; 0x1c
    7890:	75 8d       	ldd	r23, Z+29	; 0x1d
    7892:	24 e0       	ldi	r18, 0x04	; 4
    7894:	ae 01       	movw	r20, r28
    7896:	4b 5f       	subi	r20, 0xFB	; 251
    7898:	5f 4f       	sbci	r21, 0xFF	; 255
    789a:	c7 01       	movw	r24, r14
    789c:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    78a0:	d7 01       	movw	r26, r14
    78a2:	5e 96       	adiw	r26, 0x1e	; 30
    78a4:	6d 91       	ld	r22, X+
    78a6:	7c 91       	ld	r23, X
    78a8:	24 e0       	ldi	r18, 0x04	; 4
    78aa:	ae 01       	movw	r20, r28
    78ac:	4f 5f       	subi	r20, 0xFF	; 255
    78ae:	5f 4f       	sbci	r21, 0xFF	; 255
    78b0:	c7 01       	movw	r24, r14
    78b2:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    78b6:	ae cd       	rjmp	.-1188   	; 0x7414 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

000078b8 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056




bool draw_menu(bool redraw)
{
    78b8:	2f 92       	push	r2
    78ba:	3f 92       	push	r3
    78bc:	4f 92       	push	r4
    78be:	5f 92       	push	r5
    78c0:	6f 92       	push	r6
    78c2:	7f 92       	push	r7
    78c4:	8f 92       	push	r8
    78c6:	9f 92       	push	r9
    78c8:	af 92       	push	r10
    78ca:	bf 92       	push	r11
    78cc:	cf 92       	push	r12
    78ce:	df 92       	push	r13
    78d0:	ef 92       	push	r14
    78d2:	ff 92       	push	r15
    78d4:	0f 93       	push	r16
    78d6:	1f 93       	push	r17
    78d8:	cf 93       	push	r28
    78da:	df 93       	push	r29
    78dc:	cd b7       	in	r28, 0x3d	; 61
    78de:	de b7       	in	r29, 0x3e	; 62
    78e0:	c5 5e       	subi	r28, 0xE5	; 229
    78e2:	d1 09       	sbc	r29, r1
    78e4:	0f b6       	in	r0, 0x3f	; 63
    78e6:	f8 94       	cli
    78e8:	de bf       	out	0x3e, r29	; 62
    78ea:	0f be       	out	0x3f, r0	; 63
    78ec:	cd bf       	out	0x3d, r28	; 61
    78ee:	98 2e       	mov	r9, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
  uint8_t rdr;
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);
    78f0:	ce 01       	movw	r24, r28
    78f2:	8d 54       	subi	r24, 0x4D	; 77
    78f4:	9f 4f       	sbci	r25, 0xFF	; 255
    78f6:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <MenuHistoryGetMenu(unsigned char*)>
    78fa:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    78fc:	e0 91 cf 0d 	lds	r30, 0x0DCF	; 0x800dcf <my_touch+0x17>
    7900:	f0 91 d0 0d 	lds	r31, 0x0DD0	; 0x800dd0 <my_touch+0x18>
    7904:	80 81       	ld	r24, Z
    7906:	90 91 d5 0d 	lds	r25, 0x0DD5	; 0x800dd5 <my_touch+0x1d>
    790a:	89 23       	and	r24, r25
    790c:	09 f0       	breq	.+2      	; 0x7910 <draw_menu(bool)+0x58>
    790e:	75 c2       	rjmp	.+1258   	; 0x7dfa <draw_menu(bool)+0x542>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    7910:	80 ed       	ldi	r24, 0xD0	; 208
    7912:	0e 94 a8 82 	call	0x10550	; 0x10550 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7916:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7918:	80 e9       	ldi	r24, 0x90	; 144
    791a:	0e 94 a8 82 	call	0x10550	; 0x10550 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    791e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    7920:	80 ed       	ldi	r24, 0xD0	; 208
    7922:	0e 94 a8 82 	call	0x10550	; 0x10550 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7926:	2c 01       	movw	r4, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7928:	80 e9       	ldi	r24, 0x90	; 144
    792a:	0e 94 a8 82 	call	0x10550	; 0x10550 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    792e:	5c 01       	movw	r10, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    7930:	c4 14       	cp	r12, r4
    7932:	d5 04       	cpc	r13, r5
    7934:	48 f0       	brcs	.+18     	; 0x7948 <draw_menu(bool)+0x90>
    7936:	c2 01       	movw	r24, r4
    7938:	c2 96       	adiw	r24, 0x32	; 50
    793a:	c8 16       	cp	r12, r24
    793c:	d9 06       	cpc	r13, r25
    793e:	50 f0       	brcs	.+20     	; 0x7954 <draw_menu(bool)+0x9c>
    7940:	4c 14       	cp	r4, r12
    7942:	5d 04       	cpc	r5, r13
    7944:	08 f4       	brcc	.+2      	; 0x7948 <draw_menu(bool)+0x90>
    7946:	52 c0       	rjmp	.+164    	; 0x79ec <draw_menu(bool)+0x134>
    7948:	c6 01       	movw	r24, r12
    794a:	c2 96       	adiw	r24, 0x32	; 50
    794c:	48 16       	cp	r4, r24
    794e:	59 06       	cpc	r5, r25
    7950:	08 f0       	brcs	.+2      	; 0x7954 <draw_menu(bool)+0x9c>
    7952:	4c c0       	rjmp	.+152    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    7954:	0a 15       	cp	r16, r10
    7956:	1b 05       	cpc	r17, r11
    7958:	48 f0       	brcs	.+18     	; 0x796c <draw_menu(bool)+0xb4>
    795a:	c5 01       	movw	r24, r10
    795c:	c2 96       	adiw	r24, 0x32	; 50
    795e:	08 17       	cp	r16, r24
    7960:	19 07       	cpc	r17, r25
    7962:	48 f0       	brcs	.+18     	; 0x7976 <draw_menu(bool)+0xbe>
    7964:	a0 16       	cp	r10, r16
    7966:	b1 06       	cpc	r11, r17
    7968:	08 f4       	brcc	.+2      	; 0x796c <draw_menu(bool)+0xb4>
    796a:	40 c0       	rjmp	.+128    	; 0x79ec <draw_menu(bool)+0x134>
    796c:	c8 01       	movw	r24, r16
    796e:	c2 96       	adiw	r24, 0x32	; 50
    7970:	a8 16       	cp	r10, r24
    7972:	b9 06       	cpc	r11, r25
    7974:	d8 f5       	brcc	.+118    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    7976:	c4 0c       	add	r12, r4
    7978:	d5 1c       	adc	r13, r5
    797a:	96 01       	movw	r18, r12
    797c:	36 95       	lsr	r19
    797e:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    7980:	a4 e5       	ldi	r26, 0x54	; 84
    7982:	b3 e0       	ldi	r27, 0x03	; 3
    7984:	0e 94 42 b2 	call	0x16484	; 0x16484 <__umulhisi3>
    7988:	20 e1       	ldi	r18, 0x10	; 16
    798a:	22 2e       	mov	r2, r18
    798c:	27 e2       	ldi	r18, 0x27	; 39
    798e:	32 2e       	mov	r3, r18
    7990:	41 2c       	mov	r4, r1
    7992:	51 2c       	mov	r5, r1
    7994:	a2 01       	movw	r20, r4
    7996:	91 01       	movw	r18, r2
    7998:	0e 94 18 b2 	call	0x16430	; 0x16430 <__divmodsi4>
    799c:	69 01       	movw	r12, r18
    799e:	8e e0       	ldi	r24, 0x0E	; 14
    79a0:	c8 1a       	sub	r12, r24
    79a2:	d1 08       	sbc	r13, r1
    79a4:	d0 92 bd 0d 	sts	0x0DBD, r13	; 0x800dbd <my_touch+0x5>
    79a8:	c0 92 bc 0d 	sts	0x0DBC, r12	; 0x800dbc <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    79ac:	0a 0d       	add	r16, r10
    79ae:	1b 1d       	adc	r17, r11
    79b0:	98 01       	movw	r18, r16
    79b2:	36 95       	lsr	r19
    79b4:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    79b6:	a4 e0       	ldi	r26, 0x04	; 4
    79b8:	b5 e0       	ldi	r27, 0x05	; 5
    79ba:	0e 94 42 b2 	call	0x16484	; 0x16484 <__umulhisi3>
    79be:	a2 01       	movw	r20, r4
    79c0:	91 01       	movw	r18, r2
    79c2:	0e 94 18 b2 	call	0x16430	; 0x16430 <__divmodsi4>
    79c6:	2e 51       	subi	r18, 0x1E	; 30
    79c8:	31 09       	sbc	r19, r1
    79ca:	30 93 bf 0d 	sts	0x0DBF, r19	; 0x800dbf <my_touch+0x7>
    79ce:	20 93 be 0d 	sts	0x0DBE, r18	; 0x800dbe <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    79d2:	80 91 c5 0d 	lds	r24, 0x0DC5	; 0x800dc5 <my_touch+0xd>
    79d6:	81 30       	cpi	r24, 0x01	; 1
    79d8:	09 f4       	brne	.+2      	; 0x79dc <draw_menu(bool)+0x124>
    79da:	c5 c1       	rjmp	.+906    	; 0x7d66 <draw_menu(bool)+0x4ae>
    79dc:	08 f4       	brcc	.+2      	; 0x79e0 <draw_menu(bool)+0x128>
    79de:	92 c1       	rjmp	.+804    	; 0x7d04 <draw_menu(bool)+0x44c>
    79e0:	82 30       	cpi	r24, 0x02	; 2
    79e2:	09 f4       	brne	.+2      	; 0x79e6 <draw_menu(bool)+0x12e>
    79e4:	f1 c1       	rjmp	.+994    	; 0x7dc8 <draw_menu(bool)+0x510>
    79e6:	83 30       	cpi	r24, 0x03	; 3
    79e8:	09 f4       	brne	.+2      	; 0x79ec <draw_menu(bool)+0x134>
    79ea:	fa c1       	rjmp	.+1012   	; 0x7de0 <draw_menu(bool)+0x528>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    79ec:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_touch+0xc>
    79f0:	87 fd       	sbrc	r24, 7
    79f2:	13 c0       	rjmp	.+38     	; 0x7a1a <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    79f4:	80 ec       	ldi	r24, 0xC0	; 192
    79f6:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    79fa:	80 91 bc 0d 	lds	r24, 0x0DBC	; 0x800dbc <my_touch+0x4>
    79fe:	90 91 bd 0d 	lds	r25, 0x0DBD	; 0x800dbd <my_touch+0x5>
    7a02:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <my_touch+0x1>
    7a06:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    7a0a:	80 91 be 0d 	lds	r24, 0x0DBE	; 0x800dbe <my_touch+0x6>
    7a0e:	90 91 bf 0d 	lds	r25, 0x0DBF	; 0x800dbf <my_touch+0x7>
    7a12:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <my_touch+0x3>
    7a16:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1093

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    7a1a:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_touch+0xc>
    7a1e:	87 ff       	sbrs	r24, 7
    7a20:	07 c2       	rjmp	.+1038   	; 0x7e30 <draw_menu(bool)+0x578>
    7a22:	91 10       	cpse	r9, r1
    7a24:	05 c2       	rjmp	.+1034   	; 0x7e30 <draw_menu(bool)+0x578>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
  {
    click_x = my_touch.x;
    7a26:	e0 91 bc 0d 	lds	r30, 0x0DBC	; 0x800dbc <my_touch+0x4>
    7a2a:	f0 91 bd 0d 	lds	r31, 0x0DBD	; 0x800dbd <my_touch+0x5>
    7a2e:	c0 54       	subi	r28, 0x40	; 64
    7a30:	df 4f       	sbci	r29, 0xFF	; 255
    7a32:	f9 83       	std	Y+1, r31	; 0x01
    7a34:	e8 83       	st	Y, r30
    7a36:	c0 5c       	subi	r28, 0xC0	; 192
    7a38:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1096
    click_y = my_touch.y;
    7a3a:	20 91 be 0d 	lds	r18, 0x0DBE	; 0x800dbe <my_touch+0x6>
    7a3e:	30 91 bf 0d 	lds	r19, 0x0DBF	; 0x800dbf <my_touch+0x7>
    7a42:	ce 53       	subi	r28, 0x3E	; 62
    7a44:	df 4f       	sbci	r29, 0xFF	; 255
    7a46:	39 83       	std	Y+1, r19	; 0x01
    7a48:	28 83       	st	Y, r18
    7a4a:	c2 5c       	subi	r28, 0xC2	; 194
    7a4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1099
  }

  global_x = pgm_read_word(&current->x);
    7a4e:	83 01       	movw	r16, r6
    7a50:	02 5b       	subi	r16, 0xB2	; 178
    7a52:	1d 4f       	sbci	r17, 0xFD	; 253
    7a54:	f8 01       	movw	r30, r16
    7a56:	45 91       	lpm	r20, Z+
    7a58:	54 91       	lpm	r21, Z
    7a5a:	c8 54       	subi	r28, 0x48	; 72
    7a5c:	df 4f       	sbci	r29, 0xFF	; 255
    7a5e:	59 83       	std	Y+1, r21	; 0x01
    7a60:	48 83       	st	Y, r20
    7a62:	c8 5b       	subi	r28, 0xB8	; 184
    7a64:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1100
  global_y = pgm_read_word(&current->y);
    7a66:	63 01       	movw	r12, r6
    7a68:	50 eb       	ldi	r21, 0xB0	; 176
    7a6a:	c5 1a       	sub	r12, r21
    7a6c:	5d ef       	ldi	r21, 0xFD	; 253
    7a6e:	d5 0a       	sbc	r13, r21
    7a70:	f6 01       	movw	r30, r12
    7a72:	85 91       	lpm	r24, Z+
    7a74:	94 91       	lpm	r25, Z
    7a76:	c6 54       	subi	r28, 0x46	; 70
    7a78:	df 4f       	sbci	r29, 0xFF	; 255
    7a7a:	99 83       	std	Y+1, r25	; 0x01
    7a7c:	88 83       	st	Y, r24
    7a7e:	ca 5b       	subi	r28, 0xBA	; 186
    7a80:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1103


  rfnt = pgm_read_word(&current->redraw_class_0);
    7a82:	f3 01       	movw	r30, r6
    7a84:	e6 5a       	subi	r30, 0xA6	; 166
    7a86:	fd 4f       	sbci	r31, 0xFD	; 253
    7a88:	25 91       	lpm	r18, Z+
    7a8a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1104
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7a8c:	53 01       	movw	r10, r6
    7a8e:	93 eb       	ldi	r25, 0xB3	; 179
    7a90:	a9 1a       	sub	r10, r25
    7a92:	9d ef       	ldi	r25, 0xFD	; 253
    7a94:	b9 0a       	sbc	r11, r25
    7a96:	f5 01       	movw	r30, r10
    7a98:	84 91       	lpm	r24, Z
    7a9a:	cd 54       	subi	r28, 0x4D	; 77
    7a9c:	df 4f       	sbci	r29, 0xFF	; 255
    7a9e:	68 81       	ld	r22, Y
    7aa0:	c3 5b       	subi	r28, 0xB3	; 179
    7aa2:	d0 40       	sbci	r29, 0x00	; 0
    7aa4:	70 e0       	ldi	r23, 0x00	; 0
    7aa6:	4f ef       	ldi	r20, 0xFF	; 255
    7aa8:	90 e0       	ldi	r25, 0x00	; 0
    7aaa:	f9 01       	movw	r30, r18
    7aac:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1106
  if (rdr == 0)
    cbi(redraw_class, 0);
    7aae:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
  global_y = pgm_read_word(&current->y);


  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    7ab0:	88 23       	and	r24, r24
    7ab2:	11 f0       	breq	.+4      	; 0x7ab8 <draw_menu(bool)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1108
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    7ab4:	88 24       	eor	r8, r8
    7ab6:	83 94       	inc	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1110
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    7ab8:	f3 01       	movw	r30, r6
    7aba:	e4 5a       	subi	r30, 0xA4	; 164
    7abc:	fd 4f       	sbci	r31, 0xFD	; 253
    7abe:	25 91       	lpm	r18, Z+
    7ac0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1111
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7ac2:	f5 01       	movw	r30, r10
    7ac4:	84 91       	lpm	r24, Z
    7ac6:	cd 54       	subi	r28, 0x4D	; 77
    7ac8:	df 4f       	sbci	r29, 0xFF	; 255
    7aca:	68 81       	ld	r22, Y
    7acc:	c3 5b       	subi	r28, 0xB3	; 179
    7ace:	d0 40       	sbci	r29, 0x00	; 0
    7ad0:	70 e0       	ldi	r23, 0x00	; 0
    7ad2:	4f ef       	ldi	r20, 0xFF	; 255
    7ad4:	90 e0       	ldi	r25, 0x00	; 0
    7ad6:	f9 01       	movw	r30, r18
    7ad8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1112
  if (rdr == 0)
    7ada:	81 11       	cpse	r24, r1
    7adc:	b6 c1       	rjmp	.+876    	; 0x7e4a <draw_menu(bool)+0x592>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1113
    cbi(redraw_class, 1);
    7ade:	e8 94       	clt
    7ae0:	81 f8       	bld	r8, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1117
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    7ae2:	f3 01       	movw	r30, r6
    7ae4:	e2 5a       	subi	r30, 0xA2	; 162
    7ae6:	fd 4f       	sbci	r31, 0xFD	; 253
    7ae8:	25 91       	lpm	r18, Z+
    7aea:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1118
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7aec:	f5 01       	movw	r30, r10
    7aee:	84 91       	lpm	r24, Z
    7af0:	cd 54       	subi	r28, 0x4D	; 77
    7af2:	df 4f       	sbci	r29, 0xFF	; 255
    7af4:	68 81       	ld	r22, Y
    7af6:	c3 5b       	subi	r28, 0xB3	; 179
    7af8:	d0 40       	sbci	r29, 0x00	; 0
    7afa:	70 e0       	ldi	r23, 0x00	; 0
    7afc:	4f ef       	ldi	r20, 0xFF	; 255
    7afe:	90 e0       	ldi	r25, 0x00	; 0
    7b00:	f9 01       	movw	r30, r18
    7b02:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1119
  if (rdr == 0)
    7b04:	81 11       	cpse	r24, r1
    7b06:	a4 c1       	rjmp	.+840    	; 0x7e50 <draw_menu(bool)+0x598>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1120
    cbi(redraw_class, 2);
    7b08:	88 2d       	mov	r24, r8
    7b0a:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1124
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    7b0c:	91 10       	cpse	r9, r1
    7b0e:	a3 c1       	rjmp	.+838    	; 0x7e56 <draw_menu(bool)+0x59e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1125
    cbi(redraw_class, 3);
    7b10:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1127
  else
    sbi(redraw_class, 3);
    7b12:	c3 53       	subi	r28, 0x33	; 51
    7b14:	df 4f       	sbci	r29, 0xFF	; 255
    7b16:	88 83       	st	Y, r24
    7b18:	cd 5c       	subi	r28, 0xCD	; 205
    7b1a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1130
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    7b1c:	f3 01       	movw	r30, r6
    7b1e:	e7 5a       	subi	r30, 0xA7	; 167
    7b20:	fd 4f       	sbci	r31, 0xFD	; 253
    7b22:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1131
  if (enable_redraw(rdr, redraw_class) == true)
    7b24:	c3 53       	subi	r28, 0x33	; 51
    7b26:	df 4f       	sbci	r29, 0xFF	; 255
    7b28:	68 81       	ld	r22, Y
    7b2a:	cd 5c       	subi	r28, 0xCD	; 205
    7b2c:	d0 40       	sbci	r29, 0x00	; 0
    7b2e:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    7b32:	88 23       	and	r24, r24
    7b34:	d9 f0       	breq	.+54     	; 0x7b6c <draw_menu(bool)+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1133
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    7b36:	f3 01       	movw	r30, r6
    7b38:	65 91       	lpm	r22, Z+
    7b3a:	74 91       	lpm	r23, Z
    7b3c:	ce 01       	movw	r24, r28
    7b3e:	01 96       	adiw	r24, 0x01	; 1
    7b40:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1134
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    7b44:	f6 01       	movw	r30, r12
    7b46:	45 91       	lpm	r20, Z+
    7b48:	54 91       	lpm	r21, Z
    7b4a:	f8 01       	movw	r30, r16
    7b4c:	65 91       	lpm	r22, Z+
    7b4e:	74 91       	lpm	r23, Z
    7b50:	4b 5f       	subi	r20, 0xFB	; 251
    7b52:	5f 4f       	sbci	r21, 0xFF	; 255
    7b54:	6b 5f       	subi	r22, 0xFB	; 251
    7b56:	7f 4f       	sbci	r23, 0xFF	; 255
    7b58:	ee 24       	eor	r14, r14
    7b5a:	ea 94       	dec	r14
    7b5c:	fe 2c       	mov	r15, r14
    7b5e:	10 e0       	ldi	r17, 0x00	; 0
    7b60:	00 e0       	ldi	r16, 0x00	; 0
    7b62:	22 e0       	ldi	r18, 0x02	; 2
    7b64:	ce 01       	movw	r24, r28
    7b66:	01 96       	adiw	r24, 0x01	; 1
    7b68:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7b6c:	91 2c       	mov	r9, r1
    7b6e:	c8 53       	subi	r28, 0x38	; 56
    7b70:	df 4f       	sbci	r29, 0xFF	; 255
    7b72:	18 82       	st	Y, r1
    7b74:	c8 5c       	subi	r28, 0xC8	; 200
    7b76:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7b78:	13 01       	movw	r2, r6
    7b7a:	fb eb       	ldi	r31, 0xBB	; 187
    7b7c:	2f 1a       	sub	r2, r31
    7b7e:	fd ef       	ldi	r31, 0xFD	; 253
    7b80:	3f 0a       	sbc	r3, r31
    7b82:	f1 01       	movw	r30, r2
    7b84:	84 91       	lpm	r24, Z
    7b86:	98 16       	cp	r9, r24
    7b88:	08 f0       	brcs	.+2      	; 0x7b8c <draw_menu(bool)+0x2d4>
    7b8a:	67 c1       	rjmp	.+718    	; 0x7e5a <draw_menu(bool)+0x5a2>
    7b8c:	f1 e1       	ldi	r31, 0x11	; 17
    7b8e:	9f 9e       	mul	r9, r31
    7b90:	20 01       	movw	r4, r0
    7b92:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1144
  {
    button_1 = &current->button_1[idx];
    //rfnt = pgm_read_word(&button_1->enable_show);
    //active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, -1);
    //if (active == 0) continue;
    rdr = pgm_read_byte(&button_1->redraw_class);
    7b94:	f2 01       	movw	r30, r4
    7b96:	70 96       	adiw	r30, 0x10	; 16
    7b98:	e6 0d       	add	r30, r6
    7b9a:	f7 1d       	adc	r31, r7
    7b9c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1145
    if (enable_redraw(rdr, redraw_class) == true)
    7b9e:	c3 53       	subi	r28, 0x33	; 51
    7ba0:	df 4f       	sbci	r29, 0xFF	; 255
    7ba2:	68 81       	ld	r22, Y
    7ba4:	cd 5c       	subi	r28, 0xCD	; 205
    7ba6:	d0 40       	sbci	r29, 0x00	; 0
    7ba8:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    7bac:	88 23       	and	r24, r24
    7bae:	09 f4       	brne	.+2      	; 0x7bb2 <draw_menu(bool)+0x2fa>
    7bb0:	43 c0       	rjmp	.+134    	; 0x7c38 <draw_menu(bool)+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1147
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    7bb2:	f2 01       	movw	r30, r4
    7bb4:	32 96       	adiw	r30, 0x02	; 2
    7bb6:	e6 0d       	add	r30, r6
    7bb8:	f7 1d       	adc	r31, r7
    7bba:	65 91       	lpm	r22, Z+
    7bbc:	74 91       	lpm	r23, Z
    7bbe:	ce 01       	movw	r24, r28
    7bc0:	8f 57       	subi	r24, 0x7F	; 127
    7bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    7bc4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1148
      str1[0] = 0;
    7bc8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1149
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    7bca:	f2 01       	movw	r30, r4
    7bcc:	3c 96       	adiw	r30, 0x0c	; 12
    7bce:	e6 0d       	add	r30, r6
    7bd0:	f7 1d       	adc	r31, r7
    7bd2:	e4 90       	lpm	r14, Z
    7bd4:	04 91       	lpm	r16, Z
    7bd6:	f2 01       	movw	r30, r4
    7bd8:	3a 96       	adiw	r30, 0x0a	; 10
    7bda:	e6 0d       	add	r30, r6
    7bdc:	f7 1d       	adc	r31, r7
    7bde:	25 91       	lpm	r18, Z+
    7be0:	34 91       	lpm	r19, Z
    7be2:	f2 01       	movw	r30, r4
    7be4:	38 96       	adiw	r30, 0x08	; 8
    7be6:	e6 0d       	add	r30, r6
    7be8:	f7 1d       	adc	r31, r7
    7bea:	45 91       	lpm	r20, Z+
    7bec:	54 91       	lpm	r21, Z
    7bee:	f2 01       	movw	r30, r4
    7bf0:	36 96       	adiw	r30, 0x06	; 6
    7bf2:	e6 0d       	add	r30, r6
    7bf4:	f7 1d       	adc	r31, r7
    7bf6:	65 91       	lpm	r22, Z+
    7bf8:	74 91       	lpm	r23, Z
    7bfa:	f2 01       	movw	r30, r4
    7bfc:	34 96       	adiw	r30, 0x04	; 4
    7bfe:	e6 0d       	add	r30, r6
    7c00:	f7 1d       	adc	r31, r7
    7c02:	85 91       	lpm	r24, Z+
    7c04:	94 91       	lpm	r25, Z
    7c06:	c6 54       	subi	r28, 0x46	; 70
    7c08:	df 4f       	sbci	r29, 0xFF	; 255
    7c0a:	e8 81       	ld	r30, Y
    7c0c:	f9 81       	ldd	r31, Y+1	; 0x01
    7c0e:	ca 5b       	subi	r28, 0xBA	; 186
    7c10:	d0 40       	sbci	r29, 0x00	; 0
    7c12:	6e 0f       	add	r22, r30
    7c14:	7f 1f       	adc	r23, r31
    7c16:	81 2c       	mov	r8, r1
    7c18:	fe 01       	movw	r30, r28
    7c1a:	31 96       	adiw	r30, 0x01	; 1
    7c1c:	5f 01       	movw	r10, r30
    7c1e:	e0 58       	subi	r30, 0x80	; 128
    7c20:	ff 4f       	sbci	r31, 0xFF	; 255
    7c22:	6f 01       	movw	r12, r30
    7c24:	c8 54       	subi	r28, 0x48	; 72
    7c26:	df 4f       	sbci	r29, 0xFF	; 255
    7c28:	e8 81       	ld	r30, Y
    7c2a:	f9 81       	ldd	r31, Y+1	; 0x01
    7c2c:	c8 5b       	subi	r28, 0xB8	; 184
    7c2e:	d0 40       	sbci	r29, 0x00	; 0
    7c30:	8e 0f       	add	r24, r30
    7c32:	9f 1f       	adc	r25, r31
    7c34:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1151
    }
    if (click_x > 0 && click_y > 0)
    7c38:	c0 54       	subi	r28, 0x40	; 64
    7c3a:	df 4f       	sbci	r29, 0xFF	; 255
    7c3c:	28 81       	ld	r18, Y
    7c3e:	39 81       	ldd	r19, Y+1	; 0x01
    7c40:	c0 5c       	subi	r28, 0xC0	; 192
    7c42:	d0 40       	sbci	r29, 0x00	; 0
    7c44:	23 2b       	or	r18, r19
    7c46:	09 f4       	brne	.+2      	; 0x7c4a <draw_menu(bool)+0x392>
    7c48:	5b c0       	rjmp	.+182    	; 0x7d00 <draw_menu(bool)+0x448>
    7c4a:	ce 53       	subi	r28, 0x3E	; 62
    7c4c:	df 4f       	sbci	r29, 0xFF	; 255
    7c4e:	48 81       	ld	r20, Y
    7c50:	59 81       	ldd	r21, Y+1	; 0x01
    7c52:	c2 5c       	subi	r28, 0xC2	; 194
    7c54:	d0 40       	sbci	r29, 0x00	; 0
    7c56:	45 2b       	or	r20, r21
    7c58:	09 f4       	brne	.+2      	; 0x7c5c <draw_menu(bool)+0x3a4>
    7c5a:	52 c0       	rjmp	.+164    	; 0x7d00 <draw_menu(bool)+0x448>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1152
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    7c5c:	f2 01       	movw	r30, r4
    7c5e:	3a 96       	adiw	r30, 0x0a	; 10
    7c60:	e6 0d       	add	r30, r6
    7c62:	f7 1d       	adc	r31, r7
    7c64:	25 91       	lpm	r18, Z+
    7c66:	34 91       	lpm	r19, Z
    7c68:	f2 01       	movw	r30, r4
    7c6a:	38 96       	adiw	r30, 0x08	; 8
    7c6c:	e6 0d       	add	r30, r6
    7c6e:	f7 1d       	adc	r31, r7
    7c70:	45 91       	lpm	r20, Z+
    7c72:	54 91       	lpm	r21, Z
    7c74:	f2 01       	movw	r30, r4
    7c76:	36 96       	adiw	r30, 0x06	; 6
    7c78:	e6 0d       	add	r30, r6
    7c7a:	f7 1d       	adc	r31, r7
    7c7c:	65 91       	lpm	r22, Z+
    7c7e:	74 91       	lpm	r23, Z
    7c80:	f2 01       	movw	r30, r4
    7c82:	34 96       	adiw	r30, 0x04	; 4
    7c84:	e6 0d       	add	r30, r6
    7c86:	f7 1d       	adc	r31, r7
    7c88:	85 91       	lpm	r24, Z+
    7c8a:	94 91       	lpm	r25, Z
    7c8c:	c6 54       	subi	r28, 0x46	; 70
    7c8e:	df 4f       	sbci	r29, 0xFF	; 255
    7c90:	e8 81       	ld	r30, Y
    7c92:	f9 81       	ldd	r31, Y+1	; 0x01
    7c94:	ca 5b       	subi	r28, 0xBA	; 186
    7c96:	d0 40       	sbci	r29, 0x00	; 0
    7c98:	6e 0f       	add	r22, r30
    7c9a:	7f 1f       	adc	r23, r31
    7c9c:	ce 53       	subi	r28, 0x3E	; 62
    7c9e:	df 4f       	sbci	r29, 0xFF	; 255
    7ca0:	e8 80       	ld	r14, Y
    7ca2:	f9 80       	ldd	r15, Y+1	; 0x01
    7ca4:	c2 5c       	subi	r28, 0xC2	; 194
    7ca6:	d0 40       	sbci	r29, 0x00	; 0
    7ca8:	c0 54       	subi	r28, 0x40	; 64
    7caa:	df 4f       	sbci	r29, 0xFF	; 255
    7cac:	08 81       	ld	r16, Y
    7cae:	19 81       	ldd	r17, Y+1	; 0x01
    7cb0:	c0 5c       	subi	r28, 0xC0	; 192
    7cb2:	d0 40       	sbci	r29, 0x00	; 0
    7cb4:	c8 54       	subi	r28, 0x48	; 72
    7cb6:	df 4f       	sbci	r29, 0xFF	; 255
    7cb8:	e8 81       	ld	r30, Y
    7cba:	f9 81       	ldd	r31, Y+1	; 0x01
    7cbc:	c8 5b       	subi	r28, 0xB8	; 184
    7cbe:	d0 40       	sbci	r29, 0x00	; 0
    7cc0:	8e 0f       	add	r24, r30
    7cc2:	9f 1f       	adc	r25, r31
    7cc4:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    7cc8:	18 2f       	mov	r17, r24
    7cca:	88 23       	and	r24, r24
    7ccc:	c9 f0       	breq	.+50     	; 0x7d00 <draw_menu(bool)+0x448>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1154
      {
        fntargs =  pgm_read_word(&button_1->onclick);
    7cce:	f2 01       	movw	r30, r4
    7cd0:	3e 96       	adiw	r30, 0x0e	; 14
    7cd2:	e6 0d       	add	r30, r6
    7cd4:	f7 1d       	adc	r31, r7
    7cd6:	25 91       	lpm	r18, Z+
    7cd8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1155
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1);
    7cda:	f2 01       	movw	r30, r4
    7cdc:	3d 96       	adiw	r30, 0x0d	; 13
    7cde:	e6 0d       	add	r30, r6
    7ce0:	f7 1d       	adc	r31, r7
    7ce2:	84 91       	lpm	r24, Z
    7ce4:	cd 54       	subi	r28, 0x4D	; 77
    7ce6:	df 4f       	sbci	r29, 0xFF	; 255
    7ce8:	68 81       	ld	r22, Y
    7cea:	c3 5b       	subi	r28, 0xB3	; 179
    7cec:	d0 40       	sbci	r29, 0x00	; 0
    7cee:	70 e0       	ldi	r23, 0x00	; 0
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	f9 01       	movw	r30, r18
    7cf4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1156
        ret = true;
    7cf6:	c8 53       	subi	r28, 0x38	; 56
    7cf8:	df 4f       	sbci	r29, 0xFF	; 255
    7cfa:	18 83       	st	Y, r17
    7cfc:	c8 5c       	subi	r28, 0xC8	; 200
    7cfe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7d00:	93 94       	inc	r9
    7d02:	3f cf       	rjmp	.-386    	; 0x7b82 <draw_menu(bool)+0x2ca>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    7d04:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_touch+0xe>
    7d08:	88 23       	and	r24, r24
    7d0a:	09 f4       	brne	.+2      	; 0x7d0e <draw_menu(bool)+0x456>
    7d0c:	6f ce       	rjmp	.-802    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    7d0e:	81 30       	cpi	r24, 0x01	; 1
    7d10:	59 f4       	brne	.+22     	; 0x7d28 <draw_menu(bool)+0x470>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    7d12:	30 93 bd 0d 	sts	0x0DBD, r19	; 0x800dbd <my_touch+0x5>
    7d16:	20 93 bc 0d 	sts	0x0DBC, r18	; 0x800dbc <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7d1a:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <my_touch+0xa>
    7d1e:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <my_touch+0xb>
    7d22:	8c 19       	sub	r24, r12
    7d24:	9d 09       	sbc	r25, r13
    7d26:	3d c0       	rjmp	.+122    	; 0x7da2 <draw_menu(bool)+0x4ea>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7d28:	82 30       	cpi	r24, 0x02	; 2
    7d2a:	59 f4       	brne	.+22     	; 0x7d42 <draw_menu(bool)+0x48a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    7d2c:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <my_touch+0x8>
    7d30:	90 91 c1 0d 	lds	r25, 0x0DC1	; 0x800dc1 <my_touch+0x9>
    7d34:	8c 19       	sub	r24, r12
    7d36:	9d 09       	sbc	r25, r13
    7d38:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_touch+0x5>
    7d3c:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_touch+0x4>
    7d40:	2a c0       	rjmp	.+84     	; 0x7d96 <draw_menu(bool)+0x4de>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    7d42:	83 30       	cpi	r24, 0x03	; 3
    7d44:	09 f0       	breq	.+2      	; 0x7d48 <draw_menu(bool)+0x490>
    7d46:	52 ce       	rjmp	.-860    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    7d48:	d0 92 bf 0d 	sts	0x0DBF, r13	; 0x800dbf <my_touch+0x7>
    7d4c:	c0 92 be 0d 	sts	0x0DBE, r12	; 0x800dbe <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    7d50:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <my_touch+0x8>
    7d54:	90 91 c1 0d 	lds	r25, 0x0DC1	; 0x800dc1 <my_touch+0x9>
    7d58:	82 1b       	sub	r24, r18
    7d5a:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7d5c:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_touch+0x5>
    7d60:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_touch+0x4>
    7d64:	43 ce       	rjmp	.-890    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    7d66:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_touch+0xe>
    7d6a:	81 11       	cpse	r24, r1
    7d6c:	07 c0       	rjmp	.+14     	; 0x7d7c <draw_menu(bool)+0x4c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7d6e:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <my_touch+0x8>
    7d72:	90 91 c1 0d 	lds	r25, 0x0DC1	; 0x800dc1 <my_touch+0x9>
    7d76:	8c 19       	sub	r24, r12
    7d78:	9d 09       	sbc	r25, r13
    7d7a:	f0 cf       	rjmp	.-32     	; 0x7d5c <draw_menu(bool)+0x4a4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    7d7c:	81 30       	cpi	r24, 0x01	; 1
    7d7e:	49 f4       	brne	.+18     	; 0x7d92 <draw_menu(bool)+0x4da>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    7d80:	30 93 bd 0d 	sts	0x0DBD, r19	; 0x800dbd <my_touch+0x5>
    7d84:	20 93 bc 0d 	sts	0x0DBC, r18	; 0x800dbc <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    7d88:	d0 92 bf 0d 	sts	0x0DBF, r13	; 0x800dbf <my_touch+0x7>
    7d8c:	c0 92 be 0d 	sts	0x0DBE, r12	; 0x800dbe <my_touch+0x6>
    7d90:	2d ce       	rjmp	.-934    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    7d92:	82 30       	cpi	r24, 0x02	; 2
    7d94:	59 f4       	brne	.+22     	; 0x7dac <draw_menu(bool)+0x4f4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    7d96:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <my_touch+0xa>
    7d9a:	90 91 c3 0d 	lds	r25, 0x0DC3	; 0x800dc3 <my_touch+0xb>
    7d9e:	82 1b       	sub	r24, r18
    7da0:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7da2:	90 93 bf 0d 	sts	0x0DBF, r25	; 0x800dbf <my_touch+0x7>
    7da6:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <my_touch+0x6>
    7daa:	20 ce       	rjmp	.-960    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    7dac:	83 30       	cpi	r24, 0x03	; 3
    7dae:	09 f0       	breq	.+2      	; 0x7db2 <draw_menu(bool)+0x4fa>
    7db0:	1d ce       	rjmp	.-966    	; 0x79ec <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    7db2:	80 91 c0 0d 	lds	r24, 0x0DC0	; 0x800dc0 <my_touch+0x8>
    7db6:	90 91 c1 0d 	lds	r25, 0x0DC1	; 0x800dc1 <my_touch+0x9>
    7dba:	82 1b       	sub	r24, r18
    7dbc:	93 0b       	sbc	r25, r19
    7dbe:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_touch+0x5>
    7dc2:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_touch+0x4>
    7dc6:	a9 cf       	rjmp	.-174    	; 0x7d1a <draw_menu(bool)+0x462>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    7dc8:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_touch+0xe>
    7dcc:	88 23       	and	r24, r24
    7dce:	09 f4       	brne	.+2      	; 0x7dd2 <draw_menu(bool)+0x51a>
    7dd0:	ad cf       	rjmp	.-166    	; 0x7d2c <draw_menu(bool)+0x474>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7dd2:	81 30       	cpi	r24, 0x01	; 1
    7dd4:	09 f4       	brne	.+2      	; 0x7dd8 <draw_menu(bool)+0x520>
    7dd6:	b8 cf       	rjmp	.-144    	; 0x7d48 <draw_menu(bool)+0x490>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    7dd8:	83 30       	cpi	r24, 0x03	; 3
    7dda:	09 f0       	breq	.+2      	; 0x7dde <draw_menu(bool)+0x526>
    7ddc:	07 ce       	rjmp	.-1010   	; 0x79ec <draw_menu(bool)+0x134>
    7dde:	99 cf       	rjmp	.-206    	; 0x7d12 <draw_menu(bool)+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    7de0:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_touch+0xe>
    7de4:	88 23       	and	r24, r24
    7de6:	b9 f2       	breq	.-82     	; 0x7d96 <draw_menu(bool)+0x4de>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7de8:	81 30       	cpi	r24, 0x01	; 1
    7dea:	19 f3       	breq	.-58     	; 0x7db2 <draw_menu(bool)+0x4fa>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7dec:	82 30       	cpi	r24, 0x02	; 2
    7dee:	09 f4       	brne	.+2      	; 0x7df2 <draw_menu(bool)+0x53a>
    7df0:	be cf       	rjmp	.-132    	; 0x7d6e <draw_menu(bool)+0x4b6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    7df2:	83 30       	cpi	r24, 0x03	; 3
    7df4:	09 f0       	breq	.+2      	; 0x7df8 <draw_menu(bool)+0x540>
    7df6:	fa cd       	rjmp	.-1036   	; 0x79ec <draw_menu(bool)+0x134>
    7df8:	c3 cf       	rjmp	.-122    	; 0x7d80 <draw_menu(bool)+0x4c8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    7dfa:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_touch+0xc>
    7dfe:	87 ff       	sbrs	r24, 7
    7e00:	04 c0       	rjmp	.+8      	; 0x7e0a <draw_menu(bool)+0x552>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    7e02:	8f 77       	andi	r24, 0x7F	; 127
    7e04:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <my_touch+0xc>
    7e08:	08 ce       	rjmp	.-1008   	; 0x7a1a <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    7e0a:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <my_touch+0x1>
    7e0e:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    7e12:	10 92 bb 0d 	sts	0x0DBB, r1	; 0x800dbb <my_touch+0x3>
    7e16:	10 92 ba 0d 	sts	0x0DBA, r1	; 0x800dba <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    7e1a:	8f ef       	ldi	r24, 0xFF	; 255
    7e1c:	9f ef       	ldi	r25, 0xFF	; 255
    7e1e:	90 93 bd 0d 	sts	0x0DBD, r25	; 0x800dbd <my_touch+0x5>
    7e22:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    7e26:	90 93 bf 0d 	sts	0x0DBF, r25	; 0x800dbf <my_touch+0x7>
    7e2a:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <my_touch+0x6>
    7e2e:	f5 cd       	rjmp	.-1046   	; 0x7a1a <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    7e30:	ce 53       	subi	r28, 0x3E	; 62
    7e32:	df 4f       	sbci	r29, 0xFF	; 255
    7e34:	19 82       	std	Y+1, r1	; 0x01
    7e36:	18 82       	st	Y, r1
    7e38:	c2 5c       	subi	r28, 0xC2	; 194
    7e3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
  uint8_t redraw_class;
  uint8_t active = 0;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7e3c:	c0 54       	subi	r28, 0x40	; 64
    7e3e:	df 4f       	sbci	r29, 0xFF	; 255
    7e40:	19 82       	std	Y+1, r1	; 0x01
    7e42:	18 82       	st	Y, r1
    7e44:	c0 5c       	subi	r28, 0xC0	; 192
    7e46:	d0 40       	sbci	r29, 0x00	; 0
    7e48:	02 ce       	rjmp	.-1020   	; 0x7a4e <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1115
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    7e4a:	68 94       	set
    7e4c:	81 f8       	bld	r8, 1
    7e4e:	49 ce       	rjmp	.-878    	; 0x7ae2 <draw_menu(bool)+0x22a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1122
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    7e50:	88 2d       	mov	r24, r8
    7e52:	84 60       	ori	r24, 0x04	; 4
    7e54:	5b ce       	rjmp	.-842    	; 0x7b0c <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1127
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    7e56:	88 60       	ori	r24, 0x08	; 8
    7e58:	5c ce       	rjmp	.-840    	; 0x7b12 <draw_menu(bool)+0x25a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1159
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    7e5a:	c8 53       	subi	r28, 0x38	; 56
    7e5c:	df 4f       	sbci	r29, 0xFF	; 255
    7e5e:	f8 81       	ld	r31, Y
    7e60:	c8 5c       	subi	r28, 0xC8	; 200
    7e62:	d0 40       	sbci	r29, 0x00	; 0
    7e64:	f1 11       	cpse	r31, r1
    7e66:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    7e6a:	91 2c       	mov	r9, r1
    7e6c:	93 01       	movw	r18, r6
    7e6e:	2a 5b       	subi	r18, 0xBA	; 186
    7e70:	3d 4f       	sbci	r19, 0xFD	; 253
    7e72:	c4 54       	subi	r28, 0x44	; 68
    7e74:	df 4f       	sbci	r29, 0xFF	; 255
    7e76:	39 83       	std	Y+1, r19	; 0x01
    7e78:	28 83       	st	Y, r18
    7e7a:	cc 5b       	subi	r28, 0xBC	; 188
    7e7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1170
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, -1);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    7e7e:	1e 01       	movw	r2, r28
    7e80:	31 e8       	ldi	r19, 0x81	; 129
    7e82:	23 0e       	add	r2, r19
    7e84:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    7e86:	c4 54       	subi	r28, 0x44	; 68
    7e88:	df 4f       	sbci	r29, 0xFF	; 255
    7e8a:	e8 81       	ld	r30, Y
    7e8c:	f9 81       	ldd	r31, Y+1	; 0x01
    7e8e:	cc 5b       	subi	r28, 0xBC	; 188
    7e90:	d0 40       	sbci	r29, 0x00	; 0
    7e92:	84 91       	lpm	r24, Z
    7e94:	98 16       	cp	r9, r24
    7e96:	08 f0       	brcs	.+2      	; 0x7e9a <draw_menu(bool)+0x5e2>
    7e98:	1b c1       	rjmp	.+566    	; 0x80d0 <draw_menu(bool)+0x818>
    7e9a:	f7 e1       	ldi	r31, 0x17	; 23
    7e9c:	9f 9e       	mul	r9, r31
    7e9e:	20 01       	movw	r4, r0
    7ea0:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1164
  {
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->enable_show);
    7ea2:	f2 01       	movw	r30, r4
    7ea4:	ef 53       	subi	r30, 0x3F	; 63
    7ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    7ea8:	e6 0d       	add	r30, r6
    7eaa:	f7 1d       	adc	r31, r7
    7eac:	25 91       	lpm	r18, Z+
    7eae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, -1);
    7eb0:	c2 01       	movw	r24, r4
    7eb2:	85 54       	subi	r24, 0x45	; 69
    7eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    7eb6:	a3 01       	movw	r20, r6
    7eb8:	48 0f       	add	r20, r24
    7eba:	59 1f       	adc	r21, r25
    7ebc:	ca 54       	subi	r28, 0x4A	; 74
    7ebe:	df 4f       	sbci	r29, 0xFF	; 255
    7ec0:	59 83       	std	Y+1, r21	; 0x01
    7ec2:	48 83       	st	Y, r20
    7ec4:	c6 5b       	subi	r28, 0xB6	; 182
    7ec6:	d0 40       	sbci	r29, 0x00	; 0
    7ec8:	fa 01       	movw	r30, r20
    7eca:	84 91       	lpm	r24, Z
    7ecc:	cd 54       	subi	r28, 0x4D	; 77
    7ece:	df 4f       	sbci	r29, 0xFF	; 255
    7ed0:	68 81       	ld	r22, Y
    7ed2:	c3 5b       	subi	r28, 0xB3	; 179
    7ed4:	d0 40       	sbci	r29, 0x00	; 0
    7ed6:	70 e0       	ldi	r23, 0x00	; 0
    7ed8:	4f ef       	ldi	r20, 0xFF	; 255
    7eda:	90 e0       	ldi	r25, 0x00	; 0
    7edc:	f9 01       	movw	r30, r18
    7ede:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1166
    if (active == 0) continue;
    7ee0:	88 23       	and	r24, r24
    7ee2:	09 f4       	brne	.+2      	; 0x7ee6 <draw_menu(bool)+0x62e>
    7ee4:	f3 c0       	rjmp	.+486    	; 0x80cc <draw_menu(bool)+0x814>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1167
    rdr = pgm_read_byte(&button_2->redraw_class);
    7ee6:	f2 01       	movw	r30, r4
    7ee8:	e0 54       	subi	r30, 0x40	; 64
    7eea:	ff 4f       	sbci	r31, 0xFF	; 255
    7eec:	e6 0d       	add	r30, r6
    7eee:	f7 1d       	adc	r31, r7
    7ef0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1168
    if (enable_redraw(rdr, redraw_class) == true)
    7ef2:	c3 53       	subi	r28, 0x33	; 51
    7ef4:	df 4f       	sbci	r29, 0xFF	; 255
    7ef6:	68 81       	ld	r22, Y
    7ef8:	cd 5c       	subi	r28, 0xCD	; 205
    7efa:	d0 40       	sbci	r29, 0x00	; 0
    7efc:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    7f00:	88 23       	and	r24, r24
    7f02:	09 f4       	brne	.+2      	; 0x7f06 <draw_menu(bool)+0x64e>
    7f04:	78 c0       	rjmp	.+240    	; 0x7ff6 <draw_menu(bool)+0x73e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1170
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    7f06:	f2 01       	movw	r30, r4
    7f08:	e4 55       	subi	r30, 0x54	; 84
    7f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    7f0c:	e6 0d       	add	r30, r6
    7f0e:	f7 1d       	adc	r31, r7
    7f10:	65 91       	lpm	r22, Z+
    7f12:	74 91       	lpm	r23, Z
    7f14:	c1 01       	movw	r24, r2
    7f16:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1171
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    7f1a:	f2 01       	movw	r30, r4
    7f1c:	e2 54       	subi	r30, 0x42	; 66
    7f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f20:	e6 0d       	add	r30, r6
    7f22:	f7 1d       	adc	r31, r7
    7f24:	25 91       	lpm	r18, Z+
    7f26:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1172
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
    7f28:	ca 54       	subi	r28, 0x4A	; 74
    7f2a:	df 4f       	sbci	r29, 0xFF	; 255
    7f2c:	e8 81       	ld	r30, Y
    7f2e:	f9 81       	ldd	r31, Y+1	; 0x01
    7f30:	c6 5b       	subi	r28, 0xB6	; 182
    7f32:	d0 40       	sbci	r29, 0x00	; 0
    7f34:	84 91       	lpm	r24, Z
    7f36:	cd 54       	subi	r28, 0x4D	; 77
    7f38:	df 4f       	sbci	r29, 0xFF	; 255
    7f3a:	68 81       	ld	r22, Y
    7f3c:	c3 5b       	subi	r28, 0xB3	; 179
    7f3e:	d0 40       	sbci	r29, 0x00	; 0
    7f40:	70 e0       	ldi	r23, 0x00	; 0
    7f42:	4f ef       	ldi	r20, 0xFF	; 255
    7f44:	90 e0       	ldi	r25, 0x00	; 0
    7f46:	f9 01       	movw	r30, r18
    7f48:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1173
      str1[0] = 0;
    7f4a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    7f4c:	f2 01       	movw	r30, r4
    7f4e:	e7 54       	subi	r30, 0x47	; 71
    7f50:	ff 4f       	sbci	r31, 0xFF	; 255
    7f52:	e6 0d       	add	r30, r6
    7f54:	f7 1d       	adc	r31, r7
    7f56:	a5 90       	lpm	r10, Z+
    7f58:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1177
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    7f5a:	f2 01       	movw	r30, r4
    7f5c:	e9 54       	subi	r30, 0x49	; 73
    7f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f60:	e6 0d       	add	r30, r6
    7f62:	f7 1d       	adc	r31, r7
    7f64:	c5 90       	lpm	r12, Z+
    7f66:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1176
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    7f68:	82 01       	movw	r16, r4
    7f6a:	0a 54       	subi	r16, 0x4A	; 74
    7f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f6e:	06 0d       	add	r16, r6
    7f70:	17 1d       	adc	r17, r7
    7f72:	f8 01       	movw	r30, r16
    7f74:	04 91       	lpm	r16, Z
    7f76:	f2 01       	movw	r30, r4
    7f78:	ec 54       	subi	r30, 0x4C	; 76
    7f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    7f7c:	e6 0d       	add	r30, r6
    7f7e:	f7 1d       	adc	r31, r7
    7f80:	25 91       	lpm	r18, Z+
    7f82:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1175
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    7f84:	f2 01       	movw	r30, r4
    7f86:	ee 54       	subi	r30, 0x4E	; 78
    7f88:	ff 4f       	sbci	r31, 0xFF	; 255
    7f8a:	e6 0d       	add	r30, r6
    7f8c:	f7 1d       	adc	r31, r7
    7f8e:	45 91       	lpm	r20, Z+
    7f90:	54 91       	lpm	r21, Z
    7f92:	f2 01       	movw	r30, r4
    7f94:	e0 55       	subi	r30, 0x50	; 80
    7f96:	ff 4f       	sbci	r31, 0xFF	; 255
    7f98:	e6 0d       	add	r30, r6
    7f9a:	f7 1d       	adc	r31, r7
    7f9c:	65 91       	lpm	r22, Z+
    7f9e:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1174
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    7fa0:	f2 01       	movw	r30, r4
    7fa2:	e2 55       	subi	r30, 0x52	; 82
    7fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    7fa6:	e6 0d       	add	r30, r6
    7fa8:	f7 1d       	adc	r31, r7
    7faa:	a5 91       	lpm	r26, Z+
    7fac:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1172
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, -1);
    7fae:	88 24       	eor	r8, r8
    7fb0:	83 94       	inc	r8
    7fb2:	81 11       	cpse	r24, r1
    7fb4:	01 c0       	rjmp	.+2      	; 0x7fb8 <draw_menu(bool)+0x700>
    7fb6:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1174
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    7fb8:	c6 54       	subi	r28, 0x46	; 70
    7fba:	df 4f       	sbci	r29, 0xFF	; 255
    7fbc:	88 81       	ld	r24, Y
    7fbe:	99 81       	ldd	r25, Y+1	; 0x01
    7fc0:	ca 5b       	subi	r28, 0xBA	; 186
    7fc2:	d0 40       	sbci	r29, 0x00	; 0
    7fc4:	68 0f       	add	r22, r24
    7fc6:	79 1f       	adc	r23, r25
    7fc8:	e1 e0       	ldi	r30, 0x01	; 1
    7fca:	f0 e0       	ldi	r31, 0x00	; 0
    7fcc:	ec 0f       	add	r30, r28
    7fce:	fd 1f       	adc	r31, r29
    7fd0:	ff 93       	push	r31
    7fd2:	ef 93       	push	r30
    7fd4:	3f 92       	push	r3
    7fd6:	2f 92       	push	r2
    7fd8:	e1 2c       	mov	r14, r1
    7fda:	c8 54       	subi	r28, 0x48	; 72
    7fdc:	df 4f       	sbci	r29, 0xFF	; 255
    7fde:	88 81       	ld	r24, Y
    7fe0:	99 81       	ldd	r25, Y+1	; 0x01
    7fe2:	c8 5b       	subi	r28, 0xB8	; 184
    7fe4:	d0 40       	sbci	r29, 0x00	; 0
    7fe6:	8a 0f       	add	r24, r26
    7fe8:	9b 1f       	adc	r25, r27
    7fea:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    7fee:	0f 90       	pop	r0
    7ff0:	0f 90       	pop	r0
    7ff2:	0f 90       	pop	r0
    7ff4:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    7ff6:	c0 54       	subi	r28, 0x40	; 64
    7ff8:	df 4f       	sbci	r29, 0xFF	; 255
    7ffa:	28 81       	ld	r18, Y
    7ffc:	39 81       	ldd	r19, Y+1	; 0x01
    7ffe:	c0 5c       	subi	r28, 0xC0	; 192
    8000:	d0 40       	sbci	r29, 0x00	; 0
    8002:	23 2b       	or	r18, r19
    8004:	09 f4       	brne	.+2      	; 0x8008 <draw_menu(bool)+0x750>
    8006:	62 c0       	rjmp	.+196    	; 0x80cc <draw_menu(bool)+0x814>
    8008:	ce 53       	subi	r28, 0x3E	; 62
    800a:	df 4f       	sbci	r29, 0xFF	; 255
    800c:	48 81       	ld	r20, Y
    800e:	59 81       	ldd	r21, Y+1	; 0x01
    8010:	c2 5c       	subi	r28, 0xC2	; 194
    8012:	d0 40       	sbci	r29, 0x00	; 0
    8014:	45 2b       	or	r20, r21
    8016:	09 f4       	brne	.+2      	; 0x801a <draw_menu(bool)+0x762>
    8018:	59 c0       	rjmp	.+178    	; 0x80cc <draw_menu(bool)+0x814>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1181
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    801a:	f2 01       	movw	r30, r4
    801c:	ec 54       	subi	r30, 0x4C	; 76
    801e:	ff 4f       	sbci	r31, 0xFF	; 255
    8020:	e6 0d       	add	r30, r6
    8022:	f7 1d       	adc	r31, r7
    8024:	25 91       	lpm	r18, Z+
    8026:	34 91       	lpm	r19, Z
    8028:	f2 01       	movw	r30, r4
    802a:	ee 54       	subi	r30, 0x4E	; 78
    802c:	ff 4f       	sbci	r31, 0xFF	; 255
    802e:	e6 0d       	add	r30, r6
    8030:	f7 1d       	adc	r31, r7
    8032:	45 91       	lpm	r20, Z+
    8034:	54 91       	lpm	r21, Z
    8036:	f2 01       	movw	r30, r4
    8038:	e0 55       	subi	r30, 0x50	; 80
    803a:	ff 4f       	sbci	r31, 0xFF	; 255
    803c:	e6 0d       	add	r30, r6
    803e:	f7 1d       	adc	r31, r7
    8040:	65 91       	lpm	r22, Z+
    8042:	74 91       	lpm	r23, Z
    8044:	f2 01       	movw	r30, r4
    8046:	e2 55       	subi	r30, 0x52	; 82
    8048:	ff 4f       	sbci	r31, 0xFF	; 255
    804a:	e6 0d       	add	r30, r6
    804c:	f7 1d       	adc	r31, r7
    804e:	85 91       	lpm	r24, Z+
    8050:	94 91       	lpm	r25, Z
    8052:	c6 54       	subi	r28, 0x46	; 70
    8054:	df 4f       	sbci	r29, 0xFF	; 255
    8056:	e8 81       	ld	r30, Y
    8058:	f9 81       	ldd	r31, Y+1	; 0x01
    805a:	ca 5b       	subi	r28, 0xBA	; 186
    805c:	d0 40       	sbci	r29, 0x00	; 0
    805e:	6e 0f       	add	r22, r30
    8060:	7f 1f       	adc	r23, r31
    8062:	ce 53       	subi	r28, 0x3E	; 62
    8064:	df 4f       	sbci	r29, 0xFF	; 255
    8066:	e8 80       	ld	r14, Y
    8068:	f9 80       	ldd	r15, Y+1	; 0x01
    806a:	c2 5c       	subi	r28, 0xC2	; 194
    806c:	d0 40       	sbci	r29, 0x00	; 0
    806e:	c0 54       	subi	r28, 0x40	; 64
    8070:	df 4f       	sbci	r29, 0xFF	; 255
    8072:	08 81       	ld	r16, Y
    8074:	19 81       	ldd	r17, Y+1	; 0x01
    8076:	c0 5c       	subi	r28, 0xC0	; 192
    8078:	d0 40       	sbci	r29, 0x00	; 0
    807a:	c8 54       	subi	r28, 0x48	; 72
    807c:	df 4f       	sbci	r29, 0xFF	; 255
    807e:	e8 81       	ld	r30, Y
    8080:	f9 81       	ldd	r31, Y+1	; 0x01
    8082:	c8 5b       	subi	r28, 0xB8	; 184
    8084:	d0 40       	sbci	r29, 0x00	; 0
    8086:	8e 0f       	add	r24, r30
    8088:	9f 1f       	adc	r25, r31
    808a:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    808e:	18 2f       	mov	r17, r24
    8090:	88 23       	and	r24, r24
    8092:	e1 f0       	breq	.+56     	; 0x80cc <draw_menu(bool)+0x814>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1183
      {
        fntargs =  pgm_read_word(&button_2->onclick);
    8094:	f2 01       	movw	r30, r4
    8096:	e4 54       	subi	r30, 0x44	; 68
    8098:	ff 4f       	sbci	r31, 0xFF	; 255
    809a:	e6 0d       	add	r30, r6
    809c:	f7 1d       	adc	r31, r7
    809e:	25 91       	lpm	r18, Z+
    80a0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1184
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1);
    80a2:	ca 54       	subi	r28, 0x4A	; 74
    80a4:	df 4f       	sbci	r29, 0xFF	; 255
    80a6:	e8 81       	ld	r30, Y
    80a8:	f9 81       	ldd	r31, Y+1	; 0x01
    80aa:	c6 5b       	subi	r28, 0xB6	; 182
    80ac:	d0 40       	sbci	r29, 0x00	; 0
    80ae:	84 91       	lpm	r24, Z
    80b0:	cd 54       	subi	r28, 0x4D	; 77
    80b2:	df 4f       	sbci	r29, 0xFF	; 255
    80b4:	68 81       	ld	r22, Y
    80b6:	c3 5b       	subi	r28, 0xB3	; 179
    80b8:	d0 40       	sbci	r29, 0x00	; 0
    80ba:	70 e0       	ldi	r23, 0x00	; 0
    80bc:	90 e0       	ldi	r25, 0x00	; 0
    80be:	f9 01       	movw	r30, r18
    80c0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1185
        ret = true;
    80c2:	c8 53       	subi	r28, 0x38	; 56
    80c4:	df 4f       	sbci	r29, 0xFF	; 255
    80c6:	18 83       	st	Y, r17
    80c8:	c8 5c       	subi	r28, 0xC8	; 200
    80ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    80cc:	93 94       	inc	r9
    80ce:	db ce       	rjmp	.-586    	; 0x7e86 <draw_menu(bool)+0x5ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1188
        fntargs =  pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    80d0:	c8 53       	subi	r28, 0x38	; 56
    80d2:	df 4f       	sbci	r29, 0xFF	; 255
    80d4:	f8 81       	ld	r31, Y
    80d6:	c8 5c       	subi	r28, 0xC8	; 200
    80d8:	d0 40       	sbci	r29, 0x00	; 0
    80da:	f1 11       	cpse	r31, r1
    80dc:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    80e0:	b1 2c       	mov	r11, r1
    80e2:	43 01       	movw	r8, r6
    80e4:	29 eb       	ldi	r18, 0xB9	; 185
    80e6:	82 1a       	sub	r8, r18
    80e8:	2d ef       	ldi	r18, 0xFD	; 253
    80ea:	92 0a       	sbc	r9, r18
    80ec:	f4 01       	movw	r30, r8
    80ee:	84 91       	lpm	r24, Z
    80f0:	b8 16       	cp	r11, r24
    80f2:	08 f0       	brcs	.+2      	; 0x80f6 <draw_menu(bool)+0x83e>
    80f4:	c2 c0       	rjmp	.+388    	; 0x827a <draw_menu(bool)+0x9c2>
    80f6:	f0 e1       	ldi	r31, 0x10	; 16
    80f8:	bf 9e       	mul	r11, r31
    80fa:	60 01       	movw	r12, r0
    80fc:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1193
  {
    function_1 = &current->function_1[idx];
    rfnt = pgm_read_word(&function_1->enable_show);
    80fe:	f6 01       	movw	r30, r12
    8100:	e3 5d       	subi	r30, 0xD3	; 211
    8102:	fe 4f       	sbci	r31, 0xFE	; 254
    8104:	e6 0d       	add	r30, r6
    8106:	f7 1d       	adc	r31, r7
    8108:	25 91       	lpm	r18, Z+
    810a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, -1);
    810c:	86 01       	movw	r16, r12
    810e:	0d 5d       	subi	r16, 0xDD	; 221
    8110:	1e 4f       	sbci	r17, 0xFE	; 254
    8112:	06 0d       	add	r16, r6
    8114:	17 1d       	adc	r17, r7
    8116:	f8 01       	movw	r30, r16
    8118:	84 91       	lpm	r24, Z
    811a:	cd 54       	subi	r28, 0x4D	; 77
    811c:	df 4f       	sbci	r29, 0xFF	; 255
    811e:	68 81       	ld	r22, Y
    8120:	c3 5b       	subi	r28, 0xB3	; 179
    8122:	d0 40       	sbci	r29, 0x00	; 0
    8124:	70 e0       	ldi	r23, 0x00	; 0
    8126:	4f ef       	ldi	r20, 0xFF	; 255
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	f9 01       	movw	r30, r18
    812c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
    if (active == 0) continue;
    812e:	88 23       	and	r24, r24
    8130:	09 f4       	brne	.+2      	; 0x8134 <draw_menu(bool)+0x87c>
    8132:	a1 c0       	rjmp	.+322    	; 0x8276 <draw_menu(bool)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1196
    rdr = pgm_read_byte(&function_1->redraw_class);
    8134:	f6 01       	movw	r30, r12
    8136:	e6 5d       	subi	r30, 0xD6	; 214
    8138:	fe 4f       	sbci	r31, 0xFE	; 254
    813a:	e6 0d       	add	r30, r6
    813c:	f7 1d       	adc	r31, r7
    813e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1197
    if (enable_redraw(rdr, redraw_class) == true)
    8140:	c3 53       	subi	r28, 0x33	; 51
    8142:	df 4f       	sbci	r29, 0xFF	; 255
    8144:	68 81       	ld	r22, Y
    8146:	cd 5c       	subi	r28, 0xCD	; 205
    8148:	d0 40       	sbci	r29, 0x00	; 0
    814a:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    814e:	88 23       	and	r24, r24
    8150:	09 f4       	brne	.+2      	; 0x8154 <draw_menu(bool)+0x89c>
    8152:	3f c0       	rjmp	.+126    	; 0x81d2 <draw_menu(bool)+0x91a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1199
    {
      fnt_coordinate_xy =  pgm_read_dword(&function_1->fnt_coordinate_xy);
    8154:	f6 01       	movw	r30, r12
    8156:	ec 5d       	subi	r30, 0xDC	; 220
    8158:	fe 4f       	sbci	r31, 0xFE	; 254
    815a:	e6 0d       	add	r30, r6
    815c:	f7 1d       	adc	r31, r7
    815e:	25 90       	lpm	r2, Z+
    8160:	35 90       	lpm	r3, Z+
    8162:	45 90       	lpm	r4, Z+
    8164:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1200
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1);
    8166:	f8 01       	movw	r30, r16
    8168:	05 91       	lpm	r16, Z+
    816a:	14 91       	lpm	r17, Z
    816c:	f6 01       	movw	r30, r12
    816e:	e8 5d       	subi	r30, 0xD8	; 216
    8170:	fe 4f       	sbci	r31, 0xFE	; 254
    8172:	e6 0d       	add	r30, r6
    8174:	f7 1d       	adc	r31, r7
    8176:	25 91       	lpm	r18, Z+
    8178:	34 91       	lpm	r19, Z
    817a:	f6 01       	movw	r30, r12
    817c:	ea 5d       	subi	r30, 0xDA	; 218
    817e:	fe 4f       	sbci	r31, 0xFE	; 254
    8180:	e6 0d       	add	r30, r6
    8182:	f7 1d       	adc	r31, r7
    8184:	45 91       	lpm	r20, Z+
    8186:	54 91       	lpm	r21, Z
    8188:	f6 01       	movw	r30, r12
    818a:	ef 5d       	subi	r30, 0xDF	; 223
    818c:	fe 4f       	sbci	r31, 0xFE	; 254
    818e:	e6 0d       	add	r30, r6
    8190:	f7 1d       	adc	r31, r7
    8192:	65 91       	lpm	r22, Z+
    8194:	74 91       	lpm	r23, Z
    8196:	f6 01       	movw	r30, r12
    8198:	e1 5e       	subi	r30, 0xE1	; 225
    819a:	fe 4f       	sbci	r31, 0xFE	; 254
    819c:	e6 0d       	add	r30, r6
    819e:	f7 1d       	adc	r31, r7
    81a0:	85 91       	lpm	r24, Z+
    81a2:	94 91       	lpm	r25, Z
    81a4:	c6 54       	subi	r28, 0x46	; 70
    81a6:	df 4f       	sbci	r29, 0xFF	; 255
    81a8:	e8 81       	ld	r30, Y
    81aa:	f9 81       	ldd	r31, Y+1	; 0x01
    81ac:	ca 5b       	subi	r28, 0xBA	; 186
    81ae:	d0 40       	sbci	r29, 0x00	; 0
    81b0:	6e 0f       	add	r22, r30
    81b2:	7f 1f       	adc	r23, r31
    81b4:	cd 54       	subi	r28, 0x4D	; 77
    81b6:	df 4f       	sbci	r29, 0xFF	; 255
    81b8:	e8 80       	ld	r14, Y
    81ba:	c3 5b       	subi	r28, 0xB3	; 179
    81bc:	d0 40       	sbci	r29, 0x00	; 0
    81be:	c8 54       	subi	r28, 0x48	; 72
    81c0:	df 4f       	sbci	r29, 0xFF	; 255
    81c2:	e8 81       	ld	r30, Y
    81c4:	f9 81       	ldd	r31, Y+1	; 0x01
    81c6:	c8 5b       	subi	r28, 0xB8	; 184
    81c8:	d0 40       	sbci	r29, 0x00	; 0
    81ca:	8e 0f       	add	r24, r30
    81cc:	9f 1f       	adc	r25, r31
    81ce:	f1 01       	movw	r30, r2
    81d0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1202
    }
    if (click_x > 0 && click_y > 0)
    81d2:	c0 54       	subi	r28, 0x40	; 64
    81d4:	df 4f       	sbci	r29, 0xFF	; 255
    81d6:	28 81       	ld	r18, Y
    81d8:	39 81       	ldd	r19, Y+1	; 0x01
    81da:	c0 5c       	subi	r28, 0xC0	; 192
    81dc:	d0 40       	sbci	r29, 0x00	; 0
    81de:	23 2b       	or	r18, r19
    81e0:	09 f4       	brne	.+2      	; 0x81e4 <draw_menu(bool)+0x92c>
    81e2:	49 c0       	rjmp	.+146    	; 0x8276 <draw_menu(bool)+0x9be>
    81e4:	ce 53       	subi	r28, 0x3E	; 62
    81e6:	df 4f       	sbci	r29, 0xFF	; 255
    81e8:	48 81       	ld	r20, Y
    81ea:	59 81       	ldd	r21, Y+1	; 0x01
    81ec:	c2 5c       	subi	r28, 0xC2	; 194
    81ee:	d0 40       	sbci	r29, 0x00	; 0
    81f0:	45 2b       	or	r20, r21
    81f2:	09 f4       	brne	.+2      	; 0x81f6 <draw_menu(bool)+0x93e>
    81f4:	40 c0       	rjmp	.+128    	; 0x8276 <draw_menu(bool)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    81f6:	f6 01       	movw	r30, r12
    81f8:	e8 5d       	subi	r30, 0xD8	; 216
    81fa:	fe 4f       	sbci	r31, 0xFE	; 254
    81fc:	e6 0d       	add	r30, r6
    81fe:	f7 1d       	adc	r31, r7
    8200:	25 91       	lpm	r18, Z+
    8202:	34 91       	lpm	r19, Z
    8204:	f6 01       	movw	r30, r12
    8206:	ea 5d       	subi	r30, 0xDA	; 218
    8208:	fe 4f       	sbci	r31, 0xFE	; 254
    820a:	e6 0d       	add	r30, r6
    820c:	f7 1d       	adc	r31, r7
    820e:	45 91       	lpm	r20, Z+
    8210:	54 91       	lpm	r21, Z
    8212:	f6 01       	movw	r30, r12
    8214:	ef 5d       	subi	r30, 0xDF	; 223
    8216:	fe 4f       	sbci	r31, 0xFE	; 254
    8218:	e6 0d       	add	r30, r6
    821a:	f7 1d       	adc	r31, r7
    821c:	65 91       	lpm	r22, Z+
    821e:	74 91       	lpm	r23, Z
    8220:	f6 01       	movw	r30, r12
    8222:	e1 5e       	subi	r30, 0xE1	; 225
    8224:	fe 4f       	sbci	r31, 0xFE	; 254
    8226:	e6 0d       	add	r30, r6
    8228:	f7 1d       	adc	r31, r7
    822a:	85 91       	lpm	r24, Z+
    822c:	94 91       	lpm	r25, Z
    822e:	c6 54       	subi	r28, 0x46	; 70
    8230:	df 4f       	sbci	r29, 0xFF	; 255
    8232:	e8 81       	ld	r30, Y
    8234:	f9 81       	ldd	r31, Y+1	; 0x01
    8236:	ca 5b       	subi	r28, 0xBA	; 186
    8238:	d0 40       	sbci	r29, 0x00	; 0
    823a:	6e 0f       	add	r22, r30
    823c:	7f 1f       	adc	r23, r31
    823e:	ce 53       	subi	r28, 0x3E	; 62
    8240:	df 4f       	sbci	r29, 0xFF	; 255
    8242:	e8 80       	ld	r14, Y
    8244:	f9 80       	ldd	r15, Y+1	; 0x01
    8246:	c2 5c       	subi	r28, 0xC2	; 194
    8248:	d0 40       	sbci	r29, 0x00	; 0
    824a:	c0 54       	subi	r28, 0x40	; 64
    824c:	df 4f       	sbci	r29, 0xFF	; 255
    824e:	08 81       	ld	r16, Y
    8250:	19 81       	ldd	r17, Y+1	; 0x01
    8252:	c0 5c       	subi	r28, 0xC0	; 192
    8254:	d0 40       	sbci	r29, 0x00	; 0
    8256:	c8 54       	subi	r28, 0x48	; 72
    8258:	df 4f       	sbci	r29, 0xFF	; 255
    825a:	e8 81       	ld	r30, Y
    825c:	f9 81       	ldd	r31, Y+1	; 0x01
    825e:	c8 5b       	subi	r28, 0xB8	; 184
    8260:	d0 40       	sbci	r29, 0x00	; 0
    8262:	8e 0f       	add	r24, r30
    8264:	9f 1f       	adc	r25, r31
    8266:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    826a:	88 23       	and	r24, r24
    826c:	21 f0       	breq	.+8      	; 0x8276 <draw_menu(bool)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1208
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    826e:	86 e7       	ldi	r24, 0x76	; 118
    8270:	93 e0       	ldi	r25, 0x03	; 3
    8272:	0e 94 c5 b4 	call	0x1698a	; 0x1698a <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8276:	b3 94       	inc	r11
    8278:	39 cf       	rjmp	.-398    	; 0x80ec <draw_menu(bool)+0x834>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    827a:	ca 54       	subi	r28, 0x4A	; 74
    827c:	df 4f       	sbci	r29, 0xFF	; 255
    827e:	18 82       	st	Y, r1
    8280:	c6 5b       	subi	r28, 0xB6	; 182
    8282:	d0 40       	sbci	r29, 0x00	; 0
    8284:	93 01       	movw	r18, r6
    8286:	28 5b       	subi	r18, 0xB8	; 184
    8288:	3d 4f       	sbci	r19, 0xFD	; 253
    828a:	cc 53       	subi	r28, 0x3C	; 60
    828c:	df 4f       	sbci	r29, 0xFF	; 255
    828e:	39 83       	std	Y+1, r19	; 0x01
    8290:	28 83       	st	Y, r18
    8292:	c4 5c       	subi	r28, 0xC4	; 196
    8294:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1220
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    8296:	2e 01       	movw	r4, r28
    8298:	31 e8       	ldi	r19, 0x81	; 129
    829a:	43 0e       	add	r4, r19
    829c:	51 1c       	adc	r5, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1225
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, -1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    829e:	ae 01       	movw	r20, r28
    82a0:	4f 5f       	subi	r20, 0xFF	; 255
    82a2:	5f 4f       	sbci	r21, 0xFF	; 255
    82a4:	cc 54       	subi	r28, 0x4C	; 76
    82a6:	df 4f       	sbci	r29, 0xFF	; 255
    82a8:	59 83       	std	Y+1, r21	; 0x01
    82aa:	48 83       	st	Y, r20
    82ac:	c4 5b       	subi	r28, 0xB4	; 180
    82ae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    82b0:	cc 53       	subi	r28, 0x3C	; 60
    82b2:	df 4f       	sbci	r29, 0xFF	; 255
    82b4:	e8 81       	ld	r30, Y
    82b6:	f9 81       	ldd	r31, Y+1	; 0x01
    82b8:	c4 5c       	subi	r28, 0xC4	; 196
    82ba:	d0 40       	sbci	r29, 0x00	; 0
    82bc:	84 91       	lpm	r24, Z
    82be:	ca 54       	subi	r28, 0x4A	; 74
    82c0:	df 4f       	sbci	r29, 0xFF	; 255
    82c2:	f8 81       	ld	r31, Y
    82c4:	c6 5b       	subi	r28, 0xB6	; 182
    82c6:	d0 40       	sbci	r29, 0x00	; 0
    82c8:	f8 17       	cp	r31, r24
    82ca:	08 f0       	brcs	.+2      	; 0x82ce <draw_menu(bool)+0xa16>
    82cc:	c7 c1       	rjmp	.+910    	; 0x865c <draw_menu(bool)+0xda4>
    82ce:	27 e1       	ldi	r18, 0x17	; 23
    82d0:	f2 9f       	mul	r31, r18
    82d2:	60 01       	movw	r12, r0
    82d4:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1217
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    82d6:	f6 01       	movw	r30, r12
    82d8:	eb 59       	subi	r30, 0x9B	; 155
    82da:	fe 4f       	sbci	r31, 0xFE	; 254
    82dc:	e6 0d       	add	r30, r6
    82de:	f7 1d       	adc	r31, r7
    82e0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
    if (enable_redraw(rdr, redraw_class) == true)
    82e2:	c3 53       	subi	r28, 0x33	; 51
    82e4:	df 4f       	sbci	r29, 0xFF	; 255
    82e6:	68 81       	ld	r22, Y
    82e8:	cd 5c       	subi	r28, 0xCD	; 205
    82ea:	d0 40       	sbci	r29, 0x00	; 0
    82ec:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    82f0:	88 23       	and	r24, r24
    82f2:	09 f4       	brne	.+2      	; 0x82f6 <draw_menu(bool)+0xa3e>
    82f4:	3d c1       	rjmp	.+634    	; 0x8570 <draw_menu(bool)+0xcb8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1220
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    82f6:	f6 01       	movw	r30, r12
    82f8:	e1 5b       	subi	r30, 0xB1	; 177
    82fa:	fe 4f       	sbci	r31, 0xFE	; 254
    82fc:	e6 0d       	add	r30, r6
    82fe:	f7 1d       	adc	r31, r7
    8300:	65 91       	lpm	r22, Z+
    8302:	74 91       	lpm	r23, Z
    8304:	c2 01       	movw	r24, r4
    8306:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    830a:	f6 01       	movw	r30, r12
    830c:	ef 59       	subi	r30, 0x9F	; 159
    830e:	fe 4f       	sbci	r31, 0xFE	; 254
    8310:	e6 0d       	add	r30, r6
    8312:	f7 1d       	adc	r31, r7
    8314:	25 91       	lpm	r18, Z+
    8316:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1222
      gss = pgm_read_word(&switch_1->get_status_string);
    8318:	f6 01       	movw	r30, r12
    831a:	ed 59       	subi	r30, 0x9D	; 157
    831c:	fe 4f       	sbci	r31, 0xFE	; 254
    831e:	e6 0d       	add	r30, r6
    8320:	f7 1d       	adc	r31, r7
    8322:	85 90       	lpm	r8, Z+
    8324:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1223
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, -1);
    8326:	86 01       	movw	r16, r12
    8328:	02 5a       	subi	r16, 0xA2	; 162
    832a:	1e 4f       	sbci	r17, 0xFE	; 254
    832c:	06 0d       	add	r16, r6
    832e:	17 1d       	adc	r17, r7
    8330:	f8 01       	movw	r30, r16
    8332:	84 91       	lpm	r24, Z
    8334:	cd 54       	subi	r28, 0x4D	; 77
    8336:	df 4f       	sbci	r29, 0xFF	; 255
    8338:	68 81       	ld	r22, Y
    833a:	c3 5b       	subi	r28, 0xB3	; 179
    833c:	d0 40       	sbci	r29, 0x00	; 0
    833e:	70 e0       	ldi	r23, 0x00	; 0
    8340:	4f ef       	ldi	r20, 0xFF	; 255
    8342:	90 e0       	ldi	r25, 0x00	; 0
    8344:	f9 01       	movw	r30, r18
    8346:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1224
      str3[0] = 0;
    8348:	cf 55       	subi	r28, 0x5F	; 95
    834a:	df 4f       	sbci	r29, 0xFF	; 255
    834c:	18 82       	st	Y, r1
    834e:	c1 5a       	subi	r28, 0xA1	; 161
    8350:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1225
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    8352:	f8 01       	movw	r30, r16
    8354:	84 91       	lpm	r24, Z
    8356:	9e 01       	movw	r18, r28
    8358:	2f 55       	subi	r18, 0x5F	; 95
    835a:	3f 4f       	sbci	r19, 0xFF	; 255
    835c:	ae 01       	movw	r20, r28
    835e:	4f 5f       	subi	r20, 0xFF	; 255
    8360:	5f 4f       	sbci	r21, 0xFF	; 255
    8362:	cd 54       	subi	r28, 0x4D	; 77
    8364:	df 4f       	sbci	r29, 0xFF	; 255
    8366:	68 81       	ld	r22, Y
    8368:	c3 5b       	subi	r28, 0xB3	; 179
    836a:	d0 40       	sbci	r29, 0x00	; 0
    836c:	f4 01       	movw	r30, r8
    836e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    8370:	f6 01       	movw	r30, r12
    8372:	e7 5a       	subi	r30, 0xA7	; 167
    8374:	fe 4f       	sbci	r31, 0xFE	; 254
    8376:	e6 0d       	add	r30, r6
    8378:	f7 1d       	adc	r31, r7
    837a:	25 91       	lpm	r18, Z+
    837c:	34 91       	lpm	r19, Z
    837e:	c4 54       	subi	r28, 0x44	; 68
    8380:	df 4f       	sbci	r29, 0xFF	; 255
    8382:	39 83       	std	Y+1, r19	; 0x01
    8384:	28 83       	st	Y, r18
    8386:	cc 5b       	subi	r28, 0xBC	; 188
    8388:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1229
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    838a:	f6 01       	movw	r30, r12
    838c:	e9 5a       	subi	r30, 0xA9	; 169
    838e:	fe 4f       	sbci	r31, 0xFE	; 254
    8390:	e6 0d       	add	r30, r6
    8392:	f7 1d       	adc	r31, r7
    8394:	25 90       	lpm	r2, Z+
    8396:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, -1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    8398:	f6 01       	movw	r30, r12
    839a:	eb 5a       	subi	r30, 0xAB	; 171
    839c:	fe 4f       	sbci	r31, 0xFE	; 254
    839e:	e6 0d       	add	r30, r6
    83a0:	f7 1d       	adc	r31, r7
    83a2:	85 91       	lpm	r24, Z+
    83a4:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, -1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    83a6:	f6 01       	movw	r30, r12
    83a8:	ed 5a       	subi	r30, 0xAD	; 173
    83aa:	fe 4f       	sbci	r31, 0xFE	; 254
    83ac:	e6 0d       	add	r30, r6
    83ae:	f7 1d       	adc	r31, r7
    83b0:	a5 90       	lpm	r10, Z+
    83b2:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1226
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, -1);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    83b4:	c6 54       	subi	r28, 0x46	; 70
    83b6:	df 4f       	sbci	r29, 0xFF	; 255
    83b8:	48 81       	ld	r20, Y
    83ba:	59 81       	ldd	r21, Y+1	; 0x01
    83bc:	ca 5b       	subi	r28, 0xBA	; 186
    83be:	d0 40       	sbci	r29, 0x00	; 0
    83c0:	a4 0e       	add	r10, r20
    83c2:	b5 1e       	adc	r11, r21
    83c4:	f6 01       	movw	r30, r12
    83c6:	ef 5a       	subi	r30, 0xAF	; 175
    83c8:	fe 4f       	sbci	r31, 0xFE	; 254
    83ca:	e6 0d       	add	r30, r6
    83cc:	f7 1d       	adc	r31, r7
    83ce:	85 90       	lpm	r8, Z+
    83d0:	94 90       	lpm	r9, Z
    83d2:	c8 54       	subi	r28, 0x48	; 72
    83d4:	df 4f       	sbci	r29, 0xFF	; 255
    83d6:	e8 81       	ld	r30, Y
    83d8:	f9 81       	ldd	r31, Y+1	; 0x01
    83da:	c8 5b       	subi	r28, 0xB8	; 184
    83dc:	d0 40       	sbci	r29, 0x00	; 0
    83de:	8e 0e       	add	r8, r30
    83e0:	9f 1e       	adc	r9, r31
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    83e2:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    83e6:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
    83ea:	10 e0       	ldi	r17, 0x00	; 0
    83ec:	00 e0       	ldi	r16, 0x00	; 0
    83ee:	33 24       	eor	r3, r3
    83f0:	9c 01       	movw	r18, r24
    83f2:	33 27       	eor	r19, r19
    83f4:	c2 54       	subi	r28, 0x42	; 66
    83f6:	df 4f       	sbci	r29, 0xFF	; 255
    83f8:	39 83       	std	Y+1, r19	; 0x01
    83fa:	28 83       	st	Y, r18
    83fc:	ce 5b       	subi	r28, 0xBE	; 190
    83fe:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8400:	a5 01       	movw	r20, r10
    8402:	42 0d       	add	r20, r2
    8404:	53 1d       	adc	r21, r3
    8406:	ca 53       	subi	r28, 0x3A	; 58
    8408:	df 4f       	sbci	r29, 0xFF	; 255
    840a:	59 83       	std	Y+1, r21	; 0x01
    840c:	48 83       	st	Y, r20
    840e:	c6 5c       	subi	r28, 0xC6	; 198
    8410:	d0 40       	sbci	r29, 0x00	; 0
    8412:	79 01       	movw	r14, r18
    8414:	e8 0c       	add	r14, r8
    8416:	f9 1c       	adc	r15, r9
    8418:	ca 53       	subi	r28, 0x3A	; 58
    841a:	df 4f       	sbci	r29, 0xFF	; 255
    841c:	28 81       	ld	r18, Y
    841e:	39 81       	ldd	r19, Y+1	; 0x01
    8420:	c6 5c       	subi	r28, 0xC6	; 198
    8422:	d0 40       	sbci	r29, 0x00	; 0
    8424:	20 1b       	sub	r18, r16
    8426:	31 0b       	sbc	r19, r17
    8428:	a7 01       	movw	r20, r14
    842a:	40 1b       	sub	r20, r16
    842c:	51 0b       	sbc	r21, r17
    842e:	b5 01       	movw	r22, r10
    8430:	60 0f       	add	r22, r16
    8432:	71 1f       	adc	r23, r17
    8434:	c4 01       	movw	r24, r8
    8436:	80 0f       	add	r24, r16
    8438:	91 1f       	adc	r25, r17
    843a:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    843e:	0f 5f       	subi	r16, 0xFF	; 255
    8440:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    8442:	03 30       	cpi	r16, 0x03	; 3
    8444:	11 05       	cpc	r17, r1
    8446:	41 f7       	brne	.-48     	; 0x8418 <draw_menu(bool)+0xb60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4517
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    8448:	f2 01       	movw	r30, r4
    844a:	01 90       	ld	r0, Z+
    844c:	00 20       	and	r0, r0
    844e:	e9 f7       	brne	.-6      	; 0x844a <draw_menu(bool)+0xb92>
    8450:	31 97       	sbiw	r30, 0x01	; 1
    8452:	e4 19       	sub	r30, r4
    8454:	f5 09       	sbc	r31, r5
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8456:	c4 54       	subi	r28, 0x44	; 68
    8458:	df 4f       	sbci	r29, 0xFF	; 255
    845a:	88 81       	ld	r24, Y
    845c:	cc 5b       	subi	r28, 0xBC	; 188
    845e:	d0 40       	sbci	r29, 0x00	; 0
    8460:	88 0f       	add	r24, r24
    8462:	c4 54       	subi	r28, 0x44	; 68
    8464:	df 4f       	sbci	r29, 0xFF	; 255
    8466:	58 81       	ld	r21, Y
    8468:	cc 5b       	subi	r28, 0xBC	; 188
    846a:	d0 40       	sbci	r29, 0x00	; 0
    846c:	85 0f       	add	r24, r21
    846e:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4519
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    8470:	a1 01       	movw	r20, r2
    8472:	48 1b       	sub	r20, r24
    8474:	51 09       	sbc	r21, r1
    8476:	57 ff       	sbrs	r21, 7
    8478:	02 c0       	rjmp	.+4      	; 0x847e <draw_menu(bool)+0xbc6>
    847a:	4d 5f       	subi	r20, 0xFD	; 253
    847c:	5f 4f       	sbci	r21, 0xFF	; 255
    847e:	55 95       	asr	r21
    8480:	47 95       	ror	r20
    8482:	55 95       	asr	r21
    8484:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    8486:	4a 0d       	add	r20, r10
    8488:	5b 2d       	mov	r21, r11
    848a:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    848c:	86 e0       	ldi	r24, 0x06	; 6
    848e:	e8 9f       	mul	r30, r24
    8490:	f0 01       	movw	r30, r0
    8492:	11 24       	eor	r1, r1
    8494:	c4 54       	subi	r28, 0x44	; 68
    8496:	df 4f       	sbci	r29, 0xFF	; 255
    8498:	28 81       	ld	r18, Y
    849a:	cc 5b       	subi	r28, 0xBC	; 188
    849c:	d0 40       	sbci	r29, 0x00	; 0
    849e:	2e 9f       	mul	r18, r30
    84a0:	c0 01       	movw	r24, r0
    84a2:	2f 9f       	mul	r18, r31
    84a4:	90 0d       	add	r25, r0
    84a6:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4518
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    84a8:	99 27       	eor	r25, r25
    84aa:	c2 54       	subi	r28, 0x42	; 66
    84ac:	df 4f       	sbci	r29, 0xFF	; 255
    84ae:	68 81       	ld	r22, Y
    84b0:	79 81       	ldd	r23, Y+1	; 0x01
    84b2:	ce 5b       	subi	r28, 0xBE	; 190
    84b4:	d0 40       	sbci	r29, 0x00	; 0
    84b6:	68 1b       	sub	r22, r24
    84b8:	79 0b       	sbc	r23, r25
    84ba:	77 ff       	sbrs	r23, 7
    84bc:	02 c0       	rjmp	.+4      	; 0x84c2 <draw_menu(bool)+0xc0a>
    84be:	6f 5f       	subi	r22, 0xFF	; 255
    84c0:	7f 4f       	sbci	r23, 0xFF	; 255
    84c2:	75 95       	asr	r23
    84c4:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    84c6:	68 0d       	add	r22, r8
    84c8:	79 2d       	mov	r23, r9
    84ca:	71 1d       	adc	r23, r1
    84cc:	ee 24       	eor	r14, r14
    84ce:	ea 94       	dec	r14
    84d0:	fe 2c       	mov	r15, r14
    84d2:	10 e0       	ldi	r17, 0x00	; 0
    84d4:	00 e0       	ldi	r16, 0x00	; 0
    84d6:	c4 54       	subi	r28, 0x44	; 68
    84d8:	df 4f       	sbci	r29, 0xFF	; 255
    84da:	28 81       	ld	r18, Y
    84dc:	cc 5b       	subi	r28, 0xBC	; 188
    84de:	d0 40       	sbci	r29, 0x00	; 0
    84e0:	c2 01       	movw	r24, r4
    84e2:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4522
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    84e6:	cc 54       	subi	r28, 0x4C	; 76
    84e8:	df 4f       	sbci	r29, 0xFF	; 255
    84ea:	e8 81       	ld	r30, Y
    84ec:	f9 81       	ldd	r31, Y+1	; 0x01
    84ee:	c4 5b       	subi	r28, 0xB4	; 180
    84f0:	d0 40       	sbci	r29, 0x00	; 0
    84f2:	01 90       	ld	r0, Z+
    84f4:	00 20       	and	r0, r0
    84f6:	e9 f7       	brne	.-6      	; 0x84f2 <draw_menu(bool)+0xc3a>
    84f8:	31 97       	sbiw	r30, 0x01	; 1
    84fa:	cc 54       	subi	r28, 0x4C	; 76
    84fc:	df 4f       	sbci	r29, 0xFF	; 255
    84fe:	48 81       	ld	r20, Y
    8500:	59 81       	ldd	r21, Y+1	; 0x01
    8502:	c4 5b       	subi	r28, 0xB4	; 180
    8504:	d0 40       	sbci	r29, 0x00	; 0
    8506:	e4 1b       	sub	r30, r20
    8508:	f5 0b       	sbc	r31, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    850a:	a1 01       	movw	r20, r2
    850c:	46 50       	subi	r20, 0x06	; 6
    850e:	51 09       	sbc	r21, r1
    8510:	57 ff       	sbrs	r21, 7
    8512:	02 c0       	rjmp	.+4      	; 0x8518 <draw_menu(bool)+0xc60>
    8514:	4d 5f       	subi	r20, 0xFD	; 253
    8516:	5f 4f       	sbci	r21, 0xFF	; 255
    8518:	55 95       	asr	r21
    851a:	47 95       	ror	r20
    851c:	55 95       	asr	r21
    851e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    8520:	55 27       	eor	r21, r21
    8522:	ca 01       	movw	r24, r20
    8524:	88 0f       	add	r24, r24
    8526:	99 1f       	adc	r25, r25
    8528:	48 0f       	add	r20, r24
    852a:	59 1f       	adc	r21, r25
    852c:	4a 0d       	add	r20, r10
    852e:	5b 1d       	adc	r21, r11
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    8530:	86 e0       	ldi	r24, 0x06	; 6
    8532:	e8 9f       	mul	r30, r24
    8534:	f0 01       	movw	r30, r0
    8536:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4523
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    8538:	ff 27       	eor	r31, r31
    853a:	c2 54       	subi	r28, 0x42	; 66
    853c:	df 4f       	sbci	r29, 0xFF	; 255
    853e:	68 81       	ld	r22, Y
    8540:	79 81       	ldd	r23, Y+1	; 0x01
    8542:	ce 5b       	subi	r28, 0xBE	; 190
    8544:	d0 40       	sbci	r29, 0x00	; 0
    8546:	6e 1b       	sub	r22, r30
    8548:	7f 0b       	sbc	r23, r31
    854a:	77 ff       	sbrs	r23, 7
    854c:	02 c0       	rjmp	.+4      	; 0x8552 <draw_menu(bool)+0xc9a>
    854e:	6f 5f       	subi	r22, 0xFF	; 255
    8550:	7f 4f       	sbci	r23, 0xFF	; 255
    8552:	75 95       	asr	r23
    8554:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    8556:	68 0d       	add	r22, r8
    8558:	79 2d       	mov	r23, r9
    855a:	71 1d       	adc	r23, r1
    855c:	ee 24       	eor	r14, r14
    855e:	ea 94       	dec	r14
    8560:	fe 2c       	mov	r15, r14
    8562:	10 e0       	ldi	r17, 0x00	; 0
    8564:	00 e0       	ldi	r16, 0x00	; 0
    8566:	21 e0       	ldi	r18, 0x01	; 1
    8568:	ce 01       	movw	r24, r28
    856a:	01 96       	adiw	r24, 0x01	; 1
    856c:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1233
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    8570:	c0 54       	subi	r28, 0x40	; 64
    8572:	df 4f       	sbci	r29, 0xFF	; 255
    8574:	e8 81       	ld	r30, Y
    8576:	f9 81       	ldd	r31, Y+1	; 0x01
    8578:	c0 5c       	subi	r28, 0xC0	; 192
    857a:	d0 40       	sbci	r29, 0x00	; 0
    857c:	ef 2b       	or	r30, r31
    857e:	09 f4       	brne	.+2      	; 0x8582 <draw_menu(bool)+0xcca>
    8580:	61 c0       	rjmp	.+194    	; 0x8644 <draw_menu(bool)+0xd8c>
    8582:	ce 53       	subi	r28, 0x3E	; 62
    8584:	df 4f       	sbci	r29, 0xFF	; 255
    8586:	28 81       	ld	r18, Y
    8588:	39 81       	ldd	r19, Y+1	; 0x01
    858a:	c2 5c       	subi	r28, 0xC2	; 194
    858c:	d0 40       	sbci	r29, 0x00	; 0
    858e:	23 2b       	or	r18, r19
    8590:	09 f4       	brne	.+2      	; 0x8594 <draw_menu(bool)+0xcdc>
    8592:	58 c0       	rjmp	.+176    	; 0x8644 <draw_menu(bool)+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1234
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    8594:	f6 01       	movw	r30, r12
    8596:	e9 5a       	subi	r30, 0xA9	; 169
    8598:	fe 4f       	sbci	r31, 0xFE	; 254
    859a:	e6 0d       	add	r30, r6
    859c:	f7 1d       	adc	r31, r7
    859e:	25 91       	lpm	r18, Z+
    85a0:	34 91       	lpm	r19, Z
    85a2:	f6 01       	movw	r30, r12
    85a4:	eb 5a       	subi	r30, 0xAB	; 171
    85a6:	fe 4f       	sbci	r31, 0xFE	; 254
    85a8:	e6 0d       	add	r30, r6
    85aa:	f7 1d       	adc	r31, r7
    85ac:	45 91       	lpm	r20, Z+
    85ae:	54 91       	lpm	r21, Z
    85b0:	f6 01       	movw	r30, r12
    85b2:	ed 5a       	subi	r30, 0xAD	; 173
    85b4:	fe 4f       	sbci	r31, 0xFE	; 254
    85b6:	e6 0d       	add	r30, r6
    85b8:	f7 1d       	adc	r31, r7
    85ba:	65 91       	lpm	r22, Z+
    85bc:	74 91       	lpm	r23, Z
    85be:	f6 01       	movw	r30, r12
    85c0:	ef 5a       	subi	r30, 0xAF	; 175
    85c2:	fe 4f       	sbci	r31, 0xFE	; 254
    85c4:	e6 0d       	add	r30, r6
    85c6:	f7 1d       	adc	r31, r7
    85c8:	85 91       	lpm	r24, Z+
    85ca:	94 91       	lpm	r25, Z
    85cc:	c6 54       	subi	r28, 0x46	; 70
    85ce:	df 4f       	sbci	r29, 0xFF	; 255
    85d0:	e8 81       	ld	r30, Y
    85d2:	f9 81       	ldd	r31, Y+1	; 0x01
    85d4:	ca 5b       	subi	r28, 0xBA	; 186
    85d6:	d0 40       	sbci	r29, 0x00	; 0
    85d8:	6e 0f       	add	r22, r30
    85da:	7f 1f       	adc	r23, r31
    85dc:	ce 53       	subi	r28, 0x3E	; 62
    85de:	df 4f       	sbci	r29, 0xFF	; 255
    85e0:	e8 80       	ld	r14, Y
    85e2:	f9 80       	ldd	r15, Y+1	; 0x01
    85e4:	c2 5c       	subi	r28, 0xC2	; 194
    85e6:	d0 40       	sbci	r29, 0x00	; 0
    85e8:	c0 54       	subi	r28, 0x40	; 64
    85ea:	df 4f       	sbci	r29, 0xFF	; 255
    85ec:	08 81       	ld	r16, Y
    85ee:	19 81       	ldd	r17, Y+1	; 0x01
    85f0:	c0 5c       	subi	r28, 0xC0	; 192
    85f2:	d0 40       	sbci	r29, 0x00	; 0
    85f4:	c8 54       	subi	r28, 0x48	; 72
    85f6:	df 4f       	sbci	r29, 0xFF	; 255
    85f8:	e8 81       	ld	r30, Y
    85fa:	f9 81       	ldd	r31, Y+1	; 0x01
    85fc:	c8 5b       	subi	r28, 0xB8	; 184
    85fe:	d0 40       	sbci	r29, 0x00	; 0
    8600:	8e 0f       	add	r24, r30
    8602:	9f 1f       	adc	r25, r31
    8604:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8608:	18 2f       	mov	r17, r24
    860a:	88 23       	and	r24, r24
    860c:	d9 f0       	breq	.+54     	; 0x8644 <draw_menu(bool)+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1236
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    860e:	f6 01       	movw	r30, r12
    8610:	e1 5a       	subi	r30, 0xA1	; 161
    8612:	fe 4f       	sbci	r31, 0xFE	; 254
    8614:	e6 0d       	add	r30, r6
    8616:	f7 1d       	adc	r31, r7
    8618:	25 91       	lpm	r18, Z+
    861a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1);
    861c:	f6 01       	movw	r30, r12
    861e:	e2 5a       	subi	r30, 0xA2	; 162
    8620:	fe 4f       	sbci	r31, 0xFE	; 254
    8622:	e6 0d       	add	r30, r6
    8624:	f7 1d       	adc	r31, r7
    8626:	84 91       	lpm	r24, Z
    8628:	cd 54       	subi	r28, 0x4D	; 77
    862a:	df 4f       	sbci	r29, 0xFF	; 255
    862c:	68 81       	ld	r22, Y
    862e:	c3 5b       	subi	r28, 0xB3	; 179
    8630:	d0 40       	sbci	r29, 0x00	; 0
    8632:	70 e0       	ldi	r23, 0x00	; 0
    8634:	90 e0       	ldi	r25, 0x00	; 0
    8636:	f9 01       	movw	r30, r18
    8638:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
        ret = true;
    863a:	c8 53       	subi	r28, 0x38	; 56
    863c:	df 4f       	sbci	r29, 0xFF	; 255
    863e:	18 83       	st	Y, r17
    8640:	c8 5c       	subi	r28, 0xC8	; 200
    8642:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1214
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    8644:	ca 54       	subi	r28, 0x4A	; 74
    8646:	df 4f       	sbci	r29, 0xFF	; 255
    8648:	f8 81       	ld	r31, Y
    864a:	c6 5b       	subi	r28, 0xB6	; 182
    864c:	d0 40       	sbci	r29, 0x00	; 0
    864e:	ff 5f       	subi	r31, 0xFF	; 255
    8650:	ca 54       	subi	r28, 0x4A	; 74
    8652:	df 4f       	sbci	r29, 0xFF	; 255
    8654:	f8 83       	st	Y, r31
    8656:	c6 5b       	subi	r28, 0xB6	; 182
    8658:	d0 40       	sbci	r29, 0x00	; 0
    865a:	2a ce       	rjmp	.-940    	; 0x82b0 <draw_menu(bool)+0x9f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1241
        fntargs =  pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    865c:	c8 53       	subi	r28, 0x38	; 56
    865e:	df 4f       	sbci	r29, 0xFF	; 255
    8660:	28 81       	ld	r18, Y
    8662:	c8 5c       	subi	r28, 0xC8	; 200
    8664:	d0 40       	sbci	r29, 0x00	; 0
    8666:	21 11       	cpse	r18, r1
    8668:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1243
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    866c:	b1 2c       	mov	r11, r1
    866e:	23 01       	movw	r4, r6
    8670:	36 eb       	ldi	r19, 0xB6	; 182
    8672:	43 1a       	sub	r4, r19
    8674:	3d ef       	ldi	r19, 0xFD	; 253
    8676:	53 0a       	sbc	r5, r19
    8678:	f2 01       	movw	r30, r4
    867a:	84 91       	lpm	r24, Z
    867c:	b8 16       	cp	r11, r24
    867e:	08 f0       	brcs	.+2      	; 0x8682 <draw_menu(bool)+0xdca>
    8680:	cc c0       	rjmp	.+408    	; 0x881a <draw_menu(bool)+0xf62>
    8682:	cb 2c       	mov	r12, r11
    8684:	d1 2c       	mov	r13, r1
    8686:	fd e1       	ldi	r31, 0x1D	; 29
    8688:	cf 0e       	add	r12, r31
    868a:	d1 1c       	adc	r13, r1
    868c:	84 e0       	ldi	r24, 0x04	; 4
    868e:	cc 0c       	add	r12, r12
    8690:	dd 1c       	adc	r13, r13
    8692:	8a 95       	dec	r24
    8694:	e1 f7       	brne	.-8      	; 0x868e <draw_menu(bool)+0xdd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1246
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = pgm_read_word(&symbol_button_1->enable_show);
    8696:	f3 01       	movw	r30, r6
    8698:	ec 0d       	add	r30, r12
    869a:	fd 1d       	adc	r31, r13
    869c:	25 91       	lpm	r18, Z+
    869e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, -1);
    86a0:	46 01       	movw	r8, r12
    86a2:	44 e0       	ldi	r20, 0x04	; 4
    86a4:	84 1a       	sub	r8, r20
    86a6:	91 08       	sbc	r9, r1
    86a8:	86 0c       	add	r8, r6
    86aa:	97 1c       	adc	r9, r7
    86ac:	f4 01       	movw	r30, r8
    86ae:	84 91       	lpm	r24, Z
    86b0:	cd 54       	subi	r28, 0x4D	; 77
    86b2:	df 4f       	sbci	r29, 0xFF	; 255
    86b4:	68 81       	ld	r22, Y
    86b6:	c3 5b       	subi	r28, 0xB3	; 179
    86b8:	d0 40       	sbci	r29, 0x00	; 0
    86ba:	70 e0       	ldi	r23, 0x00	; 0
    86bc:	4f ef       	ldi	r20, 0xFF	; 255
    86be:	90 e0       	ldi	r25, 0x00	; 0
    86c0:	f9 01       	movw	r30, r18
    86c2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1248
    if (active == 0) continue;
    86c4:	88 23       	and	r24, r24
    86c6:	09 f4       	brne	.+2      	; 0x86ca <draw_menu(bool)+0xe12>
    86c8:	a6 c0       	rjmp	.+332    	; 0x8816 <draw_menu(bool)+0xf5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1249
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    86ca:	f6 01       	movw	r30, r12
    86cc:	31 97       	sbiw	r30, 0x01	; 1
    86ce:	e6 0d       	add	r30, r6
    86d0:	f7 1d       	adc	r31, r7
    86d2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1250
    if (enable_redraw(rdr, redraw_class) == true)
    86d4:	c3 53       	subi	r28, 0x33	; 51
    86d6:	df 4f       	sbci	r29, 0xFF	; 255
    86d8:	68 81       	ld	r22, Y
    86da:	cd 5c       	subi	r28, 0xCD	; 205
    86dc:	d0 40       	sbci	r29, 0x00	; 0
    86de:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    86e2:	88 23       	and	r24, r24
    86e4:	09 f4       	brne	.+2      	; 0x86e8 <draw_menu(bool)+0xe30>
    86e6:	36 c0       	rjmp	.+108    	; 0x8754 <draw_menu(bool)+0xe9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1254
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    86e8:	f6 01       	movw	r30, r12
    86ea:	3e 97       	sbiw	r30, 0x0e	; 14
    86ec:	e6 0d       	add	r30, r6
    86ee:	f7 1d       	adc	r31, r7
    86f0:	e5 90       	lpm	r14, Z+
    86f2:	f4 90       	lpm	r15, Z
    86f4:	f6 01       	movw	r30, r12
    86f6:	35 97       	sbiw	r30, 0x05	; 5
    86f8:	e6 0d       	add	r30, r6
    86fa:	f7 1d       	adc	r31, r7
    86fc:	05 91       	lpm	r16, Z+
    86fe:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1253
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    8700:	f6 01       	movw	r30, r12
    8702:	37 97       	sbiw	r30, 0x07	; 7
    8704:	e6 0d       	add	r30, r6
    8706:	f7 1d       	adc	r31, r7
    8708:	25 91       	lpm	r18, Z+
    870a:	34 91       	lpm	r19, Z
    870c:	f6 01       	movw	r30, r12
    870e:	39 97       	sbiw	r30, 0x09	; 9
    8710:	e6 0d       	add	r30, r6
    8712:	f7 1d       	adc	r31, r7
    8714:	45 91       	lpm	r20, Z+
    8716:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1252
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, -1);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    8718:	f6 01       	movw	r30, r12
    871a:	3b 97       	sbiw	r30, 0x0b	; 11
    871c:	e6 0d       	add	r30, r6
    871e:	f7 1d       	adc	r31, r7
    8720:	65 91       	lpm	r22, Z+
    8722:	74 91       	lpm	r23, Z
    8724:	f6 01       	movw	r30, r12
    8726:	3d 97       	sbiw	r30, 0x0d	; 13
    8728:	e6 0d       	add	r30, r6
    872a:	f7 1d       	adc	r31, r7
    872c:	85 91       	lpm	r24, Z+
    872e:	94 91       	lpm	r25, Z
    8730:	c6 54       	subi	r28, 0x46	; 70
    8732:	df 4f       	sbci	r29, 0xFF	; 255
    8734:	e8 81       	ld	r30, Y
    8736:	f9 81       	ldd	r31, Y+1	; 0x01
    8738:	ca 5b       	subi	r28, 0xBA	; 186
    873a:	d0 40       	sbci	r29, 0x00	; 0
    873c:	6e 0f       	add	r22, r30
    873e:	7f 1f       	adc	r23, r31
    8740:	c8 54       	subi	r28, 0x48	; 72
    8742:	df 4f       	sbci	r29, 0xFF	; 255
    8744:	e8 81       	ld	r30, Y
    8746:	f9 81       	ldd	r31, Y+1	; 0x01
    8748:	c8 5b       	subi	r28, 0xB8	; 184
    874a:	d0 40       	sbci	r29, 0x00	; 0
    874c:	8e 0f       	add	r24, r30
    874e:	9f 1f       	adc	r25, r31
    8750:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1256
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    8754:	c0 54       	subi	r28, 0x40	; 64
    8756:	df 4f       	sbci	r29, 0xFF	; 255
    8758:	28 81       	ld	r18, Y
    875a:	39 81       	ldd	r19, Y+1	; 0x01
    875c:	c0 5c       	subi	r28, 0xC0	; 192
    875e:	d0 40       	sbci	r29, 0x00	; 0
    8760:	23 2b       	or	r18, r19
    8762:	09 f4       	brne	.+2      	; 0x8766 <draw_menu(bool)+0xeae>
    8764:	58 c0       	rjmp	.+176    	; 0x8816 <draw_menu(bool)+0xf5e>
    8766:	ce 53       	subi	r28, 0x3E	; 62
    8768:	df 4f       	sbci	r29, 0xFF	; 255
    876a:	48 81       	ld	r20, Y
    876c:	59 81       	ldd	r21, Y+1	; 0x01
    876e:	c2 5c       	subi	r28, 0xC2	; 194
    8770:	d0 40       	sbci	r29, 0x00	; 0
    8772:	45 2b       	or	r20, r21
    8774:	09 f4       	brne	.+2      	; 0x8778 <draw_menu(bool)+0xec0>
    8776:	4f c0       	rjmp	.+158    	; 0x8816 <draw_menu(bool)+0xf5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1257
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    8778:	f6 01       	movw	r30, r12
    877a:	37 97       	sbiw	r30, 0x07	; 7
    877c:	e6 0d       	add	r30, r6
    877e:	f7 1d       	adc	r31, r7
    8780:	25 91       	lpm	r18, Z+
    8782:	34 91       	lpm	r19, Z
    8784:	f6 01       	movw	r30, r12
    8786:	39 97       	sbiw	r30, 0x09	; 9
    8788:	e6 0d       	add	r30, r6
    878a:	f7 1d       	adc	r31, r7
    878c:	45 91       	lpm	r20, Z+
    878e:	54 91       	lpm	r21, Z
    8790:	f6 01       	movw	r30, r12
    8792:	3b 97       	sbiw	r30, 0x0b	; 11
    8794:	e6 0d       	add	r30, r6
    8796:	f7 1d       	adc	r31, r7
    8798:	65 91       	lpm	r22, Z+
    879a:	74 91       	lpm	r23, Z
    879c:	f6 01       	movw	r30, r12
    879e:	3d 97       	sbiw	r30, 0x0d	; 13
    87a0:	e6 0d       	add	r30, r6
    87a2:	f7 1d       	adc	r31, r7
    87a4:	85 91       	lpm	r24, Z+
    87a6:	94 91       	lpm	r25, Z
    87a8:	c6 54       	subi	r28, 0x46	; 70
    87aa:	df 4f       	sbci	r29, 0xFF	; 255
    87ac:	e8 81       	ld	r30, Y
    87ae:	f9 81       	ldd	r31, Y+1	; 0x01
    87b0:	ca 5b       	subi	r28, 0xBA	; 186
    87b2:	d0 40       	sbci	r29, 0x00	; 0
    87b4:	6e 0f       	add	r22, r30
    87b6:	7f 1f       	adc	r23, r31
    87b8:	ce 53       	subi	r28, 0x3E	; 62
    87ba:	df 4f       	sbci	r29, 0xFF	; 255
    87bc:	e8 80       	ld	r14, Y
    87be:	f9 80       	ldd	r15, Y+1	; 0x01
    87c0:	c2 5c       	subi	r28, 0xC2	; 194
    87c2:	d0 40       	sbci	r29, 0x00	; 0
    87c4:	c0 54       	subi	r28, 0x40	; 64
    87c6:	df 4f       	sbci	r29, 0xFF	; 255
    87c8:	08 81       	ld	r16, Y
    87ca:	19 81       	ldd	r17, Y+1	; 0x01
    87cc:	c0 5c       	subi	r28, 0xC0	; 192
    87ce:	d0 40       	sbci	r29, 0x00	; 0
    87d0:	c8 54       	subi	r28, 0x48	; 72
    87d2:	df 4f       	sbci	r29, 0xFF	; 255
    87d4:	e8 81       	ld	r30, Y
    87d6:	f9 81       	ldd	r31, Y+1	; 0x01
    87d8:	c8 5b       	subi	r28, 0xB8	; 184
    87da:	d0 40       	sbci	r29, 0x00	; 0
    87dc:	8e 0f       	add	r24, r30
    87de:	9f 1f       	adc	r25, r31
    87e0:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    87e4:	18 2f       	mov	r17, r24
    87e6:	88 23       	and	r24, r24
    87e8:	b1 f0       	breq	.+44     	; 0x8816 <draw_menu(bool)+0xf5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1259
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    87ea:	f6 01       	movw	r30, r12
    87ec:	33 97       	sbiw	r30, 0x03	; 3
    87ee:	e6 0d       	add	r30, r6
    87f0:	f7 1d       	adc	r31, r7
    87f2:	25 91       	lpm	r18, Z+
    87f4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1);
    87f6:	f4 01       	movw	r30, r8
    87f8:	84 91       	lpm	r24, Z
    87fa:	cd 54       	subi	r28, 0x4D	; 77
    87fc:	df 4f       	sbci	r29, 0xFF	; 255
    87fe:	68 81       	ld	r22, Y
    8800:	c3 5b       	subi	r28, 0xB3	; 179
    8802:	d0 40       	sbci	r29, 0x00	; 0
    8804:	70 e0       	ldi	r23, 0x00	; 0
    8806:	90 e0       	ldi	r25, 0x00	; 0
    8808:	f9 01       	movw	r30, r18
    880a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1262
        ret = true;
    880c:	c8 53       	subi	r28, 0x38	; 56
    880e:	df 4f       	sbci	r29, 0xFF	; 255
    8810:	18 83       	st	Y, r17
    8812:	c8 5c       	subi	r28, 0xC8	; 200
    8814:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1243
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    8816:	b3 94       	inc	r11
    8818:	2f cf       	rjmp	.-418    	; 0x8678 <draw_menu(bool)+0xdc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1265
        //args = pgm_read_byte(pgm_read_word(&current->args));
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    881a:	c8 53       	subi	r28, 0x38	; 56
    881c:	df 4f       	sbci	r29, 0xFF	; 255
    881e:	f8 81       	ld	r31, Y
    8820:	c8 5c       	subi	r28, 0xC8	; 200
    8822:	d0 40       	sbci	r29, 0x00	; 0
    8824:	f1 11       	cpse	r31, r1
    8826:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    882a:	41 2c       	mov	r4, r1
    882c:	93 01       	movw	r18, r6
    882e:	25 5b       	subi	r18, 0xB5	; 181
    8830:	3d 4f       	sbci	r19, 0xFD	; 253
    8832:	c0 53       	subi	r28, 0x30	; 48
    8834:	df 4f       	sbci	r29, 0xFF	; 255
    8836:	39 83       	std	Y+1, r19	; 0x01
    8838:	28 83       	st	Y, r18
    883a:	c0 5d       	subi	r28, 0xD0	; 208
    883c:	d0 40       	sbci	r29, 0x00	; 0
    883e:	c0 53       	subi	r28, 0x30	; 48
    8840:	df 4f       	sbci	r29, 0xFF	; 255
    8842:	e8 81       	ld	r30, Y
    8844:	f9 81       	ldd	r31, Y+1	; 0x01
    8846:	c0 5d       	subi	r28, 0xD0	; 208
    8848:	d0 40       	sbci	r29, 0x00	; 0
    884a:	84 91       	lpm	r24, Z
    884c:	48 16       	cp	r4, r24
    884e:	08 f0       	brcs	.+2      	; 0x8852 <draw_menu(bool)+0xf9a>
    8850:	0a c3       	rjmp	.+1556   	; 0x8e66 <draw_menu(bool)+0x15ae>
    8852:	f7 e1       	ldi	r31, 0x17	; 23
    8854:	4f 9e       	mul	r4, r31
    8856:	60 01       	movw	r12, r0
    8858:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1269
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    885a:	c6 01       	movw	r24, r12
    885c:	8e 51       	subi	r24, 0x1E	; 30
    885e:	9e 4f       	sbci	r25, 0xFE	; 254
    8860:	93 01       	movw	r18, r6
    8862:	28 0f       	add	r18, r24
    8864:	39 1f       	adc	r19, r25
    8866:	c2 53       	subi	r28, 0x32	; 50
    8868:	df 4f       	sbci	r29, 0xFF	; 255
    886a:	39 83       	std	Y+1, r19	; 0x01
    886c:	28 83       	st	Y, r18
    886e:	ce 5c       	subi	r28, 0xCE	; 206
    8870:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1270
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    8872:	f6 01       	movw	r30, r12
    8874:	e8 50       	subi	r30, 0x08	; 8
    8876:	fe 4f       	sbci	r31, 0xFE	; 254
    8878:	e6 0d       	add	r30, r6
    887a:	f7 1d       	adc	r31, r7
    887c:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1271
    if (enable_redraw(rdr, redraw_class) == true)
    887e:	c3 53       	subi	r28, 0x33	; 51
    8880:	df 4f       	sbci	r29, 0xFF	; 255
    8882:	68 81       	ld	r22, Y
    8884:	cd 5c       	subi	r28, 0xCD	; 205
    8886:	d0 40       	sbci	r29, 0x00	; 0
    8888:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    888c:	88 23       	and	r24, r24
    888e:	09 f4       	brne	.+2      	; 0x8892 <draw_menu(bool)+0xfda>
    8890:	71 c1       	rjmp	.+738    	; 0x8b74 <draw_menu(bool)+0x12bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1273
    {
      loop_i = 0;
    8892:	ce 54       	subi	r28, 0x4E	; 78
    8894:	df 4f       	sbci	r29, 0xFF	; 255
    8896:	18 82       	st	Y, r1
    8898:	c2 5b       	subi	r28, 0xB2	; 178
    889a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1276
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    889c:	f6 01       	movw	r30, r12
    889e:	ea 50       	subi	r30, 0x0A	; 10
    88a0:	fe 4f       	sbci	r31, 0xFE	; 254
    88a2:	e6 0d       	add	r30, r6
    88a4:	f7 1d       	adc	r31, r7
    88a6:	25 91       	lpm	r18, Z+
    88a8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1277
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
    88aa:	f6 01       	movw	r30, r12
    88ac:	ef 50       	subi	r30, 0x0F	; 15
    88ae:	fe 4f       	sbci	r31, 0xFE	; 254
    88b0:	e6 0d       	add	r30, r6
    88b2:	f7 1d       	adc	r31, r7
    88b4:	85 91       	lpm	r24, Z+
    88b6:	94 91       	lpm	r25, Z
    88b8:	cd 54       	subi	r28, 0x4D	; 77
    88ba:	df 4f       	sbci	r29, 0xFF	; 255
    88bc:	68 81       	ld	r22, Y
    88be:	c3 5b       	subi	r28, 0xB3	; 179
    88c0:	d0 40       	sbci	r29, 0x00	; 0
    88c2:	70 e0       	ldi	r23, 0x00	; 0
    88c4:	40 e0       	ldi	r20, 0x00	; 0
    88c6:	f9 01       	movw	r30, r18
    88c8:	19 95       	eicall
    88ca:	cf 54       	subi	r28, 0x4F	; 79
    88cc:	df 4f       	sbci	r29, 0xFF	; 255
    88ce:	88 83       	st	Y, r24
    88d0:	c1 5b       	subi	r28, 0xB1	; 177
    88d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1278
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    88d4:	f6 01       	movw	r30, r12
    88d6:	ee 50       	subi	r30, 0x0E	; 14
    88d8:	fe 4f       	sbci	r31, 0xFE	; 254
    88da:	e6 0d       	add	r30, r6
    88dc:	f7 1d       	adc	r31, r7
    88de:	25 91       	lpm	r18, Z+
    88e0:	34 91       	lpm	r19, Z
    88e2:	ce 52       	subi	r28, 0x2E	; 46
    88e4:	df 4f       	sbci	r29, 0xFF	; 255
    88e6:	39 83       	std	Y+1, r19	; 0x01
    88e8:	28 83       	st	Y, r18
    88ea:	c2 5d       	subi	r28, 0xD2	; 210
    88ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1282
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    88ee:	56 01       	movw	r10, r12
    88f0:	3c e1       	ldi	r19, 0x1C	; 28
    88f2:	a3 1a       	sub	r10, r19
    88f4:	3e ef       	ldi	r19, 0xFE	; 254
    88f6:	b3 0a       	sbc	r11, r19
    88f8:	a6 0c       	add	r10, r6
    88fa:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    88fc:	c6 01       	movw	r24, r12
    88fe:	83 51       	subi	r24, 0x13	; 19
    8900:	9e 4f       	sbci	r25, 0xFE	; 254
    8902:	a3 01       	movw	r20, r6
    8904:	48 0f       	add	r20, r24
    8906:	59 1f       	adc	r21, r25
    8908:	ca 54       	subi	r28, 0x4A	; 74
    890a:	df 4f       	sbci	r29, 0xFF	; 255
    890c:	59 83       	std	Y+1, r21	; 0x01
    890e:	48 83       	st	Y, r20
    8910:	c6 5b       	subi	r28, 0xB6	; 182
    8912:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8914:	01 97       	sbiw	r24, 0x01	; 1
    8916:	f3 01       	movw	r30, r6
    8918:	e8 0f       	add	r30, r24
    891a:	f9 1f       	adc	r31, r25
    891c:	c4 54       	subi	r28, 0x44	; 68
    891e:	df 4f       	sbci	r29, 0xFF	; 255
    8920:	f9 83       	std	Y+1, r31	; 0x01
    8922:	e8 83       	st	Y, r30
    8924:	cc 5b       	subi	r28, 0xBC	; 188
    8926:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1290
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8928:	01 97       	sbiw	r24, 0x01	; 1
    892a:	93 01       	movw	r18, r6
    892c:	28 0f       	add	r18, r24
    892e:	39 1f       	adc	r19, r25
    8930:	c2 54       	subi	r28, 0x42	; 66
    8932:	df 4f       	sbci	r29, 0xFF	; 255
    8934:	39 83       	std	Y+1, r19	; 0x01
    8936:	28 83       	st	Y, r18
    8938:	ce 5b       	subi	r28, 0xBE	; 190
    893a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1298
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    893c:	03 96       	adiw	r24, 0x03	; 3
    893e:	a3 01       	movw	r20, r6
    8940:	48 0f       	add	r20, r24
    8942:	59 1f       	adc	r21, r25
    8944:	cc 53       	subi	r28, 0x3C	; 60
    8946:	df 4f       	sbci	r29, 0xFF	; 255
    8948:	59 83       	std	Y+1, r21	; 0x01
    894a:	48 83       	st	Y, r20
    894c:	c4 5c       	subi	r28, 0xC4	; 196
    894e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1306
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    8950:	04 97       	sbiw	r24, 0x04	; 4
    8952:	f3 01       	movw	r30, r6
    8954:	e8 0f       	add	r30, r24
    8956:	f9 1f       	adc	r31, r25
    8958:	ca 53       	subi	r28, 0x3A	; 58
    895a:	df 4f       	sbci	r29, 0xFF	; 255
    895c:	f9 83       	std	Y+1, r31	; 0x01
    895e:	e8 83       	st	Y, r30
    8960:	c6 5c       	subi	r28, 0xC6	; 198
    8962:	d0 40       	sbci	r29, 0x00	; 0
    8964:	02 97       	sbiw	r24, 0x02	; 2
    8966:	93 01       	movw	r18, r6
    8968:	28 0f       	add	r18, r24
    896a:	39 1f       	adc	r19, r25
    896c:	c7 53       	subi	r28, 0x37	; 55
    896e:	df 4f       	sbci	r29, 0xFF	; 255
    8970:	39 83       	std	Y+1, r19	; 0x01
    8972:	28 83       	st	Y, r18
    8974:	c9 5c       	subi	r28, 0xC9	; 201
    8976:	d0 40       	sbci	r29, 0x00	; 0
    8978:	02 97       	sbiw	r24, 0x02	; 2
    897a:	a3 01       	movw	r20, r6
    897c:	48 0f       	add	r20, r24
    897e:	59 1f       	adc	r21, r25
    8980:	c5 53       	subi	r28, 0x35	; 53
    8982:	df 4f       	sbci	r29, 0xFF	; 255
    8984:	59 83       	std	Y+1, r21	; 0x01
    8986:	48 83       	st	Y, r20
    8988:	cb 5c       	subi	r28, 0xCB	; 203
    898a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1275
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    898c:	51 2c       	mov	r5, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    898e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1279
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    8990:	ce 54       	subi	r28, 0x4E	; 78
    8992:	df 4f       	sbci	r29, 0xFF	; 255
    8994:	88 81       	ld	r24, Y
    8996:	c2 5b       	subi	r28, 0xB2	; 178
    8998:	d0 40       	sbci	r29, 0x00	; 0
    899a:	cf 54       	subi	r28, 0x4F	; 79
    899c:	df 4f       	sbci	r29, 0xFF	; 255
    899e:	98 81       	ld	r25, Y
    89a0:	c1 5b       	subi	r28, 0xB1	; 177
    89a2:	d0 40       	sbci	r29, 0x00	; 0
    89a4:	89 17       	cp	r24, r25
    89a6:	08 f0       	brcs	.+2      	; 0x89aa <draw_menu(bool)+0x10f2>
    89a8:	e5 c0       	rjmp	.+458    	; 0x8b74 <draw_menu(bool)+0x12bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1281
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    89aa:	c2 53       	subi	r28, 0x32	; 50
    89ac:	df 4f       	sbci	r29, 0xFF	; 255
    89ae:	e8 81       	ld	r30, Y
    89b0:	f9 81       	ldd	r31, Y+1	; 0x01
    89b2:	ce 5c       	subi	r28, 0xCE	; 206
    89b4:	d0 40       	sbci	r29, 0x00	; 0
    89b6:	85 90       	lpm	r8, Z+
    89b8:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1282
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    89ba:	f5 01       	movw	r30, r10
    89bc:	25 90       	lpm	r2, Z+
    89be:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    89c0:	ca 54       	subi	r28, 0x4A	; 74
    89c2:	df 4f       	sbci	r29, 0xFF	; 255
    89c4:	e8 81       	ld	r30, Y
    89c6:	f9 81       	ldd	r31, Y+1	; 0x01
    89c8:	c6 5b       	subi	r28, 0xB6	; 182
    89ca:	d0 40       	sbci	r29, 0x00	; 0
    89cc:	94 91       	lpm	r25, Z
    89ce:	99 23       	and	r25, r25
    89d0:	09 f4       	brne	.+2      	; 0x89d4 <draw_menu(bool)+0x111c>
    89d2:	9b c0       	rjmp	.+310    	; 0x8b0a <draw_menu(bool)+0x1252>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1282
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    89d4:	c6 54       	subi	r28, 0x46	; 70
    89d6:	df 4f       	sbci	r29, 0xFF	; 255
    89d8:	28 81       	ld	r18, Y
    89da:	39 81       	ldd	r19, Y+1	; 0x01
    89dc:	ca 5b       	subi	r28, 0xBA	; 186
    89de:	d0 40       	sbci	r29, 0x00	; 0
    89e0:	22 0e       	add	r2, r18
    89e2:	33 1e       	adc	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1288
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    89e4:	ca 54       	subi	r28, 0x4A	; 74
    89e6:	df 4f       	sbci	r29, 0xFF	; 255
    89e8:	e8 81       	ld	r30, Y
    89ea:	f9 81       	ldd	r31, Y+1	; 0x01
    89ec:	c6 5b       	subi	r28, 0xB6	; 182
    89ee:	d0 40       	sbci	r29, 0x00	; 0
    89f0:	94 91       	lpm	r25, Z
    89f2:	91 30       	cpi	r25, 0x01	; 1
    89f4:	09 f4       	brne	.+2      	; 0x89f8 <draw_menu(bool)+0x1140>
    89f6:	a1 c0       	rjmp	.+322    	; 0x8b3a <draw_menu(bool)+0x1282>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1281
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    89f8:	c8 54       	subi	r28, 0x48	; 72
    89fa:	df 4f       	sbci	r29, 0xFF	; 255
    89fc:	28 81       	ld	r18, Y
    89fe:	39 81       	ldd	r19, Y+1	; 0x01
    8a00:	c8 5b       	subi	r28, 0xB8	; 184
    8a02:	d0 40       	sbci	r29, 0x00	; 0
    8a04:	82 0e       	add	r8, r18
    8a06:	93 1e       	adc	r9, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1293
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8a08:	ca 54       	subi	r28, 0x4A	; 74
    8a0a:	df 4f       	sbci	r29, 0xFF	; 255
    8a0c:	e8 81       	ld	r30, Y
    8a0e:	f9 81       	ldd	r31, Y+1	; 0x01
    8a10:	c6 5b       	subi	r28, 0xB6	; 182
    8a12:	d0 40       	sbci	r29, 0x00	; 0
    8a14:	94 91       	lpm	r25, Z
    8a16:	92 30       	cpi	r25, 0x02	; 2
    8a18:	09 f0       	breq	.+2      	; 0x8a1c <draw_menu(bool)+0x1164>
    8a1a:	3d c0       	rjmp	.+122    	; 0x8a96 <draw_menu(bool)+0x11de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1295
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8a1c:	c2 53       	subi	r28, 0x32	; 50
    8a1e:	df 4f       	sbci	r29, 0xFF	; 255
    8a20:	e8 81       	ld	r30, Y
    8a22:	f9 81       	ldd	r31, Y+1	; 0x01
    8a24:	ce 5c       	subi	r28, 0xCE	; 206
    8a26:	d0 40       	sbci	r29, 0x00	; 0
    8a28:	85 90       	lpm	r8, Z+
    8a2a:	94 90       	lpm	r9, Z
    8a2c:	c2 54       	subi	r28, 0x42	; 66
    8a2e:	df 4f       	sbci	r29, 0xFF	; 255
    8a30:	e8 81       	ld	r30, Y
    8a32:	f9 81       	ldd	r31, Y+1	; 0x01
    8a34:	ce 5b       	subi	r28, 0xBE	; 190
    8a36:	d0 40       	sbci	r29, 0x00	; 0
    8a38:	94 91       	lpm	r25, Z
    8a3a:	c8 54       	subi	r28, 0x48	; 72
    8a3c:	df 4f       	sbci	r29, 0xFF	; 255
    8a3e:	28 81       	ld	r18, Y
    8a40:	39 81       	ldd	r19, Y+1	; 0x01
    8a42:	c8 5b       	subi	r28, 0xB8	; 184
    8a44:	d0 40       	sbci	r29, 0x00	; 0
    8a46:	82 0e       	add	r8, r18
    8a48:	93 1e       	adc	r9, r19
    8a4a:	91 9f       	mul	r25, r17
    8a4c:	80 0c       	add	r8, r0
    8a4e:	91 1c       	adc	r9, r1
    8a50:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1296
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    8a52:	f5 01       	movw	r30, r10
    8a54:	25 90       	lpm	r2, Z+
    8a56:	34 90       	lpm	r3, Z
    8a58:	c4 54       	subi	r28, 0x44	; 68
    8a5a:	df 4f       	sbci	r29, 0xFF	; 255
    8a5c:	e8 81       	ld	r30, Y
    8a5e:	f9 81       	ldd	r31, Y+1	; 0x01
    8a60:	cc 5b       	subi	r28, 0xBC	; 188
    8a62:	d0 40       	sbci	r29, 0x00	; 0
    8a64:	94 91       	lpm	r25, Z
    8a66:	c6 54       	subi	r28, 0x46	; 70
    8a68:	df 4f       	sbci	r29, 0xFF	; 255
    8a6a:	28 81       	ld	r18, Y
    8a6c:	39 81       	ldd	r19, Y+1	; 0x01
    8a6e:	ca 5b       	subi	r28, 0xBA	; 186
    8a70:	d0 40       	sbci	r29, 0x00	; 0
    8a72:	22 0e       	add	r2, r18
    8a74:	33 1e       	adc	r3, r19
    8a76:	95 9d       	mul	r25, r5
    8a78:	20 0c       	add	r2, r0
    8a7a:	31 1c       	adc	r3, r1
    8a7c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1297
          loop_t++;
    8a7e:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1298
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8a80:	cc 53       	subi	r28, 0x3C	; 60
    8a82:	df 4f       	sbci	r29, 0xFF	; 255
    8a84:	e8 81       	ld	r30, Y
    8a86:	f9 81       	ldd	r31, Y+1	; 0x01
    8a88:	c4 5c       	subi	r28, 0xC4	; 196
    8a8a:	d0 40       	sbci	r29, 0x00	; 0
    8a8c:	94 91       	lpm	r25, Z
    8a8e:	19 17       	cp	r17, r25
    8a90:	10 f0       	brcs	.+4      	; 0x8a96 <draw_menu(bool)+0x11de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1301
          {
            loop_t = 0;
            loop_r++;
    8a92:	53 94       	inc	r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1300
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    8a94:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1304
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    8a96:	9e 01       	movw	r18, r28
    8a98:	2f 57       	subi	r18, 0x7F	; 127
    8a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a9c:	ae 01       	movw	r20, r28
    8a9e:	4f 5f       	subi	r20, 0xFF	; 255
    8aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    8aa2:	cd 54       	subi	r28, 0x4D	; 77
    8aa4:	df 4f       	sbci	r29, 0xFF	; 255
    8aa6:	68 81       	ld	r22, Y
    8aa8:	c3 5b       	subi	r28, 0xB3	; 179
    8aaa:	d0 40       	sbci	r29, 0x00	; 0
    8aac:	ce 52       	subi	r28, 0x2E	; 46
    8aae:	df 4f       	sbci	r29, 0xFF	; 255
    8ab0:	e8 81       	ld	r30, Y
    8ab2:	f9 81       	ldd	r31, Y+1	; 0x01
    8ab4:	c2 5d       	subi	r28, 0xD2	; 210
    8ab6:	d0 40       	sbci	r29, 0x00	; 0
    8ab8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1306
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    8aba:	ca 53       	subi	r28, 0x3A	; 58
    8abc:	df 4f       	sbci	r29, 0xFF	; 255
    8abe:	e8 81       	ld	r30, Y
    8ac0:	f9 81       	ldd	r31, Y+1	; 0x01
    8ac2:	c6 5c       	subi	r28, 0xC6	; 198
    8ac4:	d0 40       	sbci	r29, 0x00	; 0
    8ac6:	04 91       	lpm	r16, Z
    8ac8:	c7 53       	subi	r28, 0x37	; 55
    8aca:	df 4f       	sbci	r29, 0xFF	; 255
    8acc:	e8 81       	ld	r30, Y
    8ace:	f9 81       	ldd	r31, Y+1	; 0x01
    8ad0:	c9 5c       	subi	r28, 0xC9	; 201
    8ad2:	d0 40       	sbci	r29, 0x00	; 0
    8ad4:	25 91       	lpm	r18, Z+
    8ad6:	34 91       	lpm	r19, Z
    8ad8:	c5 53       	subi	r28, 0x35	; 53
    8ada:	df 4f       	sbci	r29, 0xFF	; 255
    8adc:	e8 81       	ld	r30, Y
    8ade:	f9 81       	ldd	r31, Y+1	; 0x01
    8ae0:	cb 5c       	subi	r28, 0xCB	; 203
    8ae2:	d0 40       	sbci	r29, 0x00	; 0
    8ae4:	45 91       	lpm	r20, Z+
    8ae6:	54 91       	lpm	r21, Z
    8ae8:	e9 80       	ldd	r14, Y+1	; 0x01
    8aea:	b1 01       	movw	r22, r2
    8aec:	c4 01       	movw	r24, r8
    8aee:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1307
        loop_i++;
    8af2:	ce 54       	subi	r28, 0x4E	; 78
    8af4:	df 4f       	sbci	r29, 0xFF	; 255
    8af6:	88 81       	ld	r24, Y
    8af8:	c2 5b       	subi	r28, 0xB2	; 178
    8afa:	d0 40       	sbci	r29, 0x00	; 0
    8afc:	8f 5f       	subi	r24, 0xFF	; 255
    8afe:	ce 54       	subi	r28, 0x4E	; 78
    8b00:	df 4f       	sbci	r29, 0xFF	; 255
    8b02:	88 83       	st	Y, r24
    8b04:	c2 5b       	subi	r28, 0xB2	; 178
    8b06:	d0 40       	sbci	r29, 0x00	; 0
    8b08:	43 cf       	rjmp	.-378    	; 0x8990 <draw_menu(bool)+0x10d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8b0a:	f5 01       	movw	r30, r10
    8b0c:	25 90       	lpm	r2, Z+
    8b0e:	34 90       	lpm	r3, Z
    8b10:	c4 54       	subi	r28, 0x44	; 68
    8b12:	df 4f       	sbci	r29, 0xFF	; 255
    8b14:	e8 81       	ld	r30, Y
    8b16:	f9 81       	ldd	r31, Y+1	; 0x01
    8b18:	cc 5b       	subi	r28, 0xBC	; 188
    8b1a:	d0 40       	sbci	r29, 0x00	; 0
    8b1c:	94 91       	lpm	r25, Z
    8b1e:	c6 54       	subi	r28, 0x46	; 70
    8b20:	df 4f       	sbci	r29, 0xFF	; 255
    8b22:	28 81       	ld	r18, Y
    8b24:	39 81       	ldd	r19, Y+1	; 0x01
    8b26:	ca 5b       	subi	r28, 0xBA	; 186
    8b28:	d0 40       	sbci	r29, 0x00	; 0
    8b2a:	22 0e       	add	r2, r18
    8b2c:	33 1e       	adc	r3, r19
    8b2e:	91 9f       	mul	r25, r17
    8b30:	20 0c       	add	r2, r0
    8b32:	31 1c       	adc	r3, r1
    8b34:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1286
          loop_t++;
    8b36:	1f 5f       	subi	r17, 0xFF	; 255
    8b38:	55 cf       	rjmp	.-342    	; 0x89e4 <draw_menu(bool)+0x112c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1290
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8b3a:	c2 53       	subi	r28, 0x32	; 50
    8b3c:	df 4f       	sbci	r29, 0xFF	; 255
    8b3e:	e8 81       	ld	r30, Y
    8b40:	f9 81       	ldd	r31, Y+1	; 0x01
    8b42:	ce 5c       	subi	r28, 0xCE	; 206
    8b44:	d0 40       	sbci	r29, 0x00	; 0
    8b46:	85 90       	lpm	r8, Z+
    8b48:	94 90       	lpm	r9, Z
    8b4a:	c2 54       	subi	r28, 0x42	; 66
    8b4c:	df 4f       	sbci	r29, 0xFF	; 255
    8b4e:	e8 81       	ld	r30, Y
    8b50:	f9 81       	ldd	r31, Y+1	; 0x01
    8b52:	ce 5b       	subi	r28, 0xBE	; 190
    8b54:	d0 40       	sbci	r29, 0x00	; 0
    8b56:	94 91       	lpm	r25, Z
    8b58:	c8 54       	subi	r28, 0x48	; 72
    8b5a:	df 4f       	sbci	r29, 0xFF	; 255
    8b5c:	28 81       	ld	r18, Y
    8b5e:	39 81       	ldd	r19, Y+1	; 0x01
    8b60:	c8 5b       	subi	r28, 0xB8	; 184
    8b62:	d0 40       	sbci	r29, 0x00	; 0
    8b64:	82 0e       	add	r8, r18
    8b66:	93 1e       	adc	r9, r19
    8b68:	91 9f       	mul	r25, r17
    8b6a:	80 0c       	add	r8, r0
    8b6c:	91 1c       	adc	r9, r1
    8b6e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1291
          loop_t++;
    8b70:	1f 5f       	subi	r17, 0xFF	; 255
    8b72:	4a cf       	rjmp	.-364    	; 0x8a08 <draw_menu(bool)+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1310
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    8b74:	c0 54       	subi	r28, 0x40	; 64
    8b76:	df 4f       	sbci	r29, 0xFF	; 255
    8b78:	28 81       	ld	r18, Y
    8b7a:	39 81       	ldd	r19, Y+1	; 0x01
    8b7c:	c0 5c       	subi	r28, 0xC0	; 192
    8b7e:	d0 40       	sbci	r29, 0x00	; 0
    8b80:	23 2b       	or	r18, r19
    8b82:	09 f4       	brne	.+2      	; 0x8b86 <draw_menu(bool)+0x12ce>
    8b84:	37 c1       	rjmp	.+622    	; 0x8df4 <draw_menu(bool)+0x153c>
    8b86:	ce 53       	subi	r28, 0x3E	; 62
    8b88:	df 4f       	sbci	r29, 0xFF	; 255
    8b8a:	48 81       	ld	r20, Y
    8b8c:	59 81       	ldd	r21, Y+1	; 0x01
    8b8e:	c2 5c       	subi	r28, 0xC2	; 194
    8b90:	d0 40       	sbci	r29, 0x00	; 0
    8b92:	45 2b       	or	r20, r21
    8b94:	09 f4       	brne	.+2      	; 0x8b98 <draw_menu(bool)+0x12e0>
    8b96:	2e c1       	rjmp	.+604    	; 0x8df4 <draw_menu(bool)+0x153c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1312
    {
      loop_i = 0;
    8b98:	ce 54       	subi	r28, 0x4E	; 78
    8b9a:	df 4f       	sbci	r29, 0xFF	; 255
    8b9c:	18 82       	st	Y, r1
    8b9e:	c2 5b       	subi	r28, 0xB2	; 178
    8ba0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1315
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8ba2:	f6 01       	movw	r30, r12
    8ba4:	ea 50       	subi	r30, 0x0A	; 10
    8ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    8ba8:	e6 0d       	add	r30, r6
    8baa:	f7 1d       	adc	r31, r7
    8bac:	25 91       	lpm	r18, Z+
    8bae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1316
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
    8bb0:	c6 01       	movw	r24, r12
    8bb2:	8f 50       	subi	r24, 0x0F	; 15
    8bb4:	9e 4f       	sbci	r25, 0xFE	; 254
    8bb6:	f3 01       	movw	r30, r6
    8bb8:	e8 0f       	add	r30, r24
    8bba:	f9 1f       	adc	r31, r25
    8bbc:	c4 54       	subi	r28, 0x44	; 68
    8bbe:	df 4f       	sbci	r29, 0xFF	; 255
    8bc0:	f9 83       	std	Y+1, r31	; 0x01
    8bc2:	e8 83       	st	Y, r30
    8bc4:	cc 5b       	subi	r28, 0xBC	; 188
    8bc6:	d0 40       	sbci	r29, 0x00	; 0
    8bc8:	85 91       	lpm	r24, Z+
    8bca:	94 91       	lpm	r25, Z
    8bcc:	cd 54       	subi	r28, 0x4D	; 77
    8bce:	df 4f       	sbci	r29, 0xFF	; 255
    8bd0:	68 81       	ld	r22, Y
    8bd2:	c3 5b       	subi	r28, 0xB3	; 179
    8bd4:	d0 40       	sbci	r29, 0x00	; 0
    8bd6:	70 e0       	ldi	r23, 0x00	; 0
    8bd8:	40 e0       	ldi	r20, 0x00	; 0
    8bda:	f9 01       	movw	r30, r18
    8bdc:	19 95       	eicall
    8bde:	88 2e       	mov	r8, r24
    8be0:	cf 54       	subi	r28, 0x4F	; 79
    8be2:	df 4f       	sbci	r29, 0xFF	; 255
    8be4:	88 83       	st	Y, r24
    8be6:	c1 5b       	subi	r28, 0xB1	; 177
    8be8:	d0 40       	sbci	r29, 0x00	; 0
    8bea:	ce 54       	subi	r28, 0x4E	; 78
    8bec:	df 4f       	sbci	r29, 0xFF	; 255
    8bee:	98 80       	ld	r9, Y
    8bf0:	c2 5b       	subi	r28, 0xB2	; 178
    8bf2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1320
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8bf4:	16 01       	movw	r2, r12
    8bf6:	fc e1       	ldi	r31, 0x1C	; 28
    8bf8:	2f 1a       	sub	r2, r31
    8bfa:	fe ef       	ldi	r31, 0xFE	; 254
    8bfc:	3f 0a       	sbc	r3, r31
    8bfe:	26 0c       	add	r2, r6
    8c00:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1321
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8c02:	c6 01       	movw	r24, r12
    8c04:	83 51       	subi	r24, 0x13	; 19
    8c06:	9e 4f       	sbci	r25, 0xFE	; 254
    8c08:	93 01       	movw	r18, r6
    8c0a:	28 0f       	add	r18, r24
    8c0c:	39 1f       	adc	r19, r25
    8c0e:	ca 54       	subi	r28, 0x4A	; 74
    8c10:	df 4f       	sbci	r29, 0xFF	; 255
    8c12:	39 83       	std	Y+1, r19	; 0x01
    8c14:	28 83       	st	Y, r18
    8c16:	c6 5b       	subi	r28, 0xB6	; 182
    8c18:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1323
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8c1a:	01 97       	sbiw	r24, 0x01	; 1
    8c1c:	a3 01       	movw	r20, r6
    8c1e:	48 0f       	add	r20, r24
    8c20:	59 1f       	adc	r21, r25
    8c22:	c2 54       	subi	r28, 0x42	; 66
    8c24:	df 4f       	sbci	r29, 0xFF	; 255
    8c26:	59 83       	std	Y+1, r21	; 0x01
    8c28:	48 83       	st	Y, r20
    8c2a:	ce 5b       	subi	r28, 0xBE	; 190
    8c2c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1328
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8c2e:	01 97       	sbiw	r24, 0x01	; 1
    8c30:	f3 01       	movw	r30, r6
    8c32:	e8 0f       	add	r30, r24
    8c34:	f9 1f       	adc	r31, r25
    8c36:	cc 53       	subi	r28, 0x3C	; 60
    8c38:	df 4f       	sbci	r29, 0xFF	; 255
    8c3a:	f9 83       	std	Y+1, r31	; 0x01
    8c3c:	e8 83       	st	Y, r30
    8c3e:	c4 5c       	subi	r28, 0xC4	; 196
    8c40:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8c42:	03 96       	adiw	r24, 0x03	; 3
    8c44:	93 01       	movw	r18, r6
    8c46:	28 0f       	add	r18, r24
    8c48:	39 1f       	adc	r19, r25
    8c4a:	ca 53       	subi	r28, 0x3A	; 58
    8c4c:	df 4f       	sbci	r29, 0xFF	; 255
    8c4e:	39 83       	std	Y+1, r19	; 0x01
    8c50:	28 83       	st	Y, r18
    8c52:	c6 5c       	subi	r28, 0xC6	; 198
    8c54:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8c56:	06 97       	sbiw	r24, 0x06	; 6
    8c58:	a3 01       	movw	r20, r6
    8c5a:	48 0f       	add	r20, r24
    8c5c:	59 1f       	adc	r21, r25
    8c5e:	c7 53       	subi	r28, 0x37	; 55
    8c60:	df 4f       	sbci	r29, 0xFF	; 255
    8c62:	59 83       	std	Y+1, r21	; 0x01
    8c64:	48 83       	st	Y, r20
    8c66:	c9 5c       	subi	r28, 0xC9	; 201
    8c68:	d0 40       	sbci	r29, 0x00	; 0
    8c6a:	02 97       	sbiw	r24, 0x02	; 2
    8c6c:	f3 01       	movw	r30, r6
    8c6e:	e8 0f       	add	r30, r24
    8c70:	f9 1f       	adc	r31, r25
    8c72:	c5 53       	subi	r28, 0x35	; 53
    8c74:	df 4f       	sbci	r29, 0xFF	; 255
    8c76:	f9 83       	std	Y+1, r31	; 0x01
    8c78:	e8 83       	st	Y, r30
    8c7a:	cb 5c       	subi	r28, 0xCB	; 203
    8c7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1314
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    8c7e:	51 2c       	mov	r5, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1313
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    8c80:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1317
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
    8c82:	98 14       	cp	r9, r8
    8c84:	08 f0       	brcs	.+2      	; 0x8c88 <draw_menu(bool)+0x13d0>
    8c86:	b6 c0       	rjmp	.+364    	; 0x8df4 <draw_menu(bool)+0x153c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1319
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8c88:	c2 53       	subi	r28, 0x32	; 50
    8c8a:	df 4f       	sbci	r29, 0xFF	; 255
    8c8c:	e8 81       	ld	r30, Y
    8c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    8c90:	ce 5c       	subi	r28, 0xCE	; 206
    8c92:	d0 40       	sbci	r29, 0x00	; 0
    8c94:	85 91       	lpm	r24, Z+
    8c96:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1320
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8c98:	f1 01       	movw	r30, r2
    8c9a:	65 91       	lpm	r22, Z+
    8c9c:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1321
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8c9e:	ca 54       	subi	r28, 0x4A	; 74
    8ca0:	df 4f       	sbci	r29, 0xFF	; 255
    8ca2:	e8 81       	ld	r30, Y
    8ca4:	f9 81       	ldd	r31, Y+1	; 0x01
    8ca6:	c6 5b       	subi	r28, 0xB6	; 182
    8ca8:	d0 40       	sbci	r29, 0x00	; 0
    8caa:	24 91       	lpm	r18, Z
    8cac:	22 23       	and	r18, r18
    8cae:	09 f4       	brne	.+2      	; 0x8cb2 <draw_menu(bool)+0x13fa>
    8cb0:	a5 c0       	rjmp	.+330    	; 0x8dfc <draw_menu(bool)+0x1544>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1320
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8cb2:	c6 54       	subi	r28, 0x46	; 70
    8cb4:	df 4f       	sbci	r29, 0xFF	; 255
    8cb6:	28 81       	ld	r18, Y
    8cb8:	39 81       	ldd	r19, Y+1	; 0x01
    8cba:	ca 5b       	subi	r28, 0xBA	; 186
    8cbc:	d0 40       	sbci	r29, 0x00	; 0
    8cbe:	62 0f       	add	r22, r18
    8cc0:	73 1f       	adc	r23, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1326
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8cc2:	ca 54       	subi	r28, 0x4A	; 74
    8cc4:	df 4f       	sbci	r29, 0xFF	; 255
    8cc6:	e8 81       	ld	r30, Y
    8cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    8cca:	c6 5b       	subi	r28, 0xB6	; 182
    8ccc:	d0 40       	sbci	r29, 0x00	; 0
    8cce:	24 91       	lpm	r18, Z
    8cd0:	21 30       	cpi	r18, 0x01	; 1
    8cd2:	09 f4       	brne	.+2      	; 0x8cd6 <draw_menu(bool)+0x141e>
    8cd4:	ab c0       	rjmp	.+342    	; 0x8e2c <draw_menu(bool)+0x1574>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1319
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8cd6:	c8 54       	subi	r28, 0x48	; 72
    8cd8:	df 4f       	sbci	r29, 0xFF	; 255
    8cda:	28 81       	ld	r18, Y
    8cdc:	39 81       	ldd	r19, Y+1	; 0x01
    8cde:	c8 5b       	subi	r28, 0xB8	; 184
    8ce0:	d0 40       	sbci	r29, 0x00	; 0
    8ce2:	82 0f       	add	r24, r18
    8ce4:	93 1f       	adc	r25, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1331
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8ce6:	ca 54       	subi	r28, 0x4A	; 74
    8ce8:	df 4f       	sbci	r29, 0xFF	; 255
    8cea:	e8 81       	ld	r30, Y
    8cec:	f9 81       	ldd	r31, Y+1	; 0x01
    8cee:	c6 5b       	subi	r28, 0xB6	; 182
    8cf0:	d0 40       	sbci	r29, 0x00	; 0
    8cf2:	24 91       	lpm	r18, Z
    8cf4:	22 30       	cpi	r18, 0x02	; 2
    8cf6:	09 f0       	breq	.+2      	; 0x8cfa <draw_menu(bool)+0x1442>
    8cf8:	3d c0       	rjmp	.+122    	; 0x8d74 <draw_menu(bool)+0x14bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8cfa:	c2 53       	subi	r28, 0x32	; 50
    8cfc:	df 4f       	sbci	r29, 0xFF	; 255
    8cfe:	e8 81       	ld	r30, Y
    8d00:	f9 81       	ldd	r31, Y+1	; 0x01
    8d02:	ce 5c       	subi	r28, 0xCE	; 206
    8d04:	d0 40       	sbci	r29, 0x00	; 0
    8d06:	85 91       	lpm	r24, Z+
    8d08:	94 91       	lpm	r25, Z
    8d0a:	cc 53       	subi	r28, 0x3C	; 60
    8d0c:	df 4f       	sbci	r29, 0xFF	; 255
    8d0e:	e8 81       	ld	r30, Y
    8d10:	f9 81       	ldd	r31, Y+1	; 0x01
    8d12:	c4 5c       	subi	r28, 0xC4	; 196
    8d14:	d0 40       	sbci	r29, 0x00	; 0
    8d16:	24 91       	lpm	r18, Z
    8d18:	c8 54       	subi	r28, 0x48	; 72
    8d1a:	df 4f       	sbci	r29, 0xFF	; 255
    8d1c:	48 81       	ld	r20, Y
    8d1e:	59 81       	ldd	r21, Y+1	; 0x01
    8d20:	c8 5b       	subi	r28, 0xB8	; 184
    8d22:	d0 40       	sbci	r29, 0x00	; 0
    8d24:	84 0f       	add	r24, r20
    8d26:	95 1f       	adc	r25, r21
    8d28:	2b 9d       	mul	r18, r11
    8d2a:	80 0d       	add	r24, r0
    8d2c:	91 1d       	adc	r25, r1
    8d2e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1334
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    8d30:	f1 01       	movw	r30, r2
    8d32:	65 91       	lpm	r22, Z+
    8d34:	74 91       	lpm	r23, Z
    8d36:	c2 54       	subi	r28, 0x42	; 66
    8d38:	df 4f       	sbci	r29, 0xFF	; 255
    8d3a:	e8 81       	ld	r30, Y
    8d3c:	f9 81       	ldd	r31, Y+1	; 0x01
    8d3e:	ce 5b       	subi	r28, 0xBE	; 190
    8d40:	d0 40       	sbci	r29, 0x00	; 0
    8d42:	24 91       	lpm	r18, Z
    8d44:	c6 54       	subi	r28, 0x46	; 70
    8d46:	df 4f       	sbci	r29, 0xFF	; 255
    8d48:	48 81       	ld	r20, Y
    8d4a:	59 81       	ldd	r21, Y+1	; 0x01
    8d4c:	ca 5b       	subi	r28, 0xBA	; 186
    8d4e:	d0 40       	sbci	r29, 0x00	; 0
    8d50:	64 0f       	add	r22, r20
    8d52:	75 1f       	adc	r23, r21
    8d54:	25 9d       	mul	r18, r5
    8d56:	60 0d       	add	r22, r0
    8d58:	71 1d       	adc	r23, r1
    8d5a:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1335
          loop_t++;
    8d5c:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8d5e:	ca 53       	subi	r28, 0x3A	; 58
    8d60:	df 4f       	sbci	r29, 0xFF	; 255
    8d62:	e8 81       	ld	r30, Y
    8d64:	f9 81       	ldd	r31, Y+1	; 0x01
    8d66:	c6 5c       	subi	r28, 0xC6	; 198
    8d68:	d0 40       	sbci	r29, 0x00	; 0
    8d6a:	24 91       	lpm	r18, Z
    8d6c:	b2 16       	cp	r11, r18
    8d6e:	10 f0       	brcs	.+4      	; 0x8d74 <draw_menu(bool)+0x14bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339
          {
            loop_t = 0;
            loop_r++;
    8d70:	53 94       	inc	r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1338
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    8d72:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8d74:	c7 53       	subi	r28, 0x37	; 55
    8d76:	df 4f       	sbci	r29, 0xFF	; 255
    8d78:	e8 81       	ld	r30, Y
    8d7a:	f9 81       	ldd	r31, Y+1	; 0x01
    8d7c:	c9 5c       	subi	r28, 0xC9	; 201
    8d7e:	d0 40       	sbci	r29, 0x00	; 0
    8d80:	25 91       	lpm	r18, Z+
    8d82:	34 91       	lpm	r19, Z
    8d84:	c5 53       	subi	r28, 0x35	; 53
    8d86:	df 4f       	sbci	r29, 0xFF	; 255
    8d88:	e8 81       	ld	r30, Y
    8d8a:	f9 81       	ldd	r31, Y+1	; 0x01
    8d8c:	cb 5c       	subi	r28, 0xCB	; 203
    8d8e:	d0 40       	sbci	r29, 0x00	; 0
    8d90:	45 91       	lpm	r20, Z+
    8d92:	54 91       	lpm	r21, Z
    8d94:	ce 53       	subi	r28, 0x3E	; 62
    8d96:	df 4f       	sbci	r29, 0xFF	; 255
    8d98:	e8 80       	ld	r14, Y
    8d9a:	f9 80       	ldd	r15, Y+1	; 0x01
    8d9c:	c2 5c       	subi	r28, 0xC2	; 194
    8d9e:	d0 40       	sbci	r29, 0x00	; 0
    8da0:	c0 54       	subi	r28, 0x40	; 64
    8da2:	df 4f       	sbci	r29, 0xFF	; 255
    8da4:	08 81       	ld	r16, Y
    8da6:	19 81       	ldd	r17, Y+1	; 0x01
    8da8:	c0 5c       	subi	r28, 0xC0	; 192
    8daa:	d0 40       	sbci	r29, 0x00	; 0
    8dac:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8db0:	18 2f       	mov	r17, r24
    8db2:	81 e0       	ldi	r24, 0x01	; 1
    8db4:	89 0d       	add	r24, r9
    8db6:	11 23       	and	r17, r17
    8db8:	f9 f0       	breq	.+62     	; 0x8df8 <draw_menu(bool)+0x1540>
    8dba:	ce 54       	subi	r28, 0x4E	; 78
    8dbc:	df 4f       	sbci	r29, 0xFF	; 255
    8dbe:	98 82       	st	Y, r9
    8dc0:	c2 5b       	subi	r28, 0xB2	; 178
    8dc2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    8dc4:	f6 01       	movw	r30, r12
    8dc6:	ec 50       	subi	r30, 0x0C	; 12
    8dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    8dca:	e6 0d       	add	r30, r6
    8dcc:	f7 1d       	adc	r31, r7
    8dce:	25 91       	lpm	r18, Z+
    8dd0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1345
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), loop_i);
    8dd2:	c4 54       	subi	r28, 0x44	; 68
    8dd4:	df 4f       	sbci	r29, 0xFF	; 255
    8dd6:	e8 81       	ld	r30, Y
    8dd8:	f9 81       	ldd	r31, Y+1	; 0x01
    8dda:	cc 5b       	subi	r28, 0xBC	; 188
    8ddc:	d0 40       	sbci	r29, 0x00	; 0
    8dde:	84 91       	lpm	r24, Z
    8de0:	69 2d       	mov	r22, r9
    8de2:	70 e0       	ldi	r23, 0x00	; 0
    8de4:	90 e0       	ldi	r25, 0x00	; 0
    8de6:	f9 01       	movw	r30, r18
    8de8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
          ret = true;
    8dea:	c8 53       	subi	r28, 0x38	; 56
    8dec:	df 4f       	sbci	r29, 0xFF	; 255
    8dee:	18 83       	st	Y, r17
    8df0:	c8 5c       	subi	r28, 0xC8	; 200
    8df2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    8df4:	43 94       	inc	r4
    8df6:	23 cd       	rjmp	.-1466   	; 0x883e <draw_menu(bool)+0xf86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8df8:	98 2e       	mov	r9, r24
    8dfa:	43 cf       	rjmp	.-378    	; 0x8c82 <draw_menu(bool)+0x13ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1323
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8dfc:	f1 01       	movw	r30, r2
    8dfe:	65 91       	lpm	r22, Z+
    8e00:	74 91       	lpm	r23, Z
    8e02:	c2 54       	subi	r28, 0x42	; 66
    8e04:	df 4f       	sbci	r29, 0xFF	; 255
    8e06:	e8 81       	ld	r30, Y
    8e08:	f9 81       	ldd	r31, Y+1	; 0x01
    8e0a:	ce 5b       	subi	r28, 0xBE	; 190
    8e0c:	d0 40       	sbci	r29, 0x00	; 0
    8e0e:	24 91       	lpm	r18, Z
    8e10:	c6 54       	subi	r28, 0x46	; 70
    8e12:	df 4f       	sbci	r29, 0xFF	; 255
    8e14:	48 81       	ld	r20, Y
    8e16:	59 81       	ldd	r21, Y+1	; 0x01
    8e18:	ca 5b       	subi	r28, 0xBA	; 186
    8e1a:	d0 40       	sbci	r29, 0x00	; 0
    8e1c:	64 0f       	add	r22, r20
    8e1e:	75 1f       	adc	r23, r21
    8e20:	2b 9d       	mul	r18, r11
    8e22:	60 0d       	add	r22, r0
    8e24:	71 1d       	adc	r23, r1
    8e26:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1324
          loop_t++;
    8e28:	b3 94       	inc	r11
    8e2a:	4b cf       	rjmp	.-362    	; 0x8cc2 <draw_menu(bool)+0x140a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1328
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8e2c:	c2 53       	subi	r28, 0x32	; 50
    8e2e:	df 4f       	sbci	r29, 0xFF	; 255
    8e30:	e8 81       	ld	r30, Y
    8e32:	f9 81       	ldd	r31, Y+1	; 0x01
    8e34:	ce 5c       	subi	r28, 0xCE	; 206
    8e36:	d0 40       	sbci	r29, 0x00	; 0
    8e38:	85 91       	lpm	r24, Z+
    8e3a:	94 91       	lpm	r25, Z
    8e3c:	cc 53       	subi	r28, 0x3C	; 60
    8e3e:	df 4f       	sbci	r29, 0xFF	; 255
    8e40:	e8 81       	ld	r30, Y
    8e42:	f9 81       	ldd	r31, Y+1	; 0x01
    8e44:	c4 5c       	subi	r28, 0xC4	; 196
    8e46:	d0 40       	sbci	r29, 0x00	; 0
    8e48:	24 91       	lpm	r18, Z
    8e4a:	c8 54       	subi	r28, 0x48	; 72
    8e4c:	df 4f       	sbci	r29, 0xFF	; 255
    8e4e:	48 81       	ld	r20, Y
    8e50:	59 81       	ldd	r21, Y+1	; 0x01
    8e52:	c8 5b       	subi	r28, 0xB8	; 184
    8e54:	d0 40       	sbci	r29, 0x00	; 0
    8e56:	84 0f       	add	r24, r20
    8e58:	95 1f       	adc	r25, r21
    8e5a:	2b 9d       	mul	r18, r11
    8e5c:	80 0d       	add	r24, r0
    8e5e:	91 1d       	adc	r25, r1
    8e60:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1329
          loop_t++;
    8e62:	b3 94       	inc	r11
    8e64:	40 cf       	rjmp	.-384    	; 0x8ce6 <draw_menu(bool)+0x142e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1353
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    8e66:	c8 53       	subi	r28, 0x38	; 56
    8e68:	df 4f       	sbci	r29, 0xFF	; 255
    8e6a:	f8 81       	ld	r31, Y
    8e6c:	c8 5c       	subi	r28, 0xC8	; 200
    8e6e:	d0 40       	sbci	r29, 0x00	; 0
    8e70:	f1 11       	cpse	r31, r1
    8e72:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    8e76:	91 2c       	mov	r9, r1
    8e78:	93 01       	movw	r18, r6
    8e7a:	27 5b       	subi	r18, 0xB7	; 183
    8e7c:	3d 4f       	sbci	r19, 0xFD	; 253
    8e7e:	cc 52       	subi	r28, 0x2C	; 44
    8e80:	df 4f       	sbci	r29, 0xFF	; 255
    8e82:	39 83       	std	Y+1, r19	; 0x01
    8e84:	28 83       	st	Y, r18
    8e86:	c4 5d       	subi	r28, 0xD4	; 212
    8e88:	d0 40       	sbci	r29, 0x00	; 0
    8e8a:	cc 52       	subi	r28, 0x2C	; 44
    8e8c:	df 4f       	sbci	r29, 0xFF	; 255
    8e8e:	e8 81       	ld	r30, Y
    8e90:	f9 81       	ldd	r31, Y+1	; 0x01
    8e92:	c4 5d       	subi	r28, 0xD4	; 212
    8e94:	d0 40       	sbci	r29, 0x00	; 0
    8e96:	84 91       	lpm	r24, Z
    8e98:	98 16       	cp	r9, r24
    8e9a:	08 f0       	brcs	.+2      	; 0x8e9e <draw_menu(bool)+0x15e6>
    8e9c:	d7 c2       	rjmp	.+1454   	; 0x944c <draw_menu(bool)+0x1b94>
    8e9e:	f7 e1       	ldi	r31, 0x17	; 23
    8ea0:	9f 9e       	mul	r9, r31
    8ea2:	20 01       	movw	r4, r0
    8ea4:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    8ea6:	f2 01       	movw	r30, r4
    8ea8:	e6 55       	subi	r30, 0x56	; 86
    8eaa:	fe 4f       	sbci	r31, 0xFE	; 254
    8eac:	e6 0d       	add	r30, r6
    8eae:	f7 1d       	adc	r31, r7
    8eb0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
    if (enable_redraw(rdr, redraw_class) == true)
    8eb2:	c3 53       	subi	r28, 0x33	; 51
    8eb4:	df 4f       	sbci	r29, 0xFF	; 255
    8eb6:	68 81       	ld	r22, Y
    8eb8:	cd 5c       	subi	r28, 0xCD	; 205
    8eba:	d0 40       	sbci	r29, 0x00	; 0
    8ebc:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    8ec0:	88 23       	and	r24, r24
    8ec2:	09 f4       	brne	.+2      	; 0x8ec6 <draw_menu(bool)+0x160e>
    8ec4:	6d c1       	rjmp	.+730    	; 0x91a0 <draw_menu(bool)+0x18e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
    {
      loop_i = 0;
    8ec6:	ce 54       	subi	r28, 0x4E	; 78
    8ec8:	df 4f       	sbci	r29, 0xFF	; 255
    8eca:	18 82       	st	Y, r1
    8ecc:	c2 5b       	subi	r28, 0xB2	; 178
    8ece:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    8ed0:	f2 01       	movw	r30, r4
    8ed2:	e8 55       	subi	r30, 0x58	; 88
    8ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    8ed6:	e6 0d       	add	r30, r6
    8ed8:	f7 1d       	adc	r31, r7
    8eda:	25 91       	lpm	r18, Z+
    8edc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
    8ede:	f2 01       	movw	r30, r4
    8ee0:	ed 55       	subi	r30, 0x5D	; 93
    8ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    8ee4:	e6 0d       	add	r30, r6
    8ee6:	f7 1d       	adc	r31, r7
    8ee8:	85 91       	lpm	r24, Z+
    8eea:	94 91       	lpm	r25, Z
    8eec:	cd 54       	subi	r28, 0x4D	; 77
    8eee:	df 4f       	sbci	r29, 0xFF	; 255
    8ef0:	68 81       	ld	r22, Y
    8ef2:	c3 5b       	subi	r28, 0xB3	; 179
    8ef4:	d0 40       	sbci	r29, 0x00	; 0
    8ef6:	70 e0       	ldi	r23, 0x00	; 0
    8ef8:	40 e0       	ldi	r20, 0x00	; 0
    8efa:	f9 01       	movw	r30, r18
    8efc:	19 95       	eicall
    8efe:	cf 54       	subi	r28, 0x4F	; 79
    8f00:	df 4f       	sbci	r29, 0xFF	; 255
    8f02:	88 83       	st	Y, r24
    8f04:	c1 5b       	subi	r28, 0xB1	; 177
    8f06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1365
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    8f08:	f2 01       	movw	r30, r4
    8f0a:	ec 55       	subi	r30, 0x5C	; 92
    8f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    8f0e:	e6 0d       	add	r30, r6
    8f10:	f7 1d       	adc	r31, r7
    8f12:	25 91       	lpm	r18, Z+
    8f14:	34 91       	lpm	r19, Z
    8f16:	ca 52       	subi	r28, 0x2A	; 42
    8f18:	df 4f       	sbci	r29, 0xFF	; 255
    8f1a:	39 83       	std	Y+1, r19	; 0x01
    8f1c:	28 83       	st	Y, r18
    8f1e:	c6 5d       	subi	r28, 0xD6	; 214
    8f20:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    8f22:	f2 01       	movw	r30, r4
    8f24:	e0 56       	subi	r30, 0x60	; 96
    8f26:	fe 4f       	sbci	r31, 0xFE	; 254
    8f28:	e6 0d       	add	r30, r6
    8f2a:	f7 1d       	adc	r31, r7
    8f2c:	24 91       	lpm	r18, Z
    8f2e:	f2 01       	movw	r30, r4
    8f30:	ef 55       	subi	r30, 0x5F	; 95
    8f32:	fe 4f       	sbci	r31, 0xFE	; 254
    8f34:	e6 0d       	add	r30, r6
    8f36:	f7 1d       	adc	r31, r7
    8f38:	84 91       	lpm	r24, Z
    8f3a:	f2 01       	movw	r30, r4
    8f3c:	ee 55       	subi	r30, 0x5E	; 94
    8f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    8f40:	e6 0d       	add	r30, r6
    8f42:	f7 1d       	adc	r31, r7
    8f44:	44 91       	lpm	r20, Z
    8f46:	28 9f       	mul	r18, r24
    8f48:	20 2d       	mov	r18, r0
    8f4a:	11 24       	eor	r1, r1
    8f4c:	be 01       	movw	r22, r28
    8f4e:	6f 54       	subi	r22, 0x4F	; 79
    8f50:	7f 4f       	sbci	r23, 0xFF	; 255
    8f52:	ce 01       	movw	r24, r28
    8f54:	8e 54       	subi	r24, 0x4E	; 78
    8f56:	9f 4f       	sbci	r25, 0xFF	; 255
    8f58:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    8f5c:	c2 01       	movw	r24, r4
    8f5e:	8c 56       	subi	r24, 0x6C	; 108
    8f60:	9e 4f       	sbci	r25, 0xFE	; 254
    8f62:	a3 01       	movw	r20, r6
    8f64:	48 0f       	add	r20, r24
    8f66:	59 1f       	adc	r21, r25
    8f68:	c4 54       	subi	r28, 0x44	; 68
    8f6a:	df 4f       	sbci	r29, 0xFF	; 255
    8f6c:	59 83       	std	Y+1, r21	; 0x01
    8f6e:	48 83       	st	Y, r20
    8f70:	cc 5b       	subi	r28, 0xBC	; 188
    8f72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    8f74:	02 96       	adiw	r24, 0x02	; 2
    8f76:	f3 01       	movw	r30, r6
    8f78:	e8 0f       	add	r30, r24
    8f7a:	f9 1f       	adc	r31, r25
    8f7c:	c2 54       	subi	r28, 0x42	; 66
    8f7e:	df 4f       	sbci	r29, 0xFF	; 255
    8f80:	f9 83       	std	Y+1, r31	; 0x01
    8f82:	e8 83       	st	Y, r30
    8f84:	ce 5b       	subi	r28, 0xBE	; 190
    8f86:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    8f88:	09 96       	adiw	r24, 0x09	; 9
    8f8a:	93 01       	movw	r18, r6
    8f8c:	28 0f       	add	r18, r24
    8f8e:	39 1f       	adc	r19, r25
    8f90:	cc 53       	subi	r28, 0x3C	; 60
    8f92:	df 4f       	sbci	r29, 0xFF	; 255
    8f94:	39 83       	std	Y+1, r19	; 0x01
    8f96:	28 83       	st	Y, r18
    8f98:	c4 5c       	subi	r28, 0xC4	; 196
    8f9a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    8f9c:	01 97       	sbiw	r24, 0x01	; 1
    8f9e:	a3 01       	movw	r20, r6
    8fa0:	48 0f       	add	r20, r24
    8fa2:	59 1f       	adc	r21, r25
    8fa4:	c7 53       	subi	r28, 0x37	; 55
    8fa6:	df 4f       	sbci	r29, 0xFF	; 255
    8fa8:	59 83       	std	Y+1, r21	; 0x01
    8faa:	48 83       	st	Y, r20
    8fac:	c9 5c       	subi	r28, 0xC9	; 201
    8fae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1374
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    8fb0:	01 97       	sbiw	r24, 0x01	; 1
    8fb2:	f3 01       	movw	r30, r6
    8fb4:	e8 0f       	add	r30, r24
    8fb6:	f9 1f       	adc	r31, r25
    8fb8:	c5 53       	subi	r28, 0x35	; 53
    8fba:	df 4f       	sbci	r29, 0xFF	; 255
    8fbc:	f9 83       	std	Y+1, r31	; 0x01
    8fbe:	e8 83       	st	Y, r30
    8fc0:	cb 5c       	subi	r28, 0xCB	; 203
    8fc2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1376
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    8fc4:	01 97       	sbiw	r24, 0x01	; 1
    8fc6:	93 01       	movw	r18, r6
    8fc8:	28 0f       	add	r18, r24
    8fca:	39 1f       	adc	r19, r25
    8fcc:	ca 53       	subi	r28, 0x3A	; 58
    8fce:	df 4f       	sbci	r29, 0xFF	; 255
    8fd0:	39 83       	std	Y+1, r19	; 0x01
    8fd2:	28 83       	st	Y, r18
    8fd4:	c6 5c       	subi	r28, 0xC6	; 198
    8fd6:	d0 40       	sbci	r29, 0x00	; 0
    8fd8:	02 97       	sbiw	r24, 0x02	; 2
    8fda:	a3 01       	movw	r20, r6
    8fdc:	48 0f       	add	r20, r24
    8fde:	59 1f       	adc	r21, r25
    8fe0:	c0 53       	subi	r28, 0x30	; 48
    8fe2:	df 4f       	sbci	r29, 0xFF	; 255
    8fe4:	59 83       	std	Y+1, r21	; 0x01
    8fe6:	48 83       	st	Y, r20
    8fe8:	c0 5d       	subi	r28, 0xD0	; 208
    8fea:	d0 40       	sbci	r29, 0x00	; 0
    8fec:	02 97       	sbiw	r24, 0x02	; 2
    8fee:	f3 01       	movw	r30, r6
    8ff0:	e8 0f       	add	r30, r24
    8ff2:	f9 1f       	adc	r31, r25
    8ff4:	ce 52       	subi	r28, 0x2E	; 46
    8ff6:	df 4f       	sbci	r29, 0xFF	; 255
    8ff8:	f9 83       	std	Y+1, r31	; 0x01
    8ffa:	e8 83       	st	Y, r30
    8ffc:	c2 5d       	subi	r28, 0xD2	; 210
    8ffe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    9000:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    9002:	ce 54       	subi	r28, 0x4E	; 78
    9004:	df 4f       	sbci	r29, 0xFF	; 255
    9006:	88 81       	ld	r24, Y
    9008:	c2 5b       	subi	r28, 0xB2	; 178
    900a:	d0 40       	sbci	r29, 0x00	; 0
    900c:	cf 54       	subi	r28, 0x4F	; 79
    900e:	df 4f       	sbci	r29, 0xFF	; 255
    9010:	98 81       	ld	r25, Y
    9012:	c1 5b       	subi	r28, 0xB1	; 177
    9014:	d0 40       	sbci	r29, 0x00	; 0
    9016:	89 17       	cp	r24, r25
    9018:	08 f0       	brcs	.+2      	; 0x901c <draw_menu(bool)+0x1764>
    901a:	c2 c0       	rjmp	.+388    	; 0x91a0 <draw_menu(bool)+0x18e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    901c:	c4 54       	subi	r28, 0x44	; 68
    901e:	df 4f       	sbci	r29, 0xFF	; 255
    9020:	e8 81       	ld	r30, Y
    9022:	f9 81       	ldd	r31, Y+1	; 0x01
    9024:	cc 5b       	subi	r28, 0xBC	; 188
    9026:	d0 40       	sbci	r29, 0x00	; 0
    9028:	25 90       	lpm	r2, Z+
    902a:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    902c:	c2 54       	subi	r28, 0x42	; 66
    902e:	df 4f       	sbci	r29, 0xFF	; 255
    9030:	e8 81       	ld	r30, Y
    9032:	f9 81       	ldd	r31, Y+1	; 0x01
    9034:	ce 5b       	subi	r28, 0xBE	; 190
    9036:	d0 40       	sbci	r29, 0x00	; 0
    9038:	25 91       	lpm	r18, Z+
    903a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    903c:	cc 53       	subi	r28, 0x3C	; 60
    903e:	df 4f       	sbci	r29, 0xFF	; 255
    9040:	e8 81       	ld	r30, Y
    9042:	f9 81       	ldd	r31, Y+1	; 0x01
    9044:	c4 5c       	subi	r28, 0xC4	; 196
    9046:	d0 40       	sbci	r29, 0x00	; 0
    9048:	94 91       	lpm	r25, Z
    904a:	99 23       	and	r25, r25
    904c:	09 f4       	brne	.+2      	; 0x9050 <draw_menu(bool)+0x1798>
    904e:	69 c0       	rjmp	.+210    	; 0x9122 <draw_menu(bool)+0x186a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9050:	c6 54       	subi	r28, 0x46	; 70
    9052:	df 4f       	sbci	r29, 0xFF	; 255
    9054:	48 81       	ld	r20, Y
    9056:	59 81       	ldd	r21, Y+1	; 0x01
    9058:	ca 5b       	subi	r28, 0xBA	; 186
    905a:	d0 40       	sbci	r29, 0x00	; 0
    905c:	42 0f       	add	r20, r18
    905e:	53 1f       	adc	r21, r19
    9060:	ca 54       	subi	r28, 0x4A	; 74
    9062:	df 4f       	sbci	r29, 0xFF	; 255
    9064:	59 83       	std	Y+1, r21	; 0x01
    9066:	48 83       	st	Y, r20
    9068:	c6 5b       	subi	r28, 0xB6	; 182
    906a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    906c:	cc 53       	subi	r28, 0x3C	; 60
    906e:	df 4f       	sbci	r29, 0xFF	; 255
    9070:	e8 81       	ld	r30, Y
    9072:	f9 81       	ldd	r31, Y+1	; 0x01
    9074:	c4 5c       	subi	r28, 0xC4	; 196
    9076:	d0 40       	sbci	r29, 0x00	; 0
    9078:	94 91       	lpm	r25, Z
    907a:	91 30       	cpi	r25, 0x01	; 1
    907c:	09 f4       	brne	.+2      	; 0x9080 <draw_menu(bool)+0x17c8>
    907e:	74 c0       	rjmp	.+232    	; 0x9168 <draw_menu(bool)+0x18b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_button_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9080:	c8 54       	subi	r28, 0x48	; 72
    9082:	df 4f       	sbci	r29, 0xFF	; 255
    9084:	28 81       	ld	r18, Y
    9086:	39 81       	ldd	r19, Y+1	; 0x01
    9088:	c8 5b       	subi	r28, 0xB8	; 184
    908a:	d0 40       	sbci	r29, 0x00	; 0
    908c:	22 0e       	add	r2, r18
    908e:	33 1e       	adc	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1375
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    9090:	9e 01       	movw	r18, r28
    9092:	2f 57       	subi	r18, 0x7F	; 127
    9094:	3f 4f       	sbci	r19, 0xFF	; 255
    9096:	ae 01       	movw	r20, r28
    9098:	4f 5f       	subi	r20, 0xFF	; 255
    909a:	5f 4f       	sbci	r21, 0xFF	; 255
    909c:	cd 54       	subi	r28, 0x4D	; 77
    909e:	df 4f       	sbci	r29, 0xFF	; 255
    90a0:	68 81       	ld	r22, Y
    90a2:	c3 5b       	subi	r28, 0xB3	; 179
    90a4:	d0 40       	sbci	r29, 0x00	; 0
    90a6:	ca 52       	subi	r28, 0x2A	; 42
    90a8:	df 4f       	sbci	r29, 0xFF	; 255
    90aa:	e8 81       	ld	r30, Y
    90ac:	f9 81       	ldd	r31, Y+1	; 0x01
    90ae:	c6 5d       	subi	r28, 0xD6	; 214
    90b0:	d0 40       	sbci	r29, 0x00	; 0
    90b2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1376
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    90b4:	ca 53       	subi	r28, 0x3A	; 58
    90b6:	df 4f       	sbci	r29, 0xFF	; 255
    90b8:	e8 81       	ld	r30, Y
    90ba:	f9 81       	ldd	r31, Y+1	; 0x01
    90bc:	c6 5c       	subi	r28, 0xC6	; 198
    90be:	d0 40       	sbci	r29, 0x00	; 0
    90c0:	e4 90       	lpm	r14, Z
    90c2:	04 91       	lpm	r16, Z
    90c4:	c0 53       	subi	r28, 0x30	; 48
    90c6:	df 4f       	sbci	r29, 0xFF	; 255
    90c8:	e8 81       	ld	r30, Y
    90ca:	f9 81       	ldd	r31, Y+1	; 0x01
    90cc:	c0 5d       	subi	r28, 0xD0	; 208
    90ce:	d0 40       	sbci	r29, 0x00	; 0
    90d0:	25 91       	lpm	r18, Z+
    90d2:	34 91       	lpm	r19, Z
    90d4:	ce 52       	subi	r28, 0x2E	; 46
    90d6:	df 4f       	sbci	r29, 0xFF	; 255
    90d8:	e8 81       	ld	r30, Y
    90da:	f9 81       	ldd	r31, Y+1	; 0x01
    90dc:	c2 5d       	subi	r28, 0xD2	; 210
    90de:	d0 40       	sbci	r29, 0x00	; 0
    90e0:	45 91       	lpm	r20, Z+
    90e2:	54 91       	lpm	r21, Z
    90e4:	88 24       	eor	r8, r8
    90e6:	83 94       	inc	r8
    90e8:	ce 01       	movw	r24, r28
    90ea:	8f 57       	subi	r24, 0x7F	; 127
    90ec:	9f 4f       	sbci	r25, 0xFF	; 255
    90ee:	5c 01       	movw	r10, r24
    90f0:	fe 01       	movw	r30, r28
    90f2:	31 96       	adiw	r30, 0x01	; 1
    90f4:	6f 01       	movw	r12, r30
    90f6:	ca 54       	subi	r28, 0x4A	; 74
    90f8:	df 4f       	sbci	r29, 0xFF	; 255
    90fa:	68 81       	ld	r22, Y
    90fc:	79 81       	ldd	r23, Y+1	; 0x01
    90fe:	c6 5b       	subi	r28, 0xB6	; 182
    9100:	d0 40       	sbci	r29, 0x00	; 0
    9102:	c1 01       	movw	r24, r2
    9104:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1377
        loop_t++;
    9108:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
        loop_i++;
    910a:	ce 54       	subi	r28, 0x4E	; 78
    910c:	df 4f       	sbci	r29, 0xFF	; 255
    910e:	88 81       	ld	r24, Y
    9110:	c2 5b       	subi	r28, 0xB2	; 178
    9112:	d0 40       	sbci	r29, 0x00	; 0
    9114:	8f 5f       	subi	r24, 0xFF	; 255
    9116:	ce 54       	subi	r28, 0x4E	; 78
    9118:	df 4f       	sbci	r29, 0xFF	; 255
    911a:	88 83       	st	Y, r24
    911c:	c2 5b       	subi	r28, 0xB2	; 178
    911e:	d0 40       	sbci	r29, 0x00	; 0
    9120:	70 cf       	rjmp	.-288    	; 0x9002 <draw_menu(bool)+0x174a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9122:	c2 54       	subi	r28, 0x42	; 66
    9124:	df 4f       	sbci	r29, 0xFF	; 255
    9126:	e8 81       	ld	r30, Y
    9128:	f9 81       	ldd	r31, Y+1	; 0x01
    912a:	ce 5b       	subi	r28, 0xBE	; 190
    912c:	d0 40       	sbci	r29, 0x00	; 0
    912e:	25 91       	lpm	r18, Z+
    9130:	34 91       	lpm	r19, Z
    9132:	c7 53       	subi	r28, 0x37	; 55
    9134:	df 4f       	sbci	r29, 0xFF	; 255
    9136:	e8 81       	ld	r30, Y
    9138:	f9 81       	ldd	r31, Y+1	; 0x01
    913a:	c9 5c       	subi	r28, 0xC9	; 201
    913c:	d0 40       	sbci	r29, 0x00	; 0
    913e:	94 91       	lpm	r25, Z
    9140:	c6 54       	subi	r28, 0x46	; 70
    9142:	df 4f       	sbci	r29, 0xFF	; 255
    9144:	48 81       	ld	r20, Y
    9146:	59 81       	ldd	r21, Y+1	; 0x01
    9148:	ca 5b       	subi	r28, 0xBA	; 186
    914a:	d0 40       	sbci	r29, 0x00	; 0
    914c:	24 0f       	add	r18, r20
    914e:	35 1f       	adc	r19, r21
    9150:	f9 01       	movw	r30, r18
    9152:	91 9f       	mul	r25, r17
    9154:	e0 0d       	add	r30, r0
    9156:	f1 1d       	adc	r31, r1
    9158:	11 24       	eor	r1, r1
    915a:	ca 54       	subi	r28, 0x4A	; 74
    915c:	df 4f       	sbci	r29, 0xFF	; 255
    915e:	f9 83       	std	Y+1, r31	; 0x01
    9160:	e8 83       	st	Y, r30
    9162:	c6 5b       	subi	r28, 0xB6	; 182
    9164:	d0 40       	sbci	r29, 0x00	; 0
    9166:	82 cf       	rjmp	.-252    	; 0x906c <draw_menu(bool)+0x17b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1374
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9168:	c4 54       	subi	r28, 0x44	; 68
    916a:	df 4f       	sbci	r29, 0xFF	; 255
    916c:	e8 81       	ld	r30, Y
    916e:	f9 81       	ldd	r31, Y+1	; 0x01
    9170:	cc 5b       	subi	r28, 0xBC	; 188
    9172:	d0 40       	sbci	r29, 0x00	; 0
    9174:	25 90       	lpm	r2, Z+
    9176:	34 90       	lpm	r3, Z
    9178:	c5 53       	subi	r28, 0x35	; 53
    917a:	df 4f       	sbci	r29, 0xFF	; 255
    917c:	e8 81       	ld	r30, Y
    917e:	f9 81       	ldd	r31, Y+1	; 0x01
    9180:	cb 5c       	subi	r28, 0xCB	; 203
    9182:	d0 40       	sbci	r29, 0x00	; 0
    9184:	94 91       	lpm	r25, Z
    9186:	c8 54       	subi	r28, 0x48	; 72
    9188:	df 4f       	sbci	r29, 0xFF	; 255
    918a:	28 81       	ld	r18, Y
    918c:	39 81       	ldd	r19, Y+1	; 0x01
    918e:	c8 5b       	subi	r28, 0xB8	; 184
    9190:	d0 40       	sbci	r29, 0x00	; 0
    9192:	22 0e       	add	r2, r18
    9194:	33 1e       	adc	r3, r19
    9196:	91 9f       	mul	r25, r17
    9198:	20 0c       	add	r2, r0
    919a:	31 1c       	adc	r3, r1
    919c:	11 24       	eor	r1, r1
    919e:	78 cf       	rjmp	.-272    	; 0x9090 <draw_menu(bool)+0x17d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1381
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    91a0:	c0 54       	subi	r28, 0x40	; 64
    91a2:	df 4f       	sbci	r29, 0xFF	; 255
    91a4:	28 81       	ld	r18, Y
    91a6:	39 81       	ldd	r19, Y+1	; 0x01
    91a8:	c0 5c       	subi	r28, 0xC0	; 192
    91aa:	d0 40       	sbci	r29, 0x00	; 0
    91ac:	23 2b       	or	r18, r19
    91ae:	09 f4       	brne	.+2      	; 0x91b2 <draw_menu(bool)+0x18fa>
    91b0:	14 c1       	rjmp	.+552    	; 0x93da <draw_menu(bool)+0x1b22>
    91b2:	ce 53       	subi	r28, 0x3E	; 62
    91b4:	df 4f       	sbci	r29, 0xFF	; 255
    91b6:	48 81       	ld	r20, Y
    91b8:	59 81       	ldd	r21, Y+1	; 0x01
    91ba:	c2 5c       	subi	r28, 0xC2	; 194
    91bc:	d0 40       	sbci	r29, 0x00	; 0
    91be:	45 2b       	or	r20, r21
    91c0:	09 f4       	brne	.+2      	; 0x91c4 <draw_menu(bool)+0x190c>
    91c2:	0b c1       	rjmp	.+534    	; 0x93da <draw_menu(bool)+0x1b22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1383
    {
      loop_i = 0;
    91c4:	ce 54       	subi	r28, 0x4E	; 78
    91c6:	df 4f       	sbci	r29, 0xFF	; 255
    91c8:	18 82       	st	Y, r1
    91ca:	c2 5b       	subi	r28, 0xB2	; 178
    91cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1385
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    91ce:	f2 01       	movw	r30, r4
    91d0:	e8 55       	subi	r30, 0x58	; 88
    91d2:	fe 4f       	sbci	r31, 0xFE	; 254
    91d4:	e6 0d       	add	r30, r6
    91d6:	f7 1d       	adc	r31, r7
    91d8:	25 91       	lpm	r18, Z+
    91da:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1386
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
    91dc:	c2 01       	movw	r24, r4
    91de:	8d 55       	subi	r24, 0x5D	; 93
    91e0:	9e 4f       	sbci	r25, 0xFE	; 254
    91e2:	f3 01       	movw	r30, r6
    91e4:	e8 0f       	add	r30, r24
    91e6:	f9 1f       	adc	r31, r25
    91e8:	ca 54       	subi	r28, 0x4A	; 74
    91ea:	df 4f       	sbci	r29, 0xFF	; 255
    91ec:	f9 83       	std	Y+1, r31	; 0x01
    91ee:	e8 83       	st	Y, r30
    91f0:	c6 5b       	subi	r28, 0xB6	; 182
    91f2:	d0 40       	sbci	r29, 0x00	; 0
    91f4:	85 91       	lpm	r24, Z+
    91f6:	94 91       	lpm	r25, Z
    91f8:	cd 54       	subi	r28, 0x4D	; 77
    91fa:	df 4f       	sbci	r29, 0xFF	; 255
    91fc:	68 81       	ld	r22, Y
    91fe:	c3 5b       	subi	r28, 0xB3	; 179
    9200:	d0 40       	sbci	r29, 0x00	; 0
    9202:	70 e0       	ldi	r23, 0x00	; 0
    9204:	40 e0       	ldi	r20, 0x00	; 0
    9206:	f9 01       	movw	r30, r18
    9208:	19 95       	eicall
    920a:	cf 54       	subi	r28, 0x4F	; 79
    920c:	df 4f       	sbci	r29, 0xFF	; 255
    920e:	88 83       	st	Y, r24
    9210:	c1 5b       	subi	r28, 0xB1	; 177
    9212:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1387
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9214:	f2 01       	movw	r30, r4
    9216:	e0 56       	subi	r30, 0x60	; 96
    9218:	fe 4f       	sbci	r31, 0xFE	; 254
    921a:	e6 0d       	add	r30, r6
    921c:	f7 1d       	adc	r31, r7
    921e:	24 91       	lpm	r18, Z
    9220:	f2 01       	movw	r30, r4
    9222:	ef 55       	subi	r30, 0x5F	; 95
    9224:	fe 4f       	sbci	r31, 0xFE	; 254
    9226:	e6 0d       	add	r30, r6
    9228:	f7 1d       	adc	r31, r7
    922a:	84 91       	lpm	r24, Z
    922c:	f2 01       	movw	r30, r4
    922e:	ee 55       	subi	r30, 0x5E	; 94
    9230:	fe 4f       	sbci	r31, 0xFE	; 254
    9232:	e6 0d       	add	r30, r6
    9234:	f7 1d       	adc	r31, r7
    9236:	44 91       	lpm	r20, Z
    9238:	28 9f       	mul	r18, r24
    923a:	20 2d       	mov	r18, r0
    923c:	11 24       	eor	r1, r1
    923e:	be 01       	movw	r22, r28
    9240:	6f 54       	subi	r22, 0x4F	; 79
    9242:	7f 4f       	sbci	r23, 0xFF	; 255
    9244:	ce 01       	movw	r24, r28
    9246:	8e 54       	subi	r24, 0x4E	; 78
    9248:	9f 4f       	sbci	r25, 0xFF	; 255
    924a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    924e:	ce 54       	subi	r28, 0x4E	; 78
    9250:	df 4f       	sbci	r29, 0xFF	; 255
    9252:	b8 80       	ld	r11, Y
    9254:	c2 5b       	subi	r28, 0xB2	; 178
    9256:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1388
      while (loop_i < loop_cnt)
    9258:	cf 54       	subi	r28, 0x4F	; 79
    925a:	df 4f       	sbci	r29, 0xFF	; 255
    925c:	88 80       	ld	r8, Y
    925e:	c1 5b       	subi	r28, 0xB1	; 177
    9260:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1390
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9262:	c2 01       	movw	r24, r4
    9264:	8c 56       	subi	r24, 0x6C	; 108
    9266:	9e 4f       	sbci	r25, 0xFE	; 254
    9268:	93 01       	movw	r18, r6
    926a:	28 0f       	add	r18, r24
    926c:	39 1f       	adc	r19, r25
    926e:	c4 54       	subi	r28, 0x44	; 68
    9270:	df 4f       	sbci	r29, 0xFF	; 255
    9272:	39 83       	std	Y+1, r19	; 0x01
    9274:	28 83       	st	Y, r18
    9276:	cc 5b       	subi	r28, 0xBC	; 188
    9278:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    927a:	12 01       	movw	r2, r4
    927c:	3a e6       	ldi	r19, 0x6A	; 106
    927e:	23 1a       	sub	r2, r19
    9280:	3e ef       	ldi	r19, 0xFE	; 254
    9282:	33 0a       	sbc	r3, r19
    9284:	26 0c       	add	r2, r6
    9286:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9288:	0b 96       	adiw	r24, 0x0b	; 11
    928a:	a3 01       	movw	r20, r6
    928c:	48 0f       	add	r20, r24
    928e:	59 1f       	adc	r21, r25
    9290:	c2 54       	subi	r28, 0x42	; 66
    9292:	df 4f       	sbci	r29, 0xFF	; 255
    9294:	59 83       	std	Y+1, r21	; 0x01
    9296:	48 83       	st	Y, r20
    9298:	ce 5b       	subi	r28, 0xBE	; 190
    929a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    929c:	01 97       	sbiw	r24, 0x01	; 1
    929e:	f3 01       	movw	r30, r6
    92a0:	e8 0f       	add	r30, r24
    92a2:	f9 1f       	adc	r31, r25
    92a4:	cc 53       	subi	r28, 0x3C	; 60
    92a6:	df 4f       	sbci	r29, 0xFF	; 255
    92a8:	f9 83       	std	Y+1, r31	; 0x01
    92aa:	e8 83       	st	Y, r30
    92ac:	c4 5c       	subi	r28, 0xC4	; 196
    92ae:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    92b0:	01 97       	sbiw	r24, 0x01	; 1
    92b2:	93 01       	movw	r18, r6
    92b4:	28 0f       	add	r18, r24
    92b6:	39 1f       	adc	r19, r25
    92b8:	ca 53       	subi	r28, 0x3A	; 58
    92ba:	df 4f       	sbci	r29, 0xFF	; 255
    92bc:	39 83       	std	Y+1, r19	; 0x01
    92be:	28 83       	st	Y, r18
    92c0:	c6 5c       	subi	r28, 0xC6	; 198
    92c2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1396
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    92c4:	03 97       	sbiw	r24, 0x03	; 3
    92c6:	a3 01       	movw	r20, r6
    92c8:	48 0f       	add	r20, r24
    92ca:	59 1f       	adc	r21, r25
    92cc:	c7 53       	subi	r28, 0x37	; 55
    92ce:	df 4f       	sbci	r29, 0xFF	; 255
    92d0:	59 83       	std	Y+1, r21	; 0x01
    92d2:	48 83       	st	Y, r20
    92d4:	c9 5c       	subi	r28, 0xC9	; 201
    92d6:	d0 40       	sbci	r29, 0x00	; 0
    92d8:	02 97       	sbiw	r24, 0x02	; 2
    92da:	f3 01       	movw	r30, r6
    92dc:	e8 0f       	add	r30, r24
    92de:	f9 1f       	adc	r31, r25
    92e0:	c5 53       	subi	r28, 0x35	; 53
    92e2:	df 4f       	sbci	r29, 0xFF	; 255
    92e4:	f9 83       	std	Y+1, r31	; 0x01
    92e6:	e8 83       	st	Y, r30
    92e8:	cb 5c       	subi	r28, 0xCB	; 203
    92ea:	d0 40       	sbci	r29, 0x00	; 0
    92ec:	d1 2c       	mov	r13, r1
    92ee:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1388
      loop_i = 0;
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    92f0:	b8 14       	cp	r11, r8
    92f2:	08 f0       	brcs	.+2      	; 0x92f6 <draw_menu(bool)+0x1a3e>
    92f4:	72 c0       	rjmp	.+228    	; 0x93da <draw_menu(bool)+0x1b22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1390
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    92f6:	c4 54       	subi	r28, 0x44	; 68
    92f8:	df 4f       	sbci	r29, 0xFF	; 255
    92fa:	e8 81       	ld	r30, Y
    92fc:	f9 81       	ldd	r31, Y+1	; 0x01
    92fe:	cc 5b       	subi	r28, 0xBC	; 188
    9300:	d0 40       	sbci	r29, 0x00	; 0
    9302:	85 91       	lpm	r24, Z+
    9304:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9306:	f1 01       	movw	r30, r2
    9308:	65 91       	lpm	r22, Z+
    930a:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    930c:	c2 54       	subi	r28, 0x42	; 66
    930e:	df 4f       	sbci	r29, 0xFF	; 255
    9310:	e8 81       	ld	r30, Y
    9312:	f9 81       	ldd	r31, Y+1	; 0x01
    9314:	ce 5b       	subi	r28, 0xBE	; 190
    9316:	d0 40       	sbci	r29, 0x00	; 0
    9318:	24 91       	lpm	r18, Z
    931a:	22 23       	and	r18, r18
    931c:	09 f4       	brne	.+2      	; 0x9320 <draw_menu(bool)+0x1a68>
    931e:	61 c0       	rjmp	.+194    	; 0x93e2 <draw_menu(bool)+0x1b2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9320:	c6 54       	subi	r28, 0x46	; 70
    9322:	df 4f       	sbci	r29, 0xFF	; 255
    9324:	28 81       	ld	r18, Y
    9326:	39 81       	ldd	r19, Y+1	; 0x01
    9328:	ca 5b       	subi	r28, 0xBA	; 186
    932a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    932c:	62 0f       	add	r22, r18
    932e:	73 1f       	adc	r23, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1394
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    9330:	c2 54       	subi	r28, 0x42	; 66
    9332:	df 4f       	sbci	r29, 0xFF	; 255
    9334:	e8 81       	ld	r30, Y
    9336:	f9 81       	ldd	r31, Y+1	; 0x01
    9338:	ce 5b       	subi	r28, 0xBE	; 190
    933a:	d0 40       	sbci	r29, 0x00	; 0
    933c:	24 91       	lpm	r18, Z
    933e:	21 30       	cpi	r18, 0x01	; 1
    9340:	09 f4       	brne	.+2      	; 0x9344 <draw_menu(bool)+0x1a8c>
    9342:	67 c0       	rjmp	.+206    	; 0x9412 <draw_menu(bool)+0x1b5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1390
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_button_1->args), menu_args1, loop_i);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_button_1->slider_args), pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9344:	c8 54       	subi	r28, 0x48	; 72
    9346:	df 4f       	sbci	r29, 0xFF	; 255
    9348:	28 81       	ld	r18, Y
    934a:	39 81       	ldd	r19, Y+1	; 0x01
    934c:	c8 5b       	subi	r28, 0xB8	; 184
    934e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9350:	82 0f       	add	r24, r18
    9352:	93 1f       	adc	r25, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1396
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    9354:	c7 53       	subi	r28, 0x37	; 55
    9356:	df 4f       	sbci	r29, 0xFF	; 255
    9358:	e8 81       	ld	r30, Y
    935a:	f9 81       	ldd	r31, Y+1	; 0x01
    935c:	c9 5c       	subi	r28, 0xC9	; 201
    935e:	d0 40       	sbci	r29, 0x00	; 0
    9360:	25 91       	lpm	r18, Z+
    9362:	34 91       	lpm	r19, Z
    9364:	c5 53       	subi	r28, 0x35	; 53
    9366:	df 4f       	sbci	r29, 0xFF	; 255
    9368:	e8 81       	ld	r30, Y
    936a:	f9 81       	ldd	r31, Y+1	; 0x01
    936c:	cb 5c       	subi	r28, 0xCB	; 203
    936e:	d0 40       	sbci	r29, 0x00	; 0
    9370:	45 91       	lpm	r20, Z+
    9372:	54 91       	lpm	r21, Z
    9374:	ce 53       	subi	r28, 0x3E	; 62
    9376:	df 4f       	sbci	r29, 0xFF	; 255
    9378:	e8 80       	ld	r14, Y
    937a:	f9 80       	ldd	r15, Y+1	; 0x01
    937c:	c2 5c       	subi	r28, 0xC2	; 194
    937e:	d0 40       	sbci	r29, 0x00	; 0
    9380:	c0 54       	subi	r28, 0x40	; 64
    9382:	df 4f       	sbci	r29, 0xFF	; 255
    9384:	08 81       	ld	r16, Y
    9386:	19 81       	ldd	r17, Y+1	; 0x01
    9388:	c0 5c       	subi	r28, 0xC0	; 192
    938a:	d0 40       	sbci	r29, 0x00	; 0
    938c:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9390:	18 2f       	mov	r17, r24
    9392:	3f ef       	ldi	r19, 0xFF	; 255
    9394:	c3 1a       	sub	r12, r19
    9396:	d3 0a       	sbc	r13, r19
    9398:	81 e0       	ldi	r24, 0x01	; 1
    939a:	8b 0d       	add	r24, r11
    939c:	11 23       	and	r17, r17
    939e:	f9 f0       	breq	.+62     	; 0x93de <draw_menu(bool)+0x1b26>
    93a0:	ce 54       	subi	r28, 0x4E	; 78
    93a2:	df 4f       	sbci	r29, 0xFF	; 255
    93a4:	b8 82       	st	Y, r11
    93a6:	c2 5b       	subi	r28, 0xB2	; 178
    93a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    93aa:	f2 01       	movw	r30, r4
    93ac:	ea 55       	subi	r30, 0x5A	; 90
    93ae:	fe 4f       	sbci	r31, 0xFE	; 254
    93b0:	e6 0d       	add	r30, r6
    93b2:	f7 1d       	adc	r31, r7
    93b4:	25 91       	lpm	r18, Z+
    93b6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1399
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), loop_i);
    93b8:	ca 54       	subi	r28, 0x4A	; 74
    93ba:	df 4f       	sbci	r29, 0xFF	; 255
    93bc:	e8 81       	ld	r30, Y
    93be:	f9 81       	ldd	r31, Y+1	; 0x01
    93c0:	c6 5b       	subi	r28, 0xB6	; 182
    93c2:	d0 40       	sbci	r29, 0x00	; 0
    93c4:	84 91       	lpm	r24, Z
    93c6:	6b 2d       	mov	r22, r11
    93c8:	70 e0       	ldi	r23, 0x00	; 0
    93ca:	90 e0       	ldi	r25, 0x00	; 0
    93cc:	f9 01       	movw	r30, r18
    93ce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1400
          ret = true;
    93d0:	c8 53       	subi	r28, 0x38	; 56
    93d2:	df 4f       	sbci	r29, 0xFF	; 255
    93d4:	18 83       	st	Y, r17
    93d6:	c8 5c       	subi	r28, 0xC8	; 200
    93d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    93da:	93 94       	inc	r9
    93dc:	56 cd       	rjmp	.-1364   	; 0x8e8a <draw_menu(bool)+0x15d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1396
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    93de:	b8 2e       	mov	r11, r24
    93e0:	87 cf       	rjmp	.-242    	; 0x92f0 <draw_menu(bool)+0x1a38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1393
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    93e2:	f1 01       	movw	r30, r2
    93e4:	65 91       	lpm	r22, Z+
    93e6:	74 91       	lpm	r23, Z
    93e8:	cc 53       	subi	r28, 0x3C	; 60
    93ea:	df 4f       	sbci	r29, 0xFF	; 255
    93ec:	e8 81       	ld	r30, Y
    93ee:	f9 81       	ldd	r31, Y+1	; 0x01
    93f0:	c4 5c       	subi	r28, 0xC4	; 196
    93f2:	d0 40       	sbci	r29, 0x00	; 0
    93f4:	44 91       	lpm	r20, Z
    93f6:	c6 54       	subi	r28, 0x46	; 70
    93f8:	df 4f       	sbci	r29, 0xFF	; 255
    93fa:	28 81       	ld	r18, Y
    93fc:	39 81       	ldd	r19, Y+1	; 0x01
    93fe:	ca 5b       	subi	r28, 0xBA	; 186
    9400:	d0 40       	sbci	r29, 0x00	; 0
    9402:	62 0f       	add	r22, r18
    9404:	73 1f       	adc	r23, r19
    9406:	4c 9d       	mul	r20, r12
    9408:	90 01       	movw	r18, r0
    940a:	4d 9d       	mul	r20, r13
    940c:	30 0d       	add	r19, r0
    940e:	11 24       	eor	r1, r1
    9410:	8d cf       	rjmp	.-230    	; 0x932c <draw_menu(bool)+0x1a74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9412:	c4 54       	subi	r28, 0x44	; 68
    9414:	df 4f       	sbci	r29, 0xFF	; 255
    9416:	e8 81       	ld	r30, Y
    9418:	f9 81       	ldd	r31, Y+1	; 0x01
    941a:	cc 5b       	subi	r28, 0xBC	; 188
    941c:	d0 40       	sbci	r29, 0x00	; 0
    941e:	85 91       	lpm	r24, Z+
    9420:	94 91       	lpm	r25, Z
    9422:	ca 53       	subi	r28, 0x3A	; 58
    9424:	df 4f       	sbci	r29, 0xFF	; 255
    9426:	e8 81       	ld	r30, Y
    9428:	f9 81       	ldd	r31, Y+1	; 0x01
    942a:	c6 5c       	subi	r28, 0xC6	; 198
    942c:	d0 40       	sbci	r29, 0x00	; 0
    942e:	44 91       	lpm	r20, Z
    9430:	c8 54       	subi	r28, 0x48	; 72
    9432:	df 4f       	sbci	r29, 0xFF	; 255
    9434:	28 81       	ld	r18, Y
    9436:	39 81       	ldd	r19, Y+1	; 0x01
    9438:	c8 5b       	subi	r28, 0xB8	; 184
    943a:	d0 40       	sbci	r29, 0x00	; 0
    943c:	82 0f       	add	r24, r18
    943e:	93 1f       	adc	r25, r19
    9440:	4c 9d       	mul	r20, r12
    9442:	90 01       	movw	r18, r0
    9444:	4d 9d       	mul	r20, r13
    9446:	30 0d       	add	r19, r0
    9448:	11 24       	eor	r1, r1
    944a:	82 cf       	rjmp	.-252    	; 0x9350 <draw_menu(bool)+0x1a98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    944c:	c8 53       	subi	r28, 0x38	; 56
    944e:	df 4f       	sbci	r29, 0xFF	; 255
    9450:	f8 81       	ld	r31, Y
    9452:	c8 5c       	subi	r28, 0xC8	; 200
    9454:	d0 40       	sbci	r29, 0x00	; 0
    9456:	f1 11       	cpse	r31, r1
    9458:	20 c4       	rjmp	.+2112   	; 0x9c9a <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    945a:	ca 54       	subi	r28, 0x4A	; 74
    945c:	df 4f       	sbci	r29, 0xFF	; 255
    945e:	18 82       	st	Y, r1
    9460:	c6 5b       	subi	r28, 0xB6	; 182
    9462:	d0 40       	sbci	r29, 0x00	; 0
    9464:	93 01       	movw	r18, r6
    9466:	24 5b       	subi	r18, 0xB4	; 180
    9468:	3d 4f       	sbci	r19, 0xFD	; 253
    946a:	ce 51       	subi	r28, 0x1E	; 30
    946c:	df 4f       	sbci	r29, 0xFF	; 255
    946e:	39 83       	std	Y+1, r19	; 0x01
    9470:	28 83       	st	Y, r18
    9472:	c2 5e       	subi	r28, 0xE2	; 226
    9474:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1447
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    9476:	ae 01       	movw	r20, r28
    9478:	4f 57       	subi	r20, 0x7F	; 127
    947a:	5f 4f       	sbci	r21, 0xFF	; 255
    947c:	cc 54       	subi	r28, 0x4C	; 76
    947e:	df 4f       	sbci	r29, 0xFF	; 255
    9480:	59 83       	std	Y+1, r21	; 0x01
    9482:	48 83       	st	Y, r20
    9484:	c4 5b       	subi	r28, 0xB4	; 180
    9486:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1469
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9488:	c2 53       	subi	r28, 0x32	; 50
    948a:	df 4f       	sbci	r29, 0xFF	; 255
    948c:	88 81       	ld	r24, Y
    948e:	99 81       	ldd	r25, Y+1	; 0x01
    9490:	ce 5c       	subi	r28, 0xCE	; 206
    9492:	d0 40       	sbci	r29, 0x00	; 0
    9494:	0b 96       	adiw	r24, 0x0b	; 11
    9496:	c2 53       	subi	r28, 0x32	; 50
    9498:	df 4f       	sbci	r29, 0xFF	; 255
    949a:	99 83       	std	Y+1, r25	; 0x01
    949c:	88 83       	st	Y, r24
    949e:	ce 5c       	subi	r28, 0xCE	; 206
    94a0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    94a2:	ce 51       	subi	r28, 0x1E	; 30
    94a4:	df 4f       	sbci	r29, 0xFF	; 255
    94a6:	e8 81       	ld	r30, Y
    94a8:	f9 81       	ldd	r31, Y+1	; 0x01
    94aa:	c2 5e       	subi	r28, 0xE2	; 226
    94ac:	d0 40       	sbci	r29, 0x00	; 0
    94ae:	84 91       	lpm	r24, Z
    94b0:	ca 54       	subi	r28, 0x4A	; 74
    94b2:	df 4f       	sbci	r29, 0xFF	; 255
    94b4:	f8 81       	ld	r31, Y
    94b6:	c6 5b       	subi	r28, 0xB6	; 182
    94b8:	d0 40       	sbci	r29, 0x00	; 0
    94ba:	f8 17       	cp	r31, r24
    94bc:	08 f0       	brcs	.+2      	; 0x94c0 <draw_menu(bool)+0x1c08>
    94be:	f3 c3       	rjmp	.+2022   	; 0x9ca6 <draw_menu(bool)+0x23ee>
    94c0:	2e e1       	ldi	r18, 0x1E	; 30
    94c2:	f2 9f       	mul	r31, r18
    94c4:	20 01       	movw	r4, r0
    94c6:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    94c8:	f2 01       	movw	r30, r4
    94ca:	ec 5b       	subi	r30, 0xBC	; 188
    94cc:	fd 4f       	sbci	r31, 0xFD	; 253
    94ce:	e6 0d       	add	r30, r6
    94d0:	f7 1d       	adc	r31, r7
    94d2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1413
    if (enable_redraw(rdr, redraw_class) == true)
    94d4:	c3 53       	subi	r28, 0x33	; 51
    94d6:	df 4f       	sbci	r29, 0xFF	; 255
    94d8:	68 81       	ld	r22, Y
    94da:	cd 5c       	subi	r28, 0xCD	; 205
    94dc:	d0 40       	sbci	r29, 0x00	; 0
    94de:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <enable_redraw(unsigned char, unsigned char)>
    94e2:	88 23       	and	r24, r24
    94e4:	09 f4       	brne	.+2      	; 0x94e8 <draw_menu(bool)+0x1c30>
    94e6:	3f c2       	rjmp	.+1150   	; 0x9966 <draw_menu(bool)+0x20ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
    {
      loop_i = 0;
    94e8:	ce 54       	subi	r28, 0x4E	; 78
    94ea:	df 4f       	sbci	r29, 0xFF	; 255
    94ec:	18 82       	st	Y, r1
    94ee:	c2 5b       	subi	r28, 0xB2	; 178
    94f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    94f2:	f2 01       	movw	r30, r4
    94f4:	e0 5c       	subi	r30, 0xC0	; 192
    94f6:	fd 4f       	sbci	r31, 0xFD	; 253
    94f8:	e6 0d       	add	r30, r6
    94fa:	f7 1d       	adc	r31, r7
    94fc:	25 91       	lpm	r18, Z+
    94fe:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1419
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
    9500:	c2 01       	movw	r24, r4
    9502:	85 5c       	subi	r24, 0xC5	; 197
    9504:	9d 4f       	sbci	r25, 0xFD	; 253
    9506:	a3 01       	movw	r20, r6
    9508:	48 0f       	add	r20, r24
    950a:	59 1f       	adc	r21, r25
    950c:	c7 53       	subi	r28, 0x37	; 55
    950e:	df 4f       	sbci	r29, 0xFF	; 255
    9510:	59 83       	std	Y+1, r21	; 0x01
    9512:	48 83       	st	Y, r20
    9514:	c9 5c       	subi	r28, 0xC9	; 201
    9516:	d0 40       	sbci	r29, 0x00	; 0
    9518:	fa 01       	movw	r30, r20
    951a:	85 91       	lpm	r24, Z+
    951c:	94 91       	lpm	r25, Z
    951e:	cd 54       	subi	r28, 0x4D	; 77
    9520:	df 4f       	sbci	r29, 0xFF	; 255
    9522:	68 81       	ld	r22, Y
    9524:	c3 5b       	subi	r28, 0xB3	; 179
    9526:	d0 40       	sbci	r29, 0x00	; 0
    9528:	70 e0       	ldi	r23, 0x00	; 0
    952a:	40 e0       	ldi	r20, 0x00	; 0
    952c:	f9 01       	movw	r30, r18
    952e:	19 95       	eicall
    9530:	cf 54       	subi	r28, 0x4F	; 79
    9532:	df 4f       	sbci	r29, 0xFF	; 255
    9534:	88 83       	st	Y, r24
    9536:	c1 5b       	subi	r28, 0xB1	; 177
    9538:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1420
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
    953a:	f2 01       	movw	r30, r4
    953c:	e4 5c       	subi	r30, 0xC4	; 196
    953e:	fd 4f       	sbci	r31, 0xFD	; 253
    9540:	e6 0d       	add	r30, r6
    9542:	f7 1d       	adc	r31, r7
    9544:	25 91       	lpm	r18, Z+
    9546:	34 91       	lpm	r19, Z
    9548:	cc 51       	subi	r28, 0x1C	; 28
    954a:	df 4f       	sbci	r29, 0xFF	; 255
    954c:	39 83       	std	Y+1, r19	; 0x01
    954e:	28 83       	st	Y, r18
    9550:	c4 5e       	subi	r28, 0xE4	; 228
    9552:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1421
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    9554:	c2 01       	movw	r24, r4
    9556:	88 5c       	subi	r24, 0xC8	; 200
    9558:	9d 4f       	sbci	r25, 0xFD	; 253
    955a:	a3 01       	movw	r20, r6
    955c:	48 0f       	add	r20, r24
    955e:	59 1f       	adc	r21, r25
    9560:	c5 53       	subi	r28, 0x35	; 53
    9562:	df 4f       	sbci	r29, 0xFF	; 255
    9564:	59 83       	std	Y+1, r21	; 0x01
    9566:	48 83       	st	Y, r20
    9568:	cb 5c       	subi	r28, 0xCB	; 203
    956a:	d0 40       	sbci	r29, 0x00	; 0
    956c:	fa 01       	movw	r30, r20
    956e:	84 91       	lpm	r24, Z
    9570:	f2 01       	movw	r30, r4
    9572:	e7 5c       	subi	r30, 0xC7	; 199
    9574:	fd 4f       	sbci	r31, 0xFD	; 253
    9576:	e6 0d       	add	r30, r6
    9578:	f7 1d       	adc	r31, r7
    957a:	24 91       	lpm	r18, Z
    957c:	f2 01       	movw	r30, r4
    957e:	e6 5c       	subi	r30, 0xC6	; 198
    9580:	fd 4f       	sbci	r31, 0xFD	; 253
    9582:	e6 0d       	add	r30, r6
    9584:	f7 1d       	adc	r31, r7
    9586:	44 91       	lpm	r20, Z
    9588:	82 9f       	mul	r24, r18
    958a:	20 2d       	mov	r18, r0
    958c:	11 24       	eor	r1, r1
    958e:	be 01       	movw	r22, r28
    9590:	6f 54       	subi	r22, 0x4F	; 79
    9592:	7f 4f       	sbci	r23, 0xFF	; 255
    9594:	ce 01       	movw	r24, r28
    9596:	8e 54       	subi	r24, 0x4E	; 78
    9598:	9f 4f       	sbci	r25, 0xFF	; 255
    959a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    959e:	c2 01       	movw	r24, r4
    95a0:	89 5d       	subi	r24, 0xD9	; 217
    95a2:	9d 4f       	sbci	r25, 0xFD	; 253
    95a4:	93 01       	movw	r18, r6
    95a6:	28 0f       	add	r18, r24
    95a8:	39 1f       	adc	r19, r25
    95aa:	c2 54       	subi	r28, 0x42	; 66
    95ac:	df 4f       	sbci	r29, 0xFF	; 255
    95ae:	39 83       	std	Y+1, r19	; 0x01
    95b0:	28 83       	st	Y, r18
    95b2:	ce 5b       	subi	r28, 0xBE	; 190
    95b4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    95b6:	02 96       	adiw	r24, 0x02	; 2
    95b8:	a3 01       	movw	r20, r6
    95ba:	48 0f       	add	r20, r24
    95bc:	59 1f       	adc	r21, r25
    95be:	cc 53       	subi	r28, 0x3C	; 60
    95c0:	df 4f       	sbci	r29, 0xFF	; 255
    95c2:	59 83       	std	Y+1, r21	; 0x01
    95c4:	48 83       	st	Y, r20
    95c6:	c4 5c       	subi	r28, 0xC4	; 196
    95c8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1426
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    95ca:	0e 96       	adiw	r24, 0x0e	; 14
    95cc:	f3 01       	movw	r30, r6
    95ce:	e8 0f       	add	r30, r24
    95d0:	f9 1f       	adc	r31, r25
    95d2:	ca 53       	subi	r28, 0x3A	; 58
    95d4:	df 4f       	sbci	r29, 0xFF	; 255
    95d6:	f9 83       	std	Y+1, r31	; 0x01
    95d8:	e8 83       	st	Y, r30
    95da:	c6 5c       	subi	r28, 0xC6	; 198
    95dc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1428
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    95de:	01 97       	sbiw	r24, 0x01	; 1
    95e0:	93 01       	movw	r18, r6
    95e2:	28 0f       	add	r18, r24
    95e4:	39 1f       	adc	r19, r25
    95e6:	c0 53       	subi	r28, 0x30	; 48
    95e8:	df 4f       	sbci	r29, 0xFF	; 255
    95ea:	39 83       	std	Y+1, r19	; 0x01
    95ec:	28 83       	st	Y, r18
    95ee:	c0 5d       	subi	r28, 0xD0	; 208
    95f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1433
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    95f2:	01 97       	sbiw	r24, 0x01	; 1
    95f4:	a3 01       	movw	r20, r6
    95f6:	48 0f       	add	r20, r24
    95f8:	59 1f       	adc	r21, r25
    95fa:	ce 52       	subi	r28, 0x2E	; 46
    95fc:	df 4f       	sbci	r29, 0xFF	; 255
    95fe:	59 83       	std	Y+1, r21	; 0x01
    9600:	48 83       	st	Y, r20
    9602:	c2 5d       	subi	r28, 0xD2	; 210
    9604:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1448
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    9606:	0d 96       	adiw	r24, 0x0d	; 13
    9608:	f3 01       	movw	r30, r6
    960a:	e8 0f       	add	r30, r24
    960c:	f9 1f       	adc	r31, r25
    960e:	cc 52       	subi	r28, 0x2C	; 44
    9610:	df 4f       	sbci	r29, 0xFF	; 255
    9612:	f9 83       	std	Y+1, r31	; 0x01
    9614:	e8 83       	st	Y, r30
    9616:	c4 5d       	subi	r28, 0xD4	; 212
    9618:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1453
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    961a:	0f 97       	sbiw	r24, 0x0f	; 15
    961c:	93 01       	movw	r18, r6
    961e:	28 0f       	add	r18, r24
    9620:	39 1f       	adc	r19, r25
    9622:	ca 52       	subi	r28, 0x2A	; 42
    9624:	df 4f       	sbci	r29, 0xFF	; 255
    9626:	39 83       	std	Y+1, r19	; 0x01
    9628:	28 83       	st	Y, r18
    962a:	c6 5d       	subi	r28, 0xD6	; 214
    962c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1452
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    962e:	02 97       	sbiw	r24, 0x02	; 2
    9630:	a3 01       	movw	r20, r6
    9632:	48 0f       	add	r20, r24
    9634:	59 1f       	adc	r21, r25
    9636:	c8 52       	subi	r28, 0x28	; 40
    9638:	df 4f       	sbci	r29, 0xFF	; 255
    963a:	59 83       	std	Y+1, r21	; 0x01
    963c:	48 83       	st	Y, r20
    963e:	c8 5d       	subi	r28, 0xD8	; 216
    9640:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1451
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    9642:	01 97       	sbiw	r24, 0x01	; 1
    9644:	f3 01       	movw	r30, r6
    9646:	e8 0f       	add	r30, r24
    9648:	f9 1f       	adc	r31, r25
    964a:	c6 52       	subi	r28, 0x26	; 38
    964c:	df 4f       	sbci	r29, 0xFF	; 255
    964e:	f9 83       	std	Y+1, r31	; 0x01
    9650:	e8 83       	st	Y, r30
    9652:	ca 5d       	subi	r28, 0xDA	; 218
    9654:	d0 40       	sbci	r29, 0x00	; 0
    9656:	01 97       	sbiw	r24, 0x01	; 1
    9658:	93 01       	movw	r18, r6
    965a:	28 0f       	add	r18, r24
    965c:	39 1f       	adc	r19, r25
    965e:	c4 52       	subi	r28, 0x24	; 36
    9660:	df 4f       	sbci	r29, 0xFF	; 255
    9662:	39 83       	std	Y+1, r19	; 0x01
    9664:	28 83       	st	Y, r18
    9666:	cc 5d       	subi	r28, 0xDC	; 220
    9668:	d0 40       	sbci	r29, 0x00	; 0
    966a:	02 97       	sbiw	r24, 0x02	; 2
    966c:	a3 01       	movw	r20, r6
    966e:	48 0f       	add	r20, r24
    9670:	59 1f       	adc	r21, r25
    9672:	c2 52       	subi	r28, 0x22	; 34
    9674:	df 4f       	sbci	r29, 0xFF	; 255
    9676:	59 83       	std	Y+1, r21	; 0x01
    9678:	48 83       	st	Y, r20
    967a:	ce 5d       	subi	r28, 0xDE	; 222
    967c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1450
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    967e:	02 97       	sbiw	r24, 0x02	; 2
    9680:	f3 01       	movw	r30, r6
    9682:	e8 0f       	add	r30, r24
    9684:	f9 1f       	adc	r31, r25
    9686:	c0 52       	subi	r28, 0x20	; 32
    9688:	df 4f       	sbci	r29, 0xFF	; 255
    968a:	f9 83       	std	Y+1, r31	; 0x01
    968c:	e8 83       	st	Y, r30
    968e:	c0 5e       	subi	r28, 0xE0	; 224
    9690:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    9692:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1416
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    9694:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1422
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    9696:	ce 54       	subi	r28, 0x4E	; 78
    9698:	df 4f       	sbci	r29, 0xFF	; 255
    969a:	88 81       	ld	r24, Y
    969c:	c2 5b       	subi	r28, 0xB2	; 178
    969e:	d0 40       	sbci	r29, 0x00	; 0
    96a0:	cf 54       	subi	r28, 0x4F	; 79
    96a2:	df 4f       	sbci	r29, 0xFF	; 255
    96a4:	98 81       	ld	r25, Y
    96a6:	c1 5b       	subi	r28, 0xB1	; 177
    96a8:	d0 40       	sbci	r29, 0x00	; 0
    96aa:	89 17       	cp	r24, r25
    96ac:	08 f0       	brcs	.+2      	; 0x96b0 <draw_menu(bool)+0x1df8>
    96ae:	5b c1       	rjmp	.+694    	; 0x9966 <draw_menu(bool)+0x20ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    96b0:	c2 54       	subi	r28, 0x42	; 66
    96b2:	df 4f       	sbci	r29, 0xFF	; 255
    96b4:	e8 81       	ld	r30, Y
    96b6:	f9 81       	ldd	r31, Y+1	; 0x01
    96b8:	ce 5b       	subi	r28, 0xBE	; 190
    96ba:	d0 40       	sbci	r29, 0x00	; 0
    96bc:	25 90       	lpm	r2, Z+
    96be:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    96c0:	cc 53       	subi	r28, 0x3C	; 60
    96c2:	df 4f       	sbci	r29, 0xFF	; 255
    96c4:	e8 81       	ld	r30, Y
    96c6:	f9 81       	ldd	r31, Y+1	; 0x01
    96c8:	c4 5c       	subi	r28, 0xC4	; 196
    96ca:	d0 40       	sbci	r29, 0x00	; 0
    96cc:	25 91       	lpm	r18, Z+
    96ce:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1426
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    96d0:	ca 53       	subi	r28, 0x3A	; 58
    96d2:	df 4f       	sbci	r29, 0xFF	; 255
    96d4:	e8 81       	ld	r30, Y
    96d6:	f9 81       	ldd	r31, Y+1	; 0x01
    96d8:	c6 5c       	subi	r28, 0xC6	; 198
    96da:	d0 40       	sbci	r29, 0x00	; 0
    96dc:	94 91       	lpm	r25, Z
    96de:	99 23       	and	r25, r25
    96e0:	09 f4       	brne	.+2      	; 0x96e4 <draw_menu(bool)+0x1e2c>
    96e2:	00 c1       	rjmp	.+512    	; 0x98e4 <draw_menu(bool)+0x202c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1425
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    96e4:	c6 54       	subi	r28, 0x46	; 70
    96e6:	df 4f       	sbci	r29, 0xFF	; 255
    96e8:	48 81       	ld	r20, Y
    96ea:	59 81       	ldd	r21, Y+1	; 0x01
    96ec:	ca 5b       	subi	r28, 0xBA	; 186
    96ee:	d0 40       	sbci	r29, 0x00	; 0
    96f0:	42 0f       	add	r20, r18
    96f2:	53 1f       	adc	r21, r19
    96f4:	c4 54       	subi	r28, 0x44	; 68
    96f6:	df 4f       	sbci	r29, 0xFF	; 255
    96f8:	59 83       	std	Y+1, r21	; 0x01
    96fa:	48 83       	st	Y, r20
    96fc:	cc 5b       	subi	r28, 0xBC	; 188
    96fe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1431
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9700:	ca 53       	subi	r28, 0x3A	; 58
    9702:	df 4f       	sbci	r29, 0xFF	; 255
    9704:	e8 81       	ld	r30, Y
    9706:	f9 81       	ldd	r31, Y+1	; 0x01
    9708:	c6 5c       	subi	r28, 0xC6	; 198
    970a:	d0 40       	sbci	r29, 0x00	; 0
    970c:	94 91       	lpm	r25, Z
    970e:	91 30       	cpi	r25, 0x01	; 1
    9710:	09 f4       	brne	.+2      	; 0x9714 <draw_menu(bool)+0x1e5c>
    9712:	0c c1       	rjmp	.+536    	; 0x992c <draw_menu(bool)+0x2074>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1424
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9714:	c8 54       	subi	r28, 0x48	; 72
    9716:	df 4f       	sbci	r29, 0xFF	; 255
    9718:	28 81       	ld	r18, Y
    971a:	39 81       	ldd	r19, Y+1	; 0x01
    971c:	c8 5b       	subi	r28, 0xB8	; 184
    971e:	d0 40       	sbci	r29, 0x00	; 0
    9720:	22 0e       	add	r2, r18
    9722:	33 1e       	adc	r3, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1436
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    9724:	ca 53       	subi	r28, 0x3A	; 58
    9726:	df 4f       	sbci	r29, 0xFF	; 255
    9728:	e8 81       	ld	r30, Y
    972a:	f9 81       	ldd	r31, Y+1	; 0x01
    972c:	c6 5c       	subi	r28, 0xC6	; 198
    972e:	d0 40       	sbci	r29, 0x00	; 0
    9730:	94 91       	lpm	r25, Z
    9732:	92 30       	cpi	r25, 0x02	; 2
    9734:	09 f0       	breq	.+2      	; 0x9738 <draw_menu(bool)+0x1e80>
    9736:	49 c0       	rjmp	.+146    	; 0x97ca <draw_menu(bool)+0x1f12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1438
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9738:	c2 54       	subi	r28, 0x42	; 66
    973a:	df 4f       	sbci	r29, 0xFF	; 255
    973c:	e8 81       	ld	r30, Y
    973e:	f9 81       	ldd	r31, Y+1	; 0x01
    9740:	ce 5b       	subi	r28, 0xBE	; 190
    9742:	d0 40       	sbci	r29, 0x00	; 0
    9744:	25 90       	lpm	r2, Z+
    9746:	34 90       	lpm	r3, Z
    9748:	ce 52       	subi	r28, 0x2E	; 46
    974a:	df 4f       	sbci	r29, 0xFF	; 255
    974c:	e8 81       	ld	r30, Y
    974e:	f9 81       	ldd	r31, Y+1	; 0x01
    9750:	c2 5d       	subi	r28, 0xD2	; 210
    9752:	d0 40       	sbci	r29, 0x00	; 0
    9754:	94 91       	lpm	r25, Z
    9756:	c8 54       	subi	r28, 0x48	; 72
    9758:	df 4f       	sbci	r29, 0xFF	; 255
    975a:	28 81       	ld	r18, Y
    975c:	39 81       	ldd	r19, Y+1	; 0x01
    975e:	c8 5b       	subi	r28, 0xB8	; 184
    9760:	d0 40       	sbci	r29, 0x00	; 0
    9762:	22 0e       	add	r2, r18
    9764:	33 1e       	adc	r3, r19
    9766:	91 9f       	mul	r25, r17
    9768:	20 0c       	add	r2, r0
    976a:	31 1c       	adc	r3, r1
    976c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1439
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    976e:	cc 53       	subi	r28, 0x3C	; 60
    9770:	df 4f       	sbci	r29, 0xFF	; 255
    9772:	e8 81       	ld	r30, Y
    9774:	f9 81       	ldd	r31, Y+1	; 0x01
    9776:	c4 5c       	subi	r28, 0xC4	; 196
    9778:	d0 40       	sbci	r29, 0x00	; 0
    977a:	25 91       	lpm	r18, Z+
    977c:	34 91       	lpm	r19, Z
    977e:	c0 53       	subi	r28, 0x30	; 48
    9780:	df 4f       	sbci	r29, 0xFF	; 255
    9782:	e8 81       	ld	r30, Y
    9784:	f9 81       	ldd	r31, Y+1	; 0x01
    9786:	c0 5d       	subi	r28, 0xD0	; 208
    9788:	d0 40       	sbci	r29, 0x00	; 0
    978a:	94 91       	lpm	r25, Z
    978c:	c6 54       	subi	r28, 0x46	; 70
    978e:	df 4f       	sbci	r29, 0xFF	; 255
    9790:	48 81       	ld	r20, Y
    9792:	59 81       	ldd	r21, Y+1	; 0x01
    9794:	ca 5b       	subi	r28, 0xBA	; 186
    9796:	d0 40       	sbci	r29, 0x00	; 0
    9798:	24 0f       	add	r18, r20
    979a:	35 1f       	adc	r19, r21
    979c:	f9 01       	movw	r30, r18
    979e:	99 9d       	mul	r25, r9
    97a0:	e0 0d       	add	r30, r0
    97a2:	f1 1d       	adc	r31, r1
    97a4:	11 24       	eor	r1, r1
    97a6:	c4 54       	subi	r28, 0x44	; 68
    97a8:	df 4f       	sbci	r29, 0xFF	; 255
    97aa:	f9 83       	std	Y+1, r31	; 0x01
    97ac:	e8 83       	st	Y, r30
    97ae:	cc 5b       	subi	r28, 0xBC	; 188
    97b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1440
          loop_t++;
    97b2:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1441
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    97b4:	c5 53       	subi	r28, 0x35	; 53
    97b6:	df 4f       	sbci	r29, 0xFF	; 255
    97b8:	e8 81       	ld	r30, Y
    97ba:	f9 81       	ldd	r31, Y+1	; 0x01
    97bc:	cb 5c       	subi	r28, 0xCB	; 203
    97be:	d0 40       	sbci	r29, 0x00	; 0
    97c0:	94 91       	lpm	r25, Z
    97c2:	19 17       	cp	r17, r25
    97c4:	10 f0       	brcs	.+4      	; 0x97ca <draw_menu(bool)+0x1f12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1444
          {
            loop_t = 0;
            loop_r++;
    97c6:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1443
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    97c8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1447
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    97ca:	9e 01       	movw	r18, r28
    97cc:	2f 57       	subi	r18, 0x7F	; 127
    97ce:	3f 4f       	sbci	r19, 0xFF	; 255
    97d0:	ae 01       	movw	r20, r28
    97d2:	4f 5f       	subi	r20, 0xFF	; 255
    97d4:	5f 4f       	sbci	r21, 0xFF	; 255
    97d6:	cd 54       	subi	r28, 0x4D	; 77
    97d8:	df 4f       	sbci	r29, 0xFF	; 255
    97da:	68 81       	ld	r22, Y
    97dc:	c3 5b       	subi	r28, 0xB3	; 179
    97de:	d0 40       	sbci	r29, 0x00	; 0
    97e0:	cc 51       	subi	r28, 0x1C	; 28
    97e2:	df 4f       	sbci	r29, 0xFF	; 255
    97e4:	e8 81       	ld	r30, Y
    97e6:	f9 81       	ldd	r31, Y+1	; 0x01
    97e8:	c4 5e       	subi	r28, 0xE4	; 228
    97ea:	d0 40       	sbci	r29, 0x00	; 0
    97ec:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1448
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    97ee:	cc 52       	subi	r28, 0x2C	; 44
    97f0:	df 4f       	sbci	r29, 0xFF	; 255
    97f2:	e8 81       	ld	r30, Y
    97f4:	f9 81       	ldd	r31, Y+1	; 0x01
    97f6:	c4 5d       	subi	r28, 0xD4	; 212
    97f8:	d0 40       	sbci	r29, 0x00	; 0
    97fa:	25 91       	lpm	r18, Z+
    97fc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1449
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    97fe:	c7 53       	subi	r28, 0x37	; 55
    9800:	df 4f       	sbci	r29, 0xFF	; 255
    9802:	e8 81       	ld	r30, Y
    9804:	f9 81       	ldd	r31, Y+1	; 0x01
    9806:	c9 5c       	subi	r28, 0xC9	; 201
    9808:	d0 40       	sbci	r29, 0x00	; 0
    980a:	84 91       	lpm	r24, Z
    980c:	cd 54       	subi	r28, 0x4D	; 77
    980e:	df 4f       	sbci	r29, 0xFF	; 255
    9810:	68 81       	ld	r22, Y
    9812:	c3 5b       	subi	r28, 0xB3	; 179
    9814:	d0 40       	sbci	r29, 0x00	; 0
    9816:	70 e0       	ldi	r23, 0x00	; 0
    9818:	ce 54       	subi	r28, 0x4E	; 78
    981a:	df 4f       	sbci	r29, 0xFF	; 255
    981c:	48 81       	ld	r20, Y
    981e:	c2 5b       	subi	r28, 0xB2	; 178
    9820:	d0 40       	sbci	r29, 0x00	; 0
    9822:	90 e0       	ldi	r25, 0x00	; 0
    9824:	f9 01       	movw	r30, r18
    9826:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1453
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    9828:	ca 52       	subi	r28, 0x2A	; 42
    982a:	df 4f       	sbci	r29, 0xFF	; 255
    982c:	e8 81       	ld	r30, Y
    982e:	f9 81       	ldd	r31, Y+1	; 0x01
    9830:	c6 5d       	subi	r28, 0xD6	; 214
    9832:	d0 40       	sbci	r29, 0x00	; 0
    9834:	a5 90       	lpm	r10, Z+
    9836:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1452
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    9838:	c8 52       	subi	r28, 0x28	; 40
    983a:	df 4f       	sbci	r29, 0xFF	; 255
    983c:	e8 81       	ld	r30, Y
    983e:	f9 81       	ldd	r31, Y+1	; 0x01
    9840:	c8 5d       	subi	r28, 0xD8	; 216
    9842:	d0 40       	sbci	r29, 0x00	; 0
    9844:	c5 90       	lpm	r12, Z+
    9846:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1451
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    9848:	c6 52       	subi	r28, 0x26	; 38
    984a:	df 4f       	sbci	r29, 0xFF	; 255
    984c:	e8 81       	ld	r30, Y
    984e:	f9 81       	ldd	r31, Y+1	; 0x01
    9850:	ca 5d       	subi	r28, 0xDA	; 218
    9852:	d0 40       	sbci	r29, 0x00	; 0
    9854:	e4 90       	lpm	r14, Z
    9856:	c4 52       	subi	r28, 0x24	; 36
    9858:	df 4f       	sbci	r29, 0xFF	; 255
    985a:	e8 81       	ld	r30, Y
    985c:	f9 81       	ldd	r31, Y+1	; 0x01
    985e:	cc 5d       	subi	r28, 0xDC	; 220
    9860:	d0 40       	sbci	r29, 0x00	; 0
    9862:	04 91       	lpm	r16, Z
    9864:	c2 52       	subi	r28, 0x22	; 34
    9866:	df 4f       	sbci	r29, 0xFF	; 255
    9868:	e8 81       	ld	r30, Y
    986a:	f9 81       	ldd	r31, Y+1	; 0x01
    986c:	ce 5d       	subi	r28, 0xDE	; 222
    986e:	d0 40       	sbci	r29, 0x00	; 0
    9870:	25 91       	lpm	r18, Z+
    9872:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1450
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9874:	c0 52       	subi	r28, 0x20	; 32
    9876:	df 4f       	sbci	r29, 0xFF	; 255
    9878:	e8 81       	ld	r30, Y
    987a:	f9 81       	ldd	r31, Y+1	; 0x01
    987c:	c0 5e       	subi	r28, 0xE0	; 224
    987e:	d0 40       	sbci	r29, 0x00	; 0
    9880:	45 91       	lpm	r20, Z+
    9882:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1449
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9884:	88 24       	eor	r8, r8
    9886:	83 94       	inc	r8
    9888:	81 11       	cpse	r24, r1
    988a:	01 c0       	rjmp	.+2      	; 0x988e <draw_menu(bool)+0x1fd6>
    988c:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1450
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    988e:	cb 54       	subi	r28, 0x4B	; 75
    9890:	df 4f       	sbci	r29, 0xFF	; 255
    9892:	f8 81       	ld	r31, Y
    9894:	c5 5b       	subi	r28, 0xB5	; 181
    9896:	d0 40       	sbci	r29, 0x00	; 0
    9898:	ff 93       	push	r31
    989a:	cc 54       	subi	r28, 0x4C	; 76
    989c:	df 4f       	sbci	r29, 0xFF	; 255
    989e:	88 81       	ld	r24, Y
    98a0:	c4 5b       	subi	r28, 0xB4	; 180
    98a2:	d0 40       	sbci	r29, 0x00	; 0
    98a4:	8f 93       	push	r24
    98a6:	e1 e0       	ldi	r30, 0x01	; 1
    98a8:	f0 e0       	ldi	r31, 0x00	; 0
    98aa:	ec 0f       	add	r30, r28
    98ac:	fd 1f       	adc	r31, r29
    98ae:	ff 93       	push	r31
    98b0:	ef 93       	push	r30
    98b2:	c4 54       	subi	r28, 0x44	; 68
    98b4:	df 4f       	sbci	r29, 0xFF	; 255
    98b6:	68 81       	ld	r22, Y
    98b8:	79 81       	ldd	r23, Y+1	; 0x01
    98ba:	cc 5b       	subi	r28, 0xBC	; 188
    98bc:	d0 40       	sbci	r29, 0x00	; 0
    98be:	c1 01       	movw	r24, r2
    98c0:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1454
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    98c4:	ce 54       	subi	r28, 0x4E	; 78
    98c6:	df 4f       	sbci	r29, 0xFF	; 255
    98c8:	88 81       	ld	r24, Y
    98ca:	c2 5b       	subi	r28, 0xB2	; 178
    98cc:	d0 40       	sbci	r29, 0x00	; 0
    98ce:	8f 5f       	subi	r24, 0xFF	; 255
    98d0:	ce 54       	subi	r28, 0x4E	; 78
    98d2:	df 4f       	sbci	r29, 0xFF	; 255
    98d4:	88 83       	st	Y, r24
    98d6:	c2 5b       	subi	r28, 0xB2	; 178
    98d8:	d0 40       	sbci	r29, 0x00	; 0
    98da:	0f 90       	pop	r0
    98dc:	0f 90       	pop	r0
    98de:	0f 90       	pop	r0
    98e0:	0f 90       	pop	r0
    98e2:	d9 ce       	rjmp	.-590    	; 0x9696 <draw_menu(bool)+0x1dde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1428
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    98e4:	cc 53       	subi	r28, 0x3C	; 60
    98e6:	df 4f       	sbci	r29, 0xFF	; 255
    98e8:	e8 81       	ld	r30, Y
    98ea:	f9 81       	ldd	r31, Y+1	; 0x01
    98ec:	c4 5c       	subi	r28, 0xC4	; 196
    98ee:	d0 40       	sbci	r29, 0x00	; 0
    98f0:	25 91       	lpm	r18, Z+
    98f2:	34 91       	lpm	r19, Z
    98f4:	c0 53       	subi	r28, 0x30	; 48
    98f6:	df 4f       	sbci	r29, 0xFF	; 255
    98f8:	e8 81       	ld	r30, Y
    98fa:	f9 81       	ldd	r31, Y+1	; 0x01
    98fc:	c0 5d       	subi	r28, 0xD0	; 208
    98fe:	d0 40       	sbci	r29, 0x00	; 0
    9900:	94 91       	lpm	r25, Z
    9902:	c6 54       	subi	r28, 0x46	; 70
    9904:	df 4f       	sbci	r29, 0xFF	; 255
    9906:	48 81       	ld	r20, Y
    9908:	59 81       	ldd	r21, Y+1	; 0x01
    990a:	ca 5b       	subi	r28, 0xBA	; 186
    990c:	d0 40       	sbci	r29, 0x00	; 0
    990e:	24 0f       	add	r18, r20
    9910:	35 1f       	adc	r19, r21
    9912:	f9 01       	movw	r30, r18
    9914:	91 9f       	mul	r25, r17
    9916:	e0 0d       	add	r30, r0
    9918:	f1 1d       	adc	r31, r1
    991a:	11 24       	eor	r1, r1
    991c:	c4 54       	subi	r28, 0x44	; 68
    991e:	df 4f       	sbci	r29, 0xFF	; 255
    9920:	f9 83       	std	Y+1, r31	; 0x01
    9922:	e8 83       	st	Y, r30
    9924:	cc 5b       	subi	r28, 0xBC	; 188
    9926:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1429
          loop_t++;
    9928:	1f 5f       	subi	r17, 0xFF	; 255
    992a:	ea ce       	rjmp	.-556    	; 0x9700 <draw_menu(bool)+0x1e48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1433
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    992c:	c2 54       	subi	r28, 0x42	; 66
    992e:	df 4f       	sbci	r29, 0xFF	; 255
    9930:	e8 81       	ld	r30, Y
    9932:	f9 81       	ldd	r31, Y+1	; 0x01
    9934:	ce 5b       	subi	r28, 0xBE	; 190
    9936:	d0 40       	sbci	r29, 0x00	; 0
    9938:	25 90       	lpm	r2, Z+
    993a:	34 90       	lpm	r3, Z
    993c:	ce 52       	subi	r28, 0x2E	; 46
    993e:	df 4f       	sbci	r29, 0xFF	; 255
    9940:	e8 81       	ld	r30, Y
    9942:	f9 81       	ldd	r31, Y+1	; 0x01
    9944:	c2 5d       	subi	r28, 0xD2	; 210
    9946:	d0 40       	sbci	r29, 0x00	; 0
    9948:	94 91       	lpm	r25, Z
    994a:	c8 54       	subi	r28, 0x48	; 72
    994c:	df 4f       	sbci	r29, 0xFF	; 255
    994e:	28 81       	ld	r18, Y
    9950:	39 81       	ldd	r19, Y+1	; 0x01
    9952:	c8 5b       	subi	r28, 0xB8	; 184
    9954:	d0 40       	sbci	r29, 0x00	; 0
    9956:	22 0e       	add	r2, r18
    9958:	33 1e       	adc	r3, r19
    995a:	91 9f       	mul	r25, r17
    995c:	20 0c       	add	r2, r0
    995e:	31 1c       	adc	r3, r1
    9960:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1434
          loop_t++;
    9962:	1f 5f       	subi	r17, 0xFF	; 255
    9964:	df ce       	rjmp	.-578    	; 0x9724 <draw_menu(bool)+0x1e6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1457
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    9966:	c0 54       	subi	r28, 0x40	; 64
    9968:	df 4f       	sbci	r29, 0xFF	; 255
    996a:	28 81       	ld	r18, Y
    996c:	39 81       	ldd	r19, Y+1	; 0x01
    996e:	c0 5c       	subi	r28, 0xC0	; 192
    9970:	d0 40       	sbci	r29, 0x00	; 0
    9972:	23 2b       	or	r18, r19
    9974:	09 f4       	brne	.+2      	; 0x9978 <draw_menu(bool)+0x20c0>
    9976:	53 c1       	rjmp	.+678    	; 0x9c1e <draw_menu(bool)+0x2366>
    9978:	ce 53       	subi	r28, 0x3E	; 62
    997a:	df 4f       	sbci	r29, 0xFF	; 255
    997c:	48 81       	ld	r20, Y
    997e:	59 81       	ldd	r21, Y+1	; 0x01
    9980:	c2 5c       	subi	r28, 0xC2	; 194
    9982:	d0 40       	sbci	r29, 0x00	; 0
    9984:	45 2b       	or	r20, r21
    9986:	09 f4       	brne	.+2      	; 0x998a <draw_menu(bool)+0x20d2>
    9988:	4a c1       	rjmp	.+660    	; 0x9c1e <draw_menu(bool)+0x2366>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1459
    {
      loop_i = 0;
    998a:	ce 54       	subi	r28, 0x4E	; 78
    998c:	df 4f       	sbci	r29, 0xFF	; 255
    998e:	18 82       	st	Y, r1
    9990:	c2 5b       	subi	r28, 0xB2	; 178
    9992:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1462
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    9994:	f2 01       	movw	r30, r4
    9996:	e0 5c       	subi	r30, 0xC0	; 192
    9998:	fd 4f       	sbci	r31, 0xFD	; 253
    999a:	e6 0d       	add	r30, r6
    999c:	f7 1d       	adc	r31, r7
    999e:	25 91       	lpm	r18, Z+
    99a0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1463
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
    99a2:	c2 01       	movw	r24, r4
    99a4:	85 5c       	subi	r24, 0xC5	; 197
    99a6:	9d 4f       	sbci	r25, 0xFD	; 253
    99a8:	f3 01       	movw	r30, r6
    99aa:	e8 0f       	add	r30, r24
    99ac:	f9 1f       	adc	r31, r25
    99ae:	c4 54       	subi	r28, 0x44	; 68
    99b0:	df 4f       	sbci	r29, 0xFF	; 255
    99b2:	f9 83       	std	Y+1, r31	; 0x01
    99b4:	e8 83       	st	Y, r30
    99b6:	cc 5b       	subi	r28, 0xBC	; 188
    99b8:	d0 40       	sbci	r29, 0x00	; 0
    99ba:	85 91       	lpm	r24, Z+
    99bc:	94 91       	lpm	r25, Z
    99be:	cd 54       	subi	r28, 0x4D	; 77
    99c0:	df 4f       	sbci	r29, 0xFF	; 255
    99c2:	68 81       	ld	r22, Y
    99c4:	c3 5b       	subi	r28, 0xB3	; 179
    99c6:	d0 40       	sbci	r29, 0x00	; 0
    99c8:	70 e0       	ldi	r23, 0x00	; 0
    99ca:	40 e0       	ldi	r20, 0x00	; 0
    99cc:	f9 01       	movw	r30, r18
    99ce:	19 95       	eicall
    99d0:	cf 54       	subi	r28, 0x4F	; 79
    99d2:	df 4f       	sbci	r29, 0xFF	; 255
    99d4:	88 83       	st	Y, r24
    99d6:	c1 5b       	subi	r28, 0xB1	; 177
    99d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1464
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    99da:	c2 01       	movw	r24, r4
    99dc:	88 5c       	subi	r24, 0xC8	; 200
    99de:	9d 4f       	sbci	r25, 0xFD	; 253
    99e0:	93 01       	movw	r18, r6
    99e2:	28 0f       	add	r18, r24
    99e4:	39 1f       	adc	r19, r25
    99e6:	c2 54       	subi	r28, 0x42	; 66
    99e8:	df 4f       	sbci	r29, 0xFF	; 255
    99ea:	39 83       	std	Y+1, r19	; 0x01
    99ec:	28 83       	st	Y, r18
    99ee:	ce 5b       	subi	r28, 0xBE	; 190
    99f0:	d0 40       	sbci	r29, 0x00	; 0
    99f2:	f9 01       	movw	r30, r18
    99f4:	84 91       	lpm	r24, Z
    99f6:	f2 01       	movw	r30, r4
    99f8:	e7 5c       	subi	r30, 0xC7	; 199
    99fa:	fd 4f       	sbci	r31, 0xFD	; 253
    99fc:	e6 0d       	add	r30, r6
    99fe:	f7 1d       	adc	r31, r7
    9a00:	24 91       	lpm	r18, Z
    9a02:	f2 01       	movw	r30, r4
    9a04:	e6 5c       	subi	r30, 0xC6	; 198
    9a06:	fd 4f       	sbci	r31, 0xFD	; 253
    9a08:	e6 0d       	add	r30, r6
    9a0a:	f7 1d       	adc	r31, r7
    9a0c:	44 91       	lpm	r20, Z
    9a0e:	82 9f       	mul	r24, r18
    9a10:	20 2d       	mov	r18, r0
    9a12:	11 24       	eor	r1, r1
    9a14:	be 01       	movw	r22, r28
    9a16:	6f 54       	subi	r22, 0x4F	; 79
    9a18:	7f 4f       	sbci	r23, 0xFF	; 255
    9a1a:	ce 01       	movw	r24, r28
    9a1c:	8e 54       	subi	r24, 0x4E	; 78
    9a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a20:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    9a24:	ce 54       	subi	r28, 0x4E	; 78
    9a26:	df 4f       	sbci	r29, 0xFF	; 255
    9a28:	c8 80       	ld	r12, Y
    9a2a:	c2 5b       	subi	r28, 0xB2	; 178
    9a2c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1465
      while (loop_i < loop_cnt)
    9a2e:	cf 54       	subi	r28, 0x4F	; 79
    9a30:	df 4f       	sbci	r29, 0xFF	; 255
    9a32:	a8 80       	ld	r10, Y
    9a34:	c1 5b       	subi	r28, 0xB1	; 177
    9a36:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1467
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9a38:	12 01       	movw	r2, r4
    9a3a:	f9 ed       	ldi	r31, 0xD9	; 217
    9a3c:	2f 1a       	sub	r2, r31
    9a3e:	fd ef       	ldi	r31, 0xFD	; 253
    9a40:	3f 0a       	sbc	r3, r31
    9a42:	26 0c       	add	r2, r6
    9a44:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    9a46:	42 01       	movw	r8, r4
    9a48:	27 ed       	ldi	r18, 0xD7	; 215
    9a4a:	82 1a       	sub	r8, r18
    9a4c:	2d ef       	ldi	r18, 0xFD	; 253
    9a4e:	92 0a       	sbc	r9, r18
    9a50:	86 0c       	add	r8, r6
    9a52:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1471
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9a54:	c2 01       	movw	r24, r4
    9a56:	8a 5c       	subi	r24, 0xCA	; 202
    9a58:	9d 4f       	sbci	r25, 0xFD	; 253
    9a5a:	a3 01       	movw	r20, r6
    9a5c:	48 0f       	add	r20, r24
    9a5e:	59 1f       	adc	r21, r25
    9a60:	cc 53       	subi	r28, 0x3C	; 60
    9a62:	df 4f       	sbci	r29, 0xFF	; 255
    9a64:	59 83       	std	Y+1, r21	; 0x01
    9a66:	48 83       	st	Y, r20
    9a68:	c4 5c       	subi	r28, 0xC4	; 196
    9a6a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1474
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9a6c:	01 96       	adiw	r24, 0x01	; 1
    9a6e:	f3 01       	movw	r30, r6
    9a70:	e8 0f       	add	r30, r24
    9a72:	f9 1f       	adc	r31, r25
    9a74:	ca 53       	subi	r28, 0x3A	; 58
    9a76:	df 4f       	sbci	r29, 0xFF	; 255
    9a78:	f9 83       	std	Y+1, r31	; 0x01
    9a7a:	e8 83       	st	Y, r30
    9a7c:	c6 5c       	subi	r28, 0xC6	; 198
    9a7e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1476
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9a80:	02 97       	sbiw	r24, 0x02	; 2
    9a82:	93 01       	movw	r18, r6
    9a84:	28 0f       	add	r18, r24
    9a86:	39 1f       	adc	r19, r25
    9a88:	c7 53       	subi	r28, 0x37	; 55
    9a8a:	df 4f       	sbci	r29, 0xFF	; 255
    9a8c:	39 83       	std	Y+1, r19	; 0x01
    9a8e:	28 83       	st	Y, r18
    9a90:	c9 5c       	subi	r28, 0xC9	; 201
    9a92:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1490
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9a94:	08 97       	sbiw	r24, 0x08	; 8
    9a96:	a3 01       	movw	r20, r6
    9a98:	48 0f       	add	r20, r24
    9a9a:	59 1f       	adc	r21, r25
    9a9c:	c5 53       	subi	r28, 0x35	; 53
    9a9e:	df 4f       	sbci	r29, 0xFF	; 255
    9aa0:	59 83       	std	Y+1, r21	; 0x01
    9aa2:	48 83       	st	Y, r20
    9aa4:	cb 5c       	subi	r28, 0xCB	; 203
    9aa6:	d0 40       	sbci	r29, 0x00	; 0
    9aa8:	02 97       	sbiw	r24, 0x02	; 2
    9aaa:	f3 01       	movw	r30, r6
    9aac:	e8 0f       	add	r30, r24
    9aae:	f9 1f       	adc	r31, r25
    9ab0:	c0 53       	subi	r28, 0x30	; 48
    9ab2:	df 4f       	sbci	r29, 0xFF	; 255
    9ab4:	f9 83       	std	Y+1, r31	; 0x01
    9ab6:	e8 83       	st	Y, r30
    9ab8:	c0 5d       	subi	r28, 0xD0	; 208
    9aba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1461
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    9abc:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1460
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    9abe:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1465
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    9ac0:	ca 14       	cp	r12, r10
    9ac2:	08 f0       	brcs	.+2      	; 0x9ac6 <draw_menu(bool)+0x220e>
    9ac4:	ac c0       	rjmp	.+344    	; 0x9c1e <draw_menu(bool)+0x2366>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1467
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9ac6:	f1 01       	movw	r30, r2
    9ac8:	85 91       	lpm	r24, Z+
    9aca:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    9acc:	f4 01       	movw	r30, r8
    9ace:	65 91       	lpm	r22, Z+
    9ad0:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1469
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    9ad2:	c2 53       	subi	r28, 0x32	; 50
    9ad4:	df 4f       	sbci	r29, 0xFF	; 255
    9ad6:	e8 81       	ld	r30, Y
    9ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    9ada:	ce 5c       	subi	r28, 0xCE	; 206
    9adc:	d0 40       	sbci	r29, 0x00	; 0
    9ade:	24 91       	lpm	r18, Z
    9ae0:	22 23       	and	r18, r18
    9ae2:	09 f4       	brne	.+2      	; 0x9ae6 <draw_menu(bool)+0x222e>
    9ae4:	aa c0       	rjmp	.+340    	; 0x9c3a <draw_menu(bool)+0x2382>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1468
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    9ae6:	c6 54       	subi	r28, 0x46	; 70
    9ae8:	df 4f       	sbci	r29, 0xFF	; 255
    9aea:	28 81       	ld	r18, Y
    9aec:	39 81       	ldd	r19, Y+1	; 0x01
    9aee:	ca 5b       	subi	r28, 0xBA	; 186
    9af0:	d0 40       	sbci	r29, 0x00	; 0
    9af2:	62 0f       	add	r22, r18
    9af4:	73 1f       	adc	r23, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1474
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9af6:	ca 53       	subi	r28, 0x3A	; 58
    9af8:	df 4f       	sbci	r29, 0xFF	; 255
    9afa:	e8 81       	ld	r30, Y
    9afc:	f9 81       	ldd	r31, Y+1	; 0x01
    9afe:	c6 5c       	subi	r28, 0xC6	; 198
    9b00:	d0 40       	sbci	r29, 0x00	; 0
    9b02:	24 91       	lpm	r18, Z
    9b04:	21 30       	cpi	r18, 0x01	; 1
    9b06:	09 f4       	brne	.+2      	; 0x9b0a <draw_menu(bool)+0x2252>
    9b08:	b0 c0       	rjmp	.+352    	; 0x9c6a <draw_menu(bool)+0x23b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1467
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_word(&dyn_select_box_1->args), menu_args1, loop_i);
      process_display_element_slider(&loop_i, &loop_cnt, pgm_read_byte(&dyn_select_box_1->slider_args), pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9b0a:	c8 54       	subi	r28, 0x48	; 72
    9b0c:	df 4f       	sbci	r29, 0xFF	; 255
    9b0e:	28 81       	ld	r18, Y
    9b10:	39 81       	ldd	r19, Y+1	; 0x01
    9b12:	c8 5b       	subi	r28, 0xB8	; 184
    9b14:	d0 40       	sbci	r29, 0x00	; 0
    9b16:	82 0f       	add	r24, r18
    9b18:	93 1f       	adc	r25, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1479
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    9b1a:	ca 53       	subi	r28, 0x3A	; 58
    9b1c:	df 4f       	sbci	r29, 0xFF	; 255
    9b1e:	e8 81       	ld	r30, Y
    9b20:	f9 81       	ldd	r31, Y+1	; 0x01
    9b22:	c6 5c       	subi	r28, 0xC6	; 198
    9b24:	d0 40       	sbci	r29, 0x00	; 0
    9b26:	24 91       	lpm	r18, Z
    9b28:	22 30       	cpi	r18, 0x02	; 2
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <draw_menu(bool)+0x2276>
    9b2c:	38 c0       	rjmp	.+112    	; 0x9b9e <draw_menu(bool)+0x22e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1481
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9b2e:	f1 01       	movw	r30, r2
    9b30:	85 91       	lpm	r24, Z+
    9b32:	94 91       	lpm	r25, Z
    9b34:	c7 53       	subi	r28, 0x37	; 55
    9b36:	df 4f       	sbci	r29, 0xFF	; 255
    9b38:	e8 81       	ld	r30, Y
    9b3a:	f9 81       	ldd	r31, Y+1	; 0x01
    9b3c:	c9 5c       	subi	r28, 0xC9	; 201
    9b3e:	d0 40       	sbci	r29, 0x00	; 0
    9b40:	24 91       	lpm	r18, Z
    9b42:	c8 54       	subi	r28, 0x48	; 72
    9b44:	df 4f       	sbci	r29, 0xFF	; 255
    9b46:	48 81       	ld	r20, Y
    9b48:	59 81       	ldd	r21, Y+1	; 0x01
    9b4a:	c8 5b       	subi	r28, 0xB8	; 184
    9b4c:	d0 40       	sbci	r29, 0x00	; 0
    9b4e:	84 0f       	add	r24, r20
    9b50:	95 1f       	adc	r25, r21
    9b52:	2d 9d       	mul	r18, r13
    9b54:	80 0d       	add	r24, r0
    9b56:	91 1d       	adc	r25, r1
    9b58:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1482
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9b5a:	f4 01       	movw	r30, r8
    9b5c:	65 91       	lpm	r22, Z+
    9b5e:	74 91       	lpm	r23, Z
    9b60:	cc 53       	subi	r28, 0x3C	; 60
    9b62:	df 4f       	sbci	r29, 0xFF	; 255
    9b64:	e8 81       	ld	r30, Y
    9b66:	f9 81       	ldd	r31, Y+1	; 0x01
    9b68:	c4 5c       	subi	r28, 0xC4	; 196
    9b6a:	d0 40       	sbci	r29, 0x00	; 0
    9b6c:	24 91       	lpm	r18, Z
    9b6e:	c6 54       	subi	r28, 0x46	; 70
    9b70:	df 4f       	sbci	r29, 0xFF	; 255
    9b72:	48 81       	ld	r20, Y
    9b74:	59 81       	ldd	r21, Y+1	; 0x01
    9b76:	ca 5b       	subi	r28, 0xBA	; 186
    9b78:	d0 40       	sbci	r29, 0x00	; 0
    9b7a:	64 0f       	add	r22, r20
    9b7c:	75 1f       	adc	r23, r21
    9b7e:	2b 9d       	mul	r18, r11
    9b80:	60 0d       	add	r22, r0
    9b82:	71 1d       	adc	r23, r1
    9b84:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1483
          loop_t++;
    9b86:	d3 94       	inc	r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1484
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    9b88:	c2 54       	subi	r28, 0x42	; 66
    9b8a:	df 4f       	sbci	r29, 0xFF	; 255
    9b8c:	e8 81       	ld	r30, Y
    9b8e:	f9 81       	ldd	r31, Y+1	; 0x01
    9b90:	ce 5b       	subi	r28, 0xBE	; 190
    9b92:	d0 40       	sbci	r29, 0x00	; 0
    9b94:	24 91       	lpm	r18, Z
    9b96:	d2 16       	cp	r13, r18
    9b98:	10 f0       	brcs	.+4      	; 0x9b9e <draw_menu(bool)+0x22e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1487
          {
            loop_t = 0;
            loop_r++;
    9b9a:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1486
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    9b9c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1490
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9b9e:	c5 53       	subi	r28, 0x35	; 53
    9ba0:	df 4f       	sbci	r29, 0xFF	; 255
    9ba2:	e8 81       	ld	r30, Y
    9ba4:	f9 81       	ldd	r31, Y+1	; 0x01
    9ba6:	cb 5c       	subi	r28, 0xCB	; 203
    9ba8:	d0 40       	sbci	r29, 0x00	; 0
    9baa:	25 91       	lpm	r18, Z+
    9bac:	34 91       	lpm	r19, Z
    9bae:	c0 53       	subi	r28, 0x30	; 48
    9bb0:	df 4f       	sbci	r29, 0xFF	; 255
    9bb2:	e8 81       	ld	r30, Y
    9bb4:	f9 81       	ldd	r31, Y+1	; 0x01
    9bb6:	c0 5d       	subi	r28, 0xD0	; 208
    9bb8:	d0 40       	sbci	r29, 0x00	; 0
    9bba:	45 91       	lpm	r20, Z+
    9bbc:	54 91       	lpm	r21, Z
    9bbe:	ce 53       	subi	r28, 0x3E	; 62
    9bc0:	df 4f       	sbci	r29, 0xFF	; 255
    9bc2:	e8 80       	ld	r14, Y
    9bc4:	f9 80       	ldd	r15, Y+1	; 0x01
    9bc6:	c2 5c       	subi	r28, 0xC2	; 194
    9bc8:	d0 40       	sbci	r29, 0x00	; 0
    9bca:	c0 54       	subi	r28, 0x40	; 64
    9bcc:	df 4f       	sbci	r29, 0xFF	; 255
    9bce:	08 81       	ld	r16, Y
    9bd0:	19 81       	ldd	r17, Y+1	; 0x01
    9bd2:	c0 5c       	subi	r28, 0xC0	; 192
    9bd4:	d0 40       	sbci	r29, 0x00	; 0
    9bd6:	0e 94 40 24 	call	0x4880	; 0x4880 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9bda:	18 2f       	mov	r17, r24
    9bdc:	81 e0       	ldi	r24, 0x01	; 1
    9bde:	8c 0d       	add	r24, r12
    9be0:	11 23       	and	r17, r17
    9be2:	49 f1       	breq	.+82     	; 0x9c36 <draw_menu(bool)+0x237e>
    9be4:	ce 54       	subi	r28, 0x4E	; 78
    9be6:	df 4f       	sbci	r29, 0xFF	; 255
    9be8:	c8 82       	st	Y, r12
    9bea:	c2 5b       	subi	r28, 0xB2	; 178
    9bec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1492
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    9bee:	f2 01       	movw	r30, r4
    9bf0:	e2 5c       	subi	r30, 0xC2	; 194
    9bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    9bf4:	e6 0d       	add	r30, r6
    9bf6:	f7 1d       	adc	r31, r7
    9bf8:	25 91       	lpm	r18, Z+
    9bfa:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1493
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), loop_i);
    9bfc:	c4 54       	subi	r28, 0x44	; 68
    9bfe:	df 4f       	sbci	r29, 0xFF	; 255
    9c00:	e8 81       	ld	r30, Y
    9c02:	f9 81       	ldd	r31, Y+1	; 0x01
    9c04:	cc 5b       	subi	r28, 0xBC	; 188
    9c06:	d0 40       	sbci	r29, 0x00	; 0
    9c08:	84 91       	lpm	r24, Z
    9c0a:	6c 2d       	mov	r22, r12
    9c0c:	70 e0       	ldi	r23, 0x00	; 0
    9c0e:	90 e0       	ldi	r25, 0x00	; 0
    9c10:	f9 01       	movw	r30, r18
    9c12:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1494
          ret = true;
    9c14:	c8 53       	subi	r28, 0x38	; 56
    9c16:	df 4f       	sbci	r29, 0xFF	; 255
    9c18:	18 83       	st	Y, r17
    9c1a:	c8 5c       	subi	r28, 0xC8	; 200
    9c1c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    9c1e:	ca 54       	subi	r28, 0x4A	; 74
    9c20:	df 4f       	sbci	r29, 0xFF	; 255
    9c22:	f8 81       	ld	r31, Y
    9c24:	c6 5b       	subi	r28, 0xB6	; 182
    9c26:	d0 40       	sbci	r29, 0x00	; 0
    9c28:	ff 5f       	subi	r31, 0xFF	; 255
    9c2a:	ca 54       	subi	r28, 0x4A	; 74
    9c2c:	df 4f       	sbci	r29, 0xFF	; 255
    9c2e:	f8 83       	st	Y, r31
    9c30:	c6 5b       	subi	r28, 0xB6	; 182
    9c32:	d0 40       	sbci	r29, 0x00	; 0
    9c34:	36 cc       	rjmp	.-1940   	; 0x94a2 <draw_menu(bool)+0x1bea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1490
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9c36:	c8 2e       	mov	r12, r24
    9c38:	43 cf       	rjmp	.-378    	; 0x9ac0 <draw_menu(bool)+0x2208>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1471
      {
        new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9c3a:	f4 01       	movw	r30, r8
    9c3c:	65 91       	lpm	r22, Z+
    9c3e:	74 91       	lpm	r23, Z
    9c40:	cc 53       	subi	r28, 0x3C	; 60
    9c42:	df 4f       	sbci	r29, 0xFF	; 255
    9c44:	e8 81       	ld	r30, Y
    9c46:	f9 81       	ldd	r31, Y+1	; 0x01
    9c48:	c4 5c       	subi	r28, 0xC4	; 196
    9c4a:	d0 40       	sbci	r29, 0x00	; 0
    9c4c:	24 91       	lpm	r18, Z
    9c4e:	c6 54       	subi	r28, 0x46	; 70
    9c50:	df 4f       	sbci	r29, 0xFF	; 255
    9c52:	48 81       	ld	r20, Y
    9c54:	59 81       	ldd	r21, Y+1	; 0x01
    9c56:	ca 5b       	subi	r28, 0xBA	; 186
    9c58:	d0 40       	sbci	r29, 0x00	; 0
    9c5a:	64 0f       	add	r22, r20
    9c5c:	75 1f       	adc	r23, r21
    9c5e:	2d 9d       	mul	r18, r13
    9c60:	60 0d       	add	r22, r0
    9c62:	71 1d       	adc	r23, r1
    9c64:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1472
          loop_t++;
    9c66:	d3 94       	inc	r13
    9c68:	46 cf       	rjmp	.-372    	; 0x9af6 <draw_menu(bool)+0x223e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1476
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9c6a:	f1 01       	movw	r30, r2
    9c6c:	85 91       	lpm	r24, Z+
    9c6e:	94 91       	lpm	r25, Z
    9c70:	c7 53       	subi	r28, 0x37	; 55
    9c72:	df 4f       	sbci	r29, 0xFF	; 255
    9c74:	e8 81       	ld	r30, Y
    9c76:	f9 81       	ldd	r31, Y+1	; 0x01
    9c78:	c9 5c       	subi	r28, 0xC9	; 201
    9c7a:	d0 40       	sbci	r29, 0x00	; 0
    9c7c:	24 91       	lpm	r18, Z
    9c7e:	c8 54       	subi	r28, 0x48	; 72
    9c80:	df 4f       	sbci	r29, 0xFF	; 255
    9c82:	48 81       	ld	r20, Y
    9c84:	59 81       	ldd	r21, Y+1	; 0x01
    9c86:	c8 5b       	subi	r28, 0xB8	; 184
    9c88:	d0 40       	sbci	r29, 0x00	; 0
    9c8a:	84 0f       	add	r24, r20
    9c8c:	95 1f       	adc	r25, r21
    9c8e:	2d 9d       	mul	r18, r13
    9c90:	80 0d       	add	r24, r0
    9c92:	91 1d       	adc	r25, r1
    9c94:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1477
          loop_t++;
    9c96:	d3 94       	inc	r13
    9c98:	40 cf       	rjmp	.-384    	; 0x9b1a <draw_menu(bool)+0x2262>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1494
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), loop_i);
          ret = true;
    9c9a:	21 e0       	ldi	r18, 0x01	; 1
    9c9c:	c8 53       	subi	r28, 0x38	; 56
    9c9e:	df 4f       	sbci	r29, 0xFF	; 255
    9ca0:	28 83       	st	Y, r18
    9ca2:	c8 5c       	subi	r28, 0xC8	; 200
    9ca4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1505
  }


draw_menu_end:
  return ret;
}
    9ca6:	c8 53       	subi	r28, 0x38	; 56
    9ca8:	df 4f       	sbci	r29, 0xFF	; 255
    9caa:	88 81       	ld	r24, Y
    9cac:	c8 5c       	subi	r28, 0xC8	; 200
    9cae:	d0 40       	sbci	r29, 0x00	; 0
    9cb0:	cb 51       	subi	r28, 0x1B	; 27
    9cb2:	df 4f       	sbci	r29, 0xFF	; 255
    9cb4:	0f b6       	in	r0, 0x3f	; 63
    9cb6:	f8 94       	cli
    9cb8:	de bf       	out	0x3e, r29	; 62
    9cba:	0f be       	out	0x3f, r0	; 63
    9cbc:	cd bf       	out	0x3d, r28	; 61
    9cbe:	df 91       	pop	r29
    9cc0:	cf 91       	pop	r28
    9cc2:	1f 91       	pop	r17
    9cc4:	0f 91       	pop	r16
    9cc6:	ff 90       	pop	r15
    9cc8:	ef 90       	pop	r14
    9cca:	df 90       	pop	r13
    9ccc:	cf 90       	pop	r12
    9cce:	bf 90       	pop	r11
    9cd0:	af 90       	pop	r10
    9cd2:	9f 90       	pop	r9
    9cd4:	8f 90       	pop	r8
    9cd6:	7f 90       	pop	r7
    9cd8:	6f 90       	pop	r6
    9cda:	5f 90       	pop	r5
    9cdc:	4f 90       	pop	r4
    9cde:	3f 90       	pop	r3
    9ce0:	2f 90       	pop	r2
    9ce2:	08 95       	ret

00009ce4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    9ce4:	2d e4       	ldi	r18, 0x4D	; 77
    9ce6:	82 9f       	mul	r24, r18
    9ce8:	c0 01       	movw	r24, r0
    9cea:	11 24       	eor	r1, r1
    9cec:	26 e0       	ldi	r18, 0x06	; 6
    9cee:	62 9f       	mul	r22, r18
    9cf0:	80 0d       	add	r24, r0
    9cf2:	91 1d       	adc	r25, r1
    9cf4:	11 24       	eor	r1, r1
    9cf6:	64 2f       	mov	r22, r20
    9cf8:	8e 50       	subi	r24, 0x0E	; 14
    9cfa:	9e 4f       	sbci	r25, 0xFE	; 254
    9cfc:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

00009d00 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    9d00:	1f 93       	push	r17
    9d02:	cf 93       	push	r28
    9d04:	df 93       	push	r29
    9d06:	14 2f       	mov	r17, r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    9d08:	9d e4       	ldi	r25, 0x4D	; 77
    9d0a:	89 9f       	mul	r24, r25
    9d0c:	e0 01       	movw	r28, r0
    9d0e:	11 24       	eor	r1, r1
    9d10:	cf 50       	subi	r28, 0x0F	; 15
    9d12:	de 4f       	sbci	r29, 0xFE	; 254
    9d14:	86 e0       	ldi	r24, 0x06	; 6
    9d16:	68 9f       	mul	r22, r24
    9d18:	c0 0d       	add	r28, r0
    9d1a:	d1 1d       	adc	r29, r1
    9d1c:	11 24       	eor	r1, r1
    9d1e:	65 2f       	mov	r22, r21
    9d20:	ce 01       	movw	r24, r28
    9d22:	05 96       	adiw	r24, 0x05	; 5
    9d24:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    9d28:	61 2f       	mov	r22, r17
    9d2a:	ce 01       	movw	r24, r28
    9d2c:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:333
}
    9d2e:	df 91       	pop	r29
    9d30:	cf 91       	pop	r28
    9d32:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    9d34:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

00009d38 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    9d38:	cf 92       	push	r12
    9d3a:	ef 92       	push	r14
    9d3c:	0f 93       	push	r16
    9d3e:	1f 93       	push	r17
    9d40:	cf 93       	push	r28
    9d42:	df 93       	push	r29
    9d44:	c8 2f       	mov	r28, r24
    9d46:	56 2f       	mov	r21, r22
    9d48:	8e 2d       	mov	r24, r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    9d4a:	3f e0       	ldi	r19, 0x0F	; 15
    9d4c:	63 2f       	mov	r22, r19
    9d4e:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
    9d52:	83 70       	andi	r24, 0x03	; 3
    9d54:	98 e0       	ldi	r25, 0x08	; 8
    9d56:	09 9f       	mul	r16, r25
    9d58:	80 01       	movw	r16, r0
    9d5a:	11 24       	eor	r1, r1
    9d5c:	08 0f       	add	r16, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    9d5e:	8d e4       	ldi	r24, 0x4D	; 77
    9d60:	c8 9f       	mul	r28, r24
    9d62:	e0 01       	movw	r28, r0
    9d64:	11 24       	eor	r1, r1
    9d66:	cf 50       	subi	r28, 0x0F	; 15
    9d68:	de 4f       	sbci	r29, 0xFE	; 254
    9d6a:	96 e0       	ldi	r25, 0x06	; 6
    9d6c:	59 9f       	mul	r21, r25
    9d6e:	c0 0d       	add	r28, r0
    9d70:	d1 1d       	adc	r29, r1
    9d72:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    9d74:	82 2f       	mov	r24, r18
    9d76:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
    9d7a:	68 2f       	mov	r22, r24
    9d7c:	66 0f       	add	r22, r22
    9d7e:	66 70       	andi	r22, 0x06	; 6
    9d80:	88 e0       	ldi	r24, 0x08	; 8
    9d82:	48 9f       	mul	r20, r24
    9d84:	a0 01       	movw	r20, r0
    9d86:	11 24       	eor	r1, r1
    9d88:	9c 2d       	mov	r25, r12
    9d8a:	91 70       	andi	r25, 0x01	; 1
    9d8c:	c9 2e       	mov	r12, r25
    9d8e:	c4 0e       	add	r12, r20
    9d90:	6c 0d       	add	r22, r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    9d92:	ce 01       	movw	r24, r28
    9d94:	02 96       	adiw	r24, 0x02	; 2
    9d96:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    9d9a:	60 2f       	mov	r22, r16
    9d9c:	ce 01       	movw	r24, r28
    9d9e:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:318
}
    9da0:	df 91       	pop	r29
    9da2:	cf 91       	pop	r28
    9da4:	1f 91       	pop	r17
    9da6:	0f 91       	pop	r16
    9da8:	ef 90       	pop	r14
    9daa:	cf 90       	pop	r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    9dac:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

00009db0 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    9db0:	ef 92       	push	r14
    9db2:	ff 92       	push	r15
    9db4:	0f 93       	push	r16
    9db6:	1f 93       	push	r17
    9db8:	cf 93       	push	r28
    9dba:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    9dbc:	9d e4       	ldi	r25, 0x4D	; 77
    9dbe:	89 9f       	mul	r24, r25
    9dc0:	80 01       	movw	r16, r0
    9dc2:	11 24       	eor	r1, r1
    9dc4:	eb 01       	movw	r28, r22
    9dc6:	78 01       	movw	r14, r16
    9dc8:	8c ec       	ldi	r24, 0xCC	; 204
    9dca:	e8 1a       	sub	r14, r24
    9dcc:	8d ef       	ldi	r24, 0xFD	; 253
    9dce:	f8 0a       	sbc	r15, r24
    9dd0:	02 5c       	subi	r16, 0xC2	; 194
    9dd2:	1d 4f       	sbci	r17, 0xFD	; 253
    9dd4:	69 91       	ld	r22, Y+
    9dd6:	c7 01       	movw	r24, r14
    9dd8:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    9ddc:	fe 01       	movw	r30, r28
    9dde:	31 97       	sbiw	r30, 0x01	; 1
    9de0:	80 81       	ld	r24, Z
    9de2:	88 23       	and	r24, r24
    9de4:	31 f0       	breq	.+12     	; 0x9df2 <thermostat_program_set_name(unsigned char, char*)+0x42>
    9de6:	9f ef       	ldi	r25, 0xFF	; 255
    9de8:	e9 1a       	sub	r14, r25
    9dea:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    9dec:	e0 16       	cp	r14, r16
    9dee:	f1 06       	cpc	r15, r17
    9df0:	89 f7       	brne	.-30     	; 0x9dd4 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    9df2:	df 91       	pop	r29
    9df4:	cf 91       	pop	r28
    9df6:	1f 91       	pop	r17
    9df8:	0f 91       	pop	r16
    9dfa:	ff 90       	pop	r15
    9dfc:	ef 90       	pop	r14
    9dfe:	08 95       	ret

00009e00 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    9e00:	ef 92       	push	r14
    9e02:	ff 92       	push	r15
    9e04:	0f 93       	push	r16
    9e06:	1f 93       	push	r17
    9e08:	cf 93       	push	r28
    9e0a:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    9e0c:	e8 2e       	mov	r14, r24
    9e0e:	f1 2c       	mov	r15, r1
    9e10:	91 e2       	ldi	r25, 0x21	; 33
    9e12:	89 9f       	mul	r24, r25
    9e14:	e0 01       	movw	r28, r0
    9e16:	11 24       	eor	r1, r1
    9e18:	87 01       	movw	r16, r14
    9e1a:	00 0f       	add	r16, r16
    9e1c:	11 1f       	adc	r17, r17
    9e1e:	00 0f       	add	r16, r16
    9e20:	11 1f       	adc	r17, r17
    9e22:	f8 01       	movw	r30, r16
    9e24:	ed 56       	subi	r30, 0x6D	; 109
    9e26:	f6 4f       	sbci	r31, 0xF6	; 246
    9e28:	40 81       	ld	r20, Z
    9e2a:	51 81       	ldd	r21, Z+1	; 0x01
    9e2c:	62 81       	ldd	r22, Z+2	; 0x02
    9e2e:	73 81       	ldd	r23, Z+3	; 0x03
    9e30:	ce 01       	movw	r24, r28
    9e32:	80 5a       	subi	r24, 0xA0	; 160
    9e34:	9e 4f       	sbci	r25, 0xFE	; 254
    9e36:	0e 94 aa 94 	call	0x12954	; 0x12954 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    9e3a:	f8 01       	movw	r30, r16
    9e3c:	e9 55       	subi	r30, 0x59	; 89
    9e3e:	f6 4f       	sbci	r31, 0xF6	; 246
    9e40:	40 81       	ld	r20, Z
    9e42:	51 81       	ldd	r21, Z+1	; 0x01
    9e44:	62 81       	ldd	r22, Z+2	; 0x02
    9e46:	73 81       	ldd	r23, Z+3	; 0x03
    9e48:	ce 01       	movw	r24, r28
    9e4a:	8c 59       	subi	r24, 0x9C	; 156
    9e4c:	9e 4f       	sbci	r25, 0xFE	; 254
    9e4e:	0e 94 aa 94 	call	0x12954	; 0x12954 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    9e52:	f8 01       	movw	r30, r16
    9e54:	e5 54       	subi	r30, 0x45	; 69
    9e56:	f6 4f       	sbci	r31, 0xF6	; 246
    9e58:	40 81       	ld	r20, Z
    9e5a:	51 81       	ldd	r21, Z+1	; 0x01
    9e5c:	62 81       	ldd	r22, Z+2	; 0x02
    9e5e:	73 81       	ldd	r23, Z+3	; 0x03
    9e60:	ce 01       	movw	r24, r28
    9e62:	88 59       	subi	r24, 0x98	; 152
    9e64:	9e 4f       	sbci	r25, 0xFE	; 254
    9e66:	0e 94 aa 94 	call	0x12954	; 0x12954 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    9e6a:	f7 01       	movw	r30, r14
    9e6c:	e1 53       	subi	r30, 0x31	; 49
    9e6e:	f6 4f       	sbci	r31, 0xF6	; 246
    9e70:	60 81       	ld	r22, Z
    9e72:	ce 01       	movw	r24, r28
    9e74:	84 59       	subi	r24, 0x94	; 148
    9e76:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:237
}
    9e78:	df 91       	pop	r29
    9e7a:	cf 91       	pop	r28
    9e7c:	1f 91       	pop	r17
    9e7e:	0f 91       	pop	r16
    9e80:	ff 90       	pop	r15
    9e82:	ef 90       	pop	r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    9e84:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

00009e88 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    9e88:	1f 93       	push	r17
    9e8a:	cf 93       	push	r28
    9e8c:	df 93       	push	r29
    9e8e:	16 2f       	mov	r17, r22
    9e90:	67 2f       	mov	r22, r23
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    9e92:	91 e2       	ldi	r25, 0x21	; 33
    9e94:	89 9f       	mul	r24, r25
    9e96:	e0 01       	movw	r28, r0
    9e98:	11 24       	eor	r1, r1
    9e9a:	ce 01       	movw	r24, r28
    9e9c:	8a 5a       	subi	r24, 0xAA	; 170
    9e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    9ea0:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    9ea4:	61 2f       	mov	r22, r17
    9ea6:	ce 01       	movw	r24, r28
    9ea8:	89 5a       	subi	r24, 0xA9	; 169
    9eaa:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:160
}
    9eac:	df 91       	pop	r29
    9eae:	cf 91       	pop	r28
    9eb0:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    9eb2:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

00009eb6 <helper_thermostat_set_mezni(int, unsigned char)>:
_Z27helper_thermostat_set_mezniih():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1637
/*
  args1 -- menu_dialog_set_variable_now, aktualni hodnota
  args2 -- menu_dialog_set_variable_args, id ringu
*/
void helper_thermostat_set_mezni(int args1, uint8_t args2)
{
    9eb6:	9c 01       	movw	r18, r24
    9eb8:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1638
  thermostat_ring_set_mezni(args2, args1);
    9eba:	b9 01       	movw	r22, r18
    9ebc:	0c 94 44 4f 	jmp	0x9e88	; 0x9e88 <thermostat_ring_set_mezni(unsigned char, int)>

00009ec0 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    9ec0:	df 92       	push	r13
    9ec2:	ef 92       	push	r14
    9ec4:	ff 92       	push	r15
    9ec6:	0f 93       	push	r16
    9ec8:	1f 93       	push	r17
    9eca:	cf 93       	push	r28
    9ecc:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    9ece:	91 e2       	ldi	r25, 0x21	; 33
    9ed0:	89 9f       	mul	r24, r25
    9ed2:	e0 01       	movw	r28, r0
    9ed4:	11 24       	eor	r1, r1
    9ed6:	7b 01       	movw	r14, r22
    9ed8:	8e 01       	movw	r16, r28
    9eda:	04 5b       	subi	r16, 0xB4	; 180
    9edc:	1e 4f       	sbci	r17, 0xFE	; 254
    9ede:	cb 5a       	subi	r28, 0xAB	; 171
    9ee0:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    9ee2:	f7 01       	movw	r30, r14
    9ee4:	d1 90       	ld	r13, Z+
    9ee6:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    9ee8:	6d 2d       	mov	r22, r13
    9eea:	c8 01       	movw	r24, r16
    9eec:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    9ef0:	dd 20       	and	r13, r13
    9ef2:	29 f0       	breq	.+10     	; 0x9efe <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    9ef4:	0f 5f       	subi	r16, 0xFF	; 255
    9ef6:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    9ef8:	0c 17       	cp	r16, r28
    9efa:	1d 07       	cpc	r17, r29
    9efc:	91 f7       	brne	.-28     	; 0x9ee2 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    9efe:	df 91       	pop	r29
    9f00:	cf 91       	pop	r28
    9f02:	1f 91       	pop	r17
    9f04:	0f 91       	pop	r16
    9f06:	ff 90       	pop	r15
    9f08:	ef 90       	pop	r14
    9f0a:	df 90       	pop	r13
    9f0c:	08 95       	ret

00009f0e <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    9f0e:	8f 92       	push	r8
    9f10:	9f 92       	push	r9
    9f12:	af 92       	push	r10
    9f14:	bf 92       	push	r11
    9f16:	ef 92       	push	r14
    9f18:	ff 92       	push	r15
    9f1a:	0f 93       	push	r16
    9f1c:	1f 93       	push	r17
    9f1e:	cf 93       	push	r28
    9f20:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    9f22:	e8 2e       	mov	r14, r24
    9f24:	f1 2c       	mov	r15, r1
    9f26:	87 01       	movw	r16, r14
    9f28:	00 0f       	add	r16, r16
    9f2a:	11 1f       	adc	r17, r17
    9f2c:	00 0f       	add	r16, r16
    9f2e:	11 1f       	adc	r17, r17
    9f30:	f8 01       	movw	r30, r16
    9f32:	ed 56       	subi	r30, 0x6D	; 109
    9f34:	f6 4f       	sbci	r31, 0xF6	; 246
    9f36:	81 2c       	mov	r8, r1
    9f38:	91 2c       	mov	r9, r1
    9f3a:	90 e8       	ldi	r25, 0x80	; 128
    9f3c:	a9 2e       	mov	r10, r25
    9f3e:	9f e3       	ldi	r25, 0x3F	; 63
    9f40:	b9 2e       	mov	r11, r25
    9f42:	80 82       	st	Z, r8
    9f44:	91 82       	std	Z+1, r9	; 0x01
    9f46:	a2 82       	std	Z+2, r10	; 0x02
    9f48:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    9f4a:	8c 2f       	mov	r24, r28
    9f4c:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    9f50:	8c 2f       	mov	r24, r28
    9f52:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    9f56:	f8 01       	movw	r30, r16
    9f58:	e9 55       	subi	r30, 0x59	; 89
    9f5a:	f6 4f       	sbci	r31, 0xF6	; 246
    9f5c:	80 e0       	ldi	r24, 0x00	; 0
    9f5e:	90 e0       	ldi	r25, 0x00	; 0
    9f60:	a0 e0       	ldi	r26, 0x00	; 0
    9f62:	bf e3       	ldi	r27, 0x3F	; 63
    9f64:	80 83       	st	Z, r24
    9f66:	91 83       	std	Z+1, r25	; 0x01
    9f68:	a2 83       	std	Z+2, r26	; 0x02
    9f6a:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    9f6c:	8c 2f       	mov	r24, r28
    9f6e:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    9f72:	8c 2f       	mov	r24, r28
    9f74:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    9f78:	f8 01       	movw	r30, r16
    9f7a:	e5 54       	subi	r30, 0x45	; 69
    9f7c:	f6 4f       	sbci	r31, 0xF6	; 246
    9f7e:	80 82       	st	Z, r8
    9f80:	91 82       	std	Z+1, r9	; 0x01
    9f82:	a2 82       	std	Z+2, r10	; 0x02
    9f84:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    9f86:	8c 2f       	mov	r24, r28
    9f88:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    9f8c:	8c 2f       	mov	r24, r28
    9f8e:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    9f92:	f7 01       	movw	r30, r14
    9f94:	e1 53       	subi	r30, 0x31	; 49
    9f96:	f6 4f       	sbci	r31, 0xF6	; 246
    9f98:	8c e3       	ldi	r24, 0x3C	; 60
    9f9a:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    9f9c:	8c 2f       	mov	r24, r28
    9f9e:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    9fa2:	8c 2f       	mov	r24, r28
    9fa4:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    9fa8:	81 e2       	ldi	r24, 0x21	; 33
    9faa:	c8 9f       	mul	r28, r24
    9fac:	80 01       	movw	r16, r0
    9fae:	11 24       	eor	r1, r1
    9fb0:	6f ef       	ldi	r22, 0xFF	; 255
    9fb2:	c8 01       	movw	r24, r16
    9fb4:	84 5a       	subi	r24, 0xA4	; 164
    9fb6:	9e 4f       	sbci	r25, 0xFE	; 254
    9fb8:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    9fbc:	6c ed       	ldi	r22, 0xDC	; 220
    9fbe:	70 e0       	ldi	r23, 0x00	; 0
    9fc0:	8c 2f       	mov	r24, r28
    9fc2:	0e 94 44 4f 	call	0x9e88	; 0x9e88 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    9fc6:	6f ef       	ldi	r22, 0xFF	; 255
    9fc8:	c8 01       	movw	r24, r16
    9fca:	85 5a       	subi	r24, 0xA5	; 165
    9fcc:	9e 4f       	sbci	r25, 0xFE	; 254
    9fce:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    9fd2:	f7 01       	movw	r30, r14
    9fd4:	e5 5d       	subi	r30, 0xD5	; 213
    9fd6:	f5 4f       	sbci	r31, 0xF5	; 245
    9fd8:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    9fda:	6f ef       	ldi	r22, 0xFF	; 255
    9fdc:	c8 01       	movw	r24, r16
    9fde:	83 5a       	subi	r24, 0xA3	; 163
    9fe0:	9e 4f       	sbci	r25, 0xFE	; 254
    9fe2:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    9fe6:	6f ef       	ldi	r22, 0xFF	; 255
    9fe8:	c8 01       	movw	r24, r16
    9fea:	81 5a       	subi	r24, 0xA1	; 161
    9fec:	9e 4f       	sbci	r25, 0xFE	; 254
    9fee:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    9ff2:	60 e0       	ldi	r22, 0x00	; 0
    9ff4:	c8 01       	movw	r24, r16
    9ff6:	82 5a       	subi	r24, 0xA2	; 162
    9ff8:	9e 4f       	sbci	r25, 0xFE	; 254
    9ffa:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
    9ffe:	63 e8       	ldi	r22, 0x83	; 131
    a000:	73 e0       	ldi	r23, 0x03	; 3
    a002:	8c 2f       	mov	r24, r28
    a004:	0e 94 60 4f 	call	0x9ec0	; 0x9ec0 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    a008:	60 e0       	ldi	r22, 0x00	; 0
    a00a:	c8 01       	movw	r24, r16
    a00c:	88 5a       	subi	r24, 0xA8	; 168
    a00e:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    a010:	cf 91       	pop	r28
    a012:	1f 91       	pop	r17
    a014:	0f 91       	pop	r16
    a016:	ff 90       	pop	r15
    a018:	ef 90       	pop	r14
    a01a:	bf 90       	pop	r11
    a01c:	af 90       	pop	r10
    a01e:	9f 90       	pop	r9
    a020:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    a022:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a026 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    a026:	af 92       	push	r10
    a028:	bf 92       	push	r11
    a02a:	cf 92       	push	r12
    a02c:	df 92       	push	r13
    a02e:	ef 92       	push	r14
    a030:	ff 92       	push	r15
    a032:	0f 93       	push	r16
    a034:	1f 93       	push	r17
    a036:	cf 93       	push	r28
    a038:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    a03a:	86 30       	cpi	r24, 0x06	; 6
    a03c:	08 f0       	brcs	.+2      	; 0xa040 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    a03e:	49 c0       	rjmp	.+146    	; 0xa0d2 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    a040:	6b 01       	movw	r12, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    a042:	96 e1       	ldi	r25, 0x16	; 22
    a044:	89 9f       	mul	r24, r25
    a046:	e0 01       	movw	r28, r0
    a048:	11 24       	eor	r1, r1
    a04a:	f6 01       	movw	r30, r12
    a04c:	61 91       	ld	r22, Z+
    a04e:	7f 01       	movw	r14, r30
    a050:	ce 01       	movw	r24, r28
    a052:	88 53       	subi	r24, 0x38	; 56
    a054:	9f 4f       	sbci	r25, 0xFF	; 255
    a056:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a05a:	8e 01       	movw	r16, r28
    a05c:	07 53       	subi	r16, 0x37	; 55
    a05e:	1f 4f       	sbci	r17, 0xFF	; 255
    a060:	5e 01       	movw	r10, r28
    a062:	f1 ed       	ldi	r31, 0xD1	; 209
    a064:	af 0e       	add	r10, r31
    a066:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    a068:	f7 01       	movw	r30, r14
    a06a:	61 91       	ld	r22, Z+
    a06c:	7f 01       	movw	r14, r30
    a06e:	c8 01       	movw	r24, r16
    a070:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    a074:	f7 01       	movw	r30, r14
    a076:	62 85       	ldd	r22, Z+10	; 0x0a
    a078:	c8 01       	movw	r24, r16
    a07a:	0b 96       	adiw	r24, 0x0b	; 11
    a07c:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a080:	0f 5f       	subi	r16, 0xFF	; 255
    a082:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    a084:	0a 15       	cp	r16, r10
    a086:	1b 05       	cpc	r17, r11
    a088:	79 f7       	brne	.-34     	; 0xa068 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    a08a:	f6 01       	movw	r30, r12
    a08c:	61 85       	ldd	r22, Z+9	; 0x09
    a08e:	c8 01       	movw	r24, r16
    a090:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    a094:	f6 01       	movw	r30, r12
    a096:	63 85       	ldd	r22, Z+11	; 0x0b
    a098:	ce 01       	movw	r24, r28
    a09a:	8e 52       	subi	r24, 0x2E	; 46
    a09c:	9f 4f       	sbci	r25, 0xFF	; 255
    a09e:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    a0a2:	f6 01       	movw	r30, r12
    a0a4:	62 85       	ldd	r22, Z+10	; 0x0a
    a0a6:	ce 01       	movw	r24, r28
    a0a8:	8d 52       	subi	r24, 0x2D	; 45
    a0aa:	9f 4f       	sbci	r25, 0xFF	; 255
    a0ac:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    a0b0:	f6 01       	movw	r30, r12
    a0b2:	64 89       	ldd	r22, Z+20	; 0x14
    a0b4:	ce 01       	movw	r24, r28
    a0b6:	84 52       	subi	r24, 0x24	; 36
    a0b8:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    a0ba:	df 91       	pop	r29
    a0bc:	cf 91       	pop	r28
    a0be:	1f 91       	pop	r17
    a0c0:	0f 91       	pop	r16
    a0c2:	ff 90       	pop	r15
    a0c4:	ef 90       	pop	r14
    a0c6:	df 90       	pop	r13
    a0c8:	cf 90       	pop	r12
    a0ca:	bf 90       	pop	r11
    a0cc:	af 90       	pop	r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    a0ce:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    a0d2:	df 91       	pop	r29
    a0d4:	cf 91       	pop	r28
    a0d6:	1f 91       	pop	r17
    a0d8:	0f 91       	pop	r16
    a0da:	ff 90       	pop	r15
    a0dc:	ef 90       	pop	r14
    a0de:	df 90       	pop	r13
    a0e0:	cf 90       	pop	r12
    a0e2:	bf 90       	pop	r11
    a0e4:	af 90       	pop	r10
    a0e6:	08 95       	ret

0000a0e8 <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    a0e8:	ff 92       	push	r15
    a0ea:	0f 93       	push	r16
    a0ec:	1f 93       	push	r17
    a0ee:	cf 93       	push	r28
    a0f0:	df 93       	push	r29
    a0f2:	8c 01       	movw	r16, r24
    a0f4:	d0 e0       	ldi	r29, 0x00	; 0
    a0f6:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    a0f8:	f8 01       	movw	r30, r16
    a0fa:	f1 90       	ld	r15, Z+
    a0fc:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    a0fe:	6f 2d       	mov	r22, r15
    a100:	ce 01       	movw	r24, r28
    a102:	8c 59       	subi	r24, 0x9C	; 156
    a104:	9f 4f       	sbci	r25, 0xFF	; 255
    a106:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    a10a:	f1 10       	cpse	r15, r1
    a10c:	0b c0       	rjmp	.+22     	; 0xa124 <device_set_name(char*)+0x3c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    a10e:	60 e0       	ldi	r22, 0x00	; 0
    a110:	ce 01       	movw	r24, r28
    a112:	8b 59       	subi	r24, 0x9B	; 155
    a114:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    a116:	df 91       	pop	r29
    a118:	cf 91       	pop	r28
    a11a:	1f 91       	pop	r17
    a11c:	0f 91       	pop	r16
    a11e:	ff 90       	pop	r15
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    a120:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a124:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a126:	c9 30       	cpi	r28, 0x09	; 9
    a128:	d1 05       	cpc	r29, r1
    a12a:	31 f7       	brne	.-52     	; 0xa0f8 <device_set_name(char*)+0x10>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    a12c:	df 91       	pop	r29
    a12e:	cf 91       	pop	r28
    a130:	1f 91       	pop	r17
    a132:	0f 91       	pop	r16
    a134:	ff 90       	pop	r15
    a136:	08 95       	ret

0000a138 <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    a138:	ef 92       	push	r14
    a13a:	ff 92       	push	r15
    a13c:	0f 93       	push	r16
    a13e:	1f 93       	push	r17
    a140:	cf 93       	push	r28
    a142:	df 93       	push	r29
    a144:	0b e3       	ldi	r16, 0x3B	; 59
    a146:	1c e0       	ldi	r17, 0x0C	; 12
    a148:	ce e6       	ldi	r28, 0x6E	; 110
    a14a:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    a14c:	f8 01       	movw	r30, r16
    a14e:	61 91       	ld	r22, Z+
    a150:	8f 01       	movw	r16, r30
    a152:	ce 01       	movw	r24, r28
    a154:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a158:	21 96       	adiw	r28, 0x01	; 1
    a15a:	c4 37       	cpi	r28, 0x74	; 116
    a15c:	d1 05       	cpc	r29, r1
    a15e:	b1 f7       	brne	.-20     	; 0xa14c <save_setup_network()+0x14>
    a160:	01 e4       	ldi	r16, 0x41	; 65
    a162:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    a164:	f8 01       	movw	r30, r16
    a166:	61 91       	ld	r22, Z+
    a168:	8f 01       	movw	r16, r30
    a16a:	ce 01       	movw	r24, r28
    a16c:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a170:	21 96       	adiw	r28, 0x01	; 1
    a172:	c8 37       	cpi	r28, 0x78	; 120
    a174:	d1 05       	cpc	r29, r1
    a176:	b1 f7       	brne	.-20     	; 0xa164 <save_setup_network()+0x2c>
    a178:	05 e4       	ldi	r16, 0x45	; 69
    a17a:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    a17c:	f8 01       	movw	r30, r16
    a17e:	61 91       	ld	r22, Z+
    a180:	8f 01       	movw	r16, r30
    a182:	ce 01       	movw	r24, r28
    a184:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a188:	21 96       	adiw	r28, 0x01	; 1
    a18a:	cc 37       	cpi	r28, 0x7C	; 124
    a18c:	d1 05       	cpc	r29, r1
    a18e:	b1 f7       	brne	.-20     	; 0xa17c <save_setup_network()+0x44>
    a190:	2d e4       	ldi	r18, 0x4D	; 77
    a192:	e2 2e       	mov	r14, r18
    a194:	2c e0       	ldi	r18, 0x0C	; 12
    a196:	f2 2e       	mov	r15, r18
    a198:	00 e8       	ldi	r16, 0x80	; 128
    a19a:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    a19c:	f7 01       	movw	r30, r14
    a19e:	61 91       	ld	r22, Z+
    a1a0:	7f 01       	movw	r14, r30
    a1a2:	c8 01       	movw	r24, r16
    a1a4:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a1a8:	0f 5f       	subi	r16, 0xFF	; 255
    a1aa:	1f 4f       	sbci	r17, 0xFF	; 255
    a1ac:	04 38       	cpi	r16, 0x84	; 132
    a1ae:	11 05       	cpc	r17, r1
    a1b0:	a9 f7       	brne	.-22     	; 0xa19c <save_setup_network()+0x64>
    a1b2:	99 e4       	ldi	r25, 0x49	; 73
    a1b4:	e9 2e       	mov	r14, r25
    a1b6:	9c e0       	ldi	r25, 0x0C	; 12
    a1b8:	f9 2e       	mov	r15, r25
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    a1ba:	f7 01       	movw	r30, r14
    a1bc:	61 91       	ld	r22, Z+
    a1be:	7f 01       	movw	r14, r30
    a1c0:	ce 01       	movw	r24, r28
    a1c2:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a1c6:	21 96       	adiw	r28, 0x01	; 1
    a1c8:	c0 38       	cpi	r28, 0x80	; 128
    a1ca:	d1 05       	cpc	r29, r1
    a1cc:	b1 f7       	brne	.-20     	; 0xa1ba <save_setup_network()+0x82>
    a1ce:	81 e5       	ldi	r24, 0x51	; 81
    a1d0:	e8 2e       	mov	r14, r24
    a1d2:	8c e0       	ldi	r24, 0x0C	; 12
    a1d4:	f8 2e       	mov	r15, r24
    a1d6:	c4 e6       	ldi	r28, 0x64	; 100
    a1d8:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    a1da:	f7 01       	movw	r30, r14
    a1dc:	61 91       	ld	r22, Z+
    a1de:	7f 01       	movw	r14, r30
    a1e0:	ce 01       	movw	r24, r28
    a1e2:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a1e6:	21 96       	adiw	r28, 0x01	; 1
    a1e8:	cd 36       	cpi	r28, 0x6D	; 109
    a1ea:	d1 05       	cpc	r29, r1
    a1ec:	b1 f7       	brne	.-20     	; 0xa1da <save_setup_network()+0xa2>
    a1ee:	cb e5       	ldi	r28, 0x5B	; 91
    a1f0:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    a1f2:	69 91       	ld	r22, Y+
    a1f4:	c8 01       	movw	r24, r16
    a1f6:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a1fa:	0f 5f       	subi	r16, 0xFF	; 255
    a1fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a1fe:	08 38       	cpi	r16, 0x88	; 136
    a200:	11 05       	cpc	r17, r1
    a202:	b9 f7       	brne	.-18     	; 0xa1f2 <save_setup_network()+0xba>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    a204:	60 91 60 0c 	lds	r22, 0x0C60	; 0x800c60 <device+0x25>
    a208:	88 e8       	ldi	r24, 0x88	; 136
    a20a:	90 e0       	ldi	r25, 0x00	; 0
    a20c:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    a210:	60 91 5f 0c 	lds	r22, 0x0C5F	; 0x800c5f <device+0x24>
    a214:	89 e8       	ldi	r24, 0x89	; 137
    a216:	90 e0       	ldi	r25, 0x00	; 0
    a218:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a21c:	01 e6       	ldi	r16, 0x61	; 97
    a21e:	1c e0       	ldi	r17, 0x0C	; 12
    a220:	ca e8       	ldi	r28, 0x8A	; 138
    a222:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    a224:	f8 01       	movw	r30, r16
    a226:	61 91       	ld	r22, Z+
    a228:	8f 01       	movw	r16, r30
    a22a:	ce 01       	movw	r24, r28
    a22c:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a230:	21 96       	adiw	r28, 0x01	; 1
    a232:	ce 39       	cpi	r28, 0x9E	; 158
    a234:	d1 05       	cpc	r29, r1
    a236:	b1 f7       	brne	.-20     	; 0xa224 <save_setup_network()+0xec>
    a238:	05 e7       	ldi	r16, 0x75	; 117
    a23a:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    a23c:	f8 01       	movw	r30, r16
    a23e:	61 91       	ld	r22, Z+
    a240:	8f 01       	movw	r16, r30
    a242:	ce 01       	movw	r24, r28
    a244:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a248:	21 96       	adiw	r28, 0x01	; 1
    a24a:	c2 3b       	cpi	r28, 0xB2	; 178
    a24c:	d1 05       	cpc	r29, r1
    a24e:	b1 f7       	brne	.-20     	; 0xa23c <save_setup_network()+0x104>
    a250:	09 e8       	ldi	r16, 0x89	; 137
    a252:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    a254:	f8 01       	movw	r30, r16
    a256:	61 91       	ld	r22, Z+
    a258:	8f 01       	movw	r16, r30
    a25a:	ce 01       	movw	r24, r28
    a25c:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a260:	21 96       	adiw	r28, 0x01	; 1
    a262:	c6 3b       	cpi	r28, 0xB6	; 182
    a264:	d1 05       	cpc	r29, r1
    a266:	b1 f7       	brne	.-20     	; 0xa254 <save_setup_network()+0x11c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:54
}
    a268:	df 91       	pop	r29
    a26a:	cf 91       	pop	r28
    a26c:	1f 91       	pop	r17
    a26e:	0f 91       	pop	r16
    a270:	ff 90       	pop	r15
    a272:	ef 90       	pop	r14
    a274:	08 95       	ret

0000a276 <remote_tds_set_name(unsigned char, char*) [clone .part.20]>:
_Z19remote_tds_set_namehPc.part.20():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2036
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    a276:	df 92       	push	r13
    a278:	ef 92       	push	r14
    a27a:	ff 92       	push	r15
    a27c:	0f 93       	push	r16
    a27e:	1f 93       	push	r17
    a280:	cf 93       	push	r28
    a282:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    a284:	94 e1       	ldi	r25, 0x14	; 20
    a286:	89 9f       	mul	r24, r25
    a288:	e0 01       	movw	r28, r0
    a28a:	11 24       	eor	r1, r1
    a28c:	7b 01       	movw	r14, r22
    a28e:	8e 01       	movw	r16, r28
    a290:	06 55       	subi	r16, 0x56	; 86
    a292:	1a 4f       	sbci	r17, 0xFA	; 250
    a294:	c4 54       	subi	r28, 0x44	; 68
    a296:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2042
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    a298:	f7 01       	movw	r30, r14
    a29a:	d1 90       	ld	r13, Z+
    a29c:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    a29e:	6d 2d       	mov	r22, r13
    a2a0:	c8 01       	movw	r24, r16
    a2a2:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
      if (t == 0) break;
    a2a6:	dd 20       	and	r13, r13
    a2a8:	29 f0       	breq	.+10     	; 0xa2b4 <remote_tds_set_name(unsigned char, char*) [clone .part.20]+0x3e>
    a2aa:	0f 5f       	subi	r16, 0xFF	; 255
    a2ac:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2040
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    a2ae:	0c 17       	cp	r16, r28
    a2b0:	1d 07       	cpc	r17, r29
    a2b2:	91 f7       	brne	.-28     	; 0xa298 <remote_tds_set_name(unsigned char, char*) [clone .part.20]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    a2b4:	df 91       	pop	r29
    a2b6:	cf 91       	pop	r28
    a2b8:	1f 91       	pop	r17
    a2ba:	0f 91       	pop	r16
    a2bc:	ff 90       	pop	r15
    a2be:	ef 90       	pop	r14
    a2c0:	df 90       	pop	r13
    a2c2:	08 95       	ret

0000a2c4 <click_function_default_temp(unsigned char, unsigned char)>:
_Z27click_function_default_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4864
//////////////////////////////////////////////////////////////////////////////
/// funkce, ktera nastavi promenou vychozi teplomer
/// funkce je povesena na klik tlacitka
void click_function_default_temp(uint8_t args1, uint8_t args2)
{
  default_show_temp = args2;
    a2c4:	60 93 0c 09 	sts	0x090C, r22	; 0x80090c <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2222
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    a2c8:	8d e5       	ldi	r24, 0x5D	; 93
    a2ca:	90 e0       	ldi	r25, 0x00	; 0
    a2cc:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a2d0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2031
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    a2d0:	cf 93       	push	r28
    a2d2:	df 93       	push	r29
    a2d4:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    a2d6:	8a 30       	cpi	r24, 0x0A	; 10
    a2d8:	78 f4       	brcc	.+30     	; 0xa2f8 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    a2da:	ba 01       	movw	r22, r20
    a2dc:	c8 2f       	mov	r28, r24
    a2de:	0e 94 3b 51 	call	0xa276	; 0xa276 <remote_tds_set_name(unsigned char, char*) [clone .part.20]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2062
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    a2e2:	24 e1       	ldi	r18, 0x14	; 20
    a2e4:	c2 9f       	mul	r28, r18
    a2e6:	c0 01       	movw	r24, r0
    a2e8:	11 24       	eor	r1, r1
    a2ea:	6d 2f       	mov	r22, r29
    a2ec:	83 54       	subi	r24, 0x43	; 67
    a2ee:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    a2f0:	df 91       	pop	r29
    a2f2:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2062
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    a2f4:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    a2f8:	df 91       	pop	r29
    a2fa:	cf 91       	pop	r28
    a2fc:	08 95       	ret

0000a2fe <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    a2fe:	cf 93       	push	r28
    a300:	df 93       	push	r29
    a302:	cd b7       	in	r28, 0x3d	; 61
    a304:	de b7       	in	r29, 0x3e	; 62
    a306:	62 97       	sbiw	r28, 0x12	; 18
    a308:	0f b6       	in	r0, 0x3f	; 63
    a30a:	f8 94       	cli
    a30c:	de bf       	out	0x3e, r29	; 62
    a30e:	0f be       	out	0x3f, r0	; 63
    a310:	cd bf       	out	0x3d, r28	; 61
    a312:	e1 e0       	ldi	r30, 0x01	; 1
    a314:	f0 e0       	ldi	r31, 0x00	; 0
    a316:	ec 0f       	add	r30, r28
    a318:	fd 1f       	adc	r31, r29
    a31a:	e8 0f       	add	r30, r24
    a31c:	f1 1d       	adc	r31, r1
    a31e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    a320:	ae 01       	movw	r20, r28
    a322:	4f 5f       	subi	r20, 0xFF	; 255
    a324:	5f 4f       	sbci	r21, 0xFF	; 255
    a326:	60 e0       	ldi	r22, 0x00	; 0
    a328:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2071
}
    a32c:	62 96       	adiw	r28, 0x12	; 18
    a32e:	0f b6       	in	r0, 0x3f	; 63
    a330:	f8 94       	cli
    a332:	de bf       	out	0x3e, r29	; 62
    a334:	0f be       	out	0x3f, r0	; 63
    a336:	cd bf       	out	0x3d, r28	; 61
    a338:	df 91       	pop	r29
    a33a:	cf 91       	pop	r28
    a33c:	08 95       	ret

0000a33e <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4606
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    a33e:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4608
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    a340:	0e 94 7f 51 	call	0xa2fe	; 0xa2fe <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4609
  MenuHistoryPrevMenu();
    a344:	0c 94 46 31 	jmp	0x628c	; 0x628c <MenuHistoryPrevMenu()>

0000a348 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    a348:	21 e2       	ldi	r18, 0x21	; 33
    a34a:	82 9f       	mul	r24, r18
    a34c:	c0 01       	movw	r24, r0
    a34e:	11 24       	eor	r1, r1
    a350:	82 5a       	subi	r24, 0xA2	; 162
    a352:	9e 4f       	sbci	r25, 0xFE	; 254
    a354:	0c 94 29 94 	jmp	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000a358 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4955
  }
}

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
    a358:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <default_ring>
    a35c:	0e 94 a4 51 	call	0xa348	; 0xa348 <thermostat_ring_get_mode(unsigned char)>
    a360:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4957
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    return 1;
    a362:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4956
}

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    a364:	93 30       	cpi	r25, 0x03	; 3
    a366:	31 f0       	breq	.+12     	; 0xa374 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    a368:	95 30       	cpi	r25, 0x05	; 5
    a36a:	29 f0       	breq	.+10     	; 0xa376 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    a36c:	98 30       	cpi	r25, 0x08	; 8
    a36e:	19 f0       	breq	.+6      	; 0xa376 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    a370:	80 e0       	ldi	r24, 0x00	; 0
    a372:	08 95       	ret
    a374:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4960
    return 1;

  return 0;
}
    a376:	08 95       	ret

0000a378 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)>:
_Z34get_funtion_default_ring_temp_modehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4899
  sprintf(line2, "Vychozi ring %d", default_ring);
  sprintf(line1, "Zmenit vychozi ring");
}

void get_funtion_default_ring_temp_mode(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a378:	cf 93       	push	r28
    a37a:	df 93       	push	r29
    a37c:	ca 01       	movw	r24, r20
    a37e:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4900
  sprintf(line1, "Aktualni mod termostatu");
    a380:	68 e8       	ldi	r22, 0x88	; 136
    a382:	73 e0       	ldi	r23, 0x03	; 3
    a384:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4901
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
    a388:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <default_ring>
    a38c:	0e 94 a4 51 	call	0xa348	; 0xa348 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3429
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
}

void convert_mode_text_1(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, button_term_off);
    a390:	62 e9       	ldi	r22, 0x92	; 146
    a392:	74 e3       	ldi	r23, 0x34	; 52
    a394:	88 23       	and	r24, r24
    a396:	61 f0       	breq	.+24     	; 0xa3b0 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3430
  if (mode == TERM_MODE_MAX)   strcpy_P(str, button_term_max);
    a398:	6e e8       	ldi	r22, 0x8E	; 142
    a39a:	74 e3       	ldi	r23, 0x34	; 52
    a39c:	81 30       	cpi	r24, 0x01	; 1
    a39e:	41 f0       	breq	.+16     	; 0xa3b0 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3431
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
    a3a0:	6a e8       	ldi	r22, 0x8A	; 138
    a3a2:	74 e3       	ldi	r23, 0x34	; 52
    a3a4:	83 30       	cpi	r24, 0x03	; 3
    a3a6:	21 f0       	breq	.+8      	; 0xa3b0 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3432
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
    a3a8:	82 30       	cpi	r24, 0x02	; 2
    a3aa:	41 f4       	brne	.+16     	; 0xa3bc <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x44>
    a3ac:	65 e8       	ldi	r22, 0x85	; 133
    a3ae:	74 e3       	ldi	r23, 0x34	; 52
    a3b0:	ce 01       	movw	r24, r28
    a3b2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
_Z34get_funtion_default_ring_temp_modehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4902

void get_funtion_default_ring_temp_mode(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  sprintf(line1, "Aktualni mod termostatu");
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    a3b6:	df 91       	pop	r29
    a3b8:	cf 91       	pop	r28
    a3ba:	08 95       	ret
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3433
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, button_term_man);
    a3bc:	84 30       	cpi	r24, 0x04	; 4
    a3be:	39 f4       	brne	.+14     	; 0xa3ce <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3435
  if (mode == TERM_MODE_FAN)   strcpy_P(str, button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, button_term_man);
    a3c0:	6a e8       	ldi	r22, 0x8A	; 138
    a3c2:	74 e3       	ldi	r23, 0x34	; 52
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
  if (mode == TERM_MODE_MIN)   strcpy_P(str, button_term_min);
    a3c4:	ce 01       	movw	r24, r28
_Z34get_funtion_default_ring_temp_modehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4902

void get_funtion_default_ring_temp_mode(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  sprintf(line1, "Aktualni mod termostatu");
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    a3c6:	df 91       	pop	r29
    a3c8:	cf 91       	pop	r28
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_MIN)   strcpy_P(str, button_term_min);
    a3ca:	0c 94 07 a8 	jmp	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3434
  if (mode == TERM_MODE_OFF)   strcpy_P(str, button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, button_term_fan);
    a3ce:	61 e8       	ldi	r22, 0x81	; 129
    a3d0:	74 e3       	ldi	r23, 0x34	; 52
    a3d2:	86 30       	cpi	r24, 0x06	; 6
    a3d4:	b9 f3       	breq	.-18     	; 0xa3c4 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3435
  if (mode == TERM_MODE_MAN)   strcpy_P(str, button_term_man);
    a3d6:	88 30       	cpi	r24, 0x08	; 8
    a3d8:	99 f3       	breq	.-26     	; 0xa3c0 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
  if (mode == TERM_MODE_MIN)   strcpy_P(str, button_term_min);
    a3da:	87 30       	cpi	r24, 0x07	; 7
    a3dc:	61 f7       	brne	.-40     	; 0xa3b6 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x3e>
    a3de:	6d e7       	ldi	r22, 0x7D	; 125
    a3e0:	74 e3       	ldi	r23, 0x34	; 52
    a3e2:	f0 cf       	rjmp	.-32     	; 0xa3c4 <get_funtion_default_ring_temp_mode(unsigned char, unsigned char, char*, char*)+0x4c>

0000a3e4 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    a3e4:	0f 93       	push	r16
    a3e6:	1f 93       	push	r17
    a3e8:	cf 93       	push	r28
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    a3ea:	91 e2       	ldi	r25, 0x21	; 33
    a3ec:	89 9f       	mul	r24, r25
    a3ee:	80 01       	movw	r16, r0
    a3f0:	11 24       	eor	r1, r1
    a3f2:	c8 01       	movw	r24, r16
    a3f4:	8a 5a       	subi	r24, 0xAA	; 170
    a3f6:	9e 4f       	sbci	r25, 0xFE	; 254
    a3f8:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a3fc:	c8 2f       	mov	r28, r24
    a3fe:	c8 01       	movw	r24, r16
    a400:	89 5a       	subi	r24, 0xA9	; 169
    a402:	9e 4f       	sbci	r25, 0xFE	; 254
    a404:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a408:	2c 2f       	mov	r18, r28
    a40a:	30 e0       	ldi	r19, 0x00	; 0
    a40c:	32 2f       	mov	r19, r18
    a40e:	22 27       	eor	r18, r18
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:155
}
    a410:	82 0f       	add	r24, r18
    a412:	93 2f       	mov	r25, r19
    a414:	91 1d       	adc	r25, r1
    a416:	cf 91       	pop	r28
    a418:	1f 91       	pop	r17
    a41a:	0f 91       	pop	r16
    a41c:	08 95       	ret

0000a41e <preload_regulator_menu(unsigned char, unsigned char, unsigned char)>:
_Z22preload_regulator_menuhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1645




uint8_t preload_regulator_menu(uint8_t args1, uint8_t args2, uint8_t args3)
{
    a41e:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1646
  display_function_set_variable(thermostat_ring_get_mezni(default_ring), 160, 320, 5, default_ring, 10,  H_TRUE);
    a420:	c0 91 2a 0a 	lds	r28, 0x0A2A	; 0x800a2a <default_ring>
    a424:	8c 2f       	mov	r24, r28
    a426:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    a42a:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    a42e:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1683
  menu_dialog_set_variable_min = min;
    a432:	80 ea       	ldi	r24, 0xA0	; 160
    a434:	90 e0       	ldi	r25, 0x00	; 0
    a436:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <menu_dialog_set_variable_min+0x1>
    a43a:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684
  menu_dialog_set_variable_max = max;
    a43e:	80 e4       	ldi	r24, 0x40	; 64
    a440:	91 e0       	ldi	r25, 0x01	; 1
    a442:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <menu_dialog_set_variable_max+0x1>
    a446:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
  menu_dialog_set_variable_step = step;
    a44a:	85 e0       	ldi	r24, 0x05	; 5
    a44c:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
  menu_dialog_set_variable_args = args;
    a450:	c0 93 7b 08 	sts	0x087B, r28	; 0x80087b <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
  menu_dialog_set_divider = divider;
    a454:	8a e0       	ldi	r24, 0x0A	; 10
    a456:	90 e0       	ldi	r25, 0x00	; 0
    a458:	90 93 cc 08 	sts	0x08CC, r25	; 0x8008cc <menu_dialog_set_divider+0x1>
    a45c:	80 93 cb 08 	sts	0x08CB, r24	; 0x8008cb <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1689
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    a460:	81 e0       	ldi	r24, 0x01	; 1
    a462:	80 93 7a 08 	sts	0x087A, r24	; 0x80087a <menu_dialog_set_variable_update_now>
_Z22preload_regulator_menuhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1647


uint8_t preload_regulator_menu(uint8_t args1, uint8_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring), 160, 320, 5, default_ring, 10,  H_TRUE);
  dialog_save_variable_function = &helper_thermostat_set_mezni;
    a466:	8b e5       	ldi	r24, 0x5B	; 91
    a468:	9f e4       	ldi	r25, 0x4F	; 79
    a46a:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <dialog_save_variable_function+0x1>
    a46e:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648
}
    a472:	cf 91       	pop	r28
    a474:	08 95       	ret

0000a476 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    a476:	21 e2       	ldi	r18, 0x21	; 33
    a478:	82 9f       	mul	r24, r18
    a47a:	c0 01       	movw	r24, r0
    a47c:	11 24       	eor	r1, r1
    a47e:	83 5a       	subi	r24, 0xA3	; 163
    a480:	9e 4f       	sbci	r25, 0xFE	; 254
    a482:	0c 94 29 94 	jmp	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000a486 <set_function_thermostat_heat_or_cool(unsigned char)>:
_Z36set_function_thermostat_heat_or_coolh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4943
  }
  return ret;
}

void set_function_thermostat_heat_or_cool(uint8_t args)
{
    a486:	cf 93       	push	r28
    a488:	df 93       	push	r29
    a48a:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4944
  if (thermostat_ring_get_active(default_ring) != 255)
    a48c:	c0 91 2a 0a 	lds	r28, 0x0A2A	; 0x800a2a <default_ring>
    a490:	8c 2f       	mov	r24, r28
    a492:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
    a496:	8f 3f       	cpi	r24, 0xFF	; 255
    a498:	59 f0       	breq	.+22     	; 0xa4b0 <set_function_thermostat_heat_or_cool(unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4947
  {
    if (args == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    a49a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4946

void set_function_thermostat_heat_or_cool(uint8_t args)
{
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args == TERM_MODE_MAN_HEAT)
    a49c:	d3 30       	cpi	r29, 0x03	; 3
    a49e:	19 f0       	breq	.+6      	; 0xa4a6 <set_function_thermostat_heat_or_cool(unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4948
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args == TERM_MODE_MAN_COOL)
    a4a0:	d5 30       	cpi	r29, 0x05	; 5
    a4a2:	31 f4       	brne	.+12     	; 0xa4b0 <set_function_thermostat_heat_or_cool(unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4949
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    a4a4:	61 e0       	ldi	r22, 0x01	; 1
    a4a6:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4951
  }
}
    a4a8:	df 91       	pop	r29
    a4aa:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4949
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    a4ac:	0c 94 2b 94 	jmp	0x12856	; 0x12856 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4951
  }
}
    a4b0:	df 91       	pop	r29
    a4b2:	cf 91       	pop	r28
    a4b4:	08 95       	ret

0000a4b6 <click_thermostat_set_mode(unsigned char)>:
_Z25click_thermostat_set_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4918
    if (thermostat_ring_get_mode_1(default_ring, args) == true)
      ret = 1;
  return ret;
}
void click_thermostat_set_mode(uint8_t args)
{
    a4b6:	cf 93       	push	r28
    a4b8:	df 93       	push	r29
    a4ba:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4919
  if (thermostat_ring_get_active(default_ring) != 255)
    a4bc:	c0 91 2a 0a 	lds	r28, 0x0A2A	; 0x800a2a <default_ring>
    a4c0:	8c 2f       	mov	r24, r28
    a4c2:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
    a4c6:	8f 3f       	cpi	r24, 0xFF	; 255
    a4c8:	61 f0       	breq	.+24     	; 0xa4e2 <click_thermostat_set_mode(unsigned char)+0x2c>
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    a4ca:	21 e2       	ldi	r18, 0x21	; 33
    a4cc:	c2 9f       	mul	r28, r18
    a4ce:	c0 01       	movw	r24, r0
    a4d0:	11 24       	eor	r1, r1
    a4d2:	6d 2f       	mov	r22, r29
    a4d4:	82 5a       	subi	r24, 0xA2	; 162
    a4d6:	9e 4f       	sbci	r25, 0xFE	; 254
    a4d8:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z25click_thermostat_set_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4922
  {
    thermostat_ring_set_mode(default_ring, args);
    change_term_mode = 1;
    a4dc:	81 e0       	ldi	r24, 0x01	; 1
    a4de:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4924
  }
}
    a4e2:	df 91       	pop	r29
    a4e4:	cf 91       	pop	r28
    a4e6:	08 95       	ret

0000a4e8 <get_function_thermostat_has_mode(unsigned char)>:
_Z32get_function_thermostat_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910
   funkce pro zjisteni, zda mode v args je aktivni a nebo ne
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t get_function_thermostat_has_mode(uint8_t args)
{
    a4e8:	cf 93       	push	r28
    a4ea:	df 93       	push	r29
    a4ec:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != 255)
    a4ee:	c0 91 2a 0a 	lds	r28, 0x0A2A	; 0x800a2a <default_ring>
    a4f2:	8c 2f       	mov	r24, r28
    a4f4:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
    a4f8:	8f 3f       	cpi	r24, 0xFF	; 255
    a4fa:	29 f0       	breq	.+10     	; 0xa506 <get_function_thermostat_has_mode(unsigned char)+0x1e>
thermostat_ring_get_mode_1():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:185
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    a4fc:	8c 2f       	mov	r24, r28
    a4fe:	0e 94 a4 51 	call	0xa348	; 0xa348 <thermostat_ring_get_mode(unsigned char)>
    a502:	91 e0       	ldi	r25, 0x01	; 1
    a504:	d8 13       	cpse	r29, r24
_Z32get_function_thermostat_has_modeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4911
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t get_function_thermostat_has_mode(uint8_t args)
{
  uint8_t ret = 0;
    a506:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4916
  if (thermostat_ring_get_active(default_ring) != 255)
    if (thermostat_ring_get_mode_1(default_ring, args) == true)
      ret = 1;
  return ret;
}
    a508:	89 2f       	mov	r24, r25
    a50a:	df 91       	pop	r29
    a50c:	cf 91       	pop	r28
    a50e:	08 95       	ret

0000a510 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    a510:	ef 92       	push	r14
    a512:	ff 92       	push	r15
    a514:	0f 93       	push	r16
    a516:	1f 93       	push	r17
    a518:	cf 93       	push	r28
    a51a:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    a51c:	91 e2       	ldi	r25, 0x21	; 33
    a51e:	89 9f       	mul	r24, r25
    a520:	e0 01       	movw	r28, r0
    a522:	11 24       	eor	r1, r1
    a524:	8e 01       	movw	r16, r28
    a526:	04 5b       	subi	r16, 0xB4	; 180
    a528:	1e 4f       	sbci	r17, 0xFE	; 254
    a52a:	7b 01       	movw	r14, r22
    a52c:	cb 5a       	subi	r28, 0xAB	; 171
    a52e:	de 4f       	sbci	r29, 0xFE	; 254
    a530:	c8 01       	movw	r24, r16
    a532:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:105
    name[i] = t;
    a536:	f7 01       	movw	r30, r14
    a538:	81 93       	st	Z+, r24
    a53a:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    a53c:	88 23       	and	r24, r24
    a53e:	29 f0       	breq	.+10     	; 0xa54a <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    a540:	0f 5f       	subi	r16, 0xFF	; 255
    a542:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a544:	0c 17       	cp	r16, r28
    a546:	1d 07       	cpc	r17, r29
    a548:	99 f7       	brne	.-26     	; 0xa530 <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    a54a:	df 91       	pop	r29
    a54c:	cf 91       	pop	r28
    a54e:	1f 91       	pop	r17
    a550:	0f 91       	pop	r16
    a552:	ff 90       	pop	r15
    a554:	ef 90       	pop	r14
    a556:	08 95       	ret

0000a558 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_default_ringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4144
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    a558:	af 92       	push	r10
    a55a:	bf 92       	push	r11
    a55c:	cf 92       	push	r12
    a55e:	df 92       	push	r13
    a560:	ef 92       	push	r14
    a562:	ff 92       	push	r15
    a564:	0f 93       	push	r16
    a566:	1f 93       	push	r17
    a568:	cf 93       	push	r28
    a56a:	df 93       	push	r29
    a56c:	cd b7       	in	r28, 0x3d	; 61
    a56e:	de b7       	in	r29, 0x3e	; 62
    a570:	a8 97       	sbiw	r28, 0x28	; 40
    a572:	0f b6       	in	r0, 0x3f	; 63
    a574:	f8 94       	cli
    a576:	de bf       	out	0x3e, r29	; 62
    a578:	0f be       	out	0x3f, r0	; 63
    a57a:	cd bf       	out	0x3d, r28	; 61
    a57c:	6c 01       	movw	r12, r24
    a57e:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147
  char name[10];
  char default_text[30];
  strcpy_P(default_text, regulator_default_text);
    a580:	6e ea       	ldi	r22, 0xAE	; 174
    a582:	73 e3       	ldi	r23, 0x33	; 51
    a584:	ce 01       	movw	r24, r28
    a586:	01 96       	adiw	r24, 0x01	; 1
    a588:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4148
  if (thermostat_ring_get_active(default_ring) != 255)
    a58c:	10 91 2a 0a 	lds	r17, 0x0A2A	; 0x800a2a <default_ring>
    a590:	81 2f       	mov	r24, r17
    a592:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
    a596:	8f 3f       	cpi	r24, 0xFF	; 255
    a598:	51 f1       	breq	.+84     	; 0xa5ee <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4150
  {
    thermostat_ring_get_name(default_ring, name);
    a59a:	be 01       	movw	r22, r28
    a59c:	61 5e       	subi	r22, 0xE1	; 225
    a59e:	7f 4f       	sbci	r23, 0xFF	; 255
    a5a0:	81 2f       	mov	r24, r17
    a5a2:	0e 94 88 52 	call	0xa510	; 0xa510 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_err);
    strcat(default_text, name);
    a5a6:	be 01       	movw	r22, r28
    a5a8:	61 5e       	subi	r22, 0xE1	; 225
    a5aa:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ac:	ce 01       	movw	r24, r28
    a5ae:	01 96       	adiw	r24, 0x01	; 1
    a5b0:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    a5b4:	ee 24       	eor	r14, r14
    a5b6:	ea 94       	dec	r14
    a5b8:	fe 2c       	mov	r15, r14
    a5ba:	10 e0       	ldi	r17, 0x00	; 0
    a5bc:	00 e0       	ldi	r16, 0x00	; 0
    a5be:	22 e0       	ldi	r18, 0x02	; 2
    a5c0:	a5 01       	movw	r20, r10
    a5c2:	b6 01       	movw	r22, r12
    a5c4:	ce 01       	movw	r24, r28
    a5c6:	01 96       	adiw	r24, 0x01	; 1
    a5c8:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159
}
    a5cc:	a8 96       	adiw	r28, 0x28	; 40
    a5ce:	0f b6       	in	r0, 0x3f	; 63
    a5d0:	f8 94       	cli
    a5d2:	de bf       	out	0x3e, r29	; 62
    a5d4:	0f be       	out	0x3f, r0	; 63
    a5d6:	cd bf       	out	0x3d, r28	; 61
    a5d8:	df 91       	pop	r29
    a5da:	cf 91       	pop	r28
    a5dc:	1f 91       	pop	r17
    a5de:	0f 91       	pop	r16
    a5e0:	ff 90       	pop	r15
    a5e2:	ef 90       	pop	r14
    a5e4:	df 90       	pop	r13
    a5e6:	cf 90       	pop	r12
    a5e8:	bf 90       	pop	r11
    a5ea:	af 90       	pop	r10
    a5ec:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
    thermostat_ring_get_name(default_ring, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_err);
    a5ee:	60 ee       	ldi	r22, 0xE0	; 224
    a5f0:	73 e3       	ldi	r23, 0x33	; 51
    a5f2:	ce 01       	movw	r24, r28
    a5f4:	4f 96       	adiw	r24, 0x1f	; 31
    a5f6:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
    a5fa:	d5 cf       	rjmp	.-86     	; 0xa5a6 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4e>

0000a5fc <get_function_thermostat_heat_or_cool(unsigned char)>:
_Z36get_function_thermostat_heat_or_coolh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4928
  }
}


uint8_t get_function_thermostat_heat_or_cool(uint8_t args)
{
    a5fc:	cf 93       	push	r28
    a5fe:	df 93       	push	r29
    a600:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4931
  uint8_t ret = 0;
  uint8_t b;
  if (thermostat_ring_get_active(default_ring) != 255)
    a602:	c0 91 2a 0a 	lds	r28, 0x0A2A	; 0x800a2a <default_ring>
    a606:	8c 2f       	mov	r24, r28
    a608:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
    a60c:	8f 3f       	cpi	r24, 0xFF	; 255
    a60e:	69 f0       	breq	.+26     	; 0xa62a <get_function_thermostat_heat_or_cool(unsigned char)+0x2e>
thermostat_ring_get_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    a610:	21 e2       	ldi	r18, 0x21	; 33
    a612:	c2 9f       	mul	r28, r18
    a614:	c0 01       	movw	r24, r0
    a616:	11 24       	eor	r1, r1
    a618:	88 5a       	subi	r24, 0xA8	; 168
    a61a:	9e 4f       	sbci	r25, 0xFE	; 254
    a61c:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z36get_function_thermostat_heat_or_coolh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4934
  {
    b = thermostat_ring_get_status_bites(default_ring, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args == TERM_MODE_MAN_HEAT)
    a620:	80 fd       	sbrc	r24, 0
    a622:	05 c0       	rjmp	.+10     	; 0xa62e <get_function_thermostat_heat_or_cool(unsigned char)+0x32>
    a624:	81 e0       	ldi	r24, 0x01	; 1
    a626:	d3 30       	cpi	r29, 0x03	; 3
    a628:	29 f0       	breq	.+10     	; 0xa634 <get_function_thermostat_heat_or_cool(unsigned char)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4936
      ret = 1;
    if (b != 0 && args == TERM_MODE_MAN_COOL)
    a62a:	80 e0       	ldi	r24, 0x00	; 0
    a62c:	03 c0       	rjmp	.+6      	; 0xa634 <get_function_thermostat_heat_or_cool(unsigned char)+0x38>
    a62e:	81 e0       	ldi	r24, 0x01	; 1
    a630:	d5 30       	cpi	r29, 0x05	; 5
    a632:	d9 f7       	brne	.-10     	; 0xa62a <get_function_thermostat_heat_or_cool(unsigned char)+0x2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4940
      ret = 1;
  }
  return ret;
}
    a634:	df 91       	pop	r29
    a636:	cf 91       	pop	r28
    a638:	08 95       	ret

0000a63a <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    a63a:	af 92       	push	r10
    a63c:	bf 92       	push	r11
    a63e:	cf 92       	push	r12
    a640:	df 92       	push	r13
    a642:	ef 92       	push	r14
    a644:	ff 92       	push	r15
    a646:	0f 93       	push	r16
    a648:	1f 93       	push	r17
    a64a:	cf 93       	push	r28
    a64c:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    a64e:	86 30       	cpi	r24, 0x06	; 6
    a650:	08 f0       	brcs	.+2      	; 0xa654 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    a652:	56 c0       	rjmp	.+172    	; 0xa700 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    a654:	8b 01       	movw	r16, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    a656:	96 e1       	ldi	r25, 0x16	; 22
    a658:	89 9f       	mul	r24, r25
    a65a:	e0 01       	movw	r28, r0
    a65c:	11 24       	eor	r1, r1
    a65e:	ce 01       	movw	r24, r28
    a660:	88 53       	subi	r24, 0x38	; 56
    a662:	9f 4f       	sbci	r25, 0xFF	; 255
    a664:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a668:	f8 01       	movw	r30, r16
    a66a:	81 93       	st	Z+, r24
    a66c:	6f 01       	movw	r12, r30
    a66e:	7e 01       	movw	r14, r28
    a670:	f9 ec       	ldi	r31, 0xC9	; 201
    a672:	ef 0e       	add	r14, r31
    a674:	f1 1c       	adc	r15, r1
    a676:	5e 01       	movw	r10, r28
    a678:	81 ed       	ldi	r24, 0xD1	; 209
    a67a:	a8 0e       	add	r10, r24
    a67c:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    a67e:	c7 01       	movw	r24, r14
    a680:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a684:	f6 01       	movw	r30, r12
    a686:	81 93       	st	Z+, r24
    a688:	6f 01       	movw	r12, r30
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    a68a:	c7 01       	movw	r24, r14
    a68c:	0b 96       	adiw	r24, 0x0b	; 11
    a68e:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a692:	f6 01       	movw	r30, r12
    a694:	82 87       	std	Z+10, r24	; 0x0a
    a696:	ff ef       	ldi	r31, 0xFF	; 255
    a698:	ef 1a       	sub	r14, r31
    a69a:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    a69c:	ea 14       	cp	r14, r10
    a69e:	fb 04       	cpc	r15, r11
    a6a0:	71 f7       	brne	.-36     	; 0xa67e <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    a6a2:	f8 01       	movw	r30, r16
    a6a4:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    a6a6:	c7 01       	movw	r24, r14
    a6a8:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a6ac:	f8 01       	movw	r30, r16
    a6ae:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    a6b0:	ce 01       	movw	r24, r28
    a6b2:	8e 52       	subi	r24, 0x2E	; 46
    a6b4:	9f 4f       	sbci	r25, 0xFF	; 255
    a6b6:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a6ba:	f8 2e       	mov	r15, r24
    a6bc:	ce 01       	movw	r24, r28
    a6be:	8d 52       	subi	r24, 0x2D	; 45
    a6c0:	9f 4f       	sbci	r25, 0xFF	; 255
    a6c2:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a6c6:	2f 2d       	mov	r18, r15
    a6c8:	30 e0       	ldi	r19, 0x00	; 0
    a6ca:	32 2f       	mov	r19, r18
    a6cc:	22 27       	eor	r18, r18
    a6ce:	82 0f       	add	r24, r18
    a6d0:	93 2f       	mov	r25, r19
    a6d2:	91 1d       	adc	r25, r1
    a6d4:	f8 01       	movw	r30, r16
    a6d6:	93 87       	std	Z+11, r25	; 0x0b
    a6d8:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    a6da:	ce 01       	movw	r24, r28
    a6dc:	84 52       	subi	r24, 0x24	; 36
    a6de:	9f 4f       	sbci	r25, 0xFF	; 255
    a6e0:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a6e4:	f8 01       	movw	r30, r16
    a6e6:	84 8b       	std	Z+20, r24	; 0x14
    a6e8:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    a6ea:	df 91       	pop	r29
    a6ec:	cf 91       	pop	r28
    a6ee:	1f 91       	pop	r17
    a6f0:	0f 91       	pop	r16
    a6f2:	ff 90       	pop	r15
    a6f4:	ef 90       	pop	r14
    a6f6:	df 90       	pop	r13
    a6f8:	cf 90       	pop	r12
    a6fa:	bf 90       	pop	r11
    a6fc:	af 90       	pop	r10
    a6fe:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    a700:	80 e0       	ldi	r24, 0x00	; 0
    a702:	f3 cf       	rjmp	.-26     	; 0xa6ea <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000a704 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    a704:	ef 92       	push	r14
    a706:	ff 92       	push	r15
    a708:	0f 93       	push	r16
    a70a:	1f 93       	push	r17
    a70c:	cf 93       	push	r28
    a70e:	df 93       	push	r29
    a710:	cd b7       	in	r28, 0x3d	; 61
    a712:	de b7       	in	r29, 0x3e	; 62
    a714:	6e 97       	sbiw	r28, 0x1e	; 30
    a716:	0f b6       	in	r0, 0x3f	; 63
    a718:	f8 94       	cli
    a71a:	de bf       	out	0x3e, r29	; 62
    a71c:	0f be       	out	0x3f, r0	; 63
    a71e:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    a720:	1f 8a       	std	Y+23, r1	; 0x17
    a722:	18 8e       	std	Y+24, r1	; 0x18
    a724:	19 8e       	std	Y+25, r1	; 0x19
    a726:	1a 8e       	std	Y+26, r1	; 0x1a
    a728:	1b 8e       	std	Y+27, r1	; 0x1b
    a72a:	1c 8e       	std	Y+28, r1	; 0x1c
    a72c:	1d 8e       	std	Y+29, r1	; 0x1d
    a72e:	1e 8e       	std	Y+30, r1	; 0x1e
    a730:	0b ed       	ldi	r16, 0xDB	; 219
    a732:	19 e0       	ldi	r17, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    a734:	ee 24       	eor	r14, r14
    a736:	ea 94       	dec	r14
    a738:	f8 01       	movw	r30, r16
    a73a:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    a73c:	b8 01       	movw	r22, r16
    a73e:	ce 01       	movw	r24, r28
    a740:	47 96       	adiw	r24, 0x17	; 23
    a742:	0e 94 52 23 	call	0x46a4	; 0x46a4 <tds_compare_rom(unsigned char*, unsigned char*)>
    a746:	81 11       	cpse	r24, r1
    a748:	14 c0       	rjmp	.+40     	; 0xa772 <tds_update_associate()+0x6e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    a74a:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    a74c:	be 01       	movw	r22, r28
    a74e:	6f 5f       	subi	r22, 0xFF	; 255
    a750:	7f 4f       	sbci	r23, 0xFF	; 255
    a752:	8f 2d       	mov	r24, r15
    a754:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    a758:	b8 01       	movw	r22, r16
    a75a:	ce 01       	movw	r24, r28
    a75c:	02 96       	adiw	r24, 0x02	; 2
    a75e:	0e 94 52 23 	call	0x46a4	; 0x46a4 <tds_compare_rom(unsigned char*, unsigned char*)>
    a762:	88 23       	and	r24, r24
    a764:	11 f0       	breq	.+4      	; 0xa76a <tds_update_associate()+0x66>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    a766:	f8 01       	movw	r30, r16
    a768:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    a76a:	f3 94       	inc	r15
    a76c:	f6 e0       	ldi	r31, 0x06	; 6
    a76e:	ff 12       	cpse	r15, r31
    a770:	ed cf       	rjmp	.-38     	; 0xa74c <tds_update_associate()+0x48>
    a772:	05 5f       	subi	r16, 0xF5	; 245
    a774:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    a776:	8a e0       	ldi	r24, 0x0A	; 10
    a778:	0d 31       	cpi	r16, 0x1D	; 29
    a77a:	18 07       	cpc	r17, r24
    a77c:	e9 f6       	brne	.-70     	; 0xa738 <tds_update_associate()+0x34>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    a77e:	6e 96       	adiw	r28, 0x1e	; 30
    a780:	0f b6       	in	r0, 0x3f	; 63
    a782:	f8 94       	cli
    a784:	de bf       	out	0x3e, r29	; 62
    a786:	0f be       	out	0x3f, r0	; 63
    a788:	cd bf       	out	0x3d, r28	; 61
    a78a:	df 91       	pop	r29
    a78c:	cf 91       	pop	r28
    a78e:	1f 91       	pop	r17
    a790:	0f 91       	pop	r16
    a792:	ff 90       	pop	r15
    a794:	ef 90       	pop	r14
    a796:	08 95       	ret

0000a798 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    a798:	af 92       	push	r10
    a79a:	bf 92       	push	r11
    a79c:	cf 92       	push	r12
    a79e:	df 92       	push	r13
    a7a0:	ef 92       	push	r14
    a7a2:	ff 92       	push	r15
    a7a4:	1f 93       	push	r17
    a7a6:	cf 93       	push	r28
    a7a8:	df 93       	push	r29
    a7aa:	cd b7       	in	r28, 0x3d	; 61
    a7ac:	de b7       	in	r29, 0x3e	; 62
    a7ae:	66 97       	sbiw	r28, 0x16	; 22
    a7b0:	0f b6       	in	r0, 0x3f	; 63
    a7b2:	f8 94       	cli
    a7b4:	de bf       	out	0x3e, r29	; 62
    a7b6:	0f be       	out	0x3f, r0	; 63
    a7b8:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    a7ba:	90 91 1d 0a 	lds	r25, 0x0A1D	; 0x800a1d <Global_HWwirenum>
    a7be:	89 17       	cp	r24, r25
    a7c0:	a0 f0       	brcs	.+40     	; 0xa7ea <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    a7c2:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    a7c4:	0e 94 82 53 	call	0xa704	; 0xa704 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:226
  return ret;
}
    a7c8:	81 2f       	mov	r24, r17
    a7ca:	66 96       	adiw	r28, 0x16	; 22
    a7cc:	0f b6       	in	r0, 0x3f	; 63
    a7ce:	f8 94       	cli
    a7d0:	de bf       	out	0x3e, r29	; 62
    a7d2:	0f be       	out	0x3f, r0	; 63
    a7d4:	cd bf       	out	0x3d, r28	; 61
    a7d6:	df 91       	pop	r29
    a7d8:	cf 91       	pop	r28
    a7da:	1f 91       	pop	r17
    a7dc:	ff 90       	pop	r15
    a7de:	ef 90       	pop	r14
    a7e0:	df 90       	pop	r13
    a7e2:	cf 90       	pop	r12
    a7e4:	bf 90       	pop	r11
    a7e6:	af 90       	pop	r10
    a7e8:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    a7ea:	a8 2e       	mov	r10, r24
    a7ec:	b1 2c       	mov	r11, r1
    a7ee:	2b e0       	ldi	r18, 0x0B	; 11
    a7f0:	82 9f       	mul	r24, r18
    a7f2:	c0 01       	movw	r24, r0
    a7f4:	11 24       	eor	r1, r1
    a7f6:	fc 01       	movw	r30, r24
    a7f8:	e5 52       	subi	r30, 0x25	; 37
    a7fa:	f6 4f       	sbci	r31, 0xF6	; 246
    a7fc:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    a7fe:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    a800:	be 01       	movw	r22, r28
    a802:	6f 5f       	subi	r22, 0xFF	; 255
    a804:	7f 4f       	sbci	r23, 0xFF	; 255
    a806:	81 2f       	mov	r24, r17
    a808:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    a80c:	b7 01       	movw	r22, r14
    a80e:	ce 01       	movw	r24, r28
    a810:	02 96       	adiw	r24, 0x02	; 2
    a812:	0e 94 52 23 	call	0x46a4	; 0x46a4 <tds_compare_rom(unsigned char*, unsigned char*)>
    a816:	81 11       	cpse	r24, r1
    a818:	d4 cf       	rjmp	.-88     	; 0xa7c2 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    a81a:	1f 5f       	subi	r17, 0xFF	; 255
    a81c:	16 30       	cpi	r17, 0x06	; 6
    a81e:	81 f7       	brne	.-32     	; 0xa800 <tds_associate(unsigned char)+0x68>
    a820:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    a822:	2b e0       	ldi	r18, 0x0B	; 11
    a824:	2a 9d       	mul	r18, r10
    a826:	c0 01       	movw	r24, r0
    a828:	2b 9d       	mul	r18, r11
    a82a:	90 0d       	add	r25, r0
    a82c:	11 24       	eor	r1, r1
    a82e:	fc 01       	movw	r30, r24
    a830:	ec 51       	subi	r30, 0x1C	; 28
    a832:	f6 4f       	sbci	r31, 0xF6	; 246
    a834:	6f 01       	movw	r12, r30
    a836:	03 c0       	rjmp	.+6      	; 0xa83e <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    a838:	1f 5f       	subi	r17, 0xFF	; 255
    a83a:	16 30       	cpi	r17, 0x06	; 6
    a83c:	11 f2       	breq	.-124    	; 0xa7c2 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    a83e:	be 01       	movw	r22, r28
    a840:	6f 5f       	subi	r22, 0xFF	; 255
    a842:	7f 4f       	sbci	r23, 0xFF	; 255
    a844:	81 2f       	mov	r24, r17
    a846:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    a84a:	89 81       	ldd	r24, Y+1	; 0x01
    a84c:	81 11       	cpse	r24, r1
    a84e:	f4 cf       	rjmp	.-24     	; 0xa838 <tds_associate(unsigned char)+0xa0>
    a850:	f6 01       	movw	r30, r12
    a852:	80 81       	ld	r24, Z
    a854:	81 30       	cpi	r24, 0x01	; 1
    a856:	81 f7       	brne	.-32     	; 0xa838 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    a858:	89 83       	std	Y+1, r24	; 0x01
    a85a:	fe 01       	movw	r30, r28
    a85c:	32 96       	adiw	r30, 0x02	; 2
    a85e:	90 e0       	ldi	r25, 0x00	; 0
    a860:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    a862:	d7 01       	movw	r26, r14
    a864:	a8 0f       	add	r26, r24
    a866:	b9 1f       	adc	r27, r25
    a868:	2c 91       	ld	r18, X
    a86a:	21 93       	st	Z+, r18
    a86c:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    a86e:	88 30       	cpi	r24, 0x08	; 8
    a870:	91 05       	cpc	r25, r1
    a872:	b9 f7       	brne	.-18     	; 0xa862 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    a874:	2b e0       	ldi	r18, 0x0B	; 11
    a876:	12 9f       	mul	r17, r18
    a878:	f0 01       	movw	r30, r0
    a87a:	11 24       	eor	r1, r1
    a87c:	e5 52       	subi	r30, 0x25	; 37
    a87e:	f6 4f       	sbci	r31, 0xF6	; 246
    a880:	e0 85       	ldd	r30, Z+8	; 0x08
    a882:	f0 e0       	ldi	r31, 0x00	; 0
    a884:	ee 0f       	add	r30, r30
    a886:	ff 1f       	adc	r31, r31
    a888:	ef 56       	subi	r30, 0x6F	; 111
    a88a:	f6 4f       	sbci	r31, 0xF6	; 246
    a88c:	80 81       	ld	r24, Z
    a88e:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    a890:	be 01       	movw	r22, r28
    a892:	6f 5f       	subi	r22, 0xFF	; 255
    a894:	7f 4f       	sbci	r23, 0xFF	; 255
    a896:	81 2f       	mov	r24, r17
    a898:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    a89c:	3e e1       	ldi	r19, 0x1E	; 30
    a89e:	13 9f       	mul	r17, r19
    a8a0:	a0 01       	movw	r20, r0
    a8a2:	11 24       	eor	r1, r1
    a8a4:	90 e0       	ldi	r25, 0x00	; 0
    a8a6:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    a8a8:	20 e2       	ldi	r18, 0x20	; 32
    a8aa:	3e e4       	ldi	r19, 0x4E	; 78
    a8ac:	fc 01       	movw	r30, r24
    a8ae:	ee 0f       	add	r30, r30
    a8b0:	ff 1f       	adc	r31, r31
    a8b2:	e4 0f       	add	r30, r20
    a8b4:	f5 1f       	adc	r31, r21
    a8b6:	eb 5c       	subi	r30, 0xCB	; 203
    a8b8:	f5 4f       	sbci	r31, 0xF5	; 245
    a8ba:	30 87       	std	Z+8, r19	; 0x08
    a8bc:	27 83       	std	Z+7, r18	; 0x07
    a8be:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    a8c0:	8a 30       	cpi	r24, 0x0A	; 10
    a8c2:	91 05       	cpc	r25, r1
    a8c4:	99 f7       	brne	.-26     	; 0xa8ac <tds_associate(unsigned char)+0x114>
    a8c6:	7e cf       	rjmp	.-260    	; 0xa7c4 <tds_associate(unsigned char)+0x2c>

0000a8c8 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    a8c8:	1f 93       	push	r17
    a8ca:	cf 93       	push	r28
    a8cc:	df 93       	push	r29
    a8ce:	cd b7       	in	r28, 0x3d	; 61
    a8d0:	de b7       	in	r29, 0x3e	; 62
    a8d2:	66 97       	sbiw	r28, 0x16	; 22
    a8d4:	0f b6       	in	r0, 0x3f	; 63
    a8d6:	f8 94       	cli
    a8d8:	de bf       	out	0x3e, r29	; 62
    a8da:	0f be       	out	0x3f, r0	; 63
    a8dc:	cd bf       	out	0x3d, r28	; 61
    a8de:	18 2f       	mov	r17, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a8e0:	be 01       	movw	r22, r28
    a8e2:	6f 5f       	subi	r22, 0xFF	; 255
    a8e4:	7f 4f       	sbci	r23, 0xFF	; 255
    a8e6:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    a8ea:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    a8ec:	63 e8       	ldi	r22, 0x83	; 131
    a8ee:	73 e0       	ldi	r23, 0x03	; 3
    a8f0:	ce 01       	movw	r24, r28
    a8f2:	0d 96       	adiw	r24, 0x0d	; 13
    a8f4:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    a8f8:	1c 86       	std	Y+12, r1	; 0x0c
    a8fa:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    a8fc:	8a e0       	ldi	r24, 0x0A	; 10
    a8fe:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    a900:	1a 82       	std	Y+2, r1	; 0x02
    a902:	1b 82       	std	Y+3, r1	; 0x03
    a904:	1c 82       	std	Y+4, r1	; 0x04
    a906:	1d 82       	std	Y+5, r1	; 0x05
    a908:	1e 82       	std	Y+6, r1	; 0x06
    a90a:	1f 82       	std	Y+7, r1	; 0x07
    a90c:	18 86       	std	Y+8, r1	; 0x08
    a90e:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    a910:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    a912:	be 01       	movw	r22, r28
    a914:	6f 5f       	subi	r22, 0xFF	; 255
    a916:	7f 4f       	sbci	r23, 0xFF	; 255
    a918:	81 2f       	mov	r24, r17
    a91a:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    a91e:	0e 94 82 53 	call	0xa704	; 0xa704 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:132
}
    a922:	66 96       	adiw	r28, 0x16	; 22
    a924:	0f b6       	in	r0, 0x3f	; 63
    a926:	f8 94       	cli
    a928:	de bf       	out	0x3e, r29	; 62
    a92a:	0f be       	out	0x3f, r0	; 63
    a92c:	cd bf       	out	0x3d, r28	; 61
    a92e:	df 91       	pop	r29
    a930:	cf 91       	pop	r28
    a932:	1f 91       	pop	r17
    a934:	08 95       	ret

0000a936 <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    a936:	8b e0       	ldi	r24, 0x0B	; 11
    a938:	68 9f       	mul	r22, r24
    a93a:	f0 01       	movw	r30, r0
    a93c:	11 24       	eor	r1, r1
    a93e:	e5 52       	subi	r30, 0x25	; 37
    a940:	f6 4f       	sbci	r31, 0xF6	; 246
    a942:	82 85       	ldd	r24, Z+10	; 0x0a
    a944:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4681
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    a948:	0c 94 46 31 	jmp	0x628c	; 0x628c <MenuHistoryPrevMenu()>

0000a94c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4631
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , char *line1, char *line2)
{
    a94c:	8f 92       	push	r8
    a94e:	9f 92       	push	r9
    a950:	af 92       	push	r10
    a952:	bf 92       	push	r11
    a954:	cf 92       	push	r12
    a956:	df 92       	push	r13
    a958:	ef 92       	push	r14
    a95a:	ff 92       	push	r15
    a95c:	0f 93       	push	r16
    a95e:	1f 93       	push	r17
    a960:	cf 93       	push	r28
    a962:	df 93       	push	r29
    a964:	cd b7       	in	r28, 0x3d	; 61
    a966:	de b7       	in	r29, 0x3e	; 62
    a968:	e0 97       	sbiw	r28, 0x30	; 48
    a96a:	0f b6       	in	r0, 0x3f	; 63
    a96c:	f8 94       	cli
    a96e:	de bf       	out	0x3e, r29	; 62
    a970:	0f be       	out	0x3f, r0	; 63
    a972:	cd bf       	out	0x3d, r28	; 61
    a974:	18 2f       	mov	r17, r24
    a976:	94 2e       	mov	r9, r20
    a978:	85 2e       	mov	r8, r21
    a97a:	79 01       	movw	r14, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4633
  char str2[26];
  strcpy_P(line1, text_not_used);
    a97c:	6d e3       	ldi	r22, 0x3D	; 61
    a97e:	74 e3       	ldi	r23, 0x34	; 52
    a980:	84 2f       	mov	r24, r20
    a982:	95 2f       	mov	r25, r21
    a984:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4634
  strcpy(line2, "-");
    a988:	64 e7       	ldi	r22, 0x74	; 116
    a98a:	73 e0       	ldi	r23, 0x03	; 3
    a98c:	c7 01       	movw	r24, r14
    a98e:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4635
  if (w_rom[args1].used == 1)
    a992:	4b e0       	ldi	r20, 0x0B	; 11
    a994:	41 9f       	mul	r20, r17
    a996:	c0 01       	movw	r24, r0
    a998:	11 24       	eor	r1, r1
    a99a:	9c 01       	movw	r18, r24
    a99c:	25 52       	subi	r18, 0x25	; 37
    a99e:	36 4f       	sbci	r19, 0xF6	; 246
    a9a0:	69 01       	movw	r12, r18
    a9a2:	f9 01       	movw	r30, r18
    a9a4:	81 85       	ldd	r24, Z+9	; 0x09
    a9a6:	81 30       	cpi	r24, 0x01	; 1
    a9a8:	c9 f5       	brne	.+114    	; 0xaa1c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4637
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    a9aa:	a9 01       	movw	r20, r18
    a9ac:	00 e1       	ldi	r16, 0x10	; 16
    a9ae:	28 e0       	ldi	r18, 0x08	; 8
    a9b0:	6a e3       	ldi	r22, 0x3A	; 58
    a9b2:	ce 01       	movw	r24, r28
    a9b4:	01 96       	adiw	r24, 0x01	; 1
    a9b6:	5c 01       	movw	r10, r24
    a9b8:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4638
    sprintf(line1, "%d: %s", args1, str2);
    a9bc:	bf 92       	push	r11
    a9be:	af 92       	push	r10
    a9c0:	1f 92       	push	r1
    a9c2:	1f 93       	push	r17
    a9c4:	80 ea       	ldi	r24, 0xA0	; 160
    a9c6:	93 e0       	ldi	r25, 0x03	; 3
    a9c8:	9f 93       	push	r25
    a9ca:	8f 93       	push	r24
    a9cc:	8f 92       	push	r8
    a9ce:	9f 92       	push	r9
    a9d0:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4640

    if (w_rom[args1].tds_idx != 255)
    a9d4:	0f b6       	in	r0, 0x3f	; 63
    a9d6:	f8 94       	cli
    a9d8:	de bf       	out	0x3e, r29	; 62
    a9da:	0f be       	out	0x3f, r0	; 63
    a9dc:	cd bf       	out	0x3d, r28	; 61
    a9de:	f6 01       	movw	r30, r12
    a9e0:	82 85       	ldd	r24, Z+10	; 0x0a
    a9e2:	8f 3f       	cpi	r24, 0xFF	; 255
    a9e4:	71 f1       	breq	.+92     	; 0xaa42 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4642
    {
      strcpy_P(line2, text_nastavit_tds);
    a9e6:	6a e2       	ldi	r22, 0x2A	; 42
    a9e8:	74 e3       	ldi	r23, 0x34	; 52
    a9ea:	c7 01       	movw	r24, r14
    a9ec:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    a9f0:	be 01       	movw	r22, r28
    a9f2:	65 5e       	subi	r22, 0xE5	; 229
    a9f4:	7f 4f       	sbci	r23, 0xFF	; 255
    a9f6:	f6 01       	movw	r30, r12
    a9f8:	82 85       	ldd	r24, Z+10	; 0x0a
    a9fa:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    a9fe:	be 01       	movw	r22, r28
    aa00:	69 5d       	subi	r22, 0xD9	; 217
    aa02:	7f 4f       	sbci	r23, 0xFF	; 255
    aa04:	c5 01       	movw	r24, r10
    aa06:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4644
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    aa0a:	62 e4       	ldi	r22, 0x42	; 66
    aa0c:	76 e0       	ldi	r23, 0x06	; 6
    aa0e:	c7 01       	movw	r24, r14
    aa10:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4645
      strcat(line2, str2);
    aa14:	b5 01       	movw	r22, r10
    aa16:	c7 01       	movw	r24, r14
    aa18:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4650
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    aa1c:	e0 96       	adiw	r28, 0x30	; 48
    aa1e:	0f b6       	in	r0, 0x3f	; 63
    aa20:	f8 94       	cli
    aa22:	de bf       	out	0x3e, r29	; 62
    aa24:	0f be       	out	0x3f, r0	; 63
    aa26:	cd bf       	out	0x3d, r28	; 61
    aa28:	df 91       	pop	r29
    aa2a:	cf 91       	pop	r28
    aa2c:	1f 91       	pop	r17
    aa2e:	0f 91       	pop	r16
    aa30:	ff 90       	pop	r15
    aa32:	ef 90       	pop	r14
    aa34:	df 90       	pop	r13
    aa36:	cf 90       	pop	r12
    aa38:	bf 90       	pop	r11
    aa3a:	af 90       	pop	r10
    aa3c:	9f 90       	pop	r9
    aa3e:	8f 90       	pop	r8
    aa40:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4648
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    aa42:	6a e4       	ldi	r22, 0x4A	; 74
    aa44:	74 e3       	ldi	r23, 0x34	; 52
    aa46:	c7 01       	movw	r24, r14
    aa48:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
    aa4c:	e7 cf       	rjmp	.-50     	; 0xaa1c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>

0000aa4e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4256
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    aa4e:	3f 92       	push	r3
    aa50:	4f 92       	push	r4
    aa52:	5f 92       	push	r5
    aa54:	6f 92       	push	r6
    aa56:	7f 92       	push	r7
    aa58:	8f 92       	push	r8
    aa5a:	9f 92       	push	r9
    aa5c:	af 92       	push	r10
    aa5e:	bf 92       	push	r11
    aa60:	cf 92       	push	r12
    aa62:	df 92       	push	r13
    aa64:	ef 92       	push	r14
    aa66:	ff 92       	push	r15
    aa68:	0f 93       	push	r16
    aa6a:	1f 93       	push	r17
    aa6c:	cf 93       	push	r28
    aa6e:	df 93       	push	r29
    aa70:	cd b7       	in	r28, 0x3d	; 61
    aa72:	de b7       	in	r29, 0x3e	; 62
    aa74:	ca 54       	subi	r28, 0x4A	; 74
    aa76:	d1 09       	sbc	r29, r1
    aa78:	0f b6       	in	r0, 0x3f	; 63
    aa7a:	f8 94       	cli
    aa7c:	de bf       	out	0x3e, r29	; 62
    aa7e:	0f be       	out	0x3f, r0	; 63
    aa80:	cd bf       	out	0x3d, r28	; 61
    aa82:	4c 01       	movw	r8, r24
    aa84:	3b 01       	movw	r6, r22
    aa86:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    aa88:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    aa8c:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4262
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    aa90:	26 0f       	add	r18, r22
    aa92:	37 1f       	adc	r19, r23
    aa94:	48 0f       	add	r20, r24
    aa96:	59 1f       	adc	r21, r25
    aa98:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  if (get_tds18s20(args2, &tds) == 1)
    aa9c:	be 01       	movw	r22, r28
    aa9e:	6b 5c       	subi	r22, 0xCB	; 203
    aaa0:	7f 4f       	sbci	r23, 0xFF	; 255
    aaa2:	8e 2d       	mov	r24, r14
    aaa4:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    aaa8:	23 01       	movw	r4, r6
    aaaa:	28 e2       	ldi	r18, 0x28	; 40
    aaac:	42 0e       	add	r4, r18
    aaae:	51 1c       	adc	r5, r1
    aab0:	9e 01       	movw	r18, r28
    aab2:	2f 5f       	subi	r18, 0xFF	; 255
    aab4:	3f 4f       	sbci	r19, 0xFF	; 255
    aab6:	59 01       	movw	r10, r18
    aab8:	81 30       	cpi	r24, 0x01	; 1
    aaba:	09 f0       	breq	.+2      	; 0xaabe <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    aabc:	ca c0       	rjmp	.+404    	; 0xac52 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4265
  {
    createString(str2, ':', tds.rom, 8, 16);
    aabe:	6e 01       	movw	r12, r28
    aac0:	3b e1       	ldi	r19, 0x1B	; 27
    aac2:	c3 0e       	add	r12, r19
    aac4:	d1 1c       	adc	r13, r1
    aac6:	00 e1       	ldi	r16, 0x10	; 16
    aac8:	28 e0       	ldi	r18, 0x08	; 8
    aaca:	ae 01       	movw	r20, r28
    aacc:	4a 5c       	subi	r20, 0xCA	; 202
    aace:	5f 4f       	sbci	r21, 0xFF	; 255
    aad0:	6a e3       	ldi	r22, 0x3A	; 58
    aad2:	c6 01       	movw	r24, r12
    aad4:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4266
    sprintf(str1, "rom: %s", str2);
    aad8:	df 92       	push	r13
    aada:	cf 92       	push	r12
    aadc:	87 ea       	ldi	r24, 0xA7	; 167
    aade:	93 e0       	ldi	r25, 0x03	; 3
    aae0:	9f 93       	push	r25
    aae2:	8f 93       	push	r24
    aae4:	bf 92       	push	r11
    aae6:	af 92       	push	r10
    aae8:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4267
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    aaec:	8a e0       	ldi	r24, 0x0A	; 10
    aaee:	88 0e       	add	r8, r24
    aaf0:	91 1c       	adc	r9, r1
    aaf2:	a3 01       	movw	r20, r6
    aaf4:	4b 5a       	subi	r20, 0xAB	; 171
    aaf6:	5f 4f       	sbci	r21, 0xFF	; 255
    aaf8:	ee 24       	eor	r14, r14
    aafa:	ea 94       	dec	r14
    aafc:	fe 2c       	mov	r15, r14
    aafe:	10 e0       	ldi	r17, 0x00	; 0
    ab00:	00 e0       	ldi	r16, 0x00	; 0
    ab02:	21 e0       	ldi	r18, 0x01	; 1
    ab04:	b4 01       	movw	r22, r8
    ab06:	c5 01       	movw	r24, r10
    ab08:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4269
    ///
    strcpy_P(str2, text_nazev);
    ab0c:	63 e2       	ldi	r22, 0x23	; 35
    ab0e:	74 e3       	ldi	r23, 0x34	; 52
    ab10:	c6 01       	movw	r24, r12
    ab12:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
    sprintf(str1, "%s: %s", str2, tds.name);
    ab16:	85 e3       	ldi	r24, 0x35	; 53
    ab18:	90 e0       	ldi	r25, 0x00	; 0
    ab1a:	8c 0f       	add	r24, r28
    ab1c:	9d 1f       	adc	r25, r29
    ab1e:	0c 96       	adiw	r24, 0x0c	; 12
    ab20:	9f 93       	push	r25
    ab22:	8f 93       	push	r24
    ab24:	df 92       	push	r13
    ab26:	cf 92       	push	r12
    ab28:	8f ea       	ldi	r24, 0xAF	; 175
    ab2a:	93 e0       	ldi	r25, 0x03	; 3
    ab2c:	9f 93       	push	r25
    ab2e:	8f 93       	push	r24
    ab30:	bf 92       	push	r11
    ab32:	af 92       	push	r10
    ab34:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    ab38:	22 e0       	ldi	r18, 0x02	; 2
    ab3a:	a2 01       	movw	r20, r4
    ab3c:	b4 01       	movw	r22, r8
    ab3e:	c5 01       	movw	r24, r10
    ab40:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4273
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    ab44:	21 96       	adiw	r28, 0x01	; 1
    ab46:	6e ad       	ldd	r22, Y+62	; 0x3e
    ab48:	7f ad       	ldd	r23, Y+63	; 0x3f
    ab4a:	21 97       	sbiw	r28, 0x01	; 1
    ab4c:	07 2e       	mov	r0, r23
    ab4e:	00 0c       	add	r0, r0
    ab50:	88 0b       	sbc	r24, r24
    ab52:	99 0b       	sbc	r25, r25
    ab54:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    ab58:	20 e0       	ldi	r18, 0x00	; 0
    ab5a:	30 e0       	ldi	r19, 0x00	; 0
    ab5c:	4a e7       	ldi	r20, 0x7A	; 122
    ab5e:	54 e4       	ldi	r21, 0x44	; 68
    ab60:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
    dtostrf(te, 4, 2, str1);
    ab64:	85 01       	movw	r16, r10
    ab66:	22 e0       	ldi	r18, 0x02	; 2
    ab68:	44 e0       	ldi	r20, 0x04	; 4
    ab6a:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
    strcat(str1, "C");
    ab6e:	6a ee       	ldi	r22, 0xEA	; 234
    ab70:	76 e0       	ldi	r23, 0x06	; 6
    ab72:	c5 01       	movw	r24, r10
    ab74:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4276
    strcpy_P(str2, temp_offset_short);
    ab78:	65 ef       	ldi	r22, 0xF5	; 245
    ab7a:	73 e3       	ldi	r23, 0x33	; 51
    ab7c:	c6 01       	movw	r24, r12
    ab7e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4277
    strcat(str2, str1);
    ab82:	b5 01       	movw	r22, r10
    ab84:	c6 01       	movw	r24, r12
    ab86:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    ab8a:	a3 01       	movw	r20, r6
    ab8c:	44 5c       	subi	r20, 0xC4	; 196
    ab8e:	5f 4f       	sbci	r21, 0xFF	; 255
    ab90:	10 e0       	ldi	r17, 0x00	; 0
    ab92:	00 e0       	ldi	r16, 0x00	; 0
    ab94:	22 e0       	ldi	r18, 0x02	; 2
    ab96:	b4 01       	movw	r22, r8
    ab98:	c6 01       	movw	r24, r12
    ab9a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
    ///
    strcpy_P(str2, nastaveni_tds_period);
    ab9e:	66 ee       	ldi	r22, 0xE6	; 230
    aba0:	73 e3       	ldi	r23, 0x33	; 51
    aba2:	c6 01       	movw	r24, r12
    aba4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
    sprintf(str1, "%s: %ds", str2, tds.period);
    aba8:	2a 96       	adiw	r28, 0x0a	; 10
    abaa:	8f ad       	ldd	r24, Y+63	; 0x3f
    abac:	2a 97       	sbiw	r28, 0x0a	; 10
    abae:	1f 92       	push	r1
    abb0:	8f 93       	push	r24
    abb2:	df 92       	push	r13
    abb4:	cf 92       	push	r12
    abb6:	86 eb       	ldi	r24, 0xB6	; 182
    abb8:	93 e0       	ldi	r25, 0x03	; 3
    abba:	9f 93       	push	r25
    abbc:	8f 93       	push	r24
    abbe:	bf 92       	push	r11
    abc0:	af 92       	push	r10
    abc2:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    abc6:	a3 01       	movw	r20, r6
    abc8:	4c 59       	subi	r20, 0x9C	; 156
    abca:	5f 4f       	sbci	r21, 0xFF	; 255
    abcc:	22 e0       	ldi	r18, 0x02	; 2
    abce:	b4 01       	movw	r22, r8
    abd0:	c5 01       	movw	r24, r10
    abd2:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285

    ///
    strcpy_P(str2, text_online);
    abd6:	6d ef       	ldi	r22, 0xFD	; 253
    abd8:	73 e3       	ldi	r23, 0x33	; 51
    abda:	c6 01       	movw	r24, r12
    abdc:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    abe0:	9e e1       	ldi	r25, 0x1E	; 30
    abe2:	39 9e       	mul	r3, r25
    abe4:	f0 01       	movw	r30, r0
    abe6:	11 24       	eor	r1, r1
    abe8:	eb 5c       	subi	r30, 0xCB	; 203
    abea:	f5 4f       	sbci	r31, 0xF5	; 245
    abec:	83 8d       	ldd	r24, Z+27	; 0x1b
    abee:	1f 92       	push	r1
    abf0:	8f 93       	push	r24
    abf2:	df 92       	push	r13
    abf4:	cf 92       	push	r12
    abf6:	8e eb       	ldi	r24, 0xBE	; 190
    abf8:	93 e0       	ldi	r25, 0x03	; 3
    abfa:	9f 93       	push	r25
    abfc:	8f 93       	push	r24
    abfe:	bf 92       	push	r11
    ac00:	af 92       	push	r10
    ac02:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    ac06:	a3 01       	movw	r20, r6
    ac08:	48 58       	subi	r20, 0x88	; 136
    ac0a:	5f 4f       	sbci	r21, 0xFF	; 255
    ac0c:	22 e0       	ldi	r18, 0x02	; 2
    ac0e:	b4 01       	movw	r22, r8
    ac10:	c5 01       	movw	r24, r10
    ac12:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ac16:	0f b6       	in	r0, 0x3f	; 63
    ac18:	f8 94       	cli
    ac1a:	de bf       	out	0x3e, r29	; 62
    ac1c:	0f be       	out	0x3f, r0	; 63
    ac1e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4294
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    ac20:	c6 5b       	subi	r28, 0xB6	; 182
    ac22:	df 4f       	sbci	r29, 0xFF	; 255
    ac24:	0f b6       	in	r0, 0x3f	; 63
    ac26:	f8 94       	cli
    ac28:	de bf       	out	0x3e, r29	; 62
    ac2a:	0f be       	out	0x3f, r0	; 63
    ac2c:	cd bf       	out	0x3d, r28	; 61
    ac2e:	df 91       	pop	r29
    ac30:	cf 91       	pop	r28
    ac32:	1f 91       	pop	r17
    ac34:	0f 91       	pop	r16
    ac36:	ff 90       	pop	r15
    ac38:	ef 90       	pop	r14
    ac3a:	df 90       	pop	r13
    ac3c:	cf 90       	pop	r12
    ac3e:	bf 90       	pop	r11
    ac40:	af 90       	pop	r10
    ac42:	9f 90       	pop	r9
    ac44:	8f 90       	pop	r8
    ac46:	7f 90       	pop	r7
    ac48:	6f 90       	pop	r6
    ac4a:	5f 90       	pop	r5
    ac4c:	4f 90       	pop	r4
    ac4e:	3f 90       	pop	r3
    ac50:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    ac52:	60 ee       	ldi	r22, 0xE0	; 224
    ac54:	73 e3       	ldi	r23, 0x33	; 51
    ac56:	c9 01       	movw	r24, r18
    ac58:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4292
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    ac5c:	b4 01       	movw	r22, r8
    ac5e:	67 5e       	subi	r22, 0xE7	; 231
    ac60:	7f 4f       	sbci	r23, 0xFF	; 255
    ac62:	ee 24       	eor	r14, r14
    ac64:	ea 94       	dec	r14
    ac66:	fe 2c       	mov	r15, r14
    ac68:	00 e0       	ldi	r16, 0x00	; 0
    ac6a:	18 ef       	ldi	r17, 0xF8	; 248
    ac6c:	24 e0       	ldi	r18, 0x04	; 4
    ac6e:	a2 01       	movw	r20, r4
    ac70:	c5 01       	movw	r24, r10
    ac72:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    ac76:	d4 cf       	rjmp	.-88     	; 0xac20 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d2>

0000ac78 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4238
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    ac78:	af 92       	push	r10
    ac7a:	bf 92       	push	r11
    ac7c:	cf 92       	push	r12
    ac7e:	df 92       	push	r13
    ac80:	ef 92       	push	r14
    ac82:	ff 92       	push	r15
    ac84:	0f 93       	push	r16
    ac86:	1f 93       	push	r17
    ac88:	cf 93       	push	r28
    ac8a:	df 93       	push	r29
    ac8c:	cd b7       	in	r28, 0x3d	; 61
    ac8e:	de b7       	in	r29, 0x3e	; 62
    ac90:	ca 54       	subi	r28, 0x4A	; 74
    ac92:	d1 09       	sbc	r29, r1
    ac94:	0f b6       	in	r0, 0x3f	; 63
    ac96:	f8 94       	cli
    ac98:	de bf       	out	0x3e, r29	; 62
    ac9a:	0f be       	out	0x3f, r0	; 63
    ac9c:	cd bf       	out	0x3d, r28	; 61
    ac9e:	6c 01       	movw	r12, r24
    aca0:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    aca2:	be 01       	movw	r22, r28
    aca4:	6b 5c       	subi	r22, 0xCB	; 203
    aca6:	7f 4f       	sbci	r23, 0xFF	; 255
    aca8:	8e 2d       	mov	r24, r14
    acaa:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    acae:	81 30       	cpi	r24, 0x01	; 1
    acb0:	d9 f5       	brne	.+118    	; 0xad28 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4246
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    acb2:	8e e1       	ldi	r24, 0x1E	; 30
    acb4:	e8 9e       	mul	r14, r24
    acb6:	f0 01       	movw	r30, r0
    acb8:	11 24       	eor	r1, r1
    acba:	eb 5c       	subi	r30, 0xCB	; 203
    acbc:	f5 4f       	sbci	r31, 0xF5	; 245
    acbe:	65 81       	ldd	r22, Z+5	; 0x05
    acc0:	76 81       	ldd	r23, Z+6	; 0x06
    acc2:	07 2e       	mov	r0, r23
    acc4:	00 0c       	add	r0, r0
    acc6:	88 0b       	sbc	r24, r24
    acc8:	99 0b       	sbc	r25, r25
    acca:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    acce:	20 e0       	ldi	r18, 0x00	; 0
    acd0:	30 e0       	ldi	r19, 0x00	; 0
    acd2:	4a e7       	ldi	r20, 0x7A	; 122
    acd4:	54 e4       	ldi	r21, 0x44	; 68
    acd6:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4247
    dtostrf(te, 4, 2, str1);
    acda:	8e 01       	movw	r16, r28
    acdc:	05 5e       	subi	r16, 0xE5	; 229
    acde:	1f 4f       	sbci	r17, 0xFF	; 255
    ace0:	22 e0       	ldi	r18, 0x02	; 2
    ace2:	44 e0       	ldi	r20, 0x04	; 4
    ace4:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248
    strcat(str1, "C");
    ace8:	6a ee       	ldi	r22, 0xEA	; 234
    acea:	76 e0       	ldi	r23, 0x06	; 6
    acec:	c8 01       	movw	r24, r16
    acee:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4249
    strcpy_P(str2, current_temp_short);
    acf2:	6a e1       	ldi	r22, 0x1A	; 26
    acf4:	74 e3       	ldi	r23, 0x34	; 52
    acf6:	ce 01       	movw	r24, r28
    acf8:	01 96       	adiw	r24, 0x01	; 1
    acfa:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4250
    strcat(str2, str1);
    acfe:	b8 01       	movw	r22, r16
    ad00:	ce 01       	movw	r24, r28
    ad02:	01 96       	adiw	r24, 0x01	; 1
    ad04:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    ad08:	a5 01       	movw	r20, r10
    ad0a:	44 57       	subi	r20, 0x74	; 116
    ad0c:	5f 4f       	sbci	r21, 0xFF	; 255
    ad0e:	b6 01       	movw	r22, r12
    ad10:	66 5f       	subi	r22, 0xF6	; 246
    ad12:	7f 4f       	sbci	r23, 0xFF	; 255
    ad14:	ee 24       	eor	r14, r14
    ad16:	ea 94       	dec	r14
    ad18:	fe 2c       	mov	r15, r14
    ad1a:	10 e0       	ldi	r17, 0x00	; 0
    ad1c:	00 e0       	ldi	r16, 0x00	; 0
    ad1e:	22 e0       	ldi	r18, 0x02	; 2
    ad20:	ce 01       	movw	r24, r28
    ad22:	01 96       	adiw	r24, 0x01	; 1
    ad24:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4253
  }
}
    ad28:	c6 5b       	subi	r28, 0xB6	; 182
    ad2a:	df 4f       	sbci	r29, 0xFF	; 255
    ad2c:	0f b6       	in	r0, 0x3f	; 63
    ad2e:	f8 94       	cli
    ad30:	de bf       	out	0x3e, r29	; 62
    ad32:	0f be       	out	0x3f, r0	; 63
    ad34:	cd bf       	out	0x3d, r28	; 61
    ad36:	df 91       	pop	r29
    ad38:	cf 91       	pop	r28
    ad3a:	1f 91       	pop	r17
    ad3c:	0f 91       	pop	r16
    ad3e:	ff 90       	pop	r15
    ad40:	ef 90       	pop	r14
    ad42:	df 90       	pop	r13
    ad44:	cf 90       	pop	r12
    ad46:	bf 90       	pop	r11
    ad48:	af 90       	pop	r10
    ad4a:	08 95       	ret

0000ad4c <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1771
  dialog_save_variable_function = &menu_tds_save_period;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    ad4c:	1f 93       	push	r17
    ad4e:	cf 93       	push	r28
    ad50:	df 93       	push	r29
    ad52:	cd b7       	in	r28, 0x3d	; 61
    ad54:	de b7       	in	r29, 0x3e	; 62
    ad56:	a0 97       	sbiw	r28, 0x20	; 32
    ad58:	0f b6       	in	r0, 0x3f	; 63
    ad5a:	f8 94       	cli
    ad5c:	de bf       	out	0x3e, r29	; 62
    ad5e:	0f be       	out	0x3f, r0	; 63
    ad60:	cd bf       	out	0x3d, r28	; 61
    ad62:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ad64:	be 01       	movw	r22, r28
    ad66:	6f 5f       	subi	r22, 0xFF	; 255
    ad68:	7f 4f       	sbci	r23, 0xFF	; 255
    ad6a:	81 2f       	mov	r24, r17
    ad6c:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    ad70:	be 01       	movw	r22, r28
    ad72:	63 5f       	subi	r22, 0xF3	; 243
    ad74:	7f 4f       	sbci	r23, 0xFF	; 255
    ad76:	ce 01       	movw	r24, r28
    ad78:	47 96       	adiw	r24, 0x17	; 23
    ad7a:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    ad7e:	60 e0       	ldi	r22, 0x00	; 0
    ad80:	87 e6       	ldi	r24, 0x67	; 103
    ad82:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1694
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    ad86:	be 01       	movw	r22, r28
    ad88:	69 5e       	subi	r22, 0xE9	; 233
    ad8a:	7f 4f       	sbci	r23, 0xFF	; 255
    ad8c:	8b ef       	ldi	r24, 0xFB	; 251
    ad8e:	98 e0       	ldi	r25, 0x08	; 8
    ad90:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
  dialog_set_string_max_length = max_length;
    ad94:	88 e0       	ldi	r24, 0x08	; 8
    ad96:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1696
  dialog_set_string_args = idx;
    ad9a:	10 93 0b 09 	sts	0x090B, r17	; 0x80090b <dialog_set_string_args>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
{
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
    ad9e:	87 e6       	ldi	r24, 0x67	; 103
    ada0:	97 e5       	ldi	r25, 0x57	; 87
    ada2:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <dialog_save_variable_function+0x1>
    ada6:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
}
    adaa:	a0 96       	adiw	r28, 0x20	; 32
    adac:	0f b6       	in	r0, 0x3f	; 63
    adae:	f8 94       	cli
    adb0:	de bf       	out	0x3e, r29	; 62
    adb2:	0f be       	out	0x3f, r0	; 63
    adb4:	cd bf       	out	0x3d, r28	; 61
    adb6:	df 91       	pop	r29
    adb8:	cf 91       	pop	r28
    adba:	1f 91       	pop	r17
    adbc:	08 95       	ret

0000adbe <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1763
  dialog_save_variable_function = &menu_tds_save_offset;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    adbe:	1f 93       	push	r17
    adc0:	cf 93       	push	r28
    adc2:	df 93       	push	r29
    adc4:	cd b7       	in	r28, 0x3d	; 61
    adc6:	de b7       	in	r29, 0x3e	; 62
    adc8:	66 97       	sbiw	r28, 0x16	; 22
    adca:	0f b6       	in	r0, 0x3f	; 63
    adcc:	f8 94       	cli
    adce:	de bf       	out	0x3e, r29	; 62
    add0:	0f be       	out	0x3f, r0	; 63
    add2:	cd bf       	out	0x3d, r28	; 61
    add4:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1764
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    add6:	60 e0       	ldi	r22, 0x00	; 0
    add8:	86 e6       	ldi	r24, 0x66	; 102
    adda:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    adde:	be 01       	movw	r22, r28
    ade0:	6f 5f       	subi	r22, 0xFF	; 255
    ade2:	7f 4f       	sbci	r23, 0xFF	; 255
    ade4:	81 2f       	mov	r24, r17
    ade6:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:115
  return tds.period;
    adea:	8d 89       	ldd	r24, Y+21	; 0x15
    adec:	90 e0       	ldi	r25, 0x00	; 0
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    adee:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    adf2:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1683
  menu_dialog_set_variable_min = min;
    adf6:	81 e0       	ldi	r24, 0x01	; 1
    adf8:	90 e0       	ldi	r25, 0x00	; 0
    adfa:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <menu_dialog_set_variable_min+0x1>
    adfe:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684
  menu_dialog_set_variable_max = max;
    ae02:	8f ef       	ldi	r24, 0xFF	; 255
    ae04:	90 e0       	ldi	r25, 0x00	; 0
    ae06:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <menu_dialog_set_variable_max+0x1>
    ae0a:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
  menu_dialog_set_variable_step = step;
    ae0e:	81 e0       	ldi	r24, 0x01	; 1
    ae10:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
  menu_dialog_set_variable_args = args;
    ae14:	10 93 7b 08 	sts	0x087B, r17	; 0x80087b <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
  menu_dialog_set_divider = divider;
    ae18:	10 92 cc 08 	sts	0x08CC, r1	; 0x8008cc <menu_dialog_set_divider+0x1>
    ae1c:	10 92 cb 08 	sts	0x08CB, r1	; 0x8008cb <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1689
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    ae20:	10 92 7a 08 	sts	0x087A, r1	; 0x80087a <menu_dialog_set_variable_update_now>
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1766
/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_period(args2), 1, 255, 1, args2, 0, H_FALSE);
  dialog_save_variable_function = &menu_tds_save_period;
    ae24:	8a e9       	ldi	r24, 0x9A	; 154
    ae26:	97 e5       	ldi	r25, 0x57	; 87
    ae28:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <dialog_save_variable_function+0x1>
    ae2c:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1767
}
    ae30:	66 96       	adiw	r28, 0x16	; 22
    ae32:	0f b6       	in	r0, 0x3f	; 63
    ae34:	f8 94       	cli
    ae36:	de bf       	out	0x3e, r29	; 62
    ae38:	0f be       	out	0x3f, r0	; 63
    ae3a:	cd bf       	out	0x3d, r28	; 61
    ae3c:	df 91       	pop	r29
    ae3e:	cf 91       	pop	r28
    ae40:	1f 91       	pop	r17
    ae42:	08 95       	ret

0000ae44 <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1755
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    ae44:	1f 93       	push	r17
    ae46:	cf 93       	push	r28
    ae48:	df 93       	push	r29
    ae4a:	cd b7       	in	r28, 0x3d	; 61
    ae4c:	de b7       	in	r29, 0x3e	; 62
    ae4e:	66 97       	sbiw	r28, 0x16	; 22
    ae50:	0f b6       	in	r0, 0x3f	; 63
    ae52:	f8 94       	cli
    ae54:	de bf       	out	0x3e, r29	; 62
    ae56:	0f be       	out	0x3f, r0	; 63
    ae58:	cd bf       	out	0x3d, r28	; 61
    ae5a:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    ae5c:	60 e0       	ldi	r22, 0x00	; 0
    ae5e:	86 e6       	ldi	r24, 0x66	; 102
    ae60:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ae64:	be 01       	movw	r22, r28
    ae66:	6f 5f       	subi	r22, 0xFF	; 255
    ae68:	7f 4f       	sbci	r23, 0xFF	; 255
    ae6a:	81 2f       	mov	r24, r17
    ae6c:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:99
  return tds.offset;
    ae70:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae72:	9c 85       	ldd	r25, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    ae74:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <menu_dialog_set_variable_now+0x1>
    ae78:	80 93 c9 08 	sts	0x08C9, r24	; 0x8008c9 <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1683
  menu_dialog_set_variable_min = min;
    ae7c:	80 ef       	ldi	r24, 0xF0	; 240
    ae7e:	98 ed       	ldi	r25, 0xD8	; 216
    ae80:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <menu_dialog_set_variable_min+0x1>
    ae84:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684
  menu_dialog_set_variable_max = max;
    ae88:	80 e1       	ldi	r24, 0x10	; 16
    ae8a:	97 e2       	ldi	r25, 0x27	; 39
    ae8c:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <menu_dialog_set_variable_max+0x1>
    ae90:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
  menu_dialog_set_variable_step = step;
    ae94:	84 e6       	ldi	r24, 0x64	; 100
    ae96:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
  menu_dialog_set_variable_args = args;
    ae9a:	10 93 7b 08 	sts	0x087B, r17	; 0x80087b <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
  menu_dialog_set_divider = divider;
    ae9e:	88 ee       	ldi	r24, 0xE8	; 232
    aea0:	93 e0       	ldi	r25, 0x03	; 3
    aea2:	90 93 cc 08 	sts	0x08CC, r25	; 0x8008cc <menu_dialog_set_divider+0x1>
    aea6:	80 93 cb 08 	sts	0x08CB, r24	; 0x8008cb <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1689
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    aeaa:	10 92 7a 08 	sts	0x087A, r1	; 0x80087a <menu_dialog_set_variable_update_now>
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1758
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2), -10000, 10000, 100, args2, 1000, H_FALSE);
  dialog_save_variable_function = &menu_tds_save_offset;
    aeae:	82 ec       	ldi	r24, 0xC2	; 194
    aeb0:	97 e5       	ldi	r25, 0x57	; 87
    aeb2:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <dialog_save_variable_function+0x1>
    aeb6:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
}
    aeba:	66 96       	adiw	r28, 0x16	; 22
    aebc:	0f b6       	in	r0, 0x3f	; 63
    aebe:	f8 94       	cli
    aec0:	de bf       	out	0x3e, r29	; 62
    aec2:	0f be       	out	0x3f, r0	; 63
    aec4:	cd bf       	out	0x3d, r28	; 61
    aec6:	df 91       	pop	r29
    aec8:	cf 91       	pop	r28
    aeca:	1f 91       	pop	r17
    aecc:	08 95       	ret

0000aece <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
{
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    aece:	1f 93       	push	r17
    aed0:	cf 93       	push	r28
    aed2:	df 93       	push	r29
    aed4:	cd b7       	in	r28, 0x3d	; 61
    aed6:	de b7       	in	r29, 0x3e	; 62
    aed8:	a0 97       	sbiw	r28, 0x20	; 32
    aeda:	0f b6       	in	r0, 0x3f	; 63
    aedc:	f8 94       	cli
    aede:	de bf       	out	0x3e, r29	; 62
    aee0:	0f be       	out	0x3f, r0	; 63
    aee2:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    aee4:	6b ef       	ldi	r22, 0xFB	; 251
    aee6:	78 e0       	ldi	r23, 0x08	; 8
    aee8:	ce 01       	movw	r24, r28
    aeea:	47 96       	adiw	r24, 0x17	; 23
    aeec:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    aef0:	8f 89       	ldd	r24, Y+23	; 0x17
    aef2:	88 23       	and	r24, r24
    aef4:	a9 f0       	breq	.+42     	; 0xaf20 <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1701
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    aef6:	10 91 0b 09 	lds	r17, 0x090B	; 0x80090b <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    aefa:	be 01       	movw	r22, r28
    aefc:	6f 5f       	subi	r22, 0xFF	; 255
    aefe:	7f 4f       	sbci	r23, 0xFF	; 255
    af00:	81 2f       	mov	r24, r17
    af02:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    af06:	be 01       	movw	r22, r28
    af08:	69 5e       	subi	r22, 0xE9	; 233
    af0a:	7f 4f       	sbci	r23, 0xFF	; 255
    af0c:	ce 01       	movw	r24, r28
    af0e:	0d 96       	adiw	r24, 0x0d	; 13
    af10:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    af14:	be 01       	movw	r22, r28
    af16:	6f 5f       	subi	r22, 0xFF	; 255
    af18:	7f 4f       	sbci	r23, 0xFF	; 255
    af1a:	81 2f       	mov	r24, r17
    af1c:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1743
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    af20:	a0 96       	adiw	r28, 0x20	; 32
    af22:	0f b6       	in	r0, 0x3f	; 63
    af24:	f8 94       	cli
    af26:	de bf       	out	0x3e, r29	; 62
    af28:	0f be       	out	0x3f, r0	; 63
    af2a:	cd bf       	out	0x3d, r28	; 61
    af2c:	df 91       	pop	r29
    af2e:	cf 91       	pop	r28
    af30:	1f 91       	pop	r17
    af32:	08 95       	ret

0000af34 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
{
  tds_set_offset(display_function_get_variable_args(), display_function_get_variable());
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    af34:	0f 93       	push	r16
    af36:	1f 93       	push	r17
    af38:	cf 93       	push	r28
    af3a:	df 93       	push	r29
    af3c:	cd b7       	in	r28, 0x3d	; 61
    af3e:	de b7       	in	r29, 0x3e	; 62
    af40:	66 97       	sbiw	r28, 0x16	; 22
    af42:	0f b6       	in	r0, 0x3f	; 63
    af44:	f8 94       	cli
    af46:	de bf       	out	0x3e, r29	; 62
    af48:	0f be       	out	0x3f, r0	; 63
    af4a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1734
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
    af4c:	00 91 c9 08 	lds	r16, 0x08C9	; 0x8008c9 <menu_dialog_set_variable_now>
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654

/////////////////////////////////////////////////////////////////////////////////

uint8_t display_function_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    af50:	10 91 7b 08 	lds	r17, 0x087B	; 0x80087b <menu_dialog_set_variable_args>
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    af54:	be 01       	movw	r22, r28
    af56:	6f 5f       	subi	r22, 0xFF	; 255
    af58:	7f 4f       	sbci	r23, 0xFF	; 255
    af5a:	81 2f       	mov	r24, r17
    af5c:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:107
  tds.period = period;
    af60:	0d 8b       	std	Y+21, r16	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    af62:	be 01       	movw	r22, r28
    af64:	6f 5f       	subi	r22, 0xFF	; 255
    af66:	7f 4f       	sbci	r23, 0xFF	; 255
    af68:	81 2f       	mov	r24, r17
    af6a:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
}
    af6e:	66 96       	adiw	r28, 0x16	; 22
    af70:	0f b6       	in	r0, 0x3f	; 63
    af72:	f8 94       	cli
    af74:	de bf       	out	0x3e, r29	; 62
    af76:	0f be       	out	0x3f, r0	; 63
    af78:	cd bf       	out	0x3d, r28	; 61
    af7a:	df 91       	pop	r29
    af7c:	cf 91       	pop	r28
    af7e:	1f 91       	pop	r17
    af80:	0f 91       	pop	r16
    af82:	08 95       	ret

0000af84 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1728
    dialog_set_string[len - 1] = 0;
}

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    af84:	ef 92       	push	r14
    af86:	ff 92       	push	r15
    af88:	1f 93       	push	r17
    af8a:	cf 93       	push	r28
    af8c:	df 93       	push	r29
    af8e:	cd b7       	in	r28, 0x3d	; 61
    af90:	de b7       	in	r29, 0x3e	; 62
    af92:	66 97       	sbiw	r28, 0x16	; 22
    af94:	0f b6       	in	r0, 0x3f	; 63
    af96:	f8 94       	cli
    af98:	de bf       	out	0x3e, r29	; 62
    af9a:	0f be       	out	0x3f, r0	; 63
    af9c:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1659
  return menu_dialog_set_variable_args;
}

uint16_t display_function_get_variable(void)
{
  return menu_dialog_set_variable_now;
    af9e:	e0 90 c9 08 	lds	r14, 0x08C9	; 0x8008c9 <menu_dialog_set_variable_now>
    afa2:	f0 90 ca 08 	lds	r15, 0x08CA	; 0x8008ca <menu_dialog_set_variable_now+0x1>
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654

/////////////////////////////////////////////////////////////////////////////////

uint8_t display_function_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    afa6:	10 91 7b 08 	lds	r17, 0x087B	; 0x80087b <menu_dialog_set_variable_args>
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    afaa:	be 01       	movw	r22, r28
    afac:	6f 5f       	subi	r22, 0xFF	; 255
    afae:	7f 4f       	sbci	r23, 0xFF	; 255
    afb0:	81 2f       	mov	r24, r17
    afb2:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    afb6:	fc 86       	std	Y+12, r15	; 0x0c
    afb8:	eb 86       	std	Y+11, r14	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    afba:	be 01       	movw	r22, r28
    afbc:	6f 5f       	subi	r22, 0xFF	; 255
    afbe:	7f 4f       	sbci	r23, 0xFF	; 255
    afc0:	81 2f       	mov	r24, r17
    afc2:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(), display_function_get_variable());
}
    afc6:	66 96       	adiw	r28, 0x16	; 22
    afc8:	0f b6       	in	r0, 0x3f	; 63
    afca:	f8 94       	cli
    afcc:	de bf       	out	0x3e, r29	; 62
    afce:	0f be       	out	0x3f, r0	; 63
    afd0:	cd bf       	out	0x3d, r28	; 61
    afd2:	df 91       	pop	r29
    afd4:	cf 91       	pop	r28
    afd6:	1f 91       	pop	r17
    afd8:	ff 90       	pop	r15
    afda:	ef 90       	pop	r14
    afdc:	08 95       	ret

0000afde <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    afde:	0f 93       	push	r16
    afe0:	1f 93       	push	r17
    afe2:	cf 93       	push	r28
    afe4:	df 93       	push	r29
    afe6:	8c 01       	movw	r16, r24
    afe8:	c4 e6       	ldi	r28, 0x64	; 100
    afea:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    afec:	ce 01       	movw	r24, r28
    afee:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    aff2:	f8 01       	movw	r30, r16
    aff4:	81 93       	st	Z+, r24
    aff6:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    aff8:	10 82       	st	Z, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    affa:	88 23       	and	r24, r24
    affc:	21 f0       	breq	.+8      	; 0xb006 <device_get_name(char*)+0x28>
    affe:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b000:	cd 36       	cpi	r28, 0x6D	; 109
    b002:	d1 05       	cpc	r29, r1
    b004:	99 f7       	brne	.-26     	; 0xafec <device_get_name(char*)+0xe>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    b006:	df 91       	pop	r29
    b008:	cf 91       	pop	r28
    b00a:	1f 91       	pop	r17
    b00c:	0f 91       	pop	r16
    b00e:	08 95       	ret

0000b010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    b010:	cf 92       	push	r12
    b012:	df 92       	push	r13
    b014:	ef 92       	push	r14
    b016:	ff 92       	push	r15
    b018:	0f 93       	push	r16
    b01a:	1f 93       	push	r17
    b01c:	cf 93       	push	r28
    b01e:	df 93       	push	r29
    b020:	cd b7       	in	r28, 0x3d	; 61
    b022:	de b7       	in	r29, 0x3e	; 62
    b024:	ca 54       	subi	r28, 0x4A	; 74
    b026:	d1 09       	sbc	r29, r1
    b028:	0f b6       	in	r0, 0x3f	; 63
    b02a:	f8 94       	cli
    b02c:	de bf       	out	0x3e, r29	; 62
    b02e:	0f be       	out	0x3f, r0	; 63
    b030:	cd bf       	out	0x3d, r28	; 61
    b032:	8c 01       	movw	r16, r24
    b034:	6b 01       	movw	r12, r22
    b036:	7a 01       	movw	r14, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    b038:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
    b03c:	88 23       	and	r24, r24
    b03e:	89 f1       	breq	.+98     	; 0xb0a2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    b040:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <mqtt_send_message>
    b044:	90 91 86 0b 	lds	r25, 0x0B86	; 0x800b86 <mqtt_send_message+0x1>
    b048:	01 96       	adiw	r24, 0x01	; 1
    b04a:	90 93 86 0b 	sts	0x0B86, r25	; 0x800b86 <mqtt_send_message+0x1>
    b04e:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    b052:	ce 01       	movw	r24, r28
    b054:	8f 5b       	subi	r24, 0xBF	; 191
    b056:	9f 4f       	sbci	r25, 0xFF	; 255
    b058:	0e 94 ef 57 	call	0xafde	; 0xafde <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    b05c:	60 91 83 0b 	lds	r22, 0x0B83	; 0x800b83 <header_out>
    b060:	70 91 84 0b 	lds	r23, 0x0B84	; 0x800b84 <header_out+0x1>
    b064:	ce 01       	movw	r24, r28
    b066:	01 96       	adiw	r24, 0x01	; 1
    b068:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    b06c:	be 01       	movw	r22, r28
    b06e:	6f 5b       	subi	r22, 0xBF	; 191
    b070:	7f 4f       	sbci	r23, 0xFF	; 255
    b072:	ce 01       	movw	r24, r28
    b074:	01 96       	adiw	r24, 0x01	; 1
    b076:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    b07a:	67 ef       	ldi	r22, 0xF7	; 247
    b07c:	73 e0       	ldi	r23, 0x03	; 3
    b07e:	ce 01       	movw	r24, r28
    b080:	01 96       	adiw	r24, 0x01	; 1
    b082:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    b086:	b6 01       	movw	r22, r12
    b088:	ce 01       	movw	r24, r28
    b08a:	01 96       	adiw	r24, 0x01	; 1
    b08c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    b090:	a7 01       	movw	r20, r14
    b092:	be 01       	movw	r22, r28
    b094:	6f 5f       	subi	r22, 0xFF	; 255
    b096:	7f 4f       	sbci	r23, 0xFF	; 255
    b098:	c8 01       	movw	r24, r16
    b09a:	0e 94 41 93 	call	0x12682	; 0x12682 <PubSubClient::publish(char const*, char const*)>
    b09e:	81 11       	cpse	r24, r1
    b0a0:	09 c0       	rjmp	.+18     	; 0xb0b4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    b0a2:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <mqtt_error>
    b0a6:	90 91 88 0b 	lds	r25, 0x0B88	; 0x800b88 <mqtt_error+0x1>
    b0aa:	01 96       	adiw	r24, 0x01	; 1
    b0ac:	90 93 88 0b 	sts	0x0B88, r25	; 0x800b88 <mqtt_error+0x1>
    b0b0:	80 93 87 0b 	sts	0x0B87, r24	; 0x800b87 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:232
}
    b0b4:	c6 5b       	subi	r28, 0xB6	; 182
    b0b6:	df 4f       	sbci	r29, 0xFF	; 255
    b0b8:	0f b6       	in	r0, 0x3f	; 63
    b0ba:	f8 94       	cli
    b0bc:	de bf       	out	0x3e, r29	; 62
    b0be:	0f be       	out	0x3f, r0	; 63
    b0c0:	cd bf       	out	0x3d, r28	; 61
    b0c2:	df 91       	pop	r29
    b0c4:	cf 91       	pop	r28
    b0c6:	1f 91       	pop	r17
    b0c8:	0f 91       	pop	r16
    b0ca:	ff 90       	pop	r15
    b0cc:	ef 90       	pop	r14
    b0ce:	df 90       	pop	r13
    b0d0:	cf 90       	pop	r12
    b0d2:	08 95       	ret

0000b0d4 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    b0d4:	cf 93       	push	r28
    b0d6:	df 93       	push	r29
    b0d8:	cd b7       	in	r28, 0x3d	; 61
    b0da:	de b7       	in	r29, 0x3e	; 62
    b0dc:	60 97       	sbiw	r28, 0x10	; 16
    b0de:	0f b6       	in	r0, 0x3f	; 63
    b0e0:	f8 94       	cli
    b0e2:	de bf       	out	0x3e, r29	; 62
    b0e4:	0f be       	out	0x3f, r0	; 63
    b0e6:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    b0e8:	90 91 90 09 	lds	r25, 0x0990	; 0x800990 <mqtt_log_cnt>
    b0ec:	e9 2f       	mov	r30, r25
    b0ee:	f0 e0       	ldi	r31, 0x00	; 0
    b0f0:	e0 5f       	subi	r30, 0xF0	; 240
    b0f2:	f6 4f       	sbci	r31, 0xF6	; 246
    b0f4:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    b0f6:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    b0f8:	9f 5f       	subi	r25, 0xFF	; 255
    b0fa:	90 93 90 09 	sts	0x0990, r25	; 0x800990 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    b0fe:	97 fd       	sbrc	r25, 7
    b100:	04 c0       	rjmp	.+8      	; 0xb10a <printf_via_mqtt(char, __file*)+0x36>
    b102:	8a 30       	cpi	r24, 0x0A	; 10
    b104:	11 f0       	breq	.+4      	; 0xb10a <printf_via_mqtt(char, __file*)+0x36>
    b106:	81 11       	cpse	r24, r1
    b108:	13 c0       	rjmp	.+38     	; 0xb130 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    b10a:	65 ec       	ldi	r22, 0xC5	; 197
    b10c:	73 e0       	ldi	r23, 0x03	; 3
    b10e:	ce 01       	movw	r24, r28
    b110:	01 96       	adiw	r24, 0x01	; 1
    b112:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    b116:	40 e1       	ldi	r20, 0x10	; 16
    b118:	59 e0       	ldi	r21, 0x09	; 9
    b11a:	be 01       	movw	r22, r28
    b11c:	6f 5f       	subi	r22, 0xFF	; 255
    b11e:	7f 4f       	sbci	r23, 0xFF	; 255
    b120:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <pub_mqtt_client>
    b124:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <pub_mqtt_client+0x1>
    b128:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    b12c:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:448
  }
}
    b130:	60 96       	adiw	r28, 0x10	; 16
    b132:	0f b6       	in	r0, 0x3f	; 63
    b134:	f8 94       	cli
    b136:	de bf       	out	0x3e, r29	; 62
    b138:	0f be       	out	0x3f, r0	; 63
    b13a:	cd bf       	out	0x3d, r28	; 61
    b13c:	df 91       	pop	r29
    b13e:	cf 91       	pop	r28
    b140:	08 95       	ret

0000b142 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2050
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    b142:	cf 93       	push	r28
    b144:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2051
  if (idx < MAX_RTDS)
    b146:	8a 30       	cpi	r24, 0x0A	; 10
    b148:	68 f4       	brcc	.+26     	; 0xb164 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    b14a:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b14c:	24 e1       	ldi	r18, 0x14	; 20
    b14e:	82 9f       	mul	r24, r18
    b150:	c0 01       	movw	r24, r0
    b152:	11 24       	eor	r1, r1
    b154:	83 54       	subi	r24, 0x43	; 67
    b156:	9a 4f       	sbci	r25, 0xFA	; 250
    b158:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b15c:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
  }
  else
    *active = 255;
}
    b15e:	df 91       	pop	r29
    b160:	cf 91       	pop	r28
    b162:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    b164:	8f ef       	ldi	r24, 0xFF	; 255
    b166:	fb 01       	movw	r30, r22
    b168:	80 83       	st	Z, r24
    b16a:	f9 cf       	rjmp	.-14     	; 0xb15e <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000b16c <click_rtds_setting_sensor(unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4748
/*
    args1 - parametr z globalniho nastaveni tlacitek
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint8_t args1, uint8_t loop_idx)
{
    b16c:	1f 93       	push	r17
    b16e:	cf 93       	push	r28
    b170:	df 93       	push	r29
    b172:	1f 92       	push	r1
    b174:	cd b7       	in	r28, 0x3d	; 61
    b176:	de b7       	in	r29, 0x3e	; 62
    b178:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4751
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_active(loop_idx, &active);
    b17a:	be 01       	movw	r22, r28
    b17c:	6f 5f       	subi	r22, 0xFF	; 255
    b17e:	7f 4f       	sbci	r23, 0xFF	; 255
    b180:	81 2f       	mov	r24, r17
    b182:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
  if (active == 1)
    b186:	89 81       	ldd	r24, Y+1	; 0x01
    b188:	81 30       	cpi	r24, 0x01	; 1
    b18a:	21 f4       	brne	.+8      	; 0xb194 <click_rtds_setting_sensor(unsigned char, unsigned char)+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4754
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx);
    b18c:	61 2f       	mov	r22, r17
    b18e:	87 e0       	ldi	r24, 0x07	; 7
    b190:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4756
  }
}
    b194:	0f 90       	pop	r0
    b196:	df 91       	pop	r29
    b198:	cf 91       	pop	r28
    b19a:	1f 91       	pop	r17
    b19c:	08 95       	ret

0000b19e <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    b19e:	1f 93       	push	r17
    b1a0:	cf 93       	push	r28
    b1a2:	df 93       	push	r29
    b1a4:	1f 92       	push	r1
    b1a6:	cd b7       	in	r28, 0x3d	; 61
    b1a8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b1aa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2112
  {
    remote_tds_get_active(idx, &active);
    b1ac:	be 01       	movw	r22, r28
    b1ae:	6f 5f       	subi	r22, 0xFF	; 255
    b1b0:	7f 4f       	sbci	r23, 0xFF	; 255
    b1b2:	81 2f       	mov	r24, r17
    b1b4:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2113
    if (active == 0)
    b1b8:	89 81       	ldd	r24, Y+1	; 0x01
    b1ba:	88 23       	and	r24, r24
    b1bc:	21 f0       	breq	.+8      	; 0xb1c6 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b1be:	1f 5f       	subi	r17, 0xFF	; 255
    b1c0:	1a 30       	cpi	r17, 0x0A	; 10
    b1c2:	a1 f7       	brne	.-24     	; 0xb1ac <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    b1c4:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
      ret = idx;
      break;
    }
  }
  return ret;
}
    b1c6:	81 2f       	mov	r24, r17
    b1c8:	0f 90       	pop	r0
    b1ca:	df 91       	pop	r29
    b1cc:	cf 91       	pop	r28
    b1ce:	1f 91       	pop	r17
    b1d0:	08 95       	ret

0000b1d2 <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4700
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    b1d2:	1f 93       	push	r17
    b1d4:	cf 93       	push	r28
    b1d6:	df 93       	push	r29
    b1d8:	00 d0       	rcall	.+0      	; 0xb1da <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    b1da:	1f 92       	push	r1
    b1dc:	1f 92       	push	r1
    b1de:	cd b7       	in	r28, 0x3d	; 61
    b1e0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4703
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    b1e2:	0e 94 cf 58 	call	0xb19e	; 0xb19e <remote_tds_find_free()>
    b1e6:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4704
  if (idx != 255)
    b1e8:	8f 3f       	cpi	r24, 0xFF	; 255
    b1ea:	e1 f0       	breq	.+56     	; 0xb224 <click_rtds_add_sensor(unsigned char, unsigned char)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4706
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    b1ec:	6e e5       	ldi	r22, 0x5E	; 94
    b1ee:	74 e3       	ldi	r23, 0x34	; 52
    b1f0:	ce 01       	movw	r24, r28
    b1f2:	01 96       	adiw	r24, 0x01	; 1
    b1f4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4707
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b1f8:	60 e0       	ldi	r22, 0x00	; 0
    b1fa:	87 e6       	ldi	r24, 0x67	; 103
    b1fc:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1694
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    b200:	be 01       	movw	r22, r28
    b202:	6f 5f       	subi	r22, 0xFF	; 255
    b204:	7f 4f       	sbci	r23, 0xFF	; 255
    b206:	8b ef       	ldi	r24, 0xFB	; 251
    b208:	98 e0       	ldi	r25, 0x08	; 8
    b20a:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
  dialog_set_string_max_length = max_length;
    b20e:	82 e1       	ldi	r24, 0x12	; 18
    b210:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1696
  dialog_set_string_args = idx;
    b214:	10 93 0b 09 	sts	0x090B, r17	; 0x80090b <dialog_set_string_args>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4709
  if (idx != 255)
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx);
    dialog_save_variable_function = &menu_rtds_create_name;
    b218:	88 e6       	ldi	r24, 0x68	; 104
    b21a:	9d e5       	ldi	r25, 0x5D	; 93
    b21c:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <dialog_save_variable_function+0x1>
    b220:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4712
  }

}
    b224:	0f 90       	pop	r0
    b226:	0f 90       	pop	r0
    b228:	0f 90       	pop	r0
    b22a:	0f 90       	pop	r0
    b22c:	0f 90       	pop	r0
    b22e:	df 91       	pop	r29
    b230:	cf 91       	pop	r28
    b232:	1f 91       	pop	r17
    b234:	08 95       	ret

0000b236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2011
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    b236:	af 92       	push	r10
    b238:	bf 92       	push	r11
    b23a:	cf 92       	push	r12
    b23c:	df 92       	push	r13
    b23e:	ef 92       	push	r14
    b240:	ff 92       	push	r15
    b242:	0f 93       	push	r16
    b244:	1f 93       	push	r17
    b246:	cf 93       	push	r28
    b248:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2013
  char t;
  if (idx < MAX_RTDS)
    b24a:	8a 30       	cpi	r24, 0x0A	; 10
    b24c:	88 f5       	brcc	.+98     	; 0xb2b0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    b24e:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    b250:	94 e1       	ldi	r25, 0x14	; 20
    b252:	89 9f       	mul	r24, r25
    b254:	e0 01       	movw	r28, r0
    b256:	11 24       	eor	r1, r1
    b258:	6e 01       	movw	r12, r28
    b25a:	e6 e5       	ldi	r30, 0x56	; 86
    b25c:	ce 1a       	sub	r12, r30
    b25e:	ea ef       	ldi	r30, 0xFA	; 250
    b260:	de 0a       	sbc	r13, r30
    b262:	8a 01       	movw	r16, r20
    b264:	5e 01       	movw	r10, r28
    b266:	f4 e4       	ldi	r31, 0x44	; 68
    b268:	af 1a       	sub	r10, r31
    b26a:	fa ef       	ldi	r31, 0xFA	; 250
    b26c:	bf 0a       	sbc	r11, r31
    b26e:	c6 01       	movw	r24, r12
    b270:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
      name[i] = t;
    b274:	f8 01       	movw	r30, r16
    b276:	81 93       	st	Z+, r24
    b278:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2019
      name[i + 1] = 0;
    b27a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
      if (t == 0) break;
    b27c:	88 23       	and	r24, r24
    b27e:	31 f0       	breq	.+12     	; 0xb28c <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    b280:	ff ef       	ldi	r31, 0xFF	; 255
    b282:	cf 1a       	sub	r12, r31
    b284:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    b286:	ca 14       	cp	r12, r10
    b288:	db 04       	cpc	r13, r11
    b28a:	89 f7       	brne	.-30     	; 0xb26e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b28c:	ce 01       	movw	r24, r28
    b28e:	83 54       	subi	r24, 0x43	; 67
    b290:	9a 4f       	sbci	r25, 0xFA	; 250
    b292:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b296:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
  }
  else
  {
    *active = 255;
    b298:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
  }
}
    b29a:	df 91       	pop	r29
    b29c:	cf 91       	pop	r28
    b29e:	1f 91       	pop	r17
    b2a0:	0f 91       	pop	r16
    b2a2:	ff 90       	pop	r15
    b2a4:	ef 90       	pop	r14
    b2a6:	df 90       	pop	r13
    b2a8:	cf 90       	pop	r12
    b2aa:	bf 90       	pop	r11
    b2ac:	af 90       	pop	r10
    b2ae:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    b2b0:	8f ef       	ldi	r24, 0xFF	; 255
    b2b2:	fb 01       	movw	r30, r22
    b2b4:	f1 cf       	rjmp	.-30     	; 0xb298 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000b2b6 <get_function_default_temp(unsigned char, unsigned char, char*, char*)>:
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4816
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci zpet popisek k tlacitkum
void get_function_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b2b6:	9f 92       	push	r9
    b2b8:	af 92       	push	r10
    b2ba:	bf 92       	push	r11
    b2bc:	cf 92       	push	r12
    b2be:	df 92       	push	r13
    b2c0:	ef 92       	push	r14
    b2c2:	ff 92       	push	r15
    b2c4:	0f 93       	push	r16
    b2c6:	1f 93       	push	r17
    b2c8:	cf 93       	push	r28
    b2ca:	df 93       	push	r29
    b2cc:	cd b7       	in	r28, 0x3d	; 61
    b2ce:	de b7       	in	r29, 0x3e	; 62
    b2d0:	aa 97       	sbiw	r28, 0x2a	; 42
    b2d2:	0f b6       	in	r0, 0x3f	; 63
    b2d4:	f8 94       	cli
    b2d6:	de bf       	out	0x3e, r29	; 62
    b2d8:	0f be       	out	0x3f, r0	; 63
    b2da:	cd bf       	out	0x3d, r28	; 61
    b2dc:	98 2e       	mov	r9, r24
    b2de:	7a 01       	movw	r14, r20
    b2e0:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4820
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    b2e2:	62 ef       	ldi	r22, 0xF2	; 242
    b2e4:	72 e0       	ldi	r23, 0x02	; 2
    b2e6:	ca 01       	movw	r24, r20
    b2e8:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4821
  strcpy(line2, "");
    b2ec:	62 ef       	ldi	r22, 0xF2	; 242
    b2ee:	72 e0       	ldi	r23, 0x02	; 2
    b2f0:	c6 01       	movw	r24, r12
    b2f2:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
    b2f6:	88 ec       	ldi	r24, 0xC8	; 200
    b2f8:	a8 2e       	mov	r10, r24
    b2fa:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4823
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b2fc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4818
////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci zpet popisek k tlacitkum
void get_function_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    b2fe:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    b300:	c5 01       	movw	r24, r10
    b302:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4825
  strcpy(line1, "");
  strcpy(line2, "");
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (tds_used(idx) == 1)
    b306:	81 30       	cpi	r24, 0x01	; 1
    b308:	69 f5       	brne	.+90     	; 0xb364 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
    {
      if (cri == args1)
    b30a:	91 12       	cpse	r9, r17
    b30c:	2a c0       	rjmp	.+84     	; 0xb362 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xac>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b30e:	be 01       	movw	r22, r28
    b310:	6f 5f       	subi	r22, 0xFF	; 255
    b312:	7f 4f       	sbci	r23, 0xFF	; 255
    b314:	80 2f       	mov	r24, r16
    b316:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    b31a:	be 01       	movw	r22, r28
    b31c:	63 5f       	subi	r22, 0xF3	; 243
    b31e:	7f 4f       	sbci	r23, 0xFF	; 255
    b320:	ce 01       	movw	r24, r28
    b322:	47 96       	adiw	r24, 0x17	; 23
    b324:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z25get_function_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    b328:	be 01       	movw	r22, r28
    b32a:	69 5e       	subi	r22, 0xE9	; 233
    b32c:	7f 4f       	sbci	r23, 0xFF	; 255
    b32e:	c6 01       	movw	r24, r12
    b330:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4831
        strcpy_P(line1, nastaveni_onewire);
    b334:	6f e6       	ldi	r22, 0x6F	; 111
    b336:	74 e3       	ldi	r23, 0x34	; 52
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    b338:	c7 01       	movw	r24, r14
    b33a:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4856
    }
  }
get_function_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    b33e:	aa 96       	adiw	r28, 0x2a	; 42
    b340:	0f b6       	in	r0, 0x3f	; 63
    b342:	f8 94       	cli
    b344:	de bf       	out	0x3e, r29	; 62
    b346:	0f be       	out	0x3f, r0	; 63
    b348:	cd bf       	out	0x3d, r28	; 61
    b34a:	df 91       	pop	r29
    b34c:	cf 91       	pop	r28
    b34e:	1f 91       	pop	r17
    b350:	0f 91       	pop	r16
    b352:	ff 90       	pop	r15
    b354:	ef 90       	pop	r14
    b356:	df 90       	pop	r13
    b358:	cf 90       	pop	r12
    b35a:	bf 90       	pop	r11
    b35c:	af 90       	pop	r10
    b35e:	9f 90       	pop	r9
    b360:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4834
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto get_function_default_temp_end;
      }
      cri++;
    b362:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4823
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b364:	0f 5f       	subi	r16, 0xFF	; 255
    b366:	86 e1       	ldi	r24, 0x16	; 22
    b368:	a8 0e       	add	r10, r24
    b36a:	b1 1c       	adc	r11, r1
    b36c:	06 30       	cpi	r16, 0x06	; 6
    b36e:	41 f6       	brne	.-112    	; 0xb300 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4838
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b370:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
  {
    remote_tds_get_active(idx, &active);
    b372:	be 01       	movw	r22, r28
    b374:	6f 5f       	subi	r22, 0xFF	; 255
    b376:	7f 4f       	sbci	r23, 0xFF	; 255
    b378:	80 2f       	mov	r24, r16
    b37a:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4841
    if (active == 1)
    b37e:	89 81       	ldd	r24, Y+1	; 0x01
    b380:	81 30       	cpi	r24, 0x01	; 1
    b382:	a9 f4       	brne	.+42     	; 0xb3ae <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4843
    {
      if (cri == args1)
    b384:	91 12       	cpse	r9, r17
    b386:	12 c0       	rjmp	.+36     	; 0xb3ac <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
      {
        remote_tds_get_complete(idx, &active, name);
    b388:	ae 01       	movw	r20, r28
    b38a:	49 5e       	subi	r20, 0xE9	; 233
    b38c:	5f 4f       	sbci	r21, 0xFF	; 255
    b38e:	be 01       	movw	r22, r28
    b390:	6f 5f       	subi	r22, 0xFF	; 255
    b392:	7f 4f       	sbci	r23, 0xFF	; 255
    b394:	80 2f       	mov	r24, r16
    b396:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4846
        strcpy(line2, name);
    b39a:	be 01       	movw	r22, r28
    b39c:	69 5e       	subi	r22, 0xE9	; 233
    b39e:	7f 4f       	sbci	r23, 0xFF	; 255
    b3a0:	c6 01       	movw	r24, r12
    b3a2:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
        strcpy_P(line1, nastaveni_rtds);
    b3a6:	60 e6       	ldi	r22, 0x60	; 96
    b3a8:	74 e3       	ldi	r23, 0x34	; 52
    b3aa:	c6 cf       	rjmp	.-116    	; 0xb338 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4850
        goto get_function_default_temp_end;
      }
      cri++;
    b3ac:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4838
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b3ae:	0f 5f       	subi	r16, 0xFF	; 255
    b3b0:	0a 30       	cpi	r16, 0x0A	; 10
    b3b2:	f9 f6       	brne	.-66     	; 0xb372 <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0xbc>
    b3b4:	c4 cf       	rjmp	.-120    	; 0xb33e <get_function_default_temp(unsigned char, unsigned char, char*, char*)+0x88>

0000b3b6 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4589
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b3b6:	cf 92       	push	r12
    b3b8:	df 92       	push	r13
    b3ba:	ef 92       	push	r14
    b3bc:	ff 92       	push	r15
    b3be:	1f 93       	push	r17
    b3c0:	cf 93       	push	r28
    b3c2:	df 93       	push	r29
    b3c4:	1f 92       	push	r1
    b3c6:	cd b7       	in	r28, 0x3d	; 61
    b3c8:	de b7       	in	r29, 0x3e	; 62
    b3ca:	18 2f       	mov	r17, r24
    b3cc:	7a 01       	movw	r14, r20
    b3ce:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4591
  uint8_t active;
  strcpy_P(line1, text_not_used);
    b3d0:	6d e3       	ldi	r22, 0x3D	; 61
    b3d2:	74 e3       	ldi	r23, 0x34	; 52
    b3d4:	ca 01       	movw	r24, r20
    b3d6:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4593
  //sprintf(line2, "%d %d", args1, args2);
  line2[0] = 0;
    b3da:	f6 01       	movw	r30, r12
    b3dc:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4594
  remote_tds_get_active(args1, &active);
    b3de:	be 01       	movw	r22, r28
    b3e0:	6f 5f       	subi	r22, 0xFF	; 255
    b3e2:	7f 4f       	sbci	r23, 0xFF	; 255
    b3e4:	81 2f       	mov	r24, r17
    b3e6:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4595
  if (active == 1)
    b3ea:	89 81       	ldd	r24, Y+1	; 0x01
    b3ec:	81 30       	cpi	r24, 0x01	; 1
    b3ee:	39 f4       	brne	.+14     	; 0xb3fe <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4597
  {
    remote_tds_get_complete(args1, &active, line1);
    b3f0:	a7 01       	movw	r20, r14
    b3f2:	be 01       	movw	r22, r28
    b3f4:	6f 5f       	subi	r22, 0xFF	; 255
    b3f6:	7f 4f       	sbci	r23, 0xFF	; 255
    b3f8:	81 2f       	mov	r24, r17
    b3fa:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4599
  }
}
    b3fe:	0f 90       	pop	r0
    b400:	df 91       	pop	r29
    b402:	cf 91       	pop	r28
    b404:	1f 91       	pop	r17
    b406:	ff 90       	pop	r15
    b408:	ef 90       	pop	r14
    b40a:	df 90       	pop	r13
    b40c:	cf 90       	pop	r12
    b40e:	08 95       	ret

0000b410 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b410:	5f 92       	push	r5
    b412:	6f 92       	push	r6
    b414:	7f 92       	push	r7
    b416:	8f 92       	push	r8
    b418:	9f 92       	push	r9
    b41a:	af 92       	push	r10
    b41c:	bf 92       	push	r11
    b41e:	cf 92       	push	r12
    b420:	df 92       	push	r13
    b422:	ef 92       	push	r14
    b424:	ff 92       	push	r15
    b426:	0f 93       	push	r16
    b428:	1f 93       	push	r17
    b42a:	cf 93       	push	r28
    b42c:	df 93       	push	r29
    b42e:	cd b7       	in	r28, 0x3d	; 61
    b430:	de b7       	in	r29, 0x3e	; 62
    b432:	cd 54       	subi	r28, 0x4D	; 77
    b434:	d1 09       	sbc	r29, r1
    b436:	0f b6       	in	r0, 0x3f	; 63
    b438:	f8 94       	cli
    b43a:	de bf       	out	0x3e, r29	; 62
    b43c:	0f be       	out	0x3f, r0	; 63
    b43e:	cd bf       	out	0x3d, r28	; 61
    b440:	4c 01       	movw	r8, r24
    b442:	5b 01       	movw	r10, r22
    b444:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b446:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    b44a:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4305
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    b44e:	26 0f       	add	r18, r22
    b450:	37 1f       	adc	r19, r23
    b452:	48 0f       	add	r20, r24
    b454:	59 1f       	adc	r21, r25
    b456:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
  remote_tds_get_complete(args2, &active, name);
    b45a:	ae 01       	movw	r20, r28
    b45c:	45 5c       	subi	r20, 0xC5	; 197
    b45e:	5f 4f       	sbci	r21, 0xFF	; 255
    b460:	be 01       	movw	r22, r28
    b462:	63 5b       	subi	r22, 0xB3	; 179
    b464:	7f 4f       	sbci	r23, 0xFF	; 255
    b466:	8e 2d       	mov	r24, r14
    b468:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4307
  if (active == 1)
    b46c:	2e 96       	adiw	r28, 0x0e	; 14
    b46e:	8f ad       	ldd	r24, Y+63	; 0x3f
    b470:	2e 97       	sbiw	r28, 0x0e	; 14
    b472:	81 30       	cpi	r24, 0x01	; 1
    b474:	09 f0       	breq	.+2      	; 0xb478 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x68>
    b476:	c1 c0       	rjmp	.+386    	; 0xb5fa <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    b478:	63 e2       	ldi	r22, 0x23	; 35
    b47a:	74 e3       	ldi	r23, 0x34	; 52
    b47c:	ce 01       	movw	r24, r28
    b47e:	01 96       	adiw	r24, 0x01	; 1
    b480:	6c 01       	movw	r12, r24
    b482:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    b486:	34 01       	movw	r6, r8
    b488:	95 e0       	ldi	r25, 0x05	; 5
    b48a:	69 0e       	add	r6, r25
    b48c:	71 1c       	adc	r7, r1
    b48e:	ee 24       	eor	r14, r14
    b490:	ea 94       	dec	r14
    b492:	fe 2c       	mov	r15, r14
    b494:	10 e0       	ldi	r17, 0x00	; 0
    b496:	00 e0       	ldi	r16, 0x00	; 0
    b498:	22 e0       	ldi	r18, 0x02	; 2
    b49a:	a5 01       	movw	r20, r10
    b49c:	46 5f       	subi	r20, 0xF6	; 246
    b49e:	5f 4f       	sbci	r21, 0xFF	; 255
    b4a0:	b3 01       	movw	r22, r6
    b4a2:	c6 01       	movw	r24, r12
    b4a4:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4312
    strcpy(str1, name);
    b4a8:	be 01       	movw	r22, r28
    b4aa:	65 5c       	subi	r22, 0xC5	; 197
    b4ac:	7f 4f       	sbci	r23, 0xFF	; 255
    b4ae:	c6 01       	movw	r24, r12
    b4b0:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    b4b4:	b4 01       	movw	r22, r8
    b4b6:	6c 5e       	subi	r22, 0xEC	; 236
    b4b8:	7f 4f       	sbci	r23, 0xFF	; 255
    b4ba:	22 e0       	ldi	r18, 0x02	; 2
    b4bc:	a5 01       	movw	r20, r10
    b4be:	42 5e       	subi	r20, 0xE2	; 226
    b4c0:	5f 4f       	sbci	r21, 0xFF	; 255
    b4c2:	c6 01       	movw	r24, r12
    b4c4:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    b4c8:	89 e0       	ldi	r24, 0x09	; 9
    b4ca:	85 15       	cp	r24, r5
    b4cc:	08 f4       	brcc	.+2      	; 0xb4d0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc0>
    b4ce:	ac c0       	rjmp	.+344    	; 0xb628 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
    b4d0:	85 2d       	mov	r24, r5
    b4d2:	0e 94 c5 2a 	call	0x558a	; 0x558a <remote_tds_get_data(unsigned char) [clone .part.24]>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    b4d6:	bc 01       	movw	r22, r24
    b4d8:	99 0f       	add	r25, r25
    b4da:	88 0b       	sbc	r24, r24
    b4dc:	99 0b       	sbc	r25, r25
    b4de:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    b4e2:	20 e0       	ldi	r18, 0x00	; 0
    b4e4:	30 e0       	ldi	r19, 0x00	; 0
    b4e6:	4a e7       	ldi	r20, 0x7A	; 122
    b4e8:	54 e4       	ldi	r21, 0x44	; 68
    b4ea:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4316
    dtostrf(te, 4, 2, str1);
    b4ee:	86 01       	movw	r16, r12
    b4f0:	22 e0       	ldi	r18, 0x02	; 2
    b4f2:	44 e0       	ldi	r20, 0x04	; 4
    b4f4:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4317
    strcat(str1, "C");
    b4f8:	6a ee       	ldi	r22, 0xEA	; 234
    b4fa:	76 e0       	ldi	r23, 0x06	; 6
    b4fc:	c6 01       	movw	r24, r12
    b4fe:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4318
    strcpy_P(str2, current_temp_short);
    b502:	4e 01       	movw	r8, r28
    b504:	91 e2       	ldi	r25, 0x21	; 33
    b506:	89 0e       	add	r8, r25
    b508:	91 1c       	adc	r9, r1
    b50a:	6a e1       	ldi	r22, 0x1A	; 26
    b50c:	74 e3       	ldi	r23, 0x34	; 52
    b50e:	c4 01       	movw	r24, r8
    b510:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
    strcat(str2, str1);
    b514:	b6 01       	movw	r22, r12
    b516:	c4 01       	movw	r24, r8
    b518:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4320
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    b51c:	ee 24       	eor	r14, r14
    b51e:	ea 94       	dec	r14
    b520:	fe 2c       	mov	r15, r14
    b522:	10 e0       	ldi	r17, 0x00	; 0
    b524:	00 e0       	ldi	r16, 0x00	; 0
    b526:	22 e0       	ldi	r18, 0x02	; 2
    b528:	a5 01       	movw	r20, r10
    b52a:	44 5c       	subi	r20, 0xC4	; 196
    b52c:	5f 4f       	sbci	r21, 0xFF	; 255
    b52e:	b3 01       	movw	r22, r6
    b530:	c4 01       	movw	r24, r8
    b532:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    b536:	89 e0       	ldi	r24, 0x09	; 9
    b538:	85 15       	cp	r24, r5
    b53a:	08 f4       	brcc	.+2      	; 0xb53e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x12e>
    b53c:	78 c0       	rjmp	.+240    	; 0xb62e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    b53e:	93 e0       	ldi	r25, 0x03	; 3
    b540:	59 9e       	mul	r5, r25
    b542:	b0 01       	movw	r22, r0
    b544:	11 24       	eor	r1, r1
    b546:	6a 59       	subi	r22, 0x9A	; 154
    b548:	7f 4f       	sbci	r23, 0xFF	; 255
    b54a:	07 2e       	mov	r0, r23
    b54c:	00 0c       	add	r0, r0
    b54e:	88 0b       	sbc	r24, r24
    b550:	99 0b       	sbc	r25, r25
    b552:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
    b556:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    b558:	64 e0       	ldi	r22, 0x04	; 4
    b55a:	74 e3       	ldi	r23, 0x34	; 52
    b55c:	c4 01       	movw	r24, r8
    b55e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
    sprintf(str1, "%s: %d", str2, last_update);
    b562:	1f 92       	push	r1
    b564:	5f 92       	push	r5
    b566:	9f 92       	push	r9
    b568:	8f 92       	push	r8
    b56a:	8e eb       	ldi	r24, 0xBE	; 190
    b56c:	93 e0       	ldi	r25, 0x03	; 3
    b56e:	9f 93       	push	r25
    b570:	8f 93       	push	r24
    b572:	df 92       	push	r13
    b574:	cf 92       	push	r12
    b576:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    b57a:	ee 24       	eor	r14, r14
    b57c:	ea 94       	dec	r14
    b57e:	fe 2c       	mov	r15, r14
    b580:	10 e0       	ldi	r17, 0x00	; 0
    b582:	00 e0       	ldi	r16, 0x00	; 0
    b584:	21 e0       	ldi	r18, 0x01	; 1
    b586:	a5 01       	movw	r20, r10
    b588:	40 5b       	subi	r20, 0xB0	; 176
    b58a:	5f 4f       	sbci	r21, 0xFF	; 255
    b58c:	b3 01       	movw	r22, r6
    b58e:	c6 01       	movw	r24, r12
    b590:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327
    active = 1;
    if (last_update >= 250) active = 0;
    b594:	0f b6       	in	r0, 0x3f	; 63
    b596:	f8 94       	cli
    b598:	de bf       	out	0x3e, r29	; 62
    b59a:	0f be       	out	0x3f, r0	; 63
    b59c:	cd bf       	out	0x3d, r28	; 61
    b59e:	99 ef       	ldi	r25, 0xF9	; 249
    b5a0:	95 15       	cp	r25, r5
    b5a2:	08 f4       	brcc	.+2      	; 0xb5a6 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x196>
    b5a4:	47 c0       	rjmp	.+142    	; 0xb634 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4326
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    b5a6:	81 e0       	ldi	r24, 0x01	; 1
    b5a8:	2e 96       	adiw	r28, 0x0e	; 14
    b5aa:	8f af       	std	Y+63, r24	; 0x3f
    b5ac:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    b5ae:	6d ef       	ldi	r22, 0xFD	; 253
    b5b0:	73 e3       	ldi	r23, 0x33	; 51
    b5b2:	c4 01       	movw	r24, r8
    b5b4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4329
    sprintf(str1, "%s: %d", str2, active);
    b5b8:	2e 96       	adiw	r28, 0x0e	; 14
    b5ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    b5bc:	2e 97       	sbiw	r28, 0x0e	; 14
    b5be:	1f 92       	push	r1
    b5c0:	8f 93       	push	r24
    b5c2:	9f 92       	push	r9
    b5c4:	8f 92       	push	r8
    b5c6:	8e eb       	ldi	r24, 0xBE	; 190
    b5c8:	93 e0       	ldi	r25, 0x03	; 3
    b5ca:	9f 93       	push	r25
    b5cc:	8f 93       	push	r24
    b5ce:	df 92       	push	r13
    b5d0:	cf 92       	push	r12
    b5d2:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    b5d6:	a5 01       	movw	r20, r10
    b5d8:	4c 59       	subi	r20, 0x9C	; 156
    b5da:	5f 4f       	sbci	r21, 0xFF	; 255
    b5dc:	ee 24       	eor	r14, r14
    b5de:	ea 94       	dec	r14
    b5e0:	fe 2c       	mov	r15, r14
    b5e2:	10 e0       	ldi	r17, 0x00	; 0
    b5e4:	00 e0       	ldi	r16, 0x00	; 0
    b5e6:	22 e0       	ldi	r18, 0x02	; 2
    b5e8:	b3 01       	movw	r22, r6
    b5ea:	c6 01       	movw	r24, r12
    b5ec:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    b5f0:	0f b6       	in	r0, 0x3f	; 63
    b5f2:	f8 94       	cli
    b5f4:	de bf       	out	0x3e, r29	; 62
    b5f6:	0f be       	out	0x3f, r0	; 63
    b5f8:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
  }
}
    b5fa:	c3 5b       	subi	r28, 0xB3	; 179
    b5fc:	df 4f       	sbci	r29, 0xFF	; 255
    b5fe:	0f b6       	in	r0, 0x3f	; 63
    b600:	f8 94       	cli
    b602:	de bf       	out	0x3e, r29	; 62
    b604:	0f be       	out	0x3f, r0	; 63
    b606:	cd bf       	out	0x3d, r28	; 61
    b608:	df 91       	pop	r29
    b60a:	cf 91       	pop	r28
    b60c:	1f 91       	pop	r17
    b60e:	0f 91       	pop	r16
    b610:	ff 90       	pop	r15
    b612:	ef 90       	pop	r14
    b614:	df 90       	pop	r13
    b616:	cf 90       	pop	r12
    b618:	bf 90       	pop	r11
    b61a:	af 90       	pop	r10
    b61c:	9f 90       	pop	r9
    b61e:	8f 90       	pop	r8
    b620:	7f 90       	pop	r7
    b622:	6f 90       	pop	r6
    b624:	5f 90       	pop	r5
    b626:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    b628:	90 e0       	ldi	r25, 0x00	; 0
    b62a:	80 e0       	ldi	r24, 0x00	; 0
    b62c:	54 cf       	rjmp	.-344    	; 0xb4d6 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2162
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    b62e:	55 24       	eor	r5, r5
    b630:	5a 94       	dec	r5
    b632:	92 cf       	rjmp	.-220    	; 0xb558 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    b634:	2e 96       	adiw	r28, 0x0e	; 14
    b636:	1f ae       	std	Y+63, r1	; 0x3f
    b638:	2e 97       	sbiw	r28, 0x0e	; 14
    b63a:	b9 cf       	rjmp	.-142    	; 0xb5ae <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>

0000b63c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b63c:	2f 92       	push	r2
    b63e:	3f 92       	push	r3
    b640:	4f 92       	push	r4
    b642:	5f 92       	push	r5
    b644:	6f 92       	push	r6
    b646:	7f 92       	push	r7
    b648:	8f 92       	push	r8
    b64a:	9f 92       	push	r9
    b64c:	af 92       	push	r10
    b64e:	bf 92       	push	r11
    b650:	cf 92       	push	r12
    b652:	df 92       	push	r13
    b654:	ef 92       	push	r14
    b656:	ff 92       	push	r15
    b658:	0f 93       	push	r16
    b65a:	1f 93       	push	r17
    b65c:	cf 93       	push	r28
    b65e:	df 93       	push	r29
    b660:	cd b7       	in	r28, 0x3d	; 61
    b662:	de b7       	in	r29, 0x3e	; 62
    b664:	ce 54       	subi	r28, 0x4E	; 78
    b666:	d1 09       	sbc	r29, r1
    b668:	0f b6       	in	r0, 0x3f	; 63
    b66a:	f8 94       	cli
    b66c:	de bf       	out	0x3e, r29	; 62
    b66e:	0f be       	out	0x3f, r0	; 63
    b670:	cd bf       	out	0x3d, r28	; 61
    b672:	5c 01       	movw	r10, r24
    b674:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4198
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    b676:	6e ec       	ldi	r22, 0xCE	; 206
    b678:	73 e3       	ldi	r23, 0x33	; 51
    b67a:	ce 01       	movw	r24, r28
    b67c:	01 96       	adiw	r24, 0x01	; 1
    b67e:	6c 01       	movw	r12, r24
    b680:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4199
  stat = get_global_temp(default_show_temp, str2, &te);
    b684:	10 91 0c 09 	lds	r17, 0x090C	; 0x80090c <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4770
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    b688:	60 ee       	ldi	r22, 0xE0	; 224
    b68a:	73 e3       	ldi	r23, 0x33	; 51
    b68c:	ce 01       	movw	r24, r28
    b68e:	c7 96       	adiw	r24, 0x37	; 55
    b690:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
    b694:	51 2c       	mov	r5, r1
    b696:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4767
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    b698:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4780
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    b69a:	0e e1       	ldi	r16, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4774
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    b69c:	be 01       	movw	r22, r28
    b69e:	6f 5d       	subi	r22, 0xDF	; 223
    b6a0:	7f 4f       	sbci	r23, 0xFF	; 255
    b6a2:	84 2d       	mov	r24, r4
    b6a4:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
    b6a8:	81 30       	cpi	r24, 0x01	; 1
    b6aa:	09 f0       	breq	.+2      	; 0xb6ae <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x72>
    b6ac:	9c c0       	rjmp	.+312    	; 0xb7e6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4775
      if (tds.used == 1)
    b6ae:	89 a1       	ldd	r24, Y+33	; 0x21
    b6b0:	81 30       	cpi	r24, 0x01	; 1
    b6b2:	09 f0       	breq	.+2      	; 0xb6b6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7a>
    b6b4:	98 c0       	rjmp	.+304    	; 0xb7e6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4777
      {
        if (cri == device)
    b6b6:	17 11       	cpse	r17, r7
    b6b8:	95 c0       	rjmp	.+298    	; 0xb7e4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4779
        {
          strcpy(name, tds.name);
    b6ba:	be 01       	movw	r22, r28
    b6bc:	63 5d       	subi	r22, 0xD3	; 211
    b6be:	7f 4f       	sbci	r23, 0xFF	; 255
    b6c0:	ce 01       	movw	r24, r28
    b6c2:	c7 96       	adiw	r24, 0x37	; 55
    b6c4:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4780
          if (status_tds18s20[idx].online == True)
    b6c8:	04 9d       	mul	r16, r4
    b6ca:	f0 01       	movw	r30, r0
    b6cc:	05 9d       	mul	r16, r5
    b6ce:	f0 0d       	add	r31, r0
    b6d0:	11 24       	eor	r1, r1
    b6d2:	eb 5c       	subi	r30, 0xCB	; 203
    b6d4:	f5 4f       	sbci	r31, 0xF5	; 245
    b6d6:	93 8d       	ldd	r25, Z+27	; 0x1b
    b6d8:	2d 96       	adiw	r28, 0x0d	; 13
    b6da:	9f af       	std	Y+63, r25	; 0x3f
    b6dc:	2d 97       	sbiw	r28, 0x0d	; 13
    b6de:	91 30       	cpi	r25, 0x01	; 1
    b6e0:	09 f0       	breq	.+2      	; 0xb6e4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa8>
    b6e2:	80 c0       	rjmp	.+256    	; 0xb7e4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4782
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    b6e4:	65 81       	ldd	r22, Z+5	; 0x05
    b6e6:	76 81       	ldd	r23, Z+6	; 0x06
    b6e8:	07 2e       	mov	r0, r23
    b6ea:	00 0c       	add	r0, r0
    b6ec:	88 0b       	sbc	r24, r24
    b6ee:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    b6f0:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    b6f4:	20 e0       	ldi	r18, 0x00	; 0
    b6f6:	30 e0       	ldi	r19, 0x00	; 0
    b6f8:	4a e7       	ldi	r20, 0x7A	; 122
    b6fa:	54 e4       	ldi	r21, 0x44	; 68
    b6fc:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
    b700:	1b 01       	movw	r2, r22
    b702:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4200
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    b704:	be 01       	movw	r22, r28
    b706:	69 5c       	subi	r22, 0xC9	; 201
    b708:	7f 4f       	sbci	r23, 0xFF	; 255
    b70a:	c6 01       	movw	r24, r12
    b70c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    b710:	ee 24       	eor	r14, r14
    b712:	ea 94       	dec	r14
    b714:	fe 2c       	mov	r15, r14
    b716:	10 e0       	ldi	r17, 0x00	; 0
    b718:	00 e0       	ldi	r16, 0x00	; 0
    b71a:	21 e0       	ldi	r18, 0x01	; 1
    b71c:	a4 01       	movw	r20, r8
    b71e:	4b 5f       	subi	r20, 0xFB	; 251
    b720:	5f 4f       	sbci	r21, 0xFF	; 255
    b722:	b5 01       	movw	r22, r10
    b724:	6b 5f       	subi	r22, 0xFB	; 251
    b726:	7f 4f       	sbci	r23, 0xFF	; 255
    b728:	c6 01       	movw	r24, r12
    b72a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    b72e:	34 01       	movw	r6, r8
    b730:	94 e1       	ldi	r25, 0x14	; 20
    b732:	69 0e       	add	r6, r25
    b734:	71 1c       	adc	r7, r1
    b736:	c5 01       	movw	r24, r10
    b738:	04 96       	adiw	r24, 0x04	; 4
    b73a:	2f 96       	adiw	r28, 0x0f	; 15
    b73c:	9f af       	std	Y+63, r25	; 0x3f
    b73e:	8e af       	std	Y+62, r24	; 0x3e
    b740:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4202
  if (stat == 1)
    b742:	2d 96       	adiw	r28, 0x0d	; 13
    b744:	9f ad       	ldd	r25, Y+63	; 0x3f
    b746:	2d 97       	sbiw	r28, 0x0d	; 13
    b748:	91 30       	cpi	r25, 0x01	; 1
    b74a:	09 f0       	breq	.+2      	; 0xb74e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x112>
    b74c:	95 c0       	rjmp	.+298    	; 0xb878 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4204
  {
    dtostrf(te, 4, 1, str1);
    b74e:	86 01       	movw	r16, r12
    b750:	21 e0       	ldi	r18, 0x01	; 1
    b752:	44 e0       	ldi	r20, 0x04	; 4
    b754:	c2 01       	movw	r24, r4
    b756:	b1 01       	movw	r22, r2
    b758:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4205
    if (strlen(str1) <= 4)
    b75c:	f6 01       	movw	r30, r12
    b75e:	01 90       	ld	r0, Z+
    b760:	00 20       	and	r0, r0
    b762:	e9 f7       	brne	.-6      	; 0xb75e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    b764:	31 97       	sbiw	r30, 0x01	; 1
    b766:	ec 19       	sub	r30, r12
    b768:	fd 09       	sbc	r31, r13
    b76a:	35 97       	sbiw	r30, 0x05	; 5
    b76c:	28 f4       	brcc	.+10     	; 0xb778 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4206
      strcat(str1, "C");
    b76e:	6a ee       	ldi	r22, 0xEA	; 234
    b770:	76 e0       	ldi	r23, 0x06	; 6
    b772:	c6 01       	movw	r24, r12
    b774:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4207
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    b778:	ee 24       	eor	r14, r14
    b77a:	ea 94       	dec	r14
    b77c:	fe 2c       	mov	r15, r14
    b77e:	10 e0       	ldi	r17, 0x00	; 0
    b780:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4212
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    b782:	28 e0       	ldi	r18, 0x08	; 8
    b784:	a3 01       	movw	r20, r6
    b786:	2f 96       	adiw	r28, 0x0f	; 15
    b788:	6e ad       	ldd	r22, Y+62	; 0x3e
    b78a:	7f ad       	ldd	r23, Y+63	; 0x3f
    b78c:	2f 97       	sbiw	r28, 0x0f	; 15
    b78e:	c6 01       	movw	r24, r12
    b790:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b794:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0xb>
    b798:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4215
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    b79c:	94 01       	movw	r18, r8
    b79e:	2c 5a       	subi	r18, 0xAC	; 172
    b7a0:	3f 4f       	sbci	r19, 0xFF	; 255
    b7a2:	a5 01       	movw	r20, r10
    b7a4:	4c 50       	subi	r20, 0x0C	; 12
    b7a6:	5f 4f       	sbci	r21, 0xFF	; 255
    b7a8:	b4 01       	movw	r22, r8
    b7aa:	c5 01       	movw	r24, r10
    b7ac:	0e 94 3d 81 	call	0x1027a	; 0x1027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4216
}
    b7b0:	c2 5b       	subi	r28, 0xB2	; 178
    b7b2:	df 4f       	sbci	r29, 0xFF	; 255
    b7b4:	0f b6       	in	r0, 0x3f	; 63
    b7b6:	f8 94       	cli
    b7b8:	de bf       	out	0x3e, r29	; 62
    b7ba:	0f be       	out	0x3f, r0	; 63
    b7bc:	cd bf       	out	0x3d, r28	; 61
    b7be:	df 91       	pop	r29
    b7c0:	cf 91       	pop	r28
    b7c2:	1f 91       	pop	r17
    b7c4:	0f 91       	pop	r16
    b7c6:	ff 90       	pop	r15
    b7c8:	ef 90       	pop	r14
    b7ca:	df 90       	pop	r13
    b7cc:	cf 90       	pop	r12
    b7ce:	bf 90       	pop	r11
    b7d0:	af 90       	pop	r10
    b7d2:	9f 90       	pop	r9
    b7d4:	8f 90       	pop	r8
    b7d6:	7f 90       	pop	r7
    b7d8:	6f 90       	pop	r6
    b7da:	5f 90       	pop	r5
    b7dc:	4f 90       	pop	r4
    b7de:	3f 90       	pop	r3
    b7e0:	2f 90       	pop	r2
    b7e2:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    b7e4:	73 94       	inc	r7
    b7e6:	8f ef       	ldi	r24, 0xFF	; 255
    b7e8:	48 1a       	sub	r4, r24
    b7ea:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4773
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b7ec:	96 e0       	ldi	r25, 0x06	; 6
    b7ee:	49 16       	cp	r4, r25
    b7f0:	51 04       	cpc	r5, r1
    b7f2:	09 f0       	breq	.+2      	; 0xb7f6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ba>
    b7f4:	53 cf       	rjmp	.-346    	; 0xb69c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x60>
    b7f6:	36 e6       	ldi	r19, 0x66	; 102
    b7f8:	23 2e       	mov	r2, r19
    b7fa:	31 2c       	mov	r3, r1
    b7fc:	41 2c       	mov	r4, r1
    b7fe:	51 2c       	mov	r5, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4790
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b800:	61 2c       	mov	r6, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4792
  {
    remote_tds_get_active(idx, &active);
    b802:	be 01       	movw	r22, r28
    b804:	65 5b       	subi	r22, 0xB5	; 181
    b806:	7f 4f       	sbci	r23, 0xFF	; 255
    b808:	86 2d       	mov	r24, r6
    b80a:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4793
    if (active == 1)
    b80e:	2c 96       	adiw	r28, 0x0c	; 12
    b810:	8f ad       	ldd	r24, Y+63	; 0x3f
    b812:	2c 97       	sbiw	r28, 0x0c	; 12
    b814:	2d 96       	adiw	r28, 0x0d	; 13
    b816:	8f af       	std	Y+63, r24	; 0x3f
    b818:	2d 97       	sbiw	r28, 0x0d	; 13
    b81a:	81 30       	cpi	r24, 0x01	; 1
    b81c:	d1 f4       	brne	.+52     	; 0xb852 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
    {
      if (cri == device)
    b81e:	17 11       	cpse	r17, r7
    b820:	17 c0       	rjmp	.+46     	; 0xb850 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
      {
        remote_tds_get_complete(idx, &active, name);
    b822:	ae 01       	movw	r20, r28
    b824:	49 5c       	subi	r20, 0xC9	; 201
    b826:	5f 4f       	sbci	r21, 0xFF	; 255
    b828:	be 01       	movw	r22, r28
    b82a:	65 5b       	subi	r22, 0xB5	; 181
    b82c:	7f 4f       	sbci	r23, 0xFF	; 255
    b82e:	86 2d       	mov	r24, r6
    b830:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    b834:	c2 01       	movw	r24, r4
    b836:	b1 01       	movw	r22, r2
    b838:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4798
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    b83c:	8a 3f       	cpi	r24, 0xFA	; 250
    b83e:	40 f4       	brcc	.+16     	; 0xb850 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
remote_tds_get_data():
    b840:	86 2d       	mov	r24, r6
    b842:	0e 94 c5 2a 	call	0x558a	; 0x558a <remote_tds_get_data(unsigned char) [clone .part.24]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    b846:	bc 01       	movw	r22, r24
    b848:	99 0f       	add	r25, r25
    b84a:	88 0b       	sbc	r24, r24
    b84c:	99 0b       	sbc	r25, r25
    b84e:	50 cf       	rjmp	.-352    	; 0xb6f0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    b850:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4790
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b852:	63 94       	inc	r6
    b854:	93 e0       	ldi	r25, 0x03	; 3
    b856:	29 0e       	add	r2, r25
    b858:	31 1c       	adc	r3, r1
    b85a:	41 1c       	adc	r4, r1
    b85c:	51 1c       	adc	r5, r1
    b85e:	84 e8       	ldi	r24, 0x84	; 132
    b860:	28 16       	cp	r2, r24
    b862:	31 04       	cpc	r3, r1
    b864:	41 04       	cpc	r4, r1
    b866:	51 04       	cpc	r5, r1
    b868:	61 f6       	brne	.-104    	; 0xb802 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4771
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    b86a:	21 2c       	mov	r2, r1
    b86c:	31 2c       	mov	r3, r1
    b86e:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4768
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    b870:	2d 96       	adiw	r28, 0x0d	; 13
    b872:	1f ae       	std	Y+63, r1	; 0x3f
    b874:	2d 97       	sbiw	r28, 0x0d	; 13
    b876:	46 cf       	rjmp	.-372    	; 0xb704 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4211
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    b878:	60 ee       	ldi	r22, 0xE0	; 224
    b87a:	73 e3       	ldi	r23, 0x33	; 51
    b87c:	c6 01       	movw	r24, r12
    b87e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4212
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    b882:	ee 24       	eor	r14, r14
    b884:	ea 94       	dec	r14
    b886:	fe 2c       	mov	r15, r14
    b888:	00 e0       	ldi	r16, 0x00	; 0
    b88a:	18 ef       	ldi	r17, 0xF8	; 248
    b88c:	7a cf       	rjmp	.-268    	; 0xb782 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x146>

0000b88e <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    b88e:	cf 92       	push	r12
    b890:	df 92       	push	r13
    b892:	ef 92       	push	r14
    b894:	ff 92       	push	r15
    b896:	1f 93       	push	r17
    b898:	cf 93       	push	r28
    b89a:	df 93       	push	r29
    b89c:	cd b7       	in	r28, 0x3d	; 61
    b89e:	de b7       	in	r29, 0x3e	; 62
    b8a0:	63 97       	sbiw	r28, 0x13	; 19
    b8a2:	0f b6       	in	r0, 0x3f	; 63
    b8a4:	f8 94       	cli
    b8a6:	de bf       	out	0x3e, r29	; 62
    b8a8:	0f be       	out	0x3f, r0	; 63
    b8aa:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
  uint8_t active = 0;
    b8ac:	1b 8a       	std	Y+19, r1	; 0x13
    b8ae:	86 e6       	ldi	r24, 0x66	; 102
    b8b0:	c8 2e       	mov	r12, r24
    b8b2:	d1 2c       	mov	r13, r1
    b8b4:	e1 2c       	mov	r14, r1
    b8b6:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3228
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b8b8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3230
  {
    remote_tds_get_complete(idx, &active, payload);
    b8ba:	ae 01       	movw	r20, r28
    b8bc:	4f 5f       	subi	r20, 0xFF	; 255
    b8be:	5f 4f       	sbci	r21, 0xFF	; 255
    b8c0:	be 01       	movw	r22, r28
    b8c2:	6d 5e       	subi	r22, 0xED	; 237
    b8c4:	7f 4f       	sbci	r23, 0xFF	; 255
    b8c6:	81 2f       	mov	r24, r17
    b8c8:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    b8cc:	8b 89       	ldd	r24, Y+19	; 0x13
    b8ce:	81 30       	cpi	r24, 0x01	; 1
    b8d0:	09 f0       	breq	.+2      	; 0xb8d4 <send_mqtt_remote_tds_status()+0x46>
    b8d2:	44 c0       	rjmp	.+136    	; 0xb95c <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    b8d4:	9e 01       	movw	r18, r28
    b8d6:	2f 5f       	subi	r18, 0xFF	; 255
    b8d8:	3f 4f       	sbci	r19, 0xFF	; 255
    b8da:	40 ed       	ldi	r20, 0xD0	; 208
    b8dc:	53 e0       	ldi	r21, 0x03	; 3
    b8de:	61 2f       	mov	r22, r17
    b8e0:	85 ed       	ldi	r24, 0xD5	; 213
    b8e2:	93 e0       	ldi	r25, 0x03	; 3
    b8e4:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3235
      itoa(active, payload, 10);
    b8e8:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    b8ea:	4a e0       	ldi	r20, 0x0A	; 10
    b8ec:	be 01       	movw	r22, r28
    b8ee:	6f 5f       	subi	r22, 0xFF	; 255
    b8f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8f2:	90 e0       	ldi	r25, 0x00	; 0
    b8f4:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    b8f8:	9e 01       	movw	r18, r28
    b8fa:	2f 5f       	subi	r18, 0xFF	; 255
    b8fc:	3f 4f       	sbci	r19, 0xFF	; 255
    b8fe:	4a ed       	ldi	r20, 0xDA	; 218
    b900:	53 e0       	ldi	r21, 0x03	; 3
    b902:	61 2f       	mov	r22, r17
    b904:	85 ed       	ldi	r24, 0xD5	; 213
    b906:	93 e0       	ldi	r25, 0x03	; 3
    b908:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_data():
    b90c:	81 2f       	mov	r24, r17
    b90e:	0e 94 c5 2a 	call	0x558a	; 0x558a <remote_tds_get_data(unsigned char) [clone .part.24]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    b912:	4a e0       	ldi	r20, 0x0A	; 10
    b914:	be 01       	movw	r22, r28
    b916:	6f 5f       	subi	r22, 0xFF	; 255
    b918:	7f 4f       	sbci	r23, 0xFF	; 255
    b91a:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    b91e:	9e 01       	movw	r18, r28
    b920:	2f 5f       	subi	r18, 0xFF	; 255
    b922:	3f 4f       	sbci	r19, 0xFF	; 255
    b924:	41 ee       	ldi	r20, 0xE1	; 225
    b926:	53 e0       	ldi	r21, 0x03	; 3
    b928:	61 2f       	mov	r22, r17
    b92a:	85 ed       	ldi	r24, 0xD5	; 213
    b92c:	93 e0       	ldi	r25, 0x03	; 3
    b92e:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    b932:	c7 01       	movw	r24, r14
    b934:	b6 01       	movw	r22, r12
    b936:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    b93a:	4a e0       	ldi	r20, 0x0A	; 10
    b93c:	be 01       	movw	r22, r28
    b93e:	6f 5f       	subi	r22, 0xFF	; 255
    b940:	7f 4f       	sbci	r23, 0xFF	; 255
    b942:	90 e0       	ldi	r25, 0x00	; 0
    b944:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3240
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    b948:	9e 01       	movw	r18, r28
    b94a:	2f 5f       	subi	r18, 0xFF	; 255
    b94c:	3f 4f       	sbci	r19, 0xFF	; 255
    b94e:	46 ee       	ldi	r20, 0xE6	; 230
    b950:	53 e0       	ldi	r21, 0x03	; 3
    b952:	61 2f       	mov	r22, r17
    b954:	85 ed       	ldi	r24, 0xD5	; 213
    b956:	93 e0       	ldi	r25, 0x03	; 3
    b958:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3228
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b95c:	1f 5f       	subi	r17, 0xFF	; 255
    b95e:	83 e0       	ldi	r24, 0x03	; 3
    b960:	c8 0e       	add	r12, r24
    b962:	d1 1c       	adc	r13, r1
    b964:	e1 1c       	adc	r14, r1
    b966:	f1 1c       	adc	r15, r1
    b968:	84 e8       	ldi	r24, 0x84	; 132
    b96a:	c8 16       	cp	r12, r24
    b96c:	d1 04       	cpc	r13, r1
    b96e:	e1 04       	cpc	r14, r1
    b970:	f1 04       	cpc	r15, r1
    b972:	09 f0       	breq	.+2      	; 0xb976 <send_mqtt_remote_tds_status()+0xe8>
    b974:	a2 cf       	rjmp	.-188    	; 0xb8ba <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    b976:	63 96       	adiw	r28, 0x13	; 19
    b978:	0f b6       	in	r0, 0x3f	; 63
    b97a:	f8 94       	cli
    b97c:	de bf       	out	0x3e, r29	; 62
    b97e:	0f be       	out	0x3f, r0	; 63
    b980:	cd bf       	out	0x3d, r28	; 61
    b982:	df 91       	pop	r29
    b984:	cf 91       	pop	r28
    b986:	1f 91       	pop	r17
    b988:	ff 90       	pop	r15
    b98a:	ef 90       	pop	r14
    b98c:	df 90       	pop	r13
    b98e:	cf 90       	pop	r12
    b990:	08 95       	ret

0000b992 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    b992:	ef 92       	push	r14
    b994:	ff 92       	push	r15
    b996:	0f 93       	push	r16
    b998:	1f 93       	push	r17
    b99a:	cf 93       	push	r28
    b99c:	df 93       	push	r29
    b99e:	cd b7       	in	r28, 0x3d	; 61
    b9a0:	de b7       	in	r29, 0x3e	; 62
    b9a2:	63 97       	sbiw	r28, 0x13	; 19
    b9a4:	0f b6       	in	r0, 0x3f	; 63
    b9a6:	f8 94       	cli
    b9a8:	de bf       	out	0x3e, r29	; 62
    b9aa:	0f be       	out	0x3f, r0	; 63
    b9ac:	cd bf       	out	0x3d, r28	; 61
    b9ae:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b9b0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    b9b2:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    b9b4:	ae 01       	movw	r20, r28
    b9b6:	4f 5f       	subi	r20, 0xFF	; 255
    b9b8:	5f 4f       	sbci	r21, 0xFF	; 255
    b9ba:	be 01       	movw	r22, r28
    b9bc:	6d 5e       	subi	r22, 0xED	; 237
    b9be:	7f 4f       	sbci	r23, 0xFF	; 255
    b9c0:	81 2f       	mov	r24, r17
    b9c2:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2135
    if (strcmp(name, tmp_name) == 0)
    b9c6:	be 01       	movw	r22, r28
    b9c8:	6f 5f       	subi	r22, 0xFF	; 255
    b9ca:	7f 4f       	sbci	r23, 0xFF	; 255
    b9cc:	c7 01       	movw	r24, r14
    b9ce:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    b9d2:	89 2b       	or	r24, r25
    b9d4:	09 f4       	brne	.+2      	; 0xb9d8 <remote_tds_name_exist(char*)+0x46>
    b9d6:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b9d8:	1f 5f       	subi	r17, 0xFF	; 255
    b9da:	1a 30       	cpi	r17, 0x0A	; 10
    b9dc:	59 f7       	brne	.-42     	; 0xb9b4 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    b9de:	80 2f       	mov	r24, r16
    b9e0:	63 96       	adiw	r28, 0x13	; 19
    b9e2:	0f b6       	in	r0, 0x3f	; 63
    b9e4:	f8 94       	cli
    b9e6:	de bf       	out	0x3e, r29	; 62
    b9e8:	0f be       	out	0x3f, r0	; 63
    b9ea:	cd bf       	out	0x3d, r28	; 61
    b9ec:	df 91       	pop	r29
    b9ee:	cf 91       	pop	r28
    b9f0:	1f 91       	pop	r17
    b9f2:	0f 91       	pop	r16
    b9f4:	ff 90       	pop	r15
    b9f6:	ef 90       	pop	r14
    b9f8:	08 95       	ret

0000b9fa <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4731
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    b9fa:	1f 93       	push	r17
    b9fc:	cf 93       	push	r28
    b9fe:	df 93       	push	r29
    ba00:	cd b7       	in	r28, 0x3d	; 61
    ba02:	de b7       	in	r29, 0x3e	; 62
    ba04:	62 97       	sbiw	r28, 0x12	; 18
    ba06:	0f b6       	in	r0, 0x3f	; 63
    ba08:	f8 94       	cli
    ba0a:	de bf       	out	0x3e, r29	; 62
    ba0c:	0f be       	out	0x3f, r0	; 63
    ba0e:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1701
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    ba10:	10 91 0b 09 	lds	r17, 0x090B	; 0x80090b <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    ba14:	6b ef       	ldi	r22, 0xFB	; 251
    ba16:	78 e0       	ldi	r23, 0x08	; 8
    ba18:	ce 01       	movw	r24, r28
    ba1a:	01 96       	adiw	r24, 0x01	; 1
    ba1c:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4736
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    ba20:	89 81       	ldd	r24, Y+1	; 0x01
    ba22:	88 23       	and	r24, r24
    ba24:	71 f0       	breq	.+28     	; 0xba42 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4738
  {
    if (remote_tds_name_exist(name) == 255)
    ba26:	ce 01       	movw	r24, r28
    ba28:	01 96       	adiw	r24, 0x01	; 1
    ba2a:	0e 94 c9 5c 	call	0xb992	; 0xb992 <remote_tds_name_exist(char*)>
    ba2e:	8f 3f       	cpi	r24, 0xFF	; 255
    ba30:	41 f4       	brne	.+16     	; 0xba42 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2039
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    ba32:	1a 30       	cpi	r17, 0x0A	; 10
    ba34:	30 f4       	brcc	.+12     	; 0xba42 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
    ba36:	be 01       	movw	r22, r28
    ba38:	6f 5f       	subi	r22, 0xFF	; 255
    ba3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ba3c:	81 2f       	mov	r24, r17
    ba3e:	0e 94 3b 51 	call	0xa276	; 0xa276 <remote_tds_set_name(unsigned char, char*) [clone .part.20]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4741
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    ba42:	62 96       	adiw	r28, 0x12	; 18
    ba44:	0f b6       	in	r0, 0x3f	; 63
    ba46:	f8 94       	cli
    ba48:	de bf       	out	0x3e, r29	; 62
    ba4a:	0f be       	out	0x3f, r0	; 63
    ba4c:	cd bf       	out	0x3d, r28	; 61
    ba4e:	df 91       	pop	r29
    ba50:	cf 91       	pop	r28
    ba52:	1f 91       	pop	r17
    ba54:	08 95       	ret

0000ba56 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    ba56:	cf 93       	push	r28
    ba58:	df 93       	push	r29
    ba5a:	cd b7       	in	r28, 0x3d	; 61
    ba5c:	de b7       	in	r29, 0x3e	; 62
    ba5e:	c1 58       	subi	r28, 0x81	; 129
    ba60:	d1 09       	sbc	r29, r1
    ba62:	0f b6       	in	r0, 0x3f	; 63
    ba64:	f8 94       	cli
    ba66:	de bf       	out	0x3e, r29	; 62
    ba68:	0f be       	out	0x3f, r0	; 63
    ba6a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2080
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    ba6c:	cf 57       	subi	r28, 0x7F	; 127
    ba6e:	df 4f       	sbci	r29, 0xFF	; 255
    ba70:	18 82       	st	Y, r1
    ba72:	c1 58       	subi	r28, 0x81	; 129
    ba74:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
  remote_tds_get_complete(idx, &active, tmp1);
    ba76:	ae 01       	movw	r20, r28
    ba78:	4f 5f       	subi	r20, 0xFF	; 255
    ba7a:	5f 4f       	sbci	r21, 0xFF	; 255
    ba7c:	be 01       	movw	r22, r28
    ba7e:	6f 57       	subi	r22, 0x7F	; 127
    ba80:	7f 4f       	sbci	r23, 0xFF	; 255
    ba82:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2082
  if (active == 1)
    ba86:	cf 57       	subi	r28, 0x7F	; 127
    ba88:	df 4f       	sbci	r29, 0xFF	; 255
    ba8a:	88 81       	ld	r24, Y
    ba8c:	c1 58       	subi	r28, 0x81	; 129
    ba8e:	d0 40       	sbci	r29, 0x00	; 0
    ba90:	81 30       	cpi	r24, 0x01	; 1
    ba92:	a1 f4       	brne	.+40     	; 0xbabc <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084
  {
    strcpy(tmp2, "/rtds/");
    ba94:	62 ef       	ldi	r22, 0xF2	; 242
    ba96:	73 e0       	ldi	r23, 0x03	; 3
    ba98:	ce 01       	movw	r24, r28
    ba9a:	8f 5b       	subi	r24, 0xBF	; 191
    ba9c:	9f 4f       	sbci	r25, 0xFF	; 255
    ba9e:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2085
    strcat(tmp2, tmp1);
    baa2:	be 01       	movw	r22, r28
    baa4:	6f 5f       	subi	r22, 0xFF	; 255
    baa6:	7f 4f       	sbci	r23, 0xFF	; 255
    baa8:	ce 01       	movw	r24, r28
    baaa:	8f 5b       	subi	r24, 0xBF	; 191
    baac:	9f 4f       	sbci	r25, 0xFF	; 255
    baae:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
    mqtt_client.subscribe(tmp2);
    bab2:	ce 01       	movw	r24, r28
    bab4:	8f 5b       	subi	r24, 0xBF	; 191
    bab6:	9f 4f       	sbci	r25, 0xFF	; 255
    bab8:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
  }
}
    babc:	cf 57       	subi	r28, 0x7F	; 127
    babe:	df 4f       	sbci	r29, 0xFF	; 255
    bac0:	0f b6       	in	r0, 0x3f	; 63
    bac2:	f8 94       	cli
    bac4:	de bf       	out	0x3e, r29	; 62
    bac6:	0f be       	out	0x3f, r0	; 63
    bac8:	cd bf       	out	0x3d, r28	; 61
    baca:	df 91       	pop	r29
    bacc:	cf 91       	pop	r28
    bace:	08 95       	ret

0000bad0 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4716

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    bad0:	1f 93       	push	r17
    bad2:	cf 93       	push	r28
    bad4:	df 93       	push	r29
    bad6:	cd b7       	in	r28, 0x3d	; 61
    bad8:	de b7       	in	r29, 0x3e	; 62
    bada:	62 97       	sbiw	r28, 0x12	; 18
    badc:	0f b6       	in	r0, 0x3f	; 63
    bade:	f8 94       	cli
    bae0:	de bf       	out	0x3e, r29	; 62
    bae2:	0f be       	out	0x3f, r0	; 63
    bae4:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1701
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    bae6:	10 91 0b 09 	lds	r17, 0x090B	; 0x80090b <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    baea:	6b ef       	ldi	r22, 0xFB	; 251
    baec:	78 e0       	ldi	r23, 0x08	; 8
    baee:	ce 01       	movw	r24, r28
    baf0:	01 96       	adiw	r24, 0x01	; 1
    baf2:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4722
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    baf6:	89 81       	ldd	r24, Y+1	; 0x01
    baf8:	88 23       	and	r24, r24
    bafa:	81 f0       	breq	.+32     	; 0xbb1c <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
    if (remote_tds_name_exist(name) == 255)
    bafc:	ce 01       	movw	r24, r28
    bafe:	01 96       	adiw	r24, 0x01	; 1
    bb00:	0e 94 c9 5c 	call	0xb992	; 0xb992 <remote_tds_name_exist(char*)>
    bb04:	8f 3f       	cpi	r24, 0xFF	; 255
    bb06:	51 f4       	brne	.+20     	; 0xbb1c <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
    {
      remote_tds_set_complete(idx, active, name);
    bb08:	ae 01       	movw	r20, r28
    bb0a:	4f 5f       	subi	r20, 0xFF	; 255
    bb0c:	5f 4f       	sbci	r21, 0xFF	; 255
    bb0e:	61 e0       	ldi	r22, 0x01	; 1
    bb10:	81 2f       	mov	r24, r17
    bb12:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
      remote_tds_subscibe_topic(idx);
    bb16:	81 2f       	mov	r24, r17
    bb18:	0e 94 2b 5d 	call	0xba56	; 0xba56 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4728
    }
}
    bb1c:	62 96       	adiw	r28, 0x12	; 18
    bb1e:	0f b6       	in	r0, 0x3f	; 63
    bb20:	f8 94       	cli
    bb22:	de bf       	out	0x3e, r29	; 62
    bb24:	0f be       	out	0x3f, r0	; 63
    bb26:	cd bf       	out	0x3d, r28	; 61
    bb28:	df 91       	pop	r29
    bb2a:	cf 91       	pop	r28
    bb2c:	1f 91       	pop	r17
    bb2e:	08 95       	ret

0000bb30 <click_rtds_subscribe(unsigned char, unsigned char)>:
_Z20click_rtds_subscribehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4613
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
}
////
void click_rtds_subscribe(uint8_t args1, uint8_t idx)
{
    bb30:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4615
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    bb32:	0c 94 2b 5d 	jmp	0xba56	; 0xba56 <remote_tds_subscibe_topic(unsigned char)>

0000bb36 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2264
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    bb36:	2f 92       	push	r2
    bb38:	3f 92       	push	r3
    bb3a:	4f 92       	push	r4
    bb3c:	5f 92       	push	r5
    bb3e:	6f 92       	push	r6
    bb40:	7f 92       	push	r7
    bb42:	8f 92       	push	r8
    bb44:	9f 92       	push	r9
    bb46:	af 92       	push	r10
    bb48:	bf 92       	push	r11
    bb4a:	cf 92       	push	r12
    bb4c:	df 92       	push	r13
    bb4e:	ef 92       	push	r14
    bb50:	ff 92       	push	r15
    bb52:	0f 93       	push	r16
    bb54:	1f 93       	push	r17
    bb56:	cf 93       	push	r28
    bb58:	df 93       	push	r29
    bb5a:	cd b7       	in	r28, 0x3d	; 61
    bb5c:	de b7       	in	r29, 0x3e	; 62
    bb5e:	cc 52       	subi	r28, 0x2C	; 44
    bb60:	d1 40       	sbci	r29, 0x01	; 1
    bb62:	0f b6       	in	r0, 0x3f	; 63
    bb64:	f8 94       	cli
    bb66:	de bf       	out	0x3e, r29	; 62
    bb68:	0f be       	out	0x3f, r0	; 63
    bb6a:	cd bf       	out	0x3d, r28	; 61
    bb6c:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    bb6e:	1b 82       	std	Y+3, r1	; 0x03
    bb70:	89 ef       	ldi	r24, 0xF9	; 249
    bb72:	93 e0       	ldi	r25, 0x03	; 3
    bb74:	9d 83       	std	Y+5, r25	; 0x05
    bb76:	8c 83       	std	Y+4, r24	; 0x04
    bb78:	89 e3       	ldi	r24, 0x39	; 57
    bb7a:	95 e0       	ldi	r25, 0x05	; 5
    bb7c:	9f 83       	std	Y+7, r25	; 0x07
    bb7e:	8e 83       	std	Y+6, r24	; 0x06
    bb80:	18 86       	std	Y+8, r1	; 0x08
    bb82:	19 86       	std	Y+9, r1	; 0x09
    bb84:	1a 86       	std	Y+10, r1	; 0x0a
    bb86:	1b 86       	std	Y+11, r1	; 0x0b
    bb88:	80 e6       	ldi	r24, 0x60	; 96
    bb8a:	9a ee       	ldi	r25, 0xEA	; 234
    bb8c:	a0 e0       	ldi	r26, 0x00	; 0
    bb8e:	b0 e0       	ldi	r27, 0x00	; 0
    bb90:	8c 87       	std	Y+12, r24	; 0x0c
    bb92:	9d 87       	std	Y+13, r25	; 0x0d
    bb94:	ae 87       	std	Y+14, r26	; 0x0e
    bb96:	bf 87       	std	Y+15, r27	; 0x0f
    bb98:	18 8a       	std	Y+16, r1	; 0x10
    bb9a:	19 8a       	std	Y+17, r1	; 0x11
    bb9c:	1a 8a       	std	Y+18, r1	; 0x12
    bb9e:	1b 8a       	std	Y+19, r1	; 0x13
    bba0:	1c 8a       	std	Y+20, r1	; 0x14
    bba2:	1d 8a       	std	Y+21, r1	; 0x15
    bba4:	1e 8a       	std	Y+22, r1	; 0x16
    bba6:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    bba8:	8b e4       	ldi	r24, 0x4B	; 75
    bbaa:	90 e1       	ldi	r25, 0x10	; 16
    bbac:	9a 83       	std	Y+2, r25	; 0x02
    bbae:	89 83       	std	Y+1, r24	; 0x01
    bbb0:	e7 ef       	ldi	r30, 0xF7	; 247
    bbb2:	fa e0       	ldi	r31, 0x0A	; 10
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    bbb4:	80 e0       	ldi	r24, 0x00	; 0
    bbb6:	11 92       	st	Z+, r1
    bbb8:	8f 5f       	subi	r24, 0xFF	; 255
    bbba:	80 38       	cpi	r24, 0x80	; 128
    bbbc:	e1 f7       	brne	.-8      	; 0xbbb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    bbbe:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <mqtt_receive_message>
    bbc2:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <mqtt_receive_message+0x1>
    bbc6:	01 96       	adiw	r24, 0x01	; 1
    bbc8:	90 93 21 0a 	sts	0x0A21, r25	; 0x800a21 <mqtt_receive_message+0x1>
    bbcc:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
  strncpy(my_payload, (char*) payload, length);
    bbd0:	87 ef       	ldi	r24, 0xF7	; 247
    bbd2:	9a e0       	ldi	r25, 0x0A	; 10
    bbd4:	0e 94 a2 b4 	call	0x16944	; 0x16944 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    bbd8:	5e 01       	movw	r10, r28
    bbda:	28 ec       	ldi	r18, 0xC8	; 200
    bbdc:	a2 0e       	add	r10, r18
    bbde:	b1 1c       	adc	r11, r1
    bbe0:	65 ed       	ldi	r22, 0xD5	; 213
    bbe2:	71 e3       	ldi	r23, 0x31	; 49
    bbe4:	c5 01       	movw	r24, r10
    bbe6:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  if (strcmp(str1, topic) == 0)
    bbea:	b4 01       	movw	r22, r8
    bbec:	c5 01       	movw	r24, r10
    bbee:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    bbf2:	89 2b       	or	r24, r25
    bbf4:	49 f4       	brne	.+18     	; 0xbc08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    bbf6:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    bbfa:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    bbfe:	01 96       	adiw	r24, 0x01	; 1
    bc00:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    bc04:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    bc08:	6c ee       	ldi	r22, 0xEC	; 236
    bc0a:	71 e3       	ldi	r23, 0x31	; 49
    bc0c:	c5 01       	movw	r24, r10
    bc0e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2291
  if (strcmp(str1, topic) == 0)
    bc12:	b4 01       	movw	r22, r8
    bc14:	c5 01       	movw	r24, r10
    bc16:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    bc1a:	89 2b       	or	r24, r25
    bc1c:	49 f4       	brne	.+18     	; 0xbc30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
  {
    mqtt_process_message++;
    bc1e:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    bc22:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    bc26:	01 96       	adiw	r24, 0x01	; 1
    bc28:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    bc2c:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2299
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    bc30:	63 e1       	ldi	r22, 0x13	; 19
    bc32:	72 e3       	ldi	r23, 0x32	; 50
    bc34:	c5 01       	movw	r24, r10
    bc36:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
  strcat_P(str1, global_time_set);
    bc3a:	67 eb       	ldi	r22, 0xB7	; 183
    bc3c:	71 e3       	ldi	r23, 0x31	; 49
    bc3e:	c5 01       	movw	r24, r10
    bc40:	0e 94 fc a7 	call	0x14ff8	; 0x14ff8 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2301
  if (strcmp(str1, topic) == 0)
    bc44:	b4 01       	movw	r22, r8
    bc46:	c5 01       	movw	r24, r10
    bc48:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    bc4c:	89 2b       	or	r24, r25
    bc4e:	09 f0       	breq	.+2      	; 0xbc52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    bc50:	bb c0       	rjmp	.+374    	; 0xbdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2303
  {
    mqtt_process_message++;
    bc52:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    bc56:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    bc5a:	01 96       	adiw	r24, 0x01	; 1
    bc5c:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    bc60:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    bc64:	20 91 a9 0c 	lds	r18, 0x0CA9	; 0x800ca9 <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    bc68:	87 ef       	ldi	r24, 0xF7	; 247
    bc6a:	9a e0       	ldi	r25, 0x0A	; 10
    bc6c:	89 2b       	or	r24, r25
    bc6e:	09 f0       	breq	.+2      	; 0xbc72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    bc70:	3a c2       	rjmp	.+1140   	; 0xc0e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    bc72:	82 ef       	ldi	r24, 0xF2	; 242
    bc74:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    bc76:	4a ea       	ldi	r20, 0xAA	; 170
    bc78:	5c e0       	ldi	r21, 0x0C	; 12
    bc7a:	2a 96       	adiw	r28, 0x0a	; 10
    bc7c:	5f af       	std	Y+63, r21	; 0x3f
    bc7e:	4e af       	std	Y+62, r20	; 0x3e
    bc80:	2a 97       	sbiw	r28, 0x0a	; 10
    bc82:	2c 96       	adiw	r28, 0x0c	; 12
    bc84:	9f af       	std	Y+63, r25	; 0x3f
    bc86:	8e af       	std	Y+62, r24	; 0x3e
    bc88:	2c 97       	sbiw	r28, 0x0c	; 12
    bc8a:	87 ef       	ldi	r24, 0xF7	; 247
    bc8c:	9a e0       	ldi	r25, 0x0A	; 10
    bc8e:	2e 96       	adiw	r28, 0x0e	; 14
    bc90:	9f af       	std	Y+63, r25	; 0x3f
    bc92:	8e af       	std	Y+62, r24	; 0x3e
    bc94:	2e 97       	sbiw	r28, 0x0e	; 14
    bc96:	2f 96       	adiw	r28, 0x0f	; 15
    bc98:	2f af       	std	Y+63, r18	; 0x3f
    bc9a:	2f 97       	sbiw	r28, 0x0f	; 15
    bc9c:	61 96       	adiw	r28, 0x11	; 17
    bc9e:	1f ae       	std	Y+63, r1	; 0x3f
    bca0:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    bca2:	10 92 b1 0c 	sts	0x0CB1, r1	; 0x800cb1 <doc+0x8>
    bca6:	10 92 b0 0c 	sts	0x0CB0, r1	; 0x800cb0 <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    bcaa:	82 eb       	ldi	r24, 0xB2	; 178
    bcac:	9d e0       	ldi	r25, 0x0D	; 13
    bcae:	89 2b       	or	r24, r25
    bcb0:	09 f4       	brne	.+2      	; 0xbcb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    bcb2:	1c c2       	rjmp	.+1080   	; 0xc0ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    bcb4:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <doc+0x10a>
    bcb8:	10 92 b2 0d 	sts	0x0DB2, r1	; 0x800db2 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    bcbc:	ca 01       	movw	r24, r20
    bcbe:	ac 01       	movw	r20, r24
    bcc0:	62 eb       	ldi	r22, 0xB2	; 178
    bcc2:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    bcc4:	ce 01       	movw	r24, r28
    bcc6:	88 5b       	subi	r24, 0xB8	; 184
    bcc8:	9f 4f       	sbci	r25, 0xFF	; 255
    bcca:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    bcce:	82 eb       	ldi	r24, 0xB2	; 178
    bcd0:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    bcd2:	02 eb       	ldi	r16, 0xB2	; 178
    bcd4:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    bcd6:	89 2b       	or	r24, r25
    bcd8:	51 f0       	breq	.+20     	; 0xbcee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    bcda:	80 91 b2 0d 	lds	r24, 0x0DB2	; 0x800db2 <doc+0x109>
    bcde:	90 91 b3 0d 	lds	r25, 0x0DB3	; 0x800db3 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    bce2:	04 eb       	ldi	r16, 0xB4	; 180
    bce4:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    bce6:	09 97       	sbiw	r24, 0x09	; 9
    bce8:	11 f0       	breq	.+4      	; 0xbcee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    bcea:	10 e0       	ldi	r17, 0x00	; 0
    bcec:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    bcee:	66 e0       	ldi	r22, 0x06	; 6
    bcf0:	74 e0       	ldi	r23, 0x04	; 4
    bcf2:	c8 01       	movw	r24, r16
    bcf4:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
    bcf8:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    bcfa:	89 2b       	or	r24, r25
    bcfc:	09 f4       	brne	.+2      	; 0xbd00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    bcfe:	64 c0       	rjmp	.+200    	; 0xbdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bd00:	6b e0       	ldi	r22, 0x0B	; 11
    bd02:	74 e0       	ldi	r23, 0x04	; 4
    bd04:	c8 01       	movw	r24, r16
    bd06:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
    bd0a:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
    bd0c:	89 2b       	or	r24, r25
    bd0e:	09 f4       	brne	.+2      	; 0xbd12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    bd10:	5b c0       	rjmp	.+182    	; 0xbdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bd12:	61 e1       	ldi	r22, 0x11	; 17
    bd14:	74 e0       	ldi	r23, 0x04	; 4
    bd16:	c8 01       	movw	r24, r16
    bd18:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
    bd1c:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
    bd1e:	89 2b       	or	r24, r25
    bd20:	09 f4       	brne	.+2      	; 0xbd24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    bd22:	52 c0       	rjmp	.+164    	; 0xbdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bd24:	66 e1       	ldi	r22, 0x16	; 22
    bd26:	74 e0       	ldi	r23, 0x04	; 4
    bd28:	c8 01       	movw	r24, r16
    bd2a:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
    bd2e:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
    bd30:	89 2b       	or	r24, r25
    bd32:	09 f4       	brne	.+2      	; 0xbd36 <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    bd34:	49 c0       	rjmp	.+146    	; 0xbdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bd36:	6d e1       	ldi	r22, 0x1D	; 29
    bd38:	74 e0       	ldi	r23, 0x04	; 4
    bd3a:	c8 01       	movw	r24, r16
    bd3c:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2306
    bd40:	00 97       	sbiw	r24, 0x00	; 0
    bd42:	09 f4       	brne	.+2      	; 0xbd46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    bd44:	41 c0       	rjmp	.+130    	; 0xbdc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    bd46:	0e 94 3d 9a 	call	0x1347a	; 0x1347a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd4a:	38 2e       	mov	r3, r24
    bd4c:	c6 01       	movw	r24, r12
    bd4e:	0e 94 3d 9a 	call	0x1347a	; 0x1347a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd52:	d8 2e       	mov	r13, r24
    bd54:	c3 01       	movw	r24, r6
    bd56:	0e 94 3d 9a 	call	0x1347a	; 0x1347a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd5a:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    bd5c:	64 e2       	ldi	r22, 0x24	; 36
    bd5e:	74 e0       	ldi	r23, 0x04	; 4
    bd60:	c8 01       	movw	r24, r16
    bd62:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.33]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    bd66:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    bd68:	00 97       	sbiw	r24, 0x00	; 0
    bd6a:	19 f0       	breq	.+6      	; 0xbd72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    bd6c:	0e 94 3d 9a 	call	0x1347a	; 0x1347a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd70:	18 2f       	mov	r17, r24
    bd72:	c2 01       	movw	r24, r4
    bd74:	0e 94 3d 9a 	call	0x1347a	; 0x1347a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    bd78:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    bd7a:	d7 01       	movw	r26, r14
    bd7c:	8d 91       	ld	r24, X+
    bd7e:	9c 91       	ld	r25, X
    bd80:	11 97       	sbiw	r26, 0x01	; 1
    bd82:	87 30       	cpi	r24, 0x07	; 7
    bd84:	91 05       	cpc	r25, r1
    bd86:	08 f0       	brcs	.+2      	; 0xbd8a <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    bd88:	b4 c1       	rjmp	.+872    	; 0xc0f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    bd8a:	85 30       	cpi	r24, 0x05	; 5
    bd8c:	91 05       	cpc	r25, r1
    bd8e:	08 f0       	brcs	.+2      	; 0xbd92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    bd90:	be c1       	rjmp	.+892    	; 0xc10e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    bd92:	03 97       	sbiw	r24, 0x03	; 3
    bd94:	08 f0       	brcs	.+2      	; 0xbd98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    bd96:	cd c1       	rjmp	.+922    	; 0xc132 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    bd98:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    bd9a:	29 96       	adiw	r28, 0x09	; 9
    bd9c:	6f af       	std	Y+63, r22	; 0x3f
    bd9e:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    bda0:	2a 96       	adiw	r28, 0x0a	; 10
    bda2:	0f af       	std	Y+63, r16	; 0x3f
    bda4:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    bda6:	2b 96       	adiw	r28, 0x0b	; 11
    bda8:	1f af       	std	Y+63, r17	; 0x3f
    bdaa:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    bdac:	2c 96       	adiw	r28, 0x0c	; 12
    bdae:	cf ae       	std	Y+63, r12	; 0x3f
    bdb0:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    bdb2:	2d 96       	adiw	r28, 0x0d	; 13
    bdb4:	df ae       	std	Y+63, r13	; 0x3f
    bdb6:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    bdb8:	2e 96       	adiw	r28, 0x0e	; 14
    bdba:	3f ae       	std	Y+63, r3	; 0x3f
    bdbc:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    bdbe:	ce 01       	movw	r24, r28
    bdc0:	88 5b       	subi	r24, 0xB8	; 184
    bdc2:	9f 4f       	sbci	r25, 0xFF	; 255
    bdc4:	0e 94 87 90 	call	0x1210e	; 0x1210e <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    bdc8:	63 e1       	ldi	r22, 0x13	; 19
    bdca:	72 e3       	ldi	r23, 0x32	; 50
    bdcc:	c5 01       	movw	r24, r10
    bdce:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  strcat_P(str1, global_time_ntp);
    bdd2:	67 ea       	ldi	r22, 0xA7	; 167
    bdd4:	71 e3       	ldi	r23, 0x31	; 49
    bdd6:	c5 01       	movw	r24, r10
    bdd8:	0e 94 fc a7 	call	0x14ff8	; 0x14ff8 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  if (strcmp(str1, topic) == 0)
    bddc:	b4 01       	movw	r22, r8
    bdde:	c5 01       	movw	r24, r10
    bde0:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    bde4:	89 2b       	or	r24, r25
    bde6:	09 f0       	breq	.+2      	; 0xbdea <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    bde8:	e5 c0       	rjmp	.+458    	; 0xbfb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
  {
    mqtt_process_message++;
    bdea:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    bdee:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    bdf2:	01 96       	adiw	r24, 0x01	; 1
    bdf4:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    bdf8:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3375
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    bdfc:	81 e0       	ldi	r24, 0x01	; 1
    bdfe:	90 e0       	ldi	r25, 0x00	; 0
    be00:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    be04:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    be06:	7e 01       	movw	r14, r28
    be08:	28 e4       	ldi	r18, 0x48	; 72
    be0a:	e2 0e       	add	r14, r18
    be0c:	f1 1c       	adc	r15, r1
    be0e:	d7 01       	movw	r26, r14
    be10:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    be12:	0a e0       	ldi	r16, 0x0A	; 10
    be14:	24 e0       	ldi	r18, 0x04	; 4
    be16:	49 e8       	ldi	r20, 0x89	; 137
    be18:	5c e0       	ldi	r21, 0x0C	; 12
    be1a:	6e e2       	ldi	r22, 0x2E	; 46
    be1c:	c7 01       	movw	r24, r14
    be1e:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    be22:	ce 01       	movw	r24, r28
    be24:	01 96       	adiw	r24, 0x01	; 1
    be26:	0e 94 6b 8c 	call	0x118d6	; 0x118d6 <NTPClient::begin()>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    be2a:	20 e1       	ldi	r18, 0x10	; 16
    be2c:	3e e0       	ldi	r19, 0x0E	; 14
    be2e:	12 9f       	mul	r17, r18
    be30:	c0 01       	movw	r24, r0
    be32:	13 9f       	mul	r17, r19
    be34:	90 0d       	add	r25, r0
    be36:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    be38:	09 2e       	mov	r0, r25
    be3a:	00 0c       	add	r0, r0
    be3c:	aa 0b       	sbc	r26, r26
    be3e:	bb 0b       	sbc	r27, r27
    be40:	88 87       	std	Y+8, r24	; 0x08
    be42:	99 87       	std	Y+9, r25	; 0x09
    be44:	aa 87       	std	Y+10, r26	; 0x0a
    be46:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    be48:	fd 82       	std	Y+5, r15	; 0x05
    be4a:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    be4c:	ce 01       	movw	r24, r28
    be4e:	01 96       	adiw	r24, 0x01	; 1
    be50:	0e 94 82 8c 	call	0x11904	; 0x11904 <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    be54:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    be56:	88 23       	and	r24, r24
    be58:	09 f4       	brne	.+2      	; 0xbe5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    be5a:	9a c0       	rjmp	.+308    	; 0xbf90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    be5c:	ce 01       	movw	r24, r28
    be5e:	01 96       	adiw	r24, 0x01	; 1
    be60:	0e 94 1b 8c 	call	0x11836	; 0x11836 <NTPClient::getEpochTime() const>
    be64:	2c e3       	ldi	r18, 0x3C	; 60
    be66:	c2 2e       	mov	r12, r18
    be68:	d1 2c       	mov	r13, r1
    be6a:	e1 2c       	mov	r14, r1
    be6c:	f1 2c       	mov	r15, r1
    be6e:	a7 01       	movw	r20, r14
    be70:	96 01       	movw	r18, r12
    be72:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
    be76:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    be78:	ce 01       	movw	r24, r28
    be7a:	01 96       	adiw	r24, 0x01	; 1
    be7c:	0e 94 1b 8c 	call	0x11836	; 0x11836 <NTPClient::getEpochTime() const>
    be80:	30 e1       	ldi	r19, 0x10	; 16
    be82:	43 2e       	mov	r4, r19
    be84:	3e e0       	ldi	r19, 0x0E	; 14
    be86:	53 2e       	mov	r5, r19
    be88:	61 2c       	mov	r6, r1
    be8a:	71 2c       	mov	r7, r1
    be8c:	a3 01       	movw	r20, r6
    be8e:	92 01       	movw	r18, r4
    be90:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
    be94:	a7 01       	movw	r20, r14
    be96:	96 01       	movw	r18, r12
    be98:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
    be9c:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    be9e:	ce 01       	movw	r24, r28
    bea0:	01 96       	adiw	r24, 0x01	; 1
    bea2:	0e 94 1b 8c 	call	0x11836	; 0x11836 <NTPClient::getEpochTime() const>
    bea6:	20 e8       	ldi	r18, 0x80	; 128
    bea8:	31 e5       	ldi	r19, 0x51	; 81
    beaa:	41 e0       	ldi	r20, 0x01	; 1
    beac:	50 e0       	ldi	r21, 0x00	; 0
    beae:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
    beb2:	a3 01       	movw	r20, r6
    beb4:	92 01       	movw	r18, r4
    beb6:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
    beba:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    bebc:	ce 01       	movw	r24, r28
    bebe:	01 96       	adiw	r24, 0x01	; 1
    bec0:	0e 94 1b 8c 	call	0x11836	; 0x11836 <NTPClient::getEpochTime() const>
    bec4:	c8 57       	subi	r28, 0x78	; 120
    bec6:	df 4f       	sbci	r29, 0xFF	; 255
    bec8:	68 83       	st	Y, r22
    beca:	79 83       	std	Y+1, r23	; 0x01
    becc:	8a 83       	std	Y+2, r24	; 0x02
    bece:	9b 83       	std	Y+3, r25	; 0x03
    bed0:	c8 58       	subi	r28, 0x88	; 136
    bed2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    bed4:	ce 01       	movw	r24, r28
    bed6:	88 57       	subi	r24, 0x78	; 120
    bed8:	9f 4f       	sbci	r25, 0xFF	; 255
    beda:	0e 94 0d 99 	call	0x1321a	; 0x1321a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    bede:	fc 01       	movw	r30, r24
    bee0:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    bee2:	ce 01       	movw	r24, r28
    bee4:	01 96       	adiw	r24, 0x01	; 1
    bee6:	0e 94 1b 8c 	call	0x11836	; 0x11836 <NTPClient::getEpochTime() const>
    beea:	c8 57       	subi	r28, 0x78	; 120
    beec:	df 4f       	sbci	r29, 0xFF	; 255
    beee:	68 83       	st	Y, r22
    bef0:	79 83       	std	Y+1, r23	; 0x01
    bef2:	8a 83       	std	Y+2, r24	; 0x02
    bef4:	9b 83       	std	Y+3, r25	; 0x03
    bef6:	c8 58       	subi	r28, 0x88	; 136
    bef8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    befa:	ce 01       	movw	r24, r28
    befc:	88 57       	subi	r24, 0x78	; 120
    befe:	9f 4f       	sbci	r25, 0xFF	; 255
    bf00:	0e 94 0d 99 	call	0x1321a	; 0x1321a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    bf04:	dc 01       	movw	r26, r24
    bf06:	15 96       	adiw	r26, 0x05	; 5
    bf08:	0c 91       	ld	r16, X
    bf0a:	00 2e       	mov	r0, r16
    bf0c:	00 0c       	add	r0, r0
    bf0e:	11 0b       	sbc	r17, r17
    bf10:	0f 5f       	subi	r16, 0xFF	; 255
    bf12:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    bf14:	ce 01       	movw	r24, r28
    bf16:	01 96       	adiw	r24, 0x01	; 1
    bf18:	0e 94 4f 8c 	call	0x1189e	; 0x1189e <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    bf1c:	80 3d       	cpi	r24, 0xD0	; 208
    bf1e:	b7 e0       	ldi	r27, 0x07	; 7
    bf20:	9b 07       	cpc	r25, r27
    bf22:	10 f0       	brcs	.+4      	; 0xbf28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    bf24:	80 5d       	subi	r24, 0xD0	; 208
    bf26:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    bf28:	c8 57       	subi	r28, 0x78	; 120
    bf2a:	df 4f       	sbci	r29, 0xFF	; 255
    bf2c:	88 83       	st	Y, r24
    bf2e:	c8 58       	subi	r28, 0x88	; 136
    bf30:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    bf32:	c7 57       	subi	r28, 0x77	; 119
    bf34:	df 4f       	sbci	r29, 0xFF	; 255
    bf36:	08 83       	st	Y, r16
    bf38:	c9 58       	subi	r28, 0x89	; 137
    bf3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    bf3c:	c6 57       	subi	r28, 0x76	; 118
    bf3e:	df 4f       	sbci	r29, 0xFF	; 255
    bf40:	c8 82       	st	Y, r12
    bf42:	ca 58       	subi	r28, 0x8A	; 138
    bf44:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    bf46:	c5 57       	subi	r28, 0x75	; 117
    bf48:	df 4f       	sbci	r29, 0xFF	; 255
    bf4a:	d8 82       	st	Y, r13
    bf4c:	cb 58       	subi	r28, 0x8B	; 139
    bf4e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    bf50:	c4 57       	subi	r28, 0x74	; 116
    bf52:	df 4f       	sbci	r29, 0xFF	; 255
    bf54:	e8 82       	st	Y, r14
    bf56:	cc 58       	subi	r28, 0x8C	; 140
    bf58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    bf5a:	c3 57       	subi	r28, 0x73	; 115
    bf5c:	df 4f       	sbci	r29, 0xFF	; 255
    bf5e:	38 82       	st	Y, r3
    bf60:	cd 58       	subi	r28, 0x8D	; 141
    bf62:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
    bf64:	ce 01       	movw	r24, r28
    bf66:	88 57       	subi	r24, 0x78	; 120
    bf68:	9f 4f       	sbci	r25, 0xFF	; 255
    bf6a:	0e 94 87 90 	call	0x1210e	; 0x1210e <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    bf6e:	ce 01       	movw	r24, r28
    bf70:	01 96       	adiw	r24, 0x01	; 1
    bf72:	0e 94 4f 8c 	call	0x1189e	; 0x1189e <NTPClient::getYear() const>
    bf76:	9f 93       	push	r25
    bf78:	8f 93       	push	r24
    bf7a:	88 e2       	ldi	r24, 0x28	; 40
    bf7c:	94 e0       	ldi	r25, 0x04	; 4
    bf7e:	9f 93       	push	r25
    bf80:	8f 93       	push	r24
    bf82:	0e 94 b1 b4 	call	0x16962	; 0x16962 <printf>
    bf86:	0f 90       	pop	r0
    bf88:	0f 90       	pop	r0
    bf8a:	0f 90       	pop	r0
    bf8c:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    bf8e:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    bf90:	89 81       	ldd	r24, Y+1	; 0x01
    bf92:	9a 81       	ldd	r25, Y+2	; 0x02
    bf94:	dc 01       	movw	r26, r24
    bf96:	ed 91       	ld	r30, X+
    bf98:	fc 91       	ld	r31, X
    bf9a:	02 88       	ldd	r0, Z+18	; 0x12
    bf9c:	f3 89       	ldd	r31, Z+19	; 0x13
    bf9e:	e0 2d       	mov	r30, r0
    bfa0:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    bfa2:	1b 82       	std	Y+3, r1	; 0x03
    bfa4:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    bfa8:	11 30       	cpi	r17, 0x01	; 1
    bfaa:	09 f0       	breq	.+2      	; 0xbfae <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    bfac:	ef c0       	rjmp	.+478    	; 0xc18c <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    bfae:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    bfb0:	80 93 e9 0a 	sts	0x0AE9, r24	; 0x800ae9 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    bfb4:	63 e1       	ldi	r22, 0x13	; 19
    bfb6:	72 e3       	ldi	r23, 0x32	; 50
    bfb8:	c5 01       	movw	r24, r10
    bfba:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2322
  strcat_P(str1, global_time_offset);
    bfbe:	60 e9       	ldi	r22, 0x90	; 144
    bfc0:	71 e3       	ldi	r23, 0x31	; 49
    bfc2:	c5 01       	movw	r24, r10
    bfc4:	0e 94 fc a7 	call	0x14ff8	; 0x14ff8 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
  if (strcmp(str1, topic) == 0)
    bfc8:	b4 01       	movw	r22, r8
    bfca:	c5 01       	movw	r24, r10
    bfcc:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    bfd0:	89 2b       	or	r24, r25
    bfd2:	91 f4       	brne	.+36     	; 0xbff8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
  {
    mqtt_process_message++;
    bfd4:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    bfd8:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    bfdc:	01 96       	adiw	r24, 0x01	; 1
    bfde:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    bfe2:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
    time_set_offset(atoi(my_payload));
    bfe6:	87 ef       	ldi	r24, 0xF7	; 247
    bfe8:	9a e0       	ldi	r25, 0x0A	; 10
    bfea:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3380
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    bfee:	68 2f       	mov	r22, r24
    bff0:	81 e0       	ldi	r24, 0x01	; 1
    bff2:	90 e0       	ldi	r25, 0x00	; 0
    bff4:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    bff8:	63 e1       	ldi	r22, 0x13	; 19
    bffa:	72 e3       	ldi	r23, 0x32	; 50
    bffc:	c5 01       	movw	r24, r10
    bffe:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
  strcat(str1, device.nazev);
    c002:	61 e5       	ldi	r22, 0x51	; 81
    c004:	7c e0       	ldi	r23, 0x0C	; 12
    c006:	c5 01       	movw	r24, r10
    c008:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
  strcat(str1, "/tds/associate");
    c00c:	6d e2       	ldi	r22, 0x2D	; 45
    c00e:	74 e0       	ldi	r23, 0x04	; 4
    c010:	c5 01       	movw	r24, r10
    c012:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
  if (strcmp(str1, topic) == 0)
    c016:	b4 01       	movw	r22, r8
    c018:	c5 01       	movw	r24, r10
    c01a:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
  const char tmp1[16];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    c01e:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    c020:	89 2b       	or	r24, r25
    c022:	b1 f4       	brne	.+44     	; 0xc050 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
  {
    mqtt_process_message++;
    c024:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c028:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c02c:	01 96       	adiw	r24, 0x01	; 1
    c02e:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c032:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
    id = atoi(my_payload);
    c036:	87 ef       	ldi	r24, 0xF7	; 247
    c038:	9a e0       	ldi	r25, 0x0A	; 10
    c03a:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c03e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
    if (tds_associate(id) == 255)
    c040:	0e 94 cc 53 	call	0xa798	; 0xa798 <tds_associate(unsigned char)>
    c044:	8f 3f       	cpi	r24, 0xFF	; 255
    c046:	21 f4       	brne	.+8      	; 0xc050 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338
      log_error(&mqtt_client, "tds/associate full or bad id");
    c048:	8c e3       	ldi	r24, 0x3C	; 60
    c04a:	94 e0       	ldi	r25, 0x04	; 4
    c04c:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    c050:	63 e1       	ldi	r22, 0x13	; 19
    c052:	72 e3       	ldi	r23, 0x32	; 50
    c054:	c5 01       	movw	r24, r10
    c056:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
  strcat(str1, device.nazev);
    c05a:	61 e5       	ldi	r22, 0x51	; 81
    c05c:	7c e0       	ldi	r23, 0x0C	; 12
    c05e:	c5 01       	movw	r24, r10
    c060:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
  strcat(str1, "/tds/set/");
    c064:	69 e5       	ldi	r22, 0x59	; 89
    c066:	74 e0       	ldi	r23, 0x04	; 4
    c068:	c5 01       	movw	r24, r10
    c06a:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c06e:	f5 01       	movw	r30, r10
    c070:	01 90       	ld	r0, Z+
    c072:	00 20       	and	r0, r0
    c074:	e9 f7       	brne	.-6      	; 0xc070 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    c076:	31 97       	sbiw	r30, 0x01	; 1
    c078:	af 01       	movw	r20, r30
    c07a:	4a 19       	sub	r20, r10
    c07c:	5b 09       	sbc	r21, r11
    c07e:	b4 01       	movw	r22, r8
    c080:	c5 01       	movw	r24, r10
    c082:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c086:	89 2b       	or	r24, r25
    c088:	09 f0       	breq	.+2      	; 0xc08c <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    c08a:	02 c1       	rjmp	.+516    	; 0xc290 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
  {
    mqtt_process_message++;
    c08c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c090:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c094:	01 96       	adiw	r24, 0x01	; 1
    c096:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c09a:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c09e:	f5 01       	movw	r30, r10
    c0a0:	01 90       	ld	r0, Z+
    c0a2:	00 20       	and	r0, r0
    c0a4:	e9 f7       	brne	.-6      	; 0xc0a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    c0a6:	31 97       	sbiw	r30, 0x01	; 1
    c0a8:	ea 19       	sub	r30, r10
    c0aa:	fb 09       	sbc	r31, r11
    c0ac:	9e 2f       	mov	r25, r30
    c0ae:	4e 2f       	mov	r20, r30
    c0b0:	84 2f       	mov	r24, r20
    c0b2:	89 1b       	sub	r24, r25
    c0b4:	24 2f       	mov	r18, r20
    c0b6:	30 e0       	ldi	r19, 0x00	; 0
    c0b8:	d4 01       	movw	r26, r8
    c0ba:	0d 90       	ld	r0, X+
    c0bc:	00 20       	and	r0, r0
    c0be:	e9 f7       	brne	.-6      	; 0xc0ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    c0c0:	11 97       	sbiw	r26, 0x01	; 1
    c0c2:	a8 19       	sub	r26, r8
    c0c4:	b9 09       	sbc	r27, r9
    c0c6:	2a 17       	cp	r18, r26
    c0c8:	3b 07       	cpc	r19, r27
    c0ca:	08 f0       	brcs	.+2      	; 0xc0ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    c0cc:	61 c0       	rjmp	.+194    	; 0xc190 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
    {
      str1[cnt] = topic[f];
    c0ce:	d5 01       	movw	r26, r10
    c0d0:	a8 0f       	add	r26, r24
    c0d2:	b1 1d       	adc	r27, r1
    c0d4:	28 0d       	add	r18, r8
    c0d6:	39 1d       	adc	r19, r9
    c0d8:	f9 01       	movw	r30, r18
    c0da:	80 81       	ld	r24, Z
    c0dc:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
      str1[cnt + 1] = 0;
    c0de:	11 96       	adiw	r26, 0x01	; 1
    c0e0:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c0e2:	4f 5f       	subi	r20, 0xFF	; 255
    c0e4:	e5 cf       	rjmp	.-54     	; 0xc0b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    c0e6:	87 ef       	ldi	r24, 0xF7	; 247
    c0e8:	9a e0       	ldi	r25, 0x0A	; 10
    c0ea:	c5 cd       	rjmp	.-1142   	; 0xbc76 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    c0ec:	82 eb       	ldi	r24, 0xB2	; 178
    c0ee:	9d e0       	ldi	r25, 0x0D	; 13
    c0f0:	e6 cd       	rjmp	.-1076   	; 0xbcbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    c0f2:	87 30       	cpi	r24, 0x07	; 7
    c0f4:	91 05       	cpc	r25, r1
    c0f6:	b1 f0       	breq	.+44     	; 0xc124 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    c0f8:	0a 97       	sbiw	r24, 0x0a	; 10
    c0fa:	09 f0       	breq	.+2      	; 0xc0fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    c0fc:	4d ce       	rjmp	.-870    	; 0xbd98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    c0fe:	f7 01       	movw	r30, r14
    c100:	62 81       	ldd	r22, Z+2	; 0x02
    c102:	73 81       	ldd	r23, Z+3	; 0x03
    c104:	84 81       	ldd	r24, Z+4	; 0x04
    c106:	95 81       	ldd	r25, Z+5	; 0x05
    c108:	0e 94 37 b3 	call	0x1666e	; 0x1666e <__fixunssfsi>
    c10c:	03 c0       	rjmp	.+6      	; 0xc114 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    c10e:	f7 01       	movw	r30, r14
    c110:	62 81       	ldd	r22, Z+2	; 0x02
    c112:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    c114:	60 3d       	cpi	r22, 0xD0	; 208
    c116:	f7 e0       	ldi	r31, 0x07	; 7
    c118:	7f 07       	cpc	r23, r31
    c11a:	08 f4       	brcc	.+2      	; 0xc11e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    c11c:	3e ce       	rjmp	.-900    	; 0xbd9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    c11e:	60 5d       	subi	r22, 0xD0	; 208
    c120:	77 40       	sbci	r23, 0x07	; 7
    c122:	3b ce       	rjmp	.-906    	; 0xbd9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    c124:	12 96       	adiw	r26, 0x02	; 2
    c126:	6d 91       	ld	r22, X+
    c128:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c12a:	71 95       	neg	r23
    c12c:	61 95       	neg	r22
    c12e:	71 09       	sbc	r23, r1
    c130:	f1 cf       	rjmp	.-30     	; 0xc114 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    c132:	12 96       	adiw	r26, 0x02	; 2
    c134:	ed 91       	ld	r30, X+
    c136:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    c138:	30 97       	sbiw	r30, 0x00	; 0
    c13a:	09 f4       	brne	.+2      	; 0xc13e <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    c13c:	2d ce       	rjmp	.-934    	; 0xbd98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    c13e:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    c140:	61 e0       	ldi	r22, 0x01	; 1
    c142:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    c144:	84 37       	cpi	r24, 0x74	; 116
    c146:	09 f4       	brne	.+2      	; 0xc14a <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    c148:	28 ce       	rjmp	.-944    	; 0xbd9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    c14a:	8b 32       	cpi	r24, 0x2B	; 43
    c14c:	c9 f0       	breq	.+50     	; 0xc180 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    c14e:	8d 32       	cpi	r24, 0x2D	; 45
    c150:	c1 f4       	brne	.+48     	; 0xc182 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    c152:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    c154:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    c156:	70 e0       	ldi	r23, 0x00	; 0
    c158:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    c15a:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    c15c:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    c15e:	20 ed       	ldi	r18, 0xD0	; 208
    c160:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    c162:	2a 30       	cpi	r18, 0x0A	; 10
    c164:	80 f4       	brcc	.+32     	; 0xc186 <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    c166:	46 9f       	mul	r20, r22
    c168:	90 01       	movw	r18, r0
    c16a:	47 9f       	mul	r20, r23
    c16c:	30 0d       	add	r19, r0
    c16e:	11 24       	eor	r1, r1
    c170:	b9 01       	movw	r22, r18
    c172:	60 53       	subi	r22, 0x30	; 48
    c174:	71 09       	sbc	r23, r1
    c176:	69 0f       	add	r22, r25
    c178:	71 1d       	adc	r23, r1
    c17a:	97 fd       	sbrc	r25, 7
    c17c:	7a 95       	dec	r23
    c17e:	ee cf       	rjmp	.-36     	; 0xc15c <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    c180:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    c182:	80 e0       	ldi	r24, 0x00	; 0
    c184:	e8 cf       	rjmp	.-48     	; 0xc156 <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c186:	81 11       	cpse	r24, r1
    c188:	d0 cf       	rjmp	.-96     	; 0xc12a <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    c18a:	c4 cf       	rjmp	.-120    	; 0xc114 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c18c:	82 60       	ori	r24, 0x02	; 2
    c18e:	10 cf       	rjmp	.-480    	; 0xbfb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c190:	67 ef       	ldi	r22, 0xF7	; 247
    c192:	73 e0       	ldi	r23, 0x03	; 3
    c194:	c5 01       	movw	r24, r10
    c196:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    c19a:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c19c:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    c19e:	88 e4       	ldi	r24, 0x48	; 72
    c1a0:	e8 2e       	mov	r14, r24
    c1a2:	f1 2c       	mov	r15, r1
    c1a4:	ec 0e       	add	r14, r28
    c1a6:	fd 1e       	adc	r15, r29
    c1a8:	fc e0       	ldi	r31, 0x0C	; 12
    c1aa:	ef 0e       	add	r14, r31
    c1ac:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
    pch = strtok (str1, "/");
    while (pch != NULL)
    c1ae:	01 15       	cp	r16, r1
    c1b0:	11 05       	cpc	r17, r1
    c1b2:	09 f4       	brne	.+2      	; 0xc1b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    c1b4:	6d c0       	rjmp	.+218    	; 0xc290 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2361
    {
      if (cnt == 0) id = atoi(pch);
    c1b6:	61 10       	cpse	r6, r1
    c1b8:	0d c0       	rjmp	.+26     	; 0xc1d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    c1ba:	c8 01       	movw	r24, r16
    c1bc:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c1c0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      if (id < HW_ONEWIRE_MAXROMS)
    c1c2:	25 e0       	ldi	r18, 0x05	; 5
    c1c4:	28 17       	cp	r18, r24
    c1c6:	08 f0       	brcs	.+2      	; 0xc1ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    c1c8:	5a c0       	rjmp	.+180    	; 0xc27e <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2370
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    c1ca:	8a e9       	ldi	r24, 0x9A	; 154
    c1cc:	94 e0       	ldi	r25, 0x04	; 4
    c1ce:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c1d2:	55 c0       	rjmp	.+170    	; 0xc27e <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    c1d4:	85 e0       	ldi	r24, 0x05	; 5
    c1d6:	87 15       	cp	r24, r7
    c1d8:	c0 f3       	brcs	.-16     	; 0xc1ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    c1da:	a1 e0       	ldi	r26, 0x01	; 1
    c1dc:	6a 12       	cpse	r6, r26
    c1de:	4f c0       	rjmp	.+158    	; 0xc27e <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c1e0:	60 ed       	ldi	r22, 0xD0	; 208
    c1e2:	73 e0       	ldi	r23, 0x03	; 3
    c1e4:	c8 01       	movw	r24, r16
    c1e6:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c1ea:	89 2b       	or	r24, r25
    c1ec:	89 f4       	brne	.+34     	; 0xc210 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c1ee:	be 01       	movw	r22, r28
    c1f0:	68 5b       	subi	r22, 0xB8	; 184
    c1f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c1f4:	87 2d       	mov	r24, r7
    c1f6:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    c1fa:	67 ef       	ldi	r22, 0xF7	; 247
    c1fc:	7a e0       	ldi	r23, 0x0A	; 10
    c1fe:	c7 01       	movw	r24, r14
    c200:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    c204:	be 01       	movw	r22, r28
    c206:	68 5b       	subi	r22, 0xB8	; 184
    c208:	7f 4f       	sbci	r23, 0xFF	; 255
    c20a:	87 2d       	mov	r24, r7
    c20c:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    c210:	69 ed       	ldi	r22, 0xD9	; 217
    c212:	77 e0       	ldi	r23, 0x07	; 7
    c214:	c8 01       	movw	r24, r16
    c216:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c21a:	89 2b       	or	r24, r25
    c21c:	a9 f4       	brne	.+42     	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    c21e:	87 ef       	ldi	r24, 0xF7	; 247
    c220:	9a e0       	ldi	r25, 0x0A	; 10
    c222:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c226:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c228:	be 01       	movw	r22, r28
    c22a:	68 5b       	subi	r22, 0xB8	; 184
    c22c:	7f 4f       	sbci	r23, 0xFF	; 255
    c22e:	87 2d       	mov	r24, r7
    c230:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    c234:	64 96       	adiw	r28, 0x14	; 20
    c236:	df ae       	std	Y+63, r13	; 0x3f
    c238:	ce ae       	std	Y+62, r12	; 0x3e
    c23a:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    c23c:	be 01       	movw	r22, r28
    c23e:	68 5b       	subi	r22, 0xB8	; 184
    c240:	7f 4f       	sbci	r23, 0xFF	; 255
    c242:	87 2d       	mov	r24, r7
    c244:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2366
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    c248:	62 e6       	ldi	r22, 0x62	; 98
    c24a:	76 e0       	ldi	r23, 0x06	; 6
    c24c:	c8 01       	movw	r24, r16
    c24e:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c252:	89 2b       	or	r24, r25
    c254:	a1 f4       	brne	.+40     	; 0xc27e <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c256:	87 ef       	ldi	r24, 0xF7	; 247
    c258:	9a e0       	ldi	r25, 0x0A	; 10
    c25a:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c25e:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c260:	be 01       	movw	r22, r28
    c262:	68 5b       	subi	r22, 0xB8	; 184
    c264:	7f 4f       	sbci	r23, 0xFF	; 255
    c266:	87 2d       	mov	r24, r7
    c268:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2366
    c26c:	6d 96       	adiw	r28, 0x1d	; 29
    c26e:	1f af       	std	Y+63, r17	; 0x3f
    c270:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    c272:	be 01       	movw	r22, r28
    c274:	68 5b       	subi	r22, 0xB8	; 184
    c276:	7f 4f       	sbci	r23, 0xFF	; 255
    c278:	87 2d       	mov	r24, r7
    c27a:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    c27e:	67 ef       	ldi	r22, 0xF7	; 247
    c280:	73 e0       	ldi	r23, 0x03	; 3
    c282:	90 e0       	ldi	r25, 0x00	; 0
    c284:	80 e0       	ldi	r24, 0x00	; 0
    c286:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    c28a:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2373
      cnt++;
    c28c:	63 94       	inc	r6
    c28e:	8f cf       	rjmp	.-226    	; 0xc1ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    c290:	63 e1       	ldi	r22, 0x13	; 19
    c292:	72 e3       	ldi	r23, 0x32	; 50
    c294:	c5 01       	movw	r24, r10
    c296:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
  strcat(str1, device.nazev);
    c29a:	61 e5       	ldi	r22, 0x51	; 81
    c29c:	7c e0       	ldi	r23, 0x0C	; 12
    c29e:	c5 01       	movw	r24, r10
    c2a0:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
  strcat(str1, "/tds/clear");
    c2a4:	63 e6       	ldi	r22, 0x63	; 99
    c2a6:	74 e0       	ldi	r23, 0x04	; 4
    c2a8:	c5 01       	movw	r24, r10
    c2aa:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c2ae:	f5 01       	movw	r30, r10
    c2b0:	01 90       	ld	r0, Z+
    c2b2:	00 20       	and	r0, r0
    c2b4:	e9 f7       	brne	.-6      	; 0xc2b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    c2b6:	31 97       	sbiw	r30, 0x01	; 1
    c2b8:	af 01       	movw	r20, r30
    c2ba:	4a 19       	sub	r20, r10
    c2bc:	5b 09       	sbc	r21, r11
    c2be:	b4 01       	movw	r22, r8
    c2c0:	c5 01       	movw	r24, r10
    c2c2:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c2c6:	89 2b       	or	r24, r25
    c2c8:	a1 f4       	brne	.+40     	; 0xc2f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
  {
    mqtt_process_message++;
    c2ca:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c2ce:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c2d2:	01 96       	adiw	r24, 0x01	; 1
    c2d4:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c2d8:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
    id = atoi(my_payload);
    c2dc:	87 ef       	ldi	r24, 0xF7	; 247
    c2de:	9a e0       	ldi	r25, 0x0A	; 10
    c2e0:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c2e4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
    if (id < HW_ONEWIRE_MAXROMS)
    c2e6:	b5 e0       	ldi	r27, 0x05	; 5
    c2e8:	b8 17       	cp	r27, r24
    c2ea:	08 f4       	brcc	.+2      	; 0xc2ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    c2ec:	83 c0       	rjmp	.+262    	; 0xc3f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
      tds_set_clear(id);
    c2ee:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    c2f2:	63 e1       	ldi	r22, 0x13	; 19
    c2f4:	72 e3       	ldi	r23, 0x32	; 50
    c2f6:	c5 01       	movw	r24, r10
    c2f8:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
  strcat(str1, device.nazev);
    c2fc:	61 e5       	ldi	r22, 0x51	; 81
    c2fe:	7c e0       	ldi	r23, 0x0C	; 12
    c300:	c5 01       	movw	r24, r10
    c302:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2397
  strcat(str1, "/rtds/register");
    c306:	6f e7       	ldi	r22, 0x7F	; 127
    c308:	74 e0       	ldi	r23, 0x04	; 4
    c30a:	c5 01       	movw	r24, r10
    c30c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c310:	f5 01       	movw	r30, r10
    c312:	01 90       	ld	r0, Z+
    c314:	00 20       	and	r0, r0
    c316:	e9 f7       	brne	.-6      	; 0xc312 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    c318:	31 97       	sbiw	r30, 0x01	; 1
    c31a:	af 01       	movw	r20, r30
    c31c:	4a 19       	sub	r20, r10
    c31e:	5b 09       	sbc	r21, r11
    c320:	b4 01       	movw	r22, r8
    c322:	c5 01       	movw	r24, r10
    c324:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c328:	89 2b       	or	r24, r25
    c32a:	d1 f4       	brne	.+52     	; 0xc360 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
  {
    mqtt_process_message++;
    c32c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c330:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c334:	01 96       	adiw	r24, 0x01	; 1
    c336:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c33a:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2401
    if (remote_tds_name_exist(my_payload) == 255)
    c33e:	87 ef       	ldi	r24, 0xF7	; 247
    c340:	9a e0       	ldi	r25, 0x0A	; 10
    c342:	0e 94 c9 5c 	call	0xb992	; 0xb992 <remote_tds_name_exist(char*)>
    c346:	8f 3f       	cpi	r24, 0xFF	; 255
    c348:	59 f4       	brne	.+22     	; 0xc360 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2403
    {
      id = remote_tds_find_free();
    c34a:	0e 94 cf 58 	call	0xb19e	; 0xb19e <remote_tds_find_free()>
    c34e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
      remote_tds_set_complete(id, 1, my_payload);
    c350:	47 ef       	ldi	r20, 0xF7	; 247
    c352:	5a e0       	ldi	r21, 0x0A	; 10
    c354:	61 e0       	ldi	r22, 0x01	; 1
    c356:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
      remote_tds_subscibe_topic(id);
    c35a:	87 2d       	mov	r24, r7
    c35c:	0e 94 2b 5d 	call	0xba56	; 0xba56 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    c360:	63 e1       	ldi	r22, 0x13	; 19
    c362:	72 e3       	ldi	r23, 0x32	; 50
    c364:	c5 01       	movw	r24, r10
    c366:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
  strcat(str1, device.nazev);
    c36a:	61 e5       	ldi	r22, 0x51	; 81
    c36c:	7c e0       	ldi	r23, 0x0C	; 12
    c36e:	c5 01       	movw	r24, r10
    c370:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
  strcat(str1, "/rtds/set/");
    c374:	6e e8       	ldi	r22, 0x8E	; 142
    c376:	74 e0       	ldi	r23, 0x04	; 4
    c378:	c5 01       	movw	r24, r10
    c37a:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c37e:	f5 01       	movw	r30, r10
    c380:	01 90       	ld	r0, Z+
    c382:	00 20       	and	r0, r0
    c384:	e9 f7       	brne	.-6      	; 0xc380 <mqtt_callback(char*, unsigned char*, unsigned int)+0x84a>
    c386:	31 97       	sbiw	r30, 0x01	; 1
    c388:	af 01       	movw	r20, r30
    c38a:	4a 19       	sub	r20, r10
    c38c:	5b 09       	sbc	r21, r11
    c38e:	b4 01       	movw	r22, r8
    c390:	c5 01       	movw	r24, r10
    c392:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c396:	89 2b       	or	r24, r25
    c398:	09 f0       	breq	.+2      	; 0xc39c <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    c39a:	6a c0       	rjmp	.+212    	; 0xc470 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
  {
    mqtt_process_message++;
    c39c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c3a0:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c3a4:	01 96       	adiw	r24, 0x01	; 1
    c3a6:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c3aa:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c3ae:	f5 01       	movw	r30, r10
    c3b0:	01 90       	ld	r0, Z+
    c3b2:	00 20       	and	r0, r0
    c3b4:	e9 f7       	brne	.-6      	; 0xc3b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
    c3b6:	31 97       	sbiw	r30, 0x01	; 1
    c3b8:	ea 19       	sub	r30, r10
    c3ba:	fb 09       	sbc	r31, r11
    c3bc:	9e 2f       	mov	r25, r30
    c3be:	4e 2f       	mov	r20, r30
    c3c0:	84 2f       	mov	r24, r20
    c3c2:	89 1b       	sub	r24, r25
    c3c4:	24 2f       	mov	r18, r20
    c3c6:	30 e0       	ldi	r19, 0x00	; 0
    c3c8:	d4 01       	movw	r26, r8
    c3ca:	0d 90       	ld	r0, X+
    c3cc:	00 20       	and	r0, r0
    c3ce:	e9 f7       	brne	.-6      	; 0xc3ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x894>
    c3d0:	11 97       	sbiw	r26, 0x01	; 1
    c3d2:	a8 19       	sub	r26, r8
    c3d4:	b9 09       	sbc	r27, r9
    c3d6:	2a 17       	cp	r18, r26
    c3d8:	3b 07       	cpc	r19, r27
    c3da:	88 f4       	brcc	.+34     	; 0xc3fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420
    {
      str1[cnt] = topic[f];
    c3dc:	d5 01       	movw	r26, r10
    c3de:	a8 0f       	add	r26, r24
    c3e0:	b1 1d       	adc	r27, r1
    c3e2:	28 0d       	add	r18, r8
    c3e4:	39 1d       	adc	r19, r9
    c3e6:	f9 01       	movw	r30, r18
    c3e8:	80 81       	ld	r24, Z
    c3ea:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
      str1[cnt + 1] = 0;
    c3ec:	11 96       	adiw	r26, 0x01	; 1
    c3ee:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c3f0:	4f 5f       	subi	r20, 0xFF	; 255
    c3f2:	e6 cf       	rjmp	.-52     	; 0xc3c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    c3f4:	8e e6       	ldi	r24, 0x6E	; 110
    c3f6:	94 e0       	ldi	r25, 0x04	; 4
    c3f8:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c3fc:	7a cf       	rjmp	.-268    	; 0xc2f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c3fe:	67 ef       	ldi	r22, 0xF7	; 247
    c400:	73 e0       	ldi	r23, 0x03	; 3
    c402:	c5 01       	movw	r24, r10
    c404:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c408:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
    pch = strtok (str1, "/");
    while (pch != NULL)
    c40a:	00 97       	sbiw	r24, 0x00	; 0
    c40c:	89 f1       	breq	.+98     	; 0xc470 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
    {
      if (cnt == 0) id = atoi(pch);
    c40e:	11 11       	cpse	r17, r1
    c410:	0b c0       	rjmp	.+22     	; 0xc428 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f2>
    c412:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c416:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    c418:	67 ef       	ldi	r22, 0xF7	; 247
    c41a:	73 e0       	ldi	r23, 0x03	; 3
    c41c:	90 e0       	ldi	r25, 0x00	; 0
    c41e:	80 e0       	ldi	r24, 0x00	; 0
    c420:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2443
      cnt++;
    c424:	1f 5f       	subi	r17, 0xFF	; 255
    c426:	f1 cf       	rjmp	.-30     	; 0xc40a <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    c428:	11 30       	cpi	r17, 0x01	; 1
    c42a:	b1 f7       	brne	.-20     	; 0xc418 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
    c42c:	60 ed       	ldi	r22, 0xD0	; 208
    c42e:	73 e0       	ldi	r23, 0x03	; 3
    c430:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c434:	89 2b       	or	r24, r25
    c436:	81 f7       	brne	.-32     	; 0xc418 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
      {
        remote_tds_get_active(id, &active);
    c438:	be 01       	movw	r22, r28
    c43a:	64 5d       	subi	r22, 0xD4	; 212
    c43c:	7e 4f       	sbci	r23, 0xFE	; 254
    c43e:	87 2d       	mov	r24, r7
    c440:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2432
        if (active == 0)
    c444:	c4 5d       	subi	r28, 0xD4	; 212
    c446:	de 4f       	sbci	r29, 0xFE	; 254
    c448:	88 81       	ld	r24, Y
    c44a:	cc 52       	subi	r28, 0x2C	; 44
    c44c:	d1 40       	sbci	r29, 0x01	; 1
    c44e:	81 11       	cpse	r24, r1
    c450:	0a c0       	rjmp	.+20     	; 0xc466 <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
        {
          remote_tds_set_complete(id, 1, my_payload);
    c452:	47 ef       	ldi	r20, 0xF7	; 247
    c454:	5a e0       	ldi	r21, 0x0A	; 10
    c456:	61 e0       	ldi	r22, 0x01	; 1
    c458:	87 2d       	mov	r24, r7
    c45a:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
          remote_tds_subscibe_topic(id);
    c45e:	87 2d       	mov	r24, r7
    c460:	0e 94 2b 5d 	call	0xba56	; 0xba56 <remote_tds_subscibe_topic(unsigned char)>
    c464:	d9 cf       	rjmp	.-78     	; 0xc418 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    c466:	89 e9       	ldi	r24, 0x99	; 153
    c468:	94 e0       	ldi	r25, 0x04	; 4
    c46a:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c46e:	d4 cf       	rjmp	.-88     	; 0xc418 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    c470:	63 e1       	ldi	r22, 0x13	; 19
    c472:	72 e3       	ldi	r23, 0x32	; 50
    c474:	c5 01       	movw	r24, r10
    c476:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
  strcat(str1, device.nazev);
    c47a:	61 e5       	ldi	r22, 0x51	; 81
    c47c:	7c e0       	ldi	r23, 0x0C	; 12
    c47e:	c5 01       	movw	r24, r10
    c480:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
  strcat(str1, "/rtds/clear");
    c484:	69 ea       	ldi	r22, 0xA9	; 169
    c486:	74 e0       	ldi	r23, 0x04	; 4
    c488:	c5 01       	movw	r24, r10
    c48a:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c48e:	f5 01       	movw	r30, r10
    c490:	01 90       	ld	r0, Z+
    c492:	00 20       	and	r0, r0
    c494:	e9 f7       	brne	.-6      	; 0xc490 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    c496:	31 97       	sbiw	r30, 0x01	; 1
    c498:	af 01       	movw	r20, r30
    c49a:	4a 19       	sub	r20, r10
    c49c:	5b 09       	sbc	r21, r11
    c49e:	b4 01       	movw	r22, r8
    c4a0:	c5 01       	movw	r24, r10
    c4a2:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c4a6:	89 2b       	or	r24, r25
    c4a8:	09 f0       	breq	.+2      	; 0xc4ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x976>
    c4aa:	6f c0       	rjmp	.+222    	; 0xc58a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
  {
    mqtt_process_message++;
    c4ac:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c4b0:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c4b4:	01 96       	adiw	r24, 0x01	; 1
    c4b6:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c4ba:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
    id = atoi(my_payload);
    c4be:	87 ef       	ldi	r24, 0xF7	; 247
    c4c0:	9a e0       	ldi	r25, 0x0A	; 10
    c4c2:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c4c6:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    c4c8:	c8 5f       	subi	r28, 0xF8	; 248
    c4ca:	de 4f       	sbci	r29, 0xFE	; 254
    c4cc:	18 82       	st	Y, r1
    c4ce:	c8 50       	subi	r28, 0x08	; 8
    c4d0:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
  remote_tds_get_complete(idx, &active, tmp1);
    c4d2:	ae 01       	movw	r20, r28
    c4d4:	48 57       	subi	r20, 0x78	; 120
    c4d6:	5f 4f       	sbci	r21, 0xFF	; 255
    c4d8:	be 01       	movw	r22, r28
    c4da:	68 5f       	subi	r22, 0xF8	; 248
    c4dc:	7e 4f       	sbci	r23, 0xFE	; 254
    c4de:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
  if (active == 1)
    c4e2:	c8 5f       	subi	r28, 0xF8	; 248
    c4e4:	de 4f       	sbci	r29, 0xFE	; 254
    c4e6:	88 81       	ld	r24, Y
    c4e8:	c8 50       	subi	r28, 0x08	; 8
    c4ea:	d1 40       	sbci	r29, 0x01	; 1
    c4ec:	81 30       	cpi	r24, 0x01	; 1
    c4ee:	09 f0       	breq	.+2      	; 0xc4f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
    c4f0:	49 c0       	rjmp	.+146    	; 0xc584 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
  {
    strcpy(tmp2, "/rtds/");
    c4f2:	8e 01       	movw	r16, r28
    c4f4:	08 5b       	subi	r16, 0xB8	; 184
    c4f6:	1f 4f       	sbci	r17, 0xFF	; 255
    c4f8:	62 ef       	ldi	r22, 0xF2	; 242
    c4fa:	73 e0       	ldi	r23, 0x03	; 3
    c4fc:	c8 01       	movw	r24, r16
    c4fe:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
    strcat(tmp2, tmp1);
    c502:	be 01       	movw	r22, r28
    c504:	68 57       	subi	r22, 0x78	; 120
    c506:	7f 4f       	sbci	r23, 0xFF	; 255
    c508:	c8 01       	movw	r24, r16
    c50a:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    c50e:	d8 01       	movw	r26, r16
    c510:	0d 90       	ld	r0, X+
    c512:	00 20       	and	r0, r0
    c514:	e9 f7       	brne	.-6      	; 0xc510 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
    c516:	cd 01       	movw	r24, r26
    c518:	80 1b       	sub	r24, r16
    c51a:	91 0b       	sbc	r25, r17
    c51c:	08 96       	adiw	r24, 0x08	; 8
    c51e:	81 30       	cpi	r24, 0x01	; 1
    c520:	92 40       	sbci	r25, 0x02	; 2
    c522:	80 f5       	brcc	.+96     	; 0xc584 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    c524:	8e e2       	ldi	r24, 0x2E	; 46
    c526:	9e e0       	ldi	r25, 0x0E	; 14
    c528:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
    c52c:	88 23       	and	r24, r24
    c52e:	51 f1       	breq	.+84     	; 0xc584 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    c530:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <mqtt_client+0x202>
    c534:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <mqtt_client+0x203>
    c538:	01 96       	adiw	r24, 0x01	; 1
    c53a:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <mqtt_client+0x203>
    c53e:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    c542:	89 2b       	or	r24, r25
    c544:	31 f4       	brne	.+12     	; 0xc552 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    c546:	81 e0       	ldi	r24, 0x01	; 1
    c548:	90 e0       	ldi	r25, 0x00	; 0
    c54a:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <mqtt_client+0x203>
    c54e:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    c552:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <mqtt_client+0x202>
    c556:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <mqtt_client+0x203>
    c55a:	90 93 35 0e 	sts	0x0E35, r25	; 0x800e35 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    c55e:	80 93 36 0e 	sts	0x0E36, r24	; 0x800e36 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    c562:	47 e0       	ldi	r20, 0x07	; 7
    c564:	50 e0       	ldi	r21, 0x00	; 0
    c566:	60 e3       	ldi	r22, 0x30	; 48
    c568:	7e e0       	ldi	r23, 0x0E	; 14
    c56a:	c8 01       	movw	r24, r16
    c56c:	0e 94 86 82 	call	0x1050c	; 0x1050c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    c570:	9c 01       	movw	r18, r24
    c572:	25 50       	subi	r18, 0x05	; 5
    c574:	31 09       	sbc	r19, r1
    c576:	40 e3       	ldi	r20, 0x30	; 48
    c578:	5e e0       	ldi	r21, 0x0E	; 14
    c57a:	62 ea       	ldi	r22, 0xA2	; 162
    c57c:	8e e2       	ldi	r24, 0x2E	; 46
    c57e:	9e e0       	ldi	r25, 0x0E	; 14
    c580:	0e 94 8e 92 	call	0x1251c	; 0x1251c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2458
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    c584:	87 2d       	mov	r24, r7
    c586:	0e 94 7f 51 	call	0xa2fe	; 0xa2fe <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2462
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    c58a:	63 e1       	ldi	r22, 0x13	; 19
    c58c:	72 e3       	ldi	r23, 0x32	; 50
    c58e:	c5 01       	movw	r24, r10
    c590:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2463
  strcat(str1, device.nazev);
    c594:	61 e5       	ldi	r22, 0x51	; 81
    c596:	7c e0       	ldi	r23, 0x0C	; 12
    c598:	c5 01       	movw	r24, r10
    c59a:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
  strcat(str1, "/rtds/get");
    c59e:	65 eb       	ldi	r22, 0xB5	; 181
    c5a0:	74 e0       	ldi	r23, 0x04	; 4
    c5a2:	c5 01       	movw	r24, r10
    c5a4:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c5a8:	f5 01       	movw	r30, r10
    c5aa:	01 90       	ld	r0, Z+
    c5ac:	00 20       	and	r0, r0
    c5ae:	e9 f7       	brne	.-6      	; 0xc5aa <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    c5b0:	31 97       	sbiw	r30, 0x01	; 1
    c5b2:	af 01       	movw	r20, r30
    c5b4:	4a 19       	sub	r20, r10
    c5b6:	5b 09       	sbc	r21, r11
    c5b8:	b4 01       	movw	r22, r8
    c5ba:	c5 01       	movw	r24, r10
    c5bc:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c5c0:	89 2b       	or	r24, r25
    c5c2:	11 f4       	brne	.+4      	; 0xc5c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
  {
    send_mqtt_remote_tds_status();
    c5c4:	0e 94 47 5c 	call	0xb88e	; 0xb88e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    c5c8:	62 ef       	ldi	r22, 0xF2	; 242
    c5ca:	73 e0       	ldi	r23, 0x03	; 3
    c5cc:	c5 01       	movw	r24, r10
    c5ce:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2472
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c5d2:	f5 01       	movw	r30, r10
    c5d4:	01 90       	ld	r0, Z+
    c5d6:	00 20       	and	r0, r0
    c5d8:	e9 f7       	brne	.-6      	; 0xc5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa9e>
    c5da:	31 97       	sbiw	r30, 0x01	; 1
    c5dc:	af 01       	movw	r20, r30
    c5de:	4a 19       	sub	r20, r10
    c5e0:	5b 09       	sbc	r21, r11
    c5e2:	b4 01       	movw	r22, r8
    c5e4:	c5 01       	movw	r24, r10
    c5e6:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c5ea:	89 2b       	or	r24, r25
    c5ec:	09 f0       	breq	.+2      	; 0xc5f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
    c5ee:	74 c0       	rjmp	.+232    	; 0xc6d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2474
  {
    mqtt_process_message++;
    c5f0:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c5f4:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c5f8:	01 96       	adiw	r24, 0x01	; 1
    c5fa:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c5fe:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c602:	f5 01       	movw	r30, r10
    c604:	01 90       	ld	r0, Z+
    c606:	00 20       	and	r0, r0
    c608:	e9 f7       	brne	.-6      	; 0xc604 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
    c60a:	31 97       	sbiw	r30, 0x01	; 1
    c60c:	ea 19       	sub	r30, r10
    c60e:	fb 09       	sbc	r31, r11
    c610:	9e 2f       	mov	r25, r30
    c612:	4e 2f       	mov	r20, r30
    c614:	84 2f       	mov	r24, r20
    c616:	89 1b       	sub	r24, r25
    c618:	24 2f       	mov	r18, r20
    c61a:	30 e0       	ldi	r19, 0x00	; 0
    c61c:	d4 01       	movw	r26, r8
    c61e:	0d 90       	ld	r0, X+
    c620:	00 20       	and	r0, r0
    c622:	e9 f7       	brne	.-6      	; 0xc61e <mqtt_callback(char*, unsigned char*, unsigned int)+0xae8>
    c624:	11 97       	sbiw	r26, 0x01	; 1
    c626:	a8 19       	sub	r26, r8
    c628:	b9 09       	sbc	r27, r9
    c62a:	2a 17       	cp	r18, r26
    c62c:	3b 07       	cpc	r19, r27
    c62e:	60 f4       	brcc	.+24     	; 0xc648 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2478
    {
      str1[cnt] = topic[f];
    c630:	d5 01       	movw	r26, r10
    c632:	a8 0f       	add	r26, r24
    c634:	b1 1d       	adc	r27, r1
    c636:	28 0d       	add	r18, r8
    c638:	39 1d       	adc	r19, r9
    c63a:	f9 01       	movw	r30, r18
    c63c:	80 81       	ld	r24, Z
    c63e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
      str1[cnt + 1] = 0;
    c640:	11 96       	adiw	r26, 0x01	; 1
    c642:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c644:	4f 5f       	subi	r20, 0xFF	; 255
    c646:	e6 cf       	rjmp	.-52     	; 0xc614 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    c648:	b4 e6       	ldi	r27, 0x64	; 100
    c64a:	cb 2e       	mov	r12, r27
    c64c:	d1 2c       	mov	r13, r1
    c64e:	e1 2c       	mov	r14, r1
    c650:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c652:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
    {
      uint8_t active = 0;
    c654:	29 96       	adiw	r28, 0x09	; 9
    c656:	1f ae       	std	Y+63, r1	; 0x3f
    c658:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
      remote_tds_get_complete(idx, &active, tmp1);
    c65a:	ae 01       	movw	r20, r28
    c65c:	44 5e       	subi	r20, 0xE4	; 228
    c65e:	5e 4f       	sbci	r21, 0xFE	; 254
    c660:	be 01       	movw	r22, r28
    c662:	68 5b       	subi	r22, 0xB8	; 184
    c664:	7f 4f       	sbci	r23, 0xFF	; 255
    c666:	81 2f       	mov	r24, r17
    c668:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
      if (active == 1 && strcmp(tmp1, str1) == 0)
    c66c:	29 96       	adiw	r28, 0x09	; 9
    c66e:	8f ad       	ldd	r24, Y+63	; 0x3f
    c670:	29 97       	sbiw	r28, 0x09	; 9
    c672:	81 30       	cpi	r24, 0x01	; 1
    c674:	21 f5       	brne	.+72     	; 0xc6be <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
    c676:	b5 01       	movw	r22, r10
    c678:	ce 01       	movw	r24, r28
    c67a:	84 5e       	subi	r24, 0xE4	; 228
    c67c:	9e 4f       	sbci	r25, 0xFE	; 254
    c67e:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c682:	89 2b       	or	r24, r25
    c684:	e1 f4       	brne	.+56     	; 0xc6be <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
      {
        remote_tds_set_data(idx, atoi(my_payload));
    c686:	87 ef       	ldi	r24, 0xF7	; 247
    c688:	9a e0       	ldi	r25, 0x0A	; 10
    c68a:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c68e:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2145
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    c690:	48 2f       	mov	r20, r24
    c692:	c7 01       	movw	r24, r14
    c694:	b6 01       	movw	r22, r12
    c696:	0e 94 6a 87 	call	0x10ed4	; 0x10ed4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    c69a:	40 2f       	mov	r20, r16
    c69c:	c7 01       	movw	r24, r14
    c69e:	b6 01       	movw	r22, r12
    c6a0:	6f 5f       	subi	r22, 0xFF	; 255
    c6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c6a4:	8f 4f       	sbci	r24, 0xFF	; 255
    c6a6:	9f 4f       	sbci	r25, 0xFF	; 255
    c6a8:	0e 94 6a 87 	call	0x10ed4	; 0x10ed4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    c6ac:	40 e0       	ldi	r20, 0x00	; 0
    c6ae:	c7 01       	movw	r24, r14
    c6b0:	b6 01       	movw	r22, r12
    c6b2:	6e 5f       	subi	r22, 0xFE	; 254
    c6b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c6b6:	8f 4f       	sbci	r24, 0xFF	; 255
    c6b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c6ba:	0e 94 6a 87 	call	0x10ed4	; 0x10ed4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    c6be:	1f 5f       	subi	r17, 0xFF	; 255
    c6c0:	f3 e0       	ldi	r31, 0x03	; 3
    c6c2:	cf 0e       	add	r12, r31
    c6c4:	d1 1c       	adc	r13, r1
    c6c6:	e1 1c       	adc	r14, r1
    c6c8:	f1 1c       	adc	r15, r1
    c6ca:	22 e8       	ldi	r18, 0x82	; 130
    c6cc:	c2 16       	cp	r12, r18
    c6ce:	d1 04       	cpc	r13, r1
    c6d0:	e1 04       	cpc	r14, r1
    c6d2:	f1 04       	cpc	r15, r1
    c6d4:	09 f0       	breq	.+2      	; 0xc6d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
    c6d6:	be cf       	rjmp	.-132    	; 0xc654 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    c6d8:	6f eb       	ldi	r22, 0xBF	; 191
    c6da:	74 e0       	ldi	r23, 0x04	; 4
    c6dc:	c5 01       	movw	r24, r10
    c6de:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    c6e2:	63 e1       	ldi	r22, 0x13	; 19
    c6e4:	72 e3       	ldi	r23, 0x32	; 50
    c6e6:	c5 01       	movw	r24, r10
    c6e8:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
  strcat(str1, device.nazev);
    c6ec:	61 e5       	ldi	r22, 0x51	; 81
    c6ee:	7c e0       	ldi	r23, 0x0C	; 12
    c6f0:	c5 01       	movw	r24, r10
    c6f2:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
  strcat(str1, "/prog/set/");
    c6f6:	6a ec       	ldi	r22, 0xCA	; 202
    c6f8:	74 e0       	ldi	r23, 0x04	; 4
    c6fa:	c5 01       	movw	r24, r10
    c6fc:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c700:	f5 01       	movw	r30, r10
    c702:	01 90       	ld	r0, Z+
    c704:	00 20       	and	r0, r0
    c706:	e9 f7       	brne	.-6      	; 0xc702 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
    c708:	31 97       	sbiw	r30, 0x01	; 1
    c70a:	af 01       	movw	r20, r30
    c70c:	4a 19       	sub	r20, r10
    c70e:	5b 09       	sbc	r21, r11
    c710:	b4 01       	movw	r22, r8
    c712:	c5 01       	movw	r24, r10
    c714:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c718:	89 2b       	or	r24, r25
    c71a:	09 f0       	breq	.+2      	; 0xc71e <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe8>
    c71c:	75 c0       	rjmp	.+234    	; 0xc808 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
  {
    mqtt_process_message++;
    c71e:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c722:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c726:	01 96       	adiw	r24, 0x01	; 1
    c728:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c72c:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c730:	f5 01       	movw	r30, r10
    c732:	01 90       	ld	r0, Z+
    c734:	00 20       	and	r0, r0
    c736:	e9 f7       	brne	.-6      	; 0xc732 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfc>
    c738:	31 97       	sbiw	r30, 0x01	; 1
    c73a:	ea 19       	sub	r30, r10
    c73c:	fb 09       	sbc	r31, r11
    c73e:	9e 2f       	mov	r25, r30
    c740:	4e 2f       	mov	r20, r30
    c742:	84 2f       	mov	r24, r20
    c744:	89 1b       	sub	r24, r25
    c746:	24 2f       	mov	r18, r20
    c748:	30 e0       	ldi	r19, 0x00	; 0
    c74a:	d4 01       	movw	r26, r8
    c74c:	0d 90       	ld	r0, X+
    c74e:	00 20       	and	r0, r0
    c750:	e9 f7       	brne	.-6      	; 0xc74c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc16>
    c752:	11 97       	sbiw	r26, 0x01	; 1
    c754:	a8 19       	sub	r26, r8
    c756:	b9 09       	sbc	r27, r9
    c758:	2a 17       	cp	r18, r26
    c75a:	3b 07       	cpc	r19, r27
    c75c:	60 f4       	brcc	.+24     	; 0xc776 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
    {
      str1[cnt] = topic[f];
    c75e:	d5 01       	movw	r26, r10
    c760:	a8 0f       	add	r26, r24
    c762:	b1 1d       	adc	r27, r1
    c764:	28 0d       	add	r18, r8
    c766:	39 1d       	adc	r19, r9
    c768:	f9 01       	movw	r30, r18
    c76a:	80 81       	ld	r24, Z
    c76c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
      str1[cnt + 1] = 0;
    c76e:	11 96       	adiw	r26, 0x01	; 1
    c770:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c772:	4f 5f       	subi	r20, 0xFF	; 255
    c774:	e6 cf       	rjmp	.-52     	; 0xc742 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c776:	67 ef       	ldi	r22, 0xF7	; 247
    c778:	73 e0       	ldi	r23, 0x03	; 3
    c77a:	c5 01       	movw	r24, r10
    c77c:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    c780:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c782:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    c784:	ad e4       	ldi	r26, 0x4D	; 77
    c786:	ea 2e       	mov	r14, r26
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
    pch = strtok (str1, "/");
    while (pch != NULL)
    c788:	01 15       	cp	r16, r1
    c78a:	11 05       	cpc	r17, r1
    c78c:	e9 f1       	breq	.+122    	; 0xc808 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
    {
      if (cnt == 0) id = atoi(pch);
    c78e:	f1 10       	cpse	r15, r1
    c790:	0c c0       	rjmp	.+24     	; 0xc7aa <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    c792:	c8 01       	movw	r24, r16
    c794:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c798:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
      if (id < AVAILABLE_PROGRAM)
    c79a:	f7 e0       	ldi	r31, 0x07	; 7
    c79c:	f8 17       	cp	r31, r24
    c79e:	58 f5       	brcc	.+86     	; 0xc7f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2532
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    c7a0:	85 ed       	ldi	r24, 0xD5	; 213
    c7a2:	94 e0       	ldi	r25, 0x04	; 4
    c7a4:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c7a8:	26 c0       	rjmp	.+76     	; 0xc7f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    c7aa:	27 e0       	ldi	r18, 0x07	; 7
    c7ac:	27 15       	cp	r18, r7
    c7ae:	c0 f3       	brcs	.-16     	; 0xc7a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    c7b0:	81 e0       	ldi	r24, 0x01	; 1
    c7b2:	f8 12       	cpse	r15, r24
    c7b4:	20 c0       	rjmp	.+64     	; 0xc7f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    c7b6:	60 ed       	ldi	r22, 0xD0	; 208
    c7b8:	73 e0       	ldi	r23, 0x03	; 3
    c7ba:	c8 01       	movw	r24, r16
    c7bc:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c7c0:	89 2b       	or	r24, r25
    c7c2:	29 f4       	brne	.+10     	; 0xc7ce <mqtt_callback(char*, unsigned char*, unsigned int)+0xc98>
    c7c4:	67 ef       	ldi	r22, 0xF7	; 247
    c7c6:	7a e0       	ldi	r23, 0x0A	; 10
    c7c8:	87 2d       	mov	r24, r7
    c7ca:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    c7ce:	6a ed       	ldi	r22, 0xDA	; 218
    c7d0:	73 e0       	ldi	r23, 0x03	; 3
    c7d2:	c8 01       	movw	r24, r16
    c7d4:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c7d8:	89 2b       	or	r24, r25
    c7da:	69 f4       	brne	.+26     	; 0xc7f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    c7dc:	87 ef       	ldi	r24, 0xF7	; 247
    c7de:	9a e0       	ldi	r25, 0x0A	; 10
    c7e0:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    c7e4:	7e 9c       	mul	r7, r14
    c7e6:	90 01       	movw	r18, r0
    c7e8:	11 24       	eor	r1, r1
    c7ea:	68 2f       	mov	r22, r24
    c7ec:	c9 01       	movw	r24, r18
    c7ee:	8f 50       	subi	r24, 0x0F	; 15
    c7f0:	9e 4f       	sbci	r25, 0xFE	; 254
    c7f2:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    c7f6:	67 ef       	ldi	r22, 0xF7	; 247
    c7f8:	73 e0       	ldi	r23, 0x03	; 3
    c7fa:	90 e0       	ldi	r25, 0x00	; 0
    c7fc:	80 e0       	ldi	r24, 0x00	; 0
    c7fe:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    c802:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
      cnt++;
    c804:	f3 94       	inc	r15
    c806:	c0 cf       	rjmp	.-128    	; 0xc788 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    c808:	63 e1       	ldi	r22, 0x13	; 19
    c80a:	72 e3       	ldi	r23, 0x32	; 50
    c80c:	c5 01       	movw	r24, r10
    c80e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
  strcat(str1, device.nazev);
    c812:	61 e5       	ldi	r22, 0x51	; 81
    c814:	7c e0       	ldi	r23, 0x0C	; 12
    c816:	c5 01       	movw	r24, r10
    c818:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  strcat(str1, "/prog/clear");
    c81c:	65 ee       	ldi	r22, 0xE5	; 229
    c81e:	74 e0       	ldi	r23, 0x04	; 4
    c820:	c5 01       	movw	r24, r10
    c822:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c826:	f5 01       	movw	r30, r10
    c828:	01 90       	ld	r0, Z+
    c82a:	00 20       	and	r0, r0
    c82c:	e9 f7       	brne	.-6      	; 0xc828 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
    c82e:	31 97       	sbiw	r30, 0x01	; 1
    c830:	af 01       	movw	r20, r30
    c832:	4a 19       	sub	r20, r10
    c834:	5b 09       	sbc	r21, r11
    c836:	b4 01       	movw	r22, r8
    c838:	c5 01       	movw	r24, r10
    c83a:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c83e:	89 2b       	or	r24, r25
    c840:	09 f0       	breq	.+2      	; 0xc844 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    c842:	52 c0       	rjmp	.+164    	; 0xc8e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  {
    mqtt_process_message++;
    c844:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c848:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c84c:	01 96       	adiw	r24, 0x01	; 1
    c84e:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c852:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
    id = atoi(my_payload);
    c856:	87 ef       	ldi	r24, 0xF7	; 247
    c858:	9a e0       	ldi	r25, 0x0A	; 10
    c85a:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c85e:	18 2f       	mov	r17, r24
    c860:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
    if (id < AVAILABLE_PROGRAM)
    c862:	a7 e0       	ldi	r26, 0x07	; 7
    c864:	a8 17       	cp	r26, r24
    c866:	08 f4       	brcc	.+2      	; 0xc86a <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
    c868:	89 c0       	rjmp	.+274    	; 0xc97c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
    {
      strcpy(tmp2, "PROG");
    c86a:	61 ef       	ldi	r22, 0xF1	; 241
    c86c:	74 e0       	ldi	r23, 0x04	; 4
    c86e:	ce 01       	movw	r24, r28
    c870:	88 57       	subi	r24, 0x78	; 120
    c872:	9f 4f       	sbci	r25, 0xFF	; 255
    c874:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
      thermostat_program_set_name(id, tmp2);
    c878:	be 01       	movw	r22, r28
    c87a:	68 57       	subi	r22, 0x78	; 120
    c87c:	7f 4f       	sbci	r23, 0xFF	; 255
    c87e:	81 2f       	mov	r24, r17
    c880:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    c884:	bd e4       	ldi	r27, 0x4D	; 77
    c886:	1b 9f       	mul	r17, r27
    c888:	c0 01       	movw	r24, r0
    c88a:	11 24       	eor	r1, r1
    c88c:	60 e0       	ldi	r22, 0x00	; 0
    c88e:	8f 50       	subi	r24, 0x0F	; 15
    c890:	9e 4f       	sbci	r25, 0xFE	; 254
    c892:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    c896:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    c898:	c1 2c       	mov	r12, r1
    c89a:	e1 2c       	mov	r14, r1
    c89c:	00 e0       	ldi	r16, 0x00	; 0
    c89e:	20 e0       	ldi	r18, 0x00	; 0
    c8a0:	40 e0       	ldi	r20, 0x00	; 0
    c8a2:	61 2f       	mov	r22, r17
    c8a4:	87 2d       	mov	r24, r7
    c8a6:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554
        thermostat_program_set_threshold(id, progid, 220);
    c8aa:	4c ed       	ldi	r20, 0xDC	; 220
    c8ac:	50 e0       	ldi	r21, 0x00	; 0
    c8ae:	61 2f       	mov	r22, r17
    c8b0:	87 2d       	mov	r24, r7
    c8b2:	0e 94 80 4e 	call	0x9d00	; 0x9d00 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2555
        thermostat_program_set_week(id, progid, 0);
    c8b6:	40 e0       	ldi	r20, 0x00	; 0
    c8b8:	61 2f       	mov	r22, r17
    c8ba:	87 2d       	mov	r24, r7
    c8bc:	0e 94 72 4e 	call	0x9ce4	; 0x9ce4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    c8c0:	1f 5f       	subi	r17, 0xFF	; 255
    c8c2:	1b 30       	cpi	r17, 0x0B	; 11
    c8c4:	49 f7       	brne	.-46     	; 0xc898 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    c8c6:	0b e5       	ldi	r16, 0x5B	; 91
    c8c8:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    c8ca:	c8 01       	movw	r24, r16
    c8cc:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2559
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    c8d0:	78 12       	cpse	r7, r24
    c8d2:	04 c0       	rjmp	.+8      	; 0xc8dc <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    c8d4:	6f ef       	ldi	r22, 0xFF	; 255
    c8d6:	c8 01       	movw	r24, r16
    c8d8:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    c8dc:	0f 5d       	subi	r16, 0xDF	; 223
    c8de:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    c8e0:	01 15       	cp	r16, r1
    c8e2:	e2 e0       	ldi	r30, 0x02	; 2
    c8e4:	1e 07       	cpc	r17, r30
    c8e6:	89 f7       	brne	.-30     	; 0xc8ca <mqtt_callback(char*, unsigned char*, unsigned int)+0xd94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    c8e8:	63 e1       	ldi	r22, 0x13	; 19
    c8ea:	72 e3       	ldi	r23, 0x32	; 50
    c8ec:	c5 01       	movw	r24, r10
    c8ee:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2572
  strcat(str1, device.nazev);
    c8f2:	61 e5       	ldi	r22, 0x51	; 81
    c8f4:	7c e0       	ldi	r23, 0x0C	; 12
    c8f6:	c5 01       	movw	r24, r10
    c8f8:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
  strcat(str1, "/prog_interval/set/");
    c8fc:	68 e0       	ldi	r22, 0x08	; 8
    c8fe:	75 e0       	ldi	r23, 0x05	; 5
    c900:	c5 01       	movw	r24, r10
    c902:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c906:	f5 01       	movw	r30, r10
    c908:	01 90       	ld	r0, Z+
    c90a:	00 20       	and	r0, r0
    c90c:	e9 f7       	brne	.-6      	; 0xc908 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd2>
    c90e:	31 97       	sbiw	r30, 0x01	; 1
    c910:	af 01       	movw	r20, r30
    c912:	4a 19       	sub	r20, r10
    c914:	5b 09       	sbc	r21, r11
    c916:	b4 01       	movw	r22, r8
    c918:	c5 01       	movw	r24, r10
    c91a:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    c91e:	89 2b       	or	r24, r25
    c920:	09 f0       	breq	.+2      	; 0xc924 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdee>
    c922:	04 c1       	rjmp	.+520    	; 0xcb2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2576
  {
    mqtt_process_message++;
    c924:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    c928:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    c92c:	01 96       	adiw	r24, 0x01	; 1
    c92e:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    c932:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c936:	f5 01       	movw	r30, r10
    c938:	01 90       	ld	r0, Z+
    c93a:	00 20       	and	r0, r0
    c93c:	e9 f7       	brne	.-6      	; 0xc938 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe02>
    c93e:	31 97       	sbiw	r30, 0x01	; 1
    c940:	ea 19       	sub	r30, r10
    c942:	fb 09       	sbc	r31, r11
    c944:	9e 2f       	mov	r25, r30
    c946:	4e 2f       	mov	r20, r30
    c948:	84 2f       	mov	r24, r20
    c94a:	89 1b       	sub	r24, r25
    c94c:	24 2f       	mov	r18, r20
    c94e:	30 e0       	ldi	r19, 0x00	; 0
    c950:	d4 01       	movw	r26, r8
    c952:	0d 90       	ld	r0, X+
    c954:	00 20       	and	r0, r0
    c956:	e9 f7       	brne	.-6      	; 0xc952 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1c>
    c958:	11 97       	sbiw	r26, 0x01	; 1
    c95a:	a8 19       	sub	r26, r8
    c95c:	b9 09       	sbc	r27, r9
    c95e:	2a 17       	cp	r18, r26
    c960:	3b 07       	cpc	r19, r27
    c962:	88 f4       	brcc	.+34     	; 0xc986 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
    {
      str1[cnt] = topic[f];
    c964:	d5 01       	movw	r26, r10
    c966:	a8 0f       	add	r26, r24
    c968:	b1 1d       	adc	r27, r1
    c96a:	28 0d       	add	r18, r8
    c96c:	39 1d       	adc	r19, r9
    c96e:	f9 01       	movw	r30, r18
    c970:	80 81       	ld	r24, Z
    c972:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
      str1[cnt + 1] = 0;
    c974:	11 96       	adiw	r26, 0x01	; 1
    c976:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c978:	4f 5f       	subi	r20, 0xFF	; 255
    c97a:	e6 cf       	rjmp	.-52     	; 0xc948 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    c97c:	86 ef       	ldi	r24, 0xF6	; 246
    c97e:	94 e0       	ldi	r25, 0x04	; 4
    c980:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c984:	b1 cf       	rjmp	.-158    	; 0xc8e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c986:	67 ef       	ldi	r22, 0xF7	; 247
    c988:	73 e0       	ldi	r23, 0x03	; 3
    c98a:	c5 01       	movw	r24, r10
    c98c:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    c990:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    c992:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c994:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    c996:	e6 e0       	ldi	r30, 0x06	; 6
    c998:	3e 2e       	mov	r3, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    c99a:	ff e0       	ldi	r31, 0x0F	; 15
    c99c:	6f 2e       	mov	r6, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
    pch = strtok (str1, "/");
    while (pch != NULL)
    c99e:	41 14       	cp	r4, r1
    c9a0:	51 04       	cpc	r5, r1
    c9a2:	09 f4       	brne	.+2      	; 0xc9a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
    c9a4:	c3 c0       	rjmp	.+390    	; 0xcb2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
    {
      if (cnt == 0) id = atoi(pch);
    c9a6:	d1 10       	cpse	r13, r1
    c9a8:	7f c0       	rjmp	.+254    	; 0xcaa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf72>
    c9aa:	c2 01       	movw	r24, r4
    c9ac:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c9b0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    c9b2:	27 e0       	ldi	r18, 0x07	; 7
    c9b4:	27 15       	cp	r18, r7
    c9b6:	08 f4       	brcc	.+2      	; 0xc9ba <mqtt_callback(char*, unsigned char*, unsigned int)+0xe84>
    c9b8:	b4 c0       	rjmp	.+360    	; 0xcb22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
    c9ba:	1b 30       	cpi	r17, 0x0B	; 11
    c9bc:	08 f0       	brcs	.+2      	; 0xc9c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe8a>
    c9be:	b1 c0       	rjmp	.+354    	; 0xcb22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    c9c0:	82 e0       	ldi	r24, 0x02	; 2
    c9c2:	d8 12       	cpse	r13, r24
    c9c4:	a5 c0       	rjmp	.+330    	; 0xcb10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
    c9c6:	6a ed       	ldi	r22, 0xDA	; 218
    c9c8:	73 e0       	ldi	r23, 0x03	; 3
    c9ca:	c2 01       	movw	r24, r4
    c9cc:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    c9d0:	89 2b       	or	r24, r25
    c9d2:	b1 f5       	brne	.+108    	; 0xca40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
    c9d4:	87 ef       	ldi	r24, 0xF7	; 247
    c9d6:	9a e0       	ldi	r25, 0x0A	; 10
    c9d8:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    c9dc:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    c9de:	ad e4       	ldi	r26, 0x4D	; 77
    c9e0:	7a 9e       	mul	r7, r26
    c9e2:	70 01       	movw	r14, r0
    c9e4:	11 24       	eor	r1, r1
    c9e6:	bf e0       	ldi	r27, 0x0F	; 15
    c9e8:	eb 1a       	sub	r14, r27
    c9ea:	be ef       	ldi	r27, 0xFE	; 254
    c9ec:	fb 0a       	sbc	r15, r27
    c9ee:	13 9d       	mul	r17, r3
    c9f0:	e0 0c       	add	r14, r0
    c9f2:	f1 1c       	adc	r15, r1
    c9f4:	11 24       	eor	r1, r1
    c9f6:	c7 01       	movw	r24, r14
    c9f8:	02 96       	adiw	r24, 0x02	; 2
    c9fa:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c9fe:	28 2e       	mov	r2, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    ca00:	c7 01       	movw	r24, r14
    ca02:	03 96       	adiw	r24, 0x03	; 3
    ca04:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    ca08:	42 2d       	mov	r20, r2
    ca0a:	46 95       	lsr	r20
    ca0c:	46 95       	lsr	r20
    ca0e:	46 95       	lsr	r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    ca10:	22 2d       	mov	r18, r2
    ca12:	30 e0       	ldi	r19, 0x00	; 0
    ca14:	35 95       	asr	r19
    ca16:	27 95       	ror	r18
    ca18:	23 70       	andi	r18, 0x03	; 3
    ca1a:	26 9d       	mul	r18, r6
    ca1c:	20 2d       	mov	r18, r0
    ca1e:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    ca20:	08 2f       	mov	r16, r24
    ca22:	06 95       	lsr	r16
    ca24:	06 95       	lsr	r16
    ca26:	06 95       	lsr	r16
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    ca28:	83 70       	andi	r24, 0x03	; 3
    ca2a:	86 9d       	mul	r24, r6
    ca2c:	e0 2c       	mov	r14, r0
    ca2e:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    ca30:	82 2d       	mov	r24, r2
    ca32:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:380
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    ca34:	c8 16       	cp	r12, r24
    ca36:	21 f0       	breq	.+8      	; 0xca40 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    ca38:	61 2f       	mov	r22, r17
    ca3a:	87 2d       	mov	r24, r7
    ca3c:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    ca40:	69 e6       	ldi	r22, 0x69	; 105
    ca42:	76 e0       	ldi	r23, 0x06	; 6
    ca44:	c2 01       	movw	r24, r4
    ca46:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ca4a:	89 2b       	or	r24, r25
    ca4c:	49 f4       	brne	.+18     	; 0xca60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf2a>
    ca4e:	87 ef       	ldi	r24, 0xF7	; 247
    ca50:	9a e0       	ldi	r25, 0x0A	; 10
    ca52:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    ca56:	ac 01       	movw	r20, r24
    ca58:	61 2f       	mov	r22, r17
    ca5a:	87 2d       	mov	r24, r7
    ca5c:	0e 94 80 4e 	call	0x9d00	; 0x9d00 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    ca60:	61 eb       	ldi	r22, 0xB1	; 177
    ca62:	76 e0       	ldi	r23, 0x06	; 6
    ca64:	c2 01       	movw	r24, r4
    ca66:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ca6a:	89 2b       	or	r24, r25
    ca6c:	09 f0       	breq	.+2      	; 0xca70 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3a>
    ca6e:	50 c0       	rjmp	.+160    	; 0xcb10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    ca70:	6c e1       	ldi	r22, 0x1C	; 28
    ca72:	75 e0       	ldi	r23, 0x05	; 5
    ca74:	87 ef       	ldi	r24, 0xF7	; 247
    ca76:	9a e0       	ldi	r25, 0x0A	; 10
    ca78:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    ca7c:	f1 2c       	mov	r15, r1
    ca7e:	c1 2c       	mov	r12, r1
    ca80:	e1 2c       	mov	r14, r1
    ca82:	21 2c       	mov	r2, r1
    ca84:	41 2c       	mov	r4, r1
    ca86:	51 2c       	mov	r5, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
    ca88:	00 e0       	ldi	r16, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
    ca8a:	00 97       	sbiw	r24, 0x00	; 0
    ca8c:	99 f1       	breq	.+102    	; 0xcaf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbe>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
    ca8e:	01 11       	cpse	r16, r1
    ca90:	13 c0       	rjmp	.+38     	; 0xcab8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf82>
    ca92:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    ca96:	58 2e       	mov	r5, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    ca98:	6c e1       	ldi	r22, 0x1C	; 28
    ca9a:	75 e0       	ldi	r23, 0x05	; 5
    ca9c:	90 e0       	ldi	r25, 0x00	; 0
    ca9e:	80 e0       	ldi	r24, 0x00	; 0
    caa0:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:354
    cnt++;
    caa4:	0f 5f       	subi	r16, 0xFF	; 255
    caa6:	f1 cf       	rjmp	.-30     	; 0xca8a <mqtt_callback(char*, unsigned char*, unsigned int)+0xf54>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    caa8:	f1 e0       	ldi	r31, 0x01	; 1
    caaa:	df 12       	cpse	r13, r31
    caac:	82 cf       	rjmp	.-252    	; 0xc9b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    caae:	c2 01       	movw	r24, r4
    cab0:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cab4:	18 2f       	mov	r17, r24
    cab6:	7d cf       	rjmp	.-262    	; 0xc9b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    cab8:	01 30       	cpi	r16, 0x01	; 1
    caba:	21 f4       	brne	.+8      	; 0xcac4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8e>
    cabc:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cac0:	48 2e       	mov	r4, r24
    cac2:	ea cf       	rjmp	.-44     	; 0xca98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
    cac4:	02 30       	cpi	r16, 0x02	; 2
    cac6:	21 f4       	brne	.+8      	; 0xcad0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
    cac8:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cacc:	28 2e       	mov	r2, r24
    cace:	e4 cf       	rjmp	.-56     	; 0xca98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
    cad0:	03 30       	cpi	r16, 0x03	; 3
    cad2:	21 f4       	brne	.+8      	; 0xcadc <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa6>
    cad4:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cad8:	e8 2e       	mov	r14, r24
    cada:	de cf       	rjmp	.-68     	; 0xca98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
    cadc:	04 30       	cpi	r16, 0x04	; 4
    cade:	21 f4       	brne	.+8      	; 0xcae8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb2>
    cae0:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cae4:	f8 2e       	mov	r15, r24
    cae6:	d8 cf       	rjmp	.-80     	; 0xca98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
    cae8:	05 30       	cpi	r16, 0x05	; 5
    caea:	b1 f6       	brne	.-84     	; 0xca98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
    caec:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    caf0:	c8 2e       	mov	r12, r24
    caf2:	d2 cf       	rjmp	.-92     	; 0xca98 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    caf4:	06 30       	cpi	r16, 0x06	; 6
    caf6:	61 f4       	brne	.+24     	; 0xcb10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    caf8:	02 2d       	mov	r16, r2
    cafa:	24 2d       	mov	r18, r4
    cafc:	45 2d       	mov	r20, r5
    cafe:	61 2f       	mov	r22, r17
    cb00:	87 2d       	mov	r24, r7
    cb02:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
    cb06:	4f 2d       	mov	r20, r15
    cb08:	61 2f       	mov	r22, r17
    cb0a:	87 2d       	mov	r24, r7
    cb0c:	0e 94 72 4e 	call	0x9ce4	; 0x9ce4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2600
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    cb10:	67 ef       	ldi	r22, 0xF7	; 247
    cb12:	73 e0       	ldi	r23, 0x03	; 3
    cb14:	90 e0       	ldi	r25, 0x00	; 0
    cb16:	80 e0       	ldi	r24, 0x00	; 0
    cb18:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    cb1c:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
      cnt++;
    cb1e:	d3 94       	inc	r13
    cb20:	3e cf       	rjmp	.-388    	; 0xc99e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    cb22:	8e e1       	ldi	r24, 0x1E	; 30
    cb24:	95 e0       	ldi	r25, 0x05	; 5
    cb26:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cb2a:	f2 cf       	rjmp	.-28     	; 0xcb10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    cb2c:	63 e1       	ldi	r22, 0x13	; 19
    cb2e:	72 e3       	ldi	r23, 0x32	; 50
    cb30:	c5 01       	movw	r24, r10
    cb32:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
  strcat(str1, device.nazev);
    cb36:	61 e5       	ldi	r22, 0x51	; 81
    cb38:	7c e0       	ldi	r23, 0x0C	; 12
    cb3a:	c5 01       	movw	r24, r10
    cb3c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
  strcat(str1, "/ring/default");
    cb40:	67 e3       	ldi	r22, 0x37	; 55
    cb42:	75 e0       	ldi	r23, 0x05	; 5
    cb44:	c5 01       	movw	r24, r10
    cb46:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  if (strcmp(str1, topic) == 0)
    cb4a:	b4 01       	movw	r22, r8
    cb4c:	c5 01       	movw	r24, r10
    cb4e:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cb52:	89 2b       	or	r24, r25
    cb54:	a1 f4       	brne	.+40     	; 0xcb7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1048>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
  {
    mqtt_process_message++;
    cb56:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    cb5a:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    cb5e:	01 96       	adiw	r24, 0x01	; 1
    cb60:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    cb64:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
    default_ring = atoi(my_payload);
    cb68:	87 ef       	ldi	r24, 0xF7	; 247
    cb6a:	9a e0       	ldi	r25, 0x0A	; 10
    cb6c:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cb70:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    cb74:	68 2f       	mov	r22, r24
    cb76:	8c e5       	ldi	r24, 0x5C	; 92
    cb78:	90 e0       	ldi	r25, 0x00	; 0
    cb7a:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    cb7e:	63 e1       	ldi	r22, 0x13	; 19
    cb80:	72 e3       	ldi	r23, 0x32	; 50
    cb82:	c5 01       	movw	r24, r10
    cb84:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2618
  strcat(str1, device.nazev);
    cb88:	61 e5       	ldi	r22, 0x51	; 81
    cb8a:	7c e0       	ldi	r23, 0x0C	; 12
    cb8c:	c5 01       	movw	r24, r10
    cb8e:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
  strcat(str1, "/ring/get/");
    cb92:	65 e4       	ldi	r22, 0x45	; 69
    cb94:	75 e0       	ldi	r23, 0x05	; 5
    cb96:	c5 01       	movw	r24, r10
    cb98:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cb9c:	f5 01       	movw	r30, r10
    cb9e:	01 90       	ld	r0, Z+
    cba0:	00 20       	and	r0, r0
    cba2:	e9 f7       	brne	.-6      	; 0xcb9e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1068>
    cba4:	31 97       	sbiw	r30, 0x01	; 1
    cba6:	8f 01       	movw	r16, r30
    cba8:	0a 19       	sub	r16, r10
    cbaa:	1b 09       	sbc	r17, r11
    cbac:	a8 01       	movw	r20, r16
    cbae:	b4 01       	movw	r22, r8
    cbb0:	c5 01       	movw	r24, r10
    cbb2:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    cbb6:	89 2b       	or	r24, r25
    cbb8:	09 f0       	breq	.+2      	; 0xcbbc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    cbba:	9c c0       	rjmp	.+312    	; 0xccf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2623
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cbbc:	90 2f       	mov	r25, r16
    cbbe:	80 2f       	mov	r24, r16
    cbc0:	89 1b       	sub	r24, r25
    cbc2:	20 2f       	mov	r18, r16
    cbc4:	30 e0       	ldi	r19, 0x00	; 0
    cbc6:	f4 01       	movw	r30, r8
    cbc8:	01 90       	ld	r0, Z+
    cbca:	00 20       	and	r0, r0
    cbcc:	e9 f7       	brne	.-6      	; 0xcbc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1092>
    cbce:	31 97       	sbiw	r30, 0x01	; 1
    cbd0:	e8 19       	sub	r30, r8
    cbd2:	f9 09       	sbc	r31, r9
    cbd4:	2e 17       	cp	r18, r30
    cbd6:	3f 07       	cpc	r19, r31
    cbd8:	58 f4       	brcc	.+22     	; 0xcbf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2625
    {
      str1[cnt] = topic[f];
    cbda:	f5 01       	movw	r30, r10
    cbdc:	e8 0f       	add	r30, r24
    cbde:	f1 1d       	adc	r31, r1
    cbe0:	28 0d       	add	r18, r8
    cbe2:	39 1d       	adc	r19, r9
    cbe4:	d9 01       	movw	r26, r18
    cbe6:	8c 91       	ld	r24, X
    cbe8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
      str1[cnt + 1] = 0;
    cbea:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2623
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cbec:	0f 5f       	subi	r16, 0xFF	; 255
    cbee:	e7 cf       	rjmp	.-50     	; 0xcbbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1088>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2630
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cbf0:	67 ef       	ldi	r22, 0xF7	; 247
    cbf2:	73 e0       	ldi	r23, 0x03	; 3
    cbf4:	c5 01       	movw	r24, r10
    cbf6:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cbfa:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631
    pch = strtok (str1, "/");
    while (pch != NULL)
    cbfc:	00 97       	sbiw	r24, 0x00	; 0
    cbfe:	09 f4       	brne	.+2      	; 0xcc02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10cc>
    cc00:	79 c0       	rjmp	.+242    	; 0xccf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
    {
      if (cnt == 0) id = atoi(my_payload);
    cc02:	61 10       	cpse	r6, r1
    cc04:	0e c0       	rjmp	.+28     	; 0xcc22 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
    cc06:	87 ef       	ldi	r24, 0xF7	; 247
    cc08:	9a e0       	ldi	r25, 0x0A	; 10
    cc0a:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cc0e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
      if (id < MAX_THERMOSTAT)
    cc10:	b4 e0       	ldi	r27, 0x04	; 4
    cc12:	b8 17       	cp	r27, r24
    cc14:	08 f0       	brcs	.+2      	; 0xcc18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
    cc16:	66 c0       	rjmp	.+204    	; 0xcce4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    cc18:	84 e5       	ldi	r24, 0x54	; 84
    cc1a:	95 e0       	ldi	r25, 0x05	; 5
    cc1c:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cc20:	61 c0       	rjmp	.+194    	; 0xcce4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    cc22:	e4 e0       	ldi	r30, 0x04	; 4
    cc24:	e7 15       	cp	r30, r7
    cc26:	c0 f3       	brcs	.-16     	; 0xcc18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    cc28:	f1 e0       	ldi	r31, 0x01	; 1
    cc2a:	6f 12       	cpse	r6, r31
    cc2c:	5b c0       	rjmp	.+182    	; 0xcce4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
    cc2e:	60 e5       	ldi	r22, 0x50	; 80
    cc30:	75 e0       	ldi	r23, 0x05	; 5
    cc32:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cc36:	89 2b       	or	r24, r25
    cc38:	09 f0       	breq	.+2      	; 0xcc3c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1106>
    cc3a:	54 c0       	rjmp	.+168    	; 0xcce4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    cc3c:	c7 2c       	mov	r12, r7
    cc3e:	d1 2c       	mov	r13, r1
    cc40:	76 01       	movw	r14, r12
    cc42:	ee 0c       	add	r14, r14
    cc44:	ff 1c       	adc	r15, r15
    cc46:	ee 0c       	add	r14, r14
    cc48:	ff 1c       	adc	r15, r15
    cc4a:	f7 01       	movw	r30, r14
    cc4c:	ed 56       	subi	r30, 0x6D	; 109
    cc4e:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3192
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    cc50:	60 81       	ld	r22, Z
    cc52:	71 81       	ldd	r23, Z+1	; 0x01
    cc54:	82 81       	ldd	r24, Z+2	; 0x02
    cc56:	93 81       	ldd	r25, Z+3	; 0x03
    cc58:	8e 01       	movw	r16, r28
    cc5a:	08 5b       	subi	r16, 0xB8	; 184
    cc5c:	1f 4f       	sbci	r17, 0xFF	; 255
    cc5e:	22 e0       	ldi	r18, 0x02	; 2
    cc60:	47 e0       	ldi	r20, 0x07	; 7
    cc62:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    cc66:	98 01       	movw	r18, r16
    cc68:	4c e9       	ldi	r20, 0x9C	; 156
    cc6a:	56 e0       	ldi	r21, 0x06	; 6
    cc6c:	67 2d       	mov	r22, r7
    cc6e:	80 e5       	ldi	r24, 0x50	; 80
    cc70:	95 e0       	ldi	r25, 0x05	; 5
    cc72:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_i():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    cc76:	f7 01       	movw	r30, r14
    cc78:	e9 55       	subi	r30, 0x59	; 89
    cc7a:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3194
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    cc7c:	60 81       	ld	r22, Z
    cc7e:	71 81       	ldd	r23, Z+1	; 0x01
    cc80:	82 81       	ldd	r24, Z+2	; 0x02
    cc82:	93 81       	ldd	r25, Z+3	; 0x03
    cc84:	22 e0       	ldi	r18, 0x02	; 2
    cc86:	47 e0       	ldi	r20, 0x07	; 7
    cc88:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3195
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    cc8c:	98 01       	movw	r18, r16
    cc8e:	43 ea       	ldi	r20, 0xA3	; 163
    cc90:	56 e0       	ldi	r21, 0x06	; 6
    cc92:	67 2d       	mov	r22, r7
    cc94:	80 e5       	ldi	r24, 0x50	; 80
    cc96:	95 e0       	ldi	r25, 0x05	; 5
    cc98:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_d():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    cc9c:	f7 01       	movw	r30, r14
    cc9e:	e5 54       	subi	r30, 0x45	; 69
    cca0:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3196
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    cca2:	60 81       	ld	r22, Z
    cca4:	71 81       	ldd	r23, Z+1	; 0x01
    cca6:	82 81       	ldd	r24, Z+2	; 0x02
    cca8:	93 81       	ldd	r25, Z+3	; 0x03
    ccaa:	22 e0       	ldi	r18, 0x02	; 2
    ccac:	47 e0       	ldi	r20, 0x07	; 7
    ccae:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    ccb2:	98 01       	movw	r18, r16
    ccb4:	4a ea       	ldi	r20, 0xAA	; 170
    ccb6:	56 e0       	ldi	r21, 0x06	; 6
    ccb8:	67 2d       	mov	r22, r7
    ccba:	80 e5       	ldi	r24, 0x50	; 80
    ccbc:	95 e0       	ldi	r25, 0x05	; 5
    ccbe:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    ccc2:	f6 01       	movw	r30, r12
    ccc4:	e1 53       	subi	r30, 0x31	; 49
    ccc6:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
  itoa(thermostat_get_pid_time(idx), payload, 10);
    ccc8:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ccca:	4a e0       	ldi	r20, 0x0A	; 10
    cccc:	b8 01       	movw	r22, r16
    ccce:	90 e0       	ldi	r25, 0x00	; 0
    ccd0:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    ccd4:	98 01       	movw	r18, r16
    ccd6:	41 eb       	ldi	r20, 0xB1	; 177
    ccd8:	56 e0       	ldi	r21, 0x06	; 6
    ccda:	67 2d       	mov	r22, r7
    ccdc:	80 e5       	ldi	r24, 0x50	; 80
    ccde:	95 e0       	ldi	r25, 0x05	; 5
    cce0:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    cce4:	67 ef       	ldi	r22, 0xF7	; 247
    cce6:	73 e0       	ldi	r23, 0x03	; 3
    cce8:	90 e0       	ldi	r25, 0x00	; 0
    ccea:	80 e0       	ldi	r24, 0x00	; 0
    ccec:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
      cnt++;
    ccf0:	63 94       	inc	r6
    ccf2:	84 cf       	rjmp	.-248    	; 0xcbfc <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    ccf4:	63 e1       	ldi	r22, 0x13	; 19
    ccf6:	72 e3       	ldi	r23, 0x32	; 50
    ccf8:	c5 01       	movw	r24, r10
    ccfa:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
  strcat(str1, device.nazev);
    ccfe:	61 e5       	ldi	r22, 0x51	; 81
    cd00:	7c e0       	ldi	r23, 0x0C	; 12
    cd02:	c5 01       	movw	r24, r10
    cd04:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
  strcat(str1, "/ring/set/");
    cd08:	64 e6       	ldi	r22, 0x64	; 100
    cd0a:	75 e0       	ldi	r23, 0x05	; 5
    cd0c:	c5 01       	movw	r24, r10
    cd0e:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cd12:	f5 01       	movw	r30, r10
    cd14:	01 90       	ld	r0, Z+
    cd16:	00 20       	and	r0, r0
    cd18:	e9 f7       	brne	.-6      	; 0xcd14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11de>
    cd1a:	31 97       	sbiw	r30, 0x01	; 1
    cd1c:	8f 01       	movw	r16, r30
    cd1e:	0a 19       	sub	r16, r10
    cd20:	1b 09       	sbc	r17, r11
    cd22:	a8 01       	movw	r20, r16
    cd24:	b4 01       	movw	r22, r8
    cd26:	c5 01       	movw	r24, r10
    cd28:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    cd2c:	89 2b       	or	r24, r25
    cd2e:	09 f0       	breq	.+2      	; 0xcd32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fc>
    cd30:	d1 c1       	rjmp	.+930    	; 0xd0d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x159e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cd32:	90 2f       	mov	r25, r16
    cd34:	80 2f       	mov	r24, r16
    cd36:	89 1b       	sub	r24, r25
    cd38:	20 2f       	mov	r18, r16
    cd3a:	30 e0       	ldi	r19, 0x00	; 0
    cd3c:	f4 01       	movw	r30, r8
    cd3e:	01 90       	ld	r0, Z+
    cd40:	00 20       	and	r0, r0
    cd42:	e9 f7       	brne	.-6      	; 0xcd3e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1208>
    cd44:	31 97       	sbiw	r30, 0x01	; 1
    cd46:	e8 19       	sub	r30, r8
    cd48:	f9 09       	sbc	r31, r9
    cd4a:	2e 17       	cp	r18, r30
    cd4c:	3f 07       	cpc	r19, r31
    cd4e:	58 f4       	brcc	.+22     	; 0xcd66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1230>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
    {
      str1[cnt] = topic[f];
    cd50:	f5 01       	movw	r30, r10
    cd52:	e8 0f       	add	r30, r24
    cd54:	f1 1d       	adc	r31, r1
    cd56:	28 0d       	add	r18, r8
    cd58:	39 1d       	adc	r19, r9
    cd5a:	d9 01       	movw	r26, r18
    cd5c:	8c 91       	ld	r24, X
    cd5e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
      str1[cnt + 1] = 0;
    cd60:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cd62:	0f 5f       	subi	r16, 0xFF	; 255
    cd64:	e7 cf       	rjmp	.-50     	; 0xcd34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cd66:	67 ef       	ldi	r22, 0xF7	; 247
    cd68:	73 e0       	ldi	r23, 0x03	; 3
    cd6a:	c5 01       	movw	r24, r10
    cd6c:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    cd70:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cd72:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    cd74:	51 e2       	ldi	r21, 0x21	; 33
    cd76:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
    pch = strtok (str1, "/");
    while (pch != NULL)
    cd78:	01 15       	cp	r16, r1
    cd7a:	11 05       	cpc	r17, r1
    cd7c:	09 f4       	brne	.+2      	; 0xcd80 <mqtt_callback(char*, unsigned char*, unsigned int)+0x124a>
    cd7e:	aa c1       	rjmp	.+852    	; 0xd0d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x159e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
    {
      if (cnt == 0) id = atoi(pch);
    cd80:	d1 10       	cpse	r13, r1
    cd82:	0d c0       	rjmp	.+26     	; 0xcd9e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1268>
    cd84:	c8 01       	movw	r24, r16
    cd86:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cd8a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
      if (id < MAX_THERMOSTAT)
    cd8c:	b4 e0       	ldi	r27, 0x04	; 4
    cd8e:	b8 17       	cp	r27, r24
    cd90:	08 f0       	brcs	.+2      	; 0xcd94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
    cd92:	97 c1       	rjmp	.+814    	; 0xd0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2716
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    cd94:	84 e5       	ldi	r24, 0x54	; 84
    cd96:	95 e0       	ldi	r25, 0x05	; 5
    cd98:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cd9c:	92 c1       	rjmp	.+804    	; 0xd0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    cd9e:	e4 e0       	ldi	r30, 0x04	; 4
    cda0:	e7 15       	cp	r30, r7
    cda2:	c0 f3       	brcs	.-16     	; 0xcd94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    cda4:	f1 e0       	ldi	r31, 0x01	; 1
    cda6:	df 12       	cpse	r13, r31
    cda8:	8c c1       	rjmp	.+792    	; 0xd0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
    cdaa:	60 ed       	ldi	r22, 0xD0	; 208
    cdac:	73 e0       	ldi	r23, 0x03	; 3
    cdae:	c8 01       	movw	r24, r16
    cdb0:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cdb4:	89 2b       	or	r24, r25
    cdb6:	29 f4       	brne	.+10     	; 0xcdc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
    cdb8:	67 ef       	ldi	r22, 0xF7	; 247
    cdba:	7a e0       	ldi	r23, 0x0A	; 10
    cdbc:	87 2d       	mov	r24, r7
    cdbe:	0e 94 60 4f 	call	0x9ec0	; 0x9ec0 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    cdc2:	63 e7       	ldi	r22, 0x73	; 115
    cdc4:	76 e0       	ldi	r23, 0x06	; 6
    cdc6:	c8 01       	movw	r24, r16
    cdc8:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cdcc:	89 2b       	or	r24, r25
    cdce:	81 f4       	brne	.+32     	; 0xcdf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    cdd0:	87 ef       	ldi	r24, 0xF7	; 247
    cdd2:	9a e0       	ldi	r25, 0x0A	; 10
    cdd4:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cdd8:	88 30       	cpi	r24, 0x08	; 8
    cdda:	91 05       	cpc	r25, r1
    cddc:	4c f4       	brge	.+18     	; 0xcdf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    cdde:	7e 9c       	mul	r7, r14
    cde0:	90 01       	movw	r18, r0
    cde2:	11 24       	eor	r1, r1
    cde4:	68 2f       	mov	r22, r24
    cde6:	c9 01       	movw	r24, r18
    cde8:	85 5a       	subi	r24, 0xA5	; 165
    cdea:	9e 4f       	sbci	r25, 0xFE	; 254
    cdec:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    cdf0:	6b e7       	ldi	r22, 0x7B	; 123
    cdf2:	76 e0       	ldi	r23, 0x06	; 6
    cdf4:	c8 01       	movw	r24, r16
    cdf6:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cdfa:	89 2b       	or	r24, r25
    cdfc:	79 f4       	brne	.+30     	; 0xce1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
    cdfe:	87 ef       	ldi	r24, 0xF7	; 247
    ce00:	9a e0       	ldi	r25, 0x0A	; 10
    ce02:	0e 94 d1 a7 	call	0x14fa2	; 0x14fa2 <atof>
    ce06:	20 e0       	ldi	r18, 0x00	; 0
    ce08:	30 e0       	ldi	r19, 0x00	; 0
    ce0a:	40 e2       	ldi	r20, 0x20	; 32
    ce0c:	51 e4       	ldi	r21, 0x41	; 65
    ce0e:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
    ce12:	0e 94 30 b3 	call	0x16660	; 0x16660 <__fixsfsi>
    ce16:	87 2d       	mov	r24, r7
    ce18:	0e 94 44 4f 	call	0x9e88	; 0x9e88 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    ce1c:	69 e6       	ldi	r22, 0x69	; 105
    ce1e:	76 e0       	ldi	r23, 0x06	; 6
    ce20:	c8 01       	movw	r24, r16
    ce22:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ce26:	89 2b       	or	r24, r25
    ce28:	41 f4       	brne	.+16     	; 0xce3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1304>
    ce2a:	87 ef       	ldi	r24, 0xF7	; 247
    ce2c:	9a e0       	ldi	r25, 0x0A	; 10
    ce2e:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    ce32:	bc 01       	movw	r22, r24
    ce34:	87 2d       	mov	r24, r7
    ce36:	0e 94 44 4f 	call	0x9e88	; 0x9e88 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    ce3a:	67 e8       	ldi	r22, 0x87	; 135
    ce3c:	76 e0       	ldi	r23, 0x06	; 6
    ce3e:	c8 01       	movw	r24, r16
    ce40:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ce44:	89 2b       	or	r24, r25
    ce46:	09 f0       	breq	.+2      	; 0xce4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1314>
    ce48:	56 c0       	rjmp	.+172    	; 0xcef6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c0>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3409
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    ce4a:	6f e6       	ldi	r22, 0x6F	; 111
    ce4c:	75 e0       	ldi	r23, 0x05	; 5
    ce4e:	87 ef       	ldi	r24, 0xF7	; 247
    ce50:	9a e0       	ldi	r25, 0x0A	; 10
    ce52:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ce56:	ff 24       	eor	r15, r15
    ce58:	f3 94       	inc	r15
    ce5a:	89 2b       	or	r24, r25
    ce5c:	09 f0       	breq	.+2      	; 0xce60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x132a>
    ce5e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3410
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    ce60:	64 e7       	ldi	r22, 0x74	; 116
    ce62:	75 e0       	ldi	r23, 0x05	; 5
    ce64:	87 ef       	ldi	r24, 0xF7	; 247
    ce66:	9a e0       	ldi	r25, 0x0A	; 10
    ce68:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ce6c:	89 2b       	or	r24, r25
    ce6e:	11 f4       	brne	.+4      	; 0xce74 <mqtt_callback(char*, unsigned char*, unsigned int)+0x133e>
_Z13mqtt_callbackPcPhj():
    ce70:	43 e0       	ldi	r20, 0x03	; 3
    ce72:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3411
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    ce74:	6b e7       	ldi	r22, 0x7B	; 123
    ce76:	75 e0       	ldi	r23, 0x05	; 5
    ce78:	87 ef       	ldi	r24, 0xF7	; 247
    ce7a:	9a e0       	ldi	r25, 0x0A	; 10
    ce7c:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ce80:	89 2b       	or	r24, r25
    ce82:	11 f4       	brne	.+4      	; 0xce88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
_Z13mqtt_callbackPcPhj():
    ce84:	32 e0       	ldi	r19, 0x02	; 2
    ce86:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3412
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    ce88:	60 e8       	ldi	r22, 0x80	; 128
    ce8a:	75 e0       	ldi	r23, 0x05	; 5
    ce8c:	87 ef       	ldi	r24, 0xF7	; 247
    ce8e:	9a e0       	ldi	r25, 0x0A	; 10
    ce90:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    ce94:	89 2b       	or	r24, r25
    ce96:	11 f4       	brne	.+4      	; 0xce9c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1366>
_Z13mqtt_callbackPcPhj():
    ce98:	24 e0       	ldi	r18, 0x04	; 4
    ce9a:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3413
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    ce9c:	65 e8       	ldi	r22, 0x85	; 133
    ce9e:	75 e0       	ldi	r23, 0x05	; 5
    cea0:	87 ef       	ldi	r24, 0xF7	; 247
    cea2:	9a e0       	ldi	r25, 0x0A	; 10
    cea4:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cea8:	89 2b       	or	r24, r25
    ceaa:	11 f4       	brne	.+4      	; 0xceb0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x137a>
_Z13mqtt_callbackPcPhj():
    ceac:	96 e0       	ldi	r25, 0x06	; 6
    ceae:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    ceb0:	c4 5d       	subi	r28, 0xD4	; 212
    ceb2:	de 4f       	sbci	r29, 0xFE	; 254
    ceb4:	f8 82       	st	Y, r15
    ceb6:	cc 52       	subi	r28, 0x2C	; 44
    ceb8:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    ceba:	7e 9c       	mul	r7, r14
    cebc:	c0 01       	movw	r24, r0
    cebe:	11 24       	eor	r1, r1
    cec0:	6f 2d       	mov	r22, r15
    cec2:	82 5a       	subi	r24, 0xA2	; 162
    cec4:	9e 4f       	sbci	r25, 0xFE	; 254
    cec6:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    ceca:	c4 5d       	subi	r28, 0xD4	; 212
    cecc:	de 4f       	sbci	r29, 0xFE	; 254
    cece:	88 81       	ld	r24, Y
    ced0:	cc 52       	subi	r28, 0x2C	; 44
    ced2:	d1 40       	sbci	r29, 0x01	; 1
    ced4:	83 30       	cpi	r24, 0x03	; 3
    ced6:	21 f4       	brne	.+8      	; 0xcee0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    ced8:	60 e0       	ldi	r22, 0x00	; 0
    ceda:	87 2d       	mov	r24, r7
    cedc:	0e 94 2b 94 	call	0x12856	; 0x12856 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
          if (active == TERM_MODE_MAN_COOL)
    cee0:	c4 5d       	subi	r28, 0xD4	; 212
    cee2:	de 4f       	sbci	r29, 0xFE	; 254
    cee4:	88 81       	ld	r24, Y
    cee6:	cc 52       	subi	r28, 0x2C	; 44
    cee8:	d1 40       	sbci	r29, 0x01	; 1
    ceea:	85 30       	cpi	r24, 0x05	; 5
    ceec:	21 f4       	brne	.+8      	; 0xcef6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    ceee:	61 e0       	ldi	r22, 0x01	; 1
    cef0:	87 2d       	mov	r24, r7
    cef2:	0e 94 2b 94 	call	0x12856	; 0x12856 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    cef6:	6c e8       	ldi	r22, 0x8C	; 140
    cef8:	76 e0       	ldi	r23, 0x06	; 6
    cefa:	c8 01       	movw	r24, r16
    cefc:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cf00:	89 2b       	or	r24, r25
    cf02:	41 f5       	brne	.+80     	; 0xcf54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x141e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2698
        {
          active = atoi(my_payload);
    cf04:	87 ef       	ldi	r24, 0xF7	; 247
    cf06:	9a e0       	ldi	r25, 0x0A	; 10
    cf08:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cf0c:	c4 5d       	subi	r28, 0xD4	; 212
    cf0e:	de 4f       	sbci	r29, 0xFE	; 254
    cf10:	88 83       	st	Y, r24
    cf12:	cc 52       	subi	r28, 0x2C	; 44
    cf14:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_set_mode():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
    cf16:	7e 9c       	mul	r7, r14
    cf18:	90 01       	movw	r18, r0
    cf1a:	11 24       	eor	r1, r1
    cf1c:	68 2f       	mov	r22, r24
    cf1e:	c9 01       	movw	r24, r18
    cf20:	82 5a       	subi	r24, 0xA2	; 162
    cf22:	9e 4f       	sbci	r25, 0xFE	; 254
    cf24:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
    cf28:	c4 5d       	subi	r28, 0xD4	; 212
    cf2a:	de 4f       	sbci	r29, 0xFE	; 254
    cf2c:	88 81       	ld	r24, Y
    cf2e:	cc 52       	subi	r28, 0x2C	; 44
    cf30:	d1 40       	sbci	r29, 0x01	; 1
    cf32:	83 30       	cpi	r24, 0x03	; 3
    cf34:	21 f4       	brne	.+8      	; 0xcf3e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1408>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    cf36:	60 e0       	ldi	r22, 0x00	; 0
    cf38:	87 2d       	mov	r24, r7
    cf3a:	0e 94 2b 94 	call	0x12856	; 0x12856 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
          if (active == TERM_MODE_MAN_COOL)
    cf3e:	c4 5d       	subi	r28, 0xD4	; 212
    cf40:	de 4f       	sbci	r29, 0xFE	; 254
    cf42:	88 81       	ld	r24, Y
    cf44:	cc 52       	subi	r28, 0x2C	; 44
    cf46:	d1 40       	sbci	r29, 0x01	; 1
    cf48:	85 30       	cpi	r24, 0x05	; 5
    cf4a:	21 f4       	brne	.+8      	; 0xcf54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x141e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    cf4c:	61 e0       	ldi	r22, 0x01	; 1
    cf4e:	87 2d       	mov	r24, r7
    cf50:	0e 94 2b 94 	call	0x12856	; 0x12856 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    cf54:	66 ed       	ldi	r22, 0xD6	; 214
    cf56:	73 e0       	ldi	r23, 0x03	; 3
    cf58:	c8 01       	movw	r24, r16
    cf5a:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cf5e:	89 2b       	or	r24, r25
    cf60:	69 f4       	brne	.+26     	; 0xcf7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1446>
    cf62:	87 ef       	ldi	r24, 0xF7	; 247
    cf64:	9a e0       	ldi	r25, 0x0A	; 10
    cf66:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    cf6a:	7e 9c       	mul	r7, r14
    cf6c:	90 01       	movw	r18, r0
    cf6e:	11 24       	eor	r1, r1
    cf70:	68 2f       	mov	r22, r24
    cf72:	c9 01       	movw	r24, r18
    cf74:	84 5a       	subi	r24, 0xA4	; 164
    cf76:	9e 4f       	sbci	r25, 0xFE	; 254
    cf78:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    cf7c:	65 ed       	ldi	r22, 0xD5	; 213
    cf7e:	73 e0       	ldi	r23, 0x03	; 3
    cf80:	c8 01       	movw	r24, r16
    cf82:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cf86:	89 2b       	or	r24, r25
    cf88:	69 f4       	brne	.+26     	; 0xcfa4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x146e>
    cf8a:	87 ef       	ldi	r24, 0xF7	; 247
    cf8c:	9a e0       	ldi	r25, 0x0A	; 10
    cf8e:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    cf92:	60 e1       	ldi	r22, 0x10	; 16
    cf94:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
    cf96:	7e 9c       	mul	r7, r14
    cf98:	c0 01       	movw	r24, r0
    cf9a:	11 24       	eor	r1, r1
    cf9c:	84 5a       	subi	r24, 0xA4	; 164
    cf9e:	9e 4f       	sbci	r25, 0xFE	; 254
    cfa0:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2707
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    cfa4:	6a ed       	ldi	r22, 0xDA	; 218
    cfa6:	73 e0       	ldi	r23, 0x03	; 3
    cfa8:	c8 01       	movw	r24, r16
    cfaa:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cfae:	89 2b       	or	r24, r25
    cfb0:	69 f4       	brne	.+26     	; 0xcfcc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1496>
    cfb2:	87 ef       	ldi	r24, 0xF7	; 247
    cfb4:	9a e0       	ldi	r25, 0x0A	; 10
    cfb6:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    cfba:	7e 9c       	mul	r7, r14
    cfbc:	90 01       	movw	r18, r0
    cfbe:	11 24       	eor	r1, r1
    cfc0:	68 2f       	mov	r22, r24
    cfc2:	c9 01       	movw	r24, r18
    cfc4:	83 5a       	subi	r24, 0xA3	; 163
    cfc6:	9e 4f       	sbci	r25, 0xFE	; 254
    cfc8:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    cfcc:	61 e9       	ldi	r22, 0x91	; 145
    cfce:	76 e0       	ldi	r23, 0x06	; 6
    cfd0:	c8 01       	movw	r24, r16
    cfd2:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cfd6:	89 2b       	or	r24, r25
    cfd8:	69 f4       	brne	.+26     	; 0xcff4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14be>
    cfda:	87 ef       	ldi	r24, 0xF7	; 247
    cfdc:	9a e0       	ldi	r25, 0x0A	; 10
    cfde:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    cfe2:	7e 9c       	mul	r7, r14
    cfe4:	90 01       	movw	r18, r0
    cfe6:	11 24       	eor	r1, r1
    cfe8:	68 2f       	mov	r22, r24
    cfea:	c9 01       	movw	r24, r18
    cfec:	81 5a       	subi	r24, 0xA1	; 161
    cfee:	9e 4f       	sbci	r25, 0xFE	; 254
    cff0:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    cff4:	68 e9       	ldi	r22, 0x98	; 152
    cff6:	76 e0       	ldi	r23, 0x06	; 6
    cff8:	c8 01       	movw	r24, r16
    cffa:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    cffe:	89 2b       	or	r24, r25
    d000:	a1 f4       	brne	.+40     	; 0xd02a <mqtt_callback(char*, unsigned char*, unsigned int)+0x14f4>
    d002:	87 ef       	ldi	r24, 0xF7	; 247
    d004:	9a e0       	ldi	r25, 0x0A	; 10
    d006:	0e 94 d1 a7 	call	0x14fa2	; 0x14fa2 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d00a:	24 e0       	ldi	r18, 0x04	; 4
    d00c:	72 9e       	mul	r7, r18
    d00e:	f0 01       	movw	r30, r0
    d010:	11 24       	eor	r1, r1
    d012:	ed 56       	subi	r30, 0x6D	; 109
    d014:	f6 4f       	sbci	r31, 0xF6	; 246
    d016:	60 83       	st	Z, r22
    d018:	71 83       	std	Z+1, r23	; 0x01
    d01a:	82 83       	std	Z+2, r24	; 0x02
    d01c:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d01e:	87 2d       	mov	r24, r7
    d020:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d024:	87 2d       	mov	r24, r7
    d026:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    d02a:	6f e9       	ldi	r22, 0x9F	; 159
    d02c:	76 e0       	ldi	r23, 0x06	; 6
    d02e:	c8 01       	movw	r24, r16
    d030:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d034:	89 2b       	or	r24, r25
    d036:	a1 f4       	brne	.+40     	; 0xd060 <mqtt_callback(char*, unsigned char*, unsigned int)+0x152a>
    d038:	87 ef       	ldi	r24, 0xF7	; 247
    d03a:	9a e0       	ldi	r25, 0x0A	; 10
    d03c:	0e 94 d1 a7 	call	0x14fa2	; 0x14fa2 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d040:	a4 e0       	ldi	r26, 0x04	; 4
    d042:	7a 9e       	mul	r7, r26
    d044:	f0 01       	movw	r30, r0
    d046:	11 24       	eor	r1, r1
    d048:	e9 55       	subi	r30, 0x59	; 89
    d04a:	f6 4f       	sbci	r31, 0xF6	; 246
    d04c:	60 83       	st	Z, r22
    d04e:	71 83       	std	Z+1, r23	; 0x01
    d050:	82 83       	std	Z+2, r24	; 0x02
    d052:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d054:	87 2d       	mov	r24, r7
    d056:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d05a:	87 2d       	mov	r24, r7
    d05c:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    d060:	66 ea       	ldi	r22, 0xA6	; 166
    d062:	76 e0       	ldi	r23, 0x06	; 6
    d064:	c8 01       	movw	r24, r16
    d066:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d06a:	89 2b       	or	r24, r25
    d06c:	a1 f4       	brne	.+40     	; 0xd096 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1560>
    d06e:	87 ef       	ldi	r24, 0xF7	; 247
    d070:	9a e0       	ldi	r25, 0x0A	; 10
    d072:	0e 94 d1 a7 	call	0x14fa2	; 0x14fa2 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d076:	b4 e0       	ldi	r27, 0x04	; 4
    d078:	7b 9e       	mul	r7, r27
    d07a:	f0 01       	movw	r30, r0
    d07c:	11 24       	eor	r1, r1
    d07e:	e5 54       	subi	r30, 0x45	; 69
    d080:	f6 4f       	sbci	r31, 0xF6	; 246
    d082:	60 83       	st	Z, r22
    d084:	71 83       	std	Z+1, r23	; 0x01
    d086:	82 83       	std	Z+2, r24	; 0x02
    d088:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d08a:	87 2d       	mov	r24, r7
    d08c:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d090:	87 2d       	mov	r24, r7
    d092:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    d096:	6d ea       	ldi	r22, 0xAD	; 173
    d098:	76 e0       	ldi	r23, 0x06	; 6
    d09a:	c8 01       	movw	r24, r16
    d09c:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d0a0:	89 2b       	or	r24, r25
    d0a2:	79 f4       	brne	.+30     	; 0xd0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
    d0a4:	87 ef       	ldi	r24, 0xF7	; 247
    d0a6:	9a e0       	ldi	r25, 0x0A	; 10
    d0a8:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d0ac:	e7 2d       	mov	r30, r7
    d0ae:	f0 e0       	ldi	r31, 0x00	; 0
    d0b0:	e1 53       	subi	r30, 0x31	; 49
    d0b2:	f6 4f       	sbci	r31, 0xF6	; 246
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2712
    d0b4:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d0b6:	87 2d       	mov	r24, r7
    d0b8:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d0bc:	87 2d       	mov	r24, r7
    d0be:	0e 94 00 4f 	call	0x9e00	; 0x9e00 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    d0c2:	67 ef       	ldi	r22, 0xF7	; 247
    d0c4:	73 e0       	ldi	r23, 0x03	; 3
    d0c6:	90 e0       	ldi	r25, 0x00	; 0
    d0c8:	80 e0       	ldi	r24, 0x00	; 0
    d0ca:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    d0ce:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
      cnt++;
    d0d0:	d3 94       	inc	r13
    d0d2:	52 ce       	rjmp	.-860    	; 0xcd78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    d0d4:	63 e1       	ldi	r22, 0x13	; 19
    d0d6:	72 e3       	ldi	r23, 0x32	; 50
    d0d8:	c5 01       	movw	r24, r10
    d0da:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
  strcat(str1, device.nazev);
    d0de:	61 e5       	ldi	r22, 0x51	; 81
    d0e0:	7c e0       	ldi	r23, 0x0C	; 12
    d0e2:	c5 01       	movw	r24, r10
    d0e4:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726
  strcat(str1, "/ring/clear");
    d0e8:	6e e8       	ldi	r22, 0x8E	; 142
    d0ea:	75 e0       	ldi	r23, 0x05	; 5
    d0ec:	c5 01       	movw	r24, r10
    d0ee:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d0f2:	f5 01       	movw	r30, r10
    d0f4:	01 90       	ld	r0, Z+
    d0f6:	00 20       	and	r0, r0
    d0f8:	e9 f7       	brne	.-6      	; 0xd0f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15be>
    d0fa:	31 97       	sbiw	r30, 0x01	; 1
    d0fc:	af 01       	movw	r20, r30
    d0fe:	4a 19       	sub	r20, r10
    d100:	5b 09       	sbc	r21, r11
    d102:	b4 01       	movw	r22, r8
    d104:	c5 01       	movw	r24, r10
    d106:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    d10a:	89 2b       	or	r24, r25
    d10c:	a1 f4       	brne	.+40     	; 0xd136 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1600>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
  {
    mqtt_process_message++;
    d10e:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d112:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d116:	01 96       	adiw	r24, 0x01	; 1
    d118:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d11c:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
    id = atoi(my_payload);
    d120:	87 ef       	ldi	r24, 0xF7	; 247
    d122:	9a e0       	ldi	r25, 0x0A	; 10
    d124:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    d128:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
    if (id < MAX_THERMOSTAT)
    d12a:	e4 e0       	ldi	r30, 0x04	; 4
    d12c:	e8 17       	cp	r30, r24
    d12e:	08 f4       	brcc	.+2      	; 0xd132 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15fc>
    d130:	99 c1       	rjmp	.+818    	; 0xd464 <mqtt_callback(char*, unsigned char*, unsigned int)+0x192e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
    {
      thermostat_ring_clear(id);
    d132:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    d136:	63 e1       	ldi	r22, 0x13	; 19
    d138:	72 e3       	ldi	r23, 0x32	; 50
    d13a:	c5 01       	movw	r24, r10
    d13c:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  strcat(str1, device.nazev);
    d140:	61 e5       	ldi	r22, 0x51	; 81
    d142:	7c e0       	ldi	r23, 0x0C	; 12
    d144:	c5 01       	movw	r24, r10
    d146:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  strcat(str1, "/network/get/config");
    d14a:	6c ea       	ldi	r22, 0xAC	; 172
    d14c:	75 e0       	ldi	r23, 0x05	; 5
    d14e:	c5 01       	movw	r24, r10
    d150:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2747
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d154:	f5 01       	movw	r30, r10
    d156:	01 90       	ld	r0, Z+
    d158:	00 20       	and	r0, r0
    d15a:	e9 f7       	brne	.-6      	; 0xd156 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1620>
    d15c:	31 97       	sbiw	r30, 0x01	; 1
    d15e:	af 01       	movw	r20, r30
    d160:	4a 19       	sub	r20, r10
    d162:	5b 09       	sbc	r21, r11
    d164:	b4 01       	movw	r22, r8
    d166:	c5 01       	movw	r24, r10
    d168:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    d16c:	89 2b       	or	r24, r25
    d16e:	09 f0       	breq	.+2      	; 0xd172 <mqtt_callback(char*, unsigned char*, unsigned int)+0x163c>
    d170:	2f c1       	rjmp	.+606    	; 0xd3d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x189a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
  {
    mqtt_process_message++;
    d172:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d176:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d17a:	01 96       	adiw	r24, 0x01	; 1
    d17c:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d180:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    d184:	c8 5f       	subi	r28, 0xF8	; 248
    d186:	de 4f       	sbci	r29, 0xFE	; 254
    d188:	18 82       	st	Y, r1
    d18a:	c8 50       	subi	r28, 0x08	; 8
    d18c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    d18e:	00 e1       	ldi	r16, 0x10	; 16
    d190:	26 e0       	ldi	r18, 0x06	; 6
    d192:	4b e3       	ldi	r20, 0x3B	; 59
    d194:	5c e0       	ldi	r21, 0x0C	; 12
    d196:	6a e3       	ldi	r22, 0x3A	; 58
    d198:	ce 01       	movw	r24, r28
    d19a:	88 5f       	subi	r24, 0xF8	; 248
    d19c:	9e 4f       	sbci	r25, 0xFE	; 254
    d19e:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    d1a2:	64 e8       	ldi	r22, 0x84	; 132
    d1a4:	71 e3       	ldi	r23, 0x31	; 49
    d1a6:	ce 01       	movw	r24, r28
    d1a8:	88 5b       	subi	r24, 0xB8	; 184
    d1aa:	9f 4f       	sbci	r25, 0xFF	; 255
    d1ac:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d1b0:	ae 01       	movw	r20, r28
    d1b2:	48 5f       	subi	r20, 0xF8	; 248
    d1b4:	5e 4f       	sbci	r21, 0xFE	; 254
    d1b6:	be 01       	movw	r22, r28
    d1b8:	68 5b       	subi	r22, 0xB8	; 184
    d1ba:	7f 4f       	sbci	r23, 0xFF	; 255
    d1bc:	8e e2       	ldi	r24, 0x2E	; 46
    d1be:	9e e0       	ldi	r25, 0x0E	; 14
    d1c0:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    d1c4:	c8 5f       	subi	r28, 0xF8	; 248
    d1c6:	de 4f       	sbci	r29, 0xFE	; 254
    d1c8:	18 82       	st	Y, r1
    d1ca:	c8 50       	subi	r28, 0x08	; 8
    d1cc:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    d1ce:	0a e0       	ldi	r16, 0x0A	; 10
    d1d0:	24 e0       	ldi	r18, 0x04	; 4
    d1d2:	41 e4       	ldi	r20, 0x41	; 65
    d1d4:	5c e0       	ldi	r21, 0x0C	; 12
    d1d6:	6e e2       	ldi	r22, 0x2E	; 46
    d1d8:	ce 01       	movw	r24, r28
    d1da:	88 5f       	subi	r24, 0xF8	; 248
    d1dc:	9e 4f       	sbci	r25, 0xFE	; 254
    d1de:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    d1e2:	6a ea       	ldi	r22, 0xAA	; 170
    d1e4:	74 e3       	ldi	r23, 0x34	; 52
    d1e6:	ce 01       	movw	r24, r28
    d1e8:	88 5b       	subi	r24, 0xB8	; 184
    d1ea:	9f 4f       	sbci	r25, 0xFF	; 255
    d1ec:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d1f0:	ae 01       	movw	r20, r28
    d1f2:	48 5f       	subi	r20, 0xF8	; 248
    d1f4:	5e 4f       	sbci	r21, 0xFE	; 254
    d1f6:	be 01       	movw	r22, r28
    d1f8:	68 5b       	subi	r22, 0xB8	; 184
    d1fa:	7f 4f       	sbci	r23, 0xFF	; 255
    d1fc:	8e e2       	ldi	r24, 0x2E	; 46
    d1fe:	9e e0       	ldi	r25, 0x0E	; 14
    d200:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    d204:	c8 5f       	subi	r28, 0xF8	; 248
    d206:	de 4f       	sbci	r29, 0xFE	; 254
    d208:	18 82       	st	Y, r1
    d20a:	c8 50       	subi	r28, 0x08	; 8
    d20c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    d20e:	24 e0       	ldi	r18, 0x04	; 4
    d210:	45 e4       	ldi	r20, 0x45	; 69
    d212:	5c e0       	ldi	r21, 0x0C	; 12
    d214:	6e e2       	ldi	r22, 0x2E	; 46
    d216:	ce 01       	movw	r24, r28
    d218:	88 5f       	subi	r24, 0xF8	; 248
    d21a:	9e 4f       	sbci	r25, 0xFE	; 254
    d21c:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    d220:	64 e7       	ldi	r22, 0x74	; 116
    d222:	71 e3       	ldi	r23, 0x31	; 49
    d224:	ce 01       	movw	r24, r28
    d226:	88 5b       	subi	r24, 0xB8	; 184
    d228:	9f 4f       	sbci	r25, 0xFF	; 255
    d22a:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d22e:	ae 01       	movw	r20, r28
    d230:	48 5f       	subi	r20, 0xF8	; 248
    d232:	5e 4f       	sbci	r21, 0xFE	; 254
    d234:	be 01       	movw	r22, r28
    d236:	68 5b       	subi	r22, 0xB8	; 184
    d238:	7f 4f       	sbci	r23, 0xFF	; 255
    d23a:	8e e2       	ldi	r24, 0x2E	; 46
    d23c:	9e e0       	ldi	r25, 0x0E	; 14
    d23e:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    d242:	c8 5f       	subi	r28, 0xF8	; 248
    d244:	de 4f       	sbci	r29, 0xFE	; 254
    d246:	18 82       	st	Y, r1
    d248:	c8 50       	subi	r28, 0x08	; 8
    d24a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    d24c:	24 e0       	ldi	r18, 0x04	; 4
    d24e:	4d e4       	ldi	r20, 0x4D	; 77
    d250:	5c e0       	ldi	r21, 0x0C	; 12
    d252:	6e e2       	ldi	r22, 0x2E	; 46
    d254:	ce 01       	movw	r24, r28
    d256:	88 5f       	subi	r24, 0xF8	; 248
    d258:	9e 4f       	sbci	r25, 0xFE	; 254
    d25a:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    d25e:	69 e6       	ldi	r22, 0x69	; 105
    d260:	71 e3       	ldi	r23, 0x31	; 49
    d262:	ce 01       	movw	r24, r28
    d264:	88 5b       	subi	r24, 0xB8	; 184
    d266:	9f 4f       	sbci	r25, 0xFF	; 255
    d268:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d26c:	ae 01       	movw	r20, r28
    d26e:	48 5f       	subi	r20, 0xF8	; 248
    d270:	5e 4f       	sbci	r21, 0xFE	; 254
    d272:	be 01       	movw	r22, r28
    d274:	68 5b       	subi	r22, 0xB8	; 184
    d276:	7f 4f       	sbci	r23, 0xFF	; 255
    d278:	8e e2       	ldi	r24, 0x2E	; 46
    d27a:	9e e0       	ldi	r25, 0x0E	; 14
    d27c:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    d280:	c8 5f       	subi	r28, 0xF8	; 248
    d282:	de 4f       	sbci	r29, 0xFE	; 254
    d284:	18 82       	st	Y, r1
    d286:	c8 50       	subi	r28, 0x08	; 8
    d288:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    d28a:	24 e0       	ldi	r18, 0x04	; 4
    d28c:	49 e4       	ldi	r20, 0x49	; 73
    d28e:	5c e0       	ldi	r21, 0x0C	; 12
    d290:	6e e2       	ldi	r22, 0x2E	; 46
    d292:	ce 01       	movw	r24, r28
    d294:	88 5f       	subi	r24, 0xF8	; 248
    d296:	9e 4f       	sbci	r25, 0xFE	; 254
    d298:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    d29c:	6d e5       	ldi	r22, 0x5D	; 93
    d29e:	71 e3       	ldi	r23, 0x31	; 49
    d2a0:	ce 01       	movw	r24, r28
    d2a2:	88 5b       	subi	r24, 0xB8	; 184
    d2a4:	9f 4f       	sbci	r25, 0xFF	; 255
    d2a6:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d2aa:	ae 01       	movw	r20, r28
    d2ac:	48 5f       	subi	r20, 0xF8	; 248
    d2ae:	5e 4f       	sbci	r21, 0xFE	; 254
    d2b0:	be 01       	movw	r22, r28
    d2b2:	68 5b       	subi	r22, 0xB8	; 184
    d2b4:	7f 4f       	sbci	r23, 0xFF	; 255
    d2b6:	8e e2       	ldi	r24, 0x2E	; 46
    d2b8:	9e e0       	ldi	r25, 0x0E	; 14
    d2ba:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    d2be:	c8 5f       	subi	r28, 0xF8	; 248
    d2c0:	de 4f       	sbci	r29, 0xFE	; 254
    d2c2:	18 82       	st	Y, r1
    d2c4:	c8 50       	subi	r28, 0x08	; 8
    d2c6:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    d2c8:	24 e0       	ldi	r18, 0x04	; 4
    d2ca:	49 e8       	ldi	r20, 0x89	; 137
    d2cc:	5c e0       	ldi	r21, 0x0C	; 12
    d2ce:	6e e2       	ldi	r22, 0x2E	; 46
    d2d0:	ce 01       	movw	r24, r28
    d2d2:	88 5f       	subi	r24, 0xF8	; 248
    d2d4:	9e 4f       	sbci	r25, 0xFE	; 254
    d2d6:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    d2da:	61 e5       	ldi	r22, 0x51	; 81
    d2dc:	71 e3       	ldi	r23, 0x31	; 49
    d2de:	ce 01       	movw	r24, r28
    d2e0:	88 5b       	subi	r24, 0xB8	; 184
    d2e2:	9f 4f       	sbci	r25, 0xFF	; 255
    d2e4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d2e8:	ae 01       	movw	r20, r28
    d2ea:	48 5f       	subi	r20, 0xF8	; 248
    d2ec:	5e 4f       	sbci	r21, 0xFE	; 254
    d2ee:	be 01       	movw	r22, r28
    d2f0:	68 5b       	subi	r22, 0xB8	; 184
    d2f2:	7f 4f       	sbci	r23, 0xFF	; 255
    d2f4:	8e e2       	ldi	r24, 0x2E	; 46
    d2f6:	9e e0       	ldi	r25, 0x0E	; 14
    d2f8:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    d2fc:	c8 5f       	subi	r28, 0xF8	; 248
    d2fe:	de 4f       	sbci	r29, 0xFE	; 254
    d300:	18 82       	st	Y, r1
    d302:	c8 50       	subi	r28, 0x08	; 8
    d304:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    d306:	24 e0       	ldi	r18, 0x04	; 4
    d308:	4b e5       	ldi	r20, 0x5B	; 91
    d30a:	5c e0       	ldi	r21, 0x0C	; 12
    d30c:	6e e2       	ldi	r22, 0x2E	; 46
    d30e:	ce 01       	movw	r24, r28
    d310:	88 5f       	subi	r24, 0xF8	; 248
    d312:	9e 4f       	sbci	r25, 0xFE	; 254
    d314:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    d318:	6f e3       	ldi	r22, 0x3F	; 63
    d31a:	71 e3       	ldi	r23, 0x31	; 49
    d31c:	ce 01       	movw	r24, r28
    d31e:	88 5b       	subi	r24, 0xB8	; 184
    d320:	9f 4f       	sbci	r25, 0xFF	; 255
    d322:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d326:	ae 01       	movw	r20, r28
    d328:	48 5f       	subi	r20, 0xF8	; 248
    d32a:	5e 4f       	sbci	r21, 0xFE	; 254
    d32c:	be 01       	movw	r22, r28
    d32e:	68 5b       	subi	r22, 0xB8	; 184
    d330:	7f 4f       	sbci	r23, 0xFF	; 255
    d332:	8e e2       	ldi	r24, 0x2E	; 46
    d334:	9e e0       	ldi	r25, 0x0E	; 14
    d336:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d33a:	4a e0       	ldi	r20, 0x0A	; 10
    d33c:	be 01       	movw	r22, r28
    d33e:	68 5f       	subi	r22, 0xF8	; 248
    d340:	7e 4f       	sbci	r23, 0xFE	; 254
    d342:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <device+0x24>
    d346:	90 91 60 0c 	lds	r25, 0x0C60	; 0x800c60 <device+0x25>
    d34a:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    d34e:	6d e2       	ldi	r22, 0x2D	; 45
    d350:	71 e3       	ldi	r23, 0x31	; 49
    d352:	ce 01       	movw	r24, r28
    d354:	88 5b       	subi	r24, 0xB8	; 184
    d356:	9f 4f       	sbci	r25, 0xFF	; 255
    d358:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d35c:	ae 01       	movw	r20, r28
    d35e:	48 5f       	subi	r20, 0xF8	; 248
    d360:	5e 4f       	sbci	r21, 0xFE	; 254
    d362:	be 01       	movw	r22, r28
    d364:	68 5b       	subi	r22, 0xB8	; 184
    d366:	7f 4f       	sbci	r23, 0xFF	; 255
    d368:	8e e2       	ldi	r24, 0x2E	; 46
    d36a:	9e e0       	ldi	r25, 0x0E	; 14
    d36c:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    d370:	6b e1       	ldi	r22, 0x1B	; 27
    d372:	71 e3       	ldi	r23, 0x31	; 49
    d374:	ce 01       	movw	r24, r28
    d376:	88 5b       	subi	r24, 0xB8	; 184
    d378:	9f 4f       	sbci	r25, 0xFF	; 255
    d37a:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    d37e:	41 e6       	ldi	r20, 0x61	; 97
    d380:	5c e0       	ldi	r21, 0x0C	; 12
    d382:	be 01       	movw	r22, r28
    d384:	68 5b       	subi	r22, 0xB8	; 184
    d386:	7f 4f       	sbci	r23, 0xFF	; 255
    d388:	8e e2       	ldi	r24, 0x2E	; 46
    d38a:	9e e0       	ldi	r25, 0x0E	; 14
    d38c:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    d390:	6a e0       	ldi	r22, 0x0A	; 10
    d392:	71 e3       	ldi	r23, 0x31	; 49
    d394:	ce 01       	movw	r24, r28
    d396:	88 5b       	subi	r24, 0xB8	; 184
    d398:	9f 4f       	sbci	r25, 0xFF	; 255
    d39a:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    d39e:	45 e7       	ldi	r20, 0x75	; 117
    d3a0:	5c e0       	ldi	r21, 0x0C	; 12
    d3a2:	be 01       	movw	r22, r28
    d3a4:	68 5b       	subi	r22, 0xB8	; 184
    d3a6:	7f 4f       	sbci	r23, 0xFF	; 255
    d3a8:	8e e2       	ldi	r24, 0x2E	; 46
    d3aa:	9e e0       	ldi	r25, 0x0E	; 14
    d3ac:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    d3b0:	6d ef       	ldi	r22, 0xFD	; 253
    d3b2:	70 e3       	ldi	r23, 0x30	; 48
    d3b4:	ce 01       	movw	r24, r28
    d3b6:	88 5b       	subi	r24, 0xB8	; 184
    d3b8:	9f 4f       	sbci	r25, 0xFF	; 255
    d3ba:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    d3be:	41 e5       	ldi	r20, 0x51	; 81
    d3c0:	5c e0       	ldi	r21, 0x0C	; 12
    d3c2:	be 01       	movw	r22, r28
    d3c4:	68 5b       	subi	r22, 0xB8	; 184
    d3c6:	7f 4f       	sbci	r23, 0xFF	; 255
    d3c8:	8e e2       	ldi	r24, 0x2E	; 46
    d3ca:	9e e0       	ldi	r25, 0x0E	; 14
    d3cc:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    d3d0:	63 e1       	ldi	r22, 0x13	; 19
    d3d2:	72 e3       	ldi	r23, 0x32	; 50
    d3d4:	c5 01       	movw	r24, r10
    d3d6:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2765
  strcat(str1, device.nazev);
    d3da:	61 e5       	ldi	r22, 0x51	; 81
    d3dc:	7c e0       	ldi	r23, 0x0C	; 12
    d3de:	c5 01       	movw	r24, r10
    d3e0:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2766
  strcat(str1, "/network/set/");
    d3e4:	60 ec       	ldi	r22, 0xC0	; 192
    d3e6:	75 e0       	ldi	r23, 0x05	; 5
    d3e8:	c5 01       	movw	r24, r10
    d3ea:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d3ee:	f5 01       	movw	r30, r10
    d3f0:	01 90       	ld	r0, Z+
    d3f2:	00 20       	and	r0, r0
    d3f4:	e9 f7       	brne	.-6      	; 0xd3f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ba>
    d3f6:	31 97       	sbiw	r30, 0x01	; 1
    d3f8:	af 01       	movw	r20, r30
    d3fa:	4a 19       	sub	r20, r10
    d3fc:	5b 09       	sbc	r21, r11
    d3fe:	b4 01       	movw	r22, r8
    d400:	c5 01       	movw	r24, r10
    d402:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    d406:	89 2b       	or	r24, r25
    d408:	09 f0       	breq	.+2      	; 0xd40c <mqtt_callback(char*, unsigned char*, unsigned int)+0x18d6>
    d40a:	f1 c0       	rjmp	.+482    	; 0xd5ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2769
  {
    mqtt_process_message++;
    d40c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d410:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d414:	01 96       	adiw	r24, 0x01	; 1
    d416:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d41a:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d41e:	f5 01       	movw	r30, r10
    d420:	01 90       	ld	r0, Z+
    d422:	00 20       	and	r0, r0
    d424:	e9 f7       	brne	.-6      	; 0xd420 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ea>
    d426:	31 97       	sbiw	r30, 0x01	; 1
    d428:	ea 19       	sub	r30, r10
    d42a:	fb 09       	sbc	r31, r11
    d42c:	9e 2f       	mov	r25, r30
    d42e:	4e 2f       	mov	r20, r30
    d430:	84 2f       	mov	r24, r20
    d432:	89 1b       	sub	r24, r25
    d434:	24 2f       	mov	r18, r20
    d436:	30 e0       	ldi	r19, 0x00	; 0
    d438:	d4 01       	movw	r26, r8
    d43a:	0d 90       	ld	r0, X+
    d43c:	00 20       	and	r0, r0
    d43e:	e9 f7       	brne	.-6      	; 0xd43a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1904>
    d440:	11 97       	sbiw	r26, 0x01	; 1
    d442:	a8 19       	sub	r26, r8
    d444:	b9 09       	sbc	r27, r9
    d446:	2a 17       	cp	r18, r26
    d448:	3b 07       	cpc	r19, r27
    d44a:	88 f4       	brcc	.+34     	; 0xd46e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1938>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
    {
      str1[cnt] = topic[f];
    d44c:	d5 01       	movw	r26, r10
    d44e:	a8 0f       	add	r26, r24
    d450:	b1 1d       	adc	r27, r1
    d452:	28 0d       	add	r18, r8
    d454:	39 1d       	adc	r19, r9
    d456:	f9 01       	movw	r30, r18
    d458:	80 81       	ld	r24, Z
    d45a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
      str1[cnt + 1] = 0;
    d45c:	11 96       	adiw	r26, 0x01	; 1
    d45e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2771
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d460:	4f 5f       	subi	r20, 0xFF	; 255
    d462:	e6 cf       	rjmp	.-52     	; 0xd430 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    d464:	8a e9       	ldi	r24, 0x9A	; 154
    d466:	95 e0       	ldi	r25, 0x05	; 5
    d468:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d46c:	64 ce       	rjmp	.-824    	; 0xd136 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1600>
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    d46e:	67 ef       	ldi	r22, 0xF7	; 247
    d470:	73 e0       	ldi	r23, 0x03	; 3
    d472:	c5 01       	movw	r24, r10
    d474:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    d478:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    d47a:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    d47c:	e1 14       	cp	r14, r1
    d47e:	f1 04       	cpc	r15, r1
    d480:	09 f4       	brne	.+2      	; 0xd484 <mqtt_callback(char*, unsigned char*, unsigned int)+0x194e>
    d482:	a9 c0       	rjmp	.+338    	; 0xd5d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    d484:	6e ec       	ldi	r22, 0xCE	; 206
    d486:	75 e0       	ldi	r23, 0x05	; 5
    d488:	c7 01       	movw	r24, r14
    d48a:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d48e:	89 2b       	or	r24, r25
    d490:	41 f4       	brne	.+16     	; 0xd4a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x196c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    d492:	46 e0       	ldi	r20, 0x06	; 6
    d494:	50 e0       	ldi	r21, 0x00	; 0
    d496:	6b e3       	ldi	r22, 0x3B	; 59
    d498:	7c e0       	ldi	r23, 0x0C	; 12
    d49a:	8a e3       	ldi	r24, 0x3A	; 58
    d49c:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    d4a0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    d4a2:	62 ed       	ldi	r22, 0xD2	; 210
    d4a4:	75 e0       	ldi	r23, 0x05	; 5
    d4a6:	c7 01       	movw	r24, r14
    d4a8:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d4ac:	89 2b       	or	r24, r25
    d4ae:	41 f4       	brne	.+16     	; 0xd4c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x198a>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    d4b0:	44 e0       	ldi	r20, 0x04	; 4
    d4b2:	50 e0       	ldi	r21, 0x00	; 0
    d4b4:	61 e4       	ldi	r22, 0x41	; 65
    d4b6:	7c e0       	ldi	r23, 0x0C	; 12
    d4b8:	8e e2       	ldi	r24, 0x2E	; 46
    d4ba:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    d4be:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    d4c0:	65 ed       	ldi	r22, 0xD5	; 213
    d4c2:	75 e0       	ldi	r23, 0x05	; 5
    d4c4:	c7 01       	movw	r24, r14
    d4c6:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d4ca:	89 2b       	or	r24, r25
    d4cc:	41 f4       	brne	.+16     	; 0xd4de <mqtt_callback(char*, unsigned char*, unsigned int)+0x19a8>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    d4ce:	44 e0       	ldi	r20, 0x04	; 4
    d4d0:	50 e0       	ldi	r21, 0x00	; 0
    d4d2:	65 e4       	ldi	r22, 0x45	; 69
    d4d4:	7c e0       	ldi	r23, 0x0C	; 12
    d4d6:	8e e2       	ldi	r24, 0x2E	; 46
    d4d8:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    d4dc:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    d4de:	6d ed       	ldi	r22, 0xDD	; 221
    d4e0:	75 e0       	ldi	r23, 0x05	; 5
    d4e2:	c7 01       	movw	r24, r14
    d4e4:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d4e8:	89 2b       	or	r24, r25
    d4ea:	41 f4       	brne	.+16     	; 0xd4fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x19c6>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    d4ec:	44 e0       	ldi	r20, 0x04	; 4
    d4ee:	50 e0       	ldi	r21, 0x00	; 0
    d4f0:	6d e4       	ldi	r22, 0x4D	; 77
    d4f2:	7c e0       	ldi	r23, 0x0C	; 12
    d4f4:	8e e2       	ldi	r24, 0x2E	; 46
    d4f6:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    d4fa:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    d4fc:	60 ee       	ldi	r22, 0xE0	; 224
    d4fe:	75 e0       	ldi	r23, 0x05	; 5
    d500:	c7 01       	movw	r24, r14
    d502:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d506:	89 2b       	or	r24, r25
    d508:	41 f4       	brne	.+16     	; 0xd51a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    d50a:	44 e0       	ldi	r20, 0x04	; 4
    d50c:	50 e0       	ldi	r21, 0x00	; 0
    d50e:	69 e4       	ldi	r22, 0x49	; 73
    d510:	7c e0       	ldi	r23, 0x0C	; 12
    d512:	8e e2       	ldi	r24, 0x2E	; 46
    d514:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    d518:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    d51a:	64 ee       	ldi	r22, 0xE4	; 228
    d51c:	75 e0       	ldi	r23, 0x05	; 5
    d51e:	c7 01       	movw	r24, r14
    d520:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d524:	89 2b       	or	r24, r25
    d526:	41 f4       	brne	.+16     	; 0xd538 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a02>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    d528:	44 e0       	ldi	r20, 0x04	; 4
    d52a:	50 e0       	ldi	r21, 0x00	; 0
    d52c:	69 e8       	ldi	r22, 0x89	; 137
    d52e:	7c e0       	ldi	r23, 0x0C	; 12
    d530:	8e e2       	ldi	r24, 0x2E	; 46
    d532:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    d536:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    d538:	68 ee       	ldi	r22, 0xE8	; 232
    d53a:	75 e0       	ldi	r23, 0x05	; 5
    d53c:	c7 01       	movw	r24, r14
    d53e:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d542:	89 2b       	or	r24, r25
    d544:	41 f4       	brne	.+16     	; 0xd556 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a20>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    d546:	44 e0       	ldi	r20, 0x04	; 4
    d548:	50 e0       	ldi	r21, 0x00	; 0
    d54a:	6b e5       	ldi	r22, 0x5B	; 91
    d54c:	7c e0       	ldi	r23, 0x0C	; 12
    d54e:	8e e2       	ldi	r24, 0x2E	; 46
    d550:	0e 94 6a 86 	call	0x10cd4	; 0x10cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    d554:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    d556:	62 ef       	ldi	r22, 0xF2	; 242
    d558:	75 e0       	ldi	r23, 0x05	; 5
    d55a:	c7 01       	movw	r24, r14
    d55c:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d560:	89 2b       	or	r24, r25
    d562:	49 f4       	brne	.+18     	; 0xd576 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a40>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    d564:	87 ef       	ldi	r24, 0xF7	; 247
    d566:	9a e0       	ldi	r25, 0x0A	; 10
    d568:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    d56c:	90 93 60 0c 	sts	0x0C60, r25	; 0x800c60 <device+0x25>
    d570:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    d574:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    d576:	6c ef       	ldi	r22, 0xFC	; 252
    d578:	75 e0       	ldi	r23, 0x05	; 5
    d57a:	c7 01       	movw	r24, r14
    d57c:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d580:	89 2b       	or	r24, r25
    d582:	39 f4       	brne	.+14     	; 0xd592 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    d584:	67 ef       	ldi	r22, 0xF7	; 247
    d586:	7a e0       	ldi	r23, 0x0A	; 10
    d588:	81 e6       	ldi	r24, 0x61	; 97
    d58a:	9c e0       	ldi	r25, 0x0C	; 12
    d58c:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    d590:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    d592:	66 e0       	ldi	r22, 0x06	; 6
    d594:	76 e0       	ldi	r23, 0x06	; 6
    d596:	c7 01       	movw	r24, r14
    d598:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d59c:	89 2b       	or	r24, r25
    d59e:	39 f4       	brne	.+14     	; 0xd5ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a78>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    d5a0:	67 ef       	ldi	r22, 0xF7	; 247
    d5a2:	7a e0       	ldi	r23, 0x0A	; 10
    d5a4:	85 e7       	ldi	r24, 0x75	; 117
    d5a6:	9c e0       	ldi	r25, 0x0C	; 12
    d5a8:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    d5ac:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    d5ae:	60 ed       	ldi	r22, 0xD0	; 208
    d5b0:	73 e0       	ldi	r23, 0x03	; 3
    d5b2:	c7 01       	movw	r24, r14
    d5b4:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d5b8:	89 2b       	or	r24, r25
    d5ba:	29 f4       	brne	.+10     	; 0xd5c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a90>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    d5bc:	87 ef       	ldi	r24, 0xF7	; 247
    d5be:	9a e0       	ldi	r25, 0x0A	; 10
    d5c0:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    d5c4:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    d5c6:	67 ef       	ldi	r22, 0xF7	; 247
    d5c8:	73 e0       	ldi	r23, 0x03	; 3
    d5ca:	90 e0       	ldi	r25, 0x00	; 0
    d5cc:	80 e0       	ldi	r24, 0x00	; 0
    d5ce:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    d5d2:	7c 01       	movw	r14, r24
    d5d4:	53 cf       	rjmp	.-346    	; 0xd47c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1946>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    d5d6:	11 30       	cpi	r17, 0x01	; 1
    d5d8:	41 f4       	brne	.+16     	; 0xd5ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
    {
      save_setup_network();
    d5da:	0e 94 9c 50 	call	0xa138	; 0xa138 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2785
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    d5de:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    d5e2:	80 68       	ori	r24, 0x80	; 128
    d5e4:	80 93 e9 0a 	sts	0x0AE9, r24	; 0x800ae9 <selftest_data>
    d5e8:	02 c0       	rjmp	.+4      	; 0xd5ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ab8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    d5ea:	12 30       	cpi	r17, 0x02	; 2
    d5ec:	c1 f3       	breq	.-16     	; 0xd5de <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    d5ee:	63 e1       	ldi	r22, 0x13	; 19
    d5f0:	72 e3       	ldi	r23, 0x32	; 50
    d5f2:	c5 01       	movw	r24, r10
    d5f4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
  strcat(str1, device.nazev);
    d5f8:	61 e5       	ldi	r22, 0x51	; 81
    d5fa:	7c e0       	ldi	r23, 0x0C	; 12
    d5fc:	c5 01       	movw	r24, r10
    d5fe:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
  strcat(str1, "/light/set/");
    d602:	60 e1       	ldi	r22, 0x10	; 16
    d604:	76 e0       	ldi	r23, 0x06	; 6
    d606:	c5 01       	movw	r24, r10
    d608:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d60c:	f5 01       	movw	r30, r10
    d60e:	01 90       	ld	r0, Z+
    d610:	00 20       	and	r0, r0
    d612:	e9 f7       	brne	.-6      	; 0xd60e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ad8>
    d614:	31 97       	sbiw	r30, 0x01	; 1
    d616:	af 01       	movw	r20, r30
    d618:	4a 19       	sub	r20, r10
    d61a:	5b 09       	sbc	r21, r11
    d61c:	b4 01       	movw	r22, r8
    d61e:	c5 01       	movw	r24, r10
    d620:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    d624:	89 2b       	or	r24, r25
    d626:	09 f0       	breq	.+2      	; 0xd62a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af4>
    d628:	41 c0       	rjmp	.+130    	; 0xd6ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
  {
    mqtt_process_message++;
    d62a:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d62e:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d632:	01 96       	adiw	r24, 0x01	; 1
    d634:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d638:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d63c:	f5 01       	movw	r30, r10
    d63e:	01 90       	ld	r0, Z+
    d640:	00 20       	and	r0, r0
    d642:	e9 f7       	brne	.-6      	; 0xd63e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b08>
    d644:	31 97       	sbiw	r30, 0x01	; 1
    d646:	ea 19       	sub	r30, r10
    d648:	fb 09       	sbc	r31, r11
    d64a:	9e 2f       	mov	r25, r30
    d64c:	4e 2f       	mov	r20, r30
    d64e:	84 2f       	mov	r24, r20
    d650:	89 1b       	sub	r24, r25
    d652:	24 2f       	mov	r18, r20
    d654:	30 e0       	ldi	r19, 0x00	; 0
    d656:	d4 01       	movw	r26, r8
    d658:	0d 90       	ld	r0, X+
    d65a:	00 20       	and	r0, r0
    d65c:	e9 f7       	brne	.-6      	; 0xd658 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b22>
    d65e:	11 97       	sbiw	r26, 0x01	; 1
    d660:	a8 19       	sub	r26, r8
    d662:	b9 09       	sbc	r27, r9
    d664:	2a 17       	cp	r18, r26
    d666:	3b 07       	cpc	r19, r27
    d668:	60 f4       	brcc	.+24     	; 0xd682 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
    {
      str1[cnt] = topic[f];
    d66a:	d5 01       	movw	r26, r10
    d66c:	a8 0f       	add	r26, r24
    d66e:	b1 1d       	adc	r27, r1
    d670:	28 0d       	add	r18, r8
    d672:	39 1d       	adc	r19, r9
    d674:	f9 01       	movw	r30, r18
    d676:	80 81       	ld	r24, Z
    d678:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
      str1[cnt + 1] = 0;
    d67a:	11 96       	adiw	r26, 0x01	; 1
    d67c:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d67e:	4f 5f       	subi	r20, 0xFF	; 255
    d680:	e6 cf       	rjmp	.-52     	; 0xd64e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d682:	67 ef       	ldi	r22, 0xF7	; 247
    d684:	73 e0       	ldi	r23, 0x03	; 3
    d686:	c5 01       	movw	r24, r10
    d688:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2804
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d68c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
    pch = strtok (str1, "/");
    while (pch != NULL)
    d68e:	00 97       	sbiw	r24, 0x00	; 0
    d690:	69 f0       	breq	.+26     	; 0xd6ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
    {
      if (cnt == 0) id = atoi(pch);
    d692:	11 11       	cpse	r17, r1
    d694:	03 c0       	rjmp	.+6      	; 0xd69c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b66>
    d696:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    d69a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    d69c:	67 ef       	ldi	r22, 0xF7	; 247
    d69e:	73 e0       	ldi	r23, 0x03	; 3
    d6a0:	90 e0       	ldi	r25, 0x00	; 0
    d6a2:	80 e0       	ldi	r24, 0x00	; 0
    d6a4:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
      cnt++;
    d6a8:	1f 5f       	subi	r17, 0xFF	; 255
    d6aa:	f1 cf       	rjmp	.-30     	; 0xd68e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    d6ac:	67 ec       	ldi	r22, 0xC7	; 199
    d6ae:	71 e3       	ldi	r23, 0x31	; 49
    d6b0:	c5 01       	movw	r24, r10
    d6b2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
  strcat(str1, "output/");
    d6b6:	6c e1       	ldi	r22, 0x1C	; 28
    d6b8:	76 e0       	ldi	r23, 0x06	; 6
    d6ba:	c5 01       	movw	r24, r10
    d6bc:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d6c0:	f5 01       	movw	r30, r10
    d6c2:	01 90       	ld	r0, Z+
    d6c4:	00 20       	and	r0, r0
    d6c6:	e9 f7       	brne	.-6      	; 0xd6c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8c>
    d6c8:	31 97       	sbiw	r30, 0x01	; 1
    d6ca:	af 01       	movw	r20, r30
    d6cc:	4a 19       	sub	r20, r10
    d6ce:	5b 09       	sbc	r21, r11
    d6d0:	b4 01       	movw	r22, r8
    d6d2:	c5 01       	movw	r24, r10
    d6d4:	0e 94 94 b4 	call	0x16928	; 0x16928 <strncmp>
    d6d8:	89 2b       	or	r24, r25
    d6da:	09 f0       	breq	.+2      	; 0xd6de <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ba8>
    d6dc:	73 c0       	rjmp	.+230    	; 0xd7c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
  {
    mqtt_process_message++;
    d6de:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d6e2:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d6e6:	01 96       	adiw	r24, 0x01	; 1
    d6e8:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d6ec:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d6f0:	f5 01       	movw	r30, r10
    d6f2:	01 90       	ld	r0, Z+
    d6f4:	00 20       	and	r0, r0
    d6f6:	e9 f7       	brne	.-6      	; 0xd6f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bbc>
    d6f8:	31 97       	sbiw	r30, 0x01	; 1
    d6fa:	ea 19       	sub	r30, r10
    d6fc:	fb 09       	sbc	r31, r11
    d6fe:	9e 2f       	mov	r25, r30
    d700:	4e 2f       	mov	r20, r30
    d702:	84 2f       	mov	r24, r20
    d704:	89 1b       	sub	r24, r25
    d706:	24 2f       	mov	r18, r20
    d708:	30 e0       	ldi	r19, 0x00	; 0
    d70a:	d4 01       	movw	r26, r8
    d70c:	0d 90       	ld	r0, X+
    d70e:	00 20       	and	r0, r0
    d710:	e9 f7       	brne	.-6      	; 0xd70c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bd6>
    d712:	11 97       	sbiw	r26, 0x01	; 1
    d714:	a8 19       	sub	r26, r8
    d716:	b9 09       	sbc	r27, r9
    d718:	2a 17       	cp	r18, r26
    d71a:	3b 07       	cpc	r19, r27
    d71c:	60 f4       	brcc	.+24     	; 0xd736 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
    {
      str1[cnt] = topic[f];
    d71e:	d5 01       	movw	r26, r10
    d720:	a8 0f       	add	r26, r24
    d722:	b1 1d       	adc	r27, r1
    d724:	28 0d       	add	r18, r8
    d726:	39 1d       	adc	r19, r9
    d728:	f9 01       	movw	r30, r18
    d72a:	80 81       	ld	r24, Z
    d72c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
      str1[cnt + 1] = 0;
    d72e:	11 96       	adiw	r26, 0x01	; 1
    d730:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d732:	4f 5f       	subi	r20, 0xFF	; 255
    d734:	e6 cf       	rjmp	.-52     	; 0xd702 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d736:	67 ef       	ldi	r22, 0xF7	; 247
    d738:	73 e0       	ldi	r23, 0x03	; 3
    d73a:	c5 01       	movw	r24, r10
    d73c:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    d740:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d742:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831
    pch = strtok (str1, "/");
    while (pch != NULL)
    d744:	01 15       	cp	r16, r1
    d746:	11 05       	cpc	r17, r1
    d748:	e9 f1       	breq	.+122    	; 0xd7c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
    {
      if (cnt == 0) id = atoi(pch);
    d74a:	f1 10       	cpse	r15, r1
    d74c:	0d c0       	rjmp	.+26     	; 0xd768 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c32>
    d74e:	c8 01       	movw	r24, r16
    d750:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    d754:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    d756:	67 ef       	ldi	r22, 0xF7	; 247
    d758:	73 e0       	ldi	r23, 0x03	; 3
    d75a:	90 e0       	ldi	r25, 0x00	; 0
    d75c:	80 e0       	ldi	r24, 0x00	; 0
    d75e:	0e 94 0e a8 	call	0x1501c	; 0x1501c <strtok>
    d762:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
      cnt++;
    d764:	f3 94       	inc	r15
    d766:	ee cf       	rjmp	.-36     	; 0xd744 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    d768:	f1 e0       	ldi	r31, 0x01	; 1
    d76a:	ff 12       	cpse	r15, r31
    d76c:	f4 cf       	rjmp	.-24     	; 0xd756 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    d76e:	8f e5       	ldi	r24, 0x5F	; 95
    d770:	c8 2e       	mov	r12, r24
    d772:	dd 24       	eor	r13, r13
    d774:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    d776:	c6 01       	movw	r24, r12
    d778:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    d77c:	78 12       	cpse	r7, r24
    d77e:	19 c0       	rjmp	.+50     	; 0xd7b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    d780:	64 e2       	ldi	r22, 0x24	; 36
    d782:	76 e0       	ldi	r23, 0x06	; 6
    d784:	c8 01       	movw	r24, r16
    d786:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d78a:	89 2b       	or	r24, r25
    d78c:	29 f0       	breq	.+10     	; 0xd798 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c62>
    d78e:	e7 2d       	mov	r30, r7
    d790:	f0 e0       	ldi	r31, 0x00	; 0
    d792:	e0 5d       	subi	r30, 0xD0	; 208
    d794:	f5 4f       	sbci	r31, 0xF5	; 245
    d796:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    d798:	68 e2       	ldi	r22, 0x28	; 40
    d79a:	76 e0       	ldi	r23, 0x06	; 6
    d79c:	c8 01       	movw	r24, r16
    d79e:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d7a2:	89 2b       	or	r24, r25
    d7a4:	c1 f2       	breq	.-80     	; 0xd756 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    d7a6:	e7 2d       	mov	r30, r7
    d7a8:	f0 e0       	ldi	r31, 0x00	; 0
    d7aa:	e0 5d       	subi	r30, 0xD0	; 208
    d7ac:	f5 4f       	sbci	r31, 0xF5	; 245
    d7ae:	10 82       	st	Z, r1
    d7b0:	d2 cf       	rjmp	.-92     	; 0xd756 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    d7b2:	21 e2       	ldi	r18, 0x21	; 33
    d7b4:	c2 0e       	add	r12, r18
    d7b6:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    d7b8:	84 e0       	ldi	r24, 0x04	; 4
    d7ba:	c8 16       	cp	r12, r24
    d7bc:	82 e0       	ldi	r24, 0x02	; 2
    d7be:	d8 06       	cpc	r13, r24
    d7c0:	d1 f6       	brne	.-76     	; 0xd776 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c40>
    d7c2:	c9 cf       	rjmp	.-110    	; 0xd756 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    d7c4:	63 e1       	ldi	r22, 0x13	; 19
    d7c6:	72 e3       	ldi	r23, 0x32	; 50
    d7c8:	c5 01       	movw	r24, r10
    d7ca:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
  strcat(str1, device.nazev);
    d7ce:	61 e5       	ldi	r22, 0x51	; 81
    d7d0:	7c e0       	ldi	r23, 0x0C	; 12
    d7d2:	c5 01       	movw	r24, r10
    d7d4:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2852
  strcat(str1, "/reload");
    d7d8:	6e e2       	ldi	r22, 0x2E	; 46
    d7da:	76 e0       	ldi	r23, 0x06	; 6
    d7dc:	c5 01       	movw	r24, r10
    d7de:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2853
  if (strcmp(str1, topic) == 0)
    d7e2:	b4 01       	movw	r22, r8
    d7e4:	c5 01       	movw	r24, r10
    d7e6:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d7ea:	8c 01       	movw	r16, r24
    d7ec:	89 2b       	or	r24, r25
    d7ee:	79 f4       	brne	.+30     	; 0xd80e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2855
  {
    mqtt_process_message++;
    d7f0:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d7f4:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d7f8:	01 96       	adiw	r24, 0x01	; 1
    d7fa:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d7fe:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
    log_error(&mqtt_client, "reload ..... ");
    d802:	86 e3       	ldi	r24, 0x36	; 54
    d804:	96 e0       	ldi	r25, 0x06	; 6
    d806:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
    resetFunc();
    d80a:	f8 01       	movw	r30, r16
    d80c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2861
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    d80e:	63 e1       	ldi	r22, 0x13	; 19
    d810:	72 e3       	ldi	r23, 0x32	; 50
    d812:	c5 01       	movw	r24, r10
    d814:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2862
  strcat(str1, device.nazev);
    d818:	61 e5       	ldi	r22, 0x51	; 81
    d81a:	7c e0       	ldi	r23, 0x0C	; 12
    d81c:	c5 01       	movw	r24, r10
    d81e:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2863
  strcat(str1, "/bootloader");
    d822:	64 e4       	ldi	r22, 0x44	; 68
    d824:	76 e0       	ldi	r23, 0x06	; 6
    d826:	c5 01       	movw	r24, r10
    d828:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2864
  if (strcmp(str1, topic) == 0)
    d82c:	b4 01       	movw	r22, r8
    d82e:	c5 01       	movw	r24, r10
    d830:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d834:	89 2b       	or	r24, r25
    d836:	e9 f4       	brne	.+58     	; 0xd872 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2866
  {
    mqtt_process_message++;
    d838:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d83c:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d840:	01 96       	adiw	r24, 0x01	; 1
    d842:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d846:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
    log_error(&mqtt_client, "bootloader ..... ");
    d84a:	80 e5       	ldi	r24, 0x50	; 80
    d84c:	96 e0       	ldi	r25, 0x06	; 6
    d84e:	0e 94 44 86 	call	0x10c88	; 0x10c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
    EEPROM.write(bootloader_tag, 255);
    d852:	6f ef       	ldi	r22, 0xFF	; 255
    d854:	90 e0       	ldi	r25, 0x00	; 0
    d856:	80 e0       	ldi	r24, 0x00	; 0
    d858:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    d85c:	88 e1       	ldi	r24, 0x18	; 24
    d85e:	9e e0       	ldi	r25, 0x0E	; 14
    d860:	0f b6       	in	r0, 0x3f	; 63
    d862:	f8 94       	cli
    d864:	a8 95       	wdr
    d866:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    d86a:	0f be       	out	0x3f, r0	; 63
    d86c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    d870:	ff cf       	rjmp	.-2      	; 0xd870 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d3a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    d872:	63 e1       	ldi	r22, 0x13	; 19
    d874:	72 e3       	ldi	r23, 0x32	; 50
    d876:	c5 01       	movw	r24, r10
    d878:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
  strcat(str1, device.nazev);
    d87c:	61 e5       	ldi	r22, 0x51	; 81
    d87e:	7c e0       	ldi	r23, 0x0C	; 12
    d880:	c5 01       	movw	r24, r10
    d882:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876
  strcat(str1, "/default");
    d886:	6c e3       	ldi	r22, 0x3C	; 60
    d888:	75 e0       	ldi	r23, 0x05	; 5
    d88a:	c5 01       	movw	r24, r10
    d88c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
  if (strcmp(str1, topic) == 0)
    d890:	b4 01       	movw	r22, r8
    d892:	c5 01       	movw	r24, r10
    d894:	0e 94 84 b4 	call	0x16908	; 0x16908 <strcmp>
    d898:	89 2b       	or	r24, r25
    d89a:	91 f4       	brne	.+36     	; 0xd8c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d8a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
  {
    mqtt_process_message++;
    d89c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
    d8a0:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
    d8a4:	01 96       	adiw	r24, 0x01	; 1
    d8a6:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <mqtt_process_message+0x1>
    d8aa:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    d8ae:	87 ef       	ldi	r24, 0xF7	; 247
    d8b0:	9a e0       	ldi	r25, 0x0A	; 10
    d8b2:	0e 94 d5 a7 	call	0x14faa	; 0x14faa <atoi>
    d8b6:	68 2f       	mov	r22, r24
    d8b8:	8a e5       	ldi	r24, 0x5A	; 90
    d8ba:	90 e0       	ldi	r25, 0x00	; 0
    d8bc:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
  }

}
    d8c0:	c4 5d       	subi	r28, 0xD4	; 212
    d8c2:	de 4f       	sbci	r29, 0xFE	; 254
    d8c4:	0f b6       	in	r0, 0x3f	; 63
    d8c6:	f8 94       	cli
    d8c8:	de bf       	out	0x3e, r29	; 62
    d8ca:	0f be       	out	0x3f, r0	; 63
    d8cc:	cd bf       	out	0x3d, r28	; 61
    d8ce:	df 91       	pop	r29
    d8d0:	cf 91       	pop	r28
    d8d2:	1f 91       	pop	r17
    d8d4:	0f 91       	pop	r16
    d8d6:	ff 90       	pop	r15
    d8d8:	ef 90       	pop	r14
    d8da:	df 90       	pop	r13
    d8dc:	cf 90       	pop	r12
    d8de:	bf 90       	pop	r11
    d8e0:	af 90       	pop	r10
    d8e2:	9f 90       	pop	r9
    d8e4:	8f 90       	pop	r8
    d8e6:	7f 90       	pop	r7
    d8e8:	6f 90       	pop	r6
    d8ea:	5f 90       	pop	r5
    d8ec:	4f 90       	pop	r4
    d8ee:	3f 90       	pop	r3
    d8f0:	2f 90       	pop	r2
    d8f2:	08 95       	ret

0000d8f4 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    d8f4:	0f 93       	push	r16
    d8f6:	1f 93       	push	r17
    d8f8:	cf 93       	push	r28
    d8fa:	df 93       	push	r29
    d8fc:	cd b7       	in	r28, 0x3d	; 61
    d8fe:	de b7       	in	r29, 0x3e	; 62
    d900:	a5 97       	sbiw	r28, 0x25	; 37
    d902:	0f b6       	in	r0, 0x3f	; 63
    d904:	f8 94       	cli
    d906:	de bf       	out	0x3e, r29	; 62
    d908:	0f be       	out	0x3f, r0	; 63
    d90a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    d90c:	ce 01       	movw	r24, r28
    d90e:	4b 96       	adiw	r24, 0x1b	; 27
    d910:	0e 94 ef 57 	call	0xafde	; 0xafde <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895
  if (!mqtt_client.connected())
    d914:	8e e2       	ldi	r24, 0x2E	; 46
    d916:	9e e0       	ldi	r25, 0x0E	; 14
    d918:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
    d91c:	81 11       	cpse	r24, r1
    d91e:	97 c0       	rjmp	.+302    	; 0xda4e <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    d920:	8e e2       	ldi	r24, 0x2E	; 46
    d922:	9e e0       	ldi	r25, 0x0E	; 14
    d924:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
    d928:	81 11       	cpse	r24, r1
    d92a:	d0 c0       	rjmp	.+416    	; 0xdacc <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    d92c:	60 91 43 10 	lds	r22, 0x1043	; 0x801043 <mqtt_client+0x215>
    d930:	70 91 44 10 	lds	r23, 0x1044	; 0x801044 <mqtt_client+0x216>
    d934:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
    d938:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
    d93c:	dc 01       	movw	r26, r24
    d93e:	ed 91       	ld	r30, X+
    d940:	fc 91       	ld	r31, X
    d942:	40 91 45 10 	lds	r20, 0x1045	; 0x801045 <mqtt_client+0x217>
    d946:	50 91 46 10 	lds	r21, 0x1046	; 0x801046 <mqtt_client+0x218>
    d94a:	61 15       	cp	r22, r1
    d94c:	71 05       	cpc	r23, r1
    d94e:	09 f4       	brne	.+2      	; 0xd952 <mqtt_reconnect()+0x5e>
    d950:	8b c0       	rjmp	.+278    	; 0xda68 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    d952:	00 88       	ldd	r0, Z+16	; 0x10
    d954:	f1 89       	ldd	r31, Z+17	; 0x11
    d956:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    d958:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    d95a:	81 30       	cpi	r24, 0x01	; 1
    d95c:	91 05       	cpc	r25, r1
    d95e:	09 f0       	breq	.+2      	; 0xd962 <mqtt_reconnect()+0x6e>
    d960:	12 c1       	rjmp	.+548    	; 0xdb86 <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    d962:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <mqtt_client+0x203>
    d966:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    d96a:	87 e0       	ldi	r24, 0x07	; 7
    d96c:	e6 e1       	ldi	r30, 0x16	; 22
    d96e:	f2 e0       	ldi	r31, 0x02	; 2
    d970:	de 01       	movw	r26, r28
    d972:	11 96       	adiw	r26, 0x01	; 1
    d974:	01 90       	ld	r0, Z+
    d976:	0d 92       	st	X+, r0
    d978:	8a 95       	dec	r24
    d97a:	e1 f7       	brne	.-8      	; 0xd974 <mqtt_reconnect()+0x80>
    d97c:	fe 01       	movw	r30, r28
    d97e:	31 96       	adiw	r30, 0x01	; 1
    d980:	a5 e3       	ldi	r26, 0x35	; 53
    d982:	be e0       	ldi	r27, 0x0E	; 14
    d984:	ce 01       	movw	r24, r28
    d986:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    d988:	21 91       	ld	r18, Z+
    d98a:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    d98c:	8e 17       	cp	r24, r30
    d98e:	9f 07       	cpc	r25, r31
    d990:	d9 f7       	brne	.-10     	; 0xd988 <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    d992:	82 e0       	ldi	r24, 0x02	; 2
    d994:	80 93 3c 0e 	sts	0x0E3C, r24	; 0x800e3c <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    d998:	10 92 3d 0e 	sts	0x0E3D, r1	; 0x800e3d <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    d99c:	8f e0       	ldi	r24, 0x0F	; 15
    d99e:	80 93 3e 0e 	sts	0x0E3E, r24	; 0x800e3e <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    d9a2:	4f e0       	ldi	r20, 0x0F	; 15
    d9a4:	50 e0       	ldi	r21, 0x00	; 0
    d9a6:	60 e3       	ldi	r22, 0x30	; 48
    d9a8:	7e e0       	ldi	r23, 0x0E	; 14
    d9aa:	ce 01       	movw	r24, r28
    d9ac:	4b 96       	adiw	r24, 0x1b	; 27
    d9ae:	0e 94 86 82 	call	0x1050c	; 0x1050c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    d9b2:	9c 01       	movw	r18, r24
    d9b4:	25 50       	subi	r18, 0x05	; 5
    d9b6:	31 09       	sbc	r19, r1
    d9b8:	40 e3       	ldi	r20, 0x30	; 48
    d9ba:	5e e0       	ldi	r21, 0x0E	; 14
    d9bc:	60 e1       	ldi	r22, 0x10	; 16
    d9be:	8e e2       	ldi	r24, 0x2E	; 46
    d9c0:	9e e0       	ldi	r25, 0x0E	; 14
    d9c2:	0e 94 8e 92 	call	0x1251c	; 0x1251c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    d9c6:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    d9ca:	60 93 32 10 	sts	0x1032, r22	; 0x801032 <mqtt_client+0x204>
    d9ce:	70 93 33 10 	sts	0x1033, r23	; 0x801033 <mqtt_client+0x205>
    d9d2:	80 93 34 10 	sts	0x1034, r24	; 0x801034 <mqtt_client+0x206>
    d9d6:	90 93 35 10 	sts	0x1035, r25	; 0x801035 <mqtt_client+0x207>
    d9da:	60 93 36 10 	sts	0x1036, r22	; 0x801036 <mqtt_client+0x208>
    d9de:	70 93 37 10 	sts	0x1037, r23	; 0x801037 <mqtt_client+0x209>
    d9e2:	80 93 38 10 	sts	0x1038, r24	; 0x801038 <mqtt_client+0x20a>
    d9e6:	90 93 39 10 	sts	0x1039, r25	; 0x801039 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    d9ea:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
    d9ee:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
    d9f2:	dc 01       	movw	r26, r24
    d9f4:	ed 91       	ld	r30, X+
    d9f6:	fc 91       	ld	r31, X
    d9f8:	00 84       	ldd	r0, Z+8	; 0x08
    d9fa:	f1 85       	ldd	r31, Z+9	; 0x09
    d9fc:	e0 2d       	mov	r30, r0
    d9fe:	19 95       	eicall
    da00:	89 2b       	or	r24, r25
    da02:	09 f0       	breq	.+2      	; 0xda06 <mqtt_reconnect()+0x112>
    da04:	48 c0       	rjmp	.+144    	; 0xda96 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    da06:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    da0a:	00 91 36 10 	lds	r16, 0x1036	; 0x801036 <mqtt_client+0x208>
    da0e:	10 91 37 10 	lds	r17, 0x1037	; 0x801037 <mqtt_client+0x209>
    da12:	20 91 38 10 	lds	r18, 0x1038	; 0x801038 <mqtt_client+0x20a>
    da16:	30 91 39 10 	lds	r19, 0x1039	; 0x801039 <mqtt_client+0x20b>
    da1a:	60 1b       	sub	r22, r16
    da1c:	71 0b       	sbc	r23, r17
    da1e:	82 0b       	sbc	r24, r18
    da20:	93 0b       	sbc	r25, r19
    da22:	64 36       	cpi	r22, 0x64	; 100
    da24:	71 05       	cpc	r23, r1
    da26:	81 05       	cpc	r24, r1
    da28:	91 05       	cpc	r25, r1
    da2a:	f8 f2       	brcs	.-66     	; 0xd9ea <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    da2c:	8c ef       	ldi	r24, 0xFC	; 252
    da2e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    da30:	90 93 4a 10 	sts	0x104A, r25	; 0x80104a <mqtt_client+0x21c>
    da34:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    da38:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
    da3c:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
    da40:	dc 01       	movw	r26, r24
    da42:	ed 91       	ld	r30, X+
    da44:	fc 91       	ld	r31, X
    da46:	04 88       	ldd	r0, Z+20	; 0x14
    da48:	f5 89       	ldd	r31, Z+21	; 0x15
    da4a:	e0 2d       	mov	r30, r0
    da4c:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    da4e:	80 91 49 10 	lds	r24, 0x1049	; 0x801049 <mqtt_client+0x21b>
    da52:	a5 96       	adiw	r28, 0x25	; 37
    da54:	0f b6       	in	r0, 0x3f	; 63
    da56:	f8 94       	cli
    da58:	de bf       	out	0x3e, r29	; 62
    da5a:	0f be       	out	0x3f, r0	; 63
    da5c:	cd bf       	out	0x3d, r28	; 61
    da5e:	df 91       	pop	r29
    da60:	cf 91       	pop	r28
    da62:	1f 91       	pop	r17
    da64:	0f 91       	pop	r16
    da66:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    da68:	06 84       	ldd	r0, Z+14	; 0x0e
    da6a:	f7 85       	ldd	r31, Z+15	; 0x0f
    da6c:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    da6e:	22 ee       	ldi	r18, 0xE2	; 226
    da70:	32 e0       	ldi	r19, 0x02	; 2
    da72:	3a 83       	std	Y+2, r19	; 0x02
    da74:	29 83       	std	Y+1, r18	; 0x01
    da76:	00 91 3f 10 	lds	r16, 0x103F	; 0x80103f <mqtt_client+0x211>
    da7a:	10 91 40 10 	lds	r17, 0x1040	; 0x801040 <mqtt_client+0x212>
    da7e:	20 91 41 10 	lds	r18, 0x1041	; 0x801041 <mqtt_client+0x213>
    da82:	30 91 42 10 	lds	r19, 0x1042	; 0x801042 <mqtt_client+0x214>
    da86:	0b 83       	std	Y+3, r16	; 0x03
    da88:	1c 83       	std	Y+4, r17	; 0x04
    da8a:	2d 83       	std	Y+5, r18	; 0x05
    da8c:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    da8e:	be 01       	movw	r22, r28
    da90:	6f 5f       	subi	r22, 0xFF	; 255
    da92:	7f 4f       	sbci	r23, 0xFF	; 255
    da94:	61 cf       	rjmp	.-318    	; 0xd958 <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    da96:	ce 01       	movw	r24, r28
    da98:	85 96       	adiw	r24, 0x25	; 37
    da9a:	0e 94 42 8a 	call	0x11484	; 0x11484 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    da9e:	04 97       	sbiw	r24, 0x04	; 4
    daa0:	59 f6       	brne	.-106    	; 0xda38 <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    daa2:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    daa6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    daa8:	81 11       	cpse	r24, r1
    daaa:	c2 cf       	rjmp	.-124    	; 0xda30 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    daac:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    dab0:	60 93 36 10 	sts	0x1036, r22	; 0x801036 <mqtt_client+0x208>
    dab4:	70 93 37 10 	sts	0x1037, r23	; 0x801037 <mqtt_client+0x209>
    dab8:	80 93 38 10 	sts	0x1038, r24	; 0x801038 <mqtt_client+0x20a>
    dabc:	90 93 39 10 	sts	0x1039, r25	; 0x801039 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    dac0:	10 92 3a 10 	sts	0x103A, r1	; 0x80103a <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    dac4:	10 92 4a 10 	sts	0x104A, r1	; 0x80104a <mqtt_client+0x21c>
    dac8:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2898
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    dacc:	63 e1       	ldi	r22, 0x13	; 19
    dace:	72 e3       	ldi	r23, 0x32	; 50
    dad0:	ce 01       	movw	r24, r28
    dad2:	01 96       	adiw	r24, 0x01	; 1
    dad4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
      strcat(topic, nazev);
    dad8:	be 01       	movw	r22, r28
    dada:	65 5e       	subi	r22, 0xE5	; 229
    dadc:	7f 4f       	sbci	r23, 0xFF	; 255
    dade:	ce 01       	movw	r24, r28
    dae0:	01 96       	adiw	r24, 0x01	; 1
    dae2:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2900
      strcat(topic, "/#");
    dae6:	6c eb       	ldi	r22, 0xBC	; 188
    dae8:	76 e0       	ldi	r23, 0x06	; 6
    daea:	ce 01       	movw	r24, r28
    daec:	01 96       	adiw	r24, 0x01	; 1
    daee:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
      mqtt_client.subscribe(topic);
    daf2:	ce 01       	movw	r24, r28
    daf4:	01 96       	adiw	r24, 0x01	; 1
    daf6:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2902
      strcpy_P(topic, thermctl_header_in);
    dafa:	63 e1       	ldi	r22, 0x13	; 19
    dafc:	72 e3       	ldi	r23, 0x32	; 50
    dafe:	ce 01       	movw	r24, r28
    db00:	01 96       	adiw	r24, 0x01	; 1
    db02:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
      strcat(topic, "global/#");
    db06:	66 eb       	ldi	r22, 0xB6	; 182
    db08:	76 e0       	ldi	r23, 0x06	; 6
    db0a:	ce 01       	movw	r24, r28
    db0c:	01 96       	adiw	r24, 0x01	; 1
    db0e:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2904
      mqtt_client.subscribe(topic);
    db12:	ce 01       	movw	r24, r28
    db14:	01 96       	adiw	r24, 0x01	; 1
    db16:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    db1a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2907
        remote_tds_subscibe_topic(idx);
    db1c:	81 2f       	mov	r24, r17
    db1e:	0e 94 2b 5d 	call	0xba56	; 0xba56 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    db22:	1f 5f       	subi	r17, 0xFF	; 255
    db24:	1a 30       	cpi	r17, 0x0A	; 10
    db26:	d1 f7       	brne	.-12     	; 0xdb1c <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2909
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    db28:	64 e0       	ldi	r22, 0x04	; 4
    db2a:	72 e3       	ldi	r23, 0x32	; 50
    db2c:	ce 01       	movw	r24, r28
    db2e:	01 96       	adiw	r24, 0x01	; 1
    db30:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910
      strcat(topic, "/#");
    db34:	6c eb       	ldi	r22, 0xBC	; 188
    db36:	76 e0       	ldi	r23, 0x06	; 6
    db38:	ce 01       	movw	r24, r28
    db3a:	01 96       	adiw	r24, 0x01	; 1
    db3c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
      mqtt_client.subscribe(topic);
    db40:	ce 01       	movw	r24, r28
    db42:	01 96       	adiw	r24, 0x01	; 1
    db44:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    db48:	6c ee       	ldi	r22, 0xEC	; 236
    db4a:	71 e3       	ldi	r23, 0x31	; 49
    db4c:	ce 01       	movw	r24, r28
    db4e:	01 96       	adiw	r24, 0x01	; 1
    db50:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
      mqtt_client.subscribe(topic);
    db54:	ce 01       	movw	r24, r28
    db56:	01 96       	adiw	r24, 0x01	; 1
    db58:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    db5c:	65 ed       	ldi	r22, 0xD5	; 213
    db5e:	71 e3       	ldi	r23, 0x31	; 49
    db60:	ce 01       	movw	r24, r28
    db62:	01 96       	adiw	r24, 0x01	; 1
    db64:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
      mqtt_client.subscribe(topic);
    db68:	ce 01       	movw	r24, r28
    db6a:	01 96       	adiw	r24, 0x01	; 1
    db6c:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2919
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    db70:	67 ec       	ldi	r22, 0xC7	; 199
    db72:	71 e3       	ldi	r23, 0x31	; 49
    db74:	ce 01       	movw	r24, r28
    db76:	01 96       	adiw	r24, 0x01	; 1
    db78:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
      mqtt_client.subscribe(topic);
    db7c:	ce 01       	movw	r24, r28
    db7e:	01 96       	adiw	r24, 0x01	; 1
    db80:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>
    db84:	64 cf       	rjmp	.-312    	; 0xda4e <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    db86:	8e ef       	ldi	r24, 0xFE	; 254
    db88:	9f ef       	ldi	r25, 0xFF	; 255
    db8a:	90 93 4a 10 	sts	0x104A, r25	; 0x80104a <mqtt_client+0x21c>
    db8e:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <mqtt_client+0x21b>
    db92:	5d cf       	rjmp	.-326    	; 0xda4e <mqtt_reconnect()+0x15a>

0000db94 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3598
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    db94:	2f 92       	push	r2
    db96:	3f 92       	push	r3
    db98:	4f 92       	push	r4
    db9a:	5f 92       	push	r5
    db9c:	6f 92       	push	r6
    db9e:	7f 92       	push	r7
    dba0:	8f 92       	push	r8
    dba2:	9f 92       	push	r9
    dba4:	af 92       	push	r10
    dba6:	bf 92       	push	r11
    dba8:	cf 92       	push	r12
    dbaa:	df 92       	push	r13
    dbac:	ef 92       	push	r14
    dbae:	ff 92       	push	r15
    dbb0:	0f 93       	push	r16
    dbb2:	1f 93       	push	r17
    dbb4:	cf 93       	push	r28
    dbb6:	df 93       	push	r29
    dbb8:	cd b7       	in	r28, 0x3d	; 61
    dbba:	de b7       	in	r29, 0x3e	; 62
    dbbc:	cd 54       	subi	r28, 0x4D	; 77
    dbbe:	d1 40       	sbci	r29, 0x01	; 1
    dbc0:	0f b6       	in	r0, 0x3f	; 63
    dbc2:	f8 94       	cli
    dbc4:	de bf       	out	0x3e, r29	; 62
    dbc6:	0f be       	out	0x3f, r0	; 63
    dbc8:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    dbca:	1b 82       	std	Y+3, r1	; 0x03
    dbcc:	89 ef       	ldi	r24, 0xF9	; 249
    dbce:	93 e0       	ldi	r25, 0x03	; 3
    dbd0:	9d 83       	std	Y+5, r25	; 0x05
    dbd2:	8c 83       	std	Y+4, r24	; 0x04
    dbd4:	89 e3       	ldi	r24, 0x39	; 57
    dbd6:	95 e0       	ldi	r25, 0x05	; 5
    dbd8:	9f 83       	std	Y+7, r25	; 0x07
    dbda:	8e 83       	std	Y+6, r24	; 0x06
    dbdc:	18 86       	std	Y+8, r1	; 0x08
    dbde:	19 86       	std	Y+9, r1	; 0x09
    dbe0:	1a 86       	std	Y+10, r1	; 0x0a
    dbe2:	1b 86       	std	Y+11, r1	; 0x0b
    dbe4:	80 e6       	ldi	r24, 0x60	; 96
    dbe6:	9a ee       	ldi	r25, 0xEA	; 234
    dbe8:	a0 e0       	ldi	r26, 0x00	; 0
    dbea:	b0 e0       	ldi	r27, 0x00	; 0
    dbec:	8c 87       	std	Y+12, r24	; 0x0c
    dbee:	9d 87       	std	Y+13, r25	; 0x0d
    dbf0:	ae 87       	std	Y+14, r26	; 0x0e
    dbf2:	bf 87       	std	Y+15, r27	; 0x0f
    dbf4:	18 8a       	std	Y+16, r1	; 0x10
    dbf6:	19 8a       	std	Y+17, r1	; 0x11
    dbf8:	1a 8a       	std	Y+18, r1	; 0x12
    dbfa:	1b 8a       	std	Y+19, r1	; 0x13
    dbfc:	1c 8a       	std	Y+20, r1	; 0x14
    dbfe:	1d 8a       	std	Y+21, r1	; 0x15
    dc00:	1e 8a       	std	Y+22, r1	; 0x16
    dc02:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    dc04:	8b e4       	ldi	r24, 0x4B	; 75
    dc06:	90 e1       	ldi	r25, 0x10	; 16
    dc08:	9a 83       	std	Y+2, r25	; 0x02
    dc0a:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3387
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    dc0c:	61 e0       	ldi	r22, 0x01	; 1
    dc0e:	86 e0       	ldi	r24, 0x06	; 6
    dc10:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3388
  pinMode(ETH_CS, OUTPUT);
    dc14:	61 e0       	ldi	r22, 0x01	; 1
    dc16:	8f e0       	ldi	r24, 0x0F	; 15
    dc18:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3389
  pinMode(LED, OUTPUT);
    dc1c:	61 e0       	ldi	r22, 0x01	; 1
    dc1e:	88 e0       	ldi	r24, 0x08	; 8
    dc20:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3390
  pinMode(PIEZO, OUTPUT);
    dc24:	61 e0       	ldi	r22, 0x01	; 1
    dc26:	8c e0       	ldi	r24, 0x0C	; 12
    dc28:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
  pinMode(STORAGE_RAM_CS, OUTPUT);
    dc2c:	61 e0       	ldi	r22, 0x01	; 1
    dc2e:	86 e1       	ldi	r24, 0x16	; 22
    dc30:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    dc34:	61 e0       	ldi	r22, 0x01	; 1
    dc36:	87 e1       	ldi	r24, 0x17	; 23
    dc38:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
  pinMode(JUMPER, INPUT_PULLUP);
    dc3c:	62 e0       	ldi	r22, 0x02	; 2
    dc3e:	8e e0       	ldi	r24, 0x0E	; 14
    dc40:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3395

  digitalWrite(PIEZO, LOW);
    dc44:	60 e0       	ldi	r22, 0x00	; 0
    dc46:	8c e0       	ldi	r24, 0x0C	; 12
    dc48:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3396
  delay(1000);
    dc4c:	68 ee       	ldi	r22, 0xE8	; 232
    dc4e:	73 e0       	ldi	r23, 0x03	; 3
    dc50:	80 e0       	ldi	r24, 0x00	; 0
    dc52:	90 e0       	ldi	r25, 0x00	; 0
    dc54:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3397
  digitalWrite(PIEZO, HIGH);
    dc58:	61 e0       	ldi	r22, 0x01	; 1
    dc5a:	8c e0       	ldi	r24, 0x0C	; 12
    dc5c:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    dc60:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
  SPI.begin();
    dc62:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
  Wire.begin();
    dc66:	0e 94 3c 88 	call	0x11078	; 0x11078 <TwoWire::begin() [clone .constprop.63]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    dc6a:	0e 94 3c 88 	call	0x11078	; 0x11078 <TwoWire::begin() [clone .constprop.63]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    dc6e:	8e e2       	ldi	r24, 0x2E	; 46
    dc70:	9e e0       	ldi	r25, 0x0E	; 14
    dc72:	90 93 0f 09 	sts	0x090F, r25	; 0x80090f <pub_mqtt_client+0x1>
    dc76:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    dc7a:	70 e0       	ldi	r23, 0x00	; 0
    dc7c:	60 e0       	ldi	r22, 0x00	; 0
    dc7e:	8a e6       	ldi	r24, 0x6A	; 106
    dc80:	98 e5       	ldi	r25, 0x58	; 88
    dc82:	0e 94 71 a8 	call	0x150e2	; 0x150e2 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    dc86:	70 e0       	ldi	r23, 0x00	; 0
    dc88:	60 e0       	ldi	r22, 0x00	; 0
    dc8a:	85 e6       	ldi	r24, 0x65	; 101
    dc8c:	91 e3       	ldi	r25, 0x31	; 49
    dc8e:	0e 94 71 a8 	call	0x150e2	; 0x150e2 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
  printf_begin();

  swSPI.begin();
    dc92:	8d e6       	ldi	r24, 0x6D	; 109
    dc94:	90 e1       	ldi	r25, 0x10	; 16
    dc96:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1588
  }
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    dc9a:	e0 91 8c 08 	lds	r30, 0x088C	; 0x80088c <MenuHistoryIndex>
    dc9e:	f0 e0       	ldi	r31, 0x00	; 0
    dca0:	ee 57       	subi	r30, 0x7E	; 126
    dca2:	f7 4f       	sbci	r31, 0xF7	; 247
    dca4:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    dca6:	0e 94 08 89 	call	0x11210	; 0x11210 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    dcaa:	80 91 f0 0d 	lds	r24, 0x0DF0	; 0x800df0 <my_lcd+0x1a>
    dcae:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x1b>
    dcb2:	01 96       	adiw	r24, 0x01	; 1
    dcb4:	09 f0       	breq	.+2      	; 0xdcb8 <setup+0x124>
    dcb6:	4c c0       	rjmp	.+152    	; 0xdd50 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    dcb8:	60 e0       	ldi	r22, 0x00	; 0
    dcba:	84 e0       	ldi	r24, 0x04	; 4
    dcbc:	90 e0       	ldi	r25, 0x00	; 0
    dcbe:	0e 94 79 89 	call	0x112f2	; 0x112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    dcc2:	89 2b       	or	r24, r25
    dcc4:	39 f5       	brne	.+78     	; 0xdd14 <setup+0x180>
    dcc6:	61 e0       	ldi	r22, 0x01	; 1
    dcc8:	84 e0       	ldi	r24, 0x04	; 4
    dcca:	90 e0       	ldi	r25, 0x00	; 0
    dccc:	0e 94 79 89 	call	0x112f2	; 0x112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    dcd0:	81 15       	cp	r24, r1
    dcd2:	90 48       	sbci	r25, 0x80	; 128
    dcd4:	f9 f4       	brne	.+62     	; 0xdd14 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    dcd6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    dcda:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    dcde:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    dce2:	2b 96       	adiw	r28, 0x0b	; 11
    dce4:	8d af       	std	Y+61, r24	; 0x3d
    dce6:	9e af       	std	Y+62, r25	; 0x3e
    dce8:	af af       	std	Y+63, r26	; 0x3f
    dcea:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    dcec:	23 e0       	ldi	r18, 0x03	; 3
    dcee:	ae 01       	movw	r20, r28
    dcf0:	48 5b       	subi	r20, 0xB8	; 184
    dcf2:	5f 4f       	sbci	r21, 0xFF	; 255
    dcf4:	69 eb       	ldi	r22, 0xB9	; 185
    dcf6:	70 e0       	ldi	r23, 0x00	; 0
    dcf8:	86 ed       	ldi	r24, 0xD6	; 214
    dcfa:	9d e0       	ldi	r25, 0x0D	; 13
    dcfc:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    dd00:	60 e0       	ldi	r22, 0x00	; 0
    dd02:	80 ed       	ldi	r24, 0xD0	; 208
    dd04:	90 e0       	ldi	r25, 0x00	; 0
    dd06:	0e 94 79 89 	call	0x112f2	; 0x112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    dd0a:	61 e0       	ldi	r22, 0x01	; 1
    dd0c:	80 ed       	ldi	r24, 0xD0	; 208
    dd0e:	90 e0       	ldi	r25, 0x00	; 0
    dd10:	0e 94 79 89 	call	0x112f2	; 0x112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    dd14:	61 e0       	ldi	r22, 0x01	; 1
    dd16:	83 ed       	ldi	r24, 0xD3	; 211
    dd18:	90 e0       	ldi	r25, 0x00	; 0
    dd1a:	0e 94 79 89 	call	0x112f2	; 0x112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    dd1e:	81 34       	cpi	r24, 0x41	; 65
    dd20:	a3 e9       	ldi	r26, 0x93	; 147
    dd22:	9a 07       	cpc	r25, r26
    dd24:	89 f0       	breq	.+34     	; 0xdd48 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    dd26:	86 38       	cpi	r24, 0x86	; 134
    dd28:	b4 e9       	ldi	r27, 0x94	; 148
    dd2a:	9b 07       	cpc	r25, r27
    dd2c:	69 f0       	breq	.+26     	; 0xdd48 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    dd2e:	88 38       	cpi	r24, 0x88	; 136
    dd30:	e4 e9       	ldi	r30, 0x94	; 148
    dd32:	9e 07       	cpc	r25, r30
    dd34:	49 f0       	breq	.+18     	; 0xdd48 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    dd36:	86 39       	cpi	r24, 0x96	; 150
    dd38:	f7 e7       	ldi	r31, 0x77	; 119
    dd3a:	9f 07       	cpc	r25, r31
    dd3c:	29 f0       	breq	.+10     	; 0xdd48 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    dd3e:	60 e0       	ldi	r22, 0x00	; 0
    dd40:	90 e0       	ldi	r25, 0x00	; 0
    dd42:	80 e0       	ldi	r24, 0x00	; 0
    dd44:	0e 94 79 89 	call	0x112f2	; 0x112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    dd48:	90 93 f1 0d 	sts	0x0DF1, r25	; 0x800df1 <my_lcd+0x1b>
    dd4c:	80 93 f0 0d 	sts	0x0DF0, r24	; 0x800df0 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    dd50:	00 91 f0 0d 	lds	r16, 0x0DF0	; 0x800df0 <my_lcd+0x1a>
    dd54:	10 91 f1 0d 	lds	r17, 0x0DF1	; 0x800df1 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    dd58:	0e 94 08 89 	call	0x11210	; 0x11210 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    dd5c:	68 ec       	ldi	r22, 0xC8	; 200
    dd5e:	70 e0       	ldi	r23, 0x00	; 0
    dd60:	80 e0       	ldi	r24, 0x00	; 0
    dd62:	90 e0       	ldi	r25, 0x00	; 0
    dd64:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    dd68:	06 39       	cpi	r16, 0x96	; 150
    dd6a:	17 47       	sbci	r17, 0x77	; 119
    dd6c:	09 f0       	breq	.+2      	; 0xdd70 <setup+0x1dc>
    dd6e:	34 c3       	rjmp	.+1640   	; 0xe3d8 <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    dd70:	89 e0       	ldi	r24, 0x09	; 9
    dd72:	90 e0       	ldi	r25, 0x00	; 0
    dd74:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <my_lcd+0x19>
    dd78:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    dd7c:	8a e2       	ldi	r24, 0x2A	; 42
    dd7e:	90 e0       	ldi	r25, 0x00	; 0
    dd80:	90 93 f3 0d 	sts	0x0DF3, r25	; 0x800df3 <my_lcd+0x1d>
    dd84:	80 93 f2 0d 	sts	0x0DF2, r24	; 0x800df2 <my_lcd+0x1c>
    dd88:	8b e2       	ldi	r24, 0x2B	; 43
    dd8a:	90 e0       	ldi	r25, 0x00	; 0
    dd8c:	90 93 f5 0d 	sts	0x0DF5, r25	; 0x800df5 <my_lcd+0x1f>
    dd90:	80 93 f4 0d 	sts	0x0DF4, r24	; 0x800df4 <my_lcd+0x1e>
    dd94:	8c e2       	ldi	r24, 0x2C	; 44
    dd96:	90 e0       	ldi	r25, 0x00	; 0
    dd98:	90 93 f7 0d 	sts	0x0DF7, r25	; 0x800df7 <my_lcd+0x21>
    dd9c:	80 93 f6 0d 	sts	0x0DF6, r24	; 0x800df6 <my_lcd+0x20>
    dda0:	8e e2       	ldi	r24, 0x2E	; 46
    dda2:	90 e0       	ldi	r25, 0x00	; 0
    dda4:	90 93 f9 0d 	sts	0x0DF9, r25	; 0x800df9 <my_lcd+0x23>
    dda8:	80 93 f8 0d 	sts	0x0DF8, r24	; 0x800df8 <my_lcd+0x22>
    ddac:	83 e3       	ldi	r24, 0x33	; 51
    ddae:	90 e0       	ldi	r25, 0x00	; 0
    ddb0:	90 93 fb 0d 	sts	0x0DFB, r25	; 0x800dfb <my_lcd+0x25>
    ddb4:	80 93 fa 0d 	sts	0x0DFA, r24	; 0x800dfa <my_lcd+0x24>
    ddb8:	87 e3       	ldi	r24, 0x37	; 55
    ddba:	90 e0       	ldi	r25, 0x00	; 0
    ddbc:	90 93 fd 0d 	sts	0x0DFD, r25	; 0x800dfd <my_lcd+0x27>
    ddc0:	80 93 fc 0d 	sts	0x0DFC, r24	; 0x800dfc <my_lcd+0x26>
    ddc4:	86 e3       	ldi	r24, 0x36	; 54
    ddc6:	90 e0       	ldi	r25, 0x00	; 0
    ddc8:	90 93 ff 0d 	sts	0x0DFF, r25	; 0x800dff <my_lcd+0x29>
    ddcc:	80 93 fe 0d 	sts	0x0DFE, r24	; 0x800dfe <my_lcd+0x28>
    ddd0:	10 92 01 0e 	sts	0x0E01, r1	; 0x800e01 <my_lcd+0x2b>
    ddd4:	10 92 00 0e 	sts	0x0E00, r1	; 0x800e00 <my_lcd+0x2a>
    ddd8:	10 92 03 0e 	sts	0x0E03, r1	; 0x800e03 <my_lcd+0x2d>
    dddc:	10 92 02 0e 	sts	0x0E02, r1	; 0x800e02 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    dde0:	21 e2       	ldi	r18, 0x21	; 33
    dde2:	e2 2e       	mov	r14, r18
    dde4:	22 e3       	ldi	r18, 0x32	; 50
    dde6:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    dde8:	3c e6       	ldi	r19, 0x6C	; 108
    ddea:	c3 2e       	mov	r12, r19
    ddec:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    ddee:	f7 01       	movw	r30, r14
    ddf0:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    ddf2:	31 96       	adiw	r30, 0x01	; 1
    ddf4:	14 91       	lpm	r17, Z
    ddf6:	f2 e0       	ldi	r31, 0x02	; 2
    ddf8:	ef 0e       	add	r14, r31
    ddfa:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    ddfc:	6f 37       	cpi	r22, 0x7F	; 127
    ddfe:	89 f0       	breq	.+34     	; 0xde22 <setup+0x28e>
    de00:	de 01       	movw	r26, r28
    de02:	a8 5b       	subi	r26, 0xB8	; 184
    de04:	bf 4f       	sbci	r27, 0xFF	; 255
    de06:	30 e0       	ldi	r19, 0x00	; 0
    de08:	20 e0       	ldi	r18, 0x00	; 0
    de0a:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    de0c:	21 17       	cp	r18, r17
    de0e:	08 f0       	brcs	.+2      	; 0xde12 <setup+0x27e>
    de10:	da c2       	rjmp	.+1460   	; 0xe3c6 <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    de12:	f7 01       	movw	r30, r14
    de14:	e2 0f       	add	r30, r18
    de16:	f3 1f       	adc	r31, r19
    de18:	e4 91       	lpm	r30, Z
    de1a:	ed 93       	st	X+, r30
    de1c:	2f 5f       	subi	r18, 0xFF	; 255
    de1e:	3f 4f       	sbci	r19, 0xFF	; 255
    de20:	f5 cf       	rjmp	.-22     	; 0xde0c <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    de22:	61 2f       	mov	r22, r17
    de24:	70 e0       	ldi	r23, 0x00	; 0
    de26:	90 e0       	ldi	r25, 0x00	; 0
    de28:	80 e0       	ldi	r24, 0x00	; 0
    de2a:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    de2e:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    de30:	61 2f       	mov	r22, r17
    de32:	70 e0       	ldi	r23, 0x00	; 0
    de34:	6e 5f       	subi	r22, 0xFE	; 254
    de36:	7f 4f       	sbci	r23, 0xFF	; 255
    de38:	c6 1a       	sub	r12, r22
    de3a:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    de3c:	1c 14       	cp	r1, r12
    de3e:	1d 04       	cpc	r1, r13
    de40:	b4 f2       	brlt	.-84     	; 0xddee <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    de42:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <my_lcd+0x16>
    de46:	0e 94 a3 83 	call	0x10746	; 0x10746 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    de4a:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
    de4e:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
    de52:	80 81       	ld	r24, Z
    de54:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <my_lcd+0x3a>
    de58:	89 23       	and	r24, r25
    de5a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    de5c:	90 91 00 0e 	lds	r25, 0x0E00	; 0x800e00 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    de60:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x18>
    de64:	30 91 ef 0d 	lds	r19, 0x0DEF	; 0x800def <my_lcd+0x19>
    de68:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
    de6c:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
    de70:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <my_lcd+0x3b>
    de74:	21 15       	cp	r18, r1
    de76:	31 05       	cpc	r19, r1
    de78:	09 f0       	breq	.+2      	; 0xde7c <setup+0x2e8>
    de7a:	b5 c2       	rjmp	.+1386   	; 0xe3e6 <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    de7c:	20 81       	ld	r18, Z
    de7e:	82 23       	and	r24, r18
    de80:	80 83       	st	Z, r24
    de82:	81 e6       	ldi	r24, 0x61	; 97
    de84:	82 b9       	out	0x02, r24	; 2
    de86:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    de8a:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    de8e:	80 81       	ld	r24, Z
    de90:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
    de94:	82 23       	and	r24, r18
    de96:	80 83       	st	Z, r24
    de98:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    de9c:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    dea0:	80 81       	ld	r24, Z
    dea2:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
    dea6:	82 2b       	or	r24, r18
    dea8:	80 83       	st	Z, r24
    deaa:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
    deae:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
    deb2:	80 81       	ld	r24, Z
    deb4:	20 91 0d 0e 	lds	r18, 0x0E0D	; 0x800e0d <my_lcd+0x37>
    deb8:	82 2b       	or	r24, r18
    deba:	80 83       	st	Z, r24
    debc:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    debe:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    dec2:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    dec6:	80 81       	ld	r24, Z
    dec8:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
    decc:	89 23       	and	r24, r25
    dece:	80 83       	st	Z, r24
    ded0:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    ded4:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    ded8:	80 81       	ld	r24, Z
    deda:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    dede:	89 2b       	or	r24, r25
    dee0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    dee2:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
    dee6:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
    deea:	80 81       	ld	r24, Z
    deec:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_lcd+0x36>
    def0:	89 2b       	or	r24, r25
    def2:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    def4:	83 e0       	ldi	r24, 0x03	; 3
    def6:	0e 94 a3 83 	call	0x10746	; 0x10746 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    defa:	83 e0       	ldi	r24, 0x03	; 3
    defc:	80 93 c5 0d 	sts	0x0DC5, r24	; 0x800dc5 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    df00:	20 91 ea 0d 	lds	r18, 0x0DEA	; 0x800dea <my_lcd+0x14>
    df04:	30 91 eb 0d 	lds	r19, 0x0DEB	; 0x800deb <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    df08:	40 91 e8 0d 	lds	r20, 0x0DE8	; 0x800de8 <my_lcd+0x12>
    df0c:	50 91 e9 0d 	lds	r21, 0x0DE9	; 0x800de9 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    df10:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    df14:	e0 91 cd 0d 	lds	r30, 0x0DCD	; 0x800dcd <my_touch+0x15>
    df18:	f0 91 ce 0d 	lds	r31, 0x0DCE	; 0x800dce <my_touch+0x16>
    df1c:	80 81       	ld	r24, Z
    df1e:	60 91 d4 0d 	lds	r22, 0x0DD4	; 0x800dd4 <my_touch+0x1c>
    df22:	86 2b       	or	r24, r22
    df24:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    df26:	e0 91 c9 0d 	lds	r30, 0x0DC9	; 0x800dc9 <my_touch+0x11>
    df2a:	f0 91 ca 0d 	lds	r31, 0x0DCA	; 0x800dca <my_touch+0x12>
    df2e:	80 81       	ld	r24, Z
    df30:	60 91 d2 0d 	lds	r22, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
    df34:	86 2b       	or	r24, r22
    df36:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    df38:	e0 91 c7 0d 	lds	r30, 0x0DC7	; 0x800dc7 <my_touch+0xf>
    df3c:	f0 91 c8 0d 	lds	r31, 0x0DC8	; 0x800dc8 <my_touch+0x10>
    df40:	80 81       	ld	r24, Z
    df42:	60 91 d1 0d 	lds	r22, 0x0DD1	; 0x800dd1 <my_touch+0x19>
    df46:	86 2b       	or	r24, r22
    df48:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    df4a:	50 93 c1 0d 	sts	0x0DC1, r21	; 0x800dc1 <my_touch+0x9>
    df4e:	40 93 c0 0d 	sts	0x0DC0, r20	; 0x800dc0 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    df52:	30 93 c3 0d 	sts	0x0DC3, r19	; 0x800dc3 <my_touch+0xb>
    df56:	20 93 c2 0d 	sts	0x0DC2, r18	; 0x800dc2 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    df5a:	90 93 c6 0d 	sts	0x0DC6, r25	; 0x800dc6 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    df5e:	8f ef       	ldi	r24, 0xFF	; 255
    df60:	9f ef       	ldi	r25, 0xFF	; 255
    df62:	0e 94 00 82 	call	0x10400	; 0x10400 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    df66:	8f e1       	ldi	r24, 0x1F	; 31
    df68:	90 e0       	ldi	r25, 0x00	; 0
    df6a:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
    df6e:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    df72:	1e 01       	movw	r2, r28
    df74:	28 e4       	ldi	r18, 0x48	; 72
    df76:	22 0e       	add	r2, r18
    df78:	31 1c       	adc	r3, r1
    df7a:	68 e9       	ldi	r22, 0x98	; 152
    df7c:	73 e3       	ldi	r23, 0x33	; 51
    df7e:	c1 01       	movw	r24, r2
    df80:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    df84:	ee 24       	eor	r14, r14
    df86:	ea 94       	dec	r14
    df88:	fe 2c       	mov	r15, r14
    df8a:	0f e1       	ldi	r16, 0x1F	; 31
    df8c:	10 e0       	ldi	r17, 0x00	; 0
    df8e:	22 e0       	ldi	r18, 0x02	; 2
    df90:	4a e0       	ldi	r20, 0x0A	; 10
    df92:	50 e0       	ldi	r21, 0x00	; 0
    df94:	6e e1       	ldi	r22, 0x1E	; 30
    df96:	70 e0       	ldi	r23, 0x00	; 0
    df98:	c1 01       	movw	r24, r2
    df9a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    df9e:	8e e1       	ldi	r24, 0x1E	; 30
    dfa0:	90 e0       	ldi	r25, 0x00	; 0
    dfa2:	c4 5c       	subi	r28, 0xC4	; 196
    dfa4:	de 4f       	sbci	r29, 0xFE	; 254
    dfa6:	99 83       	std	Y+1, r25	; 0x01
    dfa8:	88 83       	st	Y, r24
    dfaa:	cc 53       	subi	r28, 0x3C	; 60
    dfac:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
  ///
  for (uint8_t init = 0;  init < 16; init++)
    dfae:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    dfb0:	d2 2c       	mov	r13, r2
    dfb2:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    dfb4:	a2 e3       	ldi	r26, 0x32	; 50
    dfb6:	b1 e0       	ldi	r27, 0x01	; 1
    dfb8:	ac 0f       	add	r26, r28
    dfba:	bd 1f       	adc	r27, r29
    dfbc:	12 96       	adiw	r26, 0x02	; 2
    dfbe:	cc 5b       	subi	r28, 0xBC	; 188
    dfc0:	de 4f       	sbci	r29, 0xFE	; 254
    dfc2:	b9 83       	std	Y+1, r27	; 0x01
    dfc4:	a8 83       	st	Y, r26
    dfc6:	c4 54       	subi	r28, 0x44	; 68
    dfc8:	d1 40       	sbci	r29, 0x01	; 1
    dfca:	ec e2       	ldi	r30, 0x2C	; 44
    dfcc:	f1 e0       	ldi	r31, 0x01	; 1
    dfce:	ec 0f       	add	r30, r28
    dfd0:	fd 1f       	adc	r31, r29
    dfd2:	32 96       	adiw	r30, 0x02	; 2
    dfd4:	ca 5b       	subi	r28, 0xBA	; 186
    dfd6:	de 4f       	sbci	r29, 0xFE	; 254
    dfd8:	f9 83       	std	Y+1, r31	; 0x01
    dfda:	e8 83       	st	Y, r30
    dfdc:	c6 54       	subi	r28, 0x46	; 70
    dfde:	d1 40       	sbci	r29, 0x01	; 1
    dfe0:	26 e2       	ldi	r18, 0x26	; 38
    dfe2:	31 e0       	ldi	r19, 0x01	; 1
    dfe4:	2c 0f       	add	r18, r28
    dfe6:	3d 1f       	adc	r19, r29
    dfe8:	2e 5f       	subi	r18, 0xFE	; 254
    dfea:	3f 4f       	sbci	r19, 0xFF	; 255
    dfec:	c8 5b       	subi	r28, 0xB8	; 184
    dfee:	de 4f       	sbci	r29, 0xFE	; 254
    dff0:	39 83       	std	Y+1, r19	; 0x01
    dff2:	28 83       	st	Y, r18
    dff4:	c8 54       	subi	r28, 0x48	; 72
    dff6:	d1 40       	sbci	r29, 0x01	; 1
    dff8:	8e ed       	ldi	r24, 0xDE	; 222
    dffa:	90 e0       	ldi	r25, 0x00	; 0
    dffc:	8c 0f       	add	r24, r28
    dffe:	9d 1f       	adc	r25, r29
    e000:	02 96       	adiw	r24, 0x02	; 2
    e002:	c6 5b       	subi	r28, 0xB6	; 182
    e004:	de 4f       	sbci	r29, 0xFE	; 254
    e006:	99 83       	std	Y+1, r25	; 0x01
    e008:	88 83       	st	Y, r24
    e00a:	ca 54       	subi	r28, 0x4A	; 74
    e00c:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    e00e:	a8 ec       	ldi	r26, 0xC8	; 200
    e010:	b0 e0       	ldi	r27, 0x00	; 0
    e012:	ac 0f       	add	r26, r28
    e014:	bd 1f       	adc	r27, r29
    e016:	1c 96       	adiw	r26, 0x0c	; 12
    e018:	c4 5b       	subi	r28, 0xB4	; 180
    e01a:	de 4f       	sbci	r29, 0xFE	; 254
    e01c:	b9 83       	std	Y+1, r27	; 0x01
    e01e:	a8 83       	st	Y, r26
    e020:	cc 54       	subi	r28, 0x4C	; 76
    e022:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3638
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    e024:	ee 24       	eor	r14, r14
    e026:	ea 94       	dec	r14
    e028:	fe 2c       	mov	r15, r14
    e02a:	00 e0       	ldi	r16, 0x00	; 0
    e02c:	18 ef       	ldi	r17, 0xF8	; 248
    e02e:	21 e0       	ldi	r18, 0x01	; 1
    e030:	4e e1       	ldi	r20, 0x1E	; 30
    e032:	50 e0       	ldi	r21, 0x00	; 0
    e034:	c4 5c       	subi	r28, 0xC4	; 196
    e036:	de 4f       	sbci	r29, 0xFE	; 254
    e038:	68 81       	ld	r22, Y
    e03a:	79 81       	ldd	r23, Y+1	; 0x01
    e03c:	cc 53       	subi	r28, 0x3C	; 60
    e03e:	d1 40       	sbci	r29, 0x01	; 1
    e040:	8f eb       	ldi	r24, 0xBF	; 191
    e042:	96 e0       	ldi	r25, 0x06	; 6
    e044:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    e048:	a1 10       	cpse	r10, r1
    e04a:	18 c2       	rjmp	.+1072   	; 0xe47c <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3642
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    e04c:	68 e8       	ldi	r22, 0x88	; 136
    e04e:	73 e3       	ldi	r23, 0x33	; 51
    e050:	c1 01       	movw	r24, r2
    e052:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
      strcat(str1, ":1");
    e056:	61 ec       	ldi	r22, 0xC1	; 193
    e058:	76 e0       	ldi	r23, 0x06	; 6
    e05a:	c1 01       	movw	r24, r2
    e05c:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3644
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e060:	00 ee       	ldi	r16, 0xE0	; 224
    e062:	17 e0       	ldi	r17, 0x07	; 7
    e064:	21 e0       	ldi	r18, 0x01	; 1
    e066:	42 e3       	ldi	r20, 0x32	; 50
    e068:	50 e0       	ldi	r21, 0x00	; 0
    e06a:	6e e1       	ldi	r22, 0x1E	; 30
    e06c:	70 e0       	ldi	r23, 0x00	; 0
    e06e:	c1 01       	movw	r24, r2
    e070:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646

      tritri = 0;
    e074:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <tritri+0x1>
    e078:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647
      petnula = 0;
    e07c:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <petnula+0x1>
    e080:	10 92 26 0a 	sts	0x0A26, r1	; 0x800a26 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
      dvanact = 0;
    e084:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <dvanact+0x1>
    e088:	10 92 24 0a 	sts	0x0A24, r1	; 0x800a24 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
      dvanact = 0;
      light_curr = 0;
    e08c:	10 92 ed 0a 	sts	0x0AED, r1	; 0x800aed <light_curr+0x1>
    e090:	10 92 ec 0a 	sts	0x0AEC, r1	; 0x800aec <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    e094:	88 ef       	ldi	r24, 0xF8	; 248
    e096:	80 93 ea 0a 	sts	0x0AEA, r24	; 0x800aea <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    e09a:	83 e0       	ldi	r24, 0x03	; 3
    e09c:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    e0a0:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    e0a4:	10 92 d6 09 	sts	0x09D6, r1	; 0x8009d6 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    e0a8:	8e e8       	ldi	r24, 0x8E	; 142
    e0aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    e0ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    e0b2:	80 91 d5 09 	lds	r24, 0x09D5	; 0x8009d5 <a2d_reference>
    e0b6:	b0 e4       	ldi	r27, 0x40	; 64
    e0b8:	8b 9f       	mul	r24, r27
    e0ba:	c0 01       	movw	r24, r0
    e0bc:	11 24       	eor	r1, r1
    e0be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    e0c2:	8d ea       	ldi	r24, 0xAD	; 173
    e0c4:	94 e2       	ldi	r25, 0x24	; 36
    e0c6:	90 93 d8 09 	sts	0x09D8, r25	; 0x8009d8 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
    e0ca:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <_ZL17a2d_interupt_func.lto_priv.228>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    e0ce:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
      a2d_start_first(A_PROUD);
    e0d2:	83 e0       	ldi	r24, 0x03	; 3
    e0d4:	0e 94 0a 8c 	call	0x11814	; 0x11814 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3658
      milis = millis();
    e0d8:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e0dc:	2b 01       	movw	r4, r22
    e0de:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
      while (a2d_run_now == 0 && millis() - milis < 10);
    e0e0:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <a2d_run_now>
    e0e4:	81 11       	cpse	r24, r1
    e0e6:	0b c0       	rjmp	.+22     	; 0xe0fe <setup+0x56a>
    e0e8:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e0ec:	64 19       	sub	r22, r4
    e0ee:	75 09       	sbc	r23, r5
    e0f0:	86 09       	sbc	r24, r6
    e0f2:	97 09       	sbc	r25, r7
    e0f4:	6a 30       	cpi	r22, 0x0A	; 10
    e0f6:	71 05       	cpc	r23, r1
    e0f8:	81 05       	cpc	r24, r1
    e0fa:	91 05       	cpc	r25, r1
    e0fc:	88 f3       	brcs	.-30     	; 0xe0e0 <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      /// regulator 3.3V
      a2d_run_now = 0;
    e0fe:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      a2d_start_first(A_TRIV);
    e102:	86 e0       	ldi	r24, 0x06	; 6
    e104:	0e 94 0a 8c 	call	0x11814	; 0x11814 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3663
      milis = millis();
    e108:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e10c:	2b 01       	movw	r4, r22
    e10e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      while (a2d_run_now == 0 && millis() - milis < 10);
    e110:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <a2d_run_now>
    e114:	81 11       	cpse	r24, r1
    e116:	0b c0       	rjmp	.+22     	; 0xe12e <setup+0x59a>
    e118:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e11c:	64 19       	sub	r22, r4
    e11e:	75 09       	sbc	r23, r5
    e120:	86 09       	sbc	r24, r6
    e122:	97 09       	sbc	r25, r7
    e124:	6a 30       	cpi	r22, 0x0A	; 10
    e126:	71 05       	cpc	r23, r1
    e128:	81 05       	cpc	r24, r1
    e12a:	91 05       	cpc	r25, r1
    e12c:	88 f3       	brcs	.-30     	; 0xe110 <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      /// regulator 5.0V
      a2d_run_now = 0;
    e12e:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      a2d_start_first(A_PETV);
    e132:	85 e0       	ldi	r24, 0x05	; 5
    e134:	0e 94 0a 8c 	call	0x11814	; 0x11814 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      milis = millis();
    e138:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e13c:	2b 01       	movw	r4, r22
    e13e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      while (a2d_run_now == 0 && millis() - milis < 10);
    e140:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <a2d_run_now>
    e144:	81 11       	cpse	r24, r1
    e146:	0b c0       	rjmp	.+22     	; 0xe15e <setup+0x5ca>
    e148:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e14c:	64 19       	sub	r22, r4
    e14e:	75 09       	sbc	r23, r5
    e150:	86 09       	sbc	r24, r6
    e152:	97 09       	sbc	r25, r7
    e154:	6a 30       	cpi	r22, 0x0A	; 10
    e156:	71 05       	cpc	r23, r1
    e158:	81 05       	cpc	r24, r1
    e15a:	91 05       	cpc	r25, r1
    e15c:	88 f3       	brcs	.-30     	; 0xe140 <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3671
      /// vstupni napeti 12V
      a2d_run_now = 0;
    e15e:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
      a2d_start_first(A_DVANACTV);
    e162:	84 e0       	ldi	r24, 0x04	; 4
    e164:	0e 94 0a 8c 	call	0x11814	; 0x11814 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3673
      milis = millis();
    e168:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e16c:	2b 01       	movw	r4, r22
    e16e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
      while (a2d_run_now == 0 && millis() - milis < 10);
    e170:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <a2d_run_now>
    e174:	81 11       	cpse	r24, r1
    e176:	0b c0       	rjmp	.+22     	; 0xe18e <setup+0x5fa>
    e178:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e17c:	64 19       	sub	r22, r4
    e17e:	75 09       	sbc	r23, r5
    e180:	86 09       	sbc	r24, r6
    e182:	97 09       	sbc	r25, r7
    e184:	6a 30       	cpi	r22, 0x0A	; 10
    e186:	71 05       	cpc	r23, r1
    e188:	81 05       	cpc	r24, r1
    e18a:	91 05       	cpc	r25, r1
    e18c:	88 f3       	brcs	.-30     	; 0xe170 <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3676
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    e18e:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
      a2d_start_first(A_LIGHT);
    e192:	87 e0       	ldi	r24, 0x07	; 7
    e194:	0e 94 0a 8c 	call	0x11814	; 0x11814 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3678
      milis = millis();
    e198:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e19c:	2b 01       	movw	r4, r22
    e19e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3679
      while (a2d_run_now == 0 && millis() - milis < 10);
    e1a0:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <a2d_run_now>
    e1a4:	81 11       	cpse	r24, r1
    e1a6:	0b c0       	rjmp	.+22     	; 0xe1be <setup+0x62a>
    e1a8:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    e1ac:	64 19       	sub	r22, r4
    e1ae:	75 09       	sbc	r23, r5
    e1b0:	86 09       	sbc	r24, r6
    e1b2:	97 09       	sbc	r25, r7
    e1b4:	6a 30       	cpi	r22, 0x0A	; 10
    e1b6:	71 05       	cpc	r23, r1
    e1b8:	81 05       	cpc	r24, r1
    e1ba:	91 05       	cpc	r25, r1
    e1bc:	88 f3       	brcs	.-30     	; 0xe1a0 <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    e1be:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    e1c2:	4e 01       	movw	r8, r28
    e1c4:	ea ef       	ldi	r30, 0xFA	; 250
    e1c6:	8e 1a       	sub	r8, r30
    e1c8:	ee ef       	ldi	r30, 0xFE	; 254
    e1ca:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e1cc:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <tritri>
    e1d0:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <tritri+0x1>
    e1d4:	25 e0       	ldi	r18, 0x05	; 5
    e1d6:	28 9f       	mul	r18, r24
    e1d8:	b0 01       	movw	r22, r0
    e1da:	29 9f       	mul	r18, r25
    e1dc:	70 0d       	add	r23, r0
    e1de:	11 24       	eor	r1, r1
    e1e0:	90 e0       	ldi	r25, 0x00	; 0
    e1e2:	80 e0       	ldi	r24, 0x00	; 0
    e1e4:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
    e1e8:	20 e0       	ldi	r18, 0x00	; 0
    e1ea:	30 e0       	ldi	r19, 0x00	; 0
    e1ec:	4a e7       	ldi	r20, 0x7A	; 122
    e1ee:	54 e4       	ldi	r21, 0x44	; 68
    e1f0:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    e1f4:	84 01       	movw	r16, r8
    e1f6:	22 e0       	ldi	r18, 0x02	; 2
    e1f8:	44 e0       	ldi	r20, 0x04	; 4
    e1fa:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    e1fe:	7e 01       	movw	r14, r28
    e200:	f2 ef       	ldi	r31, 0xF2	; 242
    e202:	ef 1a       	sub	r14, r31
    e204:	fe ef       	ldi	r31, 0xFE	; 254
    e206:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e208:	60 91 26 0a 	lds	r22, 0x0A26	; 0x800a26 <petnula>
    e20c:	70 91 27 0a 	lds	r23, 0x0A27	; 0x800a27 <petnula+0x1>
    e210:	13 e0       	ldi	r17, 0x03	; 3
    e212:	66 0f       	add	r22, r22
    e214:	77 1f       	adc	r23, r23
    e216:	1a 95       	dec	r17
    e218:	e1 f7       	brne	.-8      	; 0xe212 <setup+0x67e>
    e21a:	90 e0       	ldi	r25, 0x00	; 0
    e21c:	80 e0       	ldi	r24, 0x00	; 0
    e21e:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
    e222:	20 e0       	ldi	r18, 0x00	; 0
    e224:	30 e0       	ldi	r19, 0x00	; 0
    e226:	4a e7       	ldi	r20, 0x7A	; 122
    e228:	54 e4       	ldi	r21, 0x44	; 68
    e22a:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    e22e:	87 01       	movw	r16, r14
    e230:	22 e0       	ldi	r18, 0x02	; 2
    e232:	44 e0       	ldi	r20, 0x04	; 4
    e234:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    e238:	3e 01       	movw	r6, r28
    e23a:	2a ee       	ldi	r18, 0xEA	; 234
    e23c:	62 1a       	sub	r6, r18
    e23e:	2e ef       	ldi	r18, 0xFE	; 254
    e240:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e242:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <dvanact>
    e246:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <dvanact+0x1>
    e24a:	29 e3       	ldi	r18, 0x39	; 57
    e24c:	28 9f       	mul	r18, r24
    e24e:	b0 01       	movw	r22, r0
    e250:	29 9f       	mul	r18, r25
    e252:	70 0d       	add	r23, r0
    e254:	11 24       	eor	r1, r1
    e256:	90 e0       	ldi	r25, 0x00	; 0
    e258:	80 e0       	ldi	r24, 0x00	; 0
    e25a:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
    e25e:	20 e0       	ldi	r18, 0x00	; 0
    e260:	30 e0       	ldi	r19, 0x00	; 0
    e262:	4a e7       	ldi	r20, 0x7A	; 122
    e264:	54 e4       	ldi	r21, 0x44	; 68
    e266:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    e26a:	83 01       	movw	r16, r6
    e26c:	22 e0       	ldi	r18, 0x02	; 2
    e26e:	44 e0       	ldi	r20, 0x04	; 4
    e270:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    e274:	2e 01       	movw	r4, r28
    e276:	32 ee       	ldi	r19, 0xE2	; 226
    e278:	43 1a       	sub	r4, r19
    e27a:	3e ef       	ldi	r19, 0xFE	; 254
    e27c:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    e27e:	60 91 22 0a 	lds	r22, 0x0A22	; 0x800a22 <proud>
    e282:	70 91 23 0a 	lds	r23, 0x0A23	; 0x800a23 <proud+0x1>
    e286:	90 e0       	ldi	r25, 0x00	; 0
    e288:	80 e0       	ldi	r24, 0x00	; 0
    e28a:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    e28e:	82 01       	movw	r16, r4
    e290:	22 e0       	ldi	r18, 0x02	; 2
    e292:	44 e0       	ldi	r20, 0x04	; 4
    e294:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    e298:	5f 92       	push	r5
    e29a:	4f 92       	push	r4
    e29c:	7f 92       	push	r7
    e29e:	6f 92       	push	r6
    e2a0:	ff 92       	push	r15
    e2a2:	ef 92       	push	r14
    e2a4:	9f 92       	push	r9
    e2a6:	8f 92       	push	r8
    e2a8:	84 ec       	ldi	r24, 0xC4	; 196
    e2aa:	96 e0       	ldi	r25, 0x06	; 6
    e2ac:	9f 93       	push	r25
    e2ae:	8f 93       	push	r24
    e2b0:	4e 01       	movw	r8, r28
    e2b2:	88 e8       	ldi	r24, 0x88	; 136
    e2b4:	88 0e       	add	r8, r24
    e2b6:	91 1c       	adc	r9, r1
    e2b8:	9f 92       	push	r9
    e2ba:	8f 92       	push	r8
    e2bc:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e2c0:	ee 24       	eor	r14, r14
    e2c2:	ea 94       	dec	r14
    e2c4:	fe 2c       	mov	r15, r14
    e2c6:	00 ee       	ldi	r16, 0xE0	; 224
    e2c8:	17 e0       	ldi	r17, 0x07	; 7
    e2ca:	21 e0       	ldi	r18, 0x01	; 1
    e2cc:	42 e3       	ldi	r20, 0x32	; 50
    e2ce:	50 e0       	ldi	r21, 0x00	; 0
    e2d0:	60 ea       	ldi	r22, 0xA0	; 160
    e2d2:	70 e0       	ldi	r23, 0x00	; 0
    e2d4:	c4 01       	movw	r24, r8
    e2d6:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e2da:	0f b6       	in	r0, 0x3f	; 63
    e2dc:	f8 94       	cli
    e2de:	de bf       	out	0x3e, r29	; 62
    e2e0:	0f be       	out	0x3f, r0	; 63
    e2e2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3978
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    e2e4:	2e e0       	ldi	r18, 0x0E	; 14
    e2e6:	a2 12       	cpse	r10, r18
    e2e8:	0c 94 aa 79 	jmp	0xf354	; 0xf354 <setup+0x17c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
    {
      strcpy_P(str1, text_ntp_cas);
    e2ec:	60 ea       	ldi	r22, 0xA0	; 160
    e2ee:	72 e3       	ldi	r23, 0x32	; 50
    e2f0:	c1 01       	movw	r24, r2
    e2f2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e2f6:	ee 24       	eor	r14, r14
    e2f8:	ea 94       	dec	r14
    e2fa:	fe 2c       	mov	r15, r14
    e2fc:	00 ee       	ldi	r16, 0xE0	; 224
    e2fe:	17 e0       	ldi	r17, 0x07	; 7
    e300:	21 e0       	ldi	r18, 0x01	; 1
    e302:	4e eb       	ldi	r20, 0xBE	; 190
    e304:	50 e0       	ldi	r21, 0x00	; 0
    e306:	6e e1       	ldi	r22, 0x1E	; 30
    e308:	70 e0       	ldi	r23, 0x00	; 0
    e30a:	c1 01       	movw	r24, r2
    e30c:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    e310:	c2 52       	subi	r28, 0x22	; 34
    e312:	df 4f       	sbci	r29, 0xFF	; 255
    e314:	18 82       	st	Y, r1
    e316:	ce 5d       	subi	r28, 0xDE	; 222
    e318:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    e31a:	0a e0       	ldi	r16, 0x0A	; 10
    e31c:	24 e0       	ldi	r18, 0x04	; 4
    e31e:	49 e8       	ldi	r20, 0x89	; 137
    e320:	5c e0       	ldi	r21, 0x0C	; 12
    e322:	6e e2       	ldi	r22, 0x2E	; 46
    e324:	ce 01       	movw	r24, r28
    e326:	82 52       	subi	r24, 0x22	; 34
    e328:	9f 4f       	sbci	r25, 0xFF	; 255
    e32a:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    e32e:	89 e3       	ldi	r24, 0x39	; 57
    e330:	95 e0       	ldi	r25, 0x05	; 5
    e332:	9f 83       	std	Y+7, r25	; 0x07
    e334:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    e336:	89 81       	ldd	r24, Y+1	; 0x01
    e338:	9a 81       	ldd	r25, Y+2	; 0x02
    e33a:	dc 01       	movw	r26, r24
    e33c:	ed 91       	ld	r30, X+
    e33e:	fc 91       	ld	r31, X
    e340:	06 84       	ldd	r0, Z+14	; 0x0e
    e342:	f7 85       	ldd	r31, Z+15	; 0x0f
    e344:	e0 2d       	mov	r30, r0
    e346:	69 e3       	ldi	r22, 0x39	; 57
    e348:	75 e0       	ldi	r23, 0x05	; 5
    e34a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    e34c:	81 e0       	ldi	r24, 0x01	; 1
    e34e:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    e350:	80 e1       	ldi	r24, 0x10	; 16
    e352:	9e e0       	ldi	r25, 0x0E	; 14
    e354:	a0 e0       	ldi	r26, 0x00	; 0
    e356:	b0 e0       	ldi	r27, 0x00	; 0
    e358:	88 87       	std	Y+8, r24	; 0x08
    e35a:	99 87       	std	Y+9, r25	; 0x09
    e35c:	aa 87       	std	Y+10, r26	; 0x0a
    e35e:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    e360:	ee ed       	ldi	r30, 0xDE	; 222
    e362:	f0 e0       	ldi	r31, 0x00	; 0
    e364:	ec 0f       	add	r30, r28
    e366:	fd 1f       	adc	r31, r29
    e368:	fd 83       	std	Y+5, r31	; 0x05
    e36a:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    e36c:	81 e0       	ldi	r24, 0x01	; 1
    e36e:	90 e0       	ldi	r25, 0x00	; 0
    e370:	a0 e0       	ldi	r26, 0x00	; 0
    e372:	b0 e0       	ldi	r27, 0x00	; 0
    e374:	8c 87       	std	Y+12, r24	; 0x0c
    e376:	9d 87       	std	Y+13, r25	; 0x0d
    e378:	ae 87       	std	Y+14, r26	; 0x0e
    e37a:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    e37c:	ce 01       	movw	r24, r28
    e37e:	01 96       	adiw	r24, 0x01	; 1
    e380:	0e 94 82 8c 	call	0x11904	; 0x11904 <NTPClient::update()>
    e384:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    e386:	89 81       	ldd	r24, Y+1	; 0x01
    e388:	9a 81       	ldd	r25, Y+2	; 0x02
    e38a:	dc 01       	movw	r26, r24
    e38c:	ed 91       	ld	r30, X+
    e38e:	fc 91       	ld	r31, X
    e390:	02 88       	ldd	r0, Z+18	; 0x12
    e392:	f3 89       	ldd	r31, Z+19	; 0x13
    e394:	e0 2d       	mov	r30, r0
    e396:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    e398:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982
      if (ntp_check(&timeClient) == 0)
    e39a:	11 11       	cpse	r17, r1
    e39c:	c5 c7       	rjmp	.+3978   	; 0xf328 <setup+0x1794>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
      {
        strcpy_P(str1, text_err);
    e39e:	60 ee       	ldi	r22, 0xE0	; 224
    e3a0:	73 e3       	ldi	r23, 0x33	; 51
    e3a2:	c1 01       	movw	r24, r2
    e3a4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3985
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    e3a8:	00 e0       	ldi	r16, 0x00	; 0
    e3aa:	18 ef       	ldi	r17, 0xF8	; 248
    e3ac:	21 e0       	ldi	r18, 0x01	; 1
    e3ae:	4e eb       	ldi	r20, 0xBE	; 190
    e3b0:	50 e0       	ldi	r21, 0x00	; 0
    e3b2:	60 ea       	ldi	r22, 0xA0	; 160
    e3b4:	70 e0       	ldi	r23, 0x00	; 0
    e3b6:	c1 01       	movw	r24, r2
    e3b8:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e3bc:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    e3c0:	82 60       	ori	r24, 0x02	; 2
    e3c2:	0c 94 42 7a 	jmp	0xf484	; 0xf484 <setup+0x18f0>
    e3c6:	e1 0e       	add	r14, r17
    e3c8:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    e3ca:	70 e0       	ldi	r23, 0x00	; 0
    e3cc:	21 2f       	mov	r18, r17
    e3ce:	86 ed       	ldi	r24, 0xD6	; 214
    e3d0:	9d e0       	ldi	r25, 0x0D	; 13
    e3d2:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    e3d6:	2c cd       	rjmp	.-1448   	; 0xde30 <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    e3d8:	8f ef       	ldi	r24, 0xFF	; 255
    e3da:	90 e0       	ldi	r25, 0x00	; 0
    e3dc:	90 93 ef 0d 	sts	0x0DEF, r25	; 0x800def <my_lcd+0x19>
    e3e0:	80 93 ee 0d 	sts	0x0DEE, r24	; 0x800dee <my_lcd+0x18>
    e3e4:	2e cd       	rjmp	.-1444   	; 0xde42 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    e3e6:	21 30       	cpi	r18, 0x01	; 1
    e3e8:	31 05       	cpc	r19, r1
    e3ea:	31 f5       	brne	.+76     	; 0xe438 <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    e3ec:	20 81       	ld	r18, Z
    e3ee:	82 23       	and	r24, r18
    e3f0:	80 83       	st	Z, r24
    e3f2:	81 e0       	ldi	r24, 0x01	; 1
    e3f4:	82 b9       	out	0x02, r24	; 2
    e3f6:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    e3fa:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    e3fe:	80 81       	ld	r24, Z
    e400:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
    e404:	82 23       	and	r24, r18
    e406:	80 83       	st	Z, r24
    e408:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    e40c:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    e410:	80 81       	ld	r24, Z
    e412:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
    e416:	82 2b       	or	r24, r18
    e418:	80 83       	st	Z, r24
    e41a:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
    e41e:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
    e422:	80 81       	ld	r24, Z
    e424:	20 91 0d 0e 	lds	r18, 0x0E0D	; 0x800e0d <my_lcd+0x37>
    e428:	82 2b       	or	r24, r18
    e42a:	80 83       	st	Z, r24
setup():
    e42c:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    e42e:	91 11       	cpse	r25, r1
    e430:	01 c0       	rjmp	.+2      	; 0xe434 <setup+0x8a0>
setup():
    e432:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    e434:	82 b9       	out	0x02, r24	; 2
    e436:	43 cd       	rjmp	.-1402   	; 0xdebe <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    e438:	20 81       	ld	r18, Z
    e43a:	82 23       	and	r24, r18
    e43c:	80 83       	st	Z, r24
setup():
    e43e:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    e440:	91 11       	cpse	r25, r1
    e442:	01 c0       	rjmp	.+2      	; 0xe446 <setup+0x8b2>
setup():
    e444:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    e446:	82 b9       	out	0x02, r24	; 2
    e448:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    e44c:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    e450:	80 81       	ld	r24, Z
    e452:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
    e456:	89 23       	and	r24, r25
    e458:	80 83       	st	Z, r24
    e45a:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
    e45e:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
    e462:	80 81       	ld	r24, Z
    e464:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
    e468:	89 2b       	or	r24, r25
    e46a:	80 83       	st	Z, r24
    e46c:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
    e470:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
    e474:	80 81       	ld	r24, Z
    e476:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
    e47a:	31 cd       	rjmp	.-1438   	; 0xdede <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3692
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    e47c:	b1 e0       	ldi	r27, 0x01	; 1
    e47e:	ab 12       	cpse	r10, r27
    e480:	c3 c0       	rjmp	.+390    	; 0xe608 <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    e482:	68 e8       	ldi	r22, 0x88	; 136
    e484:	73 e3       	ldi	r23, 0x33	; 51
    e486:	c1 01       	movw	r24, r2
    e488:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
      strcat(str1, ":2");
    e48c:	62 ee       	ldi	r22, 0xE2	; 226
    e48e:	76 e0       	ldi	r23, 0x06	; 6
    e490:	c1 01       	movw	r24, r2
    e492:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e496:	ee 24       	eor	r14, r14
    e498:	ea 94       	dec	r14
    e49a:	fe 2c       	mov	r15, r14
    e49c:	00 ee       	ldi	r16, 0xE0	; 224
    e49e:	17 e0       	ldi	r17, 0x07	; 7
    e4a0:	21 e0       	ldi	r18, 0x01	; 1
    e4a2:	4c e3       	ldi	r20, 0x3C	; 60
    e4a4:	50 e0       	ldi	r21, 0x00	; 0
    e4a6:	6e e1       	ldi	r22, 0x1E	; 30
    e4a8:	70 e0       	ldi	r23, 0x00	; 0
    e4aa:	c1 01       	movw	r24, r2
    e4ac:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    e4b0:	e0 91 2c 0e 	lds	r30, 0x0E2C	; 0x800e2c <lm75_temp+0xb>
    e4b4:	f0 91 2d 0e 	lds	r31, 0x0E2D	; 0x800e2d <lm75_temp+0xc>
    e4b8:	04 80       	ldd	r0, Z+4	; 0x04
    e4ba:	f5 81       	ldd	r31, Z+5	; 0x05
    e4bc:	e0 2d       	mov	r30, r0
    e4be:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    e4c0:	80 91 23 0e 	lds	r24, 0x0E23	; 0x800e23 <lm75_temp+0x2>
    e4c4:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    e4c8:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <lm75_temp>
    e4cc:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <lm75_temp+0x1>
    e4d0:	dc 01       	movw	r26, r24
    e4d2:	ed 91       	ld	r30, X+
    e4d4:	fc 91       	ld	r31, X
    e4d6:	01 90       	ld	r0, Z+
    e4d8:	f0 81       	ld	r31, Z
    e4da:	e0 2d       	mov	r30, r0
    e4dc:	61 2f       	mov	r22, r17
    e4de:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    e4e0:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <lm75_temp>
    e4e4:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <lm75_temp+0x1>
    e4e8:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    e4ec:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <lm75_temp>
    e4f0:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <lm75_temp+0x1>
    e4f4:	20 91 24 0e 	lds	r18, 0x0E24	; 0x800e24 <lm75_temp+0x3>
setup():
    e4f8:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    e4fa:	29 30       	cpi	r18, 0x09	; 9
    e4fc:	08 f0       	brcs	.+2      	; 0xe500 <setup+0x96c>
setup():
    e4fe:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    e500:	60 91 23 0e 	lds	r22, 0x0E23	; 0x800e23 <lm75_temp+0x2>
    e504:	0e 94 f2 8e 	call	0x11de4	; 0x11de4 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    e508:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <lm75_temp>
    e50c:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <lm75_temp+0x1>
    e510:	dc 01       	movw	r26, r24
    e512:	ed 91       	ld	r30, X+
    e514:	fc 91       	ld	r31, X
    e516:	02 84       	ldd	r0, Z+10	; 0x0a
    e518:	f3 85       	ldd	r31, Z+11	; 0x0b
    e51a:	e0 2d       	mov	r30, r0
    e51c:	19 95       	eicall
    e51e:	c1 5c       	subi	r28, 0xC1	; 193
    e520:	de 4f       	sbci	r29, 0xFE	; 254
    e522:	88 83       	st	Y, r24
    e524:	cf 53       	subi	r28, 0x3F	; 63
    e526:	d1 40       	sbci	r29, 0x01	; 1
    e528:	c2 5c       	subi	r28, 0xC2	; 194
    e52a:	de 4f       	sbci	r29, 0xFE	; 254
    e52c:	18 82       	st	Y, r1
    e52e:	ce 53       	subi	r28, 0x3E	; 62
    e530:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    e532:	80 91 24 0e 	lds	r24, 0x0E24	; 0x800e24 <lm75_temp+0x3>
    e536:	89 30       	cpi	r24, 0x09	; 9
    e538:	c8 f0       	brcs	.+50     	; 0xe56c <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    e53a:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <lm75_temp>
    e53e:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <lm75_temp+0x1>
    e542:	dc 01       	movw	r26, r24
    e544:	ed 91       	ld	r30, X+
    e546:	fc 91       	ld	r31, X
    e548:	02 84       	ldd	r0, Z+10	; 0x0a
    e54a:	f3 85       	ldd	r31, Z+11	; 0x0b
    e54c:	e0 2d       	mov	r30, r0
    e54e:	19 95       	eicall
    e550:	c2 5c       	subi	r28, 0xC2	; 194
    e552:	de 4f       	sbci	r29, 0xFE	; 254
    e554:	e8 81       	ld	r30, Y
    e556:	f9 81       	ldd	r31, Y+1	; 0x01
    e558:	ce 53       	subi	r28, 0x3E	; 62
    e55a:	d1 40       	sbci	r29, 0x01	; 1
    e55c:	e8 2b       	or	r30, r24
    e55e:	f9 2b       	or	r31, r25
    e560:	c2 5c       	subi	r28, 0xC2	; 194
    e562:	de 4f       	sbci	r29, 0xFE	; 254
    e564:	f9 83       	std	Y+1, r31	; 0x01
    e566:	e8 83       	st	Y, r30
    e568:	ce 53       	subi	r28, 0x3E	; 62
    e56a:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    e56c:	80 91 21 0e 	lds	r24, 0x0E21	; 0x800e21 <lm75_temp>
    e570:	90 91 22 0e 	lds	r25, 0x0E22	; 0x800e22 <lm75_temp+0x1>
    e574:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    e578:	7e 01       	movw	r14, r28
    e57a:	f2 ee       	ldi	r31, 0xE2	; 226
    e57c:	ef 1a       	sub	r14, r31
    e57e:	fe ef       	ldi	r31, 0xFE	; 254
    e580:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    e582:	60 91 25 0e 	lds	r22, 0x0E25	; 0x800e25 <lm75_temp+0x4>
    e586:	70 91 26 0e 	lds	r23, 0x0E26	; 0x800e26 <lm75_temp+0x5>
    e58a:	c2 5c       	subi	r28, 0xC2	; 194
    e58c:	de 4f       	sbci	r29, 0xFE	; 254
    e58e:	28 81       	ld	r18, Y
    e590:	39 81       	ldd	r19, Y+1	; 0x01
    e592:	ce 53       	subi	r28, 0x3E	; 62
    e594:	d1 40       	sbci	r29, 0x01	; 1
    e596:	62 23       	and	r22, r18
    e598:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    e59a:	07 2e       	mov	r0, r23
    e59c:	00 0c       	add	r0, r0
    e59e:	88 0b       	sbc	r24, r24
    e5a0:	99 0b       	sbc	r25, r25
    e5a2:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
    e5a6:	20 91 28 0e 	lds	r18, 0x0E28	; 0x800e28 <lm75_temp+0x7>
    e5aa:	30 91 29 0e 	lds	r19, 0x0E29	; 0x800e29 <lm75_temp+0x8>
    e5ae:	40 91 2a 0e 	lds	r20, 0x0E2A	; 0x800e2a <lm75_temp+0x9>
    e5b2:	50 91 2b 0e 	lds	r21, 0x0E2B	; 0x800e2b <lm75_temp+0xa>
    e5b6:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
    e5ba:	87 01       	movw	r16, r14
    e5bc:	22 e0       	ldi	r18, 0x02	; 2
    e5be:	44 e0       	ldi	r20, 0x04	; 4
    e5c0:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
      sprintf(str2, "iT=%sC", s_current);
    e5c4:	ff 92       	push	r15
    e5c6:	ef 92       	push	r14
    e5c8:	85 ee       	ldi	r24, 0xE5	; 229
    e5ca:	96 e0       	ldi	r25, 0x06	; 6
    e5cc:	9f 93       	push	r25
    e5ce:	8f 93       	push	r24
    e5d0:	4e 01       	movw	r8, r28
    e5d2:	38 e8       	ldi	r19, 0x88	; 136
    e5d4:	83 0e       	add	r8, r19
    e5d6:	91 1c       	adc	r9, r1
    e5d8:	9f 92       	push	r9
    e5da:	8f 92       	push	r8
    e5dc:	0e 94 f0 b4 	call	0x169e0	; 0x169e0 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e5e0:	ee 24       	eor	r14, r14
    e5e2:	ea 94       	dec	r14
    e5e4:	fe 2c       	mov	r15, r14
    e5e6:	00 ee       	ldi	r16, 0xE0	; 224
    e5e8:	17 e0       	ldi	r17, 0x07	; 7
    e5ea:	21 e0       	ldi	r18, 0x01	; 1
    e5ec:	4c e3       	ldi	r20, 0x3C	; 60
    e5ee:	50 e0       	ldi	r21, 0x00	; 0
    e5f0:	60 ea       	ldi	r22, 0xA0	; 160
    e5f2:	70 e0       	ldi	r23, 0x00	; 0
    e5f4:	c4 01       	movw	r24, r8
    e5f6:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e5fa:	0f 90       	pop	r0
    e5fc:	0f 90       	pop	r0
    e5fe:	0f 90       	pop	r0
    e600:	0f 90       	pop	r0
    e602:	0f 90       	pop	r0
    e604:	0f 90       	pop	r0
    e606:	6e ce       	rjmp	.-804    	; 0xe2e4 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3703
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    e608:	82 e0       	ldi	r24, 0x02	; 2
    e60a:	a8 12       	cpse	r10, r24
    e60c:	8c c1       	rjmp	.+792    	; 0xe926 <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705
    {
      if (EEPROM.read(set_default_values) == 255)
    e60e:	8a e5       	ldi	r24, 0x5A	; 90
    e610:	90 e0       	ldi	r25, 0x00	; 0
    e612:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    e616:	8f 3f       	cpi	r24, 0xFF	; 255
    e618:	09 f0       	breq	.+2      	; 0xe61c <setup+0xa88>
    e61a:	74 c1       	rjmp	.+744    	; 0xe904 <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
      {
        EEPROM.write(set_default_values, 0);
    e61c:	60 e0       	ldi	r22, 0x00	; 0
    e61e:	8a e5       	ldi	r24, 0x5A	; 90
    e620:	90 e0       	ldi	r25, 0x00	; 0
    e622:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
        strcpy_P(str1, text_vychozi_nastaveni);
    e626:	66 e7       	ldi	r22, 0x76	; 118
    e628:	73 e3       	ldi	r23, 0x33	; 51
    e62a:	8d 2d       	mov	r24, r13
    e62c:	9b 2d       	mov	r25, r11
    e62e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    e632:	ee 24       	eor	r14, r14
    e634:	ea 94       	dec	r14
    e636:	fe 2c       	mov	r15, r14
    e638:	00 e0       	ldi	r16, 0x00	; 0
    e63a:	18 ef       	ldi	r17, 0xF8	; 248
    e63c:	21 e0       	ldi	r18, 0x01	; 1
    e63e:	46 e4       	ldi	r20, 0x46	; 70
    e640:	50 e0       	ldi	r21, 0x00	; 0
    e642:	6e e1       	ldi	r22, 0x1E	; 30
    e644:	70 e0       	ldi	r23, 0x00	; 0
    e646:	8d 2d       	mov	r24, r13
    e648:	9b 2d       	mov	r25, r11
    e64a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2222
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    e64e:	6f ef       	ldi	r22, 0xFF	; 255
    e650:	8d e5       	ldi	r24, 0x5D	; 93
    e652:	90 e0       	ldi	r25, 0x00	; 0
    e654:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3714
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    e658:	80 e0       	ldi	r24, 0x00	; 0
    e65a:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <thermostat_ring_clear(unsigned char)>
    e65e:	81 e0       	ldi	r24, 0x01	; 1
    e660:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <thermostat_ring_clear(unsigned char)>
    e664:	82 e0       	ldi	r24, 0x02	; 2
    e666:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <thermostat_ring_clear(unsigned char)>
    e66a:	83 e0       	ldi	r24, 0x03	; 3
    e66c:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <thermostat_ring_clear(unsigned char)>
    e670:	84 e0       	ldi	r24, 0x04	; 4
    e672:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e676:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
        {
          strcpy(tmp1, "");
    e678:	62 ef       	ldi	r22, 0xF2	; 242
    e67a:	72 e0       	ldi	r23, 0x02	; 2
    e67c:	ce 01       	movw	r24, r28
    e67e:	8e 50       	subi	r24, 0x0E	; 14
    e680:	9f 4f       	sbci	r25, 0xFF	; 255
    e682:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
          remote_tds_clear(idx);
    e686:	81 2f       	mov	r24, r17
    e688:	0e 94 7f 51 	call	0xa2fe	; 0xa2fe <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e68c:	1f 5f       	subi	r17, 0xFF	; 255
    e68e:	1a 30       	cpi	r17, 0x0A	; 10
    e690:	99 f7       	brne	.-26     	; 0xe678 <setup+0xae4>
    e692:	e1 ef       	ldi	r30, 0xF1	; 241
    e694:	8e 2e       	mov	r8, r30
    e696:	99 24       	eor	r9, r9
    e698:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    e69a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724
        {
          strcpy(str2, "PROG");
    e69c:	61 ef       	ldi	r22, 0xF1	; 241
    e69e:	74 e0       	ldi	r23, 0x04	; 4
    e6a0:	ce 01       	movw	r24, r28
    e6a2:	88 57       	subi	r24, 0x78	; 120
    e6a4:	9f 4f       	sbci	r25, 0xFF	; 255
    e6a6:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
          thermostat_program_set_name(idx, str2);
    e6aa:	be 01       	movw	r22, r28
    e6ac:	68 57       	subi	r22, 0x78	; 120
    e6ae:	7f 4f       	sbci	r23, 0xFF	; 255
    e6b0:	81 2f       	mov	r24, r17
    e6b2:	0e 94 d8 4e 	call	0x9db0	; 0x9db0 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    e6b6:	60 e0       	ldi	r22, 0x00	; 0
    e6b8:	c4 01       	movw	r24, r8
    e6ba:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    e6be:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3729
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    e6c0:	c1 2c       	mov	r12, r1
    e6c2:	e1 2c       	mov	r14, r1
    e6c4:	00 e0       	ldi	r16, 0x00	; 0
    e6c6:	20 e0       	ldi	r18, 0x00	; 0
    e6c8:	40 e0       	ldi	r20, 0x00	; 0
    e6ca:	6f 2d       	mov	r22, r15
    e6cc:	81 2f       	mov	r24, r17
    e6ce:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3730
            thermostat_program_set_threshold(idx, interval_id, 220);
    e6d2:	4c ed       	ldi	r20, 0xDC	; 220
    e6d4:	50 e0       	ldi	r21, 0x00	; 0
    e6d6:	6f 2d       	mov	r22, r15
    e6d8:	81 2f       	mov	r24, r17
    e6da:	0e 94 80 4e 	call	0x9d00	; 0x9d00 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
            thermostat_program_set_week(idx, interval_id, 0);
    e6de:	40 e0       	ldi	r20, 0x00	; 0
    e6e0:	6f 2d       	mov	r22, r15
    e6e2:	81 2f       	mov	r24, r17
    e6e4:	0e 94 72 4e 	call	0x9ce4	; 0x9ce4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    e6e8:	f3 94       	inc	r15
    e6ea:	9b e0       	ldi	r25, 0x0B	; 11
    e6ec:	f9 12       	cpse	r15, r25
    e6ee:	e8 cf       	rjmp	.-48     	; 0xe6c0 <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    e6f0:	1f 5f       	subi	r17, 0xFF	; 255
    e6f2:	ad e4       	ldi	r26, 0x4D	; 77
    e6f4:	8a 0e       	add	r8, r26
    e6f6:	91 1c       	adc	r9, r1
    e6f8:	18 30       	cpi	r17, 0x08	; 8
    e6fa:	81 f6       	brne	.-96     	; 0xe69c <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    e6fc:	7a e0       	ldi	r23, 0x0A	; 10
    e6fe:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    e700:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    e702:	be 01       	movw	r22, r28
    e704:	68 53       	subi	r22, 0x38	; 56
    e706:	7f 4f       	sbci	r23, 0xFF	; 255
    e708:	80 2f       	mov	r24, r16
    e70a:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
          strcpy(tds.name, "FREE");
    e70e:	63 e8       	ldi	r22, 0x83	; 131
    e710:	73 e0       	ldi	r23, 0x03	; 3
    e712:	c4 5b       	subi	r28, 0xB4	; 180
    e714:	de 4f       	sbci	r29, 0xFE	; 254
    e716:	88 81       	ld	r24, Y
    e718:	99 81       	ldd	r25, Y+1	; 0x01
    e71a:	cc 54       	subi	r28, 0x4C	; 76
    e71c:	d1 40       	sbci	r29, 0x01	; 1
    e71e:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
          tds.used = 0;
    e722:	c8 53       	subi	r28, 0x38	; 56
    e724:	df 4f       	sbci	r29, 0xFF	; 255
    e726:	18 82       	st	Y, r1
    e728:	c8 5c       	subi	r28, 0xC8	; 200
    e72a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
          tds.offset = 0;
    e72c:	ce 52       	subi	r28, 0x2E	; 46
    e72e:	df 4f       	sbci	r29, 0xFF	; 255
    e730:	19 82       	std	Y+1, r1	; 0x01
    e732:	18 82       	st	Y, r1
    e734:	c2 5d       	subi	r28, 0xD2	; 210
    e736:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
          tds.assigned_ds2482 = 0;
    e738:	cf 52       	subi	r28, 0x2F	; 47
    e73a:	df 4f       	sbci	r29, 0xFF	; 255
    e73c:	18 82       	st	Y, r1
    e73e:	c1 5d       	subi	r28, 0xD1	; 209
    e740:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
          tds.period = 10;
    e742:	c4 52       	subi	r28, 0x24	; 36
    e744:	df 4f       	sbci	r29, 0xFF	; 255
    e746:	f8 82       	st	Y, r15
    e748:	cc 5d       	subi	r28, 0xDC	; 220
    e74a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    e74c:	c7 53       	subi	r28, 0x37	; 55
    e74e:	df 4f       	sbci	r29, 0xFF	; 255
    e750:	18 83       	st	Y, r17
    e752:	c9 5c       	subi	r28, 0xC9	; 201
    e754:	d0 40       	sbci	r29, 0x00	; 0
    e756:	c6 53       	subi	r28, 0x36	; 54
    e758:	df 4f       	sbci	r29, 0xFF	; 255
    e75a:	18 83       	st	Y, r17
    e75c:	ca 5c       	subi	r28, 0xCA	; 202
    e75e:	d0 40       	sbci	r29, 0x00	; 0
    e760:	c5 53       	subi	r28, 0x35	; 53
    e762:	df 4f       	sbci	r29, 0xFF	; 255
    e764:	18 83       	st	Y, r17
    e766:	cb 5c       	subi	r28, 0xCB	; 203
    e768:	d0 40       	sbci	r29, 0x00	; 0
    e76a:	c4 53       	subi	r28, 0x34	; 52
    e76c:	df 4f       	sbci	r29, 0xFF	; 255
    e76e:	18 83       	st	Y, r17
    e770:	cc 5c       	subi	r28, 0xCC	; 204
    e772:	d0 40       	sbci	r29, 0x00	; 0
    e774:	c3 53       	subi	r28, 0x33	; 51
    e776:	df 4f       	sbci	r29, 0xFF	; 255
    e778:	18 83       	st	Y, r17
    e77a:	cd 5c       	subi	r28, 0xCD	; 205
    e77c:	d0 40       	sbci	r29, 0x00	; 0
    e77e:	c2 53       	subi	r28, 0x32	; 50
    e780:	df 4f       	sbci	r29, 0xFF	; 255
    e782:	18 83       	st	Y, r17
    e784:	ce 5c       	subi	r28, 0xCE	; 206
    e786:	d0 40       	sbci	r29, 0x00	; 0
    e788:	c1 53       	subi	r28, 0x31	; 49
    e78a:	df 4f       	sbci	r29, 0xFF	; 255
    e78c:	18 83       	st	Y, r17
    e78e:	cf 5c       	subi	r28, 0xCF	; 207
    e790:	d0 40       	sbci	r29, 0x00	; 0
    e792:	c0 53       	subi	r28, 0x30	; 48
    e794:	df 4f       	sbci	r29, 0xFF	; 255
    e796:	18 83       	st	Y, r17
    e798:	c0 5d       	subi	r28, 0xD0	; 208
    e79a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
          set_tds18s20(idx, &tds);
    e79c:	be 01       	movw	r22, r28
    e79e:	68 53       	subi	r22, 0x38	; 56
    e7a0:	7f 4f       	sbci	r23, 0xFF	; 255
    e7a2:	80 2f       	mov	r24, r16
    e7a4:	0e 94 13 50 	call	0xa026	; 0xa026 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    e7a8:	0f 5f       	subi	r16, 0xFF	; 255
    e7aa:	06 30       	cpi	r16, 0x06	; 6
    e7ac:	09 f0       	breq	.+2      	; 0xe7b0 <setup+0xc1c>
    e7ae:	a9 cf       	rjmp	.-174    	; 0xe702 <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    e7b0:	84 e1       	ldi	r24, 0x14	; 20
    e7b2:	c2 52       	subi	r28, 0x22	; 34
    e7b4:	df 4f       	sbci	r29, 0xFF	; 255
    e7b6:	88 83       	st	Y, r24
    e7b8:	ce 5d       	subi	r28, 0xDE	; 222
    e7ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    e7bc:	8c e0       	ldi	r24, 0x0C	; 12
    e7be:	c1 52       	subi	r28, 0x21	; 33
    e7c0:	df 4f       	sbci	r29, 0xFF	; 255
    e7c2:	88 83       	st	Y, r24
    e7c4:	cf 5d       	subi	r28, 0xDF	; 223
    e7c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    e7c8:	8e e0       	ldi	r24, 0x0E	; 14
    e7ca:	c0 52       	subi	r28, 0x20	; 32
    e7cc:	df 4f       	sbci	r29, 0xFF	; 255
    e7ce:	88 83       	st	Y, r24
    e7d0:	c0 5e       	subi	r28, 0xE0	; 224
    e7d2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    e7d4:	91 e1       	ldi	r25, 0x11	; 17
    e7d6:	cf 51       	subi	r28, 0x1F	; 31
    e7d8:	df 4f       	sbci	r29, 0xFF	; 255
    e7da:	98 83       	st	Y, r25
    e7dc:	c1 5e       	subi	r28, 0xE1	; 225
    e7de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    e7e0:	ce 51       	subi	r28, 0x1E	; 30
    e7e2:	df 4f       	sbci	r29, 0xFF	; 255
    e7e4:	88 83       	st	Y, r24
    e7e6:	c2 5e       	subi	r28, 0xE2	; 226
    e7e8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    e7ea:	cd 51       	subi	r28, 0x1D	; 29
    e7ec:	df 4f       	sbci	r29, 0xFF	; 255
    e7ee:	18 82       	st	Y, r1
    e7f0:	c3 5e       	subi	r28, 0xE3	; 227
    e7f2:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    e7f4:	ce 01       	movw	r24, r28
    e7f6:	82 52       	subi	r24, 0x22	; 34
    e7f8:	9f 4f       	sbci	r25, 0xFF	; 255
    e7fa:	0e 94 87 90 	call	0x1210e	; 0x1210e <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3380
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    e7fe:	61 e0       	ldi	r22, 0x01	; 1
    e800:	81 e0       	ldi	r24, 0x01	; 1
    e802:	90 e0       	ldi	r25, 0x00	; 0
    e804:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    e808:	82 e0       	ldi	r24, 0x02	; 2
    e80a:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <device>
    e80e:	91 e0       	ldi	r25, 0x01	; 1
    e810:	90 93 3c 0c 	sts	0x0C3C, r25	; 0x800c3c <device+0x1>
    e814:	80 93 3d 0c 	sts	0x0C3D, r24	; 0x800c3d <device+0x2>
    e818:	20 91 24 0a 	lds	r18, 0x0A24	; 0x800a24 <dvanact>
    e81c:	30 91 25 0a 	lds	r19, 0x0A25	; 0x800a25 <dvanact+0x1>
    e820:	36 95       	lsr	r19
    e822:	27 95       	ror	r18
    e824:	20 93 3e 0c 	sts	0x0C3E, r18	; 0x800c3e <device+0x3>
    e828:	20 91 ec 0a 	lds	r18, 0x0AEC	; 0x800aec <light_curr>
    e82c:	30 91 ed 0a 	lds	r19, 0x0AED	; 0x800aed <light_curr+0x1>
    e830:	36 95       	lsr	r19
    e832:	27 95       	ror	r18
    e834:	20 93 3f 0c 	sts	0x0C3F, r18	; 0x800c3f <device+0x4>
    e838:	20 91 22 0a 	lds	r18, 0x0A22	; 0x800a22 <proud>
    e83c:	30 91 23 0a 	lds	r19, 0x0A23	; 0x800a23 <proud+0x1>
    e840:	36 95       	lsr	r19
    e842:	27 95       	ror	r18
    e844:	20 93 40 0c 	sts	0x0C40, r18	; 0x800c40 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    e848:	30 ec       	ldi	r19, 0xC0	; 192
    e84a:	30 93 41 0c 	sts	0x0C41, r19	; 0x800c41 <device+0x6>
    e84e:	28 ea       	ldi	r18, 0xA8	; 168
    e850:	20 93 42 0c 	sts	0x0C42, r18	; 0x800c42 <device+0x7>
    e854:	80 93 43 0c 	sts	0x0C43, r24	; 0x800c43 <device+0x8>
    e858:	4e e6       	ldi	r20, 0x6E	; 110
    e85a:	40 93 44 0c 	sts	0x0C44, r20	; 0x800c44 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    e85e:	10 93 45 0c 	sts	0x0C45, r17	; 0x800c45 <device+0xa>
    e862:	10 93 46 0c 	sts	0x0C46, r17	; 0x800c46 <device+0xb>
    e866:	10 93 47 0c 	sts	0x0C47, r17	; 0x800c47 <device+0xc>
    e86a:	10 92 48 0c 	sts	0x0C48, r1	; 0x800c48 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    e86e:	30 93 4d 0c 	sts	0x0C4D, r19	; 0x800c4d <device+0x12>
    e872:	20 93 4e 0c 	sts	0x0C4E, r18	; 0x800c4e <device+0x13>
    e876:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <device+0x14>
    e87a:	90 93 50 0c 	sts	0x0C50, r25	; 0x800c50 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3755
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    e87e:	30 93 49 0c 	sts	0x0C49, r19	; 0x800c49 <device+0xe>
    e882:	20 93 4a 0c 	sts	0x0C4A, r18	; 0x800c4a <device+0xf>
    e886:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <device+0x10>
    e88a:	90 93 4c 0c 	sts	0x0C4C, r25	; 0x800c4c <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    e88e:	30 93 5b 0c 	sts	0x0C5B, r19	; 0x800c5b <device+0x20>
    e892:	20 93 5c 0c 	sts	0x0C5C, r18	; 0x800c5c <device+0x21>
    e896:	80 93 5d 0c 	sts	0x0C5D, r24	; 0x800c5d <device+0x22>
    e89a:	90 93 5e 0c 	sts	0x0C5E, r25	; 0x800c5e <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    e89e:	30 93 89 0c 	sts	0x0C89, r19	; 0x800c89 <device+0x4e>
    e8a2:	20 93 8a 0c 	sts	0x0C8A, r18	; 0x800c8a <device+0x4f>
    e8a6:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <device+0x50>
    e8aa:	90 93 8c 0c 	sts	0x0C8C, r25	; 0x800c8c <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
        device.mqtt_port = 1883;
    e8ae:	8b e5       	ldi	r24, 0x5B	; 91
    e8b0:	97 e0       	ldi	r25, 0x07	; 7
    e8b2:	90 93 60 0c 	sts	0x0C60, r25	; 0x800c60 <device+0x25>
    e8b6:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
        strcpy(device.mqtt_user, "saric");
    e8ba:	6c ee       	ldi	r22, 0xEC	; 236
    e8bc:	76 e0       	ldi	r23, 0x06	; 6
    e8be:	81 e6       	ldi	r24, 0x61	; 97
    e8c0:	9c e0       	ldi	r25, 0x0C	; 12
    e8c2:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
        strcpy(device.mqtt_key, "no");
    e8c6:	62 ef       	ldi	r22, 0xF2	; 242
    e8c8:	76 e0       	ldi	r23, 0x06	; 6
    e8ca:	85 e7       	ldi	r24, 0x75	; 117
    e8cc:	9c e0       	ldi	r25, 0x0C	; 12
    e8ce:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
        save_setup_network();
    e8d2:	0e 94 9c 50 	call	0xa138	; 0xa138 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
        strcpy(str1, "TERM D1");
    e8d6:	65 ef       	ldi	r22, 0xF5	; 245
    e8d8:	76 e0       	ldi	r23, 0x06	; 6
    e8da:	8d 2d       	mov	r24, r13
    e8dc:	9b 2d       	mov	r25, r11
    e8de:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3763
        device_set_name(str1);
    e8e2:	8d 2d       	mov	r24, r13
    e8e4:	9b 2d       	mov	r25, r11
    e8e6:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
        char hostname[10];
        device_get_name(hostname);
    e8ea:	ce 01       	movw	r24, r28
    e8ec:	82 52       	subi	r24, 0x22	; 34
    e8ee:	9f 4f       	sbci	r25, 0xFF	; 255
    e8f0:	0e 94 ef 57 	call	0xafde	; 0xafde <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3766
        default_ring = 0;
    e8f4:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    e8f8:	60 e0       	ldi	r22, 0x00	; 0
    e8fa:	8c e5       	ldi	r24, 0x5C	; 92
    e8fc:	90 e0       	ldi	r25, 0x00	; 0
    e8fe:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    e902:	f0 cc       	rjmp	.-1568   	; 0xe2e4 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3771
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    e904:	6a e6       	ldi	r22, 0x6A	; 106
    e906:	73 e3       	ldi	r23, 0x33	; 51
    e908:	8d 2d       	mov	r24, r13
    e90a:	9b 2d       	mov	r25, r11
    e90c:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e910:	ee 24       	eor	r14, r14
    e912:	ea 94       	dec	r14
    e914:	fe 2c       	mov	r15, r14
    e916:	00 ee       	ldi	r16, 0xE0	; 224
    e918:	17 e0       	ldi	r17, 0x07	; 7
    e91a:	21 e0       	ldi	r18, 0x01	; 1
    e91c:	46 e4       	ldi	r20, 0x46	; 70
    e91e:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    e920:	6e e1       	ldi	r22, 0x1E	; 30
    e922:	70 e0       	ldi	r23, 0x00	; 0
    e924:	5d c0       	rjmp	.+186    	; 0xe9e0 <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    e926:	b3 e0       	ldi	r27, 0x03	; 3
    e928:	ab 12       	cpse	r10, r27
    e92a:	72 c0       	rjmp	.+228    	; 0xea10 <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    e92c:	61 e0       	ldi	r22, 0x01	; 1
    e92e:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
    e932:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    e936:	61 e0       	ldi	r22, 0x01	; 1
    e938:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
    e93c:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    e940:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
    e944:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
    e948:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    e94c:	60 e0       	ldi	r22, 0x00	; 0
    e94e:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
    e952:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    e956:	61 e0       	ldi	r22, 0x01	; 1
    e958:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
    e95c:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
    e960:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    e964:	60 e4       	ldi	r22, 0x40	; 64
    e966:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
    e96a:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
    e96e:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    e972:	61 e0       	ldi	r22, 0x01	; 1
    e974:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
    e978:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3780
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
    e97c:	4b ea       	ldi	r20, 0xAB	; 171
    e97e:	60 e0       	ldi	r22, 0x00	; 0
    e980:	70 e0       	ldi	r23, 0x00	; 0
    e982:	cb 01       	movw	r24, r22
    e984:	0e 94 6a 87 	call	0x10ed4	; 0x10ed4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3781
      if (SRAM.readByte(0) == 0xAB)
    e988:	60 e0       	ldi	r22, 0x00	; 0
    e98a:	70 e0       	ldi	r23, 0x00	; 0
    e98c:	cb 01       	movw	r24, r22
    e98e:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3783
      {
        strcpy_P(str1, text_test_ram);
    e992:	6d e5       	ldi	r22, 0x5D	; 93
    e994:	73 e3       	ldi	r23, 0x33	; 51
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3781
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    e996:	8b 3a       	cpi	r24, 0xAB	; 171
    e998:	41 f5       	brne	.+80     	; 0xe9ea <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3783
      {
        strcpy_P(str1, text_test_ram);
    e99a:	8d 2d       	mov	r24, r13
    e99c:	9b 2d       	mov	r25, r11
    e99e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3784
        strcat(str1, " init ...");
    e9a2:	6d ef       	ldi	r22, 0xFD	; 253
    e9a4:	76 e0       	ldi	r23, 0x06	; 6
    e9a6:	8d 2d       	mov	r24, r13
    e9a8:	9b 2d       	mov	r25, r11
    e9aa:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3785
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e9ae:	ee 24       	eor	r14, r14
    e9b0:	ea 94       	dec	r14
    e9b2:	fe 2c       	mov	r15, r14
    e9b4:	00 ee       	ldi	r16, 0xE0	; 224
    e9b6:	17 e0       	ldi	r17, 0x07	; 7
    e9b8:	21 e0       	ldi	r18, 0x01	; 1
    e9ba:	40 e5       	ldi	r20, 0x50	; 80
    e9bc:	50 e0       	ldi	r21, 0x00	; 0
    e9be:	6e e1       	ldi	r22, 0x1E	; 30
    e9c0:	70 e0       	ldi	r23, 0x00	; 0
    e9c2:	8d 2d       	mov	r24, r13
    e9c4:	9b 2d       	mov	r25, r11
    e9c6:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    e9ca:	6a e5       	ldi	r22, 0x5A	; 90
    e9cc:	73 e3       	ldi	r23, 0x33	; 51
    e9ce:	8d 2d       	mov	r24, r13
    e9d0:	9b 2d       	mov	r25, r11
    e9d2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e9d6:	21 e0       	ldi	r18, 0x01	; 1
    e9d8:	40 e5       	ldi	r20, 0x50	; 80
    e9da:	50 e0       	ldi	r21, 0x00	; 0
    e9dc:	62 ed       	ldi	r22, 0xD2	; 210
    e9de:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    e9e0:	8d 2d       	mov	r24, r13
    e9e2:	9b 2d       	mov	r25, r11
    e9e4:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e9e8:	7d cc       	rjmp	.-1798   	; 0xe2e4 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3803
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    e9ea:	8d 2d       	mov	r24, r13
    e9ec:	9b 2d       	mov	r25, r11
    e9ee:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3804
        strcat_P(str1, text_err);
    e9f2:	60 ee       	ldi	r22, 0xE0	; 224
    e9f4:	73 e3       	ldi	r23, 0x33	; 51
    e9f6:	8d 2d       	mov	r24, r13
    e9f8:	9b 2d       	mov	r25, r11
    e9fa:	0e 94 fc a7 	call	0x14ff8	; 0x14ff8 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    e9fe:	ee 24       	eor	r14, r14
    ea00:	ea 94       	dec	r14
    ea02:	fe 2c       	mov	r15, r14
    ea04:	00 e0       	ldi	r16, 0x00	; 0
    ea06:	18 ef       	ldi	r17, 0xF8	; 248
    ea08:	21 e0       	ldi	r18, 0x01	; 1
    ea0a:	40 e5       	ldi	r20, 0x50	; 80
    ea0c:	50 e0       	ldi	r21, 0x00	; 0
    ea0e:	88 cf       	rjmp	.-240    	; 0xe920 <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810
      }
    }

    //// init EEPROMKY
    if (init == 4)
    ea10:	e4 e0       	ldi	r30, 0x04	; 4
    ea12:	ae 12       	cpse	r10, r30
    ea14:	e5 c4       	rjmp	.+2506   	; 0xf3e0 <setup+0x184c>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    ea16:	61 e0       	ldi	r22, 0x01	; 1
    ea18:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SROM+0xa>
    ea1c:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    ea20:	61 e0       	ldi	r22, 0x01	; 1
    ea22:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SROM+0xa>
    ea26:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    ea2a:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
    ea2e:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
    ea32:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    ea36:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <SROM+0x4>
    ea3a:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <SROM+0x5>
    ea3e:	a0 91 93 0c 	lds	r26, 0x0C93	; 0x800c93 <SROM+0x6>
    ea42:	b0 91 94 0c 	lds	r27, 0x0C94	; 0x800c94 <SROM+0x7>
    ea46:	89 2b       	or	r24, r25
    ea48:	8a 2b       	or	r24, r26
    ea4a:	8b 2b       	or	r24, r27
    ea4c:	a9 f0       	breq	.+42     	; 0xea78 <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    ea4e:	0e 94 2b 88 	call	0x11056	; 0x11056 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    ea52:	80 fd       	sbrc	r24, 0
    ea54:	fc cf       	rjmp	.-8      	; 0xea4e <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    ea56:	86 e0       	ldi	r24, 0x06	; 6
    ea58:	0e 94 e3 87 	call	0x10fc6	; 0x10fc6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    ea5c:	0e 94 de 87 	call	0x10fbc	; 0x10fbc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    ea60:	82 e0       	ldi	r24, 0x02	; 2
    ea62:	0e 94 e3 87 	call	0x10fc6	; 0x10fc6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    ea66:	6a eb       	ldi	r22, 0xBA	; 186
    ea68:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
    ea6c:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
    ea70:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    ea74:	0e 94 de 87 	call	0x10fbc	; 0x10fbc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    ea78:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <SROM+0x4>
    ea7c:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <SROM+0x5>
    ea80:	a0 91 93 0c 	lds	r26, 0x0C93	; 0x800c93 <SROM+0x6>
    ea84:	b0 91 94 0c 	lds	r27, 0x0C94	; 0x800c94 <SROM+0x7>
    ea88:	89 2b       	or	r24, r25
    ea8a:	8a 2b       	or	r24, r26
    ea8c:	8b 2b       	or	r24, r27
    ea8e:	71 f1       	breq	.+92     	; 0xeaec <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    ea90:	0e 94 2b 88 	call	0x11056	; 0x11056 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    ea94:	80 fd       	sbrc	r24, 0
    ea96:	fc cf       	rjmp	.-8      	; 0xea90 <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    ea98:	83 e0       	ldi	r24, 0x03	; 3
    ea9a:	0e 94 e3 87 	call	0x10fc6	; 0x10fc6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    ea9e:	6f ef       	ldi	r22, 0xFF	; 255
    eaa0:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
    eaa4:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
    eaa8:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
    eaac:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    eaae:	0e 94 de 87 	call	0x10fbc	; 0x10fbc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3814
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    eab2:	1a 3b       	cpi	r17, 0xBA	; 186
    eab4:	d9 f4       	brne	.+54     	; 0xeaec <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3817

      {
        strcpy_P(str1, text_test_eeprom);
    eab6:	6a e4       	ldi	r22, 0x4A	; 74
    eab8:	73 e3       	ldi	r23, 0x33	; 51
    eaba:	8d 2d       	mov	r24, r13
    eabc:	9b 2d       	mov	r25, r11
    eabe:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
        strcat_P(str1, text_ok);
    eac2:	6a e5       	ldi	r22, 0x5A	; 90
    eac4:	73 e3       	ldi	r23, 0x33	; 51
    eac6:	8d 2d       	mov	r24, r13
    eac8:	9b 2d       	mov	r25, r11
    eaca:	0e 94 fc a7 	call	0x14ff8	; 0x14ff8 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3819
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eace:	ee 24       	eor	r14, r14
    ead0:	ea 94       	dec	r14
    ead2:	fe 2c       	mov	r15, r14
    ead4:	00 ee       	ldi	r16, 0xE0	; 224
    ead6:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ead8:	21 e0       	ldi	r18, 0x01	; 1
    eada:	4a e5       	ldi	r20, 0x5A	; 90
    eadc:	50 e0       	ldi	r21, 0x00	; 0
    eade:	6e e1       	ldi	r22, 0x1E	; 30
    eae0:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eae2:	8d 2d       	mov	r24, r13
    eae4:	9b 2d       	mov	r25, r11
    eae6:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    eaea:	fc c0       	rjmp	.+504    	; 0xece4 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3823
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    eaec:	6a e4       	ldi	r22, 0x4A	; 74
    eaee:	73 e3       	ldi	r23, 0x33	; 51
    eaf0:	8d 2d       	mov	r24, r13
    eaf2:	9b 2d       	mov	r25, r11
    eaf4:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
        strcat_P(str1, text_err);
    eaf8:	60 ee       	ldi	r22, 0xE0	; 224
    eafa:	73 e3       	ldi	r23, 0x33	; 51
    eafc:	8d 2d       	mov	r24, r13
    eafe:	9b 2d       	mov	r25, r11
    eb00:	0e 94 fc a7 	call	0x14ff8	; 0x14ff8 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    eb04:	ee 24       	eor	r14, r14
    eb06:	ea 94       	dec	r14
    eb08:	fe 2c       	mov	r15, r14
    eb0a:	00 e0       	ldi	r16, 0x00	; 0
    eb0c:	18 ef       	ldi	r17, 0xF8	; 248
    eb0e:	e4 cf       	rjmp	.-56     	; 0xead8 <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    eb10:	68 e3       	ldi	r22, 0x38	; 56
    eb12:	73 e3       	ldi	r23, 0x33	; 51
    eb14:	8d 2d       	mov	r24, r13
    eb16:	9b 2d       	mov	r25, r11
    eb18:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eb1c:	ee 24       	eor	r14, r14
    eb1e:	ea 94       	dec	r14
    eb20:	fe 2c       	mov	r15, r14
    eb22:	00 ee       	ldi	r16, 0xE0	; 224
    eb24:	17 e0       	ldi	r17, 0x07	; 7
    eb26:	21 e0       	ldi	r18, 0x01	; 1
    eb28:	44 e6       	ldi	r20, 0x64	; 100
    eb2a:	50 e0       	ldi	r21, 0x00	; 0
    eb2c:	6e e1       	ldi	r22, 0x1E	; 30
    eb2e:	70 e0       	ldi	r23, 0x00	; 0
    eb30:	8d 2d       	mov	r24, r13
    eb32:	9b 2d       	mov	r25, r11
    eb34:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    eb38:	ab e3       	ldi	r26, 0x3B	; 59
    eb3a:	ea 2e       	mov	r14, r26
    eb3c:	ac e0       	ldi	r26, 0x0C	; 12
    eb3e:	fa 2e       	mov	r15, r26
    eb40:	0e e6       	ldi	r16, 0x6E	; 110
    eb42:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    eb44:	c8 01       	movw	r24, r16
    eb46:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    eb4a:	d7 01       	movw	r26, r14
    eb4c:	8d 93       	st	X+, r24
    eb4e:	7d 01       	movw	r14, r26
    eb50:	0f 5f       	subi	r16, 0xFF	; 255
    eb52:	1f 4f       	sbci	r17, 0xFF	; 255
    eb54:	04 37       	cpi	r16, 0x74	; 116
    eb56:	11 05       	cpc	r17, r1
    eb58:	a9 f7       	brne	.-22     	; 0xeb44 <setup+0xfb0>
    eb5a:	e1 e4       	ldi	r30, 0x41	; 65
    eb5c:	ee 2e       	mov	r14, r30
    eb5e:	ec e0       	ldi	r30, 0x0C	; 12
    eb60:	fe 2e       	mov	r15, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    eb62:	c8 01       	movw	r24, r16
    eb64:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    eb68:	f7 01       	movw	r30, r14
    eb6a:	81 93       	st	Z+, r24
    eb6c:	7f 01       	movw	r14, r30
    eb6e:	0f 5f       	subi	r16, 0xFF	; 255
    eb70:	1f 4f       	sbci	r17, 0xFF	; 255
    eb72:	08 37       	cpi	r16, 0x78	; 120
    eb74:	11 05       	cpc	r17, r1
    eb76:	a9 f7       	brne	.-22     	; 0xeb62 <setup+0xfce>
    eb78:	75 e4       	ldi	r23, 0x45	; 69
    eb7a:	e7 2e       	mov	r14, r23
    eb7c:	7c e0       	ldi	r23, 0x0C	; 12
    eb7e:	f7 2e       	mov	r15, r23
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    eb80:	c8 01       	movw	r24, r16
    eb82:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    eb86:	d7 01       	movw	r26, r14
    eb88:	8d 93       	st	X+, r24
    eb8a:	7d 01       	movw	r14, r26
    eb8c:	0f 5f       	subi	r16, 0xFF	; 255
    eb8e:	1f 4f       	sbci	r17, 0xFF	; 255
    eb90:	0c 37       	cpi	r16, 0x7C	; 124
    eb92:	11 05       	cpc	r17, r1
    eb94:	a9 f7       	brne	.-22     	; 0xeb80 <setup+0xfec>
    eb96:	5d e4       	ldi	r21, 0x4D	; 77
    eb98:	85 2e       	mov	r8, r21
    eb9a:	5c e0       	ldi	r21, 0x0C	; 12
    eb9c:	95 2e       	mov	r9, r21
    eb9e:	60 e8       	ldi	r22, 0x80	; 128
    eba0:	e6 2e       	mov	r14, r22
    eba2:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    eba4:	c7 01       	movw	r24, r14
    eba6:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ebaa:	f4 01       	movw	r30, r8
    ebac:	81 93       	st	Z+, r24
    ebae:	4f 01       	movw	r8, r30
    ebb0:	ff ef       	ldi	r31, 0xFF	; 255
    ebb2:	ef 1a       	sub	r14, r31
    ebb4:	ff 0a       	sbc	r15, r31
    ebb6:	24 e8       	ldi	r18, 0x84	; 132
    ebb8:	e2 16       	cp	r14, r18
    ebba:	f1 04       	cpc	r15, r1
    ebbc:	99 f7       	brne	.-26     	; 0xeba4 <setup+0x1010>
    ebbe:	49 e4       	ldi	r20, 0x49	; 73
    ebc0:	84 2e       	mov	r8, r20
    ebc2:	4c e0       	ldi	r20, 0x0C	; 12
    ebc4:	94 2e       	mov	r9, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    ebc6:	c8 01       	movw	r24, r16
    ebc8:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ebcc:	d4 01       	movw	r26, r8
    ebce:	8d 93       	st	X+, r24
    ebd0:	4d 01       	movw	r8, r26
    ebd2:	0f 5f       	subi	r16, 0xFF	; 255
    ebd4:	1f 4f       	sbci	r17, 0xFF	; 255
    ebd6:	00 38       	cpi	r16, 0x80	; 128
    ebd8:	11 05       	cpc	r17, r1
    ebda:	a9 f7       	brne	.-22     	; 0xebc6 <setup+0x1032>
    ebdc:	31 e5       	ldi	r19, 0x51	; 81
    ebde:	83 2e       	mov	r8, r19
    ebe0:	3c e0       	ldi	r19, 0x0C	; 12
    ebe2:	93 2e       	mov	r9, r19
    ebe4:	04 e6       	ldi	r16, 0x64	; 100
    ebe6:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    ebe8:	c8 01       	movw	r24, r16
    ebea:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ebee:	f4 01       	movw	r30, r8
    ebf0:	81 93       	st	Z+, r24
    ebf2:	4f 01       	movw	r8, r30
    ebf4:	0f 5f       	subi	r16, 0xFF	; 255
    ebf6:	1f 4f       	sbci	r17, 0xFF	; 255
    ebf8:	0d 36       	cpi	r16, 0x6D	; 109
    ebfa:	11 05       	cpc	r17, r1
    ebfc:	a9 f7       	brne	.-22     	; 0xebe8 <setup+0x1054>
    ebfe:	0b e5       	ldi	r16, 0x5B	; 91
    ec00:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    ec02:	c7 01       	movw	r24, r14
    ec04:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ec08:	d8 01       	movw	r26, r16
    ec0a:	8d 93       	st	X+, r24
    ec0c:	8d 01       	movw	r16, r26
    ec0e:	bf ef       	ldi	r27, 0xFF	; 255
    ec10:	eb 1a       	sub	r14, r27
    ec12:	fb 0a       	sbc	r15, r27
    ec14:	e8 e8       	ldi	r30, 0x88	; 136
    ec16:	ee 16       	cp	r14, r30
    ec18:	f1 04       	cpc	r15, r1
    ec1a:	99 f7       	brne	.-26     	; 0xec02 <setup+0x106e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    ec1c:	88 e8       	ldi	r24, 0x88	; 136
    ec1e:	90 e0       	ldi	r25, 0x00	; 0
    ec20:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ec24:	18 2f       	mov	r17, r24
    ec26:	89 e8       	ldi	r24, 0x89	; 137
    ec28:	90 e0       	ldi	r25, 0x00	; 0
    ec2a:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ec2e:	21 2f       	mov	r18, r17
    ec30:	30 e0       	ldi	r19, 0x00	; 0
    ec32:	32 2f       	mov	r19, r18
    ec34:	22 27       	eor	r18, r18
    ec36:	82 0f       	add	r24, r18
    ec38:	93 2f       	mov	r25, r19
    ec3a:	91 1d       	adc	r25, r1
    ec3c:	90 93 60 0c 	sts	0x0C60, r25	; 0x800c60 <device+0x25>
    ec40:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <device+0x24>
    ec44:	21 e6       	ldi	r18, 0x61	; 97
    ec46:	e2 2e       	mov	r14, r18
    ec48:	2c e0       	ldi	r18, 0x0C	; 12
    ec4a:	f2 2e       	mov	r15, r18
    ec4c:	0a e8       	ldi	r16, 0x8A	; 138
    ec4e:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    ec50:	c8 01       	movw	r24, r16
    ec52:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ec56:	d7 01       	movw	r26, r14
    ec58:	8d 93       	st	X+, r24
    ec5a:	7d 01       	movw	r14, r26
    ec5c:	0f 5f       	subi	r16, 0xFF	; 255
    ec5e:	1f 4f       	sbci	r17, 0xFF	; 255
    ec60:	0e 39       	cpi	r16, 0x9E	; 158
    ec62:	11 05       	cpc	r17, r1
    ec64:	a9 f7       	brne	.-22     	; 0xec50 <setup+0x10bc>
    ec66:	85 e7       	ldi	r24, 0x75	; 117
    ec68:	e8 2e       	mov	r14, r24
    ec6a:	8c e0       	ldi	r24, 0x0C	; 12
    ec6c:	f8 2e       	mov	r15, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    ec6e:	c8 01       	movw	r24, r16
    ec70:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ec74:	f7 01       	movw	r30, r14
    ec76:	81 93       	st	Z+, r24
    ec78:	7f 01       	movw	r14, r30
    ec7a:	0f 5f       	subi	r16, 0xFF	; 255
    ec7c:	1f 4f       	sbci	r17, 0xFF	; 255
    ec7e:	02 3b       	cpi	r16, 0xB2	; 178
    ec80:	11 05       	cpc	r17, r1
    ec82:	a9 f7       	brne	.-22     	; 0xec6e <setup+0x10da>
    ec84:	b9 e8       	ldi	r27, 0x89	; 137
    ec86:	eb 2e       	mov	r14, r27
    ec88:	bc e0       	ldi	r27, 0x0C	; 12
    ec8a:	fb 2e       	mov	r15, r27
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    ec8c:	c8 01       	movw	r24, r16
    ec8e:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ec92:	d7 01       	movw	r26, r14
    ec94:	8d 93       	st	X+, r24
    ec96:	7d 01       	movw	r14, r26
    ec98:	0f 5f       	subi	r16, 0xFF	; 255
    ec9a:	1f 4f       	sbci	r17, 0xFF	; 255
    ec9c:	06 3b       	cpi	r16, 0xB6	; 182
    ec9e:	11 05       	cpc	r17, r1
    eca0:	a9 f7       	brne	.-22     	; 0xec8c <setup+0x10f8>
    eca2:	45 e3       	ldi	r20, 0x35	; 53
    eca4:	5a e0       	ldi	r21, 0x0A	; 10
    eca6:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    eca8:	60 e2       	ldi	r22, 0x20	; 32
    ecaa:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
    ecac:	90 e0       	ldi	r25, 0x00	; 0
    ecae:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
    ecb0:	fc 01       	movw	r30, r24
    ecb2:	ee 0f       	add	r30, r30
    ecb4:	ff 1f       	adc	r31, r31
    ecb6:	e4 0f       	add	r30, r20
    ecb8:	f5 1f       	adc	r31, r21
    ecba:	70 87       	std	Z+8, r23	; 0x08
    ecbc:	67 83       	std	Z+7, r22	; 0x07
    ecbe:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3838
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ecc0:	8a 30       	cpi	r24, 0x0A	; 10
    ecc2:	91 05       	cpc	r25, r1
    ecc4:	a9 f7       	brne	.-22     	; 0xecb0 <setup+0x111c>
    ecc6:	21 50       	subi	r18, 0x01	; 1
    ecc8:	42 5e       	subi	r20, 0xE2	; 226
    ecca:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    eccc:	21 11       	cpse	r18, r1
    ecce:	ee cf       	rjmp	.-36     	; 0xecac <setup+0x1118>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    ecd0:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <last_output_update>
    ecd4:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <last_output_update+0x1>
    ecd8:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <last_output_update+0x2>
    ecdc:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <last_output_update+0x3>
    ece0:	10 92 34 0a 	sts	0x0A34, r1	; 0x800a34 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    ece4:	a3 94       	inc	r10
    ece6:	c4 5c       	subi	r28, 0xC4	; 196
    ece8:	de 4f       	sbci	r29, 0xFE	; 254
    ecea:	e8 81       	ld	r30, Y
    ecec:	f9 81       	ldd	r31, Y+1	; 0x01
    ecee:	cc 53       	subi	r28, 0x3C	; 60
    ecf0:	d1 40       	sbci	r29, 0x01	; 1
    ecf2:	3f 96       	adiw	r30, 0x0f	; 15
    ecf4:	c4 5c       	subi	r28, 0xC4	; 196
    ecf6:	de 4f       	sbci	r29, 0xFE	; 254
    ecf8:	f9 83       	std	Y+1, r31	; 0x01
    ecfa:	e8 83       	st	Y, r30
    ecfc:	cc 53       	subi	r28, 0x3C	; 60
    ecfe:	d1 40       	sbci	r29, 0x01	; 1
    ed00:	f0 e1       	ldi	r31, 0x10	; 16
    ed02:	af 12       	cpse	r10, r31
    ed04:	8f c9       	rjmp	.-3298   	; 0xe024 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4016
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    ed06:	64 ef       	ldi	r22, 0xF4	; 244
    ed08:	71 e0       	ldi	r23, 0x01	; 1
    ed0a:	80 e0       	ldi	r24, 0x00	; 0
    ed0c:	90 e0       	ldi	r25, 0x00	; 0
    ed0e:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
  MenuPrepareStyle();
    ed12:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4018
  draw_menu(true);
    ed16:	81 e0       	ldi	r24, 0x01	; 1
    ed18:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
  a2d_run_now = 1;
    ed1c:	81 e0       	ldi	r24, 0x01	; 1
    ed1e:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021

}
    ed22:	c3 5b       	subi	r28, 0xB3	; 179
    ed24:	de 4f       	sbci	r29, 0xFE	; 254
    ed26:	0f b6       	in	r0, 0x3f	; 63
    ed28:	f8 94       	cli
    ed2a:	de bf       	out	0x3e, r29	; 62
    ed2c:	0f be       	out	0x3f, r0	; 63
    ed2e:	cd bf       	out	0x3d, r28	; 61
    ed30:	df 91       	pop	r29
    ed32:	cf 91       	pop	r28
    ed34:	1f 91       	pop	r17
    ed36:	0f 91       	pop	r16
    ed38:	ff 90       	pop	r15
    ed3a:	ef 90       	pop	r14
    ed3c:	df 90       	pop	r13
    ed3e:	cf 90       	pop	r12
    ed40:	bf 90       	pop	r11
    ed42:	af 90       	pop	r10
    ed44:	9f 90       	pop	r9
    ed46:	8f 90       	pop	r8
    ed48:	7f 90       	pop	r7
    ed4a:	6f 90       	pop	r6
    ed4c:	5f 90       	pop	r5
    ed4e:	4f 90       	pop	r4
    ed50:	3f 90       	pop	r3
    ed52:	2f 90       	pop	r2
    ed54:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    ed56:	6c e2       	ldi	r22, 0x2C	; 44
    ed58:	73 e3       	ldi	r23, 0x33	; 51
    ed5a:	c1 01       	movw	r24, r2
    ed5c:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ed60:	ee 24       	eor	r14, r14
    ed62:	ea 94       	dec	r14
    ed64:	fe 2c       	mov	r15, r14
    ed66:	00 ee       	ldi	r16, 0xE0	; 224
    ed68:	17 e0       	ldi	r17, 0x07	; 7
    ed6a:	21 e0       	ldi	r18, 0x01	; 1
    ed6c:	4e e6       	ldi	r20, 0x6E	; 110
    ed6e:	50 e0       	ldi	r21, 0x00	; 0
    ed70:	6e e1       	ldi	r22, 0x1E	; 30
    ed72:	70 e0       	ldi	r23, 0x00	; 0
    ed74:	c1 01       	movw	r24, r2
    ed76:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    ed7a:	20 91 ea 0d 	lds	r18, 0x0DEA	; 0x800dea <my_lcd+0x14>
    ed7e:	30 91 eb 0d 	lds	r19, 0x0DEB	; 0x800deb <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    ed82:	40 91 e8 0d 	lds	r20, 0x0DE8	; 0x800de8 <my_lcd+0x12>
    ed86:	50 91 e9 0d 	lds	r21, 0x0DE9	; 0x800de9 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    ed8a:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    ed8e:	e0 91 cd 0d 	lds	r30, 0x0DCD	; 0x800dcd <my_touch+0x15>
    ed92:	f0 91 ce 0d 	lds	r31, 0x0DCE	; 0x800dce <my_touch+0x16>
    ed96:	80 81       	ld	r24, Z
    ed98:	60 91 d4 0d 	lds	r22, 0x0DD4	; 0x800dd4 <my_touch+0x1c>
    ed9c:	86 2b       	or	r24, r22
    ed9e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    eda0:	e0 91 c9 0d 	lds	r30, 0x0DC9	; 0x800dc9 <my_touch+0x11>
    eda4:	f0 91 ca 0d 	lds	r31, 0x0DCA	; 0x800dca <my_touch+0x12>
    eda8:	80 81       	ld	r24, Z
    edaa:	60 91 d2 0d 	lds	r22, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
    edae:	86 2b       	or	r24, r22
    edb0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    edb2:	e0 91 c7 0d 	lds	r30, 0x0DC7	; 0x800dc7 <my_touch+0xf>
    edb6:	f0 91 c8 0d 	lds	r31, 0x0DC8	; 0x800dc8 <my_touch+0x10>
    edba:	80 81       	ld	r24, Z
    edbc:	60 91 d1 0d 	lds	r22, 0x0DD1	; 0x800dd1 <my_touch+0x19>
    edc0:	86 2b       	or	r24, r22
    edc2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    edc4:	50 93 c1 0d 	sts	0x0DC1, r21	; 0x800dc1 <my_touch+0x9>
    edc8:	40 93 c0 0d 	sts	0x0DC0, r20	; 0x800dc0 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    edcc:	30 93 c3 0d 	sts	0x0DC3, r19	; 0x800dc3 <my_touch+0xb>
    edd0:	20 93 c2 0d 	sts	0x0DC2, r18	; 0x800dc2 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    edd4:	90 93 c6 0d 	sts	0x0DC6, r25	; 0x800dc6 <my_touch+0xe>
    edd8:	85 cf       	rjmp	.-246    	; 0xece4 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3875
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    edda:	60 ee       	ldi	r22, 0xE0	; 224
    eddc:	73 e3       	ldi	r23, 0x33	; 51
    edde:	8d 2d       	mov	r24, r13
    ede0:	9b 2d       	mov	r25, r11
    ede2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    ede6:	ee 24       	eor	r14, r14
    ede8:	ea 94       	dec	r14
    edea:	fe 2c       	mov	r15, r14
    edec:	00 e0       	ldi	r16, 0x00	; 0
    edee:	18 ef       	ldi	r17, 0xF8	; 248
    edf0:	21 e0       	ldi	r18, 0x01	; 1
    edf2:	48 e7       	ldi	r20, 0x78	; 120
    edf4:	50 e0       	ldi	r21, 0x00	; 0
    edf6:	60 ea       	ldi	r22, 0xA0	; 160
    edf8:	70 e0       	ldi	r23, 0x00	; 0
    edfa:	8d 2d       	mov	r24, r13
    edfc:	9b 2d       	mov	r25, r11
    edfe:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    ee02:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    ee06:	84 60       	ori	r24, 0x04	; 4
    ee08:	3d c3       	rjmp	.+1658   	; 0xf484 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    ee0a:	e8 e0       	ldi	r30, 0x08	; 8
    ee0c:	ae 12       	cpse	r10, r30
    ee0e:	9d c0       	rjmp	.+314    	; 0xef4a <setup+0x13b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884
    {
      strcpy_P(str1, text_onewire_hledam);
    ee10:	60 e1       	ldi	r22, 0x10	; 16
    ee12:	73 e3       	ldi	r23, 0x33	; 51
    ee14:	8d 2d       	mov	r24, r13
    ee16:	9b 2d       	mov	r25, r11
    ee18:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ee1c:	ee 24       	eor	r14, r14
    ee1e:	ea 94       	dec	r14
    ee20:	fe 2c       	mov	r15, r14
    ee22:	00 ee       	ldi	r16, 0xE0	; 224
    ee24:	17 e0       	ldi	r17, 0x07	; 7
    ee26:	21 e0       	ldi	r18, 0x01	; 1
    ee28:	42 e8       	ldi	r20, 0x82	; 130
    ee2a:	50 e0       	ldi	r21, 0x00	; 0
    ee2c:	6e e1       	ldi	r22, 0x1E	; 30
    ee2e:	70 e0       	ldi	r23, 0x00	; 0
    ee30:	8d 2d       	mov	r24, r13
    ee32:	9b 2d       	mov	r25, r11
    ee34:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3886
      Global_HWwirenum = 0;
    ee38:	10 92 1d 0a 	sts	0x0A1D, r1	; 0x800a1d <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
    ee3c:	10 92 92 09 	sts	0x0992, r1	; 0x800992 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
    ee40:	10 91 91 09 	lds	r17, 0x0991	; 0x800991 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
    ee44:	81 2f       	mov	r24, r17
    ee46:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
    ee4a:	85 e1       	ldi	r24, 0x15	; 21
    ee4c:	9e e0       	ldi	r25, 0x0E	; 14
    ee4e:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
    ee52:	81 11       	cpse	r24, r1
    ee54:	10 c0       	rjmp	.+32     	; 0xee76 <setup+0x12e2>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    ee56:	81 2f       	mov	r24, r17
    ee58:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
    ee5c:	82 ed       	ldi	r24, 0xD2	; 210
    ee5e:	90 e0       	ldi	r25, 0x00	; 0
    ee60:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
    ee64:	60 e0       	ldi	r22, 0x00	; 0
    ee66:	85 e1       	ldi	r24, 0x15	; 21
    ee68:	9e e0       	ldi	r25, 0x0E	; 14
    ee6a:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
    ee6e:	85 e1       	ldi	r24, 0x15	; 21
    ee70:	9e e0       	ldi	r25, 0x0E	; 14
    ee72:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
    ee76:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <ds2482_address>
    ee7a:	0e 94 e5 8e 	call	0x11dca	; 0x11dca <ds2482reset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
    ee7e:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <ds2482_address>
    ee82:	0e 94 af 8f 	call	0x11f5e	; 0x11f5e <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
    ee86:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
    ee8a:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <lastDevice>
    ee8e:	10 92 77 0b 	sts	0x0B77, r1	; 0x800b77 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
    ee92:	0e 94 e5 8f 	call	0x11fca	; 0x11fca <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    ee96:	81 11       	cpse	r24, r1
    ee98:	35 c0       	rjmp	.+106    	; 0xef04 <setup+0x1370>
    ee9a:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
    ee9c:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
    ee9e:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <ds2482_address+0x1>
    eea2:	86 30       	cpi	r24, 0x06	; 6
    eea4:	78 f5       	brcc	.+94     	; 0xef04 <setup+0x1370>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
    eea6:	20 91 1d 0a 	lds	r18, 0x0A1D	; 0x800a1d <Global_HWwirenum>
    eeaa:	42 2f       	mov	r20, r18
    eeac:	50 e0       	ldi	r21, 0x00	; 0
    eeae:	a8 e7       	ldi	r26, 0x78	; 120
    eeb0:	bb e0       	ldi	r27, 0x0B	; 11
    eeb2:	21 9f       	mul	r18, r17
    eeb4:	90 01       	movw	r18, r0
    eeb6:	11 24       	eor	r1, r1
    eeb8:	90 e0       	ldi	r25, 0x00	; 0
    eeba:	80 e0       	ldi	r24, 0x00	; 0
    eebc:	6d 91       	ld	r22, X+
    eebe:	fc 01       	movw	r30, r24
    eec0:	e2 0f       	add	r30, r18
    eec2:	f3 1f       	adc	r31, r19
    eec4:	e5 52       	subi	r30, 0x25	; 37
    eec6:	f6 4f       	sbci	r31, 0xF6	; 246
    eec8:	60 83       	st	Z, r22
    eeca:	01 96       	adiw	r24, 0x01	; 1
    eecc:	88 30       	cpi	r24, 0x08	; 8
    eece:	91 05       	cpc	r25, r1
    eed0:	a9 f7       	brne	.-22     	; 0xeebc <setup+0x1328>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
    eed2:	14 9f       	mul	r17, r20
    eed4:	f0 01       	movw	r30, r0
    eed6:	15 9f       	mul	r17, r21
    eed8:	f0 0d       	add	r31, r0
    eeda:	11 24       	eor	r1, r1
    eedc:	e5 52       	subi	r30, 0x25	; 37
    eede:	f6 4f       	sbci	r31, 0xF6	; 246
    eee0:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
    eee2:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
    eee4:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <ds2482_address>
    eee8:	0e 94 e5 8f 	call	0x11fca	; 0x11fca <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
    eeec:	90 91 92 09 	lds	r25, 0x0992	; 0x800992 <ds2482_address+0x1>
    eef0:	9f 5f       	subi	r25, 0xFF	; 255
    eef2:	90 93 92 09 	sts	0x0992, r25	; 0x800992 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
    eef6:	90 91 1d 0a 	lds	r25, 0x0A1D	; 0x800a1d <Global_HWwirenum>
    eefa:	9f 5f       	subi	r25, 0xFF	; 255
    eefc:	90 93 1d 0a 	sts	0x0A1D, r25	; 0x800a1d <Global_HWwirenum>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
    ef00:	85 30       	cpi	r24, 0x05	; 5
    ef02:	69 f6       	brne	.-102    	; 0xee9e <setup+0x130a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3888
      one_hw_search_device(0);
      tds_update_associate();
    ef04:	0e 94 82 53 	call	0xa704	; 0xa704 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3889
      strcpy (str1, "Nalezeno: ");
    ef08:	67 e0       	ldi	r22, 0x07	; 7
    ef0a:	77 e0       	ldi	r23, 0x07	; 7
    ef0c:	8d 2d       	mov	r24, r13
    ef0e:	9b 2d       	mov	r25, r11
    ef10:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3890
      itoa(Global_HWwirenum, str2, 10);
    ef14:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    ef18:	4a e0       	ldi	r20, 0x0A	; 10
    ef1a:	be 01       	movw	r22, r28
    ef1c:	68 57       	subi	r22, 0x78	; 120
    ef1e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef20:	90 e0       	ldi	r25, 0x00	; 0
    ef22:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3891
      strcat(str1, str2);
    ef26:	be 01       	movw	r22, r28
    ef28:	68 57       	subi	r22, 0x78	; 120
    ef2a:	7f 4f       	sbci	r23, 0xFF	; 255
    ef2c:	8d 2d       	mov	r24, r13
    ef2e:	9b 2d       	mov	r25, r11
    ef30:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ef34:	ee 24       	eor	r14, r14
    ef36:	ea 94       	dec	r14
    ef38:	fe 2c       	mov	r15, r14
    ef3a:	00 ee       	ldi	r16, 0xE0	; 224
    ef3c:	17 e0       	ldi	r17, 0x07	; 7
    ef3e:	21 e0       	ldi	r18, 0x01	; 1
    ef40:	42 e8       	ldi	r20, 0x82	; 130
    ef42:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ef44:	60 ea       	ldi	r22, 0xA0	; 160
    ef46:	70 e0       	ldi	r23, 0x00	; 0
    ef48:	cc cd       	rjmp	.-1128   	; 0xeae2 <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3896
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    ef4a:	f9 e0       	ldi	r31, 0x09	; 9
    ef4c:	af 12       	cpse	r10, r31
    ef4e:	9d c2       	rjmp	.+1338   	; 0xf48a <setup+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3898
    {
      digitalWrite(ETH_RST, HIGH);
    ef50:	61 e0       	ldi	r22, 0x01	; 1
    ef52:	86 e0       	ldi	r24, 0x06	; 6
    ef54:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3899
      delay(10);
    ef58:	6a e0       	ldi	r22, 0x0A	; 10
    ef5a:	70 e0       	ldi	r23, 0x00	; 0
    ef5c:	80 e0       	ldi	r24, 0x00	; 0
    ef5e:	90 e0       	ldi	r25, 0x00	; 0
    ef60:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
      digitalWrite(ETH_RST, LOW);
    ef64:	60 e0       	ldi	r22, 0x00	; 0
    ef66:	86 e0       	ldi	r24, 0x06	; 6
    ef68:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
      delay(10);
    ef6c:	6a e0       	ldi	r22, 0x0A	; 10
    ef6e:	70 e0       	ldi	r23, 0x00	; 0
    ef70:	80 e0       	ldi	r24, 0x00	; 0
    ef72:	90 e0       	ldi	r25, 0x00	; 0
    ef74:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3902
      digitalWrite(ETH_RST, HIGH);
    ef78:	61 e0       	ldi	r22, 0x01	; 1
    ef7a:	86 e0       	ldi	r24, 0x06	; 6
    ef7c:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3903
      delay(100);
    ef80:	64 e6       	ldi	r22, 0x64	; 100
    ef82:	70 e0       	ldi	r23, 0x00	; 0
    ef84:	80 e0       	ldi	r24, 0x00	; 0
    ef86:	90 e0       	ldi	r25, 0x00	; 0
    ef88:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    ef8c:	8f e0       	ldi	r24, 0x0F	; 15
    ef8e:	80 93 32 0c 	sts	0x0C32, r24	; 0x800c32 <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    ef92:	82 ee       	ldi	r24, 0xE2	; 226
    ef94:	92 e0       	ldi	r25, 0x02	; 2
    ef96:	ce 5c       	subi	r28, 0xCE	; 206
    ef98:	de 4f       	sbci	r29, 0xFE	; 254
    ef9a:	99 83       	std	Y+1, r25	; 0x01
    ef9c:	88 83       	st	Y, r24
    ef9e:	c2 53       	subi	r28, 0x32	; 50
    efa0:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    efa2:	24 e0       	ldi	r18, 0x04	; 4
    efa4:	e5 e4       	ldi	r30, 0x45	; 69
    efa6:	fc e0       	ldi	r31, 0x0C	; 12
    efa8:	cc 5b       	subi	r28, 0xBC	; 188
    efaa:	de 4f       	sbci	r29, 0xFE	; 254
    efac:	a8 81       	ld	r26, Y
    efae:	b9 81       	ldd	r27, Y+1	; 0x01
    efb0:	c4 54       	subi	r28, 0x44	; 68
    efb2:	d1 40       	sbci	r29, 0x01	; 1
    efb4:	01 90       	ld	r0, Z+
    efb6:	0d 92       	st	X+, r0
    efb8:	2a 95       	dec	r18
    efba:	e1 f7       	brne	.-8      	; 0xefb4 <setup+0x1420>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    efbc:	c4 5d       	subi	r28, 0xD4	; 212
    efbe:	de 4f       	sbci	r29, 0xFE	; 254
    efc0:	99 83       	std	Y+1, r25	; 0x01
    efc2:	88 83       	st	Y, r24
    efc4:	cc 52       	subi	r28, 0x2C	; 44
    efc6:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    efc8:	24 e0       	ldi	r18, 0x04	; 4
    efca:	ed e4       	ldi	r30, 0x4D	; 77
    efcc:	fc e0       	ldi	r31, 0x0C	; 12
    efce:	ca 5b       	subi	r28, 0xBA	; 186
    efd0:	de 4f       	sbci	r29, 0xFE	; 254
    efd2:	a8 81       	ld	r26, Y
    efd4:	b9 81       	ldd	r27, Y+1	; 0x01
    efd6:	c6 54       	subi	r28, 0x46	; 70
    efd8:	d1 40       	sbci	r29, 0x01	; 1
    efda:	01 90       	ld	r0, Z+
    efdc:	0d 92       	st	X+, r0
    efde:	2a 95       	dec	r18
    efe0:	e1 f7       	brne	.-8      	; 0xefda <setup+0x1446>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    efe2:	ca 5d       	subi	r28, 0xDA	; 218
    efe4:	de 4f       	sbci	r29, 0xFE	; 254
    efe6:	99 83       	std	Y+1, r25	; 0x01
    efe8:	88 83       	st	Y, r24
    efea:	c6 52       	subi	r28, 0x26	; 38
    efec:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    efee:	24 e0       	ldi	r18, 0x04	; 4
    eff0:	e9 e4       	ldi	r30, 0x49	; 73
    eff2:	fc e0       	ldi	r31, 0x0C	; 12
    eff4:	c8 5b       	subi	r28, 0xB8	; 184
    eff6:	de 4f       	sbci	r29, 0xFE	; 254
    eff8:	a8 81       	ld	r26, Y
    effa:	b9 81       	ldd	r27, Y+1	; 0x01
    effc:	c8 54       	subi	r28, 0x48	; 72
    effe:	d1 40       	sbci	r29, 0x01	; 1
    f000:	01 90       	ld	r0, Z+
    f002:	0d 92       	st	X+, r0
    f004:	2a 95       	dec	r18
    f006:	e1 f7       	brne	.-8      	; 0xf000 <setup+0x146c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f008:	c2 52       	subi	r28, 0x22	; 34
    f00a:	df 4f       	sbci	r29, 0xFF	; 255
    f00c:	99 83       	std	Y+1, r25	; 0x01
    f00e:	88 83       	st	Y, r24
    f010:	ce 5d       	subi	r28, 0xDE	; 222
    f012:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f014:	84 e0       	ldi	r24, 0x04	; 4
    f016:	e1 e4       	ldi	r30, 0x41	; 65
    f018:	fc e0       	ldi	r31, 0x0C	; 12
    f01a:	c6 5b       	subi	r28, 0xB6	; 182
    f01c:	de 4f       	sbci	r29, 0xFE	; 254
    f01e:	a8 81       	ld	r26, Y
    f020:	b9 81       	ldd	r27, Y+1	; 0x01
    f022:	ca 54       	subi	r28, 0x4A	; 74
    f024:	d1 40       	sbci	r29, 0x01	; 1
    f026:	01 90       	ld	r0, Z+
    f028:	0d 92       	st	X+, r0
    f02a:	8a 95       	dec	r24
    f02c:	e1 f7       	brne	.-8      	; 0xf026 <setup+0x1492>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3905
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    f02e:	9e 01       	movw	r18, r28
    f030:	2e 5c       	subi	r18, 0xCE	; 206
    f032:	3e 4f       	sbci	r19, 0xFE	; 254
    f034:	ae 01       	movw	r20, r28
    f036:	44 5d       	subi	r20, 0xD4	; 212
    f038:	5e 4f       	sbci	r21, 0xFE	; 254
    f03a:	be 01       	movw	r22, r28
    f03c:	6a 5d       	subi	r22, 0xDA	; 218
    f03e:	7e 4f       	sbci	r23, 0xFE	; 254
    f040:	ce 01       	movw	r24, r28
    f042:	82 52       	subi	r24, 0x22	; 34
    f044:	9f 4f       	sbci	r25, 0xFF	; 255
    f046:	0e 94 5d 95 	call	0x12aba	; 0x12aba <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3906
      strcpy_P(str1, text_ethernet_rozhrani);
    f04a:	6e ef       	ldi	r22, 0xFE	; 254
    f04c:	72 e3       	ldi	r23, 0x32	; 50
    f04e:	8d 2d       	mov	r24, r13
    f050:	9b 2d       	mov	r25, r11
    f052:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3907
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f056:	ee 24       	eor	r14, r14
    f058:	ea 94       	dec	r14
    f05a:	fe 2c       	mov	r15, r14
    f05c:	00 ee       	ldi	r16, 0xE0	; 224
    f05e:	17 e0       	ldi	r17, 0x07	; 7
    f060:	21 e0       	ldi	r18, 0x01	; 1
    f062:	4c e8       	ldi	r20, 0x8C	; 140
    f064:	50 e0       	ldi	r21, 0x00	; 0
    f066:	6e e1       	ldi	r22, 0x1E	; 30
    f068:	70 e0       	ldi	r23, 0x00	; 0
    f06a:	8d 2d       	mov	r24, r13
    f06c:	9b 2d       	mov	r25, r11
    f06e:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3908
      delay(100);
    f072:	64 e6       	ldi	r22, 0x64	; 100
    f074:	70 e0       	ldi	r23, 0x00	; 0
    f076:	80 e0       	ldi	r24, 0x00	; 0
    f078:	90 e0       	ldi	r25, 0x00	; 0
    f07a:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
    f07e:	32 ce       	rjmp	.-924    	; 0xece4 <setup+0x1150>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f080:	90 62       	ori	r25, 0x20	; 32
    f082:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <selftest_data>
    f086:	42 c2       	rjmp	.+1156   	; 0xf50c <setup+0x1978>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3939
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
    f088:	6a e5       	ldi	r22, 0x5A	; 90
    f08a:	73 e3       	ldi	r23, 0x33	; 51
    f08c:	8d 2d       	mov	r24, r13
    f08e:	9b 2d       	mov	r25, r11
    f090:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f094:	ee 24       	eor	r14, r14
    f096:	ea 94       	dec	r14
    f098:	fe 2c       	mov	r15, r14
    f09a:	00 ee       	ldi	r16, 0xE0	; 224
    f09c:	17 e0       	ldi	r17, 0x07	; 7
    f09e:	5b c2       	rjmp	.+1206   	; 0xf556 <setup+0x19c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3946
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    f0a0:	3b e0       	ldi	r19, 0x0B	; 11
    f0a2:	a3 12       	cpse	r10, r19
    f0a4:	0f c0       	rjmp	.+30     	; 0xf0c4 <setup+0x1530>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
    {
      strcpy_P(str1, text_rest_rozhrani);
    f0a6:	6f ec       	ldi	r22, 0xCF	; 207
    f0a8:	72 e3       	ldi	r23, 0x32	; 50
    f0aa:	8d 2d       	mov	r24, r13
    f0ac:	9b 2d       	mov	r25, r11
    f0ae:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3949
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f0b2:	ee 24       	eor	r14, r14
    f0b4:	ea 94       	dec	r14
    f0b6:	fe 2c       	mov	r15, r14
    f0b8:	00 ee       	ldi	r16, 0xE0	; 224
    f0ba:	17 e0       	ldi	r17, 0x07	; 7
    f0bc:	21 e0       	ldi	r18, 0x01	; 1
    f0be:	40 ea       	ldi	r20, 0xA0	; 160
    f0c0:	50 e0       	ldi	r21, 0x00	; 0
    f0c2:	0d cd       	rjmp	.-1510   	; 0xeade <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    }
    ///
    /// inicializace nrf
    if (init == 12)
    f0c4:	8c e0       	ldi	r24, 0x0C	; 12
    f0c6:	a8 12       	cpse	r10, r24
    f0c8:	4a c2       	rjmp	.+1172   	; 0xf55e <setup+0x19ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3955
    {
      strcpy_P(str1, text_nrf_rozhrani);
    f0ca:	62 ec       	ldi	r22, 0xC2	; 194
    f0cc:	72 e3       	ldi	r23, 0x32	; 50
    f0ce:	8d 2d       	mov	r24, r13
    f0d0:	9b 2d       	mov	r25, r11
    f0d2:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3956
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f0d6:	ee 24       	eor	r14, r14
    f0d8:	ea 94       	dec	r14
    f0da:	fe 2c       	mov	r15, r14
    f0dc:	00 ee       	ldi	r16, 0xE0	; 224
    f0de:	17 e0       	ldi	r17, 0x07	; 7
    f0e0:	21 e0       	ldi	r18, 0x01	; 1
    f0e2:	4a ea       	ldi	r20, 0xAA	; 170
    f0e4:	50 e0       	ldi	r21, 0x00	; 0
    f0e6:	fb cc       	rjmp	.-1546   	; 0xeade <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
    f0e8:	d8 01       	movw	r26, r16
    f0ea:	d2 96       	adiw	r26, 0x32	; 50
    f0ec:	8d 91       	ld	r24, X+
    f0ee:	9d 91       	ld	r25, X+
    f0f0:	0d 90       	ld	r0, X+
    f0f2:	bc 91       	ld	r27, X
    f0f4:	a0 2d       	mov	r26, r0
    f0f6:	c8 5c       	subi	r28, 0xC8	; 200
    f0f8:	de 4f       	sbci	r29, 0xFE	; 254
    f0fa:	88 83       	st	Y, r24
    f0fc:	99 83       	std	Y+1, r25	; 0x01
    f0fe:	aa 83       	std	Y+2, r26	; 0x02
    f100:	bb 83       	std	Y+3, r27	; 0x03
    f102:	c8 53       	subi	r28, 0x38	; 56
    f104:	d1 40       	sbci	r29, 0x01	; 1
    f106:	9c 01       	movw	r18, r24
    f108:	ad 01       	movw	r20, r26
    f10a:	c3 01       	movw	r24, r6
    f10c:	b2 01       	movw	r22, r4
    f10e:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
    f112:	87 fd       	sbrc	r24, 7
    f114:	13 c3       	rjmp	.+1574   	; 0xf73c <setup+0x1ba8>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    f116:	d8 01       	movw	r26, r16
    f118:	da 96       	adiw	r26, 0x3a	; 58
    f11a:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    f11c:	f8 01       	movw	r30, r16
    f11e:	12 aa       	std	Z+50, r1	; 0x32
    f120:	13 aa       	std	Z+51, r1	; 0x33
    f122:	14 aa       	std	Z+52, r1	; 0x34
    f124:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    f126:	80 e0       	ldi	r24, 0x00	; 0
    f128:	90 e0       	ldi	r25, 0x00	; 0
    f12a:	af e7       	ldi	r26, 0x7F	; 127
    f12c:	b3 e4       	ldi	r27, 0x43	; 67
    f12e:	86 ab       	std	Z+54, r24	; 0x36
    f130:	97 ab       	std	Z+55, r25	; 0x37
    f132:	a0 af       	std	Z+56, r26	; 0x38
    f134:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    f136:	26 8d       	ldd	r18, Z+30	; 0x1e
    f138:	37 8d       	ldd	r19, Z+31	; 0x1f
    f13a:	c8 5c       	subi	r28, 0xC8	; 200
    f13c:	de 4f       	sbci	r29, 0xFE	; 254
    f13e:	39 83       	std	Y+1, r19	; 0x01
    f140:	28 83       	st	Y, r18
    f142:	c8 53       	subi	r28, 0x38	; 56
    f144:	d1 40       	sbci	r29, 0x01	; 1
    f146:	d9 01       	movw	r26, r18
    f148:	4d 90       	ld	r4, X+
    f14a:	5d 90       	ld	r5, X+
    f14c:	6d 90       	ld	r6, X+
    f14e:	7c 90       	ld	r7, X
    f150:	20 e0       	ldi	r18, 0x00	; 0
    f152:	30 e0       	ldi	r19, 0x00	; 0
    f154:	4f e7       	ldi	r20, 0x7F	; 127
    f156:	53 e4       	ldi	r21, 0x43	; 67
    f158:	c3 01       	movw	r24, r6
    f15a:	b2 01       	movw	r22, r4
    f15c:	0e 94 66 b3 	call	0x166cc	; 0x166cc <__gesf2>
    f160:	18 16       	cp	r1, r24
    f162:	94 f5       	brge	.+100    	; 0xf1c8 <setup+0x1634>
    f164:	80 e0       	ldi	r24, 0x00	; 0
    f166:	90 e0       	ldi	r25, 0x00	; 0
    f168:	af e7       	ldi	r26, 0x7F	; 127
    f16a:	b3 e4       	ldi	r27, 0x43	; 67
    f16c:	c8 5c       	subi	r28, 0xC8	; 200
    f16e:	de 4f       	sbci	r29, 0xFE	; 254
    f170:	e8 81       	ld	r30, Y
    f172:	f9 81       	ldd	r31, Y+1	; 0x01
    f174:	c8 53       	subi	r28, 0x38	; 56
    f176:	d1 40       	sbci	r29, 0x01	; 1
    f178:	80 83       	st	Z, r24
    f17a:	91 83       	std	Z+1, r25	; 0x01
    f17c:	a2 83       	std	Z+2, r26	; 0x02
    f17e:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    f180:	d8 01       	movw	r26, r16
    f182:	96 96       	adiw	r26, 0x26	; 38
    f184:	8d 91       	ld	r24, X+
    f186:	9d 91       	ld	r25, X+
    f188:	0d 90       	ld	r0, X+
    f18a:	bc 91       	ld	r27, X
    f18c:	a0 2d       	mov	r26, r0
    f18e:	c8 5c       	subi	r28, 0xC8	; 200
    f190:	de 4f       	sbci	r29, 0xFE	; 254
    f192:	88 83       	st	Y, r24
    f194:	99 83       	std	Y+1, r25	; 0x01
    f196:	aa 83       	std	Y+2, r26	; 0x02
    f198:	bb 83       	std	Y+3, r27	; 0x03
    f19a:	c8 53       	subi	r28, 0x38	; 56
    f19c:	d1 40       	sbci	r29, 0x01	; 1
    f19e:	f8 01       	movw	r30, r16
    f1a0:	46 a8       	ldd	r4, Z+54	; 0x36
    f1a2:	57 a8       	ldd	r5, Z+55	; 0x37
    f1a4:	60 ac       	ldd	r6, Z+56	; 0x38
    f1a6:	71 ac       	ldd	r7, Z+57	; 0x39
    f1a8:	a3 01       	movw	r20, r6
    f1aa:	92 01       	movw	r18, r4
    f1ac:	bc 01       	movw	r22, r24
    f1ae:	cd 01       	movw	r24, r26
    f1b0:	0e 94 66 b3 	call	0x166cc	; 0x166cc <__gesf2>
    f1b4:	18 16       	cp	r1, r24
    f1b6:	ec f4       	brge	.+58     	; 0xf1f2 <setup+0x165e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
    f1b8:	d8 01       	movw	r26, r16
    f1ba:	96 96       	adiw	r26, 0x26	; 38
    f1bc:	4d 92       	st	X+, r4
    f1be:	5d 92       	st	X+, r5
    f1c0:	6d 92       	st	X+, r6
    f1c2:	7c 92       	st	X, r7
    f1c4:	99 97       	sbiw	r26, 0x29	; 41
    f1c6:	28 c0       	rjmp	.+80     	; 0xf218 <setup+0x1684>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
    f1c8:	20 e0       	ldi	r18, 0x00	; 0
    f1ca:	30 e0       	ldi	r19, 0x00	; 0
    f1cc:	a9 01       	movw	r20, r18
    f1ce:	c3 01       	movw	r24, r6
    f1d0:	b2 01       	movw	r22, r4
    f1d2:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
    f1d6:	87 ff       	sbrs	r24, 7
    f1d8:	d3 cf       	rjmp	.-90     	; 0xf180 <setup+0x15ec>
    f1da:	c8 5c       	subi	r28, 0xC8	; 200
    f1dc:	de 4f       	sbci	r29, 0xFE	; 254
    f1de:	a8 81       	ld	r26, Y
    f1e0:	b9 81       	ldd	r27, Y+1	; 0x01
    f1e2:	c8 53       	subi	r28, 0x38	; 56
    f1e4:	d1 40       	sbci	r29, 0x01	; 1
    f1e6:	1d 92       	st	X+, r1
    f1e8:	1d 92       	st	X+, r1
    f1ea:	1d 92       	st	X+, r1
    f1ec:	1c 92       	st	X, r1
    f1ee:	13 97       	sbiw	r26, 0x03	; 3
    f1f0:	c7 cf       	rjmp	.-114    	; 0xf180 <setup+0x15ec>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
    f1f2:	f8 01       	movw	r30, r16
    f1f4:	42 a8       	ldd	r4, Z+50	; 0x32
    f1f6:	53 a8       	ldd	r5, Z+51	; 0x33
    f1f8:	64 a8       	ldd	r6, Z+52	; 0x34
    f1fa:	75 a8       	ldd	r7, Z+53	; 0x35
    f1fc:	a3 01       	movw	r20, r6
    f1fe:	92 01       	movw	r18, r4
    f200:	c8 5c       	subi	r28, 0xC8	; 200
    f202:	de 4f       	sbci	r29, 0xFE	; 254
    f204:	68 81       	ld	r22, Y
    f206:	79 81       	ldd	r23, Y+1	; 0x01
    f208:	8a 81       	ldd	r24, Y+2	; 0x02
    f20a:	9b 81       	ldd	r25, Y+3	; 0x03
    f20c:	c8 53       	subi	r28, 0x38	; 56
    f20e:	d1 40       	sbci	r29, 0x01	; 1
    f210:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
    f214:	87 fd       	sbrc	r24, 7
    f216:	d0 cf       	rjmp	.-96     	; 0xf1b8 <setup+0x1624>
    f218:	c0 5c       	subi	r28, 0xC0	; 192
    f21a:	de 4f       	sbci	r29, 0xFE	; 254
    f21c:	e8 81       	ld	r30, Y
    f21e:	f9 81       	ldd	r31, Y+1	; 0x01
    f220:	c0 54       	subi	r28, 0x40	; 64
    f222:	d1 40       	sbci	r29, 0x01	; 1
    f224:	34 96       	adiw	r30, 0x04	; 4
    f226:	c0 5c       	subi	r28, 0xC0	; 192
    f228:	de 4f       	sbci	r29, 0xFE	; 254
    f22a:	f9 83       	std	Y+1, r31	; 0x01
    f22c:	e8 83       	st	Y, r30
    f22e:	c0 54       	subi	r28, 0x40	; 64
    f230:	d1 40       	sbci	r29, 0x01	; 1
    f232:	ce 5b       	subi	r28, 0xBE	; 190
    f234:	de 4f       	sbci	r29, 0xFE	; 254
    f236:	28 81       	ld	r18, Y
    f238:	39 81       	ldd	r19, Y+1	; 0x01
    f23a:	c2 54       	subi	r28, 0x42	; 66
    f23c:	d1 40       	sbci	r29, 0x01	; 1
    f23e:	2c 5f       	subi	r18, 0xFC	; 252
    f240:	3f 4f       	sbci	r19, 0xFF	; 255
    f242:	ce 5b       	subi	r28, 0xBE	; 190
    f244:	de 4f       	sbci	r29, 0xFE	; 254
    f246:	39 83       	std	Y+1, r19	; 0x01
    f248:	28 83       	st	Y, r18
    f24a:	c2 54       	subi	r28, 0x42	; 66
    f24c:	d1 40       	sbci	r29, 0x01	; 1
    f24e:	34 e0       	ldi	r19, 0x04	; 4
    f250:	e3 0e       	add	r14, r19
    f252:	f1 1c       	adc	r15, r1
    f254:	82 e0       	ldi	r24, 0x02	; 2
    f256:	88 0e       	add	r8, r24
    f258:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
    f25a:	9a e0       	ldi	r25, 0x0A	; 10
    f25c:	89 16       	cp	r8, r25
    f25e:	91 04       	cpc	r9, r1
    f260:	09 f0       	breq	.+2      	; 0xf264 <setup+0x16d0>
    f262:	ad c1       	rjmp	.+858    	; 0xf5be <setup+0x1a2a>
    f264:	ab e2       	ldi	r26, 0x2B	; 43
    f266:	ba e0       	ldi	r27, 0x0A	; 10
    f268:	c8 5c       	subi	r28, 0xC8	; 200
    f26a:	de 4f       	sbci	r29, 0xFE	; 254
    f26c:	b9 83       	std	Y+1, r27	; 0x01
    f26e:	a8 83       	st	Y, r26
    f270:	c8 53       	subi	r28, 0x38	; 56
    f272:	d1 40       	sbci	r29, 0x01	; 1
    f274:	43 e9       	ldi	r20, 0x93	; 147
    f276:	44 2e       	mov	r4, r20
    f278:	49 e0       	ldi	r20, 0x09	; 9
    f27a:	54 2e       	mov	r5, r20
    f27c:	57 ea       	ldi	r21, 0xA7	; 167
    f27e:	65 2e       	mov	r6, r21
    f280:	59 e0       	ldi	r21, 0x09	; 9
    f282:	75 2e       	mov	r7, r21
    f284:	6b eb       	ldi	r22, 0xBB	; 187
    f286:	86 2e       	mov	r8, r22
    f288:	69 e0       	ldi	r22, 0x09	; 9
    f28a:	96 2e       	mov	r9, r22
    f28c:	7f ec       	ldi	r23, 0xCF	; 207
    f28e:	e7 2e       	mov	r14, r23
    f290:	79 e0       	ldi	r23, 0x09	; 9
    f292:	f7 2e       	mov	r15, r23
    f294:	00 e6       	ldi	r16, 0x60	; 96
    f296:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f298:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    f29a:	c8 5c       	subi	r28, 0xC8	; 200
    f29c:	de 4f       	sbci	r29, 0xFE	; 254
    f29e:	e8 81       	ld	r30, Y
    f2a0:	f9 81       	ldd	r31, Y+1	; 0x01
    f2a2:	c8 53       	subi	r28, 0x38	; 56
    f2a4:	d1 40       	sbci	r29, 0x01	; 1
    f2a6:	11 92       	st	Z+, r1
    f2a8:	c8 5c       	subi	r28, 0xC8	; 200
    f2aa:	de 4f       	sbci	r29, 0xFE	; 254
    f2ac:	f9 83       	std	Y+1, r31	; 0x01
    f2ae:	e8 83       	st	Y, r30
    f2b0:	c8 53       	subi	r28, 0x38	; 56
    f2b2:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
    f2b4:	c8 01       	movw	r24, r16
    f2b6:	0e 94 da 94 	call	0x129b4	; 0x129b4 <EEPROMreadFloat(unsigned int)>
    f2ba:	d2 01       	movw	r26, r4
    f2bc:	6d 93       	st	X+, r22
    f2be:	7d 93       	st	X+, r23
    f2c0:	8d 93       	st	X+, r24
    f2c2:	9d 93       	st	X+, r25
    f2c4:	2d 01       	movw	r4, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
    f2c6:	c8 01       	movw	r24, r16
    f2c8:	04 96       	adiw	r24, 0x04	; 4
    f2ca:	0e 94 da 94 	call	0x129b4	; 0x129b4 <EEPROMreadFloat(unsigned int)>
    f2ce:	f3 01       	movw	r30, r6
    f2d0:	61 93       	st	Z+, r22
    f2d2:	71 93       	st	Z+, r23
    f2d4:	81 93       	st	Z+, r24
    f2d6:	91 93       	st	Z+, r25
    f2d8:	3f 01       	movw	r6, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
    f2da:	c8 01       	movw	r24, r16
    f2dc:	08 96       	adiw	r24, 0x08	; 8
    f2de:	0e 94 da 94 	call	0x129b4	; 0x129b4 <EEPROMreadFloat(unsigned int)>
    f2e2:	d4 01       	movw	r26, r8
    f2e4:	6d 93       	st	X+, r22
    f2e6:	7d 93       	st	X+, r23
    f2e8:	8d 93       	st	X+, r24
    f2ea:	9d 93       	st	X+, r25
    f2ec:	4d 01       	movw	r8, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
    f2ee:	c8 01       	movw	r24, r16
    f2f0:	0c 96       	adiw	r24, 0x0c	; 12
    f2f2:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f2f6:	f7 01       	movw	r30, r14
    f2f8:	81 93       	st	Z+, r24
    f2fa:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3971
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
    f2fc:	8c 2d       	mov	r24, r12
    f2fe:	0e 94 21 22 	call	0x4442	; 0x4442 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f302:	c3 94       	inc	r12
    f304:	0f 5d       	subi	r16, 0xDF	; 223
    f306:	1f 4f       	sbci	r17, 0xFF	; 255
    f308:	f5 e0       	ldi	r31, 0x05	; 5
    f30a:	cf 12       	cpse	r12, r31
    f30c:	c6 cf       	rjmp	.-116    	; 0xf29a <setup+0x1706>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
    f30e:	8c e5       	ldi	r24, 0x5C	; 92
    f310:	90 e0       	ldi	r25, 0x00	; 0
    f312:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
    f316:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2231
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
    f31a:	8d e5       	ldi	r24, 0x5D	; 93
    f31c:	90 e0       	ldi	r25, 0x00	; 0
    f31e:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    f322:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <default_show_temp>
    f326:	de cc       	rjmp	.-1604   	; 0xece4 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3990
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
    f328:	6a e5       	ldi	r22, 0x5A	; 90
    f32a:	73 e3       	ldi	r23, 0x33	; 51
    f32c:	c1 01       	movw	r24, r2
    f32e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f332:	ee 24       	eor	r14, r14
    f334:	ea 94       	dec	r14
    f336:	fe 2c       	mov	r15, r14
    f338:	00 ee       	ldi	r16, 0xE0	; 224
    f33a:	17 e0       	ldi	r17, 0x07	; 7
    f33c:	21 e0       	ldi	r18, 0x01	; 1
    f33e:	4e eb       	ldi	r20, 0xBE	; 190
    f340:	50 e0       	ldi	r21, 0x00	; 0
    f342:	60 ea       	ldi	r22, 0xA0	; 160
    f344:	70 e0       	ldi	r23, 0x00	; 0
    f346:	c1 01       	movw	r24, r2
    f348:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f34c:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    f350:	8d 7f       	andi	r24, 0xFD	; 253
    f352:	98 c0       	rjmp	.+304    	; 0xf484 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    f354:	bf e0       	ldi	r27, 0x0F	; 15
    f356:	ab 12       	cpse	r10, r27
    f358:	c5 cc       	rjmp	.-1654   	; 0xece4 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
    {
      strcpy_P(str1, text_rtc_cas);
    f35a:	6d e8       	ldi	r22, 0x8D	; 141
    f35c:	72 e3       	ldi	r23, 0x32	; 50
    f35e:	8d 2d       	mov	r24, r13
    f360:	9b 2d       	mov	r25, r11
    f362:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4000
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f366:	ee 24       	eor	r14, r14
    f368:	ea 94       	dec	r14
    f36a:	fe 2c       	mov	r15, r14
    f36c:	00 ee       	ldi	r16, 0xE0	; 224
    f36e:	17 e0       	ldi	r17, 0x07	; 7
    f370:	21 e0       	ldi	r18, 0x01	; 1
    f372:	48 ec       	ldi	r20, 0xC8	; 200
    f374:	50 e0       	ldi	r21, 0x00	; 0
    f376:	6e e1       	ldi	r22, 0x1E	; 30
    f378:	70 e0       	ldi	r23, 0x00	; 0
    f37a:	8d 2d       	mov	r24, r13
    f37c:	9b 2d       	mov	r25, r11
    f37e:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4001
      if (rtc.isrunning())
    f382:	0e 94 ce 8e 	call	0x11d9c	; 0x11d9c <RTC_DS1307::isrunning() [clone .constprop.127]>
    f386:	88 23       	and	r24, r24
    f388:	99 f0       	breq	.+38     	; 0xf3b0 <setup+0x181c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4003
      {
        strcpy_P(str1, text_ok);
    f38a:	6a e5       	ldi	r22, 0x5A	; 90
    f38c:	73 e3       	ldi	r23, 0x33	; 51
    f38e:	8d 2d       	mov	r24, r13
    f390:	9b 2d       	mov	r25, r11
    f392:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f396:	21 e0       	ldi	r18, 0x01	; 1
    f398:	48 ec       	ldi	r20, 0xC8	; 200
    f39a:	50 e0       	ldi	r21, 0x00	; 0
    f39c:	60 ea       	ldi	r22, 0xA0	; 160
    f39e:	70 e0       	ldi	r23, 0x00	; 0
    f3a0:	8d 2d       	mov	r24, r13
    f3a2:	9b 2d       	mov	r25, r11
    f3a4:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f3a8:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    f3ac:	8e 7f       	andi	r24, 0xFE	; 254
    f3ae:	6a c0       	rjmp	.+212    	; 0xf484 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
    f3b0:	60 ee       	ldi	r22, 0xE0	; 224
    f3b2:	73 e3       	ldi	r23, 0x33	; 51
    f3b4:	8d 2d       	mov	r24, r13
    f3b6:	9b 2d       	mov	r25, r11
    f3b8:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4010
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f3bc:	ee 24       	eor	r14, r14
    f3be:	ea 94       	dec	r14
    f3c0:	fe 2c       	mov	r15, r14
    f3c2:	00 e0       	ldi	r16, 0x00	; 0
    f3c4:	18 ef       	ldi	r17, 0xF8	; 248
    f3c6:	21 e0       	ldi	r18, 0x01	; 1
    f3c8:	48 ec       	ldi	r20, 0xC8	; 200
    f3ca:	50 e0       	ldi	r21, 0x00	; 0
    f3cc:	60 ea       	ldi	r22, 0xA0	; 160
    f3ce:	70 e0       	ldi	r23, 0x00	; 0
    f3d0:	8d 2d       	mov	r24, r13
    f3d2:	9b 2d       	mov	r25, r11
    f3d4:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f3d8:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    f3dc:	81 60       	ori	r24, 0x01	; 1
    f3de:	52 c0       	rjmp	.+164    	; 0xf484 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    f3e0:	25 e0       	ldi	r18, 0x05	; 5
    f3e2:	a2 16       	cp	r10, r18
    f3e4:	09 f4       	brne	.+2      	; 0xf3e8 <setup+0x1854>
    f3e6:	94 cb       	rjmp	.-2264   	; 0xeb10 <setup+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    f3e8:	36 e0       	ldi	r19, 0x06	; 6
    f3ea:	a3 16       	cp	r10, r19
    f3ec:	09 f4       	brne	.+2      	; 0xf3f0 <setup+0x185c>
    f3ee:	b3 cc       	rjmp	.-1690   	; 0xed56 <setup+0x11c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3854
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
    f3f0:	87 e0       	ldi	r24, 0x07	; 7
    f3f2:	a8 12       	cpse	r10, r24
    f3f4:	0a cd       	rjmp	.-1516   	; 0xee0a <setup+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3856
    {
      strcpy_P(str1, text_onewire_rozhrani);
    f3f6:	6d e1       	ldi	r22, 0x1D	; 29
    f3f8:	73 e3       	ldi	r23, 0x33	; 51
    f3fa:	8d 2d       	mov	r24, r13
    f3fc:	9b 2d       	mov	r25, r11
    f3fe:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3857
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f402:	ee 24       	eor	r14, r14
    f404:	ea 94       	dec	r14
    f406:	fe 2c       	mov	r15, r14
    f408:	00 ee       	ldi	r16, 0xE0	; 224
    f40a:	17 e0       	ldi	r17, 0x07	; 7
    f40c:	21 e0       	ldi	r18, 0x01	; 1
    f40e:	48 e7       	ldi	r20, 0x78	; 120
    f410:	50 e0       	ldi	r21, 0x00	; 0
    f412:	6e e1       	ldi	r22, 0x1E	; 30
    f414:	70 e0       	ldi	r23, 0x00	; 0
    f416:	8d 2d       	mov	r24, r13
    f418:	9b 2d       	mov	r25, r11
    f41a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
      ds2482_address[0].i2c_addr = 0b0011000;
    f41e:	88 e1       	ldi	r24, 0x18	; 24
    f420:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
      ds2482_address[0].HWwirenum = 0;
    f424:	10 92 92 09 	sts	0x0992, r1	; 0x800992 <ds2482_address+0x1>
    f428:	e5 e3       	ldi	r30, 0x35	; 53
    f42a:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3863
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
    f42c:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
        status_tds18s20[idx].period_now = 0;
    f42e:	14 8e       	std	Z+28, r1	; 0x1c
    f430:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
    f432:	ba e0       	ldi	r27, 0x0A	; 10
    f434:	e9 3e       	cpi	r30, 0xE9	; 233
    f436:	fb 07       	cpc	r31, r27
    f438:	c9 f7       	brne	.-14     	; 0xf42c <setup+0x1898>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f43a:	4a e0       	ldi	r20, 0x0A	; 10
    f43c:	be 01       	movw	r22, r28
    f43e:	6e 50       	subi	r22, 0x0E	; 14
    f440:	7f 4f       	sbci	r23, 0xFF	; 255
    f442:	88 e1       	ldi	r24, 0x18	; 24
    f444:	90 e0       	ldi	r25, 0x00	; 0
    f446:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3867
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
    f44a:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <ds2482_address>
    f44e:	0e 94 e5 8e 	call	0x11dca	; 0x11dca <ds2482reset(unsigned char)>
    f452:	81 11       	cpse	r24, r1
    f454:	c2 cc       	rjmp	.-1660   	; 0xedda <setup+0x1246>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
      {
        strcpy_P(str1, text_ok);
    f456:	6a e5       	ldi	r22, 0x5A	; 90
    f458:	73 e3       	ldi	r23, 0x33	; 51
    f45a:	8d 2d       	mov	r24, r13
    f45c:	9b 2d       	mov	r25, r11
    f45e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f462:	ee 24       	eor	r14, r14
    f464:	ea 94       	dec	r14
    f466:	fe 2c       	mov	r15, r14
    f468:	00 ee       	ldi	r16, 0xE0	; 224
    f46a:	17 e0       	ldi	r17, 0x07	; 7
    f46c:	21 e0       	ldi	r18, 0x01	; 1
    f46e:	48 e7       	ldi	r20, 0x78	; 120
    f470:	50 e0       	ldi	r21, 0x00	; 0
    f472:	60 ea       	ldi	r22, 0xA0	; 160
    f474:	70 e0       	ldi	r23, 0x00	; 0
    f476:	8d 2d       	mov	r24, r13
    f478:	9b 2d       	mov	r25, r11
    f47a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f47e:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
    f482:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f484:	80 93 e9 0a 	sts	0x0AE9, r24	; 0x800ae9 <selftest_data>
    f488:	2d cc       	rjmp	.-1958   	; 0xece4 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3912
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
    f48a:	9a e0       	ldi	r25, 0x0A	; 10
    f48c:	a9 12       	cpse	r10, r25
    f48e:	08 ce       	rjmp	.-1008   	; 0xf0a0 <setup+0x150c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3914
    {
      strcpy_P(str1, text_mqtt_rozhrani);
    f490:	60 ef       	ldi	r22, 0xF0	; 240
    f492:	72 e3       	ldi	r23, 0x32	; 50
    f494:	c1 01       	movw	r24, r2
    f496:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3915
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f49a:	ee 24       	eor	r14, r14
    f49c:	ea 94       	dec	r14
    f49e:	fe 2c       	mov	r15, r14
    f4a0:	00 ee       	ldi	r16, 0xE0	; 224
    f4a2:	17 e0       	ldi	r17, 0x07	; 7
    f4a4:	21 e0       	ldi	r18, 0x01	; 1
    f4a6:	46 e9       	ldi	r20, 0x96	; 150
    f4a8:	50 e0       	ldi	r21, 0x00	; 0
    f4aa:	6e e1       	ldi	r22, 0x1E	; 30
    f4ac:	70 e0       	ldi	r23, 0x00	; 0
    f4ae:	c1 01       	movw	r24, r2
    f4b0:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
    f4b4:	80 91 5f 0c 	lds	r24, 0x0C5F	; 0x800c5f <device+0x24>
    f4b8:	90 91 60 0c 	lds	r25, 0x0C60	; 0x800c60 <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
    f4bc:	20 91 5e 0c 	lds	r18, 0x0C5E	; 0x800c5e <device+0x23>
    f4c0:	30 91 5d 0c 	lds	r19, 0x0C5D	; 0x800c5d <device+0x22>
    f4c4:	40 91 5c 0c 	lds	r20, 0x0C5C	; 0x800c5c <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    f4c8:	50 91 5b 0c 	lds	r21, 0x0C5B	; 0x800c5b <device+0x20>
    f4cc:	50 93 3f 10 	sts	0x103F, r21	; 0x80103f <mqtt_client+0x211>
    f4d0:	40 93 40 10 	sts	0x1040, r20	; 0x801040 <mqtt_client+0x212>
    f4d4:	30 93 41 10 	sts	0x1041, r19	; 0x801041 <mqtt_client+0x213>
    f4d8:	20 93 42 10 	sts	0x1042, r18	; 0x801042 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
    f4dc:	90 93 46 10 	sts	0x1046, r25	; 0x801046 <mqtt_client+0x218>
    f4e0:	80 93 45 10 	sts	0x1045, r24	; 0x801045 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
    f4e4:	10 92 44 10 	sts	0x1044, r1	; 0x801044 <mqtt_client+0x216>
    f4e8:	10 92 43 10 	sts	0x1043, r1	; 0x801043 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
    f4ec:	8b e9       	ldi	r24, 0x9B	; 155
    f4ee:	9d e5       	ldi	r25, 0x5D	; 93
    f4f0:	90 93 3c 10 	sts	0x103C, r25	; 0x80103c <mqtt_client+0x20e>
    f4f4:	80 93 3b 10 	sts	0x103B, r24	; 0x80103b <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
    f4f8:	81 ee       	ldi	r24, 0xE1	; 225
    f4fa:	92 e3       	ldi	r25, 0x32	; 50
    f4fc:	90 93 84 0b 	sts	0x0B84, r25	; 0x800b84 <header_out+0x1>
    f500:	80 93 83 0b 	sts	0x0B83, r24	; 0x800b83 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
    f504:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    f508:	2b 01       	movw	r4, r22
    f50a:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
      while ((millis() - milis) < 3000 )
    f50c:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    f510:	64 19       	sub	r22, r4
    f512:	75 09       	sbc	r23, r5
    f514:	86 09       	sbc	r24, r6
    f516:	97 09       	sbc	r25, r7
    f518:	68 3b       	cpi	r22, 0xB8	; 184
    f51a:	7b 40       	sbci	r23, 0x0B	; 11
    f51c:	81 05       	cpc	r24, r1
    f51e:	91 05       	cpc	r25, r1
    f520:	58 f4       	brcc	.+22     	; 0xf538 <setup+0x19a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3922
      {
        mqtt_client.loop();
    f522:	0e 94 2a 91 	call	0x12254	; 0x12254 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3923
        if (mqtt_reconnect() == 0)
    f526:	0e 94 7a 6c 	call	0xd8f4	; 0xd8f4 <mqtt_reconnect()>
    f52a:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <selftest_data>
    f52e:	81 11       	cpse	r24, r1
    f530:	a7 cd       	rjmp	.-1202   	; 0xf080 <setup+0x14ec>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f532:	9f 7d       	andi	r25, 0xDF	; 223
    f534:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    f538:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3932
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
    f53c:	85 ff       	sbrs	r24, 5
    f53e:	a4 cd       	rjmp	.-1208   	; 0xf088 <setup+0x14f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3934
      {
        strcpy_P(str1, text_err);
    f540:	60 ee       	ldi	r22, 0xE0	; 224
    f542:	73 e3       	ldi	r23, 0x33	; 51
    f544:	8d 2d       	mov	r24, r13
    f546:	9b 2d       	mov	r25, r11
    f548:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3935
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f54c:	ee 24       	eor	r14, r14
    f54e:	ea 94       	dec	r14
    f550:	fe 2c       	mov	r15, r14
    f552:	00 e0       	ldi	r16, 0x00	; 0
    f554:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f556:	21 e0       	ldi	r18, 0x01	; 1
    f558:	46 e9       	ldi	r20, 0x96	; 150
    f55a:	50 e0       	ldi	r21, 0x00	; 0
    f55c:	f3 cc       	rjmp	.-1562   	; 0xef44 <setup+0x13b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
    f55e:	ad e0       	ldi	r26, 0x0D	; 13
    f560:	aa 12       	cpse	r10, r26
    f562:	0c 94 72 71 	jmp	0xe2e4	; 0xe2e4 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
    {
      strcpy_P(str1, text_pid_regulator);
    f566:	64 eb       	ldi	r22, 0xB4	; 180
    f568:	72 e3       	ldi	r23, 0x32	; 50
    f56a:	8d 2d       	mov	r24, r13
    f56c:	9b 2d       	mov	r25, r11
    f56e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f572:	ee 24       	eor	r14, r14
    f574:	ea 94       	dec	r14
    f576:	fe 2c       	mov	r15, r14
    f578:	00 ee       	ldi	r16, 0xE0	; 224
    f57a:	17 e0       	ldi	r17, 0x07	; 7
    f57c:	21 e0       	ldi	r18, 0x01	; 1
    f57e:	44 eb       	ldi	r20, 0xB4	; 180
    f580:	50 e0       	ldi	r21, 0x00	; 0
    f582:	6e e1       	ldi	r22, 0x1E	; 30
    f584:	70 e0       	ldi	r23, 0x00	; 0
    f586:	8d 2d       	mov	r24, r13
    f588:	9b 2d       	mov	r25, r11
    f58a:	0e 94 17 82 	call	0x1042e	; 0x1042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f58e:	a1 ea       	ldi	r26, 0xA1	; 161
    f590:	b8 e0       	ldi	r27, 0x08	; 8
    f592:	c0 5c       	subi	r28, 0xC0	; 192
    f594:	de 4f       	sbci	r29, 0xFE	; 254
    f596:	b9 83       	std	Y+1, r27	; 0x01
    f598:	a8 83       	st	Y, r26
    f59a:	c0 54       	subi	r28, 0x40	; 64
    f59c:	d1 40       	sbci	r29, 0x01	; 1
    f59e:	ed e8       	ldi	r30, 0x8D	; 141
    f5a0:	f8 e0       	ldi	r31, 0x08	; 8
    f5a2:	ce 5b       	subi	r28, 0xBE	; 190
    f5a4:	de 4f       	sbci	r29, 0xFE	; 254
    f5a6:	f9 83       	std	Y+1, r31	; 0x01
    f5a8:	e8 83       	st	Y, r30
    f5aa:	c2 54       	subi	r28, 0x42	; 66
    f5ac:	d1 40       	sbci	r29, 0x01	; 1
    f5ae:	f5 eb       	ldi	r31, 0xB5	; 181
    f5b0:	ef 2e       	mov	r14, r31
    f5b2:	f8 e0       	ldi	r31, 0x08	; 8
    f5b4:	ff 2e       	mov	r15, r31
    f5b6:	91 2c       	mov	r9, r1
    f5b8:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
    f5ba:	cc 24       	eor	r12, r12
    f5bc:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    f5be:	8c e3       	ldi	r24, 0x3C	; 60
    f5c0:	90 e0       	ldi	r25, 0x00	; 0
    f5c2:	0e 94 53 ac 	call	0x158a6	; 0x158a6 <malloc>
    f5c6:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    f5c8:	c0 5c       	subi	r28, 0xC0	; 192
    f5ca:	de 4f       	sbci	r29, 0xFE	; 254
    f5cc:	e8 81       	ld	r30, Y
    f5ce:	f9 81       	ldd	r31, Y+1	; 0x01
    f5d0:	c0 54       	subi	r28, 0x40	; 64
    f5d2:	d1 40       	sbci	r29, 0x01	; 1
    f5d4:	dc 01       	movw	r26, r24
    f5d6:	5f 96       	adiw	r26, 0x1f	; 31
    f5d8:	fc 93       	st	X, r31
    f5da:	ee 93       	st	-X, r30
    f5dc:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
    f5de:	ce 5b       	subi	r28, 0xBE	; 190
    f5e0:	de 4f       	sbci	r29, 0xFE	; 254
    f5e2:	28 81       	ld	r18, Y
    f5e4:	39 81       	ldd	r19, Y+1	; 0x01
    f5e6:	c2 54       	subi	r28, 0x42	; 66
    f5e8:	d1 40       	sbci	r29, 0x01	; 1
    f5ea:	5d 96       	adiw	r26, 0x1d	; 29
    f5ec:	3c 93       	st	X, r19
    f5ee:	2e 93       	st	-X, r18
    f5f0:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
    f5f2:	91 96       	adiw	r26, 0x21	; 33
    f5f4:	fc 92       	st	X, r15
    f5f6:	ee 92       	st	-X, r14
    f5f8:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
    f5fa:	da 96       	adiw	r26, 0x3a	; 58
    f5fc:	1c 92       	st	X, r1
    f5fe:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    f600:	d2 96       	adiw	r26, 0x32	; 50
    f602:	1d 92       	st	X+, r1
    f604:	1d 92       	st	X+, r1
    f606:	1d 92       	st	X+, r1
    f608:	1c 92       	st	X, r1
    f60a:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    f60c:	80 e0       	ldi	r24, 0x00	; 0
    f60e:	90 e0       	ldi	r25, 0x00	; 0
    f610:	af e7       	ldi	r26, 0x7F	; 127
    f612:	b3 e4       	ldi	r27, 0x43	; 67
    f614:	f8 01       	movw	r30, r16
    f616:	86 ab       	std	Z+54, r24	; 0x36
    f618:	97 ab       	std	Z+55, r25	; 0x37
    f61a:	a0 af       	std	Z+56, r26	; 0x38
    f61c:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    f61e:	84 e6       	ldi	r24, 0x64	; 100
    f620:	90 e0       	ldi	r25, 0x00	; 0
    f622:	a0 e0       	ldi	r26, 0x00	; 0
    f624:	b0 e0       	ldi	r27, 0x00	; 0
    f626:	86 a7       	std	Z+46, r24	; 0x2e
    f628:	97 a7       	std	Z+47, r25	; 0x2f
    f62a:	a0 ab       	std	Z+48, r26	; 0x30
    f62c:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
    f62e:	11 8e       	std	Z+25, r1	; 0x19
    f630:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
    f632:	21 e0       	ldi	r18, 0x01	; 1
    f634:	30 e0       	ldi	r19, 0x00	; 0
    f636:	33 8f       	std	Z+27, r19	; 0x1b
    f638:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
    f63a:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    f63c:	80 e0       	ldi	r24, 0x00	; 0
    f63e:	90 e0       	ldi	r25, 0x00	; 0
    f640:	a0 e0       	ldi	r26, 0x00	; 0
    f642:	b0 e4       	ldi	r27, 0x40	; 64
    f644:	80 83       	st	Z, r24
    f646:	91 83       	std	Z+1, r25	; 0x01
    f648:	a2 83       	std	Z+2, r26	; 0x02
    f64a:	b3 83       	std	Z+3, r27	; 0x03
    f64c:	80 e0       	ldi	r24, 0x00	; 0
    f64e:	90 e0       	ldi	r25, 0x00	; 0
    f650:	a0 ea       	ldi	r26, 0xA0	; 160
    f652:	b0 e4       	ldi	r27, 0x40	; 64
    f654:	84 83       	std	Z+4, r24	; 0x04
    f656:	95 83       	std	Z+5, r25	; 0x05
    f658:	a6 83       	std	Z+6, r26	; 0x06
    f65a:	b7 83       	std	Z+7, r27	; 0x07
    f65c:	80 e0       	ldi	r24, 0x00	; 0
    f65e:	90 e0       	ldi	r25, 0x00	; 0
    f660:	a0 e8       	ldi	r26, 0x80	; 128
    f662:	bf e3       	ldi	r27, 0x3F	; 63
    f664:	80 87       	std	Z+8, r24	; 0x08
    f666:	91 87       	std	Z+9, r25	; 0x09
    f668:	a2 87       	std	Z+10, r26	; 0x0a
    f66a:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
    f66c:	80 e0       	ldi	r24, 0x00	; 0
    f66e:	90 e0       	ldi	r25, 0x00	; 0
    f670:	a0 e0       	ldi	r26, 0x00	; 0
    f672:	b0 e4       	ldi	r27, 0x40	; 64
    f674:	84 87       	std	Z+12, r24	; 0x0c
    f676:	95 87       	std	Z+13, r25	; 0x0d
    f678:	a6 87       	std	Z+14, r26	; 0x0e
    f67a:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    f67c:	80 e0       	ldi	r24, 0x00	; 0
    f67e:	90 e0       	ldi	r25, 0x00	; 0
    f680:	a0 e0       	ldi	r26, 0x00	; 0
    f682:	bf e3       	ldi	r27, 0x3F	; 63
    f684:	80 8b       	std	Z+16, r24	; 0x10
    f686:	91 8b       	std	Z+17, r25	; 0x11
    f688:	a2 8b       	std	Z+18, r26	; 0x12
    f68a:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    f68c:	80 e0       	ldi	r24, 0x00	; 0
    f68e:	90 e0       	ldi	r25, 0x00	; 0
    f690:	a0 e2       	ldi	r26, 0x20	; 32
    f692:	b1 e4       	ldi	r27, 0x41	; 65
    f694:	84 8b       	std	Z+20, r24	; 0x14
    f696:	95 8b       	std	Z+21, r25	; 0x15
    f698:	a6 8b       	std	Z+22, r26	; 0x16
    f69a:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
    f69c:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
    f6a0:	28 ee       	ldi	r18, 0xE8	; 232
    f6a2:	33 e0       	ldi	r19, 0x03	; 3
    f6a4:	40 e0       	ldi	r20, 0x00	; 0
    f6a6:	50 e0       	ldi	r21, 0x00	; 0
    f6a8:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
    f6ac:	f8 01       	movw	r30, r16
    f6ae:	86 a5       	ldd	r24, Z+46	; 0x2e
    f6b0:	97 a5       	ldd	r25, Z+47	; 0x2f
    f6b2:	a0 a9       	ldd	r26, Z+48	; 0x30
    f6b4:	b1 a9       	ldd	r27, Z+49	; 0x31
    f6b6:	28 1b       	sub	r18, r24
    f6b8:	39 0b       	sbc	r19, r25
    f6ba:	4a 0b       	sbc	r20, r26
    f6bc:	5b 0b       	sbc	r21, r27
    f6be:	d8 01       	movw	r26, r16
    f6c0:	22 a3       	std	Z+34, r18	; 0x22
    f6c2:	33 a3       	std	Z+35, r19	; 0x23
    f6c4:	44 a3       	std	Z+36, r20	; 0x24
    f6c6:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
    f6c8:	e0 91 39 0c 	lds	r30, 0x0C39	; 0x800c39 <array_pids>
    f6cc:	f0 91 3a 0c 	lds	r31, 0x0C3A	; 0x800c3a <array_pids+0x1>
    f6d0:	e8 0d       	add	r30, r8
    f6d2:	f9 1d       	adc	r31, r9
    f6d4:	11 83       	std	Z+1, r17	; 0x01
    f6d6:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    f6d8:	da 96       	adiw	r26, 0x3a	; 58
    f6da:	8c 91       	ld	r24, X
    f6dc:	da 97       	sbiw	r26, 0x3a	; 58
    f6de:	81 11       	cpse	r24, r1
    f6e0:	1a cd       	rjmp	.-1484   	; 0xf116 <setup+0x1582>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    f6e2:	5e 96       	adiw	r26, 0x1e	; 30
    f6e4:	ed 91       	ld	r30, X+
    f6e6:	fc 91       	ld	r31, X
    f6e8:	40 80       	ld	r4, Z
    f6ea:	51 80       	ldd	r5, Z+1	; 0x01
    f6ec:	62 80       	ldd	r6, Z+2	; 0x02
    f6ee:	73 80       	ldd	r7, Z+3	; 0x03
    f6f0:	f8 01       	movw	r30, r16
    f6f2:	46 a2       	std	Z+38, r4	; 0x26
    f6f4:	57 a2       	std	Z+39, r5	; 0x27
    f6f6:	60 a6       	std	Z+40, r6	; 0x28
    f6f8:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
    f6fa:	04 8c       	ldd	r0, Z+28	; 0x1c
    f6fc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    f6fe:	e0 2d       	mov	r30, r0
    f700:	80 81       	ld	r24, Z
    f702:	91 81       	ldd	r25, Z+1	; 0x01
    f704:	a2 81       	ldd	r26, Z+2	; 0x02
    f706:	b3 81       	ldd	r27, Z+3	; 0x03
    f708:	f8 01       	movw	r30, r16
    f70a:	82 a7       	std	Z+42, r24	; 0x2a
    f70c:	93 a7       	std	Z+43, r25	; 0x2b
    f70e:	a4 a7       	std	Z+44, r26	; 0x2c
    f710:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
    f712:	86 a9       	ldd	r24, Z+54	; 0x36
    f714:	97 a9       	ldd	r25, Z+55	; 0x37
    f716:	a0 ad       	ldd	r26, Z+56	; 0x38
    f718:	b1 ad       	ldd	r27, Z+57	; 0x39
    f71a:	c8 5c       	subi	r28, 0xC8	; 200
    f71c:	de 4f       	sbci	r29, 0xFE	; 254
    f71e:	88 83       	st	Y, r24
    f720:	99 83       	std	Y+1, r25	; 0x01
    f722:	aa 83       	std	Y+2, r26	; 0x02
    f724:	bb 83       	std	Y+3, r27	; 0x03
    f726:	c8 53       	subi	r28, 0x38	; 56
    f728:	d1 40       	sbci	r29, 0x01	; 1
    f72a:	9c 01       	movw	r18, r24
    f72c:	ad 01       	movw	r20, r26
    f72e:	c3 01       	movw	r24, r6
    f730:	b2 01       	movw	r22, r4
    f732:	0e 94 66 b3 	call	0x166cc	; 0x166cc <__gesf2>
    f736:	18 16       	cp	r1, r24
    f738:	0c f0       	brlt	.+2      	; 0xf73c <setup+0x1ba8>
    f73a:	d6 cc       	rjmp	.-1620   	; 0xf0e8 <setup+0x1554>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
    f73c:	c8 5c       	subi	r28, 0xC8	; 200
    f73e:	de 4f       	sbci	r29, 0xFE	; 254
    f740:	88 81       	ld	r24, Y
    f742:	99 81       	ldd	r25, Y+1	; 0x01
    f744:	aa 81       	ldd	r26, Y+2	; 0x02
    f746:	bb 81       	ldd	r27, Y+3	; 0x03
    f748:	c8 53       	subi	r28, 0x38	; 56
    f74a:	d1 40       	sbci	r29, 0x01	; 1
    f74c:	f8 01       	movw	r30, r16
    f74e:	86 a3       	std	Z+38, r24	; 0x26
    f750:	97 a3       	std	Z+39, r25	; 0x27
    f752:	a0 a7       	std	Z+40, r26	; 0x28
    f754:	b1 a7       	std	Z+41, r27	; 0x29
    f756:	df cc       	rjmp	.-1602   	; 0xf116 <setup+0x1582>

0000f758 <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    f758:	1f 93       	push	r17
    f75a:	cf 93       	push	r28
    f75c:	df 93       	push	r29
    f75e:	cd b7       	in	r28, 0x3d	; 61
    f760:	de b7       	in	r29, 0x3e	; 62
    f762:	63 97       	sbiw	r28, 0x13	; 19
    f764:	0f b6       	in	r0, 0x3f	; 63
    f766:	f8 94       	cli
    f768:	de bf       	out	0x3e, r29	; 62
    f76a:	0f be       	out	0x3f, r0	; 63
    f76c:	cd bf       	out	0x3d, r28	; 61
    f76e:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1783
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    f770:	ae 01       	movw	r20, r28
    f772:	4f 5f       	subi	r20, 0xFF	; 255
    f774:	5f 4f       	sbci	r21, 0xFF	; 255
    f776:	be 01       	movw	r22, r28
    f778:	6d 5e       	subi	r22, 0xED	; 237
    f77a:	7f 4f       	sbci	r23, 0xFF	; 255
    f77c:	81 2f       	mov	r24, r17
    f77e:	0e 94 1b 59 	call	0xb236	; 0xb236 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1784
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    f782:	60 e0       	ldi	r22, 0x00	; 0
    f784:	87 e6       	ldi	r24, 0x67	; 103
    f786:	0e 94 10 31 	call	0x6220	; 0x6220 <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1694
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    f78a:	be 01       	movw	r22, r28
    f78c:	6f 5f       	subi	r22, 0xFF	; 255
    f78e:	7f 4f       	sbci	r23, 0xFF	; 255
    f790:	8b ef       	ldi	r24, 0xFB	; 251
    f792:	98 e0       	ldi	r25, 0x08	; 8
    f794:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
  dialog_set_string_max_length = max_length;
    f798:	82 e1       	ldi	r24, 0x12	; 18
    f79a:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1696
  dialog_set_string_args = idx;
    f79e:	10 93 0b 09 	sts	0x090B, r17	; 0x80090b <dialog_set_string_args>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1786
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2);
  dialog_save_variable_function = &menu_rtds_update_name;
    f7a2:	8d ef       	ldi	r24, 0xFD	; 253
    f7a4:	9c e5       	ldi	r25, 0x5C	; 92
    f7a6:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <dialog_save_variable_function+0x1>
    f7aa:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
}
    f7ae:	63 96       	adiw	r28, 0x13	; 19
    f7b0:	0f b6       	in	r0, 0x3f	; 63
    f7b2:	f8 94       	cli
    f7b4:	de bf       	out	0x3e, r29	; 62
    f7b6:	0f be       	out	0x3f, r0	; 63
    f7b8:	cd bf       	out	0x3d, r28	; 61
    f7ba:	df 91       	pop	r29
    f7bc:	cf 91       	pop	r28
    f7be:	1f 91       	pop	r17
    f7c0:	08 95       	ret

0000f7c2 <twi_readFrom.part.0.constprop.169>:
twi_readFrom.part.0.constprop.169():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    f7c2:	90 91 4b 11 	lds	r25, 0x114B	; 0x80114b <twi_state>
    f7c6:	91 11       	cpse	r25, r1
    f7c8:	fc cf       	rjmp	.-8      	; 0xf7c2 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    f7ca:	91 e0       	ldi	r25, 0x01	; 1
    f7cc:	90 93 4b 11 	sts	0x114B, r25	; 0x80114b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
    f7d0:	90 93 4a 11 	sts	0x114A, r25	; 0x80114a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    f7d4:	2f ef       	ldi	r18, 0xFF	; 255
    f7d6:	20 93 49 11 	sts	0x1149, r18	; 0x801149 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    f7da:	10 92 48 11 	sts	0x1148, r1	; 0x801148 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    f7de:	26 0f       	add	r18, r22
    f7e0:	20 93 47 11 	sts	0x1147, r18	; 0x801147 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    f7e4:	90 93 46 11 	sts	0x1146, r25	; 0x801146 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
    f7e8:	90 91 46 11 	lds	r25, 0x1146	; 0x801146 <twi_slarw>
    f7ec:	88 0f       	add	r24, r24
    f7ee:	89 2b       	or	r24, r25
    f7f0:	80 93 46 11 	sts	0x1146, r24	; 0x801146 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
    f7f4:	80 91 45 11 	lds	r24, 0x1145	; 0x801145 <twi_inRepStart>
    f7f8:	81 30       	cpi	r24, 0x01	; 1
    f7fa:	f9 f4       	brne	.+62     	; 0xf83a <twi_readFrom.part.0.constprop.169+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    f7fc:	10 92 45 11 	sts	0x1145, r1	; 0x801145 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
    f800:	80 91 46 11 	lds	r24, 0x1146	; 0x801146 <twi_slarw>
    f804:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    f808:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    f80c:	83 fd       	sbrc	r24, 3
    f80e:	f8 cf       	rjmp	.-16     	; 0xf800 <twi_readFrom.part.0.constprop.169+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    f810:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    f812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    f816:	80 91 4b 11 	lds	r24, 0x114B	; 0x80114b <twi_state>
    f81a:	81 30       	cpi	r24, 0x01	; 1
    f81c:	e1 f3       	breq	.-8      	; 0xf816 <twi_readFrom.part.0.constprop.169+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    f81e:	80 91 48 11 	lds	r24, 0x1148	; 0x801148 <twi_masterBufferIndex>
    f822:	86 17       	cp	r24, r22
    f824:	10 f4       	brcc	.+4      	; 0xf82a <twi_readFrom.part.0.constprop.169+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
    f826:	60 91 48 11 	lds	r22, 0x1148	; 0x801148 <twi_masterBufferIndex>
    f82a:	a5 e2       	ldi	r26, 0x25	; 37
    f82c:	b1 e1       	ldi	r27, 0x11	; 17
    f82e:	e5 e0       	ldi	r30, 0x05	; 5
    f830:	f1 e1       	ldi	r31, 0x11	; 17
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    f832:	80 e0       	ldi	r24, 0x00	; 0
    f834:	86 13       	cpse	r24, r22
    f836:	03 c0       	rjmp	.+6      	; 0xf83e <twi_readFrom.part.0.constprop.169+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    f838:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    f83a:	85 ee       	ldi	r24, 0xE5	; 229
    f83c:	ea cf       	rjmp	.-44     	; 0xf812 <twi_readFrom.part.0.constprop.169+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    f83e:	9d 91       	ld	r25, X+
    f840:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    f842:	8f 5f       	subi	r24, 0xFF	; 255
    f844:	f7 cf       	rjmp	.-18     	; 0xf834 <twi_readFrom.part.0.constprop.169+0x72>

0000f846 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    f846:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
    f84a:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    f84e:	2f ef       	ldi	r18, 0xFF	; 255
    f850:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    f852:	98 17       	cp	r25, r24
    f854:	48 f4       	brcc	.+18     	; 0xf868 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    f856:	e9 2f       	mov	r30, r25
    f858:	f0 e0       	ldi	r31, 0x00	; 0
    f85a:	eb 5f       	subi	r30, 0xFB	; 251
    f85c:	fe 4e       	sbci	r31, 0xEE	; 238
    f85e:	20 81       	ld	r18, Z
    f860:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    f862:	9f 5f       	subi	r25, 0xFF	; 255
    f864:	90 93 00 11 	sts	0x1100, r25	; 0x801100 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    f868:	c9 01       	movw	r24, r18
    f86a:	08 95       	ret

0000f86c <TwoWire::read() [clone .constprop.130]>:
_ZN7TwoWire4readEv.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    f86c:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
    f870:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    f874:	2f ef       	ldi	r18, 0xFF	; 255
    f876:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    f878:	98 17       	cp	r25, r24
    f87a:	48 f4       	brcc	.+18     	; 0xf88e <TwoWire::read() [clone .constprop.130]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    f87c:	e9 2f       	mov	r30, r25
    f87e:	f0 e0       	ldi	r31, 0x00	; 0
    f880:	eb 5f       	subi	r30, 0xFB	; 251
    f882:	fe 4e       	sbci	r31, 0xEE	; 238
    f884:	20 81       	ld	r18, Z
    f886:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    f888:	9f 5f       	subi	r25, 0xFF	; 255
    f88a:	90 93 00 11 	sts	0x1100, r25	; 0x801100 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    f88e:	c9 01       	movw	r24, r18
    f890:	08 95       	ret

0000f892 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    f892:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
    f896:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
    f89a:	89 1b       	sub	r24, r25
    f89c:	99 0b       	sbc	r25, r25
    f89e:	08 95       	ret

0000f8a0 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    f8a0:	08 95       	ret

0000f8a2 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    f8a2:	08 95       	ret

0000f8a4 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    f8a4:	fc 01       	movw	r30, r24
    f8a6:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    f8a8:	44 8d       	ldd	r20, Z+28	; 0x1c
    f8aa:	25 2f       	mov	r18, r21
    f8ac:	30 e0       	ldi	r19, 0x00	; 0
    f8ae:	84 2f       	mov	r24, r20
    f8b0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    f8b2:	82 1b       	sub	r24, r18
    f8b4:	93 0b       	sbc	r25, r19
    f8b6:	54 17       	cp	r21, r20
    f8b8:	10 f0       	brcs	.+4      	; 0xf8be <HardwareSerial::availableForWrite()+0x1a>
    f8ba:	cf 96       	adiw	r24, 0x3f	; 63
    f8bc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    f8be:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    f8c0:	08 95       	ret

0000f8c2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    f8c2:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    f8c4:	91 8d       	ldd	r25, Z+25	; 0x19
    f8c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    f8c8:	98 17       	cp	r25, r24
    f8ca:	61 f0       	breq	.+24     	; 0xf8e4 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    f8cc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    f8ce:	ae 0f       	add	r26, r30
    f8d0:	bf 2f       	mov	r27, r31
    f8d2:	b1 1d       	adc	r27, r1
    f8d4:	5d 96       	adiw	r26, 0x1d	; 29
    f8d6:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    f8d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    f8da:	9f 5f       	subi	r25, 0xFF	; 255
    f8dc:	9f 73       	andi	r25, 0x3F	; 63
    f8de:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    f8e0:	90 e0       	ldi	r25, 0x00	; 0
    f8e2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    f8e4:	8f ef       	ldi	r24, 0xFF	; 255
    f8e6:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    f8e8:	08 95       	ret

0000f8ea <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    f8ea:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    f8ec:	91 8d       	ldd	r25, Z+25	; 0x19
    f8ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    f8f0:	98 17       	cp	r25, r24
    f8f2:	31 f0       	breq	.+12     	; 0xf900 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    f8f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    f8f6:	e8 0f       	add	r30, r24
    f8f8:	f1 1d       	adc	r31, r1
    f8fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    f8fc:	90 e0       	ldi	r25, 0x00	; 0
    f8fe:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    f900:	8f ef       	ldi	r24, 0xFF	; 255
    f902:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    f904:	08 95       	ret

0000f906 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    f906:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    f908:	91 8d       	ldd	r25, Z+25	; 0x19
    f90a:	22 8d       	ldd	r18, Z+26	; 0x1a
    f90c:	89 2f       	mov	r24, r25
    f90e:	90 e0       	ldi	r25, 0x00	; 0
    f910:	80 5c       	subi	r24, 0xC0	; 192
    f912:	9f 4f       	sbci	r25, 0xFF	; 255
    f914:	82 1b       	sub	r24, r18
    f916:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    f918:	8f 73       	andi	r24, 0x3F	; 63
    f91a:	99 27       	eor	r25, r25
    f91c:	08 95       	ret

0000f91e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    f91e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    f920:	a4 8d       	ldd	r26, Z+28	; 0x1c
    f922:	a8 0f       	add	r26, r24
    f924:	b9 2f       	mov	r27, r25
    f926:	b1 1d       	adc	r27, r1
    f928:	a3 5a       	subi	r26, 0xA3	; 163
    f92a:	bf 4f       	sbci	r27, 0xFF	; 255
    f92c:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    f92e:	84 8d       	ldd	r24, Z+28	; 0x1c
    f930:	90 e0       	ldi	r25, 0x00	; 0
    f932:	01 96       	adiw	r24, 0x01	; 1
    f934:	8f 73       	andi	r24, 0x3F	; 63
    f936:	99 27       	eor	r25, r25
    f938:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    f93a:	a6 89       	ldd	r26, Z+22	; 0x16
    f93c:	b7 89       	ldd	r27, Z+23	; 0x17
    f93e:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    f940:	a0 89       	ldd	r26, Z+16	; 0x10
    f942:	b1 89       	ldd	r27, Z+17	; 0x11
    f944:	8c 91       	ld	r24, X
    f946:	80 64       	ori	r24, 0x40	; 64
    f948:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    f94a:	93 8d       	ldd	r25, Z+27	; 0x1b
    f94c:	84 8d       	ldd	r24, Z+28	; 0x1c
    f94e:	98 13       	cpse	r25, r24
    f950:	06 c0       	rjmp	.+12     	; 0xf95e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    f952:	02 88       	ldd	r0, Z+18	; 0x12
    f954:	f3 89       	ldd	r31, Z+19	; 0x13
    f956:	e0 2d       	mov	r30, r0
    f958:	80 81       	ld	r24, Z
    f95a:	8f 7d       	andi	r24, 0xDF	; 223
    f95c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    f95e:	08 95       	ret

0000f960 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    f960:	ef 92       	push	r14
    f962:	ff 92       	push	r15
    f964:	0f 93       	push	r16
    f966:	1f 93       	push	r17
    f968:	cf 93       	push	r28
    f96a:	df 93       	push	r29
    f96c:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    f96e:	81 e0       	ldi	r24, 0x01	; 1
    f970:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    f972:	9b 8d       	ldd	r25, Y+27	; 0x1b
    f974:	8c 8d       	ldd	r24, Y+28	; 0x1c
    f976:	98 13       	cpse	r25, r24
    f978:	16 c0       	rjmp	.+44     	; 0xf9a6 <HardwareSerial::write(unsigned char)+0x46>
    f97a:	e8 89       	ldd	r30, Y+16	; 0x10
    f97c:	f9 89       	ldd	r31, Y+17	; 0x11
    f97e:	80 81       	ld	r24, Z
    f980:	85 ff       	sbrs	r24, 5
    f982:	11 c0       	rjmp	.+34     	; 0xf9a6 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    f984:	ee 89       	ldd	r30, Y+22	; 0x16
    f986:	ff 89       	ldd	r31, Y+23	; 0x17
    f988:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    f98a:	e8 89       	ldd	r30, Y+16	; 0x10
    f98c:	f9 89       	ldd	r31, Y+17	; 0x11
    f98e:	80 81       	ld	r24, Z
    f990:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    f992:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    f994:	81 e0       	ldi	r24, 0x01	; 1
    f996:	90 e0       	ldi	r25, 0x00	; 0
    f998:	df 91       	pop	r29
    f99a:	cf 91       	pop	r28
    f99c:	1f 91       	pop	r17
    f99e:	0f 91       	pop	r16
    f9a0:	ff 90       	pop	r15
    f9a2:	ef 90       	pop	r14
    f9a4:	08 95       	ret
    f9a6:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    f9a8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    f9aa:	10 e0       	ldi	r17, 0x00	; 0
    f9ac:	0f 5f       	subi	r16, 0xFF	; 255
    f9ae:	1f 4f       	sbci	r17, 0xFF	; 255
    f9b0:	0f 73       	andi	r16, 0x3F	; 63
    f9b2:	11 27       	eor	r17, r17
    f9b4:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    f9b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    f9b8:	8e 11       	cpse	r24, r14
    f9ba:	0c c0       	rjmp	.+24     	; 0xf9d4 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    f9bc:	0f b6       	in	r0, 0x3f	; 63
    f9be:	07 fc       	sbrc	r0, 7
    f9c0:	fa cf       	rjmp	.-12     	; 0xf9b6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    f9c2:	e8 89       	ldd	r30, Y+16	; 0x10
    f9c4:	f9 89       	ldd	r31, Y+17	; 0x11
    f9c6:	80 81       	ld	r24, Z
    f9c8:	85 ff       	sbrs	r24, 5
    f9ca:	f5 cf       	rjmp	.-22     	; 0xf9b6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    f9cc:	ce 01       	movw	r24, r28
    f9ce:	0e 94 8f 7c 	call	0xf91e	; 0xf91e <HardwareSerial::_tx_udr_empty_irq()>
    f9d2:	f1 cf       	rjmp	.-30     	; 0xf9b6 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    f9d4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    f9d6:	ec 0f       	add	r30, r28
    f9d8:	fd 2f       	mov	r31, r29
    f9da:	f1 1d       	adc	r31, r1
    f9dc:	e3 5a       	subi	r30, 0xA3	; 163
    f9de:	ff 4f       	sbci	r31, 0xFF	; 255
    f9e0:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    f9e2:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    f9e4:	ea 89       	ldd	r30, Y+18	; 0x12
    f9e6:	fb 89       	ldd	r31, Y+19	; 0x13
    f9e8:	80 81       	ld	r24, Z
    f9ea:	80 62       	ori	r24, 0x20	; 32
    f9ec:	d2 cf       	rjmp	.-92     	; 0xf992 <HardwareSerial::write(unsigned char)+0x32>

0000f9ee <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    f9ee:	cf 93       	push	r28
    f9f0:	df 93       	push	r29
    f9f2:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    f9f4:	88 8d       	ldd	r24, Y+24	; 0x18
    f9f6:	88 23       	and	r24, r24
    f9f8:	b9 f0       	breq	.+46     	; 0xfa28 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    f9fa:	aa 89       	ldd	r26, Y+18	; 0x12
    f9fc:	bb 89       	ldd	r27, Y+19	; 0x13
    f9fe:	e8 89       	ldd	r30, Y+16	; 0x10
    fa00:	f9 89       	ldd	r31, Y+17	; 0x11
    fa02:	8c 91       	ld	r24, X
    fa04:	85 fd       	sbrc	r24, 5
    fa06:	03 c0       	rjmp	.+6      	; 0xfa0e <HardwareSerial::flush()+0x20>
    fa08:	80 81       	ld	r24, Z
    fa0a:	86 fd       	sbrc	r24, 6
    fa0c:	0d c0       	rjmp	.+26     	; 0xfa28 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    fa0e:	0f b6       	in	r0, 0x3f	; 63
    fa10:	07 fc       	sbrc	r0, 7
    fa12:	f7 cf       	rjmp	.-18     	; 0xfa02 <HardwareSerial::flush()+0x14>
    fa14:	8c 91       	ld	r24, X
    fa16:	85 ff       	sbrs	r24, 5
    fa18:	f2 cf       	rjmp	.-28     	; 0xf9fe <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    fa1a:	80 81       	ld	r24, Z
    fa1c:	85 ff       	sbrs	r24, 5
    fa1e:	ed cf       	rjmp	.-38     	; 0xf9fa <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    fa20:	ce 01       	movw	r24, r28
    fa22:	0e 94 8f 7c 	call	0xf91e	; 0xf91e <HardwareSerial::_tx_udr_empty_irq()>
    fa26:	e9 cf       	rjmp	.-46     	; 0xf9fa <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    fa28:	df 91       	pop	r29
    fa2a:	cf 91       	pop	r28
    fa2c:	08 95       	ret

0000fa2e <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    fa2e:	89 e8       	ldi	r24, 0x89	; 137
    fa30:	9b e0       	ldi	r25, 0x0B	; 11
    fa32:	0e 94 83 7c 	call	0xf906	; 0xf906 <HardwareSerial::available()>
    fa36:	21 e0       	ldi	r18, 0x01	; 1
    fa38:	89 2b       	or	r24, r25
    fa3a:	09 f4       	brne	.+2      	; 0xfa3e <Serial0_available()+0x10>
    fa3c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    fa3e:	82 2f       	mov	r24, r18
    fa40:	08 95       	ret

0000fa42 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    fa42:	80 e0       	ldi	r24, 0x00	; 0
    fa44:	90 e0       	ldi	r25, 0x00	; 0
    fa46:	89 2b       	or	r24, r25
    fa48:	29 f0       	breq	.+10     	; 0xfa54 <serialEventRun()+0x12>
    fa4a:	0e 94 17 7d 	call	0xfa2e	; 0xfa2e <Serial0_available()>
    fa4e:	81 11       	cpse	r24, r1
    fa50:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    fa54:	80 e0       	ldi	r24, 0x00	; 0
    fa56:	90 e0       	ldi	r25, 0x00	; 0
    fa58:	89 2b       	or	r24, r25
    fa5a:	49 f0       	breq	.+18     	; 0xfa6e <serialEventRun()+0x2c>
    fa5c:	80 e0       	ldi	r24, 0x00	; 0
    fa5e:	90 e0       	ldi	r25, 0x00	; 0
    fa60:	89 2b       	or	r24, r25
    fa62:	29 f0       	breq	.+10     	; 0xfa6e <serialEventRun()+0x2c>
    fa64:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    fa68:	81 11       	cpse	r24, r1
    fa6a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    fa6e:	08 95       	ret

0000fa70 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
    fa70:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
    fa72:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
    fa74:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <timer0_overflow_count>
    fa78:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <timer0_overflow_count+0x1>
    fa7c:	a0 91 f6 10 	lds	r26, 0x10F6	; 0x8010f6 <timer0_overflow_count+0x2>
    fa80:	b0 91 f7 10 	lds	r27, 0x10F7	; 0x8010f7 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    fa84:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    fa86:	a8 9b       	sbis	0x15, 0	; 21
    fa88:	05 c0       	rjmp	.+10     	; 0xfa94 <micros+0x24>
    fa8a:	2f 3f       	cpi	r18, 0xFF	; 255
    fa8c:	19 f0       	breq	.+6      	; 0xfa94 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
    fa8e:	01 96       	adiw	r24, 0x01	; 1
    fa90:	a1 1d       	adc	r26, r1
    fa92:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
    fa94:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    fa96:	ba 2f       	mov	r27, r26
    fa98:	a9 2f       	mov	r26, r25
    fa9a:	98 2f       	mov	r25, r24
    fa9c:	88 27       	eor	r24, r24
    fa9e:	bc 01       	movw	r22, r24
    faa0:	cd 01       	movw	r24, r26
    faa2:	62 0f       	add	r22, r18
    faa4:	71 1d       	adc	r23, r1
    faa6:	81 1d       	adc	r24, r1
    faa8:	91 1d       	adc	r25, r1
    faaa:	42 e0       	ldi	r20, 0x02	; 2
    faac:	66 0f       	add	r22, r22
    faae:	77 1f       	adc	r23, r23
    fab0:	88 1f       	adc	r24, r24
    fab2:	99 1f       	adc	r25, r25
    fab4:	4a 95       	dec	r20
    fab6:	d1 f7       	brne	.-12     	; 0xfaac <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
    fab8:	08 95       	ret

0000faba <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    faba:	af 92       	push	r10
    fabc:	bf 92       	push	r11
    fabe:	cf 92       	push	r12
    fac0:	df 92       	push	r13
    fac2:	ef 92       	push	r14
    fac4:	ff 92       	push	r15
    fac6:	0f 93       	push	r16
    fac8:	1f 93       	push	r17
    faca:	cf 93       	push	r28
    facc:	df 93       	push	r29
    face:	6c 01       	movw	r12, r24
    fad0:	7b 01       	movw	r14, r22
    fad2:	8b 01       	movw	r16, r22
    fad4:	04 0f       	add	r16, r20
    fad6:	15 1f       	adc	r17, r21
    fad8:	eb 01       	movw	r28, r22
    fada:	5e 01       	movw	r10, r28
    fadc:	ae 18       	sub	r10, r14
    fade:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    fae0:	c0 17       	cp	r28, r16
    fae2:	d1 07       	cpc	r29, r17
    fae4:	59 f0       	breq	.+22     	; 0xfafc <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    fae6:	69 91       	ld	r22, Y+
    fae8:	d6 01       	movw	r26, r12
    faea:	ed 91       	ld	r30, X+
    faec:	fc 91       	ld	r31, X
    faee:	01 90       	ld	r0, Z+
    faf0:	f0 81       	ld	r31, Z
    faf2:	e0 2d       	mov	r30, r0
    faf4:	c6 01       	movw	r24, r12
    faf6:	19 95       	eicall
    faf8:	89 2b       	or	r24, r25
    fafa:	79 f7       	brne	.-34     	; 0xfada <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    fafc:	c5 01       	movw	r24, r10
    fafe:	df 91       	pop	r29
    fb00:	cf 91       	pop	r28
    fb02:	1f 91       	pop	r17
    fb04:	0f 91       	pop	r16
    fb06:	ff 90       	pop	r15
    fb08:	ef 90       	pop	r14
    fb0a:	df 90       	pop	r13
    fb0c:	cf 90       	pop	r12
    fb0e:	bf 90       	pop	r11
    fb10:	af 90       	pop	r10
    fb12:	08 95       	ret

0000fb14 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    fb14:	85 ed       	ldi	r24, 0xD5	; 213
    fb16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    fb1a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    fb1e:	84 fd       	sbrc	r24, 4
    fb20:	fc cf       	rjmp	.-8      	; 0xfb1a <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    fb22:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
    fb26:	08 95       	ret

0000fb28 <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    fb28:	20 91 b4 10 	lds	r18, 0x10B4	; 0x8010b4 <twi_txBufferLength>
    fb2c:	26 0f       	add	r18, r22
    fb2e:	33 27       	eor	r19, r19
    fb30:	33 1f       	adc	r19, r19
    fb32:	21 32       	cpi	r18, 0x21	; 33
    fb34:	31 05       	cpc	r19, r1
    fb36:	ec f4       	brge	.+58     	; 0xfb72 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    fb38:	20 91 4b 11 	lds	r18, 0x114B	; 0x80114b <twi_state>
    fb3c:	fc 01       	movw	r30, r24
    fb3e:	90 e0       	ldi	r25, 0x00	; 0
    fb40:	80 e0       	ldi	r24, 0x00	; 0
    fb42:	24 30       	cpi	r18, 0x04	; 4
    fb44:	69 f0       	breq	.+26     	; 0xfb60 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
    fb46:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    fb48:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    fb4a:	a0 91 b4 10 	lds	r26, 0x10B4	; 0x8010b4 <twi_txBufferLength>
    fb4e:	21 91       	ld	r18, Z+
    fb50:	ac 01       	movw	r20, r24
    fb52:	4c 56       	subi	r20, 0x6C	; 108
    fb54:	5f 4e       	sbci	r21, 0xEF	; 239
    fb56:	a4 0f       	add	r26, r20
    fb58:	b5 2f       	mov	r27, r21
    fb5a:	b1 1d       	adc	r27, r1
    fb5c:	2c 93       	st	X, r18
    fb5e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    fb60:	86 17       	cp	r24, r22
    fb62:	98 f3       	brcs	.-26     	; 0xfb4a <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    fb64:	80 91 b4 10 	lds	r24, 0x10B4	; 0x8010b4 <twi_txBufferLength>
    fb68:	68 0f       	add	r22, r24
    fb6a:	60 93 b4 10 	sts	0x10B4, r22	; 0x8010b4 <twi_txBufferLength>
    fb6e:	80 e0       	ldi	r24, 0x00	; 0
    fb70:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    fb72:	81 e0       	ldi	r24, 0x01	; 1
    fb74:	08 95       	ret

0000fb76 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    fb76:	08 95       	ret

0000fb78 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    fb78:	e0 91 00 11 	lds	r30, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
    fb7c:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
    fb80:	e8 17       	cp	r30, r24
    fb82:	30 f4       	brcc	.+12     	; 0xfb90 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    fb84:	f0 e0       	ldi	r31, 0x00	; 0
    fb86:	eb 5f       	subi	r30, 0xFB	; 251
    fb88:	fe 4e       	sbci	r31, 0xEE	; 238
    fb8a:	80 81       	ld	r24, Z
    fb8c:	90 e0       	ldi	r25, 0x00	; 0
    fb8e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    fb90:	8f ef       	ldi	r24, 0xFF	; 255
    fb92:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    fb94:	08 95       	ret

0000fb96 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    fb96:	cf 92       	push	r12
    fb98:	df 92       	push	r13
    fb9a:	ef 92       	push	r14
    fb9c:	ff 92       	push	r15
    fb9e:	0f 93       	push	r16
    fba0:	1f 93       	push	r17
    fba2:	cf 93       	push	r28
    fba4:	df 93       	push	r29
    fba6:	7c 01       	movw	r14, r24
    fba8:	cb 01       	movw	r24, r22
    fbaa:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    fbac:	20 91 04 11 	lds	r18, 0x1104	; 0x801104 <TwoWire::transmitting>
    fbb0:	22 23       	and	r18, r18
    fbb2:	89 f0       	breq	.+34     	; 0xfbd6 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    fbb4:	eb 01       	movw	r28, r22
    fbb6:	6b 01       	movw	r12, r22
    fbb8:	c4 0e       	add	r12, r20
    fbba:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    fbbc:	cc 15       	cp	r28, r12
    fbbe:	dd 05       	cpc	r29, r13
    fbc0:	69 f0       	breq	.+26     	; 0xfbdc <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    fbc2:	69 91       	ld	r22, Y+
    fbc4:	d7 01       	movw	r26, r14
    fbc6:	ed 91       	ld	r30, X+
    fbc8:	fc 91       	ld	r31, X
    fbca:	01 90       	ld	r0, Z+
    fbcc:	f0 81       	ld	r31, Z
    fbce:	e0 2d       	mov	r30, r0
    fbd0:	c7 01       	movw	r24, r14
    fbd2:	19 95       	eicall
    fbd4:	f3 cf       	rjmp	.-26     	; 0xfbbc <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    fbd6:	64 2f       	mov	r22, r20
    fbd8:	0e 94 94 7d 	call	0xfb28	; 0xfb28 <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    fbdc:	c8 01       	movw	r24, r16
    fbde:	df 91       	pop	r29
    fbe0:	cf 91       	pop	r28
    fbe2:	1f 91       	pop	r17
    fbe4:	0f 91       	pop	r16
    fbe6:	ff 90       	pop	r15
    fbe8:	ef 90       	pop	r14
    fbea:	df 90       	pop	r13
    fbec:	cf 90       	pop	r12
    fbee:	08 95       	ret

0000fbf0 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    fbf0:	cf 93       	push	r28
    fbf2:	df 93       	push	r29
    fbf4:	1f 92       	push	r1
    fbf6:	cd b7       	in	r28, 0x3d	; 61
    fbf8:	de b7       	in	r29, 0x3e	; 62
    fbfa:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    fbfc:	20 91 04 11 	lds	r18, 0x1104	; 0x801104 <TwoWire::transmitting>
    fc00:	22 23       	and	r18, r18
    fc02:	f9 f0       	breq	.+62     	; 0xfc42 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    fc04:	20 91 01 11 	lds	r18, 0x1101	; 0x801101 <TwoWire::txBufferLength>
    fc08:	20 32       	cpi	r18, 0x20	; 32
    fc0a:	58 f0       	brcs	.+22     	; 0xfc22 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    fc0c:	21 e0       	ldi	r18, 0x01	; 1
    fc0e:	30 e0       	ldi	r19, 0x00	; 0
    fc10:	fc 01       	movw	r30, r24
    fc12:	33 83       	std	Z+3, r19	; 0x03
    fc14:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    fc16:	90 e0       	ldi	r25, 0x00	; 0
    fc18:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    fc1a:	0f 90       	pop	r0
    fc1c:	df 91       	pop	r29
    fc1e:	cf 91       	pop	r28
    fc20:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    fc22:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <TwoWire::txBufferIndex>
    fc26:	e8 2f       	mov	r30, r24
    fc28:	f0 e0       	ldi	r31, 0x00	; 0
    fc2a:	ec 58       	subi	r30, 0x8C	; 140
    fc2c:	ff 4e       	sbci	r31, 0xEF	; 239
    fc2e:	99 81       	ldd	r25, Y+1	; 0x01
    fc30:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    fc32:	8f 5f       	subi	r24, 0xFF	; 255
    fc34:	80 93 02 11 	sts	0x1102, r24	; 0x801102 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    fc38:	80 93 01 11 	sts	0x1101, r24	; 0x801101 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    fc3c:	81 e0       	ldi	r24, 0x01	; 1
    fc3e:	90 e0       	ldi	r25, 0x00	; 0
    fc40:	ec cf       	rjmp	.-40     	; 0xfc1a <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    fc42:	61 e0       	ldi	r22, 0x01	; 1
    fc44:	ce 01       	movw	r24, r28
    fc46:	01 96       	adiw	r24, 0x01	; 1
    fc48:	0e 94 94 7d 	call	0xfb28	; 0xfb28 <twi_transmit>
    fc4c:	f7 cf       	rjmp	.-18     	; 0xfc3c <TwoWire::write(unsigned char)+0x4c>

0000fc4e <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
    fc4e:	08 95       	ret

0000fc50 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    fc50:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    fc52:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    fc54:	0d b4       	in	r0, 0x2d	; 45
    fc56:	07 fe       	sbrs	r0, 7
    fc58:	fd cf       	rjmp	.-6      	; 0xfc54 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
    fc5a:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
    fc5c:	08 95       	ret

0000fc5e <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    fc5e:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    fc60:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
    fc62:	08 95       	ret

0000fc64 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    fc64:	cf 93       	push	r28
    fc66:	df 93       	push	r29
    fc68:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    fc6a:	89 8d       	ldd	r24, Y+25	; 0x19
    fc6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    fc6e:	89 2b       	or	r24, r25
    fc70:	41 f0       	breq	.+16     	; 0xfc82 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    fc72:	e8 81       	ld	r30, Y
    fc74:	f9 81       	ldd	r31, Y+1	; 0x01
    fc76:	02 84       	ldd	r0, Z+10	; 0x0a
    fc78:	f3 85       	ldd	r31, Z+11	; 0x0b
    fc7a:	e0 2d       	mov	r30, r0
    fc7c:	ce 01       	movw	r24, r28
    fc7e:	19 95       	eicall
    fc80:	f4 cf       	rjmp	.-24     	; 0xfc6a <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    fc82:	df 91       	pop	r29
    fc84:	cf 91       	pop	r28
    fc86:	08 95       	ret

0000fc88 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    fc88:	cf 93       	push	r28
    fc8a:	df 93       	push	r29
    fc8c:	1f 92       	push	r1
    fc8e:	cd b7       	in	r28, 0x3d	; 61
    fc90:	de b7       	in	r29, 0x3e	; 62
    fc92:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    fc94:	dc 01       	movw	r26, r24
    fc96:	ed 91       	ld	r30, X+
    fc98:	fc 91       	ld	r31, X
    fc9a:	02 80       	ldd	r0, Z+2	; 0x02
    fc9c:	f3 81       	ldd	r31, Z+3	; 0x03
    fc9e:	e0 2d       	mov	r30, r0
    fca0:	41 e0       	ldi	r20, 0x01	; 1
    fca2:	50 e0       	ldi	r21, 0x00	; 0
    fca4:	be 01       	movw	r22, r28
    fca6:	6f 5f       	subi	r22, 0xFF	; 255
    fca8:	7f 4f       	sbci	r23, 0xFF	; 255
    fcaa:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    fcac:	0f 90       	pop	r0
    fcae:	df 91       	pop	r29
    fcb0:	cf 91       	pop	r28
    fcb2:	08 95       	ret

0000fcb4 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    fcb4:	fc 01       	movw	r30, r24
    fcb6:	81 8d       	ldd	r24, Z+25	; 0x19
    fcb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    fcba:	08 95       	ret

0000fcbc <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    fcbc:	fc 01       	movw	r30, r24
    fcbe:	85 89       	ldd	r24, Z+21	; 0x15
    fcc0:	96 89       	ldd	r25, Z+22	; 0x16
    fcc2:	08 95       	ret

0000fcc4 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    fcc4:	22 ee       	ldi	r18, 0xE2	; 226
    fcc6:	32 e0       	ldi	r19, 0x02	; 2
    fcc8:	fc 01       	movw	r30, r24
    fcca:	31 83       	std	Z+1, r19	; 0x01
    fccc:	20 83       	st	Z, r18
    fcce:	fb 01       	movw	r30, r22
    fcd0:	41 89       	ldd	r20, Z+17	; 0x11
    fcd2:	52 89       	ldd	r21, Z+18	; 0x12
    fcd4:	63 89       	ldd	r22, Z+19	; 0x13
    fcd6:	74 89       	ldd	r23, Z+20	; 0x14
    fcd8:	fc 01       	movw	r30, r24
    fcda:	42 83       	std	Z+2, r20	; 0x02
    fcdc:	53 83       	std	Z+3, r21	; 0x03
    fcde:	64 83       	std	Z+4, r22	; 0x04
    fce0:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    fce2:	08 95       	ret

0000fce4 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    fce4:	80 e0       	ldi	r24, 0x00	; 0
    fce6:	08 95       	ret

0000fce8 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    fce8:	fc 01       	movw	r30, r24
    fcea:	94 85       	ldd	r25, Z+12	; 0x0c
    fcec:	fb 01       	movw	r30, r22
    fcee:	84 85       	ldd	r24, Z+12	; 0x0c
    fcf0:	98 13       	cpse	r25, r24
    fcf2:	03 c0       	rjmp	.+6      	; 0xfcfa <EthernetClient::operator==(EthernetClient const&)+0x12>
    fcf4:	81 e0       	ldi	r24, 0x01	; 1
    fcf6:	98 30       	cpi	r25, 0x08	; 8
    fcf8:	09 f4       	brne	.+2      	; 0xfcfc <EthernetClient::operator==(EthernetClient const&)+0x14>
    fcfa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    fcfc:	08 95       	ret

0000fcfe <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    fcfe:	21 e0       	ldi	r18, 0x01	; 1
    fd00:	fc 01       	movw	r30, r24
    fd02:	84 85       	ldd	r24, Z+12	; 0x0c
    fd04:	88 30       	cpi	r24, 0x08	; 8
    fd06:	09 f4       	brne	.+2      	; 0xfd0a <EthernetClient::operator bool()+0xc>
    fd08:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    fd0a:	82 2f       	mov	r24, r18
    fd0c:	08 95       	ret

0000fd0e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
    fd0e:	2f 92       	push	r2
    fd10:	3f 92       	push	r3
    fd12:	4f 92       	push	r4
    fd14:	5f 92       	push	r5
    fd16:	6f 92       	push	r6
    fd18:	7f 92       	push	r7
    fd1a:	8f 92       	push	r8
    fd1c:	9f 92       	push	r9
    fd1e:	af 92       	push	r10
    fd20:	bf 92       	push	r11
    fd22:	cf 92       	push	r12
    fd24:	df 92       	push	r13
    fd26:	ef 92       	push	r14
    fd28:	ff 92       	push	r15
    fd2a:	0f 93       	push	r16
    fd2c:	1f 93       	push	r17
    fd2e:	cf 93       	push	r28
    fd30:	df 93       	push	r29
    fd32:	cd b7       	in	r28, 0x3d	; 61
    fd34:	de b7       	in	r29, 0x3e	; 62
    fd36:	2d 97       	sbiw	r28, 0x0d	; 13
    fd38:	0f b6       	in	r0, 0x3f	; 63
    fd3a:	f8 94       	cli
    fd3c:	de bf       	out	0x3e, r29	; 62
    fd3e:	0f be       	out	0x3f, r0	; 63
    fd40:	cd bf       	out	0x3d, r28	; 61
    fd42:	fc 01       	movw	r30, r24
    fd44:	a0 81       	ld	r26, Z
    fd46:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
    fd48:	cb 01       	movw	r24, r22
    fd4a:	8e 50       	subi	r24, 0x0E	; 14
    fd4c:	97 42       	sbci	r25, 0x27	; 39
    fd4e:	02 97       	sbiw	r24, 0x02	; 2
    fd50:	20 f5       	brcc	.+72     	; 0xfd9a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
    fd52:	fd 01       	movw	r30, r26
    fd54:	01 90       	ld	r0, Z+
    fd56:	00 20       	and	r0, r0
    fd58:	e9 f7       	brne	.-6      	; 0xfd54 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x46>
    fd5a:	31 97       	sbiw	r30, 0x01	; 1
    fd5c:	ea 1b       	sub	r30, r26
    fd5e:	fb 0b       	sbc	r31, r27
    fd60:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0xc>
    fd64:	26 e0       	ldi	r18, 0x06	; 6
    fd66:	82 9f       	mul	r24, r18
    fd68:	c0 01       	movw	r24, r0
    fd6a:	11 24       	eor	r1, r1
    fd6c:	8e 9f       	mul	r24, r30
    fd6e:	90 01       	movw	r18, r0
    fd70:	8f 9f       	mul	r24, r31
    fd72:	30 0d       	add	r19, r0
    fd74:	9e 9f       	mul	r25, r30
    fd76:	30 0d       	add	r19, r0
    fd78:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
    fd7a:	80 91 e8 0d 	lds	r24, 0x0DE8	; 0x800de8 <my_lcd+0x12>
    fd7e:	90 91 e9 0d 	lds	r25, 0x0DE9	; 0x800de9 <my_lcd+0x13>
    fd82:	82 1b       	sub	r24, r18
    fd84:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
    fd86:	6e 30       	cpi	r22, 0x0E	; 14
    fd88:	77 42       	sbci	r23, 0x27	; 39
    fd8a:	89 f5       	brne	.+98     	; 0xfdee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
    fd8c:	bc 01       	movw	r22, r24
    fd8e:	97 ff       	sbrs	r25, 7
    fd90:	02 c0       	rjmp	.+4      	; 0xfd96 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x88>
    fd92:	6f 5f       	subi	r22, 0xFF	; 255
    fd94:	7f 4f       	sbci	r23, 0xFF	; 255
    fd96:	75 95       	asr	r23
    fd98:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
    fd9a:	70 93 d9 0d 	sts	0x0DD9, r23	; 0x800dd9 <my_lcd+0x3>
    fd9e:	60 93 d8 0d 	sts	0x0DD8, r22	; 0x800dd8 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
    fda2:	50 93 db 0d 	sts	0x0DDB, r21	; 0x800ddb <my_lcd+0x5>
    fda6:	40 93 da 0d 	sts	0x0DDA, r20	; 0x800dda <my_lcd+0x4>
    fdaa:	be 83       	std	Y+6, r27	; 0x06
    fdac:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
    fdae:	ed 81       	ldd	r30, Y+5	; 0x05
    fdb0:	fe 81       	ldd	r31, Y+6	; 0x06
    fdb2:	91 91       	ld	r25, Z+
    fdb4:	fe 83       	std	Y+6, r31	; 0x06
    fdb6:	ed 83       	std	Y+5, r30	; 0x05
    fdb8:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
    fdba:	99 23       	and	r25, r25
    fdbc:	09 f4       	brne	.+2      	; 0xfdc0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xb2>
    fdbe:	dd c0       	rjmp	.+442    	; 0xff7a <__DATA_REGION_LENGTH__+0x17a>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
    fdc0:	9a 30       	cpi	r25, 0x0A	; 10
    fdc2:	c9 f4       	brne	.+50     	; 0xfdf6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
    fdc4:	80 91 e2 0d 	lds	r24, 0x0DE2	; 0x800de2 <my_lcd+0xc>
    fdc8:	f8 e0       	ldi	r31, 0x08	; 8
    fdca:	8f 9f       	mul	r24, r31
    fdcc:	c0 01       	movw	r24, r0
    fdce:	11 24       	eor	r1, r1
    fdd0:	20 91 da 0d 	lds	r18, 0x0DDA	; 0x800dda <my_lcd+0x4>
    fdd4:	30 91 db 0d 	lds	r19, 0x0DDB	; 0x800ddb <my_lcd+0x5>
    fdd8:	82 0f       	add	r24, r18
    fdda:	93 1f       	adc	r25, r19
    fddc:	90 93 db 0d 	sts	0x0DDB, r25	; 0x800ddb <my_lcd+0x5>
    fde0:	80 93 da 0d 	sts	0x0DDA, r24	; 0x800dda <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
    fde4:	10 92 d9 0d 	sts	0x0DD9, r1	; 0x800dd9 <my_lcd+0x3>
    fde8:	10 92 d8 0d 	sts	0x0DD8, r1	; 0x800dd8 <my_lcd+0x2>
    fdec:	e0 cf       	rjmp	.-64     	; 0xfdae <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
    fdee:	bc 01       	movw	r22, r24
    fdf0:	61 50       	subi	r22, 0x01	; 1
    fdf2:	71 09       	sbc	r23, r1
    fdf4:	d2 cf       	rjmp	.-92     	; 0xfd9a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
    fdf6:	9d 30       	cpi	r25, 0x0D	; 13
    fdf8:	d1 f2       	breq	.-76     	; 0xfdae <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    fdfa:	20 91 d8 0d 	lds	r18, 0x0DD8	; 0x800dd8 <my_lcd+0x2>
    fdfe:	30 91 d9 0d 	lds	r19, 0x0DD9	; 0x800dd9 <my_lcd+0x3>
    fe02:	39 87       	std	Y+9, r19	; 0x09
    fe04:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    fe06:	20 91 e8 0d 	lds	r18, 0x0DE8	; 0x800de8 <my_lcd+0x12>
    fe0a:	30 91 e9 0d 	lds	r19, 0x0DE9	; 0x800de9 <my_lcd+0x13>
    fe0e:	48 85       	ldd	r20, Y+8	; 0x08
    fe10:	59 85       	ldd	r21, Y+9	; 0x09
    fe12:	42 17       	cp	r20, r18
    fe14:	53 07       	cpc	r21, r19
    fe16:	0c f0       	brlt	.+2      	; 0xfe1a <__DATA_REGION_LENGTH__+0x1a>
    fe18:	88 c0       	rjmp	.+272    	; 0xff2a <__DATA_REGION_LENGTH__+0x12a>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    fe1a:	60 90 da 0d 	lds	r6, 0x0DDA	; 0x800dda <my_lcd+0x4>
    fe1e:	70 90 db 0d 	lds	r7, 0x0DDB	; 0x800ddb <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    fe22:	20 91 ea 0d 	lds	r18, 0x0DEA	; 0x800dea <my_lcd+0x14>
    fe26:	30 91 eb 0d 	lds	r19, 0x0DEB	; 0x800deb <my_lcd+0x15>
    fe2a:	62 16       	cp	r6, r18
    fe2c:	73 06       	cpc	r7, r19
    fe2e:	0c f0       	brlt	.+2      	; 0xfe32 <__DATA_REGION_LENGTH__+0x32>
    fe30:	7c c0       	rjmp	.+248    	; 0xff2a <__DATA_REGION_LENGTH__+0x12a>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    fe32:	50 91 e2 0d 	lds	r21, 0x0DE2	; 0x800de2 <my_lcd+0xc>
    fe36:	5a 83       	std	Y+2, r21	; 0x02
    fe38:	c5 2e       	mov	r12, r21
    fe3a:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    fe3c:	28 85       	ldd	r18, Y+8	; 0x08
    fe3e:	39 85       	ldd	r19, Y+9	; 0x09
    fe40:	e6 e0       	ldi	r30, 0x06	; 6
    fe42:	5e 9f       	mul	r21, r30
    fe44:	20 0d       	add	r18, r0
    fe46:	31 1d       	adc	r19, r1
    fe48:	11 24       	eor	r1, r1
    fe4a:	12 16       	cp	r1, r18
    fe4c:	13 06       	cpc	r1, r19
    fe4e:	0c f0       	brlt	.+2      	; 0xfe52 <__DATA_REGION_LENGTH__+0x52>
    fe50:	6c c0       	rjmp	.+216    	; 0xff2a <__DATA_REGION_LENGTH__+0x12a>
    fe52:	96 01       	movw	r18, r12
    fe54:	93 e0       	ldi	r25, 0x03	; 3
    fe56:	22 0f       	add	r18, r18
    fe58:	33 1f       	adc	r19, r19
    fe5a:	9a 95       	dec	r25
    fe5c:	e1 f7       	brne	.-8      	; 0xfe56 <__DATA_REGION_LENGTH__+0x56>
    fe5e:	26 0d       	add	r18, r6
    fe60:	37 1d       	adc	r19, r7
    fe62:	12 16       	cp	r1, r18
    fe64:	13 06       	cpc	r1, r19
    fe66:	0c f0       	brlt	.+2      	; 0xfe6a <__DATA_REGION_LENGTH__+0x6a>
    fe68:	60 c0       	rjmp	.+192    	; 0xff2a <__DATA_REGION_LENGTH__+0x12a>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
    fe6a:	80 3b       	cpi	r24, 0xB0	; 176
    fe6c:	08 f0       	brcs	.+2      	; 0xfe70 <__DATA_REGION_LENGTH__+0x70>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
    fe6e:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    fe70:	f0 91 e3 0d 	lds	r31, 0x0DE3	; 0x800de3 <my_lcd+0xd>
    fe74:	ff 83       	std	Y+7, r31	; 0x07
    fe76:	20 90 de 0d 	lds	r2, 0x0DDE	; 0x800dde <my_lcd+0x8>
    fe7a:	30 90 df 0d 	lds	r3, 0x0DDF	; 0x800ddf <my_lcd+0x9>
    fe7e:	20 91 dc 0d 	lds	r18, 0x0DDC	; 0x800ddc <my_lcd+0x6>
    fe82:	30 91 dd 0d 	lds	r19, 0x0DDD	; 0x800ddd <my_lcd+0x7>
    fe86:	3c 83       	std	Y+4, r19	; 0x04
    fe88:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    fe8a:	48 85       	ldd	r20, Y+8	; 0x08
    fe8c:	59 85       	ldd	r21, Y+9	; 0x09
    fe8e:	5d 87       	std	Y+13, r21	; 0x0d
    fe90:	4c 87       	std	Y+12, r20	; 0x0c
    fe92:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    fe94:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    fe96:	26 e4       	ldi	r18, 0x46	; 70
    fe98:	35 e3       	ldi	r19, 0x35	; 53
    fe9a:	24 1b       	sub	r18, r20
    fe9c:	35 0b       	sbc	r19, r21
    fe9e:	f9 01       	movw	r30, r18
    fea0:	45 e0       	ldi	r20, 0x05	; 5
    fea2:	84 9f       	mul	r24, r20
    fea4:	e0 0d       	add	r30, r0
    fea6:	f1 1d       	adc	r31, r1
    fea8:	11 24       	eor	r1, r1
    feaa:	fb 87       	std	Y+11, r31	; 0x0b
    feac:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    feae:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
    feb0:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    feb2:	55 30       	cpi	r21, 0x05	; 5
    feb4:	29 f0       	breq	.+10     	; 0xfec0 <__DATA_REGION_LENGTH__+0xc0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    feb6:	ea 85       	ldd	r30, Y+10	; 0x0a
    feb8:	fb 85       	ldd	r31, Y+11	; 0x0b
    feba:	ea 0d       	add	r30, r10
    febc:	fb 1d       	adc	r31, r11
    febe:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
    fec0:	23 01       	movw	r4, r6
    fec2:	91 2c       	mov	r9, r1
    fec4:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
    fec6:	8e 2f       	mov	r24, r30
    fec8:	90 e0       	ldi	r25, 0x00	; 0
    feca:	99 87       	std	Y+9, r25	; 0x09
    fecc:	88 87       	std	Y+8, r24	; 0x08
    fece:	e0 ff       	sbrs	r30, 0
    fed0:	3c c0       	rjmp	.+120    	; 0xff4a <__DATA_REGION_LENGTH__+0x14a>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
    fed2:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
    fed4:	2b 81       	ldd	r18, Y+3	; 0x03
    fed6:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
    fed8:	eb 80       	ldd	r14, Y+3	; 0x03
    feda:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
    fedc:	91 30       	cpi	r25, 0x01	; 1
    fede:	09 f0       	breq	.+2      	; 0xfee2 <__DATA_REGION_LENGTH__+0xe2>
    fee0:	42 c0       	rjmp	.+132    	; 0xff66 <__DATA_REGION_LENGTH__+0x166>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    fee2:	a3 01       	movw	r20, r6
    fee4:	48 0d       	add	r20, r8
    fee6:	59 1d       	adc	r21, r9
    fee8:	b5 01       	movw	r22, r10
    feea:	86 ed       	ldi	r24, 0xD6	; 214
    feec:	9d e0       	ldi	r25, 0x0D	; 13
    feee:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
    fef2:	e8 85       	ldd	r30, Y+8	; 0x08
    fef4:	f9 85       	ldd	r31, Y+9	; 0x09
    fef6:	f5 95       	asr	r31
    fef8:	e7 95       	ror	r30
    fefa:	3f ef       	ldi	r19, 0xFF	; 255
    fefc:	83 1a       	sub	r8, r19
    fefe:	93 0a       	sbc	r9, r19
    ff00:	4c 0c       	add	r4, r12
    ff02:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
    ff04:	48 e0       	ldi	r20, 0x08	; 8
    ff06:	84 16       	cp	r8, r20
    ff08:	91 04       	cpc	r9, r1
    ff0a:	e9 f6       	brne	.-70     	; 0xfec6 <__DATA_REGION_LENGTH__+0xc6>
    ff0c:	5f ef       	ldi	r21, 0xFF	; 255
    ff0e:	a5 1a       	sub	r10, r21
    ff10:	b5 0a       	sbc	r11, r21
    ff12:	8c 85       	ldd	r24, Y+12	; 0x0c
    ff14:	9d 85       	ldd	r25, Y+13	; 0x0d
    ff16:	8c 0d       	add	r24, r12
    ff18:	9d 1d       	adc	r25, r13
    ff1a:	9d 87       	std	Y+13, r25	; 0x0d
    ff1c:	8c 87       	std	Y+12, r24	; 0x0c
    ff1e:	99 81       	ldd	r25, Y+1	; 0x01
    ff20:	9f 5f       	subi	r25, 0xFF	; 255
    ff22:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    ff24:	96 30       	cpi	r25, 0x06	; 6
    ff26:	09 f0       	breq	.+2      	; 0xff2a <__DATA_REGION_LENGTH__+0x12a>
    ff28:	c2 cf       	rjmp	.-124    	; 0xfeae <__DATA_REGION_LENGTH__+0xae>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
    ff2a:	20 91 e2 0d 	lds	r18, 0x0DE2	; 0x800de2 <my_lcd+0xc>
    ff2e:	80 91 d8 0d 	lds	r24, 0x0DD8	; 0x800dd8 <my_lcd+0x2>
    ff32:	90 91 d9 0d 	lds	r25, 0x0DD9	; 0x800dd9 <my_lcd+0x3>
    ff36:	e6 e0       	ldi	r30, 0x06	; 6
    ff38:	2e 9f       	mul	r18, r30
    ff3a:	80 0d       	add	r24, r0
    ff3c:	91 1d       	adc	r25, r1
    ff3e:	11 24       	eor	r1, r1
    ff40:	90 93 d9 0d 	sts	0x0DD9, r25	; 0x800dd9 <my_lcd+0x3>
    ff44:	80 93 d8 0d 	sts	0x0DD8, r24	; 0x800dd8 <my_lcd+0x2>
    ff48:	32 cf       	rjmp	.-412    	; 0xfdae <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
    ff4a:	eb 81       	ldd	r30, Y+3	; 0x03
    ff4c:	fc 81       	ldd	r31, Y+4	; 0x04
    ff4e:	2e 16       	cp	r2, r30
    ff50:	3f 06       	cpc	r3, r31
    ff52:	79 f2       	breq	.-98     	; 0xfef2 <__DATA_REGION_LENGTH__+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
    ff54:	ff 81       	ldd	r31, Y+7	; 0x07
    ff56:	f1 11       	cpse	r31, r1
    ff58:	cc cf       	rjmp	.-104    	; 0xfef2 <__DATA_REGION_LENGTH__+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
    ff5a:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    ff5c:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
    ff5e:	21 30       	cpi	r18, 0x01	; 1
    ff60:	11 f4       	brne	.+4      	; 0xff66 <__DATA_REGION_LENGTH__+0x166>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    ff62:	91 01       	movw	r18, r2
    ff64:	be cf       	rjmp	.-132    	; 0xfee2 <__DATA_REGION_LENGTH__+0xe2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    ff66:	86 01       	movw	r16, r12
    ff68:	96 01       	movw	r18, r12
    ff6a:	a2 01       	movw	r20, r4
    ff6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    ff6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    ff70:	86 ed       	ldi	r24, 0xD6	; 214
    ff72:	9d e0       	ldi	r25, 0x0D	; 13
    ff74:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
    ff78:	bc cf       	rjmp	.-136    	; 0xfef2 <__DATA_REGION_LENGTH__+0xf2>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
    ff7a:	2d 96       	adiw	r28, 0x0d	; 13
    ff7c:	0f b6       	in	r0, 0x3f	; 63
    ff7e:	f8 94       	cli
    ff80:	de bf       	out	0x3e, r29	; 62
    ff82:	0f be       	out	0x3f, r0	; 63
    ff84:	cd bf       	out	0x3d, r28	; 61
    ff86:	df 91       	pop	r29
    ff88:	cf 91       	pop	r28
    ff8a:	1f 91       	pop	r17
    ff8c:	0f 91       	pop	r16
    ff8e:	ff 90       	pop	r15
    ff90:	ef 90       	pop	r14
    ff92:	df 90       	pop	r13
    ff94:	cf 90       	pop	r12
    ff96:	bf 90       	pop	r11
    ff98:	af 90       	pop	r10
    ff9a:	9f 90       	pop	r9
    ff9c:	8f 90       	pop	r8
    ff9e:	7f 90       	pop	r7
    ffa0:	6f 90       	pop	r6
    ffa2:	5f 90       	pop	r5
    ffa4:	4f 90       	pop	r4
    ffa6:	3f 90       	pop	r3
    ffa8:	2f 90       	pop	r2
    ffaa:	08 95       	ret

0000ffac <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    ffac:	8f 92       	push	r8
    ffae:	9f 92       	push	r9
    ffb0:	af 92       	push	r10
    ffb2:	bf 92       	push	r11
    ffb4:	ef 92       	push	r14
    ffb6:	ff 92       	push	r15
    ffb8:	0f 93       	push	r16
    ffba:	1f 93       	push	r17
    ffbc:	cf 93       	push	r28
    ffbe:	df 93       	push	r29
    ffc0:	cd b7       	in	r28, 0x3d	; 61
    ffc2:	de b7       	in	r29, 0x3e	; 62
    ffc4:	a1 97       	sbiw	r28, 0x21	; 33
    ffc6:	0f b6       	in	r0, 0x3f	; 63
    ffc8:	f8 94       	cli
    ffca:	de bf       	out	0x3e, r29	; 62
    ffcc:	0f be       	out	0x3f, r0	; 63
    ffce:	cd bf       	out	0x3d, r28	; 61
    ffd0:	7c 01       	movw	r14, r24
    ffd2:	fa 01       	movw	r30, r20
    ffd4:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    ffd6:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    ffd8:	22 30       	cpi	r18, 0x02	; 2
    ffda:	08 f4       	brcc	.+2      	; 0xffde <Print::printNumber(unsigned long, unsigned char)+0x32>
    ffdc:	2a e0       	ldi	r18, 0x0A	; 10
    ffde:	8e 01       	movw	r16, r28
    ffe0:	0f 5d       	subi	r16, 0xDF	; 223
    ffe2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    ffe4:	82 2e       	mov	r8, r18
    ffe6:	91 2c       	mov	r9, r1
    ffe8:	b1 2c       	mov	r11, r1
    ffea:	a1 2c       	mov	r10, r1
    ffec:	bf 01       	movw	r22, r30
    ffee:	a5 01       	movw	r20, r10
    fff0:	94 01       	movw	r18, r8
    fff2:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    fff6:	f9 01       	movw	r30, r18
    fff8:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    fffa:	6a 30       	cpi	r22, 0x0A	; 10
    fffc:	74 f5       	brge	.+92     	; 0x1005a <__EEPROM_REGION_LENGTH__+0x5a>
    fffe:	60 5d       	subi	r22, 0xD0	; 208
   10000:	d8 01       	movw	r26, r16
   10002:	6e 93       	st	-X, r22
   10004:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   10006:	23 2b       	or	r18, r19
   10008:	24 2b       	or	r18, r20
   1000a:	25 2b       	or	r18, r21
   1000c:	79 f7       	brne	.-34     	; 0xffec <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   1000e:	90 e0       	ldi	r25, 0x00	; 0
   10010:	80 e0       	ldi	r24, 0x00	; 0
write():
   10012:	10 97       	sbiw	r26, 0x00	; 0
   10014:	89 f0       	breq	.+34     	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   10016:	fd 01       	movw	r30, r26
   10018:	01 90       	ld	r0, Z+
   1001a:	00 20       	and	r0, r0
   1001c:	e9 f7       	brne	.-6      	; 0x10018 <__EEPROM_REGION_LENGTH__+0x18>
   1001e:	31 97       	sbiw	r30, 0x01	; 1
   10020:	af 01       	movw	r20, r30
   10022:	4a 1b       	sub	r20, r26
   10024:	5b 0b       	sbc	r21, r27
   10026:	d7 01       	movw	r26, r14
   10028:	ed 91       	ld	r30, X+
   1002a:	fc 91       	ld	r31, X
   1002c:	02 80       	ldd	r0, Z+2	; 0x02
   1002e:	f3 81       	ldd	r31, Z+3	; 0x03
   10030:	e0 2d       	mov	r30, r0
   10032:	b8 01       	movw	r22, r16
   10034:	c7 01       	movw	r24, r14
   10036:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   10038:	a1 96       	adiw	r28, 0x21	; 33
   1003a:	0f b6       	in	r0, 0x3f	; 63
   1003c:	f8 94       	cli
   1003e:	de bf       	out	0x3e, r29	; 62
   10040:	0f be       	out	0x3f, r0	; 63
   10042:	cd bf       	out	0x3d, r28	; 61
   10044:	df 91       	pop	r29
   10046:	cf 91       	pop	r28
   10048:	1f 91       	pop	r17
   1004a:	0f 91       	pop	r16
   1004c:	ff 90       	pop	r15
   1004e:	ef 90       	pop	r14
   10050:	bf 90       	pop	r11
   10052:	af 90       	pop	r10
   10054:	9f 90       	pop	r9
   10056:	8f 90       	pop	r8
   10058:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1005a:	69 5c       	subi	r22, 0xC9	; 201
   1005c:	d1 cf       	rjmp	.-94     	; 0x10000 <__EEPROM_REGION_LENGTH__>

0001005e <TwoWire::requestFrom(int, int) [clone .constprop.129]>:
_ZN7TwoWire11requestFromEii.constprop.129():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   1005e:	68 2f       	mov	r22, r24
   10060:	88 e6       	ldi	r24, 0x68	; 104
   10062:	0e 94 e1 7b 	call	0xf7c2	; 0xf7c2 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   10066:	10 92 00 11 	sts	0x1100, r1	; 0x801100 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   1006a:	80 93 ff 10 	sts	0x10FF, r24	; 0x8010ff <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   1006e:	08 95       	ret

00010070 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   10070:	8f 92       	push	r8
   10072:	9f 92       	push	r9
   10074:	af 92       	push	r10
   10076:	bf 92       	push	r11
   10078:	cf 92       	push	r12
   1007a:	df 92       	push	r13
   1007c:	ef 92       	push	r14
   1007e:	ff 92       	push	r15
   10080:	0f 93       	push	r16
   10082:	1f 93       	push	r17
   10084:	cf 93       	push	r28
   10086:	df 93       	push	r29
   10088:	7c 01       	movw	r14, r24
   1008a:	eb 01       	movw	r28, r22
   1008c:	6c 01       	movw	r12, r24
   1008e:	82 e0       	ldi	r24, 0x02	; 2
   10090:	c8 0e       	add	r12, r24
   10092:	d1 1c       	adc	r13, r1
   10094:	47 01       	movw	r8, r14
   10096:	e5 e0       	ldi	r30, 0x05	; 5
   10098:	8e 0e       	add	r8, r30
   1009a:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   1009c:	10 e0       	ldi	r17, 0x00	; 0
   1009e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   100a0:	f6 01       	movw	r30, r12
   100a2:	41 91       	ld	r20, Z+
   100a4:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   100a6:	50 e0       	ldi	r21, 0x00	; 0
   100a8:	70 e0       	ldi	r23, 0x00	; 0
   100aa:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   100ac:	2a e0       	ldi	r18, 0x0A	; 10
   100ae:	ce 01       	movw	r24, r28
   100b0:	0e 94 d6 7f 	call	0xffac	; 0xffac <Print::printNumber(unsigned long, unsigned char)>
   100b4:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   100b6:	e8 81       	ld	r30, Y
   100b8:	f9 81       	ldd	r31, Y+1	; 0x01
   100ba:	01 90       	ld	r0, Z+
   100bc:	f0 81       	ld	r31, Z
   100be:	e0 2d       	mov	r30, r0
   100c0:	6e e2       	ldi	r22, 0x2E	; 46
   100c2:	ce 01       	movw	r24, r28
   100c4:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   100c6:	8a 0d       	add	r24, r10
   100c8:	9b 1d       	adc	r25, r11
   100ca:	08 0f       	add	r16, r24
   100cc:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   100ce:	c8 14       	cp	r12, r8
   100d0:	d9 04       	cpc	r13, r9
   100d2:	31 f7       	brne	.-52     	; 0x100a0 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   100d4:	f7 01       	movw	r30, r14
   100d6:	45 81       	ldd	r20, Z+5	; 0x05
   100d8:	50 e0       	ldi	r21, 0x00	; 0
   100da:	70 e0       	ldi	r23, 0x00	; 0
   100dc:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   100de:	2a e0       	ldi	r18, 0x0A	; 10
   100e0:	ce 01       	movw	r24, r28
   100e2:	0e 94 d6 7f 	call	0xffac	; 0xffac <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   100e6:	80 0f       	add	r24, r16
   100e8:	91 1f       	adc	r25, r17
   100ea:	df 91       	pop	r29
   100ec:	cf 91       	pop	r28
   100ee:	1f 91       	pop	r17
   100f0:	0f 91       	pop	r16
   100f2:	ff 90       	pop	r15
   100f4:	ef 90       	pop	r14
   100f6:	df 90       	pop	r13
   100f8:	cf 90       	pop	r12
   100fa:	bf 90       	pop	r11
   100fc:	af 90       	pop	r10
   100fe:	9f 90       	pop	r9
   10100:	8f 90       	pop	r8
   10102:	08 95       	ret

00010104 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   10104:	1f 93       	push	r17
   10106:	cf 93       	push	r28
   10108:	df 93       	push	r29
   1010a:	18 2f       	mov	r17, r24
   1010c:	66 e2       	ldi	r22, 0x26	; 38
   1010e:	70 e0       	ldi	r23, 0x00	; 0
   10110:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   10114:	c8 2f       	mov	r28, r24
   10116:	d0 e0       	ldi	r29, 0x00	; 0
   10118:	dc 2f       	mov	r29, r28
   1011a:	cc 27       	eor	r28, r28
   1011c:	67 e2       	ldi	r22, 0x27	; 39
   1011e:	70 e0       	ldi	r23, 0x00	; 0
   10120:	81 2f       	mov	r24, r17
   10122:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   10126:	8c 0f       	add	r24, r28
   10128:	9d 2f       	mov	r25, r29
   1012a:	91 1d       	adc	r25, r1
   1012c:	df 91       	pop	r29
   1012e:	cf 91       	pop	r28
   10130:	1f 91       	pop	r17
   10132:	08 95       	ret

00010134 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   10134:	1f 93       	push	r17
   10136:	cf 93       	push	r28
   10138:	df 93       	push	r29
   1013a:	18 2f       	mov	r17, r24
   1013c:	60 e2       	ldi	r22, 0x20	; 32
   1013e:	70 e0       	ldi	r23, 0x00	; 0
   10140:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   10144:	c8 2f       	mov	r28, r24
   10146:	d0 e0       	ldi	r29, 0x00	; 0
   10148:	dc 2f       	mov	r29, r28
   1014a:	cc 27       	eor	r28, r28
   1014c:	61 e2       	ldi	r22, 0x21	; 33
   1014e:	70 e0       	ldi	r23, 0x00	; 0
   10150:	81 2f       	mov	r24, r17
   10152:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   10156:	8c 0f       	add	r24, r28
   10158:	9d 2f       	mov	r25, r29
   1015a:	91 1d       	adc	r25, r1
   1015c:	df 91       	pop	r29
   1015e:	cf 91       	pop	r28
   10160:	1f 91       	pop	r17
   10162:	08 95       	ret

00010164 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   10164:	0e 94 60 b4 	call	0x168c0	; 0x168c0 <abort>

00010168 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   10168:	cf 92       	push	r12
   1016a:	df 92       	push	r13
   1016c:	ef 92       	push	r14
   1016e:	ff 92       	push	r15
   10170:	0f 93       	push	r16
   10172:	1f 93       	push	r17
   10174:	cf 93       	push	r28
   10176:	df 93       	push	r29
   10178:	cd b7       	in	r28, 0x3d	; 61
   1017a:	de b7       	in	r29, 0x3e	; 62
   1017c:	af 97       	sbiw	r28, 0x2f	; 47
   1017e:	0f b6       	in	r0, 0x3f	; 63
   10180:	f8 94       	cli
   10182:	de bf       	out	0x3e, r29	; 62
   10184:	0f be       	out	0x3f, r0	; 63
   10186:	cd bf       	out	0x3d, r28	; 61
   10188:	7c 01       	movw	r14, r24
   1018a:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   1018c:	02 ee       	ldi	r16, 0xE2	; 226
   1018e:	12 e0       	ldi	r17, 0x02	; 2
   10190:	1a 83       	std	Y+2, r17	; 0x02
   10192:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10194:	1c 86       	std	Y+12, r1	; 0x0c
   10196:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
   10198:	88 ee       	ldi	r24, 0xE8	; 232
   1019a:	93 e0       	ldi	r25, 0x03	; 3
   1019c:	a0 e0       	ldi	r26, 0x00	; 0
   1019e:	b0 e0       	ldi	r27, 0x00	; 0
   101a0:	8d 87       	std	Y+13, r24	; 0x0d
   101a2:	9e 87       	std	Y+14, r25	; 0x0e
   101a4:	af 87       	std	Y+15, r26	; 0x0f
   101a6:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   101a8:	88 e9       	ldi	r24, 0x98	; 152
   101aa:	92 e0       	ldi	r25, 0x02	; 2
   101ac:	9a 87       	std	Y+10, r25	; 0x0a
   101ae:	89 87       	std	Y+9, r24	; 0x09
   101b0:	88 e0       	ldi	r24, 0x08	; 8
   101b2:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
   101b4:	19 8f       	std	Y+25, r17	; 0x19
   101b6:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   101b8:	1a 8e       	std	Y+26, r1	; 0x1a
   101ba:	1b 8e       	std	Y+27, r1	; 0x1b
   101bc:	1c 8e       	std	Y+28, r1	; 0x1c
   101be:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   101c0:	1b a7       	std	Y+43, r17	; 0x2b
   101c2:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   101c4:	1c a6       	std	Y+44, r1	; 0x2c
   101c6:	1d a6       	std	Y+45, r1	; 0x2d
   101c8:	1e a6       	std	Y+46, r1	; 0x2e
   101ca:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   101cc:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <Ethernet+0x2>
   101d0:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <Ethernet+0x3>
   101d4:	a0 91 2a 0c 	lds	r26, 0x0C2A	; 0x800c2a <Ethernet+0x4>
   101d8:	b0 91 2b 0c 	lds	r27, 0x0C2B	; 0x800c2b <Ethernet+0x5>
   101dc:	8e a3       	std	Y+38, r24	; 0x26
   101de:	9f a3       	std	Y+39, r25	; 0x27
   101e0:	a8 a7       	std	Y+40, r26	; 0x28
   101e2:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   101e4:	8b 83       	std	Y+3, r24	; 0x03
   101e6:	9c 83       	std	Y+4, r25	; 0x04
   101e8:	ad 83       	std	Y+5, r26	; 0x05
   101ea:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   101ec:	18 86       	std	Y+8, r1	; 0x08
   101ee:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   101f0:	ae 01       	movw	r20, r28
   101f2:	46 5d       	subi	r20, 0xD6	; 214
   101f4:	5f 4f       	sbci	r21, 0xFF	; 255
   101f6:	ce 01       	movw	r24, r28
   101f8:	01 96       	adiw	r24, 0x01	; 1
   101fa:	0e 94 77 32 	call	0x64ee	; 0x64ee <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   101fe:	81 30       	cpi	r24, 0x01	; 1
   10200:	91 05       	cpc	r25, r1
   10202:	b1 f4       	brne	.+44     	; 0x10230 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   10204:	d7 01       	movw	r26, r14
   10206:	ed 91       	ld	r30, X+
   10208:	fc 91       	ld	r31, X
   1020a:	04 88       	ldd	r0, Z+20	; 0x14
   1020c:	f5 89       	ldd	r31, Z+21	; 0x15
   1020e:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   10210:	1d a3       	std	Y+37, r17	; 0x25
   10212:	0c a3       	std	Y+36, r16	; 0x24
   10214:	8c a5       	ldd	r24, Y+44	; 0x2c
   10216:	9d a5       	ldd	r25, Y+45	; 0x2d
   10218:	ae a5       	ldd	r26, Y+46	; 0x2e
   1021a:	bf a5       	ldd	r27, Y+47	; 0x2f
   1021c:	8e a3       	std	Y+38, r24	; 0x26
   1021e:	9f a3       	std	Y+39, r25	; 0x27
   10220:	a8 a7       	std	Y+40, r26	; 0x28
   10222:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   10224:	a6 01       	movw	r20, r12
   10226:	be 01       	movw	r22, r28
   10228:	6c 5d       	subi	r22, 0xDC	; 220
   1022a:	7f 4f       	sbci	r23, 0xFF	; 255
   1022c:	c7 01       	movw	r24, r14
   1022e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   10230:	af 96       	adiw	r28, 0x2f	; 47
   10232:	0f b6       	in	r0, 0x3f	; 63
   10234:	f8 94       	cli
   10236:	de bf       	out	0x3e, r29	; 62
   10238:	0f be       	out	0x3f, r0	; 63
   1023a:	cd bf       	out	0x3d, r28	; 61
   1023c:	df 91       	pop	r29
   1023e:	cf 91       	pop	r28
   10240:	1f 91       	pop	r17
   10242:	0f 91       	pop	r16
   10244:	ff 90       	pop	r15
   10246:	ef 90       	pop	r14
   10248:	df 90       	pop	r13
   1024a:	cf 90       	pop	r12
   1024c:	08 95       	ret

0001024e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.190():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   1024e:	ef 92       	push	r14
   10250:	ff 92       	push	r15
   10252:	0f 93       	push	r16
   10254:	1f 93       	push	r17
   10256:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   10258:	e0 90 e0 0d 	lds	r14, 0x0DE0	; 0x800de0 <my_lcd+0xa>
   1025c:	f0 90 e1 0d 	lds	r15, 0x0DE1	; 0x800de1 <my_lcd+0xb>
   10260:	01 e0       	ldi	r16, 0x01	; 1
   10262:	10 e0       	ldi	r17, 0x00	; 0
   10264:	ab 01       	movw	r20, r22
   10266:	bc 01       	movw	r22, r24
   10268:	86 ed       	ldi	r24, 0xD6	; 214
   1026a:	9d e0       	ldi	r25, 0x0D	; 13
   1026c:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   10270:	1f 91       	pop	r17
   10272:	0f 91       	pop	r16
   10274:	ff 90       	pop	r15
   10276:	ef 90       	pop	r14
   10278:	08 95       	ret

0001027a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1027a:	8f 92       	push	r8
   1027c:	9f 92       	push	r9
   1027e:	af 92       	push	r10
   10280:	bf 92       	push	r11
   10282:	cf 92       	push	r12
   10284:	df 92       	push	r13
   10286:	ef 92       	push	r14
   10288:	ff 92       	push	r15
   1028a:	0f 93       	push	r16
   1028c:	1f 93       	push	r17
   1028e:	cf 93       	push	r28
   10290:	df 93       	push	r29
   10292:	6c 01       	movw	r12, r24
   10294:	eb 01       	movw	r28, r22
   10296:	4a 01       	movw	r8, r20
   10298:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   1029a:	9a 01       	movw	r18, r20
   1029c:	28 1b       	sub	r18, r24
   1029e:	39 0b       	sbc	r19, r25
   102a0:	89 01       	movw	r16, r18
   102a2:	0f 5f       	subi	r16, 0xFF	; 255
   102a4:	1f 4f       	sbci	r17, 0xFF	; 255
   102a6:	c7 01       	movw	r24, r14
   102a8:	86 1b       	sub	r24, r22
   102aa:	97 0b       	sbc	r25, r23
   102ac:	5c 01       	movw	r10, r24
   102ae:	4f ef       	ldi	r20, 0xFF	; 255
   102b0:	a4 1a       	sub	r10, r20
   102b2:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   102b4:	17 ff       	sbrs	r17, 7
   102b6:	04 c0       	rjmp	.+8      	; 0x102c0 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   102b8:	89 01       	movw	r16, r18
   102ba:	00 95       	com	r16
   102bc:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   102be:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   102c0:	b7 fe       	sbrs	r11, 7
   102c2:	04 c0       	rjmp	.+8      	; 0x102cc <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   102c4:	5c 01       	movw	r10, r24
   102c6:	a0 94       	com	r10
   102c8:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   102ca:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   102cc:	a8 01       	movw	r20, r16
   102ce:	be 01       	movw	r22, r28
   102d0:	c6 01       	movw	r24, r12
   102d2:	0e 94 27 81 	call	0x1024e	; 0x1024e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   102d6:	a8 01       	movw	r20, r16
   102d8:	b7 01       	movw	r22, r14
   102da:	c6 01       	movw	r24, r12
   102dc:	0e 94 27 81 	call	0x1024e	; 0x1024e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   102e0:	e0 90 e0 0d 	lds	r14, 0x0DE0	; 0x800de0 <my_lcd+0xa>
   102e4:	f0 90 e1 0d 	lds	r15, 0x0DE1	; 0x800de1 <my_lcd+0xb>
   102e8:	85 01       	movw	r16, r10
   102ea:	21 e0       	ldi	r18, 0x01	; 1
   102ec:	30 e0       	ldi	r19, 0x00	; 0
   102ee:	ae 01       	movw	r20, r28
   102f0:	b6 01       	movw	r22, r12
   102f2:	86 ed       	ldi	r24, 0xD6	; 214
   102f4:	9d e0       	ldi	r25, 0x0D	; 13
   102f6:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   102fa:	e0 90 e0 0d 	lds	r14, 0x0DE0	; 0x800de0 <my_lcd+0xa>
   102fe:	f0 90 e1 0d 	lds	r15, 0x0DE1	; 0x800de1 <my_lcd+0xb>
   10302:	21 e0       	ldi	r18, 0x01	; 1
   10304:	30 e0       	ldi	r19, 0x00	; 0
   10306:	ae 01       	movw	r20, r28
   10308:	b4 01       	movw	r22, r8
   1030a:	86 ed       	ldi	r24, 0xD6	; 214
   1030c:	9d e0       	ldi	r25, 0x0D	; 13
   1030e:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   10312:	df 91       	pop	r29
   10314:	cf 91       	pop	r28
   10316:	1f 91       	pop	r17
   10318:	0f 91       	pop	r16
   1031a:	ff 90       	pop	r15
   1031c:	ef 90       	pop	r14
   1031e:	df 90       	pop	r13
   10320:	cf 90       	pop	r12
   10322:	bf 90       	pop	r11
   10324:	af 90       	pop	r10
   10326:	9f 90       	pop	r9
   10328:	8f 90       	pop	r8
   1032a:	08 95       	ret

0001032c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1032c:	ef 92       	push	r14
   1032e:	ff 92       	push	r15
   10330:	0f 93       	push	r16
   10332:	1f 93       	push	r17
   10334:	cf 93       	push	r28
   10336:	df 93       	push	r29
   10338:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   1033a:	ea 01       	movw	r28, r20
   1033c:	c8 1b       	sub	r28, r24
   1033e:	d9 0b       	sbc	r29, r25
   10340:	9e 01       	movw	r18, r28
   10342:	2f 5f       	subi	r18, 0xFF	; 255
   10344:	3f 4f       	sbci	r19, 0xFF	; 255
   10346:	df 01       	movw	r26, r30
   10348:	a6 1b       	sub	r26, r22
   1034a:	b7 0b       	sbc	r27, r23
   1034c:	8d 01       	movw	r16, r26
   1034e:	0f 5f       	subi	r16, 0xFF	; 255
   10350:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   10352:	37 ff       	sbrs	r19, 7
   10354:	04 c0       	rjmp	.+8      	; 0x1035e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   10356:	9e 01       	movw	r18, r28
   10358:	20 95       	com	r18
   1035a:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   1035c:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   1035e:	17 ff       	sbrs	r17, 7
   10360:	04 c0       	rjmp	.+8      	; 0x1036a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   10362:	8d 01       	movw	r16, r26
   10364:	00 95       	com	r16
   10366:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   10368:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   1036a:	e0 90 e0 0d 	lds	r14, 0x0DE0	; 0x800de0 <my_lcd+0xa>
   1036e:	f0 90 e1 0d 	lds	r15, 0x0DE1	; 0x800de1 <my_lcd+0xb>
   10372:	ab 01       	movw	r20, r22
   10374:	bc 01       	movw	r22, r24
   10376:	86 ed       	ldi	r24, 0xD6	; 214
   10378:	9d e0       	ldi	r25, 0x0D	; 13
   1037a:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   1037e:	df 91       	pop	r29
   10380:	cf 91       	pop	r28
   10382:	1f 91       	pop	r17
   10384:	0f 91       	pop	r16
   10386:	ff 90       	pop	r15
   10388:	ef 90       	pop	r14
   1038a:	08 95       	ret

0001038c <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   1038c:	cf 92       	push	r12
   1038e:	df 92       	push	r13
   10390:	ef 92       	push	r14
   10392:	ff 92       	push	r15
   10394:	6b 01       	movw	r12, r22
   10396:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   10398:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <SRAM+0x4>
   1039c:	90 91 a1 0c 	lds	r25, 0x0CA1	; 0x800ca1 <SRAM+0x5>
   103a0:	a0 91 a2 0c 	lds	r26, 0x0CA2	; 0x800ca2 <SRAM+0x6>
   103a4:	b0 91 a3 0c 	lds	r27, 0x0CA3	; 0x800ca3 <SRAM+0x7>
   103a8:	01 97       	sbiw	r24, 0x01	; 1
   103aa:	a1 40       	sbci	r26, 0x01	; 1
   103ac:	b1 05       	cpc	r27, r1
   103ae:	48 f0       	brcs	.+18     	; 0x103c2 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   103b0:	b7 01       	movw	r22, r14
   103b2:	88 27       	eor	r24, r24
   103b4:	99 27       	eor	r25, r25
   103b6:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   103ba:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
   103be:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   103c2:	99 27       	eor	r25, r25
   103c4:	8f 2d       	mov	r24, r15
   103c6:	7e 2d       	mov	r23, r14
   103c8:	6d 2d       	mov	r22, r13
   103ca:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   103ce:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
   103d2:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   103d6:	6c 2d       	mov	r22, r12
   103d8:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   103dc:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   103e0:	ff 90       	pop	r15
   103e2:	ef 90       	pop	r14
   103e4:	df 90       	pop	r13
   103e6:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   103e8:	0c 94 a9 35 	jmp	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>

000103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>:
_ZN7TwoWire17beginTransmissionEh.constprop.167():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   103ec:	91 e0       	ldi	r25, 0x01	; 1
   103ee:	90 93 04 11 	sts	0x1104, r25	; 0x801104 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   103f2:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   103f6:	10 92 02 11 	sts	0x1102, r1	; 0x801102 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   103fa:	10 92 01 11 	sts	0x1101, r1	; 0x801101 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
   103fe:	08 95       	ret

00010400 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   10400:	ef 92       	push	r14
   10402:	ff 92       	push	r15
   10404:	0f 93       	push	r16
   10406:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   10408:	e6 ed       	ldi	r30, 0xD6	; 214
   1040a:	fd e0       	ldi	r31, 0x0D	; 13
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   1040c:	04 89       	ldd	r16, Z+20	; 0x14
   1040e:	15 89       	ldd	r17, Z+21	; 0x15
   10410:	22 89       	ldd	r18, Z+18	; 0x12
   10412:	33 89       	ldd	r19, Z+19	; 0x13
   10414:	7c 01       	movw	r14, r24
   10416:	50 e0       	ldi	r21, 0x00	; 0
   10418:	40 e0       	ldi	r20, 0x00	; 0
   1041a:	70 e0       	ldi	r23, 0x00	; 0
   1041c:	60 e0       	ldi	r22, 0x00	; 0
   1041e:	cf 01       	movw	r24, r30
   10420:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   10424:	1f 91       	pop	r17
   10426:	0f 91       	pop	r16
   10428:	ff 90       	pop	r15
   1042a:	ef 90       	pop	r14
   1042c:	08 95       	ret

0001042e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>:
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   1042e:	8f 92       	push	r8
   10430:	9f 92       	push	r9
   10432:	af 92       	push	r10
   10434:	bf 92       	push	r11
   10436:	cf 92       	push	r12
   10438:	df 92       	push	r13
   1043a:	ef 92       	push	r14
   1043c:	ff 92       	push	r15
   1043e:	0f 93       	push	r16
   10440:	1f 93       	push	r17
   10442:	cf 93       	push	r28
   10444:	df 93       	push	r29
   10446:	00 d0       	rcall	.+0      	; 0x10448 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1a>
   10448:	00 d0       	rcall	.+0      	; 0x1044a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1c>
   1044a:	cd b7       	in	r28, 0x3d	; 61
   1044c:	de b7       	in	r29, 0x3e	; 62
   1044e:	6c 01       	movw	r12, r24
   10450:	5b 01       	movw	r10, r22
   10452:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   10454:	10 92 e3 0d 	sts	0x0DE3, r1	; 0x800de3 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   10458:	20 93 e2 0d 	sts	0x0DE2, r18	; 0x800de2 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   1045c:	10 93 dd 0d 	sts	0x0DDD, r17	; 0x800ddd <my_lcd+0x7>
   10460:	00 93 dc 0d 	sts	0x0DDC, r16	; 0x800ddc <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   10464:	f0 92 df 0d 	sts	0x0DDF, r15	; 0x800ddf <my_lcd+0x9>
   10468:	e0 92 de 0d 	sts	0x0DDE, r14	; 0x800dde <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1046c:	1a 82       	std	Y+2, r1	; 0x02
   1046e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   10470:	1c 82       	std	Y+4, r1	; 0x04
   10472:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   10474:	1e 82       	std	Y+6, r1	; 0x06
   10476:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   10478:	fc 01       	movw	r30, r24
   1047a:	01 90       	ld	r0, Z+
   1047c:	00 20       	and	r0, r0
   1047e:	e9 f7       	brne	.-6      	; 0x1047a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x4c>
   10480:	31 97       	sbiw	r30, 0x01	; 1
   10482:	8f 01       	movw	r16, r30
   10484:	08 1b       	sub	r16, r24
   10486:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   10488:	b8 01       	movw	r22, r16
   1048a:	6f 5f       	subi	r22, 0xFF	; 255
   1048c:	7f 4f       	sbci	r23, 0xFF	; 255
   1048e:	90 e0       	ldi	r25, 0x00	; 0
   10490:	80 e0       	ldi	r24, 0x00	; 0
   10492:	0e 94 7f b3 	call	0x166fe	; 0x166fe <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   10496:	00 97       	sbiw	r24, 0x00	; 0
   10498:	81 f0       	breq	.+32     	; 0x104ba <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1049a:	9a 83       	std	Y+2, r25	; 0x02
   1049c:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1049e:	1c 83       	std	Y+4, r17	; 0x04
   104a0:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   104a2:	2d 81       	ldd	r18, Y+5	; 0x05
   104a4:	3e 81       	ldd	r19, Y+6	; 0x06
   104a6:	23 2b       	or	r18, r19
   104a8:	11 f4       	brne	.+4      	; 0x104ae <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x80>
   104aa:	fc 01       	movw	r30, r24
   104ac:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   104ae:	1e 83       	std	Y+6, r17	; 0x06
   104b0:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   104b2:	b6 01       	movw	r22, r12
   104b4:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
   104b8:	0c c0       	rjmp	.+24     	; 0x104d2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   104ba:	89 81       	ldd	r24, Y+1	; 0x01
   104bc:	9a 81       	ldd	r25, Y+2	; 0x02
   104be:	00 97       	sbiw	r24, 0x00	; 0
   104c0:	11 f0       	breq	.+4      	; 0x104c6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x98>
   104c2:	0e 94 ef ac 	call	0x159de	; 0x159de <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   104c6:	1a 82       	std	Y+2, r1	; 0x02
   104c8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   104ca:	1e 82       	std	Y+6, r1	; 0x06
   104cc:	1d 82       	std	Y+5, r1	; 0x05
   104ce:	1c 82       	std	Y+4, r1	; 0x04
   104d0:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   104d2:	a4 01       	movw	r20, r8
   104d4:	b5 01       	movw	r22, r10
   104d6:	ce 01       	movw	r24, r28
   104d8:	01 96       	adiw	r24, 0x01	; 1
   104da:	0e 94 87 7e 	call	0xfd0e	; 0xfd0e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   104de:	89 81       	ldd	r24, Y+1	; 0x01
   104e0:	9a 81       	ldd	r25, Y+2	; 0x02
   104e2:	0e 94 ef ac 	call	0x159de	; 0x159de <free>
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
}
   104e6:	26 96       	adiw	r28, 0x06	; 6
   104e8:	0f b6       	in	r0, 0x3f	; 63
   104ea:	f8 94       	cli
   104ec:	de bf       	out	0x3e, r29	; 62
   104ee:	0f be       	out	0x3f, r0	; 63
   104f0:	cd bf       	out	0x3d, r28	; 61
   104f2:	df 91       	pop	r29
   104f4:	cf 91       	pop	r28
   104f6:	1f 91       	pop	r17
   104f8:	0f 91       	pop	r16
   104fa:	ff 90       	pop	r15
   104fc:	ef 90       	pop	r14
   104fe:	df 90       	pop	r13
   10500:	cf 90       	pop	r12
   10502:	bf 90       	pop	r11
   10504:	af 90       	pop	r10
   10506:	9f 90       	pop	r9
   10508:	8f 90       	pop	r8
   1050a:	08 95       	ret

0001050c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.148():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   1050c:	cf 93       	push	r28
   1050e:	df 93       	push	r29
   10510:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   10512:	fa 01       	movw	r30, r20
   10514:	32 96       	adiw	r30, 0x02	; 2
   10516:	e6 0f       	add	r30, r22
   10518:	f7 1f       	adc	r31, r23
   1051a:	dc 01       	movw	r26, r24
   1051c:	9d 01       	movw	r18, r26
   1051e:	2c 1b       	sub	r18, r28
   10520:	3d 0b       	sbc	r19, r29
   10522:	cf 01       	movw	r24, r30
   10524:	86 1b       	sub	r24, r22
   10526:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   10528:	4d 91       	ld	r20, X+
   1052a:	44 23       	and	r20, r20
   1052c:	11 f0       	breq	.+4      	; 0x10532 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   1052e:	41 93       	st	Z+, r20
   10530:	f5 cf       	rjmp	.-22     	; 0x1051c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   10532:	ac 01       	movw	r20, r24
   10534:	42 1b       	sub	r20, r18
   10536:	53 0b       	sbc	r21, r19
   10538:	64 0f       	add	r22, r20
   1053a:	75 1f       	adc	r23, r21
   1053c:	fb 01       	movw	r30, r22
   1053e:	32 97       	sbiw	r30, 0x02	; 2
   10540:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   10542:	61 50       	subi	r22, 0x01	; 1
   10544:	71 09       	sbc	r23, r1
   10546:	fb 01       	movw	r30, r22
   10548:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   1054a:	df 91       	pop	r29
   1054c:	cf 91       	pop	r28
   1054e:	08 95       	ret

00010550 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   10550:	ef 92       	push	r14
   10552:	ff 92       	push	r15
   10554:	0f 93       	push	r16
   10556:	1f 93       	push	r17
   10558:	cf 93       	push	r28
   1055a:	df 93       	push	r29
   1055c:	00 d0       	rcall	.+0      	; 0x1055e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0xe>
   1055e:	00 d0       	rcall	.+0      	; 0x10560 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x10>
   10560:	00 d0       	rcall	.+0      	; 0x10562 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x12>
   10562:	1f 92       	push	r1
   10564:	cd b7       	in	r28, 0x3d	; 61
   10566:	de b7       	in	r29, 0x3e	; 62
   10568:	fe 01       	movw	r30, r28
   1056a:	31 96       	adiw	r30, 0x01	; 1
   1056c:	ae 01       	movw	r20, r28
   1056e:	45 5f       	subi	r20, 0xF5	; 245
   10570:	5f 4f       	sbci	r21, 0xFF	; 255
   10572:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   10574:	20 91 c7 0d 	lds	r18, 0x0DC7	; 0x800dc7 <my_touch+0xf>
   10578:	30 91 c8 0d 	lds	r19, 0x0DC8	; 0x800dc8 <my_touch+0x10>
   1057c:	d9 01       	movw	r26, r18
   1057e:	6c 91       	ld	r22, X
   10580:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <my_touch+0x19>
   10584:	90 95       	com	r25
   10586:	96 23       	and	r25, r22
   10588:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
   1058a:	20 91 c9 0d 	lds	r18, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   1058e:	30 91 ca 0d 	lds	r19, 0x0DCA	; 0x800dca <my_touch+0x12>
   10592:	d9 01       	movw	r26, r18
   10594:	6c 91       	ld	r22, X
   10596:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   1059a:	90 95       	com	r25
   1059c:	96 23       	and	r25, r22
   1059e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
   105a0:	20 91 cd 0d 	lds	r18, 0x0DCD	; 0x800dcd <my_touch+0x15>
   105a4:	30 91 ce 0d 	lds	r19, 0x0DCE	; 0x800dce <my_touch+0x16>
   105a8:	d9 01       	movw	r26, r18
   105aa:	6c 91       	ld	r22, X
   105ac:	90 91 d4 0d 	lds	r25, 0x0DD4	; 0x800dd4 <my_touch+0x1c>
   105b0:	90 95       	com	r25
   105b2:	96 23       	and	r25, r22
   105b4:	9c 93       	st	X, r25
   105b6:	28 e0       	ldi	r18, 0x08	; 8
   105b8:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   105ba:	10 e8       	ldi	r17, 0x80	; 128
   105bc:	60 91 cd 0d 	lds	r22, 0x0DCD	; 0x800dcd <my_touch+0x15>
   105c0:	70 91 ce 0d 	lds	r23, 0x0DCE	; 0x800dce <my_touch+0x16>
   105c4:	90 91 d4 0d 	lds	r25, 0x0DD4	; 0x800dd4 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
   105c8:	08 2f       	mov	r16, r24
   105ca:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   105cc:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
   105ce:	09 f4       	brne	.+2      	; 0x105d2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x82>
   105d0:	b1 c0       	rjmp	.+354    	; 0x10734 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   105d2:	0c 91       	ld	r16, X
   105d4:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
   105d6:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
   105d8:	60 91 c9 0d 	lds	r22, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   105dc:	70 91 ca 0d 	lds	r23, 0x0DCA	; 0x800dca <my_touch+0x12>
   105e0:	db 01       	movw	r26, r22
   105e2:	0c 91       	ld	r16, X
   105e4:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   105e8:	90 95       	com	r25
   105ea:	90 23       	and	r25, r16
   105ec:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
   105ee:	60 91 c9 0d 	lds	r22, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   105f2:	70 91 ca 0d 	lds	r23, 0x0DCA	; 0x800dca <my_touch+0x12>
   105f6:	db 01       	movw	r26, r22
   105f8:	9c 91       	ld	r25, X
   105fa:	00 91 d2 0d 	lds	r16, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   105fe:	90 2b       	or	r25, r16
   10600:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
   10602:	16 95       	lsr	r17
   10604:	21 50       	subi	r18, 0x01	; 1
   10606:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   10608:	c9 f6       	brne	.-78     	; 0x105bc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
   1060a:	20 91 c9 0d 	lds	r18, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   1060e:	30 91 ca 0d 	lds	r19, 0x0DCA	; 0x800dca <my_touch+0x12>
   10612:	d9 01       	movw	r26, r18
   10614:	6c 91       	ld	r22, X
   10616:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   1061a:	90 95       	com	r25
   1061c:	96 23       	and	r25, r22
   1061e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
   10620:	20 91 c9 0d 	lds	r18, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   10624:	30 91 ca 0d 	lds	r19, 0x0DCA	; 0x800dca <my_touch+0x12>
   10628:	d9 01       	movw	r26, r18
   1062a:	9c 91       	ld	r25, X
   1062c:	60 91 d2 0d 	lds	r22, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   10630:	96 2b       	or	r25, r22
   10632:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
   10634:	20 91 c9 0d 	lds	r18, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   10638:	30 91 ca 0d 	lds	r19, 0x0DCA	; 0x800dca <my_touch+0x12>
   1063c:	d9 01       	movw	r26, r18
   1063e:	6c 91       	ld	r22, X
   10640:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   10644:	90 95       	com	r25
   10646:	96 23       	and	r25, r22
   10648:	9c 93       	st	X, r25
   1064a:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   1064c:	30 e0       	ldi	r19, 0x00	; 0
   1064e:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   10650:	22 0f       	add	r18, r18
   10652:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
   10654:	00 91 c9 0d 	lds	r16, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   10658:	10 91 ca 0d 	lds	r17, 0x0DCA	; 0x800dca <my_touch+0x12>
   1065c:	d8 01       	movw	r26, r16
   1065e:	7c 91       	ld	r23, X
   10660:	90 91 d2 0d 	lds	r25, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   10664:	90 95       	com	r25
   10666:	97 23       	and	r25, r23
   10668:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
   1066a:	00 91 c9 0d 	lds	r16, 0x0DC9	; 0x800dc9 <my_touch+0x11>
   1066e:	10 91 ca 0d 	lds	r17, 0x0DCA	; 0x800dca <my_touch+0x12>
   10672:	d8 01       	movw	r26, r16
   10674:	9c 91       	ld	r25, X
   10676:	70 91 d2 0d 	lds	r23, 0x0DD2	; 0x800dd2 <my_touch+0x1a>
   1067a:	97 2b       	or	r25, r23
   1067c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
   1067e:	00 91 cb 0d 	lds	r16, 0x0DCB	; 0x800dcb <my_touch+0x13>
   10682:	10 91 cc 0d 	lds	r17, 0x0DCC	; 0x800dcc <my_touch+0x14>
   10686:	d8 01       	movw	r26, r16
   10688:	9c 91       	ld	r25, X
   1068a:	70 91 d3 0d 	lds	r23, 0x0DD3	; 0x800dd3 <my_touch+0x1b>
   1068e:	97 23       	and	r25, r23
   10690:	11 f0       	breq	.+4      	; 0x10696 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
   10692:	2f 5f       	subi	r18, 0xFF	; 255
   10694:	3f 4f       	sbci	r19, 0xFF	; 255
   10696:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   10698:	d9 f6       	brne	.-74     	; 0x10650 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
   1069a:	60 91 c7 0d 	lds	r22, 0x0DC7	; 0x800dc7 <my_touch+0xf>
   1069e:	70 91 c8 0d 	lds	r23, 0x0DC8	; 0x800dc8 <my_touch+0x10>
   106a2:	db 01       	movw	r26, r22
   106a4:	9c 91       	ld	r25, X
   106a6:	10 91 d1 0d 	lds	r17, 0x0DD1	; 0x800dd1 <my_touch+0x19>
   106aa:	91 2b       	or	r25, r17
   106ac:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   106ae:	94 e0       	ldi	r25, 0x04	; 4
   106b0:	36 95       	lsr	r19
   106b2:	27 95       	ror	r18
   106b4:	9a 95       	dec	r25
   106b6:	e1 f7       	brne	.-8      	; 0x106b0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   106b8:	d7 01       	movw	r26, r14
   106ba:	2d 93       	st	X+, r18
   106bc:	3d 93       	st	X+, r19
   106be:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   106c0:	a4 17       	cp	r26, r20
   106c2:	b5 07       	cpc	r27, r21
   106c4:	09 f0       	breq	.+2      	; 0x106c8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x178>
   106c6:	56 cf       	rjmp	.-340    	; 0x10574 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x24>
   106c8:	cf 01       	movw	r24, r30
   106ca:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   106cc:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   106ce:	20 81       	ld	r18, Z
   106d0:	31 81       	ldd	r19, Z+1	; 0x01
   106d2:	12 96       	adiw	r26, 0x02	; 2
   106d4:	4d 91       	ld	r20, X+
   106d6:	5c 91       	ld	r21, X
   106d8:	13 97       	sbiw	r26, 0x03	; 3
   106da:	42 17       	cp	r20, r18
   106dc:	53 07       	cpc	r21, r19
   106de:	30 f4       	brcc	.+12     	; 0x106ec <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   106e0:	51 83       	std	Z+1, r21	; 0x01
   106e2:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
   106e4:	13 96       	adiw	r26, 0x03	; 3
   106e6:	3c 93       	st	X, r19
   106e8:	2e 93       	st	-X, r18
   106ea:	12 97       	sbiw	r26, 0x02	; 2
   106ec:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   106ee:	8a 17       	cp	r24, r26
   106f0:	9b 07       	cpc	r25, r27
   106f2:	69 f7       	brne	.-38     	; 0x106ce <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17e>
   106f4:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   106f6:	e8 17       	cp	r30, r24
   106f8:	f9 07       	cpc	r31, r25
   106fa:	41 f7       	brne	.-48     	; 0x106cc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   106fc:	8b 81       	ldd	r24, Y+3	; 0x03
   106fe:	9c 81       	ldd	r25, Y+4	; 0x04
   10700:	2d 81       	ldd	r18, Y+5	; 0x05
   10702:	3e 81       	ldd	r19, Y+6	; 0x06
   10704:	82 0f       	add	r24, r18
   10706:	93 1f       	adc	r25, r19
   10708:	2f 81       	ldd	r18, Y+7	; 0x07
   1070a:	38 85       	ldd	r19, Y+8	; 0x08
   1070c:	82 0f       	add	r24, r18
   1070e:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   10710:	63 e0       	ldi	r22, 0x03	; 3
   10712:	70 e0       	ldi	r23, 0x00	; 0
   10714:	0e 94 ce b1 	call	0x1639c	; 0x1639c <__udivmodhi4>
   10718:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
   1071a:	2a 96       	adiw	r28, 0x0a	; 10
   1071c:	0f b6       	in	r0, 0x3f	; 63
   1071e:	f8 94       	cli
   10720:	de bf       	out	0x3e, r29	; 62
   10722:	0f be       	out	0x3f, r0	; 63
   10724:	cd bf       	out	0x3d, r28	; 61
   10726:	df 91       	pop	r29
   10728:	cf 91       	pop	r28
   1072a:	1f 91       	pop	r17
   1072c:	0f 91       	pop	r16
   1072e:	ff 90       	pop	r15
   10730:	ef 90       	pop	r14
   10732:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   10734:	0c 91       	ld	r16, X
   10736:	90 95       	com	r25
   10738:	90 23       	and	r25, r16
   1073a:	4d cf       	rjmp	.-358    	; 0x105d6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x86>

0001073c <TwoWire::write(int) [clone .constprop.99]>:
_ZN7TwoWire5writeEi.constprop.99():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   1073c:	68 2f       	mov	r22, r24
   1073e:	85 e1       	ldi	r24, 0x15	; 21
   10740:	9e e0       	ldi	r25, 0x0E	; 14
   10742:	0c 94 f8 7d 	jmp	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>

00010746 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   10746:	0f 93       	push	r16
   10748:	1f 93       	push	r17
   1074a:	cf 93       	push	r28
   1074c:	df 93       	push	r29
   1074e:	00 d0       	rcall	.+0      	; 0x10750 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xa>
   10750:	00 d0       	rcall	.+0      	; 0x10752 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xc>
   10752:	cd b7       	in	r28, 0x3d	; 61
   10754:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   10756:	48 2f       	mov	r20, r24
   10758:	43 70       	andi	r20, 0x03	; 3
   1075a:	50 e0       	ldi	r21, 0x00	; 0
   1075c:	50 93 ed 0d 	sts	0x0DED, r21	; 0x800ded <my_lcd+0x17>
   10760:	40 93 ec 0d 	sts	0x0DEC, r20	; 0x800dec <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   10764:	28 2f       	mov	r18, r24
   10766:	21 70       	andi	r18, 0x01	; 1
   10768:	80 ff       	sbrs	r24, 0
   1076a:	3d c1       	rjmp	.+634    	; 0x109e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2a0>
   1076c:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <my_lcd+0x10>
   10770:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <my_lcd+0x11>
   10774:	90 93 e9 0d 	sts	0x0DE9, r25	; 0x800de9 <my_lcd+0x13>
   10778:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   1077c:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <my_lcd+0xe>
   10780:	90 91 e5 0d 	lds	r25, 0x0DE5	; 0x800de5 <my_lcd+0xf>
   10784:	21 11       	cpse	r18, r1
   10786:	04 c0       	rjmp	.+8      	; 0x10790 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4a>
   10788:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <my_lcd+0x10>
   1078c:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <my_lcd+0x11>
   10790:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <my_lcd+0x15>
   10794:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   10798:	a0 91 04 0e 	lds	r26, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   1079c:	b0 91 05 0e 	lds	r27, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   107a0:	8c 91       	ld	r24, X
   107a2:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <my_lcd+0x3a>
   107a6:	89 23       	and	r24, r25
   107a8:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   107aa:	40 91 ee 0d 	lds	r20, 0x0DEE	; 0x800dee <my_lcd+0x18>
   107ae:	50 91 ef 0d 	lds	r21, 0x0DEF	; 0x800def <my_lcd+0x19>
   107b2:	80 91 ec 0d 	lds	r24, 0x0DEC	; 0x800dec <my_lcd+0x16>
   107b6:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x17>
   107ba:	a0 91 06 0e 	lds	r26, 0x0E06	; 0x800e06 <my_lcd+0x30>
   107be:	b0 91 07 0e 	lds	r27, 0x0E07	; 0x800e07 <my_lcd+0x31>
   107c2:	20 91 11 0e 	lds	r18, 0x0E11	; 0x800e11 <my_lcd+0x3b>
   107c6:	41 15       	cp	r20, r1
   107c8:	51 05       	cpc	r21, r1
   107ca:	09 f0       	breq	.+2      	; 0x107ce <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x88>
   107cc:	13 c1       	rjmp	.+550    	; 0x109f4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2ae>
   107ce:	01 97       	sbiw	r24, 0x01	; 1
   107d0:	83 30       	cpi	r24, 0x03	; 3
   107d2:	91 05       	cpc	r25, r1
   107d4:	08 f0       	brcs	.+2      	; 0x107d8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x92>
   107d6:	0c c1       	rjmp	.+536    	; 0x109f0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2aa>
   107d8:	88 0f       	add	r24, r24
   107da:	99 1f       	adc	r25, r25
   107dc:	fc 01       	movw	r30, r24
   107de:	e0 5b       	subi	r30, 0xB0	; 176
   107e0:	fd 4f       	sbci	r31, 0xFD	; 253
   107e2:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   107e4:	30 91 fe 0d 	lds	r19, 0x0DFE	; 0x800dfe <my_lcd+0x28>
   107e8:	40 91 ff 0d 	lds	r20, 0x0DFF	; 0x800dff <my_lcd+0x29>
   107ec:	8c 91       	ld	r24, X
   107ee:	28 23       	and	r18, r24
   107f0:	2c 93       	st	X, r18
   107f2:	42 b9       	out	0x02, r20	; 2
   107f4:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   107f8:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   107fc:	80 81       	ld	r24, Z
   107fe:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10802:	82 23       	and	r24, r18
   10804:	80 83       	st	Z, r24
   10806:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1080a:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1080e:	80 81       	ld	r24, Z
   10810:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10814:	82 2b       	or	r24, r18
   10816:	80 83       	st	Z, r24
   10818:	32 b9       	out	0x02, r19	; 2
   1081a:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1081e:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10822:	80 81       	ld	r24, Z
   10824:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10828:	82 23       	and	r24, r18
   1082a:	80 83       	st	Z, r24
   1082c:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10830:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10834:	80 81       	ld	r24, Z
   10836:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   1083a:	82 2b       	or	r24, r18
   1083c:	80 83       	st	Z, r24
   1083e:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10842:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10846:	80 81       	ld	r24, Z
   10848:	20 91 0d 0e 	lds	r18, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   1084c:	82 2b       	or	r24, r18
   1084e:	80 83       	st	Z, r24
   10850:	80 e1       	ldi	r24, 0x10	; 16
   10852:	82 b9       	out	0x02, r24	; 2
   10854:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10858:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1085c:	80 81       	ld	r24, Z
   1085e:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10862:	82 23       	and	r24, r18
   10864:	80 83       	st	Z, r24
   10866:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1086a:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1086e:	80 81       	ld	r24, Z
   10870:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10874:	82 2b       	or	r24, r18
   10876:	80 83       	st	Z, r24
   10878:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1087a:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1087e:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10882:	80 81       	ld	r24, Z
   10884:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10888:	89 23       	and	r24, r25
   1088a:	80 83       	st	Z, r24
   1088c:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10890:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10894:	80 81       	ld	r24, Z
   10896:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   1089a:	89 2b       	or	r24, r25
   1089c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   1089e:	00 91 ea 0d 	lds	r16, 0x0DEA	; 0x800dea <my_lcd+0x14>
   108a2:	10 91 eb 0d 	lds	r17, 0x0DEB	; 0x800deb <my_lcd+0x15>
   108a6:	01 50       	subi	r16, 0x01	; 1
   108a8:	11 09       	sbc	r17, r1
   108aa:	20 91 e8 0d 	lds	r18, 0x0DE8	; 0x800de8 <my_lcd+0x12>
   108ae:	30 91 e9 0d 	lds	r19, 0x0DE9	; 0x800de9 <my_lcd+0x13>
   108b2:	21 50       	subi	r18, 0x01	; 1
   108b4:	31 09       	sbc	r19, r1
   108b6:	50 e0       	ldi	r21, 0x00	; 0
   108b8:	40 e0       	ldi	r20, 0x00	; 0
   108ba:	70 e0       	ldi	r23, 0x00	; 0
   108bc:	60 e0       	ldi	r22, 0x00	; 0
   108be:	86 ed       	ldi	r24, 0xD6	; 214
   108c0:	9d e0       	ldi	r25, 0x0D	; 13
   108c2:	0e 94 ef 36 	call	0x6dde	; 0x6dde <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   108c6:	80 91 ee 0d 	lds	r24, 0x0DEE	; 0x800dee <my_lcd+0x18>
   108ca:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x19>
   108ce:	89 2b       	or	r24, r25
   108d0:	09 f0       	breq	.+2      	; 0x108d4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x18e>
   108d2:	9e c1       	rjmp	.+828    	; 0x10c10 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   108d4:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   108d8:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   108dc:	80 81       	ld	r24, Z
   108de:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_lcd+0x3b>
   108e2:	89 23       	and	r24, r25
   108e4:	80 83       	st	Z, r24
   108e6:	80 91 fa 0d 	lds	r24, 0x0DFA	; 0x800dfa <my_lcd+0x24>
   108ea:	82 b9       	out	0x02, r24	; 2
   108ec:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   108f0:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   108f4:	80 81       	ld	r24, Z
   108f6:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   108fa:	89 23       	and	r24, r25
   108fc:	80 83       	st	Z, r24
   108fe:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10902:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10906:	80 81       	ld	r24, Z
   10908:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   1090c:	89 2b       	or	r24, r25
   1090e:	80 83       	st	Z, r24
   10910:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10914:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10918:	80 81       	ld	r24, Z
   1091a:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   1091e:	89 2b       	or	r24, r25
   10920:	80 83       	st	Z, r24
   10922:	83 e0       	ldi	r24, 0x03	; 3
   10924:	82 b9       	out	0x02, r24	; 2
   10926:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1092a:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1092e:	80 81       	ld	r24, Z
   10930:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10934:	89 23       	and	r24, r25
   10936:	80 83       	st	Z, r24
   10938:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1093c:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10940:	80 81       	ld	r24, Z
   10942:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10946:	89 2b       	or	r24, r25
   10948:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   1094a:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   1094e:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10952:	80 81       	ld	r24, Z
   10954:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_lcd+0x3b>
   10958:	89 23       	and	r24, r25
   1095a:	80 83       	st	Z, r24
   1095c:	80 91 fc 0d 	lds	r24, 0x0DFC	; 0x800dfc <my_lcd+0x26>
   10960:	82 b9       	out	0x02, r24	; 2
   10962:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10966:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1096a:	80 81       	ld	r24, Z
   1096c:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10970:	89 23       	and	r24, r25
   10972:	80 83       	st	Z, r24
   10974:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10978:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1097c:	80 81       	ld	r24, Z
   1097e:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10982:	89 2b       	or	r24, r25
   10984:	80 83       	st	Z, r24
   10986:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   1098a:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   1098e:	80 81       	ld	r24, Z
   10990:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   10994:	89 2b       	or	r24, r25
   10996:	80 83       	st	Z, r24
   10998:	12 b8       	out	0x02, r1	; 2
   1099a:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   1099e:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   109a2:	80 81       	ld	r24, Z
   109a4:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   109a8:	89 23       	and	r24, r25
   109aa:	80 83       	st	Z, r24
   109ac:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   109b0:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   109b4:	80 81       	ld	r24, Z
   109b6:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   109ba:	89 2b       	or	r24, r25
   109bc:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   109be:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   109c2:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   109c6:	80 81       	ld	r24, Z
   109c8:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_lcd+0x36>
   109cc:	89 2b       	or	r24, r25
   109ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   109d0:	26 96       	adiw	r28, 0x06	; 6
   109d2:	0f b6       	in	r0, 0x3f	; 63
   109d4:	f8 94       	cli
   109d6:	de bf       	out	0x3e, r29	; 62
   109d8:	0f be       	out	0x3f, r0	; 63
   109da:	cd bf       	out	0x3d, r28	; 61
   109dc:	df 91       	pop	r29
   109de:	cf 91       	pop	r28
   109e0:	1f 91       	pop	r17
   109e2:	0f 91       	pop	r16
   109e4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   109e6:	80 91 e4 0d 	lds	r24, 0x0DE4	; 0x800de4 <my_lcd+0xe>
   109ea:	90 91 e5 0d 	lds	r25, 0x0DE5	; 0x800de5 <my_lcd+0xf>
   109ee:	c2 ce       	rjmp	.-636    	; 0x10774 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   109f0:	90 e3       	ldi	r25, 0x30	; 48
   109f2:	f8 ce       	rjmp	.-528    	; 0x107e4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   109f4:	46 30       	cpi	r20, 0x06	; 6
   109f6:	51 05       	cpc	r21, r1
   109f8:	99 f5       	brne	.+102    	; 0x10a60 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   109fa:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   109fc:	81 30       	cpi	r24, 0x01	; 1
   109fe:	91 05       	cpc	r25, r1
   10a00:	51 f0       	breq	.+20     	; 0x10a16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   10a02:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10a04:	81 30       	cpi	r24, 0x01	; 1
   10a06:	91 05       	cpc	r25, r1
   10a08:	30 f0       	brcs	.+12     	; 0x10a16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   10a0a:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10a0c:	82 30       	cpi	r24, 0x02	; 2
   10a0e:	91 05       	cpc	r25, r1
   10a10:	11 f0       	breq	.+4      	; 0x10a16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
   10a12:	03 97       	sbiw	r24, 0x03	; 3
   10a14:	19 f1       	breq	.+70     	; 0x10a5c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   10a16:	8c 91       	ld	r24, X
   10a18:	28 23       	and	r18, r24
   10a1a:	2c 93       	st	X, r18
   10a1c:	80 91 fe 0d 	lds	r24, 0x0DFE	; 0x800dfe <my_lcd+0x28>
   10a20:	82 b9       	out	0x02, r24	; 2
   10a22:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10a26:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10a2a:	8c 91       	ld	r24, X
   10a2c:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10a30:	89 23       	and	r24, r25
   10a32:	8c 93       	st	X, r24
   10a34:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10a38:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10a3c:	8c 91       	ld	r24, X
   10a3e:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10a42:	89 2b       	or	r24, r25
   10a44:	8c 93       	st	X, r24
   10a46:	a0 91 06 0e 	lds	r26, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10a4a:	b0 91 07 0e 	lds	r27, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10a4e:	8c 91       	ld	r24, X
   10a50:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   10a54:	89 2b       	or	r24, r25
   10a56:	8c 93       	st	X, r24
   10a58:	f2 b9       	out	0x02, r31	; 2
   10a5a:	0f cf       	rjmp	.-482    	; 0x1087a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   10a5c:	f0 e6       	ldi	r31, 0x60	; 96
   10a5e:	db cf       	rjmp	.-74     	; 0x10a16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   10a60:	48 30       	cpi	r20, 0x08	; 8
   10a62:	51 05       	cpc	r21, r1
   10a64:	99 f5       	brne	.+102    	; 0x10acc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   10a66:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10a68:	81 30       	cpi	r24, 0x01	; 1
   10a6a:	91 05       	cpc	r25, r1
   10a6c:	51 f0       	breq	.+20     	; 0x10a82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   10a6e:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10a70:	81 30       	cpi	r24, 0x01	; 1
   10a72:	91 05       	cpc	r25, r1
   10a74:	30 f0       	brcs	.+12     	; 0x10a82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   10a76:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10a78:	82 30       	cpi	r24, 0x02	; 2
   10a7a:	91 05       	cpc	r25, r1
   10a7c:	11 f0       	breq	.+4      	; 0x10a82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
   10a7e:	03 97       	sbiw	r24, 0x03	; 3
   10a80:	19 f1       	breq	.+70     	; 0x10ac8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10a82:	8c 91       	ld	r24, X
   10a84:	28 23       	and	r18, r24
   10a86:	2c 93       	st	X, r18
   10a88:	80 91 fe 0d 	lds	r24, 0x0DFE	; 0x800dfe <my_lcd+0x28>
   10a8c:	82 b9       	out	0x02, r24	; 2
   10a8e:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10a92:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10a96:	8c 91       	ld	r24, X
   10a98:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10a9c:	89 23       	and	r24, r25
   10a9e:	8c 93       	st	X, r24
   10aa0:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10aa4:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10aa8:	8c 91       	ld	r24, X
   10aaa:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10aae:	89 2b       	or	r24, r25
   10ab0:	8c 93       	st	X, r24
   10ab2:	a0 91 06 0e 	lds	r26, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10ab6:	b0 91 07 0e 	lds	r27, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10aba:	8c 91       	ld	r24, X
   10abc:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   10ac0:	89 2b       	or	r24, r25
   10ac2:	8c 93       	st	X, r24
   10ac4:	e2 b9       	out	0x02, r30	; 2
   10ac6:	d9 ce       	rjmp	.-590    	; 0x1087a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   10ac8:	e8 e2       	ldi	r30, 0x28	; 40
   10aca:	db cf       	rjmp	.-74     	; 0x10a82 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   10acc:	45 30       	cpi	r20, 0x05	; 5
   10ace:	51 05       	cpc	r21, r1
   10ad0:	a1 f5       	brne	.+104    	; 0x10b3a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   10ad2:	81 30       	cpi	r24, 0x01	; 1
   10ad4:	91 05       	cpc	r25, r1
   10ad6:	49 f1       	breq	.+82     	; 0x10b2a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e4>
   10ad8:	70 f1       	brcs	.+92     	; 0x10b36 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f0>
   10ada:	82 30       	cpi	r24, 0x02	; 2
   10adc:	91 05       	cpc	r25, r1
   10ade:	39 f1       	breq	.+78     	; 0x10b2e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e8>
   10ae0:	03 97       	sbiw	r24, 0x03	; 3
   10ae2:	39 f1       	breq	.+78     	; 0x10b32 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10ae4:	8c 91       	ld	r24, X
   10ae6:	28 23       	and	r18, r24
   10ae8:	2c 93       	st	X, r18
   10aea:	80 91 fe 0d 	lds	r24, 0x0DFE	; 0x800dfe <my_lcd+0x28>
   10aee:	82 b9       	out	0x02, r24	; 2
   10af0:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10af4:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10af8:	80 81       	ld	r24, Z
   10afa:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10afe:	89 23       	and	r24, r25
   10b00:	80 83       	st	Z, r24
   10b02:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10b06:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10b0a:	80 81       	ld	r24, Z
   10b0c:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10b10:	89 2b       	or	r24, r25
   10b12:	80 83       	st	Z, r24
   10b14:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10b18:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10b1c:	80 81       	ld	r24, Z
   10b1e:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   10b22:	89 2b       	or	r24, r25
   10b24:	80 83       	st	Z, r24
   10b26:	72 b9       	out	0x02, r23	; 2
   10b28:	a8 ce       	rjmp	.-688    	; 0x1087a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   10b2a:	78 e7       	ldi	r23, 0x78	; 120
   10b2c:	db cf       	rjmp	.-74     	; 0x10ae4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   10b2e:	78 ec       	ldi	r23, 0xC8	; 200
   10b30:	d9 cf       	rjmp	.-78     	; 0x10ae4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   10b32:	78 ea       	ldi	r23, 0xA8	; 168
   10b34:	d7 cf       	rjmp	.-82     	; 0x10ae4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   10b36:	78 e0       	ldi	r23, 0x08	; 8
   10b38:	d5 cf       	rjmp	.-86     	; 0x10ae4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   10b3a:	47 30       	cpi	r20, 0x07	; 7
   10b3c:	51 05       	cpc	r21, r1
   10b3e:	a1 f5       	brne	.+104    	; 0x10ba8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   10b40:	81 30       	cpi	r24, 0x01	; 1
   10b42:	91 05       	cpc	r25, r1
   10b44:	49 f1       	breq	.+82     	; 0x10b98 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x452>
   10b46:	70 f1       	brcs	.+92     	; 0x10ba4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45e>
   10b48:	82 30       	cpi	r24, 0x02	; 2
   10b4a:	91 05       	cpc	r25, r1
   10b4c:	39 f1       	breq	.+78     	; 0x10b9c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x456>
   10b4e:	03 97       	sbiw	r24, 0x03	; 3
   10b50:	39 f1       	breq	.+78     	; 0x10ba0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10b52:	8c 91       	ld	r24, X
   10b54:	28 23       	and	r18, r24
   10b56:	2c 93       	st	X, r18
   10b58:	80 91 fe 0d 	lds	r24, 0x0DFE	; 0x800dfe <my_lcd+0x28>
   10b5c:	82 b9       	out	0x02, r24	; 2
   10b5e:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10b62:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10b66:	80 81       	ld	r24, Z
   10b68:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10b6c:	89 23       	and	r24, r25
   10b6e:	80 83       	st	Z, r24
   10b70:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10b74:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10b78:	80 81       	ld	r24, Z
   10b7a:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10b7e:	89 2b       	or	r24, r25
   10b80:	80 83       	st	Z, r24
   10b82:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10b86:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10b8a:	80 81       	ld	r24, Z
   10b8c:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   10b90:	89 2b       	or	r24, r25
   10b92:	80 83       	st	Z, r24
   10b94:	62 b9       	out	0x02, r22	; 2
   10b96:	71 ce       	rjmp	.-798    	; 0x1087a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   10b98:	68 ea       	ldi	r22, 0xA8	; 168
   10b9a:	db cf       	rjmp	.-74     	; 0x10b52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   10b9c:	68 e1       	ldi	r22, 0x18	; 24
   10b9e:	d9 cf       	rjmp	.-78     	; 0x10b52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   10ba0:	68 e7       	ldi	r22, 0x78	; 120
   10ba2:	d7 cf       	rjmp	.-82     	; 0x10b52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   10ba4:	68 ec       	ldi	r22, 0xC8	; 200
   10ba6:	d5 cf       	rjmp	.-86     	; 0x10b52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   10ba8:	81 30       	cpi	r24, 0x01	; 1
   10baa:	91 05       	cpc	r25, r1
   10bac:	49 f1       	breq	.+82     	; 0x10c00 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ba>
   10bae:	70 f1       	brcs	.+92     	; 0x10c0c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c6>
   10bb0:	82 30       	cpi	r24, 0x02	; 2
   10bb2:	91 05       	cpc	r25, r1
   10bb4:	39 f1       	breq	.+78     	; 0x10c04 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4be>
   10bb6:	03 97       	sbiw	r24, 0x03	; 3
   10bb8:	39 f1       	breq	.+78     	; 0x10c08 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10bba:	8c 91       	ld	r24, X
   10bbc:	28 23       	and	r18, r24
   10bbe:	2c 93       	st	X, r18
   10bc0:	80 91 fe 0d 	lds	r24, 0x0DFE	; 0x800dfe <my_lcd+0x28>
   10bc4:	82 b9       	out	0x02, r24	; 2
   10bc6:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10bca:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10bce:	80 81       	ld	r24, Z
   10bd0:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   10bd4:	89 23       	and	r24, r25
   10bd6:	80 83       	st	Z, r24
   10bd8:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   10bdc:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   10be0:	80 81       	ld	r24, Z
   10be2:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   10be6:	89 2b       	or	r24, r25
   10be8:	80 83       	st	Z, r24
   10bea:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   10bee:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   10bf2:	80 81       	ld	r24, Z
   10bf4:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   10bf8:	89 2b       	or	r24, r25
   10bfa:	80 83       	st	Z, r24
   10bfc:	32 b9       	out	0x02, r19	; 2
   10bfe:	3d ce       	rjmp	.-902    	; 0x1087a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   10c00:	38 e2       	ldi	r19, 0x28	; 40
   10c02:	db cf       	rjmp	.-74     	; 0x10bba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   10c04:	38 e9       	ldi	r19, 0x98	; 152
   10c06:	d9 cf       	rjmp	.-78     	; 0x10bba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   10c08:	38 ef       	ldi	r19, 0xF8	; 248
   10c0a:	d7 cf       	rjmp	.-82     	; 0x10bba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   10c0c:	38 e4       	ldi	r19, 0x48	; 72
   10c0e:	d5 cf       	rjmp	.-86     	; 0x10bba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   10c10:	80 91 e6 0d 	lds	r24, 0x0DE6	; 0x800de6 <my_lcd+0x10>
   10c14:	90 91 e7 0d 	lds	r25, 0x0DE7	; 0x800de7 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   10c18:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   10c1a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   10c1c:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   10c1e:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   10c20:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   10c22:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   10c24:	60 91 fa 0d 	lds	r22, 0x0DFA	; 0x800dfa <my_lcd+0x24>
   10c28:	70 91 fb 0d 	lds	r23, 0x0DFB	; 0x800dfb <my_lcd+0x25>
   10c2c:	26 e0       	ldi	r18, 0x06	; 6
   10c2e:	ae 01       	movw	r20, r28
   10c30:	4f 5f       	subi	r20, 0xFF	; 255
   10c32:	5f 4f       	sbci	r21, 0xFF	; 255
   10c34:	86 ed       	ldi	r24, 0xD6	; 214
   10c36:	9d e0       	ldi	r25, 0x0D	; 13
   10c38:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   10c3c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   10c3e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   10c40:	60 91 fc 0d 	lds	r22, 0x0DFC	; 0x800dfc <my_lcd+0x26>
   10c44:	70 91 fd 0d 	lds	r23, 0x0DFD	; 0x800dfd <my_lcd+0x27>
   10c48:	22 e0       	ldi	r18, 0x02	; 2
   10c4a:	ae 01       	movw	r20, r28
   10c4c:	4f 5f       	subi	r20, 0xFF	; 255
   10c4e:	5f 4f       	sbci	r21, 0xFF	; 255
   10c50:	86 ed       	ldi	r24, 0xD6	; 214
   10c52:	9d e0       	ldi	r25, 0x0D	; 13
   10c54:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   10c58:	80 91 ee 0d 	lds	r24, 0x0DEE	; 0x800dee <my_lcd+0x18>
   10c5c:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x19>
   10c60:	01 97       	sbiw	r24, 0x01	; 1
   10c62:	61 f4       	brne	.+24     	; 0x10c7c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   10c64:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   10c66:	21 e0       	ldi	r18, 0x01	; 1
   10c68:	ae 01       	movw	r20, r28
   10c6a:	4f 5f       	subi	r20, 0xFF	; 255
   10c6c:	5f 4f       	sbci	r21, 0xFF	; 255
   10c6e:	61 e0       	ldi	r22, 0x01	; 1
   10c70:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   10c72:	86 ed       	ldi	r24, 0xD6	; 214
   10c74:	9d e0       	ldi	r25, 0x0D	; 13
   10c76:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   10c7a:	a1 ce       	rjmp	.-702    	; 0x109be <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x278>
   10c7c:	20 e0       	ldi	r18, 0x00	; 0
   10c7e:	50 e0       	ldi	r21, 0x00	; 0
   10c80:	40 e0       	ldi	r20, 0x00	; 0
   10c82:	63 e1       	ldi	r22, 0x13	; 19
   10c84:	70 e0       	ldi	r23, 0x00	; 0
   10c86:	f5 cf       	rjmp	.-22     	; 0x10c72 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x52c>

00010c88 <log_error(PubSubClient*, char*) [clone .constprop.60]>:
_Z9log_errorP12PubSubClientPc.constprop.60():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   10c88:	0f 93       	push	r16
   10c8a:	1f 93       	push	r17
   10c8c:	cf 93       	push	r28
   10c8e:	df 93       	push	r29
   10c90:	cd b7       	in	r28, 0x3d	; 61
   10c92:	de b7       	in	r29, 0x3e	; 62
   10c94:	60 97       	sbiw	r28, 0x10	; 16
   10c96:	0f b6       	in	r0, 0x3f	; 63
   10c98:	f8 94       	cli
   10c9a:	de bf       	out	0x3e, r29	; 62
   10c9c:	0f be       	out	0x3f, r0	; 63
   10c9e:	cd bf       	out	0x3d, r28	; 61
   10ca0:	8c 01       	movw	r16, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
   10ca2:	62 e1       	ldi	r22, 0x12	; 18
   10ca4:	77 e0       	ldi	r23, 0x07	; 7
   10ca6:	ce 01       	movw	r24, r28
   10ca8:	01 96       	adiw	r24, 0x01	; 1
   10caa:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
   10cae:	a8 01       	movw	r20, r16
   10cb0:	be 01       	movw	r22, r28
   10cb2:	6f 5f       	subi	r22, 0xFF	; 255
   10cb4:	7f 4f       	sbci	r23, 0xFF	; 255
   10cb6:	8e e2       	ldi	r24, 0x2E	; 46
   10cb8:	9e e0       	ldi	r25, 0x0E	; 14
   10cba:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:455
}
   10cbe:	60 96       	adiw	r28, 0x10	; 16
   10cc0:	0f b6       	in	r0, 0x3f	; 63
   10cc2:	f8 94       	cli
   10cc4:	de bf       	out	0x3e, r29	; 62
   10cc6:	0f be       	out	0x3f, r0	; 63
   10cc8:	cd bf       	out	0x3d, r28	; 61
   10cca:	df 91       	pop	r29
   10ccc:	cf 91       	pop	r28
   10cce:	1f 91       	pop	r17
   10cd0:	0f 91       	pop	r16
   10cd2:	08 95       	ret

00010cd4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>:
_Z10parseBytesPKccPhii.constprop.59():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:100
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   10cd4:	cf 92       	push	r12
   10cd6:	df 92       	push	r13
   10cd8:	ef 92       	push	r14
   10cda:	ff 92       	push	r15
   10cdc:	0f 93       	push	r16
   10cde:	1f 93       	push	r17
   10ce0:	cf 93       	push	r28
   10ce2:	df 93       	push	r29
   10ce4:	8b 01       	movw	r16, r22
   10ce6:	7b 01       	movw	r14, r22
   10ce8:	e4 0e       	add	r14, r20
   10cea:	f5 1e       	adc	r15, r21
   10cec:	c7 ef       	ldi	r28, 0xF7	; 247
   10cee:	da e0       	ldi	r29, 0x0A	; 10
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   10cf0:	c8 2e       	mov	r12, r24
   10cf2:	88 0f       	add	r24, r24
   10cf4:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   10cf6:	4a e0       	ldi	r20, 0x0A	; 10
   10cf8:	50 e0       	ldi	r21, 0x00	; 0
   10cfa:	70 e0       	ldi	r23, 0x00	; 0
   10cfc:	60 e0       	ldi	r22, 0x00	; 0
   10cfe:	ce 01       	movw	r24, r28
   10d00:	0e 94 ce a6 	call	0x14d9c	; 0x14d9c <strtoul>
   10d04:	f8 01       	movw	r30, r16
   10d06:	61 93       	st	Z+, r22
   10d08:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
    str = strchr(str, sep);               // Find next separator
   10d0a:	b6 01       	movw	r22, r12
   10d0c:	ce 01       	movw	r24, r28
   10d0e:	0e 94 79 b4 	call	0x168f2	; 0x168f2 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
    if (str == NULL || *str == '\0') {
   10d12:	00 97       	sbiw	r24, 0x00	; 0
   10d14:	49 f0       	breq	.+18     	; 0x10d28 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
   10d16:	fc 01       	movw	r30, r24
   10d18:	20 81       	ld	r18, Z
   10d1a:	22 23       	and	r18, r18
   10d1c:	29 f0       	breq	.+10     	; 0x10d28 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   10d1e:	ec 01       	movw	r28, r24
   10d20:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   10d22:	0e 15       	cp	r16, r14
   10d24:	1f 05       	cpc	r17, r15
   10d26:	39 f7       	brne	.-50     	; 0x10cf6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   10d28:	df 91       	pop	r29
   10d2a:	cf 91       	pop	r28
   10d2c:	1f 91       	pop	r17
   10d2e:	0f 91       	pop	r16
   10d30:	ff 90       	pop	r15
   10d32:	ef 90       	pop	r14
   10d34:	df 90       	pop	r13
   10d36:	cf 90       	pop	r12
   10d38:	08 95       	ret

00010d3a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   10d3a:	ff 92       	push	r15
   10d3c:	0f 93       	push	r16
   10d3e:	1f 93       	push	r17
   10d40:	cf 93       	push	r28
   10d42:	df 93       	push	r29
   10d44:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   10d46:	10 e0       	ldi	r17, 0x00	; 0
   10d48:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   10d4a:	8f 2d       	mov	r24, r15
   10d4c:	0e 94 9a 80 	call	0x10134	; 0x10134 <W5500Class::readSnTX_FSR(unsigned char)>
   10d50:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   10d52:	89 2b       	or	r24, r25
   10d54:	21 f0       	breq	.+8      	; 0x10d5e <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   10d56:	8f 2d       	mov	r24, r15
   10d58:	0e 94 9a 80 	call	0x10134	; 0x10134 <W5500Class::readSnTX_FSR(unsigned char)>
   10d5c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   10d5e:	c0 17       	cp	r28, r16
   10d60:	d1 07       	cpc	r29, r17
   10d62:	99 f7       	brne	.-26     	; 0x10d4a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   10d64:	ce 01       	movw	r24, r28
   10d66:	df 91       	pop	r29
   10d68:	cf 91       	pop	r28
   10d6a:	1f 91       	pop	r17
   10d6c:	0f 91       	pop	r16
   10d6e:	ff 90       	pop	r15
   10d70:	08 95       	ret

00010d72 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   10d72:	ff 92       	push	r15
   10d74:	0f 93       	push	r16
   10d76:	1f 93       	push	r17
   10d78:	cf 93       	push	r28
   10d7a:	df 93       	push	r29
   10d7c:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   10d7e:	10 e0       	ldi	r17, 0x00	; 0
   10d80:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   10d82:	8f 2d       	mov	r24, r15
   10d84:	0e 94 82 80 	call	0x10104	; 0x10104 <W5500Class::readSnRX_RSR(unsigned char)>
   10d88:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   10d8a:	89 2b       	or	r24, r25
   10d8c:	21 f0       	breq	.+8      	; 0x10d96 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   10d8e:	8f 2d       	mov	r24, r15
   10d90:	0e 94 82 80 	call	0x10104	; 0x10104 <W5500Class::readSnRX_RSR(unsigned char)>
   10d94:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   10d96:	c0 17       	cp	r28, r16
   10d98:	d1 07       	cpc	r29, r17
   10d9a:	99 f7       	brne	.-26     	; 0x10d82 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   10d9c:	ce 01       	movw	r24, r28
   10d9e:	df 91       	pop	r29
   10da0:	cf 91       	pop	r28
   10da2:	1f 91       	pop	r17
   10da4:	0f 91       	pop	r16
   10da6:	ff 90       	pop	r15
   10da8:	08 95       	ret

00010daa <turnOffPWM.lto_priv.233>:
turnOffPWM.lto_priv.233():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   10daa:	82 50       	subi	r24, 0x02	; 2
   10dac:	82 31       	cpi	r24, 0x12	; 18
   10dae:	08 f0       	brcs	.+2      	; 0x10db2 <turnOffPWM.lto_priv.233+0x8>
   10db0:	5f c0       	rjmp	.+190    	; 0x10e70 <turnOffPWM.lto_priv.233+0xc6>
   10db2:	e8 2f       	mov	r30, r24
   10db4:	f0 e0       	ldi	r31, 0x00	; 0
   10db6:	88 27       	eor	r24, r24
   10db8:	ef 51       	subi	r30, 0x1F	; 31
   10dba:	f9 47       	sbci	r31, 0x79	; 121
   10dbc:	8f 4f       	sbci	r24, 0xFF	; 255
   10dbe:	0c 94 77 b3 	jmp	0x166ee	; 0x166ee <__tablejump2__>
   10dc2:	35 87       	std	Z+13, r19	; 0x0d
   10dc4:	39 87       	std	Y+9, r19	; 0x09
   10dc6:	f3 86       	std	Z+11, r15	; 0x0b
   10dc8:	f9 86       	std	Y+9, r15	; 0x09
   10dca:	fd 86       	std	Y+13, r15	; 0x0d
   10dcc:	38 87       	std	Y+8, r19	; 0x08
   10dce:	01 87       	std	Z+9, r16	; 0x09
   10dd0:	07 87       	std	Z+15, r16	; 0x0f
   10dd2:	0b 87       	std	Y+11, r16	; 0x0b
   10dd4:	11 87       	std	Z+9, r17	; 0x09
   10dd6:	15 87       	std	Z+13, r17	; 0x0d
   10dd8:	19 87       	std	Y+9, r17	; 0x09
   10dda:	1f 87       	std	Y+15, r17	; 0x0f
   10ddc:	23 87       	std	Z+11, r18	; 0x0b
   10dde:	38 87       	std	Y+8, r19	; 0x08
   10de0:	27 87       	std	Z+15, r18	; 0x0f
   10de2:	2d 87       	std	Y+13, r18	; 0x0d
   10de4:	31 87       	std	Z+9, r19	; 0x09
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   10de6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10dea:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   10dec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10df0:	08 95       	ret
   10df2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10df6:	8f 7d       	andi	r24, 0xDF	; 223
   10df8:	f9 cf       	rjmp	.-14     	; 0x10dec <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   10dfa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   10dfe:	87 7f       	andi	r24, 0xF7	; 247
   10e00:	f5 cf       	rjmp	.-22     	; 0x10dec <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   10e02:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10e06:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   10e08:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10e0c:	08 95       	ret
   10e0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   10e12:	8f 7d       	andi	r24, 0xDF	; 223
   10e14:	f9 cf       	rjmp	.-14     	; 0x10e08 <turnOffPWM.lto_priv.233+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   10e16:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10e1a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   10e1c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10e20:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   10e22:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10e26:	8f 7d       	andi	r24, 0xDF	; 223
   10e28:	f9 cf       	rjmp	.-14     	; 0x10e1c <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   10e2a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   10e2e:	87 7f       	andi	r24, 0xF7	; 247
   10e30:	f5 cf       	rjmp	.-22     	; 0x10e1c <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   10e32:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10e36:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   10e38:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10e3c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   10e3e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10e42:	8f 7d       	andi	r24, 0xDF	; 223
   10e44:	f9 cf       	rjmp	.-14     	; 0x10e38 <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   10e46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   10e4a:	87 7f       	andi	r24, 0xF7	; 247
   10e4c:	f5 cf       	rjmp	.-22     	; 0x10e38 <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   10e4e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10e52:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   10e54:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10e58:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   10e5a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10e5e:	8f 7d       	andi	r24, 0xDF	; 223
   10e60:	f9 cf       	rjmp	.-14     	; 0x10e54 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   10e62:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   10e66:	87 7f       	andi	r24, 0xF7	; 247
   10e68:	f5 cf       	rjmp	.-22     	; 0x10e54 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   10e6a:	84 b5       	in	r24, 0x24	; 36
   10e6c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   10e6e:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   10e70:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   10e72:	84 b5       	in	r24, 0x24	; 36
   10e74:	8f 7d       	andi	r24, 0xDF	; 223
   10e76:	fb cf       	rjmp	.-10     	; 0x10e6e <turnOffPWM.lto_priv.233+0xc4>

00010e78 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   10e78:	1f 93       	push	r17
   10e7a:	cf 93       	push	r28
   10e7c:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   10e7e:	28 2f       	mov	r18, r24
   10e80:	30 e0       	ldi	r19, 0x00	; 0
   10e82:	f9 01       	movw	r30, r18
   10e84:	e0 5f       	subi	r30, 0xF0	; 240
   10e86:	fa 4c       	sbci	r31, 0xCA	; 202
   10e88:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   10e8a:	f9 01       	movw	r30, r18
   10e8c:	ef 5a       	subi	r30, 0xAF	; 175
   10e8e:	f5 4c       	sbci	r31, 0xC5	; 197
   10e90:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   10e92:	f9 01       	movw	r30, r18
   10e94:	e9 56       	subi	r30, 0x69	; 105
   10e96:	f5 4c       	sbci	r31, 0xC5	; 197
   10e98:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   10e9a:	cc 23       	and	r28, r28
   10e9c:	a9 f0       	breq	.+42     	; 0x10ec8 <digitalWrite+0x50>
   10e9e:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   10ea0:	81 11       	cpse	r24, r1
   10ea2:	0e 94 d5 86 	call	0x10daa	; 0x10daa <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   10ea6:	ec 2f       	mov	r30, r28
   10ea8:	f0 e0       	ldi	r31, 0x00	; 0
   10eaa:	ee 0f       	add	r30, r30
   10eac:	ff 1f       	adc	r31, r31
   10eae:	e9 57       	subi	r30, 0x79	; 121
   10eb0:	f5 4c       	sbci	r31, 0xC5	; 197
   10eb2:	a5 91       	lpm	r26, Z+
   10eb4:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   10eb6:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   10eb8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   10eba:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   10ebc:	11 11       	cpse	r17, r1
   10ebe:	08 c0       	rjmp	.+16     	; 0x10ed0 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   10ec0:	d0 95       	com	r29
   10ec2:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   10ec4:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   10ec6:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
   10ec8:	df 91       	pop	r29
   10eca:	cf 91       	pop	r28
   10ecc:	1f 91       	pop	r17
   10ece:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   10ed0:	de 2b       	or	r29, r30
   10ed2:	f8 cf       	rjmp	.-16     	; 0x10ec4 <digitalWrite+0x4c>

00010ed4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   10ed4:	cf 92       	push	r12
   10ed6:	df 92       	push	r13
   10ed8:	ef 92       	push	r14
   10eda:	ff 92       	push	r15
   10edc:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   10ede:	c0 90 a0 0c 	lds	r12, 0x0CA0	; 0x800ca0 <SRAM+0x4>
   10ee2:	d0 90 a1 0c 	lds	r13, 0x0CA1	; 0x800ca1 <SRAM+0x5>
   10ee6:	e0 90 a2 0c 	lds	r14, 0x0CA2	; 0x800ca2 <SRAM+0x6>
   10eea:	f0 90 a3 0c 	lds	r15, 0x0CA3	; 0x800ca3 <SRAM+0x7>
   10eee:	6c 15       	cp	r22, r12
   10ef0:	7d 05       	cpc	r23, r13
   10ef2:	8e 05       	cpc	r24, r14
   10ef4:	9f 05       	cpc	r25, r15
   10ef6:	38 f5       	brcc	.+78     	; 0x10f46 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x72>
   10ef8:	c4 2f       	mov	r28, r20
   10efa:	6b 01       	movw	r12, r22
   10efc:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   10efe:	60 e0       	ldi	r22, 0x00	; 0
   10f00:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
   10f04:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   10f08:	62 e0       	ldi	r22, 0x02	; 2
   10f0a:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   10f0e:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
   10f12:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   10f16:	c7 01       	movw	r24, r14
   10f18:	b6 01       	movw	r22, r12
   10f1a:	0e 94 c6 81 	call	0x1038c	; 0x1038c <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   10f1e:	6c 2f       	mov	r22, r28
   10f20:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   10f24:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
   10f28:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   10f2c:	61 e0       	ldi	r22, 0x01	; 1
   10f2e:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
   10f32:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
   10f36:	81 e0       	ldi	r24, 0x01	; 1
   10f38:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   10f3a:	cf 91       	pop	r28
   10f3c:	ff 90       	pop	r15
   10f3e:	ef 90       	pop	r14
   10f40:	df 90       	pop	r13
   10f42:	cf 90       	pop	r12
   10f44:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   10f46:	90 e0       	ldi	r25, 0x00	; 0
   10f48:	80 e0       	ldi	r24, 0x00	; 0
   10f4a:	f7 cf       	rjmp	.-18     	; 0x10f3a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x66>

00010f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>:
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   10f4c:	cf 92       	push	r12
   10f4e:	df 92       	push	r13
   10f50:	ef 92       	push	r14
   10f52:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   10f54:	c0 90 a0 0c 	lds	r12, 0x0CA0	; 0x800ca0 <SRAM+0x4>
   10f58:	d0 90 a1 0c 	lds	r13, 0x0CA1	; 0x800ca1 <SRAM+0x5>
   10f5c:	e0 90 a2 0c 	lds	r14, 0x0CA2	; 0x800ca2 <SRAM+0x6>
   10f60:	f0 90 a3 0c 	lds	r15, 0x0CA3	; 0x800ca3 <SRAM+0x7>
   10f64:	6c 15       	cp	r22, r12
   10f66:	7d 05       	cpc	r23, r13
   10f68:	8e 05       	cpc	r24, r14
   10f6a:	9f 05       	cpc	r25, r15
   10f6c:	28 f5       	brcc	.+74     	; 0x10fb8 <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x6c>
   10f6e:	6b 01       	movw	r12, r22
   10f70:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   10f72:	60 e0       	ldi	r22, 0x00	; 0
   10f74:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
   10f78:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   10f7c:	63 e0       	ldi	r22, 0x03	; 3
   10f7e:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   10f82:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
   10f86:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   10f8a:	c7 01       	movw	r24, r14
   10f8c:	b6 01       	movw	r22, r12
   10f8e:	0e 94 c6 81 	call	0x1038c	; 0x1038c <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   10f92:	6f ef       	ldi	r22, 0xFF	; 255
   10f94:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <SRAM>
   10f98:	90 91 9d 0c 	lds	r25, 0x0C9D	; 0x800c9d <SRAM+0x1>
   10f9c:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
   10fa0:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   10fa2:	61 e0       	ldi	r22, 0x01	; 1
   10fa4:	80 91 a4 0c 	lds	r24, 0x0CA4	; 0x800ca4 <SRAM+0x8>
   10fa8:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   10fac:	8f 2d       	mov	r24, r15
   10fae:	ff 90       	pop	r15
   10fb0:	ef 90       	pop	r14
   10fb2:	df 90       	pop	r13
   10fb4:	cf 90       	pop	r12
   10fb6:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   10fb8:	f1 2c       	mov	r15, r1
   10fba:	f8 cf       	rjmp	.-16     	; 0x10fac <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x60>

00010fbc <EEPROM_CAT25::endCommand() [clone .constprop.90]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.90():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   10fbc:	61 e0       	ldi	r22, 0x01	; 1
   10fbe:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SROM+0xa>
   10fc2:	0c 94 3c 87 	jmp	0x10e78	; 0x10e78 <digitalWrite>

00010fc6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   10fc6:	cf 93       	push	r28
   10fc8:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   10fca:	60 e0       	ldi	r22, 0x00	; 0
   10fcc:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <SROM+0xa>
   10fd0:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   10fd4:	6c 2f       	mov	r22, r28
   10fd6:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
   10fda:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
   10fde:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   10fe2:	c2 50       	subi	r28, 0x02	; 2
   10fe4:	c2 30       	cpi	r28, 0x02	; 2
   10fe6:	a8 f5       	brcc	.+106    	; 0x11052 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   10fe8:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <SROM+0x4>
   10fec:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <SROM+0x5>
   10ff0:	a0 91 93 0c 	lds	r26, 0x0C93	; 0x800c93 <SROM+0x6>
   10ff4:	b0 91 94 0c 	lds	r27, 0x0C94	; 0x800c94 <SROM+0x7>
   10ff8:	01 97       	sbiw	r24, 0x01	; 1
   10ffa:	a1 40       	sbci	r26, 0x01	; 1
   10ffc:	b1 05       	cpc	r27, r1
   10ffe:	38 f0       	brcs	.+14     	; 0x1100e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   11000:	60 e0       	ldi	r22, 0x00	; 0
   11002:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
   11006:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
   1100a:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1100e:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <SROM+0x4>
   11012:	90 91 92 0c 	lds	r25, 0x0C92	; 0x800c92 <SROM+0x5>
   11016:	a0 91 93 0c 	lds	r26, 0x0C93	; 0x800c93 <SROM+0x6>
   1101a:	b0 91 94 0c 	lds	r27, 0x0C94	; 0x800c94 <SROM+0x7>
   1101e:	81 30       	cpi	r24, 0x01	; 1
   11020:	91 40       	sbci	r25, 0x01	; 1
   11022:	a1 05       	cpc	r26, r1
   11024:	b1 05       	cpc	r27, r1
   11026:	68 f0       	brcs	.+26     	; 0x11042 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
   11028:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <SROM+0x2>
   1102c:	90 91 90 0c 	lds	r25, 0x0C90	; 0x800c90 <SROM+0x3>
   11030:	0b 97       	sbiw	r24, 0x0b	; 11
   11032:	39 f0       	breq	.+14     	; 0x11042 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   11034:	60 e0       	ldi	r22, 0x00	; 0
   11036:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
   1103a:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
   1103e:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   11042:	60 e0       	ldi	r22, 0x00	; 0
   11044:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
   11048:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1104c:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1104e:	0c 94 a9 35 	jmp	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   11052:	cf 91       	pop	r28
   11054:	08 95       	ret

00011056 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.87():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   11056:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   11058:	85 e0       	ldi	r24, 0x05	; 5
   1105a:	0e 94 e3 87 	call	0x10fc6	; 0x10fc6 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1105e:	6f ef       	ldi	r22, 0xFF	; 255
   11060:	80 91 8d 0c 	lds	r24, 0x0C8D	; 0x800c8d <SROM>
   11064:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <SROM+0x1>
   11068:	0e 94 a9 35 	call	0x6b52	; 0x6b52 <SoftSPIB::transfer(unsigned char)>
   1106c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   1106e:	0e 94 de 87 	call	0x10fbc	; 0x10fbc <EEPROM_CAT25::endCommand() [clone .constprop.90]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   11072:	8c 2f       	mov	r24, r28
   11074:	cf 91       	pop	r28
   11076:	08 95       	ret

00011078 <TwoWire::begin() [clone .constprop.63]>:
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   11078:	10 92 00 11 	sts	0x1100, r1	; 0x801100 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   1107c:	10 92 ff 10 	sts	0x10FF, r1	; 0x8010ff <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   11080:	10 92 02 11 	sts	0x1102, r1	; 0x801102 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   11084:	10 92 01 11 	sts	0x1101, r1	; 0x801101 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   11088:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   1108c:	81 e0       	ldi	r24, 0x01	; 1
   1108e:	80 93 4a 11 	sts	0x114A, r24	; 0x80114a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   11092:	10 92 45 11 	sts	0x1145, r1	; 0x801145 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   11096:	61 e0       	ldi	r22, 0x01	; 1
   11098:	83 e1       	ldi	r24, 0x13	; 19
   1109a:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   1109e:	61 e0       	ldi	r22, 0x01	; 1
   110a0:	82 e1       	ldi	r24, 0x12	; 18
   110a2:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   110a6:	e9 eb       	ldi	r30, 0xB9	; 185
   110a8:	f0 e0       	ldi	r31, 0x00	; 0
   110aa:	80 81       	ld	r24, Z
   110ac:	8e 7f       	andi	r24, 0xFE	; 254
   110ae:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   110b0:	80 81       	ld	r24, Z
   110b2:	8d 7f       	andi	r24, 0xFD	; 253
   110b4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   110b6:	88 e4       	ldi	r24, 0x48	; 72
   110b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   110bc:	85 e4       	ldi	r24, 0x45	; 69
   110be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   110c2:	80 e5       	ldi	r24, 0x50	; 80
   110c4:	9c e7       	ldi	r25, 0x7C	; 124
   110c6:	90 93 fd 10 	sts	0x10FD, r25	; 0x8010fd <twi_onSlaveTransmit+0x1>
   110ca:	80 93 fc 10 	sts	0x10FC, r24	; 0x8010fc <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   110ce:	81 e5       	ldi	r24, 0x51	; 81
   110d0:	9c e7       	ldi	r25, 0x7C	; 124
   110d2:	90 93 fb 10 	sts	0x10FB, r25	; 0x8010fb <twi_onSlaveReceive+0x1>
   110d6:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   110da:	08 95       	ret

000110dc <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   110dc:	61 e0       	ldi	r22, 0x01	; 1
   110de:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <SPI_CS>
   110e2:	0c 94 3c 87 	jmp	0x10e78	; 0x10e78 <digitalWrite>

000110e6 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   110e6:	60 e0       	ldi	r22, 0x00	; 0
   110e8:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <SPI_CS>
   110ec:	0c 94 3c 87 	jmp	0x10e78	; 0x10e78 <digitalWrite>

000110f0 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   110f0:	1f 93       	push	r17
   110f2:	cf 93       	push	r28
   110f4:	df 93       	push	r29
   110f6:	18 2f       	mov	r17, r24
   110f8:	d6 2f       	mov	r29, r22
   110fa:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   110fc:	80 91 58 11 	lds	r24, 0x1158	; 0x801158 <wiznet_SPI_settings>
   11100:	90 91 59 11 	lds	r25, 0x1159	; 0x801159 <wiznet_SPI_settings+0x1>
   11104:	0e 94 2f 7e 	call	0xfc5e	; 0xfc5e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   11108:	0e 94 73 88 	call	0x110e6	; 0x110e6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   1110c:	80 e0       	ldi	r24, 0x00	; 0
   1110e:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   11112:	81 2f       	mov	r24, r17
   11114:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   11118:	8d 2f       	mov	r24, r29
   1111a:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   1111e:	8c 2f       	mov	r24, r28
   11120:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   11124:	0e 94 6e 88 	call	0x110dc	; 0x110dc <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   11128:	81 e0       	ldi	r24, 0x01	; 1
   1112a:	df 91       	pop	r29
   1112c:	cf 91       	pop	r28
   1112e:	1f 91       	pop	r17
   11130:	08 95       	ret

00011132 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   11132:	cf 93       	push	r28
   11134:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   11136:	90 e0       	ldi	r25, 0x00	; 0
   11138:	fc 01       	movw	r30, r24
   1113a:	ef 5a       	subi	r30, 0xAF	; 175
   1113c:	f5 4c       	sbci	r31, 0xC5	; 197
   1113e:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   11140:	89 56       	subi	r24, 0x69	; 105
   11142:	95 4c       	sbci	r25, 0xC5	; 197
   11144:	fc 01       	movw	r30, r24
   11146:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   11148:	88 23       	and	r24, r24
   1114a:	c9 f0       	breq	.+50     	; 0x1117e <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1114c:	90 e0       	ldi	r25, 0x00	; 0
   1114e:	88 0f       	add	r24, r24
   11150:	99 1f       	adc	r25, r25
   11152:	fc 01       	movw	r30, r24
   11154:	e0 50       	subi	r30, 0x00	; 0
   11156:	fb 4c       	sbci	r31, 0xCB	; 203
   11158:	a5 91       	lpm	r26, Z+
   1115a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1115c:	fc 01       	movw	r30, r24
   1115e:	e9 57       	subi	r30, 0x79	; 121
   11160:	f5 4c       	sbci	r31, 0xC5	; 197
   11162:	c5 91       	lpm	r28, Z+
   11164:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   11166:	61 11       	cpse	r22, r1
   11168:	0d c0       	rjmp	.+26     	; 0x11184 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   1116a:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   1116c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   1116e:	8c 91       	ld	r24, X
   11170:	20 95       	com	r18
   11172:	82 23       	and	r24, r18
   11174:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   11176:	88 81       	ld	r24, Y
   11178:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1117a:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1117c:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1117e:	df 91       	pop	r29
   11180:	cf 91       	pop	r28
   11182:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   11184:	62 30       	cpi	r22, 0x02	; 2
   11186:	51 f4       	brne	.+20     	; 0x1119c <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   11188:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1118a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1118c:	3c 91       	ld	r19, X
   1118e:	82 2f       	mov	r24, r18
   11190:	80 95       	com	r24
   11192:	83 23       	and	r24, r19
   11194:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   11196:	e8 81       	ld	r30, Y
   11198:	2e 2b       	or	r18, r30
   1119a:	ef cf       	rjmp	.-34     	; 0x1117a <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   1119c:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1119e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   111a0:	ec 91       	ld	r30, X
   111a2:	2e 2b       	or	r18, r30
   111a4:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   111a6:	8f bf       	out	0x3f, r24	; 63
   111a8:	ea cf       	rjmp	.-44     	; 0x1117e <pinMode+0x4c>

000111aa <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
   111aa:	8f 92       	push	r8
   111ac:	9f 92       	push	r9
   111ae:	af 92       	push	r10
   111b0:	bf 92       	push	r11
   111b2:	cf 92       	push	r12
   111b4:	df 92       	push	r13
   111b6:	ef 92       	push	r14
   111b8:	ff 92       	push	r15
   111ba:	6b 01       	movw	r12, r22
   111bc:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
   111be:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <micros>
   111c2:	4b 01       	movw	r8, r22
   111c4:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
   111c6:	c1 14       	cp	r12, r1
   111c8:	d1 04       	cpc	r13, r1
   111ca:	e1 04       	cpc	r14, r1
   111cc:	f1 04       	cpc	r15, r1
   111ce:	b9 f0       	breq	.+46     	; 0x111fe <delay+0x54>
   111d0:	0e 94 38 7d 	call	0xfa70	; 0xfa70 <micros>
   111d4:	68 19       	sub	r22, r8
   111d6:	79 09       	sbc	r23, r9
   111d8:	8a 09       	sbc	r24, r10
   111da:	9b 09       	sbc	r25, r11
   111dc:	68 3e       	cpi	r22, 0xE8	; 232
   111de:	73 40       	sbci	r23, 0x03	; 3
   111e0:	81 05       	cpc	r24, r1
   111e2:	91 05       	cpc	r25, r1
   111e4:	80 f3       	brcs	.-32     	; 0x111c6 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
   111e6:	21 e0       	ldi	r18, 0x01	; 1
   111e8:	c2 1a       	sub	r12, r18
   111ea:	d1 08       	sbc	r13, r1
   111ec:	e1 08       	sbc	r14, r1
   111ee:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
   111f0:	88 ee       	ldi	r24, 0xE8	; 232
   111f2:	88 0e       	add	r8, r24
   111f4:	83 e0       	ldi	r24, 0x03	; 3
   111f6:	98 1e       	adc	r9, r24
   111f8:	a1 1c       	adc	r10, r1
   111fa:	b1 1c       	adc	r11, r1
   111fc:	e4 cf       	rjmp	.-56     	; 0x111c6 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
   111fe:	ff 90       	pop	r15
   11200:	ef 90       	pop	r14
   11202:	df 90       	pop	r13
   11204:	cf 90       	pop	r12
   11206:	bf 90       	pop	r11
   11208:	af 90       	pop	r10
   1120a:	9f 90       	pop	r9
   1120c:	8f 90       	pop	r8
   1120e:	08 95       	ret

00011210 <LCDWIKI_KBV::reset() [clone .constprop.71]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.71():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   11210:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   11214:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   11218:	80 81       	ld	r24, Z
   1121a:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_lcd+0x36>
   1121e:	89 2b       	or	r24, r25
   11220:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   11222:	e0 91 0a 0e 	lds	r30, 0x0E0A	; 0x800e0a <my_lcd+0x34>
   11226:	f0 91 0b 0e 	lds	r31, 0x0E0B	; 0x800e0b <my_lcd+0x35>
   1122a:	80 81       	ld	r24, Z
   1122c:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <my_lcd+0x39>
   11230:	89 2b       	or	r24, r25
   11232:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   11234:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   11238:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1123c:	80 81       	ld	r24, Z
   1123e:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   11242:	89 2b       	or	r24, r25
   11244:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   11246:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <my_lcd+0x3e>
   1124a:	88 23       	and	r24, r24
   1124c:	71 f0       	breq	.+28     	; 0x1126a <LCDWIKI_KBV::reset() [clone .constprop.71]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   1124e:	60 e0       	ldi	r22, 0x00	; 0
   11250:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   11254:	62 e0       	ldi	r22, 0x02	; 2
   11256:	70 e0       	ldi	r23, 0x00	; 0
   11258:	80 e0       	ldi	r24, 0x00	; 0
   1125a:	90 e0       	ldi	r25, 0x00	; 0
   1125c:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   11260:	61 e0       	ldi	r22, 0x01	; 1
   11262:	80 91 14 0e 	lds	r24, 0x0E14	; 0x800e14 <my_lcd+0x3e>
   11266:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   1126a:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   1126e:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   11272:	80 81       	ld	r24, Z
   11274:	90 91 10 0e 	lds	r25, 0x0E10	; 0x800e10 <my_lcd+0x3a>
   11278:	89 23       	and	r24, r25
   1127a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1127c:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   11280:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   11284:	80 81       	ld	r24, Z
   11286:	90 91 11 0e 	lds	r25, 0x0E11	; 0x800e11 <my_lcd+0x3b>
   1128a:	89 23       	and	r24, r25
   1128c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   1128e:	12 b8       	out	0x02, r1	; 2
   11290:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   11294:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   11298:	80 81       	ld	r24, Z
   1129a:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   1129e:	89 23       	and	r24, r25
   112a0:	80 83       	st	Z, r24
   112a2:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   112a6:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   112aa:	80 81       	ld	r24, Z
   112ac:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   112b0:	89 2b       	or	r24, r25
   112b2:	80 83       	st	Z, r24
   112b4:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   112b6:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   112ba:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   112be:	90 81       	ld	r25, Z
   112c0:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   112c4:	92 23       	and	r25, r18
   112c6:	90 83       	st	Z, r25
   112c8:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   112cc:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   112d0:	90 81       	ld	r25, Z
   112d2:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   112d6:	92 2b       	or	r25, r18
   112d8:	90 83       	st	Z, r25
   112da:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   112dc:	61 f7       	brne	.-40     	; 0x112b6 <LCDWIKI_KBV::reset() [clone .constprop.71]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   112de:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   112e2:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   112e6:	80 81       	ld	r24, Z
   112e8:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <my_lcd+0x36>
   112ec:	89 2b       	or	r24, r25
   112ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   112f0:	08 95       	ret

000112f2 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.69():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   112f2:	cf 93       	push	r28
   112f4:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   112f6:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   112fa:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   112fe:	90 81       	ld	r25, Z
   11300:	20 91 10 0e 	lds	r18, 0x0E10	; 0x800e10 <my_lcd+0x3a>
   11304:	92 23       	and	r25, r18
   11306:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   11308:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   1130c:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   11310:	90 81       	ld	r25, Z
   11312:	20 91 11 0e 	lds	r18, 0x0E11	; 0x800e11 <my_lcd+0x3b>
   11316:	92 23       	and	r25, r18
   11318:	90 83       	st	Z, r25
   1131a:	12 b8       	out	0x02, r1	; 2
   1131c:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   11320:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   11324:	90 81       	ld	r25, Z
   11326:	20 91 12 0e 	lds	r18, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   1132a:	92 23       	and	r25, r18
   1132c:	90 83       	st	Z, r25
   1132e:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   11332:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   11336:	90 81       	ld	r25, Z
   11338:	20 91 0e 0e 	lds	r18, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   1133c:	92 2b       	or	r25, r18
   1133e:	90 83       	st	Z, r25
   11340:	82 b9       	out	0x02, r24	; 2
   11342:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   11346:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1134a:	80 81       	ld	r24, Z
   1134c:	90 91 12 0e 	lds	r25, 0x0E12	; 0x800e12 <my_lcd+0x3c>
   11350:	89 23       	and	r24, r25
   11352:	80 83       	st	Z, r24
   11354:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   11358:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   1135c:	80 81       	ld	r24, Z
   1135e:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   11362:	89 2b       	or	r24, r25
   11364:	80 83       	st	Z, r24
   11366:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   1136a:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   1136e:	80 81       	ld	r24, Z
   11370:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   11374:	89 2b       	or	r24, r25
   11376:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   11378:	81 b1       	in	r24, 0x01	; 1
   1137a:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1137c:	61 e0       	ldi	r22, 0x01	; 1
   1137e:	70 e0       	ldi	r23, 0x00	; 0
   11380:	80 e0       	ldi	r24, 0x00	; 0
   11382:	90 e0       	ldi	r25, 0x00	; 0
   11384:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   11388:	e0 91 0a 0e 	lds	r30, 0x0E0A	; 0x800e0a <my_lcd+0x34>
   1138c:	f0 91 0b 0e 	lds	r31, 0x0E0B	; 0x800e0b <my_lcd+0x35>
   11390:	80 81       	ld	r24, Z
   11392:	90 91 13 0e 	lds	r25, 0x0E13	; 0x800e13 <my_lcd+0x3d>
   11396:	89 23       	and	r24, r25
   11398:	80 83       	st	Z, r24
   1139a:	20 b1       	in	r18, 0x00	; 0
   1139c:	e0 91 0a 0e 	lds	r30, 0x0E0A	; 0x800e0a <my_lcd+0x34>
   113a0:	f0 91 0b 0e 	lds	r31, 0x0E0B	; 0x800e0b <my_lcd+0x35>
   113a4:	90 81       	ld	r25, Z
   113a6:	80 91 0f 0e 	lds	r24, 0x0E0F	; 0x800e0f <my_lcd+0x39>
   113aa:	98 2b       	or	r25, r24
   113ac:	90 83       	st	Z, r25
   113ae:	e0 91 0a 0e 	lds	r30, 0x0E0A	; 0x800e0a <my_lcd+0x34>
   113b2:	f0 91 0b 0e 	lds	r31, 0x0E0B	; 0x800e0b <my_lcd+0x35>
   113b6:	90 81       	ld	r25, Z
   113b8:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <my_lcd+0x3d>
   113bc:	98 23       	and	r25, r24
   113be:	90 83       	st	Z, r25
   113c0:	80 b1       	in	r24, 0x00	; 0
   113c2:	e0 91 0a 0e 	lds	r30, 0x0E0A	; 0x800e0a <my_lcd+0x34>
   113c6:	f0 91 0b 0e 	lds	r31, 0x0E0B	; 0x800e0b <my_lcd+0x35>
   113ca:	90 81       	ld	r25, Z
   113cc:	30 91 0f 0e 	lds	r19, 0x0E0F	; 0x800e0f <my_lcd+0x39>
   113d0:	93 2b       	or	r25, r19
   113d2:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   113d4:	c1 30       	cpi	r28, 0x01	; 1
   113d6:	79 f0       	breq	.+30     	; 0x113f6 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   113d8:	e0 91 04 0e 	lds	r30, 0x0E04	; 0x800e04 <my_lcd+0x2e>
   113dc:	f0 91 05 0e 	lds	r31, 0x0E05	; 0x800e05 <my_lcd+0x2f>
   113e0:	90 81       	ld	r25, Z
   113e2:	30 91 0c 0e 	lds	r19, 0x0E0C	; 0x800e0c <my_lcd+0x36>
   113e6:	93 2b       	or	r25, r19
   113e8:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   113ea:	91 b1       	in	r25, 0x01	; 1
   113ec:	9f ef       	ldi	r25, 0xFF	; 255
   113ee:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   113f0:	92 2f       	mov	r25, r18
   113f2:	cf 91       	pop	r28
   113f4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   113f6:	c0 e0       	ldi	r28, 0x00	; 0
   113f8:	c7 cf       	rjmp	.-114    	; 0x11388 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x96>

000113fa <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   113fa:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   113fc:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
   113fe:	60 91 f0 10 	lds	r22, 0x10F0	; 0x8010f0 <timer0_millis>
   11402:	70 91 f1 10 	lds	r23, 0x10F1	; 0x8010f1 <timer0_millis+0x1>
   11406:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <timer0_millis+0x2>
   1140a:	90 91 f3 10 	lds	r25, 0x10F3	; 0x8010f3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
   1140e:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
   11410:	08 95       	ret

00011412 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>:
_ZN12PubSubClient8readByteEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   11412:	cf 92       	push	r12
   11414:	df 92       	push	r13
   11416:	ef 92       	push	r14
   11418:	ff 92       	push	r15
   1141a:	cf 93       	push	r28
   1141c:	df 93       	push	r29
   1141e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   11420:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   11424:	6b 01       	movw	r12, r22
   11426:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   11428:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
   1142c:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
   11430:	dc 01       	movw	r26, r24
   11432:	ed 91       	ld	r30, X+
   11434:	fc 91       	ld	r31, X
   11436:	00 84       	ldd	r0, Z+8	; 0x08
   11438:	f1 85       	ldd	r31, Z+9	; 0x09
   1143a:	e0 2d       	mov	r30, r0
   1143c:	19 95       	eicall
   1143e:	89 2b       	or	r24, r25
   11440:	69 f4       	brne	.+26     	; 0x1145c <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   11442:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   11446:	6c 19       	sub	r22, r12
   11448:	7d 09       	sbc	r23, r13
   1144a:	8e 09       	sbc	r24, r14
   1144c:	9f 09       	sbc	r25, r15
   1144e:	64 36       	cpi	r22, 0x64	; 100
   11450:	71 05       	cpc	r23, r1
   11452:	81 05       	cpc	r24, r1
   11454:	91 05       	cpc	r25, r1
   11456:	40 f3       	brcs	.-48     	; 0x11428 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   11458:	80 e0       	ldi	r24, 0x00	; 0
   1145a:	0d c0       	rjmp	.+26     	; 0x11476 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   1145c:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
   11460:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
   11464:	dc 01       	movw	r26, r24
   11466:	ed 91       	ld	r30, X+
   11468:	fc 91       	ld	r31, X
   1146a:	02 84       	ldd	r0, Z+10	; 0x0a
   1146c:	f3 85       	ldd	r31, Z+11	; 0x0b
   1146e:	e0 2d       	mov	r30, r0
   11470:	19 95       	eicall
   11472:	88 83       	st	Y, r24
   11474:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   11476:	df 91       	pop	r29
   11478:	cf 91       	pop	r28
   1147a:	ff 90       	pop	r15
   1147c:	ef 90       	pop	r14
   1147e:	df 90       	pop	r13
   11480:	cf 90       	pop	r12
   11482:	08 95       	ret

00011484 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>:
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   11484:	3f 92       	push	r3
   11486:	4f 92       	push	r4
   11488:	5f 92       	push	r5
   1148a:	6f 92       	push	r6
   1148c:	7f 92       	push	r7
   1148e:	8f 92       	push	r8
   11490:	9f 92       	push	r9
   11492:	af 92       	push	r10
   11494:	bf 92       	push	r11
   11496:	cf 92       	push	r12
   11498:	df 92       	push	r13
   1149a:	ef 92       	push	r14
   1149c:	ff 92       	push	r15
   1149e:	0f 93       	push	r16
   114a0:	1f 93       	push	r17
   114a2:	cf 93       	push	r28
   114a4:	df 93       	push	r29
   114a6:	1f 92       	push	r1
   114a8:	cd b7       	in	r28, 0x3d	; 61
   114aa:	de b7       	in	r29, 0x3e	; 62
   114ac:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   114ae:	80 e3       	ldi	r24, 0x30	; 48
   114b0:	9e e0       	ldi	r25, 0x0E	; 14
   114b2:	0e 94 09 8a 	call	0x11412	; 0x11412 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   114b6:	81 11       	cpse	r24, r1
   114b8:	16 c0       	rjmp	.+44     	; 0x114e6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   114ba:	10 e0       	ldi	r17, 0x00	; 0
   114bc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   114be:	c8 01       	movw	r24, r16
   114c0:	0f 90       	pop	r0
   114c2:	df 91       	pop	r29
   114c4:	cf 91       	pop	r28
   114c6:	1f 91       	pop	r17
   114c8:	0f 91       	pop	r16
   114ca:	ff 90       	pop	r15
   114cc:	ef 90       	pop	r14
   114ce:	df 90       	pop	r13
   114d0:	cf 90       	pop	r12
   114d2:	bf 90       	pop	r11
   114d4:	af 90       	pop	r10
   114d6:	9f 90       	pop	r9
   114d8:	8f 90       	pop	r8
   114da:	7f 90       	pop	r7
   114dc:	6f 90       	pop	r6
   114de:	5f 90       	pop	r5
   114e0:	4f 90       	pop	r4
   114e2:	3f 90       	pop	r3
   114e4:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   114e6:	30 90 30 0e 	lds	r3, 0x0E30	; 0x800e30 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   114ea:	19 82       	std	Y+1, r1	; 0x01
   114ec:	31 e3       	ldi	r19, 0x31	; 49
   114ee:	83 2e       	mov	r8, r19
   114f0:	3e e0       	ldi	r19, 0x0E	; 14
   114f2:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   114f4:	ee 24       	eor	r14, r14
   114f6:	e3 94       	inc	r14
   114f8:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   114fa:	d1 2c       	mov	r13, r1
   114fc:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   114fe:	41 2c       	mov	r4, r1
   11500:	51 2c       	mov	r5, r1
   11502:	32 01       	movw	r6, r4
   11504:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   11506:	ce 01       	movw	r24, r28
   11508:	01 96       	adiw	r24, 0x01	; 1
   1150a:	0e 94 09 8a 	call	0x11412	; 0x11412 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   1150e:	88 23       	and	r24, r24
   11510:	a1 f2       	breq	.-88     	; 0x114ba <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   11512:	87 01       	movw	r16, r14
   11514:	0f 5f       	subi	r16, 0xFF	; 255
   11516:	1f 4f       	sbci	r17, 0xFF	; 255
   11518:	89 81       	ldd	r24, Y+1	; 0x01
   1151a:	d4 01       	movw	r26, r8
   1151c:	8d 93       	st	X+, r24
   1151e:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   11520:	28 2f       	mov	r18, r24
   11522:	2f 77       	andi	r18, 0x7F	; 127
   11524:	30 e0       	ldi	r19, 0x00	; 0
   11526:	24 9d       	mul	r18, r4
   11528:	a0 01       	movw	r20, r0
   1152a:	25 9d       	mul	r18, r5
   1152c:	50 0d       	add	r21, r0
   1152e:	34 9d       	mul	r19, r4
   11530:	50 0d       	add	r21, r0
   11532:	11 24       	eor	r1, r1
   11534:	c4 0e       	add	r12, r20
   11536:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   11538:	27 e0       	ldi	r18, 0x07	; 7
   1153a:	44 0c       	add	r4, r4
   1153c:	55 1c       	adc	r5, r5
   1153e:	66 1c       	adc	r6, r6
   11540:	77 1c       	adc	r7, r7
   11542:	2a 95       	dec	r18
   11544:	d1 f7       	brne	.-12     	; 0x1153a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   11546:	87 fd       	sbrc	r24, 7
   11548:	31 c0       	rjmp	.+98     	; 0x115ac <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x128>
   1154a:	b3 2d       	mov	r27, r3
   1154c:	b0 7f       	andi	r27, 0xF0	; 240
   1154e:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   11550:	8f ef       	ldi	r24, 0xFF	; 255
   11552:	80 0f       	add	r24, r16
   11554:	f5 01       	movw	r30, r10
   11556:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   11558:	f0 e3       	ldi	r31, 0x30	; 48
   1155a:	bf 13       	cpse	r27, r31
   1155c:	29 c0       	rjmp	.+82     	; 0x115b0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   1155e:	c8 01       	movw	r24, r16
   11560:	80 5d       	subi	r24, 0xD0	; 208
   11562:	91 4f       	sbci	r25, 0xF1	; 241
   11564:	0e 94 09 8a 	call	0x11412	; 0x11412 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11568:	88 23       	and	r24, r24
   1156a:	09 f4       	brne	.+2      	; 0x1156e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xea>
   1156c:	a6 cf       	rjmp	.-180    	; 0x114ba <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   1156e:	c7 01       	movw	r24, r14
   11570:	8e 5c       	subi	r24, 0xCE	; 206
   11572:	91 4f       	sbci	r25, 0xF1	; 241
   11574:	0e 94 09 8a 	call	0x11412	; 0x11412 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11578:	88 23       	and	r24, r24
   1157a:	09 f4       	brne	.+2      	; 0x1157e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xfa>
   1157c:	9e cf       	rjmp	.-196    	; 0x114ba <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   1157e:	0e 5f       	subi	r16, 0xFE	; 254
   11580:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   11582:	d5 01       	movw	r26, r10
   11584:	ec 91       	ld	r30, X
   11586:	f0 e0       	ldi	r31, 0x00	; 0
   11588:	e2 5d       	subi	r30, 0xD2	; 210
   1158a:	f1 4f       	sbci	r31, 0xF1	; 241
   1158c:	e3 80       	ldd	r14, Z+3	; 0x03
   1158e:	f1 2c       	mov	r15, r1
   11590:	fe 2c       	mov	r15, r14
   11592:	ee 24       	eor	r14, r14
   11594:	84 81       	ldd	r24, Z+4	; 0x04
   11596:	e8 0e       	add	r14, r24
   11598:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   1159a:	80 91 30 0e 	lds	r24, 0x0E30	; 0x800e30 <mqtt_client+0x2>
   1159e:	81 ff       	sbrs	r24, 1
   115a0:	03 c0       	rjmp	.+6      	; 0x115a8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   115a2:	b2 e0       	ldi	r27, 0x02	; 2
   115a4:	eb 0e       	add	r14, r27
   115a6:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   115a8:	92 e0       	ldi	r25, 0x02	; 2
   115aa:	05 c0       	rjmp	.+10     	; 0x115b6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   115ac:	78 01       	movw	r14, r16
   115ae:	ab cf       	rjmp	.-170    	; 0x11506 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   115b0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   115b2:	f1 2c       	mov	r15, r1
   115b4:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   115b6:	69 2e       	mov	r6, r25
   115b8:	71 2c       	mov	r7, r1
   115ba:	60 1a       	sub	r6, r16
   115bc:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   115be:	8e ef       	ldi	r24, 0xFE	; 254
   115c0:	88 2e       	mov	r8, r24
   115c2:	99 24       	eor	r9, r9
   115c4:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   115c6:	c3 01       	movw	r24, r6
   115c8:	80 0f       	add	r24, r16
   115ca:	91 1f       	adc	r25, r17
   115cc:	8c 15       	cp	r24, r12
   115ce:	9d 05       	cpc	r25, r13
   115d0:	78 f5       	brcc	.+94     	; 0x11630 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   115d2:	ce 01       	movw	r24, r28
   115d4:	01 96       	adiw	r24, 0x01	; 1
   115d6:	0e 94 09 8a 	call	0x11412	; 0x11412 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   115da:	88 23       	and	r24, r24
   115dc:	09 f4       	brne	.+2      	; 0x115e0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x15c>
   115de:	6d cf       	rjmp	.-294    	; 0x114ba <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   115e0:	80 91 47 10 	lds	r24, 0x1047	; 0x801047 <mqtt_client+0x219>
   115e4:	90 91 48 10 	lds	r25, 0x1048	; 0x801048 <mqtt_client+0x21a>
   115e8:	00 97       	sbiw	r24, 0x00	; 0
   115ea:	b1 f0       	breq	.+44     	; 0x11618 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   115ec:	e0 e3       	ldi	r30, 0x30	; 48
   115ee:	3e 12       	cpse	r3, r30
   115f0:	13 c0       	rjmp	.+38     	; 0x11618 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
   115f2:	d5 01       	movw	r26, r10
   115f4:	2c 91       	ld	r18, X
   115f6:	f4 01       	movw	r30, r8
   115f8:	e2 1b       	sub	r30, r18
   115fa:	f1 09       	sbc	r31, r1
   115fc:	9f 01       	movw	r18, r30
   115fe:	20 0f       	add	r18, r16
   11600:	31 1f       	adc	r19, r17
   11602:	e2 16       	cp	r14, r18
   11604:	f3 06       	cpc	r15, r19
   11606:	40 f4       	brcc	.+16     	; 0x11618 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   11608:	dc 01       	movw	r26, r24
   1160a:	ed 91       	ld	r30, X+
   1160c:	fc 91       	ld	r31, X
   1160e:	01 90       	ld	r0, Z+
   11610:	f0 81       	ld	r31, Z
   11612:	e0 2d       	mov	r30, r0
   11614:	69 81       	ldd	r22, Y+1	; 0x01
   11616:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   11618:	01 15       	cp	r16, r1
   1161a:	b2 e0       	ldi	r27, 0x02	; 2
   1161c:	1b 07       	cpc	r17, r27
   1161e:	28 f4       	brcc	.+10     	; 0x1162a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   11620:	89 81       	ldd	r24, Y+1	; 0x01
   11622:	f8 01       	movw	r30, r16
   11624:	e2 5d       	subi	r30, 0xD2	; 210
   11626:	f1 4f       	sbci	r31, 0xF1	; 241
   11628:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   1162a:	0f 5f       	subi	r16, 0xFF	; 255
   1162c:	1f 4f       	sbci	r17, 0xFF	; 255
   1162e:	cb cf       	rjmp	.-106    	; 0x115c6 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   11630:	80 91 47 10 	lds	r24, 0x1047	; 0x801047 <mqtt_client+0x219>
   11634:	90 91 48 10 	lds	r25, 0x1048	; 0x801048 <mqtt_client+0x21a>
   11638:	89 2b       	or	r24, r25
   1163a:	09 f0       	breq	.+2      	; 0x1163e <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ba>
   1163c:	40 cf       	rjmp	.-384    	; 0x114be <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>
   1163e:	01 30       	cpi	r16, 0x01	; 1
   11640:	e2 e0       	ldi	r30, 0x02	; 2
   11642:	1e 07       	cpc	r17, r30
   11644:	08 f0       	brcs	.+2      	; 0x11648 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1c4>
   11646:	39 cf       	rjmp	.-398    	; 0x114ba <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   11648:	3a cf       	rjmp	.-396    	; 0x114be <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>

0001164a <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   1164a:	1f 92       	push	r1
   1164c:	0f 92       	push	r0
   1164e:	0f b6       	in	r0, 0x3f	; 63
   11650:	0f 92       	push	r0
   11652:	11 24       	eor	r1, r1
   11654:	2f 93       	push	r18
   11656:	3f 93       	push	r19
   11658:	8f 93       	push	r24
   1165a:	9f 93       	push	r25
   1165c:	af 93       	push	r26
   1165e:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   11660:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <timer0_millis>
   11664:	90 91 f1 10 	lds	r25, 0x10F1	; 0x8010f1 <timer0_millis+0x1>
   11668:	a0 91 f2 10 	lds	r26, 0x10F2	; 0x8010f2 <timer0_millis+0x2>
   1166c:	b0 91 f3 10 	lds	r27, 0x10F3	; 0x8010f3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
   11670:	30 91 ef 10 	lds	r19, 0x10EF	; 0x8010ef <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
   11674:	23 e0       	ldi	r18, 0x03	; 3
   11676:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
   11678:	2d 37       	cpi	r18, 0x7D	; 125
   1167a:	58 f5       	brcc	.+86     	; 0x116d2 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
   1167c:	01 96       	adiw	r24, 0x01	; 1
   1167e:	a1 1d       	adc	r26, r1
   11680:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
   11682:	20 93 ef 10 	sts	0x10EF, r18	; 0x8010ef <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
   11686:	80 93 f0 10 	sts	0x10F0, r24	; 0x8010f0 <timer0_millis>
   1168a:	90 93 f1 10 	sts	0x10F1, r25	; 0x8010f1 <timer0_millis+0x1>
   1168e:	a0 93 f2 10 	sts	0x10F2, r26	; 0x8010f2 <timer0_millis+0x2>
   11692:	b0 93 f3 10 	sts	0x10F3, r27	; 0x8010f3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
   11696:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <timer0_overflow_count>
   1169a:	90 91 f5 10 	lds	r25, 0x10F5	; 0x8010f5 <timer0_overflow_count+0x1>
   1169e:	a0 91 f6 10 	lds	r26, 0x10F6	; 0x8010f6 <timer0_overflow_count+0x2>
   116a2:	b0 91 f7 10 	lds	r27, 0x10F7	; 0x8010f7 <timer0_overflow_count+0x3>
   116a6:	01 96       	adiw	r24, 0x01	; 1
   116a8:	a1 1d       	adc	r26, r1
   116aa:	b1 1d       	adc	r27, r1
   116ac:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <timer0_overflow_count>
   116b0:	90 93 f5 10 	sts	0x10F5, r25	; 0x8010f5 <timer0_overflow_count+0x1>
   116b4:	a0 93 f6 10 	sts	0x10F6, r26	; 0x8010f6 <timer0_overflow_count+0x2>
   116b8:	b0 93 f7 10 	sts	0x10F7, r27	; 0x8010f7 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
   116bc:	bf 91       	pop	r27
   116be:	af 91       	pop	r26
   116c0:	9f 91       	pop	r25
   116c2:	8f 91       	pop	r24
   116c4:	3f 91       	pop	r19
   116c6:	2f 91       	pop	r18
   116c8:	0f 90       	pop	r0
   116ca:	0f be       	out	0x3f, r0	; 63
   116cc:	0f 90       	pop	r0
   116ce:	1f 90       	pop	r1
   116d0:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
   116d2:	26 e8       	ldi	r18, 0x86	; 134
   116d4:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
   116d6:	02 96       	adiw	r24, 0x02	; 2
   116d8:	a1 1d       	adc	r26, r1
   116da:	b1 1d       	adc	r27, r1
   116dc:	d2 cf       	rjmp	.-92     	; 0x11682 <__vector_23+0x38>

000116de <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   116de:	1f 92       	push	r1
   116e0:	0f 92       	push	r0
   116e2:	0f b6       	in	r0, 0x3f	; 63
   116e4:	0f 92       	push	r0
   116e6:	11 24       	eor	r1, r1
   116e8:	0b b6       	in	r0, 0x3b	; 59
   116ea:	0f 92       	push	r0
   116ec:	2f 93       	push	r18
   116ee:	3f 93       	push	r19
   116f0:	4f 93       	push	r20
   116f2:	5f 93       	push	r21
   116f4:	6f 93       	push	r22
   116f6:	7f 93       	push	r23
   116f8:	8f 93       	push	r24
   116fa:	9f 93       	push	r25
   116fc:	af 93       	push	r26
   116fe:	bf 93       	push	r27
   11700:	ef 93       	push	r30
   11702:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   11704:	89 e8       	ldi	r24, 0x89	; 137
   11706:	9b e0       	ldi	r25, 0x0B	; 11
   11708:	0e 94 8f 7c 	call	0xf91e	; 0xf91e <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   1170c:	ff 91       	pop	r31
   1170e:	ef 91       	pop	r30
   11710:	bf 91       	pop	r27
   11712:	af 91       	pop	r26
   11714:	9f 91       	pop	r25
   11716:	8f 91       	pop	r24
   11718:	7f 91       	pop	r23
   1171a:	6f 91       	pop	r22
   1171c:	5f 91       	pop	r21
   1171e:	4f 91       	pop	r20
   11720:	3f 91       	pop	r19
   11722:	2f 91       	pop	r18
   11724:	0f 90       	pop	r0
   11726:	0b be       	out	0x3b, r0	; 59
   11728:	0f 90       	pop	r0
   1172a:	0f be       	out	0x3f, r0	; 63
   1172c:	0f 90       	pop	r0
   1172e:	1f 90       	pop	r1
   11730:	18 95       	reti

00011732 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   11732:	1f 92       	push	r1
   11734:	0f 92       	push	r0
   11736:	0f b6       	in	r0, 0x3f	; 63
   11738:	0f 92       	push	r0
   1173a:	11 24       	eor	r1, r1
   1173c:	0b b6       	in	r0, 0x3b	; 59
   1173e:	0f 92       	push	r0
   11740:	2f 93       	push	r18
   11742:	8f 93       	push	r24
   11744:	9f 93       	push	r25
   11746:	ef 93       	push	r30
   11748:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   1174a:	e0 91 99 0b 	lds	r30, 0x0B99	; 0x800b99 <Serial+0x10>
   1174e:	f0 91 9a 0b 	lds	r31, 0x0B9A	; 0x800b9a <Serial+0x11>
   11752:	80 81       	ld	r24, Z
   11754:	e0 91 9f 0b 	lds	r30, 0x0B9F	; 0x800b9f <Serial+0x16>
   11758:	f0 91 a0 0b 	lds	r31, 0x0BA0	; 0x800ba0 <Serial+0x17>
   1175c:	82 fd       	sbrc	r24, 2
   1175e:	1d c0       	rjmp	.+58     	; 0x1179a <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   11760:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   11762:	80 91 a2 0b 	lds	r24, 0x0BA2	; 0x800ba2 <Serial+0x19>
   11766:	8f 5f       	subi	r24, 0xFF	; 255
   11768:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   1176a:	20 91 a3 0b 	lds	r18, 0x0BA3	; 0x800ba3 <Serial+0x1a>
   1176e:	82 17       	cp	r24, r18
   11770:	41 f0       	breq	.+16     	; 0x11782 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   11772:	e0 91 a2 0b 	lds	r30, 0x0BA2	; 0x800ba2 <Serial+0x19>
   11776:	f0 e0       	ldi	r31, 0x00	; 0
   11778:	e7 57       	subi	r30, 0x77	; 119
   1177a:	f4 4f       	sbci	r31, 0xF4	; 244
   1177c:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1177e:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   11782:	ff 91       	pop	r31
   11784:	ef 91       	pop	r30
   11786:	9f 91       	pop	r25
   11788:	8f 91       	pop	r24
   1178a:	2f 91       	pop	r18
   1178c:	0f 90       	pop	r0
   1178e:	0b be       	out	0x3b, r0	; 59
   11790:	0f 90       	pop	r0
   11792:	0f be       	out	0x3f, r0	; 63
   11794:	0f 90       	pop	r0
   11796:	1f 90       	pop	r1
   11798:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   1179a:	80 81       	ld	r24, Z
   1179c:	f2 cf       	rjmp	.-28     	; 0x11782 <__vector_25+0x50>

0001179e <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   1179e:	1f 92       	push	r1
   117a0:	0f 92       	push	r0
   117a2:	0f b6       	in	r0, 0x3f	; 63
   117a4:	0f 92       	push	r0
   117a6:	11 24       	eor	r1, r1
   117a8:	0b b6       	in	r0, 0x3b	; 59
   117aa:	0f 92       	push	r0
   117ac:	2f 93       	push	r18
   117ae:	3f 93       	push	r19
   117b0:	4f 93       	push	r20
   117b2:	5f 93       	push	r21
   117b4:	6f 93       	push	r22
   117b6:	7f 93       	push	r23
   117b8:	8f 93       	push	r24
   117ba:	9f 93       	push	r25
   117bc:	af 93       	push	r26
   117be:	bf 93       	push	r27
   117c0:	cf 93       	push	r28
   117c2:	ef 93       	push	r30
   117c4:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   117c6:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   117c8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   117cc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   117d0:	e0 91 d7 09 	lds	r30, 0x09D7	; 0x8009d7 <_ZL17a2d_interupt_func.lto_priv.228>
   117d4:	f0 91 d8 09 	lds	r31, 0x09D8	; 0x8009d8 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   117d8:	68 2f       	mov	r22, r24
   117da:	70 e0       	ldi	r23, 0x00	; 0
   117dc:	76 2f       	mov	r23, r22
   117de:	66 27       	eor	r22, r22
   117e0:	69 0f       	add	r22, r25
   117e2:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   117e4:	80 91 d6 09 	lds	r24, 0x09D6	; 0x8009d6 <a2d_input>
   117e8:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   117ea:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   117ec:	ff 91       	pop	r31
   117ee:	ef 91       	pop	r30
   117f0:	cf 91       	pop	r28
   117f2:	bf 91       	pop	r27
   117f4:	af 91       	pop	r26
   117f6:	9f 91       	pop	r25
   117f8:	8f 91       	pop	r24
   117fa:	7f 91       	pop	r23
   117fc:	6f 91       	pop	r22
   117fe:	5f 91       	pop	r21
   11800:	4f 91       	pop	r20
   11802:	3f 91       	pop	r19
   11804:	2f 91       	pop	r18
   11806:	0f 90       	pop	r0
   11808:	0b be       	out	0x3b, r0	; 59
   1180a:	0f 90       	pop	r0
   1180c:	0f be       	out	0x3f, r0	; 63
   1180e:	0f 90       	pop	r0
   11810:	1f 90       	pop	r1
   11812:	18 95       	reti

00011814 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   11814:	20 91 d5 09 	lds	r18, 0x09D5	; 0x8009d5 <a2d_reference>
   11818:	90 e4       	ldi	r25, 0x40	; 64
   1181a:	29 9f       	mul	r18, r25
   1181c:	90 01       	movw	r18, r0
   1181e:	11 24       	eor	r1, r1
   11820:	28 0f       	add	r18, r24
   11822:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   11826:	80 93 d6 09 	sts	0x09D6, r24	; 0x8009d6 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   1182a:	ea e7       	ldi	r30, 0x7A	; 122
   1182c:	f0 e0       	ldi	r31, 0x00	; 0
   1182e:	80 81       	ld	r24, Z
   11830:	80 64       	ori	r24, 0x40	; 64
   11832:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   11834:	08 95       	ret

00011836 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   11836:	cf 92       	push	r12
   11838:	df 92       	push	r13
   1183a:	ef 92       	push	r14
   1183c:	ff 92       	push	r15
   1183e:	0f 93       	push	r16
   11840:	1f 93       	push	r17
   11842:	cf 93       	push	r28
   11844:	df 93       	push	r29
   11846:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   11848:	cf 80       	ldd	r12, Y+7	; 0x07
   1184a:	d8 84       	ldd	r13, Y+8	; 0x08
   1184c:	e9 84       	ldd	r14, Y+9	; 0x09
   1184e:	fa 84       	ldd	r15, Y+10	; 0x0a
   11850:	8f 85       	ldd	r24, Y+15	; 0x0f
   11852:	98 89       	ldd	r25, Y+16	; 0x10
   11854:	a9 89       	ldd	r26, Y+17	; 0x11
   11856:	ba 89       	ldd	r27, Y+18	; 0x12
   11858:	c8 0e       	add	r12, r24
   1185a:	d9 1e       	adc	r13, r25
   1185c:	ea 1e       	adc	r14, r26
   1185e:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   11860:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   11864:	0b 89       	ldd	r16, Y+19	; 0x13
   11866:	1c 89       	ldd	r17, Y+20	; 0x14
   11868:	2d 89       	ldd	r18, Y+21	; 0x15
   1186a:	3e 89       	ldd	r19, Y+22	; 0x16
   1186c:	60 1b       	sub	r22, r16
   1186e:	71 0b       	sbc	r23, r17
   11870:	82 0b       	sbc	r24, r18
   11872:	93 0b       	sbc	r25, r19
   11874:	28 ee       	ldi	r18, 0xE8	; 232
   11876:	33 e0       	ldi	r19, 0x03	; 3
   11878:	40 e0       	ldi	r20, 0x00	; 0
   1187a:	50 e0       	ldi	r21, 0x00	; 0
   1187c:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
   11880:	ca 01       	movw	r24, r20
   11882:	b9 01       	movw	r22, r18
   11884:	6c 0d       	add	r22, r12
   11886:	7d 1d       	adc	r23, r13
   11888:	8e 1d       	adc	r24, r14
   1188a:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   1188c:	df 91       	pop	r29
   1188e:	cf 91       	pop	r28
   11890:	1f 91       	pop	r17
   11892:	0f 91       	pop	r16
   11894:	ff 90       	pop	r15
   11896:	ef 90       	pop	r14
   11898:	df 90       	pop	r13
   1189a:	cf 90       	pop	r12
   1189c:	08 95       	ret

0001189e <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   1189e:	cf 93       	push	r28
   118a0:	df 93       	push	r29
   118a2:	00 d0       	rcall	.+0      	; 0x118a4 <NTPClient::getYear() const+0x6>
   118a4:	1f 92       	push	r1
   118a6:	cd b7       	in	r28, 0x3d	; 61
   118a8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   118aa:	0e 94 1b 8c 	call	0x11836	; 0x11836 <NTPClient::getEpochTime() const>
   118ae:	69 83       	std	Y+1, r22	; 0x01
   118b0:	7a 83       	std	Y+2, r23	; 0x02
   118b2:	8b 83       	std	Y+3, r24	; 0x03
   118b4:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   118b6:	ce 01       	movw	r24, r28
   118b8:	01 96       	adiw	r24, 0x01	; 1
   118ba:	0e 94 0d 99 	call	0x1321a	; 0x1321a <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   118be:	fc 01       	movw	r30, r24
   118c0:	86 81       	ldd	r24, Z+6	; 0x06
   118c2:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   118c4:	84 59       	subi	r24, 0x94	; 148
   118c6:	98 4f       	sbci	r25, 0xF8	; 248
   118c8:	0f 90       	pop	r0
   118ca:	0f 90       	pop	r0
   118cc:	0f 90       	pop	r0
   118ce:	0f 90       	pop	r0
   118d0:	df 91       	pop	r29
   118d2:	cf 91       	pop	r28
   118d4:	08 95       	ret

000118d6 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   118d6:	cf 93       	push	r28
   118d8:	df 93       	push	r29
   118da:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   118dc:	89 e3       	ldi	r24, 0x39	; 57
   118de:	95 e0       	ldi	r25, 0x05	; 5
   118e0:	9e 83       	std	Y+6, r25	; 0x06
   118e2:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   118e4:	88 81       	ld	r24, Y
   118e6:	99 81       	ldd	r25, Y+1	; 0x01
   118e8:	dc 01       	movw	r26, r24
   118ea:	ed 91       	ld	r30, X+
   118ec:	fc 91       	ld	r31, X
   118ee:	06 84       	ldd	r0, Z+14	; 0x0e
   118f0:	f7 85       	ldd	r31, Z+15	; 0x0f
   118f2:	e0 2d       	mov	r30, r0
   118f4:	69 e3       	ldi	r22, 0x39	; 57
   118f6:	75 e0       	ldi	r23, 0x05	; 5
   118f8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   118fa:	81 e0       	ldi	r24, 0x01	; 1
   118fc:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   118fe:	df 91       	pop	r29
   11900:	cf 91       	pop	r28
   11902:	08 95       	ret

00011904 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   11904:	cf 92       	push	r12
   11906:	df 92       	push	r13
   11908:	ef 92       	push	r14
   1190a:	ff 92       	push	r15
   1190c:	0f 93       	push	r16
   1190e:	1f 93       	push	r17
   11910:	cf 93       	push	r28
   11912:	df 93       	push	r29
   11914:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   11916:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   1191a:	0b 89       	ldd	r16, Y+19	; 0x13
   1191c:	1c 89       	ldd	r17, Y+20	; 0x14
   1191e:	2d 89       	ldd	r18, Y+21	; 0x15
   11920:	3e 89       	ldd	r19, Y+22	; 0x16
   11922:	60 1b       	sub	r22, r16
   11924:	71 0b       	sbc	r23, r17
   11926:	82 0b       	sbc	r24, r18
   11928:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   1192a:	cb 84       	ldd	r12, Y+11	; 0x0b
   1192c:	dc 84       	ldd	r13, Y+12	; 0x0c
   1192e:	ed 84       	ldd	r14, Y+13	; 0x0d
   11930:	fe 84       	ldd	r15, Y+14	; 0x0e
   11932:	6c 15       	cp	r22, r12
   11934:	7d 05       	cpc	r23, r13
   11936:	8e 05       	cpc	r24, r14
   11938:	9f 05       	cpc	r25, r15
   1193a:	28 f4       	brcc	.+10     	; 0x11946 <NTPClient::update()+0x42>
   1193c:	01 2b       	or	r16, r17
   1193e:	02 2b       	or	r16, r18
   11940:	03 2b       	or	r16, r19
   11942:	09 f0       	breq	.+2      	; 0x11946 <NTPClient::update()+0x42>
   11944:	9e c0       	rjmp	.+316    	; 0x11a82 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   11946:	8a 81       	ldd	r24, Y+2	; 0x02
   11948:	81 11       	cpse	r24, r1
   1194a:	03 c0       	rjmp	.+6      	; 0x11952 <NTPClient::update()+0x4e>
   1194c:	ce 01       	movw	r24, r28
   1194e:	0e 94 6b 8c 	call	0x118d6	; 0x118d6 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   11952:	7e 01       	movw	r14, r28
   11954:	87 e1       	ldi	r24, 0x17	; 23
   11956:	e8 0e       	add	r14, r24
   11958:	f1 1c       	adc	r15, r1
   1195a:	8c e2       	ldi	r24, 0x2C	; 44
   1195c:	fe 01       	movw	r30, r28
   1195e:	7b 96       	adiw	r30, 0x1b	; 27
   11960:	df 01       	movw	r26, r30
   11962:	1d 92       	st	X+, r1
   11964:	8a 95       	dec	r24
   11966:	e9 f7       	brne	.-6      	; 0x11962 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   11968:	83 ee       	ldi	r24, 0xE3	; 227
   1196a:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   1196c:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   1196e:	86 e0       	ldi	r24, 0x06	; 6
   11970:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   11972:	8c ee       	ldi	r24, 0xEC	; 236
   11974:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   11976:	81 e3       	ldi	r24, 0x31	; 49
   11978:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   1197a:	9e e4       	ldi	r25, 0x4E	; 78
   1197c:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   1197e:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   11980:	84 e3       	ldi	r24, 0x34	; 52
   11982:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   11984:	88 81       	ld	r24, Y
   11986:	99 81       	ldd	r25, Y+1	; 0x01
   11988:	6b 81       	ldd	r22, Y+3	; 0x03
   1198a:	7c 81       	ldd	r23, Y+4	; 0x04
   1198c:	dc 01       	movw	r26, r24
   1198e:	ed 91       	ld	r30, X+
   11990:	fc 91       	ld	r31, X
   11992:	06 88       	ldd	r0, Z+22	; 0x16
   11994:	f7 89       	ldd	r31, Z+23	; 0x17
   11996:	e0 2d       	mov	r30, r0
   11998:	4b e7       	ldi	r20, 0x7B	; 123
   1199a:	50 e0       	ldi	r21, 0x00	; 0
   1199c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   1199e:	88 81       	ld	r24, Y
   119a0:	99 81       	ldd	r25, Y+1	; 0x01
   119a2:	dc 01       	movw	r26, r24
   119a4:	ed 91       	ld	r30, X+
   119a6:	fc 91       	ld	r31, X
   119a8:	02 80       	ldd	r0, Z+2	; 0x02
   119aa:	f3 81       	ldd	r31, Z+3	; 0x03
   119ac:	e0 2d       	mov	r30, r0
   119ae:	40 e3       	ldi	r20, 0x30	; 48
   119b0:	50 e0       	ldi	r21, 0x00	; 0
   119b2:	b7 01       	movw	r22, r14
   119b4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   119b6:	88 81       	ld	r24, Y
   119b8:	99 81       	ldd	r25, Y+1	; 0x01
   119ba:	dc 01       	movw	r26, r24
   119bc:	ed 91       	ld	r30, X+
   119be:	fc 91       	ld	r31, X
   119c0:	00 8c       	ldd	r0, Z+24	; 0x18
   119c2:	f1 8d       	ldd	r31, Z+25	; 0x19
   119c4:	e0 2d       	mov	r30, r0
   119c6:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   119c8:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   119ca:	6a e0       	ldi	r22, 0x0A	; 10
   119cc:	70 e0       	ldi	r23, 0x00	; 0
   119ce:	80 e0       	ldi	r24, 0x00	; 0
   119d0:	90 e0       	ldi	r25, 0x00	; 0
   119d2:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   119d6:	88 81       	ld	r24, Y
   119d8:	99 81       	ldd	r25, Y+1	; 0x01
   119da:	dc 01       	movw	r26, r24
   119dc:	ed 91       	ld	r30, X+
   119de:	fc 91       	ld	r31, X
   119e0:	02 8c       	ldd	r0, Z+26	; 0x1a
   119e2:	f3 8d       	ldd	r31, Z+27	; 0x1b
   119e4:	e0 2d       	mov	r30, r0
   119e6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   119e8:	15 36       	cpi	r17, 0x65	; 101
   119ea:	09 f4       	brne	.+2      	; 0x119ee <NTPClient::update()+0xea>
   119ec:	54 c0       	rjmp	.+168    	; 0x11a96 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   119ee:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   119f0:	89 2b       	or	r24, r25
   119f2:	59 f3       	breq	.-42     	; 0x119ca <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   119f4:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   119f8:	21 2f       	mov	r18, r17
   119fa:	30 e0       	ldi	r19, 0x00	; 0
   119fc:	a9 01       	movw	r20, r18
   119fe:	4f 5f       	subi	r20, 0xFF	; 255
   11a00:	5f 4f       	sbci	r21, 0xFF	; 255
   11a02:	ea e0       	ldi	r30, 0x0A	; 10
   11a04:	e4 9f       	mul	r30, r20
   11a06:	90 01       	movw	r18, r0
   11a08:	e5 9f       	mul	r30, r21
   11a0a:	30 0d       	add	r19, r0
   11a0c:	11 24       	eor	r1, r1
   11a0e:	89 01       	movw	r16, r18
   11a10:	33 0f       	add	r19, r19
   11a12:	22 0b       	sbc	r18, r18
   11a14:	33 0b       	sbc	r19, r19
   11a16:	ab 01       	movw	r20, r22
   11a18:	bc 01       	movw	r22, r24
   11a1a:	40 1b       	sub	r20, r16
   11a1c:	51 0b       	sbc	r21, r17
   11a1e:	62 0b       	sbc	r22, r18
   11a20:	73 0b       	sbc	r23, r19
   11a22:	4b 8b       	std	Y+19, r20	; 0x13
   11a24:	5c 8b       	std	Y+20, r21	; 0x14
   11a26:	6d 8b       	std	Y+21, r22	; 0x15
   11a28:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   11a2a:	88 81       	ld	r24, Y
   11a2c:	99 81       	ldd	r25, Y+1	; 0x01
   11a2e:	dc 01       	movw	r26, r24
   11a30:	ed 91       	ld	r30, X+
   11a32:	fc 91       	ld	r31, X
   11a34:	04 8c       	ldd	r0, Z+28	; 0x1c
   11a36:	f5 8d       	ldd	r31, Z+29	; 0x1d
   11a38:	e0 2d       	mov	r30, r0
   11a3a:	40 e3       	ldi	r20, 0x30	; 48
   11a3c:	50 e0       	ldi	r21, 0x00	; 0
   11a3e:	b7 01       	movw	r22, r14
   11a40:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   11a42:	fe 01       	movw	r30, r28
   11a44:	ff 96       	adiw	r30, 0x3f	; 63
   11a46:	80 81       	ld	r24, Z
   11a48:	91 81       	ldd	r25, Z+1	; 0x01
   11a4a:	98 27       	eor	r25, r24
   11a4c:	89 27       	eor	r24, r25
   11a4e:	98 27       	eor	r25, r24
   11a50:	b0 e0       	ldi	r27, 0x00	; 0
   11a52:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11a54:	dc 01       	movw	r26, r24
   11a56:	99 27       	eor	r25, r25
   11a58:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   11a5a:	32 96       	adiw	r30, 0x02	; 2
   11a5c:	40 81       	ld	r20, Z
   11a5e:	51 81       	ldd	r21, Z+1	; 0x01
   11a60:	54 27       	eor	r21, r20
   11a62:	45 27       	eor	r20, r21
   11a64:	54 27       	eor	r21, r20
   11a66:	70 e0       	ldi	r23, 0x00	; 0
   11a68:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11a6a:	84 2b       	or	r24, r20
   11a6c:	95 2b       	or	r25, r21
   11a6e:	a6 2b       	or	r26, r22
   11a70:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   11a72:	80 58       	subi	r24, 0x80	; 128
   11a74:	9e 47       	sbci	r25, 0x7E	; 126
   11a76:	aa 4a       	sbci	r26, 0xAA	; 170
   11a78:	b3 48       	sbci	r27, 0x83	; 131
   11a7a:	8f 87       	std	Y+15, r24	; 0x0f
   11a7c:	98 8b       	std	Y+16, r25	; 0x10
   11a7e:	a9 8b       	std	Y+17, r26	; 0x11
   11a80:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   11a82:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   11a84:	df 91       	pop	r29
   11a86:	cf 91       	pop	r28
   11a88:	1f 91       	pop	r17
   11a8a:	0f 91       	pop	r16
   11a8c:	ff 90       	pop	r15
   11a8e:	ef 90       	pop	r14
   11a90:	df 90       	pop	r13
   11a92:	cf 90       	pop	r12
   11a94:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   11a96:	80 e0       	ldi	r24, 0x00	; 0
   11a98:	f5 cf       	rjmp	.-22     	; 0x11a84 <NTPClient::update()+0x180>

00011a9a <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   11a9a:	1f 92       	push	r1
   11a9c:	0f 92       	push	r0
   11a9e:	0f b6       	in	r0, 0x3f	; 63
   11aa0:	0f 92       	push	r0
   11aa2:	11 24       	eor	r1, r1
   11aa4:	0b b6       	in	r0, 0x3b	; 59
   11aa6:	0f 92       	push	r0
   11aa8:	2f 93       	push	r18
   11aaa:	3f 93       	push	r19
   11aac:	4f 93       	push	r20
   11aae:	5f 93       	push	r21
   11ab0:	6f 93       	push	r22
   11ab2:	7f 93       	push	r23
   11ab4:	8f 93       	push	r24
   11ab6:	9f 93       	push	r25
   11ab8:	af 93       	push	r26
   11aba:	bf 93       	push	r27
   11abc:	ef 93       	push	r30
   11abe:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   11ac0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   11ac4:	88 7f       	andi	r24, 0xF8	; 248
   11ac6:	80 36       	cpi	r24, 0x60	; 96
   11ac8:	09 f4       	brne	.+2      	; 0x11acc <__vector_39+0x32>
   11aca:	4d c0       	rjmp	.+154    	; 0x11b66 <__vector_39+0xcc>
   11acc:	08 f0       	brcs	.+2      	; 0x11ad0 <__vector_39+0x36>
   11ace:	40 c0       	rjmp	.+128    	; 0x11b50 <__vector_39+0xb6>
   11ad0:	88 32       	cpi	r24, 0x28	; 40
   11ad2:	09 f4       	brne	.+2      	; 0x11ad6 <__vector_39+0x3c>
   11ad4:	a9 c0       	rjmp	.+338    	; 0x11c28 <__vector_39+0x18e>
   11ad6:	28 f5       	brcc	.+74     	; 0x11b22 <__vector_39+0x88>
   11ad8:	80 31       	cpi	r24, 0x10	; 16
   11ada:	09 f4       	brne	.+2      	; 0x11ade <__vector_39+0x44>
   11adc:	9d c0       	rjmp	.+314    	; 0x11c18 <__vector_39+0x17e>
   11ade:	c8 f4       	brcc	.+50     	; 0x11b12 <__vector_39+0x78>
   11ae0:	88 23       	and	r24, r24
   11ae2:	09 f4       	brne	.+2      	; 0x11ae6 <__vector_39+0x4c>
   11ae4:	fb c0       	rjmp	.+502    	; 0x11cdc <__vector_39+0x242>
   11ae6:	88 30       	cpi	r24, 0x08	; 8
   11ae8:	09 f4       	brne	.+2      	; 0x11aec <__vector_39+0x52>
   11aea:	96 c0       	rjmp	.+300    	; 0x11c18 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   11aec:	ff 91       	pop	r31
   11aee:	ef 91       	pop	r30
   11af0:	bf 91       	pop	r27
   11af2:	af 91       	pop	r26
   11af4:	9f 91       	pop	r25
   11af6:	8f 91       	pop	r24
   11af8:	7f 91       	pop	r23
   11afa:	6f 91       	pop	r22
   11afc:	5f 91       	pop	r21
   11afe:	4f 91       	pop	r20
   11b00:	3f 91       	pop	r19
   11b02:	2f 91       	pop	r18
   11b04:	0f 90       	pop	r0
   11b06:	0b be       	out	0x3b, r0	; 59
   11b08:	0f 90       	pop	r0
   11b0a:	0f be       	out	0x3f, r0	; 63
   11b0c:	0f 90       	pop	r0
   11b0e:	1f 90       	pop	r1
   11b10:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11b12:	88 31       	cpi	r24, 0x18	; 24
   11b14:	09 f4       	brne	.+2      	; 0x11b18 <__vector_39+0x7e>
   11b16:	88 c0       	rjmp	.+272    	; 0x11c28 <__vector_39+0x18e>
   11b18:	80 32       	cpi	r24, 0x20	; 32
   11b1a:	41 f7       	brne	.-48     	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   11b1c:	80 93 49 11 	sts	0x1149, r24	; 0x801149 <twi_error>
   11b20:	14 c0       	rjmp	.+40     	; 0x11b4a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11b22:	80 34       	cpi	r24, 0x40	; 64
   11b24:	09 f4       	brne	.+2      	; 0x11b28 <__vector_39+0x8e>
   11b26:	9d c0       	rjmp	.+314    	; 0x11c62 <__vector_39+0x1c8>
   11b28:	40 f4       	brcc	.+16     	; 0x11b3a <__vector_39+0xa0>
   11b2a:	80 33       	cpi	r24, 0x30	; 48
   11b2c:	b9 f3       	breq	.-18     	; 0x11b1c <__vector_39+0x82>
   11b2e:	88 33       	cpi	r24, 0x38	; 56
   11b30:	e9 f6       	brne	.-70     	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   11b32:	80 93 49 11 	sts	0x1149, r24	; 0x801149 <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   11b36:	85 ec       	ldi	r24, 0xC5	; 197
   11b38:	b0 c0       	rjmp	.+352    	; 0x11c9a <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11b3a:	80 35       	cpi	r24, 0x50	; 80
   11b3c:	09 f4       	brne	.+2      	; 0x11b40 <__vector_39+0xa6>
   11b3e:	85 c0       	rjmp	.+266    	; 0x11c4a <__vector_39+0x1b0>
   11b40:	88 35       	cpi	r24, 0x58	; 88
   11b42:	09 f4       	brne	.+2      	; 0x11b46 <__vector_39+0xac>
   11b44:	96 c0       	rjmp	.+300    	; 0x11c72 <__vector_39+0x1d8>
   11b46:	88 34       	cpi	r24, 0x48	; 72
   11b48:	89 f6       	brne	.-94     	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   11b4a:	0e 94 8a 7d 	call	0xfb14	; 0xfb14 <twi_stop>
   11b4e:	ce cf       	rjmp	.-100    	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11b50:	88 39       	cpi	r24, 0x98	; 152
   11b52:	09 f4       	brne	.+2      	; 0x11b56 <__vector_39+0xbc>
   11b54:	8c c0       	rjmp	.+280    	; 0x11c6e <__vector_39+0x1d4>
   11b56:	38 f5       	brcc	.+78     	; 0x11ba6 <__vector_39+0x10c>
   11b58:	88 37       	cpi	r24, 0x78	; 120
   11b5a:	29 f0       	breq	.+10     	; 0x11b66 <__vector_39+0xcc>
   11b5c:	50 f4       	brcc	.+20     	; 0x11b72 <__vector_39+0xd8>
   11b5e:	88 36       	cpi	r24, 0x68	; 104
   11b60:	11 f0       	breq	.+4      	; 0x11b66 <__vector_39+0xcc>
   11b62:	80 37       	cpi	r24, 0x70	; 112
   11b64:	19 f6       	brne	.-122    	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   11b66:	83 e0       	ldi	r24, 0x03	; 3
   11b68:	80 93 4b 11 	sts	0x114B, r24	; 0x80114b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   11b6c:	10 92 d6 10 	sts	0x10D6, r1	; 0x8010d6 <twi_rxBufferIndex>
   11b70:	57 c0       	rjmp	.+174    	; 0x11c20 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11b72:	88 38       	cpi	r24, 0x88	; 136
   11b74:	09 f4       	brne	.+2      	; 0x11b78 <__vector_39+0xde>
   11b76:	7b c0       	rjmp	.+246    	; 0x11c6e <__vector_39+0x1d4>
   11b78:	80 39       	cpi	r24, 0x90	; 144
   11b7a:	19 f0       	breq	.+6      	; 0x11b82 <__vector_39+0xe8>
   11b7c:	80 38       	cpi	r24, 0x80	; 128
   11b7e:	09 f0       	breq	.+2      	; 0x11b82 <__vector_39+0xe8>
   11b80:	b5 cf       	rjmp	.-150    	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   11b82:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <twi_rxBufferIndex>
   11b86:	80 32       	cpi	r24, 0x20	; 32
   11b88:	08 f0       	brcs	.+2      	; 0x11b8c <__vector_39+0xf2>
   11b8a:	71 c0       	rjmp	.+226    	; 0x11c6e <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   11b8c:	e0 91 d6 10 	lds	r30, 0x10D6	; 0x8010d6 <twi_rxBufferIndex>
   11b90:	81 e0       	ldi	r24, 0x01	; 1
   11b92:	8e 0f       	add	r24, r30
   11b94:	80 93 d6 10 	sts	0x10D6, r24	; 0x8010d6 <twi_rxBufferIndex>
   11b98:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   11b9c:	f0 e0       	ldi	r31, 0x00	; 0
   11b9e:	ea 54       	subi	r30, 0x4A	; 74
   11ba0:	ff 4e       	sbci	r31, 0xEF	; 239
   11ba2:	80 83       	st	Z, r24
   11ba4:	3d c0       	rjmp	.+122    	; 0x11c20 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11ba6:	80 3b       	cpi	r24, 0xB0	; 176
   11ba8:	39 f0       	breq	.+14     	; 0x11bb8 <__vector_39+0x11e>
   11baa:	e0 f4       	brcc	.+56     	; 0x11be4 <__vector_39+0x14a>
   11bac:	80 3a       	cpi	r24, 0xA0	; 160
   11bae:	09 f4       	brne	.+2      	; 0x11bb2 <__vector_39+0x118>
   11bb0:	79 c0       	rjmp	.+242    	; 0x11ca4 <__vector_39+0x20a>
   11bb2:	88 3a       	cpi	r24, 0xA8	; 168
   11bb4:	09 f0       	breq	.+2      	; 0x11bb8 <__vector_39+0x11e>
   11bb6:	9a cf       	rjmp	.-204    	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   11bb8:	84 e0       	ldi	r24, 0x04	; 4
   11bba:	80 93 4b 11 	sts	0x114B, r24	; 0x80114b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   11bbe:	10 92 b5 10 	sts	0x10B5, r1	; 0x8010b5 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   11bc2:	10 92 b4 10 	sts	0x10B4, r1	; 0x8010b4 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   11bc6:	e0 91 fc 10 	lds	r30, 0x10FC	; 0x8010fc <twi_onSlaveTransmit>
   11bca:	f0 91 fd 10 	lds	r31, 0x10FD	; 0x8010fd <twi_onSlaveTransmit+0x1>
   11bce:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   11bd0:	80 91 b4 10 	lds	r24, 0x10B4	; 0x8010b4 <twi_txBufferLength>
   11bd4:	81 11       	cpse	r24, r1
   11bd6:	0f c0       	rjmp	.+30     	; 0x11bf6 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   11bd8:	81 e0       	ldi	r24, 0x01	; 1
   11bda:	80 93 b4 10 	sts	0x10B4, r24	; 0x8010b4 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   11bde:	10 92 94 10 	sts	0x1094, r1	; 0x801094 <twi_txBuffer>
   11be2:	09 c0       	rjmp	.+18     	; 0x11bf6 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   11be4:	80 3c       	cpi	r24, 0xC0	; 192
   11be6:	09 f4       	brne	.+2      	; 0x11bea <__vector_39+0x150>
   11be8:	a6 cf       	rjmp	.-180    	; 0x11b36 <__vector_39+0x9c>
   11bea:	88 3c       	cpi	r24, 0xC8	; 200
   11bec:	09 f4       	brne	.+2      	; 0x11bf0 <__vector_39+0x156>
   11bee:	a3 cf       	rjmp	.-186    	; 0x11b36 <__vector_39+0x9c>
   11bf0:	88 3b       	cpi	r24, 0xB8	; 184
   11bf2:	09 f0       	breq	.+2      	; 0x11bf6 <__vector_39+0x15c>
   11bf4:	7b cf       	rjmp	.-266    	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   11bf6:	e0 91 b5 10 	lds	r30, 0x10B5	; 0x8010b5 <twi_txBufferIndex>
   11bfa:	81 e0       	ldi	r24, 0x01	; 1
   11bfc:	8e 0f       	add	r24, r30
   11bfe:	80 93 b5 10 	sts	0x10B5, r24	; 0x8010b5 <twi_txBufferIndex>
   11c02:	f0 e0       	ldi	r31, 0x00	; 0
   11c04:	ec 56       	subi	r30, 0x6C	; 108
   11c06:	ff 4e       	sbci	r31, 0xEF	; 239
   11c08:	80 81       	ld	r24, Z
   11c0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   11c0e:	90 91 b5 10 	lds	r25, 0x10B5	; 0x8010b5 <twi_txBufferIndex>
   11c12:	80 91 b4 10 	lds	r24, 0x10B4	; 0x8010b4 <twi_txBufferLength>
   11c16:	29 c0       	rjmp	.+82     	; 0x11c6a <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   11c18:	80 91 46 11 	lds	r24, 0x1146	; 0x801146 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   11c1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   11c20:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   11c22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   11c26:	62 cf       	rjmp	.-316    	; 0x11aec <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   11c28:	90 91 48 11 	lds	r25, 0x1148	; 0x801148 <twi_masterBufferIndex>
   11c2c:	80 91 47 11 	lds	r24, 0x1147	; 0x801147 <twi_masterBufferLength>
   11c30:	98 17       	cp	r25, r24
   11c32:	58 f5       	brcc	.+86     	; 0x11c8a <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   11c34:	e0 91 48 11 	lds	r30, 0x1148	; 0x801148 <twi_masterBufferIndex>
   11c38:	81 e0       	ldi	r24, 0x01	; 1
   11c3a:	8e 0f       	add	r24, r30
   11c3c:	80 93 48 11 	sts	0x1148, r24	; 0x801148 <twi_masterBufferIndex>
   11c40:	f0 e0       	ldi	r31, 0x00	; 0
   11c42:	eb 5d       	subi	r30, 0xDB	; 219
   11c44:	fe 4e       	sbci	r31, 0xEE	; 238
   11c46:	80 81       	ld	r24, Z
   11c48:	e9 cf       	rjmp	.-46     	; 0x11c1c <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   11c4a:	e0 91 48 11 	lds	r30, 0x1148	; 0x801148 <twi_masterBufferIndex>
   11c4e:	81 e0       	ldi	r24, 0x01	; 1
   11c50:	8e 0f       	add	r24, r30
   11c52:	80 93 48 11 	sts	0x1148, r24	; 0x801148 <twi_masterBufferIndex>
   11c56:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   11c5a:	f0 e0       	ldi	r31, 0x00	; 0
   11c5c:	eb 5d       	subi	r30, 0xDB	; 219
   11c5e:	fe 4e       	sbci	r31, 0xEE	; 238
   11c60:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   11c62:	90 91 48 11 	lds	r25, 0x1148	; 0x801148 <twi_masterBufferIndex>
   11c66:	80 91 47 11 	lds	r24, 0x1147	; 0x801147 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   11c6a:	98 17       	cp	r25, r24
   11c6c:	c8 f2       	brcs	.-78     	; 0x11c20 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   11c6e:	85 e8       	ldi	r24, 0x85	; 133
   11c70:	d8 cf       	rjmp	.-80     	; 0x11c22 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   11c72:	e0 91 48 11 	lds	r30, 0x1148	; 0x801148 <twi_masterBufferIndex>
   11c76:	81 e0       	ldi	r24, 0x01	; 1
   11c78:	8e 0f       	add	r24, r30
   11c7a:	80 93 48 11 	sts	0x1148, r24	; 0x801148 <twi_masterBufferIndex>
   11c7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   11c82:	f0 e0       	ldi	r31, 0x00	; 0
   11c84:	eb 5d       	subi	r30, 0xDB	; 219
   11c86:	fe 4e       	sbci	r31, 0xEE	; 238
   11c88:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   11c8a:	80 91 4a 11 	lds	r24, 0x114A	; 0x80114a <twi_sendStop>
   11c8e:	81 11       	cpse	r24, r1
   11c90:	5c cf       	rjmp	.-328    	; 0x11b4a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   11c92:	81 e0       	ldi	r24, 0x01	; 1
   11c94:	80 93 45 11 	sts	0x1145, r24	; 0x801145 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   11c98:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   11c9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   11c9e:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <twi_state>
   11ca2:	24 cf       	rjmp	.-440    	; 0x11aec <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   11ca4:	85 ec       	ldi	r24, 0xC5	; 197
   11ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   11caa:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   11cae:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <twi_rxBufferIndex>
   11cb2:	80 32       	cpi	r24, 0x20	; 32
   11cb4:	30 f4       	brcc	.+12     	; 0x11cc2 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   11cb6:	e0 91 d6 10 	lds	r30, 0x10D6	; 0x8010d6 <twi_rxBufferIndex>
   11cba:	f0 e0       	ldi	r31, 0x00	; 0
   11cbc:	ea 54       	subi	r30, 0x4A	; 74
   11cbe:	ff 4e       	sbci	r31, 0xEF	; 239
   11cc0:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   11cc2:	60 91 d6 10 	lds	r22, 0x10D6	; 0x8010d6 <twi_rxBufferIndex>
   11cc6:	70 e0       	ldi	r23, 0x00	; 0
   11cc8:	e0 91 fa 10 	lds	r30, 0x10FA	; 0x8010fa <twi_onSlaveReceive>
   11ccc:	f0 91 fb 10 	lds	r31, 0x10FB	; 0x8010fb <twi_onSlaveReceive+0x1>
   11cd0:	86 eb       	ldi	r24, 0xB6	; 182
   11cd2:	90 e1       	ldi	r25, 0x10	; 16
   11cd4:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   11cd6:	10 92 d6 10 	sts	0x10D6, r1	; 0x8010d6 <twi_rxBufferIndex>
   11cda:	08 cf       	rjmp	.-496    	; 0x11aec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   11cdc:	10 92 49 11 	sts	0x1149, r1	; 0x801149 <twi_error>
   11ce0:	34 cf       	rjmp	.-408    	; 0x11b4a <__vector_39+0xb0>

00011ce2 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   11ce2:	20 91 01 11 	lds	r18, 0x1101	; 0x801101 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   11ce6:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   11ce8:	21 32       	cpi	r18, 0x21	; 33
   11cea:	08 f0       	brcs	.+2      	; 0x11cee <TwoWire::endTransmission()+0xc>
   11cec:	44 c0       	rjmp	.+136    	; 0x11d76 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   11cee:	80 91 4b 11 	lds	r24, 0x114B	; 0x80114b <twi_state>
   11cf2:	81 11       	cpse	r24, r1
   11cf4:	fc cf       	rjmp	.-8      	; 0x11cee <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
   11cf6:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   11cfa:	92 e0       	ldi	r25, 0x02	; 2
   11cfc:	90 93 4b 11 	sts	0x114B, r25	; 0x80114b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   11d00:	91 e0       	ldi	r25, 0x01	; 1
   11d02:	90 93 4a 11 	sts	0x114A, r25	; 0x80114a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   11d06:	9f ef       	ldi	r25, 0xFF	; 255
   11d08:	90 93 49 11 	sts	0x1149, r25	; 0x801149 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   11d0c:	10 92 48 11 	sts	0x1148, r1	; 0x801148 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   11d10:	20 93 47 11 	sts	0x1147, r18	; 0x801147 <twi_masterBufferLength>
   11d14:	a4 e7       	ldi	r26, 0x74	; 116
   11d16:	b0 e1       	ldi	r27, 0x10	; 16
   11d18:	e5 e2       	ldi	r30, 0x25	; 37
   11d1a:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   11d1c:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   11d1e:	29 13       	cpse	r18, r25
   11d20:	31 c0       	rjmp	.+98     	; 0x11d84 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   11d22:	10 92 46 11 	sts	0x1146, r1	; 0x801146 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   11d26:	90 91 46 11 	lds	r25, 0x1146	; 0x801146 <twi_slarw>
   11d2a:	88 0f       	add	r24, r24
   11d2c:	89 2b       	or	r24, r25
   11d2e:	80 93 46 11 	sts	0x1146, r24	; 0x801146 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   11d32:	80 91 45 11 	lds	r24, 0x1145	; 0x801145 <twi_inRepStart>
   11d36:	81 30       	cpi	r24, 0x01	; 1
   11d38:	49 f5       	brne	.+82     	; 0x11d8c <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   11d3a:	10 92 45 11 	sts	0x1145, r1	; 0x801145 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   11d3e:	80 91 46 11 	lds	r24, 0x1146	; 0x801146 <twi_slarw>
   11d42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   11d46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   11d4a:	83 fd       	sbrc	r24, 3
   11d4c:	f8 cf       	rjmp	.-16     	; 0x11d3e <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   11d4e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   11d50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   11d54:	80 91 4b 11 	lds	r24, 0x114B	; 0x80114b <twi_state>
   11d58:	82 30       	cpi	r24, 0x02	; 2
   11d5a:	e1 f3       	breq	.-8      	; 0x11d54 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   11d5c:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <twi_error>
   11d60:	8f 3f       	cpi	r24, 0xFF	; 255
   11d62:	b1 f0       	breq	.+44     	; 0x11d90 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   11d64:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <twi_error>
   11d68:	80 32       	cpi	r24, 0x20	; 32
   11d6a:	a1 f0       	breq	.+40     	; 0x11d94 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   11d6c:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <twi_error>
   11d70:	80 33       	cpi	r24, 0x30	; 48
   11d72:	91 f0       	breq	.+36     	; 0x11d98 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   11d74:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   11d76:	10 92 02 11 	sts	0x1102, r1	; 0x801102 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   11d7a:	10 92 01 11 	sts	0x1101, r1	; 0x801101 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   11d7e:	10 92 04 11 	sts	0x1104, r1	; 0x801104 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   11d82:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   11d84:	3d 91       	ld	r19, X+
   11d86:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   11d88:	9f 5f       	subi	r25, 0xFF	; 255
   11d8a:	c9 cf       	rjmp	.-110    	; 0x11d1e <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   11d8c:	85 ee       	ldi	r24, 0xE5	; 229
   11d8e:	e0 cf       	rjmp	.-64     	; 0x11d50 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   11d90:	80 e0       	ldi	r24, 0x00	; 0
   11d92:	f1 cf       	rjmp	.-30     	; 0x11d76 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   11d94:	82 e0       	ldi	r24, 0x02	; 2
   11d96:	ef cf       	rjmp	.-34     	; 0x11d76 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   11d98:	83 e0       	ldi	r24, 0x03	; 3
   11d9a:	ed cf       	rjmp	.-38     	; 0x11d76 <TwoWire::endTransmission()+0x94>

00011d9c <RTC_DS1307::isrunning() [clone .constprop.127]>:
_ZN10RTC_DS13079isrunningEv.constprop.127():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   11d9c:	88 e6       	ldi	r24, 0x68	; 104
   11d9e:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   11da2:	60 e0       	ldi	r22, 0x00	; 0
   11da4:	85 e1       	ldi	r24, 0x15	; 21
   11da6:	9e e0       	ldi	r25, 0x0E	; 14
   11da8:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   11dac:	85 e1       	ldi	r24, 0x15	; 21
   11dae:	9e e0       	ldi	r25, 0x0E	; 14
   11db0:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   11db4:	81 e0       	ldi	r24, 0x01	; 1
   11db6:	90 e0       	ldi	r25, 0x00	; 0
   11db8:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   11dbc:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   11dc0:	80 58       	subi	r24, 0x80	; 128
   11dc2:	87 fb       	bst	r24, 7
   11dc4:	88 27       	eor	r24, r24
   11dc6:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   11dc8:	08 95       	ret

00011dca <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   11dca:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   11dce:	80 ef       	ldi	r24, 0xF0	; 240
   11dd0:	90 e0       	ldi	r25, 0x00	; 0
   11dd2:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   11dd6:	85 e1       	ldi	r24, 0x15	; 21
   11dd8:	9e e0       	ldi	r25, 0x0E	; 14
   11dda:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
   11dde:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   11de0:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   11de2:	08 95       	ret

00011de4 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   11de4:	86 2f       	mov	r24, r22
twi_readFrom():
   11de6:	64 2f       	mov	r22, r20
   11de8:	0e 94 e1 7b 	call	0xf7c2	; 0xf7c2 <twi_readFrom.part.0.constprop.169>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   11dec:	10 92 00 11 	sts	0x1100, r1	; 0x801100 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   11df0:	80 93 ff 10 	sts	0x10FF, r24	; 0x8010ff <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   11df4:	08 95       	ret

00011df6 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   11df6:	ff 92       	push	r15
   11df8:	0f 93       	push	r16
   11dfa:	1f 93       	push	r17
   11dfc:	cf 93       	push	r28
   11dfe:	df 93       	push	r29
   11e00:	d8 2f       	mov	r29, r24
   11e02:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   11e04:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   11e08:	86 e9       	ldi	r24, 0x96	; 150
   11e0a:	90 e0       	ldi	r25, 0x00	; 0
   11e0c:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   11e10:	85 e1       	ldi	r24, 0x15	; 21
   11e12:	9e e0       	ldi	r25, 0x0E	; 14
   11e14:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
   11e18:	ce ef       	ldi	r28, 0xFE	; 254
   11e1a:	88 23       	and	r24, r24
   11e1c:	41 f0       	breq	.+16     	; 0x11e2e <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   11e1e:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   11e20:	8c 2f       	mov	r24, r28
   11e22:	df 91       	pop	r29
   11e24:	cf 91       	pop	r28
   11e26:	1f 91       	pop	r17
   11e28:	0f 91       	pop	r16
   11e2a:	ff 90       	pop	r15
   11e2c:	08 95       	ret
   11e2e:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   11e30:	e1 f1       	breq	.+120    	; 0x11eaa <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   11e32:	41 e0       	ldi	r20, 0x01	; 1
   11e34:	6d 2f       	mov	r22, r29
   11e36:	85 e1       	ldi	r24, 0x15	; 21
   11e38:	9e e0       	ldi	r25, 0x0E	; 14
   11e3a:	0e 94 f2 8e 	call	0x11de4	; 0x11de4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   11e3e:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
   11e42:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
   11e46:	89 1b       	sub	r24, r25
   11e48:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   11e4a:	18 16       	cp	r1, r24
   11e4c:	19 06       	cpc	r1, r25
   11e4e:	1c f4       	brge	.+6      	; 0x11e56 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   11e50:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
   11e54:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   11e56:	f0 fc       	sbrc	r15, 0
   11e58:	ea cf       	rjmp	.-44     	; 0x11e2e <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   11e5a:	8d 2f       	mov	r24, r29
   11e5c:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   11e60:	81 ee       	ldi	r24, 0xE1	; 225
   11e62:	90 e0       	ldi	r25, 0x00	; 0
   11e64:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   11e68:	61 ee       	ldi	r22, 0xE1	; 225
   11e6a:	85 e1       	ldi	r24, 0x15	; 21
   11e6c:	9e e0       	ldi	r25, 0x0E	; 14
   11e6e:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   11e72:	85 e1       	ldi	r24, 0x15	; 21
   11e74:	9e e0       	ldi	r25, 0x0E	; 14
   11e76:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
   11e7a:	c8 2f       	mov	r28, r24
   11e7c:	81 11       	cpse	r24, r1
   11e7e:	cf cf       	rjmp	.-98     	; 0x11e1e <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   11e80:	41 e0       	ldi	r20, 0x01	; 1
   11e82:	6d 2f       	mov	r22, r29
   11e84:	85 e1       	ldi	r24, 0x15	; 21
   11e86:	9e e0       	ldi	r25, 0x0E	; 14
   11e88:	0e 94 f2 8e 	call	0x11de4	; 0x11de4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   11e8c:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
   11e90:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
   11e94:	89 1b       	sub	r24, r25
   11e96:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   11e98:	18 16       	cp	r1, r24
   11e9a:	19 06       	cpc	r1, r25
   11e9c:	0c f0       	brlt	.+2      	; 0x11ea0 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   11e9e:	c0 cf       	rjmp	.-128    	; 0x11e20 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   11ea0:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
   11ea4:	f8 01       	movw	r30, r16
   11ea6:	80 83       	st	Z, r24
   11ea8:	bb cf       	rjmp	.-138    	; 0x11e20 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   11eaa:	c4 e0       	ldi	r28, 0x04	; 4
   11eac:	b9 cf       	rjmp	.-142    	; 0x11e20 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

00011eae <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   11eae:	0f 93       	push	r16
   11eb0:	1f 93       	push	r17
   11eb2:	cf 93       	push	r28
   11eb4:	df 93       	push	r29
   11eb6:	08 2f       	mov	r16, r24
   11eb8:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   11eba:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   11ebe:	85 ea       	ldi	r24, 0xA5	; 165
   11ec0:	90 e0       	ldi	r25, 0x00	; 0
   11ec2:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   11ec6:	6d 2f       	mov	r22, r29
   11ec8:	85 e1       	ldi	r24, 0x15	; 21
   11eca:	9e e0       	ldi	r25, 0x0E	; 14
   11ecc:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   11ed0:	85 e1       	ldi	r24, 0x15	; 21
   11ed2:	9e e0       	ldi	r25, 0x0E	; 14
   11ed4:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
   11ed8:	c8 2f       	mov	r28, r24
   11eda:	81 11       	cpse	r24, r1
   11edc:	1d c0       	rjmp	.+58     	; 0x11f18 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   11ede:	1e ef       	ldi	r17, 0xFE	; 254
   11ee0:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   11ee2:	e1 f0       	breq	.+56     	; 0x11f1c <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   11ee4:	41 e0       	ldi	r20, 0x01	; 1
   11ee6:	60 2f       	mov	r22, r16
   11ee8:	85 e1       	ldi	r24, 0x15	; 21
   11eea:	9e e0       	ldi	r25, 0x0E	; 14
   11eec:	0e 94 f2 8e 	call	0x11de4	; 0x11de4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   11ef0:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
   11ef4:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
   11ef8:	89 1b       	sub	r24, r25
   11efa:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   11efc:	18 16       	cp	r1, r24
   11efe:	19 06       	cpc	r1, r25
   11f00:	1c f4       	brge	.+6      	; 0x11f08 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   11f02:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
   11f06:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   11f08:	d0 fd       	sbrc	r29, 0
   11f0a:	ea cf       	rjmp	.-44     	; 0x11ee0 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   11f0c:	8c 2f       	mov	r24, r28
   11f0e:	df 91       	pop	r29
   11f10:	cf 91       	pop	r28
   11f12:	1f 91       	pop	r17
   11f14:	0f 91       	pop	r16
   11f16:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   11f18:	c3 e0       	ldi	r28, 0x03	; 3
   11f1a:	f8 cf       	rjmp	.-16     	; 0x11f0c <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   11f1c:	c4 e0       	ldi	r28, 0x04	; 4
   11f1e:	f6 cf       	rjmp	.-20     	; 0x11f0c <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

00011f20 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   11f20:	ef 92       	push	r14
   11f22:	ff 92       	push	r15
   11f24:	1f 93       	push	r17
   11f26:	cf 93       	push	r28
   11f28:	df 93       	push	r29
   11f2a:	18 2f       	mov	r17, r24
   11f2c:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   11f2e:	65 e5       	ldi	r22, 0x55	; 85
   11f30:	0e 94 57 8f 	call	0x11eae	; 0x11eae <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   11f34:	81 11       	cpse	r24, r1
   11f36:	0d c0       	rjmp	.+26     	; 0x11f52 <owMatchRom(unsigned char, unsigned char*)+0x32>
   11f38:	e7 01       	movw	r28, r14
   11f3a:	88 e0       	ldi	r24, 0x08	; 8
   11f3c:	e8 0e       	add	r14, r24
   11f3e:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   11f40:	69 91       	ld	r22, Y+
   11f42:	81 2f       	mov	r24, r17
   11f44:	0e 94 57 8f 	call	0x11eae	; 0x11eae <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   11f48:	81 11       	cpse	r24, r1
   11f4a:	03 c0       	rjmp	.+6      	; 0x11f52 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   11f4c:	ec 16       	cp	r14, r28
   11f4e:	fd 06       	cpc	r15, r29
   11f50:	b9 f7       	brne	.-18     	; 0x11f40 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   11f52:	df 91       	pop	r29
   11f54:	cf 91       	pop	r28
   11f56:	1f 91       	pop	r17
   11f58:	ff 90       	pop	r15
   11f5a:	ef 90       	pop	r14
   11f5c:	08 95       	ret

00011f5e <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   11f5e:	0f 93       	push	r16
   11f60:	1f 93       	push	r17
   11f62:	cf 93       	push	r28
   11f64:	df 93       	push	r29
   11f66:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   11f68:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   11f6c:	84 eb       	ldi	r24, 0xB4	; 180
   11f6e:	90 e0       	ldi	r25, 0x00	; 0
   11f70:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   11f74:	85 e1       	ldi	r24, 0x15	; 21
   11f76:	9e e0       	ldi	r25, 0x0E	; 14
   11f78:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
   11f7c:	c8 2f       	mov	r28, r24
   11f7e:	81 11       	cpse	r24, r1
   11f80:	1b c0       	rjmp	.+54     	; 0x11fb8 <ds2482owReset(unsigned char)+0x5a>
   11f82:	de ef       	ldi	r29, 0xFE	; 254
   11f84:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   11f86:	f9 f0       	breq	.+62     	; 0x11fc6 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   11f88:	41 e0       	ldi	r20, 0x01	; 1
   11f8a:	60 2f       	mov	r22, r16
   11f8c:	85 e1       	ldi	r24, 0x15	; 21
   11f8e:	9e e0       	ldi	r25, 0x0E	; 14
   11f90:	0e 94 f2 8e 	call	0x11de4	; 0x11de4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   11f94:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
   11f98:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
   11f9c:	89 1b       	sub	r24, r25
   11f9e:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   11fa0:	18 16       	cp	r1, r24
   11fa2:	19 06       	cpc	r1, r25
   11fa4:	1c f4       	brge	.+6      	; 0x11fac <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   11fa6:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
   11faa:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   11fac:	10 fd       	sbrc	r17, 0
   11fae:	ea cf       	rjmp	.-44     	; 0x11f84 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   11fb0:	11 fd       	sbrc	r17, 1
   11fb2:	03 c0       	rjmp	.+6      	; 0x11fba <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   11fb4:	c5 e0       	ldi	r28, 0x05	; 5
   11fb6:	01 c0       	rjmp	.+2      	; 0x11fba <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   11fb8:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   11fba:	8c 2f       	mov	r24, r28
   11fbc:	df 91       	pop	r29
   11fbe:	cf 91       	pop	r28
   11fc0:	1f 91       	pop	r17
   11fc2:	0f 91       	pop	r16
   11fc4:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   11fc6:	c4 e0       	ldi	r28, 0x04	; 4
   11fc8:	f8 cf       	rjmp	.-16     	; 0x11fba <ds2482owReset(unsigned char)+0x5c>

00011fca <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>:
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   11fca:	df 92       	push	r13
   11fcc:	ef 92       	push	r14
   11fce:	ff 92       	push	r15
   11fd0:	0f 93       	push	r16
   11fd2:	1f 93       	push	r17
   11fd4:	cf 93       	push	r28
   11fd6:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   11fd8:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <lastDevice>
   11fdc:	99 23       	and	r25, r25
   11fde:	51 f0       	breq	.+20     	; 0x11ff4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   11fe0:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   11fe2:	8d 2f       	mov	r24, r29
   11fe4:	df 91       	pop	r29
   11fe6:	cf 91       	pop	r28
   11fe8:	1f 91       	pop	r17
   11fea:	0f 91       	pop	r16
   11fec:	ff 90       	pop	r15
   11fee:	ef 90       	pop	r14
   11ff0:	df 90       	pop	r13
   11ff2:	08 95       	ret
   11ff4:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   11ff6:	0e 94 af 8f 	call	0x11f5e	; 0x11f5e <ds2482owReset(unsigned char)>
   11ffa:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   11ffc:	81 11       	cpse	r24, r1
   11ffe:	f1 cf       	rjmp	.-30     	; 0x11fe2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   12000:	60 ef       	ldi	r22, 0xF0	; 240
   12002:	8f 2d       	mov	r24, r15
   12004:	0e 94 57 8f 	call	0x11eae	; 0x11eae <ds2482owWriteByte(unsigned char, unsigned char)>
   12008:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1200a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1200c:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   1200e:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   12010:	81 11       	cpse	r24, r1
   12012:	e7 cf       	rjmp	.-50     	; 0x11fe2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   12014:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <lastDiscrepancy>
   12018:	08 17       	cp	r16, r24
   1201a:	50 f4       	brcc	.+20     	; 0x12030 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1201c:	ee 2d       	mov	r30, r14
   1201e:	f0 e0       	ldi	r31, 0x00	; 0
   12020:	e8 58       	subi	r30, 0x88	; 136
   12022:	f4 4f       	sbci	r31, 0xF4	; 244
   12024:	80 81       	ld	r24, Z
   12026:	81 23       	and	r24, r17
   12028:	c1 e0       	ldi	r28, 0x01	; 1
   1202a:	29 f4       	brne	.+10     	; 0x12036 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1202c:	c0 e0       	ldi	r28, 0x00	; 0
   1202e:	03 c0       	rjmp	.+6      	; 0x12036 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
   12030:	c1 e0       	ldi	r28, 0x01	; 1
   12032:	80 13       	cpse	r24, r16
   12034:	fb cf       	rjmp	.-10     	; 0x1202c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   12036:	8f 2d       	mov	r24, r15
   12038:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1203c:	88 e7       	ldi	r24, 0x78	; 120
   1203e:	90 e0       	ldi	r25, 0x00	; 0
   12040:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   12044:	90 e0       	ldi	r25, 0x00	; 0
   12046:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   12048:	cc 23       	and	r28, r28
   1204a:	11 f0       	breq	.+4      	; 0x12050 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x86>
_Z11owMatchNexthPh.constprop.97():
   1204c:	80 e8       	ldi	r24, 0x80	; 128
   1204e:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   12050:	0e 94 9e 83 	call	0x1073c	; 0x1073c <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   12054:	85 e1       	ldi	r24, 0x15	; 21
   12056:	9e e0       	ldi	r25, 0x0E	; 14
   12058:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
   1205c:	81 11       	cpse	r24, r1
   1205e:	53 c0       	rjmp	.+166    	; 0x12106 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x13c>
   12060:	6e ef       	ldi	r22, 0xFE	; 254
   12062:	d6 2e       	mov	r13, r22
   12064:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   12066:	dd 20       	and	r13, r13
   12068:	09 f4       	brne	.+2      	; 0x1206c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xa2>
   1206a:	4f c0       	rjmp	.+158    	; 0x1210a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1206c:	41 e0       	ldi	r20, 0x01	; 1
   1206e:	6f 2d       	mov	r22, r15
   12070:	85 e1       	ldi	r24, 0x15	; 21
   12072:	9e e0       	ldi	r25, 0x0E	; 14
   12074:	0e 94 f2 8e 	call	0x11de4	; 0x11de4 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   12078:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <TwoWire::rxBufferLength>
   1207c:	90 91 00 11 	lds	r25, 0x1100	; 0x801100 <TwoWire::rxBufferIndex>
   12080:	89 1b       	sub	r24, r25
   12082:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   12084:	18 16       	cp	r1, r24
   12086:	19 06       	cpc	r1, r25
   12088:	1c f4       	brge	.+6      	; 0x12090 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1208a:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
   1208e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   12090:	c0 fd       	sbrc	r28, 0
   12092:	e8 cf       	rjmp	.-48     	; 0x12064 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x9a>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   12094:	2c 2f       	mov	r18, r28
   12096:	30 e0       	ldi	r19, 0x00	; 0
   12098:	c9 01       	movw	r24, r18
   1209a:	45 e0       	ldi	r20, 0x05	; 5
   1209c:	95 95       	asr	r25
   1209e:	87 95       	ror	r24
   120a0:	4a 95       	dec	r20
   120a2:	e1 f7       	brne	.-8      	; 0x1209c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xd2>
   120a4:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   120a6:	22 0f       	add	r18, r18
   120a8:	23 2f       	mov	r18, r19
   120aa:	22 1f       	adc	r18, r18
   120ac:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   120ae:	83 30       	cpi	r24, 0x03	; 3
   120b0:	99 f0       	breq	.+38     	; 0x120d8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x10e>
   120b2:	ee 2d       	mov	r30, r14
   120b4:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   120b6:	81 11       	cpse	r24, r1
   120b8:	1b c0       	rjmp	.+54     	; 0x120f0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   120ba:	22 23       	and	r18, r18
   120bc:	11 f1       	breq	.+68     	; 0x12102 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   120be:	e8 58       	subi	r30, 0x88	; 136
   120c0:	f4 4f       	sbci	r31, 0xF4	; 244
   120c2:	80 81       	ld	r24, Z
   120c4:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   120c6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   120c8:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   120ca:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   120cc:	11 f4       	brne	.+4      	; 0x120d2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   120ce:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   120d0:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   120d2:	88 e0       	ldi	r24, 0x08	; 8
   120d4:	e8 12       	cpse	r14, r24
   120d6:	9e cf       	rjmp	.-196    	; 0x12014 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   120d8:	01 34       	cpi	r16, 0x41	; 65
   120da:	08 f4       	brcc	.+2      	; 0x120de <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x114>
   120dc:	81 cf       	rjmp	.-254    	; 0x11fe0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   120de:	d0 93 77 0b 	sts	0x0B77, r29	; 0x800b77 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   120e2:	81 e0       	ldi	r24, 0x01	; 1
   120e4:	d1 11       	cpse	r29, r1
   120e6:	80 e0       	ldi	r24, 0x00	; 0
   120e8:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   120ec:	d0 e0       	ldi	r29, 0x00	; 0
   120ee:	79 cf       	rjmp	.-270    	; 0x11fe2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   120f0:	21 11       	cpse	r18, r1
   120f2:	e5 cf       	rjmp	.-54     	; 0x120be <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   120f4:	e8 58       	subi	r30, 0x88	; 136
   120f6:	f4 4f       	sbci	r31, 0xF4	; 244
   120f8:	80 81       	ld	r24, Z
   120fa:	91 2f       	mov	r25, r17
   120fc:	90 95       	com	r25
   120fe:	89 23       	and	r24, r25
   12100:	e2 cf       	rjmp	.-60     	; 0x120c6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   12102:	d0 2f       	mov	r29, r16
   12104:	f7 cf       	rjmp	.-18     	; 0x120f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   12106:	d3 e0       	ldi	r29, 0x03	; 3
   12108:	6c cf       	rjmp	.-296    	; 0x11fe2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1210a:	d4 e0       	ldi	r29, 0x04	; 4
   1210c:	6a cf       	rjmp	.-300    	; 0x11fe2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>

0001210e <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   1210e:	1f 93       	push	r17
   12110:	cf 93       	push	r28
   12112:	df 93       	push	r29
   12114:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   12116:	88 e6       	ldi	r24, 0x68	; 104
   12118:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   1211c:	60 e0       	ldi	r22, 0x00	; 0
   1211e:	85 e1       	ldi	r24, 0x15	; 21
   12120:	9e e0       	ldi	r25, 0x0E	; 14
   12122:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
   12126:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12128:	1a e0       	ldi	r17, 0x0A	; 10
   1212a:	82 2f       	mov	r24, r18
   1212c:	61 2f       	mov	r22, r17
   1212e:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
   12132:	68 2f       	mov	r22, r24
   12134:	66 0f       	add	r22, r22
   12136:	68 0f       	add	r22, r24
   12138:	66 0f       	add	r22, r22
   1213a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   1213c:	85 e1       	ldi	r24, 0x15	; 21
   1213e:	9e e0       	ldi	r25, 0x0E	; 14
   12140:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
   12144:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12146:	82 2f       	mov	r24, r18
   12148:	61 2f       	mov	r22, r17
   1214a:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
   1214e:	68 2f       	mov	r22, r24
   12150:	66 0f       	add	r22, r22
   12152:	68 0f       	add	r22, r24
   12154:	66 0f       	add	r22, r22
   12156:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   12158:	85 e1       	ldi	r24, 0x15	; 21
   1215a:	9e e0       	ldi	r25, 0x0E	; 14
   1215c:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
   12160:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12162:	82 2f       	mov	r24, r18
   12164:	61 2f       	mov	r22, r17
   12166:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
   1216a:	68 2f       	mov	r22, r24
   1216c:	66 0f       	add	r22, r22
   1216e:	68 0f       	add	r22, r24
   12170:	66 0f       	add	r22, r22
   12172:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   12174:	85 e1       	ldi	r24, 0x15	; 21
   12176:	9e e0       	ldi	r25, 0x0E	; 14
   12178:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   1217c:	60 e0       	ldi	r22, 0x00	; 0
   1217e:	85 e1       	ldi	r24, 0x15	; 21
   12180:	9e e0       	ldi	r25, 0x0E	; 14
   12182:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
   12186:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12188:	82 2f       	mov	r24, r18
   1218a:	61 2f       	mov	r22, r17
   1218c:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
   12190:	68 2f       	mov	r22, r24
   12192:	66 0f       	add	r22, r22
   12194:	68 0f       	add	r22, r24
   12196:	66 0f       	add	r22, r22
   12198:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   1219a:	85 e1       	ldi	r24, 0x15	; 21
   1219c:	9e e0       	ldi	r25, 0x0E	; 14
   1219e:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
   121a2:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   121a4:	82 2f       	mov	r24, r18
   121a6:	61 2f       	mov	r22, r17
   121a8:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
   121ac:	68 2f       	mov	r22, r24
   121ae:	66 0f       	add	r22, r22
   121b0:	68 0f       	add	r22, r24
   121b2:	66 0f       	add	r22, r22
   121b4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   121b6:	85 e1       	ldi	r24, 0x15	; 21
   121b8:	9e e0       	ldi	r25, 0x0E	; 14
   121ba:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
   121be:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   121c0:	82 2f       	mov	r24, r18
   121c2:	61 2f       	mov	r22, r17
   121c4:	0e 94 6b b3 	call	0x166d6	; 0x166d6 <__udivmodqi4>
   121c8:	68 2f       	mov	r22, r24
   121ca:	66 0f       	add	r22, r22
   121cc:	68 0f       	add	r22, r24
   121ce:	66 0f       	add	r22, r22
   121d0:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   121d2:	85 e1       	ldi	r24, 0x15	; 21
   121d4:	9e e0       	ldi	r25, 0x0E	; 14
   121d6:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   121da:	85 e1       	ldi	r24, 0x15	; 21
   121dc:	9e e0       	ldi	r25, 0x0E	; 14
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   121de:	df 91       	pop	r29
   121e0:	cf 91       	pop	r28
   121e2:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   121e4:	0c 94 71 8e 	jmp	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>

000121e8 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   121e8:	cf 93       	push	r28
   121ea:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   121ec:	fc 01       	movw	r30, r24
   121ee:	a0 81       	ld	r26, Z
   121f0:	b1 81       	ldd	r27, Z+1	; 0x01
   121f2:	10 97       	sbiw	r26, 0x00	; 0
   121f4:	21 f4       	brne	.+8      	; 0x121fe <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   121f6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   121f8:	df 91       	pop	r29
   121fa:	cf 91       	pop	r28
   121fc:	08 95       	ret
   121fe:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   12200:	ed 91       	ld	r30, X+
   12202:	fc 91       	ld	r31, X
   12204:	11 97       	sbiw	r26, 0x01	; 1
   12206:	06 88       	ldd	r0, Z+22	; 0x16
   12208:	f7 89       	ldd	r31, Z+23	; 0x17
   1220a:	e0 2d       	mov	r30, r0
   1220c:	cd 01       	movw	r24, r26
   1220e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   12210:	81 11       	cpse	r24, r1
   12212:	1e c0       	rjmp	.+60     	; 0x12250 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   12214:	fe 01       	movw	r30, r28
   12216:	e5 5e       	subi	r30, 0xE5	; 229
   12218:	fd 4f       	sbci	r31, 0xFD	; 253
   1221a:	80 81       	ld	r24, Z
   1221c:	91 81       	ldd	r25, Z+1	; 0x01
   1221e:	89 2b       	or	r24, r25
   12220:	51 f7       	brne	.-44     	; 0x121f6 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   12222:	8d ef       	ldi	r24, 0xFD	; 253
   12224:	9f ef       	ldi	r25, 0xFF	; 255
   12226:	91 83       	std	Z+1, r25	; 0x01
   12228:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   1222a:	88 81       	ld	r24, Y
   1222c:	99 81       	ldd	r25, Y+1	; 0x01
   1222e:	dc 01       	movw	r26, r24
   12230:	ed 91       	ld	r30, X+
   12232:	fc 91       	ld	r31, X
   12234:	06 80       	ldd	r0, Z+6	; 0x06
   12236:	f7 81       	ldd	r31, Z+7	; 0x07
   12238:	e0 2d       	mov	r30, r0
   1223a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   1223c:	88 81       	ld	r24, Y
   1223e:	99 81       	ldd	r25, Y+1	; 0x01
   12240:	dc 01       	movw	r26, r24
   12242:	ed 91       	ld	r30, X+
   12244:	fc 91       	ld	r31, X
   12246:	04 88       	ldd	r0, Z+20	; 0x14
   12248:	f5 89       	ldd	r31, Z+21	; 0x15
   1224a:	e0 2d       	mov	r30, r0
   1224c:	19 95       	eicall
   1224e:	d3 cf       	rjmp	.-90     	; 0x121f6 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   12250:	81 e0       	ldi	r24, 0x01	; 1
   12252:	d2 cf       	rjmp	.-92     	; 0x121f8 <PubSubClient::connected()+0x10>

00012254 <PubSubClient::loop() [clone .constprop.106]>:
_ZN12PubSubClient4loopEv.constprop.106():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   12254:	3f 92       	push	r3
   12256:	4f 92       	push	r4
   12258:	5f 92       	push	r5
   1225a:	6f 92       	push	r6
   1225c:	7f 92       	push	r7
   1225e:	8f 92       	push	r8
   12260:	9f 92       	push	r9
   12262:	af 92       	push	r10
   12264:	bf 92       	push	r11
   12266:	cf 92       	push	r12
   12268:	df 92       	push	r13
   1226a:	ef 92       	push	r14
   1226c:	ff 92       	push	r15
   1226e:	0f 93       	push	r16
   12270:	1f 93       	push	r17
   12272:	cf 93       	push	r28
   12274:	df 93       	push	r29
   12276:	1f 92       	push	r1
   12278:	cd b7       	in	r28, 0x3d	; 61
   1227a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1227c:	4d b6       	in	r4, 0x3d	; 61
   1227e:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   12280:	8e e2       	ldi	r24, 0x2E	; 46
   12282:	9e e0       	ldi	r25, 0x0E	; 14
   12284:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
   12288:	98 2e       	mov	r9, r24
   1228a:	88 23       	and	r24, r24
   1228c:	09 f4       	brne	.+2      	; 0x12290 <PubSubClient::loop() [clone .constprop.106]+0x3c>
   1228e:	45 c0       	rjmp	.+138    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   12290:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   12294:	6b 01       	movw	r12, r22
   12296:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   12298:	80 91 36 10 	lds	r24, 0x1036	; 0x801036 <mqtt_client+0x208>
   1229c:	90 91 37 10 	lds	r25, 0x1037	; 0x801037 <mqtt_client+0x209>
   122a0:	a0 91 38 10 	lds	r26, 0x1038	; 0x801038 <mqtt_client+0x20a>
   122a4:	b0 91 39 10 	lds	r27, 0x1039	; 0x801039 <mqtt_client+0x20b>
   122a8:	a7 01       	movw	r20, r14
   122aa:	96 01       	movw	r18, r12
   122ac:	28 1b       	sub	r18, r24
   122ae:	39 0b       	sbc	r19, r25
   122b0:	4a 0b       	sbc	r20, r26
   122b2:	5b 0b       	sbc	r21, r27
   122b4:	da 01       	movw	r26, r20
   122b6:	c9 01       	movw	r24, r18
   122b8:	89 39       	cpi	r24, 0x99	; 153
   122ba:	9a 43       	sbci	r25, 0x3A	; 58
   122bc:	a1 05       	cpc	r26, r1
   122be:	b1 05       	cpc	r27, r1
   122c0:	b0 f4       	brcc	.+44     	; 0x122ee <PubSubClient::loop() [clone .constprop.106]+0x9a>
   122c2:	80 91 32 10 	lds	r24, 0x1032	; 0x801032 <mqtt_client+0x204>
   122c6:	90 91 33 10 	lds	r25, 0x1033	; 0x801033 <mqtt_client+0x205>
   122ca:	a0 91 34 10 	lds	r26, 0x1034	; 0x801034 <mqtt_client+0x206>
   122ce:	b0 91 35 10 	lds	r27, 0x1035	; 0x801035 <mqtt_client+0x207>
   122d2:	a7 01       	movw	r20, r14
   122d4:	96 01       	movw	r18, r12
   122d6:	28 1b       	sub	r18, r24
   122d8:	39 0b       	sbc	r19, r25
   122da:	4a 0b       	sbc	r20, r26
   122dc:	5b 0b       	sbc	r21, r27
   122de:	da 01       	movw	r26, r20
   122e0:	c9 01       	movw	r24, r18
   122e2:	89 39       	cpi	r24, 0x99	; 153
   122e4:	9a 43       	sbci	r25, 0x3A	; 58
   122e6:	a1 05       	cpc	r26, r1
   122e8:	b1 05       	cpc	r27, r1
   122ea:	08 f4       	brcc	.+2      	; 0x122ee <PubSubClient::loop() [clone .constprop.106]+0x9a>
   122ec:	52 c0       	rjmp	.+164    	; 0x12392 <PubSubClient::loop() [clone .constprop.106]+0x13e>
   122ee:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
   122f2:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   122f6:	20 91 3a 10 	lds	r18, 0x103A	; 0x80103a <mqtt_client+0x20c>
   122fa:	22 23       	and	r18, r18
   122fc:	39 f1       	breq	.+78     	; 0x1234c <PubSubClient::loop() [clone .constprop.106]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   122fe:	2c ef       	ldi	r18, 0xFC	; 252
   12300:	3f ef       	ldi	r19, 0xFF	; 255
   12302:	30 93 4a 10 	sts	0x104A, r19	; 0x80104a <mqtt_client+0x21c>
   12306:	20 93 49 10 	sts	0x1049, r18	; 0x801049 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   1230a:	dc 01       	movw	r26, r24
   1230c:	ed 91       	ld	r30, X+
   1230e:	fc 91       	ld	r31, X
   12310:	04 88       	ldd	r0, Z+20	; 0x14
   12312:	f5 89       	ldd	r31, Z+21	; 0x15
   12314:	e0 2d       	mov	r30, r0
   12316:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   12318:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1231a:	89 2d       	mov	r24, r9
   1231c:	0f b6       	in	r0, 0x3f	; 63
   1231e:	f8 94       	cli
   12320:	5e be       	out	0x3e, r5	; 62
   12322:	0f be       	out	0x3f, r0	; 63
   12324:	4d be       	out	0x3d, r4	; 61
   12326:	0f 90       	pop	r0
   12328:	df 91       	pop	r29
   1232a:	cf 91       	pop	r28
   1232c:	1f 91       	pop	r17
   1232e:	0f 91       	pop	r16
   12330:	ff 90       	pop	r15
   12332:	ef 90       	pop	r14
   12334:	df 90       	pop	r13
   12336:	cf 90       	pop	r12
   12338:	bf 90       	pop	r11
   1233a:	af 90       	pop	r10
   1233c:	9f 90       	pop	r9
   1233e:	8f 90       	pop	r8
   12340:	7f 90       	pop	r7
   12342:	6f 90       	pop	r6
   12344:	5f 90       	pop	r5
   12346:	4f 90       	pop	r4
   12348:	3f 90       	pop	r3
   1234a:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   1234c:	20 ec       	ldi	r18, 0xC0	; 192
   1234e:	20 93 30 0e 	sts	0x0E30, r18	; 0x800e30 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   12352:	10 92 31 0e 	sts	0x0E31, r1	; 0x800e31 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   12356:	dc 01       	movw	r26, r24
   12358:	ed 91       	ld	r30, X+
   1235a:	fc 91       	ld	r31, X
   1235c:	02 80       	ldd	r0, Z+2	; 0x02
   1235e:	f3 81       	ldd	r31, Z+3	; 0x03
   12360:	e0 2d       	mov	r30, r0
   12362:	42 e0       	ldi	r20, 0x02	; 2
   12364:	50 e0       	ldi	r21, 0x00	; 0
   12366:	60 e3       	ldi	r22, 0x30	; 48
   12368:	7e e0       	ldi	r23, 0x0E	; 14
   1236a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1236c:	c0 92 32 10 	sts	0x1032, r12	; 0x801032 <mqtt_client+0x204>
   12370:	d0 92 33 10 	sts	0x1033, r13	; 0x801033 <mqtt_client+0x205>
   12374:	e0 92 34 10 	sts	0x1034, r14	; 0x801034 <mqtt_client+0x206>
   12378:	f0 92 35 10 	sts	0x1035, r15	; 0x801035 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1237c:	c0 92 36 10 	sts	0x1036, r12	; 0x801036 <mqtt_client+0x208>
   12380:	d0 92 37 10 	sts	0x1037, r13	; 0x801037 <mqtt_client+0x209>
   12384:	e0 92 38 10 	sts	0x1038, r14	; 0x801038 <mqtt_client+0x20a>
   12388:	f0 92 39 10 	sts	0x1039, r15	; 0x801039 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1238c:	81 e0       	ldi	r24, 0x01	; 1
   1238e:	80 93 3a 10 	sts	0x103A, r24	; 0x80103a <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   12392:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
   12396:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
   1239a:	dc 01       	movw	r26, r24
   1239c:	ed 91       	ld	r30, X+
   1239e:	fc 91       	ld	r31, X
   123a0:	00 84       	ldd	r0, Z+8	; 0x08
   123a2:	f1 85       	ldd	r31, Z+9	; 0x09
   123a4:	e0 2d       	mov	r30, r0
   123a6:	19 95       	eicall
   123a8:	89 2b       	or	r24, r25
   123aa:	09 f4       	brne	.+2      	; 0x123ae <PubSubClient::loop() [clone .constprop.106]+0x15a>
   123ac:	b6 cf       	rjmp	.-148    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   123ae:	ce 01       	movw	r24, r28
   123b0:	01 96       	adiw	r24, 0x01	; 1
   123b2:	0e 94 42 8a 	call	0x11484	; 0x11484 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
   123b6:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   123b8:	89 2b       	or	r24, r25
   123ba:	09 f4       	brne	.+2      	; 0x123be <PubSubClient::loop() [clone .constprop.106]+0x16a>
   123bc:	ae cf       	rjmp	.-164    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   123be:	c0 92 36 10 	sts	0x1036, r12	; 0x801036 <mqtt_client+0x208>
   123c2:	d0 92 37 10 	sts	0x1037, r13	; 0x801037 <mqtt_client+0x209>
   123c6:	e0 92 38 10 	sts	0x1038, r14	; 0x801038 <mqtt_client+0x20a>
   123ca:	f0 92 39 10 	sts	0x1039, r15	; 0x801039 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   123ce:	80 90 30 0e 	lds	r8, 0x0E30	; 0x800e30 <mqtt_client+0x2>
   123d2:	88 2d       	mov	r24, r8
   123d4:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   123d6:	80 33       	cpi	r24, 0x30	; 48
   123d8:	09 f0       	breq	.+2      	; 0x123dc <PubSubClient::loop() [clone .constprop.106]+0x188>
   123da:	83 c0       	rjmp	.+262    	; 0x124e2 <PubSubClient::loop() [clone .constprop.106]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   123dc:	a0 90 3b 10 	lds	r10, 0x103B	; 0x80103b <mqtt_client+0x20d>
   123e0:	b0 90 3c 10 	lds	r11, 0x103C	; 0x80103c <mqtt_client+0x20e>
   123e4:	a1 14       	cp	r10, r1
   123e6:	b1 04       	cpc	r11, r1
   123e8:	09 f4       	brne	.+2      	; 0x123ec <PubSubClient::loop() [clone .constprop.106]+0x198>
   123ea:	97 cf       	rjmp	.-210    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   123ec:	6d b6       	in	r6, 0x3d	; 61
   123ee:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   123f0:	69 81       	ldd	r22, Y+1	; 0x01
   123f2:	70 e0       	ldi	r23, 0x00	; 0
   123f4:	fb 01       	movw	r30, r22
   123f6:	e2 5d       	subi	r30, 0xD2	; 210
   123f8:	f1 4f       	sbci	r31, 0xF1	; 241
   123fa:	23 81       	ldd	r18, Z+3	; 0x03
   123fc:	30 e0       	ldi	r19, 0x00	; 0
   123fe:	32 2f       	mov	r19, r18
   12400:	22 27       	eor	r18, r18
   12402:	84 81       	ldd	r24, Z+4	; 0x04
   12404:	28 0f       	add	r18, r24
   12406:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   12408:	c9 01       	movw	r24, r18
   1240a:	01 96       	adiw	r24, 0x01	; 1
   1240c:	ed b7       	in	r30, 0x3d	; 61
   1240e:	fe b7       	in	r31, 0x3e	; 62
   12410:	e8 1b       	sub	r30, r24
   12412:	f9 0b       	sbc	r31, r25
   12414:	0f b6       	in	r0, 0x3f	; 63
   12416:	f8 94       	cli
   12418:	fe bf       	out	0x3e, r31	; 62
   1241a:	0f be       	out	0x3f, r0	; 63
   1241c:	ed bf       	out	0x3d, r30	; 61
   1241e:	8d b7       	in	r24, 0x3d	; 61
   12420:	9e b7       	in	r25, 0x3e	; 62
   12422:	01 96       	adiw	r24, 0x01	; 1
   12424:	db 01       	movw	r26, r22
   12426:	ad 5c       	subi	r26, 0xCD	; 205
   12428:	b1 4f       	sbci	r27, 0xF1	; 241
   1242a:	fc 01       	movw	r30, r24
   1242c:	8c 01       	movw	r16, r24
   1242e:	02 0f       	add	r16, r18
   12430:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   12432:	e0 17       	cp	r30, r16
   12434:	f1 07       	cpc	r31, r17
   12436:	19 f0       	breq	.+6      	; 0x1243e <PubSubClient::loop() [clone .constprop.106]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   12438:	3d 90       	ld	r3, X+
   1243a:	31 92       	st	Z+, r3
   1243c:	fa cf       	rjmp	.-12     	; 0x12432 <PubSubClient::loop() [clone .constprop.106]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   1243e:	10 82       	st	Z, r1
   12440:	da 01       	movw	r26, r20
   12442:	a6 1b       	sub	r26, r22
   12444:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   12446:	f8 2d       	mov	r31, r8
   12448:	f6 70       	andi	r31, 0x06	; 6
   1244a:	8f 2e       	mov	r8, r31
   1244c:	42 e0       	ldi	r20, 0x02	; 2
   1244e:	f4 13       	cpse	r31, r20
   12450:	3c c0       	rjmp	.+120    	; 0x124ca <PubSubClient::loop() [clone .constprop.106]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   12452:	62 0f       	add	r22, r18
   12454:	73 1f       	adc	r23, r19
   12456:	fb 01       	movw	r30, r22
   12458:	e2 5d       	subi	r30, 0xD2	; 210
   1245a:	f1 4f       	sbci	r31, 0xF1	; 241
   1245c:	45 81       	ldd	r20, Z+5	; 0x05
   1245e:	50 e0       	ldi	r21, 0x00	; 0
   12460:	54 2f       	mov	r21, r20
   12462:	44 27       	eor	r20, r20
   12464:	06 81       	ldd	r16, Z+6	; 0x06
   12466:	04 0f       	add	r16, r20
   12468:	15 2f       	mov	r17, r21
   1246a:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1246c:	ad 01       	movw	r20, r26
   1246e:	42 1b       	sub	r20, r18
   12470:	53 0b       	sbc	r21, r19
   12472:	45 50       	subi	r20, 0x05	; 5
   12474:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   12476:	6b 5c       	subi	r22, 0xCB	; 203
   12478:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   1247a:	f5 01       	movw	r30, r10
   1247c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   1247e:	80 e4       	ldi	r24, 0x40	; 64
   12480:	80 93 30 0e 	sts	0x0E30, r24	; 0x800e30 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   12484:	80 92 31 0e 	sts	0x0E31, r8	; 0x800e31 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   12488:	10 93 32 0e 	sts	0x0E32, r17	; 0x800e32 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1248c:	00 93 33 0e 	sts	0x0E33, r16	; 0x800e33 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   12490:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
   12494:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
   12498:	dc 01       	movw	r26, r24
   1249a:	ed 91       	ld	r30, X+
   1249c:	fc 91       	ld	r31, X
   1249e:	02 80       	ldd	r0, Z+2	; 0x02
   124a0:	f3 81       	ldd	r31, Z+3	; 0x03
   124a2:	e0 2d       	mov	r30, r0
   124a4:	44 e0       	ldi	r20, 0x04	; 4
   124a6:	50 e0       	ldi	r21, 0x00	; 0
   124a8:	60 e3       	ldi	r22, 0x30	; 48
   124aa:	7e e0       	ldi	r23, 0x0E	; 14
   124ac:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   124ae:	c0 92 32 10 	sts	0x1032, r12	; 0x801032 <mqtt_client+0x204>
   124b2:	d0 92 33 10 	sts	0x1033, r13	; 0x801033 <mqtt_client+0x205>
   124b6:	e0 92 34 10 	sts	0x1034, r14	; 0x801034 <mqtt_client+0x206>
   124ba:	f0 92 35 10 	sts	0x1035, r15	; 0x801035 <mqtt_client+0x207>
   124be:	0f b6       	in	r0, 0x3f	; 63
   124c0:	f8 94       	cli
   124c2:	7e be       	out	0x3e, r7	; 62
   124c4:	0f be       	out	0x3f, r0	; 63
   124c6:	6d be       	out	0x3d, r6	; 61
   124c8:	28 cf       	rjmp	.-432    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   124ca:	ad 01       	movw	r20, r26
   124cc:	42 1b       	sub	r20, r18
   124ce:	53 0b       	sbc	r21, r19
   124d0:	43 50       	subi	r20, 0x03	; 3
   124d2:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   124d4:	62 0f       	add	r22, r18
   124d6:	73 1f       	adc	r23, r19
   124d8:	6d 5c       	subi	r22, 0xCD	; 205
   124da:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   124dc:	f5 01       	movw	r30, r10
   124de:	19 95       	eicall
   124e0:	ee cf       	rjmp	.-36     	; 0x124be <PubSubClient::loop() [clone .constprop.106]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   124e2:	80 3c       	cpi	r24, 0xC0	; 192
   124e4:	a9 f4       	brne	.+42     	; 0x12510 <PubSubClient::loop() [clone .constprop.106]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   124e6:	80 ed       	ldi	r24, 0xD0	; 208
   124e8:	80 93 30 0e 	sts	0x0E30, r24	; 0x800e30 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   124ec:	10 92 31 0e 	sts	0x0E31, r1	; 0x800e31 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   124f0:	80 91 2e 0e 	lds	r24, 0x0E2E	; 0x800e2e <mqtt_client>
   124f4:	90 91 2f 0e 	lds	r25, 0x0E2F	; 0x800e2f <mqtt_client+0x1>
   124f8:	dc 01       	movw	r26, r24
   124fa:	ed 91       	ld	r30, X+
   124fc:	fc 91       	ld	r31, X
   124fe:	02 80       	ldd	r0, Z+2	; 0x02
   12500:	f3 81       	ldd	r31, Z+3	; 0x03
   12502:	e0 2d       	mov	r30, r0
   12504:	42 e0       	ldi	r20, 0x02	; 2
   12506:	50 e0       	ldi	r21, 0x00	; 0
   12508:	60 e3       	ldi	r22, 0x30	; 48
   1250a:	7e e0       	ldi	r23, 0x0E	; 14
   1250c:	19 95       	eicall
   1250e:	05 cf       	rjmp	.-502    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   12510:	80 3d       	cpi	r24, 0xD0	; 208
   12512:	09 f0       	breq	.+2      	; 0x12516 <PubSubClient::loop() [clone .constprop.106]+0x2c2>
   12514:	02 cf       	rjmp	.-508    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   12516:	10 92 3a 10 	sts	0x103A, r1	; 0x80103a <mqtt_client+0x20c>
   1251a:	ff ce       	rjmp	.-514    	; 0x1231a <PubSubClient::loop() [clone .constprop.106]+0xc6>

0001251c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   1251c:	bf 92       	push	r11
   1251e:	cf 92       	push	r12
   12520:	df 92       	push	r13
   12522:	ef 92       	push	r14
   12524:	ff 92       	push	r15
   12526:	0f 93       	push	r16
   12528:	1f 93       	push	r17
   1252a:	cf 93       	push	r28
   1252c:	df 93       	push	r29
   1252e:	00 d0       	rcall	.+0      	; 0x12530 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   12530:	1f 92       	push	r1
   12532:	cd b7       	in	r28, 0x3d	; 61
   12534:	de b7       	in	r29, 0x3e	; 62
   12536:	7c 01       	movw	r14, r24
   12538:	b6 2e       	mov	r11, r22
   1253a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   1253c:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   1253e:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   12540:	be 01       	movw	r22, r28
   12542:	6f 5f       	subi	r22, 0xFF	; 255
   12544:	7f 4f       	sbci	r23, 0xFF	; 255
   12546:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   12548:	28 2f       	mov	r18, r24
   1254a:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   1254c:	88 0f       	add	r24, r24
   1254e:	89 2f       	mov	r24, r25
   12550:	88 1f       	adc	r24, r24
   12552:	99 0b       	sbc	r25, r25
   12554:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   12556:	00 97       	sbiw	r24, 0x00	; 0
   12558:	09 f0       	breq	.+2      	; 0x1255c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   1255a:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   1255c:	f6 01       	movw	r30, r12
   1255e:	e3 0f       	add	r30, r19
   12560:	f1 1d       	adc	r31, r1
   12562:	20 83       	st	Z, r18
   12564:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   12566:	00 97       	sbiw	r24, 0x00	; 0
   12568:	79 f7       	brne	.-34     	; 0x12548 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   1256a:	e3 2f       	mov	r30, r19
   1256c:	f0 e0       	ldi	r31, 0x00	; 0
   1256e:	ba 01       	movw	r22, r20
   12570:	6e 1b       	sub	r22, r30
   12572:	7f 0b       	sbc	r23, r31
   12574:	6c 5f       	subi	r22, 0xFC	; 252
   12576:	7f 4f       	sbci	r23, 0xFF	; 255
   12578:	db 01       	movw	r26, r22
   1257a:	bc 92       	st	X, r11
   1257c:	4e 1b       	sub	r20, r30
   1257e:	5f 0b       	sbc	r21, r31
   12580:	4b 5f       	subi	r20, 0xFB	; 251
   12582:	5f 4f       	sbci	r21, 0xFF	; 255
   12584:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   12586:	9c 01       	movw	r18, r24
   12588:	2c 19       	sub	r18, r12
   1258a:	3d 09       	sbc	r19, r13
   1258c:	2e 17       	cp	r18, r30
   1258e:	3f 07       	cpc	r19, r31
   12590:	3c f4       	brge	.+14     	; 0x125a0 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   12592:	dc 01       	movw	r26, r24
   12594:	2d 91       	ld	r18, X+
   12596:	cd 01       	movw	r24, r26
   12598:	da 01       	movw	r26, r20
   1259a:	2d 93       	st	X+, r18
   1259c:	ad 01       	movw	r20, r26
   1259e:	f3 cf       	rjmp	.-26     	; 0x12586 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   125a0:	d7 01       	movw	r26, r14
   125a2:	8d 91       	ld	r24, X+
   125a4:	9c 91       	ld	r25, X
   125a6:	0f 5f       	subi	r16, 0xFF	; 255
   125a8:	1f 4f       	sbci	r17, 0xFF	; 255
   125aa:	0e 0f       	add	r16, r30
   125ac:	1f 1f       	adc	r17, r31
   125ae:	dc 01       	movw	r26, r24
   125b0:	ed 91       	ld	r30, X+
   125b2:	fc 91       	ld	r31, X
   125b4:	02 80       	ldd	r0, Z+2	; 0x02
   125b6:	f3 81       	ldd	r31, Z+3	; 0x03
   125b8:	e0 2d       	mov	r30, r0
   125ba:	a8 01       	movw	r20, r16
   125bc:	19 95       	eicall
   125be:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   125c0:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   125c4:	f7 01       	movw	r30, r14
   125c6:	ec 5f       	subi	r30, 0xFC	; 252
   125c8:	fd 4f       	sbci	r31, 0xFD	; 253
   125ca:	60 83       	st	Z, r22
   125cc:	71 83       	std	Z+1, r23	; 0x01
   125ce:	82 83       	std	Z+2, r24	; 0x02
   125d0:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   125d2:	81 e0       	ldi	r24, 0x01	; 1
   125d4:	0c 15       	cp	r16, r12
   125d6:	1d 05       	cpc	r17, r13
   125d8:	09 f0       	breq	.+2      	; 0x125dc <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   125da:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   125dc:	0f 90       	pop	r0
   125de:	0f 90       	pop	r0
   125e0:	0f 90       	pop	r0
   125e2:	0f 90       	pop	r0
   125e4:	df 91       	pop	r29
   125e6:	cf 91       	pop	r28
   125e8:	1f 91       	pop	r17
   125ea:	0f 91       	pop	r16
   125ec:	ff 90       	pop	r15
   125ee:	ef 90       	pop	r14
   125f0:	df 90       	pop	r13
   125f2:	cf 90       	pop	r12
   125f4:	bf 90       	pop	r11
   125f6:	08 95       	ret

000125f8 <PubSubClient::subscribe(char const*) [clone .constprop.145]>:
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   125f8:	cf 93       	push	r28
   125fa:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   125fc:	fc 01       	movw	r30, r24
   125fe:	01 90       	ld	r0, Z+
   12600:	00 20       	and	r0, r0
   12602:	e9 f7       	brne	.-6      	; 0x125fe <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x6>
   12604:	9f 01       	movw	r18, r30
   12606:	28 1b       	sub	r18, r24
   12608:	39 0b       	sbc	r19, r25
   1260a:	28 5f       	subi	r18, 0xF8	; 248
   1260c:	3f 4f       	sbci	r19, 0xFF	; 255
   1260e:	21 30       	cpi	r18, 0x01	; 1
   12610:	32 40       	sbci	r19, 0x02	; 2
   12612:	98 f5       	brcc	.+102    	; 0x1267a <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
   12614:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   12616:	8e e2       	ldi	r24, 0x2E	; 46
   12618:	9e e0       	ldi	r25, 0x0E	; 14
   1261a:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
   1261e:	88 23       	and	r24, r24
   12620:	61 f1       	breq	.+88     	; 0x1267a <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   12622:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <mqtt_client+0x202>
   12626:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <mqtt_client+0x203>
   1262a:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   1262c:	19 f1       	breq	.+70     	; 0x12674 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   1262e:	90 93 31 10 	sts	0x1031, r25	; 0x801031 <mqtt_client+0x203>
   12632:	80 93 30 10 	sts	0x1030, r24	; 0x801030 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   12636:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <mqtt_client+0x202>
   1263a:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <mqtt_client+0x203>
   1263e:	90 93 35 0e 	sts	0x0E35, r25	; 0x800e35 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   12642:	80 93 36 0e 	sts	0x0E36, r24	; 0x800e36 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   12646:	47 e0       	ldi	r20, 0x07	; 7
   12648:	50 e0       	ldi	r21, 0x00	; 0
   1264a:	60 e3       	ldi	r22, 0x30	; 48
   1264c:	7e e0       	ldi	r23, 0x0E	; 14
   1264e:	ce 01       	movw	r24, r28
   12650:	0e 94 86 82 	call	0x1050c	; 0x1050c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   12654:	fc 01       	movw	r30, r24
   12656:	e2 5d       	subi	r30, 0xD2	; 210
   12658:	f1 4f       	sbci	r31, 0xF1	; 241
   1265a:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   1265c:	9c 01       	movw	r18, r24
   1265e:	24 50       	subi	r18, 0x04	; 4
   12660:	31 09       	sbc	r19, r1
   12662:	40 e3       	ldi	r20, 0x30	; 48
   12664:	5e e0       	ldi	r21, 0x0E	; 14
   12666:	62 e8       	ldi	r22, 0x82	; 130
   12668:	8e e2       	ldi	r24, 0x2E	; 46
   1266a:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   1266c:	df 91       	pop	r29
   1266e:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   12670:	0c 94 8e 92 	jmp	0x1251c	; 0x1251c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   12674:	81 e0       	ldi	r24, 0x01	; 1
   12676:	90 e0       	ldi	r25, 0x00	; 0
   12678:	da cf       	rjmp	.-76     	; 0x1262e <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   1267a:	80 e0       	ldi	r24, 0x00	; 0
   1267c:	df 91       	pop	r29
   1267e:	cf 91       	pop	r28
   12680:	08 95       	ret

00012682 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   12682:	af 92       	push	r10
   12684:	bf 92       	push	r11
   12686:	cf 92       	push	r12
   12688:	df 92       	push	r13
   1268a:	ef 92       	push	r14
   1268c:	ff 92       	push	r15
   1268e:	0f 93       	push	r16
   12690:	1f 93       	push	r17
   12692:	cf 93       	push	r28
   12694:	df 93       	push	r29
   12696:	7c 01       	movw	r14, r24
   12698:	5b 01       	movw	r10, r22
   1269a:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   1269c:	ea 01       	movw	r28, r20
   1269e:	09 90       	ld	r0, Y+
   126a0:	00 20       	and	r0, r0
   126a2:	e9 f7       	brne	.-6      	; 0x1269e <PubSubClient::publish(char const*, char const*)+0x1c>
   126a4:	21 97       	sbiw	r28, 0x01	; 1
   126a6:	c4 1b       	sub	r28, r20
   126a8:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   126aa:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
   126ae:	88 23       	and	r24, r24
   126b0:	c9 f1       	breq	.+114    	; 0x12724 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   126b2:	f5 01       	movw	r30, r10
   126b4:	01 90       	ld	r0, Z+
   126b6:	00 20       	and	r0, r0
   126b8:	e9 f7       	brne	.-6      	; 0x126b4 <PubSubClient::publish(char const*, char const*)+0x32>
   126ba:	31 97       	sbiw	r30, 0x01	; 1
   126bc:	ea 19       	sub	r30, r10
   126be:	fb 09       	sbc	r31, r11
   126c0:	ce 01       	movw	r24, r28
   126c2:	07 96       	adiw	r24, 0x07	; 7
   126c4:	e8 0f       	add	r30, r24
   126c6:	f9 1f       	adc	r31, r25
   126c8:	e1 30       	cpi	r30, 0x01	; 1
   126ca:	f2 40       	sbci	r31, 0x02	; 2
   126cc:	58 f5       	brcc	.+86     	; 0x12724 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   126ce:	67 01       	movw	r12, r14
   126d0:	82 e0       	ldi	r24, 0x02	; 2
   126d2:	c8 0e       	add	r12, r24
   126d4:	d1 1c       	adc	r13, r1
   126d6:	45 e0       	ldi	r20, 0x05	; 5
   126d8:	50 e0       	ldi	r21, 0x00	; 0
   126da:	b6 01       	movw	r22, r12
   126dc:	c5 01       	movw	r24, r10
   126de:	0e 94 86 82 	call	0x1050c	; 0x1050c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
   126e2:	f8 01       	movw	r30, r16
   126e4:	dc 01       	movw	r26, r24
   126e6:	12 96       	adiw	r26, 0x02	; 2
   126e8:	ae 0d       	add	r26, r14
   126ea:	bf 1d       	adc	r27, r15
   126ec:	a8 01       	movw	r20, r16
   126ee:	4c 0f       	add	r20, r28
   126f0:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   126f2:	e4 17       	cp	r30, r20
   126f4:	f5 07       	cpc	r31, r21
   126f6:	19 f0       	breq	.+6      	; 0x126fe <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   126f8:	21 91       	ld	r18, Z+
   126fa:	2d 93       	st	X+, r18
   126fc:	fa cf       	rjmp	.-12     	; 0x126f2 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   126fe:	25 97       	sbiw	r28, 0x05	; 5
   12700:	9e 01       	movw	r18, r28
   12702:	28 0f       	add	r18, r24
   12704:	39 1f       	adc	r19, r25
   12706:	a6 01       	movw	r20, r12
   12708:	60 e3       	ldi	r22, 0x30	; 48
   1270a:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   1270c:	df 91       	pop	r29
   1270e:	cf 91       	pop	r28
   12710:	1f 91       	pop	r17
   12712:	0f 91       	pop	r16
   12714:	ff 90       	pop	r15
   12716:	ef 90       	pop	r14
   12718:	df 90       	pop	r13
   1271a:	cf 90       	pop	r12
   1271c:	bf 90       	pop	r11
   1271e:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   12720:	0c 94 8e 92 	jmp	0x1251c	; 0x1251c <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   12724:	80 e0       	ldi	r24, 0x00	; 0
   12726:	df 91       	pop	r29
   12728:	cf 91       	pop	r28
   1272a:	1f 91       	pop	r17
   1272c:	0f 91       	pop	r16
   1272e:	ff 90       	pop	r15
   12730:	ef 90       	pop	r14
   12732:	df 90       	pop	r13
   12734:	cf 90       	pop	r12
   12736:	bf 90       	pop	r11
   12738:	af 90       	pop	r10
   1273a:	08 95       	ret

0001273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   1273c:	af 92       	push	r10
   1273e:	bf 92       	push	r11
   12740:	df 92       	push	r13
   12742:	ef 92       	push	r14
   12744:	ff 92       	push	r15
   12746:	0f 93       	push	r16
   12748:	1f 93       	push	r17
   1274a:	cf 93       	push	r28
   1274c:	df 93       	push	r29
   1274e:	cd b7       	in	r28, 0x3d	; 61
   12750:	de b7       	in	r29, 0x3e	; 62
   12752:	c6 55       	subi	r28, 0x56	; 86
   12754:	d1 09       	sbc	r29, r1
   12756:	0f b6       	in	r0, 0x3f	; 63
   12758:	f8 94       	cli
   1275a:	de bf       	out	0x3e, r29	; 62
   1275c:	0f be       	out	0x3f, r0	; 63
   1275e:	cd bf       	out	0x3d, r28	; 61
   12760:	5c 01       	movw	r10, r24
   12762:	d6 2e       	mov	r13, r22
   12764:	7a 01       	movw	r14, r20
   12766:	89 01       	movw	r16, r18
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   12768:	8e e2       	ldi	r24, 0x2E	; 46
   1276a:	9e e0       	ldi	r25, 0x0E	; 14
   1276c:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
   12770:	88 23       	and	r24, r24
   12772:	09 f4       	brne	.+2      	; 0x12776 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0x3a>
   12774:	52 c0       	rjmp	.+164    	; 0x1281a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xde>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   12776:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <mqtt_send_message>
   1277a:	90 91 86 0b 	lds	r25, 0x0B86	; 0x800b86 <mqtt_send_message+0x1>
   1277e:	01 96       	adiw	r24, 0x01	; 1
   12780:	90 93 86 0b 	sts	0x0B86, r25	; 0x800b86 <mqtt_send_message+0x1>
   12784:	80 93 85 0b 	sts	0x0B85, r24	; 0x800b85 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   12788:	ce 01       	movw	r24, r28
   1278a:	83 5b       	subi	r24, 0xB3	; 179
   1278c:	9f 4f       	sbci	r25, 0xFF	; 255
   1278e:	0e 94 ef 57 	call	0xafde	; 0xafde <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   12792:	60 91 83 0b 	lds	r22, 0x0B83	; 0x800b83 <header_out>
   12796:	70 91 84 0b 	lds	r23, 0x0B84	; 0x800b84 <header_out+0x1>
   1279a:	ce 01       	movw	r24, r28
   1279c:	01 96       	adiw	r24, 0x01	; 1
   1279e:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   127a2:	be 01       	movw	r22, r28
   127a4:	63 5b       	subi	r22, 0xB3	; 179
   127a6:	7f 4f       	sbci	r23, 0xFF	; 255
   127a8:	ce 01       	movw	r24, r28
   127aa:	01 96       	adiw	r24, 0x01	; 1
   127ac:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   127b0:	67 ef       	ldi	r22, 0xF7	; 247
   127b2:	73 e0       	ldi	r23, 0x03	; 3
   127b4:	ce 01       	movw	r24, r28
   127b6:	01 96       	adiw	r24, 0x01	; 1
   127b8:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   127bc:	b5 01       	movw	r22, r10
   127be:	ce 01       	movw	r24, r28
   127c0:	01 96       	adiw	r24, 0x01	; 1
   127c2:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   127c6:	67 ef       	ldi	r22, 0xF7	; 247
   127c8:	73 e0       	ldi	r23, 0x03	; 3
   127ca:	ce 01       	movw	r24, r28
   127cc:	01 96       	adiw	r24, 0x01	; 1
   127ce:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   127d2:	4a e0       	ldi	r20, 0x0A	; 10
   127d4:	be 01       	movw	r22, r28
   127d6:	6f 5b       	subi	r22, 0xBF	; 191
   127d8:	7f 4f       	sbci	r23, 0xFF	; 255
   127da:	8d 2d       	mov	r24, r13
   127dc:	90 e0       	ldi	r25, 0x00	; 0
   127de:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   127e2:	be 01       	movw	r22, r28
   127e4:	6f 5b       	subi	r22, 0xBF	; 191
   127e6:	7f 4f       	sbci	r23, 0xFF	; 255
   127e8:	ce 01       	movw	r24, r28
   127ea:	01 96       	adiw	r24, 0x01	; 1
   127ec:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   127f0:	67 ef       	ldi	r22, 0xF7	; 247
   127f2:	73 e0       	ldi	r23, 0x03	; 3
   127f4:	ce 01       	movw	r24, r28
   127f6:	01 96       	adiw	r24, 0x01	; 1
   127f8:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   127fc:	b7 01       	movw	r22, r14
   127fe:	ce 01       	movw	r24, r28
   12800:	01 96       	adiw	r24, 0x01	; 1
   12802:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   12806:	a8 01       	movw	r20, r16
   12808:	be 01       	movw	r22, r28
   1280a:	6f 5f       	subi	r22, 0xFF	; 255
   1280c:	7f 4f       	sbci	r23, 0xFF	; 255
   1280e:	8e e2       	ldi	r24, 0x2E	; 46
   12810:	9e e0       	ldi	r25, 0x0E	; 14
   12812:	0e 94 41 93 	call	0x12682	; 0x12682 <PubSubClient::publish(char const*, char const*)>
   12816:	81 11       	cpse	r24, r1
   12818:	09 c0       	rjmp	.+18     	; 0x1282c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xf0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   1281a:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <mqtt_error>
   1281e:	90 91 88 0b 	lds	r25, 0x0B88	; 0x800b88 <mqtt_error+0x1>
   12822:	01 96       	adiw	r24, 0x01	; 1
   12824:	90 93 88 0b 	sts	0x0B88, r25	; 0x800b88 <mqtt_error+0x1>
   12828:	80 93 87 0b 	sts	0x0B87, r24	; 0x800b87 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:187
}
   1282c:	ca 5a       	subi	r28, 0xAA	; 170
   1282e:	df 4f       	sbci	r29, 0xFF	; 255
   12830:	0f b6       	in	r0, 0x3f	; 63
   12832:	f8 94       	cli
   12834:	de bf       	out	0x3e, r29	; 62
   12836:	0f be       	out	0x3f, r0	; 63
   12838:	cd bf       	out	0x3d, r28	; 61
   1283a:	df 91       	pop	r29
   1283c:	cf 91       	pop	r28
   1283e:	1f 91       	pop	r17
   12840:	0f 91       	pop	r16
   12842:	ff 90       	pop	r15
   12844:	ef 90       	pop	r14
   12846:	df 90       	pop	r13
   12848:	bf 90       	pop	r11
   1284a:	af 90       	pop	r10
   1284c:	08 95       	ret

0001284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.223():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   1284e:	0c 94 b0 b1 	jmp	0x16360	; 0x16360 <eeprom_write_byte>

00012852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.227():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   12852:	0c 94 a8 b1 	jmp	0x16350	; 0x16350 <eeprom_read_byte>

00012856 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>:
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   12856:	1f 93       	push	r17
   12858:	cf 93       	push	r28
   1285a:	df 93       	push	r29
   1285c:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1285e:	91 e2       	ldi	r25, 0x21	; 33
   12860:	89 9f       	mul	r24, r25
   12862:	e0 01       	movw	r28, r0
   12864:	11 24       	eor	r1, r1
   12866:	c8 5a       	subi	r28, 0xA8	; 168
   12868:	de 4f       	sbci	r29, 0xFE	; 254
   1286a:	ce 01       	movw	r24, r28
   1286c:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   12870:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   12872:	11 11       	cpse	r17, r1
   12874:	07 c0       	rjmp	.+14     	; 0x12884 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x2e>
   12876:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12878:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   1287a:	df 91       	pop	r29
   1287c:	cf 91       	pop	r28
   1287e:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12880:	0c 94 27 94 	jmp	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   12884:	61 60       	ori	r22, 0x01	; 1
   12886:	f8 cf       	rjmp	.-16     	; 0x12878 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x22>

00012888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   12888:	4f 92       	push	r4
   1288a:	5f 92       	push	r5
   1288c:	6f 92       	push	r6
   1288e:	7f 92       	push	r7
   12890:	8f 92       	push	r8
   12892:	9f 92       	push	r9
   12894:	af 92       	push	r10
   12896:	bf 92       	push	r11
   12898:	cf 92       	push	r12
   1289a:	df 92       	push	r13
   1289c:	ef 92       	push	r14
   1289e:	ff 92       	push	r15
   128a0:	0f 93       	push	r16
   128a2:	1f 93       	push	r17
   128a4:	cf 93       	push	r28
   128a6:	df 93       	push	r29
   128a8:	00 d0       	rcall	.+0      	; 0x128aa <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   128aa:	00 d0       	rcall	.+0      	; 0x128ac <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   128ac:	1f 92       	push	r1
   128ae:	1f 92       	push	r1
   128b0:	cd b7       	in	r28, 0x3d	; 61
   128b2:	de b7       	in	r29, 0x3e	; 62
   128b4:	6c 01       	movw	r12, r24
   128b6:	46 2e       	mov	r4, r22
   128b8:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:116
  char tmp1[8];
  str[0] = 0;
   128ba:	fc 01       	movw	r30, r24
   128bc:	10 82       	st	Z, r1
   128be:	3a 01       	movw	r6, r20
   128c0:	f1 2c       	mov	r15, r1
   128c2:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   128c4:	a0 2e       	mov	r10, r16
   128c6:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   128c8:	8e 01       	movw	r16, r28
   128ca:	0f 5f       	subi	r16, 0xFF	; 255
   128cc:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   128ce:	82 2f       	mov	r24, r18
   128d0:	81 50       	subi	r24, 0x01	; 1
   128d2:	99 0b       	sbc	r25, r25
   128d4:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   128d6:	f3 01       	movw	r30, r6
   128d8:	81 91       	ld	r24, Z+
   128da:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   128dc:	a5 01       	movw	r20, r10
   128de:	b8 01       	movw	r22, r16
   128e0:	90 e0       	ldi	r25, 0x00	; 0
   128e2:	0e 94 39 a8 	call	0x15072	; 0x15072 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
    if (strlen(tmp1) < 2)
   128e6:	f8 01       	movw	r30, r16
   128e8:	01 90       	ld	r0, Z+
   128ea:	00 20       	and	r0, r0
   128ec:	e9 f7       	brne	.-6      	; 0x128e8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   128ee:	31 97       	sbiw	r30, 0x01	; 1
   128f0:	e0 1b       	sub	r30, r16
   128f2:	f1 0b       	sbc	r31, r17
   128f4:	32 97       	sbiw	r30, 0x02	; 2
   128f6:	28 f4       	brcc	.+10     	; 0x12902 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
      strcat(str, "0");
   128f8:	6a e1       	ldi	r22, 0x1A	; 26
   128fa:	77 e0       	ldi	r23, 0x07	; 7
   128fc:	c6 01       	movw	r24, r12
   128fe:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
    strcat(str, tmp1); 
   12902:	b8 01       	movw	r22, r16
   12904:	c6 01       	movw	r24, r12
   12906:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (a < maxBytes - 1)
   1290a:	e8 14       	cp	r14, r8
   1290c:	f9 04       	cpc	r15, r9
   1290e:	34 f4       	brge	.+12     	; 0x1291c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    {
      tmp1[0] = sep;
   12910:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      tmp1[1] = 0;
   12912:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
      strcat(str, tmp1);
   12914:	b8 01       	movw	r22, r16
   12916:	c6 01       	movw	r24, r12
   12918:	0e 94 6e b4 	call	0x168dc	; 0x168dc <strcat>
   1291c:	ff ef       	ldi	r31, 0xFF	; 255
   1291e:	ef 1a       	sub	r14, r31
   12920:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   12922:	e5 14       	cp	r14, r5
   12924:	c0 f2       	brcs	.-80     	; 0x128d6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   12926:	28 96       	adiw	r28, 0x08	; 8
   12928:	0f b6       	in	r0, 0x3f	; 63
   1292a:	f8 94       	cli
   1292c:	de bf       	out	0x3e, r29	; 62
   1292e:	0f be       	out	0x3f, r0	; 63
   12930:	cd bf       	out	0x3d, r28	; 61
   12932:	df 91       	pop	r29
   12934:	cf 91       	pop	r28
   12936:	1f 91       	pop	r17
   12938:	0f 91       	pop	r16
   1293a:	ff 90       	pop	r15
   1293c:	ef 90       	pop	r14
   1293e:	df 90       	pop	r13
   12940:	cf 90       	pop	r12
   12942:	bf 90       	pop	r11
   12944:	af 90       	pop	r10
   12946:	9f 90       	pop	r9
   12948:	8f 90       	pop	r8
   1294a:	7f 90       	pop	r7
   1294c:	6f 90       	pop	r6
   1294e:	5f 90       	pop	r5
   12950:	4f 90       	pop	r4
   12952:	08 95       	ret

00012954 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   12954:	cf 92       	push	r12
   12956:	df 92       	push	r13
   12958:	ef 92       	push	r14
   1295a:	ff 92       	push	r15
   1295c:	0f 93       	push	r16
   1295e:	1f 93       	push	r17
   12960:	cf 93       	push	r28
   12962:	df 93       	push	r29
   12964:	00 d0       	rcall	.+0      	; 0x12966 <EEPROMwriteFloat(unsigned int, float)+0x12>
   12966:	1f 92       	push	r1
   12968:	cd b7       	in	r28, 0x3d	; 61
   1296a:	de b7       	in	r29, 0x3e	; 62
   1296c:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   1296e:	49 83       	std	Y+1, r20	; 0x01
   12970:	5a 83       	std	Y+2, r21	; 0x02
   12972:	6b 83       	std	Y+3, r22	; 0x03
   12974:	7c 83       	std	Y+4, r23	; 0x04
   12976:	ce 01       	movw	r24, r28
   12978:	01 96       	adiw	r24, 0x01	; 1
   1297a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   1297c:	10 e0       	ldi	r17, 0x00	; 0
   1297e:	00 e0       	ldi	r16, 0x00	; 0
   12980:	f7 01       	movw	r30, r14
   12982:	61 91       	ld	r22, Z+
   12984:	7f 01       	movw	r14, r30
   12986:	c8 01       	movw	r24, r16
   12988:	8c 0d       	add	r24, r12
   1298a:	9d 1d       	adc	r25, r13
   1298c:	0e 94 27 94 	call	0x1284e	; 0x1284e <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
   12990:	0f 5f       	subi	r16, 0xFF	; 255
   12992:	1f 4f       	sbci	r17, 0xFF	; 255
   12994:	04 30       	cpi	r16, 0x04	; 4
   12996:	11 05       	cpc	r17, r1
   12998:	99 f7       	brne	.-26     	; 0x12980 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   1299a:	0f 90       	pop	r0
   1299c:	0f 90       	pop	r0
   1299e:	0f 90       	pop	r0
   129a0:	0f 90       	pop	r0
   129a2:	df 91       	pop	r29
   129a4:	cf 91       	pop	r28
   129a6:	1f 91       	pop	r17
   129a8:	0f 91       	pop	r16
   129aa:	ff 90       	pop	r15
   129ac:	ef 90       	pop	r14
   129ae:	df 90       	pop	r13
   129b0:	cf 90       	pop	r12
   129b2:	08 95       	ret

000129b4 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   129b4:	cf 92       	push	r12
   129b6:	df 92       	push	r13
   129b8:	ef 92       	push	r14
   129ba:	ff 92       	push	r15
   129bc:	0f 93       	push	r16
   129be:	1f 93       	push	r17
   129c0:	cf 93       	push	r28
   129c2:	df 93       	push	r29
   129c4:	00 d0       	rcall	.+0      	; 0x129c6 <EEPROMreadFloat(unsigned int)+0x12>
   129c6:	1f 92       	push	r1
   129c8:	cd b7       	in	r28, 0x3d	; 61
   129ca:	de b7       	in	r29, 0x3e	; 62
   129cc:	7e 01       	movw	r14, r28
   129ce:	25 e0       	ldi	r18, 0x05	; 5
   129d0:	e2 0e       	add	r14, r18
   129d2:	f1 1c       	adc	r15, r1
   129d4:	8e 01       	movw	r16, r28
   129d6:	0f 5f       	subi	r16, 0xFF	; 255
   129d8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   129da:	6c 01       	movw	r12, r24
   129dc:	c0 1a       	sub	r12, r16
   129de:	d1 0a       	sbc	r13, r17
   129e0:	c6 01       	movw	r24, r12
   129e2:	80 0f       	add	r24, r16
   129e4:	91 1f       	adc	r25, r17
   129e6:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   129ea:	f8 01       	movw	r30, r16
   129ec:	81 93       	st	Z+, r24
   129ee:	8f 01       	movw	r16, r30
   129f0:	ee 15       	cp	r30, r14
   129f2:	ff 05       	cpc	r31, r15
   129f4:	a9 f7       	brne	.-22     	; 0x129e0 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   129f6:	69 81       	ldd	r22, Y+1	; 0x01
   129f8:	7a 81       	ldd	r23, Y+2	; 0x02
   129fa:	8b 81       	ldd	r24, Y+3	; 0x03
   129fc:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   129fe:	0f 90       	pop	r0
   12a00:	0f 90       	pop	r0
   12a02:	0f 90       	pop	r0
   12a04:	0f 90       	pop	r0
   12a06:	df 91       	pop	r29
   12a08:	cf 91       	pop	r28
   12a0a:	1f 91       	pop	r17
   12a0c:	0f 91       	pop	r16
   12a0e:	ff 90       	pop	r15
   12a10:	ef 90       	pop	r14
   12a12:	df 90       	pop	r13
   12a14:	cf 90       	pop	r12
   12a16:	08 95       	ret

00012a18 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   12a18:	cf 93       	push	r28
   12a1a:	df 93       	push	r29
   12a1c:	d8 2f       	mov	r29, r24
   12a1e:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   12a20:	80 91 58 11 	lds	r24, 0x1158	; 0x801158 <wiznet_SPI_settings>
   12a24:	90 91 59 11 	lds	r25, 0x1159	; 0x801159 <wiznet_SPI_settings+0x1>
   12a28:	0e 94 2f 7e 	call	0xfc5e	; 0xfc5e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   12a2c:	0e 94 73 88 	call	0x110e6	; 0x110e6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   12a30:	80 e0       	ldi	r24, 0x00	; 0
   12a32:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   12a36:	8d 2f       	mov	r24, r29
   12a38:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   12a3c:	8c 2f       	mov	r24, r28
   12a3e:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   12a42:	80 e0       	ldi	r24, 0x00	; 0
   12a44:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
   12a48:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   12a4a:	0e 94 6e 88 	call	0x110dc	; 0x110dc <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   12a4e:	8c 2f       	mov	r24, r28
   12a50:	df 91       	pop	r29
   12a52:	cf 91       	pop	r28
   12a54:	08 95       	ret

00012a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   12a56:	df 92       	push	r13
   12a58:	ef 92       	push	r14
   12a5a:	ff 92       	push	r15
   12a5c:	0f 93       	push	r16
   12a5e:	1f 93       	push	r17
   12a60:	cf 93       	push	r28
   12a62:	df 93       	push	r29
   12a64:	d8 2f       	mov	r29, r24
   12a66:	d9 2e       	mov	r13, r25
   12a68:	c6 2f       	mov	r28, r22
   12a6a:	7a 01       	movw	r14, r20
   12a6c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   12a6e:	80 91 58 11 	lds	r24, 0x1158	; 0x801158 <wiznet_SPI_settings>
   12a72:	90 91 59 11 	lds	r25, 0x1159	; 0x801159 <wiznet_SPI_settings+0x1>
   12a76:	0e 94 2f 7e 	call	0xfc5e	; 0xfc5e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   12a7a:	0e 94 73 88 	call	0x110e6	; 0x110e6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   12a7e:	8d 2d       	mov	r24, r13
   12a80:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   12a84:	8d 2f       	mov	r24, r29
   12a86:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   12a8a:	8c 2f       	mov	r24, r28
   12a8c:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
   12a90:	e7 01       	movw	r28, r14
   12a92:	e0 0e       	add	r14, r16
   12a94:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   12a96:	ce 15       	cp	r28, r14
   12a98:	df 05       	cpc	r29, r15
   12a9a:	21 f0       	breq	.+8      	; 0x12aa4 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   12a9c:	89 91       	ld	r24, Y+
   12a9e:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
   12aa2:	f9 cf       	rjmp	.-14     	; 0x12a96 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   12aa4:	0e 94 6e 88 	call	0x110dc	; 0x110dc <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   12aa8:	c8 01       	movw	r24, r16
   12aaa:	df 91       	pop	r29
   12aac:	cf 91       	pop	r28
   12aae:	1f 91       	pop	r17
   12ab0:	0f 91       	pop	r16
   12ab2:	ff 90       	pop	r15
   12ab4:	ef 90       	pop	r14
   12ab6:	df 90       	pop	r13
   12ab8:	08 95       	ret

00012aba <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   12aba:	8f 92       	push	r8
   12abc:	9f 92       	push	r9
   12abe:	af 92       	push	r10
   12ac0:	bf 92       	push	r11
   12ac2:	cf 92       	push	r12
   12ac4:	df 92       	push	r13
   12ac6:	ef 92       	push	r14
   12ac8:	ff 92       	push	r15
   12aca:	0f 93       	push	r16
   12acc:	1f 93       	push	r17
   12ace:	cf 93       	push	r28
   12ad0:	5c 01       	movw	r10, r24
   12ad2:	6b 01       	movw	r12, r22
   12ad4:	7a 01       	movw	r14, r20
   12ad6:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   12ad8:	c0 91 32 0c 	lds	r28, 0x0C32	; 0x800c32 <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   12adc:	c0 93 fe 10 	sts	0x10FE, r28	; 0x8010fe <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   12ae0:	68 ee       	ldi	r22, 0xE8	; 232
   12ae2:	73 e0       	ldi	r23, 0x03	; 3
   12ae4:	80 e0       	ldi	r24, 0x00	; 0
   12ae6:	90 e0       	ldi	r25, 0x00	; 0
   12ae8:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   12aec:	61 e0       	ldi	r22, 0x01	; 1
   12aee:	8c 2f       	mov	r24, r28
   12af0:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   12af4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   12af8:	60 e0       	ldi	r22, 0x00	; 0
   12afa:	90 e0       	ldi	r25, 0x00	; 0
   12afc:	80 e0       	ldi	r24, 0x00	; 0
   12afe:	0e 94 0c 95 	call	0x12a18	; 0x12a18 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   12b02:	48 2f       	mov	r20, r24
   12b04:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   12b06:	64 e0       	ldi	r22, 0x04	; 4
   12b08:	90 e0       	ldi	r25, 0x00	; 0
   12b0a:	80 e0       	ldi	r24, 0x00	; 0
   12b0c:	0e 94 78 88 	call	0x110f0	; 0x110f0 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   12b10:	cc e0       	ldi	r28, 0x0C	; 12
   12b12:	88 e0       	ldi	r24, 0x08	; 8
   12b14:	88 2e       	mov	r8, r24
   12b16:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   12b18:	42 e0       	ldi	r20, 0x02	; 2
   12b1a:	6c 2f       	mov	r22, r28
   12b1c:	8e e1       	ldi	r24, 0x1E	; 30
   12b1e:	90 e0       	ldi	r25, 0x00	; 0
   12b20:	0e 94 78 88 	call	0x110f0	; 0x110f0 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   12b24:	42 e0       	ldi	r20, 0x02	; 2
   12b26:	6c 2f       	mov	r22, r28
   12b28:	8f e1       	ldi	r24, 0x1F	; 31
   12b2a:	90 e0       	ldi	r25, 0x00	; 0
   12b2c:	0e 94 78 88 	call	0x110f0	; 0x110f0 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   12b30:	81 e0       	ldi	r24, 0x01	; 1
   12b32:	88 1a       	sub	r8, r24
   12b34:	91 08       	sbc	r9, r1
   12b36:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   12b38:	81 14       	cp	r8, r1
   12b3a:	91 04       	cpc	r9, r1
   12b3c:	69 f7       	brne	.-38     	; 0x12b18 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   12b3e:	26 e0       	ldi	r18, 0x06	; 6
   12b40:	30 e0       	ldi	r19, 0x00	; 0
   12b42:	4b e3       	ldi	r20, 0x3B	; 59
   12b44:	5c e0       	ldi	r21, 0x0C	; 12
   12b46:	64 e0       	ldi	r22, 0x04	; 4
   12b48:	89 e0       	ldi	r24, 0x09	; 9
   12b4a:	90 e0       	ldi	r25, 0x00	; 0
   12b4c:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   12b50:	a5 01       	movw	r20, r10
   12b52:	4e 5f       	subi	r20, 0xFE	; 254
   12b54:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   12b56:	24 e0       	ldi	r18, 0x04	; 4
   12b58:	30 e0       	ldi	r19, 0x00	; 0
   12b5a:	64 e0       	ldi	r22, 0x04	; 4
   12b5c:	8f e0       	ldi	r24, 0x0F	; 15
   12b5e:	90 e0       	ldi	r25, 0x00	; 0
   12b60:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   12b64:	a7 01       	movw	r20, r14
   12b66:	4e 5f       	subi	r20, 0xFE	; 254
   12b68:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   12b6a:	24 e0       	ldi	r18, 0x04	; 4
   12b6c:	30 e0       	ldi	r19, 0x00	; 0
   12b6e:	64 e0       	ldi	r22, 0x04	; 4
   12b70:	81 e0       	ldi	r24, 0x01	; 1
   12b72:	90 e0       	ldi	r25, 0x00	; 0
   12b74:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   12b78:	a8 01       	movw	r20, r16
   12b7a:	4e 5f       	subi	r20, 0xFE	; 254
   12b7c:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   12b7e:	24 e0       	ldi	r18, 0x04	; 4
   12b80:	30 e0       	ldi	r19, 0x00	; 0
   12b82:	64 e0       	ldi	r22, 0x04	; 4
   12b84:	85 e0       	ldi	r24, 0x05	; 5
   12b86:	90 e0       	ldi	r25, 0x00	; 0
   12b88:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   12b8c:	f6 01       	movw	r30, r12
   12b8e:	82 81       	ldd	r24, Z+2	; 0x02
   12b90:	93 81       	ldd	r25, Z+3	; 0x03
   12b92:	a4 81       	ldd	r26, Z+4	; 0x04
   12b94:	b5 81       	ldd	r27, Z+5	; 0x05
   12b96:	80 93 28 0c 	sts	0x0C28, r24	; 0x800c28 <Ethernet+0x2>
   12b9a:	90 93 29 0c 	sts	0x0C29, r25	; 0x800c29 <Ethernet+0x3>
   12b9e:	a0 93 2a 0c 	sts	0x0C2A, r26	; 0x800c2a <Ethernet+0x4>
   12ba2:	b0 93 2b 0c 	sts	0x0C2B, r27	; 0x800c2b <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   12ba6:	cf 91       	pop	r28
   12ba8:	1f 91       	pop	r17
   12baa:	0f 91       	pop	r16
   12bac:	ff 90       	pop	r15
   12bae:	ef 90       	pop	r14
   12bb0:	df 90       	pop	r13
   12bb2:	cf 90       	pop	r12
   12bb4:	bf 90       	pop	r11
   12bb6:	af 90       	pop	r10
   12bb8:	9f 90       	pop	r9
   12bba:	8f 90       	pop	r8
   12bbc:	08 95       	ret

00012bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   12bbe:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   12bc0:	82 95       	swap	r24
   12bc2:	88 0f       	add	r24, r24
   12bc4:	80 7e       	andi	r24, 0xE0	; 224
   12bc6:	6c e0       	ldi	r22, 0x0C	; 12
   12bc8:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   12bca:	c9 01       	movw	r24, r18
   12bcc:	0c 94 78 88 	jmp	0x110f0	; 0x110f0 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00012bd0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   12bd0:	bf 92       	push	r11
   12bd2:	cf 92       	push	r12
   12bd4:	df 92       	push	r13
   12bd6:	ef 92       	push	r14
   12bd8:	ff 92       	push	r15
   12bda:	0f 93       	push	r16
   12bdc:	1f 93       	push	r17
   12bde:	cf 93       	push	r28
   12be0:	df 93       	push	r29
   12be2:	b8 2e       	mov	r11, r24
   12be4:	6b 01       	movw	r12, r22
   12be6:	7a 01       	movw	r14, r20
   12be8:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   12bea:	64 e2       	ldi	r22, 0x24	; 36
   12bec:	70 e0       	ldi	r23, 0x00	; 0
   12bee:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   12bf2:	c8 2f       	mov	r28, r24
   12bf4:	65 e2       	ldi	r22, 0x25	; 37
   12bf6:	70 e0       	ldi	r23, 0x00	; 0
   12bf8:	8b 2d       	mov	r24, r11
   12bfa:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   12bfe:	d0 e0       	ldi	r29, 0x00	; 0
   12c00:	dc 2f       	mov	r29, r28
   12c02:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   12c04:	8c 0d       	add	r24, r12
   12c06:	9d 2d       	mov	r25, r13
   12c08:	91 1d       	adc	r25, r1
   12c0a:	c8 0f       	add	r28, r24
   12c0c:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   12c0e:	6b 2d       	mov	r22, r11
   12c10:	62 95       	swap	r22
   12c12:	66 0f       	add	r22, r22
   12c14:	60 7e       	andi	r22, 0xE0	; 224
   12c16:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   12c18:	98 01       	movw	r18, r16
   12c1a:	a7 01       	movw	r20, r14
   12c1c:	ce 01       	movw	r24, r28
   12c1e:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   12c22:	c0 0f       	add	r28, r16
   12c24:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   12c26:	4d 2f       	mov	r20, r29
   12c28:	64 e2       	ldi	r22, 0x24	; 36
   12c2a:	70 e0       	ldi	r23, 0x00	; 0
   12c2c:	8b 2d       	mov	r24, r11
   12c2e:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   12c32:	4c 2f       	mov	r20, r28
   12c34:	65 e2       	ldi	r22, 0x25	; 37
   12c36:	70 e0       	ldi	r23, 0x00	; 0
   12c38:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   12c3a:	df 91       	pop	r29
   12c3c:	cf 91       	pop	r28
   12c3e:	1f 91       	pop	r17
   12c40:	0f 91       	pop	r16
   12c42:	ff 90       	pop	r15
   12c44:	ef 90       	pop	r14
   12c46:	df 90       	pop	r13
   12c48:	cf 90       	pop	r12
   12c4a:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   12c4c:	0c 94 df 95 	jmp	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00012c50 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   12c50:	af 92       	push	r10
   12c52:	bf 92       	push	r11
   12c54:	cf 92       	push	r12
   12c56:	df 92       	push	r13
   12c58:	ff 92       	push	r15
   12c5a:	0f 93       	push	r16
   12c5c:	1f 93       	push	r17
   12c5e:	cf 93       	push	r28
   12c60:	df 93       	push	r29
   12c62:	8c 01       	movw	r16, r24
   12c64:	5b 01       	movw	r10, r22
   12c66:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   12c68:	fc 01       	movw	r30, r24
   12c6a:	c7 88       	ldd	r12, Z+23	; 0x17
   12c6c:	d0 8c       	ldd	r13, Z+24	; 0x18
   12c6e:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   12c70:	8f 2d       	mov	r24, r15
   12c72:	0e 94 9d 86 	call	0x10d3a	; 0x10d3a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   12c76:	8c 17       	cp	r24, r28
   12c78:	9d 07       	cpc	r25, r29
   12c7a:	20 f4       	brcc	.+8      	; 0x12c84 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   12c7c:	8f 2d       	mov	r24, r15
   12c7e:	0e 94 9d 86 	call	0x10d3a	; 0x10d3a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   12c82:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   12c84:	9e 01       	movw	r18, r28
   12c86:	a5 01       	movw	r20, r10
   12c88:	b6 01       	movw	r22, r12
   12c8a:	8f 2d       	mov	r24, r15
   12c8c:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   12c90:	f8 01       	movw	r30, r16
   12c92:	87 89       	ldd	r24, Z+23	; 0x17
   12c94:	90 8d       	ldd	r25, Z+24	; 0x18
   12c96:	8c 0f       	add	r24, r28
   12c98:	9d 1f       	adc	r25, r29
   12c9a:	90 8f       	std	Z+24, r25	; 0x18
   12c9c:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   12c9e:	ce 01       	movw	r24, r28
   12ca0:	df 91       	pop	r29
   12ca2:	cf 91       	pop	r28
   12ca4:	1f 91       	pop	r17
   12ca6:	0f 91       	pop	r16
   12ca8:	ff 90       	pop	r15
   12caa:	df 90       	pop	r13
   12cac:	cf 90       	pop	r12
   12cae:	bf 90       	pop	r11
   12cb0:	af 90       	pop	r10
   12cb2:	08 95       	ret

00012cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   12cb4:	cf 93       	push	r28
   12cb6:	c8 2f       	mov	r28, r24
   12cb8:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   12cba:	61 e0       	ldi	r22, 0x01	; 1
   12cbc:	70 e0       	ldi	r23, 0x00	; 0
   12cbe:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   12cc2:	61 e0       	ldi	r22, 0x01	; 1
   12cc4:	70 e0       	ldi	r23, 0x00	; 0
   12cc6:	8c 2f       	mov	r24, r28
   12cc8:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   12ccc:	81 11       	cpse	r24, r1
   12cce:	f9 cf       	rjmp	.-14     	; 0x12cc2 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   12cd0:	cf 91       	pop	r28
   12cd2:	08 95       	ret

00012cd4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   12cd4:	af 92       	push	r10
   12cd6:	bf 92       	push	r11
   12cd8:	cf 92       	push	r12
   12cda:	df 92       	push	r13
   12cdc:	ef 92       	push	r14
   12cde:	ff 92       	push	r15
   12ce0:	0f 93       	push	r16
   12ce2:	1f 93       	push	r17
   12ce4:	cf 93       	push	r28
   12ce6:	df 93       	push	r29
   12ce8:	f8 2e       	mov	r15, r24
   12cea:	5b 01       	movw	r10, r22
   12cec:	6a 01       	movw	r12, r20
   12cee:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   12cf0:	68 e2       	ldi	r22, 0x28	; 40
   12cf2:	70 e0       	ldi	r23, 0x00	; 0
   12cf4:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   12cf8:	08 2f       	mov	r16, r24
   12cfa:	10 e0       	ldi	r17, 0x00	; 0
   12cfc:	10 2f       	mov	r17, r16
   12cfe:	00 27       	eor	r16, r16
   12d00:	69 e2       	ldi	r22, 0x29	; 41
   12d02:	70 e0       	ldi	r23, 0x00	; 0
   12d04:	8f 2d       	mov	r24, r15
   12d06:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
   12d0a:	e8 01       	movw	r28, r16
   12d0c:	c8 0f       	add	r28, r24
   12d0e:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   12d10:	80 91 58 11 	lds	r24, 0x1158	; 0x801158 <wiznet_SPI_settings>
   12d14:	90 91 59 11 	lds	r25, 0x1159	; 0x801159 <wiznet_SPI_settings+0x1>
   12d18:	0e 94 2f 7e 	call	0xfc5e	; 0xfc5e <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   12d1c:	0e 94 73 88 	call	0x110e6	; 0x110e6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   12d20:	8d 2f       	mov	r24, r29
   12d22:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   12d26:	8c 2f       	mov	r24, r28
   12d28:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   12d2c:	8f 2d       	mov	r24, r15
   12d2e:	82 95       	swap	r24
   12d30:	88 0f       	add	r24, r24
   12d32:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   12d34:	88 5e       	subi	r24, 0xE8	; 232
   12d36:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
   12d3a:	85 01       	movw	r16, r10
   12d3c:	ac 0c       	add	r10, r12
   12d3e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   12d40:	80 e0       	ldi	r24, 0x00	; 0
   12d42:	0e 94 28 7e 	call	0xfc50	; 0xfc50 <SPIClass::transfer(unsigned char)>
   12d46:	f8 01       	movw	r30, r16
   12d48:	81 93       	st	Z+, r24
   12d4a:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   12d4c:	ea 15       	cp	r30, r10
   12d4e:	fb 05       	cpc	r31, r11
   12d50:	b9 f7       	brne	.-18     	; 0x12d40 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   12d52:	0e 94 6e 88 	call	0x110dc	; 0x110dc <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   12d56:	e1 10       	cpse	r14, r1
   12d58:	18 c0       	rjmp	.+48     	; 0x12d8a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   12d5a:	cc 0d       	add	r28, r12
   12d5c:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   12d5e:	4d 2f       	mov	r20, r29
   12d60:	68 e2       	ldi	r22, 0x28	; 40
   12d62:	70 e0       	ldi	r23, 0x00	; 0
   12d64:	8f 2d       	mov	r24, r15
   12d66:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   12d6a:	4c 2f       	mov	r20, r28
   12d6c:	69 e2       	ldi	r22, 0x29	; 41
   12d6e:	70 e0       	ldi	r23, 0x00	; 0
   12d70:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   12d72:	df 91       	pop	r29
   12d74:	cf 91       	pop	r28
   12d76:	1f 91       	pop	r17
   12d78:	0f 91       	pop	r16
   12d7a:	ff 90       	pop	r15
   12d7c:	ef 90       	pop	r14
   12d7e:	df 90       	pop	r13
   12d80:	cf 90       	pop	r12
   12d82:	bf 90       	pop	r11
   12d84:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   12d86:	0c 94 df 95 	jmp	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   12d8a:	df 91       	pop	r29
   12d8c:	cf 91       	pop	r28
   12d8e:	1f 91       	pop	r17
   12d90:	0f 91       	pop	r16
   12d92:	ff 90       	pop	r15
   12d94:	ef 90       	pop	r14
   12d96:	df 90       	pop	r13
   12d98:	cf 90       	pop	r12
   12d9a:	bf 90       	pop	r11
   12d9c:	af 90       	pop	r10
   12d9e:	08 95       	ret

00012da0 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   12da0:	cf 92       	push	r12
   12da2:	df 92       	push	r13
   12da4:	ef 92       	push	r14
   12da6:	ff 92       	push	r15
   12da8:	1f 93       	push	r17
   12daa:	cf 93       	push	r28
   12dac:	df 93       	push	r29
   12dae:	18 2f       	mov	r17, r24
   12db0:	6b 01       	movw	r12, r22
   12db2:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   12db4:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   12db8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   12dba:	00 97       	sbiw	r24, 0x00	; 0
   12dbc:	d9 f4       	brne	.+54     	; 0x12df4 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   12dbe:	63 e0       	ldi	r22, 0x03	; 3
   12dc0:	70 e0       	ldi	r23, 0x00	; 0
   12dc2:	81 2f       	mov	r24, r17
   12dc4:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   12dc8:	84 31       	cpi	r24, 0x14	; 20
   12dca:	59 f0       	breq	.+22     	; 0x12de2 <recv(unsigned char, unsigned char*, int)+0x42>
   12dcc:	88 23       	and	r24, r24
   12dce:	49 f0       	breq	.+18     	; 0x12de2 <recv(unsigned char, unsigned char*, int)+0x42>
   12dd0:	c1 e0       	ldi	r28, 0x01	; 1
   12dd2:	d0 e0       	ldi	r29, 0x00	; 0
   12dd4:	8c 31       	cpi	r24, 0x1C	; 28
   12dd6:	11 f4       	brne	.+4      	; 0x12ddc <recv(unsigned char, unsigned char*, int)+0x3c>
   12dd8:	d0 e0       	ldi	r29, 0x00	; 0
   12dda:	c0 e0       	ldi	r28, 0x00	; 0
   12ddc:	d1 95       	neg	r29
   12dde:	c1 95       	neg	r28
   12de0:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   12de2:	ce 01       	movw	r24, r28
   12de4:	df 91       	pop	r29
   12de6:	cf 91       	pop	r28
   12de8:	1f 91       	pop	r17
   12dea:	ff 90       	pop	r15
   12dec:	ef 90       	pop	r14
   12dee:	df 90       	pop	r13
   12df0:	cf 90       	pop	r12
   12df2:	08 95       	ret
   12df4:	e8 16       	cp	r14, r24
   12df6:	f9 06       	cpc	r15, r25
   12df8:	0c f4       	brge	.+2      	; 0x12dfc <recv(unsigned char, unsigned char*, int)+0x5c>
   12dfa:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   12dfc:	1c 16       	cp	r1, r28
   12dfe:	1d 06       	cpc	r1, r29
   12e00:	84 f7       	brge	.-32     	; 0x12de2 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   12e02:	20 e0       	ldi	r18, 0x00	; 0
   12e04:	ae 01       	movw	r20, r28
   12e06:	b6 01       	movw	r22, r12
   12e08:	81 2f       	mov	r24, r17
   12e0a:	0e 94 6a 96 	call	0x12cd4	; 0x12cd4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   12e0e:	60 e4       	ldi	r22, 0x40	; 64
   12e10:	70 e0       	ldi	r23, 0x00	; 0
   12e12:	81 2f       	mov	r24, r17
   12e14:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   12e18:	e4 cf       	rjmp	.-56     	; 0x12de2 <recv(unsigned char, unsigned char*, int)+0x42>

00012e1a <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   12e1a:	cf 93       	push	r28
   12e1c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   12e1e:	fc 01       	movw	r30, r24
   12e20:	21 8d       	ldd	r18, Z+25	; 0x19
   12e22:	32 8d       	ldd	r19, Z+26	; 0x1a
   12e24:	21 15       	cp	r18, r1
   12e26:	31 05       	cpc	r19, r1
   12e28:	29 f4       	brne	.+10     	; 0x12e34 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   12e2a:	8f ef       	ldi	r24, 0xFF	; 255
   12e2c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   12e2e:	df 91       	pop	r29
   12e30:	cf 91       	pop	r28
   12e32:	08 95       	ret
   12e34:	ec 01       	movw	r28, r24
   12e36:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   12e38:	42 17       	cp	r20, r18
   12e3a:	53 07       	cpc	r21, r19
   12e3c:	08 f0       	brcs	.+2      	; 0x12e40 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   12e3e:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   12e40:	0e 94 d0 96 	call	0x12da0	; 0x12da0 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   12e44:	18 16       	cp	r1, r24
   12e46:	19 06       	cpc	r1, r25
   12e48:	84 f7       	brge	.-32     	; 0x12e2a <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   12e4a:	29 8d       	ldd	r18, Y+25	; 0x19
   12e4c:	3a 8d       	ldd	r19, Y+26	; 0x1a
   12e4e:	28 1b       	sub	r18, r24
   12e50:	39 0b       	sbc	r19, r25
   12e52:	3a 8f       	std	Y+26, r19	; 0x1a
   12e54:	29 8f       	std	Y+25, r18	; 0x19
   12e56:	eb cf       	rjmp	.-42     	; 0x12e2e <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00012e58 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   12e58:	0f 93       	push	r16
   12e5a:	1f 93       	push	r17
   12e5c:	cf 93       	push	r28
   12e5e:	df 93       	push	r29
   12e60:	1f 92       	push	r1
   12e62:	cd b7       	in	r28, 0x3d	; 61
   12e64:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   12e66:	fc 01       	movw	r30, r24
   12e68:	21 8d       	ldd	r18, Z+25	; 0x19
   12e6a:	32 8d       	ldd	r19, Z+26	; 0x1a
   12e6c:	23 2b       	or	r18, r19
   12e6e:	41 f4       	brne	.+16     	; 0x12e80 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   12e70:	8f ef       	ldi	r24, 0xFF	; 255
   12e72:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   12e74:	0f 90       	pop	r0
   12e76:	df 91       	pop	r29
   12e78:	cf 91       	pop	r28
   12e7a:	1f 91       	pop	r17
   12e7c:	0f 91       	pop	r16
   12e7e:	08 95       	ret
   12e80:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   12e82:	41 e0       	ldi	r20, 0x01	; 1
   12e84:	50 e0       	ldi	r21, 0x00	; 0
   12e86:	be 01       	movw	r22, r28
   12e88:	6f 5f       	subi	r22, 0xFF	; 255
   12e8a:	7f 4f       	sbci	r23, 0xFF	; 255
   12e8c:	fc 01       	movw	r30, r24
   12e8e:	84 85       	ldd	r24, Z+12	; 0x0c
   12e90:	0e 94 d0 96 	call	0x12da0	; 0x12da0 <recv(unsigned char, unsigned char*, int)>
   12e94:	18 16       	cp	r1, r24
   12e96:	19 06       	cpc	r1, r25
   12e98:	5c f7       	brge	.-42     	; 0x12e70 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   12e9a:	f8 01       	movw	r30, r16
   12e9c:	81 8d       	ldd	r24, Z+25	; 0x19
   12e9e:	92 8d       	ldd	r25, Z+26	; 0x1a
   12ea0:	01 97       	sbiw	r24, 0x01	; 1
   12ea2:	92 8f       	std	Z+26, r25	; 0x1a
   12ea4:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   12ea6:	89 81       	ldd	r24, Y+1	; 0x01
   12ea8:	90 e0       	ldi	r25, 0x00	; 0
   12eaa:	e4 cf       	rjmp	.-56     	; 0x12e74 <EthernetUDP::read()+0x1c>

00012eac <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   12eac:	0f 93       	push	r16
   12eae:	1f 93       	push	r17
   12eb0:	cf 93       	push	r28
   12eb2:	df 93       	push	r29
   12eb4:	00 d0       	rcall	.+0      	; 0x12eb6 <EthernetUDP::parsePacket()+0xa>
   12eb6:	00 d0       	rcall	.+0      	; 0x12eb8 <EthernetUDP::parsePacket()+0xc>
   12eb8:	1f 92       	push	r1
   12eba:	1f 92       	push	r1
   12ebc:	cd b7       	in	r28, 0x3d	; 61
   12ebe:	de b7       	in	r29, 0x3e	; 62
   12ec0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   12ec2:	dc 01       	movw	r26, r24
   12ec4:	ed 91       	ld	r30, X+
   12ec6:	fc 91       	ld	r31, X
   12ec8:	06 80       	ldd	r0, Z+6	; 0x06
   12eca:	f7 81       	ldd	r31, Z+7	; 0x07
   12ecc:	e0 2d       	mov	r30, r0
   12ece:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   12ed0:	f8 01       	movw	r30, r16
   12ed2:	84 85       	ldd	r24, Z+12	; 0x0c
   12ed4:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   12ed8:	89 2b       	or	r24, r25
   12eda:	b1 f1       	breq	.+108    	; 0x12f48 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   12edc:	48 e0       	ldi	r20, 0x08	; 8
   12ede:	50 e0       	ldi	r21, 0x00	; 0
   12ee0:	be 01       	movw	r22, r28
   12ee2:	6f 5f       	subi	r22, 0xFF	; 255
   12ee4:	7f 4f       	sbci	r23, 0xFF	; 255
   12ee6:	d8 01       	movw	r26, r16
   12ee8:	1c 96       	adiw	r26, 0x0c	; 12
   12eea:	8c 91       	ld	r24, X
   12eec:	0e 94 d0 96 	call	0x12da0	; 0x12da0 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   12ef0:	18 16       	cp	r1, r24
   12ef2:	19 06       	cpc	r1, r25
   12ef4:	f4 f4       	brge	.+60     	; 0x12f32 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   12ef6:	d8 01       	movw	r26, r16
   12ef8:	51 96       	adiw	r26, 0x11	; 17
   12efa:	84 e0       	ldi	r24, 0x04	; 4
   12efc:	fe 01       	movw	r30, r28
   12efe:	31 96       	adiw	r30, 0x01	; 1
   12f00:	01 90       	ld	r0, Z+
   12f02:	0d 92       	st	X+, r0
   12f04:	8a 95       	dec	r24
   12f06:	e1 f7       	brne	.-8      	; 0x12f00 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   12f08:	8d 81       	ldd	r24, Y+5	; 0x05
   12f0a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   12f0c:	98 2f       	mov	r25, r24
   12f0e:	88 27       	eor	r24, r24
   12f10:	2e 81       	ldd	r18, Y+6	; 0x06
   12f12:	82 0f       	add	r24, r18
   12f14:	91 1d       	adc	r25, r1
   12f16:	f8 01       	movw	r30, r16
   12f18:	96 8b       	std	Z+22, r25	; 0x16
   12f1a:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   12f1c:	8f 81       	ldd	r24, Y+7	; 0x07
   12f1e:	28 2f       	mov	r18, r24
   12f20:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   12f22:	32 2f       	mov	r19, r18
   12f24:	22 27       	eor	r18, r18
   12f26:	88 85       	ldd	r24, Y+8	; 0x08
   12f28:	82 0f       	add	r24, r18
   12f2a:	93 2f       	mov	r25, r19
   12f2c:	91 1d       	adc	r25, r1
   12f2e:	92 8f       	std	Z+26, r25	; 0x1a
   12f30:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   12f32:	28 96       	adiw	r28, 0x08	; 8
   12f34:	0f b6       	in	r0, 0x3f	; 63
   12f36:	f8 94       	cli
   12f38:	de bf       	out	0x3e, r29	; 62
   12f3a:	0f be       	out	0x3f, r0	; 63
   12f3c:	cd bf       	out	0x3d, r28	; 61
   12f3e:	df 91       	pop	r29
   12f40:	cf 91       	pop	r28
   12f42:	1f 91       	pop	r17
   12f44:	0f 91       	pop	r16
   12f46:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   12f48:	90 e0       	ldi	r25, 0x00	; 0
   12f4a:	80 e0       	ldi	r24, 0x00	; 0
   12f4c:	f2 cf       	rjmp	.-28     	; 0x12f32 <EthernetUDP::parsePacket()+0x86>

00012f4e <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   12f4e:	cf 93       	push	r28
   12f50:	df 93       	push	r29
   12f52:	1f 92       	push	r1
   12f54:	cd b7       	in	r28, 0x3d	; 61
   12f56:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   12f58:	fc 01       	movw	r30, r24
   12f5a:	21 8d       	ldd	r18, Z+25	; 0x19
   12f5c:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   12f5e:	8f ef       	ldi	r24, 0xFF	; 255
   12f60:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   12f62:	23 2b       	or	r18, r19
   12f64:	59 f0       	breq	.+22     	; 0x12f7c <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   12f66:	21 e0       	ldi	r18, 0x01	; 1
   12f68:	41 e0       	ldi	r20, 0x01	; 1
   12f6a:	50 e0       	ldi	r21, 0x00	; 0
   12f6c:	be 01       	movw	r22, r28
   12f6e:	6f 5f       	subi	r22, 0xFF	; 255
   12f70:	7f 4f       	sbci	r23, 0xFF	; 255
   12f72:	84 85       	ldd	r24, Z+12	; 0x0c
   12f74:	0e 94 6a 96 	call	0x12cd4	; 0x12cd4 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   12f78:	89 81       	ldd	r24, Y+1	; 0x01
   12f7a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   12f7c:	0f 90       	pop	r0
   12f7e:	df 91       	pop	r29
   12f80:	cf 91       	pop	r28
   12f82:	08 95       	ret

00012f84 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   12f84:	cf 93       	push	r28
   12f86:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   12f88:	60 e1       	ldi	r22, 0x10	; 16
   12f8a:	70 e0       	ldi	r23, 0x00	; 0
   12f8c:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   12f90:	4f ef       	ldi	r20, 0xFF	; 255
   12f92:	62 e0       	ldi	r22, 0x02	; 2
   12f94:	70 e0       	ldi	r23, 0x00	; 0
   12f96:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   12f98:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   12f9a:	0c 94 df 95 	jmp	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00012f9e <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   12f9e:	0f 93       	push	r16
   12fa0:	1f 93       	push	r17
   12fa2:	cf 93       	push	r28
   12fa4:	df 93       	push	r29
   12fa6:	c8 2f       	mov	r28, r24
   12fa8:	d6 2f       	mov	r29, r22
   12faa:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   12fac:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   12fb0:	4d 2f       	mov	r20, r29
   12fb2:	70 e0       	ldi	r23, 0x00	; 0
   12fb4:	60 e0       	ldi	r22, 0x00	; 0
   12fb6:	8c 2f       	mov	r24, r28
   12fb8:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   12fbc:	01 15       	cp	r16, r1
   12fbe:	11 05       	cpc	r17, r1
   12fc0:	b9 f0       	breq	.+46     	; 0x12ff0 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   12fc2:	41 2f       	mov	r20, r17
   12fc4:	64 e0       	ldi	r22, 0x04	; 4
   12fc6:	70 e0       	ldi	r23, 0x00	; 0
   12fc8:	8c 2f       	mov	r24, r28
   12fca:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   12fce:	40 2f       	mov	r20, r16
   12fd0:	65 e0       	ldi	r22, 0x05	; 5
   12fd2:	70 e0       	ldi	r23, 0x00	; 0
   12fd4:	8c 2f       	mov	r24, r28
   12fd6:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   12fda:	61 e0       	ldi	r22, 0x01	; 1
   12fdc:	70 e0       	ldi	r23, 0x00	; 0
   12fde:	8c 2f       	mov	r24, r28
   12fe0:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   12fe4:	81 e0       	ldi	r24, 0x01	; 1
   12fe6:	df 91       	pop	r29
   12fe8:	cf 91       	pop	r28
   12fea:	1f 91       	pop	r17
   12fec:	0f 91       	pop	r16
   12fee:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   12ff0:	00 91 f8 10 	lds	r16, 0x10F8	; 0x8010f8 <local_port>
   12ff4:	10 91 f9 10 	lds	r17, 0x10F9	; 0x8010f9 <local_port+0x1>
   12ff8:	0f 5f       	subi	r16, 0xFF	; 255
   12ffa:	1f 4f       	sbci	r17, 0xFF	; 255
   12ffc:	10 93 f9 10 	sts	0x10F9, r17	; 0x8010f9 <local_port+0x1>
   13000:	00 93 f8 10 	sts	0x10F8, r16	; 0x8010f8 <local_port>
   13004:	de cf       	rjmp	.-68     	; 0x12fc2 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

00013006 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   13006:	ef 92       	push	r14
   13008:	ff 92       	push	r15
   1300a:	1f 93       	push	r17
   1300c:	cf 93       	push	r28
   1300e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   13010:	fc 01       	movw	r30, r24
   13012:	24 85       	ldd	r18, Z+12	; 0x0c
   13014:	28 30       	cpi	r18, 0x08	; 8
   13016:	39 f0       	breq	.+14     	; 0x13026 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   13018:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   1301a:	df 91       	pop	r29
   1301c:	cf 91       	pop	r28
   1301e:	1f 91       	pop	r17
   13020:	ff 90       	pop	r15
   13022:	ef 90       	pop	r14
   13024:	08 95       	ret
   13026:	7b 01       	movw	r14, r22
   13028:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   1302a:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1302c:	63 e0       	ldi	r22, 0x03	; 3
   1302e:	70 e0       	ldi	r23, 0x00	; 0
   13030:	81 2f       	mov	r24, r17
   13032:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   13036:	81 11       	cpse	r24, r1
   13038:	0e c0       	rjmp	.+28     	; 0x13056 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   1303a:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1303c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1303e:	88 30       	cpi	r24, 0x08	; 8
   13040:	59 f3       	breq	.-42     	; 0x13018 <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   13042:	fe 86       	std	Y+14, r15	; 0x0e
   13044:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   13046:	1a 8e       	std	Y+26, r1	; 0x1a
   13048:	19 8e       	std	Y+25, r1	; 0x19
socket():
   1304a:	a7 01       	movw	r20, r14
   1304c:	62 e0       	ldi	r22, 0x02	; 2
   1304e:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   13052:	81 e0       	ldi	r24, 0x01	; 1
   13054:	e2 cf       	rjmp	.-60     	; 0x1301a <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   13056:	88 31       	cpi	r24, 0x18	; 24
   13058:	81 f3       	breq	.-32     	; 0x1303a <EthernetUDP::begin(unsigned int)+0x34>
   1305a:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1305c:	18 30       	cpi	r17, 0x08	; 8
   1305e:	31 f7       	brne	.-52     	; 0x1302c <EthernetUDP::begin(unsigned int)+0x26>
   13060:	ed cf       	rjmp	.-38     	; 0x1303c <EthernetUDP::begin(unsigned int)+0x36>

00013062 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   13062:	cf 93       	push	r28
   13064:	df 93       	push	r29
   13066:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   13068:	8c 85       	ldd	r24, Y+12	; 0x0c
   1306a:	88 30       	cpi	r24, 0x08	; 8
   1306c:	21 f0       	breq	.+8      	; 0x13076 <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   1306e:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   13072:	88 e0       	ldi	r24, 0x08	; 8
   13074:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   13076:	df 91       	pop	r29
   13078:	cf 91       	pop	r28
   1307a:	08 95       	ret

0001307c <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   1307c:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   1307e:	fc 01       	movw	r30, r24
   13080:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   13082:	60 e2       	ldi	r22, 0x20	; 32
   13084:	70 e0       	ldi	r23, 0x00	; 0
   13086:	8c 2f       	mov	r24, r28
   13088:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1308c:	62 e0       	ldi	r22, 0x02	; 2
   1308e:	70 e0       	ldi	r23, 0x00	; 0
   13090:	8c 2f       	mov	r24, r28
   13092:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   13096:	84 fd       	sbrc	r24, 4
   13098:	11 c0       	rjmp	.+34     	; 0x130bc <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1309a:	62 e0       	ldi	r22, 0x02	; 2
   1309c:	70 e0       	ldi	r23, 0x00	; 0
   1309e:	8c 2f       	mov	r24, r28
   130a0:	0e 94 71 31 	call	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   130a4:	83 ff       	sbrs	r24, 3
   130a6:	f2 cf       	rjmp	.-28     	; 0x1308c <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   130a8:	48 e1       	ldi	r20, 0x18	; 24
   130aa:	62 e0       	ldi	r22, 0x02	; 2
   130ac:	70 e0       	ldi	r23, 0x00	; 0
   130ae:	8c 2f       	mov	r24, r28
   130b0:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   130b4:	90 e0       	ldi	r25, 0x00	; 0
   130b6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   130b8:	cf 91       	pop	r28
   130ba:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   130bc:	40 e1       	ldi	r20, 0x10	; 16
   130be:	62 e0       	ldi	r22, 0x02	; 2
   130c0:	70 e0       	ldi	r23, 0x00	; 0
   130c2:	8c 2f       	mov	r24, r28
   130c4:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   130c8:	81 e0       	ldi	r24, 0x01	; 1
   130ca:	90 e0       	ldi	r25, 0x00	; 0
   130cc:	f5 cf       	rjmp	.-22     	; 0x130b8 <EthernetUDP::endPacket()+0x3c>

000130ce <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   130ce:	1f 93       	push	r17
   130d0:	cf 93       	push	r28
   130d2:	df 93       	push	r29
   130d4:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   130d6:	dc 01       	movw	r26, r24
   130d8:	58 96       	adiw	r26, 0x18	; 24
   130da:	1c 92       	st	X, r1
   130dc:	1e 92       	st	-X, r1
   130de:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   130e0:	22 81       	ldd	r18, Z+2	; 0x02
   130e2:	21 11       	cpse	r18, r1
   130e4:	09 c0       	rjmp	.+18     	; 0x130f8 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   130e6:	23 81       	ldd	r18, Z+3	; 0x03
   130e8:	21 11       	cpse	r18, r1
   130ea:	06 c0       	rjmp	.+12     	; 0x130f8 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   130ec:	24 81       	ldd	r18, Z+4	; 0x04
   130ee:	21 11       	cpse	r18, r1
   130f0:	03 c0       	rjmp	.+6      	; 0x130f8 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   130f2:	25 81       	ldd	r18, Z+5	; 0x05
   130f4:	22 23       	and	r18, r18
   130f6:	39 f1       	breq	.+78     	; 0x13146 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   130f8:	41 15       	cp	r20, r1
   130fa:	51 05       	cpc	r21, r1
   130fc:	21 f1       	breq	.+72     	; 0x13146 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   130fe:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   13100:	dc 01       	movw	r26, r24
   13102:	1c 96       	adiw	r26, 0x0c	; 12
   13104:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   13106:	af 01       	movw	r20, r30
   13108:	4e 5f       	subi	r20, 0xFE	; 254
   1310a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1310c:	61 2f       	mov	r22, r17
   1310e:	62 95       	swap	r22
   13110:	66 0f       	add	r22, r22
   13112:	60 7e       	andi	r22, 0xE0	; 224
   13114:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   13116:	24 e0       	ldi	r18, 0x04	; 4
   13118:	30 e0       	ldi	r19, 0x00	; 0
   1311a:	8c e0       	ldi	r24, 0x0C	; 12
   1311c:	90 e0       	ldi	r25, 0x00	; 0
   1311e:	0e 94 2b 95 	call	0x12a56	; 0x12a56 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   13122:	4d 2f       	mov	r20, r29
   13124:	60 e1       	ldi	r22, 0x10	; 16
   13126:	70 e0       	ldi	r23, 0x00	; 0
   13128:	81 2f       	mov	r24, r17
   1312a:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1312e:	4c 2f       	mov	r20, r28
   13130:	61 e1       	ldi	r22, 0x11	; 17
   13132:	70 e0       	ldi	r23, 0x00	; 0
   13134:	81 2f       	mov	r24, r17
   13136:	0e 94 df 95 	call	0x12bbe	; 0x12bbe <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1313a:	81 e0       	ldi	r24, 0x01	; 1
   1313c:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   1313e:	df 91       	pop	r29
   13140:	cf 91       	pop	r28
   13142:	1f 91       	pop	r17
   13144:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   13146:	90 e0       	ldi	r25, 0x00	; 0
   13148:	80 e0       	ldi	r24, 0x00	; 0
   1314a:	f9 cf       	rjmp	.-14     	; 0x1313e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0001314c <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1314c:	fc 01       	movw	r30, r24
   1314e:	84 85       	ldd	r24, Z+12	; 0x0c
   13150:	88 30       	cpi	r24, 0x08	; 8
   13152:	21 f0       	breq	.+8      	; 0x1315c <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   13154:	63 e0       	ldi	r22, 0x03	; 3
   13156:	70 e0       	ldi	r23, 0x00	; 0
   13158:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1315c:	80 e0       	ldi	r24, 0x00	; 0
   1315e:	08 95       	ret

00013160 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   13160:	cf 93       	push	r28
   13162:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   13164:	fc 01       	movw	r30, r24
   13166:	24 85       	ldd	r18, Z+12	; 0x0c
   13168:	28 30       	cpi	r18, 0x08	; 8
   1316a:	d9 f0       	breq	.+54     	; 0x131a2 <EthernetClient::connected()+0x42>
   1316c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   1316e:	0e 94 a6 98 	call	0x1314c	; 0x1314c <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   13172:	84 31       	cpi	r24, 0x14	; 20
   13174:	89 f0       	breq	.+34     	; 0x13198 <EthernetClient::connected()+0x38>
   13176:	88 23       	and	r24, r24
   13178:	79 f0       	breq	.+30     	; 0x13198 <EthernetClient::connected()+0x38>
   1317a:	88 31       	cpi	r24, 0x18	; 24
   1317c:	69 f0       	breq	.+26     	; 0x13198 <EthernetClient::connected()+0x38>
   1317e:	21 e0       	ldi	r18, 0x01	; 1
   13180:	8c 31       	cpi	r24, 0x1C	; 28
   13182:	59 f4       	brne	.+22     	; 0x1319a <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   13184:	e8 81       	ld	r30, Y
   13186:	f9 81       	ldd	r31, Y+1	; 0x01
   13188:	00 84       	ldd	r0, Z+8	; 0x08
   1318a:	f1 85       	ldd	r31, Z+9	; 0x09
   1318c:	e0 2d       	mov	r30, r0
   1318e:	ce 01       	movw	r24, r28
   13190:	19 95       	eicall
   13192:	21 e0       	ldi	r18, 0x01	; 1
   13194:	89 2b       	or	r24, r25
   13196:	09 f4       	brne	.+2      	; 0x1319a <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   13198:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1319a:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   1319c:	df 91       	pop	r29
   1319e:	cf 91       	pop	r28
   131a0:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   131a2:	80 e0       	ldi	r24, 0x00	; 0
   131a4:	fb cf       	rjmp	.-10     	; 0x1319c <EthernetClient::connected()+0x3c>

000131a6 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   131a6:	cf 92       	push	r12
   131a8:	df 92       	push	r13
   131aa:	ef 92       	push	r14
   131ac:	ff 92       	push	r15
   131ae:	cf 93       	push	r28
   131b0:	df 93       	push	r29
   131b2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   131b4:	8c 85       	ldd	r24, Y+12	; 0x0c
   131b6:	88 30       	cpi	r24, 0x08	; 8
   131b8:	49 f1       	breq	.+82     	; 0x1320c <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   131ba:	68 e0       	ldi	r22, 0x08	; 8
   131bc:	70 e0       	ldi	r23, 0x00	; 0
   131be:	0e 94 5a 96 	call	0x12cb4	; 0x12cb4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   131c2:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   131c6:	6b 01       	movw	r12, r22
   131c8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   131ca:	ce 01       	movw	r24, r28
   131cc:	0e 94 a6 98 	call	0x1314c	; 0x1314c <EthernetClient::status()>
   131d0:	88 23       	and	r24, r24
   131d2:	91 f0       	breq	.+36     	; 0x131f8 <EthernetClient::stop()+0x52>
   131d4:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   131d8:	6c 19       	sub	r22, r12
   131da:	7d 09       	sbc	r23, r13
   131dc:	8e 09       	sbc	r24, r14
   131de:	9f 09       	sbc	r25, r15
   131e0:	68 3e       	cpi	r22, 0xE8	; 232
   131e2:	73 40       	sbci	r23, 0x03	; 3
   131e4:	81 05       	cpc	r24, r1
   131e6:	91 05       	cpc	r25, r1
   131e8:	38 f4       	brcc	.+14     	; 0x131f8 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   131ea:	61 e0       	ldi	r22, 0x01	; 1
   131ec:	70 e0       	ldi	r23, 0x00	; 0
   131ee:	80 e0       	ldi	r24, 0x00	; 0
   131f0:	90 e0       	ldi	r25, 0x00	; 0
   131f2:	0e 94 d5 88 	call	0x111aa	; 0x111aa <delay>
   131f6:	e9 cf       	rjmp	.-46     	; 0x131ca <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   131f8:	ce 01       	movw	r24, r28
   131fa:	0e 94 a6 98 	call	0x1314c	; 0x1314c <EthernetClient::status()>
   131fe:	88 23       	and	r24, r24
   13200:	19 f0       	breq	.+6      	; 0x13208 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   13202:	8c 85       	ldd	r24, Y+12	; 0x0c
   13204:	0e 94 c2 97 	call	0x12f84	; 0x12f84 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   13208:	88 e0       	ldi	r24, 0x08	; 8
   1320a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1320c:	df 91       	pop	r29
   1320e:	cf 91       	pop	r28
   13210:	ff 90       	pop	r15
   13212:	ef 90       	pop	r14
   13214:	df 90       	pop	r13
   13216:	cf 90       	pop	r12
   13218:	08 95       	ret

0001321a <localtime>:
localtime():
   1321a:	67 e4       	ldi	r22, 0x47	; 71
   1321c:	73 e1       	ldi	r23, 0x13	; 19
   1321e:	0e 94 14 99 	call	0x13228	; 0x13228 <localtime_r>
   13222:	87 e4       	ldi	r24, 0x47	; 71
   13224:	93 e1       	ldi	r25, 0x13	; 19
   13226:	08 95       	ret

00013228 <localtime_r>:
localtime_r():
   13228:	cf 92       	push	r12
   1322a:	df 92       	push	r13
   1322c:	ef 92       	push	r14
   1322e:	ff 92       	push	r15
   13230:	0f 93       	push	r16
   13232:	1f 93       	push	r17
   13234:	cf 93       	push	r28
   13236:	df 93       	push	r29
   13238:	00 d0       	rcall	.+0      	; 0x1323a <localtime_r+0x12>
   1323a:	1f 92       	push	r1
   1323c:	cd b7       	in	r28, 0x3d	; 61
   1323e:	de b7       	in	r29, 0x3e	; 62
   13240:	6c 01       	movw	r12, r24
   13242:	7b 01       	movw	r14, r22
   13244:	e0 91 5d 13 	lds	r30, 0x135D	; 0x80135d <__dst_ptr>
   13248:	f0 91 5e 13 	lds	r31, 0x135E	; 0x80135e <__dst_ptr+0x1>
   1324c:	0f ef       	ldi	r16, 0xFF	; 255
   1324e:	1f ef       	ldi	r17, 0xFF	; 255
   13250:	30 97       	sbiw	r30, 0x00	; 0
   13252:	21 f0       	breq	.+8      	; 0x1325c <localtime_r+0x34>
   13254:	63 e5       	ldi	r22, 0x53	; 83
   13256:	73 e1       	ldi	r23, 0x13	; 19
   13258:	19 95       	eicall
   1325a:	8c 01       	movw	r16, r24
   1325c:	f6 01       	movw	r30, r12
   1325e:	80 81       	ld	r24, Z
   13260:	91 81       	ldd	r25, Z+1	; 0x01
   13262:	a2 81       	ldd	r26, Z+2	; 0x02
   13264:	b3 81       	ldd	r27, Z+3	; 0x03
   13266:	40 91 53 13 	lds	r20, 0x1353	; 0x801353 <__utc_offset>
   1326a:	50 91 54 13 	lds	r21, 0x1354	; 0x801354 <__utc_offset+0x1>
   1326e:	60 91 55 13 	lds	r22, 0x1355	; 0x801355 <__utc_offset+0x2>
   13272:	70 91 56 13 	lds	r23, 0x1356	; 0x801356 <__utc_offset+0x3>
   13276:	84 0f       	add	r24, r20
   13278:	95 1f       	adc	r25, r21
   1327a:	a6 1f       	adc	r26, r22
   1327c:	b7 1f       	adc	r27, r23
   1327e:	10 16       	cp	r1, r16
   13280:	11 06       	cpc	r1, r17
   13282:	cc f0       	brlt	.+50     	; 0x132b6 <localtime_r+0x8e>
   13284:	89 83       	std	Y+1, r24	; 0x01
   13286:	9a 83       	std	Y+2, r25	; 0x02
   13288:	ab 83       	std	Y+3, r26	; 0x03
   1328a:	bc 83       	std	Y+4, r27	; 0x04
   1328c:	b7 01       	movw	r22, r14
   1328e:	ce 01       	movw	r24, r28
   13290:	01 96       	adiw	r24, 0x01	; 1
   13292:	0e 94 65 99 	call	0x132ca	; 0x132ca <gmtime_r>
   13296:	f7 01       	movw	r30, r14
   13298:	13 87       	std	Z+11, r17	; 0x0b
   1329a:	02 87       	std	Z+10, r16	; 0x0a
   1329c:	0f 90       	pop	r0
   1329e:	0f 90       	pop	r0
   132a0:	0f 90       	pop	r0
   132a2:	0f 90       	pop	r0
   132a4:	df 91       	pop	r29
   132a6:	cf 91       	pop	r28
   132a8:	1f 91       	pop	r17
   132aa:	0f 91       	pop	r16
   132ac:	ff 90       	pop	r15
   132ae:	ef 90       	pop	r14
   132b0:	df 90       	pop	r13
   132b2:	cf 90       	pop	r12
   132b4:	08 95       	ret
   132b6:	a8 01       	movw	r20, r16
   132b8:	01 2e       	mov	r0, r17
   132ba:	00 0c       	add	r0, r0
   132bc:	66 0b       	sbc	r22, r22
   132be:	77 0b       	sbc	r23, r23
   132c0:	84 0f       	add	r24, r20
   132c2:	95 1f       	adc	r25, r21
   132c4:	a6 1f       	adc	r26, r22
   132c6:	b7 1f       	adc	r27, r23
   132c8:	dd cf       	rjmp	.-70     	; 0x13284 <localtime_r+0x5c>

000132ca <gmtime_r>:
gmtime_r():
   132ca:	cf 92       	push	r12
   132cc:	df 92       	push	r13
   132ce:	ef 92       	push	r14
   132d0:	ff 92       	push	r15
   132d2:	0f 93       	push	r16
   132d4:	1f 93       	push	r17
   132d6:	cf 93       	push	r28
   132d8:	df 93       	push	r29
   132da:	00 d0       	rcall	.+0      	; 0x132dc <gmtime_r+0x12>
   132dc:	00 d0       	rcall	.+0      	; 0x132de <gmtime_r+0x14>
   132de:	1f 92       	push	r1
   132e0:	1f 92       	push	r1
   132e2:	cd b7       	in	r28, 0x3d	; 61
   132e4:	de b7       	in	r29, 0x3e	; 62
   132e6:	8b 01       	movw	r16, r22
   132e8:	fc 01       	movw	r30, r24
   132ea:	60 81       	ld	r22, Z
   132ec:	71 81       	ldd	r23, Z+1	; 0x01
   132ee:	82 81       	ldd	r24, Z+2	; 0x02
   132f0:	93 81       	ldd	r25, Z+3	; 0x03
   132f2:	20 e8       	ldi	r18, 0x80	; 128
   132f4:	31 e5       	ldi	r19, 0x51	; 81
   132f6:	41 e0       	ldi	r20, 0x01	; 1
   132f8:	50 e0       	ldi	r21, 0x00	; 0
   132fa:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
   132fe:	69 01       	movw	r12, r18
   13300:	7a 01       	movw	r14, r20
   13302:	2c e3       	ldi	r18, 0x3C	; 60
   13304:	30 e0       	ldi	r19, 0x00	; 0
   13306:	40 e0       	ldi	r20, 0x00	; 0
   13308:	50 e0       	ldi	r21, 0x00	; 0
   1330a:	0e 94 18 b2 	call	0x16430	; 0x16430 <__divmodsi4>
   1330e:	29 83       	std	Y+1, r18	; 0x01
   13310:	3a 83       	std	Y+2, r19	; 0x02
   13312:	4b 83       	std	Y+3, r20	; 0x03
   13314:	5c 83       	std	Y+4, r21	; 0x04
   13316:	89 81       	ldd	r24, Y+1	; 0x01
   13318:	9a 81       	ldd	r25, Y+2	; 0x02
   1331a:	ab 81       	ldd	r26, Y+3	; 0x03
   1331c:	bc 81       	ldd	r27, Y+4	; 0x04
   1331e:	f8 01       	movw	r30, r16
   13320:	60 83       	st	Z, r22
   13322:	6c e3       	ldi	r22, 0x3C	; 60
   13324:	70 e0       	ldi	r23, 0x00	; 0
   13326:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   1332a:	dc 01       	movw	r26, r24
   1332c:	f8 01       	movw	r30, r16
   1332e:	a1 83       	std	Z+1, r26	; 0x01
   13330:	62 83       	std	Z+2, r22	; 0x02
   13332:	c6 01       	movw	r24, r12
   13334:	06 96       	adiw	r24, 0x06	; 6
   13336:	67 e0       	ldi	r22, 0x07	; 7
   13338:	70 e0       	ldi	r23, 0x00	; 0
   1333a:	0e 94 ce b1 	call	0x1639c	; 0x1639c <__udivmodhi4>
   1333e:	84 83       	std	Z+4, r24	; 0x04
   13340:	2d ea       	ldi	r18, 0xAD	; 173
   13342:	3e e8       	ldi	r19, 0x8E	; 142
   13344:	40 e0       	ldi	r20, 0x00	; 0
   13346:	50 e0       	ldi	r21, 0x00	; 0
   13348:	c7 01       	movw	r24, r14
   1334a:	b6 01       	movw	r22, r12
   1334c:	0e 94 18 b2 	call	0x16430	; 0x16430 <__divmodsi4>
   13350:	29 83       	std	Y+1, r18	; 0x01
   13352:	3a 83       	std	Y+2, r19	; 0x02
   13354:	6d 83       	std	Y+5, r22	; 0x05
   13356:	7e 83       	std	Y+6, r23	; 0x06
   13358:	8f 83       	std	Y+7, r24	; 0x07
   1335a:	98 87       	std	Y+8, r25	; 0x08
   1335c:	89 81       	ldd	r24, Y+1	; 0x01
   1335e:	9a 81       	ldd	r25, Y+2	; 0x02
   13360:	24 e6       	ldi	r18, 0x64	; 100
   13362:	28 9f       	mul	r18, r24
   13364:	60 01       	movw	r12, r0
   13366:	29 9f       	mul	r18, r25
   13368:	d0 0c       	add	r13, r0
   1336a:	11 24       	eor	r1, r1
   1336c:	6d 81       	ldd	r22, Y+5	; 0x05
   1336e:	7e 81       	ldd	r23, Y+6	; 0x06
   13370:	8f 81       	ldd	r24, Y+7	; 0x07
   13372:	98 85       	ldd	r25, Y+8	; 0x08
   13374:	25 eb       	ldi	r18, 0xB5	; 181
   13376:	35 e0       	ldi	r19, 0x05	; 5
   13378:	40 e0       	ldi	r20, 0x00	; 0
   1337a:	50 e0       	ldi	r21, 0x00	; 0
   1337c:	0e 94 18 b2 	call	0x16430	; 0x16430 <__divmodsi4>
   13380:	29 83       	std	Y+1, r18	; 0x01
   13382:	3a 83       	std	Y+2, r19	; 0x02
   13384:	6d 83       	std	Y+5, r22	; 0x05
   13386:	7e 83       	std	Y+6, r23	; 0x06
   13388:	e9 80       	ldd	r14, Y+1	; 0x01
   1338a:	fa 80       	ldd	r15, Y+2	; 0x02
   1338c:	ee 0c       	add	r14, r14
   1338e:	ff 1c       	adc	r15, r15
   13390:	ee 0c       	add	r14, r14
   13392:	ff 1c       	adc	r15, r15
   13394:	ec 0c       	add	r14, r12
   13396:	fd 1c       	adc	r15, r13
   13398:	8d 81       	ldd	r24, Y+5	; 0x05
   1339a:	9e 81       	ldd	r25, Y+6	; 0x06
   1339c:	f5 e6       	ldi	r31, 0x65	; 101
   1339e:	ef 16       	cp	r14, r31
   133a0:	f1 04       	cpc	r15, r1
   133a2:	08 f4       	brcc	.+2      	; 0x133a6 <gmtime_r+0xdc>
   133a4:	3f c0       	rjmp	.+126    	; 0x13424 <gmtime_r+0x15a>
   133a6:	01 96       	adiw	r24, 0x01	; 1
   133a8:	21 e0       	ldi	r18, 0x01	; 1
   133aa:	30 e0       	ldi	r19, 0x00	; 0
   133ac:	a9 01       	movw	r20, r18
   133ae:	44 59       	subi	r20, 0x94	; 148
   133b0:	5e 4f       	sbci	r21, 0xFE	; 254
   133b2:	48 17       	cp	r20, r24
   133b4:	59 07       	cpc	r21, r25
   133b6:	60 f4       	brcc	.+24     	; 0x133d0 <gmtime_r+0x106>
   133b8:	6d e6       	ldi	r22, 0x6D	; 109
   133ba:	71 e0       	ldi	r23, 0x01	; 1
   133bc:	82 1b       	sub	r24, r18
   133be:	93 0b       	sbc	r25, r19
   133c0:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   133c4:	dc 01       	movw	r26, r24
   133c6:	e6 0e       	add	r14, r22
   133c8:	f7 1e       	adc	r15, r23
   133ca:	cd 01       	movw	r24, r26
   133cc:	30 e0       	ldi	r19, 0x00	; 0
   133ce:	20 e0       	ldi	r18, 0x00	; 0
   133d0:	44 e6       	ldi	r20, 0x64	; 100
   133d2:	e4 0e       	add	r14, r20
   133d4:	f1 1c       	adc	r15, r1
   133d6:	f8 01       	movw	r30, r16
   133d8:	f7 82       	std	Z+7, r15	; 0x07
   133da:	e6 82       	std	Z+6, r14	; 0x06
   133dc:	91 87       	std	Z+9, r25	; 0x09
   133de:	80 87       	std	Z+8, r24	; 0x08
   133e0:	25 5c       	subi	r18, 0xC5	; 197
   133e2:	3f 4f       	sbci	r19, 0xFF	; 255
   133e4:	82 17       	cp	r24, r18
   133e6:	93 07       	cpc	r25, r19
   133e8:	38 f5       	brcc	.+78     	; 0x13438 <gmtime_r+0x16e>
   133ea:	6f e1       	ldi	r22, 0x1F	; 31
   133ec:	70 e0       	ldi	r23, 0x00	; 0
   133ee:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   133f2:	dc 01       	movw	r26, r24
   133f4:	f8 01       	movw	r30, r16
   133f6:	65 83       	std	Z+5, r22	; 0x05
   133f8:	a3 83       	std	Z+3, r26	; 0x03
   133fa:	f8 01       	movw	r30, r16
   133fc:	13 86       	std	Z+11, r1	; 0x0b
   133fe:	12 86       	std	Z+10, r1	; 0x0a
   13400:	83 81       	ldd	r24, Z+3	; 0x03
   13402:	8f 5f       	subi	r24, 0xFF	; 255
   13404:	83 83       	std	Z+3, r24	; 0x03
   13406:	28 96       	adiw	r28, 0x08	; 8
   13408:	0f b6       	in	r0, 0x3f	; 63
   1340a:	f8 94       	cli
   1340c:	de bf       	out	0x3e, r29	; 62
   1340e:	0f be       	out	0x3f, r0	; 63
   13410:	cd bf       	out	0x3d, r28	; 61
   13412:	df 91       	pop	r29
   13414:	cf 91       	pop	r28
   13416:	1f 91       	pop	r17
   13418:	0f 91       	pop	r16
   1341a:	ff 90       	pop	r15
   1341c:	ef 90       	pop	r14
   1341e:	df 90       	pop	r13
   13420:	cf 90       	pop	r12
   13422:	08 95       	ret
   13424:	51 e0       	ldi	r21, 0x01	; 1
   13426:	40 e0       	ldi	r20, 0x00	; 0
   13428:	24 e6       	ldi	r18, 0x64	; 100
   1342a:	e2 16       	cp	r14, r18
   1342c:	f1 04       	cpc	r15, r1
   1342e:	09 f4       	brne	.+2      	; 0x13432 <gmtime_r+0x168>
   13430:	50 e0       	ldi	r21, 0x00	; 0
   13432:	25 2f       	mov	r18, r21
   13434:	34 2f       	mov	r19, r20
   13436:	ba cf       	rjmp	.-140    	; 0x133ac <gmtime_r+0xe2>
   13438:	69 e9       	ldi	r22, 0x99	; 153
   1343a:	70 e0       	ldi	r23, 0x00	; 0
   1343c:	82 1b       	sub	r24, r18
   1343e:	93 0b       	sbc	r25, r19
   13440:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   13444:	dc 01       	movw	r26, r24
   13446:	26 2f       	mov	r18, r22
   13448:	22 0f       	add	r18, r18
   1344a:	22 0f       	add	r18, r18
   1344c:	f2 2e       	mov	r15, r18
   1344e:	f6 0e       	add	r15, r22
   13450:	6d e3       	ldi	r22, 0x3D	; 61
   13452:	70 e0       	ldi	r23, 0x00	; 0
   13454:	cd 01       	movw	r24, r26
   13456:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   1345a:	dc 01       	movw	r26, r24
   1345c:	e6 2e       	mov	r14, r22
   1345e:	ee 0c       	add	r14, r14
   13460:	6f e1       	ldi	r22, 0x1F	; 31
   13462:	70 e0       	ldi	r23, 0x00	; 0
   13464:	cd 01       	movw	r24, r26
   13466:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   1346a:	dc 01       	movw	r26, r24
   1346c:	22 e0       	ldi	r18, 0x02	; 2
   1346e:	26 0f       	add	r18, r22
   13470:	2f 0d       	add	r18, r15
   13472:	2e 0d       	add	r18, r14
   13474:	f8 01       	movw	r30, r16
   13476:	25 83       	std	Z+5, r18	; 0x05
   13478:	bf cf       	rjmp	.-130    	; 0x133f8 <gmtime_r+0x12e>

0001347a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1347a:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1347c:	80 81       	ld	r24, Z
   1347e:	91 81       	ldd	r25, Z+1	; 0x01
   13480:	87 30       	cpi	r24, 0x07	; 7
   13482:	91 05       	cpc	r25, r1
   13484:	38 f4       	brcc	.+14     	; 0x13494 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   13486:	85 30       	cpi	r24, 0x05	; 5
   13488:	91 05       	cpc	r25, r1
   1348a:	88 f4       	brcc	.+34     	; 0x134ae <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1348c:	03 97       	sbiw	r24, 0x03	; 3
   1348e:	a0 f4       	brcc	.+40     	; 0x134b8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   13490:	80 e0       	ldi	r24, 0x00	; 0
   13492:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   13494:	87 30       	cpi	r24, 0x07	; 7
   13496:	91 05       	cpc	r25, r1
   13498:	61 f0       	breq	.+24     	; 0x134b2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   1349a:	0a 97       	sbiw	r24, 0x0a	; 10
   1349c:	c9 f7       	brne	.-14     	; 0x13490 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   1349e:	62 81       	ldd	r22, Z+2	; 0x02
   134a0:	73 81       	ldd	r23, Z+3	; 0x03
   134a2:	84 81       	ldd	r24, Z+4	; 0x04
   134a4:	95 81       	ldd	r25, Z+5	; 0x05
   134a6:	0e 94 37 b3 	call	0x1666e	; 0x1666e <__fixunssfsi>
   134aa:	86 2f       	mov	r24, r22
   134ac:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   134ae:	82 81       	ldd	r24, Z+2	; 0x02
   134b0:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   134b2:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   134b4:	81 95       	neg	r24
   134b6:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   134b8:	02 80       	ldd	r0, Z+2	; 0x02
   134ba:	f3 81       	ldd	r31, Z+3	; 0x03
   134bc:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   134be:	30 97       	sbiw	r30, 0x00	; 0
   134c0:	39 f3       	breq	.-50     	; 0x13490 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   134c2:	80 81       	ld	r24, Z
   134c4:	84 37       	cpi	r24, 0x74	; 116
   134c6:	c9 f0       	breq	.+50     	; 0x134fa <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   134c8:	8b 32       	cpi	r24, 0x2B	; 43
   134ca:	89 f0       	breq	.+34     	; 0x134ee <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   134cc:	8d 32       	cpi	r24, 0x2D	; 45
   134ce:	81 f4       	brne	.+32     	; 0x134f0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   134d0:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   134d2:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   134d4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   134d6:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   134d8:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   134da:	30 ed       	ldi	r19, 0xD0	; 208
   134dc:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   134de:	3a 30       	cpi	r19, 0x0A	; 10
   134e0:	48 f4       	brcc	.+18     	; 0x134f4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   134e2:	82 9f       	mul	r24, r18
   134e4:	60 0d       	add	r22, r0
   134e6:	11 24       	eor	r1, r1
   134e8:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   134ea:	80 53       	subi	r24, 0x30	; 48
   134ec:	f5 cf       	rjmp	.-22     	; 0x134d8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   134ee:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   134f0:	90 e0       	ldi	r25, 0x00	; 0
   134f2:	f0 cf       	rjmp	.-32     	; 0x134d4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   134f4:	91 11       	cpse	r25, r1
   134f6:	de cf       	rjmp	.-68     	; 0x134b4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   134f8:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   134fa:	81 e0       	ldi	r24, 0x01	; 1
   134fc:	fd cf       	rjmp	.-6      	; 0x134f8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

000134fe <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7041():
   134fe:	0f 93       	push	r16
   13500:	1f 93       	push	r17
   13502:	cf 93       	push	r28
   13504:	df 93       	push	r29
   13506:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <Serial+0x3>
   1350a:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <Serial+0x2>
   1350e:	88 ee       	ldi	r24, 0xE8	; 232
   13510:	93 e0       	ldi	r25, 0x03	; 3
   13512:	a0 e0       	ldi	r26, 0x00	; 0
   13514:	b0 e0       	ldi	r27, 0x00	; 0
   13516:	80 93 8d 0b 	sts	0x0B8D, r24	; 0x800b8d <Serial+0x4>
   1351a:	90 93 8e 0b 	sts	0x0B8E, r25	; 0x800b8e <Serial+0x5>
   1351e:	a0 93 8f 0b 	sts	0x0B8F, r26	; 0x800b8f <Serial+0x6>
   13522:	b0 93 90 0b 	sts	0x0B90, r27	; 0x800b90 <Serial+0x7>
   13526:	2a e5       	ldi	r18, 0x5A	; 90
   13528:	32 e0       	ldi	r19, 0x02	; 2
   1352a:	30 93 8a 0b 	sts	0x0B8A, r19	; 0x800b8a <Serial+0x1>
   1352e:	20 93 89 0b 	sts	0x0B89, r18	; 0x800b89 <Serial>
   13532:	25 ec       	ldi	r18, 0xC5	; 197
   13534:	30 e0       	ldi	r19, 0x00	; 0
   13536:	30 93 96 0b 	sts	0x0B96, r19	; 0x800b96 <Serial+0xd>
   1353a:	20 93 95 0b 	sts	0x0B95, r18	; 0x800b95 <Serial+0xc>
   1353e:	24 ec       	ldi	r18, 0xC4	; 196
   13540:	30 e0       	ldi	r19, 0x00	; 0
   13542:	30 93 98 0b 	sts	0x0B98, r19	; 0x800b98 <Serial+0xf>
   13546:	20 93 97 0b 	sts	0x0B97, r18	; 0x800b97 <Serial+0xe>
   1354a:	20 ec       	ldi	r18, 0xC0	; 192
   1354c:	30 e0       	ldi	r19, 0x00	; 0
   1354e:	30 93 9a 0b 	sts	0x0B9A, r19	; 0x800b9a <Serial+0x11>
   13552:	20 93 99 0b 	sts	0x0B99, r18	; 0x800b99 <Serial+0x10>
   13556:	21 ec       	ldi	r18, 0xC1	; 193
   13558:	30 e0       	ldi	r19, 0x00	; 0
   1355a:	30 93 9c 0b 	sts	0x0B9C, r19	; 0x800b9c <Serial+0x13>
   1355e:	20 93 9b 0b 	sts	0x0B9B, r18	; 0x800b9b <Serial+0x12>
   13562:	22 ec       	ldi	r18, 0xC2	; 194
   13564:	30 e0       	ldi	r19, 0x00	; 0
   13566:	30 93 9e 0b 	sts	0x0B9E, r19	; 0x800b9e <Serial+0x15>
   1356a:	20 93 9d 0b 	sts	0x0B9D, r18	; 0x800b9d <Serial+0x14>
   1356e:	26 ec       	ldi	r18, 0xC6	; 198
   13570:	30 e0       	ldi	r19, 0x00	; 0
   13572:	30 93 a0 0b 	sts	0x0BA0, r19	; 0x800ba0 <Serial+0x17>
   13576:	20 93 9f 0b 	sts	0x0B9F, r18	; 0x800b9f <Serial+0x16>
   1357a:	10 92 a2 0b 	sts	0x0BA2, r1	; 0x800ba2 <Serial+0x19>
   1357e:	10 92 a3 0b 	sts	0x0BA3, r1	; 0x800ba3 <Serial+0x1a>
   13582:	10 92 a4 0b 	sts	0x0BA4, r1	; 0x800ba4 <Serial+0x1b>
   13586:	10 92 a5 0b 	sts	0x0BA5, r1	; 0x800ba5 <Serial+0x1c>
   1358a:	c2 ee       	ldi	r28, 0xE2	; 226
   1358c:	d2 e0       	ldi	r29, 0x02	; 2
   1358e:	d0 93 4d 11 	sts	0x114D, r29	; 0x80114d <_ZL11INADDR_NONE.lto_priv.203+0x1>
   13592:	c0 93 4c 11 	sts	0x114C, r28	; 0x80114c <_ZL11INADDR_NONE.lto_priv.203>
   13596:	10 92 4e 11 	sts	0x114E, r1	; 0x80114e <_ZL11INADDR_NONE.lto_priv.203+0x2>
   1359a:	10 92 4f 11 	sts	0x114F, r1	; 0x80114f <_ZL11INADDR_NONE.lto_priv.203+0x3>
   1359e:	10 92 50 11 	sts	0x1150, r1	; 0x801150 <_ZL11INADDR_NONE.lto_priv.203+0x4>
   135a2:	10 92 51 11 	sts	0x1151, r1	; 0x801151 <_ZL11INADDR_NONE.lto_priv.203+0x5>
   135a6:	10 92 18 0e 	sts	0x0E18, r1	; 0x800e18 <Wire+0x3>
   135aa:	10 92 17 0e 	sts	0x0E17, r1	; 0x800e17 <Wire+0x2>
   135ae:	80 93 19 0e 	sts	0x0E19, r24	; 0x800e19 <Wire+0x4>
   135b2:	90 93 1a 0e 	sts	0x0E1A, r25	; 0x800e1a <Wire+0x5>
   135b6:	a0 93 1b 0e 	sts	0x0E1B, r26	; 0x800e1b <Wire+0x6>
   135ba:	b0 93 1c 0e 	sts	0x0E1C, r27	; 0x800e1c <Wire+0x7>
   135be:	8c e6       	ldi	r24, 0x6C	; 108
   135c0:	92 e0       	ldi	r25, 0x02	; 2
   135c2:	90 93 16 0e 	sts	0x0E16, r25	; 0x800e16 <Wire+0x1>
   135c6:	80 93 15 0e 	sts	0x0E15, r24	; 0x800e15 <Wire>
   135ca:	d0 93 53 11 	sts	0x1153, r29	; 0x801153 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   135ce:	c0 93 52 11 	sts	0x1152, r28	; 0x801152 <_ZL11INADDR_NONE.lto_priv.202>
   135d2:	10 92 54 11 	sts	0x1154, r1	; 0x801154 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   135d6:	10 92 55 11 	sts	0x1155, r1	; 0x801155 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   135da:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   135de:	10 92 57 11 	sts	0x1157, r1	; 0x801157 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   135e2:	80 e5       	ldi	r24, 0x50	; 80
   135e4:	80 93 58 11 	sts	0x1158, r24	; 0x801158 <wiznet_SPI_settings>
   135e8:	81 e0       	ldi	r24, 0x01	; 1
   135ea:	80 93 59 11 	sts	0x1159, r24	; 0x801159 <wiznet_SPI_settings+0x1>
   135ee:	d0 93 5b 11 	sts	0x115B, r29	; 0x80115b <_ZL11INADDR_NONE.lto_priv.201+0x1>
   135f2:	c0 93 5a 11 	sts	0x115A, r28	; 0x80115a <_ZL11INADDR_NONE.lto_priv.201>
   135f6:	10 92 5c 11 	sts	0x115C, r1	; 0x80115c <_ZL11INADDR_NONE.lto_priv.201+0x2>
   135fa:	10 92 5d 11 	sts	0x115D, r1	; 0x80115d <_ZL11INADDR_NONE.lto_priv.201+0x3>
   135fe:	10 92 5e 11 	sts	0x115E, r1	; 0x80115e <_ZL11INADDR_NONE.lto_priv.201+0x4>
   13602:	10 92 5f 11 	sts	0x115F, r1	; 0x80115f <_ZL11INADDR_NONE.lto_priv.201+0x5>
   13606:	d0 93 61 11 	sts	0x1161, r29	; 0x801161 <_ZL11INADDR_NONE.lto_priv.200+0x1>
   1360a:	c0 93 60 11 	sts	0x1160, r28	; 0x801160 <_ZL11INADDR_NONE.lto_priv.200>
   1360e:	10 92 62 11 	sts	0x1162, r1	; 0x801162 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   13612:	10 92 63 11 	sts	0x1163, r1	; 0x801163 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   13616:	10 92 64 11 	sts	0x1164, r1	; 0x801164 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   1361a:	10 92 65 11 	sts	0x1165, r1	; 0x801165 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   1361e:	d0 93 67 11 	sts	0x1167, r29	; 0x801167 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   13622:	c0 93 66 11 	sts	0x1166, r28	; 0x801166 <_ZL11INADDR_NONE.lto_priv.199>
   13626:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <_ZL11INADDR_NONE.lto_priv.199+0x2>
   1362a:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <_ZL11INADDR_NONE.lto_priv.199+0x3>
   1362e:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <_ZL11INADDR_NONE.lto_priv.199+0x4>
   13632:	10 92 6b 11 	sts	0x116B, r1	; 0x80116b <_ZL11INADDR_NONE.lto_priv.199+0x5>
   13636:	d0 93 6d 11 	sts	0x116D, r29	; 0x80116d <_ZL11INADDR_NONE.lto_priv.198+0x1>
   1363a:	c0 93 6c 11 	sts	0x116C, r28	; 0x80116c <_ZL11INADDR_NONE.lto_priv.198>
   1363e:	10 92 6e 11 	sts	0x116E, r1	; 0x80116e <_ZL11INADDR_NONE.lto_priv.198+0x2>
   13642:	10 92 6f 11 	sts	0x116F, r1	; 0x80116f <_ZL11INADDR_NONE.lto_priv.198+0x3>
   13646:	10 92 70 11 	sts	0x1170, r1	; 0x801170 <_ZL11INADDR_NONE.lto_priv.198+0x4>
   1364a:	10 92 71 11 	sts	0x1171, r1	; 0x801171 <_ZL11INADDR_NONE.lto_priv.198+0x5>
   1364e:	d0 93 73 11 	sts	0x1173, r29	; 0x801173 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   13652:	c0 93 72 11 	sts	0x1172, r28	; 0x801172 <_ZL11INADDR_NONE.lto_priv.197>
   13656:	10 92 74 11 	sts	0x1174, r1	; 0x801174 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   1365a:	10 92 75 11 	sts	0x1175, r1	; 0x801175 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   1365e:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   13662:	10 92 77 11 	sts	0x1177, r1	; 0x801177 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   13666:	d0 93 27 0c 	sts	0x0C27, r29	; 0x800c27 <Ethernet+0x1>
   1366a:	c0 93 26 0c 	sts	0x0C26, r28	; 0x800c26 <Ethernet>
   1366e:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <Ethernet+0x2>
   13672:	10 92 29 0c 	sts	0x0C29, r1	; 0x800c29 <Ethernet+0x3>
   13676:	10 92 2a 0c 	sts	0x0C2A, r1	; 0x800c2a <Ethernet+0x4>
   1367a:	10 92 2b 0c 	sts	0x0C2B, r1	; 0x800c2b <Ethernet+0x5>
   1367e:	10 92 31 0c 	sts	0x0C31, r1	; 0x800c31 <Ethernet+0xb>
   13682:	10 92 30 0c 	sts	0x0C30, r1	; 0x800c30 <Ethernet+0xa>
   13686:	8a e0       	ldi	r24, 0x0A	; 10
   13688:	80 93 32 0c 	sts	0x0C32, r24	; 0x800c32 <Ethernet+0xc>
   1368c:	d0 93 34 0c 	sts	0x0C34, r29	; 0x800c34 <_ZL11INADDR_NONE.lto_priv.196+0x1>
   13690:	c0 93 33 0c 	sts	0x0C33, r28	; 0x800c33 <_ZL11INADDR_NONE.lto_priv.196>
   13694:	10 92 35 0c 	sts	0x0C35, r1	; 0x800c35 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   13698:	10 92 36 0c 	sts	0x0C36, r1	; 0x800c36 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   1369c:	10 92 37 0c 	sts	0x0C37, r1	; 0x800c37 <_ZL11INADDR_NONE.lto_priv.196+0x4>
   136a0:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <_ZL11INADDR_NONE.lto_priv.196+0x5>
   136a4:	d0 93 79 11 	sts	0x1179, r29	; 0x801179 <_ZL11INADDR_NONE.lto_priv.195+0x1>
   136a8:	c0 93 78 11 	sts	0x1178, r28	; 0x801178 <_ZL11INADDR_NONE.lto_priv.195>
   136ac:	10 92 7a 11 	sts	0x117A, r1	; 0x80117a <_ZL11INADDR_NONE.lto_priv.195+0x2>
   136b0:	10 92 7b 11 	sts	0x117B, r1	; 0x80117b <_ZL11INADDR_NONE.lto_priv.195+0x3>
   136b4:	10 92 7c 11 	sts	0x117C, r1	; 0x80117c <_ZL11INADDR_NONE.lto_priv.195+0x4>
   136b8:	10 92 7d 11 	sts	0x117D, r1	; 0x80117d <_ZL11INADDR_NONE.lto_priv.195+0x5>
   136bc:	8a e0       	ldi	r24, 0x0A	; 10
   136be:	90 e0       	ldi	r25, 0x00	; 0
   136c0:	0e 94 53 ac 	call	0x158a6	; 0x158a6 <malloc>
   136c4:	90 93 3a 0c 	sts	0x0C3A, r25	; 0x800c3a <array_pids+0x1>
   136c8:	80 93 39 0c 	sts	0x0C39, r24	; 0x800c39 <array_pids>
   136cc:	d0 93 7f 11 	sts	0x117F, r29	; 0x80117f <_ZL11INADDR_NONE.lto_priv.194+0x1>
   136d0:	c0 93 7e 11 	sts	0x117E, r28	; 0x80117e <_ZL11INADDR_NONE.lto_priv.194>
   136d4:	10 92 80 11 	sts	0x1180, r1	; 0x801180 <_ZL11INADDR_NONE.lto_priv.194+0x2>
   136d8:	10 92 81 11 	sts	0x1181, r1	; 0x801181 <_ZL11INADDR_NONE.lto_priv.194+0x3>
   136dc:	10 92 82 11 	sts	0x1182, r1	; 0x801182 <_ZL11INADDR_NONE.lto_priv.194+0x4>
   136e0:	10 92 83 11 	sts	0x1183, r1	; 0x801183 <_ZL11INADDR_NONE.lto_priv.194+0x5>
   136e4:	d0 93 85 11 	sts	0x1185, r29	; 0x801185 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   136e8:	c0 93 84 11 	sts	0x1184, r28	; 0x801184 <_ZL11INADDR_NONE.lto_priv.193>
   136ec:	10 92 86 11 	sts	0x1186, r1	; 0x801186 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   136f0:	10 92 87 11 	sts	0x1187, r1	; 0x801187 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   136f4:	10 92 88 11 	sts	0x1188, r1	; 0x801188 <_ZL11INADDR_NONE.lto_priv.193+0x4>
   136f8:	10 92 89 11 	sts	0x1189, r1	; 0x801189 <_ZL11INADDR_NONE.lto_priv.193+0x5>
   136fc:	8b e5       	ldi	r24, 0x5B	; 91
   136fe:	97 e0       	ldi	r25, 0x07	; 7
   13700:	90 93 60 0c 	sts	0x0C60, r25	; 0x800c60 <device+0x25>
   13704:	80 93 5f 0c 	sts	0x0C5F, r24	; 0x800c5f <device+0x24>
   13708:	d0 93 3a 13 	sts	0x133A, r29	; 0x80133a <_ZL11INADDR_NONE.lto_priv.192+0x1>
   1370c:	c0 93 39 13 	sts	0x1339, r28	; 0x801339 <_ZL11INADDR_NONE.lto_priv.192>
   13710:	10 92 3b 13 	sts	0x133B, r1	; 0x80133b <_ZL11INADDR_NONE.lto_priv.192+0x2>
   13714:	10 92 3c 13 	sts	0x133C, r1	; 0x80133c <_ZL11INADDR_NONE.lto_priv.192+0x3>
   13718:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <_ZL11INADDR_NONE.lto_priv.192+0x4>
   1371c:	10 92 3e 13 	sts	0x133E, r1	; 0x80133e <_ZL11INADDR_NONE.lto_priv.192+0x5>
   13720:	88 e1       	ldi	r24, 0x18	; 24
   13722:	80 93 71 10 	sts	0x1071, r24	; 0x801071 <swSPI+0x4>
   13726:	8a e1       	ldi	r24, 0x1A	; 26
   13728:	80 93 70 10 	sts	0x1070, r24	; 0x801070 <swSPI+0x3>
   1372c:	89 e1       	ldi	r24, 0x19	; 25
   1372e:	80 93 72 10 	sts	0x1072, r24	; 0x801072 <swSPI+0x5>
   13732:	82 e0       	ldi	r24, 0x02	; 2
   13734:	80 93 6f 10 	sts	0x106F, r24	; 0x80106f <swSPI+0x2>
   13738:	10 92 6d 10 	sts	0x106D, r1	; 0x80106d <swSPI>
   1373c:	10 92 6e 10 	sts	0x106E, r1	; 0x80106e <swSPI+0x1>
   13740:	10 92 73 10 	sts	0x1073, r1	; 0x801073 <swSPI+0x6>
   13744:	60 e0       	ldi	r22, 0x00	; 0
   13746:	89 e1       	ldi	r24, 0x19	; 25
   13748:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
   1374c:	80 e1       	ldi	r24, 0x10	; 16
   1374e:	80 93 6b 10 	sts	0x106B, r24	; 0x80106b <now+0x5>
   13752:	8c e1       	ldi	r24, 0x1C	; 28
   13754:	80 93 6a 10 	sts	0x106A, r24	; 0x80106a <now+0x4>
   13758:	86 e0       	ldi	r24, 0x06	; 6
   1375a:	80 93 69 10 	sts	0x1069, r24	; 0x801069 <now+0x3>
   1375e:	40 e0       	ldi	r20, 0x00	; 0
   13760:	81 e6       	ldi	r24, 0x61	; 97
   13762:	97 e9       	ldi	r25, 0x97	; 151
   13764:	e3 e9       	ldi	r30, 0x93	; 147
   13766:	fe ef       	ldi	r31, 0xFE	; 254
   13768:	54 2f       	mov	r21, r20
   1376a:	53 70       	andi	r21, 0x03	; 3
   1376c:	21 e0       	ldi	r18, 0x01	; 1
   1376e:	09 f0       	breq	.+2      	; 0x13772 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x274>
   13770:	20 e0       	ldi	r18, 0x00	; 0
   13772:	61 e0       	ldi	r22, 0x01	; 1
   13774:	64 0f       	add	r22, r20
   13776:	30 e0       	ldi	r19, 0x00	; 0
   13778:	d9 01       	movw	r26, r18
   1377a:	a3 59       	subi	r26, 0x93	; 147
   1377c:	be 4f       	sbci	r27, 0xFE	; 254
   1377e:	8a 17       	cp	r24, r26
   13780:	9b 07       	cpc	r25, r27
   13782:	38 f0       	brcs	.+14     	; 0x13792 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x294>
   13784:	af 01       	movw	r20, r30
   13786:	42 1b       	sub	r20, r18
   13788:	53 0b       	sbc	r21, r19
   1378a:	84 0f       	add	r24, r20
   1378c:	95 1f       	adc	r25, r21
   1378e:	46 2f       	mov	r20, r22
   13790:	eb cf       	rjmp	.-42     	; 0x13768 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x26a>
   13792:	40 93 66 10 	sts	0x1066, r20	; 0x801066 <now>
   13796:	21 e0       	ldi	r18, 0x01	; 1
   13798:	62 2f       	mov	r22, r18
   1379a:	61 50       	subi	r22, 0x01	; 1
   1379c:	77 0b       	sbc	r23, r23
   1379e:	fb 01       	movw	r30, r22
   137a0:	e3 53       	subi	r30, 0x33	; 51
   137a2:	f5 4c       	sbci	r31, 0xC5	; 197
   137a4:	e4 91       	lpm	r30, Z
   137a6:	51 11       	cpse	r21, r1
   137a8:	03 c0       	rjmp	.+6      	; 0x137b0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x2b2>
   137aa:	22 30       	cpi	r18, 0x02	; 2
   137ac:	09 f4       	brne	.+2      	; 0x137b0 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x2b2>
   137ae:	ef 5f       	subi	r30, 0xFF	; 255
   137b0:	f0 e0       	ldi	r31, 0x00	; 0
   137b2:	31 e0       	ldi	r19, 0x01	; 1
   137b4:	32 0f       	add	r19, r18
   137b6:	8e 17       	cp	r24, r30
   137b8:	9f 07       	cpc	r25, r31
   137ba:	20 f0       	brcs	.+8      	; 0x137c4 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x2c6>
   137bc:	8e 1b       	sub	r24, r30
   137be:	9f 0b       	sbc	r25, r31
   137c0:	23 2f       	mov	r18, r19
   137c2:	ea cf       	rjmp	.-44     	; 0x13798 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x29a>
   137c4:	20 93 67 10 	sts	0x1067, r18	; 0x801067 <now+0x1>
   137c8:	8f 5f       	subi	r24, 0xFF	; 255
   137ca:	80 93 68 10 	sts	0x1068, r24	; 0x801068 <now+0x2>
   137ce:	10 92 2f 13 	sts	0x132F, r1	; 0x80132f <ethClient+0x3>
   137d2:	10 92 2e 13 	sts	0x132E, r1	; 0x80132e <ethClient+0x2>
   137d6:	48 ee       	ldi	r20, 0xE8	; 232
   137d8:	53 e0       	ldi	r21, 0x03	; 3
   137da:	60 e0       	ldi	r22, 0x00	; 0
   137dc:	70 e0       	ldi	r23, 0x00	; 0
   137de:	40 93 30 13 	sts	0x1330, r20	; 0x801330 <ethClient+0x4>
   137e2:	50 93 31 13 	sts	0x1331, r21	; 0x801331 <ethClient+0x5>
   137e6:	60 93 32 13 	sts	0x1332, r22	; 0x801332 <ethClient+0x6>
   137ea:	70 93 33 13 	sts	0x1333, r23	; 0x801333 <ethClient+0x7>
   137ee:	80 ec       	ldi	r24, 0xC0	; 192
   137f0:	92 e0       	ldi	r25, 0x02	; 2
   137f2:	90 93 2d 13 	sts	0x132D, r25	; 0x80132d <ethClient+0x1>
   137f6:	80 93 2c 13 	sts	0x132C, r24	; 0x80132c <ethClient>
   137fa:	88 e0       	ldi	r24, 0x08	; 8
   137fc:	80 93 38 13 	sts	0x1338, r24	; 0x801338 <ethClient+0xc>
   13800:	10 92 4e 10 	sts	0x104E, r1	; 0x80104e <udpClient+0x3>
   13804:	10 92 4d 10 	sts	0x104D, r1	; 0x80104d <udpClient+0x2>
   13808:	40 93 4f 10 	sts	0x104F, r20	; 0x80104f <udpClient+0x4>
   1380c:	50 93 50 10 	sts	0x1050, r21	; 0x801050 <udpClient+0x5>
   13810:	60 93 51 10 	sts	0x1051, r22	; 0x801051 <udpClient+0x6>
   13814:	70 93 52 10 	sts	0x1052, r23	; 0x801052 <udpClient+0x7>
   13818:	28 e9       	ldi	r18, 0x98	; 152
   1381a:	32 e0       	ldi	r19, 0x02	; 2
   1381c:	30 93 4c 10 	sts	0x104C, r19	; 0x80104c <udpClient+0x1>
   13820:	20 93 4b 10 	sts	0x104B, r18	; 0x80104b <udpClient>
   13824:	80 93 57 10 	sts	0x1057, r24	; 0x801057 <udpClient+0xc>
   13828:	82 ee       	ldi	r24, 0xE2	; 226
   1382a:	92 e0       	ldi	r25, 0x02	; 2
   1382c:	90 93 5b 10 	sts	0x105B, r25	; 0x80105b <udpClient+0x10>
   13830:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <udpClient+0xf>
   13834:	10 92 5c 10 	sts	0x105C, r1	; 0x80105c <udpClient+0x11>
   13838:	10 92 5d 10 	sts	0x105D, r1	; 0x80105d <udpClient+0x12>
   1383c:	10 92 5e 10 	sts	0x105E, r1	; 0x80105e <udpClient+0x13>
   13840:	10 92 5f 10 	sts	0x105F, r1	; 0x80105f <udpClient+0x14>
   13844:	90 93 3e 10 	sts	0x103E, r25	; 0x80103e <mqtt_client+0x210>
   13848:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <mqtt_client+0x20f>
   1384c:	10 92 3f 10 	sts	0x103F, r1	; 0x80103f <mqtt_client+0x211>
   13850:	10 92 40 10 	sts	0x1040, r1	; 0x801040 <mqtt_client+0x212>
   13854:	10 92 41 10 	sts	0x1041, r1	; 0x801041 <mqtt_client+0x213>
   13858:	10 92 42 10 	sts	0x1042, r1	; 0x801042 <mqtt_client+0x214>
   1385c:	0f ef       	ldi	r16, 0xFF	; 255
   1385e:	1f ef       	ldi	r17, 0xFF	; 255
   13860:	10 93 4a 10 	sts	0x104A, r17	; 0x80104a <mqtt_client+0x21c>
   13864:	00 93 49 10 	sts	0x1049, r16	; 0x801049 <mqtt_client+0x21b>
   13868:	8c e2       	ldi	r24, 0x2C	; 44
   1386a:	93 e1       	ldi	r25, 0x13	; 19
   1386c:	90 93 2f 0e 	sts	0x0E2F, r25	; 0x800e2f <mqtt_client+0x1>
   13870:	80 93 2e 0e 	sts	0x0E2E, r24	; 0x800e2e <mqtt_client>
   13874:	10 92 48 10 	sts	0x1048, r1	; 0x801048 <mqtt_client+0x21a>
   13878:	10 92 47 10 	sts	0x1047, r1	; 0x801047 <mqtt_client+0x219>
   1387c:	84 e1       	ldi	r24, 0x14	; 20
   1387e:	93 e1       	ldi	r25, 0x13	; 19
   13880:	23 e0       	ldi	r18, 0x03	; 3
   13882:	30 e0       	ldi	r19, 0x00	; 0
   13884:	30 93 15 13 	sts	0x1315, r19	; 0x801315 <radio+0x1>
   13888:	20 93 14 13 	sts	0x1314, r18	; 0x801314 <radio>
   1388c:	22 e0       	ldi	r18, 0x02	; 2
   1388e:	30 e0       	ldi	r19, 0x00	; 0
   13890:	30 93 17 13 	sts	0x1317, r19	; 0x801317 <radio+0x3>
   13894:	20 93 16 13 	sts	0x1316, r18	; 0x801316 <radio+0x2>
   13898:	10 92 1a 13 	sts	0x131A, r1	; 0x80131a <radio+0x6>
   1389c:	20 e2       	ldi	r18, 0x20	; 32
   1389e:	20 93 1b 13 	sts	0x131B, r18	; 0x80131b <radio+0x7>
   138a2:	10 92 1c 13 	sts	0x131C, r1	; 0x80131c <radio+0x8>
   138a6:	25 e0       	ldi	r18, 0x05	; 5
   138a8:	20 93 22 13 	sts	0x1322, r18	; 0x801322 <radio+0xe>
   138ac:	45 e0       	ldi	r20, 0x05	; 5
   138ae:	50 e0       	ldi	r21, 0x00	; 0
   138b0:	60 e0       	ldi	r22, 0x00	; 0
   138b2:	70 e0       	ldi	r23, 0x00	; 0
   138b4:	40 93 28 13 	sts	0x1328, r20	; 0x801328 <radio+0x14>
   138b8:	50 93 29 13 	sts	0x1329, r21	; 0x801329 <radio+0x15>
   138bc:	60 93 2a 13 	sts	0x132A, r22	; 0x80132a <radio+0x16>
   138c0:	70 93 2b 13 	sts	0x132B, r23	; 0x80132b <radio+0x17>
   138c4:	10 92 1d 13 	sts	0x131D, r1	; 0x80131d <radio+0x9>
   138c8:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <network+0x30>
   138cc:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <network+0x2f>
   138d0:	27 ed       	ldi	r18, 0xD7	; 215
   138d2:	31 e1       	ldi	r19, 0x11	; 17
   138d4:	30 93 72 12 	sts	0x1272, r19	; 0x801272 <network+0xd0>
   138d8:	20 93 71 12 	sts	0x1271, r18	; 0x801271 <network+0xcf>
   138dc:	2f e7       	ldi	r18, 0x7F	; 127
   138de:	32 e1       	ldi	r19, 0x12	; 18
   138e0:	30 93 7e 12 	sts	0x127E, r19	; 0x80127e <network+0xdc>
   138e4:	20 93 7d 12 	sts	0x127D, r18	; 0x80127d <network+0xdb>
   138e8:	23 e7       	ldi	r18, 0x73	; 115
   138ea:	32 e1       	ldi	r19, 0x12	; 18
   138ec:	30 93 ca 11 	sts	0x11CA, r19	; 0x8011ca <network+0x28>
   138f0:	20 93 c9 11 	sts	0x11C9, r18	; 0x8011c9 <network+0x27>
   138f4:	10 92 cd 11 	sts	0x11CD, r1	; 0x8011cd <network+0x2b>
   138f8:	10 92 ce 11 	sts	0x11CE, r1	; 0x8011ce <network+0x2c>
   138fc:	10 92 cf 11 	sts	0x11CF, r1	; 0x8011cf <network+0x2d>
   13900:	10 92 d0 11 	sts	0x11D0, r1	; 0x8011d0 <network+0x2e>
   13904:	10 92 cc 11 	sts	0x11CC, r1	; 0x8011cc <network+0x2a>
   13908:	10 92 cb 11 	sts	0x11CB, r1	; 0x8011cb <network+0x29>
   1390c:	10 92 a2 11 	sts	0x11A2, r1	; 0x8011a2 <network>
   13910:	90 93 91 11 	sts	0x1191, r25	; 0x801191 <mesh+0x7>
   13914:	80 93 90 11 	sts	0x1190, r24	; 0x801190 <mesh+0x6>
   13918:	82 ea       	ldi	r24, 0xA2	; 162
   1391a:	91 e1       	ldi	r25, 0x11	; 17
   1391c:	90 93 93 11 	sts	0x1193, r25	; 0x801193 <mesh+0x9>
   13920:	80 93 92 11 	sts	0x1192, r24	; 0x801192 <mesh+0x8>
   13924:	85 e1       	ldi	r24, 0x15	; 21
   13926:	9e e0       	ldi	r25, 0x0E	; 14
   13928:	90 93 22 0e 	sts	0x0E22, r25	; 0x800e22 <lm75_temp+0x1>
   1392c:	80 93 21 0e 	sts	0x0E21, r24	; 0x800e21 <lm75_temp>
   13930:	88 e4       	ldi	r24, 0x48	; 72
   13932:	80 93 23 0e 	sts	0x0E23, r24	; 0x800e23 <lm75_temp+0x2>
   13936:	8a e0       	ldi	r24, 0x0A	; 10
   13938:	92 e0       	ldi	r25, 0x02	; 2
   1393a:	90 93 2d 0e 	sts	0x0E2D, r25	; 0x800e2d <lm75_temp+0xc>
   1393e:	80 93 2c 0e 	sts	0x0E2C, r24	; 0x800e2c <lm75_temp+0xb>
   13942:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   13946:	90 93 24 0e 	sts	0x0E24, r25	; 0x800e24 <lm75_temp+0x3>
   1394a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   1394e:	89 1b       	sub	r24, r25
   13950:	99 0b       	sbc	r25, r25
   13952:	c1 e0       	ldi	r28, 0x01	; 1
   13954:	d0 e0       	ldi	r29, 0x00	; 0
   13956:	9e 01       	movw	r18, r28
   13958:	02 c0       	rjmp	.+4      	; 0x1395e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x460>
   1395a:	22 0f       	add	r18, r18
   1395c:	33 1f       	adc	r19, r19
   1395e:	8a 95       	dec	r24
   13960:	e2 f7       	brpl	.-8      	; 0x1395a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x45c>
   13962:	c9 01       	movw	r24, r18
   13964:	91 95       	neg	r25
   13966:	81 95       	neg	r24
   13968:	91 09       	sbc	r25, r1
   1396a:	90 93 26 0e 	sts	0x0E26, r25	; 0x800e26 <lm75_temp+0x5>
   1396e:	80 93 25 0e 	sts	0x0E25, r24	; 0x800e25 <lm75_temp+0x4>
   13972:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   13976:	80 93 27 0e 	sts	0x0E27, r24	; 0x800e27 <lm75_temp+0x6>
   1397a:	be 01       	movw	r22, r28
   1397c:	02 c0       	rjmp	.+4      	; 0x13982 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x484>
   1397e:	66 0f       	add	r22, r22
   13980:	77 1f       	adc	r23, r23
   13982:	8a 95       	dec	r24
   13984:	e2 f7       	brpl	.-8      	; 0x1397e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7041+0x480>
   13986:	07 2e       	mov	r0, r23
   13988:	00 0c       	add	r0, r0
   1398a:	88 0b       	sbc	r24, r24
   1398c:	99 0b       	sbc	r25, r25
   1398e:	0e 94 8b b0 	call	0x16116	; 0x16116 <__floatsisf>
   13992:	9b 01       	movw	r18, r22
   13994:	ac 01       	movw	r20, r24
   13996:	60 e0       	ldi	r22, 0x00	; 0
   13998:	70 e0       	ldi	r23, 0x00	; 0
   1399a:	80 e8       	ldi	r24, 0x80	; 128
   1399c:	9f e3       	ldi	r25, 0x3F	; 63
   1399e:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
   139a2:	60 93 28 0e 	sts	0x0E28, r22	; 0x800e28 <lm75_temp+0x7>
   139a6:	70 93 29 0e 	sts	0x0E29, r23	; 0x800e29 <lm75_temp+0x8>
   139aa:	80 93 2a 0e 	sts	0x0E2A, r24	; 0x800e2a <lm75_temp+0x9>
   139ae:	90 93 2b 0e 	sts	0x0E2B, r25	; 0x800e2b <lm75_temp+0xa>
   139b2:	80 e0       	ldi	r24, 0x00	; 0
   139b4:	98 ef       	ldi	r25, 0xF8	; 248
   139b6:	90 93 df 0d 	sts	0x0DDF, r25	; 0x800ddf <my_lcd+0x9>
   139ba:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <my_lcd+0x8>
   139be:	20 ee       	ldi	r18, 0xE0	; 224
   139c0:	37 e0       	ldi	r19, 0x07	; 7
   139c2:	30 93 dd 0d 	sts	0x0DDD, r19	; 0x800ddd <my_lcd+0x7>
   139c6:	20 93 dc 0d 	sts	0x0DDC, r18	; 0x800ddc <my_lcd+0x6>
   139ca:	90 93 e1 0d 	sts	0x0DE1, r25	; 0x800de1 <my_lcd+0xb>
   139ce:	80 93 e0 0d 	sts	0x0DE0, r24	; 0x800de0 <my_lcd+0xa>
   139d2:	81 e0       	ldi	r24, 0x01	; 1
   139d4:	80 93 e2 0d 	sts	0x0DE2, r24	; 0x800de2 <my_lcd+0xc>
   139d8:	10 92 e3 0d 	sts	0x0DE3, r1	; 0x800de3 <my_lcd+0xd>
   139dc:	84 e8       	ldi	r24, 0x84	; 132
   139de:	92 e0       	ldi	r25, 0x02	; 2
   139e0:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <my_lcd+0x1>
   139e4:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <my_lcd>
   139e8:	82 e2       	ldi	r24, 0x22	; 34
   139ea:	80 93 14 0e 	sts	0x0E14, r24	; 0x800e14 <my_lcd+0x3e>
   139ee:	e8 eb       	ldi	r30, 0xB8	; 184
   139f0:	fa e3       	ldi	r31, 0x3A	; 58
   139f2:	e4 91       	lpm	r30, Z
   139f4:	f0 e0       	ldi	r31, 0x00	; 0
   139f6:	ee 0f       	add	r30, r30
   139f8:	ff 1f       	adc	r31, r31
   139fa:	e9 57       	subi	r30, 0x79	; 121
   139fc:	f5 4c       	sbci	r31, 0xC5	; 197
   139fe:	a5 91       	lpm	r26, Z+
   13a00:	b4 91       	lpm	r27, Z
   13a02:	b0 93 05 0e 	sts	0x0E05, r27	; 0x800e05 <my_lcd+0x2f>
   13a06:	a0 93 04 0e 	sts	0x0E04, r26	; 0x800e04 <my_lcd+0x2e>
   13a0a:	ea eb       	ldi	r30, 0xBA	; 186
   13a0c:	fa e3       	ldi	r31, 0x3A	; 58
   13a0e:	e4 91       	lpm	r30, Z
   13a10:	f0 e0       	ldi	r31, 0x00	; 0
   13a12:	ee 0f       	add	r30, r30
   13a14:	ff 1f       	adc	r31, r31
   13a16:	e9 57       	subi	r30, 0x79	; 121
   13a18:	f5 4c       	sbci	r31, 0xC5	; 197
   13a1a:	85 91       	lpm	r24, Z+
   13a1c:	94 91       	lpm	r25, Z
   13a1e:	90 93 07 0e 	sts	0x0E07, r25	; 0x800e07 <my_lcd+0x31>
   13a22:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <my_lcd+0x30>
   13a26:	eb eb       	ldi	r30, 0xBB	; 187
   13a28:	fa e3       	ldi	r31, 0x3A	; 58
   13a2a:	e4 91       	lpm	r30, Z
   13a2c:	f0 e0       	ldi	r31, 0x00	; 0
   13a2e:	ee 0f       	add	r30, r30
   13a30:	ff 1f       	adc	r31, r31
   13a32:	e9 57       	subi	r30, 0x79	; 121
   13a34:	f5 4c       	sbci	r31, 0xC5	; 197
   13a36:	85 91       	lpm	r24, Z+
   13a38:	94 91       	lpm	r25, Z
   13a3a:	90 93 09 0e 	sts	0x0E09, r25	; 0x800e09 <my_lcd+0x33>
   13a3e:	80 93 08 0e 	sts	0x0E08, r24	; 0x800e08 <my_lcd+0x32>
   13a42:	e7 eb       	ldi	r30, 0xB7	; 183
   13a44:	fa e3       	ldi	r31, 0x3A	; 58
   13a46:	e4 91       	lpm	r30, Z
   13a48:	f0 e0       	ldi	r31, 0x00	; 0
   13a4a:	ee 0f       	add	r30, r30
   13a4c:	ff 1f       	adc	r31, r31
   13a4e:	e9 57       	subi	r30, 0x79	; 121
   13a50:	f5 4c       	sbci	r31, 0xC5	; 197
   13a52:	85 91       	lpm	r24, Z+
   13a54:	94 91       	lpm	r25, Z
   13a56:	90 93 0b 0e 	sts	0x0E0B, r25	; 0x800e0b <my_lcd+0x35>
   13a5a:	80 93 0a 0e 	sts	0x0E0A, r24	; 0x800e0a <my_lcd+0x34>
   13a5e:	e2 e7       	ldi	r30, 0x72	; 114
   13a60:	fa e3       	ldi	r31, 0x3A	; 58
   13a62:	84 91       	lpm	r24, Z
   13a64:	80 93 0c 0e 	sts	0x0E0C, r24	; 0x800e0c <my_lcd+0x36>
   13a68:	e4 e7       	ldi	r30, 0x74	; 116
   13a6a:	fa e3       	ldi	r31, 0x3A	; 58
   13a6c:	24 91       	lpm	r18, Z
   13a6e:	20 93 0d 0e 	sts	0x0E0D, r18	; 0x800e0d <my_lcd+0x37>
   13a72:	e5 e7       	ldi	r30, 0x75	; 117
   13a74:	fa e3       	ldi	r31, 0x3A	; 58
   13a76:	94 91       	lpm	r25, Z
   13a78:	90 93 0e 0e 	sts	0x0E0E, r25	; 0x800e0e <my_lcd+0x38>
   13a7c:	e1 e7       	ldi	r30, 0x71	; 113
   13a7e:	fa e3       	ldi	r31, 0x3A	; 58
   13a80:	e4 91       	lpm	r30, Z
   13a82:	e0 93 0f 0e 	sts	0x0E0F, r30	; 0x800e0f <my_lcd+0x39>
   13a86:	38 2f       	mov	r19, r24
   13a88:	30 95       	com	r19
   13a8a:	30 93 10 0e 	sts	0x0E10, r19	; 0x800e10 <my_lcd+0x3a>
   13a8e:	20 95       	com	r18
   13a90:	20 93 11 0e 	sts	0x0E11, r18	; 0x800e11 <my_lcd+0x3b>
   13a94:	90 95       	com	r25
   13a96:	90 93 12 0e 	sts	0x0E12, r25	; 0x800e12 <my_lcd+0x3c>
   13a9a:	e0 95       	com	r30
   13a9c:	e0 93 13 0e 	sts	0x0E13, r30	; 0x800e13 <my_lcd+0x3d>
   13aa0:	ec 91       	ld	r30, X
   13aa2:	e8 2b       	or	r30, r24
   13aa4:	ec 93       	st	X, r30
   13aa6:	e0 91 06 0e 	lds	r30, 0x0E06	; 0x800e06 <my_lcd+0x30>
   13aaa:	f0 91 07 0e 	lds	r31, 0x0E07	; 0x800e07 <my_lcd+0x31>
   13aae:	80 81       	ld	r24, Z
   13ab0:	90 91 0d 0e 	lds	r25, 0x0E0D	; 0x800e0d <my_lcd+0x37>
   13ab4:	89 2b       	or	r24, r25
   13ab6:	80 83       	st	Z, r24
   13ab8:	e0 91 08 0e 	lds	r30, 0x0E08	; 0x800e08 <my_lcd+0x32>
   13abc:	f0 91 09 0e 	lds	r31, 0x0E09	; 0x800e09 <my_lcd+0x33>
   13ac0:	80 81       	ld	r24, Z
   13ac2:	90 91 0e 0e 	lds	r25, 0x0E0E	; 0x800e0e <my_lcd+0x38>
   13ac6:	89 2b       	or	r24, r25
   13ac8:	80 83       	st	Z, r24
   13aca:	e0 91 0a 0e 	lds	r30, 0x0E0A	; 0x800e0a <my_lcd+0x34>
   13ace:	f0 91 0b 0e 	lds	r31, 0x0E0B	; 0x800e0b <my_lcd+0x35>
   13ad2:	80 81       	ld	r24, Z
   13ad4:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <my_lcd+0x39>
   13ad8:	89 2b       	or	r24, r25
   13ada:	80 83       	st	Z, r24
   13adc:	61 e0       	ldi	r22, 0x01	; 1
   13ade:	81 e2       	ldi	r24, 0x21	; 33
   13ae0:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13ae4:	61 e0       	ldi	r22, 0x01	; 1
   13ae6:	83 e2       	ldi	r24, 0x23	; 35
   13ae8:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13aec:	61 e0       	ldi	r22, 0x01	; 1
   13aee:	84 e2       	ldi	r24, 0x24	; 36
   13af0:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13af4:	61 e0       	ldi	r22, 0x01	; 1
   13af6:	80 e2       	ldi	r24, 0x20	; 32
   13af8:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13afc:	61 e0       	ldi	r22, 0x01	; 1
   13afe:	82 e2       	ldi	r24, 0x22	; 34
   13b00:	0e 94 3c 87 	call	0x10e78	; 0x10e78 <digitalWrite>
   13b04:	61 e0       	ldi	r22, 0x01	; 1
   13b06:	82 e2       	ldi	r24, 0x22	; 34
   13b08:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13b0c:	10 92 ed 0d 	sts	0x0DED, r1	; 0x800ded <my_lcd+0x17>
   13b10:	10 92 ec 0d 	sts	0x0DEC, r1	; 0x800dec <my_lcd+0x16>
   13b14:	86 e9       	ldi	r24, 0x96	; 150
   13b16:	97 e7       	ldi	r25, 0x77	; 119
   13b18:	90 93 f1 0d 	sts	0x0DF1, r25	; 0x800df1 <my_lcd+0x1b>
   13b1c:	80 93 f0 0d 	sts	0x0DF0, r24	; 0x800df0 <my_lcd+0x1a>
   13b20:	20 e4       	ldi	r18, 0x40	; 64
   13b22:	31 e0       	ldi	r19, 0x01	; 1
   13b24:	30 93 e5 0d 	sts	0x0DE5, r19	; 0x800de5 <my_lcd+0xf>
   13b28:	20 93 e4 0d 	sts	0x0DE4, r18	; 0x800de4 <my_lcd+0xe>
   13b2c:	80 ee       	ldi	r24, 0xE0	; 224
   13b2e:	91 e0       	ldi	r25, 0x01	; 1
   13b30:	90 93 e7 0d 	sts	0x0DE7, r25	; 0x800de7 <my_lcd+0x11>
   13b34:	80 93 e6 0d 	sts	0x0DE6, r24	; 0x800de6 <my_lcd+0x10>
   13b38:	41 b1       	in	r20, 0x01	; 1
   13b3a:	4f ef       	ldi	r20, 0xFF	; 255
   13b3c:	41 b9       	out	0x01, r20	; 1
   13b3e:	30 93 e9 0d 	sts	0x0DE9, r19	; 0x800de9 <my_lcd+0x13>
   13b42:	20 93 e8 0d 	sts	0x0DE8, r18	; 0x800de8 <my_lcd+0x12>
   13b46:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <my_lcd+0x15>
   13b4a:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <my_lcd+0x14>
   13b4e:	e3 eb       	ldi	r30, 0xB3	; 179
   13b50:	fa e3       	ldi	r31, 0x3A	; 58
   13b52:	e4 91       	lpm	r30, Z
   13b54:	f0 e0       	ldi	r31, 0x00	; 0
   13b56:	ee 0f       	add	r30, r30
   13b58:	ff 1f       	adc	r31, r31
   13b5a:	e9 57       	subi	r30, 0x79	; 121
   13b5c:	f5 4c       	sbci	r31, 0xC5	; 197
   13b5e:	85 91       	lpm	r24, Z+
   13b60:	94 91       	lpm	r25, Z
   13b62:	90 93 c8 0d 	sts	0x0DC8, r25	; 0x800dc8 <my_touch+0x10>
   13b66:	80 93 c7 0d 	sts	0x0DC7, r24	; 0x800dc7 <my_touch+0xf>
   13b6a:	e2 eb       	ldi	r30, 0xB2	; 178
   13b6c:	fa e3       	ldi	r31, 0x3A	; 58
   13b6e:	e4 91       	lpm	r30, Z
   13b70:	f0 e0       	ldi	r31, 0x00	; 0
   13b72:	ee 0f       	add	r30, r30
   13b74:	ff 1f       	adc	r31, r31
   13b76:	e9 57       	subi	r30, 0x79	; 121
   13b78:	f5 4c       	sbci	r31, 0xC5	; 197
   13b7a:	85 91       	lpm	r24, Z+
   13b7c:	94 91       	lpm	r25, Z
   13b7e:	90 93 ca 0d 	sts	0x0DCA, r25	; 0x800dca <my_touch+0x12>
   13b82:	80 93 c9 0d 	sts	0x0DC9, r24	; 0x800dc9 <my_touch+0x11>
   13b86:	e4 eb       	ldi	r30, 0xB4	; 180
   13b88:	fa e3       	ldi	r31, 0x3A	; 58
   13b8a:	e4 91       	lpm	r30, Z
   13b8c:	f0 e0       	ldi	r31, 0x00	; 0
   13b8e:	ee 0f       	add	r30, r30
   13b90:	ff 1f       	adc	r31, r31
   13b92:	ef 5b       	subi	r30, 0xBF	; 191
   13b94:	f5 4c       	sbci	r31, 0xC5	; 197
   13b96:	85 91       	lpm	r24, Z+
   13b98:	94 91       	lpm	r25, Z
   13b9a:	90 93 cc 0d 	sts	0x0DCC, r25	; 0x800dcc <my_touch+0x14>
   13b9e:	80 93 cb 0d 	sts	0x0DCB, r24	; 0x800dcb <my_touch+0x13>
   13ba2:	e5 eb       	ldi	r30, 0xB5	; 181
   13ba4:	fa e3       	ldi	r31, 0x3A	; 58
   13ba6:	e4 91       	lpm	r30, Z
   13ba8:	f0 e0       	ldi	r31, 0x00	; 0
   13baa:	ee 0f       	add	r30, r30
   13bac:	ff 1f       	adc	r31, r31
   13bae:	e9 57       	subi	r30, 0x79	; 121
   13bb0:	f5 4c       	sbci	r31, 0xC5	; 197
   13bb2:	85 91       	lpm	r24, Z+
   13bb4:	94 91       	lpm	r25, Z
   13bb6:	90 93 ce 0d 	sts	0x0DCE, r25	; 0x800dce <my_touch+0x16>
   13bba:	80 93 cd 0d 	sts	0x0DCD, r24	; 0x800dcd <my_touch+0x15>
   13bbe:	ee e9       	ldi	r30, 0x9E	; 158
   13bc0:	fa e3       	ldi	r31, 0x3A	; 58
   13bc2:	e4 91       	lpm	r30, Z
   13bc4:	f0 e0       	ldi	r31, 0x00	; 0
   13bc6:	ee 0f       	add	r30, r30
   13bc8:	ff 1f       	adc	r31, r31
   13bca:	ef 5b       	subi	r30, 0xBF	; 191
   13bcc:	f5 4c       	sbci	r31, 0xC5	; 197
   13bce:	85 91       	lpm	r24, Z+
   13bd0:	94 91       	lpm	r25, Z
   13bd2:	90 93 d0 0d 	sts	0x0DD0, r25	; 0x800dd0 <my_touch+0x18>
   13bd6:	80 93 cf 0d 	sts	0x0DCF, r24	; 0x800dcf <my_touch+0x17>
   13bda:	ed e6       	ldi	r30, 0x6D	; 109
   13bdc:	fa e3       	ldi	r31, 0x3A	; 58
   13bde:	e4 91       	lpm	r30, Z
   13be0:	e0 93 d1 0d 	sts	0x0DD1, r30	; 0x800dd1 <my_touch+0x19>
   13be4:	ec e6       	ldi	r30, 0x6C	; 108
   13be6:	fa e3       	ldi	r31, 0x3A	; 58
   13be8:	e4 91       	lpm	r30, Z
   13bea:	e0 93 d2 0d 	sts	0x0DD2, r30	; 0x800dd2 <my_touch+0x1a>
   13bee:	ee e6       	ldi	r30, 0x6E	; 110
   13bf0:	fa e3       	ldi	r31, 0x3A	; 58
   13bf2:	e4 91       	lpm	r30, Z
   13bf4:	e0 93 d3 0d 	sts	0x0DD3, r30	; 0x800dd3 <my_touch+0x1b>
   13bf8:	ef e6       	ldi	r30, 0x6F	; 111
   13bfa:	fa e3       	ldi	r31, 0x3A	; 58
   13bfc:	e4 91       	lpm	r30, Z
   13bfe:	e0 93 d4 0d 	sts	0x0DD4, r30	; 0x800dd4 <my_touch+0x1c>
   13c02:	e8 e5       	ldi	r30, 0x58	; 88
   13c04:	fa e3       	ldi	r31, 0x3A	; 58
   13c06:	e4 91       	lpm	r30, Z
   13c08:	e0 93 d5 0d 	sts	0x0DD5, r30	; 0x800dd5 <my_touch+0x1d>
   13c0c:	61 e0       	ldi	r22, 0x01	; 1
   13c0e:	8c e1       	ldi	r24, 0x1C	; 28
   13c10:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13c14:	61 e0       	ldi	r22, 0x01	; 1
   13c16:	8b e1       	ldi	r24, 0x1B	; 27
   13c18:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13c1c:	60 e0       	ldi	r22, 0x00	; 0
   13c1e:	8d e1       	ldi	r24, 0x1D	; 29
   13c20:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13c24:	61 e0       	ldi	r22, 0x01	; 1
   13c26:	8e e1       	ldi	r24, 0x1E	; 30
   13c28:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13c2c:	60 e0       	ldi	r22, 0x00	; 0
   13c2e:	87 e0       	ldi	r24, 0x07	; 7
   13c30:	0e 94 99 88 	call	0x11132	; 0x11132 <pinMode>
   13c34:	10 92 c4 0d 	sts	0x0DC4, r1	; 0x800dc4 <my_touch+0xc>
   13c38:	10 92 c5 0d 	sts	0x0DC5, r1	; 0x800dc5 <my_touch+0xd>
   13c3c:	10 92 c6 0d 	sts	0x0DC6, r1	; 0x800dc6 <my_touch+0xe>
   13c40:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_touch+0x9>
   13c44:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_touch+0x8>
   13c48:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_touch+0xb>
   13c4c:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <my_touch+0xa>
   13c50:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <my_touch+0x1>
   13c54:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <my_touch>
   13c58:	10 92 bb 0d 	sts	0x0DBB, r1	; 0x800dbb <my_touch+0x3>
   13c5c:	10 92 ba 0d 	sts	0x0DBA, r1	; 0x800dba <my_touch+0x2>
   13c60:	10 93 bd 0d 	sts	0x0DBD, r17	; 0x800dbd <my_touch+0x5>
   13c64:	00 93 bc 0d 	sts	0x0DBC, r16	; 0x800dbc <my_touch+0x4>
   13c68:	10 93 bf 0d 	sts	0x0DBF, r17	; 0x800dbf <my_touch+0x7>
   13c6c:	00 93 be 0d 	sts	0x0DBE, r16	; 0x800dbe <my_touch+0x6>
   13c70:	8a e0       	ldi	r24, 0x0A	; 10
   13c72:	80 93 a9 0c 	sts	0x0CA9, r24	; 0x800ca9 <doc>
   13c76:	82 eb       	ldi	r24, 0xB2	; 178
   13c78:	9c e0       	ldi	r25, 0x0C	; 12
   13c7a:	90 93 ad 0c 	sts	0x0CAD, r25	; 0x800cad <doc+0x4>
   13c7e:	80 93 ac 0c 	sts	0x0CAC, r24	; 0x800cac <doc+0x3>
   13c82:	20 e0       	ldi	r18, 0x00	; 0
   13c84:	31 e0       	ldi	r19, 0x01	; 1
   13c86:	30 93 af 0c 	sts	0x0CAF, r19	; 0x800caf <doc+0x6>
   13c8a:	20 93 ae 0c 	sts	0x0CAE, r18	; 0x800cae <doc+0x5>
   13c8e:	10 92 b1 0c 	sts	0x0CB1, r1	; 0x800cb1 <doc+0x8>
   13c92:	10 92 b0 0c 	sts	0x0CB0, r1	; 0x800cb0 <doc+0x7>
   13c96:	8e e7       	ldi	r24, 0x7E	; 126
   13c98:	92 e0       	ldi	r25, 0x02	; 2
   13c9a:	90 93 ab 0c 	sts	0x0CAB, r25	; 0x800cab <doc+0x2>
   13c9e:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <doc+0x1>
   13ca2:	10 92 b3 0d 	sts	0x0DB3, r1	; 0x800db3 <doc+0x10a>
   13ca6:	10 92 b2 0d 	sts	0x0DB2, r1	; 0x800db2 <doc+0x109>
   13caa:	80 e0       	ldi	r24, 0x00	; 0
   13cac:	90 e0       	ldi	r25, 0x00	; 0
   13cae:	a2 e0       	ldi	r26, 0x02	; 2
   13cb0:	b0 e0       	ldi	r27, 0x00	; 0
   13cb2:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <SRAM+0x4>
   13cb6:	90 93 a1 0c 	sts	0x0CA1, r25	; 0x800ca1 <SRAM+0x5>
   13cba:	a0 93 a2 0c 	sts	0x0CA2, r26	; 0x800ca2 <SRAM+0x6>
   13cbe:	b0 93 a3 0c 	sts	0x0CA3, r27	; 0x800ca3 <SRAM+0x7>
   13cc2:	d0 93 9f 0c 	sts	0x0C9F, r29	; 0x800c9f <SRAM+0x3>
   13cc6:	c0 93 9e 0c 	sts	0x0C9E, r28	; 0x800c9e <SRAM+0x2>
   13cca:	8d e6       	ldi	r24, 0x6D	; 109
   13ccc:	90 e1       	ldi	r25, 0x10	; 16
   13cce:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <SRAM+0x1>
   13cd2:	80 93 9c 0c 	sts	0x0C9C, r24	; 0x800c9c <SRAM>
   13cd6:	46 e1       	ldi	r20, 0x16	; 22
   13cd8:	40 93 a4 0c 	sts	0x0CA4, r20	; 0x800ca4 <SRAM+0x8>
   13cdc:	40 e0       	ldi	r20, 0x00	; 0
   13cde:	50 e0       	ldi	r21, 0x00	; 0
   13ce0:	64 e0       	ldi	r22, 0x04	; 4
   13ce2:	70 e0       	ldi	r23, 0x00	; 0
   13ce4:	40 93 91 0c 	sts	0x0C91, r20	; 0x800c91 <SROM+0x4>
   13ce8:	50 93 92 0c 	sts	0x0C92, r21	; 0x800c92 <SROM+0x5>
   13cec:	60 93 93 0c 	sts	0x0C93, r22	; 0x800c93 <SROM+0x6>
   13cf0:	70 93 94 0c 	sts	0x0C94, r23	; 0x800c94 <SROM+0x7>
   13cf4:	30 93 96 0c 	sts	0x0C96, r19	; 0x800c96 <SROM+0x9>
   13cf8:	20 93 95 0c 	sts	0x0C95, r18	; 0x800c95 <SROM+0x8>
   13cfc:	10 92 90 0c 	sts	0x0C90, r1	; 0x800c90 <SROM+0x3>
   13d00:	10 92 8f 0c 	sts	0x0C8F, r1	; 0x800c8f <SROM+0x2>
   13d04:	90 93 8e 0c 	sts	0x0C8E, r25	; 0x800c8e <SROM+0x1>
   13d08:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <SROM>
   13d0c:	87 e1       	ldi	r24, 0x17	; 23
   13d0e:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <SROM+0xa>
   13d12:	df 91       	pop	r29
   13d14:	cf 91       	pop	r28
   13d16:	1f 91       	pop	r17
   13d18:	0f 91       	pop	r16
   13d1a:	08 95       	ret

00013d1c <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   13d1c:	cf 93       	push	r28
   13d1e:	df 93       	push	r29
   13d20:	cd b7       	in	r28, 0x3d	; 61
   13d22:	de b7       	in	r29, 0x3e	; 62
   13d24:	c7 58       	subi	r28, 0x87	; 135
   13d26:	d1 09       	sbc	r29, r1
   13d28:	0f b6       	in	r0, 0x3f	; 63
   13d2a:	f8 94       	cli
   13d2c:	de bf       	out	0x3e, r29	; 62
   13d2e:	0f be       	out	0x3f, r0	; 63
   13d30:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   13d32:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   13d34:	84 b5       	in	r24, 0x24	; 36
   13d36:	83 60       	ori	r24, 0x03	; 3
   13d38:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   13d3a:	85 b5       	in	r24, 0x25	; 37
   13d3c:	83 60       	ori	r24, 0x03	; 3
   13d3e:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   13d40:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   13d44:	81 60       	ori	r24, 0x01	; 1
   13d46:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   13d4a:	82 e0       	ldi	r24, 0x02	; 2
   13d4c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   13d50:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   13d54:	81 60       	ori	r24, 0x01	; 1
   13d56:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   13d5a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   13d5e:	81 60       	ori	r24, 0x01	; 1
   13d60:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   13d64:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   13d68:	84 60       	ori	r24, 0x04	; 4
   13d6a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   13d6e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   13d72:	81 60       	ori	r24, 0x01	; 1
   13d74:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   13d78:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   13d7c:	83 60       	ori	r24, 0x03	; 3
   13d7e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   13d82:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   13d86:	81 60       	ori	r24, 0x01	; 1
   13d88:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   13d8c:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   13d90:	83 60       	ori	r24, 0x03	; 3
   13d92:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   13d96:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   13d9a:	81 60       	ori	r24, 0x01	; 1
   13d9c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   13da0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   13da4:	83 60       	ori	r24, 0x03	; 3
   13da6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   13daa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   13dae:	81 60       	ori	r24, 0x01	; 1
   13db0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   13db4:	87 e8       	ldi	r24, 0x87	; 135
   13db6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   13dba:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   13dbe:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3108
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   13dc2:	21 e4       	ldi	r18, 0x41	; 65
   13dc4:	30 e0       	ldi	r19, 0x00	; 0
   13dc6:	2c 0f       	add	r18, r28
   13dc8:	3d 1f       	adc	r19, r29
   13dca:	24 5f       	subi	r18, 0xF4	; 244
   13dcc:	3f 4f       	sbci	r19, 0xFF	; 255
   13dce:	cc 57       	subi	r28, 0x7C	; 124
   13dd0:	df 4f       	sbci	r29, 0xFF	; 255
   13dd2:	39 83       	std	Y+1, r19	; 0x01
   13dd4:	28 83       	st	Y, r18
   13dd6:	c4 58       	subi	r28, 0x84	; 132
   13dd8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   13dda:	41 e4       	ldi	r20, 0x41	; 65
   13ddc:	50 e0       	ldi	r21, 0x00	; 0
   13dde:	4c 0f       	add	r20, r28
   13de0:	5d 1f       	adc	r21, r29
   13de2:	4f 5f       	subi	r20, 0xFF	; 255
   13de4:	5f 4f       	sbci	r21, 0xFF	; 255
   13de6:	ca 57       	subi	r28, 0x7A	; 122
   13de8:	df 4f       	sbci	r29, 0xFF	; 255
   13dea:	59 83       	std	Y+1, r21	; 0x01
   13dec:	48 83       	st	Y, r20
   13dee:	c6 58       	subi	r28, 0x86	; 134
   13df0:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   13df2:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   13df6:	6b 01       	movw	r12, r22
   13df8:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
  if (mqtt_reconnect() == 0)
   13dfa:	0e 94 7a 6c 	call	0xd8f4	; 0xd8f4 <mqtt_reconnect()>
   13dfe:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <selftest_data>
   13e02:	81 11       	cpse	r24, r1
   13e04:	8a c0       	rjmp	.+276    	; 0x13f1a <main+0x1fe>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   13e06:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   13e08:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   13e0c:	0e 94 2a 91 	call	0x12254	; 0x12254 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4044


  if (draw_menu(false) == true)
   13e10:	80 e0       	ldi	r24, 0x00	; 0
   13e12:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <draw_menu(bool)>
   13e16:	88 23       	and	r24, r24
   13e18:	19 f0       	breq	.+6      	; 0x13e20 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4045
    draw_menu(true);
   13e1a:	81 e0       	ldi	r24, 0x01	; 1
   13e1c:	0e 94 5c 3c 	call	0x78b8	; 0x78b8 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4049

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   13e20:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   13e24:	00 91 eb 10 	lds	r16, 0x10EB	; 0x8010eb <milis_10s>
   13e28:	10 91 ec 10 	lds	r17, 0x10EC	; 0x8010ec <milis_10s+0x1>
   13e2c:	20 91 ed 10 	lds	r18, 0x10ED	; 0x8010ed <milis_10s+0x2>
   13e30:	30 91 ee 10 	lds	r19, 0x10EE	; 0x8010ee <milis_10s+0x3>
   13e34:	60 1b       	sub	r22, r16
   13e36:	71 0b       	sbc	r23, r17
   13e38:	82 0b       	sbc	r24, r18
   13e3a:	93 0b       	sbc	r25, r19
   13e3c:	61 31       	cpi	r22, 0x11	; 17
   13e3e:	77 42       	sbci	r23, 0x27	; 39
   13e40:	81 05       	cpc	r24, r1
   13e42:	91 05       	cpc	r25, r1
   13e44:	08 f4       	brcc	.+2      	; 0x13e48 <main+0x12c>
   13e46:	a6 c4       	rjmp	.+2380   	; 0x14794 <main+0xa78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051
  {
    milis_10s = millis();
   13e48:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   13e4c:	60 93 eb 10 	sts	0x10EB, r22	; 0x8010eb <milis_10s>
   13e50:	70 93 ec 10 	sts	0x10EC, r23	; 0x8010ec <milis_10s+0x1>
   13e54:	80 93 ed 10 	sts	0x10ED, r24	; 0x8010ed <milis_10s+0x2>
   13e58:	90 93 ee 10 	sts	0x10EE, r25	; 0x8010ee <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4054


    menu_redraw10s = 1;
   13e5c:	81 e0       	ldi	r24, 0x01	; 1
   13e5e:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   13e62:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   13e66:	4a e0       	ldi	r20, 0x0A	; 10
   13e68:	be 01       	movw	r22, r28
   13e6a:	6f 5f       	subi	r22, 0xFF	; 255
   13e6c:	7f 4f       	sbci	r23, 0xFF	; 255
   13e6e:	90 e0       	ldi	r25, 0x00	; 0
   13e70:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   13e74:	ae 01       	movw	r20, r28
   13e76:	4f 5f       	subi	r20, 0xFF	; 255
   13e78:	5f 4f       	sbci	r21, 0xFF	; 255
   13e7a:	6c e1       	ldi	r22, 0x1C	; 28
   13e7c:	77 e0       	ldi	r23, 0x07	; 7
   13e7e:	8e e2       	ldi	r24, 0x2E	; 46
   13e80:	9e e0       	ldi	r25, 0x0E	; 14
   13e82:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   13e86:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   13e88:	ab e0       	ldi	r26, 0x0B	; 11
   13e8a:	9a 2e       	mov	r9, r26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   13e8c:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <Global_HWwirenum>
   13e90:	18 17       	cp	r17, r24
   13e92:	08 f0       	brcs	.+2      	; 0x13e96 <main+0x17a>
   13e94:	44 c0       	rjmp	.+136    	; 0x13f1e <main+0x202>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   13e96:	19 9d       	mul	r17, r9
   13e98:	c0 01       	movw	r24, r0
   13e9a:	11 24       	eor	r1, r1
   13e9c:	dc 01       	movw	r26, r24
   13e9e:	a5 52       	subi	r26, 0x25	; 37
   13ea0:	b6 4f       	sbci	r27, 0xF6	; 246
   13ea2:	5d 01       	movw	r10, r26
   13ea4:	00 e1       	ldi	r16, 0x10	; 16
   13ea6:	28 e0       	ldi	r18, 0x08	; 8
   13ea8:	ad 01       	movw	r20, r26
   13eaa:	6a e3       	ldi	r22, 0x3A	; 58
   13eac:	ce 01       	movw	r24, r28
   13eae:	01 96       	adiw	r24, 0x01	; 1
   13eb0:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   13eb4:	9e 01       	movw	r18, r28
   13eb6:	2f 5f       	subi	r18, 0xFF	; 255
   13eb8:	3f 4f       	sbci	r19, 0xFF	; 255
   13eba:	48 e2       	ldi	r20, 0x28	; 40
   13ebc:	57 e0       	ldi	r21, 0x07	; 7
   13ebe:	61 2f       	mov	r22, r17
   13ec0:	8c e2       	ldi	r24, 0x2C	; 44
   13ec2:	97 e0       	ldi	r25, 0x07	; 7
   13ec4:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   13ec8:	f5 01       	movw	r30, r10
   13eca:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13ecc:	4a e0       	ldi	r20, 0x0A	; 10
   13ece:	be 01       	movw	r22, r28
   13ed0:	6f 5f       	subi	r22, 0xFF	; 255
   13ed2:	7f 4f       	sbci	r23, 0xFF	; 255
   13ed4:	90 e0       	ldi	r25, 0x00	; 0
   13ed6:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   13eda:	9e 01       	movw	r18, r28
   13edc:	2f 5f       	subi	r18, 0xFF	; 255
   13ede:	3f 4f       	sbci	r19, 0xFF	; 255
   13ee0:	42 e3       	ldi	r20, 0x32	; 50
   13ee2:	57 e0       	ldi	r21, 0x07	; 7
   13ee4:	61 2f       	mov	r22, r17
   13ee6:	8c e2       	ldi	r24, 0x2C	; 44
   13ee8:	97 e0       	ldi	r25, 0x07	; 7
   13eea:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2948
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   13eee:	d5 01       	movw	r26, r10
   13ef0:	1a 96       	adiw	r26, 0x0a	; 10
   13ef2:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13ef4:	4a e0       	ldi	r20, 0x0A	; 10
   13ef6:	be 01       	movw	r22, r28
   13ef8:	6f 5f       	subi	r22, 0xFF	; 255
   13efa:	7f 4f       	sbci	r23, 0xFF	; 255
   13efc:	90 e0       	ldi	r25, 0x00	; 0
   13efe:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2949
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   13f02:	9e 01       	movw	r18, r28
   13f04:	2f 5f       	subi	r18, 0xFF	; 255
   13f06:	3f 4f       	sbci	r19, 0xFF	; 255
   13f08:	4b e3       	ldi	r20, 0x3B	; 59
   13f0a:	57 e0       	ldi	r21, 0x07	; 7
   13f0c:	61 2f       	mov	r22, r17
   13f0e:	8c e2       	ldi	r24, 0x2C	; 44
   13f10:	97 e0       	ldi	r25, 0x07	; 7
   13f12:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   13f16:	1f 5f       	subi	r17, 0xFF	; 255
   13f18:	b9 cf       	rjmp	.-142    	; 0x13e8c <main+0x170>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   13f1a:	90 62       	ori	r25, 0x20	; 32
   13f1c:	75 cf       	rjmp	.-278    	; 0x13e08 <main+0xec>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   13f1e:	8e e2       	ldi	r24, 0x2E	; 46
   13f20:	9e e0       	ldi	r25, 0x0E	; 14
   13f22:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
   13f26:	88 23       	and	r24, r24
   13f28:	09 f4       	brne	.+2      	; 0x13f2c <main+0x210>
   13f2a:	ac c0       	rjmp	.+344    	; 0x14084 <main+0x368>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   13f2c:	6f ee       	ldi	r22, 0xEF	; 239
   13f2e:	74 e3       	ldi	r23, 0x34	; 52
   13f30:	ce 01       	movw	r24, r28
   13f32:	8f 5b       	subi	r24, 0xBF	; 191
   13f34:	9f 4f       	sbci	r25, 0xFF	; 255
   13f36:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13f3a:	4a e0       	ldi	r20, 0x0A	; 10
   13f3c:	be 01       	movw	r22, r28
   13f3e:	6f 5f       	subi	r22, 0xFF	; 255
   13f40:	7f 4f       	sbci	r23, 0xFF	; 255
   13f42:	80 91 85 0b 	lds	r24, 0x0B85	; 0x800b85 <mqtt_send_message>
   13f46:	90 91 86 0b 	lds	r25, 0x0B86	; 0x800b86 <mqtt_send_message+0x1>
   13f4a:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   13f4e:	10 92 86 0b 	sts	0x0B86, r1	; 0x800b86 <mqtt_send_message+0x1>
   13f52:	10 92 85 0b 	sts	0x0B85, r1	; 0x800b85 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13f56:	ae 01       	movw	r20, r28
   13f58:	4f 5f       	subi	r20, 0xFF	; 255
   13f5a:	5f 4f       	sbci	r21, 0xFF	; 255
   13f5c:	be 01       	movw	r22, r28
   13f5e:	6f 5b       	subi	r22, 0xBF	; 191
   13f60:	7f 4f       	sbci	r23, 0xFF	; 255
   13f62:	8e e2       	ldi	r24, 0x2E	; 46
   13f64:	9e e0       	ldi	r25, 0x0E	; 14
   13f66:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   13f6a:	6d ed       	ldi	r22, 0xDD	; 221
   13f6c:	74 e3       	ldi	r23, 0x34	; 52
   13f6e:	ce 01       	movw	r24, r28
   13f70:	8f 5b       	subi	r24, 0xBF	; 191
   13f72:	9f 4f       	sbci	r25, 0xFF	; 255
   13f74:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13f78:	4a e0       	ldi	r20, 0x0A	; 10
   13f7a:	be 01       	movw	r22, r28
   13f7c:	6f 5f       	subi	r22, 0xFF	; 255
   13f7e:	7f 4f       	sbci	r23, 0xFF	; 255
   13f80:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <mqtt_error>
   13f84:	90 91 88 0b 	lds	r25, 0x0B88	; 0x800b88 <mqtt_error+0x1>
   13f88:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13f8c:	ae 01       	movw	r20, r28
   13f8e:	4f 5f       	subi	r20, 0xFF	; 255
   13f90:	5f 4f       	sbci	r21, 0xFF	; 255
   13f92:	be 01       	movw	r22, r28
   13f94:	6f 5b       	subi	r22, 0xBF	; 191
   13f96:	7f 4f       	sbci	r23, 0xFF	; 255
   13f98:	8e e2       	ldi	r24, 0x2E	; 46
   13f9a:	9e e0       	ldi	r25, 0x0E	; 14
   13f9c:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   13fa0:	69 ec       	ldi	r22, 0xC9	; 201
   13fa2:	74 e3       	ldi	r23, 0x34	; 52
   13fa4:	ce 01       	movw	r24, r28
   13fa6:	8f 5b       	subi	r24, 0xBF	; 191
   13fa8:	9f 4f       	sbci	r25, 0xFF	; 255
   13faa:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13fae:	4a e0       	ldi	r20, 0x0A	; 10
   13fb0:	be 01       	movw	r22, r28
   13fb2:	6f 5f       	subi	r22, 0xFF	; 255
   13fb4:	7f 4f       	sbci	r23, 0xFF	; 255
   13fb6:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <mqtt_receive_message>
   13fba:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <mqtt_receive_message+0x1>
   13fbe:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   13fc2:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <mqtt_receive_message+0x1>
   13fc6:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <mqtt_receive_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13fca:	ae 01       	movw	r20, r28
   13fcc:	4f 5f       	subi	r20, 0xFF	; 255
   13fce:	5f 4f       	sbci	r21, 0xFF	; 255
   13fd0:	be 01       	movw	r22, r28
   13fd2:	6f 5b       	subi	r22, 0xBF	; 191
   13fd4:	7f 4f       	sbci	r23, 0xFF	; 255
   13fd6:	8e e2       	ldi	r24, 0x2E	; 46
   13fd8:	9e e0       	ldi	r25, 0x0E	; 14
   13fda:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   13fde:	65 eb       	ldi	r22, 0xB5	; 181
   13fe0:	74 e3       	ldi	r23, 0x34	; 52
   13fe2:	ce 01       	movw	r24, r28
   13fe4:	8f 5b       	subi	r24, 0xBF	; 191
   13fe6:	9f 4f       	sbci	r25, 0xFF	; 255
   13fe8:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   13fec:	4a e0       	ldi	r20, 0x0A	; 10
   13fee:	be 01       	movw	r22, r28
   13ff0:	6f 5f       	subi	r22, 0xFF	; 255
   13ff2:	7f 4f       	sbci	r23, 0xFF	; 255
   13ff4:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <mqtt_process_message>
   13ff8:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <mqtt_process_message+0x1>
   13ffc:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   14000:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <mqtt_process_message+0x1>
   14004:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <mqtt_process_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14008:	ae 01       	movw	r20, r28
   1400a:	4f 5f       	subi	r20, 0xFF	; 255
   1400c:	5f 4f       	sbci	r21, 0xFF	; 255
   1400e:	be 01       	movw	r22, r28
   14010:	6f 5b       	subi	r22, 0xBF	; 191
   14012:	7f 4f       	sbci	r23, 0xFF	; 255
   14014:	8e e2       	ldi	r24, 0x2E	; 46
   14016:	9e e0       	ldi	r25, 0x0E	; 14
   14018:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   1401c:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   1401e:	0a e0       	ldi	r16, 0x0A	; 10
   14020:	24 e0       	ldi	r18, 0x04	; 4
   14022:	41 e4       	ldi	r20, 0x41	; 65
   14024:	5c e0       	ldi	r21, 0x0C	; 12
   14026:	6e e2       	ldi	r22, 0x2E	; 46
   14028:	ce 01       	movw	r24, r28
   1402a:	01 96       	adiw	r24, 0x01	; 1
   1402c:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   14030:	6a ea       	ldi	r22, 0xAA	; 170
   14032:	74 e3       	ldi	r23, 0x34	; 52
   14034:	ce 01       	movw	r24, r28
   14036:	8f 5b       	subi	r24, 0xBF	; 191
   14038:	9f 4f       	sbci	r25, 0xFF	; 255
   1403a:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1403e:	ae 01       	movw	r20, r28
   14040:	4f 5f       	subi	r20, 0xFF	; 255
   14042:	5f 4f       	sbci	r21, 0xFF	; 255
   14044:	be 01       	movw	r22, r28
   14046:	6f 5b       	subi	r22, 0xBF	; 191
   14048:	7f 4f       	sbci	r23, 0xFF	; 255
   1404a:	8e e2       	ldi	r24, 0x2E	; 46
   1404c:	9e e0       	ldi	r25, 0x0E	; 14
   1404e:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   14052:	66 e9       	ldi	r22, 0x96	; 150
   14054:	74 e3       	ldi	r23, 0x34	; 52
   14056:	ce 01       	movw	r24, r28
   14058:	8f 5b       	subi	r24, 0xBF	; 191
   1405a:	9f 4f       	sbci	r25, 0xFF	; 255
   1405c:	0e 94 07 a8 	call	0x1500e	; 0x1500e <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14060:	4a e0       	ldi	r20, 0x0A	; 10
   14062:	be 01       	movw	r22, r28
   14064:	6f 5f       	subi	r22, 0xFF	; 255
   14066:	7f 4f       	sbci	r23, 0xFF	; 255
   14068:	90 e0       	ldi	r25, 0x00	; 0
   1406a:	80 e0       	ldi	r24, 0x00	; 0
   1406c:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14070:	ae 01       	movw	r20, r28
   14072:	4f 5f       	subi	r20, 0xFF	; 255
   14074:	5f 4f       	sbci	r21, 0xFF	; 255
   14076:	be 01       	movw	r22, r28
   14078:	6f 5b       	subi	r22, 0xBF	; 191
   1407a:	7f 4f       	sbci	r23, 0xFF	; 255
   1407c:	8e e2       	ldi	r24, 0x2E	; 46
   1407e:	9e e0       	ldi	r25, 0x0E	; 14
   14080:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   14084:	10 92 88 0b 	sts	0x0B88, r1	; 0x800b88 <mqtt_error+0x1>
   14088:	10 92 87 0b 	sts	0x0B87, r1	; 0x800b87 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1408c:	8e e2       	ldi	r24, 0x2E	; 46
   1408e:	9e e0       	ldi	r25, 0x0E	; 14
   14090:	0e 94 f4 90 	call	0x121e8	; 0x121e8 <PubSubClient::connected()>
   14094:	88 23       	and	r24, r24
   14096:	09 f4       	brne	.+2      	; 0x1409a <main+0x37e>
   14098:	6c c1       	rjmp	.+728    	; 0x14372 <main+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2960
  {
    strcpy(str_topic, "status/uptime");
   1409a:	63 e4       	ldi	r22, 0x43	; 67
   1409c:	77 e0       	ldi	r23, 0x07	; 7
   1409e:	ce 01       	movw	r24, r28
   140a0:	8f 5b       	subi	r24, 0xBF	; 191
   140a2:	9f 4f       	sbci	r25, 0xFF	; 255
   140a4:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   140a8:	4a e0       	ldi	r20, 0x0A	; 10
   140aa:	be 01       	movw	r22, r28
   140ac:	6f 5f       	subi	r22, 0xFF	; 255
   140ae:	7f 4f       	sbci	r23, 0xFF	; 255
   140b0:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <uptime>
   140b4:	90 91 f3 0a 	lds	r25, 0x0AF3	; 0x800af3 <uptime+0x1>
   140b8:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   140bc:	ae 01       	movw	r20, r28
   140be:	4f 5f       	subi	r20, 0xFF	; 255
   140c0:	5f 4f       	sbci	r21, 0xFF	; 255
   140c2:	be 01       	movw	r22, r28
   140c4:	6f 5b       	subi	r22, 0xBF	; 191
   140c6:	7f 4f       	sbci	r23, 0xFF	; 255
   140c8:	8e e2       	ldi	r24, 0x2E	; 46
   140ca:	9e e0       	ldi	r25, 0x0E	; 14
   140cc:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2964
    ///
    strcpy(str_topic, "status/brigthness");
   140d0:	61 e5       	ldi	r22, 0x51	; 81
   140d2:	77 e0       	ldi	r23, 0x07	; 7
   140d4:	ce 01       	movw	r24, r28
   140d6:	8f 5b       	subi	r24, 0xBF	; 191
   140d8:	9f 4f       	sbci	r25, 0xFF	; 255
   140da:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   140de:	4a e0       	ldi	r20, 0x0A	; 10
   140e0:	be 01       	movw	r22, r28
   140e2:	6f 5f       	subi	r22, 0xFF	; 255
   140e4:	7f 4f       	sbci	r23, 0xFF	; 255
   140e6:	80 91 ec 0a 	lds	r24, 0x0AEC	; 0x800aec <light_curr>
   140ea:	90 91 ed 0a 	lds	r25, 0x0AED	; 0x800aed <light_curr+0x1>
   140ee:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2966
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   140f2:	ae 01       	movw	r20, r28
   140f4:	4f 5f       	subi	r20, 0xFF	; 255
   140f6:	5f 4f       	sbci	r21, 0xFF	; 255
   140f8:	be 01       	movw	r22, r28
   140fa:	6f 5b       	subi	r22, 0xBF	; 191
   140fc:	7f 4f       	sbci	r23, 0xFF	; 255
   140fe:	8e e2       	ldi	r24, 0x2E	; 46
   14100:	9e e0       	ldi	r25, 0x0E	; 14
   14102:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2972
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   14106:	63 e6       	ldi	r22, 0x63	; 99
   14108:	77 e0       	ldi	r23, 0x07	; 7
   1410a:	ce 01       	movw	r24, r28
   1410c:	8f 5b       	subi	r24, 0xBF	; 191
   1410e:	9f 4f       	sbci	r25, 0xFF	; 255
   14110:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14114:	4a e0       	ldi	r20, 0x0A	; 10
   14116:	be 01       	movw	r22, r28
   14118:	6f 5f       	subi	r22, 0xFF	; 255
   1411a:	7f 4f       	sbci	r23, 0xFF	; 255
   1411c:	90 e0       	ldi	r25, 0x00	; 0
   1411e:	80 e0       	ldi	r24, 0x00	; 0
   14120:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14124:	ae 01       	movw	r20, r28
   14126:	4f 5f       	subi	r20, 0xFF	; 255
   14128:	5f 4f       	sbci	r21, 0xFF	; 255
   1412a:	be 01       	movw	r22, r28
   1412c:	6f 5b       	subi	r22, 0xBF	; 191
   1412e:	7f 4f       	sbci	r23, 0xFF	; 255
   14130:	8e e2       	ldi	r24, 0x2E	; 46
   14132:	9e e0       	ldi	r25, 0x0E	; 14
   14134:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
    ///
    strcpy(str_topic, "status/load_min");
   14138:	6a e7       	ldi	r22, 0x7A	; 122
   1413a:	77 e0       	ldi	r23, 0x07	; 7
   1413c:	ce 01       	movw	r24, r28
   1413e:	8f 5b       	subi	r24, 0xBF	; 191
   14140:	9f 4f       	sbci	r25, 0xFF	; 255
   14142:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14146:	4a e0       	ldi	r20, 0x0A	; 10
   14148:	be 01       	movw	r22, r28
   1414a:	6f 5f       	subi	r22, 0xFF	; 255
   1414c:	7f 4f       	sbci	r23, 0xFF	; 255
   1414e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   14152:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   14156:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1415a:	ae 01       	movw	r20, r28
   1415c:	4f 5f       	subi	r20, 0xFF	; 255
   1415e:	5f 4f       	sbci	r21, 0xFF	; 255
   14160:	be 01       	movw	r22, r28
   14162:	6f 5b       	subi	r22, 0xBF	; 191
   14164:	7f 4f       	sbci	r23, 0xFF	; 255
   14166:	8e e2       	ldi	r24, 0x2E	; 46
   14168:	9e e0       	ldi	r25, 0x0E	; 14
   1416a:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
    ///
    strcpy(str_topic, "status/load_max");
   1416e:	6a e8       	ldi	r22, 0x8A	; 138
   14170:	77 e0       	ldi	r23, 0x07	; 7
   14172:	ce 01       	movw	r24, r28
   14174:	8f 5b       	subi	r24, 0xBF	; 191
   14176:	9f 4f       	sbci	r25, 0xFF	; 255
   14178:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1417c:	4a e0       	ldi	r20, 0x0A	; 10
   1417e:	be 01       	movw	r22, r28
   14180:	6f 5f       	subi	r22, 0xFF	; 255
   14182:	7f 4f       	sbci	r23, 0xFF	; 255
   14184:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <load_max>
   14188:	90 91 dc 10 	lds	r25, 0x10DC	; 0x8010dc <load_max+0x1>
   1418c:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14190:	ae 01       	movw	r20, r28
   14192:	4f 5f       	subi	r20, 0xFF	; 255
   14194:	5f 4f       	sbci	r21, 0xFF	; 255
   14196:	be 01       	movw	r22, r28
   14198:	6f 5b       	subi	r22, 0xBF	; 191
   1419a:	7f 4f       	sbci	r23, 0xFF	; 255
   1419c:	8e e2       	ldi	r24, 0x2E	; 46
   1419e:	9e e0       	ldi	r25, 0x0E	; 14
   141a0:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
    ///
    load_max = 0;
   141a4:	10 92 db 10 	sts	0x10DB, r1	; 0x8010db <load_max>
   141a8:	10 92 dc 10 	sts	0x10DC, r1	; 0x8010dc <load_max+0x1>
   141ac:	10 92 dd 10 	sts	0x10DD, r1	; 0x8010dd <load_max+0x2>
   141b0:	10 92 de 10 	sts	0x10DE, r1	; 0x8010de <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
    load_min = 0xffffffff;
   141b4:	2f ef       	ldi	r18, 0xFF	; 255
   141b6:	3f ef       	ldi	r19, 0xFF	; 255
   141b8:	a9 01       	movw	r20, r18
   141ba:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   141be:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   141c2:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   141c6:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
    ///
    strcpy(str_topic, "status/default_ring");
   141ca:	6a e9       	ldi	r22, 0x9A	; 154
   141cc:	77 e0       	ldi	r23, 0x07	; 7
   141ce:	ce 01       	movw	r24, r28
   141d0:	8f 5b       	subi	r24, 0xBF	; 191
   141d2:	9f 4f       	sbci	r25, 0xFF	; 255
   141d4:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
    itoa(default_ring, payload, 10);
   141d8:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   141dc:	4a e0       	ldi	r20, 0x0A	; 10
   141de:	be 01       	movw	r22, r28
   141e0:	6f 5f       	subi	r22, 0xFF	; 255
   141e2:	7f 4f       	sbci	r23, 0xFF	; 255
   141e4:	90 e0       	ldi	r25, 0x00	; 0
   141e6:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   141ea:	ae 01       	movw	r20, r28
   141ec:	4f 5f       	subi	r20, 0xFF	; 255
   141ee:	5f 4f       	sbci	r21, 0xFF	; 255
   141f0:	be 01       	movw	r22, r28
   141f2:	6f 5b       	subi	r22, 0xBF	; 191
   141f4:	7f 4f       	sbci	r23, 0xFF	; 255
   141f6:	8e e2       	ldi	r24, 0x2E	; 46
   141f8:	9e e0       	ldi	r25, 0x0E	; 14
   141fa:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
    ///
    strcpy(str_topic, "status/selftest");
   141fe:	6e ea       	ldi	r22, 0xAE	; 174
   14200:	77 e0       	ldi	r23, 0x07	; 7
   14202:	ce 01       	movw	r24, r28
   14204:	8f 5b       	subi	r24, 0xBF	; 191
   14206:	9f 4f       	sbci	r25, 0xFF	; 255
   14208:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2992
    itoa(selftest_data, payload, 10);
   1420c:	80 91 e9 0a 	lds	r24, 0x0AE9	; 0x800ae9 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14210:	4a e0       	ldi	r20, 0x0A	; 10
   14212:	be 01       	movw	r22, r28
   14214:	6f 5f       	subi	r22, 0xFF	; 255
   14216:	7f 4f       	sbci	r23, 0xFF	; 255
   14218:	90 e0       	ldi	r25, 0x00	; 0
   1421a:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1421e:	ae 01       	movw	r20, r28
   14220:	4f 5f       	subi	r20, 0xFF	; 255
   14222:	5f 4f       	sbci	r21, 0xFF	; 255
   14224:	be 01       	movw	r22, r28
   14226:	6f 5b       	subi	r22, 0xBF	; 191
   14228:	7f 4f       	sbci	r23, 0xFF	; 255
   1422a:	8e e2       	ldi	r24, 0x2E	; 46
   1422c:	9e e0       	ldi	r25, 0x0E	; 14
   1422e:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995

    strcpy(str_topic, "status/rtds/count");
   14232:	6e eb       	ldi	r22, 0xBE	; 190
   14234:	77 e0       	ldi	r23, 0x07	; 7
   14236:	ce 01       	movw	r24, r28
   14238:	8f 5b       	subi	r24, 0xBF	; 191
   1423a:	9f 4f       	sbci	r25, 0xFF	; 255
   1423c:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
    itoa(use_rtds, payload, 10);
   14240:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14244:	4a e0       	ldi	r20, 0x0A	; 10
   14246:	be 01       	movw	r22, r28
   14248:	6f 5f       	subi	r22, 0xFF	; 255
   1424a:	7f 4f       	sbci	r23, 0xFF	; 255
   1424c:	90 e0       	ldi	r25, 0x00	; 0
   1424e:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14252:	ae 01       	movw	r20, r28
   14254:	4f 5f       	subi	r20, 0xFF	; 255
   14256:	5f 4f       	sbci	r21, 0xFF	; 255
   14258:	be 01       	movw	r22, r28
   1425a:	6f 5b       	subi	r22, 0xBF	; 191
   1425c:	7f 4f       	sbci	r23, 0xFF	; 255
   1425e:	8e e2       	ldi	r24, 0x2E	; 46
   14260:	9e e0       	ldi	r25, 0x0E	; 14
   14262:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3375
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   14266:	81 e0       	ldi	r24, 0x01	; 1
   14268:	90 e0       	ldi	r25, 0x00	; 0
   1426a:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1426e:	4a e0       	ldi	r20, 0x0A	; 10
   14270:	be 01       	movw	r22, r28
   14272:	6f 5f       	subi	r22, 0xFF	; 255
   14274:	7f 4f       	sbci	r23, 0xFF	; 255
   14276:	90 e0       	ldi	r25, 0x00	; 0
   14278:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3004
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1427c:	ae 01       	movw	r20, r28
   1427e:	4f 5f       	subi	r20, 0xFF	; 255
   14280:	5f 4f       	sbci	r21, 0xFF	; 255
   14282:	60 ed       	ldi	r22, 0xD0	; 208
   14284:	77 e0       	ldi	r23, 0x07	; 7
   14286:	8e e2       	ldi	r24, 0x2E	; 46
   14288:	9e e0       	ldi	r25, 0x0E	; 14
   1428a:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1428e:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <tritri>
   14292:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <tritri+0x1>
   14296:	25 e0       	ldi	r18, 0x05	; 5
   14298:	28 9f       	mul	r18, r24
   1429a:	b0 01       	movw	r22, r0
   1429c:	29 9f       	mul	r18, r25
   1429e:	70 0d       	add	r23, r0
   142a0:	11 24       	eor	r1, r1
   142a2:	90 e0       	ldi	r25, 0x00	; 0
   142a4:	80 e0       	ldi	r24, 0x00	; 0
   142a6:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
   142aa:	20 e0       	ldi	r18, 0x00	; 0
   142ac:	30 e0       	ldi	r19, 0x00	; 0
   142ae:	4a e7       	ldi	r20, 0x7A	; 122
   142b0:	54 e4       	ldi	r21, 0x44	; 68
   142b2:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3006
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   142b6:	8e 01       	movw	r16, r28
   142b8:	0f 5f       	subi	r16, 0xFF	; 255
   142ba:	1f 4f       	sbci	r17, 0xFF	; 255
   142bc:	22 e0       	ldi	r18, 0x02	; 2
   142be:	44 e0       	ldi	r20, 0x04	; 4
   142c0:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   142c4:	a8 01       	movw	r20, r16
   142c6:	60 ee       	ldi	r22, 0xE0	; 224
   142c8:	77 e0       	ldi	r23, 0x07	; 7
   142ca:	8e e2       	ldi	r24, 0x2E	; 46
   142cc:	9e e0       	ldi	r25, 0x0E	; 14
   142ce:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   142d2:	60 91 26 0a 	lds	r22, 0x0A26	; 0x800a26 <petnula>
   142d6:	70 91 27 0a 	lds	r23, 0x0A27	; 0x800a27 <petnula+0x1>
   142da:	f3 e0       	ldi	r31, 0x03	; 3
   142dc:	66 0f       	add	r22, r22
   142de:	77 1f       	adc	r23, r23
   142e0:	fa 95       	dec	r31
   142e2:	e1 f7       	brne	.-8      	; 0x142dc <main+0x5c0>
   142e4:	90 e0       	ldi	r25, 0x00	; 0
   142e6:	80 e0       	ldi	r24, 0x00	; 0
   142e8:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
   142ec:	20 e0       	ldi	r18, 0x00	; 0
   142ee:	30 e0       	ldi	r19, 0x00	; 0
   142f0:	4a e7       	ldi	r20, 0x7A	; 122
   142f2:	54 e4       	ldi	r21, 0x44	; 68
   142f4:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   142f8:	22 e0       	ldi	r18, 0x02	; 2
   142fa:	44 e0       	ldi	r20, 0x04	; 4
   142fc:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   14300:	a8 01       	movw	r20, r16
   14302:	63 ef       	ldi	r22, 0xF3	; 243
   14304:	77 e0       	ldi	r23, 0x07	; 7
   14306:	8e e2       	ldi	r24, 0x2E	; 46
   14308:	9e e0       	ldi	r25, 0x0E	; 14
   1430a:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1430e:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <dvanact>
   14312:	90 91 25 0a 	lds	r25, 0x0A25	; 0x800a25 <dvanact+0x1>
   14316:	29 e3       	ldi	r18, 0x39	; 57
   14318:	28 9f       	mul	r18, r24
   1431a:	b0 01       	movw	r22, r0
   1431c:	29 9f       	mul	r18, r25
   1431e:	70 0d       	add	r23, r0
   14320:	11 24       	eor	r1, r1
   14322:	90 e0       	ldi	r25, 0x00	; 0
   14324:	80 e0       	ldi	r24, 0x00	; 0
   14326:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
   1432a:	20 e0       	ldi	r18, 0x00	; 0
   1432c:	30 e0       	ldi	r19, 0x00	; 0
   1432e:	4a e7       	ldi	r20, 0x7A	; 122
   14330:	54 e4       	ldi	r21, 0x44	; 68
   14332:	0e 94 be b2 	call	0x1657c	; 0x1657c <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3012
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   14336:	22 e0       	ldi	r18, 0x02	; 2
   14338:	44 e0       	ldi	r20, 0x04	; 4
   1433a:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   1433e:	a8 01       	movw	r20, r16
   14340:	66 e0       	ldi	r22, 0x06	; 6
   14342:	78 e0       	ldi	r23, 0x08	; 8
   14344:	8e e2       	ldi	r24, 0x2E	; 46
   14346:	9e e0       	ldi	r25, 0x0E	; 14
   14348:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1434c:	60 91 22 0a 	lds	r22, 0x0A22	; 0x800a22 <proud>
   14350:	70 91 23 0a 	lds	r23, 0x0A23	; 0x800a23 <proud+0x1>
   14354:	90 e0       	ldi	r25, 0x00	; 0
   14356:	80 e0       	ldi	r24, 0x00	; 0
   14358:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1435c:	22 e0       	ldi	r18, 0x02	; 2
   1435e:	44 e0       	ldi	r20, 0x04	; 4
   14360:	0e 94 b0 a6 	call	0x14d60	; 0x14d60 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   14364:	a8 01       	movw	r20, r16
   14366:	69 e1       	ldi	r22, 0x19	; 25
   14368:	78 e0       	ldi	r23, 0x08	; 8
   1436a:	8e e2       	ldi	r24, 0x2E	; 46
   1436c:	9e e0       	ldi	r25, 0x0E	; 14
   1436e:	0e 94 08 58 	call	0xb010	; 0xb010 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   14372:	e8 e5       	ldi	r30, 0x58	; 88
   14374:	ae 2e       	mov	r10, r30
   14376:	bb 24       	eor	r11, r11
   14378:	b3 94       	inc	r11
   1437a:	10 e0       	ldi	r17, 0x00	; 0
   1437c:	00 e0       	ldi	r16, 0x00	; 0
   1437e:	90 2e       	mov	r9, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   14380:	80 2f       	mov	r24, r16
   14382:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
   14386:	8f 3f       	cpi	r24, 0xFF	; 255
   14388:	09 f4       	brne	.+2      	; 0x1438c <main+0x670>
   1438a:	0d c1       	rjmp	.+538    	; 0x145a6 <main+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
    {
      thermostat_ring_get_name(idx, payload);
   1438c:	be 01       	movw	r22, r28
   1438e:	6f 5f       	subi	r22, 0xFF	; 255
   14390:	7f 4f       	sbci	r23, 0xFF	; 255
   14392:	80 2f       	mov	r24, r16
   14394:	0e 94 88 52 	call	0xa510	; 0xa510 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   14398:	9e 01       	movw	r18, r28
   1439a:	2f 5f       	subi	r18, 0xFF	; 255
   1439c:	3f 4f       	sbci	r19, 0xFF	; 255
   1439e:	40 ed       	ldi	r20, 0xD0	; 208
   143a0:	53 e0       	ldi	r21, 0x03	; 3
   143a2:	60 2f       	mov	r22, r16
   143a4:	8d e3       	ldi	r24, 0x3D	; 61
   143a6:	93 e0       	ldi	r25, 0x03	; 3
   143a8:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045
      itoa(thermostat_ring_get_active(idx), payload, 10);
   143ac:	80 2f       	mov	r24, r16
   143ae:	0e 94 3b 52 	call	0xa476	; 0xa476 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   143b2:	4a e0       	ldi	r20, 0x0A	; 10
   143b4:	be 01       	movw	r22, r28
   143b6:	6f 5f       	subi	r22, 0xFF	; 255
   143b8:	7f 4f       	sbci	r23, 0xFF	; 255
   143ba:	90 e0       	ldi	r25, 0x00	; 0
   143bc:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   143c0:	9e 01       	movw	r18, r28
   143c2:	2f 5f       	subi	r18, 0xFF	; 255
   143c4:	3f 4f       	sbci	r19, 0xFF	; 255
   143c6:	4a ed       	ldi	r20, 0xDA	; 218
   143c8:	53 e0       	ldi	r21, 0x03	; 3
   143ca:	60 2f       	mov	r22, r16
   143cc:	8d e3       	ldi	r24, 0x3D	; 61
   143ce:	93 e0       	ldi	r25, 0x03	; 3
   143d0:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   143d4:	c5 01       	movw	r24, r10
   143d6:	03 96       	adiw	r24, 0x03	; 3
   143d8:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   143dc:	4a e0       	ldi	r20, 0x0A	; 10
   143de:	be 01       	movw	r22, r28
   143e0:	6f 5f       	subi	r22, 0xFF	; 255
   143e2:	7f 4f       	sbci	r23, 0xFF	; 255
   143e4:	90 e0       	ldi	r25, 0x00	; 0
   143e6:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   143ea:	9e 01       	movw	r18, r28
   143ec:	2f 5f       	subi	r18, 0xFF	; 255
   143ee:	3f 4f       	sbci	r19, 0xFF	; 255
   143f0:	43 e7       	ldi	r20, 0x73	; 115
   143f2:	56 e0       	ldi	r21, 0x06	; 6
   143f4:	60 2f       	mov	r22, r16
   143f6:	8d e3       	ldi	r24, 0x3D	; 61
   143f8:	93 e0       	ldi	r25, 0x03	; 3
   143fa:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   143fe:	80 2f       	mov	r24, r16
   14400:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14404:	4a e0       	ldi	r20, 0x0A	; 10
   14406:	be 01       	movw	r22, r28
   14408:	6f 5f       	subi	r22, 0xFF	; 255
   1440a:	7f 4f       	sbci	r23, 0xFF	; 255
   1440c:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3050
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   14410:	9e 01       	movw	r18, r28
   14412:	2f 5f       	subi	r18, 0xFF	; 255
   14414:	3f 4f       	sbci	r19, 0xFF	; 255
   14416:	49 e6       	ldi	r20, 0x69	; 105
   14418:	56 e0       	ldi	r21, 0x06	; 6
   1441a:	60 2f       	mov	r22, r16
   1441c:	8d e3       	ldi	r24, 0x3D	; 61
   1441e:	93 e0       	ldi	r25, 0x03	; 3
   14420:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   14424:	80 2f       	mov	r24, r16
   14426:	0e 94 a4 51 	call	0xa348	; 0xa348 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1442a:	4a e0       	ldi	r20, 0x0A	; 10
   1442c:	be 01       	movw	r22, r28
   1442e:	6f 5f       	subi	r22, 0xFF	; 255
   14430:	7f 4f       	sbci	r23, 0xFF	; 255
   14432:	90 e0       	ldi	r25, 0x00	; 0
   14434:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3052
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   14438:	9e 01       	movw	r18, r28
   1443a:	2f 5f       	subi	r18, 0xFF	; 255
   1443c:	3f 4f       	sbci	r19, 0xFF	; 255
   1443e:	4c e8       	ldi	r20, 0x8C	; 140
   14440:	56 e0       	ldi	r21, 0x06	; 6
   14442:	60 2f       	mov	r22, r16
   14444:	8d e3       	ldi	r24, 0x3D	; 61
   14446:	93 e0       	ldi	r25, 0x03	; 3
   14448:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   1444c:	80 2f       	mov	r24, r16
   1444e:	0e 94 a4 51 	call	0xa348	; 0xa348 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3419
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   14452:	60 e3       	ldi	r22, 0x30	; 48
   14454:	78 e0       	ldi	r23, 0x08	; 8
   14456:	88 23       	and	r24, r24
   14458:	a1 f0       	breq	.+40     	; 0x14482 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3420
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1445a:	6f e6       	ldi	r22, 0x6F	; 111
   1445c:	75 e0       	ldi	r23, 0x05	; 5
   1445e:	81 30       	cpi	r24, 0x01	; 1
   14460:	81 f0       	breq	.+32     	; 0x14482 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3421
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   14462:	64 e7       	ldi	r22, 0x74	; 116
   14464:	75 e0       	ldi	r23, 0x05	; 5
   14466:	83 30       	cpi	r24, 0x03	; 3
   14468:	61 f0       	breq	.+24     	; 0x14482 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3422
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1446a:	6b e7       	ldi	r22, 0x7B	; 123
   1446c:	75 e0       	ldi	r23, 0x05	; 5
   1446e:	82 30       	cpi	r24, 0x02	; 2
   14470:	41 f0       	breq	.+16     	; 0x14482 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3423
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   14472:	60 e8       	ldi	r22, 0x80	; 128
   14474:	75 e0       	ldi	r23, 0x05	; 5
   14476:	84 30       	cpi	r24, 0x04	; 4
   14478:	21 f0       	breq	.+8      	; 0x14482 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3424
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1447a:	86 30       	cpi	r24, 0x06	; 6
   1447c:	31 f4       	brne	.+12     	; 0x1448a <main+0x76e>
   1447e:	65 e8       	ldi	r22, 0x85	; 133
   14480:	75 e0       	ldi	r23, 0x05	; 5
   14482:	ce 01       	movw	r24, r28
   14484:	01 96       	adiw	r24, 0x01	; 1
   14486:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1448a:	9e 01       	movw	r18, r28
   1448c:	2f 5f       	subi	r18, 0xFF	; 255
   1448e:	3f 4f       	sbci	r19, 0xFF	; 255
   14490:	47 e8       	ldi	r20, 0x87	; 135
   14492:	56 e0       	ldi	r21, 0x06	; 6
   14494:	69 2d       	mov	r22, r9
   14496:	8d e3       	ldi	r24, 0x3D	; 61
   14498:	93 e0       	ldi	r25, 0x03	; 3
   1449a:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   1449e:	f8 01       	movw	r30, r16
   144a0:	e5 5d       	subi	r30, 0xD5	; 213
   144a2:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
      itoa(thermostat_ring_get_state(idx), payload, 10);
   144a4:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   144a6:	4a e0       	ldi	r20, 0x0A	; 10
   144a8:	be 01       	movw	r22, r28
   144aa:	6f 5f       	subi	r22, 0xFF	; 255
   144ac:	7f 4f       	sbci	r23, 0xFF	; 255
   144ae:	90 e0       	ldi	r25, 0x00	; 0
   144b0:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   144b4:	9e 01       	movw	r18, r28
   144b6:	2f 5f       	subi	r18, 0xFF	; 255
   144b8:	3f 4f       	sbci	r19, 0xFF	; 255
   144ba:	44 e3       	ldi	r20, 0x34	; 52
   144bc:	58 e0       	ldi	r21, 0x08	; 8
   144be:	69 2d       	mov	r22, r9
   144c0:	8d e3       	ldi	r24, 0x3D	; 61
   144c2:	93 e0       	ldi	r25, 0x03	; 3
   144c4:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   144c8:	c5 01       	movw	r24, r10
   144ca:	04 96       	adiw	r24, 0x04	; 4
   144cc:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   144d0:	88 2e       	mov	r8, r24
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
      tdsid = thermostat_ring_get_asociate_tds(idx);
      if (tdsid >= TDS_MEMORY_MAP_TDS && tdsid < TDS_MEMORY_MAP_RTDS)
   144d2:	3f e0       	ldi	r19, 0x0F	; 15
   144d4:	38 17       	cp	r19, r24
   144d6:	88 f0       	brcs	.+34     	; 0x144fa <main+0x7de>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   144d8:	4a e0       	ldi	r20, 0x0A	; 10
   144da:	be 01       	movw	r22, r28
   144dc:	6f 5f       	subi	r22, 0xFF	; 255
   144de:	7f 4f       	sbci	r23, 0xFF	; 255
   144e0:	90 e0       	ldi	r25, 0x00	; 0
   144e2:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3061
      {
        itoa(tdsid, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "tds", payload);
   144e6:	9e 01       	movw	r18, r28
   144e8:	2f 5f       	subi	r18, 0xFF	; 255
   144ea:	3f 4f       	sbci	r19, 0xFF	; 255
   144ec:	46 ed       	ldi	r20, 0xD6	; 214
   144ee:	53 e0       	ldi	r21, 0x03	; 3
   144f0:	69 2d       	mov	r22, r9
   144f2:	8d e3       	ldi	r24, 0x3D	; 61
   144f4:	93 e0       	ldi	r25, 0x03	; 3
   144f6:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3063
      }
      if (tdsid >= TDS_MEMORY_MAP_RTDS && tdsid < 127)
   144fa:	80 ef       	ldi	r24, 0xF0	; 240
   144fc:	88 0d       	add	r24, r8
   144fe:	8f 36       	cpi	r24, 0x6F	; 111
   14500:	a0 f4       	brcc	.+40     	; 0x1452a <main+0x80e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14502:	4a e0       	ldi	r20, 0x0A	; 10
   14504:	be 01       	movw	r22, r28
   14506:	6f 5f       	subi	r22, 0xFF	; 255
   14508:	7f 4f       	sbci	r23, 0xFF	; 255
   1450a:	a8 2d       	mov	r26, r8
   1450c:	a0 51       	subi	r26, 0x10	; 16
   1450e:	bb 0b       	sbc	r27, r27
   14510:	cd 01       	movw	r24, r26
   14512:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
      {
        itoa(tdsid - TDS_MEMORY_MAP_RTDS, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "rtds", payload);
   14516:	9e 01       	movw	r18, r28
   14518:	2f 5f       	subi	r18, 0xFF	; 255
   1451a:	3f 4f       	sbci	r19, 0xFF	; 255
   1451c:	45 ed       	ldi	r20, 0xD5	; 213
   1451e:	53 e0       	ldi	r21, 0x03	; 3
   14520:	69 2d       	mov	r22, r9
   14522:	8d e3       	ldi	r24, 0x3D	; 61
   14524:	93 e0       	ldi	r25, 0x03	; 3
   14526:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1452a:	c5 01       	movw	r24, r10
   1452c:	07 96       	adiw	r24, 0x07	; 7
   1452e:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14532:	4a e0       	ldi	r20, 0x0A	; 10
   14534:	be 01       	movw	r22, r28
   14536:	6f 5f       	subi	r22, 0xFF	; 255
   14538:	7f 4f       	sbci	r23, 0xFF	; 255
   1453a:	90 e0       	ldi	r25, 0x00	; 0
   1453c:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
      }
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   14540:	9e 01       	movw	r18, r28
   14542:	2f 5f       	subi	r18, 0xFF	; 255
   14544:	3f 4f       	sbci	r19, 0xFF	; 255
   14546:	41 e9       	ldi	r20, 0x91	; 145
   14548:	56 e0       	ldi	r21, 0x06	; 6
   1454a:	69 2d       	mov	r22, r9
   1454c:	8d e3       	ldi	r24, 0x3D	; 61
   1454e:	93 e0       	ldi	r25, 0x03	; 3
   14550:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   14554:	c5 01       	movw	r24, r10
   14556:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1455a:	4a e0       	ldi	r20, 0x0A	; 10
   1455c:	be 01       	movw	r22, r28
   1455e:	6f 5f       	subi	r22, 0xFF	; 255
   14560:	7f 4f       	sbci	r23, 0xFF	; 255
   14562:	90 e0       	ldi	r25, 0x00	; 0
   14564:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   14568:	9e 01       	movw	r18, r28
   1456a:	2f 5f       	subi	r18, 0xFF	; 255
   1456c:	3f 4f       	sbci	r19, 0xFF	; 255
   1456e:	4b e3       	ldi	r20, 0x3B	; 59
   14570:	58 e0       	ldi	r21, 0x08	; 8
   14572:	69 2d       	mov	r22, r9
   14574:	8d e3       	ldi	r24, 0x3D	; 61
   14576:	93 e0       	ldi	r25, 0x03	; 3
   14578:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074

      itoa(last_output_update[idx], payload, 10);
   1457c:	f8 01       	movw	r30, r16
   1457e:	e0 5d       	subi	r30, 0xD0	; 208
   14580:	f5 4f       	sbci	r31, 0xF5	; 245
   14582:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14584:	4a e0       	ldi	r20, 0x0A	; 10
   14586:	be 01       	movw	r22, r28
   14588:	6f 5f       	subi	r22, 0xFF	; 255
   1458a:	7f 4f       	sbci	r23, 0xFF	; 255
   1458c:	90 e0       	ldi	r25, 0x00	; 0
   1458e:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   14592:	9e 01       	movw	r18, r28
   14594:	2f 5f       	subi	r18, 0xFF	; 255
   14596:	3f 4f       	sbci	r19, 0xFF	; 255
   14598:	48 e4       	ldi	r20, 0x48	; 72
   1459a:	58 e0       	ldi	r21, 0x08	; 8
   1459c:	69 2d       	mov	r22, r9
   1459e:	8d e3       	ldi	r24, 0x3D	; 61
   145a0:	93 e0       	ldi	r25, 0x03	; 3
   145a2:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   145a6:	0f 5f       	subi	r16, 0xFF	; 255
   145a8:	1f 4f       	sbci	r17, 0xFF	; 255
   145aa:	b1 e2       	ldi	r27, 0x21	; 33
   145ac:	ab 0e       	add	r10, r27
   145ae:	b1 1c       	adc	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039
  //char hostname[10];
  char payload[64];
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   145b0:	ed ef       	ldi	r30, 0xFD	; 253
   145b2:	ae 16       	cp	r10, r30
   145b4:	e1 e0       	ldi	r30, 0x01	; 1
   145b6:	be 06       	cpc	r11, r30
   145b8:	09 f0       	breq	.+2      	; 0x145bc <main+0x8a0>
   145ba:	e1 ce       	rjmp	.-574    	; 0x1437e <main+0x662>
   145bc:	65 e3       	ldi	r22, 0x35	; 53
   145be:	a6 2e       	mov	r10, r22
   145c0:	6a e0       	ldi	r22, 0x0A	; 10
   145c2:	b6 2e       	mov	r11, r22
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   145c4:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   145c6:	7a e0       	ldi	r23, 0x0A	; 10
   145c8:	87 2e       	mov	r8, r23
   145ca:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   145cc:	be 01       	movw	r22, r28
   145ce:	6f 5b       	subi	r22, 0xBF	; 191
   145d0:	7f 4f       	sbci	r23, 0xFF	; 255
   145d2:	81 2f       	mov	r24, r17
   145d4:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
   145d8:	81 30       	cpi	r24, 0x01	; 1
   145da:	09 f0       	breq	.+2      	; 0x145de <main+0x8c2>
   145dc:	d2 c0       	rjmp	.+420    	; 0x14782 <main+0xa66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   145de:	22 96       	adiw	r28, 0x02	; 2
   145e0:	8f ad       	ldd	r24, Y+63	; 0x3f
   145e2:	22 97       	sbiw	r28, 0x02	; 2
   145e4:	81 30       	cpi	r24, 0x01	; 1
   145e6:	09 f0       	breq	.+2      	; 0x145ea <main+0x8ce>
   145e8:	cc c0       	rjmp	.+408    	; 0x14782 <main+0xa66>
   145ea:	d5 01       	movw	r26, r10
   145ec:	5b 96       	adiw	r26, 0x1b	; 27
   145ee:	8c 91       	ld	r24, X
   145f0:	5b 97       	sbiw	r26, 0x1b	; 27
   145f2:	81 30       	cpi	r24, 0x01	; 1
   145f4:	09 f0       	breq	.+2      	; 0x145f8 <main+0x8dc>
   145f6:	c5 c0       	rjmp	.+394    	; 0x14782 <main+0xa66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
        {
          tt = status_tds18s20[id].temp / 10;
   145f8:	15 96       	adiw	r26, 0x05	; 5
   145fa:	8d 91       	ld	r24, X+
   145fc:	9c 91       	ld	r25, X
   145fe:	b4 01       	movw	r22, r8
   14600:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   14604:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14606:	4a e0       	ldi	r20, 0x0A	; 10
   14608:	be 01       	movw	r22, r28
   1460a:	6f 5f       	subi	r22, 0xFF	; 255
   1460c:	7f 4f       	sbci	r23, 0xFF	; 255
   1460e:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   14612:	9e 01       	movw	r18, r28
   14614:	2f 5f       	subi	r18, 0xFF	; 255
   14616:	3f 4f       	sbci	r19, 0xFF	; 255
   14618:	41 ee       	ldi	r20, 0xE1	; 225
   1461a:	53 e0       	ldi	r21, 0x03	; 3
   1461c:	61 2f       	mov	r22, r17
   1461e:	86 ed       	ldi	r24, 0xD6	; 214
   14620:	93 e0       	ldi	r25, 0x03	; 3
   14622:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   14626:	30 e0       	ldi	r19, 0x00	; 0
   14628:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3101
          avg = 0;
   1462a:	60 e0       	ldi	r22, 0x00	; 0
   1462c:	70 e0       	ldi	r23, 0x00	; 0
   1462e:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   14630:	f9 01       	movw	r30, r18
   14632:	ee 0f       	add	r30, r30
   14634:	ff 1f       	adc	r31, r31
   14636:	ea 0d       	add	r30, r10
   14638:	fb 1d       	adc	r31, r11
   1463a:	47 80       	ldd	r4, Z+7	; 0x07
   1463c:	50 84       	ldd	r5, Z+8	; 0x08
   1463e:	05 2c       	mov	r0, r5
   14640:	00 0c       	add	r0, r0
   14642:	66 08       	sbc	r6, r6
   14644:	77 08       	sbc	r7, r7
   14646:	64 0d       	add	r22, r4
   14648:	75 1d       	adc	r23, r5
   1464a:	86 1d       	adc	r24, r6
   1464c:	97 1d       	adc	r25, r7
   1464e:	2f 5f       	subi	r18, 0xFF	; 255
   14650:	3f 4f       	sbci	r19, 0xFF	; 255
   14652:	2a 30       	cpi	r18, 0x0A	; 10
   14654:	31 05       	cpc	r19, r1
   14656:	61 f7       	brne	.-40     	; 0x14630 <main+0x914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3104
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   14658:	24 e6       	ldi	r18, 0x64	; 100
   1465a:	30 e0       	ldi	r19, 0x00	; 0
   1465c:	40 e0       	ldi	r20, 0x00	; 0
   1465e:	50 e0       	ldi	r21, 0x00	; 0
   14660:	0e 94 18 b2 	call	0x16430	; 0x16430 <__divmodsi4>
   14664:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14666:	4a e0       	ldi	r20, 0x0A	; 10
   14668:	be 01       	movw	r22, r28
   1466a:	6f 5f       	subi	r22, 0xFF	; 255
   1466c:	7f 4f       	sbci	r23, 0xFF	; 255
   1466e:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   14672:	9e 01       	movw	r18, r28
   14674:	2f 5f       	subi	r18, 0xFF	; 255
   14676:	3f 4f       	sbci	r19, 0xFF	; 255
   14678:	46 e5       	ldi	r20, 0x56	; 86
   1467a:	58 e0       	ldi	r21, 0x08	; 8
   1467c:	61 2f       	mov	r22, r17
   1467e:	86 ed       	ldi	r24, 0xD6	; 214
   14680:	93 e0       	ldi	r25, 0x03	; 3
   14682:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3108

          strcpy(payload, tds.name);
   14686:	cc 57       	subi	r28, 0x7C	; 124
   14688:	df 4f       	sbci	r29, 0xFF	; 255
   1468a:	68 81       	ld	r22, Y
   1468c:	79 81       	ldd	r23, Y+1	; 0x01
   1468e:	c4 58       	subi	r28, 0x84	; 132
   14690:	d0 40       	sbci	r29, 0x00	; 0
   14692:	ce 01       	movw	r24, r28
   14694:	01 96       	adiw	r24, 0x01	; 1
   14696:	0e 94 8d b4 	call	0x1691a	; 0x1691a <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3109
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   1469a:	9e 01       	movw	r18, r28
   1469c:	2f 5f       	subi	r18, 0xFF	; 255
   1469e:	3f 4f       	sbci	r19, 0xFF	; 255
   146a0:	40 ed       	ldi	r20, 0xD0	; 208
   146a2:	53 e0       	ldi	r21, 0x03	; 3
   146a4:	61 2f       	mov	r22, r17
   146a6:	86 ed       	ldi	r24, 0xD6	; 214
   146a8:	93 e0       	ldi	r25, 0x03	; 3
   146aa:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   146ae:	4a e0       	ldi	r20, 0x0A	; 10
   146b0:	be 01       	movw	r22, r28
   146b2:	6f 5f       	subi	r22, 0xFF	; 255
   146b4:	7f 4f       	sbci	r23, 0xFF	; 255
   146b6:	2d 96       	adiw	r28, 0x0d	; 13
   146b8:	8e ad       	ldd	r24, Y+62	; 0x3e
   146ba:	9f ad       	ldd	r25, Y+63	; 0x3f
   146bc:	2d 97       	sbiw	r28, 0x0d	; 13
   146be:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3112
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   146c2:	9e 01       	movw	r18, r28
   146c4:	2f 5f       	subi	r18, 0xFF	; 255
   146c6:	3f 4f       	sbci	r19, 0xFF	; 255
   146c8:	49 ed       	ldi	r20, 0xD9	; 217
   146ca:	57 e0       	ldi	r21, 0x07	; 7
   146cc:	61 2f       	mov	r22, r17
   146ce:	86 ed       	ldi	r24, 0xD6	; 214
   146d0:	93 e0       	ldi	r25, 0x03	; 3
   146d2:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3113
          tt = status_tds18s20[id].online;
   146d6:	f5 01       	movw	r30, r10
   146d8:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   146da:	4a e0       	ldi	r20, 0x0A	; 10
   146dc:	be 01       	movw	r22, r28
   146de:	6f 5f       	subi	r22, 0xFF	; 255
   146e0:	7f 4f       	sbci	r23, 0xFF	; 255
   146e2:	90 e0       	ldi	r25, 0x00	; 0
   146e4:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3115
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   146e8:	9e 01       	movw	r18, r28
   146ea:	2f 5f       	subi	r18, 0xFF	; 255
   146ec:	3f 4f       	sbci	r19, 0xFF	; 255
   146ee:	4f e5       	ldi	r20, 0x5F	; 95
   146f0:	58 e0       	ldi	r21, 0x08	; 8
   146f2:	61 2f       	mov	r22, r17
   146f4:	86 ed       	ldi	r24, 0xD6	; 214
   146f6:	93 e0       	ldi	r25, 0x03	; 3
   146f8:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3116
          payload[0] = 0;
   146fc:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
          createString(payload, ':', tds.rom, 8, 16);
   146fe:	00 e1       	ldi	r16, 0x10	; 16
   14700:	28 e0       	ldi	r18, 0x08	; 8
   14702:	ca 57       	subi	r28, 0x7A	; 122
   14704:	df 4f       	sbci	r29, 0xFF	; 255
   14706:	48 81       	ld	r20, Y
   14708:	59 81       	ldd	r21, Y+1	; 0x01
   1470a:	c6 58       	subi	r28, 0x86	; 134
   1470c:	d0 40       	sbci	r29, 0x00	; 0
   1470e:	6a e3       	ldi	r22, 0x3A	; 58
   14710:	ce 01       	movw	r24, r28
   14712:	01 96       	adiw	r24, 0x01	; 1
   14714:	0e 94 44 94 	call	0x12888	; 0x12888 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3118
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   14718:	9e 01       	movw	r18, r28
   1471a:	2f 5f       	subi	r18, 0xFF	; 255
   1471c:	3f 4f       	sbci	r19, 0xFF	; 255
   1471e:	48 e2       	ldi	r20, 0x28	; 40
   14720:	57 e0       	ldi	r21, 0x07	; 7
   14722:	61 2f       	mov	r22, r17
   14724:	86 ed       	ldi	r24, 0xD6	; 214
   14726:	93 e0       	ldi	r25, 0x03	; 3
   14728:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
          tt = tds.period;
   1472c:	66 96       	adiw	r28, 0x16	; 22
   1472e:	8f ad       	ldd	r24, Y+63	; 0x3f
   14730:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14732:	4a e0       	ldi	r20, 0x0A	; 10
   14734:	be 01       	movw	r22, r28
   14736:	6f 5f       	subi	r22, 0xFF	; 255
   14738:	7f 4f       	sbci	r23, 0xFF	; 255
   1473a:	90 e0       	ldi	r25, 0x00	; 0
   1473c:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3121
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   14740:	9e 01       	movw	r18, r28
   14742:	2f 5f       	subi	r18, 0xFF	; 255
   14744:	3f 4f       	sbci	r19, 0xFF	; 255
   14746:	42 e6       	ldi	r20, 0x62	; 98
   14748:	56 e0       	ldi	r21, 0x06	; 6
   1474a:	61 2f       	mov	r22, r17
   1474c:	86 ed       	ldi	r24, 0xD6	; 214
   1474e:	93 e0       	ldi	r25, 0x03	; 3
   14750:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3123

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   14754:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <uptime>
   14758:	d5 01       	movw	r26, r10
   1475a:	5c 96       	adiw	r26, 0x1c	; 28
   1475c:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1475e:	4a e0       	ldi	r20, 0x0A	; 10
   14760:	be 01       	movw	r22, r28
   14762:	6f 5f       	subi	r22, 0xFF	; 255
   14764:	7f 4f       	sbci	r23, 0xFF	; 255
   14766:	89 1b       	sub	r24, r25
   14768:	99 0b       	sbc	r25, r25
   1476a:	0e 94 44 a8 	call	0x15088	; 0x15088 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3125
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   1476e:	9e 01       	movw	r18, r28
   14770:	2f 5f       	subi	r18, 0xFF	; 255
   14772:	3f 4f       	sbci	r19, 0xFF	; 255
   14774:	46 e6       	ldi	r20, 0x66	; 102
   14776:	58 e0       	ldi	r21, 0x08	; 8
   14778:	61 2f       	mov	r22, r17
   1477a:	86 ed       	ldi	r24, 0xD6	; 214
   1477c:	93 e0       	ldi	r25, 0x03	; 3
   1477e:	0e 94 9e 93 	call	0x1273c	; 0x1273c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14782:	1f 5f       	subi	r17, 0xFF	; 255
   14784:	be e1       	ldi	r27, 0x1E	; 30
   14786:	ab 0e       	add	r10, r27
   14788:	b1 1c       	adc	r11, r1
   1478a:	16 30       	cpi	r17, 0x06	; 6
   1478c:	09 f0       	breq	.+2      	; 0x14790 <main+0xa74>
   1478e:	1e cf       	rjmp	.-452    	; 0x145cc <main+0x8b0>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4067
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    //mqtt_send_pid_variable();
    send_mqtt_remote_tds_status();
   14790:	0e 94 47 5c 	call	0xb88e	; 0xb88e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4076
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   14794:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   14798:	00 91 e7 10 	lds	r16, 0x10E7	; 0x8010e7 <milis_1s>
   1479c:	10 91 e8 10 	lds	r17, 0x10E8	; 0x8010e8 <milis_1s+0x1>
   147a0:	20 91 e9 10 	lds	r18, 0x10E9	; 0x8010e9 <milis_1s+0x2>
   147a4:	30 91 ea 10 	lds	r19, 0x10EA	; 0x8010ea <milis_1s+0x3>
   147a8:	60 1b       	sub	r22, r16
   147aa:	71 0b       	sbc	r23, r17
   147ac:	82 0b       	sbc	r24, r18
   147ae:	93 0b       	sbc	r25, r19
   147b0:	69 3e       	cpi	r22, 0xE9	; 233
   147b2:	73 40       	sbci	r23, 0x03	; 3
   147b4:	81 05       	cpc	r24, r1
   147b6:	91 05       	cpc	r25, r1
   147b8:	08 f4       	brcc	.+2      	; 0x147bc <main+0xaa0>
   147ba:	62 c1       	rjmp	.+708    	; 0x14a80 <main+0xd64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4078
  {
    milis_1s = millis();
   147bc:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   147c0:	60 93 e7 10 	sts	0x10E7, r22	; 0x8010e7 <milis_1s>
   147c4:	70 93 e8 10 	sts	0x10E8, r23	; 0x8010e8 <milis_1s+0x1>
   147c8:	80 93 e9 10 	sts	0x10E9, r24	; 0x8010e9 <milis_1s+0x2>
   147cc:	90 93 ea 10 	sts	0x10EA, r25	; 0x8010ea <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
    uptime++;
   147d0:	40 90 f2 0a 	lds	r4, 0x0AF2	; 0x800af2 <uptime>
   147d4:	50 90 f3 0a 	lds	r5, 0x0AF3	; 0x800af3 <uptime+0x1>
   147d8:	60 90 f4 0a 	lds	r6, 0x0AF4	; 0x800af4 <uptime+0x2>
   147dc:	70 90 f5 0a 	lds	r7, 0x0AF5	; 0x800af5 <uptime+0x3>
   147e0:	ff ef       	ldi	r31, 0xFF	; 255
   147e2:	4f 1a       	sub	r4, r31
   147e4:	5f 0a       	sbc	r5, r31
   147e6:	6f 0a       	sbc	r6, r31
   147e8:	7f 0a       	sbc	r7, r31
   147ea:	40 92 f2 0a 	sts	0x0AF2, r4	; 0x800af2 <uptime>
   147ee:	50 92 f3 0a 	sts	0x0AF3, r5	; 0x800af3 <uptime+0x1>
   147f2:	60 92 f4 0a 	sts	0x0AF4, r6	; 0x800af4 <uptime+0x2>
   147f6:	70 92 f5 0a 	sts	0x0AF5, r7	; 0x800af5 <uptime+0x3>
   147fa:	05 e3       	ldi	r16, 0x35	; 53
   147fc:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   147fe:	b1 2c       	mov	r11, r1
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   14800:	92 01       	movw	r18, r4
   14802:	33 27       	eor	r19, r19
   14804:	ce 57       	subi	r28, 0x7E	; 126
   14806:	df 4f       	sbci	r29, 0xFF	; 255
   14808:	39 83       	std	Y+1, r19	; 0x01
   1480a:	28 83       	st	Y, r18
   1480c:	c2 58       	subi	r28, 0x82	; 130
   1480e:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   14810:	be 01       	movw	r22, r28
   14812:	6f 5f       	subi	r22, 0xFF	; 255
   14814:	7f 4f       	sbci	r23, 0xFF	; 255
   14816:	8b 2d       	mov	r24, r11
   14818:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   1481c:	a9 80       	ldd	r10, Y+1	; 0x01
   1481e:	31 e0       	ldi	r19, 0x01	; 1
   14820:	a3 12       	cpse	r10, r19
   14822:	f7 c0       	rjmp	.+494    	; 0x14a12 <main+0xcf6>
   14824:	d8 01       	movw	r26, r16
   14826:	5c 96       	adiw	r26, 0x1c	; 28
   14828:	8c 91       	ld	r24, X
   1482a:	5c 97       	sbiw	r26, 0x1c	; 28
   1482c:	ce 57       	subi	r28, 0x7E	; 126
   1482e:	df 4f       	sbci	r29, 0xFF	; 255
   14830:	e8 81       	ld	r30, Y
   14832:	f9 81       	ldd	r31, Y+1	; 0x01
   14834:	c2 58       	subi	r28, 0x82	; 130
   14836:	d0 40       	sbci	r29, 0x00	; 0
   14838:	e8 1b       	sub	r30, r24
   1483a:	f1 09       	sbc	r31, r1
   1483c:	2d 89       	ldd	r18, Y+21	; 0x15
   1483e:	2e 17       	cp	r18, r30
   14840:	1f 06       	cpc	r1, r31
   14842:	08 f0       	brcs	.+2      	; 0x14846 <main+0xb2a>
   14844:	e6 c0       	rjmp	.+460    	; 0x14a12 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   14846:	5d 96       	adiw	r26, 0x1d	; 29
   14848:	8c 91       	ld	r24, X
   1484a:	81 11       	cpse	r24, r1
   1484c:	10 c0       	rjmp	.+32     	; 0x1486e <main+0xb52>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   1484e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14850:	0e 94 af 8f 	call	0x11f5e	; 0x11f5e <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   14854:	be 01       	movw	r22, r28
   14856:	6e 5f       	subi	r22, 0xFE	; 254
   14858:	7f 4f       	sbci	r23, 0xFF	; 255
   1485a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1485c:	0e 94 90 8f 	call	0x11f20	; 0x11f20 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   14860:	64 e4       	ldi	r22, 0x44	; 68
   14862:	8a 85       	ldd	r24, Y+10	; 0x0a
   14864:	0e 94 57 8f 	call	0x11eae	; 0x11eae <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   14868:	d8 01       	movw	r26, r16
   1486a:	5d 96       	adiw	r26, 0x1d	; 29
   1486c:	ac 92       	st	X, r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   1486e:	f8 01       	movw	r30, r16
   14870:	a5 8c       	ldd	r10, Z+29	; 0x1d
   14872:	f1 e0       	ldi	r31, 0x01	; 1
   14874:	af 12       	cpse	r10, r31
   14876:	cd c0       	rjmp	.+410    	; 0x14a12 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   14878:	8a 85       	ldd	r24, Y+10	; 0x0a
   1487a:	0e 94 af 8f 	call	0x11f5e	; 0x11f5e <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1487e:	be 01       	movw	r22, r28
   14880:	6e 5f       	subi	r22, 0xFE	; 254
   14882:	7f 4f       	sbci	r23, 0xFF	; 255
   14884:	8a 85       	ldd	r24, Y+10	; 0x0a
   14886:	0e 94 90 8f 	call	0x11f20	; 0x11f20 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   1488a:	be 01       	movw	r22, r28
   1488c:	6f 57       	subi	r22, 0x7F	; 127
   1488e:	7f 4f       	sbci	r23, 0xFF	; 255
   14890:	8a 85       	ldd	r24, Y+10	; 0x0a
   14892:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:287
        if (t != 0)
   14896:	cf 57       	subi	r28, 0x7F	; 127
   14898:	df 4f       	sbci	r29, 0xFF	; 255
   1489a:	88 81       	ld	r24, Y
   1489c:	c1 58       	subi	r28, 0x81	; 129
   1489e:	d0 40       	sbci	r29, 0x00	; 0
   148a0:	88 23       	and	r24, r24
   148a2:	09 f4       	brne	.+2      	; 0x148a6 <main+0xb8a>
   148a4:	b6 c0       	rjmp	.+364    	; 0x14a12 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   148a6:	d8 01       	movw	r26, r16
   148a8:	5d 96       	adiw	r26, 0x1d	; 29
   148aa:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   148ac:	8a 85       	ldd	r24, Y+10	; 0x0a
   148ae:	0e 94 af 8f 	call	0x11f5e	; 0x11f5e <ds2482owReset(unsigned char)>
   148b2:	38 2e       	mov	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   148b4:	be 01       	movw	r22, r28
   148b6:	6e 5f       	subi	r22, 0xFE	; 254
   148b8:	7f 4f       	sbci	r23, 0xFF	; 255
   148ba:	8a 85       	ldd	r24, Y+10	; 0x0a
   148bc:	0e 94 90 8f 	call	0x11f20	; 0x11f20 <owMatchRom(unsigned char, unsigned char*)>
   148c0:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   148c2:	6e eb       	ldi	r22, 0xBE	; 190
   148c4:	8a 85       	ldd	r24, Y+10	; 0x0a
   148c6:	0e 94 57 8f 	call	0x11eae	; 0x11eae <ds2482owWriteByte(unsigned char, unsigned char)>
   148ca:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   148cc:	be 01       	movw	r22, r28
   148ce:	6f 5b       	subi	r22, 0xBF	; 191
   148d0:	7f 4f       	sbci	r23, 0xFF	; 255
   148d2:	8a 85       	ldd	r24, Y+10	; 0x0a
   148d4:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   148d8:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   148da:	22 96       	adiw	r28, 0x02	; 2
   148dc:	9f ac       	ldd	r9, Y+63	; 0x3f
   148de:	22 97       	sbiw	r28, 0x02	; 2
   148e0:	f8 01       	movw	r30, r16
   148e2:	90 82       	st	Z, r9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   148e4:	be 01       	movw	r22, r28
   148e6:	6f 5b       	subi	r22, 0xBF	; 191
   148e8:	7f 4f       	sbci	r23, 0xFF	; 255
   148ea:	8a 85       	ldd	r24, Y+10	; 0x0a
   148ec:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   148f0:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   148f2:	22 96       	adiw	r28, 0x02	; 2
   148f4:	8f ac       	ldd	r8, Y+63	; 0x3f
   148f6:	22 97       	sbiw	r28, 0x02	; 2
   148f8:	d8 01       	movw	r26, r16
   148fa:	11 96       	adiw	r26, 0x01	; 1
   148fc:	8c 92       	st	X, r8
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   148fe:	be 01       	movw	r22, r28
   14900:	6f 5b       	subi	r22, 0xBF	; 191
   14902:	7f 4f       	sbci	r23, 0xFF	; 255
   14904:	8a 85       	ldd	r24, Y+10	; 0x0a
   14906:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   1490a:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   1490c:	be 01       	movw	r22, r28
   1490e:	6f 5b       	subi	r22, 0xBF	; 191
   14910:	7f 4f       	sbci	r23, 0xFF	; 255
   14912:	8a 85       	ldd	r24, Y+10	; 0x0a
   14914:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   14918:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   1491a:	be 01       	movw	r22, r28
   1491c:	6f 5b       	subi	r22, 0xBF	; 191
   1491e:	7f 4f       	sbci	r23, 0xFF	; 255
   14920:	8a 85       	ldd	r24, Y+10	; 0x0a
   14922:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   14926:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   14928:	be 01       	movw	r22, r28
   1492a:	6f 5b       	subi	r22, 0xBF	; 191
   1492c:	7f 4f       	sbci	r23, 0xFF	; 255
   1492e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14930:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   14934:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   14936:	be 01       	movw	r22, r28
   14938:	6f 5b       	subi	r22, 0xBF	; 191
   1493a:	7f 4f       	sbci	r23, 0xFF	; 255
   1493c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1493e:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   14942:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   14944:	22 96       	adiw	r28, 0x02	; 2
   14946:	8f ad       	ldd	r24, Y+63	; 0x3f
   14948:	22 97       	sbiw	r28, 0x02	; 2
   1494a:	f8 01       	movw	r30, r16
   1494c:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   1494e:	be 01       	movw	r22, r28
   14950:	6f 5b       	subi	r22, 0xBF	; 191
   14952:	7f 4f       	sbci	r23, 0xFF	; 255
   14954:	8a 85       	ldd	r24, Y+10	; 0x0a
   14956:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
   1495a:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   1495c:	22 96       	adiw	r28, 0x02	; 2
   1495e:	2f ac       	ldd	r2, Y+63	; 0x3f
   14960:	22 97       	sbiw	r28, 0x02	; 2
   14962:	d8 01       	movw	r26, r16
   14964:	13 96       	adiw	r26, 0x03	; 3
   14966:	2c 92       	st	X, r2
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   14968:	be 01       	movw	r22, r28
   1496a:	6f 5b       	subi	r22, 0xBF	; 191
   1496c:	7f 4f       	sbci	r23, 0xFF	; 255
   1496e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14970:	0e 94 fb 8e 	call	0x11df6	; 0x11df6 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   14974:	22 96       	adiw	r28, 0x02	; 2
   14976:	9f ad       	ldd	r25, Y+63	; 0x3f
   14978:	22 97       	sbiw	r28, 0x02	; 2
   1497a:	f8 01       	movw	r30, r16
   1497c:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1497e:	83 0d       	add	r24, r3
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   14980:	09 f0       	breq	.+2      	; 0x14984 <main+0xc68>
   14982:	e2 c1       	rjmp	.+964    	; 0x14d48 <main+0x102c>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   14984:	62 2d       	mov	r22, r2
   14986:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   14988:	28 2d       	mov	r18, r8
   1498a:	30 e0       	ldi	r19, 0x00	; 0
   1498c:	32 2f       	mov	r19, r18
   1498e:	22 27       	eor	r18, r18
   14990:	33 0f       	add	r19, r19
   14992:	33 0f       	add	r19, r19
   14994:	33 0f       	add	r19, r19
   14996:	f8 e0       	ldi	r31, 0x08	; 8
   14998:	9f 9e       	mul	r9, r31
   1499a:	c0 01       	movw	r24, r0
   1499c:	11 24       	eor	r1, r1
   1499e:	28 2b       	or	r18, r24
   149a0:	39 2b       	or	r19, r25
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   149a2:	b3 e0       	ldi	r27, 0x03	; 3
   149a4:	22 0f       	add	r18, r18
   149a6:	33 1f       	adc	r19, r19
   149a8:	ba 95       	dec	r27
   149aa:	e1 f7       	brne	.-8      	; 0x149a4 <main+0xc88>
   149ac:	20 78       	andi	r18, 0x80	; 128
   149ae:	8b 85       	ldd	r24, Y+11	; 0x0b
   149b0:	9c 85       	ldd	r25, Y+12	; 0x0c
   149b2:	40 97       	sbiw	r24, 0x10	; 16
   149b4:	28 0f       	add	r18, r24
   149b6:	39 1f       	adc	r19, r25
   149b8:	cf 57       	subi	r28, 0x7F	; 127
   149ba:	df 4f       	sbci	r29, 0xFF	; 255
   149bc:	e8 81       	ld	r30, Y
   149be:	c1 58       	subi	r28, 0x81	; 129
   149c0:	d0 40       	sbci	r29, 0x00	; 0
   149c2:	4e e1       	ldi	r20, 0x1E	; 30
   149c4:	4e 9f       	mul	r20, r30
   149c6:	f0 01       	movw	r30, r0
   149c8:	11 24       	eor	r1, r1
   149ca:	eb 5c       	subi	r30, 0xCB	; 203
   149cc:	f5 4f       	sbci	r31, 0xF5	; 245
   149ce:	82 81       	ldd	r24, Z+2	; 0x02
   149d0:	db 01       	movw	r26, r22
   149d2:	a8 1b       	sub	r26, r24
   149d4:	b1 09       	sbc	r27, r1
   149d6:	cd 01       	movw	r24, r26
   149d8:	96 95       	lsr	r25
   149da:	98 2f       	mov	r25, r24
   149dc:	88 27       	eor	r24, r24
   149de:	97 95       	ror	r25
   149e0:	87 95       	ror	r24
   149e2:	0e 94 e2 b1 	call	0x163c4	; 0x163c4 <__divmodhi4>
   149e6:	26 0f       	add	r18, r22
   149e8:	37 1f       	adc	r19, r23
   149ea:	f8 01       	movw	r30, r16
   149ec:	36 83       	std	Z+6, r19	; 0x06
   149ee:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   149f0:	a3 8e       	std	Z+27, r10	; 0x1b
   149f2:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   149f4:	87 89       	ldd	r24, Z+23	; 0x17
   149f6:	90 8d       	ldd	r25, Z+24	; 0x18
   149f8:	92 8f       	std	Z+26, r25	; 0x1a
   149fa:	81 8f       	std	Z+25, r24	; 0x19
   149fc:	41 50       	subi	r20, 0x01	; 1
   149fe:	32 97       	sbiw	r30, 0x02	; 2
   14a00:	41 11       	cpse	r20, r1
   14a02:	f8 cf       	rjmp	.-16     	; 0x149f4 <main+0xcd8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   14a04:	d8 01       	movw	r26, r16
   14a06:	18 96       	adiw	r26, 0x08	; 8
   14a08:	3c 93       	st	X, r19
   14a0a:	2e 93       	st	-X, r18
   14a0c:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   14a0e:	5c 96       	adiw	r26, 0x1c	; 28
   14a10:	4c 92       	st	X, r4
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   14a12:	b3 94       	inc	r11
   14a14:	02 5e       	subi	r16, 0xE2	; 226
   14a16:	1f 4f       	sbci	r17, 0xFF	; 255
   14a18:	f6 e0       	ldi	r31, 0x06	; 6
   14a1a:	bf 12       	cpse	r11, r31
   14a1c:	f9 ce       	rjmp	.-526    	; 0x14810 <main+0xaf4>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14a1e:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2246
    if (get_tds18s20(id, &tds) == 1)
   14a20:	be 01       	movw	r22, r28
   14a22:	6f 5f       	subi	r22, 0xFF	; 255
   14a24:	7f 4f       	sbci	r23, 0xFF	; 255
   14a26:	81 2f       	mov	r24, r17
   14a28:	0e 94 1d 53 	call	0xa63a	; 0xa63a <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14a2c:	1f 5f       	subi	r17, 0xFF	; 255
   14a2e:	16 30       	cpi	r17, 0x06	; 6
   14a30:	b9 f7       	brne	.-18     	; 0x14a20 <main+0xd04>
   14a32:	f6 e6       	ldi	r31, 0x66	; 102
   14a34:	8f 2e       	mov	r8, r31
   14a36:	91 2c       	mov	r9, r1
   14a38:	a1 2c       	mov	r10, r1
   14a3a:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14a3c:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2193
  {
    remote_tds_get_active(idx, &active);
   14a3e:	be 01       	movw	r22, r28
   14a40:	6f 5f       	subi	r22, 0xFF	; 255
   14a42:	7f 4f       	sbci	r23, 0xFF	; 255
   14a44:	81 2f       	mov	r24, r17
   14a46:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194
    if (active == 1)
   14a4a:	89 81       	ldd	r24, Y+1	; 0x01
   14a4c:	81 30       	cpi	r24, 0x01	; 1
   14a4e:	61 f4       	brne	.+24     	; 0x14a68 <main+0xd4c>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   14a50:	c5 01       	movw	r24, r10
   14a52:	b4 01       	movw	r22, r8
   14a54:	0e 94 a6 87 	call	0x10f4c	; 0x10f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
    if (last < 250)
   14a58:	8a 3f       	cpi	r24, 0xFA	; 250
   14a5a:	08 f4       	brcc	.+2      	; 0x14a5e <main+0xd42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2183
      last++;
   14a5c:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   14a5e:	48 2f       	mov	r20, r24
   14a60:	c5 01       	movw	r24, r10
   14a62:	b4 01       	movw	r22, r8
   14a64:	0e 94 6a 87 	call	0x10ed4	; 0x10ed4 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14a68:	1f 5f       	subi	r17, 0xFF	; 255
   14a6a:	23 e0       	ldi	r18, 0x03	; 3
   14a6c:	82 0e       	add	r8, r18
   14a6e:	91 1c       	adc	r9, r1
   14a70:	a1 1c       	adc	r10, r1
   14a72:	b1 1c       	adc	r11, r1
   14a74:	34 e8       	ldi	r19, 0x84	; 132
   14a76:	83 16       	cp	r8, r19
   14a78:	91 04       	cpc	r9, r1
   14a7a:	a1 04       	cpc	r10, r1
   14a7c:	b1 04       	cpc	r11, r1
   14a7e:	f9 f6       	brne	.-66     	; 0x14a3e <main+0xd22>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   14a80:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   14a84:	00 91 e3 10 	lds	r16, 0x10E3	; 0x8010e3 <milis_05s>
   14a88:	10 91 e4 10 	lds	r17, 0x10E4	; 0x8010e4 <milis_05s+0x1>
   14a8c:	20 91 e5 10 	lds	r18, 0x10E5	; 0x8010e5 <milis_05s+0x2>
   14a90:	30 91 e6 10 	lds	r19, 0x10E6	; 0x8010e6 <milis_05s+0x3>
   14a94:	60 1b       	sub	r22, r16
   14a96:	71 0b       	sbc	r23, r17
   14a98:	82 0b       	sbc	r24, r18
   14a9a:	93 0b       	sbc	r25, r19
   14a9c:	65 3f       	cpi	r22, 0xF5	; 245
   14a9e:	71 40       	sbci	r23, 0x01	; 1
   14aa0:	81 05       	cpc	r24, r1
   14aa2:	91 05       	cpc	r25, r1
   14aa4:	08 f4       	brcc	.+2      	; 0x14aa8 <main+0xd8c>
   14aa6:	bc c0       	rjmp	.+376    	; 0x14c20 <main+0xf04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4088
  {
    milis_05s = millis();
   14aa8:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   14aac:	60 93 e3 10 	sts	0x10E3, r22	; 0x8010e3 <milis_05s>
   14ab0:	70 93 e4 10 	sts	0x10E4, r23	; 0x8010e4 <milis_05s+0x1>
   14ab4:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <milis_05s+0x2>
   14ab8:	90 93 e6 10 	sts	0x10E6, r25	; 0x8010e6 <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   14abc:	88 e6       	ldi	r24, 0x68	; 104
   14abe:	0e 94 f6 81 	call	0x103ec	; 0x103ec <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   14ac2:	60 e0       	ldi	r22, 0x00	; 0
   14ac4:	85 e1       	ldi	r24, 0x15	; 21
   14ac6:	9e e0       	ldi	r25, 0x0E	; 14
   14ac8:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   14acc:	85 e1       	ldi	r24, 0x15	; 21
   14ace:	9e e0       	ldi	r25, 0x0E	; 14
   14ad0:	0e 94 71 8e 	call	0x11ce2	; 0x11ce2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   14ad4:	87 e0       	ldi	r24, 0x07	; 7
   14ad6:	90 e0       	ldi	r25, 0x00	; 0
   14ad8:	0e 94 2f 80 	call	0x1005e	; 0x1005e <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   14adc:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
   14ae0:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14ae2:	28 2f       	mov	r18, r24
   14ae4:	30 e0       	ldi	r19, 0x00	; 0
   14ae6:	94 e0       	ldi	r25, 0x04	; 4
   14ae8:	35 95       	asr	r19
   14aea:	27 95       	ror	r18
   14aec:	9a 95       	dec	r25
   14aee:	e1 f7       	brne	.-8      	; 0x14ae8 <main+0xdcc>
   14af0:	92 2f       	mov	r25, r18
   14af2:	99 0f       	add	r25, r25
   14af4:	99 0f       	add	r25, r25
   14af6:	12 2f       	mov	r17, r18
   14af8:	19 1b       	sub	r17, r25
   14afa:	11 0f       	add	r17, r17
   14afc:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   14afe:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14b02:	9c 01       	movw	r18, r24
   14b04:	44 e0       	ldi	r20, 0x04	; 4
   14b06:	35 95       	asr	r19
   14b08:	27 95       	ror	r18
   14b0a:	4a 95       	dec	r20
   14b0c:	e1 f7       	brne	.-8      	; 0x14b06 <main+0xdea>
   14b0e:	2f 70       	andi	r18, 0x0F	; 15
   14b10:	33 27       	eor	r19, r19
   14b12:	92 2f       	mov	r25, r18
   14b14:	99 0f       	add	r25, r25
   14b16:	99 0f       	add	r25, r25
   14b18:	02 2f       	mov	r16, r18
   14b1a:	09 1b       	sub	r16, r25
   14b1c:	00 0f       	add	r16, r16
   14b1e:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   14b20:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14b24:	9c 01       	movw	r18, r24
   14b26:	54 e0       	ldi	r21, 0x04	; 4
   14b28:	35 95       	asr	r19
   14b2a:	27 95       	ror	r18
   14b2c:	5a 95       	dec	r21
   14b2e:	e1 f7       	brne	.-8      	; 0x14b28 <main+0xe0c>
   14b30:	2f 70       	andi	r18, 0x0F	; 15
   14b32:	33 27       	eor	r19, r19
   14b34:	92 2f       	mov	r25, r18
   14b36:	99 0f       	add	r25, r25
   14b38:	99 0f       	add	r25, r25
   14b3a:	b2 2e       	mov	r11, r18
   14b3c:	b9 1a       	sub	r11, r25
   14b3e:	bb 0c       	add	r11, r11
   14b40:	b8 0e       	add	r11, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   14b42:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   14b46:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14b4a:	9c 01       	movw	r18, r24
   14b4c:	64 e0       	ldi	r22, 0x04	; 4
   14b4e:	35 95       	asr	r19
   14b50:	27 95       	ror	r18
   14b52:	6a 95       	dec	r22
   14b54:	e1 f7       	brne	.-8      	; 0x14b4e <main+0xe32>
   14b56:	2f 70       	andi	r18, 0x0F	; 15
   14b58:	33 27       	eor	r19, r19
   14b5a:	92 2f       	mov	r25, r18
   14b5c:	99 0f       	add	r25, r25
   14b5e:	99 0f       	add	r25, r25
   14b60:	a2 2e       	mov	r10, r18
   14b62:	a9 1a       	sub	r10, r25
   14b64:	aa 0c       	add	r10, r10
   14b66:	a8 0e       	add	r10, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   14b68:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14b6c:	9c 01       	movw	r18, r24
   14b6e:	74 e0       	ldi	r23, 0x04	; 4
   14b70:	35 95       	asr	r19
   14b72:	27 95       	ror	r18
   14b74:	7a 95       	dec	r23
   14b76:	e1 f7       	brne	.-8      	; 0x14b70 <main+0xe54>
   14b78:	2f 70       	andi	r18, 0x0F	; 15
   14b7a:	33 27       	eor	r19, r19
   14b7c:	92 2f       	mov	r25, r18
   14b7e:	99 0f       	add	r25, r25
   14b80:	99 0f       	add	r25, r25
   14b82:	92 2e       	mov	r9, r18
   14b84:	99 1a       	sub	r9, r25
   14b86:	99 0c       	add	r9, r9
   14b88:	98 0e       	add	r9, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   14b8a:	0e 94 36 7c 	call	0xf86c	; 0xf86c <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14b8e:	9c 01       	movw	r18, r24
   14b90:	e4 e0       	ldi	r30, 0x04	; 4
   14b92:	35 95       	asr	r19
   14b94:	27 95       	ror	r18
   14b96:	ea 95       	dec	r30
   14b98:	e1 f7       	brne	.-8      	; 0x14b92 <main+0xe76>
   14b9a:	2f 70       	andi	r18, 0x0F	; 15
   14b9c:	33 27       	eor	r19, r19
   14b9e:	92 2f       	mov	r25, r18
   14ba0:	99 0f       	add	r25, r25
   14ba2:	99 0f       	add	r25, r25
   14ba4:	29 1b       	sub	r18, r25
   14ba6:	22 0f       	add	r18, r18
   14ba8:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   14baa:	80 93 66 10 	sts	0x1066, r24	; 0x801066 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4089
    now = rtc.now();
   14bae:	90 92 67 10 	sts	0x1067, r9	; 0x801067 <now+0x1>
   14bb2:	a0 92 68 10 	sts	0x1068, r10	; 0x801068 <now+0x2>
   14bb6:	b0 92 69 10 	sts	0x1069, r11	; 0x801069 <now+0x3>
   14bba:	00 93 6a 10 	sts	0x106A, r16	; 0x80106a <now+0x4>
   14bbe:	10 93 6b 10 	sts	0x106B, r17	; 0x80106b <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3337
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   14bc2:	0e 94 ce 8e 	call	0x11d9c	; 0x11d9c <RTC_DS1307::isrunning() [clone .constprop.127]>
   14bc6:	90 91 e9 0a 	lds	r25, 0x0AE9	; 0x800ae9 <selftest_data>
   14bca:	81 11       	cpse	r24, r1
   14bcc:	bf c0       	rjmp	.+382    	; 0x14d4c <main+0x1030>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3338
    sbi(selftest_data, SELFTEST_ERR_RTC);
   14bce:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   14bd0:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4091
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   14bd4:	81 e0       	ldi	r24, 0x01	; 1
   14bd6:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4690
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   14bda:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4689

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   14bdc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4691
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14bde:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
  {
    remote_tds_get_active(idx, &active);
   14be0:	be 01       	movw	r22, r28
   14be2:	6f 5f       	subi	r22, 0xFF	; 255
   14be4:	7f 4f       	sbci	r23, 0xFF	; 255
   14be6:	81 2f       	mov	r24, r17
   14be8:	0e 94 a1 58 	call	0xb142	; 0xb142 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4694
    if (active == 1) cnt++;
   14bec:	89 81       	ldd	r24, Y+1	; 0x01
   14bee:	81 30       	cpi	r24, 0x01	; 1
   14bf0:	09 f4       	brne	.+2      	; 0x14bf4 <main+0xed8>
   14bf2:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4691
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14bf4:	1f 5f       	subi	r17, 0xFF	; 255
   14bf6:	1a 30       	cpi	r17, 0x0A	; 10
   14bf8:	99 f7       	brne	.-26     	; 0x14be0 <main+0xec4>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4094
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   14bfa:	00 93 f0 0a 	sts	0x0AF0, r16	; 0x800af0 <use_rtds>
   14bfe:	08 ec       	ldi	r16, 0xC8	; 200
   14c00:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   14c02:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   14c04:	c8 01       	movw	r24, r16
   14c06:	0e 94 29 94 	call	0x12852	; 0x12852 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   14c0a:	81 30       	cpi	r24, 0x01	; 1
   14c0c:	09 f4       	brne	.+2      	; 0x14c10 <main+0xef4>
   14c0e:	b3 94       	inc	r11
   14c10:	0a 5e       	subi	r16, 0xEA	; 234
   14c12:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   14c14:	0c 34       	cpi	r16, 0x4C	; 76
   14c16:	51 e0       	ldi	r21, 0x01	; 1
   14c18:	15 07       	cpc	r17, r21
   14c1a:	a1 f7       	brne	.-24     	; 0x14c04 <main+0xee8>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4095
    use_tds = count_use_tds();
   14c1c:	b0 92 ef 0a 	sts	0x0AEF, r11	; 0x800aef <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4104




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   14c20:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   14c24:	00 91 df 10 	lds	r16, 0x10DF	; 0x8010df <milis_005s>
   14c28:	10 91 e0 10 	lds	r17, 0x10E0	; 0x8010e0 <milis_005s+0x1>
   14c2c:	20 91 e1 10 	lds	r18, 0x10E1	; 0x8010e1 <milis_005s+0x2>
   14c30:	30 91 e2 10 	lds	r19, 0x10E2	; 0x8010e2 <milis_005s+0x3>
   14c34:	60 1b       	sub	r22, r16
   14c36:	71 0b       	sbc	r23, r17
   14c38:	82 0b       	sbc	r24, r18
   14c3a:	93 0b       	sbc	r25, r19
   14c3c:	63 33       	cpi	r22, 0x33	; 51
   14c3e:	71 05       	cpc	r23, r1
   14c40:	81 05       	cpc	r24, r1
   14c42:	91 05       	cpc	r25, r1
   14c44:	90 f1       	brcs	.+100    	; 0x14caa <main+0xf8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4106
  {
    milis_005s = millis();
   14c46:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   14c4a:	60 93 df 10 	sts	0x10DF, r22	; 0x8010df <milis_005s>
   14c4e:	70 93 e0 10 	sts	0x10E0, r23	; 0x8010e0 <milis_005s+0x1>
   14c52:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <milis_005s+0x2>
   14c56:	90 93 e2 10 	sts	0x10E2, r25	; 0x8010e2 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4109

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   14c5a:	80 91 ee 0a 	lds	r24, 0x0AEE	; 0x800aee <a2d_run_now>
   14c5e:	81 30       	cpi	r24, 0x01	; 1
   14c60:	21 f5       	brne	.+72     	; 0x14caa <main+0xf8e>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   14c62:	30 91 ea 0a 	lds	r19, 0x0AEA	; 0x800aea <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   14c66:	20 91 eb 0a 	lds	r18, 0x0AEB	; 0x800aeb <a2d_index>
   14c6a:	90 e0       	ldi	r25, 0x00	; 0
   14c6c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   14c6e:	61 e0       	ldi	r22, 0x01	; 1
   14c70:	70 e0       	ldi	r23, 0x00	; 0
   14c72:	ab 01       	movw	r20, r22
   14c74:	08 2e       	mov	r0, r24
   14c76:	01 c0       	rjmp	.+2      	; 0x14c7a <main+0xf5e>
   14c78:	44 0f       	add	r20, r20
   14c7a:	0a 94       	dec	r0
   14c7c:	ea f7       	brpl	.-6      	; 0x14c78 <main+0xf5c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   14c7e:	e3 2f       	mov	r30, r19
   14c80:	e4 23       	and	r30, r20
   14c82:	09 f4       	brne	.+2      	; 0x14c86 <main+0xf6a>
   14c84:	65 c0       	rjmp	.+202    	; 0x14d50 <main+0x1034>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   14c86:	e2 2f       	mov	r30, r18
   14c88:	e4 23       	and	r30, r20
   14c8a:	09 f0       	breq	.+2      	; 0x14c8e <main+0xf72>
   14c8c:	61 c0       	rjmp	.+194    	; 0x14d50 <main+0x1034>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   14c8e:	24 2b       	or	r18, r20
   14c90:	20 93 eb 0a 	sts	0x0AEB, r18	; 0x800aeb <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   14c94:	0e 94 0a 8c 	call	0x11814	; 0x11814 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4112
    {
      a2d_start_process();
      a2d_run_now = 0;
   14c98:	10 92 ee 0a 	sts	0x0AEE, r1	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4113
      if (a2d_done() == 0) a2d_run_now = 1;
   14c9c:	80 91 eb 0a 	lds	r24, 0x0AEB	; 0x800aeb <a2d_index>
   14ca0:	81 11       	cpse	r24, r1
   14ca2:	03 c0       	rjmp	.+6      	; 0x14caa <main+0xf8e>
   14ca4:	81 e0       	ldi	r24, 0x01	; 1
   14ca6:	80 93 ee 0a 	sts	0x0AEE, r24	; 0x800aee <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4117
    }
  }

  load = millis() - load_now;
   14caa:	0e 94 fd 89 	call	0x113fa	; 0x113fa <millis>
   14cae:	dc 01       	movw	r26, r24
   14cb0:	cb 01       	movw	r24, r22
   14cb2:	8c 19       	sub	r24, r12
   14cb4:	9d 09       	sbc	r25, r13
   14cb6:	ae 09       	sbc	r26, r14
   14cb8:	bf 09       	sbc	r27, r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4118
  if (load < load_min) load_min = load;
   14cba:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   14cbe:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   14cc2:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   14cc6:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   14cca:	80 17       	cp	r24, r16
   14ccc:	91 07       	cpc	r25, r17
   14cce:	a2 07       	cpc	r26, r18
   14cd0:	b3 07       	cpc	r27, r19
   14cd2:	40 f4       	brcc	.+16     	; 0x14ce4 <main+0xfc8>
   14cd4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   14cd8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   14cdc:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   14ce0:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
  if (load > load_max) load_max = load;
   14ce4:	00 91 db 10 	lds	r16, 0x10DB	; 0x8010db <load_max>
   14ce8:	10 91 dc 10 	lds	r17, 0x10DC	; 0x8010dc <load_max+0x1>
   14cec:	20 91 dd 10 	lds	r18, 0x10DD	; 0x8010dd <load_max+0x2>
   14cf0:	30 91 de 10 	lds	r19, 0x10DE	; 0x8010de <load_max+0x3>
   14cf4:	08 17       	cp	r16, r24
   14cf6:	19 07       	cpc	r17, r25
   14cf8:	2a 07       	cpc	r18, r26
   14cfa:	3b 07       	cpc	r19, r27
   14cfc:	40 f4       	brcc	.+16     	; 0x14d0e <main+0xff2>
   14cfe:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <load_max>
   14d02:	90 93 dc 10 	sts	0x10DC, r25	; 0x8010dc <load_max+0x1>
   14d06:	a0 93 dd 10 	sts	0x10DD, r26	; 0x8010dd <load_max+0x2>
   14d0a:	b0 93 de 10 	sts	0x10DE, r27	; 0x8010de <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   14d0e:	80 91 ec 0a 	lds	r24, 0x0AEC	; 0x800aec <light_curr>
   14d12:	90 91 ed 0a 	lds	r25, 0x0AED	; 0x800aed <light_curr+0x1>
   14d16:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <light_min>
   14d1a:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <light_min+0x1>
   14d1e:	82 17       	cp	r24, r18
   14d20:	93 07       	cpc	r25, r19
   14d22:	20 f4       	brcc	.+8      	; 0x14d2c <main+0x1010>
   14d24:	90 93 da 10 	sts	0x10DA, r25	; 0x8010da <light_min+0x1>
   14d28:	80 93 d9 10 	sts	0x10D9, r24	; 0x8010d9 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4123
  if (light_curr > light_max) light_max = light_curr;
   14d2c:	20 91 d7 10 	lds	r18, 0x10D7	; 0x8010d7 <light_max>
   14d30:	30 91 d8 10 	lds	r19, 0x10D8	; 0x8010d8 <light_max+0x1>
   14d34:	28 17       	cp	r18, r24
   14d36:	39 07       	cpc	r19, r25
   14d38:	20 f4       	brcc	.+8      	; 0x14d42 <main+0x1026>
   14d3a:	90 93 d8 10 	sts	0x10D8, r25	; 0x8010d8 <light_max+0x1>
   14d3e:	80 93 d7 10 	sts	0x10D7, r24	; 0x8010d7 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   14d42:	0e 94 21 7d 	call	0xfa42	; 0xfa42 <serialEventRun()>
   14d46:	55 c8       	rjmp	.-3926   	; 0x13df2 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   14d48:	13 8e       	std	Z+27, r1	; 0x1b
   14d4a:	63 ce       	rjmp	.-826    	; 0x14a12 <main+0xcf6>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   14d4c:	9e 7f       	andi	r25, 0xFE	; 254
   14d4e:	40 cf       	rjmp	.-384    	; 0x14bd0 <main+0xeb4>
   14d50:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   14d52:	88 30       	cpi	r24, 0x08	; 8
   14d54:	91 05       	cpc	r25, r1
   14d56:	09 f0       	breq	.+2      	; 0x14d5a <main+0x103e>
   14d58:	8c cf       	rjmp	.-232    	; 0x14c72 <main+0xf56>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   14d5a:	10 92 eb 0a 	sts	0x0AEB, r1	; 0x800aeb <a2d_index>
   14d5e:	9c cf       	rjmp	.-200    	; 0x14c98 <main+0xf7c>

00014d60 <dtostrf>:
dtostrf():
   14d60:	ef 92       	push	r14
   14d62:	0f 93       	push	r16
   14d64:	1f 93       	push	r17
   14d66:	cf 93       	push	r28
   14d68:	df 93       	push	r29
   14d6a:	e8 01       	movw	r28, r16
   14d6c:	34 e0       	ldi	r19, 0x04	; 4
   14d6e:	47 fd       	sbrc	r20, 7
   14d70:	34 e1       	ldi	r19, 0x14	; 20
   14d72:	04 2e       	mov	r0, r20
   14d74:	00 0c       	add	r0, r0
   14d76:	55 0b       	sbc	r21, r21
   14d78:	57 ff       	sbrs	r21, 7
   14d7a:	03 c0       	rjmp	.+6      	; 0x14d82 <dtostrf+0x22>
   14d7c:	51 95       	neg	r21
   14d7e:	41 95       	neg	r20
   14d80:	51 09       	sbc	r21, r1
   14d82:	e3 2e       	mov	r14, r19
   14d84:	02 2f       	mov	r16, r18
   14d86:	24 2f       	mov	r18, r20
   14d88:	ae 01       	movw	r20, r28
   14d8a:	0e 94 da aa 	call	0x155b4	; 0x155b4 <dtoa_prf>
   14d8e:	ce 01       	movw	r24, r28
   14d90:	df 91       	pop	r29
   14d92:	cf 91       	pop	r28
   14d94:	1f 91       	pop	r17
   14d96:	0f 91       	pop	r16
   14d98:	ef 90       	pop	r14
   14d9a:	08 95       	ret

00014d9c <strtoul>:
strtoul():
   14d9c:	3f 92       	push	r3
   14d9e:	4f 92       	push	r4
   14da0:	5f 92       	push	r5
   14da2:	6f 92       	push	r6
   14da4:	7f 92       	push	r7
   14da6:	8f 92       	push	r8
   14da8:	9f 92       	push	r9
   14daa:	af 92       	push	r10
   14dac:	bf 92       	push	r11
   14dae:	cf 92       	push	r12
   14db0:	df 92       	push	r13
   14db2:	ef 92       	push	r14
   14db4:	ff 92       	push	r15
   14db6:	0f 93       	push	r16
   14db8:	1f 93       	push	r17
   14dba:	cf 93       	push	r28
   14dbc:	df 93       	push	r29
   14dbe:	5c 01       	movw	r10, r24
   14dc0:	6b 01       	movw	r12, r22
   14dc2:	7a 01       	movw	r14, r20
   14dc4:	61 15       	cp	r22, r1
   14dc6:	71 05       	cpc	r23, r1
   14dc8:	19 f0       	breq	.+6      	; 0x14dd0 <strtoul+0x34>
   14dca:	fb 01       	movw	r30, r22
   14dcc:	91 83       	std	Z+1, r25	; 0x01
   14dce:	80 83       	st	Z, r24
   14dd0:	e1 14       	cp	r14, r1
   14dd2:	f1 04       	cpc	r15, r1
   14dd4:	49 f0       	breq	.+18     	; 0x14de8 <strtoul+0x4c>
   14dd6:	c7 01       	movw	r24, r14
   14dd8:	02 97       	sbiw	r24, 0x02	; 2
   14dda:	83 97       	sbiw	r24, 0x23	; 35
   14ddc:	28 f0       	brcs	.+10     	; 0x14de8 <strtoul+0x4c>
   14dde:	60 e0       	ldi	r22, 0x00	; 0
   14de0:	70 e0       	ldi	r23, 0x00	; 0
   14de2:	cb 01       	movw	r24, r22
   14de4:	9b c0       	rjmp	.+310    	; 0x14f1c <strtoul+0x180>
   14de6:	5e 01       	movw	r10, r28
   14de8:	e5 01       	movw	r28, r10
   14dea:	21 96       	adiw	r28, 0x01	; 1
   14dec:	f5 01       	movw	r30, r10
   14dee:	10 81       	ld	r17, Z
   14df0:	81 2f       	mov	r24, r17
   14df2:	90 e0       	ldi	r25, 0x00	; 0
   14df4:	0e 94 f3 a7 	call	0x14fe6	; 0x14fe6 <isspace>
   14df8:	89 2b       	or	r24, r25
   14dfa:	a9 f7       	brne	.-22     	; 0x14de6 <strtoul+0x4a>
   14dfc:	1d 32       	cpi	r17, 0x2D	; 45
   14dfe:	09 f0       	breq	.+2      	; 0x14e02 <strtoul+0x66>
   14e00:	5c c0       	rjmp	.+184    	; 0x14eba <strtoul+0x11e>
   14e02:	21 96       	adiw	r28, 0x01	; 1
   14e04:	f5 01       	movw	r30, r10
   14e06:	11 81       	ldd	r17, Z+1	; 0x01
   14e08:	01 e0       	ldi	r16, 0x01	; 1
   14e0a:	e1 14       	cp	r14, r1
   14e0c:	f1 04       	cpc	r15, r1
   14e0e:	09 f4       	brne	.+2      	; 0x14e12 <strtoul+0x76>
   14e10:	bb c0       	rjmp	.+374    	; 0x14f88 <strtoul+0x1ec>
   14e12:	f0 e1       	ldi	r31, 0x10	; 16
   14e14:	ef 16       	cp	r14, r31
   14e16:	f1 04       	cpc	r15, r1
   14e18:	09 f0       	breq	.+2      	; 0x14e1c <strtoul+0x80>
   14e1a:	9b c0       	rjmp	.+310    	; 0x14f52 <strtoul+0x1b6>
   14e1c:	10 33       	cpi	r17, 0x30	; 48
   14e1e:	41 f4       	brne	.+16     	; 0x14e30 <strtoul+0x94>
   14e20:	88 81       	ld	r24, Y
   14e22:	8f 7d       	andi	r24, 0xDF	; 223
   14e24:	88 35       	cpi	r24, 0x58	; 88
   14e26:	09 f0       	breq	.+2      	; 0x14e2a <strtoul+0x8e>
   14e28:	8f c0       	rjmp	.+286    	; 0x14f48 <strtoul+0x1ac>
   14e2a:	19 81       	ldd	r17, Y+1	; 0x01
   14e2c:	22 96       	adiw	r28, 0x02	; 2
   14e2e:	02 60       	ori	r16, 0x02	; 2
   14e30:	e0 e1       	ldi	r30, 0x10	; 16
   14e32:	ee 2e       	mov	r14, r30
   14e34:	f1 2c       	mov	r15, r1
   14e36:	88 24       	eor	r8, r8
   14e38:	8a 94       	dec	r8
   14e3a:	98 2c       	mov	r9, r8
   14e3c:	a8 2c       	mov	r10, r8
   14e3e:	ff e0       	ldi	r31, 0x0F	; 15
   14e40:	bf 2e       	mov	r11, r31
   14e42:	20 e0       	ldi	r18, 0x00	; 0
   14e44:	60 e0       	ldi	r22, 0x00	; 0
   14e46:	70 e0       	ldi	r23, 0x00	; 0
   14e48:	cb 01       	movw	r24, r22
   14e4a:	27 01       	movw	r4, r14
   14e4c:	0f 2c       	mov	r0, r15
   14e4e:	00 0c       	add	r0, r0
   14e50:	66 08       	sbc	r6, r6
   14e52:	77 08       	sbc	r7, r7
   14e54:	fe 01       	movw	r30, r28
   14e56:	50 ed       	ldi	r21, 0xD0	; 208
   14e58:	35 2e       	mov	r3, r21
   14e5a:	31 0e       	add	r3, r17
   14e5c:	39 e0       	ldi	r19, 0x09	; 9
   14e5e:	33 15       	cp	r19, r3
   14e60:	68 f4       	brcc	.+26     	; 0x14e7c <strtoul+0xe0>
   14e62:	3f eb       	ldi	r19, 0xBF	; 191
   14e64:	31 0f       	add	r19, r17
   14e66:	49 ec       	ldi	r20, 0xC9	; 201
   14e68:	34 2e       	mov	r3, r20
   14e6a:	3a 31       	cpi	r19, 0x1A	; 26
   14e6c:	30 f0       	brcs	.+12     	; 0x14e7a <strtoul+0xde>
   14e6e:	3f e9       	ldi	r19, 0x9F	; 159
   14e70:	31 0f       	add	r19, r17
   14e72:	3a 31       	cpi	r19, 0x1A	; 26
   14e74:	b0 f5       	brcc	.+108    	; 0x14ee2 <strtoul+0x146>
   14e76:	39 ea       	ldi	r19, 0xA9	; 169
   14e78:	33 2e       	mov	r3, r19
   14e7a:	31 0e       	add	r3, r17
   14e7c:	3e 14       	cp	r3, r14
   14e7e:	1f 04       	cpc	r1, r15
   14e80:	84 f5       	brge	.+96     	; 0x14ee2 <strtoul+0x146>
   14e82:	2f 3f       	cpi	r18, 0xFF	; 255
   14e84:	b9 f0       	breq	.+46     	; 0x14eb4 <strtoul+0x118>
   14e86:	86 16       	cp	r8, r22
   14e88:	97 06       	cpc	r9, r23
   14e8a:	a8 06       	cpc	r10, r24
   14e8c:	b9 06       	cpc	r11, r25
   14e8e:	38 f1       	brcs	.+78     	; 0x14ede <strtoul+0x142>
   14e90:	a3 01       	movw	r20, r6
   14e92:	92 01       	movw	r18, r4
   14e94:	0e 94 be b1 	call	0x1637c	; 0x1637c <__mulsi3>
   14e98:	23 2d       	mov	r18, r3
   14e9a:	30 e0       	ldi	r19, 0x00	; 0
   14e9c:	50 e0       	ldi	r21, 0x00	; 0
   14e9e:	40 e0       	ldi	r20, 0x00	; 0
   14ea0:	62 0f       	add	r22, r18
   14ea2:	73 1f       	adc	r23, r19
   14ea4:	84 1f       	adc	r24, r20
   14ea6:	95 1f       	adc	r25, r21
   14ea8:	62 17       	cp	r22, r18
   14eaa:	73 07       	cpc	r23, r19
   14eac:	84 07       	cpc	r24, r20
   14eae:	95 07       	cpc	r25, r21
   14eb0:	b0 f0       	brcs	.+44     	; 0x14ede <strtoul+0x142>
   14eb2:	21 e0       	ldi	r18, 0x01	; 1
   14eb4:	21 96       	adiw	r28, 0x01	; 1
   14eb6:	10 81       	ld	r17, Z
   14eb8:	cd cf       	rjmp	.-102    	; 0x14e54 <strtoul+0xb8>
   14eba:	1b 32       	cpi	r17, 0x2B	; 43
   14ebc:	21 f4       	brne	.+8      	; 0x14ec6 <strtoul+0x12a>
   14ebe:	e5 01       	movw	r28, r10
   14ec0:	22 96       	adiw	r28, 0x02	; 2
   14ec2:	f5 01       	movw	r30, r10
   14ec4:	11 81       	ldd	r17, Z+1	; 0x01
   14ec6:	00 e0       	ldi	r16, 0x00	; 0
   14ec8:	a0 cf       	rjmp	.-192    	; 0x14e0a <strtoul+0x6e>
   14eca:	78 e0       	ldi	r23, 0x08	; 8
   14ecc:	e7 2e       	mov	r14, r23
   14ece:	f1 2c       	mov	r15, r1
   14ed0:	88 24       	eor	r8, r8
   14ed2:	8a 94       	dec	r8
   14ed4:	98 2c       	mov	r9, r8
   14ed6:	a8 2c       	mov	r10, r8
   14ed8:	6f e1       	ldi	r22, 0x1F	; 31
   14eda:	b6 2e       	mov	r11, r22
   14edc:	b2 cf       	rjmp	.-156    	; 0x14e42 <strtoul+0xa6>
   14ede:	2f ef       	ldi	r18, 0xFF	; 255
   14ee0:	e9 cf       	rjmp	.-46     	; 0x14eb4 <strtoul+0x118>
   14ee2:	c1 14       	cp	r12, r1
   14ee4:	d1 04       	cpc	r13, r1
   14ee6:	31 f0       	breq	.+12     	; 0x14ef4 <strtoul+0x158>
   14ee8:	22 23       	and	r18, r18
   14eea:	51 f1       	breq	.+84     	; 0x14f40 <strtoul+0x1a4>
   14eec:	21 97       	sbiw	r28, 0x01	; 1
   14eee:	f6 01       	movw	r30, r12
   14ef0:	d1 83       	std	Z+1, r29	; 0x01
   14ef2:	c0 83       	st	Z, r28
   14ef4:	00 ff       	sbrs	r16, 0
   14ef6:	07 c0       	rjmp	.+14     	; 0x14f06 <strtoul+0x16a>
   14ef8:	90 95       	com	r25
   14efa:	80 95       	com	r24
   14efc:	70 95       	com	r23
   14efe:	61 95       	neg	r22
   14f00:	7f 4f       	sbci	r23, 0xFF	; 255
   14f02:	8f 4f       	sbci	r24, 0xFF	; 255
   14f04:	9f 4f       	sbci	r25, 0xFF	; 255
   14f06:	2f 3f       	cpi	r18, 0xFF	; 255
   14f08:	49 f4       	brne	.+18     	; 0x14f1c <strtoul+0x180>
   14f0a:	82 e2       	ldi	r24, 0x22	; 34
   14f0c:	90 e0       	ldi	r25, 0x00	; 0
   14f0e:	90 93 58 13 	sts	0x1358, r25	; 0x801358 <errno+0x1>
   14f12:	80 93 57 13 	sts	0x1357, r24	; 0x801357 <errno>
   14f16:	6f ef       	ldi	r22, 0xFF	; 255
   14f18:	7f ef       	ldi	r23, 0xFF	; 255
   14f1a:	cb 01       	movw	r24, r22
   14f1c:	df 91       	pop	r29
   14f1e:	cf 91       	pop	r28
   14f20:	1f 91       	pop	r17
   14f22:	0f 91       	pop	r16
   14f24:	ff 90       	pop	r15
   14f26:	ef 90       	pop	r14
   14f28:	df 90       	pop	r13
   14f2a:	cf 90       	pop	r12
   14f2c:	bf 90       	pop	r11
   14f2e:	af 90       	pop	r10
   14f30:	9f 90       	pop	r9
   14f32:	8f 90       	pop	r8
   14f34:	7f 90       	pop	r7
   14f36:	6f 90       	pop	r6
   14f38:	5f 90       	pop	r5
   14f3a:	4f 90       	pop	r4
   14f3c:	3f 90       	pop	r3
   14f3e:	08 95       	ret
   14f40:	01 ff       	sbrs	r16, 1
   14f42:	d8 cf       	rjmp	.-80     	; 0x14ef4 <strtoul+0x158>
   14f44:	22 97       	sbiw	r28, 0x02	; 2
   14f46:	d3 cf       	rjmp	.-90     	; 0x14eee <strtoul+0x152>
   14f48:	10 e3       	ldi	r17, 0x30	; 48
   14f4a:	e1 14       	cp	r14, r1
   14f4c:	f1 04       	cpc	r15, r1
   14f4e:	09 f4       	brne	.+2      	; 0x14f52 <strtoul+0x1b6>
   14f50:	bc cf       	rjmp	.-136    	; 0x14eca <strtoul+0x12e>
   14f52:	3a e0       	ldi	r19, 0x0A	; 10
   14f54:	e3 16       	cp	r14, r19
   14f56:	f1 04       	cpc	r15, r1
   14f58:	e9 f0       	breq	.+58     	; 0x14f94 <strtoul+0x1f8>
   14f5a:	80 e1       	ldi	r24, 0x10	; 16
   14f5c:	e8 16       	cp	r14, r24
   14f5e:	f1 04       	cpc	r15, r1
   14f60:	09 f4       	brne	.+2      	; 0x14f64 <strtoul+0x1c8>
   14f62:	66 cf       	rjmp	.-308    	; 0x14e30 <strtoul+0x94>
   14f64:	e8 e0       	ldi	r30, 0x08	; 8
   14f66:	ee 16       	cp	r14, r30
   14f68:	f1 04       	cpc	r15, r1
   14f6a:	09 f4       	brne	.+2      	; 0x14f6e <strtoul+0x1d2>
   14f6c:	b1 cf       	rjmp	.-158    	; 0x14ed0 <strtoul+0x134>
   14f6e:	6f ef       	ldi	r22, 0xFF	; 255
   14f70:	7f ef       	ldi	r23, 0xFF	; 255
   14f72:	cb 01       	movw	r24, r22
   14f74:	97 01       	movw	r18, r14
   14f76:	0f 2c       	mov	r0, r15
   14f78:	00 0c       	add	r0, r0
   14f7a:	44 0b       	sbc	r20, r20
   14f7c:	55 0b       	sbc	r21, r21
   14f7e:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
   14f82:	49 01       	movw	r8, r18
   14f84:	5a 01       	movw	r10, r20
   14f86:	5d cf       	rjmp	.-326    	; 0x14e42 <strtoul+0xa6>
   14f88:	10 33       	cpi	r17, 0x30	; 48
   14f8a:	09 f4       	brne	.+2      	; 0x14f8e <strtoul+0x1f2>
   14f8c:	49 cf       	rjmp	.-366    	; 0x14e20 <strtoul+0x84>
   14f8e:	9a e0       	ldi	r25, 0x0A	; 10
   14f90:	e9 2e       	mov	r14, r25
   14f92:	f1 2c       	mov	r15, r1
   14f94:	89 e9       	ldi	r24, 0x99	; 153
   14f96:	88 2e       	mov	r8, r24
   14f98:	98 2c       	mov	r9, r8
   14f9a:	a8 2c       	mov	r10, r8
   14f9c:	89 e1       	ldi	r24, 0x19	; 25
   14f9e:	b8 2e       	mov	r11, r24
   14fa0:	50 cf       	rjmp	.-352    	; 0x14e42 <strtoul+0xa6>

00014fa2 <atof>:
atof():
   14fa2:	66 27       	eor	r22, r22
   14fa4:	77 27       	eor	r23, r23
   14fa6:	0c 94 78 ad 	jmp	0x15af0	; 0x15af0 <strtod>

00014faa <atoi>:
atoi():
   14faa:	fc 01       	movw	r30, r24
   14fac:	88 27       	eor	r24, r24
   14fae:	99 27       	eor	r25, r25
   14fb0:	e8 94       	clt
   14fb2:	21 91       	ld	r18, Z+
   14fb4:	20 32       	cpi	r18, 0x20	; 32
   14fb6:	e9 f3       	breq	.-6      	; 0x14fb2 <atoi+0x8>
   14fb8:	29 30       	cpi	r18, 0x09	; 9
   14fba:	10 f0       	brcs	.+4      	; 0x14fc0 <atoi+0x16>
   14fbc:	2e 30       	cpi	r18, 0x0E	; 14
   14fbe:	c8 f3       	brcs	.-14     	; 0x14fb2 <atoi+0x8>
   14fc0:	2b 32       	cpi	r18, 0x2B	; 43
   14fc2:	41 f0       	breq	.+16     	; 0x14fd4 <atoi+0x2a>
   14fc4:	2d 32       	cpi	r18, 0x2D	; 45
   14fc6:	39 f4       	brne	.+14     	; 0x14fd6 <atoi+0x2c>
   14fc8:	68 94       	set
   14fca:	04 c0       	rjmp	.+8      	; 0x14fd4 <atoi+0x2a>
   14fcc:	0e 94 4f a8 	call	0x1509e	; 0x1509e <__mulhi_const_10>
   14fd0:	82 0f       	add	r24, r18
   14fd2:	91 1d       	adc	r25, r1
   14fd4:	21 91       	ld	r18, Z+
   14fd6:	20 53       	subi	r18, 0x30	; 48
   14fd8:	2a 30       	cpi	r18, 0x0A	; 10
   14fda:	c0 f3       	brcs	.-16     	; 0x14fcc <atoi+0x22>
   14fdc:	1e f4       	brtc	.+6      	; 0x14fe4 <atoi+0x3a>
   14fde:	90 95       	com	r25
   14fe0:	81 95       	neg	r24
   14fe2:	9f 4f       	sbci	r25, 0xFF	; 255
   14fe4:	08 95       	ret

00014fe6 <isspace>:
isspace():
   14fe6:	91 11       	cpse	r25, r1
   14fe8:	0c 94 ae af 	jmp	0x15f5c	; 0x15f5c <__ctype_isfalse>
   14fec:	80 32       	cpi	r24, 0x20	; 32
   14fee:	19 f0       	breq	.+6      	; 0x14ff6 <isspace+0x10>
   14ff0:	89 50       	subi	r24, 0x09	; 9
   14ff2:	85 50       	subi	r24, 0x05	; 5
   14ff4:	c8 f7       	brcc	.-14     	; 0x14fe8 <isspace+0x2>
   14ff6:	08 95       	ret

00014ff8 <strcat_P>:
strcat_P():
   14ff8:	fb 01       	movw	r30, r22
   14ffa:	dc 01       	movw	r26, r24
   14ffc:	0d 90       	ld	r0, X+
   14ffe:	00 20       	and	r0, r0
   15000:	e9 f7       	brne	.-6      	; 0x14ffc <strcat_P+0x4>
   15002:	11 97       	sbiw	r26, 0x01	; 1
   15004:	05 90       	lpm	r0, Z+
   15006:	0d 92       	st	X+, r0
   15008:	00 20       	and	r0, r0
   1500a:	e1 f7       	brne	.-8      	; 0x15004 <strcat_P+0xc>
   1500c:	08 95       	ret

0001500e <strcpy_P>:
strcpy_P():
   1500e:	fb 01       	movw	r30, r22
   15010:	dc 01       	movw	r26, r24
   15012:	05 90       	lpm	r0, Z+
   15014:	0d 92       	st	X+, r0
   15016:	00 20       	and	r0, r0
   15018:	e1 f7       	brne	.-8      	; 0x15012 <strcpy_P+0x4>
   1501a:	08 95       	ret

0001501c <strtok>:
strtok():
   1501c:	4f e3       	ldi	r20, 0x3F	; 63
   1501e:	53 e1       	ldi	r21, 0x13	; 19
   15020:	0c 94 12 a8 	jmp	0x15024	; 0x15024 <strtok_r>

00015024 <strtok_r>:
strtok_r():
   15024:	fa 01       	movw	r30, r20
   15026:	a1 91       	ld	r26, Z+
   15028:	b0 81       	ld	r27, Z
   1502a:	00 97       	sbiw	r24, 0x00	; 0
   1502c:	19 f4       	brne	.+6      	; 0x15034 <strtok_r+0x10>
   1502e:	10 97       	sbiw	r26, 0x00	; 0
   15030:	e1 f0       	breq	.+56     	; 0x1506a <strtok_r+0x46>
   15032:	cd 01       	movw	r24, r26
   15034:	dc 01       	movw	r26, r24
   15036:	cd 01       	movw	r24, r26
   15038:	0d 90       	ld	r0, X+
   1503a:	00 20       	and	r0, r0
   1503c:	11 f4       	brne	.+4      	; 0x15042 <strtok_r+0x1e>
   1503e:	c0 01       	movw	r24, r0
   15040:	13 c0       	rjmp	.+38     	; 0x15068 <strtok_r+0x44>
   15042:	fb 01       	movw	r30, r22
   15044:	21 91       	ld	r18, Z+
   15046:	22 23       	and	r18, r18
   15048:	19 f0       	breq	.+6      	; 0x15050 <strtok_r+0x2c>
   1504a:	20 15       	cp	r18, r0
   1504c:	d9 f7       	brne	.-10     	; 0x15044 <strtok_r+0x20>
   1504e:	f3 cf       	rjmp	.-26     	; 0x15036 <strtok_r+0x12>
   15050:	fb 01       	movw	r30, r22
   15052:	21 91       	ld	r18, Z+
   15054:	20 15       	cp	r18, r0
   15056:	19 f4       	brne	.+6      	; 0x1505e <strtok_r+0x3a>
   15058:	1e 92       	st	-X, r1
   1505a:	11 96       	adiw	r26, 0x01	; 1
   1505c:	06 c0       	rjmp	.+12     	; 0x1506a <strtok_r+0x46>
   1505e:	22 23       	and	r18, r18
   15060:	c1 f7       	brne	.-16     	; 0x15052 <strtok_r+0x2e>
   15062:	0d 90       	ld	r0, X+
   15064:	00 20       	and	r0, r0
   15066:	a1 f7       	brne	.-24     	; 0x15050 <strtok_r+0x2c>
   15068:	d0 01       	movw	r26, r0
   1506a:	fa 01       	movw	r30, r20
   1506c:	a1 93       	st	Z+, r26
   1506e:	b0 83       	st	Z, r27
   15070:	08 95       	ret

00015072 <itoa>:
itoa():
   15072:	45 32       	cpi	r20, 0x25	; 37
   15074:	51 05       	cpc	r21, r1
   15076:	20 f4       	brcc	.+8      	; 0x15080 <itoa+0xe>
   15078:	42 30       	cpi	r20, 0x02	; 2
   1507a:	10 f0       	brcs	.+4      	; 0x15080 <itoa+0xe>
   1507c:	0c 94 44 a8 	jmp	0x15088	; 0x15088 <__itoa_ncheck>
   15080:	fb 01       	movw	r30, r22
   15082:	10 82       	st	Z, r1
   15084:	cb 01       	movw	r24, r22
   15086:	08 95       	ret

00015088 <__itoa_ncheck>:
__itoa_ncheck():
   15088:	bb 27       	eor	r27, r27
   1508a:	4a 30       	cpi	r20, 0x0A	; 10
   1508c:	31 f4       	brne	.+12     	; 0x1509a <__itoa_ncheck+0x12>
   1508e:	99 23       	and	r25, r25
   15090:	22 f4       	brpl	.+8      	; 0x1509a <__itoa_ncheck+0x12>
   15092:	bd e2       	ldi	r27, 0x2D	; 45
   15094:	90 95       	com	r25
   15096:	81 95       	neg	r24
   15098:	9f 4f       	sbci	r25, 0xFF	; 255
   1509a:	0c 94 58 a8 	jmp	0x150b0	; 0x150b0 <__utoa_common>

0001509e <__mulhi_const_10>:
__mulhi_const_10():
   1509e:	7a e0       	ldi	r23, 0x0A	; 10
   150a0:	97 9f       	mul	r25, r23
   150a2:	90 2d       	mov	r25, r0
   150a4:	87 9f       	mul	r24, r23
   150a6:	80 2d       	mov	r24, r0
   150a8:	91 0d       	add	r25, r1
   150aa:	11 24       	eor	r1, r1
   150ac:	08 95       	ret

000150ae <__utoa_ncheck>:
__utoa_ncheck():
   150ae:	bb 27       	eor	r27, r27

000150b0 <__utoa_common>:
   150b0:	fb 01       	movw	r30, r22
   150b2:	55 27       	eor	r21, r21
   150b4:	aa 27       	eor	r26, r26
   150b6:	88 0f       	add	r24, r24
   150b8:	99 1f       	adc	r25, r25
   150ba:	aa 1f       	adc	r26, r26
   150bc:	a4 17       	cp	r26, r20
   150be:	10 f0       	brcs	.+4      	; 0x150c4 <__utoa_common+0x14>
   150c0:	a4 1b       	sub	r26, r20
   150c2:	83 95       	inc	r24
   150c4:	50 51       	subi	r21, 0x10	; 16
   150c6:	b9 f7       	brne	.-18     	; 0x150b6 <__utoa_common+0x6>
   150c8:	a0 5d       	subi	r26, 0xD0	; 208
   150ca:	aa 33       	cpi	r26, 0x3A	; 58
   150cc:	08 f0       	brcs	.+2      	; 0x150d0 <__utoa_common+0x20>
   150ce:	a9 5d       	subi	r26, 0xD9	; 217
   150d0:	a1 93       	st	Z+, r26
   150d2:	00 97       	sbiw	r24, 0x00	; 0
   150d4:	79 f7       	brne	.-34     	; 0x150b4 <__utoa_common+0x4>
   150d6:	b1 11       	cpse	r27, r1
   150d8:	b1 93       	st	Z+, r27
   150da:	11 92       	st	Z+, r1
   150dc:	cb 01       	movw	r24, r22
   150de:	0c 94 e6 af 	jmp	0x15fcc	; 0x15fcc <strrev>

000150e2 <fdevopen>:
fdevopen():
   150e2:	0f 93       	push	r16
   150e4:	1f 93       	push	r17
   150e6:	cf 93       	push	r28
   150e8:	df 93       	push	r29
   150ea:	00 97       	sbiw	r24, 0x00	; 0
   150ec:	59 f4       	brne	.+22     	; 0x15104 <fdevopen+0x22>
   150ee:	61 15       	cp	r22, r1
   150f0:	71 05       	cpc	r23, r1
   150f2:	41 f4       	brne	.+16     	; 0x15104 <fdevopen+0x22>
   150f4:	f0 e0       	ldi	r31, 0x00	; 0
   150f6:	e0 e0       	ldi	r30, 0x00	; 0
   150f8:	cf 01       	movw	r24, r30
   150fa:	df 91       	pop	r29
   150fc:	cf 91       	pop	r28
   150fe:	1f 91       	pop	r17
   15100:	0f 91       	pop	r16
   15102:	08 95       	ret
   15104:	8b 01       	movw	r16, r22
   15106:	ec 01       	movw	r28, r24
   15108:	6e e0       	ldi	r22, 0x0E	; 14
   1510a:	70 e0       	ldi	r23, 0x00	; 0
   1510c:	81 e0       	ldi	r24, 0x01	; 1
   1510e:	90 e0       	ldi	r25, 0x00	; 0
   15110:	0e 94 be aa 	call	0x1557c	; 0x1557c <calloc>
   15114:	fc 01       	movw	r30, r24
   15116:	89 2b       	or	r24, r25
   15118:	69 f3       	breq	.-38     	; 0x150f4 <fdevopen+0x12>
   1511a:	80 e8       	ldi	r24, 0x80	; 128
   1511c:	83 83       	std	Z+3, r24	; 0x03
   1511e:	01 15       	cp	r16, r1
   15120:	11 05       	cpc	r17, r1
   15122:	71 f0       	breq	.+28     	; 0x15140 <fdevopen+0x5e>
   15124:	13 87       	std	Z+11, r17	; 0x0b
   15126:	02 87       	std	Z+10, r16	; 0x0a
   15128:	81 e8       	ldi	r24, 0x81	; 129
   1512a:	83 83       	std	Z+3, r24	; 0x03
   1512c:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <__iob>
   15130:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <__iob+0x1>
   15134:	89 2b       	or	r24, r25
   15136:	21 f4       	brne	.+8      	; 0x15140 <fdevopen+0x5e>
   15138:	f0 93 42 13 	sts	0x1342, r31	; 0x801342 <__iob+0x1>
   1513c:	e0 93 41 13 	sts	0x1341, r30	; 0x801341 <__iob>
   15140:	20 97       	sbiw	r28, 0x00	; 0
   15142:	d1 f2       	breq	.-76     	; 0x150f8 <fdevopen+0x16>
   15144:	d1 87       	std	Z+9, r29	; 0x09
   15146:	c0 87       	std	Z+8, r28	; 0x08
   15148:	83 81       	ldd	r24, Z+3	; 0x03
   1514a:	82 60       	ori	r24, 0x02	; 2
   1514c:	83 83       	std	Z+3, r24	; 0x03
   1514e:	80 91 43 13 	lds	r24, 0x1343	; 0x801343 <__iob+0x2>
   15152:	90 91 44 13 	lds	r25, 0x1344	; 0x801344 <__iob+0x3>
   15156:	89 2b       	or	r24, r25
   15158:	79 f6       	brne	.-98     	; 0x150f8 <fdevopen+0x16>
   1515a:	f0 93 44 13 	sts	0x1344, r31	; 0x801344 <__iob+0x3>
   1515e:	e0 93 43 13 	sts	0x1343, r30	; 0x801343 <__iob+0x2>
   15162:	80 91 45 13 	lds	r24, 0x1345	; 0x801345 <__iob+0x4>
   15166:	90 91 46 13 	lds	r25, 0x1346	; 0x801346 <__iob+0x5>
   1516a:	89 2b       	or	r24, r25
   1516c:	29 f6       	brne	.-118    	; 0x150f8 <fdevopen+0x16>
   1516e:	f0 93 46 13 	sts	0x1346, r31	; 0x801346 <__iob+0x5>
   15172:	e0 93 45 13 	sts	0x1345, r30	; 0x801345 <__iob+0x4>
   15176:	c0 cf       	rjmp	.-128    	; 0x150f8 <fdevopen+0x16>

00015178 <vfprintf>:
vfprintf():
   15178:	2f 92       	push	r2
   1517a:	3f 92       	push	r3
   1517c:	4f 92       	push	r4
   1517e:	5f 92       	push	r5
   15180:	6f 92       	push	r6
   15182:	7f 92       	push	r7
   15184:	8f 92       	push	r8
   15186:	9f 92       	push	r9
   15188:	af 92       	push	r10
   1518a:	bf 92       	push	r11
   1518c:	cf 92       	push	r12
   1518e:	df 92       	push	r13
   15190:	ef 92       	push	r14
   15192:	ff 92       	push	r15
   15194:	0f 93       	push	r16
   15196:	1f 93       	push	r17
   15198:	cf 93       	push	r28
   1519a:	df 93       	push	r29
   1519c:	00 d0       	rcall	.+0      	; 0x1519e <vfprintf+0x26>
   1519e:	00 d0       	rcall	.+0      	; 0x151a0 <vfprintf+0x28>
   151a0:	00 d0       	rcall	.+0      	; 0x151a2 <vfprintf+0x2a>
   151a2:	1f 92       	push	r1
   151a4:	1f 92       	push	r1
   151a6:	cd b7       	in	r28, 0x3d	; 61
   151a8:	de b7       	in	r29, 0x3e	; 62
   151aa:	7c 01       	movw	r14, r24
   151ac:	3b 01       	movw	r6, r22
   151ae:	8a 01       	movw	r16, r20
   151b0:	fc 01       	movw	r30, r24
   151b2:	17 82       	std	Z+7, r1	; 0x07
   151b4:	16 82       	std	Z+6, r1	; 0x06
   151b6:	83 81       	ldd	r24, Z+3	; 0x03
   151b8:	81 ff       	sbrs	r24, 1
   151ba:	dd c1       	rjmp	.+954    	; 0x15576 <vfprintf+0x3fe>
   151bc:	ce 01       	movw	r24, r28
   151be:	01 96       	adiw	r24, 0x01	; 1
   151c0:	5c 01       	movw	r10, r24
   151c2:	f7 01       	movw	r30, r14
   151c4:	93 81       	ldd	r25, Z+3	; 0x03
   151c6:	f3 01       	movw	r30, r6
   151c8:	93 fd       	sbrc	r25, 3
   151ca:	85 91       	lpm	r24, Z+
   151cc:	93 ff       	sbrs	r25, 3
   151ce:	81 91       	ld	r24, Z+
   151d0:	3f 01       	movw	r6, r30
   151d2:	88 23       	and	r24, r24
   151d4:	09 f4       	brne	.+2      	; 0x151d8 <vfprintf+0x60>
   151d6:	53 c1       	rjmp	.+678    	; 0x1547e <vfprintf+0x306>
   151d8:	85 32       	cpi	r24, 0x25	; 37
   151da:	39 f4       	brne	.+14     	; 0x151ea <vfprintf+0x72>
   151dc:	93 fd       	sbrc	r25, 3
   151de:	85 91       	lpm	r24, Z+
   151e0:	93 ff       	sbrs	r25, 3
   151e2:	81 91       	ld	r24, Z+
   151e4:	3f 01       	movw	r6, r30
   151e6:	85 32       	cpi	r24, 0x25	; 37
   151e8:	29 f4       	brne	.+10     	; 0x151f4 <vfprintf+0x7c>
   151ea:	b7 01       	movw	r22, r14
   151ec:	90 e0       	ldi	r25, 0x00	; 0
   151ee:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   151f2:	e7 cf       	rjmp	.-50     	; 0x151c2 <vfprintf+0x4a>
   151f4:	91 2c       	mov	r9, r1
   151f6:	21 2c       	mov	r2, r1
   151f8:	31 2c       	mov	r3, r1
   151fa:	ff e1       	ldi	r31, 0x1F	; 31
   151fc:	f3 15       	cp	r31, r3
   151fe:	38 f0       	brcs	.+14     	; 0x1520e <vfprintf+0x96>
   15200:	8b 32       	cpi	r24, 0x2B	; 43
   15202:	11 f1       	breq	.+68     	; 0x15248 <vfprintf+0xd0>
   15204:	90 f4       	brcc	.+36     	; 0x1522a <vfprintf+0xb2>
   15206:	80 32       	cpi	r24, 0x20	; 32
   15208:	09 f1       	breq	.+66     	; 0x1524c <vfprintf+0xd4>
   1520a:	83 32       	cpi	r24, 0x23	; 35
   1520c:	29 f1       	breq	.+74     	; 0x15258 <vfprintf+0xe0>
   1520e:	37 fc       	sbrc	r3, 7
   15210:	3c c0       	rjmp	.+120    	; 0x1528a <vfprintf+0x112>
   15212:	20 ed       	ldi	r18, 0xD0	; 208
   15214:	28 0f       	add	r18, r24
   15216:	2a 30       	cpi	r18, 0x0A	; 10
   15218:	50 f5       	brcc	.+84     	; 0x1526e <vfprintf+0xf6>
   1521a:	36 fe       	sbrs	r3, 6
   1521c:	20 c0       	rjmp	.+64     	; 0x1525e <vfprintf+0xe6>
   1521e:	8a e0       	ldi	r24, 0x0A	; 10
   15220:	98 9e       	mul	r9, r24
   15222:	20 0d       	add	r18, r0
   15224:	11 24       	eor	r1, r1
   15226:	92 2e       	mov	r9, r18
   15228:	06 c0       	rjmp	.+12     	; 0x15236 <vfprintf+0xbe>
   1522a:	8d 32       	cpi	r24, 0x2D	; 45
   1522c:	91 f0       	breq	.+36     	; 0x15252 <vfprintf+0xda>
   1522e:	80 33       	cpi	r24, 0x30	; 48
   15230:	71 f7       	brne	.-36     	; 0x1520e <vfprintf+0x96>
   15232:	68 94       	set
   15234:	30 f8       	bld	r3, 0
   15236:	f3 01       	movw	r30, r6
   15238:	93 fd       	sbrc	r25, 3
   1523a:	85 91       	lpm	r24, Z+
   1523c:	93 ff       	sbrs	r25, 3
   1523e:	81 91       	ld	r24, Z+
   15240:	3f 01       	movw	r6, r30
   15242:	81 11       	cpse	r24, r1
   15244:	da cf       	rjmp	.-76     	; 0x151fa <vfprintf+0x82>
   15246:	21 c0       	rjmp	.+66     	; 0x1528a <vfprintf+0x112>
   15248:	68 94       	set
   1524a:	31 f8       	bld	r3, 1
   1524c:	68 94       	set
   1524e:	32 f8       	bld	r3, 2
   15250:	f2 cf       	rjmp	.-28     	; 0x15236 <vfprintf+0xbe>
   15252:	68 94       	set
   15254:	33 f8       	bld	r3, 3
   15256:	ef cf       	rjmp	.-34     	; 0x15236 <vfprintf+0xbe>
   15258:	68 94       	set
   1525a:	34 f8       	bld	r3, 4
   1525c:	ec cf       	rjmp	.-40     	; 0x15236 <vfprintf+0xbe>
   1525e:	ea e0       	ldi	r30, 0x0A	; 10
   15260:	2e 9e       	mul	r2, r30
   15262:	20 0d       	add	r18, r0
   15264:	11 24       	eor	r1, r1
   15266:	22 2e       	mov	r2, r18
   15268:	68 94       	set
   1526a:	35 f8       	bld	r3, 5
   1526c:	e4 cf       	rjmp	.-56     	; 0x15236 <vfprintf+0xbe>
   1526e:	8e 32       	cpi	r24, 0x2E	; 46
   15270:	29 f4       	brne	.+10     	; 0x1527c <vfprintf+0x104>
   15272:	36 fc       	sbrc	r3, 6
   15274:	04 c1       	rjmp	.+520    	; 0x1547e <vfprintf+0x306>
   15276:	68 94       	set
   15278:	36 f8       	bld	r3, 6
   1527a:	dd cf       	rjmp	.-70     	; 0x15236 <vfprintf+0xbe>
   1527c:	8c 36       	cpi	r24, 0x6C	; 108
   1527e:	19 f4       	brne	.+6      	; 0x15286 <vfprintf+0x10e>
   15280:	68 94       	set
   15282:	37 f8       	bld	r3, 7
   15284:	d8 cf       	rjmp	.-80     	; 0x15236 <vfprintf+0xbe>
   15286:	88 36       	cpi	r24, 0x68	; 104
   15288:	b1 f2       	breq	.-84     	; 0x15236 <vfprintf+0xbe>
   1528a:	98 2f       	mov	r25, r24
   1528c:	9f 7d       	andi	r25, 0xDF	; 223
   1528e:	95 54       	subi	r25, 0x45	; 69
   15290:	93 30       	cpi	r25, 0x03	; 3
   15292:	e0 f0       	brcs	.+56     	; 0x152cc <vfprintf+0x154>
   15294:	83 36       	cpi	r24, 0x63	; 99
   15296:	a1 f1       	breq	.+104    	; 0x15300 <vfprintf+0x188>
   15298:	83 37       	cpi	r24, 0x73	; 115
   1529a:	c1 f1       	breq	.+112    	; 0x1530c <vfprintf+0x194>
   1529c:	83 35       	cpi	r24, 0x53	; 83
   1529e:	09 f0       	breq	.+2      	; 0x152a2 <vfprintf+0x12a>
   152a0:	63 c0       	rjmp	.+198    	; 0x15368 <vfprintf+0x1f0>
   152a2:	28 01       	movw	r4, r16
   152a4:	f2 e0       	ldi	r31, 0x02	; 2
   152a6:	4f 0e       	add	r4, r31
   152a8:	51 1c       	adc	r5, r1
   152aa:	f8 01       	movw	r30, r16
   152ac:	c0 80       	ld	r12, Z
   152ae:	d1 80       	ldd	r13, Z+1	; 0x01
   152b0:	69 2d       	mov	r22, r9
   152b2:	70 e0       	ldi	r23, 0x00	; 0
   152b4:	36 fc       	sbrc	r3, 6
   152b6:	02 c0       	rjmp	.+4      	; 0x152bc <vfprintf+0x144>
   152b8:	6f ef       	ldi	r22, 0xFF	; 255
   152ba:	7f ef       	ldi	r23, 0xFF	; 255
   152bc:	c6 01       	movw	r24, r12
   152be:	0e 94 c9 af 	call	0x15f92	; 0x15f92 <strnlen_P>
   152c2:	4c 01       	movw	r8, r24
   152c4:	68 94       	set
   152c6:	37 f8       	bld	r3, 7
   152c8:	82 01       	movw	r16, r4
   152ca:	0a c0       	rjmp	.+20     	; 0x152e0 <vfprintf+0x168>
   152cc:	0c 5f       	subi	r16, 0xFC	; 252
   152ce:	1f 4f       	sbci	r17, 0xFF	; 255
   152d0:	ff e3       	ldi	r31, 0x3F	; 63
   152d2:	f9 83       	std	Y+1, r31	; 0x01
   152d4:	88 24       	eor	r8, r8
   152d6:	83 94       	inc	r8
   152d8:	91 2c       	mov	r9, r1
   152da:	65 01       	movw	r12, r10
   152dc:	e8 94       	clt
   152de:	37 f8       	bld	r3, 7
   152e0:	33 fe       	sbrs	r3, 3
   152e2:	2d c0       	rjmp	.+90     	; 0x1533e <vfprintf+0x1c6>
   152e4:	52 2c       	mov	r5, r2
   152e6:	81 14       	cp	r8, r1
   152e8:	91 04       	cpc	r9, r1
   152ea:	71 f5       	brne	.+92     	; 0x15348 <vfprintf+0x1d0>
   152ec:	55 20       	and	r5, r5
   152ee:	09 f4       	brne	.+2      	; 0x152f2 <vfprintf+0x17a>
   152f0:	68 cf       	rjmp	.-304    	; 0x151c2 <vfprintf+0x4a>
   152f2:	b7 01       	movw	r22, r14
   152f4:	80 e2       	ldi	r24, 0x20	; 32
   152f6:	90 e0       	ldi	r25, 0x00	; 0
   152f8:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   152fc:	5a 94       	dec	r5
   152fe:	f6 cf       	rjmp	.-20     	; 0x152ec <vfprintf+0x174>
   15300:	f8 01       	movw	r30, r16
   15302:	80 81       	ld	r24, Z
   15304:	89 83       	std	Y+1, r24	; 0x01
   15306:	0e 5f       	subi	r16, 0xFE	; 254
   15308:	1f 4f       	sbci	r17, 0xFF	; 255
   1530a:	e4 cf       	rjmp	.-56     	; 0x152d4 <vfprintf+0x15c>
   1530c:	28 01       	movw	r4, r16
   1530e:	f2 e0       	ldi	r31, 0x02	; 2
   15310:	4f 0e       	add	r4, r31
   15312:	51 1c       	adc	r5, r1
   15314:	f8 01       	movw	r30, r16
   15316:	c0 80       	ld	r12, Z
   15318:	d1 80       	ldd	r13, Z+1	; 0x01
   1531a:	69 2d       	mov	r22, r9
   1531c:	70 e0       	ldi	r23, 0x00	; 0
   1531e:	36 fc       	sbrc	r3, 6
   15320:	02 c0       	rjmp	.+4      	; 0x15326 <vfprintf+0x1ae>
   15322:	6f ef       	ldi	r22, 0xFF	; 255
   15324:	7f ef       	ldi	r23, 0xFF	; 255
   15326:	c6 01       	movw	r24, r12
   15328:	0e 94 db af 	call	0x15fb6	; 0x15fb6 <strnlen>
   1532c:	4c 01       	movw	r8, r24
   1532e:	82 01       	movw	r16, r4
   15330:	d5 cf       	rjmp	.-86     	; 0x152dc <vfprintf+0x164>
   15332:	b7 01       	movw	r22, r14
   15334:	80 e2       	ldi	r24, 0x20	; 32
   15336:	90 e0       	ldi	r25, 0x00	; 0
   15338:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   1533c:	2a 94       	dec	r2
   1533e:	28 14       	cp	r2, r8
   15340:	19 04       	cpc	r1, r9
   15342:	09 f0       	breq	.+2      	; 0x15346 <vfprintf+0x1ce>
   15344:	b0 f7       	brcc	.-20     	; 0x15332 <vfprintf+0x1ba>
   15346:	ce cf       	rjmp	.-100    	; 0x152e4 <vfprintf+0x16c>
   15348:	f6 01       	movw	r30, r12
   1534a:	37 fc       	sbrc	r3, 7
   1534c:	85 91       	lpm	r24, Z+
   1534e:	37 fe       	sbrs	r3, 7
   15350:	81 91       	ld	r24, Z+
   15352:	6f 01       	movw	r12, r30
   15354:	b7 01       	movw	r22, r14
   15356:	90 e0       	ldi	r25, 0x00	; 0
   15358:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   1535c:	51 10       	cpse	r5, r1
   1535e:	5a 94       	dec	r5
   15360:	f1 e0       	ldi	r31, 0x01	; 1
   15362:	8f 1a       	sub	r8, r31
   15364:	91 08       	sbc	r9, r1
   15366:	bf cf       	rjmp	.-130    	; 0x152e6 <vfprintf+0x16e>
   15368:	84 36       	cpi	r24, 0x64	; 100
   1536a:	19 f0       	breq	.+6      	; 0x15372 <vfprintf+0x1fa>
   1536c:	89 36       	cpi	r24, 0x69	; 105
   1536e:	09 f0       	breq	.+2      	; 0x15372 <vfprintf+0x1fa>
   15370:	77 c0       	rjmp	.+238    	; 0x15460 <vfprintf+0x2e8>
   15372:	f8 01       	movw	r30, r16
   15374:	37 fe       	sbrs	r3, 7
   15376:	6b c0       	rjmp	.+214    	; 0x1544e <vfprintf+0x2d6>
   15378:	60 81       	ld	r22, Z
   1537a:	71 81       	ldd	r23, Z+1	; 0x01
   1537c:	82 81       	ldd	r24, Z+2	; 0x02
   1537e:	93 81       	ldd	r25, Z+3	; 0x03
   15380:	0c 5f       	subi	r16, 0xFC	; 252
   15382:	1f 4f       	sbci	r17, 0xFF	; 255
   15384:	f3 2d       	mov	r31, r3
   15386:	ff 76       	andi	r31, 0x6F	; 111
   15388:	3f 2e       	mov	r3, r31
   1538a:	97 ff       	sbrs	r25, 7
   1538c:	09 c0       	rjmp	.+18     	; 0x153a0 <vfprintf+0x228>
   1538e:	90 95       	com	r25
   15390:	80 95       	com	r24
   15392:	70 95       	com	r23
   15394:	61 95       	neg	r22
   15396:	7f 4f       	sbci	r23, 0xFF	; 255
   15398:	8f 4f       	sbci	r24, 0xFF	; 255
   1539a:	9f 4f       	sbci	r25, 0xFF	; 255
   1539c:	68 94       	set
   1539e:	37 f8       	bld	r3, 7
   153a0:	2a e0       	ldi	r18, 0x0A	; 10
   153a2:	30 e0       	ldi	r19, 0x00	; 0
   153a4:	a5 01       	movw	r20, r10
   153a6:	0e 94 26 b0 	call	0x1604c	; 0x1604c <__ultoa_invert>
   153aa:	c8 2e       	mov	r12, r24
   153ac:	ca 18       	sub	r12, r10
   153ae:	8c 2c       	mov	r8, r12
   153b0:	43 2c       	mov	r4, r3
   153b2:	36 fe       	sbrs	r3, 6
   153b4:	0c c0       	rjmp	.+24     	; 0x153ce <vfprintf+0x256>
   153b6:	e8 94       	clt
   153b8:	40 f8       	bld	r4, 0
   153ba:	c9 14       	cp	r12, r9
   153bc:	40 f4       	brcc	.+16     	; 0x153ce <vfprintf+0x256>
   153be:	34 fe       	sbrs	r3, 4
   153c0:	05 c0       	rjmp	.+10     	; 0x153cc <vfprintf+0x254>
   153c2:	32 fc       	sbrc	r3, 2
   153c4:	03 c0       	rjmp	.+6      	; 0x153cc <vfprintf+0x254>
   153c6:	f3 2d       	mov	r31, r3
   153c8:	fe 7e       	andi	r31, 0xEE	; 238
   153ca:	4f 2e       	mov	r4, r31
   153cc:	89 2c       	mov	r8, r9
   153ce:	44 fe       	sbrs	r4, 4
   153d0:	aa c0       	rjmp	.+340    	; 0x15526 <vfprintf+0x3ae>
   153d2:	fe 01       	movw	r30, r28
   153d4:	ec 0d       	add	r30, r12
   153d6:	f1 1d       	adc	r31, r1
   153d8:	80 81       	ld	r24, Z
   153da:	80 33       	cpi	r24, 0x30	; 48
   153dc:	09 f0       	breq	.+2      	; 0x153e0 <vfprintf+0x268>
   153de:	9c c0       	rjmp	.+312    	; 0x15518 <vfprintf+0x3a0>
   153e0:	24 2d       	mov	r18, r4
   153e2:	29 7e       	andi	r18, 0xE9	; 233
   153e4:	42 2e       	mov	r4, r18
   153e6:	84 2d       	mov	r24, r4
   153e8:	88 70       	andi	r24, 0x08	; 8
   153ea:	58 2e       	mov	r5, r24
   153ec:	43 fc       	sbrc	r4, 3
   153ee:	aa c0       	rjmp	.+340    	; 0x15544 <vfprintf+0x3cc>
   153f0:	40 fe       	sbrs	r4, 0
   153f2:	a4 c0       	rjmp	.+328    	; 0x1553c <vfprintf+0x3c4>
   153f4:	9c 2c       	mov	r9, r12
   153f6:	82 14       	cp	r8, r2
   153f8:	18 f4       	brcc	.+6      	; 0x15400 <vfprintf+0x288>
   153fa:	2c 0c       	add	r2, r12
   153fc:	92 2c       	mov	r9, r2
   153fe:	98 18       	sub	r9, r8
   15400:	44 fe       	sbrs	r4, 4
   15402:	a6 c0       	rjmp	.+332    	; 0x15550 <vfprintf+0x3d8>
   15404:	b7 01       	movw	r22, r14
   15406:	80 e3       	ldi	r24, 0x30	; 48
   15408:	90 e0       	ldi	r25, 0x00	; 0
   1540a:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   1540e:	42 fe       	sbrs	r4, 2
   15410:	09 c0       	rjmp	.+18     	; 0x15424 <vfprintf+0x2ac>
   15412:	88 e7       	ldi	r24, 0x78	; 120
   15414:	90 e0       	ldi	r25, 0x00	; 0
   15416:	41 fe       	sbrs	r4, 1
   15418:	02 c0       	rjmp	.+4      	; 0x1541e <vfprintf+0x2a6>
   1541a:	88 e5       	ldi	r24, 0x58	; 88
   1541c:	90 e0       	ldi	r25, 0x00	; 0
   1541e:	b7 01       	movw	r22, r14
   15420:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   15424:	c9 14       	cp	r12, r9
   15426:	08 f4       	brcc	.+2      	; 0x1542a <vfprintf+0x2b2>
   15428:	9f c0       	rjmp	.+318    	; 0x15568 <vfprintf+0x3f0>
   1542a:	ca 94       	dec	r12
   1542c:	d1 2c       	mov	r13, r1
   1542e:	9f ef       	ldi	r25, 0xFF	; 255
   15430:	c9 1a       	sub	r12, r25
   15432:	d9 0a       	sbc	r13, r25
   15434:	ca 0c       	add	r12, r10
   15436:	db 1c       	adc	r13, r11
   15438:	f6 01       	movw	r30, r12
   1543a:	82 91       	ld	r24, -Z
   1543c:	6f 01       	movw	r12, r30
   1543e:	b7 01       	movw	r22, r14
   15440:	90 e0       	ldi	r25, 0x00	; 0
   15442:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   15446:	ac 14       	cp	r10, r12
   15448:	bd 04       	cpc	r11, r13
   1544a:	b1 f7       	brne	.-20     	; 0x15438 <vfprintf+0x2c0>
   1544c:	4f cf       	rjmp	.-354    	; 0x152ec <vfprintf+0x174>
   1544e:	60 81       	ld	r22, Z
   15450:	71 81       	ldd	r23, Z+1	; 0x01
   15452:	07 2e       	mov	r0, r23
   15454:	00 0c       	add	r0, r0
   15456:	88 0b       	sbc	r24, r24
   15458:	99 0b       	sbc	r25, r25
   1545a:	0e 5f       	subi	r16, 0xFE	; 254
   1545c:	1f 4f       	sbci	r17, 0xFF	; 255
   1545e:	92 cf       	rjmp	.-220    	; 0x15384 <vfprintf+0x20c>
   15460:	d3 2c       	mov	r13, r3
   15462:	e8 94       	clt
   15464:	d4 f8       	bld	r13, 4
   15466:	2a e0       	ldi	r18, 0x0A	; 10
   15468:	30 e0       	ldi	r19, 0x00	; 0
   1546a:	85 37       	cpi	r24, 0x75	; 117
   1546c:	e1 f1       	breq	.+120    	; 0x154e6 <vfprintf+0x36e>
   1546e:	23 2d       	mov	r18, r3
   15470:	29 7f       	andi	r18, 0xF9	; 249
   15472:	d2 2e       	mov	r13, r18
   15474:	8f 36       	cpi	r24, 0x6F	; 111
   15476:	a9 f1       	breq	.+106    	; 0x154e2 <vfprintf+0x36a>
   15478:	f0 f4       	brcc	.+60     	; 0x154b6 <vfprintf+0x33e>
   1547a:	88 35       	cpi	r24, 0x58	; 88
   1547c:	51 f1       	breq	.+84     	; 0x154d2 <vfprintf+0x35a>
   1547e:	f7 01       	movw	r30, r14
   15480:	86 81       	ldd	r24, Z+6	; 0x06
   15482:	97 81       	ldd	r25, Z+7	; 0x07
   15484:	2b 96       	adiw	r28, 0x0b	; 11
   15486:	0f b6       	in	r0, 0x3f	; 63
   15488:	f8 94       	cli
   1548a:	de bf       	out	0x3e, r29	; 62
   1548c:	0f be       	out	0x3f, r0	; 63
   1548e:	cd bf       	out	0x3d, r28	; 61
   15490:	df 91       	pop	r29
   15492:	cf 91       	pop	r28
   15494:	1f 91       	pop	r17
   15496:	0f 91       	pop	r16
   15498:	ff 90       	pop	r15
   1549a:	ef 90       	pop	r14
   1549c:	df 90       	pop	r13
   1549e:	cf 90       	pop	r12
   154a0:	bf 90       	pop	r11
   154a2:	af 90       	pop	r10
   154a4:	9f 90       	pop	r9
   154a6:	8f 90       	pop	r8
   154a8:	7f 90       	pop	r7
   154aa:	6f 90       	pop	r6
   154ac:	5f 90       	pop	r5
   154ae:	4f 90       	pop	r4
   154b0:	3f 90       	pop	r3
   154b2:	2f 90       	pop	r2
   154b4:	08 95       	ret
   154b6:	80 37       	cpi	r24, 0x70	; 112
   154b8:	49 f0       	breq	.+18     	; 0x154cc <vfprintf+0x354>
   154ba:	88 37       	cpi	r24, 0x78	; 120
   154bc:	01 f7       	brne	.-64     	; 0x1547e <vfprintf+0x306>
   154be:	d4 fe       	sbrs	r13, 4
   154c0:	02 c0       	rjmp	.+4      	; 0x154c6 <vfprintf+0x34e>
   154c2:	68 94       	set
   154c4:	d2 f8       	bld	r13, 2
   154c6:	20 e1       	ldi	r18, 0x10	; 16
   154c8:	30 e0       	ldi	r19, 0x00	; 0
   154ca:	0d c0       	rjmp	.+26     	; 0x154e6 <vfprintf+0x36e>
   154cc:	68 94       	set
   154ce:	d4 f8       	bld	r13, 4
   154d0:	f6 cf       	rjmp	.-20     	; 0x154be <vfprintf+0x346>
   154d2:	34 fe       	sbrs	r3, 4
   154d4:	03 c0       	rjmp	.+6      	; 0x154dc <vfprintf+0x364>
   154d6:	82 2f       	mov	r24, r18
   154d8:	86 60       	ori	r24, 0x06	; 6
   154da:	d8 2e       	mov	r13, r24
   154dc:	20 e1       	ldi	r18, 0x10	; 16
   154de:	32 e0       	ldi	r19, 0x02	; 2
   154e0:	02 c0       	rjmp	.+4      	; 0x154e6 <vfprintf+0x36e>
   154e2:	28 e0       	ldi	r18, 0x08	; 8
   154e4:	30 e0       	ldi	r19, 0x00	; 0
   154e6:	f8 01       	movw	r30, r16
   154e8:	d7 fe       	sbrs	r13, 7
   154ea:	0f c0       	rjmp	.+30     	; 0x1550a <vfprintf+0x392>
   154ec:	60 81       	ld	r22, Z
   154ee:	71 81       	ldd	r23, Z+1	; 0x01
   154f0:	82 81       	ldd	r24, Z+2	; 0x02
   154f2:	93 81       	ldd	r25, Z+3	; 0x03
   154f4:	0c 5f       	subi	r16, 0xFC	; 252
   154f6:	1f 4f       	sbci	r17, 0xFF	; 255
   154f8:	a5 01       	movw	r20, r10
   154fa:	0e 94 26 b0 	call	0x1604c	; 0x1604c <__ultoa_invert>
   154fe:	c8 2e       	mov	r12, r24
   15500:	ca 18       	sub	r12, r10
   15502:	3d 2c       	mov	r3, r13
   15504:	e8 94       	clt
   15506:	37 f8       	bld	r3, 7
   15508:	52 cf       	rjmp	.-348    	; 0x153ae <vfprintf+0x236>
   1550a:	60 81       	ld	r22, Z
   1550c:	71 81       	ldd	r23, Z+1	; 0x01
   1550e:	90 e0       	ldi	r25, 0x00	; 0
   15510:	80 e0       	ldi	r24, 0x00	; 0
   15512:	0e 5f       	subi	r16, 0xFE	; 254
   15514:	1f 4f       	sbci	r17, 0xFF	; 255
   15516:	f0 cf       	rjmp	.-32     	; 0x154f8 <vfprintf+0x380>
   15518:	42 fc       	sbrc	r4, 2
   1551a:	02 c0       	rjmp	.+4      	; 0x15520 <vfprintf+0x3a8>
   1551c:	83 94       	inc	r8
   1551e:	63 cf       	rjmp	.-314    	; 0x153e6 <vfprintf+0x26e>
   15520:	83 94       	inc	r8
   15522:	83 94       	inc	r8
   15524:	60 cf       	rjmp	.-320    	; 0x153e6 <vfprintf+0x26e>
   15526:	84 2d       	mov	r24, r4
   15528:	86 78       	andi	r24, 0x86	; 134
   1552a:	09 f4       	brne	.+2      	; 0x1552e <vfprintf+0x3b6>
   1552c:	5c cf       	rjmp	.-328    	; 0x153e6 <vfprintf+0x26e>
   1552e:	f6 cf       	rjmp	.-20     	; 0x1551c <vfprintf+0x3a4>
   15530:	b7 01       	movw	r22, r14
   15532:	80 e2       	ldi	r24, 0x20	; 32
   15534:	90 e0       	ldi	r25, 0x00	; 0
   15536:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   1553a:	83 94       	inc	r8
   1553c:	82 14       	cp	r8, r2
   1553e:	c0 f3       	brcs	.-16     	; 0x15530 <vfprintf+0x3b8>
   15540:	51 2c       	mov	r5, r1
   15542:	5e cf       	rjmp	.-324    	; 0x15400 <vfprintf+0x288>
   15544:	52 2c       	mov	r5, r2
   15546:	58 18       	sub	r5, r8
   15548:	82 14       	cp	r8, r2
   1554a:	08 f4       	brcc	.+2      	; 0x1554e <vfprintf+0x3d6>
   1554c:	59 cf       	rjmp	.-334    	; 0x15400 <vfprintf+0x288>
   1554e:	f8 cf       	rjmp	.-16     	; 0x15540 <vfprintf+0x3c8>
   15550:	84 2d       	mov	r24, r4
   15552:	86 78       	andi	r24, 0x86	; 134
   15554:	09 f4       	brne	.+2      	; 0x15558 <vfprintf+0x3e0>
   15556:	66 cf       	rjmp	.-308    	; 0x15424 <vfprintf+0x2ac>
   15558:	8b e2       	ldi	r24, 0x2B	; 43
   1555a:	41 fe       	sbrs	r4, 1
   1555c:	80 e2       	ldi	r24, 0x20	; 32
   1555e:	47 fc       	sbrc	r4, 7
   15560:	8d e2       	ldi	r24, 0x2D	; 45
   15562:	b7 01       	movw	r22, r14
   15564:	90 e0       	ldi	r25, 0x00	; 0
   15566:	5c cf       	rjmp	.-328    	; 0x15420 <vfprintf+0x2a8>
   15568:	b7 01       	movw	r22, r14
   1556a:	80 e3       	ldi	r24, 0x30	; 48
   1556c:	90 e0       	ldi	r25, 0x00	; 0
   1556e:	0e 94 f6 af 	call	0x15fec	; 0x15fec <fputc>
   15572:	9a 94       	dec	r9
   15574:	57 cf       	rjmp	.-338    	; 0x15424 <vfprintf+0x2ac>
   15576:	8f ef       	ldi	r24, 0xFF	; 255
   15578:	9f ef       	ldi	r25, 0xFF	; 255
   1557a:	84 cf       	rjmp	.-248    	; 0x15484 <vfprintf+0x30c>

0001557c <calloc>:
calloc():
   1557c:	0f 93       	push	r16
   1557e:	1f 93       	push	r17
   15580:	cf 93       	push	r28
   15582:	df 93       	push	r29
   15584:	86 9f       	mul	r24, r22
   15586:	80 01       	movw	r16, r0
   15588:	87 9f       	mul	r24, r23
   1558a:	10 0d       	add	r17, r0
   1558c:	96 9f       	mul	r25, r22
   1558e:	10 0d       	add	r17, r0
   15590:	11 24       	eor	r1, r1
   15592:	c8 01       	movw	r24, r16
   15594:	0e 94 53 ac 	call	0x158a6	; 0x158a6 <malloc>
   15598:	ec 01       	movw	r28, r24
   1559a:	00 97       	sbiw	r24, 0x00	; 0
   1559c:	29 f0       	breq	.+10     	; 0x155a8 <calloc+0x2c>
   1559e:	a8 01       	movw	r20, r16
   155a0:	70 e0       	ldi	r23, 0x00	; 0
   155a2:	60 e0       	ldi	r22, 0x00	; 0
   155a4:	0e 94 d4 af 	call	0x15fa8	; 0x15fa8 <memset>
   155a8:	ce 01       	movw	r24, r28
   155aa:	df 91       	pop	r29
   155ac:	cf 91       	pop	r28
   155ae:	1f 91       	pop	r17
   155b0:	0f 91       	pop	r16
   155b2:	08 95       	ret

000155b4 <dtoa_prf>:
dtoa_prf():
   155b4:	8f 92       	push	r8
   155b6:	9f 92       	push	r9
   155b8:	af 92       	push	r10
   155ba:	bf 92       	push	r11
   155bc:	cf 92       	push	r12
   155be:	df 92       	push	r13
   155c0:	ef 92       	push	r14
   155c2:	ff 92       	push	r15
   155c4:	0f 93       	push	r16
   155c6:	1f 93       	push	r17
   155c8:	cf 93       	push	r28
   155ca:	df 93       	push	r29
   155cc:	00 d0       	rcall	.+0      	; 0x155ce <dtoa_prf+0x1a>
   155ce:	00 d0       	rcall	.+0      	; 0x155d0 <dtoa_prf+0x1c>
   155d0:	00 d0       	rcall	.+0      	; 0x155d2 <dtoa_prf+0x1e>
   155d2:	cd b7       	in	r28, 0x3d	; 61
   155d4:	de b7       	in	r29, 0x3e	; 62
   155d6:	6a 01       	movw	r12, r20
   155d8:	f2 2e       	mov	r15, r18
   155da:	b0 2e       	mov	r11, r16
   155dc:	10 2f       	mov	r17, r16
   155de:	fb e3       	ldi	r31, 0x3B	; 59
   155e0:	af 2e       	mov	r10, r31
   155e2:	a0 16       	cp	r10, r16
   155e4:	08 f4       	brcc	.+2      	; 0x155e8 <dtoa_prf+0x34>
   155e6:	1b e3       	ldi	r17, 0x3B	; 59
   155e8:	1f 5f       	subi	r17, 0xFF	; 255
   155ea:	01 2f       	mov	r16, r17
   155ec:	27 e0       	ldi	r18, 0x07	; 7
   155ee:	ae 01       	movw	r20, r28
   155f0:	4f 5f       	subi	r20, 0xFF	; 255
   155f2:	5f 4f       	sbci	r21, 0xFF	; 255
   155f4:	0e 94 d6 ae 	call	0x15dac	; 0x15dac <__ftoa_engine>
   155f8:	bc 01       	movw	r22, r24
   155fa:	89 81       	ldd	r24, Y+1	; 0x01
   155fc:	98 2f       	mov	r25, r24
   155fe:	99 70       	andi	r25, 0x09	; 9
   15600:	91 30       	cpi	r25, 0x01	; 1
   15602:	09 f4       	brne	.+2      	; 0x15606 <dtoa_prf+0x52>
   15604:	4e c0       	rjmp	.+156    	; 0x156a2 <dtoa_prf+0xee>
   15606:	9b e2       	ldi	r25, 0x2B	; 43
   15608:	e1 fc       	sbrc	r14, 1
   1560a:	04 c0       	rjmp	.+8      	; 0x15614 <dtoa_prf+0x60>
   1560c:	9e 2d       	mov	r25, r14
   1560e:	91 70       	andi	r25, 0x01	; 1
   15610:	e0 fc       	sbrc	r14, 0
   15612:	49 c0       	rjmp	.+146    	; 0x156a6 <dtoa_prf+0xf2>
   15614:	5e 2d       	mov	r21, r14
   15616:	50 71       	andi	r21, 0x10	; 16
   15618:	e8 2f       	mov	r30, r24
   1561a:	e8 70       	andi	r30, 0x08	; 8
   1561c:	83 ff       	sbrs	r24, 3
   1561e:	55 c0       	rjmp	.+170    	; 0x156ca <dtoa_prf+0x116>
   15620:	84 e0       	ldi	r24, 0x04	; 4
   15622:	91 11       	cpse	r25, r1
   15624:	01 c0       	rjmp	.+2      	; 0x15628 <dtoa_prf+0x74>
   15626:	83 e0       	ldi	r24, 0x03	; 3
   15628:	ef 2d       	mov	r30, r15
   1562a:	e8 1b       	sub	r30, r24
   1562c:	8f 15       	cp	r24, r15
   1562e:	08 f0       	brcs	.+2      	; 0x15632 <dtoa_prf+0x7e>
   15630:	e0 e0       	ldi	r30, 0x00	; 0
   15632:	d6 01       	movw	r26, r12
   15634:	8e 2f       	mov	r24, r30
   15636:	20 e2       	ldi	r18, 0x20	; 32
   15638:	55 23       	and	r21, r21
   1563a:	c9 f1       	breq	.+114    	; 0x156ae <dtoa_prf+0xfa>
   1563c:	99 23       	and	r25, r25
   1563e:	29 f0       	breq	.+10     	; 0x1564a <dtoa_prf+0x96>
   15640:	d6 01       	movw	r26, r12
   15642:	9c 93       	st	X, r25
   15644:	c6 01       	movw	r24, r12
   15646:	01 96       	adiw	r24, 0x01	; 1
   15648:	6c 01       	movw	r12, r24
   1564a:	96 01       	movw	r18, r12
   1564c:	2d 5f       	subi	r18, 0xFD	; 253
   1564e:	3f 4f       	sbci	r19, 0xFF	; 255
   15650:	e2 fe       	sbrs	r14, 2
   15652:	33 c0       	rjmp	.+102    	; 0x156ba <dtoa_prf+0x106>
   15654:	8e e4       	ldi	r24, 0x4E	; 78
   15656:	d6 01       	movw	r26, r12
   15658:	8c 93       	st	X, r24
   1565a:	91 e4       	ldi	r25, 0x41	; 65
   1565c:	11 96       	adiw	r26, 0x01	; 1
   1565e:	9c 93       	st	X, r25
   15660:	11 97       	sbiw	r26, 0x01	; 1
   15662:	12 96       	adiw	r26, 0x02	; 2
   15664:	8c 93       	st	X, r24
   15666:	d9 01       	movw	r26, r18
   15668:	8e 2f       	mov	r24, r30
   1566a:	90 e2       	ldi	r25, 0x20	; 32
   1566c:	81 11       	cpse	r24, r1
   1566e:	2a c0       	rjmp	.+84     	; 0x156c4 <dtoa_prf+0x110>
   15670:	e2 0f       	add	r30, r18
   15672:	f3 2f       	mov	r31, r19
   15674:	f1 1d       	adc	r31, r1
   15676:	10 82       	st	Z, r1
   15678:	8e ef       	ldi	r24, 0xFE	; 254
   1567a:	9f ef       	ldi	r25, 0xFF	; 255
   1567c:	29 96       	adiw	r28, 0x09	; 9
   1567e:	0f b6       	in	r0, 0x3f	; 63
   15680:	f8 94       	cli
   15682:	de bf       	out	0x3e, r29	; 62
   15684:	0f be       	out	0x3f, r0	; 63
   15686:	cd bf       	out	0x3d, r28	; 61
   15688:	df 91       	pop	r29
   1568a:	cf 91       	pop	r28
   1568c:	1f 91       	pop	r17
   1568e:	0f 91       	pop	r16
   15690:	ff 90       	pop	r15
   15692:	ef 90       	pop	r14
   15694:	df 90       	pop	r13
   15696:	cf 90       	pop	r12
   15698:	bf 90       	pop	r11
   1569a:	af 90       	pop	r10
   1569c:	9f 90       	pop	r9
   1569e:	8f 90       	pop	r8
   156a0:	08 95       	ret
   156a2:	9d e2       	ldi	r25, 0x2D	; 45
   156a4:	b7 cf       	rjmp	.-146    	; 0x15614 <dtoa_prf+0x60>
   156a6:	90 e2       	ldi	r25, 0x20	; 32
   156a8:	b5 cf       	rjmp	.-150    	; 0x15614 <dtoa_prf+0x60>
   156aa:	2d 93       	st	X+, r18
   156ac:	81 50       	subi	r24, 0x01	; 1
   156ae:	81 11       	cpse	r24, r1
   156b0:	fc cf       	rjmp	.-8      	; 0x156aa <dtoa_prf+0xf6>
   156b2:	ce 0e       	add	r12, r30
   156b4:	d1 1c       	adc	r13, r1
   156b6:	e0 e0       	ldi	r30, 0x00	; 0
   156b8:	c1 cf       	rjmp	.-126    	; 0x1563c <dtoa_prf+0x88>
   156ba:	8e e6       	ldi	r24, 0x6E	; 110
   156bc:	d6 01       	movw	r26, r12
   156be:	8c 93       	st	X, r24
   156c0:	91 e6       	ldi	r25, 0x61	; 97
   156c2:	cc cf       	rjmp	.-104    	; 0x1565c <dtoa_prf+0xa8>
   156c4:	9d 93       	st	X+, r25
   156c6:	81 50       	subi	r24, 0x01	; 1
   156c8:	d1 cf       	rjmp	.-94     	; 0x1566c <dtoa_prf+0xb8>
   156ca:	48 2f       	mov	r20, r24
   156cc:	44 70       	andi	r20, 0x04	; 4
   156ce:	82 ff       	sbrs	r24, 2
   156d0:	3d c0       	rjmp	.+122    	; 0x1574c <dtoa_prf+0x198>
   156d2:	84 e0       	ldi	r24, 0x04	; 4
   156d4:	91 11       	cpse	r25, r1
   156d6:	01 c0       	rjmp	.+2      	; 0x156da <dtoa_prf+0x126>
   156d8:	83 e0       	ldi	r24, 0x03	; 3
   156da:	8f 15       	cp	r24, r15
   156dc:	10 f4       	brcc	.+4      	; 0x156e2 <dtoa_prf+0x12e>
   156de:	ef 2d       	mov	r30, r15
   156e0:	e8 1b       	sub	r30, r24
   156e2:	d6 01       	movw	r26, r12
   156e4:	8e 2f       	mov	r24, r30
   156e6:	20 e2       	ldi	r18, 0x20	; 32
   156e8:	55 23       	and	r21, r21
   156ea:	09 f1       	breq	.+66     	; 0x1572e <dtoa_prf+0x17a>
   156ec:	99 23       	and	r25, r25
   156ee:	29 f0       	breq	.+10     	; 0x156fa <dtoa_prf+0x146>
   156f0:	d6 01       	movw	r26, r12
   156f2:	9c 93       	st	X, r25
   156f4:	c6 01       	movw	r24, r12
   156f6:	01 96       	adiw	r24, 0x01	; 1
   156f8:	6c 01       	movw	r12, r24
   156fa:	96 01       	movw	r18, r12
   156fc:	2d 5f       	subi	r18, 0xFD	; 253
   156fe:	3f 4f       	sbci	r19, 0xFF	; 255
   15700:	e2 fe       	sbrs	r14, 2
   15702:	1b c0       	rjmp	.+54     	; 0x1573a <dtoa_prf+0x186>
   15704:	89 e4       	ldi	r24, 0x49	; 73
   15706:	d6 01       	movw	r26, r12
   15708:	8c 93       	st	X, r24
   1570a:	8e e4       	ldi	r24, 0x4E	; 78
   1570c:	11 96       	adiw	r26, 0x01	; 1
   1570e:	8c 93       	st	X, r24
   15710:	11 97       	sbiw	r26, 0x01	; 1
   15712:	86 e4       	ldi	r24, 0x46	; 70
   15714:	12 96       	adiw	r26, 0x02	; 2
   15716:	8c 93       	st	X, r24
   15718:	d9 01       	movw	r26, r18
   1571a:	8e 2f       	mov	r24, r30
   1571c:	90 e2       	ldi	r25, 0x20	; 32
   1571e:	88 23       	and	r24, r24
   15720:	09 f4       	brne	.+2      	; 0x15724 <dtoa_prf+0x170>
   15722:	a6 cf       	rjmp	.-180    	; 0x15670 <dtoa_prf+0xbc>
   15724:	9d 93       	st	X+, r25
   15726:	81 50       	subi	r24, 0x01	; 1
   15728:	fa cf       	rjmp	.-12     	; 0x1571e <dtoa_prf+0x16a>
   1572a:	2d 93       	st	X+, r18
   1572c:	81 50       	subi	r24, 0x01	; 1
   1572e:	81 11       	cpse	r24, r1
   15730:	fc cf       	rjmp	.-8      	; 0x1572a <dtoa_prf+0x176>
   15732:	ce 0e       	add	r12, r30
   15734:	d1 1c       	adc	r13, r1
   15736:	e0 e0       	ldi	r30, 0x00	; 0
   15738:	d9 cf       	rjmp	.-78     	; 0x156ec <dtoa_prf+0x138>
   1573a:	89 e6       	ldi	r24, 0x69	; 105
   1573c:	d6 01       	movw	r26, r12
   1573e:	8c 93       	st	X, r24
   15740:	8e e6       	ldi	r24, 0x6E	; 110
   15742:	11 96       	adiw	r26, 0x01	; 1
   15744:	8c 93       	st	X, r24
   15746:	11 97       	sbiw	r26, 0x01	; 1
   15748:	86 e6       	ldi	r24, 0x66	; 102
   1574a:	e4 cf       	rjmp	.-56     	; 0x15714 <dtoa_prf+0x160>
   1574c:	9b 01       	movw	r18, r22
   1574e:	77 ff       	sbrs	r23, 7
   15750:	02 c0       	rjmp	.+4      	; 0x15756 <dtoa_prf+0x1a2>
   15752:	30 e0       	ldi	r19, 0x00	; 0
   15754:	20 e0       	ldi	r18, 0x00	; 0
   15756:	a1 e0       	ldi	r26, 0x01	; 1
   15758:	b0 e0       	ldi	r27, 0x00	; 0
   1575a:	91 11       	cpse	r25, r1
   1575c:	02 c0       	rjmp	.+4      	; 0x15762 <dtoa_prf+0x1ae>
   1575e:	b0 e0       	ldi	r27, 0x00	; 0
   15760:	a0 e0       	ldi	r26, 0x00	; 0
   15762:	f9 01       	movw	r30, r18
   15764:	31 96       	adiw	r30, 0x01	; 1
   15766:	ae 0f       	add	r26, r30
   15768:	bf 1f       	adc	r27, r31
   1576a:	8b 2c       	mov	r8, r11
   1576c:	91 2c       	mov	r9, r1
   1576e:	bb 20       	and	r11, r11
   15770:	09 f4       	brne	.+2      	; 0x15774 <dtoa_prf+0x1c0>
   15772:	61 c0       	rjmp	.+194    	; 0x15836 <dtoa_prf+0x282>
   15774:	54 01       	movw	r10, r8
   15776:	ef ef       	ldi	r30, 0xFF	; 255
   15778:	ae 1a       	sub	r10, r30
   1577a:	be 0a       	sbc	r11, r30
   1577c:	aa 0d       	add	r26, r10
   1577e:	bb 1d       	adc	r27, r11
   15780:	fa 16       	cp	r15, r26
   15782:	1b 06       	cpc	r1, r27
   15784:	19 f0       	breq	.+6      	; 0x1578c <dtoa_prf+0x1d8>
   15786:	14 f0       	brlt	.+4      	; 0x1578c <dtoa_prf+0x1d8>
   15788:	4f 2d       	mov	r20, r15
   1578a:	4a 1b       	sub	r20, r26
   1578c:	51 11       	cpse	r21, r1
   1578e:	88 c0       	rjmp	.+272    	; 0x158a0 <dtoa_prf+0x2ec>
   15790:	e3 fc       	sbrc	r14, 3
   15792:	59 c0       	rjmp	.+178    	; 0x15846 <dtoa_prf+0x292>
   15794:	76 01       	movw	r14, r12
   15796:	a4 2f       	mov	r26, r20
   15798:	b0 e2       	ldi	r27, 0x20	; 32
   1579a:	a1 11       	cpse	r26, r1
   1579c:	4f c0       	rjmp	.+158    	; 0x1583c <dtoa_prf+0x288>
   1579e:	c4 0e       	add	r12, r20
   157a0:	d1 1c       	adc	r13, r1
   157a2:	99 23       	and	r25, r25
   157a4:	09 f4       	brne	.+2      	; 0x157a8 <dtoa_prf+0x1f4>
   157a6:	5b c0       	rjmp	.+182    	; 0x1585e <dtoa_prf+0x2aa>
   157a8:	40 e0       	ldi	r20, 0x00	; 0
   157aa:	d6 01       	movw	r26, r12
   157ac:	11 96       	adiw	r26, 0x01	; 1
   157ae:	f6 01       	movw	r30, r12
   157b0:	90 83       	st	Z, r25
   157b2:	6d 01       	movw	r12, r26
   157b4:	55 23       	and	r21, r21
   157b6:	09 f4       	brne	.+2      	; 0x157ba <dtoa_prf+0x206>
   157b8:	48 c0       	rjmp	.+144    	; 0x1584a <dtoa_prf+0x296>
   157ba:	01 2f       	mov	r16, r17
   157bc:	06 0f       	add	r16, r22
   157be:	9a 81       	ldd	r25, Y+2	; 0x02
   157c0:	58 2f       	mov	r21, r24
   157c2:	50 71       	andi	r21, 0x10	; 16
   157c4:	84 ff       	sbrs	r24, 4
   157c6:	03 c0       	rjmp	.+6      	; 0x157ce <dtoa_prf+0x21a>
   157c8:	91 33       	cpi	r25, 0x31	; 49
   157ca:	09 f4       	brne	.+2      	; 0x157ce <dtoa_prf+0x21a>
   157cc:	01 50       	subi	r16, 0x01	; 1
   157ce:	10 16       	cp	r1, r16
   157d0:	0c f0       	brlt	.+2      	; 0x157d4 <dtoa_prf+0x220>
   157d2:	47 c0       	rjmp	.+142    	; 0x15862 <dtoa_prf+0x2ae>
   157d4:	09 30       	cpi	r16, 0x09	; 9
   157d6:	08 f0       	brcs	.+2      	; 0x157da <dtoa_prf+0x226>
   157d8:	08 e0       	ldi	r16, 0x08	; 8
   157da:	ee e2       	ldi	r30, 0x2E	; 46
   157dc:	fe 2e       	mov	r15, r30
   157de:	5b 01       	movw	r10, r22
   157e0:	a0 1a       	sub	r10, r16
   157e2:	b1 08       	sbc	r11, r1
   157e4:	85 01       	movw	r16, r10
   157e6:	91 94       	neg	r9
   157e8:	81 94       	neg	r8
   157ea:	91 08       	sbc	r9, r1
   157ec:	2f 3f       	cpi	r18, 0xFF	; 255
   157ee:	32 07       	cpc	r19, r18
   157f0:	29 f4       	brne	.+10     	; 0x157fc <dtoa_prf+0x248>
   157f2:	d6 01       	movw	r26, r12
   157f4:	fc 92       	st	X, r15
   157f6:	f6 01       	movw	r30, r12
   157f8:	31 96       	adiw	r30, 0x01	; 1
   157fa:	6f 01       	movw	r12, r30
   157fc:	62 17       	cp	r22, r18
   157fe:	73 07       	cpc	r23, r19
   15800:	94 f1       	brlt	.+100    	; 0x15866 <dtoa_prf+0x2b2>
   15802:	02 17       	cp	r16, r18
   15804:	13 07       	cpc	r17, r19
   15806:	7c f5       	brge	.+94     	; 0x15866 <dtoa_prf+0x2b2>
   15808:	db 01       	movw	r26, r22
   1580a:	a2 1b       	sub	r26, r18
   1580c:	b3 0b       	sbc	r27, r19
   1580e:	aa 24       	eor	r10, r10
   15810:	a3 94       	inc	r10
   15812:	b1 2c       	mov	r11, r1
   15814:	ac 0e       	add	r10, r28
   15816:	bd 1e       	adc	r11, r29
   15818:	aa 0d       	add	r26, r10
   1581a:	bb 1d       	adc	r27, r11
   1581c:	11 96       	adiw	r26, 0x01	; 1
   1581e:	8c 91       	ld	r24, X
   15820:	21 50       	subi	r18, 0x01	; 1
   15822:	31 09       	sbc	r19, r1
   15824:	d6 01       	movw	r26, r12
   15826:	11 96       	adiw	r26, 0x01	; 1
   15828:	28 15       	cp	r18, r8
   1582a:	39 05       	cpc	r19, r9
   1582c:	f4 f0       	brlt	.+60     	; 0x1586a <dtoa_prf+0x2b6>
   1582e:	f6 01       	movw	r30, r12
   15830:	80 83       	st	Z, r24
   15832:	6d 01       	movw	r12, r26
   15834:	db cf       	rjmp	.-74     	; 0x157ec <dtoa_prf+0x238>
   15836:	b1 2c       	mov	r11, r1
   15838:	a1 2c       	mov	r10, r1
   1583a:	a0 cf       	rjmp	.-192    	; 0x1577c <dtoa_prf+0x1c8>
   1583c:	f7 01       	movw	r30, r14
   1583e:	b1 93       	st	Z+, r27
   15840:	7f 01       	movw	r14, r30
   15842:	a1 50       	subi	r26, 0x01	; 1
   15844:	aa cf       	rjmp	.-172    	; 0x1579a <dtoa_prf+0x1e6>
   15846:	91 11       	cpse	r25, r1
   15848:	b0 cf       	rjmp	.-160    	; 0x157aa <dtoa_prf+0x1f6>
   1584a:	d6 01       	movw	r26, r12
   1584c:	94 2f       	mov	r25, r20
   1584e:	50 e3       	ldi	r21, 0x30	; 48
   15850:	02 c0       	rjmp	.+4      	; 0x15856 <dtoa_prf+0x2a2>
   15852:	5d 93       	st	X+, r21
   15854:	91 50       	subi	r25, 0x01	; 1
   15856:	91 11       	cpse	r25, r1
   15858:	fc cf       	rjmp	.-8      	; 0x15852 <dtoa_prf+0x29e>
   1585a:	c4 0e       	add	r12, r20
   1585c:	d1 1c       	adc	r13, r1
   1585e:	40 e0       	ldi	r20, 0x00	; 0
   15860:	ac cf       	rjmp	.-168    	; 0x157ba <dtoa_prf+0x206>
   15862:	01 e0       	ldi	r16, 0x01	; 1
   15864:	ba cf       	rjmp	.-140    	; 0x157da <dtoa_prf+0x226>
   15866:	80 e3       	ldi	r24, 0x30	; 48
   15868:	db cf       	rjmp	.-74     	; 0x15820 <dtoa_prf+0x26c>
   1586a:	62 17       	cp	r22, r18
   1586c:	73 07       	cpc	r23, r19
   1586e:	31 f4       	brne	.+12     	; 0x1587c <dtoa_prf+0x2c8>
   15870:	96 33       	cpi	r25, 0x36	; 54
   15872:	88 f4       	brcc	.+34     	; 0x15896 <dtoa_prf+0x2e2>
   15874:	95 33       	cpi	r25, 0x35	; 53
   15876:	11 f4       	brne	.+4      	; 0x1587c <dtoa_prf+0x2c8>
   15878:	55 23       	and	r21, r21
   1587a:	69 f0       	breq	.+26     	; 0x15896 <dtoa_prf+0x2e2>
   1587c:	f6 01       	movw	r30, r12
   1587e:	80 83       	st	Z, r24
   15880:	fd 01       	movw	r30, r26
   15882:	84 2f       	mov	r24, r20
   15884:	90 e2       	ldi	r25, 0x20	; 32
   15886:	81 11       	cpse	r24, r1
   15888:	08 c0       	rjmp	.+16     	; 0x1589a <dtoa_prf+0x2e6>
   1588a:	a4 0f       	add	r26, r20
   1588c:	b1 1d       	adc	r27, r1
   1588e:	1c 92       	st	X, r1
   15890:	90 e0       	ldi	r25, 0x00	; 0
   15892:	80 e0       	ldi	r24, 0x00	; 0
   15894:	f3 ce       	rjmp	.-538    	; 0x1567c <dtoa_prf+0xc8>
   15896:	81 e3       	ldi	r24, 0x31	; 49
   15898:	f1 cf       	rjmp	.-30     	; 0x1587c <dtoa_prf+0x2c8>
   1589a:	91 93       	st	Z+, r25
   1589c:	81 50       	subi	r24, 0x01	; 1
   1589e:	f3 cf       	rjmp	.-26     	; 0x15886 <dtoa_prf+0x2d2>
   158a0:	91 11       	cpse	r25, r1
   158a2:	83 cf       	rjmp	.-250    	; 0x157aa <dtoa_prf+0x1f6>
   158a4:	8a cf       	rjmp	.-236    	; 0x157ba <dtoa_prf+0x206>

000158a6 <malloc>:
malloc():
   158a6:	0f 93       	push	r16
   158a8:	1f 93       	push	r17
   158aa:	cf 93       	push	r28
   158ac:	df 93       	push	r29
   158ae:	82 30       	cpi	r24, 0x02	; 2
   158b0:	91 05       	cpc	r25, r1
   158b2:	10 f4       	brcc	.+4      	; 0x158b8 <malloc+0x12>
   158b4:	82 e0       	ldi	r24, 0x02	; 2
   158b6:	90 e0       	ldi	r25, 0x00	; 0
   158b8:	e0 91 5b 13 	lds	r30, 0x135B	; 0x80135b <__flp>
   158bc:	f0 91 5c 13 	lds	r31, 0x135C	; 0x80135c <__flp+0x1>
   158c0:	30 e0       	ldi	r19, 0x00	; 0
   158c2:	20 e0       	ldi	r18, 0x00	; 0
   158c4:	b0 e0       	ldi	r27, 0x00	; 0
   158c6:	a0 e0       	ldi	r26, 0x00	; 0
   158c8:	30 97       	sbiw	r30, 0x00	; 0
   158ca:	99 f4       	brne	.+38     	; 0x158f2 <malloc+0x4c>
   158cc:	21 15       	cp	r18, r1
   158ce:	31 05       	cpc	r19, r1
   158d0:	09 f4       	brne	.+2      	; 0x158d4 <malloc+0x2e>
   158d2:	4a c0       	rjmp	.+148    	; 0x15968 <malloc+0xc2>
   158d4:	28 1b       	sub	r18, r24
   158d6:	39 0b       	sbc	r19, r25
   158d8:	24 30       	cpi	r18, 0x04	; 4
   158da:	31 05       	cpc	r19, r1
   158dc:	d8 f5       	brcc	.+118    	; 0x15954 <malloc+0xae>
   158de:	8a 81       	ldd	r24, Y+2	; 0x02
   158e0:	9b 81       	ldd	r25, Y+3	; 0x03
   158e2:	61 15       	cp	r22, r1
   158e4:	71 05       	cpc	r23, r1
   158e6:	89 f1       	breq	.+98     	; 0x1594a <malloc+0xa4>
   158e8:	fb 01       	movw	r30, r22
   158ea:	93 83       	std	Z+3, r25	; 0x03
   158ec:	82 83       	std	Z+2, r24	; 0x02
   158ee:	fe 01       	movw	r30, r28
   158f0:	11 c0       	rjmp	.+34     	; 0x15914 <malloc+0x6e>
   158f2:	40 81       	ld	r20, Z
   158f4:	51 81       	ldd	r21, Z+1	; 0x01
   158f6:	02 81       	ldd	r16, Z+2	; 0x02
   158f8:	13 81       	ldd	r17, Z+3	; 0x03
   158fa:	48 17       	cp	r20, r24
   158fc:	59 07       	cpc	r21, r25
   158fe:	e0 f0       	brcs	.+56     	; 0x15938 <malloc+0x92>
   15900:	48 17       	cp	r20, r24
   15902:	59 07       	cpc	r21, r25
   15904:	99 f4       	brne	.+38     	; 0x1592c <malloc+0x86>
   15906:	10 97       	sbiw	r26, 0x00	; 0
   15908:	61 f0       	breq	.+24     	; 0x15922 <malloc+0x7c>
   1590a:	12 96       	adiw	r26, 0x02	; 2
   1590c:	0c 93       	st	X, r16
   1590e:	12 97       	sbiw	r26, 0x02	; 2
   15910:	13 96       	adiw	r26, 0x03	; 3
   15912:	1c 93       	st	X, r17
   15914:	32 96       	adiw	r30, 0x02	; 2
   15916:	cf 01       	movw	r24, r30
   15918:	df 91       	pop	r29
   1591a:	cf 91       	pop	r28
   1591c:	1f 91       	pop	r17
   1591e:	0f 91       	pop	r16
   15920:	08 95       	ret
   15922:	00 93 5b 13 	sts	0x135B, r16	; 0x80135b <__flp>
   15926:	10 93 5c 13 	sts	0x135C, r17	; 0x80135c <__flp+0x1>
   1592a:	f4 cf       	rjmp	.-24     	; 0x15914 <malloc+0x6e>
   1592c:	21 15       	cp	r18, r1
   1592e:	31 05       	cpc	r19, r1
   15930:	51 f0       	breq	.+20     	; 0x15946 <malloc+0xa0>
   15932:	42 17       	cp	r20, r18
   15934:	53 07       	cpc	r21, r19
   15936:	38 f0       	brcs	.+14     	; 0x15946 <malloc+0xa0>
   15938:	a9 01       	movw	r20, r18
   1593a:	db 01       	movw	r26, r22
   1593c:	9a 01       	movw	r18, r20
   1593e:	bd 01       	movw	r22, r26
   15940:	df 01       	movw	r26, r30
   15942:	f8 01       	movw	r30, r16
   15944:	c1 cf       	rjmp	.-126    	; 0x158c8 <malloc+0x22>
   15946:	ef 01       	movw	r28, r30
   15948:	f9 cf       	rjmp	.-14     	; 0x1593c <malloc+0x96>
   1594a:	90 93 5c 13 	sts	0x135C, r25	; 0x80135c <__flp+0x1>
   1594e:	80 93 5b 13 	sts	0x135B, r24	; 0x80135b <__flp>
   15952:	cd cf       	rjmp	.-102    	; 0x158ee <malloc+0x48>
   15954:	fe 01       	movw	r30, r28
   15956:	e2 0f       	add	r30, r18
   15958:	f3 1f       	adc	r31, r19
   1595a:	81 93       	st	Z+, r24
   1595c:	91 93       	st	Z+, r25
   1595e:	22 50       	subi	r18, 0x02	; 2
   15960:	31 09       	sbc	r19, r1
   15962:	39 83       	std	Y+1, r19	; 0x01
   15964:	28 83       	st	Y, r18
   15966:	d7 cf       	rjmp	.-82     	; 0x15916 <malloc+0x70>
   15968:	20 91 59 13 	lds	r18, 0x1359	; 0x801359 <__brkval>
   1596c:	30 91 5a 13 	lds	r19, 0x135A	; 0x80135a <__brkval+0x1>
   15970:	23 2b       	or	r18, r19
   15972:	41 f4       	brne	.+16     	; 0x15984 <malloc+0xde>
   15974:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   15978:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   1597c:	30 93 5a 13 	sts	0x135A, r19	; 0x80135a <__brkval+0x1>
   15980:	20 93 59 13 	sts	0x1359, r18	; 0x801359 <__brkval>
   15984:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   15988:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   1598c:	21 15       	cp	r18, r1
   1598e:	31 05       	cpc	r19, r1
   15990:	41 f4       	brne	.+16     	; 0x159a2 <malloc+0xfc>
   15992:	2d b7       	in	r18, 0x3d	; 61
   15994:	3e b7       	in	r19, 0x3e	; 62
   15996:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   1599a:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   1599e:	24 1b       	sub	r18, r20
   159a0:	35 0b       	sbc	r19, r21
   159a2:	e0 91 59 13 	lds	r30, 0x1359	; 0x801359 <__brkval>
   159a6:	f0 91 5a 13 	lds	r31, 0x135A	; 0x80135a <__brkval+0x1>
   159aa:	e2 17       	cp	r30, r18
   159ac:	f3 07       	cpc	r31, r19
   159ae:	a0 f4       	brcc	.+40     	; 0x159d8 <malloc+0x132>
   159b0:	2e 1b       	sub	r18, r30
   159b2:	3f 0b       	sbc	r19, r31
   159b4:	28 17       	cp	r18, r24
   159b6:	39 07       	cpc	r19, r25
   159b8:	78 f0       	brcs	.+30     	; 0x159d8 <malloc+0x132>
   159ba:	ac 01       	movw	r20, r24
   159bc:	4e 5f       	subi	r20, 0xFE	; 254
   159be:	5f 4f       	sbci	r21, 0xFF	; 255
   159c0:	24 17       	cp	r18, r20
   159c2:	35 07       	cpc	r19, r21
   159c4:	48 f0       	brcs	.+18     	; 0x159d8 <malloc+0x132>
   159c6:	4e 0f       	add	r20, r30
   159c8:	5f 1f       	adc	r21, r31
   159ca:	50 93 5a 13 	sts	0x135A, r21	; 0x80135a <__brkval+0x1>
   159ce:	40 93 59 13 	sts	0x1359, r20	; 0x801359 <__brkval>
   159d2:	81 93       	st	Z+, r24
   159d4:	91 93       	st	Z+, r25
   159d6:	9f cf       	rjmp	.-194    	; 0x15916 <malloc+0x70>
   159d8:	f0 e0       	ldi	r31, 0x00	; 0
   159da:	e0 e0       	ldi	r30, 0x00	; 0
   159dc:	9c cf       	rjmp	.-200    	; 0x15916 <malloc+0x70>

000159de <free>:
free():
   159de:	cf 93       	push	r28
   159e0:	df 93       	push	r29
   159e2:	00 97       	sbiw	r24, 0x00	; 0
   159e4:	e9 f0       	breq	.+58     	; 0x15a20 <free+0x42>
   159e6:	fc 01       	movw	r30, r24
   159e8:	32 97       	sbiw	r30, 0x02	; 2
   159ea:	13 82       	std	Z+3, r1	; 0x03
   159ec:	12 82       	std	Z+2, r1	; 0x02
   159ee:	a0 91 5b 13 	lds	r26, 0x135B	; 0x80135b <__flp>
   159f2:	b0 91 5c 13 	lds	r27, 0x135C	; 0x80135c <__flp+0x1>
   159f6:	ed 01       	movw	r28, r26
   159f8:	30 e0       	ldi	r19, 0x00	; 0
   159fa:	20 e0       	ldi	r18, 0x00	; 0
   159fc:	10 97       	sbiw	r26, 0x00	; 0
   159fe:	a1 f4       	brne	.+40     	; 0x15a28 <free+0x4a>
   15a00:	20 81       	ld	r18, Z
   15a02:	31 81       	ldd	r19, Z+1	; 0x01
   15a04:	82 0f       	add	r24, r18
   15a06:	93 1f       	adc	r25, r19
   15a08:	20 91 59 13 	lds	r18, 0x1359	; 0x801359 <__brkval>
   15a0c:	30 91 5a 13 	lds	r19, 0x135A	; 0x80135a <__brkval+0x1>
   15a10:	28 17       	cp	r18, r24
   15a12:	39 07       	cpc	r19, r25
   15a14:	09 f0       	breq	.+2      	; 0x15a18 <free+0x3a>
   15a16:	61 c0       	rjmp	.+194    	; 0x15ada <free+0xfc>
   15a18:	f0 93 5a 13 	sts	0x135A, r31	; 0x80135a <__brkval+0x1>
   15a1c:	e0 93 59 13 	sts	0x1359, r30	; 0x801359 <__brkval>
   15a20:	df 91       	pop	r29
   15a22:	cf 91       	pop	r28
   15a24:	08 95       	ret
   15a26:	ea 01       	movw	r28, r20
   15a28:	ce 17       	cp	r28, r30
   15a2a:	df 07       	cpc	r29, r31
   15a2c:	e8 f5       	brcc	.+122    	; 0x15aa8 <free+0xca>
   15a2e:	4a 81       	ldd	r20, Y+2	; 0x02
   15a30:	5b 81       	ldd	r21, Y+3	; 0x03
   15a32:	9e 01       	movw	r18, r28
   15a34:	41 15       	cp	r20, r1
   15a36:	51 05       	cpc	r21, r1
   15a38:	b1 f7       	brne	.-20     	; 0x15a26 <free+0x48>
   15a3a:	e9 01       	movw	r28, r18
   15a3c:	fb 83       	std	Y+3, r31	; 0x03
   15a3e:	ea 83       	std	Y+2, r30	; 0x02
   15a40:	49 91       	ld	r20, Y+
   15a42:	59 91       	ld	r21, Y+
   15a44:	c4 0f       	add	r28, r20
   15a46:	d5 1f       	adc	r29, r21
   15a48:	ec 17       	cp	r30, r28
   15a4a:	fd 07       	cpc	r31, r29
   15a4c:	61 f4       	brne	.+24     	; 0x15a66 <free+0x88>
   15a4e:	80 81       	ld	r24, Z
   15a50:	91 81       	ldd	r25, Z+1	; 0x01
   15a52:	02 96       	adiw	r24, 0x02	; 2
   15a54:	84 0f       	add	r24, r20
   15a56:	95 1f       	adc	r25, r21
   15a58:	e9 01       	movw	r28, r18
   15a5a:	99 83       	std	Y+1, r25	; 0x01
   15a5c:	88 83       	st	Y, r24
   15a5e:	82 81       	ldd	r24, Z+2	; 0x02
   15a60:	93 81       	ldd	r25, Z+3	; 0x03
   15a62:	9b 83       	std	Y+3, r25	; 0x03
   15a64:	8a 83       	std	Y+2, r24	; 0x02
   15a66:	f0 e0       	ldi	r31, 0x00	; 0
   15a68:	e0 e0       	ldi	r30, 0x00	; 0
   15a6a:	12 96       	adiw	r26, 0x02	; 2
   15a6c:	8d 91       	ld	r24, X+
   15a6e:	9c 91       	ld	r25, X
   15a70:	13 97       	sbiw	r26, 0x03	; 3
   15a72:	00 97       	sbiw	r24, 0x00	; 0
   15a74:	b9 f5       	brne	.+110    	; 0x15ae4 <free+0x106>
   15a76:	2d 91       	ld	r18, X+
   15a78:	3c 91       	ld	r19, X
   15a7a:	11 97       	sbiw	r26, 0x01	; 1
   15a7c:	cd 01       	movw	r24, r26
   15a7e:	02 96       	adiw	r24, 0x02	; 2
   15a80:	82 0f       	add	r24, r18
   15a82:	93 1f       	adc	r25, r19
   15a84:	20 91 59 13 	lds	r18, 0x1359	; 0x801359 <__brkval>
   15a88:	30 91 5a 13 	lds	r19, 0x135A	; 0x80135a <__brkval+0x1>
   15a8c:	28 17       	cp	r18, r24
   15a8e:	39 07       	cpc	r19, r25
   15a90:	39 f6       	brne	.-114    	; 0x15a20 <free+0x42>
   15a92:	30 97       	sbiw	r30, 0x00	; 0
   15a94:	51 f5       	brne	.+84     	; 0x15aea <free+0x10c>
   15a96:	10 92 5c 13 	sts	0x135C, r1	; 0x80135c <__flp+0x1>
   15a9a:	10 92 5b 13 	sts	0x135B, r1	; 0x80135b <__flp>
   15a9e:	b0 93 5a 13 	sts	0x135A, r27	; 0x80135a <__brkval+0x1>
   15aa2:	a0 93 59 13 	sts	0x1359, r26	; 0x801359 <__brkval>
   15aa6:	bc cf       	rjmp	.-136    	; 0x15a20 <free+0x42>
   15aa8:	d3 83       	std	Z+3, r29	; 0x03
   15aaa:	c2 83       	std	Z+2, r28	; 0x02
   15aac:	40 81       	ld	r20, Z
   15aae:	51 81       	ldd	r21, Z+1	; 0x01
   15ab0:	84 0f       	add	r24, r20
   15ab2:	95 1f       	adc	r25, r21
   15ab4:	c8 17       	cp	r28, r24
   15ab6:	d9 07       	cpc	r29, r25
   15ab8:	61 f4       	brne	.+24     	; 0x15ad2 <free+0xf4>
   15aba:	4e 5f       	subi	r20, 0xFE	; 254
   15abc:	5f 4f       	sbci	r21, 0xFF	; 255
   15abe:	88 81       	ld	r24, Y
   15ac0:	99 81       	ldd	r25, Y+1	; 0x01
   15ac2:	48 0f       	add	r20, r24
   15ac4:	59 1f       	adc	r21, r25
   15ac6:	51 83       	std	Z+1, r21	; 0x01
   15ac8:	40 83       	st	Z, r20
   15aca:	8a 81       	ldd	r24, Y+2	; 0x02
   15acc:	9b 81       	ldd	r25, Y+3	; 0x03
   15ace:	93 83       	std	Z+3, r25	; 0x03
   15ad0:	82 83       	std	Z+2, r24	; 0x02
   15ad2:	21 15       	cp	r18, r1
   15ad4:	31 05       	cpc	r19, r1
   15ad6:	09 f0       	breq	.+2      	; 0x15ada <free+0xfc>
   15ad8:	b0 cf       	rjmp	.-160    	; 0x15a3a <free+0x5c>
   15ada:	f0 93 5c 13 	sts	0x135C, r31	; 0x80135c <__flp+0x1>
   15ade:	e0 93 5b 13 	sts	0x135B, r30	; 0x80135b <__flp>
   15ae2:	9e cf       	rjmp	.-196    	; 0x15a20 <free+0x42>
   15ae4:	fd 01       	movw	r30, r26
   15ae6:	dc 01       	movw	r26, r24
   15ae8:	c0 cf       	rjmp	.-128    	; 0x15a6a <free+0x8c>
   15aea:	13 82       	std	Z+3, r1	; 0x03
   15aec:	12 82       	std	Z+2, r1	; 0x02
   15aee:	d7 cf       	rjmp	.-82     	; 0x15a9e <free+0xc0>

00015af0 <strtod>:
strtod():
   15af0:	8f 92       	push	r8
   15af2:	9f 92       	push	r9
   15af4:	af 92       	push	r10
   15af6:	bf 92       	push	r11
   15af8:	cf 92       	push	r12
   15afa:	df 92       	push	r13
   15afc:	ef 92       	push	r14
   15afe:	ff 92       	push	r15
   15b00:	0f 93       	push	r16
   15b02:	1f 93       	push	r17
   15b04:	cf 93       	push	r28
   15b06:	df 93       	push	r29
   15b08:	5c 01       	movw	r10, r24
   15b0a:	7b 01       	movw	r14, r22
   15b0c:	61 15       	cp	r22, r1
   15b0e:	71 05       	cpc	r23, r1
   15b10:	19 f0       	breq	.+6      	; 0x15b18 <strtod+0x28>
   15b12:	db 01       	movw	r26, r22
   15b14:	8d 93       	st	X+, r24
   15b16:	9c 93       	st	X, r25
   15b18:	85 01       	movw	r16, r10
   15b1a:	0f 5f       	subi	r16, 0xFF	; 255
   15b1c:	1f 4f       	sbci	r17, 0xFF	; 255
   15b1e:	f5 01       	movw	r30, r10
   15b20:	d0 81       	ld	r29, Z
   15b22:	8d 2f       	mov	r24, r29
   15b24:	90 e0       	ldi	r25, 0x00	; 0
   15b26:	0e 94 f3 a7 	call	0x14fe6	; 0x14fe6 <isspace>
   15b2a:	6c 01       	movw	r12, r24
   15b2c:	89 2b       	or	r24, r25
   15b2e:	b9 f5       	brne	.+110    	; 0x15b9e <strtod+0xae>
   15b30:	dd 32       	cpi	r29, 0x2D	; 45
   15b32:	b9 f5       	brne	.+110    	; 0x15ba2 <strtod+0xb2>
   15b34:	0f 5f       	subi	r16, 0xFF	; 255
   15b36:	1f 4f       	sbci	r17, 0xFF	; 255
   15b38:	d5 01       	movw	r26, r10
   15b3a:	11 96       	adiw	r26, 0x01	; 1
   15b3c:	dc 91       	ld	r29, X
   15b3e:	c1 e0       	ldi	r28, 0x01	; 1
   15b40:	58 01       	movw	r10, r16
   15b42:	f1 e0       	ldi	r31, 0x01	; 1
   15b44:	af 1a       	sub	r10, r31
   15b46:	b1 08       	sbc	r11, r1
   15b48:	43 e0       	ldi	r20, 0x03	; 3
   15b4a:	50 e0       	ldi	r21, 0x00	; 0
   15b4c:	6c e2       	ldi	r22, 0x2C	; 44
   15b4e:	73 e0       	ldi	r23, 0x03	; 3
   15b50:	c5 01       	movw	r24, r10
   15b52:	0e 94 b1 af 	call	0x15f62	; 0x15f62 <strncasecmp_P>
   15b56:	89 2b       	or	r24, r25
   15b58:	69 f5       	brne	.+90     	; 0x15bb4 <strtod+0xc4>
   15b5a:	68 01       	movw	r12, r16
   15b5c:	82 e0       	ldi	r24, 0x02	; 2
   15b5e:	c8 0e       	add	r12, r24
   15b60:	d1 1c       	adc	r13, r1
   15b62:	45 e0       	ldi	r20, 0x05	; 5
   15b64:	50 e0       	ldi	r21, 0x00	; 0
   15b66:	67 e2       	ldi	r22, 0x27	; 39
   15b68:	73 e0       	ldi	r23, 0x03	; 3
   15b6a:	c6 01       	movw	r24, r12
   15b6c:	0e 94 b1 af 	call	0x15f62	; 0x15f62 <strncasecmp_P>
   15b70:	89 2b       	or	r24, r25
   15b72:	21 f4       	brne	.+8      	; 0x15b7c <strtod+0x8c>
   15b74:	68 01       	movw	r12, r16
   15b76:	97 e0       	ldi	r25, 0x07	; 7
   15b78:	c9 0e       	add	r12, r25
   15b7a:	d1 1c       	adc	r13, r1
   15b7c:	e1 14       	cp	r14, r1
   15b7e:	f1 04       	cpc	r15, r1
   15b80:	19 f0       	breq	.+6      	; 0x15b88 <strtod+0x98>
   15b82:	d7 01       	movw	r26, r14
   15b84:	cd 92       	st	X+, r12
   15b86:	dc 92       	st	X, r13
   15b88:	60 e0       	ldi	r22, 0x00	; 0
   15b8a:	70 e0       	ldi	r23, 0x00	; 0
   15b8c:	80 e8       	ldi	r24, 0x80	; 128
   15b8e:	9f ef       	ldi	r25, 0xFF	; 255
   15b90:	c1 11       	cpse	r28, r1
   15b92:	ff c0       	rjmp	.+510    	; 0x15d92 <strtod+0x2a2>
   15b94:	60 e0       	ldi	r22, 0x00	; 0
   15b96:	70 e0       	ldi	r23, 0x00	; 0
   15b98:	80 e8       	ldi	r24, 0x80	; 128
   15b9a:	9f e7       	ldi	r25, 0x7F	; 127
   15b9c:	fa c0       	rjmp	.+500    	; 0x15d92 <strtod+0x2a2>
   15b9e:	58 01       	movw	r10, r16
   15ba0:	bb cf       	rjmp	.-138    	; 0x15b18 <strtod+0x28>
   15ba2:	db 32       	cpi	r29, 0x2B	; 43
   15ba4:	29 f4       	brne	.+10     	; 0x15bb0 <strtod+0xc0>
   15ba6:	85 01       	movw	r16, r10
   15ba8:	0e 5f       	subi	r16, 0xFE	; 254
   15baa:	1f 4f       	sbci	r17, 0xFF	; 255
   15bac:	f5 01       	movw	r30, r10
   15bae:	d1 81       	ldd	r29, Z+1	; 0x01
   15bb0:	c0 e0       	ldi	r28, 0x00	; 0
   15bb2:	c6 cf       	rjmp	.-116    	; 0x15b40 <strtod+0x50>
   15bb4:	43 e0       	ldi	r20, 0x03	; 3
   15bb6:	50 e0       	ldi	r21, 0x00	; 0
   15bb8:	64 e2       	ldi	r22, 0x24	; 36
   15bba:	73 e0       	ldi	r23, 0x03	; 3
   15bbc:	c5 01       	movw	r24, r10
   15bbe:	0e 94 b1 af 	call	0x15f62	; 0x15f62 <strncasecmp_P>
   15bc2:	89 2b       	or	r24, r25
   15bc4:	e9 f0       	breq	.+58     	; 0x15c00 <strtod+0x110>
   15bc6:	f8 01       	movw	r30, r16
   15bc8:	10 e0       	ldi	r17, 0x00	; 0
   15bca:	00 e0       	ldi	r16, 0x00	; 0
   15bcc:	20 e0       	ldi	r18, 0x00	; 0
   15bce:	30 e0       	ldi	r19, 0x00	; 0
   15bd0:	a9 01       	movw	r20, r18
   15bd2:	5f 01       	movw	r10, r30
   15bd4:	b0 ed       	ldi	r27, 0xD0	; 208
   15bd6:	8b 2e       	mov	r8, r27
   15bd8:	8d 0e       	add	r8, r29
   15bda:	89 e0       	ldi	r24, 0x09	; 9
   15bdc:	88 15       	cp	r24, r8
   15bde:	c8 f1       	brcs	.+114    	; 0x15c52 <strtod+0x162>
   15be0:	9c 2e       	mov	r9, r28
   15be2:	68 94       	set
   15be4:	91 f8       	bld	r9, 1
   15be6:	8c 2f       	mov	r24, r28
   15be8:	88 70       	andi	r24, 0x08	; 8
   15bea:	c2 ff       	sbrs	r28, 2
   15bec:	16 c0       	rjmp	.+44     	; 0x15c1a <strtod+0x12a>
   15bee:	81 11       	cpse	r24, r1
   15bf0:	02 c0       	rjmp	.+4      	; 0x15bf6 <strtod+0x106>
   15bf2:	0f 5f       	subi	r16, 0xFF	; 255
   15bf4:	1f 4f       	sbci	r17, 0xFF	; 255
   15bf6:	31 96       	adiw	r30, 0x01	; 1
   15bf8:	d5 01       	movw	r26, r10
   15bfa:	dc 91       	ld	r29, X
   15bfc:	c9 2d       	mov	r28, r9
   15bfe:	e9 cf       	rjmp	.-46     	; 0x15bd2 <strtod+0xe2>
   15c00:	e1 14       	cp	r14, r1
   15c02:	f1 04       	cpc	r15, r1
   15c04:	29 f0       	breq	.+10     	; 0x15c10 <strtod+0x120>
   15c06:	0e 5f       	subi	r16, 0xFE	; 254
   15c08:	1f 4f       	sbci	r17, 0xFF	; 255
   15c0a:	f7 01       	movw	r30, r14
   15c0c:	11 83       	std	Z+1, r17	; 0x01
   15c0e:	00 83       	st	Z, r16
   15c10:	60 e0       	ldi	r22, 0x00	; 0
   15c12:	70 e0       	ldi	r23, 0x00	; 0
   15c14:	80 ec       	ldi	r24, 0xC0	; 192
   15c16:	9f e7       	ldi	r25, 0x7F	; 127
   15c18:	bc c0       	rjmp	.+376    	; 0x15d92 <strtod+0x2a2>
   15c1a:	88 23       	and	r24, r24
   15c1c:	11 f0       	breq	.+4      	; 0x15c22 <strtod+0x132>
   15c1e:	01 50       	subi	r16, 0x01	; 1
   15c20:	11 09       	sbc	r17, r1
   15c22:	a5 e0       	ldi	r26, 0x05	; 5
   15c24:	b0 e0       	ldi	r27, 0x00	; 0
   15c26:	0e 94 37 b2 	call	0x1646e	; 0x1646e <__muluhisi3>
   15c2a:	9b 01       	movw	r18, r22
   15c2c:	ac 01       	movw	r20, r24
   15c2e:	22 0f       	add	r18, r18
   15c30:	33 1f       	adc	r19, r19
   15c32:	44 1f       	adc	r20, r20
   15c34:	55 1f       	adc	r21, r21
   15c36:	28 0d       	add	r18, r8
   15c38:	31 1d       	adc	r19, r1
   15c3a:	41 1d       	adc	r20, r1
   15c3c:	51 1d       	adc	r21, r1
   15c3e:	28 39       	cpi	r18, 0x98	; 152
   15c40:	99 e9       	ldi	r25, 0x99	; 153
   15c42:	39 07       	cpc	r19, r25
   15c44:	49 07       	cpc	r20, r25
   15c46:	99 e1       	ldi	r25, 0x19	; 25
   15c48:	59 07       	cpc	r21, r25
   15c4a:	a8 f2       	brcs	.-86     	; 0x15bf6 <strtod+0x106>
   15c4c:	c6 60       	ori	r28, 0x06	; 6
   15c4e:	9c 2e       	mov	r9, r28
   15c50:	d2 cf       	rjmp	.-92     	; 0x15bf6 <strtod+0x106>
   15c52:	ae ef       	ldi	r26, 0xFE	; 254
   15c54:	8a 12       	cpse	r8, r26
   15c56:	06 c0       	rjmp	.+12     	; 0x15c64 <strtod+0x174>
   15c58:	c3 fd       	sbrc	r28, 3
   15c5a:	3c c0       	rjmp	.+120    	; 0x15cd4 <strtod+0x1e4>
   15c5c:	9c 2e       	mov	r9, r28
   15c5e:	68 94       	set
   15c60:	93 f8       	bld	r9, 3
   15c62:	c9 cf       	rjmp	.-110    	; 0x15bf6 <strtod+0x106>
   15c64:	df 7d       	andi	r29, 0xDF	; 223
   15c66:	d5 34       	cpi	r29, 0x45	; 69
   15c68:	a9 f5       	brne	.+106    	; 0x15cd4 <strtod+0x1e4>
   15c6a:	80 81       	ld	r24, Z
   15c6c:	8d 32       	cpi	r24, 0x2D	; 45
   15c6e:	39 f4       	brne	.+14     	; 0x15c7e <strtod+0x18e>
   15c70:	c0 61       	ori	r28, 0x10	; 16
   15c72:	df 01       	movw	r26, r30
   15c74:	12 96       	adiw	r26, 0x02	; 2
   15c76:	81 81       	ldd	r24, Z+1	; 0x01
   15c78:	62 e0       	ldi	r22, 0x02	; 2
   15c7a:	70 e0       	ldi	r23, 0x00	; 0
   15c7c:	06 c0       	rjmp	.+12     	; 0x15c8a <strtod+0x19a>
   15c7e:	df 01       	movw	r26, r30
   15c80:	8b 32       	cpi	r24, 0x2B	; 43
   15c82:	c1 f3       	breq	.-16     	; 0x15c74 <strtod+0x184>
   15c84:	11 96       	adiw	r26, 0x01	; 1
   15c86:	61 e0       	ldi	r22, 0x01	; 1
   15c88:	70 e0       	ldi	r23, 0x00	; 0
   15c8a:	80 53       	subi	r24, 0x30	; 48
   15c8c:	5d 01       	movw	r10, r26
   15c8e:	a6 1a       	sub	r10, r22
   15c90:	b7 0a       	sbc	r11, r23
   15c92:	8a 30       	cpi	r24, 0x0A	; 10
   15c94:	f8 f4       	brcc	.+62     	; 0x15cd4 <strtod+0x1e4>
   15c96:	e0 e8       	ldi	r30, 0x80	; 128
   15c98:	ce 16       	cp	r12, r30
   15c9a:	ec e0       	ldi	r30, 0x0C	; 12
   15c9c:	de 06       	cpc	r13, r30
   15c9e:	5c f4       	brge	.+22     	; 0x15cb6 <strtod+0x1c6>
   15ca0:	b6 01       	movw	r22, r12
   15ca2:	66 0f       	add	r22, r22
   15ca4:	77 1f       	adc	r23, r23
   15ca6:	66 0f       	add	r22, r22
   15ca8:	77 1f       	adc	r23, r23
   15caa:	c6 0e       	add	r12, r22
   15cac:	d7 1e       	adc	r13, r23
   15cae:	cc 0c       	add	r12, r12
   15cb0:	dd 1c       	adc	r13, r13
   15cb2:	c8 0e       	add	r12, r24
   15cb4:	d1 1c       	adc	r13, r1
   15cb6:	5d 01       	movw	r10, r26
   15cb8:	ff ef       	ldi	r31, 0xFF	; 255
   15cba:	af 1a       	sub	r10, r31
   15cbc:	bf 0a       	sbc	r11, r31
   15cbe:	8c 91       	ld	r24, X
   15cc0:	80 53       	subi	r24, 0x30	; 48
   15cc2:	8a 30       	cpi	r24, 0x0A	; 10
   15cc4:	a8 f1       	brcs	.+106    	; 0x15d30 <strtod+0x240>
   15cc6:	c4 ff       	sbrs	r28, 4
   15cc8:	03 c0       	rjmp	.+6      	; 0x15cd0 <strtod+0x1e0>
   15cca:	d1 94       	neg	r13
   15ccc:	c1 94       	neg	r12
   15cce:	d1 08       	sbc	r13, r1
   15cd0:	0c 0d       	add	r16, r12
   15cd2:	1d 1d       	adc	r17, r13
   15cd4:	c1 ff       	sbrs	r28, 1
   15cd6:	09 c0       	rjmp	.+18     	; 0x15cea <strtod+0x1fa>
   15cd8:	e1 14       	cp	r14, r1
   15cda:	f1 04       	cpc	r15, r1
   15cdc:	31 f0       	breq	.+12     	; 0x15cea <strtod+0x1fa>
   15cde:	81 e0       	ldi	r24, 0x01	; 1
   15ce0:	a8 1a       	sub	r10, r24
   15ce2:	b1 08       	sbc	r11, r1
   15ce4:	d7 01       	movw	r26, r14
   15ce6:	ad 92       	st	X+, r10
   15ce8:	bc 92       	st	X, r11
   15cea:	ca 01       	movw	r24, r20
   15cec:	b9 01       	movw	r22, r18
   15cee:	0e 94 89 b0 	call	0x16112	; 0x16112 <__floatunsisf>
   15cf2:	c3 70       	andi	r28, 0x03	; 3
   15cf4:	c3 30       	cpi	r28, 0x03	; 3
   15cf6:	09 f4       	brne	.+2      	; 0x15cfa <strtod+0x20a>
   15cf8:	90 58       	subi	r25, 0x80	; 128
   15cfa:	4b 01       	movw	r8, r22
   15cfc:	5c 01       	movw	r10, r24
   15cfe:	20 e0       	ldi	r18, 0x00	; 0
   15d00:	30 e0       	ldi	r19, 0x00	; 0
   15d02:	a9 01       	movw	r20, r18
   15d04:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
   15d08:	88 23       	and	r24, r24
   15d0a:	09 f4       	brne	.+2      	; 0x15d0e <strtod+0x21e>
   15d0c:	40 c0       	rjmp	.+128    	; 0x15d8e <strtod+0x29e>
   15d0e:	cb e5       	ldi	r28, 0x5B	; 91
   15d10:	d3 e0       	ldi	r29, 0x03	; 3
   15d12:	17 ff       	sbrs	r17, 7
   15d14:	05 c0       	rjmp	.+10     	; 0x15d20 <strtod+0x230>
   15d16:	11 95       	neg	r17
   15d18:	01 95       	neg	r16
   15d1a:	11 09       	sbc	r17, r1
   15d1c:	c3 e4       	ldi	r28, 0x43	; 67
   15d1e:	d3 e0       	ldi	r29, 0x03	; 3
   15d20:	6e 01       	movw	r12, r28
   15d22:	b8 e1       	ldi	r27, 0x18	; 24
   15d24:	cb 1a       	sub	r12, r27
   15d26:	d1 08       	sbc	r13, r1
   15d28:	80 e2       	ldi	r24, 0x20	; 32
   15d2a:	e8 2e       	mov	r14, r24
   15d2c:	f1 2c       	mov	r15, r1
   15d2e:	0f c0       	rjmp	.+30     	; 0x15d4e <strtod+0x25e>
   15d30:	d5 01       	movw	r26, r10
   15d32:	b1 cf       	rjmp	.-158    	; 0x15c96 <strtod+0x1a6>
   15d34:	fe 01       	movw	r30, r28
   15d36:	25 91       	lpm	r18, Z+
   15d38:	35 91       	lpm	r19, Z+
   15d3a:	45 91       	lpm	r20, Z+
   15d3c:	54 91       	lpm	r21, Z
   15d3e:	0e 19       	sub	r16, r14
   15d40:	1f 09       	sbc	r17, r15
   15d42:	c5 01       	movw	r24, r10
   15d44:	b4 01       	movw	r22, r8
   15d46:	0e 94 ea b0 	call	0x161d4	; 0x161d4 <__mulsf3>
   15d4a:	4b 01       	movw	r8, r22
   15d4c:	5c 01       	movw	r10, r24
   15d4e:	d5 01       	movw	r26, r10
   15d50:	c4 01       	movw	r24, r8
   15d52:	0e 15       	cp	r16, r14
   15d54:	1f 05       	cpc	r17, r15
   15d56:	74 f7       	brge	.-36     	; 0x15d34 <strtod+0x244>
   15d58:	24 97       	sbiw	r28, 0x04	; 4
   15d5a:	f5 94       	asr	r15
   15d5c:	e7 94       	ror	r14
   15d5e:	cc 16       	cp	r12, r28
   15d60:	dd 06       	cpc	r13, r29
   15d62:	a9 f7       	brne	.-22     	; 0x15d4e <strtod+0x25e>
   15d64:	8a 2f       	mov	r24, r26
   15d66:	88 0f       	add	r24, r24
   15d68:	8b 2f       	mov	r24, r27
   15d6a:	88 1f       	adc	r24, r24
   15d6c:	8f 3f       	cpi	r24, 0xFF	; 255
   15d6e:	49 f0       	breq	.+18     	; 0x15d82 <strtod+0x292>
   15d70:	20 e0       	ldi	r18, 0x00	; 0
   15d72:	30 e0       	ldi	r19, 0x00	; 0
   15d74:	a9 01       	movw	r20, r18
   15d76:	c5 01       	movw	r24, r10
   15d78:	b4 01       	movw	r22, r8
   15d7a:	0e 94 84 b0 	call	0x16108	; 0x16108 <__cmpsf2>
   15d7e:	81 11       	cpse	r24, r1
   15d80:	06 c0       	rjmp	.+12     	; 0x15d8e <strtod+0x29e>
   15d82:	82 e2       	ldi	r24, 0x22	; 34
   15d84:	90 e0       	ldi	r25, 0x00	; 0
   15d86:	90 93 58 13 	sts	0x1358, r25	; 0x801358 <errno+0x1>
   15d8a:	80 93 57 13 	sts	0x1357, r24	; 0x801357 <errno>
   15d8e:	c5 01       	movw	r24, r10
   15d90:	b4 01       	movw	r22, r8
   15d92:	df 91       	pop	r29
   15d94:	cf 91       	pop	r28
   15d96:	1f 91       	pop	r17
   15d98:	0f 91       	pop	r16
   15d9a:	ff 90       	pop	r15
   15d9c:	ef 90       	pop	r14
   15d9e:	df 90       	pop	r13
   15da0:	cf 90       	pop	r12
   15da2:	bf 90       	pop	r11
   15da4:	af 90       	pop	r10
   15da6:	9f 90       	pop	r9
   15da8:	8f 90       	pop	r8
   15daa:	08 95       	ret

00015dac <__ftoa_engine>:
__ftoa_engine():
   15dac:	28 30       	cpi	r18, 0x08	; 8
   15dae:	08 f0       	brcs	.+2      	; 0x15db2 <__ftoa_engine+0x6>
   15db0:	27 e0       	ldi	r18, 0x07	; 7
   15db2:	33 27       	eor	r19, r19
   15db4:	da 01       	movw	r26, r20
   15db6:	99 0f       	add	r25, r25
   15db8:	31 1d       	adc	r19, r1
   15dba:	87 fd       	sbrc	r24, 7
   15dbc:	91 60       	ori	r25, 0x01	; 1
   15dbe:	00 96       	adiw	r24, 0x00	; 0
   15dc0:	61 05       	cpc	r22, r1
   15dc2:	71 05       	cpc	r23, r1
   15dc4:	39 f4       	brne	.+14     	; 0x15dd4 <__ftoa_engine+0x28>
   15dc6:	32 60       	ori	r19, 0x02	; 2
   15dc8:	2e 5f       	subi	r18, 0xFE	; 254
   15dca:	3d 93       	st	X+, r19
   15dcc:	30 e3       	ldi	r19, 0x30	; 48
   15dce:	2a 95       	dec	r18
   15dd0:	e1 f7       	brne	.-8      	; 0x15dca <__ftoa_engine+0x1e>
   15dd2:	08 95       	ret
   15dd4:	9f 3f       	cpi	r25, 0xFF	; 255
   15dd6:	30 f0       	brcs	.+12     	; 0x15de4 <__ftoa_engine+0x38>
   15dd8:	80 38       	cpi	r24, 0x80	; 128
   15dda:	71 05       	cpc	r23, r1
   15ddc:	61 05       	cpc	r22, r1
   15dde:	09 f0       	breq	.+2      	; 0x15de2 <__ftoa_engine+0x36>
   15de0:	3c 5f       	subi	r19, 0xFC	; 252
   15de2:	3c 5f       	subi	r19, 0xFC	; 252
   15de4:	3d 93       	st	X+, r19
   15de6:	91 30       	cpi	r25, 0x01	; 1
   15de8:	08 f0       	brcs	.+2      	; 0x15dec <__ftoa_engine+0x40>
   15dea:	80 68       	ori	r24, 0x80	; 128
   15dec:	91 1d       	adc	r25, r1
   15dee:	df 93       	push	r29
   15df0:	cf 93       	push	r28
   15df2:	1f 93       	push	r17
   15df4:	0f 93       	push	r16
   15df6:	ff 92       	push	r15
   15df8:	ef 92       	push	r14
   15dfa:	19 2f       	mov	r17, r25
   15dfc:	98 7f       	andi	r25, 0xF8	; 248
   15dfe:	96 95       	lsr	r25
   15e00:	e9 2f       	mov	r30, r25
   15e02:	96 95       	lsr	r25
   15e04:	96 95       	lsr	r25
   15e06:	e9 0f       	add	r30, r25
   15e08:	ff 27       	eor	r31, r31
   15e0a:	e7 54       	subi	r30, 0x47	; 71
   15e0c:	fc 4f       	sbci	r31, 0xFC	; 252
   15e0e:	99 27       	eor	r25, r25
   15e10:	33 27       	eor	r19, r19
   15e12:	ee 24       	eor	r14, r14
   15e14:	ff 24       	eor	r15, r15
   15e16:	a7 01       	movw	r20, r14
   15e18:	e7 01       	movw	r28, r14
   15e1a:	05 90       	lpm	r0, Z+
   15e1c:	08 94       	sec
   15e1e:	07 94       	ror	r0
   15e20:	28 f4       	brcc	.+10     	; 0x15e2c <__ftoa_engine+0x80>
   15e22:	36 0f       	add	r19, r22
   15e24:	e7 1e       	adc	r14, r23
   15e26:	f8 1e       	adc	r15, r24
   15e28:	49 1f       	adc	r20, r25
   15e2a:	51 1d       	adc	r21, r1
   15e2c:	66 0f       	add	r22, r22
   15e2e:	77 1f       	adc	r23, r23
   15e30:	88 1f       	adc	r24, r24
   15e32:	99 1f       	adc	r25, r25
   15e34:	06 94       	lsr	r0
   15e36:	a1 f7       	brne	.-24     	; 0x15e20 <__ftoa_engine+0x74>
   15e38:	05 90       	lpm	r0, Z+
   15e3a:	07 94       	ror	r0
   15e3c:	28 f4       	brcc	.+10     	; 0x15e48 <__ftoa_engine+0x9c>
   15e3e:	e7 0e       	add	r14, r23
   15e40:	f8 1e       	adc	r15, r24
   15e42:	49 1f       	adc	r20, r25
   15e44:	56 1f       	adc	r21, r22
   15e46:	c1 1d       	adc	r28, r1
   15e48:	77 0f       	add	r23, r23
   15e4a:	88 1f       	adc	r24, r24
   15e4c:	99 1f       	adc	r25, r25
   15e4e:	66 1f       	adc	r22, r22
   15e50:	06 94       	lsr	r0
   15e52:	a1 f7       	brne	.-24     	; 0x15e3c <__ftoa_engine+0x90>
   15e54:	05 90       	lpm	r0, Z+
   15e56:	07 94       	ror	r0
   15e58:	28 f4       	brcc	.+10     	; 0x15e64 <__ftoa_engine+0xb8>
   15e5a:	f8 0e       	add	r15, r24
   15e5c:	49 1f       	adc	r20, r25
   15e5e:	56 1f       	adc	r21, r22
   15e60:	c7 1f       	adc	r28, r23
   15e62:	d1 1d       	adc	r29, r1
   15e64:	88 0f       	add	r24, r24
   15e66:	99 1f       	adc	r25, r25
   15e68:	66 1f       	adc	r22, r22
   15e6a:	77 1f       	adc	r23, r23
   15e6c:	06 94       	lsr	r0
   15e6e:	a1 f7       	brne	.-24     	; 0x15e58 <__ftoa_engine+0xac>
   15e70:	05 90       	lpm	r0, Z+
   15e72:	07 94       	ror	r0
   15e74:	20 f4       	brcc	.+8      	; 0x15e7e <__ftoa_engine+0xd2>
   15e76:	49 0f       	add	r20, r25
   15e78:	56 1f       	adc	r21, r22
   15e7a:	c7 1f       	adc	r28, r23
   15e7c:	d8 1f       	adc	r29, r24
   15e7e:	99 0f       	add	r25, r25
   15e80:	66 1f       	adc	r22, r22
   15e82:	77 1f       	adc	r23, r23
   15e84:	88 1f       	adc	r24, r24
   15e86:	06 94       	lsr	r0
   15e88:	a9 f7       	brne	.-22     	; 0x15e74 <__ftoa_engine+0xc8>
   15e8a:	84 91       	lpm	r24, Z
   15e8c:	10 95       	com	r17
   15e8e:	17 70       	andi	r17, 0x07	; 7
   15e90:	41 f0       	breq	.+16     	; 0x15ea2 <__ftoa_engine+0xf6>
   15e92:	d6 95       	lsr	r29
   15e94:	c7 95       	ror	r28
   15e96:	57 95       	ror	r21
   15e98:	47 95       	ror	r20
   15e9a:	f7 94       	ror	r15
   15e9c:	e7 94       	ror	r14
   15e9e:	1a 95       	dec	r17
   15ea0:	c1 f7       	brne	.-16     	; 0x15e92 <__ftoa_engine+0xe6>
   15ea2:	ef e5       	ldi	r30, 0x5F	; 95
   15ea4:	f3 e0       	ldi	r31, 0x03	; 3
   15ea6:	68 94       	set
   15ea8:	15 90       	lpm	r1, Z+
   15eaa:	15 91       	lpm	r17, Z+
   15eac:	35 91       	lpm	r19, Z+
   15eae:	65 91       	lpm	r22, Z+
   15eb0:	95 91       	lpm	r25, Z+
   15eb2:	05 90       	lpm	r0, Z+
   15eb4:	7f e2       	ldi	r23, 0x2F	; 47
   15eb6:	73 95       	inc	r23
   15eb8:	e1 18       	sub	r14, r1
   15eba:	f1 0a       	sbc	r15, r17
   15ebc:	43 0b       	sbc	r20, r19
   15ebe:	56 0b       	sbc	r21, r22
   15ec0:	c9 0b       	sbc	r28, r25
   15ec2:	d0 09       	sbc	r29, r0
   15ec4:	c0 f7       	brcc	.-16     	; 0x15eb6 <__ftoa_engine+0x10a>
   15ec6:	e1 0c       	add	r14, r1
   15ec8:	f1 1e       	adc	r15, r17
   15eca:	43 1f       	adc	r20, r19
   15ecc:	56 1f       	adc	r21, r22
   15ece:	c9 1f       	adc	r28, r25
   15ed0:	d0 1d       	adc	r29, r0
   15ed2:	7e f4       	brtc	.+30     	; 0x15ef2 <__ftoa_engine+0x146>
   15ed4:	70 33       	cpi	r23, 0x30	; 48
   15ed6:	11 f4       	brne	.+4      	; 0x15edc <__ftoa_engine+0x130>
   15ed8:	8a 95       	dec	r24
   15eda:	e6 cf       	rjmp	.-52     	; 0x15ea8 <__ftoa_engine+0xfc>
   15edc:	e8 94       	clt
   15ede:	01 50       	subi	r16, 0x01	; 1
   15ee0:	30 f0       	brcs	.+12     	; 0x15eee <__ftoa_engine+0x142>
   15ee2:	08 0f       	add	r16, r24
   15ee4:	0a f4       	brpl	.+2      	; 0x15ee8 <__ftoa_engine+0x13c>
   15ee6:	00 27       	eor	r16, r16
   15ee8:	02 17       	cp	r16, r18
   15eea:	08 f4       	brcc	.+2      	; 0x15eee <__ftoa_engine+0x142>
   15eec:	20 2f       	mov	r18, r16
   15eee:	23 95       	inc	r18
   15ef0:	02 2f       	mov	r16, r18
   15ef2:	7a 33       	cpi	r23, 0x3A	; 58
   15ef4:	28 f0       	brcs	.+10     	; 0x15f00 <__ftoa_engine+0x154>
   15ef6:	79 e3       	ldi	r23, 0x39	; 57
   15ef8:	7d 93       	st	X+, r23
   15efa:	2a 95       	dec	r18
   15efc:	e9 f7       	brne	.-6      	; 0x15ef8 <__ftoa_engine+0x14c>
   15efe:	10 c0       	rjmp	.+32     	; 0x15f20 <__ftoa_engine+0x174>
   15f00:	7d 93       	st	X+, r23
   15f02:	2a 95       	dec	r18
   15f04:	89 f6       	brne	.-94     	; 0x15ea8 <__ftoa_engine+0xfc>
   15f06:	06 94       	lsr	r0
   15f08:	97 95       	ror	r25
   15f0a:	67 95       	ror	r22
   15f0c:	37 95       	ror	r19
   15f0e:	17 95       	ror	r17
   15f10:	17 94       	ror	r1
   15f12:	e1 18       	sub	r14, r1
   15f14:	f1 0a       	sbc	r15, r17
   15f16:	43 0b       	sbc	r20, r19
   15f18:	56 0b       	sbc	r21, r22
   15f1a:	c9 0b       	sbc	r28, r25
   15f1c:	d0 09       	sbc	r29, r0
   15f1e:	98 f0       	brcs	.+38     	; 0x15f46 <__ftoa_engine+0x19a>
   15f20:	23 95       	inc	r18
   15f22:	7e 91       	ld	r23, -X
   15f24:	73 95       	inc	r23
   15f26:	7a 33       	cpi	r23, 0x3A	; 58
   15f28:	08 f0       	brcs	.+2      	; 0x15f2c <__ftoa_engine+0x180>
   15f2a:	70 e3       	ldi	r23, 0x30	; 48
   15f2c:	7c 93       	st	X, r23
   15f2e:	20 13       	cpse	r18, r16
   15f30:	b8 f7       	brcc	.-18     	; 0x15f20 <__ftoa_engine+0x174>
   15f32:	7e 91       	ld	r23, -X
   15f34:	70 61       	ori	r23, 0x10	; 16
   15f36:	7d 93       	st	X+, r23
   15f38:	30 f0       	brcs	.+12     	; 0x15f46 <__ftoa_engine+0x19a>
   15f3a:	83 95       	inc	r24
   15f3c:	71 e3       	ldi	r23, 0x31	; 49
   15f3e:	7d 93       	st	X+, r23
   15f40:	70 e3       	ldi	r23, 0x30	; 48
   15f42:	2a 95       	dec	r18
   15f44:	e1 f7       	brne	.-8      	; 0x15f3e <__ftoa_engine+0x192>
   15f46:	11 24       	eor	r1, r1
   15f48:	ef 90       	pop	r14
   15f4a:	ff 90       	pop	r15
   15f4c:	0f 91       	pop	r16
   15f4e:	1f 91       	pop	r17
   15f50:	cf 91       	pop	r28
   15f52:	df 91       	pop	r29
   15f54:	99 27       	eor	r25, r25
   15f56:	87 fd       	sbrc	r24, 7
   15f58:	90 95       	com	r25
   15f5a:	08 95       	ret

00015f5c <__ctype_isfalse>:
__ctype_isfalse():
   15f5c:	99 27       	eor	r25, r25
   15f5e:	88 27       	eor	r24, r24

00015f60 <__ctype_istrue>:
__ctype_istrue():
   15f60:	08 95       	ret

00015f62 <strncasecmp_P>:
strncasecmp_P():
   15f62:	fb 01       	movw	r30, r22
   15f64:	dc 01       	movw	r26, r24
   15f66:	41 50       	subi	r20, 0x01	; 1
   15f68:	50 40       	sbci	r21, 0x00	; 0
   15f6a:	88 f0       	brcs	.+34     	; 0x15f8e <strncasecmp_P+0x2c>
   15f6c:	8d 91       	ld	r24, X+
   15f6e:	81 34       	cpi	r24, 0x41	; 65
   15f70:	1c f0       	brlt	.+6      	; 0x15f78 <strncasecmp_P+0x16>
   15f72:	8b 35       	cpi	r24, 0x5B	; 91
   15f74:	0c f4       	brge	.+2      	; 0x15f78 <strncasecmp_P+0x16>
   15f76:	80 5e       	subi	r24, 0xE0	; 224
   15f78:	65 91       	lpm	r22, Z+
   15f7a:	61 34       	cpi	r22, 0x41	; 65
   15f7c:	1c f0       	brlt	.+6      	; 0x15f84 <strncasecmp_P+0x22>
   15f7e:	6b 35       	cpi	r22, 0x5B	; 91
   15f80:	0c f4       	brge	.+2      	; 0x15f84 <strncasecmp_P+0x22>
   15f82:	60 5e       	subi	r22, 0xE0	; 224
   15f84:	86 1b       	sub	r24, r22
   15f86:	61 11       	cpse	r22, r1
   15f88:	71 f3       	breq	.-36     	; 0x15f66 <strncasecmp_P+0x4>
   15f8a:	99 0b       	sbc	r25, r25
   15f8c:	08 95       	ret
   15f8e:	88 1b       	sub	r24, r24
   15f90:	fc cf       	rjmp	.-8      	; 0x15f8a <strncasecmp_P+0x28>

00015f92 <strnlen_P>:
strnlen_P():
   15f92:	fc 01       	movw	r30, r24
   15f94:	05 90       	lpm	r0, Z+
   15f96:	61 50       	subi	r22, 0x01	; 1
   15f98:	70 40       	sbci	r23, 0x00	; 0
   15f9a:	01 10       	cpse	r0, r1
   15f9c:	d8 f7       	brcc	.-10     	; 0x15f94 <strnlen_P+0x2>
   15f9e:	80 95       	com	r24
   15fa0:	90 95       	com	r25
   15fa2:	8e 0f       	add	r24, r30
   15fa4:	9f 1f       	adc	r25, r31
   15fa6:	08 95       	ret

00015fa8 <memset>:
memset():
   15fa8:	dc 01       	movw	r26, r24
   15faa:	01 c0       	rjmp	.+2      	; 0x15fae <memset+0x6>
   15fac:	6d 93       	st	X+, r22
   15fae:	41 50       	subi	r20, 0x01	; 1
   15fb0:	50 40       	sbci	r21, 0x00	; 0
   15fb2:	e0 f7       	brcc	.-8      	; 0x15fac <memset+0x4>
   15fb4:	08 95       	ret

00015fb6 <strnlen>:
strnlen():
   15fb6:	fc 01       	movw	r30, r24
   15fb8:	61 50       	subi	r22, 0x01	; 1
   15fba:	70 40       	sbci	r23, 0x00	; 0
   15fbc:	01 90       	ld	r0, Z+
   15fbe:	01 10       	cpse	r0, r1
   15fc0:	d8 f7       	brcc	.-10     	; 0x15fb8 <strnlen+0x2>
   15fc2:	80 95       	com	r24
   15fc4:	90 95       	com	r25
   15fc6:	8e 0f       	add	r24, r30
   15fc8:	9f 1f       	adc	r25, r31
   15fca:	08 95       	ret

00015fcc <strrev>:
strrev():
   15fcc:	dc 01       	movw	r26, r24
   15fce:	fc 01       	movw	r30, r24
   15fd0:	67 2f       	mov	r22, r23
   15fd2:	71 91       	ld	r23, Z+
   15fd4:	77 23       	and	r23, r23
   15fd6:	e1 f7       	brne	.-8      	; 0x15fd0 <strrev+0x4>
   15fd8:	32 97       	sbiw	r30, 0x02	; 2
   15fda:	04 c0       	rjmp	.+8      	; 0x15fe4 <strrev+0x18>
   15fdc:	7c 91       	ld	r23, X
   15fde:	6d 93       	st	X+, r22
   15fe0:	70 83       	st	Z, r23
   15fe2:	62 91       	ld	r22, -Z
   15fe4:	ae 17       	cp	r26, r30
   15fe6:	bf 07       	cpc	r27, r31
   15fe8:	c8 f3       	brcs	.-14     	; 0x15fdc <strrev+0x10>
   15fea:	08 95       	ret

00015fec <fputc>:
fputc():
   15fec:	0f 93       	push	r16
   15fee:	1f 93       	push	r17
   15ff0:	cf 93       	push	r28
   15ff2:	df 93       	push	r29
   15ff4:	18 2f       	mov	r17, r24
   15ff6:	09 2f       	mov	r16, r25
   15ff8:	eb 01       	movw	r28, r22
   15ffa:	8b 81       	ldd	r24, Y+3	; 0x03
   15ffc:	81 fd       	sbrc	r24, 1
   15ffe:	09 c0       	rjmp	.+18     	; 0x16012 <fputc+0x26>
   16000:	1f ef       	ldi	r17, 0xFF	; 255
   16002:	0f ef       	ldi	r16, 0xFF	; 255
   16004:	81 2f       	mov	r24, r17
   16006:	90 2f       	mov	r25, r16
   16008:	df 91       	pop	r29
   1600a:	cf 91       	pop	r28
   1600c:	1f 91       	pop	r17
   1600e:	0f 91       	pop	r16
   16010:	08 95       	ret
   16012:	82 ff       	sbrs	r24, 2
   16014:	14 c0       	rjmp	.+40     	; 0x1603e <fputc+0x52>
   16016:	2e 81       	ldd	r18, Y+6	; 0x06
   16018:	3f 81       	ldd	r19, Y+7	; 0x07
   1601a:	8c 81       	ldd	r24, Y+4	; 0x04
   1601c:	9d 81       	ldd	r25, Y+5	; 0x05
   1601e:	28 17       	cp	r18, r24
   16020:	39 07       	cpc	r19, r25
   16022:	3c f4       	brge	.+14     	; 0x16032 <fputc+0x46>
   16024:	e8 81       	ld	r30, Y
   16026:	f9 81       	ldd	r31, Y+1	; 0x01
   16028:	cf 01       	movw	r24, r30
   1602a:	01 96       	adiw	r24, 0x01	; 1
   1602c:	99 83       	std	Y+1, r25	; 0x01
   1602e:	88 83       	st	Y, r24
   16030:	10 83       	st	Z, r17
   16032:	8e 81       	ldd	r24, Y+6	; 0x06
   16034:	9f 81       	ldd	r25, Y+7	; 0x07
   16036:	01 96       	adiw	r24, 0x01	; 1
   16038:	9f 83       	std	Y+7, r25	; 0x07
   1603a:	8e 83       	std	Y+6, r24	; 0x06
   1603c:	e3 cf       	rjmp	.-58     	; 0x16004 <fputc+0x18>
   1603e:	e8 85       	ldd	r30, Y+8	; 0x08
   16040:	f9 85       	ldd	r31, Y+9	; 0x09
   16042:	81 2f       	mov	r24, r17
   16044:	19 95       	eicall
   16046:	89 2b       	or	r24, r25
   16048:	a1 f3       	breq	.-24     	; 0x16032 <fputc+0x46>
   1604a:	da cf       	rjmp	.-76     	; 0x16000 <fputc+0x14>

0001604c <__ultoa_invert>:
__ultoa_invert():
   1604c:	fa 01       	movw	r30, r20
   1604e:	aa 27       	eor	r26, r26
   16050:	28 30       	cpi	r18, 0x08	; 8
   16052:	51 f1       	breq	.+84     	; 0x160a8 <__ultoa_invert+0x5c>
   16054:	20 31       	cpi	r18, 0x10	; 16
   16056:	81 f1       	breq	.+96     	; 0x160b8 <__ultoa_invert+0x6c>
   16058:	e8 94       	clt
   1605a:	6f 93       	push	r22
   1605c:	6e 7f       	andi	r22, 0xFE	; 254
   1605e:	6e 5f       	subi	r22, 0xFE	; 254
   16060:	7f 4f       	sbci	r23, 0xFF	; 255
   16062:	8f 4f       	sbci	r24, 0xFF	; 255
   16064:	9f 4f       	sbci	r25, 0xFF	; 255
   16066:	af 4f       	sbci	r26, 0xFF	; 255
   16068:	b1 e0       	ldi	r27, 0x01	; 1
   1606a:	3e d0       	rcall	.+124    	; 0x160e8 <__ultoa_invert+0x9c>
   1606c:	b4 e0       	ldi	r27, 0x04	; 4
   1606e:	3c d0       	rcall	.+120    	; 0x160e8 <__ultoa_invert+0x9c>
   16070:	67 0f       	add	r22, r23
   16072:	78 1f       	adc	r23, r24
   16074:	89 1f       	adc	r24, r25
   16076:	9a 1f       	adc	r25, r26
   16078:	a1 1d       	adc	r26, r1
   1607a:	68 0f       	add	r22, r24
   1607c:	79 1f       	adc	r23, r25
   1607e:	8a 1f       	adc	r24, r26
   16080:	91 1d       	adc	r25, r1
   16082:	a1 1d       	adc	r26, r1
   16084:	6a 0f       	add	r22, r26
   16086:	71 1d       	adc	r23, r1
   16088:	81 1d       	adc	r24, r1
   1608a:	91 1d       	adc	r25, r1
   1608c:	a1 1d       	adc	r26, r1
   1608e:	20 d0       	rcall	.+64     	; 0x160d0 <__ultoa_invert+0x84>
   16090:	09 f4       	brne	.+2      	; 0x16094 <__ultoa_invert+0x48>
   16092:	68 94       	set
   16094:	3f 91       	pop	r19
   16096:	2a e0       	ldi	r18, 0x0A	; 10
   16098:	26 9f       	mul	r18, r22
   1609a:	11 24       	eor	r1, r1
   1609c:	30 19       	sub	r19, r0
   1609e:	30 5d       	subi	r19, 0xD0	; 208
   160a0:	31 93       	st	Z+, r19
   160a2:	de f6       	brtc	.-74     	; 0x1605a <__ultoa_invert+0xe>
   160a4:	cf 01       	movw	r24, r30
   160a6:	08 95       	ret
   160a8:	46 2f       	mov	r20, r22
   160aa:	47 70       	andi	r20, 0x07	; 7
   160ac:	40 5d       	subi	r20, 0xD0	; 208
   160ae:	41 93       	st	Z+, r20
   160b0:	b3 e0       	ldi	r27, 0x03	; 3
   160b2:	0f d0       	rcall	.+30     	; 0x160d2 <__ultoa_invert+0x86>
   160b4:	c9 f7       	brne	.-14     	; 0x160a8 <__ultoa_invert+0x5c>
   160b6:	f6 cf       	rjmp	.-20     	; 0x160a4 <__ultoa_invert+0x58>
   160b8:	46 2f       	mov	r20, r22
   160ba:	4f 70       	andi	r20, 0x0F	; 15
   160bc:	40 5d       	subi	r20, 0xD0	; 208
   160be:	4a 33       	cpi	r20, 0x3A	; 58
   160c0:	18 f0       	brcs	.+6      	; 0x160c8 <__ultoa_invert+0x7c>
   160c2:	49 5d       	subi	r20, 0xD9	; 217
   160c4:	31 fd       	sbrc	r19, 1
   160c6:	40 52       	subi	r20, 0x20	; 32
   160c8:	41 93       	st	Z+, r20
   160ca:	02 d0       	rcall	.+4      	; 0x160d0 <__ultoa_invert+0x84>
   160cc:	a9 f7       	brne	.-22     	; 0x160b8 <__ultoa_invert+0x6c>
   160ce:	ea cf       	rjmp	.-44     	; 0x160a4 <__ultoa_invert+0x58>
   160d0:	b4 e0       	ldi	r27, 0x04	; 4
   160d2:	a6 95       	lsr	r26
   160d4:	97 95       	ror	r25
   160d6:	87 95       	ror	r24
   160d8:	77 95       	ror	r23
   160da:	67 95       	ror	r22
   160dc:	ba 95       	dec	r27
   160de:	c9 f7       	brne	.-14     	; 0x160d2 <__ultoa_invert+0x86>
   160e0:	00 97       	sbiw	r24, 0x00	; 0
   160e2:	61 05       	cpc	r22, r1
   160e4:	71 05       	cpc	r23, r1
   160e6:	08 95       	ret
   160e8:	9b 01       	movw	r18, r22
   160ea:	ac 01       	movw	r20, r24
   160ec:	0a 2e       	mov	r0, r26
   160ee:	06 94       	lsr	r0
   160f0:	57 95       	ror	r21
   160f2:	47 95       	ror	r20
   160f4:	37 95       	ror	r19
   160f6:	27 95       	ror	r18
   160f8:	ba 95       	dec	r27
   160fa:	c9 f7       	brne	.-14     	; 0x160ee <__ultoa_invert+0xa2>
   160fc:	62 0f       	add	r22, r18
   160fe:	73 1f       	adc	r23, r19
   16100:	84 1f       	adc	r24, r20
   16102:	95 1f       	adc	r25, r21
   16104:	a0 1d       	adc	r26, r0
   16106:	08 95       	ret

00016108 <__cmpsf2>:
__cmpsf2():
   16108:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <__fp_cmp>
   1610c:	08 f4       	brcc	.+2      	; 0x16110 <__cmpsf2+0x8>
   1610e:	81 e0       	ldi	r24, 0x01	; 1
   16110:	08 95       	ret

00016112 <__floatunsisf>:
__floatunsisf():
   16112:	e8 94       	clt
   16114:	09 c0       	rjmp	.+18     	; 0x16128 <__floatsisf+0x12>

00016116 <__floatsisf>:
   16116:	97 fb       	bst	r25, 7
   16118:	3e f4       	brtc	.+14     	; 0x16128 <__floatsisf+0x12>
   1611a:	90 95       	com	r25
   1611c:	80 95       	com	r24
   1611e:	70 95       	com	r23
   16120:	61 95       	neg	r22
   16122:	7f 4f       	sbci	r23, 0xFF	; 255
   16124:	8f 4f       	sbci	r24, 0xFF	; 255
   16126:	9f 4f       	sbci	r25, 0xFF	; 255
   16128:	99 23       	and	r25, r25
   1612a:	a9 f0       	breq	.+42     	; 0x16156 <__floatsisf+0x40>
   1612c:	f9 2f       	mov	r31, r25
   1612e:	96 e9       	ldi	r25, 0x96	; 150
   16130:	bb 27       	eor	r27, r27
   16132:	93 95       	inc	r25
   16134:	f6 95       	lsr	r31
   16136:	87 95       	ror	r24
   16138:	77 95       	ror	r23
   1613a:	67 95       	ror	r22
   1613c:	b7 95       	ror	r27
   1613e:	f1 11       	cpse	r31, r1
   16140:	f8 cf       	rjmp	.-16     	; 0x16132 <__floatsisf+0x1c>
   16142:	fa f4       	brpl	.+62     	; 0x16182 <__floatsisf+0x6c>
   16144:	bb 0f       	add	r27, r27
   16146:	11 f4       	brne	.+4      	; 0x1614c <__floatsisf+0x36>
   16148:	60 ff       	sbrs	r22, 0
   1614a:	1b c0       	rjmp	.+54     	; 0x16182 <__floatsisf+0x6c>
   1614c:	6f 5f       	subi	r22, 0xFF	; 255
   1614e:	7f 4f       	sbci	r23, 0xFF	; 255
   16150:	8f 4f       	sbci	r24, 0xFF	; 255
   16152:	9f 4f       	sbci	r25, 0xFF	; 255
   16154:	16 c0       	rjmp	.+44     	; 0x16182 <__floatsisf+0x6c>
   16156:	88 23       	and	r24, r24
   16158:	11 f0       	breq	.+4      	; 0x1615e <__floatsisf+0x48>
   1615a:	96 e9       	ldi	r25, 0x96	; 150
   1615c:	11 c0       	rjmp	.+34     	; 0x16180 <__floatsisf+0x6a>
   1615e:	77 23       	and	r23, r23
   16160:	21 f0       	breq	.+8      	; 0x1616a <__floatsisf+0x54>
   16162:	9e e8       	ldi	r25, 0x8E	; 142
   16164:	87 2f       	mov	r24, r23
   16166:	76 2f       	mov	r23, r22
   16168:	05 c0       	rjmp	.+10     	; 0x16174 <__floatsisf+0x5e>
   1616a:	66 23       	and	r22, r22
   1616c:	71 f0       	breq	.+28     	; 0x1618a <__floatsisf+0x74>
   1616e:	96 e8       	ldi	r25, 0x86	; 134
   16170:	86 2f       	mov	r24, r22
   16172:	70 e0       	ldi	r23, 0x00	; 0
   16174:	60 e0       	ldi	r22, 0x00	; 0
   16176:	2a f0       	brmi	.+10     	; 0x16182 <__floatsisf+0x6c>
   16178:	9a 95       	dec	r25
   1617a:	66 0f       	add	r22, r22
   1617c:	77 1f       	adc	r23, r23
   1617e:	88 1f       	adc	r24, r24
   16180:	da f7       	brpl	.-10     	; 0x16178 <__floatsisf+0x62>
   16182:	88 0f       	add	r24, r24
   16184:	96 95       	lsr	r25
   16186:	87 95       	ror	r24
   16188:	97 f9       	bld	r25, 7
   1618a:	08 95       	ret

0001618c <__fp_cmp>:
__fp_cmp():
   1618c:	99 0f       	add	r25, r25
   1618e:	00 08       	sbc	r0, r0
   16190:	55 0f       	add	r21, r21
   16192:	aa 0b       	sbc	r26, r26
   16194:	e0 e8       	ldi	r30, 0x80	; 128
   16196:	fe ef       	ldi	r31, 0xFE	; 254
   16198:	16 16       	cp	r1, r22
   1619a:	17 06       	cpc	r1, r23
   1619c:	e8 07       	cpc	r30, r24
   1619e:	f9 07       	cpc	r31, r25
   161a0:	c0 f0       	brcs	.+48     	; 0x161d2 <__fp_cmp+0x46>
   161a2:	12 16       	cp	r1, r18
   161a4:	13 06       	cpc	r1, r19
   161a6:	e4 07       	cpc	r30, r20
   161a8:	f5 07       	cpc	r31, r21
   161aa:	98 f0       	brcs	.+38     	; 0x161d2 <__fp_cmp+0x46>
   161ac:	62 1b       	sub	r22, r18
   161ae:	73 0b       	sbc	r23, r19
   161b0:	84 0b       	sbc	r24, r20
   161b2:	95 0b       	sbc	r25, r21
   161b4:	39 f4       	brne	.+14     	; 0x161c4 <__fp_cmp+0x38>
   161b6:	0a 26       	eor	r0, r26
   161b8:	61 f0       	breq	.+24     	; 0x161d2 <__fp_cmp+0x46>
   161ba:	23 2b       	or	r18, r19
   161bc:	24 2b       	or	r18, r20
   161be:	25 2b       	or	r18, r21
   161c0:	21 f4       	brne	.+8      	; 0x161ca <__fp_cmp+0x3e>
   161c2:	08 95       	ret
   161c4:	0a 26       	eor	r0, r26
   161c6:	09 f4       	brne	.+2      	; 0x161ca <__fp_cmp+0x3e>
   161c8:	a1 40       	sbci	r26, 0x01	; 1
   161ca:	a6 95       	lsr	r26
   161cc:	8f ef       	ldi	r24, 0xFF	; 255
   161ce:	81 1d       	adc	r24, r1
   161d0:	81 1d       	adc	r24, r1
   161d2:	08 95       	ret

000161d4 <__mulsf3>:
__mulsf3():
   161d4:	0e 94 fd b0 	call	0x161fa	; 0x161fa <__mulsf3x>
   161d8:	0c 94 6e b1 	jmp	0x162dc	; 0x162dc <__fp_round>
   161dc:	0e 94 60 b1 	call	0x162c0	; 0x162c0 <__fp_pscA>
   161e0:	38 f0       	brcs	.+14     	; 0x161f0 <__mulsf3+0x1c>
   161e2:	0e 94 67 b1 	call	0x162ce	; 0x162ce <__fp_pscB>
   161e6:	20 f0       	brcs	.+8      	; 0x161f0 <__mulsf3+0x1c>
   161e8:	95 23       	and	r25, r21
   161ea:	11 f0       	breq	.+4      	; 0x161f0 <__mulsf3+0x1c>
   161ec:	0c 94 57 b1 	jmp	0x162ae	; 0x162ae <__fp_inf>
   161f0:	0c 94 5d b1 	jmp	0x162ba	; 0x162ba <__fp_nan>
   161f4:	11 24       	eor	r1, r1
   161f6:	0c 94 a2 b1 	jmp	0x16344	; 0x16344 <__fp_szero>

000161fa <__mulsf3x>:
__mulsf3x():
   161fa:	0e 94 7f b1 	call	0x162fe	; 0x162fe <__fp_split3>
   161fe:	70 f3       	brcs	.-36     	; 0x161dc <__mulsf3+0x8>

00016200 <__mulsf3_pse>:
   16200:	95 9f       	mul	r25, r21
   16202:	c1 f3       	breq	.-16     	; 0x161f4 <__mulsf3+0x20>
   16204:	95 0f       	add	r25, r21
   16206:	50 e0       	ldi	r21, 0x00	; 0
   16208:	55 1f       	adc	r21, r21
   1620a:	62 9f       	mul	r22, r18
   1620c:	f0 01       	movw	r30, r0
   1620e:	72 9f       	mul	r23, r18
   16210:	bb 27       	eor	r27, r27
   16212:	f0 0d       	add	r31, r0
   16214:	b1 1d       	adc	r27, r1
   16216:	63 9f       	mul	r22, r19
   16218:	aa 27       	eor	r26, r26
   1621a:	f0 0d       	add	r31, r0
   1621c:	b1 1d       	adc	r27, r1
   1621e:	aa 1f       	adc	r26, r26
   16220:	64 9f       	mul	r22, r20
   16222:	66 27       	eor	r22, r22
   16224:	b0 0d       	add	r27, r0
   16226:	a1 1d       	adc	r26, r1
   16228:	66 1f       	adc	r22, r22
   1622a:	82 9f       	mul	r24, r18
   1622c:	22 27       	eor	r18, r18
   1622e:	b0 0d       	add	r27, r0
   16230:	a1 1d       	adc	r26, r1
   16232:	62 1f       	adc	r22, r18
   16234:	73 9f       	mul	r23, r19
   16236:	b0 0d       	add	r27, r0
   16238:	a1 1d       	adc	r26, r1
   1623a:	62 1f       	adc	r22, r18
   1623c:	83 9f       	mul	r24, r19
   1623e:	a0 0d       	add	r26, r0
   16240:	61 1d       	adc	r22, r1
   16242:	22 1f       	adc	r18, r18
   16244:	74 9f       	mul	r23, r20
   16246:	33 27       	eor	r19, r19
   16248:	a0 0d       	add	r26, r0
   1624a:	61 1d       	adc	r22, r1
   1624c:	23 1f       	adc	r18, r19
   1624e:	84 9f       	mul	r24, r20
   16250:	60 0d       	add	r22, r0
   16252:	21 1d       	adc	r18, r1
   16254:	82 2f       	mov	r24, r18
   16256:	76 2f       	mov	r23, r22
   16258:	6a 2f       	mov	r22, r26
   1625a:	11 24       	eor	r1, r1
   1625c:	9f 57       	subi	r25, 0x7F	; 127
   1625e:	50 40       	sbci	r21, 0x00	; 0
   16260:	9a f0       	brmi	.+38     	; 0x16288 <__mulsf3_pse+0x88>
   16262:	f1 f0       	breq	.+60     	; 0x162a0 <__mulsf3_pse+0xa0>
   16264:	88 23       	and	r24, r24
   16266:	4a f0       	brmi	.+18     	; 0x1627a <__mulsf3_pse+0x7a>
   16268:	ee 0f       	add	r30, r30
   1626a:	ff 1f       	adc	r31, r31
   1626c:	bb 1f       	adc	r27, r27
   1626e:	66 1f       	adc	r22, r22
   16270:	77 1f       	adc	r23, r23
   16272:	88 1f       	adc	r24, r24
   16274:	91 50       	subi	r25, 0x01	; 1
   16276:	50 40       	sbci	r21, 0x00	; 0
   16278:	a9 f7       	brne	.-22     	; 0x16264 <__mulsf3_pse+0x64>
   1627a:	9e 3f       	cpi	r25, 0xFE	; 254
   1627c:	51 05       	cpc	r21, r1
   1627e:	80 f0       	brcs	.+32     	; 0x162a0 <__mulsf3_pse+0xa0>
   16280:	0c 94 57 b1 	jmp	0x162ae	; 0x162ae <__fp_inf>
   16284:	0c 94 a2 b1 	jmp	0x16344	; 0x16344 <__fp_szero>
   16288:	5f 3f       	cpi	r21, 0xFF	; 255
   1628a:	e4 f3       	brlt	.-8      	; 0x16284 <__mulsf3_pse+0x84>
   1628c:	98 3e       	cpi	r25, 0xE8	; 232
   1628e:	d4 f3       	brlt	.-12     	; 0x16284 <__mulsf3_pse+0x84>
   16290:	86 95       	lsr	r24
   16292:	77 95       	ror	r23
   16294:	67 95       	ror	r22
   16296:	b7 95       	ror	r27
   16298:	f7 95       	ror	r31
   1629a:	e7 95       	ror	r30
   1629c:	9f 5f       	subi	r25, 0xFF	; 255
   1629e:	c1 f7       	brne	.-16     	; 0x16290 <__mulsf3_pse+0x90>
   162a0:	fe 2b       	or	r31, r30
   162a2:	88 0f       	add	r24, r24
   162a4:	91 1d       	adc	r25, r1
   162a6:	96 95       	lsr	r25
   162a8:	87 95       	ror	r24
   162aa:	97 f9       	bld	r25, 7
   162ac:	08 95       	ret

000162ae <__fp_inf>:
   162ae:	97 f9       	bld	r25, 7
   162b0:	9f 67       	ori	r25, 0x7F	; 127
   162b2:	80 e8       	ldi	r24, 0x80	; 128
   162b4:	70 e0       	ldi	r23, 0x00	; 0
   162b6:	60 e0       	ldi	r22, 0x00	; 0
   162b8:	08 95       	ret

000162ba <__fp_nan>:
   162ba:	9f ef       	ldi	r25, 0xFF	; 255
   162bc:	80 ec       	ldi	r24, 0xC0	; 192
   162be:	08 95       	ret

000162c0 <__fp_pscA>:
   162c0:	00 24       	eor	r0, r0
   162c2:	0a 94       	dec	r0
   162c4:	16 16       	cp	r1, r22
   162c6:	17 06       	cpc	r1, r23
   162c8:	18 06       	cpc	r1, r24
   162ca:	09 06       	cpc	r0, r25
__fp_pscA():
   162cc:	08 95       	ret

000162ce <__fp_pscB>:
__fp_pscB():
   162ce:	00 24       	eor	r0, r0
   162d0:	0a 94       	dec	r0
   162d2:	12 16       	cp	r1, r18
   162d4:	13 06       	cpc	r1, r19
   162d6:	14 06       	cpc	r1, r20
   162d8:	05 06       	cpc	r0, r21
   162da:	08 95       	ret

000162dc <__fp_round>:
__fp_round():
   162dc:	09 2e       	mov	r0, r25
   162de:	03 94       	inc	r0
   162e0:	00 0c       	add	r0, r0
   162e2:	11 f4       	brne	.+4      	; 0x162e8 <__fp_round+0xc>
   162e4:	88 23       	and	r24, r24
   162e6:	52 f0       	brmi	.+20     	; 0x162fc <__fp_round+0x20>
   162e8:	bb 0f       	add	r27, r27
   162ea:	40 f4       	brcc	.+16     	; 0x162fc <__fp_round+0x20>
   162ec:	bf 2b       	or	r27, r31
   162ee:	11 f4       	brne	.+4      	; 0x162f4 <__fp_round+0x18>
   162f0:	60 ff       	sbrs	r22, 0
   162f2:	04 c0       	rjmp	.+8      	; 0x162fc <__fp_round+0x20>
   162f4:	6f 5f       	subi	r22, 0xFF	; 255
   162f6:	7f 4f       	sbci	r23, 0xFF	; 255
   162f8:	8f 4f       	sbci	r24, 0xFF	; 255
   162fa:	9f 4f       	sbci	r25, 0xFF	; 255
   162fc:	08 95       	ret

000162fe <__fp_split3>:
__fp_split3():
   162fe:	57 fd       	sbrc	r21, 7
   16300:	90 58       	subi	r25, 0x80	; 128
   16302:	44 0f       	add	r20, r20
   16304:	55 1f       	adc	r21, r21
   16306:	59 f0       	breq	.+22     	; 0x1631e <__fp_splitA+0x10>
   16308:	5f 3f       	cpi	r21, 0xFF	; 255
   1630a:	71 f0       	breq	.+28     	; 0x16328 <__fp_splitA+0x1a>
   1630c:	47 95       	ror	r20

0001630e <__fp_splitA>:
   1630e:	88 0f       	add	r24, r24
   16310:	97 fb       	bst	r25, 7
   16312:	99 1f       	adc	r25, r25
   16314:	61 f0       	breq	.+24     	; 0x1632e <__fp_splitA+0x20>
   16316:	9f 3f       	cpi	r25, 0xFF	; 255
   16318:	79 f0       	breq	.+30     	; 0x16338 <__fp_splitA+0x2a>
   1631a:	87 95       	ror	r24
   1631c:	08 95       	ret
   1631e:	12 16       	cp	r1, r18
   16320:	13 06       	cpc	r1, r19
   16322:	14 06       	cpc	r1, r20
   16324:	55 1f       	adc	r21, r21
   16326:	f2 cf       	rjmp	.-28     	; 0x1630c <__fp_split3+0xe>
   16328:	46 95       	lsr	r20
   1632a:	f1 df       	rcall	.-30     	; 0x1630e <__fp_splitA>
   1632c:	08 c0       	rjmp	.+16     	; 0x1633e <__fp_splitA+0x30>
   1632e:	16 16       	cp	r1, r22
   16330:	17 06       	cpc	r1, r23
   16332:	18 06       	cpc	r1, r24
   16334:	99 1f       	adc	r25, r25
   16336:	f1 cf       	rjmp	.-30     	; 0x1631a <__fp_splitA+0xc>
   16338:	86 95       	lsr	r24
   1633a:	71 05       	cpc	r23, r1
   1633c:	61 05       	cpc	r22, r1
   1633e:	08 94       	sec
   16340:	08 95       	ret

00016342 <__fp_zero>:
__fp_zero():
   16342:	e8 94       	clt

00016344 <__fp_szero>:
   16344:	bb 27       	eor	r27, r27
   16346:	66 27       	eor	r22, r22
   16348:	77 27       	eor	r23, r23
   1634a:	cb 01       	movw	r24, r22
   1634c:	97 f9       	bld	r25, 7
   1634e:	08 95       	ret

00016350 <eeprom_read_byte>:
eeprom_read_byte():
   16350:	f9 99       	sbic	0x1f, 1	; 31
   16352:	fe cf       	rjmp	.-4      	; 0x16350 <eeprom_read_byte>
   16354:	92 bd       	out	0x22, r25	; 34
   16356:	81 bd       	out	0x21, r24	; 33
   16358:	f8 9a       	sbi	0x1f, 0	; 31
   1635a:	99 27       	eor	r25, r25
   1635c:	80 b5       	in	r24, 0x20	; 32
   1635e:	08 95       	ret

00016360 <eeprom_write_byte>:
eeprom_write_byte():
   16360:	26 2f       	mov	r18, r22

00016362 <eeprom_write_r18>:
   16362:	f9 99       	sbic	0x1f, 1	; 31
   16364:	fe cf       	rjmp	.-4      	; 0x16362 <eeprom_write_r18>
   16366:	1f ba       	out	0x1f, r1	; 31
   16368:	92 bd       	out	0x22, r25	; 34
   1636a:	81 bd       	out	0x21, r24	; 33
   1636c:	20 bd       	out	0x20, r18	; 32
   1636e:	0f b6       	in	r0, 0x3f	; 63
   16370:	f8 94       	cli
   16372:	fa 9a       	sbi	0x1f, 2	; 31
   16374:	f9 9a       	sbi	0x1f, 1	; 31
   16376:	0f be       	out	0x3f, r0	; 63
   16378:	01 96       	adiw	r24, 0x01	; 1
   1637a:	08 95       	ret

0001637c <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1637c:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1637e:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   16380:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   16382:	0e 94 37 b2 	call	0x1646e	; 0x1646e <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   16386:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   16388:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1638a:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1638c:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1638e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   16390:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   16392:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   16394:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   16396:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   16398:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1639a:	08 95       	ret

0001639c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1639c:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1639e:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   163a0:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   163a2:	07 c0       	rjmp	.+14     	; 0x163b2 <__udivmodhi4_ep>

000163a4 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   163a4:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   163a6:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   163a8:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   163aa:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   163ac:	10 f0       	brcs	.+4      	; 0x163b2 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   163ae:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   163b0:	b7 0b       	sbc	r27, r23

000163b2 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   163b2:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   163b4:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   163b6:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   163b8:	a9 f7       	brne	.-22     	; 0x163a4 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   163ba:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   163bc:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   163be:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   163c0:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   163c2:	08 95       	ret

000163c4 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   163c4:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   163c6:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   163c8:	16 f4       	brtc	.+4      	; 0x163ce <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   163ca:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   163cc:	07 d0       	rcall	.+14     	; 0x163dc <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   163ce:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   163d0:	09 d0       	rcall	.+18     	; 0x163e4 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   163d2:	0e 94 ce b1 	call	0x1639c	; 0x1639c <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   163d6:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   163d8:	05 d0       	rcall	.+10     	; 0x163e4 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   163da:	3e f4       	brtc	.+14     	; 0x163ea <__divmodhi4_exit>

000163dc <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   163dc:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   163de:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   163e0:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   163e2:	08 95       	ret

000163e4 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   163e4:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   163e6:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   163e8:	7f 4f       	sbci	r23, 0xFF	; 255

000163ea <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   163ea:	08 95       	ret

000163ec <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   163ec:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   163ee:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   163f0:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   163f2:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   163f4:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   163f6:	0d c0       	rjmp	.+26     	; 0x16412 <__udivmodsi4_ep>

000163f8 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   163f8:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   163fa:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   163fc:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   163fe:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   16400:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   16402:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   16404:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   16406:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   16408:	20 f0       	brcs	.+8      	; 0x16412 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1640a:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1640c:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1640e:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   16410:	f5 0b       	sbc	r31, r21

00016412 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   16412:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   16414:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   16416:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   16418:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1641a:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1641c:	69 f7       	brne	.-38     	; 0x163f8 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1641e:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   16420:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   16422:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   16424:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   16426:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   16428:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1642a:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1642c:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1642e:	08 95       	ret

00016430 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   16430:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   16432:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   16434:	1e f4       	brtc	.+6      	; 0x1643c <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   16436:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   16438:	0e 94 2f b2 	call	0x1645e	; 0x1645e <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1643c:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1643e:	07 d0       	rcall	.+14     	; 0x1644e <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   16440:	0e 94 f6 b1 	call	0x163ec	; 0x163ec <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   16444:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   16446:	03 d0       	rcall	.+6      	; 0x1644e <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   16448:	4e f4       	brtc	.+18     	; 0x1645c <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1644a:	0c 94 2f b2 	jmp	0x1645e	; 0x1645e <__negsi2>

0001644e <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1644e:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   16450:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   16452:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   16454:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   16456:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   16458:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1645a:	5f 4f       	sbci	r21, 0xFF	; 255

0001645c <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1645c:	08 95       	ret

0001645e <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1645e:	90 95       	com	r25
   16460:	80 95       	com	r24
   16462:	70 95       	com	r23
   16464:	61 95       	neg	r22
   16466:	7f 4f       	sbci	r23, 0xFF	; 255
   16468:	8f 4f       	sbci	r24, 0xFF	; 255
   1646a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1646c:	08 95       	ret

0001646e <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1646e:	0e 94 42 b2 	call	0x16484	; 0x16484 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   16472:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   16474:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   16476:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   16478:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1647a:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1647c:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1647e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   16480:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   16482:	08 95       	ret

00016484 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   16484:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   16486:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   16488:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1648a:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1648c:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1648e:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   16490:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   16492:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   16494:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   16496:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   16498:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1649a:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1649c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1649e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   164a0:	08 95       	ret

000164a2 <__subsf3>:
__subsf3():
   164a2:	50 58       	subi	r21, 0x80	; 128

000164a4 <__addsf3>:
   164a4:	bb 27       	eor	r27, r27
   164a6:	aa 27       	eor	r26, r26
   164a8:	0e 94 69 b2 	call	0x164d2	; 0x164d2 <__addsf3x>
   164ac:	0c 94 6e b1 	jmp	0x162dc	; 0x162dc <__fp_round>
__addsf3():
   164b0:	0e 94 60 b1 	call	0x162c0	; 0x162c0 <__fp_pscA>
   164b4:	38 f0       	brcs	.+14     	; 0x164c4 <__addsf3+0x20>
   164b6:	0e 94 67 b1 	call	0x162ce	; 0x162ce <__fp_pscB>
   164ba:	20 f0       	brcs	.+8      	; 0x164c4 <__addsf3+0x20>
   164bc:	39 f4       	brne	.+14     	; 0x164cc <__addsf3+0x28>
   164be:	9f 3f       	cpi	r25, 0xFF	; 255
   164c0:	19 f4       	brne	.+6      	; 0x164c8 <__addsf3+0x24>
   164c2:	26 f4       	brtc	.+8      	; 0x164cc <__addsf3+0x28>
   164c4:	0c 94 5d b1 	jmp	0x162ba	; 0x162ba <__fp_nan>
   164c8:	0e f4       	brtc	.+2      	; 0x164cc <__addsf3+0x28>
   164ca:	e0 95       	com	r30
   164cc:	e7 fb       	bst	r30, 7
   164ce:	0c 94 57 b1 	jmp	0x162ae	; 0x162ae <__fp_inf>

000164d2 <__addsf3x>:
__addsf3x():
   164d2:	e9 2f       	mov	r30, r25
   164d4:	0e 94 7f b1 	call	0x162fe	; 0x162fe <__fp_split3>
   164d8:	58 f3       	brcs	.-42     	; 0x164b0 <__addsf3+0xc>
   164da:	ba 17       	cp	r27, r26
   164dc:	62 07       	cpc	r22, r18
   164de:	73 07       	cpc	r23, r19
   164e0:	84 07       	cpc	r24, r20
   164e2:	95 07       	cpc	r25, r21
   164e4:	20 f0       	brcs	.+8      	; 0x164ee <__addsf3x+0x1c>
   164e6:	79 f4       	brne	.+30     	; 0x16506 <__addsf3x+0x34>
   164e8:	a6 f5       	brtc	.+104    	; 0x16552 <__addsf3x+0x80>
   164ea:	0c 94 a1 b1 	jmp	0x16342	; 0x16342 <__fp_zero>
   164ee:	0e f4       	brtc	.+2      	; 0x164f2 <__addsf3x+0x20>
   164f0:	e0 95       	com	r30
   164f2:	0b 2e       	mov	r0, r27
   164f4:	ba 2f       	mov	r27, r26
   164f6:	a0 2d       	mov	r26, r0
   164f8:	0b 01       	movw	r0, r22
   164fa:	b9 01       	movw	r22, r18
   164fc:	90 01       	movw	r18, r0
   164fe:	0c 01       	movw	r0, r24
   16500:	ca 01       	movw	r24, r20
   16502:	a0 01       	movw	r20, r0
   16504:	11 24       	eor	r1, r1
   16506:	ff 27       	eor	r31, r31
   16508:	59 1b       	sub	r21, r25
   1650a:	99 f0       	breq	.+38     	; 0x16532 <__addsf3x+0x60>
   1650c:	59 3f       	cpi	r21, 0xF9	; 249
   1650e:	50 f4       	brcc	.+20     	; 0x16524 <__addsf3x+0x52>
   16510:	50 3e       	cpi	r21, 0xE0	; 224
   16512:	68 f1       	brcs	.+90     	; 0x1656e <__addsf3x+0x9c>
   16514:	1a 16       	cp	r1, r26
   16516:	f0 40       	sbci	r31, 0x00	; 0
   16518:	a2 2f       	mov	r26, r18
   1651a:	23 2f       	mov	r18, r19
   1651c:	34 2f       	mov	r19, r20
   1651e:	44 27       	eor	r20, r20
   16520:	58 5f       	subi	r21, 0xF8	; 248
   16522:	f3 cf       	rjmp	.-26     	; 0x1650a <__addsf3x+0x38>
   16524:	46 95       	lsr	r20
   16526:	37 95       	ror	r19
   16528:	27 95       	ror	r18
   1652a:	a7 95       	ror	r26
   1652c:	f0 40       	sbci	r31, 0x00	; 0
   1652e:	53 95       	inc	r21
   16530:	c9 f7       	brne	.-14     	; 0x16524 <__addsf3x+0x52>
   16532:	7e f4       	brtc	.+30     	; 0x16552 <__addsf3x+0x80>
   16534:	1f 16       	cp	r1, r31
   16536:	ba 0b       	sbc	r27, r26
   16538:	62 0b       	sbc	r22, r18
   1653a:	73 0b       	sbc	r23, r19
   1653c:	84 0b       	sbc	r24, r20
   1653e:	ba f0       	brmi	.+46     	; 0x1656e <__addsf3x+0x9c>
   16540:	91 50       	subi	r25, 0x01	; 1
   16542:	a1 f0       	breq	.+40     	; 0x1656c <__addsf3x+0x9a>
   16544:	ff 0f       	add	r31, r31
   16546:	bb 1f       	adc	r27, r27
   16548:	66 1f       	adc	r22, r22
   1654a:	77 1f       	adc	r23, r23
   1654c:	88 1f       	adc	r24, r24
   1654e:	c2 f7       	brpl	.-16     	; 0x16540 <__addsf3x+0x6e>
   16550:	0e c0       	rjmp	.+28     	; 0x1656e <__addsf3x+0x9c>
   16552:	ba 0f       	add	r27, r26
   16554:	62 1f       	adc	r22, r18
   16556:	73 1f       	adc	r23, r19
   16558:	84 1f       	adc	r24, r20
   1655a:	48 f4       	brcc	.+18     	; 0x1656e <__addsf3x+0x9c>
   1655c:	87 95       	ror	r24
   1655e:	77 95       	ror	r23
   16560:	67 95       	ror	r22
   16562:	b7 95       	ror	r27
   16564:	f7 95       	ror	r31
   16566:	9e 3f       	cpi	r25, 0xFE	; 254
   16568:	08 f0       	brcs	.+2      	; 0x1656c <__addsf3x+0x9a>
   1656a:	b0 cf       	rjmp	.-160    	; 0x164cc <__addsf3+0x28>
   1656c:	93 95       	inc	r25
   1656e:	88 0f       	add	r24, r24
   16570:	08 f0       	brcs	.+2      	; 0x16574 <__addsf3x+0xa2>
   16572:	99 27       	eor	r25, r25
   16574:	ee 0f       	add	r30, r30
   16576:	97 95       	ror	r25
   16578:	87 95       	ror	r24
   1657a:	08 95       	ret

0001657c <__divsf3>:
   1657c:	0e 94 d2 b2 	call	0x165a4	; 0x165a4 <__divsf3x>
   16580:	0c 94 6e b1 	jmp	0x162dc	; 0x162dc <__fp_round>
   16584:	0e 94 67 b1 	call	0x162ce	; 0x162ce <__fp_pscB>
   16588:	58 f0       	brcs	.+22     	; 0x165a0 <__divsf3+0x24>
   1658a:	0e 94 60 b1 	call	0x162c0	; 0x162c0 <__fp_pscA>
   1658e:	40 f0       	brcs	.+16     	; 0x165a0 <__divsf3+0x24>
   16590:	29 f4       	brne	.+10     	; 0x1659c <__divsf3+0x20>
   16592:	5f 3f       	cpi	r21, 0xFF	; 255
   16594:	29 f0       	breq	.+10     	; 0x165a0 <__divsf3+0x24>
   16596:	0c 94 57 b1 	jmp	0x162ae	; 0x162ae <__fp_inf>
   1659a:	51 11       	cpse	r21, r1
   1659c:	0c 94 a2 b1 	jmp	0x16344	; 0x16344 <__fp_szero>
__divsf3():
   165a0:	0c 94 5d b1 	jmp	0x162ba	; 0x162ba <__fp_nan>

000165a4 <__divsf3x>:
__divsf3x():
   165a4:	0e 94 7f b1 	call	0x162fe	; 0x162fe <__fp_split3>
   165a8:	68 f3       	brcs	.-38     	; 0x16584 <__divsf3+0x8>

000165aa <__divsf3_pse>:
   165aa:	99 23       	and	r25, r25
   165ac:	b1 f3       	breq	.-20     	; 0x1659a <__divsf3+0x1e>
   165ae:	55 23       	and	r21, r21
   165b0:	91 f3       	breq	.-28     	; 0x16596 <__divsf3+0x1a>
   165b2:	95 1b       	sub	r25, r21
   165b4:	55 0b       	sbc	r21, r21
   165b6:	bb 27       	eor	r27, r27
   165b8:	aa 27       	eor	r26, r26
   165ba:	62 17       	cp	r22, r18
   165bc:	73 07       	cpc	r23, r19
   165be:	84 07       	cpc	r24, r20
   165c0:	38 f0       	brcs	.+14     	; 0x165d0 <__divsf3_pse+0x26>
   165c2:	9f 5f       	subi	r25, 0xFF	; 255
   165c4:	5f 4f       	sbci	r21, 0xFF	; 255
   165c6:	22 0f       	add	r18, r18
   165c8:	33 1f       	adc	r19, r19
   165ca:	44 1f       	adc	r20, r20
   165cc:	aa 1f       	adc	r26, r26
   165ce:	a9 f3       	breq	.-22     	; 0x165ba <__divsf3_pse+0x10>
   165d0:	35 d0       	rcall	.+106    	; 0x1663c <__divsf3_pse+0x92>
   165d2:	0e 2e       	mov	r0, r30
   165d4:	3a f0       	brmi	.+14     	; 0x165e4 <__divsf3_pse+0x3a>
   165d6:	e0 e8       	ldi	r30, 0x80	; 128
   165d8:	32 d0       	rcall	.+100    	; 0x1663e <__divsf3_pse+0x94>
   165da:	91 50       	subi	r25, 0x01	; 1
   165dc:	50 40       	sbci	r21, 0x00	; 0
   165de:	e6 95       	lsr	r30
   165e0:	00 1c       	adc	r0, r0
   165e2:	ca f7       	brpl	.-14     	; 0x165d6 <__divsf3_pse+0x2c>
   165e4:	2b d0       	rcall	.+86     	; 0x1663c <__divsf3_pse+0x92>
   165e6:	fe 2f       	mov	r31, r30
   165e8:	29 d0       	rcall	.+82     	; 0x1663c <__divsf3_pse+0x92>
   165ea:	66 0f       	add	r22, r22
   165ec:	77 1f       	adc	r23, r23
   165ee:	88 1f       	adc	r24, r24
   165f0:	bb 1f       	adc	r27, r27
   165f2:	26 17       	cp	r18, r22
   165f4:	37 07       	cpc	r19, r23
   165f6:	48 07       	cpc	r20, r24
   165f8:	ab 07       	cpc	r26, r27
   165fa:	b0 e8       	ldi	r27, 0x80	; 128
   165fc:	09 f0       	breq	.+2      	; 0x16600 <__divsf3_pse+0x56>
   165fe:	bb 0b       	sbc	r27, r27
   16600:	80 2d       	mov	r24, r0
   16602:	bf 01       	movw	r22, r30
   16604:	ff 27       	eor	r31, r31
   16606:	93 58       	subi	r25, 0x83	; 131
   16608:	5f 4f       	sbci	r21, 0xFF	; 255
   1660a:	3a f0       	brmi	.+14     	; 0x1661a <__divsf3_pse+0x70>
   1660c:	9e 3f       	cpi	r25, 0xFE	; 254
   1660e:	51 05       	cpc	r21, r1
   16610:	78 f0       	brcs	.+30     	; 0x16630 <__divsf3_pse+0x86>
   16612:	0c 94 57 b1 	jmp	0x162ae	; 0x162ae <__fp_inf>
   16616:	0c 94 a2 b1 	jmp	0x16344	; 0x16344 <__fp_szero>
   1661a:	5f 3f       	cpi	r21, 0xFF	; 255
   1661c:	e4 f3       	brlt	.-8      	; 0x16616 <__divsf3_pse+0x6c>
   1661e:	98 3e       	cpi	r25, 0xE8	; 232
   16620:	d4 f3       	brlt	.-12     	; 0x16616 <__divsf3_pse+0x6c>
   16622:	86 95       	lsr	r24
   16624:	77 95       	ror	r23
   16626:	67 95       	ror	r22
   16628:	b7 95       	ror	r27
   1662a:	f7 95       	ror	r31
   1662c:	9f 5f       	subi	r25, 0xFF	; 255
   1662e:	c9 f7       	brne	.-14     	; 0x16622 <__divsf3_pse+0x78>
   16630:	88 0f       	add	r24, r24
   16632:	91 1d       	adc	r25, r1
   16634:	96 95       	lsr	r25
   16636:	87 95       	ror	r24
   16638:	97 f9       	bld	r25, 7
   1663a:	08 95       	ret
   1663c:	e1 e0       	ldi	r30, 0x01	; 1
   1663e:	66 0f       	add	r22, r22
   16640:	77 1f       	adc	r23, r23
   16642:	88 1f       	adc	r24, r24
   16644:	bb 1f       	adc	r27, r27
   16646:	62 17       	cp	r22, r18
   16648:	73 07       	cpc	r23, r19
   1664a:	84 07       	cpc	r24, r20
   1664c:	ba 07       	cpc	r27, r26
   1664e:	20 f0       	brcs	.+8      	; 0x16658 <__divsf3_pse+0xae>
   16650:	62 1b       	sub	r22, r18
   16652:	73 0b       	sbc	r23, r19
   16654:	84 0b       	sbc	r24, r20
   16656:	ba 0b       	sbc	r27, r26
   16658:	ee 1f       	adc	r30, r30
   1665a:	88 f7       	brcc	.-30     	; 0x1663e <__divsf3_pse+0x94>
   1665c:	e0 95       	com	r30
   1665e:	08 95       	ret

00016660 <__fixsfsi>:
   16660:	0e 94 37 b3 	call	0x1666e	; 0x1666e <__fixunssfsi>
   16664:	68 94       	set
   16666:	b1 11       	cpse	r27, r1
   16668:	0c 94 a2 b1 	jmp	0x16344	; 0x16344 <__fp_szero>
   1666c:	08 95       	ret

0001666e <__fixunssfsi>:
   1666e:	0e 94 87 b1 	call	0x1630e	; 0x1630e <__fp_splitA>
   16672:	88 f0       	brcs	.+34     	; 0x16696 <__fixunssfsi+0x28>
   16674:	9f 57       	subi	r25, 0x7F	; 127
   16676:	98 f0       	brcs	.+38     	; 0x1669e <__fixunssfsi+0x30>
   16678:	b9 2f       	mov	r27, r25
   1667a:	99 27       	eor	r25, r25
   1667c:	b7 51       	subi	r27, 0x17	; 23
   1667e:	b0 f0       	brcs	.+44     	; 0x166ac <__fixunssfsi+0x3e>
__fixunssfsi():
   16680:	e1 f0       	breq	.+56     	; 0x166ba <__fixunssfsi+0x4c>
   16682:	66 0f       	add	r22, r22
   16684:	77 1f       	adc	r23, r23
   16686:	88 1f       	adc	r24, r24
   16688:	99 1f       	adc	r25, r25
   1668a:	1a f0       	brmi	.+6      	; 0x16692 <__fixunssfsi+0x24>
   1668c:	ba 95       	dec	r27
   1668e:	c9 f7       	brne	.-14     	; 0x16682 <__fixunssfsi+0x14>
   16690:	14 c0       	rjmp	.+40     	; 0x166ba <__fixunssfsi+0x4c>
   16692:	b1 30       	cpi	r27, 0x01	; 1
   16694:	91 f0       	breq	.+36     	; 0x166ba <__fixunssfsi+0x4c>
   16696:	0e 94 a1 b1 	call	0x16342	; 0x16342 <__fp_zero>
   1669a:	b1 e0       	ldi	r27, 0x01	; 1
   1669c:	08 95       	ret
   1669e:	0c 94 a1 b1 	jmp	0x16342	; 0x16342 <__fp_zero>
   166a2:	67 2f       	mov	r22, r23
   166a4:	78 2f       	mov	r23, r24
   166a6:	88 27       	eor	r24, r24
   166a8:	b8 5f       	subi	r27, 0xF8	; 248
   166aa:	39 f0       	breq	.+14     	; 0x166ba <__fixunssfsi+0x4c>
   166ac:	b9 3f       	cpi	r27, 0xF9	; 249
   166ae:	cc f3       	brlt	.-14     	; 0x166a2 <__fixunssfsi+0x34>
   166b0:	86 95       	lsr	r24
   166b2:	77 95       	ror	r23
   166b4:	67 95       	ror	r22
   166b6:	b3 95       	inc	r27
   166b8:	d9 f7       	brne	.-10     	; 0x166b0 <__fixunssfsi+0x42>
   166ba:	3e f4       	brtc	.+14     	; 0x166ca <__fixunssfsi+0x5c>
   166bc:	90 95       	com	r25
   166be:	80 95       	com	r24
   166c0:	70 95       	com	r23
   166c2:	61 95       	neg	r22
   166c4:	7f 4f       	sbci	r23, 0xFF	; 255
   166c6:	8f 4f       	sbci	r24, 0xFF	; 255
   166c8:	9f 4f       	sbci	r25, 0xFF	; 255
   166ca:	08 95       	ret

000166cc <__gesf2>:
__gesf2():
   166cc:	0e 94 c6 b0 	call	0x1618c	; 0x1618c <__fp_cmp>
   166d0:	08 f4       	brcc	.+2      	; 0x166d4 <__gesf2+0x8>
   166d2:	8f ef       	ldi	r24, 0xFF	; 255
   166d4:	08 95       	ret

000166d6 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   166d6:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   166d8:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   166da:	04 c0       	rjmp	.+8      	; 0x166e4 <__udivmodqi4_ep>

000166dc <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   166dc:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   166de:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   166e0:	08 f0       	brcs	.+2      	; 0x166e4 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   166e2:	96 1b       	sub	r25, r22

000166e4 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   166e4:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   166e6:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   166e8:	c9 f7       	brne	.-14     	; 0x166dc <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   166ea:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   166ec:	08 95       	ret

000166ee <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   166ee:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   166f0:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   166f2:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   166f4:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   166f6:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   166f8:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   166fa:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   166fc:	19 94       	eijmp

000166fe <realloc>:
realloc():
   166fe:	4f 92       	push	r4
   16700:	5f 92       	push	r5
   16702:	6f 92       	push	r6
   16704:	7f 92       	push	r7
   16706:	8f 92       	push	r8
   16708:	9f 92       	push	r9
   1670a:	af 92       	push	r10
   1670c:	bf 92       	push	r11
   1670e:	cf 92       	push	r12
   16710:	df 92       	push	r13
   16712:	ef 92       	push	r14
   16714:	ff 92       	push	r15
   16716:	0f 93       	push	r16
   16718:	1f 93       	push	r17
   1671a:	cf 93       	push	r28
   1671c:	df 93       	push	r29
   1671e:	8c 01       	movw	r16, r24
   16720:	00 97       	sbiw	r24, 0x00	; 0
   16722:	99 f4       	brne	.+38     	; 0x1674a <realloc+0x4c>
   16724:	cb 01       	movw	r24, r22
   16726:	df 91       	pop	r29
   16728:	cf 91       	pop	r28
   1672a:	1f 91       	pop	r17
   1672c:	0f 91       	pop	r16
   1672e:	ff 90       	pop	r15
   16730:	ef 90       	pop	r14
   16732:	df 90       	pop	r13
   16734:	cf 90       	pop	r12
   16736:	bf 90       	pop	r11
   16738:	af 90       	pop	r10
   1673a:	9f 90       	pop	r9
   1673c:	8f 90       	pop	r8
   1673e:	7f 90       	pop	r7
   16740:	6f 90       	pop	r6
   16742:	5f 90       	pop	r5
   16744:	4f 90       	pop	r4
   16746:	0c 94 53 ac 	jmp	0x158a6	; 0x158a6 <malloc>
   1674a:	fc 01       	movw	r30, r24
   1674c:	e6 0f       	add	r30, r22
   1674e:	f7 1f       	adc	r31, r23
   16750:	9c 01       	movw	r18, r24
   16752:	22 50       	subi	r18, 0x02	; 2
   16754:	31 09       	sbc	r19, r1
   16756:	e2 17       	cp	r30, r18
   16758:	f3 07       	cpc	r31, r19
   1675a:	08 f4       	brcc	.+2      	; 0x1675e <realloc+0x60>
   1675c:	ae c0       	rjmp	.+348    	; 0x168ba <realloc+0x1bc>
   1675e:	d9 01       	movw	r26, r18
   16760:	cd 91       	ld	r28, X+
   16762:	dc 91       	ld	r29, X
   16764:	11 97       	sbiw	r26, 0x01	; 1
   16766:	c6 17       	cp	r28, r22
   16768:	d7 07       	cpc	r29, r23
   1676a:	20 f1       	brcs	.+72     	; 0x167b4 <realloc+0xb6>
   1676c:	c5 30       	cpi	r28, 0x05	; 5
   1676e:	d1 05       	cpc	r29, r1
   16770:	78 f0       	brcs	.+30     	; 0x16790 <realloc+0x92>
   16772:	ce 01       	movw	r24, r28
   16774:	04 97       	sbiw	r24, 0x04	; 4
   16776:	86 17       	cp	r24, r22
   16778:	97 07       	cpc	r25, r23
   1677a:	50 f0       	brcs	.+20     	; 0x16790 <realloc+0x92>
   1677c:	c6 1b       	sub	r28, r22
   1677e:	d7 0b       	sbc	r29, r23
   16780:	22 97       	sbiw	r28, 0x02	; 2
   16782:	c1 93       	st	Z+, r28
   16784:	d1 93       	st	Z+, r29
   16786:	6d 93       	st	X+, r22
   16788:	7c 93       	st	X, r23
   1678a:	cf 01       	movw	r24, r30
   1678c:	0e 94 ef ac 	call	0x159de	; 0x159de <free>
   16790:	c8 01       	movw	r24, r16
   16792:	df 91       	pop	r29
   16794:	cf 91       	pop	r28
   16796:	1f 91       	pop	r17
   16798:	0f 91       	pop	r16
   1679a:	ff 90       	pop	r15
   1679c:	ef 90       	pop	r14
   1679e:	df 90       	pop	r13
   167a0:	cf 90       	pop	r12
   167a2:	bf 90       	pop	r11
   167a4:	af 90       	pop	r10
   167a6:	9f 90       	pop	r9
   167a8:	8f 90       	pop	r8
   167aa:	7f 90       	pop	r7
   167ac:	6f 90       	pop	r6
   167ae:	5f 90       	pop	r5
   167b0:	4f 90       	pop	r4
   167b2:	08 95       	ret
   167b4:	5b 01       	movw	r10, r22
   167b6:	ac 1a       	sub	r10, r28
   167b8:	bd 0a       	sbc	r11, r29
   167ba:	4c 01       	movw	r8, r24
   167bc:	8c 0e       	add	r8, r28
   167be:	9d 1e       	adc	r9, r29
   167c0:	a0 91 5b 13 	lds	r26, 0x135B	; 0x80135b <__flp>
   167c4:	b0 91 5c 13 	lds	r27, 0x135C	; 0x80135c <__flp+0x1>
   167c8:	51 2c       	mov	r5, r1
   167ca:	41 2c       	mov	r4, r1
   167cc:	f1 2c       	mov	r15, r1
   167ce:	e1 2c       	mov	r14, r1
   167d0:	10 97       	sbiw	r26, 0x00	; 0
   167d2:	31 f5       	brne	.+76     	; 0x16820 <realloc+0x122>
   167d4:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <__brkval>
   167d8:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <__brkval+0x1>
   167dc:	88 15       	cp	r24, r8
   167de:	99 05       	cpc	r25, r9
   167e0:	09 f0       	breq	.+2      	; 0x167e4 <realloc+0xe6>
   167e2:	5c c0       	rjmp	.+184    	; 0x1689c <realloc+0x19e>
   167e4:	46 16       	cp	r4, r22
   167e6:	57 06       	cpc	r5, r23
   167e8:	08 f0       	brcs	.+2      	; 0x167ec <realloc+0xee>
   167ea:	58 c0       	rjmp	.+176    	; 0x1689c <realloc+0x19e>
   167ec:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   167f0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   167f4:	00 97       	sbiw	r24, 0x00	; 0
   167f6:	41 f4       	brne	.+16     	; 0x16808 <realloc+0x10a>
   167f8:	8d b7       	in	r24, 0x3d	; 61
   167fa:	9e b7       	in	r25, 0x3e	; 62
   167fc:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   16800:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   16804:	84 1b       	sub	r24, r20
   16806:	95 0b       	sbc	r25, r21
   16808:	e8 17       	cp	r30, r24
   1680a:	f9 07       	cpc	r31, r25
   1680c:	08 f0       	brcs	.+2      	; 0x16810 <realloc+0x112>
   1680e:	55 c0       	rjmp	.+170    	; 0x168ba <realloc+0x1bc>
   16810:	f0 93 5a 13 	sts	0x135A, r31	; 0x80135a <__brkval+0x1>
   16814:	e0 93 59 13 	sts	0x1359, r30	; 0x801359 <__brkval>
   16818:	f9 01       	movw	r30, r18
   1681a:	71 83       	std	Z+1, r23	; 0x01
   1681c:	60 83       	st	Z, r22
   1681e:	b8 cf       	rjmp	.-144    	; 0x16790 <realloc+0x92>
   16820:	8d 91       	ld	r24, X+
   16822:	9c 91       	ld	r25, X
   16824:	11 97       	sbiw	r26, 0x01	; 1
   16826:	12 96       	adiw	r26, 0x02	; 2
   16828:	6c 90       	ld	r6, X
   1682a:	12 97       	sbiw	r26, 0x02	; 2
   1682c:	13 96       	adiw	r26, 0x03	; 3
   1682e:	7c 90       	ld	r7, X
   16830:	13 97       	sbiw	r26, 0x03	; 3
   16832:	a8 15       	cp	r26, r8
   16834:	b9 05       	cpc	r27, r9
   16836:	59 f5       	brne	.+86     	; 0x1688e <realloc+0x190>
   16838:	6c 01       	movw	r12, r24
   1683a:	42 e0       	ldi	r20, 0x02	; 2
   1683c:	c4 0e       	add	r12, r20
   1683e:	d1 1c       	adc	r13, r1
   16840:	ca 14       	cp	r12, r10
   16842:	db 04       	cpc	r13, r11
   16844:	20 f1       	brcs	.+72     	; 0x1688e <realloc+0x190>
   16846:	ac 01       	movw	r20, r24
   16848:	4a 19       	sub	r20, r10
   1684a:	5b 09       	sbc	r21, r11
   1684c:	da 01       	movw	r26, r20
   1684e:	12 96       	adiw	r26, 0x02	; 2
   16850:	15 97       	sbiw	r26, 0x05	; 5
   16852:	80 f0       	brcs	.+32     	; 0x16874 <realloc+0x176>
   16854:	62 82       	std	Z+2, r6	; 0x02
   16856:	73 82       	std	Z+3, r7	; 0x03
   16858:	51 83       	std	Z+1, r21	; 0x01
   1685a:	40 83       	st	Z, r20
   1685c:	d9 01       	movw	r26, r18
   1685e:	6d 93       	st	X+, r22
   16860:	7c 93       	st	X, r23
   16862:	e1 14       	cp	r14, r1
   16864:	f1 04       	cpc	r15, r1
   16866:	71 f0       	breq	.+28     	; 0x16884 <realloc+0x186>
   16868:	d7 01       	movw	r26, r14
   1686a:	13 96       	adiw	r26, 0x03	; 3
   1686c:	fc 93       	st	X, r31
   1686e:	ee 93       	st	-X, r30
   16870:	12 97       	sbiw	r26, 0x02	; 2
   16872:	8e cf       	rjmp	.-228    	; 0x16790 <realloc+0x92>
   16874:	22 96       	adiw	r28, 0x02	; 2
   16876:	8c 0f       	add	r24, r28
   16878:	9d 1f       	adc	r25, r29
   1687a:	f9 01       	movw	r30, r18
   1687c:	91 83       	std	Z+1, r25	; 0x01
   1687e:	80 83       	st	Z, r24
   16880:	f3 01       	movw	r30, r6
   16882:	ef cf       	rjmp	.-34     	; 0x16862 <realloc+0x164>
   16884:	f0 93 5c 13 	sts	0x135C, r31	; 0x80135c <__flp+0x1>
   16888:	e0 93 5b 13 	sts	0x135B, r30	; 0x80135b <__flp>
   1688c:	81 cf       	rjmp	.-254    	; 0x16790 <realloc+0x92>
   1688e:	48 16       	cp	r4, r24
   16890:	59 06       	cpc	r5, r25
   16892:	08 f4       	brcc	.+2      	; 0x16896 <realloc+0x198>
   16894:	2c 01       	movw	r4, r24
   16896:	7d 01       	movw	r14, r26
   16898:	d3 01       	movw	r26, r6
   1689a:	9a cf       	rjmp	.-204    	; 0x167d0 <realloc+0xd2>
   1689c:	cb 01       	movw	r24, r22
   1689e:	0e 94 53 ac 	call	0x158a6	; 0x158a6 <malloc>
   168a2:	7c 01       	movw	r14, r24
   168a4:	00 97       	sbiw	r24, 0x00	; 0
   168a6:	49 f0       	breq	.+18     	; 0x168ba <realloc+0x1bc>
   168a8:	ae 01       	movw	r20, r28
   168aa:	b8 01       	movw	r22, r16
   168ac:	0e 94 65 b4 	call	0x168ca	; 0x168ca <memcpy>
   168b0:	c8 01       	movw	r24, r16
   168b2:	0e 94 ef ac 	call	0x159de	; 0x159de <free>
   168b6:	87 01       	movw	r16, r14
   168b8:	6b cf       	rjmp	.-298    	; 0x16790 <realloc+0x92>
   168ba:	10 e0       	ldi	r17, 0x00	; 0
   168bc:	00 e0       	ldi	r16, 0x00	; 0
   168be:	68 cf       	rjmp	.-304    	; 0x16790 <realloc+0x92>

000168c0 <abort>:
abort():
   168c0:	81 e0       	ldi	r24, 0x01	; 1
   168c2:	90 e0       	ldi	r25, 0x00	; 0
   168c4:	f8 94       	cli
   168c6:	0c 94 20 b5 	jmp	0x16a40	; 0x16a40 <_exit>

000168ca <memcpy>:
memcpy():
   168ca:	fb 01       	movw	r30, r22
   168cc:	dc 01       	movw	r26, r24
   168ce:	02 c0       	rjmp	.+4      	; 0x168d4 <memcpy+0xa>
   168d0:	01 90       	ld	r0, Z+
   168d2:	0d 92       	st	X+, r0
   168d4:	41 50       	subi	r20, 0x01	; 1
   168d6:	50 40       	sbci	r21, 0x00	; 0
   168d8:	d8 f7       	brcc	.-10     	; 0x168d0 <memcpy+0x6>
   168da:	08 95       	ret

000168dc <strcat>:
strcat():
   168dc:	fb 01       	movw	r30, r22
   168de:	dc 01       	movw	r26, r24
   168e0:	0d 90       	ld	r0, X+
   168e2:	00 20       	and	r0, r0
   168e4:	e9 f7       	brne	.-6      	; 0x168e0 <strcat+0x4>
   168e6:	11 97       	sbiw	r26, 0x01	; 1
   168e8:	01 90       	ld	r0, Z+
   168ea:	0d 92       	st	X+, r0
   168ec:	00 20       	and	r0, r0
   168ee:	e1 f7       	brne	.-8      	; 0x168e8 <strcat+0xc>
   168f0:	08 95       	ret

000168f2 <strchr>:
strchr():
   168f2:	fc 01       	movw	r30, r24
   168f4:	81 91       	ld	r24, Z+
   168f6:	86 17       	cp	r24, r22
   168f8:	21 f0       	breq	.+8      	; 0x16902 <strchr+0x10>
   168fa:	88 23       	and	r24, r24
   168fc:	d9 f7       	brne	.-10     	; 0x168f4 <strchr+0x2>
   168fe:	99 27       	eor	r25, r25
   16900:	08 95       	ret
   16902:	31 97       	sbiw	r30, 0x01	; 1
   16904:	cf 01       	movw	r24, r30
   16906:	08 95       	ret

00016908 <strcmp>:
strcmp():
   16908:	fb 01       	movw	r30, r22
   1690a:	dc 01       	movw	r26, r24
   1690c:	8d 91       	ld	r24, X+
   1690e:	01 90       	ld	r0, Z+
   16910:	80 19       	sub	r24, r0
   16912:	01 10       	cpse	r0, r1
   16914:	d9 f3       	breq	.-10     	; 0x1690c <strcmp+0x4>
   16916:	99 0b       	sbc	r25, r25
   16918:	08 95       	ret

0001691a <strcpy>:
strcpy():
   1691a:	fb 01       	movw	r30, r22
   1691c:	dc 01       	movw	r26, r24
   1691e:	01 90       	ld	r0, Z+
   16920:	0d 92       	st	X+, r0
   16922:	00 20       	and	r0, r0
   16924:	e1 f7       	brne	.-8      	; 0x1691e <strcpy+0x4>
   16926:	08 95       	ret

00016928 <strncmp>:
strncmp():
   16928:	fb 01       	movw	r30, r22
   1692a:	dc 01       	movw	r26, r24
   1692c:	41 50       	subi	r20, 0x01	; 1
   1692e:	50 40       	sbci	r21, 0x00	; 0
   16930:	30 f0       	brcs	.+12     	; 0x1693e <strncmp+0x16>
   16932:	8d 91       	ld	r24, X+
   16934:	01 90       	ld	r0, Z+
   16936:	80 19       	sub	r24, r0
   16938:	19 f4       	brne	.+6      	; 0x16940 <strncmp+0x18>
   1693a:	00 20       	and	r0, r0
   1693c:	b9 f7       	brne	.-18     	; 0x1692c <strncmp+0x4>
   1693e:	88 1b       	sub	r24, r24
   16940:	99 0b       	sbc	r25, r25
   16942:	08 95       	ret

00016944 <strncpy>:
strncpy():
   16944:	fb 01       	movw	r30, r22
   16946:	dc 01       	movw	r26, r24
   16948:	41 50       	subi	r20, 0x01	; 1
   1694a:	50 40       	sbci	r21, 0x00	; 0
   1694c:	48 f0       	brcs	.+18     	; 0x16960 <strncpy+0x1c>
   1694e:	01 90       	ld	r0, Z+
   16950:	0d 92       	st	X+, r0
   16952:	00 20       	and	r0, r0
   16954:	c9 f7       	brne	.-14     	; 0x16948 <strncpy+0x4>
   16956:	01 c0       	rjmp	.+2      	; 0x1695a <strncpy+0x16>
   16958:	1d 92       	st	X+, r1
   1695a:	41 50       	subi	r20, 0x01	; 1
   1695c:	50 40       	sbci	r21, 0x00	; 0
   1695e:	e0 f7       	brcc	.-8      	; 0x16958 <strncpy+0x14>
   16960:	08 95       	ret

00016962 <printf>:
printf():
   16962:	cf 93       	push	r28
   16964:	df 93       	push	r29
   16966:	cd b7       	in	r28, 0x3d	; 61
   16968:	de b7       	in	r29, 0x3e	; 62
   1696a:	ae 01       	movw	r20, r28
   1696c:	4a 5f       	subi	r20, 0xFA	; 250
   1696e:	5f 4f       	sbci	r21, 0xFF	; 255
   16970:	fa 01       	movw	r30, r20
   16972:	61 91       	ld	r22, Z+
   16974:	71 91       	ld	r23, Z+
   16976:	af 01       	movw	r20, r30
   16978:	80 91 43 13 	lds	r24, 0x1343	; 0x801343 <__iob+0x2>
   1697c:	90 91 44 13 	lds	r25, 0x1344	; 0x801344 <__iob+0x3>
   16980:	0e 94 bc a8 	call	0x15178	; 0x15178 <vfprintf>
   16984:	df 91       	pop	r29
   16986:	cf 91       	pop	r28
   16988:	08 95       	ret

0001698a <puts>:
puts():
   1698a:	0f 93       	push	r16
   1698c:	1f 93       	push	r17
   1698e:	cf 93       	push	r28
   16990:	df 93       	push	r29
   16992:	e0 91 43 13 	lds	r30, 0x1343	; 0x801343 <__iob+0x2>
   16996:	f0 91 44 13 	lds	r31, 0x1344	; 0x801344 <__iob+0x3>
   1699a:	23 81       	ldd	r18, Z+3	; 0x03
   1699c:	ec 01       	movw	r28, r24
   1699e:	10 e0       	ldi	r17, 0x00	; 0
   169a0:	00 e0       	ldi	r16, 0x00	; 0
   169a2:	21 fd       	sbrc	r18, 1
   169a4:	08 c0       	rjmp	.+16     	; 0x169b6 <puts+0x2c>
   169a6:	0f ef       	ldi	r16, 0xFF	; 255
   169a8:	1f ef       	ldi	r17, 0xFF	; 255
   169aa:	14 c0       	rjmp	.+40     	; 0x169d4 <puts+0x4a>
   169ac:	19 95       	eicall
   169ae:	89 2b       	or	r24, r25
   169b0:	11 f0       	breq	.+4      	; 0x169b6 <puts+0x2c>
   169b2:	0f ef       	ldi	r16, 0xFF	; 255
   169b4:	1f ef       	ldi	r17, 0xFF	; 255
   169b6:	89 91       	ld	r24, Y+
   169b8:	60 91 43 13 	lds	r22, 0x1343	; 0x801343 <__iob+0x2>
   169bc:	70 91 44 13 	lds	r23, 0x1344	; 0x801344 <__iob+0x3>
   169c0:	db 01       	movw	r26, r22
   169c2:	18 96       	adiw	r26, 0x08	; 8
   169c4:	ed 91       	ld	r30, X+
   169c6:	fc 91       	ld	r31, X
   169c8:	81 11       	cpse	r24, r1
   169ca:	f0 cf       	rjmp	.-32     	; 0x169ac <puts+0x22>
   169cc:	8a e0       	ldi	r24, 0x0A	; 10
   169ce:	19 95       	eicall
   169d0:	89 2b       	or	r24, r25
   169d2:	49 f7       	brne	.-46     	; 0x169a6 <puts+0x1c>
   169d4:	c8 01       	movw	r24, r16
   169d6:	df 91       	pop	r29
   169d8:	cf 91       	pop	r28
   169da:	1f 91       	pop	r17
   169dc:	0f 91       	pop	r16
   169de:	08 95       	ret

000169e0 <sprintf>:
sprintf():
   169e0:	0f 93       	push	r16
   169e2:	1f 93       	push	r17
   169e4:	cf 93       	push	r28
   169e6:	df 93       	push	r29
   169e8:	cd b7       	in	r28, 0x3d	; 61
   169ea:	de b7       	in	r29, 0x3e	; 62
   169ec:	2e 97       	sbiw	r28, 0x0e	; 14
   169ee:	0f b6       	in	r0, 0x3f	; 63
   169f0:	f8 94       	cli
   169f2:	de bf       	out	0x3e, r29	; 62
   169f4:	0f be       	out	0x3f, r0	; 63
   169f6:	cd bf       	out	0x3d, r28	; 61
   169f8:	0e 89       	ldd	r16, Y+22	; 0x16
   169fa:	1f 89       	ldd	r17, Y+23	; 0x17
   169fc:	86 e0       	ldi	r24, 0x06	; 6
   169fe:	8c 83       	std	Y+4, r24	; 0x04
   16a00:	1a 83       	std	Y+2, r17	; 0x02
   16a02:	09 83       	std	Y+1, r16	; 0x01
   16a04:	8f ef       	ldi	r24, 0xFF	; 255
   16a06:	9f e7       	ldi	r25, 0x7F	; 127
   16a08:	9e 83       	std	Y+6, r25	; 0x06
   16a0a:	8d 83       	std	Y+5, r24	; 0x05
   16a0c:	ae 01       	movw	r20, r28
   16a0e:	46 5e       	subi	r20, 0xE6	; 230
   16a10:	5f 4f       	sbci	r21, 0xFF	; 255
   16a12:	68 8d       	ldd	r22, Y+24	; 0x18
   16a14:	79 8d       	ldd	r23, Y+25	; 0x19
   16a16:	ce 01       	movw	r24, r28
   16a18:	01 96       	adiw	r24, 0x01	; 1
   16a1a:	0e 94 bc a8 	call	0x15178	; 0x15178 <vfprintf>
   16a1e:	2f 81       	ldd	r18, Y+7	; 0x07
   16a20:	38 85       	ldd	r19, Y+8	; 0x08
   16a22:	02 0f       	add	r16, r18
   16a24:	13 1f       	adc	r17, r19
   16a26:	f8 01       	movw	r30, r16
   16a28:	10 82       	st	Z, r1
   16a2a:	2e 96       	adiw	r28, 0x0e	; 14
   16a2c:	0f b6       	in	r0, 0x3f	; 63
   16a2e:	f8 94       	cli
   16a30:	de bf       	out	0x3e, r29	; 62
   16a32:	0f be       	out	0x3f, r0	; 63
   16a34:	cd bf       	out	0x3d, r28	; 61
   16a36:	df 91       	pop	r29
   16a38:	cf 91       	pop	r28
   16a3a:	1f 91       	pop	r17
   16a3c:	0f 91       	pop	r16
   16a3e:	08 95       	ret

00016a40 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   16a40:	f8 94       	cli

00016a42 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   16a42:	ff cf       	rjmp	.-2      	; 0x16a42 <__stop_program>
