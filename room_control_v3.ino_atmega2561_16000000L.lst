
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 40 31 	jmp	0x6280	; 0x6280 <__ctors_end>
       4:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
       8:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
       c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      10:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      14:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      18:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      1c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      20:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      24:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      28:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      2c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      30:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      34:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      38:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      3c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      40:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      44:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      48:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      4c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      50:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      54:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      58:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      5c:	0c 94 f6 cb 	jmp	0x197ec	; 0x197ec <__vector_23>
      60:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      64:	0c 94 ca ce 	jmp	0x19d94	; 0x19d94 <__vector_25>
      68:	0c 94 00 cf 	jmp	0x19e00	; 0x19e00 <__vector_26>
      6c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      70:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      74:	0c 94 b6 cb 	jmp	0x1976c	; 0x1976c <__vector_29>
      78:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      7c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      80:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      84:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      88:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      8c:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      90:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      94:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      98:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      9c:	0c 94 00 c6 	jmp	0x18c00	; 0x18c00 <__vector_39>
      a0:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      a4:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      a8:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      ac:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      b0:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      b4:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      b8:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      bc:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      c0:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      c4:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>
      c8:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 67 b0 	jmp	0x160ce	; 0x160ce <EthernetUDP::remoteIP()>
      d0:	0c 94 f9 3a 	jmp	0x75f2	; 0x75f2 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
      d4:	0c 94 7f b0 	jmp	0x160fe	; 0x160fe <EthernetUDP::write(unsigned char)>
      d8:	0c 94 23 3b 	jmp	0x7646	; 0x7646 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
      dc:	0c 94 b1 6f 	jmp	0xdf62	; 0xdf62 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      e0:	0c 94 2a 80 	jmp	0x10054	; 0x10054 <serial_putc(char, __file*)>
      e4:	0c 94 a7 42 	jmp	0x854e	; 0x854e <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
      e8:	0c 94 a8 46 	jmp	0x8d50	; 0x8d50 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
      ec:	0c 94 95 b0 	jmp	0x1612a	; 0x1612a <EthernetUDP::flush()>
      f0:	0c 94 c1 c3 	jmp	0x18782	; 0x18782 <TwoWire::flush()>
      f4:	0c 94 50 cd 	jmp	0x19aa0	; 0x19aa0 <turnOffPWM+0xc0>
      f8:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
      fc:	0c 94 13 34 	jmp	0x6826	; 0x6826 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     100:	0c 94 62 96 	jmp	0x12cc4	; 0x12cc4 <LCDWIKI_KBV::Get_Height() const>
     104:	0c 94 9e 44 	jmp	0x893c	; 0x893c <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     108:	0c 94 f6 cd 	jmp	0x19bec	; 0x19bec <HardwareSerial::peek()>
     10c:	0c 94 ec c3 	jmp	0x187d8	; 0x187d8 <TwoWire::onRequestService()>
     110:	0c 94 2d a9 	jmp	0x1525a	; 0x1525a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x3a>
     114:	0c 94 bc b0 	jmp	0x16178	; 0x16178 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     118:	0c 94 81 3b 	jmp	0x7702	; 0x7702 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     11c:	0c 94 5b 3d 	jmp	0x7ab6	; 0x7ab6 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     120:	0c 94 26 36 	jmp	0x6c4c	; 0x6c4c <menu_tds_save_period(unsigned int, float, unsigned char)>
     124:	0c 94 d8 b1 	jmp	0x163b0	; 0x163b0 <EthernetUDP::beginPacket(char const*, unsigned int)>
     128:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 18 95 	jmp	0x12a30	; 0x12a30 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     130:	0c 94 54 cd 	jmp	0x19aa8	; 0x19aa8 <turnOffPWM+0xc8>
     134:	0c 94 70 4d 	jmp	0x9ae0	; 0x9ae0 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     138:	0c 94 3a cd 	jmp	0x19a74	; 0x19a74 <turnOffPWM+0x94>
     13c:	0c 94 48 cd 	jmp	0x19a90	; 0x19a90 <turnOffPWM+0xb0>
     140:	0c 94 83 ae 	jmp	0x15d06	; 0x15d06 <EthernetClient::operator bool()>
     144:	0c 94 07 33 	jmp	0x660e	; 0x660e <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     148:	0c 94 f1 c4 	jmp	0x189e2	; 0x189e2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     14c:	0c 94 10 42 	jmp	0x8420	; 0x8420 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     150:	0c 94 5f a9 	jmp	0x152be	; 0x152be <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x9e>
     154:	0c 94 66 96 	jmp	0x12ccc	; 0x12ccc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     158:	0c 94 7b 42 	jmp	0x84f6	; 0x84f6 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     15c:	0c 94 7a 37 	jmp	0x6ef4	; 0x6ef4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 d3 aa 	jmp	0x155a6	; 0x155a6 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>
     164:	0c 94 53 cb 	jmp	0x196a6	; 0x196a6 <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>
     168:	0c 94 82 38 	jmp	0x7104	; 0x7104 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 92 98 	jmp	0x13124	; 0x13124 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     170:	0c 94 26 cd 	jmp	0x19a4c	; 0x19a4c <turnOffPWM+0x6c>
     174:	0c 94 77 b0 	jmp	0x160ee	; 0x160ee <EthernetUDP::remotePort()>
     178:	0c 94 fe 3a 	jmp	0x75fc	; 0x75fc <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     17c:	0c 94 dc b0 	jmp	0x161b8	; 0x161b8 <EthernetUDP::read()>
     180:	0c 94 1b af 	jmp	0x15e36	; 0x15e36 <EthernetClient::read()>
     184:	0c 94 da 3b 	jmp	0x77b4	; 0x77b4 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 52 33 	jmp	0x66a4	; 0x66a4 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     18c:	0c 94 34 35 	jmp	0x6a68	; 0x6a68 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>
     190:	0c 94 93 38 	jmp	0x7126	; 0x7126 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 98 c3 	jmp	0x18730	; 0x18730 <TwoWire::available()>
     198:	0c 94 0d 38 	jmp	0x701a	; 0x701a <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     19c:	0c 94 45 36 	jmp	0x6c8a	; 0x6c8a <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)>
     1a0:	0c 94 42 cd 	jmp	0x19a84	; 0x19a84 <turnOffPWM+0xa4>
     1a4:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>
     1a8:	0c 94 b0 3d 	jmp	0x7b60	; 0x7b60 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1ac:	0c 94 39 36 	jmp	0x6c72	; 0x6c72 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     1b0:	0c 94 3d b1 	jmp	0x1627a	; 0x1627a <EthernetUDP::parsePacket()>
     1b4:	0c 94 5c af 	jmp	0x15eb8	; 0x15eb8 <EthernetClient::flush()>
     1b8:	0c 94 6e 33 	jmp	0x66dc	; 0x66dc <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 f8 c3 	jmp	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
     1c0:	0c 94 3b 36 	jmp	0x6c76	; 0x6c76 <button_click_set_show_default_ring_program(unsigned int, unsigned int, unsigned char)>
     1c4:	0c 94 60 b0 	jmp	0x160c0	; 0x160c0 <EthernetUDP::read(char*, unsigned int)>
     1c8:	0c 94 c2 42 	jmp	0x8584	; 0x8584 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     1cc:	0c 94 25 b0 	jmp	0x1604a	; 0x1604a <EthernetClient::connected()>
     1d0:	0c 94 27 34 	jmp	0x684e	; 0x684e <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     1d4:	0c 94 ba 3c 	jmp	0x7974	; 0x7974 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)>
     1d8:	0c 94 c4 b0 	jmp	0x16188	; 0x16188 <EthernetUDP::endPacket()>
     1dc:	0c 94 c8 3b 	jmp	0x7790	; 0x7790 <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)>
     1e0:	0c 94 48 b0 	jmp	0x16090	; 0x16090 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>
     1e4:	0c 94 29 34 	jmp	0x6852	; 0x6852 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     1e8:	0c 94 57 38 	jmp	0x70ae	; 0x70ae <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     1ec:	0c 94 7b b0 	jmp	0x160f6	; 0x160f6 <EthernetUDP::available()>
     1f0:	0c 94 05 3b 	jmp	0x760a	; 0x760a <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     1f4:	0c 94 87 a9 	jmp	0x1530e	; 0x1530e <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xee>
     1f8:	0c 94 71 38 	jmp	0x70e2	; 0x70e2 <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)>
     1fc:	0c 94 dd 38 	jmp	0x71ba	; 0x71ba <nullfce(unsigned int, unsigned int, unsigned char)>
     200:	0c 94 93 a9 	jmp	0x15326	; 0x15326 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x106>
     204:	0c 94 27 ce 	jmp	0x19c4e	; 0x19c4e <serialEventRun()>
     208:	0c 94 e7 37 	jmp	0x6fce	; 0x6fce <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)>
     20c:	0c 94 9f c3 	jmp	0x1873e	; 0x1873e <TwoWire::read()>
     210:	0c 94 8e b1 	jmp	0x1631c	; 0x1631c <EthernetUDP::begin(unsigned int)>
     214:	0c 94 8b ae 	jmp	0x15d16	; 0x15d16 <EthernetClient::operator==(EthernetClient const&)>
     218:	0c 94 10 33 	jmp	0x6620	; 0x6620 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     21c:	0c 94 74 33 	jmp	0x66e8	; 0x66e8 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     220:	0c 94 b8 43 	jmp	0x8770	; 0x8770 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     224:	0c 94 06 b1 	jmp	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
     228:	0c 94 35 af 	jmp	0x15e6a	; 0x15e6a <EthernetClient::read(unsigned char*, unsigned int)>
     22c:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <click_thermostat_set_ring_via_dialog(unsigned int, unsigned int, unsigned char)>
     230:	0c 94 54 33 	jmp	0x66a8	; 0x66a8 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 28 ab 	jmp	0x15650	; 0x15650 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>
     238:	0c 94 06 95 	jmp	0x12a0c	; 0x12a0c <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     23c:	0c 94 6e 3c 	jmp	0x78dc	; 0x78dc <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>
     240:	0c 94 41 b2 	jmp	0x16482	; 0x16482 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>
     244:	0c 94 18 ce 	jmp	0x19c30	; 0x19c30 <HardwareSerial::availableForWrite()>
     248:	0c 94 79 a9 	jmp	0x152f2	; 0x152f2 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xd2>
     24c:	0c 94 e5 af 	jmp	0x15fca	; 0x15fca <EthernetClient::stop()>
     250:	0c 94 25 34 	jmp	0x684a	; 0x684a <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     254:	0c 94 2a cf 	jmp	0x19e54	; 0x19e54 <Serial0_available()>
     258:	0c 94 04 c1 	jmp	0x18208	; 0x18208 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>
     25c:	0c 94 f4 ae 	jmp	0x15de8	; 0x15de8 <EthernetClient::write(unsigned char const*, unsigned int)>
     260:	0c 94 37 33 	jmp	0x666e	; 0x666e <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     264:	0c 94 60 ae 	jmp	0x15cc0	; 0x15cc0 <Print::availableForWrite()>
     268:	0c 94 f2 32 	jmp	0x65e4	; 0x65e4 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     26c:	0c 94 96 ae 	jmp	0x15d2c	; 0x15d2c <EthernetClient::connect(char const*, unsigned int)>
     270:	0c 94 11 33 	jmp	0x6622	; 0x6622 <a2d_complete(unsigned char, unsigned int)>
     274:	0c 94 a3 32 	jmp	0x6546	; 0x6546 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     278:	0c 94 6d a9 	jmp	0x152da	; 0x152da <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xba>
     27c:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     280:	0c 94 e9 36 	jmp	0x6dd2	; 0x6dd2 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     284:	0c 94 65 75 	jmp	0xeaca	; 0xeaca <mqtt_callback(char*, unsigned char*, unsigned int)>
     288:	0c 94 a6 a9 	jmp	0x1534c	; 0x1534c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x12c>
     28c:	0c 94 9b 3c 	jmp	0x7936	; 0x7936 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     290:	0c 94 ae 37 	jmp	0x6f5c	; 0x6f5c <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     294:	0c 94 b8 86 	jmp	0x10d70	; 0x10d70 <printf_via_mqtt(char, __file*)>
     298:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 4c cd 	jmp	0x19a98	; 0x19a98 <turnOffPWM+0xb8>
     2a0:	0c 94 38 40 	jmp	0x8070	; 0x8070 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2a4:	0c 94 b2 c3 	jmp	0x18764	; 0x18764 <TwoWire::peek()>
     2a8:	0c 94 b3 9e 	jmp	0x13d66	; 0x13d66 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     2ac:	0c 94 2c 87 	jmp	0x10e58	; 0x10e58 <_GLOBAL__sub_I_scan_rf_net_enable>
     2b0:	0c 94 0e cd 	jmp	0x19a1c	; 0x19a1c <turnOffPWM+0x3c>
     2b4:	0c 94 33 3e 	jmp	0x7c66	; 0x7c66 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2b8:	0c 94 bb 91 	jmp	0x12376	; 0x12376 <_GLOBAL__sub_I_PID_Input>
     2bc:	0c 94 22 cd 	jmp	0x19a44	; 0x19a44 <turnOffPWM+0x64>
     2c0:	0c 94 89 46 	jmp	0x8d12	; 0x8d12 <button_click_deactivate_term_ring(unsigned int, unsigned int, unsigned char)>
     2c4:	0c 94 45 38 	jmp	0x708a	; 0x708a <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 70 44 	jmp	0x88e0	; 0x88e0 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     2cc:	0c 94 ce cf 	jmp	0x19f9c	; 0x19f9c <Print::write(unsigned char const*, unsigned int)>
     2d0:	0c 94 53 3f 	jmp	0x7ea6	; 0x7ea6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2d4:	0c 94 53 cd 	jmp	0x19aa6	; 0x19aa6 <turnOffPWM+0xc6>
     2d8:	0c 94 61 cf 	jmp	0x19ec2	; 0x19ec2 <IPAddress::printTo(Print&) const>
     2dc:	0c 94 63 ce 	jmp	0x19cc6	; 0x19cc6 <HardwareSerial::flush()>
     2e0:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     2e4:	0c 94 b7 32 	jmp	0x656e	; 0x656e <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 a1 a9 	jmp	0x15342	; 0x15342 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x122>
     2ec:	0c 94 4b ae 	jmp	0x15c96	; 0x15c96 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>
     2f0:	0c 94 14 cd 	jmp	0x19a28	; 0x19a28 <turnOffPWM+0x48>
     2f4:	0c 94 fc 35 	jmp	0x6bf8	; 0x6bf8 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 cb 32 	jmp	0x6596	; 0x6596 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     2fc:	0c 94 6f 7f 	jmp	0xfede	; 0xfede <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>
     300:	0c 94 2c cd 	jmp	0x19a58	; 0x19a58 <turnOffPWM+0x78>
     304:	0c 94 73 a9 	jmp	0x152e6	; 0x152e6 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xc6>
     308:	0c 94 ca 37 	jmp	0x6f94	; 0x6f94 <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>
     30c:	0c 94 85 b6 	jmp	0x16d0a	; 0x16d0a <_GLOBAL__sub_I_w5500>
     310:	0c 94 52 a9 	jmp	0x152a4	; 0x152a4 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x84>
     314:	0c 94 6d ae 	jmp	0x15cda	; 0x15cda <EthernetClient::write(unsigned char)>
     318:	0c 94 fe 32 	jmp	0x65fc	; 0x65fc <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     31c:	0c 94 30 cd 	jmp	0x19a60	; 0x19a60 <turnOffPWM+0x80>
     320:	0c 94 80 af 	jmp	0x15f00	; 0x15f00 <EthernetClient::connect(IPAddress, unsigned int)>
     324:	0c 94 23 34 	jmp	0x6846	; 0x6846 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     328:	0c 94 6a 34 	jmp	0x68d4	; 0x68d4 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     32c:	0c 94 36 b2 	jmp	0x1646c	; 0x1646c <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>
     330:	0c 94 46 3c 	jmp	0x788c	; 0x788c <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     334:	0c 94 cb 40 	jmp	0x8196	; 0x8196 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     338:	0c 94 34 cd 	jmp	0x19a68	; 0x19a68 <turnOffPWM+0x88>
     33c:	0c 94 f8 d0 	jmp	0x1a1f0	; 0x1a1f0 <__cxa_pure_virtual>
     340:	0c 94 bd 32 	jmp	0x657a	; 0x657a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     344:	0c 94 12 44 	jmp	0x8824	; 0x8824 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     348:	0c 94 59 41 	jmp	0x82b2	; 0x82b2 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     34c:	0c 94 1c cd 	jmp	0x19a38	; 0x19a38 <turnOffPWM+0x58>
     350:	0c 94 ea 3c 	jmp	0x79d4	; 0x79d4 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 31 4f 	jmp	0x9e62	; 0x9e62 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     358:	0c 94 c8 b0 	jmp	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
     35c:	0c 94 10 af 	jmp	0x15e20	; 0x15e20 <EthernetClient::available()>
     360:	0c 94 d2 3b 	jmp	0x77a4	; 0x77a4 <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)>
     364:	0c 94 47 33 	jmp	0x668e	; 0x668e <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     368:	0c 94 25 b1 	jmp	0x1624a	; 0x1624a <EthernetUDP::peek()>
     36c:	0c 94 39 af 	jmp	0x15e72	; 0x15e72 <EthernetClient::peek()>
     370:	0c 94 61 33 	jmp	0x66c2	; 0x66c2 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     374:	0c 94 07 3c 	jmp	0x780e	; 0x780e <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     378:	0c 94 40 36 	jmp	0x6c80	; 0x6c80 <button_click_deassociate_default_ring_program_for_term(unsigned int, unsigned int, unsigned char)>
     37c:	0c 94 8d a9 	jmp	0x1531a	; 0x1531a <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xfa>
     380:	0c 94 d6 37 	jmp	0x6fac	; 0x6fac <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)>
     384:	0c 94 83 ce 	jmp	0x19d06	; 0x19d06 <HardwareSerial::write(unsigned char)>
     388:	0c 94 94 46 	jmp	0x8d28	; 0x8d28 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
     38c:	0c 94 f1 3c 	jmp	0x79e2	; 0x79e2 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     390:	0c 94 f0 35 	jmp	0x6be0	; 0x6be0 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>
     394:	0c 94 a7 b0 	jmp	0x1614e	; 0x1614e <EthernetUDP::stop()>
     398:	0c 94 43 3b 	jmp	0x7686	; 0x7686 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     39c:	0c 94 b9 32 	jmp	0x6572	; 0x6572 <display_enable_show(unsigned int, unsigned int, unsigned char)>
     3a0:	0c 94 85 33 	jmp	0x670a	; 0x670a <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3a4:	0c 94 5d 36 	jmp	0x6cba	; 0x6cba <button_click_deassociate_default_ring_input_sensor_for_term(unsigned int, unsigned int, unsigned char)>
     3a8:	0c 94 1b 87 	jmp	0x10e36	; 0x10e36 <_GLOBAL__sub_I_mqtt_error>
     3ac:	0c 94 50 94 	jmp	0x128a0	; 0x128a0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     3b0:	0c 94 c2 c3 	jmp	0x18784	; 0x18784 <TwoWire::onReceiveService(unsigned char*, int)>
     3b4:	0c 94 58 35 	jmp	0x6ab0	; 0x6ab0 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     3b8:	0c 94 27 c4 	jmp	0x1884e	; 0x1884e <TwoWire::write(unsigned char const*, unsigned int)>
     3bc:	0c 94 63 ae 	jmp	0x15cc6	; 0x15cc6 <EthernetClient::operator!=(EthernetClient const&)>
     3c0:	0c 94 f5 32 	jmp	0x65ea	; 0x65ea <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     3c4:	0c 94 db 38 	jmp	0x71b6	; 0x71b6 <get_function_budik_enabled(unsigned int, unsigned int, unsigned char)>
     3c8:	0c 94 a4 35 	jmp	0x6b48	; 0x6b48 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     3cc:	0c 94 4c a9 	jmp	0x15298	; 0x15298 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x78>
     3d0:	0c 94 0d 36 	jmp	0x6c1a	; 0x6c1a <menu_tds_save_offset(unsigned int, float, unsigned char)>
     3d4:	0c 94 38 37 	jmp	0x6e70	; 0x6e70 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     3d8:	0c 94 76 43 	jmp	0x86ec	; 0x86ec <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     3dc:	0c 94 3e 45 	jmp	0x8a7c	; 0x8a7c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     3e0:	0c 94 18 cd 	jmp	0x19a30	; 0x19a30 <turnOffPWM+0x50>
     3e4:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     3e8:	0c 94 5e 96 	jmp	0x12cbc	; 0x12cbc <LCDWIKI_KBV::Get_Width() const>
     3ec:	0c 94 3e cd 	jmp	0x19a7c	; 0x19a7c <turnOffPWM+0x9c>
     3f0:	0c 94 5e b0 	jmp	0x160bc	; 0x160bc <UDP::beginMulticast(IPAddress, unsigned int)>
     3f4:	0c 94 dc 3a 	jmp	0x75b8	; 0x75b8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     3f8:	0c 94 53 b0 	jmp	0x160a6	; 0x160a6 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>
     3fc:	0c 94 ea cd 	jmp	0x19bd4	; 0x19bd4 <HardwareSerial::available()>
     400:	0c 94 c8 3d 	jmp	0x7b90	; 0x7b90 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     404:	0c 94 34 cf 	jmp	0x19e68	; 0x19e68 <_GLOBAL__sub_I___vector_25>
     408:	0c 94 04 ce 	jmp	0x19c08	; 0x19c08 <HardwareSerial::read()>
     40c:	0c 94 c0 37 	jmp	0x6f80	; 0x6f80 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)>

00000410 <__trampolines_end>:
__trampolines_end():
     410:	4e 41       	sbci	r20, 0x1E	; 30
     412:	4e 49       	Address 0x0000000000000412 is out of bounds.
.word	0xffff	; ????

00000413 <pstr_inity>:
     413:	49 4e 49 54 59                                      INITY

00000418 <pstr_inf>:
     418:	49 4e 46                                            INF

0000041b <pwr_m10>:
     41b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     42b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000433 <pwr_p10>:
     433:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     443:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     453:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     463:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     473:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     483:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     493:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     4a3:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     4b3:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     4c3:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     4d3:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     4e3:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     4f3:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     503:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     513:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     523:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     533:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     543:	3d 27                                               ='

00000545 <Menu_All>:
     545:	0a 06 06 00 08 5b 7d 59 22 01 96 00 aa 00 28 00     .....[}Y".....(.
     555:	02 05 dc 3a 08 b9 32 87 59 22 01 5a 00 aa 00 28     ...:..2.Y".Z...(
     565:	00 02 01 dc 3a 08 b9 32 d5 59 22 01 1e 00 aa 00     ....:..2.Y".....
     575:	28 00 02 02 dc 3a 08 b9 32 00 00 00 00 00 00 00     (....:..2.......
	...
     5f5:	41 59 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     AY....R.<.......
     605:	45 38 82 38 0a b9 32 27 59 64 00 dc 00 52 00 3c     E8.8..2'Yd...R.<
     615:	00 03 00 f8 ff ff 01 45 38 82 38 0a b9 32 0d 59     .......E8.8..2.Y
     625:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 45 38     ....R.<.......E8
     635:	82 38 0a b9 32 f1 58 18 01 dc 00 52 00 3c 00 03     .8..2.X....R.<..
     645:	e0 ff ff ff 02 45 38 82 38 0a b9 32 d9 58 72 01     .....E8.8..2.Xr.
     655:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 45 38 82 38     ..R.<.......E8.8
     665:	0a b9 32 0a 00 82 00 00 b1 6f 00 00 00 00 0c dd     ..2......o......
     675:	38 b9 32 1c 56 18 01 22 01 00 59 41 00 00 00 00     8.2.V.."..YA....
     685:	0c dd 38 b9 32 1c 56 0a 00 1e 00 00 cb 40 00 00     ..8.2.V......@..
     695:	00 00 09 dd 38 b9 32 1c 56 00 00 00 00 00 00 00     ....8.2.V.......
	...
     805:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     815:	40 01 01 ff ff 08 f5 32 fe 32 07 33 b7 32 d5 59     @......2.2.3.2.Y
     825:	65 58 0a 00 28 00 be 00 28 00 02 10 dc 3a 08 b9     eX..(...(....:..
     835:	32 57 58 0a 00 64 00 be 00 28 00 02 00 dd 38 08     2WX..d...(....8.
     845:	b9 32 47 58 0a 00 a0 00 be 00 28 00 02 00 dd 38     .2GX......(....8
     855:	08 b9 32 45 59 0a 00 dc 00 be 00 28 00 02 00 d2     ..2EY......(....
     865:	3a 08 b9 32 2a 58 18 01 64 00 be 00 28 00 02 06     :..2*X..d...(...
     875:	dc 3a 08 b9 32 39 58 18 01 28 00 be 00 28 00 02     .:..29X..(...(..
     885:	03 dc 3a 08 b9 32 ed 56 18 01 a0 00 be 00 28 00     ..:..2.V......(.
     895:	01 08 dc 3a 08 b9 32 83 56 18 01 dc 00 be 00 28     ...:..2.V......(
     8a5:	00 01 0f dc 3a 08 b9 32 00 00 00 00 00 00 00 00     ....:..2........
	...
     941:	00 18 01 22 01 00 59 41 00 00 00 00 0c dd 38 b9     ..."..YA......8.
     951:	32 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2.V.............
	...
     add:	00 00 00 08 00 01 00 00 00 00 00 02 00 00 00 00     ................
     aed:	e0 01 40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32     ..@......2.2.2.2
     afd:	87 59 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     .YEY......(....:
     b0d:	08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
	...
     c19:	00 00 00 18 01 22 01 00 59 41 00 00 00 00 0c dd     ....."..YA......
     c29:	38 b9 32 1c 56 00 00 00 00 00 00 00 00 00 00 00     8.2.V...........
	...
     c61:	00 00 00 4a 59 0a 00 28 00 be 00 78 00 02 00 00     ...JY..(...x....
     c71:	00 00 01 dd 38 db 38 f0 35 08 00 00 00 00 00 00     ....8.8.5.......
	...
     db9:	00 01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01     ................
     dc9:	40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32 39 58     @......2.2.2.29X
     dd9:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
     de9:	32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
     ef5:	00 18 01 22 01 00 59 41 00 00 00 00 0c dd 38 b9     ..."..YA......8.
     f05:	32 1c 56 9a 01 48 00 00 85 33 28 00 7e 00 08 dd     2.V..H...3(.~...
     f15:	38 b9 32 1c 56 dc 00 14 00 00 74 33 f0 00 f0 00     8.2.V.....t3....
     f25:	08 dd 38 b9 32 1c 56 00 00 00 00 00 00 00 00 00     ..8.2.V.........
	...
     f81:	00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01     ....#...7..<<...
     f91:	00 01 62 36 07 3c 54 33 08 00 00 00 00 00 00 00     ..b6.<T3........
	...
     fb1:	2b 9a 01 1e 00 28 00 28 00 02 00 47 33 08 b9 32     +....(.(...G3..2
     fc1:	2d 9a 01 c8 00 28 00 28 00 02 00 37 33 08 b9 32     -....(.(...73..2
	...
    1091:	00 00 00 01 00 03 00 01 02 00 00 03 00 00 00 00     ................
    10a1:	e0 01 40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32     ..@......2.2.2.2
    10b1:	0f 58 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     .XEY......(....:
    10c1:	08 b9 32 87 57 18 01 be 00 be 00 28 00 02 00 f9     ..2.W......(....
    10d1:	3a 08 b9 32 5a 57 18 01 8c 00 be 00 28 00 02 00     :..2ZW......(...
    10e1:	43 3b 08 b9 32 4b 57 18 01 5a 00 be 00 28 00 02     C;..2KW..Z...(..
    10f1:	00 46 3c 08 b9 32 3b 57 18 01 28 00 be 00 28 00     .F<..2;W..(...(.
    1101:	02 00 81 3b 08 b9 32 00 00 00 00 00 00 00 00 00     ...;..2.........
	...
    11cd:	00 00 00 18 01 22 01 00 59 41 00 00 00 00 0c dd     ....."..YA......
    11dd:	38 b9 32 1c 56 14 00 14 00 00 33 3e 00 00 00 00     8.2.V.....3>....
    11ed:	08 dd 38 b9 32 1c 56 14 00 14 00 00 c8 3d 00 00     ..8.2.V......=..
    11fd:	00 00 0c dd 38 b9 32 1c 56 00 00 00 00 00 00 00     ....8.2.V.......
	...
    136d:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    137d:	40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32 62 56     @......2.2.2.2bV
    138d:	42 56 0a 00 c8 00 82 00 28 00 02 00 05 3b 08 b9     BV......(....;..
    139d:	32 49 56 96 00 c8 00 82 00 28 00 02 00 d2 3a 08     2IV......(....:.
    13ad:	b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    14a9:	00 64 00 2d 00 00 53 3f b4 00 28 00 08 dd 38 b9     .d.-..S?..(...8.
    14b9:	32 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2.V.............
	...
    1565:	2b 3c 00 2d 00 28 00 28 00 02 00 a4 35 08 b9 32     +<.-.(.(....5..2
    1575:	2d 18 01 2d 00 28 00 28 00 02 00 58 35 08 b9 32     -..-.(.(...X5..2
	...
    1645:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    1655:	cc 01 04 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32     .........2.2.2.2
    1665:	ad 56 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     .VEY......(....:
    1675:	08 b9 32 69 57 d2 00 dc 00 be 00 28 00 02 00 40     ..2iW......(...@
    1685:	36 08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00     6..2............
	...
    1901:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    1911:	ff 82 3c 02 03 03 ff 00 e7 37 3b 36 d6 37 71 38     ..<......7;6.7q8
    1921:	08 02 00 00 00 00 00 00 01 0d 0a 00 0a 00 cc 01     ................
    1931:	2c 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32 9a 56     ,......2.2.2.2.V
    1941:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    1951:	32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    1bf9:	00 00 00 01 00 00 00 00 00 00 00 0e 0a 00 0a 00     ................
    1c09:	cc 01 2c 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32     ..,......2.2.2.2
    1c19:	83 56 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     .VEY......(....:
    1c29:	08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
	...
    1ed5:	00 01 00 00 00 00 00 00 00 0f 00 00 00 00 e0 01     ................
    1ee5:	40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32 65 58     @......2.2.2.2eX
    1ef5:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    1f05:	32 6d 56 0a 00 28 00 be 00 28 00 01 00 70 4d 08     2mV..(...(...pM.
    1f15:	b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    21ad:	00 00 00 02 00 00 00 00 00 00 00 10 00 00 00 00     ................
    21bd:	e0 01 40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32     ..@......2.2.2.2
    21cd:	57 56 42 56 0a 00 c8 00 82 00 28 00 02 00 fe 3a     WVBV......(....:
    21dd:	08 b9 32 49 56 96 00 c8 00 82 00 28 00 02 00 d2     ..2IV......(....
    21ed:	3a 08 b9 32 38 56 2c 01 c8 00 82 00 28 00 02 00     :..28V,.....(...
    21fd:	fc 35 08 b9 32 2d 56 40 01 23 00 28 00 28 00 02     .5..2-V@.#.(.(..
    220d:	00 f2 32 08 b9 32 2b 56 6d 01 23 00 28 00 28 00     ..2..2+Vm.#.(.(.
    221d:	02 01 f2 32 08 b9 32 29 56 9a 01 23 00 28 00 28     ...2..2)V..#.(.(
    222d:	00 02 02 f2 32 08 b9 32 00 00 00 00 00 00 00 00     ....2..2........
	...
    22e9:	00 00 00 0a 00 23 00 00 38 40 2c 01 28 00 08 dd     .....#..8@,.(...
    22f9:	38 b9 32 1c 56 00 00 00 00 00 00 00 00 00 00 00     8.2.V...........
	...
    2425:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    2435:	00 03 cb 32 f1 3c eb 32 08 00 00 00 00 00 00 00     ...2.<.2........
	...
    2489:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    2499:	04 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32 62 56     .......2.2.2.2bV
    24a9:	42 56 0a 00 c8 00 82 00 28 00 02 00 fe 3a 08 b9     BV......(....:..
    24b9:	32 49 56 96 00 c8 00 82 00 28 00 02 00 d2 3a 08     2IV......(....:.
    24c9:	b9 32 38 56 2c 01 c8 00 82 00 28 00 02 00 fc 35     .28V,.....(....5
    24d9:	08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
	...
    25c5:	00 0a 00 23 00 00 38 40 2c 01 28 00 08 dd 38 b9     ...#..8@,.(...8.
    25d5:	32 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2.V.............
	...
    2701:	0a 00 3c 00 1e 00 1e 00 02 28 28 02 09 00 00 02     ..<......((.....
    2711:	bd 32 ea 3c bb 32 08 00 00 00 00 00 00 00 00 00     .2.<.2..........
	...
    2761:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    2771:	cc 01 04 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32     .........2.2.2.2
    2781:	62 56 53 56 1e 00 3c 00 64 00 28 00 02 00 23 3b     bVSV..<.d.(...#;
    2791:	08 b9 32 50 56 fa 00 3c 00 64 00 28 00 02 00 d2     ..2PV..<.d.(....
    27a1:	3a 08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00     :..2............
	...
    289d:	00 00 00 14 00 23 00 00 b0 3d 00 00 00 00 08 dd     .....#...=......
    28ad:	38 b9 32 1c 56 00 00 00 00 00 00 00 00 00 00 00     8.2.V...........
	...
    2a3d:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    2a4d:	8c 00 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32 7d 59     .......2.2.2.2}Y
    2a5d:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    2a6d:	32 c0 59 0a 00 a0 00 be 00 28 00 01 09 d2 3b 08     2.Y......(....;.
    2a7d:	b9 32 ad 56 f0 00 28 00 be 00 28 00 01 0d dc 3a     .2.V..(...(....:
    2a8d:	08 c0 37 9a 56 f0 00 5a 00 be 00 28 00 01 0e dc     ..7.V..Z...(....
    2a9d:	3a 08 c0 37 00 00 00 00 00 00 00 00 00 00 00 00     :..7............
	...
    2b05:	00 00 c3 58 f0 00 5a 00 64 00 28 00 01 00 f8 ff     ...X..Z.d.(.....
    2b15:	ff 03 57 38 93 38 0a ae 37 ba 58 68 01 5a 00 64     ..W8.8..7.Xh.Z.d
    2b25:	00 28 00 01 1f 00 ff ff 05 57 38 93 38 0a ae 37     .(.......W8.8..7
	...
    2b79:	00 18 01 22 01 00 59 41 00 00 00 00 0c dd 38 b9     ..."..YA......8.
    2b89:	32 1c 56 8c 00 05 00 00 5b 3d 00 00 00 00 08 dd     2.V.....[=......
    2b99:	38 b9 32 1c 56 18 01 28 00 00 53 3f 8c 00 28 00     8.2.V..(..S?..(.
    2ba9:	08 dd 38 ae 37 1c 56 00 00 00 00 00 00 00 00 00     ..8.7.V.........
	...
    2c05:	00 00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01     ....(...(.......
    2c15:	00 01 38 37 00 3c 10 33 08 0a 00 64 00 be 00 28     ..87.<.3...d...(
    2c25:	00 01 01 01 00 01 01 00 01 31 4f c8 3b 10 33 08     .........1O.;.3.
    2c35:	2b a4 01 28 00 28 00 28 00 02 00 a4 35 08 ae 37     +..(.(.(....5..7
    2c45:	2d f0 00 28 00 28 00 28 00 02 00 58 35 08 ae 37     -..(.(.(...X5..7
	...
    2d15:	00 00 00 04 02 03 00 02 02 00 00 05 00 00 00 00     ................
    2d25:	e0 01 40 01 01 ff ff 08 b7 32 b7 32 b7 32 2c 34     ..@......2.2.2,4
    2d35:	2a 58 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     *XEY......(....:
    2d45:	08 b9 32 95 57 0a 00 28 00 be 00 28 00 01 00 12     ..2.W..(...(....
    2d55:	44 08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00     D..2............
	...
    2e51:	00 00 00 dc 00 14 00 00 74 33 f0 00 f0 00 08 dd     ........t3......
    2e61:	38 b9 32 1c 56 18 01 22 01 00 59 41 00 00 00 00     8.2.V.."..YA....
    2e71:	0c dd 38 b9 32 1c 56 9a 01 48 00 01 85 33 28 00     ..8.2.V..H...3(.
    2e81:	7e 00 08 dd 38 b9 32 1c 56 00 00 00 00 00 00 00     ~...8.2.V.......
	...
    2ee1:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    2ef1:	7b 42 a7 42 52 33 08 00 00 00 00 00 00 00 00 00     {B.BR3..........
	...
    2f0d:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 47 33 08     ..+....(.(...G3.
    2f1d:	b9 32 2d 9a 01 c8 00 28 00 28 00 02 01 37 33 08     .2-....(.(...73.
    2f2d:	b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    2ff1:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    3001:	40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32 2a 58     @......2.2.2.2*X
    3011:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    3021:	32 87 57 18 01 5a 00 be 00 28 00 02 00 76 43 08     2.W..Z...(...vC.
    3031:	b9 32 4b 57 18 01 28 00 be 00 28 00 02 00 10 42     .2KW..(...(....B
    3041:	08 b9 32 2b 57 18 01 8c 00 be 00 28 00 02 00 b8     ..2+W......(....
    3051:	43 08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00     C..2............
	...
    312d:	00 14 00 14 00 00 3e 45 00 00 00 00 0c dd 38 b9     ......>E......8.
    313d:	32 1c 56 00 00 00 00 00 00 00 00 00 00 00 00 00     2.V.............
	...
    32c9:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    32d9:	e0 01 40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32     ..@......2.2.2.2
    32e9:	ed 56 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     .VEY......(....:
    32f9:	08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
	...
    3405:	00 00 00 18 01 22 01 00 59 41 00 00 00 00 0c dd     ....."..YA......
    3415:	38 b9 32 1c 56 9a 01 48 00 02 85 33 28 00 56 00     8.2.V..H...3(.V.
    3425:	08 dd 38 b9 32 1c 56 05 00 1e 00 00 74 33 cc 01     ..8.2.V.....t3..
    3435:	b4 00 08 dd 38 b9 32 1c 56 00 00 00 00 00 00 00     ....8.2.V.......
	...
    34c1:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 47 33 08     ..+....(.(...G3.
    34d1:	b9 32 2d 9a 01 a0 00 28 00 28 00 02 02 37 33 08     .2-....(.(...73.
    34e1:	b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    3585:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    3595:	ff 82 50 02 03 02 02 00 c2 42 a8 46 61 33 6e 33     ..P......B.Fa3n3
    35a5:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    35b5:	40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32 60 59     @......2.2.2.2`Y
    35c5:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    35d5:	32 4b 57 18 01 28 00 be 00 28 00 02 00 6e 3c 08     2KW..(...(...n<.
    35e5:	b9 32 d9 57 18 01 64 00 be 00 28 00 02 0b dc 3a     .2.W..d...(....:
    35f5:	08 b9 32 c9 57 18 01 a0 00 be 00 28 00 01 00 dd     ..2.W......(....
    3605:	38 08 b9 32 bf 57 18 01 dc 00 be 00 28 00 02 0c     8..2.W......(...
    3615:	dc 3a 08 b9 32 74 58 0a 00 28 00 be 00 28 00 01     .:..2tX..(...(..
    3625:	00 89 46 08 b9 32 00 00 00 00 00 00 00 00 00 00     ..F..2..........
	...
    36e1:	00 18 01 22 01 00 59 41 00 00 00 00 0c dd 38 b9     ..."..YA......8.
    36f1:	32 1c 56 8c 00 05 00 00 5b 3d 00 00 00 00 08 dd     2.V.....[=......
    3701:	38 b9 32 1c 56 00 00 00 00 00 00 00 00 00 00 00     8.2.V...........
	...
    387d:	00 00 00 06 00 02 00 00 00 00 00 09 00 00 00 00     ................
    388d:	e0 01 40 01 01 ff ff 08 b7 32 b7 32 b7 32 b7 32     ..@......2.2.2.2
    389d:	d7 56 45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a     .VEY......(....:
    38ad:	08 b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00     ..2.............
	...
    3b39:	00 00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff     .....(...(......
    3b49:	ff 01 32 00 05 01 ff 05 0d 38 45 36 10 33 7a 37     ..2......8E6.3z7
    3b59:	08 01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01     .........h......
    3b69:	2c 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32 bc 56     ,......2.2.2.2.V
    3b79:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    3b89:	32 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     2...............
	...
    3e15:	00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82     ...(.x.2........
    3e25:	3c 02 03 03 ff 05 e9 36 da 3b 10 33 dd 36 08 01     <......6.;.3.6..
    3e35:	00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01     ..............,.
    3e45:	06 e0 ff 08 b7 32 b7 32 b7 32 b7 32 d9 57 45 59     .....2.2.2.2.WEY
    3e55:	0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9 32 79     ......(....:..2y
    3e65:	57 d2 00 dc 00 aa 00 28 00 02 00 5d 36 08 b9 32     W......(...]6..2
	...
    3f6d:	00 00 00 9a 01 52 00 03 85 33 28 00 56 00 08 dd     .....R...3(.V...
    3f7d:	38 b9 32 1c 56 00 00 00 00 00 00 00 00 00 00 00     8.2.V...........
	...
    4029:	00 00 2b 9a 01 28 00 28 00 28 00 02 03 47 33 08     ..+..(.(.(...G3.
    4039:	b9 32 2d 9a 01 aa 00 28 00 28 00 02 03 37 33 08     .2-....(.(...73.
    4049:	b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    40ed:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    40fd:	ff 82 3c 02 03 03 03 01 c2 42 58 36 61 33 ca 37     ..<......BX6a3.7
    410d:	08 02 00 01 00 00 02 00 01 0b 0a 00 0a 00 cc 01     ................
    411d:	2c 01 06 e0 ff 08 b7 32 b7 32 b7 32 b7 32 71 5a     ,......2.2.2.2qZ
    412d:	45 59 0a 00 dc 00 be 00 28 00 02 00 d2 3a 08 b9     EY......(....:..
    413d:	32 50 59 0a 00 28 00 be 00 28 00 01 00 34 35 08     2PY..(...(...45.
    414d:	b9 32 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .2..............
	...
    4249:	00 0e 01 28 00 00 53 3f 8c 00 28 00 08 dd 38 b9     ...(..S?..(...8.
    4259:	32 23 56 0e 01 5a 00 01 53 3f 8c 00 28 00 08 dd     2#V..Z..S?..(...
    4269:	38 b9 32 21 56 0e 01 8c 00 02 53 3f 8c 00 28 00     8.2!V.....S?..(.
    4279:	08 dd 38 b9 32 1f 56 0e 01 be 00 03 53 3f 8c 00     ..8.2.V.....S?..
    4289:	28 00 08 dd 38 b9 32 1d 56 00 00 00 00 00 00 00     (...8.2.V.......
	...
    4305:	2b 9a 01 28 00 28 00 28 00 02 00 a4 35 08 b9 32     +..(.(.(....5..2
    4315:	2d e6 00 28 00 28 00 28 00 02 00 58 35 08 b9 32     -..(.(.(...X5..2
    4325:	2b 9a 01 5a 00 28 00 28 00 02 01 a4 35 08 b9 32     +..Z.(.(....5..2
    4335:	2d e6 00 5a 00 28 00 28 00 02 01 58 35 08 b9 32     -..Z.(.(...X5..2
    4345:	2b 9a 01 8c 00 28 00 28 00 02 02 a4 35 08 b9 32     +....(.(....5..2
    4355:	2d e6 00 8c 00 28 00 28 00 02 02 58 35 08 b9 32     -....(.(...X5..2
    4365:	2b 9a 01 be 00 28 00 28 00 02 03 a4 35 08 b9 32     +....(.(....5..2
    4375:	2d e6 00 be 00 28 00 28 00 02 03 58 35 08 b9 32     -....(.(...X5..2
	...
    43e5:	00 00 00 02 00 04 00 00 08 00 00 0c 0a 00 0a 00     ................
    43f5:	cc 01 2c 01 06 e0 ff 08 b7 32 b7 32 b7 32 6a 34     ..,......2.2.2j4
	...

00005521 <keyboad_number_char_special>:
    5521:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    5531:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

0000553b <keyboad_number_char_lower>:
    553b:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    554b:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00005555 <keyboad_number_char_upper>:
    5555:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    5565:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

0000556f <termbig_subscribe>:
    556f:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    557f:	73 63 72 69 62 65 00                                scribe.

00005586 <thermctl_subscribe>:
    5586:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    5596:	62 73 63 72 69 62 65 00                             bscribe.

0000559e <lightctl_header_out>:
    559e:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000055ad <termbig_header_out>:
    55ad:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000055bb <termbig_header_in>:
    55bb:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

000055c8 <thermctl_header_out>:
    55c8:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

000055d7 <thermctl_header_in>:
    55d7:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

000055e5 <global_time_offset>:
    55e5:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    55f5:	6f 66 66 73 65 74 00                                offset.

000055fc <global_time_ntp>:
    55fc:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

0000560c <global_time_set>:
    560c:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

0000561c <char_NULL>:
	...

0000561d <char_T>:
    561d:	54 00                                               T.

0000561f <char_D>:
    561f:	44 00                                               D.

00005621 <char_I>:
    5621:	49 00                                               I.

00005623 <char_P>:
    5623:	50 00                                               P.

00005625 <text_dashdash>:
    5625:	2d 2d 2d 00                                         ---.

00005629 <text_special_case>:
    5629:	40 00                                               @.

0000562b <text_lower_case>:
    562b:	61 00                                               a.

0000562d <text_upper_case>:
    562d:	41 00                                               A.

0000562f <text_ok>:
    562f:	4f 4b 00                                            OK.

00005632 <text_err>:
    5632:	45 72 72 6f 72 00                                   Error.

00005638 <text_delete_char>:
    5638:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00005642 <text_ulozit>:
    5642:	55 6c 6f 7a 69 74 00                                Ulozit.

00005649 <text_zrusit>:
    5649:	5a 72 75 73 69 74 00                                Zrusit.

00005650 <text_no>:
    5650:	4e 65 00                                            Ne.

00005653 <text_yes>:
    5653:	41 6e 6f 00                                         Ano.

00005657 <text_klavesnice>:
    5657:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00005662 <text_upozorneni>:
    5662:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000566d <text_ntp_sync_time>:
    566d:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

0000567e <text_prog>:
    567e:	50 52 4f 47 00                                      PROG.

00005683 <text_nastaveni_programator>:
    5683:	4e 61 73 74 61 76 65 6e 69 20 70 72 6f 67 72 61     Nastaveni progra
    5693:	6d 61 74 6f 72 75 00                                matoru.

0000569a <text_nastaveni_setup_program>:
    569a:	4e 61 73 74 61 76 65 6e 69 20 70 72 6f 67 72 61     Nastaveni progra
    56aa:	6d 75 00                                            mu.

000056ad <text_nastaveni_ring_program>:
    56ad:	56 79 62 65 72 20 70 72 6f 67 72 61 6d 75 00        Vyber programu.

000056bc <text_select_term_default_ring>:
    56bc:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
    56cc:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

000056d7 <text_select_term_mode>:
    56d7:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
    56e7:	61 74 6f 72 75 00                                   atoru.

000056ed <text_select_default_temp>:
    56ed:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
    56fd:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

00005707 <text_last_update>:
    5707:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    5717:	7a 61 63 65 3a 00                                   zace:.

0000571d <text_online>:
    571d:	4f 6e 6c 69 6e 65 00                                Online.

00005724 <text_nazev>:
    5724:	4e 61 7a 65 76 3a 00                                Nazev:.

0000572b <nastaveni_rtds_subscribe>:
    572b:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

0000573b <nastaveni_tds_offset>:
    573b:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000574b <nastaveni_name_sensor>:
    574b:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

0000575a <nastaveni_tds_period>:
    575a:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00005769 <nastaveni_deassociate_program>:
    5769:	55 76 6f 6c 6e 69 74 20 70 72 6f 67 72 61 6d 00     Uvolnit program.

00005779 <nastaveni_deassociate_sensor>:
    5779:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

00005787 <nastaveni_delete_sensor>:
    5787:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00005795 <text_rtds_novy>:
    5795:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
    57a5:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

000057b0 <text_not_used>:
    57b0:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

000057bd <text_rtds_prefix>:
    57bd:	2f 00                                               /.

000057bf <text_nastavit_pid>:
    57bf:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000057c9 <text_assocoivat_output>:
    57c9:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000057d9 <text_assocoivat>:
    57d9:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000057e8 <text_nastavit_tds>:
    57e8:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    57f8:	6c 6f 00                                            lo.

000057fb <text_associovat_tds>:
    57fb:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    580b:	64 6c 6f 00                                         dlo.

0000580f <text_tds_sensors>:
    580f:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
    581f:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

0000582a <nastaveni_rtds>:
    582a:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00005839 <nastaveni_onewire>:
    5839:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00005847 <nastaveni_default>:
    5847:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00005857 <nastaveni_nrf>:
    5857:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00005865 <nastaveni_site>:
    5865:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00005874 <text_term_do_deactivate>:
    5874:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 75     Deaktivovat regu
    5884:	6c 61 74 6f 72 00                                   lator.

0000588a <text_term_do_activate>:
    588a:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    589a:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

000058a4 <text_term_deactive>:
    58a4:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

000058ae <text_term_active>:
    58ae:	41 6b 74 69 76 6e 69 00                             Aktivni.

000058b6 <text_button_term_fan>:
    58b6:	46 41 4e 00                                         FAN.

000058ba <text_button_mode_cool>:
    58ba:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

000058c3 <text_button_mode_heat>:
    58c3:	54 6f 70 65 6e 69 00                                Topeni.

000058ca <text_button_term_man_comment>:
    58ca:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

000058d9 <text_button_term_man>:
    58d9:	4d 41 4e 00                                         MAN.

000058dd <text_button_term_prog_comment>:
    58dd:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    58ed:	72 61 6d 00                                         ram.

000058f1 <text_button_term_prog>:
    58f1:	50 52 4f 47 00                                      PROG.

000058f6 <text_button_term_min_comment>:
    58f6:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    5906:	67 75 6c 61 63 65 00                                gulace.

0000590d <text_button_term_min>:
    590d:	4d 49 4e 00                                         MIN.

00005911 <text_button_term_max_comment>:
    5911:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    5921:	75 6c 61 63 65 00                                   ulace.

00005927 <text_button_term_max>:
    5927:	4d 41 58 00                                         MAX.

0000592b <text_button_term_off_comment>:
    592b:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    593b:	79 20 6d 6f 64 00                                   y mod.

00005941 <text_button_term_off>:
    5941:	4f 46 46 00                                         OFF.

00005945 <button_zpet>:
    5945:	5a 70 65 74 00                                      Zpet.

0000594a <budik_text>:
    594a:	42 75 64 69 6b 00                                   Budik.

00005950 <text_set_default>:
    5950:	56 79 63 68 6f 7a 69 20 68 6f 64 6e 6f 74 79 00     Vychozi hodnoty.

00005960 <ring_text_setup>:
    5960:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

0000596a <regulator_default_text>:
    596a:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    597a:	72 3a 00                                            r:.

0000597d <regulator_text>:
    597d:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00005987 <funkce_text>:
    5987:	46 75 6e 6b 63 65 00                                Funkce.

0000598e <text_change_default_ring>:
    598e:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    599e:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

000059a8 <text_current_ring_mode>:
    59a8:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    59b8:	75 6c 61 74 6f 72 75 00                             ulatoru.

000059c0 <nastaveni_ring_text>:
    59c0:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
    59d0:	74 6f 72 75 00                                      toru.

000059d5 <nastaveni_text>:
    59d5:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000059df <temp_offset_short>:
    59df:	6f 66 66 73 65 74 3a 00                             offset:.

000059e7 <current_temp_short>:
    59e7:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

000059f0 <current_temp>:
    59f0:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5a00:	3a 00                                               :.

00005a02 <current_time>:
    5a02:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00005a0f <text_test_eeprom>:
    5a0f:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00005a1f <text_test_ram>:
    5a1f:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00005a2c <text_bezny_start>:
    5a2c:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00005a38 <text_vychozi_nastaveni>:
    5a38:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    5a48:	69 00                                               i.

00005a4a <text_rtc_cas>:
    5a4a:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    5a5a:	6e 79 00                                            ny.

00005a5d <text_ntp_cas>:
    5a5d:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    5a6d:	63 61 73 00                                         cas.

00005a71 <text_pid_regulator>:
    5a71:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00005a7f <text_nrf_rozhrani>:
    5a7f:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00005a8c <text_rest_rozhrani>:
    5a8c:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    5a9c:	69 00                                               i.

00005a9e <text_mqtt_rozhrani>:
    5a9e:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00005aac <text_ethernet_rozhrani>:
    5aac:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    5abc:	69 00                                               i.

00005abe <text_vnitrni_ochrany>:
    5abe:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00005ace <text_onewire_hledam>:
    5ace:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00005adb <text_onewire_rozhrani>:
    5adb:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00005aea <text_nastaveni_systemu>:
    5aea:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    5afa:	75 00                                               u.

00005afc <text_touchscreen>:
    5afc:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00005b08 <term_title>:
    5b08:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    5b18:	6f 72 20 76 33 00                                   or v3.

00005b1e <network_mqtt_key>:
    5b1e:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00005b2f <network_mqtt_user>:
    5b2f:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    5b3f:	72 00                                               r.

00005b41 <network_mqtt_port>:
    5b41:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    5b51:	74 00                                               t.

00005b53 <network_mqtt_host>:
    5b53:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    5b63:	74 00                                               t.

00005b65 <network_ntp>:
    5b65:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00005b71 <network_dns>:
    5b71:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00005b7d <network_gw>:
    5b7d:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00005b88 <network_netmask>:
    5b88:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00005b98 <network_mac>:
    5b98:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

00005ba4 <status_know_devices>:
    5ba4:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    5bb4:	63 65 73 00                                         ces.

00005bb8 <network_name>:
    5bb8:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00005bc5 <network_ip>:
    5bc5:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00005bd0 <status_mqtt_process>:
    5bd0:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    5be0:	65 73 73 00                                         ess.

00005be4 <status_mqtt_receive>:
    5be4:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    5bf4:	69 76 65 00                                         ive.

00005bf8 <status_mqtt_error>:
    5bf8:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    5c08:	72 00                                               r.

00005c0a <status_mqtt_send>:
    5c0a:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00005c1b <lcd_font>:
    5c1b:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    5c2b:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    5c3b:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    5c4b:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    5c5b:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    5c6b:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    5c7b:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    5c8b:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    5c9b:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    5cab:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    5cbb:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    5ccb:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    5cdb:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    5ceb:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    5cfb:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    5d0b:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    5d1b:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    5d2b:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    5d3b:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    5d4b:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    5d5b:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    5d6b:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    5d7b:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    5d8b:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    5d9b:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    5dab:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    5dbb:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    5dcb:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    5ddb:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    5deb:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    5dfb:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    5e0b:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    5e1b:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    5e2b:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    5e3b:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    5e4b:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    5e5b:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    5e6b:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    5e7b:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    5e8b:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    5e9b:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    5eab:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    5ebb:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    5ecb:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    5edb:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    5eeb:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    5efb:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    5f0b:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    5f1b:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    5f2b:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    5f3b:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    5f4b:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    5f5b:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    5f6b:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    5f7b:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    5f8b:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    5f9b:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    5fab:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    5fbb:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    5fcb:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    5fdb:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    5feb:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    5ffb:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    600b:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    601b:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    602b:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    603b:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    604b:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    605b:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    606b:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    607b:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    608b:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    609b:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    60ab:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    60bb:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    60cb:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    60db:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    60eb:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    60fb:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    610b:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00006116 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    6116:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    6126:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    6136:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    6146:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    6156:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    6166:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    6176:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00006182 <daysInMonth>:
    6182:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

0000618e <digital_pin_to_timer_PGM>:
    618e:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    61c2:	00 03                                               ..

000061c4 <digital_pin_to_bit_mask_PGM>:
    61c4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    61d4:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    61e4:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    61f4:	08 10 20 40 80 20                                   .. @. 

000061fa <digital_pin_to_port_PGM>:
    61fa:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    620a:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    621a:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    622a:	06 06 06 06 06 07                                   ......

00006230 <port_to_input_PGM>:
    6230:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00006240 <port_to_output_PGM>:
    6240:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00006250 <port_to_mode_PGM>:
    6250:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00006260 <__ctors_start>:
__ctors_start():
    6260:	6f 7f       	andi	r22, 0xFF	; 255
    6262:	1b 87       	std	Y+11, r17	; 0x0b
    6264:	2c 87       	std	Y+12, r18	; 0x0c
    6266:	bb 91       	.word	0x91bb	; ????
    6268:	d3 aa       	std	Z+51, r13	; 0x33
    626a:	28 ab       	std	Y+48, r18	; 0x30
    626c:	4b ae       	std	Y+59, r4	; 0x3b
    626e:	48 b0       	in	r4, 0x08	; 8
    6270:	53 b0       	in	r5, 0x03	; 3
    6272:	36 b2       	in	r3, 0x16	; 22
    6274:	41 b2       	in	r4, 0x11	; 17
    6276:	85 b6       	in	r8, 0x35	; 53
    6278:	04 c1       	rjmp	.+520    	; 0x6482 <gmtime_r+0xec>
    627a:	f1 c4       	rjmp	.+2530   	; 0x6c5e <menu_tds_save_period(unsigned int, float, unsigned char)+0x12>
    627c:	53 cb       	rjmp	.-2394   	; 0x5924 <text_button_term_max_comment+0x13>
    627e:	34 cf       	rjmp	.-408    	; 0x60e8 <lcd_font+0x4cd>

00006280 <__ctors_end>:
__dtors_end():
    6280:	11 24       	eor	r1, r1
    6282:	1f be       	out	0x3f, r1	; 63
    6284:	cf ef       	ldi	r28, 0xFF	; 255
    6286:	d1 e2       	ldi	r29, 0x21	; 33
    6288:	de bf       	out	0x3e, r29	; 62
    628a:	cd bf       	out	0x3d, r28	; 61
    628c:	00 e0       	ldi	r16, 0x00	; 0
    628e:	0c bf       	out	0x3c, r16	; 60

00006290 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    6290:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    6292:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    6294:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    6296:	e0 e0       	ldi	r30, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    6298:	ff eb       	ldi	r31, 0xBF	; 191
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    629a:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    629c:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    629e:	02 c0       	rjmp	.+4      	; 0x62a4 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    62a0:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    62a2:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    62a4:	ae 3d       	cpi	r26, 0xDE	; 222
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    62a6:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    62a8:	d9 f7       	brne	.-10     	; 0x62a0 <__do_copy_data+0x10>

000062aa <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    62aa:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    62ac:	ae ed       	ldi	r26, 0xDE	; 222
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    62ae:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    62b0:	01 c0       	rjmp	.+2      	; 0x62b4 <.do_clear_bss_start>

000062b2 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    62b2:	1d 92       	st	X+, r1

000062b4 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    62b4:	af 34       	cpi	r26, 0x4F	; 79
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    62b6:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    62b8:	e1 f7       	brne	.-8      	; 0x62b2 <.do_clear_bss_loop>

000062ba <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    62ba:	11 e3       	ldi	r17, 0x31	; 49
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    62bc:	c0 e4       	ldi	r28, 0x40	; 64
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    62be:	d1 e3       	ldi	r29, 0x31	; 49
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    62c0:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    62c2:	06 c0       	rjmp	.+12     	; 0x62d0 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    62c4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    62c6:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    62c8:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    62ca:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    62cc:	0e 94 d1 d3 	call	0x1a7a2	; 0x1a7a2 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    62d0:	c0 33       	cpi	r28, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    62d2:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    62d4:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    62d6:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    62d8:	a9 f7       	brne	.-22     	; 0x62c4 <__do_global_ctors+0xa>
    62da:	0e 94 fb d0 	call	0x1a1f6	; 0x1a1f6 <main>
    62de:	0c 94 7e df 	jmp	0x1befc	; 0x1befc <_exit>

000062e2 <__bad_interrupt>:
__vector_38():
    62e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000062e6 <localtime>:
localtime():
    62e6:	6b e3       	ldi	r22, 0x3B	; 59
    62e8:	74 e1       	ldi	r23, 0x14	; 20
    62ea:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <localtime_r>
    62ee:	8b e3       	ldi	r24, 0x3B	; 59
    62f0:	94 e1       	ldi	r25, 0x14	; 20
    62f2:	08 95       	ret

000062f4 <localtime_r>:
localtime_r():
    62f4:	cf 92       	push	r12
    62f6:	df 92       	push	r13
    62f8:	ef 92       	push	r14
    62fa:	ff 92       	push	r15
    62fc:	0f 93       	push	r16
    62fe:	1f 93       	push	r17
    6300:	cf 93       	push	r28
    6302:	df 93       	push	r29
    6304:	00 d0       	rcall	.+0      	; 0x6306 <localtime_r+0x12>
    6306:	1f 92       	push	r1
    6308:	cd b7       	in	r28, 0x3d	; 61
    630a:	de b7       	in	r29, 0x3e	; 62
    630c:	6c 01       	movw	r12, r24
    630e:	7b 01       	movw	r14, r22
    6310:	e0 91 4d 14 	lds	r30, 0x144D	; 0x80144d <__dst_ptr>
    6314:	f0 91 4e 14 	lds	r31, 0x144E	; 0x80144e <__dst_ptr+0x1>
    6318:	0f ef       	ldi	r16, 0xFF	; 255
    631a:	1f ef       	ldi	r17, 0xFF	; 255
    631c:	30 97       	sbiw	r30, 0x00	; 0
    631e:	21 f0       	breq	.+8      	; 0x6328 <localtime_r+0x34>
    6320:	67 e4       	ldi	r22, 0x47	; 71
    6322:	74 e1       	ldi	r23, 0x14	; 20
    6324:	19 95       	eicall
    6326:	8c 01       	movw	r16, r24
    6328:	f6 01       	movw	r30, r12
    632a:	80 81       	ld	r24, Z
    632c:	91 81       	ldd	r25, Z+1	; 0x01
    632e:	a2 81       	ldd	r26, Z+2	; 0x02
    6330:	b3 81       	ldd	r27, Z+3	; 0x03
    6332:	40 91 47 14 	lds	r20, 0x1447	; 0x801447 <__utc_offset>
    6336:	50 91 48 14 	lds	r21, 0x1448	; 0x801448 <__utc_offset+0x1>
    633a:	60 91 49 14 	lds	r22, 0x1449	; 0x801449 <__utc_offset+0x2>
    633e:	70 91 4a 14 	lds	r23, 0x144A	; 0x80144a <__utc_offset+0x3>
    6342:	84 0f       	add	r24, r20
    6344:	95 1f       	adc	r25, r21
    6346:	a6 1f       	adc	r26, r22
    6348:	b7 1f       	adc	r27, r23
    634a:	10 16       	cp	r1, r16
    634c:	11 06       	cpc	r1, r17
    634e:	cc f0       	brlt	.+50     	; 0x6382 <localtime_r+0x8e>
    6350:	89 83       	std	Y+1, r24	; 0x01
    6352:	9a 83       	std	Y+2, r25	; 0x02
    6354:	ab 83       	std	Y+3, r26	; 0x03
    6356:	bc 83       	std	Y+4, r27	; 0x04
    6358:	b7 01       	movw	r22, r14
    635a:	ce 01       	movw	r24, r28
    635c:	01 96       	adiw	r24, 0x01	; 1
    635e:	0e 94 cb 31 	call	0x6396	; 0x6396 <gmtime_r>
    6362:	f7 01       	movw	r30, r14
    6364:	13 87       	std	Z+11, r17	; 0x0b
    6366:	02 87       	std	Z+10, r16	; 0x0a
    6368:	0f 90       	pop	r0
    636a:	0f 90       	pop	r0
    636c:	0f 90       	pop	r0
    636e:	0f 90       	pop	r0
    6370:	df 91       	pop	r29
    6372:	cf 91       	pop	r28
    6374:	1f 91       	pop	r17
    6376:	0f 91       	pop	r16
    6378:	ff 90       	pop	r15
    637a:	ef 90       	pop	r14
    637c:	df 90       	pop	r13
    637e:	cf 90       	pop	r12
    6380:	08 95       	ret
    6382:	a8 01       	movw	r20, r16
    6384:	01 2e       	mov	r0, r17
    6386:	00 0c       	add	r0, r0
    6388:	66 0b       	sbc	r22, r22
    638a:	77 0b       	sbc	r23, r23
    638c:	84 0f       	add	r24, r20
    638e:	95 1f       	adc	r25, r21
    6390:	a6 1f       	adc	r26, r22
    6392:	b7 1f       	adc	r27, r23
    6394:	dd cf       	rjmp	.-70     	; 0x6350 <localtime_r+0x5c>

00006396 <gmtime_r>:
gmtime_r():
    6396:	cf 92       	push	r12
    6398:	df 92       	push	r13
    639a:	ef 92       	push	r14
    639c:	ff 92       	push	r15
    639e:	0f 93       	push	r16
    63a0:	1f 93       	push	r17
    63a2:	cf 93       	push	r28
    63a4:	df 93       	push	r29
    63a6:	00 d0       	rcall	.+0      	; 0x63a8 <gmtime_r+0x12>
    63a8:	00 d0       	rcall	.+0      	; 0x63aa <gmtime_r+0x14>
    63aa:	1f 92       	push	r1
    63ac:	1f 92       	push	r1
    63ae:	cd b7       	in	r28, 0x3d	; 61
    63b0:	de b7       	in	r29, 0x3e	; 62
    63b2:	8b 01       	movw	r16, r22
    63b4:	fc 01       	movw	r30, r24
    63b6:	60 81       	ld	r22, Z
    63b8:	71 81       	ldd	r23, Z+1	; 0x01
    63ba:	82 81       	ldd	r24, Z+2	; 0x02
    63bc:	93 81       	ldd	r25, Z+3	; 0x03
    63be:	20 e8       	ldi	r18, 0x80	; 128
    63c0:	31 e5       	ldi	r19, 0x51	; 81
    63c2:	41 e0       	ldi	r20, 0x01	; 1
    63c4:	50 e0       	ldi	r21, 0x00	; 0
    63c6:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
    63ca:	69 01       	movw	r12, r18
    63cc:	7a 01       	movw	r14, r20
    63ce:	2c e3       	ldi	r18, 0x3C	; 60
    63d0:	30 e0       	ldi	r19, 0x00	; 0
    63d2:	40 e0       	ldi	r20, 0x00	; 0
    63d4:	50 e0       	ldi	r21, 0x00	; 0
    63d6:	0e 94 b2 d3 	call	0x1a764	; 0x1a764 <__divmodsi4>
    63da:	29 83       	std	Y+1, r18	; 0x01
    63dc:	3a 83       	std	Y+2, r19	; 0x02
    63de:	4b 83       	std	Y+3, r20	; 0x03
    63e0:	5c 83       	std	Y+4, r21	; 0x04
    63e2:	89 81       	ldd	r24, Y+1	; 0x01
    63e4:	9a 81       	ldd	r25, Y+2	; 0x02
    63e6:	ab 81       	ldd	r26, Y+3	; 0x03
    63e8:	bc 81       	ldd	r27, Y+4	; 0x04
    63ea:	f8 01       	movw	r30, r16
    63ec:	60 83       	st	Z, r22
    63ee:	6c e3       	ldi	r22, 0x3C	; 60
    63f0:	70 e0       	ldi	r23, 0x00	; 0
    63f2:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    63f6:	dc 01       	movw	r26, r24
    63f8:	f8 01       	movw	r30, r16
    63fa:	a1 83       	std	Z+1, r26	; 0x01
    63fc:	62 83       	std	Z+2, r22	; 0x02
    63fe:	c6 01       	movw	r24, r12
    6400:	06 96       	adiw	r24, 0x06	; 6
    6402:	67 e0       	ldi	r22, 0x07	; 7
    6404:	70 e0       	ldi	r23, 0x00	; 0
    6406:	0e 94 68 d3 	call	0x1a6d0	; 0x1a6d0 <__udivmodhi4>
    640a:	84 83       	std	Z+4, r24	; 0x04
    640c:	2d ea       	ldi	r18, 0xAD	; 173
    640e:	3e e8       	ldi	r19, 0x8E	; 142
    6410:	40 e0       	ldi	r20, 0x00	; 0
    6412:	50 e0       	ldi	r21, 0x00	; 0
    6414:	c7 01       	movw	r24, r14
    6416:	b6 01       	movw	r22, r12
    6418:	0e 94 b2 d3 	call	0x1a764	; 0x1a764 <__divmodsi4>
    641c:	29 83       	std	Y+1, r18	; 0x01
    641e:	3a 83       	std	Y+2, r19	; 0x02
    6420:	6d 83       	std	Y+5, r22	; 0x05
    6422:	7e 83       	std	Y+6, r23	; 0x06
    6424:	8f 83       	std	Y+7, r24	; 0x07
    6426:	98 87       	std	Y+8, r25	; 0x08
    6428:	89 81       	ldd	r24, Y+1	; 0x01
    642a:	9a 81       	ldd	r25, Y+2	; 0x02
    642c:	24 e6       	ldi	r18, 0x64	; 100
    642e:	28 9f       	mul	r18, r24
    6430:	60 01       	movw	r12, r0
    6432:	29 9f       	mul	r18, r25
    6434:	d0 0c       	add	r13, r0
    6436:	11 24       	eor	r1, r1
    6438:	6d 81       	ldd	r22, Y+5	; 0x05
    643a:	7e 81       	ldd	r23, Y+6	; 0x06
    643c:	8f 81       	ldd	r24, Y+7	; 0x07
    643e:	98 85       	ldd	r25, Y+8	; 0x08
    6440:	25 eb       	ldi	r18, 0xB5	; 181
    6442:	35 e0       	ldi	r19, 0x05	; 5
    6444:	40 e0       	ldi	r20, 0x00	; 0
    6446:	50 e0       	ldi	r21, 0x00	; 0
    6448:	0e 94 b2 d3 	call	0x1a764	; 0x1a764 <__divmodsi4>
    644c:	29 83       	std	Y+1, r18	; 0x01
    644e:	3a 83       	std	Y+2, r19	; 0x02
    6450:	6d 83       	std	Y+5, r22	; 0x05
    6452:	7e 83       	std	Y+6, r23	; 0x06
    6454:	e9 80       	ldd	r14, Y+1	; 0x01
    6456:	fa 80       	ldd	r15, Y+2	; 0x02
    6458:	ee 0c       	add	r14, r14
    645a:	ff 1c       	adc	r15, r15
    645c:	ee 0c       	add	r14, r14
    645e:	ff 1c       	adc	r15, r15
    6460:	ec 0c       	add	r14, r12
    6462:	fd 1c       	adc	r15, r13
    6464:	8d 81       	ldd	r24, Y+5	; 0x05
    6466:	9e 81       	ldd	r25, Y+6	; 0x06
    6468:	f5 e6       	ldi	r31, 0x65	; 101
    646a:	ef 16       	cp	r14, r31
    646c:	f1 04       	cpc	r15, r1
    646e:	08 f4       	brcc	.+2      	; 0x6472 <gmtime_r+0xdc>
    6470:	3f c0       	rjmp	.+126    	; 0x64f0 <gmtime_r+0x15a>
    6472:	01 96       	adiw	r24, 0x01	; 1
    6474:	21 e0       	ldi	r18, 0x01	; 1
    6476:	30 e0       	ldi	r19, 0x00	; 0
    6478:	a9 01       	movw	r20, r18
    647a:	44 59       	subi	r20, 0x94	; 148
    647c:	5e 4f       	sbci	r21, 0xFE	; 254
    647e:	48 17       	cp	r20, r24
    6480:	59 07       	cpc	r21, r25
    6482:	60 f4       	brcc	.+24     	; 0x649c <gmtime_r+0x106>
    6484:	6d e6       	ldi	r22, 0x6D	; 109
    6486:	71 e0       	ldi	r23, 0x01	; 1
    6488:	82 1b       	sub	r24, r18
    648a:	93 0b       	sbc	r25, r19
    648c:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    6490:	dc 01       	movw	r26, r24
    6492:	e6 0e       	add	r14, r22
    6494:	f7 1e       	adc	r15, r23
    6496:	cd 01       	movw	r24, r26
    6498:	30 e0       	ldi	r19, 0x00	; 0
    649a:	20 e0       	ldi	r18, 0x00	; 0
    649c:	44 e6       	ldi	r20, 0x64	; 100
    649e:	e4 0e       	add	r14, r20
    64a0:	f1 1c       	adc	r15, r1
    64a2:	f8 01       	movw	r30, r16
    64a4:	f7 82       	std	Z+7, r15	; 0x07
    64a6:	e6 82       	std	Z+6, r14	; 0x06
    64a8:	91 87       	std	Z+9, r25	; 0x09
    64aa:	80 87       	std	Z+8, r24	; 0x08
    64ac:	25 5c       	subi	r18, 0xC5	; 197
    64ae:	3f 4f       	sbci	r19, 0xFF	; 255
    64b0:	82 17       	cp	r24, r18
    64b2:	93 07       	cpc	r25, r19
    64b4:	38 f5       	brcc	.+78     	; 0x6504 <gmtime_r+0x16e>
    64b6:	6f e1       	ldi	r22, 0x1F	; 31
    64b8:	70 e0       	ldi	r23, 0x00	; 0
    64ba:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    64be:	dc 01       	movw	r26, r24
    64c0:	f8 01       	movw	r30, r16
    64c2:	65 83       	std	Z+5, r22	; 0x05
    64c4:	a3 83       	std	Z+3, r26	; 0x03
    64c6:	f8 01       	movw	r30, r16
    64c8:	13 86       	std	Z+11, r1	; 0x0b
    64ca:	12 86       	std	Z+10, r1	; 0x0a
    64cc:	83 81       	ldd	r24, Z+3	; 0x03
    64ce:	8f 5f       	subi	r24, 0xFF	; 255
    64d0:	83 83       	std	Z+3, r24	; 0x03
    64d2:	28 96       	adiw	r28, 0x08	; 8
    64d4:	0f b6       	in	r0, 0x3f	; 63
    64d6:	f8 94       	cli
    64d8:	de bf       	out	0x3e, r29	; 62
    64da:	0f be       	out	0x3f, r0	; 63
    64dc:	cd bf       	out	0x3d, r28	; 61
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	ff 90       	pop	r15
    64e8:	ef 90       	pop	r14
    64ea:	df 90       	pop	r13
    64ec:	cf 90       	pop	r12
    64ee:	08 95       	ret
    64f0:	51 e0       	ldi	r21, 0x01	; 1
    64f2:	40 e0       	ldi	r20, 0x00	; 0
    64f4:	24 e6       	ldi	r18, 0x64	; 100
    64f6:	e2 16       	cp	r14, r18
    64f8:	f1 04       	cpc	r15, r1
    64fa:	09 f4       	brne	.+2      	; 0x64fe <gmtime_r+0x168>
    64fc:	50 e0       	ldi	r21, 0x00	; 0
    64fe:	25 2f       	mov	r18, r21
    6500:	34 2f       	mov	r19, r20
    6502:	ba cf       	rjmp	.-140    	; 0x6478 <gmtime_r+0xe2>
    6504:	69 e9       	ldi	r22, 0x99	; 153
    6506:	70 e0       	ldi	r23, 0x00	; 0
    6508:	82 1b       	sub	r24, r18
    650a:	93 0b       	sbc	r25, r19
    650c:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    6510:	dc 01       	movw	r26, r24
    6512:	26 2f       	mov	r18, r22
    6514:	22 0f       	add	r18, r18
    6516:	22 0f       	add	r18, r18
    6518:	f2 2e       	mov	r15, r18
    651a:	f6 0e       	add	r15, r22
    651c:	6d e3       	ldi	r22, 0x3D	; 61
    651e:	70 e0       	ldi	r23, 0x00	; 0
    6520:	cd 01       	movw	r24, r26
    6522:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    6526:	dc 01       	movw	r26, r24
    6528:	e6 2e       	mov	r14, r22
    652a:	ee 0c       	add	r14, r14
    652c:	6f e1       	ldi	r22, 0x1F	; 31
    652e:	70 e0       	ldi	r23, 0x00	; 0
    6530:	cd 01       	movw	r24, r26
    6532:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    6536:	dc 01       	movw	r26, r24
    6538:	22 e0       	ldi	r18, 0x02	; 2
    653a:	26 0f       	add	r18, r22
    653c:	2f 0d       	add	r18, r15
    653e:	2e 0d       	add	r18, r14
    6540:	f8 01       	movw	r30, r16
    6542:	25 83       	std	Z+5, r18	; 0x05
    6544:	bf cf       	rjmp	.-130    	; 0x64c4 <gmtime_r+0x12e>

00006546 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4975
}
//////////////////////////////
void click_select_default_temp(uint8_t args1, uint8_t args2)
{

}
    6546:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
    6548:	86 81       	ldd	r24, Z+6	; 0x06
    654a:	97 81       	ldd	r25, Z+7	; 0x07
    654c:	68 0f       	add	r22, r24
    654e:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    6550:	24 81       	ldd	r18, Z+4	; 0x04
    6552:	35 81       	ldd	r19, Z+5	; 0x05
    6554:	26 17       	cp	r18, r22
    6556:	37 07       	cpc	r19, r23
    6558:	38 f0       	brcs	.+14     	; 0x6568 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
    655a:	22 81       	ldd	r18, Z+2	; 0x02
    655c:	33 81       	ldd	r19, Z+3	; 0x03
    655e:	82 0f       	add	r24, r18
    6560:	93 1f       	adc	r25, r19
    6562:	77 83       	std	Z+7, r23	; 0x07
    6564:	66 83       	std	Z+6, r22	; 0x06
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
    6566:	08 95       	ret
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	80 e0       	ldi	r24, 0x00	; 0
    656c:	08 95       	ret

0000656e <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
    656e:	80 e0       	ldi	r24, 0x00	; 0
    6570:	08 95       	ret

00006572 <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
    6572:	81 e0       	ldi	r24, 0x01	; 1
    6574:	08 95       	ret

00006576 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
    6576:	8b e0       	ldi	r24, 0x0B	; 11
    6578:	08 95       	ret

0000657a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
    657a:	0f 93       	push	r16
    657c:	1f 93       	push	r17
    657e:	8a 30       	cpi	r24, 0x0A	; 10
    6580:	41 f0       	breq	.+16     	; 0x6592 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    6582:	80 5d       	subi	r24, 0xD0	; 208
    6584:	f9 01       	movw	r30, r18
    6586:	80 83       	st	Z, r24
    6588:	f8 01       	movw	r30, r16
    658a:	10 82       	st	Z, r1
    658c:	1f 91       	pop	r17
    658e:	0f 91       	pop	r16
    6590:	08 95       	ret
    6592:	8e e2       	ldi	r24, 0x2E	; 46
    6594:	f7 cf       	rjmp	.-18     	; 0x6584 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>

00006596 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
    6596:	0f 93       	push	r16
    6598:	1f 93       	push	r17
    659a:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <dialog_set_string_keyboard_type>
    659e:	91 11       	cpse	r25, r1
    65a0:	0c c0       	rjmp	.+24     	; 0x65ba <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    65a2:	e8 2f       	mov	r30, r24
    65a4:	f0 e0       	ldi	r31, 0x00	; 0
    65a6:	eb 5a       	subi	r30, 0xAB	; 171
    65a8:	fa 4a       	sbci	r31, 0xAA	; 170
    65aa:	e4 91       	lpm	r30, Z
    65ac:	d9 01       	movw	r26, r18
    65ae:	ec 93       	st	X, r30
    65b0:	f8 01       	movw	r30, r16
    65b2:	10 82       	st	Z, r1
    65b4:	1f 91       	pop	r17
    65b6:	0f 91       	pop	r16
    65b8:	08 95       	ret
    65ba:	91 30       	cpi	r25, 0x01	; 1
    65bc:	29 f4       	brne	.+10     	; 0x65c8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
    65be:	e8 2f       	mov	r30, r24
    65c0:	f0 e0       	ldi	r31, 0x00	; 0
    65c2:	e5 5c       	subi	r30, 0xC5	; 197
    65c4:	fa 4a       	sbci	r31, 0xAA	; 170
    65c6:	f1 cf       	rjmp	.-30     	; 0x65aa <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    65c8:	92 30       	cpi	r25, 0x02	; 2
    65ca:	81 f7       	brne	.-32     	; 0x65ac <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    65cc:	e8 2f       	mov	r30, r24
    65ce:	f0 e0       	ldi	r31, 0x00	; 0
    65d0:	ef 5d       	subi	r30, 0xDF	; 223
    65d2:	fa 4a       	sbci	r31, 0xAA	; 170
    65d4:	ea cf       	rjmp	.-44     	; 0x65aa <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

000065d6 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
    65d6:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <dialog_set_string_keyboard_type>
    65da:	83 30       	cpi	r24, 0x03	; 3
    65dc:	08 f0       	brcs	.+2      	; 0x65e0 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    65de:	08 95       	ret
    65e0:	8a e1       	ldi	r24, 0x1A	; 26
    65e2:	08 95       	ret

000065e4 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
    65e4:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <dialog_set_string_keyboard_type>
    65e8:	08 95       	ret

000065ea <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
    65ea:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <menu_redraw05s>
    65ee:	81 30       	cpi	r24, 0x01	; 1
    65f0:	19 f4       	brne	.+6      	; 0x65f8 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
    65f2:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <menu_redraw05s>
    65f6:	08 95       	ret
    65f8:	80 e0       	ldi	r24, 0x00	; 0
    65fa:	08 95       	ret

000065fc <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
    65fc:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <change_term_mode>
    6600:	81 30       	cpi	r24, 0x01	; 1
    6602:	19 f4       	brne	.+6      	; 0x660a <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
    6604:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <change_term_mode>
    6608:	08 95       	ret
    660a:	80 e0       	ldi	r24, 0x00	; 0
    660c:	08 95       	ret

0000660e <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
    660e:	80 91 7a 09 	lds	r24, 0x097A	; 0x80097a <menu_redraw10s>
    6612:	81 30       	cpi	r24, 0x01	; 1
    6614:	19 f4       	brne	.+6      	; 0x661c <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
    6616:	10 92 7a 09 	sts	0x097A, r1	; 0x80097a <menu_redraw10s>
    661a:	08 95       	ret
    661c:	80 e0       	ldi	r24, 0x00	; 0
    661e:	08 95       	ret

00006620 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
    6620:	08 95       	ret

00006622 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
    6622:	83 30       	cpi	r24, 0x03	; 3
    6624:	41 f4       	brne	.+16     	; 0x6636 <a2d_complete(unsigned char, unsigned int)+0x14>
    6626:	70 93 47 0a 	sts	0x0A47, r23	; 0x800a47 <proud+0x1>
    662a:	60 93 46 0a 	sts	0x0A46, r22	; 0x800a46 <proud>
    662e:	81 e0       	ldi	r24, 0x01	; 1
    6630:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <a2d_run_now>
    6634:	08 95       	ret
    6636:	86 30       	cpi	r24, 0x06	; 6
    6638:	29 f4       	brne	.+10     	; 0x6644 <a2d_complete(unsigned char, unsigned int)+0x22>
    663a:	70 93 4d 0a 	sts	0x0A4D, r23	; 0x800a4d <tritri+0x1>
    663e:	60 93 4c 0a 	sts	0x0A4C, r22	; 0x800a4c <tritri>
    6642:	f5 cf       	rjmp	.-22     	; 0x662e <a2d_complete(unsigned char, unsigned int)+0xc>
    6644:	85 30       	cpi	r24, 0x05	; 5
    6646:	29 f4       	brne	.+10     	; 0x6652 <a2d_complete(unsigned char, unsigned int)+0x30>
    6648:	70 93 4b 0a 	sts	0x0A4B, r23	; 0x800a4b <petnula+0x1>
    664c:	60 93 4a 0a 	sts	0x0A4A, r22	; 0x800a4a <petnula>
    6650:	ee cf       	rjmp	.-36     	; 0x662e <a2d_complete(unsigned char, unsigned int)+0xc>
    6652:	84 30       	cpi	r24, 0x04	; 4
    6654:	29 f4       	brne	.+10     	; 0x6660 <a2d_complete(unsigned char, unsigned int)+0x3e>
    6656:	70 93 49 0a 	sts	0x0A49, r23	; 0x800a49 <dvanact+0x1>
    665a:	60 93 48 0a 	sts	0x0A48, r22	; 0x800a48 <dvanact>
    665e:	e7 cf       	rjmp	.-50     	; 0x662e <a2d_complete(unsigned char, unsigned int)+0xc>
    6660:	87 30       	cpi	r24, 0x07	; 7
    6662:	29 f7       	brne	.-54     	; 0x662e <a2d_complete(unsigned char, unsigned int)+0xc>
    6664:	70 93 45 0a 	sts	0x0A45, r23	; 0x800a45 <light_curr+0x1>
    6668:	60 93 44 0a 	sts	0x0A44, r22	; 0x800a44 <light_curr>
    666c:	e0 cf       	rjmp	.-64     	; 0x662e <a2d_complete(unsigned char, unsigned int)+0xc>

0000666e <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
    666e:	fc 01       	movw	r30, r24
    6670:	e7 5e       	subi	r30, 0xE7	; 231
    6672:	f5 4f       	sbci	r31, 0xF5	; 245
    6674:	90 81       	ld	r25, Z
    6676:	20 91 18 0a 	lds	r18, 0x0A18	; 0x800a18 <menu_slider_data_max>
    667a:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <menu_slider_data_max_element>
    667e:	28 1b       	sub	r18, r24
    6680:	33 0b       	sbc	r19, r19
    6682:	92 17       	cp	r25, r18
    6684:	13 06       	cpc	r1, r19
    6686:	14 f4       	brge	.+4      	; 0x668c <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
    6688:	9f 5f       	subi	r25, 0xFF	; 255
    668a:	90 83       	st	Z, r25
    668c:	08 95       	ret

0000668e <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
    668e:	fc 01       	movw	r30, r24
    6690:	e7 5e       	subi	r30, 0xE7	; 231
    6692:	f5 4f       	sbci	r31, 0xF5	; 245
    6694:	90 81       	ld	r25, Z
    6696:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <menu_slider_data_min>
    669a:	89 17       	cp	r24, r25
    669c:	10 f4       	brcc	.+4      	; 0x66a2 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
    669e:	91 50       	subi	r25, 0x01	; 1
    66a0:	90 83       	st	Z, r25
    66a2:	08 95       	ret

000066a4 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
    66a4:	8a e0       	ldi	r24, 0x0A	; 10
    66a6:	08 95       	ret

000066a8 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
    66a8:	e7 ed       	ldi	r30, 0xD7	; 215
    66aa:	f0 e1       	ldi	r31, 0x10	; 16
    66ac:	80 e0       	ldi	r24, 0x00	; 0
    66ae:	91 85       	ldd	r25, Z+9	; 0x09
    66b0:	91 30       	cpi	r25, 0x01	; 1
    66b2:	09 f4       	brne	.+2      	; 0x66b6 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    66b4:	8f 5f       	subi	r24, 0xFF	; 255
    66b6:	3b 96       	adiw	r30, 0x0b	; 11
    66b8:	91 e1       	ldi	r25, 0x11	; 17
    66ba:	e9 31       	cpi	r30, 0x19	; 25
    66bc:	f9 07       	cpc	r31, r25
    66be:	b9 f7       	brne	.-18     	; 0x66ae <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
    66c0:	08 95       	ret

000066c2 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
    66c2:	00 97       	sbiw	r24, 0x00	; 0
    66c4:	31 f4       	brne	.+12     	; 0x66d2 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
    66c6:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <use_tds>
    66ca:	90 91 1f 0a 	lds	r25, 0x0A1F	; 0x800a1f <use_rtds>
    66ce:	89 0f       	add	r24, r25
    66d0:	08 95       	ret
    66d2:	01 97       	sbiw	r24, 0x01	; 1
    66d4:	09 f0       	breq	.+2      	; 0x66d8 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    66d6:	08 95       	ret
    66d8:	80 e1       	ldi	r24, 0x10	; 16
    66da:	08 95       	ret

000066dc <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
    66dc:	81 e0       	ldi	r24, 0x01	; 1
    66de:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <default_show_temp>
    66e2:	94 13       	cpse	r25, r20
    66e4:	80 e0       	ldi	r24, 0x00	; 0
    66e6:	08 95       	ret

000066e8 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
    66e8:	0f 93       	push	r16
    66ea:	1f 93       	push	r17
    66ec:	8b 01       	movw	r16, r22
    66ee:	02 0f       	add	r16, r18
    66f0:	13 1f       	adc	r17, r19
    66f2:	9c 01       	movw	r18, r24
    66f4:	24 0f       	add	r18, r20
    66f6:	35 1f       	adc	r19, r21
    66f8:	ab 01       	movw	r20, r22
    66fa:	bc 01       	movw	r22, r24
    66fc:	81 ea       	ldi	r24, 0xA1	; 161
    66fe:	9b e0       	ldi	r25, 0x0B	; 11
    6700:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    6704:	1f 91       	pop	r17
    6706:	0f 91       	pop	r16
    6708:	08 95       	ret

0000670a <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
    670a:	3f 92       	push	r3
    670c:	4f 92       	push	r4
    670e:	5f 92       	push	r5
    6710:	6f 92       	push	r6
    6712:	7f 92       	push	r7
    6714:	8f 92       	push	r8
    6716:	9f 92       	push	r9
    6718:	af 92       	push	r10
    671a:	bf 92       	push	r11
    671c:	cf 92       	push	r12
    671e:	df 92       	push	r13
    6720:	ef 92       	push	r14
    6722:	ff 92       	push	r15
    6724:	0f 93       	push	r16
    6726:	1f 93       	push	r17
    6728:	cf 93       	push	r28
    672a:	df 93       	push	r29
    672c:	3c 01       	movw	r6, r24
    672e:	6b 01       	movw	r12, r22
    6730:	ea 01       	movw	r28, r20
    6732:	29 01       	movw	r4, r18
    6734:	30 2e       	mov	r3, r16
    6736:	70 e0       	ldi	r23, 0x00	; 0
    6738:	60 e0       	ldi	r22, 0x00	; 0
    673a:	81 ea       	ldi	r24, 0xA1	; 161
    673c:	9b e0       	ldi	r25, 0x0B	; 11
    673e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    6742:	f1 2c       	mov	r15, r1
    6744:	e1 2c       	mov	r14, r1
    6746:	46 01       	movw	r8, r12
    6748:	84 0c       	add	r8, r4
    674a:	95 1c       	adc	r9, r5
    674c:	53 01       	movw	r10, r6
    674e:	ac 0e       	add	r10, r28
    6750:	bd 1e       	adc	r11, r29
    6752:	84 01       	movw	r16, r8
    6754:	0e 19       	sub	r16, r14
    6756:	1f 09       	sbc	r17, r15
    6758:	95 01       	movw	r18, r10
    675a:	2e 19       	sub	r18, r14
    675c:	3f 09       	sbc	r19, r15
    675e:	a7 01       	movw	r20, r14
    6760:	4c 0d       	add	r20, r12
    6762:	5d 1d       	adc	r21, r13
    6764:	b7 01       	movw	r22, r14
    6766:	66 0d       	add	r22, r6
    6768:	77 1d       	adc	r23, r7
    676a:	81 ea       	ldi	r24, 0xA1	; 161
    676c:	9b e0       	ldi	r25, 0x0B	; 11
    676e:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    6772:	8f ef       	ldi	r24, 0xFF	; 255
    6774:	e8 1a       	sub	r14, r24
    6776:	f8 0a       	sbc	r15, r24
    6778:	83 e0       	ldi	r24, 0x03	; 3
    677a:	e8 16       	cp	r14, r24
    677c:	f1 04       	cpc	r15, r1
    677e:	49 f7       	brne	.-46     	; 0x6752 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x48>
    6780:	6f ef       	ldi	r22, 0xFF	; 255
    6782:	7f ef       	ldi	r23, 0xFF	; 255
    6784:	81 ea       	ldi	r24, 0xA1	; 161
    6786:	9b e0       	ldi	r25, 0x0B	; 11
    6788:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    678c:	23 97       	sbiw	r28, 0x03	; 3
    678e:	c6 0d       	add	r28, r6
    6790:	d7 1d       	adc	r29, r7
    6792:	83 e0       	ldi	r24, 0x03	; 3
    6794:	68 0e       	add	r6, r24
    6796:	71 1c       	adc	r7, r1
    6798:	82 01       	movw	r16, r4
    679a:	03 50       	subi	r16, 0x03	; 3
    679c:	11 09       	sbc	r17, r1
    679e:	0c 0d       	add	r16, r12
    67a0:	1d 1d       	adc	r17, r13
    67a2:	a6 01       	movw	r20, r12
    67a4:	4d 5f       	subi	r20, 0xFD	; 253
    67a6:	5f 4f       	sbci	r21, 0xFF	; 255
    67a8:	9e 01       	movw	r18, r28
    67aa:	b3 01       	movw	r22, r6
    67ac:	81 ea       	ldi	r24, 0xA1	; 161
    67ae:	9b e0       	ldi	r25, 0x0B	; 11
    67b0:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    67b4:	60 91 18 0a 	lds	r22, 0x0A18	; 0x800a18 <menu_slider_data_max>
    67b8:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <menu_slider_data_max_element>
    67bc:	68 1b       	sub	r22, r24
    67be:	77 0b       	sbc	r23, r23
    67c0:	6f 5f       	subi	r22, 0xFF	; 255
    67c2:	7f 4f       	sbci	r23, 0xFF	; 255
    67c4:	c2 01       	movw	r24, r4
    67c6:	0e 94 68 d3 	call	0x1a6d0	; 0x1a6d0 <__udivmodhi4>
    67ca:	e3 2d       	mov	r30, r3
    67cc:	f0 e0       	ldi	r31, 0x00	; 0
    67ce:	e7 5e       	subi	r30, 0xE7	; 231
    67d0:	f5 4f       	sbci	r31, 0xF5	; 245
    67d2:	f0 80       	ld	r15, Z
    67d4:	f6 9e       	mul	r15, r22
    67d6:	f0 2c       	mov	r15, r0
    67d8:	11 24       	eor	r1, r1
    67da:	6a e9       	ldi	r22, 0x9A	; 154
    67dc:	76 ed       	ldi	r23, 0xD6	; 214
    67de:	81 ea       	ldi	r24, 0xA1	; 161
    67e0:	9b e0       	ldi	r25, 0x0B	; 11
    67e2:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    67e6:	cf 0c       	add	r12, r15
    67e8:	d1 1c       	adc	r13, r1
    67ea:	86 01       	movw	r16, r12
    67ec:	06 5f       	subi	r16, 0xF6	; 246
    67ee:	1f 4f       	sbci	r17, 0xFF	; 255
    67f0:	a6 01       	movw	r20, r12
    67f2:	4b 5f       	subi	r20, 0xFB	; 251
    67f4:	5f 4f       	sbci	r21, 0xFF	; 255
    67f6:	9e 01       	movw	r18, r28
    67f8:	b3 01       	movw	r22, r6
    67fa:	81 ea       	ldi	r24, 0xA1	; 161
    67fc:	9b e0       	ldi	r25, 0x0B	; 11
    67fe:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    6802:	df 91       	pop	r29
    6804:	cf 91       	pop	r28
    6806:	1f 91       	pop	r17
    6808:	0f 91       	pop	r16
    680a:	ff 90       	pop	r15
    680c:	ef 90       	pop	r14
    680e:	df 90       	pop	r13
    6810:	cf 90       	pop	r12
    6812:	bf 90       	pop	r11
    6814:	af 90       	pop	r10
    6816:	9f 90       	pop	r9
    6818:	8f 90       	pop	r8
    681a:	7f 90       	pop	r7
    681c:	6f 90       	pop	r6
    681e:	5f 90       	pop	r5
    6820:	4f 90       	pop	r4
    6822:	3f 90       	pop	r3
    6824:	08 95       	ret

00006826 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
    6826:	cf 93       	push	r28
    6828:	c8 2f       	mov	r28, r24
    682a:	cb 01       	movw	r24, r22
    682c:	ba 01       	movw	r22, r20
    682e:	20 e0       	ldi	r18, 0x00	; 0
    6830:	30 e0       	ldi	r19, 0x00	; 0
    6832:	40 e2       	ldi	r20, 0x20	; 32
    6834:	51 e4       	ldi	r21, 0x41	; 65
    6836:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
    683a:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <__fixsfsi>
    683e:	8c 2f       	mov	r24, r28
    6840:	cf 91       	pop	r28
    6842:	0c 94 65 8d 	jmp	0x11aca	; 0x11aca <thermostat_ring_set_mezni(unsigned char, int)>

00006846 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
    6846:	0c 94 b8 8e 	jmp	0x11d70	; 0x11d70 <thermostat_ring_pid_set_kp(unsigned char, float)>

0000684a <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
    684a:	0c 94 cb 8e 	jmp	0x11d96	; 0x11d96 <thermostat_ring_pid_set_ki(unsigned char, float)>

0000684e <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
    684e:	0c 94 de 8e 	jmp	0x11dbc	; 0x11dbc <thermostat_ring_pid_set_kd(unsigned char, float)>

00006852 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
    6852:	62 2f       	mov	r22, r18
    6854:	0c 94 f1 8e 	jmp	0x11de2	; 0x11de2 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>

00006858 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
    6858:	1f 93       	push	r17
    685a:	cf 93       	push	r28
    685c:	df 93       	push	r29
    685e:	10 91 2e 0a 	lds	r17, 0x0A2E	; 0x800a2e <default_ring>
    6862:	81 2f       	mov	r24, r17
    6864:	0e 94 48 8d 	call	0x11a90	; 0x11a90 <thermostat_ring_get_mezni(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6868:	c2 ec       	ldi	r28, 0xC2	; 194
    686a:	d9 e0       	ldi	r29, 0x09	; 9
_Z22preload_regulator_menujjh():
    686c:	bc 01       	movw	r22, r24
    686e:	99 0f       	add	r25, r25
    6870:	88 0b       	sbc	r24, r24
    6872:	99 0b       	sbc	r25, r25
    6874:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    6878:	20 e0       	ldi	r18, 0x00	; 0
    687a:	30 e0       	ldi	r19, 0x00	; 0
    687c:	40 e2       	ldi	r20, 0x20	; 32
    687e:	51 e4       	ldi	r21, 0x41	; 65
    6880:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6884:	68 83       	st	Y, r22
    6886:	79 83       	std	Y+1, r23	; 0x01
    6888:	8a 83       	std	Y+2, r24	; 0x02
    688a:	9b 83       	std	Y+3, r25	; 0x03
    688c:	80 e0       	ldi	r24, 0x00	; 0
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	a0 e8       	ldi	r26, 0x80	; 128
    6892:	b1 e4       	ldi	r27, 0x41	; 65
    6894:	88 87       	std	Y+8, r24	; 0x08
    6896:	99 87       	std	Y+9, r25	; 0x09
    6898:	aa 87       	std	Y+10, r26	; 0x0a
    689a:	bb 87       	std	Y+11, r27	; 0x0b
    689c:	80 e0       	ldi	r24, 0x00	; 0
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	a0 e0       	ldi	r26, 0x00	; 0
    68a2:	b2 e4       	ldi	r27, 0x42	; 66
    68a4:	8c 83       	std	Y+4, r24	; 0x04
    68a6:	9d 83       	std	Y+5, r25	; 0x05
    68a8:	ae 83       	std	Y+6, r26	; 0x06
    68aa:	bf 83       	std	Y+7, r27	; 0x07
    68ac:	80 e0       	ldi	r24, 0x00	; 0
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	a0 e0       	ldi	r26, 0x00	; 0
    68b2:	bf e3       	ldi	r27, 0x3F	; 63
    68b4:	8e 87       	std	Y+14, r24	; 0x0e
    68b6:	9f 87       	std	Y+15, r25	; 0x0f
    68b8:	a8 8b       	std	Y+16, r26	; 0x10
    68ba:	b9 8b       	std	Y+17, r27	; 0x11
    68bc:	1d 86       	std	Y+13, r1	; 0x0d
    68be:	1a 8b       	std	Y+18, r17	; 0x12
    68c0:	81 e0       	ldi	r24, 0x01	; 1
    68c2:	8c 87       	std	Y+12, r24	; 0x0c
    68c4:	83 e1       	ldi	r24, 0x13	; 19
    68c6:	94 e3       	ldi	r25, 0x34	; 52
    68c8:	9c 8b       	std	Y+20, r25	; 0x14
    68ca:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
    68cc:	df 91       	pop	r29
    68ce:	cf 91       	pop	r28
    68d0:	1f 91       	pop	r17
    68d2:	08 95       	ret

000068d4 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
    68d4:	4f 92       	push	r4
    68d6:	5f 92       	push	r5
    68d8:	6f 92       	push	r6
    68da:	7f 92       	push	r7
    68dc:	8f 92       	push	r8
    68de:	9f 92       	push	r9
    68e0:	af 92       	push	r10
    68e2:	bf 92       	push	r11
    68e4:	cf 92       	push	r12
    68e6:	df 92       	push	r13
    68e8:	ef 92       	push	r14
    68ea:	ff 92       	push	r15
    68ec:	0f 93       	push	r16
    68ee:	1f 93       	push	r17
    68f0:	cf 93       	push	r28
    68f2:	df 93       	push	r29
    68f4:	10 91 2e 0a 	lds	r17, 0x0A2E	; 0x800a2e <default_ring>
    68f8:	81 2f       	mov	r24, r17
    68fa:	0e 94 82 8c 	call	0x11904	; 0x11904 <thermostat_get_pid_p(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    68fe:	c2 ec       	ldi	r28, 0xC2	; 194
    6900:	d9 e0       	ldi	r29, 0x09	; 9
    6902:	68 83       	st	Y, r22
    6904:	79 83       	std	Y+1, r23	; 0x01
    6906:	8a 83       	std	Y+2, r24	; 0x02
    6908:	9b 83       	std	Y+3, r25	; 0x03
    690a:	41 2c       	mov	r4, r1
    690c:	51 2c       	mov	r5, r1
    690e:	80 e2       	ldi	r24, 0x20	; 32
    6910:	68 2e       	mov	r6, r24
    6912:	81 ec       	ldi	r24, 0xC1	; 193
    6914:	78 2e       	mov	r7, r24
    6916:	48 86       	std	Y+8, r4	; 0x08
    6918:	59 86       	std	Y+9, r5	; 0x09
    691a:	6a 86       	std	Y+10, r6	; 0x0a
    691c:	7b 86       	std	Y+11, r7	; 0x0b
    691e:	c1 2c       	mov	r12, r1
    6920:	d1 2c       	mov	r13, r1
    6922:	90 e2       	ldi	r25, 0x20	; 32
    6924:	e9 2e       	mov	r14, r25
    6926:	91 e4       	ldi	r25, 0x41	; 65
    6928:	f9 2e       	mov	r15, r25
    692a:	cc 82       	std	Y+4, r12	; 0x04
    692c:	dd 82       	std	Y+5, r13	; 0x05
    692e:	ee 82       	std	Y+6, r14	; 0x06
    6930:	ff 82       	std	Y+7, r15	; 0x07
    6932:	2d ec       	ldi	r18, 0xCD	; 205
    6934:	82 2e       	mov	r8, r18
    6936:	2c ec       	ldi	r18, 0xCC	; 204
    6938:	92 2e       	mov	r9, r18
    693a:	a9 2c       	mov	r10, r9
    693c:	2d e3       	ldi	r18, 0x3D	; 61
    693e:	b2 2e       	mov	r11, r18
    6940:	8e 86       	std	Y+14, r8	; 0x0e
    6942:	9f 86       	std	Y+15, r9	; 0x0f
    6944:	a8 8a       	std	Y+16, r10	; 0x10
    6946:	b9 8a       	std	Y+17, r11	; 0x11
    6948:	1d 86       	std	Y+13, r1	; 0x0d
    694a:	1a 8b       	std	Y+18, r17	; 0x12
    694c:	11 e0       	ldi	r17, 0x01	; 1
    694e:	1c 87       	std	Y+12, r17	; 0x0c
    6950:	83 e2       	ldi	r24, 0x23	; 35
    6952:	94 e3       	ldi	r25, 0x34	; 52
    6954:	9c 8b       	std	Y+20, r25	; 0x14
    6956:	8b 8b       	std	Y+19, r24	; 0x13
_Z16preload_pid_menujjh():
    6958:	00 91 2e 0a 	lds	r16, 0x0A2E	; 0x800a2e <default_ring>
    695c:	80 2f       	mov	r24, r16
    695e:	0e 94 b1 8c 	call	0x11962	; 0x11962 <thermostat_get_pid_i(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    6962:	6d 8b       	std	Y+21, r22	; 0x15
    6964:	7e 8b       	std	Y+22, r23	; 0x16
    6966:	8f 8b       	std	Y+23, r24	; 0x17
    6968:	98 8f       	std	Y+24, r25	; 0x18
    696a:	4d 8e       	std	Y+29, r4	; 0x1d
    696c:	5e 8e       	std	Y+30, r5	; 0x1e
    696e:	6f 8e       	std	Y+31, r6	; 0x1f
    6970:	78 a2       	std	Y+32, r7	; 0x20
    6972:	c9 8e       	std	Y+25, r12	; 0x19
    6974:	da 8e       	std	Y+26, r13	; 0x1a
    6976:	eb 8e       	std	Y+27, r14	; 0x1b
    6978:	fc 8e       	std	Y+28, r15	; 0x1c
    697a:	8b a2       	std	Y+35, r8	; 0x23
    697c:	9c a2       	std	Y+36, r9	; 0x24
    697e:	ad a2       	std	Y+37, r10	; 0x25
    6980:	be a2       	std	Y+38, r11	; 0x26
    6982:	1a a2       	std	Y+34, r1	; 0x22
    6984:	0f a3       	std	Y+39, r16	; 0x27
    6986:	19 a3       	std	Y+33, r17	; 0x21
    6988:	85 e2       	ldi	r24, 0x25	; 37
    698a:	94 e3       	ldi	r25, 0x34	; 52
    698c:	99 a7       	std	Y+41, r25	; 0x29
    698e:	88 a7       	std	Y+40, r24	; 0x28
_Z16preload_pid_menujjh():
    6990:	00 91 2e 0a 	lds	r16, 0x0A2E	; 0x800a2e <default_ring>
    6994:	80 2f       	mov	r24, r16
    6996:	0e 94 bc 8c 	call	0x11978	; 0x11978 <thermostat_get_pid_d(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    699a:	6a a7       	std	Y+42, r22	; 0x2a
    699c:	7b a7       	std	Y+43, r23	; 0x2b
    699e:	8c a7       	std	Y+44, r24	; 0x2c
    69a0:	9d a7       	std	Y+45, r25	; 0x2d
    69a2:	4a aa       	std	Y+50, r4	; 0x32
    69a4:	5b aa       	std	Y+51, r5	; 0x33
    69a6:	6c aa       	std	Y+52, r6	; 0x34
    69a8:	7d aa       	std	Y+53, r7	; 0x35
    69aa:	ce a6       	std	Y+46, r12	; 0x2e
    69ac:	df a6       	std	Y+47, r13	; 0x2f
    69ae:	e8 aa       	std	Y+48, r14	; 0x30
    69b0:	f9 aa       	std	Y+49, r15	; 0x31
    69b2:	88 ae       	std	Y+56, r8	; 0x38
    69b4:	99 ae       	std	Y+57, r9	; 0x39
    69b6:	aa ae       	std	Y+58, r10	; 0x3a
    69b8:	bb ae       	std	Y+59, r11	; 0x3b
    69ba:	1f aa       	std	Y+55, r1	; 0x37
    69bc:	0c af       	std	Y+60, r16	; 0x3c
    69be:	1e ab       	std	Y+54, r17	; 0x36
    69c0:	87 e2       	ldi	r24, 0x27	; 39
    69c2:	94 e3       	ldi	r25, 0x34	; 52
    69c4:	9e af       	std	Y+62, r25	; 0x3e
    69c6:	8d af       	std	Y+61, r24	; 0x3d
_Z16preload_pid_menujjh():
    69c8:	c0 91 2e 0a 	lds	r28, 0x0A2E	; 0x800a2e <default_ring>
    69cc:	8c 2f       	mov	r24, r28
    69ce:	0e 94 c7 8c 	call	0x1198e	; 0x1198e <thermostat_get_pid_time(unsigned char)>
    69d2:	68 2f       	mov	r22, r24
    69d4:	70 e0       	ldi	r23, 0x00	; 0
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	80 e0       	ldi	r24, 0x00	; 0
    69da:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    69de:	60 93 01 0a 	sts	0x0A01, r22	; 0x800a01 <menu_dialog_variable+0x3f>
    69e2:	70 93 02 0a 	sts	0x0A02, r23	; 0x800a02 <menu_dialog_variable+0x40>
    69e6:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <menu_dialog_variable+0x41>
    69ea:	90 93 04 0a 	sts	0x0A04, r25	; 0x800a04 <menu_dialog_variable+0x42>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    69ee:	c0 92 09 0a 	sts	0x0A09, r12	; 0x800a09 <menu_dialog_variable+0x47>
    69f2:	d0 92 0a 0a 	sts	0x0A0A, r13	; 0x800a0a <menu_dialog_variable+0x48>
    69f6:	e0 92 0b 0a 	sts	0x0A0B, r14	; 0x800a0b <menu_dialog_variable+0x49>
    69fa:	f0 92 0c 0a 	sts	0x0A0C, r15	; 0x800a0c <menu_dialog_variable+0x4a>
    69fe:	80 e0       	ldi	r24, 0x00	; 0
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	ae e7       	ldi	r26, 0x7E	; 126
    6a04:	b3 e4       	ldi	r27, 0x43	; 67
    6a06:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <menu_dialog_variable+0x43>
    6a0a:	90 93 06 0a 	sts	0x0A06, r25	; 0x800a06 <menu_dialog_variable+0x44>
    6a0e:	a0 93 07 0a 	sts	0x0A07, r26	; 0x800a07 <menu_dialog_variable+0x45>
    6a12:	b0 93 08 0a 	sts	0x0A08, r27	; 0x800a08 <menu_dialog_variable+0x46>
    6a16:	80 e0       	ldi	r24, 0x00	; 0
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	a0 e0       	ldi	r26, 0x00	; 0
    6a1c:	b0 e4       	ldi	r27, 0x40	; 64
    6a1e:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <menu_dialog_variable+0x4d>
    6a22:	90 93 10 0a 	sts	0x0A10, r25	; 0x800a10 <menu_dialog_variable+0x4e>
    6a26:	a0 93 11 0a 	sts	0x0A11, r26	; 0x800a11 <menu_dialog_variable+0x4f>
    6a2a:	b0 93 12 0a 	sts	0x0A12, r27	; 0x800a12 <menu_dialog_variable+0x50>
    6a2e:	10 93 0e 0a 	sts	0x0A0E, r17	; 0x800a0e <menu_dialog_variable+0x4c>
    6a32:	c0 93 13 0a 	sts	0x0A13, r28	; 0x800a13 <menu_dialog_variable+0x51>
    6a36:	10 93 0d 0a 	sts	0x0A0D, r17	; 0x800a0d <menu_dialog_variable+0x4b>
    6a3a:	89 e2       	ldi	r24, 0x29	; 41
    6a3c:	94 e3       	ldi	r25, 0x34	; 52
    6a3e:	90 93 15 0a 	sts	0x0A15, r25	; 0x800a15 <menu_dialog_variable+0x53>
    6a42:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
    6a46:	df 91       	pop	r29
    6a48:	cf 91       	pop	r28
    6a4a:	1f 91       	pop	r17
    6a4c:	0f 91       	pop	r16
    6a4e:	ff 90       	pop	r15
    6a50:	ef 90       	pop	r14
    6a52:	df 90       	pop	r13
    6a54:	cf 90       	pop	r12
    6a56:	bf 90       	pop	r11
    6a58:	af 90       	pop	r10
    6a5a:	9f 90       	pop	r9
    6a5c:	8f 90       	pop	r8
    6a5e:	7f 90       	pop	r7
    6a60:	6f 90       	pop	r6
    6a62:	5f 90       	pop	r5
    6a64:	4f 90       	pop	r4
    6a66:	08 95       	ret

00006a68 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>:
_Z38button_click_ring_term_set_pid_defaultjjh():
    6a68:	40 e0       	ldi	r20, 0x00	; 0
    6a6a:	50 e0       	ldi	r21, 0x00	; 0
    6a6c:	60 e8       	ldi	r22, 0x80	; 128
    6a6e:	7f e3       	ldi	r23, 0x3F	; 63
    6a70:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6a74:	0e 94 b8 8e 	call	0x11d70	; 0x11d70 <thermostat_ring_pid_set_kp(unsigned char, float)>
    6a78:	40 e0       	ldi	r20, 0x00	; 0
    6a7a:	50 e0       	ldi	r21, 0x00	; 0
    6a7c:	60 e0       	ldi	r22, 0x00	; 0
    6a7e:	7f e3       	ldi	r23, 0x3F	; 63
    6a80:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6a84:	0e 94 cb 8e 	call	0x11d96	; 0x11d96 <thermostat_ring_pid_set_ki(unsigned char, float)>
    6a88:	40 e0       	ldi	r20, 0x00	; 0
    6a8a:	50 e0       	ldi	r21, 0x00	; 0
    6a8c:	60 e8       	ldi	r22, 0x80	; 128
    6a8e:	7f e3       	ldi	r23, 0x3F	; 63
    6a90:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6a94:	0e 94 de 8e 	call	0x11dbc	; 0x11dbc <thermostat_ring_pid_set_kd(unsigned char, float)>
    6a98:	6c e3       	ldi	r22, 0x3C	; 60
    6a9a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6a9e:	0e 94 f1 8e 	call	0x11de2	; 0x11de2 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
    6aa2:	40 e0       	ldi	r20, 0x00	; 0
    6aa4:	70 e0       	ldi	r23, 0x00	; 0
    6aa6:	60 e0       	ldi	r22, 0x00	; 0
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	80 e0       	ldi	r24, 0x00	; 0
    6aac:	0c 94 6a 34 	jmp	0x68d4	; 0x68d4 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>

00006ab0 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
    6ab0:	cf 92       	push	r12
    6ab2:	df 92       	push	r13
    6ab4:	ef 92       	push	r14
    6ab6:	ff 92       	push	r15
    6ab8:	0f 93       	push	r16
    6aba:	1f 93       	push	r17
    6abc:	cf 93       	push	r28
    6abe:	df 93       	push	r29
    6ac0:	25 e1       	ldi	r18, 0x15	; 21
    6ac2:	28 9f       	mul	r18, r24
    6ac4:	e0 01       	movw	r28, r0
    6ac6:	29 9f       	mul	r18, r25
    6ac8:	d0 0d       	add	r29, r0
    6aca:	11 24       	eor	r1, r1
    6acc:	ce 53       	subi	r28, 0x3E	; 62
    6ace:	d6 4f       	sbci	r29, 0xF6	; 246
    6ad0:	2e 85       	ldd	r18, Y+14	; 0x0e
    6ad2:	3f 85       	ldd	r19, Y+15	; 0x0f
    6ad4:	48 89       	ldd	r20, Y+16	; 0x10
    6ad6:	59 89       	ldd	r21, Y+17	; 0x11
    6ad8:	68 81       	ld	r22, Y
    6ada:	79 81       	ldd	r23, Y+1	; 0x01
    6adc:	8a 81       	ldd	r24, Y+2	; 0x02
    6ade:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae0:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
    6ae4:	6b 01       	movw	r12, r22
    6ae6:	7c 01       	movw	r14, r24
    6ae8:	28 85       	ldd	r18, Y+8	; 0x08
    6aea:	39 85       	ldd	r19, Y+9	; 0x09
    6aec:	4a 85       	ldd	r20, Y+10	; 0x0a
    6aee:	5b 85       	ldd	r21, Y+11	; 0x0b
    6af0:	0e 94 da d2 	call	0x1a5b4	; 0x1a5b4 <__gesf2>
    6af4:	87 fd       	sbrc	r24, 7
    6af6:	1f c0       	rjmp	.+62     	; 0x6b36 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6af8:	c8 82       	st	Y, r12
    6afa:	d9 82       	std	Y+1, r13	; 0x01
    6afc:	ea 82       	std	Y+2, r14	; 0x02
    6afe:	fb 82       	std	Y+3, r15	; 0x03
    6b00:	8c 85       	ldd	r24, Y+12	; 0x0c
    6b02:	81 30       	cpi	r24, 0x01	; 1
    6b04:	c1 f4       	brne	.+48     	; 0x6b36 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x86>
    6b06:	0b 89       	ldd	r16, Y+19	; 0x13
    6b08:	1c 89       	ldd	r17, Y+20	; 0x14
    6b0a:	c7 01       	movw	r24, r14
    6b0c:	b6 01       	movw	r22, r12
    6b0e:	0e 94 ee b6 	call	0x16ddc	; 0x16ddc <float_to_int(float)>
    6b12:	48 81       	ld	r20, Y
    6b14:	59 81       	ldd	r21, Y+1	; 0x01
    6b16:	6a 81       	ldd	r22, Y+2	; 0x02
    6b18:	7b 81       	ldd	r23, Y+3	; 0x03
    6b1a:	9a 89       	ldd	r25, Y+18	; 0x12
    6b1c:	28 2f       	mov	r18, r24
    6b1e:	89 2f       	mov	r24, r25
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	f8 01       	movw	r30, r16
    6b24:	df 91       	pop	r29
    6b26:	cf 91       	pop	r28
    6b28:	1f 91       	pop	r17
    6b2a:	0f 91       	pop	r16
    6b2c:	ff 90       	pop	r15
    6b2e:	ef 90       	pop	r14
    6b30:	df 90       	pop	r13
    6b32:	cf 90       	pop	r12
    6b34:	19 94       	eijmp
    6b36:	df 91       	pop	r29
    6b38:	cf 91       	pop	r28
    6b3a:	1f 91       	pop	r17
    6b3c:	0f 91       	pop	r16
    6b3e:	ff 90       	pop	r15
    6b40:	ef 90       	pop	r14
    6b42:	df 90       	pop	r13
    6b44:	cf 90       	pop	r12
    6b46:	08 95       	ret

00006b48 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
    6b48:	cf 92       	push	r12
    6b4a:	df 92       	push	r13
    6b4c:	ef 92       	push	r14
    6b4e:	ff 92       	push	r15
    6b50:	0f 93       	push	r16
    6b52:	1f 93       	push	r17
    6b54:	cf 93       	push	r28
    6b56:	df 93       	push	r29
    6b58:	25 e1       	ldi	r18, 0x15	; 21
    6b5a:	28 9f       	mul	r18, r24
    6b5c:	e0 01       	movw	r28, r0
    6b5e:	29 9f       	mul	r18, r25
    6b60:	d0 0d       	add	r29, r0
    6b62:	11 24       	eor	r1, r1
    6b64:	ce 53       	subi	r28, 0x3E	; 62
    6b66:	d6 4f       	sbci	r29, 0xF6	; 246
    6b68:	2e 85       	ldd	r18, Y+14	; 0x0e
    6b6a:	3f 85       	ldd	r19, Y+15	; 0x0f
    6b6c:	48 89       	ldd	r20, Y+16	; 0x10
    6b6e:	59 89       	ldd	r21, Y+17	; 0x11
    6b70:	68 81       	ld	r22, Y
    6b72:	79 81       	ldd	r23, Y+1	; 0x01
    6b74:	8a 81       	ldd	r24, Y+2	; 0x02
    6b76:	9b 81       	ldd	r25, Y+3	; 0x03
    6b78:	0e 94 0f d1 	call	0x1a21e	; 0x1a21e <__addsf3>
    6b7c:	6b 01       	movw	r12, r22
    6b7e:	7c 01       	movw	r14, r24
    6b80:	2c 81       	ldd	r18, Y+4	; 0x04
    6b82:	3d 81       	ldd	r19, Y+5	; 0x05
    6b84:	4e 81       	ldd	r20, Y+6	; 0x06
    6b86:	5f 81       	ldd	r21, Y+7	; 0x07
    6b88:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
    6b8c:	18 16       	cp	r1, r24
    6b8e:	fc f0       	brlt	.+62     	; 0x6bce <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6b90:	c8 82       	st	Y, r12
    6b92:	d9 82       	std	Y+1, r13	; 0x01
    6b94:	ea 82       	std	Y+2, r14	; 0x02
    6b96:	fb 82       	std	Y+3, r15	; 0x03
    6b98:	8c 85       	ldd	r24, Y+12	; 0x0c
    6b9a:	81 30       	cpi	r24, 0x01	; 1
    6b9c:	c1 f4       	brne	.+48     	; 0x6bce <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x86>
    6b9e:	0b 89       	ldd	r16, Y+19	; 0x13
    6ba0:	1c 89       	ldd	r17, Y+20	; 0x14
    6ba2:	c7 01       	movw	r24, r14
    6ba4:	b6 01       	movw	r22, r12
    6ba6:	0e 94 ee b6 	call	0x16ddc	; 0x16ddc <float_to_int(float)>
    6baa:	48 81       	ld	r20, Y
    6bac:	59 81       	ldd	r21, Y+1	; 0x01
    6bae:	6a 81       	ldd	r22, Y+2	; 0x02
    6bb0:	7b 81       	ldd	r23, Y+3	; 0x03
    6bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    6bb4:	28 2f       	mov	r18, r24
    6bb6:	89 2f       	mov	r24, r25
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	f8 01       	movw	r30, r16
    6bbc:	df 91       	pop	r29
    6bbe:	cf 91       	pop	r28
    6bc0:	1f 91       	pop	r17
    6bc2:	0f 91       	pop	r16
    6bc4:	ff 90       	pop	r15
    6bc6:	ef 90       	pop	r14
    6bc8:	df 90       	pop	r13
    6bca:	cf 90       	pop	r12
    6bcc:	19 94       	eijmp
    6bce:	df 91       	pop	r29
    6bd0:	cf 91       	pop	r28
    6bd2:	1f 91       	pop	r17
    6bd4:	0f 91       	pop	r16
    6bd6:	ff 90       	pop	r15
    6bd8:	ef 90       	pop	r14
    6bda:	df 90       	pop	r13
    6bdc:	cf 90       	pop	r12
    6bde:	08 95       	ret

00006be0 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhhPcS_():
    6be0:	0f 93       	push	r16
    6be2:	1f 93       	push	r17
    6be4:	c9 01       	movw	r24, r18
    6be6:	62 e9       	ldi	r22, 0x92	; 146
    6be8:	72 e0       	ldi	r23, 0x02	; 2
    6bea:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    6bee:	f8 01       	movw	r30, r16
    6bf0:	10 82       	st	Z, r1
    6bf2:	1f 91       	pop	r17
    6bf4:	0f 91       	pop	r16
    6bf6:	08 95       	ret

00006bf8 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
    6bf8:	81 e8       	ldi	r24, 0x81	; 129
    6bfa:	99 e0       	ldi	r25, 0x09	; 9
    6bfc:	fc 01       	movw	r30, r24
    6bfe:	01 90       	ld	r0, Z+
    6c00:	00 20       	and	r0, r0
    6c02:	e9 f7       	brne	.-6      	; 0x6bfe <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    6c04:	cf 01       	movw	r24, r30
    6c06:	82 58       	subi	r24, 0x82	; 130
    6c08:	99 40       	sbci	r25, 0x09	; 9
    6c0a:	88 23       	and	r24, r24
    6c0c:	29 f0       	breq	.+10     	; 0x6c18 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
    6c0e:	99 27       	eor	r25, r25
    6c10:	fc 01       	movw	r30, r24
    6c12:	e0 58       	subi	r30, 0x80	; 128
    6c14:	f6 4f       	sbci	r31, 0xF6	; 246
    6c16:	10 82       	st	Z, r1
    6c18:	08 95       	ret

00006c1a <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
    6c1a:	cf 93       	push	r28
    6c1c:	df 93       	push	r29
_Z29display_function_get_variableh():
    6c1e:	95 e1       	ldi	r25, 0x15	; 21
    6c20:	89 9f       	mul	r24, r25
    6c22:	e0 01       	movw	r28, r0
    6c24:	11 24       	eor	r1, r1
    6c26:	ce 53       	subi	r28, 0x3E	; 62
    6c28:	d6 4f       	sbci	r29, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
    6c2a:	20 e0       	ldi	r18, 0x00	; 0
    6c2c:	30 e0       	ldi	r19, 0x00	; 0
    6c2e:	4a e7       	ldi	r20, 0x7A	; 122
    6c30:	54 e4       	ldi	r21, 0x44	; 68
    6c32:	68 81       	ld	r22, Y
    6c34:	79 81       	ldd	r23, Y+1	; 0x01
    6c36:	8a 81       	ldd	r24, Y+2	; 0x02
    6c38:	9b 81       	ldd	r25, Y+3	; 0x03
    6c3a:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
    6c3e:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <__fixsfsi>
    6c42:	8a 89       	ldd	r24, Y+18	; 0x12
    6c44:	df 91       	pop	r29
    6c46:	cf 91       	pop	r28
    6c48:	0c 94 70 88 	jmp	0x110e0	; 0x110e0 <tds_set_offset(unsigned char, int)>

00006c4c <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
    6c4c:	cf 93       	push	r28
    6c4e:	df 93       	push	r29
_Z29display_function_get_variableh():
    6c50:	95 e1       	ldi	r25, 0x15	; 21
    6c52:	89 9f       	mul	r24, r25
    6c54:	e0 01       	movw	r28, r0
    6c56:	11 24       	eor	r1, r1
    6c58:	ce 53       	subi	r28, 0x3E	; 62
    6c5a:	d6 4f       	sbci	r29, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
    6c5c:	68 81       	ld	r22, Y
    6c5e:	79 81       	ldd	r23, Y+1	; 0x01
    6c60:	8a 81       	ldd	r24, Y+2	; 0x02
    6c62:	9b 81       	ldd	r25, Y+3	; 0x03
    6c64:	0e 94 f9 d1 	call	0x1a3f2	; 0x1a3f2 <__fixunssfsi>
    6c68:	8a 89       	ldd	r24, Y+18	; 0x12
    6c6a:	df 91       	pop	r29
    6c6c:	cf 91       	pop	r28
    6c6e:	0c 94 b2 88 	jmp	0x11164	; 0x11164 <tds_set_period(unsigned char, unsigned char)>

00006c72 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
    6c72:	0c 94 c7 89 	jmp	0x1138e	; 0x1138e <tds_associate(unsigned char)>

00006c76 <button_click_set_show_default_ring_program(unsigned int, unsigned int, unsigned char)>:
_Z42button_click_set_show_default_ring_programjjh():
    6c76:	64 2f       	mov	r22, r20
    6c78:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6c7c:	0c 94 40 8d 	jmp	0x11a80	; 0x11a80 <thermostat_ring_set_program_id(unsigned char, unsigned char)>

00006c80 <button_click_deassociate_default_ring_program_for_term(unsigned int, unsigned int, unsigned char)>:
_Z54button_click_deassociate_default_ring_program_for_termjjh():
    6c80:	6f ef       	ldi	r22, 0xFF	; 255
    6c82:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6c86:	0c 94 40 8d 	jmp	0x11a80	; 0x11a80 <thermostat_ring_set_program_id(unsigned char, unsigned char)>

00006c8a <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_term_set_modejjh():
    6c8a:	86 2f       	mov	r24, r22
    6c8c:	60 e0       	ldi	r22, 0x00	; 0
    6c8e:	44 23       	and	r20, r20
    6c90:	61 f0       	breq	.+24     	; 0x6caa <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6c92:	61 e0       	ldi	r22, 0x01	; 1
    6c94:	41 30       	cpi	r20, 0x01	; 1
    6c96:	49 f0       	breq	.+18     	; 0x6caa <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6c98:	67 e0       	ldi	r22, 0x07	; 7
    6c9a:	42 30       	cpi	r20, 0x02	; 2
    6c9c:	31 f0       	breq	.+12     	; 0x6caa <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6c9e:	62 e0       	ldi	r22, 0x02	; 2
    6ca0:	43 30       	cpi	r20, 0x03	; 3
    6ca2:	19 f0       	breq	.+6      	; 0x6caa <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    6ca4:	44 30       	cpi	r20, 0x04	; 4
    6ca6:	19 f4       	brne	.+6      	; 0x6cae <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x24>
    6ca8:	68 e0       	ldi	r22, 0x08	; 8
    6caa:	0c 94 94 8d 	jmp	0x11b28	; 0x11b28 <thermostat_ring_set_mode(unsigned char, unsigned char)>
    6cae:	08 95       	ret

00006cb0 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>:
_Z40button_click_set_show_default_ring_inputjjh():
    6cb0:	64 2f       	mov	r22, r20
    6cb2:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6cb6:	0c 94 84 8d 	jmp	0x11b08	; 0x11b08 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>

00006cba <button_click_deassociate_default_ring_input_sensor_for_term(unsigned int, unsigned int, unsigned char)>:
_Z59button_click_deassociate_default_ring_input_sensor_for_termjjh():
    6cba:	6f ef       	ldi	r22, 0xFF	; 255
    6cbc:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6cc0:	0c 94 84 8d 	jmp	0x11b08	; 0x11b08 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>

00006cc4 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
    6cc4:	7f 92       	push	r7
    6cc6:	8f 92       	push	r8
    6cc8:	9f 92       	push	r9
    6cca:	af 92       	push	r10
    6ccc:	bf 92       	push	r11
    6cce:	cf 92       	push	r12
    6cd0:	df 92       	push	r13
    6cd2:	ef 92       	push	r14
    6cd4:	ff 92       	push	r15
    6cd6:	0f 93       	push	r16
    6cd8:	1f 93       	push	r17
    6cda:	cf 93       	push	r28
    6cdc:	df 93       	push	r29
    6cde:	cd b7       	in	r28, 0x3d	; 61
    6ce0:	de b7       	in	r29, 0x3e	; 62
    6ce2:	6a 97       	sbiw	r28, 0x1a	; 26
    6ce4:	0f b6       	in	r0, 0x3f	; 63
    6ce6:	f8 94       	cli
    6ce8:	de bf       	out	0x3e, r29	; 62
    6cea:	0f be       	out	0x3f, r0	; 63
    6cec:	cd bf       	out	0x3d, r28	; 61
    6cee:	98 2e       	mov	r9, r24
    6cf0:	82 2e       	mov	r8, r18
    6cf2:	73 2e       	mov	r7, r19
    6cf4:	78 01       	movw	r14, r16
    6cf6:	60 eb       	ldi	r22, 0xB0	; 176
    6cf8:	77 e5       	ldi	r23, 0x57	; 87
    6cfa:	82 2f       	mov	r24, r18
    6cfc:	93 2f       	mov	r25, r19
    6cfe:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    6d02:	6c e2       	ldi	r22, 0x2C	; 44
    6d04:	73 e0       	ldi	r23, 0x03	; 3
    6d06:	c8 01       	movw	r24, r16
    6d08:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    6d0c:	4b e0       	ldi	r20, 0x0B	; 11
    6d0e:	49 9d       	mul	r20, r9
    6d10:	c0 01       	movw	r24, r0
    6d12:	11 24       	eor	r1, r1
    6d14:	9c 01       	movw	r18, r24
    6d16:	29 52       	subi	r18, 0x29	; 41
    6d18:	3f 4e       	sbci	r19, 0xEF	; 239
    6d1a:	69 01       	movw	r12, r18
    6d1c:	f9 01       	movw	r30, r18
    6d1e:	81 85       	ldd	r24, Z+9	; 0x09
    6d20:	81 30       	cpi	r24, 0x01	; 1
    6d22:	89 f5       	brne	.+98     	; 0x6d86 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
    6d24:	a9 01       	movw	r20, r18
    6d26:	00 e1       	ldi	r16, 0x10	; 16
    6d28:	28 e0       	ldi	r18, 0x08	; 8
    6d2a:	6a e3       	ldi	r22, 0x3A	; 58
    6d2c:	ce 01       	movw	r24, r28
    6d2e:	01 96       	adiw	r24, 0x01	; 1
    6d30:	5c 01       	movw	r10, r24
    6d32:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    6d36:	bf 92       	push	r11
    6d38:	af 92       	push	r10
    6d3a:	1f 92       	push	r1
    6d3c:	9f 92       	push	r9
    6d3e:	80 ea       	ldi	r24, 0xA0	; 160
    6d40:	92 e0       	ldi	r25, 0x02	; 2
    6d42:	9f 93       	push	r25
    6d44:	8f 93       	push	r24
    6d46:	7f 92       	push	r7
    6d48:	8f 92       	push	r8
    6d4a:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    6d4e:	0f b6       	in	r0, 0x3f	; 63
    6d50:	f8 94       	cli
    6d52:	de bf       	out	0x3e, r29	; 62
    6d54:	0f be       	out	0x3f, r0	; 63
    6d56:	cd bf       	out	0x3d, r28	; 61
    6d58:	f6 01       	movw	r30, r12
    6d5a:	82 85       	ldd	r24, Z+10	; 0x0a
    6d5c:	8f 3f       	cpi	r24, 0xFF	; 255
    6d5e:	39 f1       	breq	.+78     	; 0x6dae <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xea>
    6d60:	68 ee       	ldi	r22, 0xE8	; 232
    6d62:	77 e5       	ldi	r23, 0x57	; 87
    6d64:	c7 01       	movw	r24, r14
    6d66:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    6d6a:	b5 01       	movw	r22, r10
    6d6c:	f6 01       	movw	r30, r12
    6d6e:	82 85       	ldd	r24, Z+10	; 0x0a
    6d70:	0e 94 22 88 	call	0x11044	; 0x11044 <tds_get_name(unsigned char, char*)>
    6d74:	63 e8       	ldi	r22, 0x83	; 131
    6d76:	77 e0       	ldi	r23, 0x07	; 7
    6d78:	c7 01       	movw	r24, r14
    6d7a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    6d7e:	b5 01       	movw	r22, r10
    6d80:	c7 01       	movw	r24, r14
    6d82:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    6d86:	6a 96       	adiw	r28, 0x1a	; 26
    6d88:	0f b6       	in	r0, 0x3f	; 63
    6d8a:	f8 94       	cli
    6d8c:	de bf       	out	0x3e, r29	; 62
    6d8e:	0f be       	out	0x3f, r0	; 63
    6d90:	cd bf       	out	0x3d, r28	; 61
    6d92:	df 91       	pop	r29
    6d94:	cf 91       	pop	r28
    6d96:	1f 91       	pop	r17
    6d98:	0f 91       	pop	r16
    6d9a:	ff 90       	pop	r15
    6d9c:	ef 90       	pop	r14
    6d9e:	df 90       	pop	r13
    6da0:	cf 90       	pop	r12
    6da2:	bf 90       	pop	r11
    6da4:	af 90       	pop	r10
    6da6:	9f 90       	pop	r9
    6da8:	8f 90       	pop	r8
    6daa:	7f 90       	pop	r7
    6dac:	08 95       	ret
    6dae:	6b ef       	ldi	r22, 0xFB	; 251
    6db0:	77 e5       	ldi	r23, 0x57	; 87
    6db2:	c7 01       	movw	r24, r14
    6db4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    6db8:	e6 cf       	rjmp	.-52     	; 0x6d86 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>

00006dba <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
    6dba:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6dbe:	84 13       	cpse	r24, r20
    6dc0:	05 c0       	rjmp	.+10     	; 0x6dcc <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x12>
    6dc2:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    6dc6:	91 e0       	ldi	r25, 0x01	; 1
    6dc8:	81 30       	cpi	r24, 0x01	; 1
    6dca:	09 f0       	breq	.+2      	; 0x6dce <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	89 2f       	mov	r24, r25
    6dd0:	08 95       	ret

00006dd2 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
    6dd2:	af 92       	push	r10
    6dd4:	bf 92       	push	r11
    6dd6:	cf 92       	push	r12
    6dd8:	df 92       	push	r13
    6dda:	ff 92       	push	r15
    6ddc:	0f 93       	push	r16
    6dde:	1f 93       	push	r17
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	cd b7       	in	r28, 0x3d	; 61
    6de6:	de b7       	in	r29, 0x3e	; 62
    6de8:	66 97       	sbiw	r28, 0x16	; 22
    6dea:	0f b6       	in	r0, 0x3f	; 63
    6dec:	f8 94       	cli
    6dee:	de bf       	out	0x3e, r29	; 62
    6df0:	0f be       	out	0x3f, r0	; 63
    6df2:	cd bf       	out	0x3d, r28	; 61
    6df4:	f8 2e       	mov	r15, r24
    6df6:	59 01       	movw	r10, r18
    6df8:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    6dfc:	9e 01       	movw	r18, r28
    6dfe:	2f 5f       	subi	r18, 0xFF	; 255
    6e00:	3f 4f       	sbci	r19, 0xFF	; 255
    6e02:	69 01       	movw	r12, r18
    6e04:	6e ea       	ldi	r22, 0xAE	; 174
    6e06:	78 e5       	ldi	r23, 0x58	; 88
    6e08:	8f 3f       	cpi	r24, 0xFF	; 255
    6e0a:	11 f4       	brne	.+4      	; 0x6e10 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
    6e0c:	64 ea       	ldi	r22, 0xA4	; 164
    6e0e:	78 e5       	ldi	r23, 0x58	; 88
    6e10:	c6 01       	movw	r24, r12
    6e12:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    6e16:	be 01       	movw	r22, r28
    6e18:	63 5f       	subi	r22, 0xF3	; 243
    6e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6e1c:	8f 2d       	mov	r24, r15
    6e1e:	0e 94 cd 8c 	call	0x1199a	; 0x1199a <thermostat_ring_get_name(unsigned char, char*)>
    6e22:	df 92       	push	r13
    6e24:	cf 92       	push	r12
    6e26:	1f 92       	push	r1
    6e28:	ff 92       	push	r15
    6e2a:	87 ea       	ldi	r24, 0xA7	; 167
    6e2c:	92 e0       	ldi	r25, 0x02	; 2
    6e2e:	9f 93       	push	r25
    6e30:	8f 93       	push	r24
    6e32:	1f 93       	push	r17
    6e34:	0f 93       	push	r16
    6e36:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    6e3a:	be 01       	movw	r22, r28
    6e3c:	63 5f       	subi	r22, 0xF3	; 243
    6e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e40:	c5 01       	movw	r24, r10
    6e42:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    6e46:	0f b6       	in	r0, 0x3f	; 63
    6e48:	f8 94       	cli
    6e4a:	de bf       	out	0x3e, r29	; 62
    6e4c:	0f be       	out	0x3f, r0	; 63
    6e4e:	cd bf       	out	0x3d, r28	; 61
    6e50:	66 96       	adiw	r28, 0x16	; 22
    6e52:	0f b6       	in	r0, 0x3f	; 63
    6e54:	f8 94       	cli
    6e56:	de bf       	out	0x3e, r29	; 62
    6e58:	0f be       	out	0x3f, r0	; 63
    6e5a:	cd bf       	out	0x3d, r28	; 61
    6e5c:	df 91       	pop	r29
    6e5e:	cf 91       	pop	r28
    6e60:	1f 91       	pop	r17
    6e62:	0f 91       	pop	r16
    6e64:	ff 90       	pop	r15
    6e66:	df 90       	pop	r13
    6e68:	cf 90       	pop	r12
    6e6a:	bf 90       	pop	r11
    6e6c:	af 90       	pop	r10
    6e6e:	08 95       	ret

00006e70 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
    6e70:	ef 92       	push	r14
    6e72:	ff 92       	push	r15
    6e74:	0f 93       	push	r16
    6e76:	1f 93       	push	r17
    6e78:	cf 93       	push	r28
    6e7a:	df 93       	push	r29
    6e7c:	00 d0       	rcall	.+0      	; 0x6e7e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    6e7e:	00 d0       	rcall	.+0      	; 0x6e80 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    6e80:	00 d0       	rcall	.+0      	; 0x6e82 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    6e82:	1f 92       	push	r1
    6e84:	cd b7       	in	r28, 0x3d	; 61
    6e86:	de b7       	in	r29, 0x3e	; 62
    6e88:	c9 01       	movw	r24, r18
    6e8a:	6e e8       	ldi	r22, 0x8E	; 142
    6e8c:	79 e5       	ldi	r23, 0x59	; 89
    6e8e:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    6e92:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6e96:	8f 3f       	cpi	r24, 0xFF	; 255
    6e98:	39 f1       	breq	.+78     	; 0x6ee8 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    6e9a:	9e 01       	movw	r18, r28
    6e9c:	2f 5f       	subi	r18, 0xFF	; 255
    6e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ea0:	79 01       	movw	r14, r18
    6ea2:	b9 01       	movw	r22, r18
    6ea4:	0e 94 cd 8c 	call	0x1199a	; 0x1199a <thermostat_ring_get_name(unsigned char, char*)>
    6ea8:	ff 92       	push	r15
    6eaa:	ef 92       	push	r14
    6eac:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6eb0:	1f 92       	push	r1
    6eb2:	8f 93       	push	r24
    6eb4:	82 eb       	ldi	r24, 0xB2	; 178
    6eb6:	92 e0       	ldi	r25, 0x02	; 2
    6eb8:	9f 93       	push	r25
    6eba:	8f 93       	push	r24
    6ebc:	1f 93       	push	r17
    6ebe:	0f 93       	push	r16
    6ec0:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    6ec4:	0f b6       	in	r0, 0x3f	; 63
    6ec6:	f8 94       	cli
    6ec8:	de bf       	out	0x3e, r29	; 62
    6eca:	0f be       	out	0x3f, r0	; 63
    6ecc:	cd bf       	out	0x3d, r28	; 61
    6ece:	2a 96       	adiw	r28, 0x0a	; 10
    6ed0:	0f b6       	in	r0, 0x3f	; 63
    6ed2:	f8 94       	cli
    6ed4:	de bf       	out	0x3e, r29	; 62
    6ed6:	0f be       	out	0x3f, r0	; 63
    6ed8:	cd bf       	out	0x3d, r28	; 61
    6eda:	df 91       	pop	r29
    6edc:	cf 91       	pop	r28
    6ede:	1f 91       	pop	r17
    6ee0:	0f 91       	pop	r16
    6ee2:	ff 90       	pop	r15
    6ee4:	ef 90       	pop	r14
    6ee6:	08 95       	ret
    6ee8:	65 e2       	ldi	r22, 0x25	; 37
    6eea:	76 e5       	ldi	r23, 0x56	; 86
    6eec:	c8 01       	movw	r24, r16
    6eee:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    6ef2:	ed cf       	rjmp	.-38     	; 0x6ece <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>

00006ef4 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_mode_is_selectedjjh():
    6ef4:	cf 93       	push	r28
    6ef6:	df 93       	push	r29
    6ef8:	d6 2f       	mov	r29, r22
    6efa:	c4 2f       	mov	r28, r20
    6efc:	86 2f       	mov	r24, r22
    6efe:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    6f02:	8f 3f       	cpi	r24, 0xFF	; 255
    6f04:	49 f1       	breq	.+82     	; 0x6f58 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x64>
    6f06:	8d 2f       	mov	r24, r29
    6f08:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
    6f0c:	98 2f       	mov	r25, r24
    6f0e:	c1 11       	cpse	r28, r1
    6f10:	05 c0       	rjmp	.+10     	; 0x6f1c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    6f12:	81 e0       	ldi	r24, 0x01	; 1
    6f14:	99 23       	and	r25, r25
    6f16:	39 f0       	breq	.+14     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f18:	80 e0       	ldi	r24, 0x00	; 0
    6f1a:	05 c0       	rjmp	.+10     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f1c:	c1 30       	cpi	r28, 0x01	; 1
    6f1e:	31 f4       	brne	.+12     	; 0x6f2c <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x38>
    6f20:	81 e0       	ldi	r24, 0x01	; 1
    6f22:	91 30       	cpi	r25, 0x01	; 1
    6f24:	c9 f7       	brne	.-14     	; 0x6f18 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    6f26:	df 91       	pop	r29
    6f28:	cf 91       	pop	r28
    6f2a:	08 95       	ret
    6f2c:	c2 30       	cpi	r28, 0x02	; 2
    6f2e:	21 f4       	brne	.+8      	; 0x6f38 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x44>
    6f30:	81 e0       	ldi	r24, 0x01	; 1
    6f32:	97 30       	cpi	r25, 0x07	; 7
    6f34:	89 f7       	brne	.-30     	; 0x6f18 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    6f36:	f7 cf       	rjmp	.-18     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f38:	c3 30       	cpi	r28, 0x03	; 3
    6f3a:	21 f4       	brne	.+8      	; 0x6f44 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x50>
    6f3c:	81 e0       	ldi	r24, 0x01	; 1
    6f3e:	92 30       	cpi	r25, 0x02	; 2
    6f40:	59 f7       	brne	.-42     	; 0x6f18 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    6f42:	f1 cf       	rjmp	.-30     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f44:	c4 30       	cpi	r28, 0x04	; 4
    6f46:	41 f7       	brne	.-48     	; 0x6f18 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    6f48:	81 e0       	ldi	r24, 0x01	; 1
    6f4a:	98 30       	cpi	r25, 0x08	; 8
    6f4c:	61 f3       	breq	.-40     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f4e:	93 30       	cpi	r25, 0x03	; 3
    6f50:	51 f3       	breq	.-44     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f52:	95 30       	cpi	r25, 0x05	; 5
    6f54:	09 f7       	brne	.-62     	; 0x6f18 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    6f56:	e7 cf       	rjmp	.-50     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>
    6f58:	82 e0       	ldi	r24, 0x02	; 2
    6f5a:	e5 cf       	rjmp	.-54     	; 0x6f26 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x32>

00006f5c <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
    6f5c:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6f60:	8f 3f       	cpi	r24, 0xFF	; 255
    6f62:	51 f0       	breq	.+20     	; 0x6f78 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    6f64:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
    6f68:	98 2f       	mov	r25, r24
    6f6a:	81 e0       	ldi	r24, 0x01	; 1
    6f6c:	93 30       	cpi	r25, 0x03	; 3
    6f6e:	31 f0       	breq	.+12     	; 0x6f7c <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x20>
    6f70:	95 30       	cpi	r25, 0x05	; 5
    6f72:	29 f0       	breq	.+10     	; 0x6f7e <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x22>
    6f74:	98 30       	cpi	r25, 0x08	; 8
    6f76:	19 f0       	breq	.+6      	; 0x6f7e <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x22>
    6f78:	80 e0       	ldi	r24, 0x00	; 0
    6f7a:	08 95       	ret
    6f7c:	08 95       	ret
    6f7e:	08 95       	ret

00006f80 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)>:
_Z34display_enable_show_term_mode_progjjh():
    6f80:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6f84:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
    6f88:	91 e0       	ldi	r25, 0x01	; 1
    6f8a:	82 30       	cpi	r24, 0x02	; 2
    6f8c:	09 f0       	breq	.+2      	; 0x6f90 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)+0x10>
    6f8e:	90 e0       	ldi	r25, 0x00	; 0
    6f90:	89 2f       	mov	r24, r25
    6f92:	08 95       	ret

00006f94 <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>:
_Z41button_get_show_default_ring_input_activejjh():
    6f94:	cf 93       	push	r28
    6f96:	c4 2f       	mov	r28, r20
    6f98:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    6f9c:	0e 94 7c 8d 	call	0x11af8	; 0x11af8 <thermostat_ring_get_asociate_tds(unsigned char)>
    6fa0:	91 e0       	ldi	r25, 0x01	; 1
    6fa2:	8c 13       	cpse	r24, r28
    6fa4:	90 e0       	ldi	r25, 0x00	; 0
    6fa6:	89 2f       	mov	r24, r25
    6fa8:	cf 91       	pop	r28
    6faa:	08 95       	ret

00006fac <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)>:
_Z46button_get_show_default_ring_program_max_itemsjjh():
    6fac:	cf 93       	push	r28
    6fae:	df 93       	push	r29
    6fb0:	c0 e0       	ldi	r28, 0x00	; 0
    6fb2:	d0 e0       	ldi	r29, 0x00	; 0
    6fb4:	8c 2f       	mov	r24, r28
    6fb6:	0e 94 4a 8f 	call	0x11e94	; 0x11e94 <thermostat_program_get_active(unsigned char)>
    6fba:	8f 3f       	cpi	r24, 0xFF	; 255
    6fbc:	09 f0       	breq	.+2      	; 0x6fc0 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)+0x14>
    6fbe:	df 5f       	subi	r29, 0xFF	; 255
    6fc0:	cf 5f       	subi	r28, 0xFF	; 255
    6fc2:	c8 30       	cpi	r28, 0x08	; 8
    6fc4:	b9 f7       	brne	.-18     	; 0x6fb4 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)+0x8>
    6fc6:	8d 2f       	mov	r24, r29
    6fc8:	df 91       	pop	r29
    6fca:	cf 91       	pop	r28
    6fcc:	08 95       	ret

00006fce <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z36button_get_show_default_ring_programhhhPcS_():
    6fce:	0f 93       	push	r16
    6fd0:	1f 93       	push	r17
    6fd2:	cf 93       	push	r28
    6fd4:	c8 2f       	mov	r28, r24
    6fd6:	1f 92       	push	r1
    6fd8:	8f 93       	push	r24
    6fda:	84 ec       	ldi	r24, 0xC4	; 196
    6fdc:	92 e0       	ldi	r25, 0x02	; 2
    6fde:	9f 93       	push	r25
    6fe0:	8f 93       	push	r24
    6fe2:	3f 93       	push	r19
    6fe4:	2f 93       	push	r18
    6fe6:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    6fea:	f8 01       	movw	r30, r16
    6fec:	10 82       	st	Z, r1
    6fee:	8c 2f       	mov	r24, r28
    6ff0:	0e 94 4a 8f 	call	0x11e94	; 0x11e94 <thermostat_program_get_active(unsigned char)>
    6ff4:	0f 90       	pop	r0
    6ff6:	0f 90       	pop	r0
    6ff8:	0f 90       	pop	r0
    6ffa:	0f 90       	pop	r0
    6ffc:	0f 90       	pop	r0
    6ffe:	0f 90       	pop	r0
    7000:	81 30       	cpi	r24, 0x01	; 1
    7002:	39 f4       	brne	.+14     	; 0x7012 <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    7004:	b8 01       	movw	r22, r16
    7006:	8c 2f       	mov	r24, r28
    7008:	cf 91       	pop	r28
    700a:	1f 91       	pop	r17
    700c:	0f 91       	pop	r16
    700e:	0c 94 fe 8e 	jmp	0x11dfc	; 0x11dfc <thermostat_program_get_name(unsigned char, char*)>
    7012:	cf 91       	pop	r28
    7014:	1f 91       	pop	r17
    7016:	0f 91       	pop	r16
    7018:	08 95       	ret

0000701a <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z27button_get_term_mode_labelshhhPcS_():
    701a:	0f 93       	push	r16
    701c:	1f 93       	push	r17
    701e:	48 2f       	mov	r20, r24
    7020:	c9 01       	movw	r24, r18
    7022:	41 11       	cpse	r20, r1
    7024:	0b c0       	rjmp	.+22     	; 0x703c <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
    7026:	61 e4       	ldi	r22, 0x41	; 65
    7028:	79 e5       	ldi	r23, 0x59	; 89
    702a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    702e:	6b e2       	ldi	r22, 0x2B	; 43
    7030:	79 e5       	ldi	r23, 0x59	; 89
    7032:	c8 01       	movw	r24, r16
    7034:	1f 91       	pop	r17
    7036:	0f 91       	pop	r16
    7038:	0c 94 55 d7 	jmp	0x1aeaa	; 0x1aeaa <strcpy_P>
    703c:	41 30       	cpi	r20, 0x01	; 1
    703e:	39 f4       	brne	.+14     	; 0x704e <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
    7040:	67 e2       	ldi	r22, 0x27	; 39
    7042:	79 e5       	ldi	r23, 0x59	; 89
    7044:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7048:	61 e1       	ldi	r22, 0x11	; 17
    704a:	79 e5       	ldi	r23, 0x59	; 89
    704c:	f2 cf       	rjmp	.-28     	; 0x7032 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    704e:	42 30       	cpi	r20, 0x02	; 2
    7050:	39 f4       	brne	.+14     	; 0x7060 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    7052:	6d e0       	ldi	r22, 0x0D	; 13
    7054:	79 e5       	ldi	r23, 0x59	; 89
    7056:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    705a:	66 ef       	ldi	r22, 0xF6	; 246
    705c:	78 e5       	ldi	r23, 0x58	; 88
    705e:	e9 cf       	rjmp	.-46     	; 0x7032 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    7060:	43 30       	cpi	r20, 0x03	; 3
    7062:	39 f4       	brne	.+14     	; 0x7072 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    7064:	61 ef       	ldi	r22, 0xF1	; 241
    7066:	78 e5       	ldi	r23, 0x58	; 88
    7068:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    706c:	6d ed       	ldi	r22, 0xDD	; 221
    706e:	78 e5       	ldi	r23, 0x58	; 88
    7070:	e0 cf       	rjmp	.-64     	; 0x7032 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    7072:	44 30       	cpi	r20, 0x04	; 4
    7074:	39 f4       	brne	.+14     	; 0x7084 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
    7076:	69 ed       	ldi	r22, 0xD9	; 217
    7078:	78 e5       	ldi	r23, 0x58	; 88
    707a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    707e:	6a ec       	ldi	r22, 0xCA	; 202
    7080:	78 e5       	ldi	r23, 0x58	; 88
    7082:	d7 cf       	rjmp	.-82     	; 0x7032 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    7084:	1f 91       	pop	r17
    7086:	0f 91       	pop	r16
    7088:	08 95       	ret

0000708a <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
    708a:	cf 93       	push	r28
    708c:	c8 2f       	mov	r28, r24
    708e:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7092:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    7096:	8f 3f       	cpi	r24, 0xFF	; 255
    7098:	41 f0       	breq	.+16     	; 0x70aa <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
    709a:	6c 2f       	mov	r22, r28
    709c:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    70a0:	0e 94 94 8d 	call	0x11b28	; 0x11b28 <thermostat_ring_set_mode(unsigned char, unsigned char)>
    70a4:	81 e0       	ldi	r24, 0x01	; 1
    70a6:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <change_term_mode>
    70aa:	cf 91       	pop	r28
    70ac:	08 95       	ret

000070ae <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
    70ae:	cf 93       	push	r28
    70b0:	df 93       	push	r29
    70b2:	ec 01       	movw	r28, r24
    70b4:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    70b8:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    70bc:	8f 3f       	cpi	r24, 0xFF	; 255
    70be:	71 f0       	breq	.+28     	; 0x70dc <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2e>
    70c0:	40 e0       	ldi	r20, 0x00	; 0
    70c2:	c3 30       	cpi	r28, 0x03	; 3
    70c4:	d1 05       	cpc	r29, r1
    70c6:	19 f0       	breq	.+6      	; 0x70ce <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x20>
    70c8:	25 97       	sbiw	r28, 0x05	; 5
    70ca:	41 f4       	brne	.+16     	; 0x70dc <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2e>
    70cc:	41 e0       	ldi	r20, 0x01	; 1
    70ce:	60 e0       	ldi	r22, 0x00	; 0
    70d0:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    70d4:	df 91       	pop	r29
    70d6:	cf 91       	pop	r28
    70d8:	0c 94 c9 8d 	jmp	0x11b92	; 0x11b92 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
    70dc:	df 91       	pop	r29
    70de:	cf 91       	pop	r28
    70e0:	08 95       	ret

000070e2 <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)>:
_Z43button_get_show_default_ring_program_activejjh():
    70e2:	cf 93       	push	r28
    70e4:	c4 2f       	mov	r28, r20
    70e6:	84 2f       	mov	r24, r20
    70e8:	0e 94 4a 8f 	call	0x11e94	; 0x11e94 <thermostat_program_get_active(unsigned char)>
    70ec:	8f 3f       	cpi	r24, 0xFF	; 255
    70ee:	31 f0       	breq	.+12     	; 0x70fc <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)+0x1a>
    70f0:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    70f4:	0e 94 38 8d 	call	0x11a70	; 0x11a70 <thermostat_ring_get_program_id(unsigned char)>
    70f8:	91 e0       	ldi	r25, 0x01	; 1
    70fa:	c8 13       	cpse	r28, r24
    70fc:	90 e0       	ldi	r25, 0x00	; 0
    70fe:	89 2f       	mov	r24, r25
    7100:	cf 91       	pop	r28
    7102:	08 95       	ret

00007104 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
    7104:	cf 93       	push	r28
    7106:	c8 2f       	mov	r28, r24
    7108:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    710c:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    7110:	8f 3f       	cpi	r24, 0xFF	; 255
    7112:	31 f0       	breq	.+12     	; 0x7120 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x1c>
    7114:	6c 2f       	mov	r22, r28
    7116:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    711a:	cf 91       	pop	r28
    711c:	0c 94 9c 8d 	jmp	0x11b38	; 0x11b38 <thermostat_ring_get_mode_1(unsigned char, unsigned char)>
    7120:	80 e0       	ldi	r24, 0x00	; 0
    7122:	cf 91       	pop	r28
    7124:	08 95       	ret

00007126 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
    7126:	cf 93       	push	r28
    7128:	df 93       	push	r29
    712a:	ec 01       	movw	r28, r24
    712c:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7130:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    7134:	8f 3f       	cpi	r24, 0xFF	; 255
    7136:	61 f0       	breq	.+24     	; 0x7150 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2a>
    7138:	60 e0       	ldi	r22, 0x00	; 0
    713a:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    713e:	0e 94 ae 8d 	call	0x11b5c	; 0x11b5c <thermostat_ring_get_status_bites(unsigned char, unsigned char)>
    7142:	81 11       	cpse	r24, r1
    7144:	09 c0       	rjmp	.+18     	; 0x7158 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
    7146:	81 e0       	ldi	r24, 0x01	; 1
    7148:	23 97       	sbiw	r28, 0x03	; 3
    714a:	19 f0       	breq	.+6      	; 0x7152 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    714c:	80 e0       	ldi	r24, 0x00	; 0
    714e:	01 c0       	rjmp	.+2      	; 0x7152 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>
    7150:	82 e0       	ldi	r24, 0x02	; 2
    7152:	df 91       	pop	r29
    7154:	cf 91       	pop	r28
    7156:	08 95       	ret
    7158:	81 e0       	ldi	r24, 0x01	; 1
    715a:	25 97       	sbiw	r28, 0x05	; 5
    715c:	b9 f7       	brne	.-18     	; 0x714c <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x26>
    715e:	f9 cf       	rjmp	.-14     	; 0x7152 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2c>

00007160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>:
_ZN5EERefaSEh():
    7160:	0c 94 70 df 	jmp	0x1bee0	; 0x1bee0 <eeprom_write_byte>

00007164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    7164:	0f 93       	push	r16
    7166:	1f 93       	push	r17
    7168:	cf 93       	push	r28
    716a:	df 93       	push	r29
    716c:	00 97       	sbiw	r24, 0x00	; 0
    716e:	01 f1       	breq	.+64     	; 0x71b0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x4c>
    7170:	8b 01       	movw	r16, r22
    7172:	fc 01       	movw	r30, r24
    7174:	c0 81       	ld	r28, Z
    7176:	d1 81       	ldd	r29, Z+1	; 0x01
    7178:	20 97       	sbiw	r28, 0x00	; 0
    717a:	d1 f0       	breq	.+52     	; 0x71b0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x4c>
    717c:	6a 85       	ldd	r22, Y+10	; 0x0a
    717e:	7b 85       	ldd	r23, Y+11	; 0x0b
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    7180:	01 15       	cp	r16, r1
    7182:	11 05       	cpc	r17, r1
    7184:	19 f0       	breq	.+6      	; 0x718c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x28>
    7186:	61 15       	cp	r22, r1
    7188:	71 05       	cpc	r23, r1
    718a:	49 f4       	brne	.+18     	; 0x719e <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x3a>
    718c:	06 17       	cp	r16, r22
    718e:	17 07       	cpc	r17, r23
    7190:	59 f4       	brne	.+22     	; 0x71a8 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    7192:	ce 01       	movw	r24, r28
    7194:	df 91       	pop	r29
    7196:	cf 91       	pop	r28
    7198:	1f 91       	pop	r17
    719a:	0f 91       	pop	r16
    719c:	08 95       	ret
_ZNK11ArduinoJson9Internals23ZeroTerminatedRamString6equalsEPKc():
    719e:	c8 01       	movw	r24, r16
    71a0:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    71a4:	89 2b       	or	r24, r25
    71a6:	a9 f3       	breq	.-22     	; 0x7192 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
    71a8:	0e 80       	ldd	r0, Y+6	; 0x06
    71aa:	df 81       	ldd	r29, Y+7	; 0x07
    71ac:	c0 2d       	mov	r28, r0
    71ae:	e4 cf       	rjmp	.-56     	; 0x7178 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x14>
    71b0:	d0 e0       	ldi	r29, 0x00	; 0
    71b2:	c0 e0       	ldi	r28, 0x00	; 0
    71b4:	ee cf       	rjmp	.-36     	; 0x7192 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]+0x2e>

000071b6 <get_function_budik_enabled(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_budik_enabledjjh():
    71b6:	81 e0       	ldi	r24, 0x01	; 1
    71b8:	08 95       	ret

000071ba <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
    71ba:	08 95       	ret

000071bc <ArduinoJson::JsonArray::add()>:
_ZN11ArduinoJson9JsonArray3addEv():
    71bc:	0f 93       	push	r16
    71be:	1f 93       	push	r17
    71c0:	cf 93       	push	r28
    71c2:	df 93       	push	r29
    71c4:	dc 01       	movw	r26, r24
    71c6:	12 96       	adiw	r26, 0x02	; 2
    71c8:	2d 91       	ld	r18, X+
    71ca:	3c 91       	ld	r19, X
    71cc:	23 2b       	or	r18, r19
    71ce:	41 f4       	brne	.+16     	; 0x71e0 <ArduinoJson::JsonArray::add()+0x24>
    71d0:	60 e0       	ldi	r22, 0x00	; 0
    71d2:	70 e0       	ldi	r23, 0x00	; 0
    71d4:	cb 01       	movw	r24, r22
    71d6:	df 91       	pop	r29
    71d8:	cf 91       	pop	r28
    71da:	1f 91       	pop	r17
    71dc:	0f 91       	pop	r16
    71de:	08 95       	ret
    71e0:	8c 01       	movw	r16, r24
    71e2:	ec 01       	movw	r28, r24
    71e4:	88 81       	ld	r24, Y
    71e6:	99 81       	ldd	r25, Y+1	; 0x01
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
    71e8:	dc 01       	movw	r26, r24
    71ea:	ed 91       	ld	r30, X+
    71ec:	fc 91       	ld	r31, X
    71ee:	01 90       	ld	r0, Z+
    71f0:	f0 81       	ld	r31, Z
    71f2:	e0 2d       	mov	r30, r0
    71f4:	6c e0       	ldi	r22, 0x0C	; 12
    71f6:	70 e0       	ldi	r23, 0x00	; 0
    71f8:	19 95       	eicall
    71fa:	fc 01       	movw	r30, r24
_ZN11ArduinoJson9JsonArray3addEv():
    71fc:	89 2b       	or	r24, r25
    71fe:	31 f1       	breq	.+76     	; 0x724c <ArduinoJson::JsonArray::add()+0x90>
    7200:	8c e0       	ldi	r24, 0x0C	; 12
    7202:	ef 01       	movw	r28, r30
    7204:	19 92       	st	Y+, r1
    7206:	8a 95       	dec	r24
    7208:	e9 f7       	brne	.-6      	; 0x7204 <ArduinoJson::JsonArray::add()+0x48>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
    720a:	11 82       	std	Z+1, r1	; 0x01
    720c:	10 82       	st	Z, r1
_ZN11ArduinoJson9JsonArray3addEv():
    720e:	e8 01       	movw	r28, r16
    7210:	aa 81       	ldd	r26, Y+2	; 0x02
    7212:	bb 81       	ldd	r27, Y+3	; 0x03
    7214:	12 96       	adiw	r26, 0x02	; 2
    7216:	8d 91       	ld	r24, X+
    7218:	9c 91       	ld	r25, X
    721a:	13 97       	sbiw	r26, 0x03	; 3
    721c:	00 97       	sbiw	r24, 0x00	; 0
    721e:	91 f0       	breq	.+36     	; 0x7244 <ArduinoJson::JsonArray::add()+0x88>
    7220:	91 87       	std	Z+9, r25	; 0x09
    7222:	80 87       	std	Z+8, r24	; 0x08
    7224:	ec 01       	movw	r28, r24
    7226:	ff 83       	std	Y+7, r31	; 0x07
    7228:	ee 83       	std	Y+6, r30	; 0x06
    722a:	13 96       	adiw	r26, 0x03	; 3
    722c:	fc 93       	st	X, r31
    722e:	ee 93       	st	-X, r30
    7230:	12 97       	sbiw	r26, 0x02	; 2
    7232:	3e 2f       	mov	r19, r30
    7234:	2f 2f       	mov	r18, r31
    7236:	f8 01       	movw	r30, r16
    7238:	40 81       	ld	r20, Z
    723a:	51 81       	ldd	r21, Z+1	; 0x01
    723c:	ba 01       	movw	r22, r20
    723e:	83 2f       	mov	r24, r19
    7240:	92 2f       	mov	r25, r18
    7242:	c9 cf       	rjmp	.-110    	; 0x71d6 <ArduinoJson::JsonArray::add()+0x1a>
    7244:	11 96       	adiw	r26, 0x01	; 1
    7246:	fc 93       	st	X, r31
    7248:	ee 93       	st	-X, r30
    724a:	ef cf       	rjmp	.-34     	; 0x722a <ArduinoJson::JsonArray::add()+0x6e>
    724c:	30 e0       	ldi	r19, 0x00	; 0
    724e:	20 e0       	ldi	r18, 0x00	; 0
    7250:	50 e0       	ldi	r21, 0x00	; 0
    7252:	40 e0       	ldi	r20, 0x00	; 0
    7254:	f3 cf       	rjmp	.-26     	; 0x723c <ArduinoJson::JsonArray::add()+0x80>

00007256 <ArduinoJson::Internals::isFloat(char const*)>:
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7256:	cf 93       	push	r28
    7258:	df 93       	push	r29
    725a:	ec 01       	movw	r28, r24
    725c:	00 97       	sbiw	r24, 0x00	; 0
    725e:	09 f4       	brne	.+2      	; 0x7262 <ArduinoJson::Internals::isFloat(char const*)+0xc>
    7260:	3f c0       	rjmp	.+126    	; 0x72e0 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    7262:	6f ec       	ldi	r22, 0xCF	; 207
    7264:	72 e0       	ldi	r23, 0x02	; 2
    7266:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    726a:	89 2b       	or	r24, r25
    726c:	e9 f1       	breq	.+122    	; 0x72e8 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    726e:	88 81       	ld	r24, Y
_ZN11ArduinoJson9Internals6issignEc():
    7270:	8d 32       	cpi	r24, 0x2D	; 45
    7272:	11 f0       	breq	.+4      	; 0x7278 <ArduinoJson::Internals::isFloat(char const*)+0x22>
    7274:	8b 32       	cpi	r24, 0x2B	; 43
    7276:	09 f4       	brne	.+2      	; 0x727a <ArduinoJson::Internals::isFloat(char const*)+0x24>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7278:	21 96       	adiw	r28, 0x01	; 1
    727a:	63 ed       	ldi	r22, 0xD3	; 211
    727c:	72 e0       	ldi	r23, 0x02	; 2
    727e:	ce 01       	movw	r24, r28
    7280:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    7284:	89 2b       	or	r24, r25
    7286:	81 f1       	breq	.+96     	; 0x72e8 <ArduinoJson::Internals::isFloat(char const*)+0x92>
    7288:	88 81       	ld	r24, Y
    728a:	88 23       	and	r24, r24
    728c:	49 f1       	breq	.+82     	; 0x72e0 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    728e:	fe 01       	movw	r30, r28
    7290:	89 91       	ld	r24, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
    7292:	90 ed       	ldi	r25, 0xD0	; 208
    7294:	98 0f       	add	r25, r24
_ZN11ArduinoJson9Internals7isFloatEPKc():
    7296:	9a 30       	cpi	r25, 0x0A	; 10
    7298:	d0 f3       	brcs	.-12     	; 0x728e <ArduinoJson::Internals::isFloat(char const*)+0x38>
    729a:	8e 32       	cpi	r24, 0x2E	; 46
    729c:	41 f4       	brne	.+16     	; 0x72ae <ArduinoJson::Internals::isFloat(char const*)+0x58>
    729e:	9e 01       	movw	r18, r28
    72a0:	f9 01       	movw	r30, r18
    72a2:	2f 5f       	subi	r18, 0xFF	; 255
    72a4:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
    72a6:	80 81       	ld	r24, Z
    72a8:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    72aa:	8a 30       	cpi	r24, 0x0A	; 10
    72ac:	c8 f3       	brcs	.-14     	; 0x72a0 <ArduinoJson::Internals::isFloat(char const*)+0x4a>
    72ae:	80 81       	ld	r24, Z
    72b0:	8f 7d       	andi	r24, 0xDF	; 223
    72b2:	85 34       	cpi	r24, 0x45	; 69
    72b4:	89 f4       	brne	.+34     	; 0x72d8 <ArduinoJson::Internals::isFloat(char const*)+0x82>
    72b6:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals6issignEc():
    72b8:	8d 32       	cpi	r24, 0x2D	; 45
    72ba:	a1 f0       	breq	.+40     	; 0x72e4 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
    72bc:	8b 32       	cpi	r24, 0x2B	; 43
    72be:	91 f0       	breq	.+36     	; 0x72e4 <ArduinoJson::Internals::isFloat(char const*)+0x8e>
_ZN11ArduinoJson9Internals7isFloatEPKc():
    72c0:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    72c2:	80 81       	ld	r24, Z
    72c4:	80 53       	subi	r24, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    72c6:	8a 30       	cpi	r24, 0x0A	; 10
    72c8:	58 f4       	brcc	.+22     	; 0x72e0 <ArduinoJson::Internals::isFloat(char const*)+0x8a>
    72ca:	cf 01       	movw	r24, r30
    72cc:	fc 01       	movw	r30, r24
    72ce:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
    72d0:	20 81       	ld	r18, Z
    72d2:	20 53       	subi	r18, 0x30	; 48
_ZN11ArduinoJson9Internals7isFloatEPKc():
    72d4:	2a 30       	cpi	r18, 0x0A	; 10
    72d6:	d0 f3       	brcs	.-12     	; 0x72cc <ArduinoJson::Internals::isFloat(char const*)+0x76>
    72d8:	81 e0       	ldi	r24, 0x01	; 1
    72da:	90 81       	ld	r25, Z
    72dc:	99 23       	and	r25, r25
    72de:	29 f0       	breq	.+10     	; 0x72ea <ArduinoJson::Internals::isFloat(char const*)+0x94>
    72e0:	80 e0       	ldi	r24, 0x00	; 0
    72e2:	03 c0       	rjmp	.+6      	; 0x72ea <ArduinoJson::Internals::isFloat(char const*)+0x94>
    72e4:	32 96       	adiw	r30, 0x02	; 2
    72e6:	ed cf       	rjmp	.-38     	; 0x72c2 <ArduinoJson::Internals::isFloat(char const*)+0x6c>
    72e8:	81 e0       	ldi	r24, 0x01	; 1
    72ea:	df 91       	pop	r29
    72ec:	cf 91       	pop	r28
    72ee:	08 95       	ret

000072f0 <printf_begin()>:
_Z12printf_beginv():
    72f0:	70 e0       	ldi	r23, 0x00	; 0
    72f2:	60 e0       	ldi	r22, 0x00	; 0
    72f4:	8a e2       	ldi	r24, 0x2A	; 42
    72f6:	90 e8       	ldi	r25, 0x80	; 128
    72f8:	0c 94 0b d8 	jmp	0x1b016	; 0x1b016 <fdevopen>

000072fc <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
    72fc:	30 e0       	ldi	r19, 0x00	; 0
    72fe:	20 e0       	ldi	r18, 0x00	; 0
    7300:	e1 e0       	ldi	r30, 0x01	; 1
    7302:	f0 e0       	ldi	r31, 0x00	; 0
    7304:	af 01       	movw	r20, r30
    7306:	02 2e       	mov	r0, r18
    7308:	01 c0       	rjmp	.+2      	; 0x730c <enable_redraw(unsigned char, unsigned char)+0x10>
    730a:	44 0f       	add	r20, r20
    730c:	0a 94       	dec	r0
    730e:	ea f7       	brpl	.-6      	; 0x730a <enable_redraw(unsigned char, unsigned char)+0xe>
    7310:	98 2f       	mov	r25, r24
    7312:	94 23       	and	r25, r20
    7314:	11 f0       	breq	.+4      	; 0x731a <enable_redraw(unsigned char, unsigned char)+0x1e>
    7316:	46 23       	and	r20, r22
    7318:	39 f4       	brne	.+14     	; 0x7328 <enable_redraw(unsigned char, unsigned char)+0x2c>
    731a:	2f 5f       	subi	r18, 0xFF	; 255
    731c:	3f 4f       	sbci	r19, 0xFF	; 255
    731e:	28 30       	cpi	r18, 0x08	; 8
    7320:	31 05       	cpc	r19, r1
    7322:	81 f7       	brne	.-32     	; 0x7304 <enable_redraw(unsigned char, unsigned char)+0x8>
    7324:	80 e0       	ldi	r24, 0x00	; 0
    7326:	08 95       	ret
    7328:	81 e0       	ldi	r24, 0x01	; 1
    732a:	08 95       	ret

0000732c <MenuHistoryInit()>:
_Z15MenuHistoryInitv():
    732c:	e0 91 64 09 	lds	r30, 0x0964	; 0x800964 <MenuHistoryIndex>
    7330:	f0 e0       	ldi	r31, 0x00	; 0
    7332:	e1 59       	subi	r30, 0x91	; 145
    7334:	f6 4f       	sbci	r31, 0xF6	; 246
    7336:	10 82       	st	Z, r1
    7338:	08 95       	ret

0000733a <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
    733a:	ff 92       	push	r15
    733c:	0f 93       	push	r16
    733e:	1f 93       	push	r17
    7340:	cf 93       	push	r28
    7342:	df 93       	push	r29
    7344:	dc 01       	movw	r26, r24
    7346:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <MenuHistoryIndex>
    734a:	30 e0       	ldi	r19, 0x00	; 0
    734c:	80 e0       	ldi	r24, 0x00	; 0
    734e:	65 e4       	ldi	r22, 0x45	; 69
    7350:	75 e0       	ldi	r23, 0x05	; 5
    7352:	ca ed       	ldi	r28, 0xDA	; 218
    7354:	d2 e0       	ldi	r29, 0x02	; 2
    7356:	89 01       	movw	r16, r18
    7358:	01 59       	subi	r16, 0x91	; 145
    735a:	16 4f       	sbci	r17, 0xF6	; 246
    735c:	fb 01       	movw	r30, r22
    735e:	94 91       	lpm	r25, Z
    7360:	89 17       	cp	r24, r25
    7362:	e8 f4       	brcc	.+58     	; 0x739e <MenuHistoryGetMenu(unsigned char*)+0x64>
    7364:	8c 9f       	mul	r24, r28
    7366:	a0 01       	movw	r20, r0
    7368:	8d 9f       	mul	r24, r29
    736a:	50 0d       	add	r21, r0
    736c:	11 24       	eor	r1, r1
    736e:	fa 01       	movw	r30, r20
    7370:	e2 5f       	subi	r30, 0xF2	; 242
    7372:	f7 4f       	sbci	r31, 0xF7	; 247
    7374:	f4 90       	lpm	r15, Z
    7376:	f8 01       	movw	r30, r16
    7378:	90 81       	ld	r25, Z
    737a:	9f 11       	cpse	r25, r15
    737c:	0e c0       	rjmp	.+28     	; 0x739a <MenuHistoryGetMenu(unsigned char*)+0x60>
    737e:	47 5b       	subi	r20, 0xB7	; 183
    7380:	5a 4f       	sbci	r21, 0xFA	; 250
    7382:	2b 59       	subi	r18, 0x9B	; 155
    7384:	36 4f       	sbci	r19, 0xF6	; 246
    7386:	f9 01       	movw	r30, r18
    7388:	20 81       	ld	r18, Z
    738a:	2c 93       	st	X, r18
    738c:	ca 01       	movw	r24, r20
    738e:	df 91       	pop	r29
    7390:	cf 91       	pop	r28
    7392:	1f 91       	pop	r17
    7394:	0f 91       	pop	r16
    7396:	ff 90       	pop	r15
    7398:	08 95       	ret
    739a:	8f 5f       	subi	r24, 0xFF	; 255
    739c:	df cf       	rjmp	.-66     	; 0x735c <MenuHistoryGetMenu(unsigned char*)+0x22>
    739e:	80 e0       	ldi	r24, 0x00	; 0
    73a0:	66 e4       	ldi	r22, 0x46	; 70
    73a2:	75 e0       	ldi	r23, 0x05	; 5
    73a4:	ca ed       	ldi	r28, 0xDA	; 218
    73a6:	d2 e0       	ldi	r29, 0x02	; 2
    73a8:	89 01       	movw	r16, r18
    73aa:	01 59       	subi	r16, 0x91	; 145
    73ac:	16 4f       	sbci	r17, 0xF6	; 246
    73ae:	fb 01       	movw	r30, r22
    73b0:	94 91       	lpm	r25, Z
    73b2:	89 17       	cp	r24, r25
    73b4:	90 f4       	brcc	.+36     	; 0x73da <MenuHistoryGetMenu(unsigned char*)+0xa0>
    73b6:	8c 9f       	mul	r24, r28
    73b8:	a0 01       	movw	r20, r0
    73ba:	8d 9f       	mul	r24, r29
    73bc:	50 0d       	add	r21, r0
    73be:	11 24       	eor	r1, r1
    73c0:	fa 01       	movw	r30, r20
    73c2:	ee 56       	subi	r30, 0x6E	; 110
    73c4:	fb 4d       	sbci	r31, 0xDB	; 219
    73c6:	f4 90       	lpm	r15, Z
    73c8:	f8 01       	movw	r30, r16
    73ca:	90 81       	ld	r25, Z
    73cc:	9f 11       	cpse	r25, r15
    73ce:	03 c0       	rjmp	.+6      	; 0x73d6 <MenuHistoryGetMenu(unsigned char*)+0x9c>
    73d0:	43 53       	subi	r20, 0x33	; 51
    73d2:	5e 4d       	sbci	r21, 0xDE	; 222
    73d4:	d6 cf       	rjmp	.-84     	; 0x7382 <MenuHistoryGetMenu(unsigned char*)+0x48>
    73d6:	8f 5f       	subi	r24, 0xFF	; 255
    73d8:	ea cf       	rjmp	.-44     	; 0x73ae <MenuHistoryGetMenu(unsigned char*)+0x74>
    73da:	80 e0       	ldi	r24, 0x00	; 0
    73dc:	67 e4       	ldi	r22, 0x47	; 71
    73de:	75 e0       	ldi	r23, 0x05	; 5
    73e0:	ca ed       	ldi	r28, 0xDA	; 218
    73e2:	d2 e0       	ldi	r29, 0x02	; 2
    73e4:	89 01       	movw	r16, r18
    73e6:	01 59       	subi	r16, 0x91	; 145
    73e8:	16 4f       	sbci	r17, 0xF6	; 246
    73ea:	fb 01       	movw	r30, r22
    73ec:	94 91       	lpm	r25, Z
    73ee:	89 17       	cp	r24, r25
    73f0:	90 f4       	brcc	.+36     	; 0x7416 <MenuHistoryGetMenu(unsigned char*)+0xdc>
    73f2:	8c 9f       	mul	r24, r28
    73f4:	a0 01       	movw	r20, r0
    73f6:	8d 9f       	mul	r24, r29
    73f8:	50 0d       	add	r21, r0
    73fa:	11 24       	eor	r1, r1
    73fc:	fa 01       	movw	r30, r20
    73fe:	e2 55       	subi	r30, 0x52	; 82
    7400:	fa 4c       	sbci	r31, 0xCA	; 202
    7402:	f4 90       	lpm	r15, Z
    7404:	f8 01       	movw	r30, r16
    7406:	90 81       	ld	r25, Z
    7408:	9f 11       	cpse	r25, r15
    740a:	03 c0       	rjmp	.+6      	; 0x7412 <MenuHistoryGetMenu(unsigned char*)+0xd8>
    740c:	47 51       	subi	r20, 0x17	; 23
    740e:	5d 4c       	sbci	r21, 0xCD	; 205
    7410:	b8 cf       	rjmp	.-144    	; 0x7382 <MenuHistoryGetMenu(unsigned char*)+0x48>
    7412:	8f 5f       	subi	r24, 0xFF	; 255
    7414:	ea cf       	rjmp	.-44     	; 0x73ea <MenuHistoryGetMenu(unsigned char*)+0xb0>
    7416:	90 e0       	ldi	r25, 0x00	; 0
    7418:	68 e4       	ldi	r22, 0x48	; 72
    741a:	75 e0       	ldi	r23, 0x05	; 5
    741c:	ca ed       	ldi	r28, 0xDA	; 218
    741e:	d2 e0       	ldi	r29, 0x02	; 2
    7420:	89 01       	movw	r16, r18
    7422:	01 59       	subi	r16, 0x91	; 145
    7424:	16 4f       	sbci	r17, 0xF6	; 246
    7426:	fb 01       	movw	r30, r22
    7428:	84 91       	lpm	r24, Z
    742a:	98 17       	cp	r25, r24
    742c:	08 f0       	brcs	.+2      	; 0x7430 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    742e:	ae cf       	rjmp	.-164    	; 0x738c <MenuHistoryGetMenu(unsigned char*)+0x52>
    7430:	9c 9f       	mul	r25, r28
    7432:	a0 01       	movw	r20, r0
    7434:	9d 9f       	mul	r25, r29
    7436:	50 0d       	add	r21, r0
    7438:	11 24       	eor	r1, r1
    743a:	fa 01       	movw	r30, r20
    743c:	e6 53       	subi	r30, 0x36	; 54
    743e:	f9 4b       	sbci	r31, 0xB9	; 185
    7440:	f4 90       	lpm	r15, Z
    7442:	f8 01       	movw	r30, r16
    7444:	80 81       	ld	r24, Z
    7446:	8f 11       	cpse	r24, r15
    7448:	03 c0       	rjmp	.+6      	; 0x7450 <MenuHistoryGetMenu(unsigned char*)+0x116>
    744a:	4b 5f       	subi	r20, 0xFB	; 251
    744c:	5b 4b       	sbci	r21, 0xBB	; 187
    744e:	99 cf       	rjmp	.-206    	; 0x7382 <MenuHistoryGetMenu(unsigned char*)+0x48>
    7450:	9f 5f       	subi	r25, 0xFF	; 255
    7452:	e9 cf       	rjmp	.-46     	; 0x7426 <MenuHistoryGetMenu(unsigned char*)+0xec>

00007454 <DisplayClean(unsigned int)>:
_Z12DisplayCleanj():
    7454:	bc 01       	movw	r22, r24
    7456:	81 ea       	ldi	r24, 0xA1	; 161
    7458:	9b e0       	ldi	r25, 0x0B	; 11
    745a:	0c 94 37 92 	jmp	0x1246e	; 0x1246e <LCDWIKI_GUI::Fill_Screen(unsigned int)>

0000745e <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
    745e:	2f 92       	push	r2
    7460:	3f 92       	push	r3
    7462:	4f 92       	push	r4
    7464:	5f 92       	push	r5
    7466:	6f 92       	push	r6
    7468:	7f 92       	push	r7
    746a:	8f 92       	push	r8
    746c:	9f 92       	push	r9
    746e:	af 92       	push	r10
    7470:	bf 92       	push	r11
    7472:	cf 92       	push	r12
    7474:	df 92       	push	r13
    7476:	ef 92       	push	r14
    7478:	ff 92       	push	r15
    747a:	0f 93       	push	r16
    747c:	1f 93       	push	r17
    747e:	cf 93       	push	r28
    7480:	df 93       	push	r29
    7482:	1f 92       	push	r1
    7484:	cd b7       	in	r28, 0x3d	; 61
    7486:	de b7       	in	r29, 0x3e	; 62
    7488:	ce 01       	movw	r24, r28
    748a:	01 96       	adiw	r24, 0x01	; 1
    748c:	0e 94 9d 39 	call	0x733a	; 0x733a <MenuHistoryGetMenu(unsigned char*)>
    7490:	7c 01       	movw	r14, r24
    7492:	fc 01       	movw	r30, r24
    7494:	e2 53       	subi	r30, 0x32	; 50
    7496:	fd 4f       	sbci	r31, 0xFD	; 253
    7498:	b4 90       	lpm	r11, Z
    749a:	38 97       	sbiw	r30, 0x08	; 8
    749c:	85 90       	lpm	r8, Z+
    749e:	94 90       	lpm	r9, Z
    74a0:	fc 01       	movw	r30, r24
    74a2:	e8 53       	subi	r30, 0x38	; 56
    74a4:	fd 4f       	sbci	r31, 0xFD	; 253
    74a6:	c5 90       	lpm	r12, Z+
    74a8:	d4 90       	lpm	r13, Z
    74aa:	fc 01       	movw	r30, r24
    74ac:	e6 53       	subi	r30, 0x36	; 54
    74ae:	fd 4f       	sbci	r31, 0xFD	; 253
    74b0:	65 90       	lpm	r6, Z+
    74b2:	74 90       	lpm	r7, Z
    74b4:	fc 01       	movw	r30, r24
    74b6:	e4 53       	subi	r30, 0x34	; 52
    74b8:	fd 4f       	sbci	r31, 0xFD	; 253
    74ba:	45 90       	lpm	r4, Z+
    74bc:	54 90       	lpm	r5, Z
    74be:	fc 01       	movw	r30, r24
    74c0:	e1 53       	subi	r30, 0x31	; 49
    74c2:	fd 4f       	sbci	r31, 0xFD	; 253
    74c4:	25 90       	lpm	r2, Z+
    74c6:	34 90       	lpm	r3, Z
    74c8:	b0 fe       	sbrs	r11, 0
    74ca:	03 c0       	rjmp	.+6      	; 0x74d2 <MenuPrepareStyle()+0x74>
    74cc:	c1 01       	movw	r24, r2
    74ce:	0e 94 2a 3a 	call	0x7454	; 0x7454 <DisplayClean(unsigned int)>
    74d2:	b1 fe       	sbrs	r11, 1
    74d4:	11 c0       	rjmp	.+34     	; 0x74f8 <MenuPrepareStyle()+0x9a>
    74d6:	b1 01       	movw	r22, r2
    74d8:	81 ea       	ldi	r24, 0xA1	; 161
    74da:	9b e0       	ldi	r25, 0x0B	; 11
    74dc:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    74e0:	86 01       	movw	r16, r12
    74e2:	04 0d       	add	r16, r4
    74e4:	15 1d       	adc	r17, r5
    74e6:	94 01       	movw	r18, r8
    74e8:	26 0d       	add	r18, r6
    74ea:	37 1d       	adc	r19, r7
    74ec:	a6 01       	movw	r20, r12
    74ee:	b4 01       	movw	r22, r8
    74f0:	81 ea       	ldi	r24, 0xA1	; 161
    74f2:	9b e0       	ldi	r25, 0x0B	; 11
    74f4:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    74f8:	b2 fe       	sbrs	r11, 2
    74fa:	30 c0       	rjmp	.+96     	; 0x755c <MenuPrepareStyle()+0xfe>
    74fc:	70 e0       	ldi	r23, 0x00	; 0
    74fe:	60 e0       	ldi	r22, 0x00	; 0
    7500:	81 ea       	ldi	r24, 0xA1	; 161
    7502:	9b e0       	ldi	r25, 0x0B	; 11
    7504:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7508:	b1 2c       	mov	r11, r1
    750a:	a1 2c       	mov	r10, r1
    750c:	4c 0c       	add	r4, r12
    750e:	5d 1c       	adc	r5, r13
    7510:	14 01       	movw	r2, r8
    7512:	26 0c       	add	r2, r6
    7514:	37 1c       	adc	r3, r7
    7516:	82 01       	movw	r16, r4
    7518:	0a 19       	sub	r16, r10
    751a:	1b 09       	sbc	r17, r11
    751c:	91 01       	movw	r18, r2
    751e:	2a 19       	sub	r18, r10
    7520:	3b 09       	sbc	r19, r11
    7522:	b4 01       	movw	r22, r8
    7524:	6a 0d       	add	r22, r10
    7526:	7b 1d       	adc	r23, r11
    7528:	a6 01       	movw	r20, r12
    752a:	81 ea       	ldi	r24, 0xA1	; 161
    752c:	9b e0       	ldi	r25, 0x0B	; 11
    752e:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7532:	93 01       	movw	r18, r6
    7534:	2a 19       	sub	r18, r10
    7536:	3b 09       	sbc	r19, r11
    7538:	a6 01       	movw	r20, r12
    753a:	49 5e       	subi	r20, 0xE9	; 233
    753c:	5f 4f       	sbci	r21, 0xFF	; 255
    753e:	b4 01       	movw	r22, r8
    7540:	81 ea       	ldi	r24, 0xA1	; 161
    7542:	9b e0       	ldi	r25, 0x0B	; 11
    7544:	0e 94 21 92 	call	0x12442	; 0x12442 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    7548:	8f ef       	ldi	r24, 0xFF	; 255
    754a:	a8 1a       	sub	r10, r24
    754c:	b8 0a       	sbc	r11, r24
    754e:	ef ef       	ldi	r30, 0xFF	; 255
    7550:	ce 1a       	sub	r12, r30
    7552:	de 0a       	sbc	r13, r30
    7554:	f4 e0       	ldi	r31, 0x04	; 4
    7556:	af 16       	cp	r10, r31
    7558:	b1 04       	cpc	r11, r1
    755a:	e9 f6       	brne	.-70     	; 0x7516 <MenuPrepareStyle()+0xb8>
    755c:	f7 01       	movw	r30, r14
    755e:	e8 52       	subi	r30, 0x28	; 40
    7560:	fd 4f       	sbci	r31, 0xFD	; 253
    7562:	25 91       	lpm	r18, Z+
    7564:	34 91       	lpm	r19, Z
    7566:	f7 01       	movw	r30, r14
    7568:	eb 53       	subi	r30, 0x3B	; 59
    756a:	fd 4f       	sbci	r31, 0xFD	; 253
    756c:	e4 91       	lpm	r30, Z
    756e:	40 e0       	ldi	r20, 0x00	; 0
    7570:	70 e0       	ldi	r23, 0x00	; 0
    7572:	60 e0       	ldi	r22, 0x00	; 0
    7574:	8e 2f       	mov	r24, r30
    7576:	90 e0       	ldi	r25, 0x00	; 0
    7578:	f9 01       	movw	r30, r18
    757a:	19 95       	eicall
    757c:	0f 90       	pop	r0
    757e:	df 91       	pop	r29
    7580:	cf 91       	pop	r28
    7582:	1f 91       	pop	r17
    7584:	0f 91       	pop	r16
    7586:	ff 90       	pop	r15
    7588:	ef 90       	pop	r14
    758a:	df 90       	pop	r13
    758c:	cf 90       	pop	r12
    758e:	bf 90       	pop	r11
    7590:	af 90       	pop	r10
    7592:	9f 90       	pop	r9
    7594:	8f 90       	pop	r8
    7596:	7f 90       	pop	r7
    7598:	6f 90       	pop	r6
    759a:	5f 90       	pop	r5
    759c:	4f 90       	pop	r4
    759e:	3f 90       	pop	r3
    75a0:	2f 90       	pop	r2
    75a2:	08 95       	ret

000075a4 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
    75a4:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <MenuHistoryIndex>
    75a8:	88 23       	and	r24, r24
    75aa:	29 f0       	breq	.+10     	; 0x75b6 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
    75ac:	81 50       	subi	r24, 0x01	; 1
    75ae:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <MenuHistoryIndex>
    75b2:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <MenuPrepareStyle()>
    75b6:	08 95       	ret

000075b8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
    75b8:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <MenuHistoryIndex>
    75bc:	2a 30       	cpi	r18, 0x0A	; 10
    75be:	70 f4       	brcc	.+28     	; 0x75dc <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
    75c0:	2f 5f       	subi	r18, 0xFF	; 255
    75c2:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <MenuHistoryIndex>
    75c6:	30 e0       	ldi	r19, 0x00	; 0
    75c8:	f9 01       	movw	r30, r18
    75ca:	e1 59       	subi	r30, 0x91	; 145
    75cc:	f6 4f       	sbci	r31, 0xF6	; 246
    75ce:	80 83       	st	Z, r24
    75d0:	2b 59       	subi	r18, 0x9B	; 155
    75d2:	36 4f       	sbci	r19, 0xF6	; 246
    75d4:	f9 01       	movw	r30, r18
    75d6:	60 83       	st	Z, r22
    75d8:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <MenuPrepareStyle()>
    75dc:	08 95       	ret

000075de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>:
_Z19MenuHistoryPrevMenujjh():
    75de:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <MenuHistoryIndex>
    75e2:	88 23       	and	r24, r24
    75e4:	29 f0       	breq	.+10     	; 0x75f0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]+0x12>
    75e6:	81 50       	subi	r24, 0x01	; 1
    75e8:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <MenuHistoryIndex>
    75ec:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <MenuPrepareStyle()>
    75f0:	08 95       	ret

000075f2 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
    75f2:	86 2f       	mov	r24, r22
    75f4:	0e 94 83 89 	call	0x11306	; 0x11306 <tds_set_clear_wrom_id(unsigned char)>
    75f8:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

000075fc <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
    75fc:	e0 91 7c 09 	lds	r30, 0x097C	; 0x80097c <dialog_save_string_function>
    7600:	f0 91 7d 09 	lds	r31, 0x097D	; 0x80097d <dialog_save_string_function+0x1>
    7604:	19 95       	eicall
    7606:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

0000760a <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
    760a:	1f 93       	push	r17
    760c:	cf 93       	push	r28
    760e:	df 93       	push	r29
    7610:	ec 01       	movw	r28, r24
    7612:	14 2f       	mov	r17, r20
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	80 e0       	ldi	r24, 0x00	; 0
    7618:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    761c:	ab 01       	movw	r20, r22
    761e:	bc 01       	movw	r22, r24
    7620:	85 e1       	ldi	r24, 0x15	; 21
    7622:	8c 9f       	mul	r24, r28
    7624:	f0 01       	movw	r30, r0
    7626:	8d 9f       	mul	r24, r29
    7628:	f0 0d       	add	r31, r0
    762a:	11 24       	eor	r1, r1
    762c:	ee 53       	subi	r30, 0x3E	; 62
    762e:	f6 4f       	sbci	r31, 0xF6	; 246
    7630:	03 88       	ldd	r0, Z+19	; 0x13
    7632:	f4 89       	ldd	r31, Z+20	; 0x14
    7634:	e0 2d       	mov	r30, r0
    7636:	21 2f       	mov	r18, r17
    7638:	ce 01       	movw	r24, r28
    763a:	19 95       	eicall
    763c:	df 91       	pop	r29
    763e:	cf 91       	pop	r28
    7640:	1f 91       	pop	r17
    7642:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00007646 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
    7646:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <dialog_yes_args1>
    764a:	e0 91 62 09 	lds	r30, 0x0962	; 0x800962 <dialog_yes_function>
    764e:	f0 91 63 09 	lds	r31, 0x0963	; 0x800963 <dialog_yes_function+0x1>
    7652:	40 e0       	ldi	r20, 0x00	; 0
    7654:	70 e0       	ldi	r23, 0x00	; 0
    7656:	60 e0       	ldi	r22, 0x00	; 0
    7658:	90 e0       	ldi	r25, 0x00	; 0
    765a:	19 95       	eicall
    765c:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00007660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>:
_Z19MenuHistoryNextMenujjh():
    7660:	20 91 64 09 	lds	r18, 0x0964	; 0x800964 <MenuHistoryIndex>
    7664:	2a 30       	cpi	r18, 0x0A	; 10
    7666:	70 f4       	brcc	.+28     	; 0x7684 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]+0x24>
    7668:	2f 5f       	subi	r18, 0xFF	; 255
    766a:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <MenuHistoryIndex>
    766e:	30 e0       	ldi	r19, 0x00	; 0
    7670:	f9 01       	movw	r30, r18
    7672:	e1 59       	subi	r30, 0x91	; 145
    7674:	f6 4f       	sbci	r31, 0xF6	; 246
    7676:	80 83       	st	Z, r24
    7678:	2b 59       	subi	r18, 0x9B	; 155
    767a:	36 4f       	sbci	r19, 0xF6	; 246
    767c:	f9 01       	movw	r30, r18
    767e:	60 83       	st	Z, r22
    7680:	0c 94 2f 3a 	jmp	0x745e	; 0x745e <MenuPrepareStyle()>
    7684:	08 95       	ret

00007686 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
    7686:	1f 93       	push	r17
    7688:	cf 93       	push	r28
    768a:	df 93       	push	r29
    768c:	c8 2f       	mov	r28, r24
    768e:	16 2f       	mov	r17, r22
    7690:	70 e0       	ldi	r23, 0x00	; 0
    7692:	60 e0       	ldi	r22, 0x00	; 0
    7694:	86 e6       	ldi	r24, 0x66	; 102
    7696:	90 e0       	ldi	r25, 0x00	; 0
    7698:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    769c:	81 2f       	mov	r24, r17
    769e:	0e 94 d7 88 	call	0x111ae	; 0x111ae <tds_get_period(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    76a2:	25 e1       	ldi	r18, 0x15	; 21
    76a4:	c2 9f       	mul	r28, r18
    76a6:	e0 01       	movw	r28, r0
    76a8:	11 24       	eor	r1, r1
    76aa:	ce 53       	subi	r28, 0x3E	; 62
    76ac:	d6 4f       	sbci	r29, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
    76ae:	bc 01       	movw	r22, r24
    76b0:	99 0f       	add	r25, r25
    76b2:	88 0b       	sbc	r24, r24
    76b4:	99 0b       	sbc	r25, r25
    76b6:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    76ba:	68 83       	st	Y, r22
    76bc:	79 83       	std	Y+1, r23	; 0x01
    76be:	8a 83       	std	Y+2, r24	; 0x02
    76c0:	9b 83       	std	Y+3, r25	; 0x03
_Z29display_function_set_variableffffhhhhPFvjfhE():
    76c2:	80 e0       	ldi	r24, 0x00	; 0
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	a0 e8       	ldi	r26, 0x80	; 128
    76c8:	bf e3       	ldi	r27, 0x3F	; 63
    76ca:	88 87       	std	Y+8, r24	; 0x08
    76cc:	99 87       	std	Y+9, r25	; 0x09
    76ce:	aa 87       	std	Y+10, r26	; 0x0a
    76d0:	bb 87       	std	Y+11, r27	; 0x0b
    76d2:	40 e0       	ldi	r20, 0x00	; 0
    76d4:	50 e0       	ldi	r21, 0x00	; 0
    76d6:	6f e7       	ldi	r22, 0x7F	; 127
    76d8:	73 e4       	ldi	r23, 0x43	; 67
    76da:	4c 83       	std	Y+4, r20	; 0x04
    76dc:	5d 83       	std	Y+5, r21	; 0x05
    76de:	6e 83       	std	Y+6, r22	; 0x06
    76e0:	7f 83       	std	Y+7, r23	; 0x07
    76e2:	8e 87       	std	Y+14, r24	; 0x0e
    76e4:	9f 87       	std	Y+15, r25	; 0x0f
    76e6:	a8 8b       	std	Y+16, r26	; 0x10
    76e8:	b9 8b       	std	Y+17, r27	; 0x11
    76ea:	81 e0       	ldi	r24, 0x01	; 1
    76ec:	8d 87       	std	Y+13, r24	; 0x0d
    76ee:	1a 8b       	std	Y+18, r17	; 0x12
    76f0:	1c 86       	std	Y+12, r1	; 0x0c
    76f2:	86 e2       	ldi	r24, 0x26	; 38
    76f4:	96 e3       	ldi	r25, 0x36	; 54
    76f6:	9c 8b       	std	Y+20, r25	; 0x14
    76f8:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
    76fa:	df 91       	pop	r29
    76fc:	cf 91       	pop	r28
    76fe:	1f 91       	pop	r17
    7700:	08 95       	ret

00007702 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
    7702:	1f 93       	push	r17
    7704:	cf 93       	push	r28
    7706:	df 93       	push	r29
    7708:	c8 2f       	mov	r28, r24
    770a:	16 2f       	mov	r17, r22
    770c:	70 e0       	ldi	r23, 0x00	; 0
    770e:	60 e0       	ldi	r22, 0x00	; 0
    7710:	86 e6       	ldi	r24, 0x66	; 102
    7712:	90 e0       	ldi	r25, 0x00	; 0
    7714:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7718:	81 2f       	mov	r24, r17
    771a:	0e 94 98 88 	call	0x11130	; 0x11130 <tds_get_offset(unsigned char)>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    771e:	25 e1       	ldi	r18, 0x15	; 21
    7720:	c2 9f       	mul	r28, r18
    7722:	e0 01       	movw	r28, r0
    7724:	11 24       	eor	r1, r1
    7726:	ce 53       	subi	r28, 0x3E	; 62
    7728:	d6 4f       	sbci	r29, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
    772a:	bc 01       	movw	r22, r24
    772c:	99 0f       	add	r25, r25
    772e:	88 0b       	sbc	r24, r24
    7730:	99 0b       	sbc	r25, r25
    7732:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    7736:	20 e0       	ldi	r18, 0x00	; 0
    7738:	30 e0       	ldi	r19, 0x00	; 0
    773a:	4a e7       	ldi	r20, 0x7A	; 122
    773c:	54 e4       	ldi	r21, 0x44	; 68
    773e:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
_Z29display_function_set_variableffffhhhhPFvjfhE():
    7742:	68 83       	st	Y, r22
    7744:	79 83       	std	Y+1, r23	; 0x01
    7746:	8a 83       	std	Y+2, r24	; 0x02
    7748:	9b 83       	std	Y+3, r25	; 0x03
    774a:	80 e0       	ldi	r24, 0x00	; 0
    774c:	90 e0       	ldi	r25, 0x00	; 0
    774e:	a0 e2       	ldi	r26, 0x20	; 32
    7750:	b1 ec       	ldi	r27, 0xC1	; 193
    7752:	88 87       	std	Y+8, r24	; 0x08
    7754:	99 87       	std	Y+9, r25	; 0x09
    7756:	aa 87       	std	Y+10, r26	; 0x0a
    7758:	bb 87       	std	Y+11, r27	; 0x0b
    775a:	80 e0       	ldi	r24, 0x00	; 0
    775c:	90 e0       	ldi	r25, 0x00	; 0
    775e:	a0 e2       	ldi	r26, 0x20	; 32
    7760:	b1 e4       	ldi	r27, 0x41	; 65
    7762:	8c 83       	std	Y+4, r24	; 0x04
    7764:	9d 83       	std	Y+5, r25	; 0x05
    7766:	ae 83       	std	Y+6, r26	; 0x06
    7768:	bf 83       	std	Y+7, r27	; 0x07
    776a:	8d ec       	ldi	r24, 0xCD	; 205
    776c:	9c ec       	ldi	r25, 0xCC	; 204
    776e:	ac ec       	ldi	r26, 0xCC	; 204
    7770:	bd e3       	ldi	r27, 0x3D	; 61
    7772:	8e 87       	std	Y+14, r24	; 0x0e
    7774:	9f 87       	std	Y+15, r25	; 0x0f
    7776:	a8 8b       	std	Y+16, r26	; 0x10
    7778:	b9 8b       	std	Y+17, r27	; 0x11
    777a:	1d 86       	std	Y+13, r1	; 0x0d
    777c:	1a 8b       	std	Y+18, r17	; 0x12
    777e:	1c 86       	std	Y+12, r1	; 0x0c
    7780:	8d e0       	ldi	r24, 0x0D	; 13
    7782:	96 e3       	ldi	r25, 0x36	; 54
    7784:	9c 8b       	std	Y+20, r25	; 0x14
    7786:	8b 8b       	std	Y+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
    7788:	df 91       	pop	r29
    778a:	cf 91       	pop	r28
    778c:	1f 91       	pop	r17
    778e:	08 95       	ret

00007790 <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)>:
_Z37button_click_term_set_mode_via_dialogjjh():
    7790:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <default_ring>
    7794:	6f 3f       	cpi	r22, 0xFF	; 255
    7796:	29 f0       	breq	.+10     	; 0x77a2 <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)+0x12>
    7798:	70 e0       	ldi	r23, 0x00	; 0
    779a:	88 e6       	ldi	r24, 0x68	; 104
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	0c 94 30 3b 	jmp	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    77a2:	08 95       	ret

000077a4 <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_nastaveni_ring_screenjjh():
    77a4:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <default_ring>
    77a8:	6f 3f       	cpi	r22, 0xFF	; 255
    77aa:	19 f0       	breq	.+6      	; 0x77b2 <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)+0xe>
    77ac:	70 e0       	ldi	r23, 0x00	; 0
    77ae:	0c 94 30 3b 	jmp	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    77b2:	08 95       	ret

000077b4 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
    77b4:	cf 93       	push	r28
    77b6:	c4 2f       	mov	r28, r20
    77b8:	84 2f       	mov	r24, r20
    77ba:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    77be:	8f 3f       	cpi	r24, 0xFF	; 255
    77c0:	51 f0       	breq	.+20     	; 0x77d6 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x22>
    77c2:	c0 93 2e 0a 	sts	0x0A2E, r28	; 0x800a2e <default_ring>
_Z22MenuHistoryUpdateArgs1h():
    77c6:	e0 91 64 09 	lds	r30, 0x0964	; 0x800964 <MenuHistoryIndex>
    77ca:	f0 e0       	ldi	r31, 0x00	; 0
    77cc:	eb 59       	subi	r30, 0x9B	; 155
    77ce:	f6 4f       	sbci	r31, 0xF6	; 246
    77d0:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
    77d2:	cf 91       	pop	r28
    77d4:	08 95       	ret
    77d6:	70 e0       	ldi	r23, 0x00	; 0
    77d8:	60 e0       	ldi	r22, 0x00	; 0
    77da:	84 e6       	ldi	r24, 0x64	; 100
    77dc:	90 e0       	ldi	r25, 0x00	; 0
    77de:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    77e2:	84 e9       	ldi	r24, 0x94	; 148
    77e4:	96 e4       	ldi	r25, 0x46	; 70
    77e6:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <dialog_yes_function+0x1>
    77ea:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <dialog_yes_function>
    77ee:	c0 93 c1 09 	sts	0x09C1, r28	; 0x8009c1 <dialog_yes_args1>
    77f2:	6a e8       	ldi	r22, 0x8A	; 138
    77f4:	78 e5       	ldi	r23, 0x58	; 88
    77f6:	81 ea       	ldi	r24, 0xA1	; 161
    77f8:	99 e0       	ldi	r25, 0x09	; 9
    77fa:	cf 91       	pop	r28
    77fc:	0c 94 55 d7 	jmp	0x1aeaa	; 0x1aeaa <strcpy_P>

00007800 <click_thermostat_set_ring_via_dialog(unsigned int, unsigned int, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialogjjh():
    7800:	60 91 2e 0a 	lds	r22, 0x0A2E	; 0x800a2e <default_ring>
    7804:	70 e0       	ldi	r23, 0x00	; 0
    7806:	8a e0       	ldi	r24, 0x0A	; 10
    7808:	90 e0       	ldi	r25, 0x00	; 0
    780a:	0c 94 30 3b 	jmp	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>

0000780e <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
    780e:	cf 93       	push	r28
    7810:	8b e0       	ldi	r24, 0x0B	; 11
    7812:	48 9f       	mul	r20, r24
    7814:	f0 01       	movw	r30, r0
    7816:	11 24       	eor	r1, r1
    7818:	e9 52       	subi	r30, 0x29	; 41
    781a:	ff 4e       	sbci	r31, 0xEF	; 239
    781c:	62 85       	ldd	r22, Z+10	; 0x0a
    781e:	6f 3f       	cpi	r22, 0xFF	; 255
    7820:	b1 f4       	brne	.+44     	; 0x784e <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    7822:	c4 2f       	mov	r28, r20
    7824:	70 e0       	ldi	r23, 0x00	; 0
    7826:	60 e0       	ldi	r22, 0x00	; 0
    7828:	84 e6       	ldi	r24, 0x64	; 100
    782a:	90 e0       	ldi	r25, 0x00	; 0
    782c:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    7830:	89 e3       	ldi	r24, 0x39	; 57
    7832:	96 e3       	ldi	r25, 0x36	; 54
    7834:	90 93 63 09 	sts	0x0963, r25	; 0x800963 <dialog_yes_function+0x1>
    7838:	80 93 62 09 	sts	0x0962, r24	; 0x800962 <dialog_yes_function>
    783c:	c0 93 c1 09 	sts	0x09C1, r28	; 0x8009c1 <dialog_yes_args1>
    7840:	6b ef       	ldi	r22, 0xFB	; 251
    7842:	77 e5       	ldi	r23, 0x57	; 87
    7844:	81 ea       	ldi	r24, 0xA1	; 161
    7846:	99 e0       	ldi	r25, 0x09	; 9
    7848:	cf 91       	pop	r28
    784a:	0c 94 55 d7 	jmp	0x1aeaa	; 0x1aeaa <strcpy_P>
    784e:	70 e0       	ldi	r23, 0x00	; 0
    7850:	84 e0       	ldi	r24, 0x04	; 4
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	cf 91       	pop	r28
    7856:	0c 94 30 3b 	jmp	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>

0000785a <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>:
_Z26display_element_set_stringPchhPFvjjhE():
    785a:	0f 93       	push	r16
    785c:	1f 93       	push	r17
    785e:	cf 93       	push	r28
    7860:	df 93       	push	r29
    7862:	06 2f       	mov	r16, r22
    7864:	14 2f       	mov	r17, r20
    7866:	e9 01       	movw	r28, r18
    7868:	bc 01       	movw	r22, r24
    786a:	81 e8       	ldi	r24, 0x81	; 129
    786c:	99 e0       	ldi	r25, 0x09	; 9
    786e:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    7872:	00 93 80 09 	sts	0x0980, r16	; 0x800980 <dialog_set_string_max_length>
    7876:	10 93 7f 09 	sts	0x097F, r17	; 0x80097f <dialog_set_string_args>
    787a:	d0 93 7d 09 	sts	0x097D, r29	; 0x80097d <dialog_save_string_function+0x1>
    787e:	c0 93 7c 09 	sts	0x097C, r28	; 0x80097c <dialog_save_string_function>
    7882:	df 91       	pop	r29
    7884:	cf 91       	pop	r28
    7886:	1f 91       	pop	r17
    7888:	0f 91       	pop	r16
    788a:	08 95       	ret

0000788c <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
    788c:	1f 93       	push	r17
    788e:	cf 93       	push	r28
    7890:	df 93       	push	r29
    7892:	00 d0       	rcall	.+0      	; 0x7894 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    7894:	00 d0       	rcall	.+0      	; 0x7896 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    7896:	00 d0       	rcall	.+0      	; 0x7898 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)+0xc>
    7898:	1f 92       	push	r1
    789a:	cd b7       	in	r28, 0x3d	; 61
    789c:	de b7       	in	r29, 0x3e	; 62
    789e:	16 2f       	mov	r17, r22
    78a0:	be 01       	movw	r22, r28
    78a2:	6f 5f       	subi	r22, 0xFF	; 255
    78a4:	7f 4f       	sbci	r23, 0xFF	; 255
    78a6:	81 2f       	mov	r24, r17
    78a8:	0e 94 22 88 	call	0x11044	; 0x11044 <tds_get_name(unsigned char, char*)>
    78ac:	70 e0       	ldi	r23, 0x00	; 0
    78ae:	60 e0       	ldi	r22, 0x00	; 0
    78b0:	87 e6       	ldi	r24, 0x67	; 103
    78b2:	90 e0       	ldi	r25, 0x00	; 0
    78b4:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    78b8:	2b e9       	ldi	r18, 0x9B	; 155
    78ba:	3c e3       	ldi	r19, 0x3C	; 60
    78bc:	41 2f       	mov	r20, r17
    78be:	68 e0       	ldi	r22, 0x08	; 8
    78c0:	ce 01       	movw	r24, r28
    78c2:	01 96       	adiw	r24, 0x01	; 1
    78c4:	0e 94 2d 3c 	call	0x785a	; 0x785a <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    78c8:	2a 96       	adiw	r28, 0x0a	; 10
    78ca:	0f b6       	in	r0, 0x3f	; 63
    78cc:	f8 94       	cli
    78ce:	de bf       	out	0x3e, r29	; 62
    78d0:	0f be       	out	0x3f, r0	; 63
    78d2:	cd bf       	out	0x3d, r28	; 61
    78d4:	df 91       	pop	r29
    78d6:	cf 91       	pop	r28
    78d8:	1f 91       	pop	r17
    78da:	08 95       	ret

000078dc <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>:
_Z44button_click_set_term_ring_name_via_keyboardjjh():
    78dc:	1f 93       	push	r17
    78de:	cf 93       	push	r28
    78e0:	df 93       	push	r29
    78e2:	00 d0       	rcall	.+0      	; 0x78e4 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0x8>
    78e4:	00 d0       	rcall	.+0      	; 0x78e6 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xa>
    78e6:	00 d0       	rcall	.+0      	; 0x78e8 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xc>
    78e8:	1f 92       	push	r1
    78ea:	cd b7       	in	r28, 0x3d	; 61
    78ec:	de b7       	in	r29, 0x3e	; 62
    78ee:	10 91 2e 0a 	lds	r17, 0x0A2E	; 0x800a2e <default_ring>
    78f2:	be 01       	movw	r22, r28
    78f4:	6f 5f       	subi	r22, 0xFF	; 255
    78f6:	7f 4f       	sbci	r23, 0xFF	; 255
    78f8:	81 2f       	mov	r24, r17
    78fa:	0e 94 cd 8c 	call	0x1199a	; 0x1199a <thermostat_ring_get_name(unsigned char, char*)>
    78fe:	70 e0       	ldi	r23, 0x00	; 0
    7900:	60 e0       	ldi	r22, 0x00	; 0
    7902:	87 e6       	ldi	r24, 0x67	; 103
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    790a:	2a eb       	ldi	r18, 0xBA	; 186
    790c:	3c e3       	ldi	r19, 0x3C	; 60
    790e:	41 2f       	mov	r20, r17
    7910:	69 e0       	ldi	r22, 0x09	; 9
    7912:	ce 01       	movw	r24, r28
    7914:	01 96       	adiw	r24, 0x01	; 1
    7916:	0e 94 2d 3c 	call	0x785a	; 0x785a <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    791a:	2a 96       	adiw	r28, 0x0a	; 10
    791c:	0f b6       	in	r0, 0x3f	; 63
    791e:	f8 94       	cli
    7920:	de bf       	out	0x3e, r29	; 62
    7922:	0f be       	out	0x3f, r0	; 63
    7924:	cd bf       	out	0x3d, r28	; 61
    7926:	df 91       	pop	r29
    7928:	cf 91       	pop	r28
    792a:	1f 91       	pop	r17
    792c:	08 95       	ret

0000792e <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
    792e:	61 e8       	ldi	r22, 0x81	; 129
    7930:	79 e0       	ldi	r23, 0x09	; 9
    7932:	0c 94 88 d7 	jmp	0x1af10	; 0x1af10 <strcpy>

00007936 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
    7936:	cf 93       	push	r28
    7938:	df 93       	push	r29
    793a:	00 d0       	rcall	.+0      	; 0x793c <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x6>
    793c:	00 d0       	rcall	.+0      	; 0x793e <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x8>
    793e:	00 d0       	rcall	.+0      	; 0x7940 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0xa>
    7940:	1f 92       	push	r1
    7942:	cd b7       	in	r28, 0x3d	; 61
    7944:	de b7       	in	r29, 0x3e	; 62
    7946:	ce 01       	movw	r24, r28
    7948:	01 96       	adiw	r24, 0x01	; 1
    794a:	0e 94 97 3c 	call	0x792e	; 0x792e <display_element_get_string(char*)>
    794e:	89 81       	ldd	r24, Y+1	; 0x01
    7950:	88 23       	and	r24, r24
    7952:	39 f0       	breq	.+14     	; 0x7962 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x2c>
    7954:	be 01       	movw	r22, r28
    7956:	6f 5f       	subi	r22, 0xFF	; 255
    7958:	7f 4f       	sbci	r23, 0xFF	; 255
    795a:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <dialog_set_string_args>
    795e:	0e 94 45 88 	call	0x1108a	; 0x1108a <tds_set_name(unsigned char, char*)>
    7962:	2a 96       	adiw	r28, 0x0a	; 10
    7964:	0f b6       	in	r0, 0x3f	; 63
    7966:	f8 94       	cli
    7968:	de bf       	out	0x3e, r29	; 62
    796a:	0f be       	out	0x3f, r0	; 63
    796c:	cd bf       	out	0x3d, r28	; 61
    796e:	df 91       	pop	r29
    7970:	cf 91       	pop	r28
    7972:	08 95       	ret

00007974 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z25helper_set_term_ring_namejjh():
    7974:	cf 93       	push	r28
    7976:	df 93       	push	r29
    7978:	00 d0       	rcall	.+0      	; 0x797a <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    797a:	00 d0       	rcall	.+0      	; 0x797c <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    797c:	00 d0       	rcall	.+0      	; 0x797e <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    797e:	1f 92       	push	r1
    7980:	cd b7       	in	r28, 0x3d	; 61
    7982:	de b7       	in	r29, 0x3e	; 62
    7984:	ce 01       	movw	r24, r28
    7986:	01 96       	adiw	r24, 0x01	; 1
    7988:	0e 94 97 3c 	call	0x792e	; 0x792e <display_element_get_string(char*)>
    798c:	be 01       	movw	r22, r28
    798e:	6f 5f       	subi	r22, 0xFF	; 255
    7990:	7f 4f       	sbci	r23, 0xFF	; 255
    7992:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <dialog_set_string_args>
    7996:	0e 94 f1 8c 	call	0x119e2	; 0x119e2 <thermostat_ring_set_name(unsigned char, char*)>
    799a:	2a 96       	adiw	r28, 0x0a	; 10
    799c:	0f b6       	in	r0, 0x3f	; 63
    799e:	f8 94       	cli
    79a0:	de bf       	out	0x3e, r29	; 62
    79a2:	0f be       	out	0x3f, r0	; 63
    79a4:	cd bf       	out	0x3d, r28	; 61
    79a6:	df 91       	pop	r29
    79a8:	cf 91       	pop	r28
    79aa:	08 95       	ret

000079ac <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
    79ac:	e1 e8       	ldi	r30, 0x81	; 129
    79ae:	f9 e0       	ldi	r31, 0x09	; 9
    79b0:	01 90       	ld	r0, Z+
    79b2:	00 20       	and	r0, r0
    79b4:	e9 f7       	brne	.-6      	; 0x79b0 <display_element_set_string_add_char(char)+0x4>
    79b6:	e2 58       	subi	r30, 0x82	; 130
    79b8:	f9 40       	sbci	r31, 0x09	; 9
    79ba:	ff 27       	eor	r31, r31
    79bc:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <dialog_set_string_max_length>
    79c0:	21 50       	subi	r18, 0x01	; 1
    79c2:	33 0b       	sbc	r19, r19
    79c4:	e2 17       	cp	r30, r18
    79c6:	f3 07       	cpc	r31, r19
    79c8:	24 f4       	brge	.+8      	; 0x79d2 <display_element_set_string_add_char(char)+0x26>
    79ca:	ef 57       	subi	r30, 0x7F	; 127
    79cc:	f6 4f       	sbci	r31, 0xF6	; 246
    79ce:	80 83       	st	Z, r24
    79d0:	11 82       	std	Z+1, r1	; 0x01
    79d2:	08 95       	ret

000079d4 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
    79d4:	80 e3       	ldi	r24, 0x30	; 48
    79d6:	84 0f       	add	r24, r20
    79d8:	4a 30       	cpi	r20, 0x0A	; 10
    79da:	09 f4       	brne	.+2      	; 0x79de <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0xa>
    79dc:	8e e2       	ldi	r24, 0x2E	; 46
    79de:	0c 94 d6 3c 	jmp	0x79ac	; 0x79ac <display_element_set_string_add_char(char)>

000079e2 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
    79e2:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <dialog_set_string_keyboard_type>
    79e6:	91 11       	cpse	r25, r1
    79e8:	07 c0       	rjmp	.+14     	; 0x79f8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
    79ea:	e4 2f       	mov	r30, r20
    79ec:	f0 e0       	ldi	r31, 0x00	; 0
    79ee:	eb 5a       	subi	r30, 0xAB	; 171
    79f0:	fa 4a       	sbci	r31, 0xAA	; 170
    79f2:	84 91       	lpm	r24, Z
    79f4:	0c 94 d6 3c 	jmp	0x79ac	; 0x79ac <display_element_set_string_add_char(char)>
    79f8:	91 30       	cpi	r25, 0x01	; 1
    79fa:	29 f4       	brne	.+10     	; 0x7a06 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
    79fc:	e4 2f       	mov	r30, r20
    79fe:	f0 e0       	ldi	r31, 0x00	; 0
    7a00:	e5 5c       	subi	r30, 0xC5	; 197
    7a02:	fa 4a       	sbci	r31, 0xAA	; 170
    7a04:	f6 cf       	rjmp	.-20     	; 0x79f2 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
    7a06:	92 30       	cpi	r25, 0x02	; 2
    7a08:	a9 f7       	brne	.-22     	; 0x79f4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
    7a0a:	e4 2f       	mov	r30, r20
    7a0c:	f0 e0       	ldi	r31, 0x00	; 0
    7a0e:	ef 5d       	subi	r30, 0xDF	; 223
    7a10:	fa 4a       	sbci	r31, 0xAA	; 170
    7a12:	ef cf       	rjmp	.-34     	; 0x79f2 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

00007a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>:
_Z11show_stringPciihjjb():
    7a14:	6f 92       	push	r6
    7a16:	7f 92       	push	r7
    7a18:	8f 92       	push	r8
    7a1a:	9f 92       	push	r9
    7a1c:	af 92       	push	r10
    7a1e:	bf 92       	push	r11
    7a20:	cf 92       	push	r12
    7a22:	df 92       	push	r13
    7a24:	ef 92       	push	r14
    7a26:	ff 92       	push	r15
    7a28:	0f 93       	push	r16
    7a2a:	1f 93       	push	r17
    7a2c:	cf 93       	push	r28
    7a2e:	df 93       	push	r29
    7a30:	00 d0       	rcall	.+0      	; 0x7a32 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x1e>
    7a32:	00 d0       	rcall	.+0      	; 0x7a34 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)+0x20>
    7a34:	cd b7       	in	r28, 0x3d	; 61
    7a36:	de b7       	in	r29, 0x3e	; 62
    7a38:	3c 01       	movw	r6, r24
    7a3a:	5b 01       	movw	r10, r22
    7a3c:	4a 01       	movw	r8, r20
    7a3e:	d2 2e       	mov	r13, r18
    7a40:	6c 2d       	mov	r22, r12
    7a42:	81 ea       	ldi	r24, 0xA1	; 161
    7a44:	9b e0       	ldi	r25, 0x0B	; 11
    7a46:	0e 94 be 92 	call	0x1257c	; 0x1257c <LCDWIKI_GUI::Set_Text_Mode(bool)>
    7a4a:	6d 2d       	mov	r22, r13
    7a4c:	81 ea       	ldi	r24, 0xA1	; 161
    7a4e:	9b e0       	ldi	r25, 0x0B	; 11
    7a50:	0e 94 bb 92 	call	0x12576	; 0x12576 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
    7a54:	b8 01       	movw	r22, r16
    7a56:	81 ea       	ldi	r24, 0xA1	; 161
    7a58:	9b e0       	ldi	r25, 0x0B	; 11
    7a5a:	0e 94 b3 92 	call	0x12566	; 0x12566 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
    7a5e:	b7 01       	movw	r22, r14
    7a60:	81 ea       	ldi	r24, 0xA1	; 161
    7a62:	9b e0       	ldi	r25, 0x0B	; 11
    7a64:	0e 94 b7 92 	call	0x1256e	; 0x1256e <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
    7a68:	b3 01       	movw	r22, r6
    7a6a:	ce 01       	movw	r24, r28
    7a6c:	01 96       	adiw	r24, 0x01	; 1
    7a6e:	0e 94 e3 d0 	call	0x1a1c6	; 0x1a1c6 <String::String(char const*)>
    7a72:	94 01       	movw	r18, r8
    7a74:	a5 01       	movw	r20, r10
    7a76:	be 01       	movw	r22, r28
    7a78:	6f 5f       	subi	r22, 0xFF	; 255
    7a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7c:	81 ea       	ldi	r24, 0xA1	; 161
    7a7e:	9b e0       	ldi	r25, 0x0B	; 11
    7a80:	0e 94 44 94 	call	0x12888	; 0x12888 <LCDWIKI_GUI::Print_String(String, int, int)>
    7a84:	ce 01       	movw	r24, r28
    7a86:	01 96       	adiw	r24, 0x01	; 1
    7a88:	0e 94 74 d0 	call	0x1a0e8	; 0x1a0e8 <String::~String()>
    7a8c:	26 96       	adiw	r28, 0x06	; 6
    7a8e:	0f b6       	in	r0, 0x3f	; 63
    7a90:	f8 94       	cli
    7a92:	de bf       	out	0x3e, r29	; 62
    7a94:	0f be       	out	0x3f, r0	; 63
    7a96:	cd bf       	out	0x3d, r28	; 61
    7a98:	df 91       	pop	r29
    7a9a:	cf 91       	pop	r28
    7a9c:	1f 91       	pop	r17
    7a9e:	0f 91       	pop	r16
    7aa0:	ff 90       	pop	r15
    7aa2:	ef 90       	pop	r14
    7aa4:	df 90       	pop	r13
    7aa6:	cf 90       	pop	r12
    7aa8:	bf 90       	pop	r11
    7aaa:	af 90       	pop	r10
    7aac:	9f 90       	pop	r9
    7aae:	8f 90       	pop	r8
    7ab0:	7f 90       	pop	r7
    7ab2:	6f 90       	pop	r6
    7ab4:	08 95       	ret

00007ab6 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjhhPc():
    7ab6:	8f 92       	push	r8
    7ab8:	9f 92       	push	r9
    7aba:	af 92       	push	r10
    7abc:	bf 92       	push	r11
    7abe:	cf 92       	push	r12
    7ac0:	ef 92       	push	r14
    7ac2:	ff 92       	push	r15
    7ac4:	0f 93       	push	r16
    7ac6:	1f 93       	push	r17
    7ac8:	cf 93       	push	r28
    7aca:	df 93       	push	r29
    7acc:	cd b7       	in	r28, 0x3d	; 61
    7ace:	de b7       	in	r29, 0x3e	; 62
    7ad0:	a8 97       	sbiw	r28, 0x28	; 40
    7ad2:	0f b6       	in	r0, 0x3f	; 63
    7ad4:	f8 94       	cli
    7ad6:	de bf       	out	0x3e, r29	; 62
    7ad8:	0f be       	out	0x3f, r0	; 63
    7ada:	cd bf       	out	0x3d, r28	; 61
    7adc:	5c 01       	movw	r10, r24
    7ade:	4b 01       	movw	r8, r22
    7ae0:	6a e6       	ldi	r22, 0x6A	; 106
    7ae2:	79 e5       	ldi	r23, 0x59	; 89
    7ae4:	ce 01       	movw	r24, r28
    7ae6:	01 96       	adiw	r24, 0x01	; 1
    7ae8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7aec:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7af0:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    7af4:	8f 3f       	cpi	r24, 0xFF	; 255
    7af6:	69 f1       	breq	.+90     	; 0x7b52 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x9c>
    7af8:	be 01       	movw	r22, r28
    7afa:	61 5e       	subi	r22, 0xE1	; 225
    7afc:	7f 4f       	sbci	r23, 0xFF	; 255
    7afe:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    7b02:	0e 94 cd 8c 	call	0x1199a	; 0x1199a <thermostat_ring_get_name(unsigned char, char*)>
    7b06:	be 01       	movw	r22, r28
    7b08:	61 5e       	subi	r22, 0xE1	; 225
    7b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0c:	ce 01       	movw	r24, r28
    7b0e:	01 96       	adiw	r24, 0x01	; 1
    7b10:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    7b14:	c1 2c       	mov	r12, r1
    7b16:	ee 24       	eor	r14, r14
    7b18:	ea 94       	dec	r14
    7b1a:	fe 2c       	mov	r15, r14
    7b1c:	10 e0       	ldi	r17, 0x00	; 0
    7b1e:	00 e0       	ldi	r16, 0x00	; 0
    7b20:	22 e0       	ldi	r18, 0x02	; 2
    7b22:	a4 01       	movw	r20, r8
    7b24:	b5 01       	movw	r22, r10
    7b26:	ce 01       	movw	r24, r28
    7b28:	01 96       	adiw	r24, 0x01	; 1
    7b2a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b2e:	a8 96       	adiw	r28, 0x28	; 40
    7b30:	0f b6       	in	r0, 0x3f	; 63
    7b32:	f8 94       	cli
    7b34:	de bf       	out	0x3e, r29	; 62
    7b36:	0f be       	out	0x3f, r0	; 63
    7b38:	cd bf       	out	0x3d, r28	; 61
    7b3a:	df 91       	pop	r29
    7b3c:	cf 91       	pop	r28
    7b3e:	1f 91       	pop	r17
    7b40:	0f 91       	pop	r16
    7b42:	ff 90       	pop	r15
    7b44:	ef 90       	pop	r14
    7b46:	cf 90       	pop	r12
    7b48:	bf 90       	pop	r11
    7b4a:	af 90       	pop	r10
    7b4c:	9f 90       	pop	r9
    7b4e:	8f 90       	pop	r8
    7b50:	08 95       	ret
    7b52:	64 ea       	ldi	r22, 0xA4	; 164
    7b54:	78 e5       	ldi	r23, 0x58	; 88
    7b56:	ce 01       	movw	r24, r28
    7b58:	4f 96       	adiw	r24, 0x1f	; 31
    7b5a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7b5e:	d3 cf       	rjmp	.-90     	; 0x7b06 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x50>

00007b60 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
    7b60:	cf 92       	push	r12
    7b62:	ef 92       	push	r14
    7b64:	ff 92       	push	r15
    7b66:	0f 93       	push	r16
    7b68:	1f 93       	push	r17
    7b6a:	ab 01       	movw	r20, r22
    7b6c:	c1 2c       	mov	r12, r1
    7b6e:	ee 24       	eor	r14, r14
    7b70:	ea 94       	dec	r14
    7b72:	fe 2c       	mov	r15, r14
    7b74:	10 e0       	ldi	r17, 0x00	; 0
    7b76:	00 e0       	ldi	r16, 0x00	; 0
    7b78:	22 e0       	ldi	r18, 0x02	; 2
    7b7a:	bc 01       	movw	r22, r24
    7b7c:	81 ea       	ldi	r24, 0xA1	; 161
    7b7e:	99 e0       	ldi	r25, 0x09	; 9
    7b80:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7b84:	1f 91       	pop	r17
    7b86:	0f 91       	pop	r16
    7b88:	ff 90       	pop	r15
    7b8a:	ef 90       	pop	r14
    7b8c:	cf 90       	pop	r12
    7b8e:	08 95       	ret

00007b90 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
    7b90:	af 92       	push	r10
    7b92:	bf 92       	push	r11
    7b94:	cf 92       	push	r12
    7b96:	df 92       	push	r13
    7b98:	ef 92       	push	r14
    7b9a:	ff 92       	push	r15
    7b9c:	0f 93       	push	r16
    7b9e:	1f 93       	push	r17
    7ba0:	cf 93       	push	r28
    7ba2:	df 93       	push	r29
    7ba4:	cd b7       	in	r28, 0x3d	; 61
    7ba6:	de b7       	in	r29, 0x3e	; 62
    7ba8:	ca 54       	subi	r28, 0x4A	; 74
    7baa:	d1 09       	sbc	r29, r1
    7bac:	0f b6       	in	r0, 0x3f	; 63
    7bae:	f8 94       	cli
    7bb0:	de bf       	out	0x3e, r29	; 62
    7bb2:	0f be       	out	0x3f, r0	; 63
    7bb4:	cd bf       	out	0x3d, r28	; 61
    7bb6:	6c 01       	movw	r12, r24
    7bb8:	5b 01       	movw	r10, r22
    7bba:	be 01       	movw	r22, r28
    7bbc:	6b 5c       	subi	r22, 0xCB	; 203
    7bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    7bc0:	8e 2d       	mov	r24, r14
    7bc2:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7bc6:	81 30       	cpi	r24, 0x01	; 1
    7bc8:	e1 f5       	brne	.+120    	; 0x7c42 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    7bca:	8e e1       	ldi	r24, 0x1E	; 30
    7bcc:	e8 9e       	mul	r14, r24
    7bce:	f0 01       	movw	r30, r0
    7bd0:	11 24       	eor	r1, r1
    7bd2:	e6 5e       	subi	r30, 0xE6	; 230
    7bd4:	fe 4e       	sbci	r31, 0xEE	; 238
    7bd6:	65 81       	ldd	r22, Z+5	; 0x05
    7bd8:	76 81       	ldd	r23, Z+6	; 0x06
    7bda:	07 2e       	mov	r0, r23
    7bdc:	00 0c       	add	r0, r0
    7bde:	88 0b       	sbc	r24, r24
    7be0:	99 0b       	sbc	r25, r25
    7be2:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    7be6:	20 e0       	ldi	r18, 0x00	; 0
    7be8:	30 e0       	ldi	r19, 0x00	; 0
    7bea:	4a e7       	ldi	r20, 0x7A	; 122
    7bec:	54 e4       	ldi	r21, 0x44	; 68
    7bee:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    7bf2:	8e 01       	movw	r16, r28
    7bf4:	05 5e       	subi	r16, 0xE5	; 229
    7bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    7bf8:	22 e0       	ldi	r18, 0x02	; 2
    7bfa:	44 e0       	ldi	r20, 0x04	; 4
    7bfc:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    7c00:	6e e7       	ldi	r22, 0x7E	; 126
    7c02:	75 e0       	ldi	r23, 0x05	; 5
    7c04:	c8 01       	movw	r24, r16
    7c06:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    7c0a:	67 ee       	ldi	r22, 0xE7	; 231
    7c0c:	79 e5       	ldi	r23, 0x59	; 89
    7c0e:	ce 01       	movw	r24, r28
    7c10:	01 96       	adiw	r24, 0x01	; 1
    7c12:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7c16:	b8 01       	movw	r22, r16
    7c18:	ce 01       	movw	r24, r28
    7c1a:	01 96       	adiw	r24, 0x01	; 1
    7c1c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    7c20:	a5 01       	movw	r20, r10
    7c22:	44 57       	subi	r20, 0x74	; 116
    7c24:	5f 4f       	sbci	r21, 0xFF	; 255
    7c26:	b6 01       	movw	r22, r12
    7c28:	66 5f       	subi	r22, 0xF6	; 246
    7c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c2c:	c1 2c       	mov	r12, r1
    7c2e:	ee 24       	eor	r14, r14
    7c30:	ea 94       	dec	r14
    7c32:	fe 2c       	mov	r15, r14
    7c34:	10 e0       	ldi	r17, 0x00	; 0
    7c36:	00 e0       	ldi	r16, 0x00	; 0
    7c38:	22 e0       	ldi	r18, 0x02	; 2
    7c3a:	ce 01       	movw	r24, r28
    7c3c:	01 96       	adiw	r24, 0x01	; 1
    7c3e:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7c42:	c6 5b       	subi	r28, 0xB6	; 182
    7c44:	df 4f       	sbci	r29, 0xFF	; 255
    7c46:	0f b6       	in	r0, 0x3f	; 63
    7c48:	f8 94       	cli
    7c4a:	de bf       	out	0x3e, r29	; 62
    7c4c:	0f be       	out	0x3f, r0	; 63
    7c4e:	cd bf       	out	0x3d, r28	; 61
    7c50:	df 91       	pop	r29
    7c52:	cf 91       	pop	r28
    7c54:	1f 91       	pop	r17
    7c56:	0f 91       	pop	r16
    7c58:	ff 90       	pop	r15
    7c5a:	ef 90       	pop	r14
    7c5c:	df 90       	pop	r13
    7c5e:	cf 90       	pop	r12
    7c60:	bf 90       	pop	r11
    7c62:	af 90       	pop	r10
    7c64:	08 95       	ret

00007c66 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
    7c66:	2f 92       	push	r2
    7c68:	3f 92       	push	r3
    7c6a:	4f 92       	push	r4
    7c6c:	5f 92       	push	r5
    7c6e:	6f 92       	push	r6
    7c70:	7f 92       	push	r7
    7c72:	8f 92       	push	r8
    7c74:	9f 92       	push	r9
    7c76:	af 92       	push	r10
    7c78:	bf 92       	push	r11
    7c7a:	cf 92       	push	r12
    7c7c:	df 92       	push	r13
    7c7e:	ef 92       	push	r14
    7c80:	ff 92       	push	r15
    7c82:	0f 93       	push	r16
    7c84:	1f 93       	push	r17
    7c86:	cf 93       	push	r28
    7c88:	df 93       	push	r29
    7c8a:	cd b7       	in	r28, 0x3d	; 61
    7c8c:	de b7       	in	r29, 0x3e	; 62
    7c8e:	ca 54       	subi	r28, 0x4A	; 74
    7c90:	d1 09       	sbc	r29, r1
    7c92:	0f b6       	in	r0, 0x3f	; 63
    7c94:	f8 94       	cli
    7c96:	de bf       	out	0x3e, r29	; 62
    7c98:	0f be       	out	0x3f, r0	; 63
    7c9a:	cd bf       	out	0x3d, r28	; 61
    7c9c:	4c 01       	movw	r8, r24
    7c9e:	2b 01       	movw	r4, r22
    7ca0:	5a 01       	movw	r10, r20
    7ca2:	89 01       	movw	r16, r18
    7ca4:	de 2c       	mov	r13, r14
    7ca6:	70 e0       	ldi	r23, 0x00	; 0
    7ca8:	60 e0       	ldi	r22, 0x00	; 0
    7caa:	81 ea       	ldi	r24, 0xA1	; 161
    7cac:	9b e0       	ldi	r25, 0x0B	; 11
    7cae:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7cb2:	04 0d       	add	r16, r4
    7cb4:	15 1d       	adc	r17, r5
    7cb6:	94 01       	movw	r18, r8
    7cb8:	2a 0d       	add	r18, r10
    7cba:	3b 1d       	adc	r19, r11
    7cbc:	a2 01       	movw	r20, r4
    7cbe:	b4 01       	movw	r22, r8
    7cc0:	81 ea       	ldi	r24, 0xA1	; 161
    7cc2:	9b e0       	ldi	r25, 0x0B	; 11
    7cc4:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7cc8:	be 01       	movw	r22, r28
    7cca:	6b 5c       	subi	r22, 0xCB	; 203
    7ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    7cce:	8e 2d       	mov	r24, r14
    7cd0:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    7cd4:	12 01       	movw	r2, r4
    7cd6:	28 e2       	ldi	r18, 0x28	; 40
    7cd8:	22 0e       	add	r2, r18
    7cda:	31 1c       	adc	r3, r1
    7cdc:	9e 01       	movw	r18, r28
    7cde:	25 5e       	subi	r18, 0xE5	; 229
    7ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    7ce2:	59 01       	movw	r10, r18
    7ce4:	81 30       	cpi	r24, 0x01	; 1
    7ce6:	09 f0       	breq	.+2      	; 0x7cea <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x84>
    7ce8:	ca c0       	rjmp	.+404    	; 0x7e7e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x218>
    7cea:	00 e1       	ldi	r16, 0x10	; 16
    7cec:	28 e0       	ldi	r18, 0x08	; 8
    7cee:	ae 01       	movw	r20, r28
    7cf0:	4a 5c       	subi	r20, 0xCA	; 202
    7cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    7cf4:	6a e3       	ldi	r22, 0x3A	; 58
    7cf6:	ce 01       	movw	r24, r28
    7cf8:	01 96       	adiw	r24, 0x01	; 1
    7cfa:	3c 01       	movw	r6, r24
    7cfc:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    7d00:	7f 92       	push	r7
    7d02:	6f 92       	push	r6
    7d04:	8c ed       	ldi	r24, 0xDC	; 220
    7d06:	92 e0       	ldi	r25, 0x02	; 2
    7d08:	9f 93       	push	r25
    7d0a:	8f 93       	push	r24
    7d0c:	bf 92       	push	r11
    7d0e:	af 92       	push	r10
    7d10:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    7d14:	9a e0       	ldi	r25, 0x0A	; 10
    7d16:	89 0e       	add	r8, r25
    7d18:	91 1c       	adc	r9, r1
    7d1a:	a2 01       	movw	r20, r4
    7d1c:	4b 5a       	subi	r20, 0xAB	; 171
    7d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d20:	c1 2c       	mov	r12, r1
    7d22:	ee 24       	eor	r14, r14
    7d24:	ea 94       	dec	r14
    7d26:	fe 2c       	mov	r15, r14
    7d28:	10 e0       	ldi	r17, 0x00	; 0
    7d2a:	00 e0       	ldi	r16, 0x00	; 0
    7d2c:	21 e0       	ldi	r18, 0x01	; 1
    7d2e:	b4 01       	movw	r22, r8
    7d30:	c5 01       	movw	r24, r10
    7d32:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d36:	64 e2       	ldi	r22, 0x24	; 36
    7d38:	77 e5       	ldi	r23, 0x57	; 87
    7d3a:	c3 01       	movw	r24, r6
    7d3c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7d40:	85 e3       	ldi	r24, 0x35	; 53
    7d42:	90 e0       	ldi	r25, 0x00	; 0
    7d44:	8c 0f       	add	r24, r28
    7d46:	9d 1f       	adc	r25, r29
    7d48:	0c 96       	adiw	r24, 0x0c	; 12
    7d4a:	9f 93       	push	r25
    7d4c:	8f 93       	push	r24
    7d4e:	7f 92       	push	r7
    7d50:	6f 92       	push	r6
    7d52:	84 ee       	ldi	r24, 0xE4	; 228
    7d54:	92 e0       	ldi	r25, 0x02	; 2
    7d56:	9f 93       	push	r25
    7d58:	8f 93       	push	r24
    7d5a:	bf 92       	push	r11
    7d5c:	af 92       	push	r10
    7d5e:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    7d62:	22 e0       	ldi	r18, 0x02	; 2
    7d64:	a1 01       	movw	r20, r2
    7d66:	b4 01       	movw	r22, r8
    7d68:	c5 01       	movw	r24, r10
    7d6a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7d6e:	21 96       	adiw	r28, 0x01	; 1
    7d70:	6e ad       	ldd	r22, Y+62	; 0x3e
    7d72:	7f ad       	ldd	r23, Y+63	; 0x3f
    7d74:	21 97       	sbiw	r28, 0x01	; 1
    7d76:	07 2e       	mov	r0, r23
    7d78:	00 0c       	add	r0, r0
    7d7a:	88 0b       	sbc	r24, r24
    7d7c:	99 0b       	sbc	r25, r25
    7d7e:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    7d82:	20 e0       	ldi	r18, 0x00	; 0
    7d84:	30 e0       	ldi	r19, 0x00	; 0
    7d86:	4a e7       	ldi	r20, 0x7A	; 122
    7d88:	54 e4       	ldi	r21, 0x44	; 68
    7d8a:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    7d8e:	85 01       	movw	r16, r10
    7d90:	22 e0       	ldi	r18, 0x02	; 2
    7d92:	44 e0       	ldi	r20, 0x04	; 4
    7d94:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    7d98:	6e e7       	ldi	r22, 0x7E	; 126
    7d9a:	75 e0       	ldi	r23, 0x05	; 5
    7d9c:	c5 01       	movw	r24, r10
    7d9e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    7da2:	6f ed       	ldi	r22, 0xDF	; 223
    7da4:	79 e5       	ldi	r23, 0x59	; 89
    7da6:	c3 01       	movw	r24, r6
    7da8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7dac:	b5 01       	movw	r22, r10
    7dae:	c3 01       	movw	r24, r6
    7db0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    7db4:	a2 01       	movw	r20, r4
    7db6:	44 5c       	subi	r20, 0xC4	; 196
    7db8:	5f 4f       	sbci	r21, 0xFF	; 255
    7dba:	10 e0       	ldi	r17, 0x00	; 0
    7dbc:	00 e0       	ldi	r16, 0x00	; 0
    7dbe:	22 e0       	ldi	r18, 0x02	; 2
    7dc0:	b4 01       	movw	r22, r8
    7dc2:	c3 01       	movw	r24, r6
    7dc4:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7dc8:	6a e5       	ldi	r22, 0x5A	; 90
    7dca:	77 e5       	ldi	r23, 0x57	; 87
    7dcc:	c3 01       	movw	r24, r6
    7dce:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7dd2:	2a 96       	adiw	r28, 0x0a	; 10
    7dd4:	8f ad       	ldd	r24, Y+63	; 0x3f
    7dd6:	2a 97       	sbiw	r28, 0x0a	; 10
    7dd8:	1f 92       	push	r1
    7dda:	8f 93       	push	r24
    7ddc:	7f 92       	push	r7
    7dde:	6f 92       	push	r6
    7de0:	8b ee       	ldi	r24, 0xEB	; 235
    7de2:	92 e0       	ldi	r25, 0x02	; 2
    7de4:	9f 93       	push	r25
    7de6:	8f 93       	push	r24
    7de8:	bf 92       	push	r11
    7dea:	af 92       	push	r10
    7dec:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    7df0:	a2 01       	movw	r20, r4
    7df2:	4c 59       	subi	r20, 0x9C	; 156
    7df4:	5f 4f       	sbci	r21, 0xFF	; 255
    7df6:	22 e0       	ldi	r18, 0x02	; 2
    7df8:	b4 01       	movw	r22, r8
    7dfa:	c5 01       	movw	r24, r10
    7dfc:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7e00:	6d e1       	ldi	r22, 0x1D	; 29
    7e02:	77 e5       	ldi	r23, 0x57	; 87
    7e04:	c3 01       	movw	r24, r6
    7e06:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7e0a:	2e e1       	ldi	r18, 0x1E	; 30
    7e0c:	d2 9e       	mul	r13, r18
    7e0e:	f0 01       	movw	r30, r0
    7e10:	11 24       	eor	r1, r1
    7e12:	e6 5e       	subi	r30, 0xE6	; 230
    7e14:	fe 4e       	sbci	r31, 0xEE	; 238
    7e16:	83 8d       	ldd	r24, Z+27	; 0x1b
    7e18:	1f 92       	push	r1
    7e1a:	8f 93       	push	r24
    7e1c:	7f 92       	push	r7
    7e1e:	6f 92       	push	r6
    7e20:	83 ef       	ldi	r24, 0xF3	; 243
    7e22:	92 e0       	ldi	r25, 0x02	; 2
    7e24:	9f 93       	push	r25
    7e26:	8f 93       	push	r24
    7e28:	bf 92       	push	r11
    7e2a:	af 92       	push	r10
    7e2c:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    7e30:	a2 01       	movw	r20, r4
    7e32:	48 58       	subi	r20, 0x88	; 136
    7e34:	5f 4f       	sbci	r21, 0xFF	; 255
    7e36:	22 e0       	ldi	r18, 0x02	; 2
    7e38:	b4 01       	movw	r22, r8
    7e3a:	c5 01       	movw	r24, r10
    7e3c:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7e40:	0f b6       	in	r0, 0x3f	; 63
    7e42:	f8 94       	cli
    7e44:	de bf       	out	0x3e, r29	; 62
    7e46:	0f be       	out	0x3f, r0	; 63
    7e48:	cd bf       	out	0x3d, r28	; 61
    7e4a:	c6 5b       	subi	r28, 0xB6	; 182
    7e4c:	df 4f       	sbci	r29, 0xFF	; 255
    7e4e:	0f b6       	in	r0, 0x3f	; 63
    7e50:	f8 94       	cli
    7e52:	de bf       	out	0x3e, r29	; 62
    7e54:	0f be       	out	0x3f, r0	; 63
    7e56:	cd bf       	out	0x3d, r28	; 61
    7e58:	df 91       	pop	r29
    7e5a:	cf 91       	pop	r28
    7e5c:	1f 91       	pop	r17
    7e5e:	0f 91       	pop	r16
    7e60:	ff 90       	pop	r15
    7e62:	ef 90       	pop	r14
    7e64:	df 90       	pop	r13
    7e66:	cf 90       	pop	r12
    7e68:	bf 90       	pop	r11
    7e6a:	af 90       	pop	r10
    7e6c:	9f 90       	pop	r9
    7e6e:	8f 90       	pop	r8
    7e70:	7f 90       	pop	r7
    7e72:	6f 90       	pop	r6
    7e74:	5f 90       	pop	r5
    7e76:	4f 90       	pop	r4
    7e78:	3f 90       	pop	r3
    7e7a:	2f 90       	pop	r2
    7e7c:	08 95       	ret
    7e7e:	62 e3       	ldi	r22, 0x32	; 50
    7e80:	76 e5       	ldi	r23, 0x56	; 86
    7e82:	c9 01       	movw	r24, r18
    7e84:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    7e88:	b4 01       	movw	r22, r8
    7e8a:	67 5e       	subi	r22, 0xE7	; 231
    7e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    7e8e:	c1 2c       	mov	r12, r1
    7e90:	ee 24       	eor	r14, r14
    7e92:	ea 94       	dec	r14
    7e94:	fe 2c       	mov	r15, r14
    7e96:	00 e0       	ldi	r16, 0x00	; 0
    7e98:	18 ef       	ldi	r17, 0xF8	; 248
    7e9a:	24 e0       	ldi	r18, 0x04	; 4
    7e9c:	a1 01       	movw	r20, r2
    7e9e:	c5 01       	movw	r24, r10
    7ea0:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    7ea4:	d2 cf       	rjmp	.-92     	; 0x7e4a <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1e4>

00007ea6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
    7ea6:	2f 92       	push	r2
    7ea8:	3f 92       	push	r3
    7eaa:	4f 92       	push	r4
    7eac:	5f 92       	push	r5
    7eae:	6f 92       	push	r6
    7eb0:	7f 92       	push	r7
    7eb2:	8f 92       	push	r8
    7eb4:	9f 92       	push	r9
    7eb6:	af 92       	push	r10
    7eb8:	bf 92       	push	r11
    7eba:	cf 92       	push	r12
    7ebc:	df 92       	push	r13
    7ebe:	ef 92       	push	r14
    7ec0:	ff 92       	push	r15
    7ec2:	0f 93       	push	r16
    7ec4:	1f 93       	push	r17
    7ec6:	cf 93       	push	r28
    7ec8:	df 93       	push	r29
    7eca:	cd b7       	in	r28, 0x3d	; 61
    7ecc:	de b7       	in	r29, 0x3e	; 62
    7ece:	2c 97       	sbiw	r28, 0x0c	; 12
    7ed0:	0f b6       	in	r0, 0x3f	; 63
    7ed2:	f8 94       	cli
    7ed4:	de bf       	out	0x3e, r29	; 62
    7ed6:	0f be       	out	0x3f, r0	; 63
    7ed8:	cd bf       	out	0x3d, r28	; 61
    7eda:	5c 01       	movw	r10, r24
    7edc:	7b 01       	movw	r14, r22
    7ede:	1a 01       	movw	r2, r20
    7ee0:	29 01       	movw	r4, r18
    7ee2:	0c 87       	std	Y+12, r16	; 0x0c
    7ee4:	36 01       	movw	r6, r12
    7ee6:	70 e0       	ldi	r23, 0x00	; 0
    7ee8:	60 e0       	ldi	r22, 0x00	; 0
    7eea:	81 ea       	ldi	r24, 0xA1	; 161
    7eec:	9b e0       	ldi	r25, 0x0B	; 11
    7eee:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7ef2:	d1 2c       	mov	r13, r1
    7ef4:	c1 2c       	mov	r12, r1
    7ef6:	97 01       	movw	r18, r14
    7ef8:	24 0d       	add	r18, r4
    7efa:	35 1d       	adc	r19, r5
    7efc:	3b 87       	std	Y+11, r19	; 0x0b
    7efe:	2a 87       	std	Y+10, r18	; 0x0a
    7f00:	45 01       	movw	r8, r10
    7f02:	82 0c       	add	r8, r2
    7f04:	93 1c       	adc	r9, r3
    7f06:	0a 85       	ldd	r16, Y+10	; 0x0a
    7f08:	1b 85       	ldd	r17, Y+11	; 0x0b
    7f0a:	0c 19       	sub	r16, r12
    7f0c:	1d 09       	sbc	r17, r13
    7f0e:	94 01       	movw	r18, r8
    7f10:	2c 19       	sub	r18, r12
    7f12:	3d 09       	sbc	r19, r13
    7f14:	a6 01       	movw	r20, r12
    7f16:	4e 0d       	add	r20, r14
    7f18:	5f 1d       	adc	r21, r15
    7f1a:	b6 01       	movw	r22, r12
    7f1c:	6a 0d       	add	r22, r10
    7f1e:	7b 1d       	adc	r23, r11
    7f20:	81 ea       	ldi	r24, 0xA1	; 161
    7f22:	9b e0       	ldi	r25, 0x0B	; 11
    7f24:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    7f28:	3f ef       	ldi	r19, 0xFF	; 255
    7f2a:	c3 1a       	sub	r12, r19
    7f2c:	d3 0a       	sbc	r13, r19
    7f2e:	83 e0       	ldi	r24, 0x03	; 3
    7f30:	c8 16       	cp	r12, r24
    7f32:	d1 04       	cpc	r13, r1
    7f34:	41 f7       	brne	.-48     	; 0x7f06 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
    7f36:	6f ef       	ldi	r22, 0xFF	; 255
    7f38:	7f ef       	ldi	r23, 0xFF	; 255
    7f3a:	81 ea       	ldi	r24, 0xA1	; 161
    7f3c:	9b e0       	ldi	r25, 0x0B	; 11
    7f3e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7f42:	82 01       	movw	r16, r4
    7f44:	03 50       	subi	r16, 0x03	; 3
    7f46:	11 09       	sbc	r17, r1
    7f48:	0e 0d       	add	r16, r14
    7f4a:	1f 1d       	adc	r17, r15
    7f4c:	91 01       	movw	r18, r2
    7f4e:	23 50       	subi	r18, 0x03	; 3
    7f50:	31 09       	sbc	r19, r1
    7f52:	2a 0d       	add	r18, r10
    7f54:	3b 1d       	adc	r19, r11
    7f56:	a7 01       	movw	r20, r14
    7f58:	4d 5f       	subi	r20, 0xFD	; 253
    7f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    7f5c:	b5 01       	movw	r22, r10
    7f5e:	6d 5f       	subi	r22, 0xFD	; 253
    7f60:	7f 4f       	sbci	r23, 0xFF	; 255
    7f62:	81 ea       	ldi	r24, 0xA1	; 161
    7f64:	9b e0       	ldi	r25, 0x0B	; 11
    7f66:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    7f6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    7f6c:	c9 2e       	mov	r12, r25
    7f6e:	d1 2c       	mov	r13, r1
    7f70:	25 e1       	ldi	r18, 0x15	; 21
    7f72:	92 9f       	mul	r25, r18
    7f74:	f0 01       	movw	r30, r0
    7f76:	11 24       	eor	r1, r1
    7f78:	ee 53       	subi	r30, 0x3E	; 62
    7f7a:	f6 4f       	sbci	r31, 0xF6	; 246
    7f7c:	85 85       	ldd	r24, Z+13	; 0x0d
    7f7e:	9e 01       	movw	r18, r28
    7f80:	2f 5f       	subi	r18, 0xFF	; 255
    7f82:	3f 4f       	sbci	r19, 0xFF	; 255
    7f84:	49 01       	movw	r8, r18
    7f86:	81 11       	cpse	r24, r1
    7f88:	09 c0       	rjmp	.+18     	; 0x7f9c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf6>
    7f8a:	60 81       	ld	r22, Z
    7f8c:	71 81       	ldd	r23, Z+1	; 0x01
    7f8e:	82 81       	ldd	r24, Z+2	; 0x02
    7f90:	93 81       	ldd	r25, Z+3	; 0x03
    7f92:	89 01       	movw	r16, r18
    7f94:	22 e0       	ldi	r18, 0x02	; 2
    7f96:	44 e0       	ldi	r20, 0x04	; 4
    7f98:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    7f9c:	85 e1       	ldi	r24, 0x15	; 21
    7f9e:	8c 9d       	mul	r24, r12
    7fa0:	f0 01       	movw	r30, r0
    7fa2:	8d 9d       	mul	r24, r13
    7fa4:	f0 0d       	add	r31, r0
    7fa6:	11 24       	eor	r1, r1
    7fa8:	ee 53       	subi	r30, 0x3E	; 62
    7faa:	f6 4f       	sbci	r31, 0xF6	; 246
    7fac:	85 85       	ldd	r24, Z+13	; 0x0d
    7fae:	81 30       	cpi	r24, 0x01	; 1
    7fb0:	59 f4       	brne	.+22     	; 0x7fc8 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    7fb2:	60 81       	ld	r22, Z
    7fb4:	71 81       	ldd	r23, Z+1	; 0x01
    7fb6:	82 81       	ldd	r24, Z+2	; 0x02
    7fb8:	93 81       	ldd	r25, Z+3	; 0x03
    7fba:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <__fixsfsi>
    7fbe:	cb 01       	movw	r24, r22
itoa():
    7fc0:	4a e0       	ldi	r20, 0x0A	; 10
    7fc2:	b4 01       	movw	r22, r8
    7fc4:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z35display_element_dialog_set_variablejjjjhhPc():
    7fc8:	70 e0       	ldi	r23, 0x00	; 0
    7fca:	60 e0       	ldi	r22, 0x00	; 0
    7fcc:	81 ea       	ldi	r24, 0xA1	; 161
    7fce:	9b e0       	ldi	r25, 0x0B	; 11
    7fd0:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    7fd4:	f4 01       	movw	r30, r8
    7fd6:	01 90       	ld	r0, Z+
    7fd8:	00 20       	and	r0, r0
    7fda:	e9 f7       	brne	.-6      	; 0x7fd6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x130>
    7fdc:	31 97       	sbiw	r30, 0x01	; 1
    7fde:	e8 19       	sub	r30, r8
    7fe0:	f9 09       	sbc	r31, r9
    7fe2:	3c e0       	ldi	r19, 0x0C	; 12
    7fe4:	43 1a       	sub	r4, r19
    7fe6:	51 08       	sbc	r5, r1
    7fe8:	56 94       	lsr	r5
    7fea:	47 94       	ror	r4
    7fec:	81 e0       	ldi	r24, 0x01	; 1
    7fee:	e8 1a       	sub	r14, r24
    7ff0:	f1 08       	sbc	r15, r1
    7ff2:	4e 0c       	add	r4, r14
    7ff4:	5f 1c       	adc	r5, r15
_Z22show_string_size_widthhh():
    7ff6:	96 e0       	ldi	r25, 0x06	; 6
    7ff8:	e9 9f       	mul	r30, r25
    7ffa:	f0 01       	movw	r30, r0
    7ffc:	11 24       	eor	r1, r1
    7ffe:	ee 0f       	add	r30, r30
    8000:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
    8002:	b1 01       	movw	r22, r2
    8004:	6e 1b       	sub	r22, r30
    8006:	7f 0b       	sbc	r23, r31
    8008:	76 95       	lsr	r23
    800a:	67 95       	ror	r22
    800c:	6a 0d       	add	r22, r10
    800e:	7b 1d       	adc	r23, r11
    8010:	c1 2c       	mov	r12, r1
    8012:	ee 24       	eor	r14, r14
    8014:	ea 94       	dec	r14
    8016:	fe 2c       	mov	r15, r14
    8018:	10 e0       	ldi	r17, 0x00	; 0
    801a:	00 e0       	ldi	r16, 0x00	; 0
    801c:	22 e0       	ldi	r18, 0x02	; 2
    801e:	a2 01       	movw	r20, r4
    8020:	c4 01       	movw	r24, r8
    8022:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8026:	f3 01       	movw	r30, r6
    8028:	80 81       	ld	r24, Z
    802a:	88 23       	and	r24, r24
    802c:	41 f0       	breq	.+16     	; 0x803e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x198>
    802e:	b5 01       	movw	r22, r10
    8030:	6b 5f       	subi	r22, 0xFB	; 251
    8032:	7f 4f       	sbci	r23, 0xFF	; 255
    8034:	22 e0       	ldi	r18, 0x02	; 2
    8036:	a2 01       	movw	r20, r4
    8038:	c3 01       	movw	r24, r6
    803a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    803e:	2c 96       	adiw	r28, 0x0c	; 12
    8040:	0f b6       	in	r0, 0x3f	; 63
    8042:	f8 94       	cli
    8044:	de bf       	out	0x3e, r29	; 62
    8046:	0f be       	out	0x3f, r0	; 63
    8048:	cd bf       	out	0x3d, r28	; 61
    804a:	df 91       	pop	r29
    804c:	cf 91       	pop	r28
    804e:	1f 91       	pop	r17
    8050:	0f 91       	pop	r16
    8052:	ff 90       	pop	r15
    8054:	ef 90       	pop	r14
    8056:	df 90       	pop	r13
    8058:	cf 90       	pop	r12
    805a:	bf 90       	pop	r11
    805c:	af 90       	pop	r10
    805e:	9f 90       	pop	r9
    8060:	8f 90       	pop	r8
    8062:	7f 90       	pop	r7
    8064:	6f 90       	pop	r6
    8066:	5f 90       	pop	r5
    8068:	4f 90       	pop	r4
    806a:	3f 90       	pop	r3
    806c:	2f 90       	pop	r2
    806e:	08 95       	ret

00008070 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
    8070:	4f 92       	push	r4
    8072:	5f 92       	push	r5
    8074:	6f 92       	push	r6
    8076:	7f 92       	push	r7
    8078:	8f 92       	push	r8
    807a:	9f 92       	push	r9
    807c:	af 92       	push	r10
    807e:	bf 92       	push	r11
    8080:	cf 92       	push	r12
    8082:	df 92       	push	r13
    8084:	ef 92       	push	r14
    8086:	ff 92       	push	r15
    8088:	0f 93       	push	r16
    808a:	1f 93       	push	r17
    808c:	cf 93       	push	r28
    808e:	df 93       	push	r29
    8090:	6c 01       	movw	r12, r24
    8092:	eb 01       	movw	r28, r22
    8094:	2a 01       	movw	r4, r20
    8096:	39 01       	movw	r6, r18
    8098:	70 e0       	ldi	r23, 0x00	; 0
    809a:	60 e0       	ldi	r22, 0x00	; 0
    809c:	81 ea       	ldi	r24, 0xA1	; 161
    809e:	9b e0       	ldi	r25, 0x0B	; 11
    80a0:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    80a4:	f1 2c       	mov	r15, r1
    80a6:	e1 2c       	mov	r14, r1
    80a8:	4e 01       	movw	r8, r28
    80aa:	86 0c       	add	r8, r6
    80ac:	97 1c       	adc	r9, r7
    80ae:	56 01       	movw	r10, r12
    80b0:	a4 0c       	add	r10, r4
    80b2:	b5 1c       	adc	r11, r5
    80b4:	84 01       	movw	r16, r8
    80b6:	0e 19       	sub	r16, r14
    80b8:	1f 09       	sbc	r17, r15
    80ba:	95 01       	movw	r18, r10
    80bc:	2e 19       	sub	r18, r14
    80be:	3f 09       	sbc	r19, r15
    80c0:	a7 01       	movw	r20, r14
    80c2:	4c 0f       	add	r20, r28
    80c4:	5d 1f       	adc	r21, r29
    80c6:	b7 01       	movw	r22, r14
    80c8:	6c 0d       	add	r22, r12
    80ca:	7d 1d       	adc	r23, r13
    80cc:	81 ea       	ldi	r24, 0xA1	; 161
    80ce:	9b e0       	ldi	r25, 0x0B	; 11
    80d0:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    80d4:	2f ef       	ldi	r18, 0xFF	; 255
    80d6:	e2 1a       	sub	r14, r18
    80d8:	f2 0a       	sbc	r15, r18
    80da:	83 e0       	ldi	r24, 0x03	; 3
    80dc:	e8 16       	cp	r14, r24
    80de:	f1 04       	cpc	r15, r1
    80e0:	49 f7       	brne	.-46     	; 0x80b4 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x44>
    80e2:	6f ef       	ldi	r22, 0xFF	; 255
    80e4:	7f ef       	ldi	r23, 0xFF	; 255
    80e6:	81 ea       	ldi	r24, 0xA1	; 161
    80e8:	9b e0       	ldi	r25, 0x0B	; 11
    80ea:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    80ee:	83 01       	movw	r16, r6
    80f0:	03 50       	subi	r16, 0x03	; 3
    80f2:	11 09       	sbc	r17, r1
    80f4:	0c 0f       	add	r16, r28
    80f6:	1d 1f       	adc	r17, r29
    80f8:	92 01       	movw	r18, r4
    80fa:	23 50       	subi	r18, 0x03	; 3
    80fc:	31 09       	sbc	r19, r1
    80fe:	2c 0d       	add	r18, r12
    8100:	3d 1d       	adc	r19, r13
    8102:	ae 01       	movw	r20, r28
    8104:	4d 5f       	subi	r20, 0xFD	; 253
    8106:	5f 4f       	sbci	r21, 0xFF	; 255
    8108:	b6 01       	movw	r22, r12
    810a:	6d 5f       	subi	r22, 0xFD	; 253
    810c:	7f 4f       	sbci	r23, 0xFF	; 255
    810e:	81 ea       	ldi	r24, 0xA1	; 161
    8110:	9b e0       	ldi	r25, 0x0B	; 11
    8112:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    8116:	70 e0       	ldi	r23, 0x00	; 0
    8118:	60 e0       	ldi	r22, 0x00	; 0
    811a:	81 ea       	ldi	r24, 0xA1	; 161
    811c:	9b e0       	ldi	r25, 0x0B	; 11
    811e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8122:	81 e8       	ldi	r24, 0x81	; 129
    8124:	99 e0       	ldi	r25, 0x09	; 9
    8126:	fc 01       	movw	r30, r24
    8128:	01 90       	ld	r0, Z+
    812a:	00 20       	and	r0, r0
    812c:	e9 f7       	brne	.-6      	; 0x8128 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb8>
    812e:	cf 01       	movw	r24, r30
    8130:	82 58       	subi	r24, 0x82	; 130
    8132:	99 40       	sbci	r25, 0x09	; 9
    8134:	a3 01       	movw	r20, r6
    8136:	4c 50       	subi	r20, 0x0C	; 12
    8138:	51 09       	sbc	r21, r1
    813a:	56 95       	lsr	r21
    813c:	47 95       	ror	r20
    813e:	21 97       	sbiw	r28, 0x01	; 1
    8140:	4c 0f       	add	r20, r28
    8142:	5d 1f       	adc	r21, r29
_Z22show_string_size_widthhh():
    8144:	f6 e0       	ldi	r31, 0x06	; 6
    8146:	8f 9f       	mul	r24, r31
    8148:	c0 01       	movw	r24, r0
    814a:	11 24       	eor	r1, r1
    814c:	88 0f       	add	r24, r24
    814e:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
    8150:	b2 01       	movw	r22, r4
    8152:	68 1b       	sub	r22, r24
    8154:	79 0b       	sbc	r23, r25
    8156:	76 95       	lsr	r23
    8158:	67 95       	ror	r22
    815a:	6c 0d       	add	r22, r12
    815c:	7d 1d       	adc	r23, r13
    815e:	c1 2c       	mov	r12, r1
    8160:	ee 24       	eor	r14, r14
    8162:	ea 94       	dec	r14
    8164:	fe 2c       	mov	r15, r14
    8166:	10 e0       	ldi	r17, 0x00	; 0
    8168:	00 e0       	ldi	r16, 0x00	; 0
    816a:	22 e0       	ldi	r18, 0x02	; 2
    816c:	81 e8       	ldi	r24, 0x81	; 129
    816e:	99 e0       	ldi	r25, 0x09	; 9
    8170:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8174:	df 91       	pop	r29
    8176:	cf 91       	pop	r28
    8178:	1f 91       	pop	r17
    817a:	0f 91       	pop	r16
    817c:	ff 90       	pop	r15
    817e:	ef 90       	pop	r14
    8180:	df 90       	pop	r13
    8182:	cf 90       	pop	r12
    8184:	bf 90       	pop	r11
    8186:	af 90       	pop	r10
    8188:	9f 90       	pop	r9
    818a:	8f 90       	pop	r8
    818c:	7f 90       	pop	r7
    818e:	6f 90       	pop	r6
    8190:	5f 90       	pop	r5
    8192:	4f 90       	pop	r4
    8194:	08 95       	ret

00008196 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
    8196:	6f 92       	push	r6
    8198:	7f 92       	push	r7
    819a:	8f 92       	push	r8
    819c:	9f 92       	push	r9
    819e:	af 92       	push	r10
    81a0:	bf 92       	push	r11
    81a2:	cf 92       	push	r12
    81a4:	ef 92       	push	r14
    81a6:	ff 92       	push	r15
    81a8:	0f 93       	push	r16
    81aa:	1f 93       	push	r17
    81ac:	cf 93       	push	r28
    81ae:	df 93       	push	r29
    81b0:	cd b7       	in	r28, 0x3d	; 61
    81b2:	de b7       	in	r29, 0x3e	; 62
    81b4:	68 97       	sbiw	r28, 0x18	; 24
    81b6:	0f b6       	in	r0, 0x3f	; 63
    81b8:	f8 94       	cli
    81ba:	de bf       	out	0x3e, r29	; 62
    81bc:	0f be       	out	0x3f, r0	; 63
    81be:	cd bf       	out	0x3d, r28	; 61
    81c0:	4c 01       	movw	r8, r24
    81c2:	3b 01       	movw	r6, r22
    81c4:	62 e0       	ldi	r22, 0x02	; 2
    81c6:	7a e5       	ldi	r23, 0x5A	; 90
    81c8:	ce 01       	movw	r24, r28
    81ca:	01 96       	adiw	r24, 0x01	; 1
    81cc:	5c 01       	movw	r10, r24
    81ce:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    81d2:	a3 01       	movw	r20, r6
    81d4:	4b 5f       	subi	r20, 0xFB	; 251
    81d6:	5f 4f       	sbci	r21, 0xFF	; 255
    81d8:	b4 01       	movw	r22, r8
    81da:	61 5b       	subi	r22, 0xB1	; 177
    81dc:	7f 4f       	sbci	r23, 0xFF	; 255
    81de:	c1 2c       	mov	r12, r1
    81e0:	ee 24       	eor	r14, r14
    81e2:	ea 94       	dec	r14
    81e4:	fe 2c       	mov	r15, r14
    81e6:	10 e0       	ldi	r17, 0x00	; 0
    81e8:	00 e0       	ldi	r16, 0x00	; 0
    81ea:	21 e0       	ldi	r18, 0x01	; 1
    81ec:	c5 01       	movw	r24, r10
    81ee:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_Z14selftest_get_0h():
    81f2:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
    81f6:	80 fd       	sbrc	r24, 0
    81f8:	56 c0       	rjmp	.+172    	; 0x82a6 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    81fa:	90 91 d8 0f 	lds	r25, 0x0FD8	; 0x800fd8 <now+0x4>
    81fe:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <now+0x3>
    8202:	20 91 3f 0a 	lds	r18, 0x0A3F	; 0x800a3f <uptime>
    8206:	20 ff       	sbrs	r18, 0
    8208:	47 c0       	rjmp	.+142    	; 0x8298 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x102>
    820a:	1f 92       	push	r1
    820c:	9f 93       	push	r25
    820e:	1f 92       	push	r1
    8210:	8f 93       	push	r24
    8212:	8a ef       	ldi	r24, 0xFA	; 250
    8214:	92 e0       	ldi	r25, 0x02	; 2
    8216:	9f 93       	push	r25
    8218:	8f 93       	push	r24
    821a:	bf 92       	push	r11
    821c:	af 92       	push	r10
    821e:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    8222:	0f b6       	in	r0, 0x3f	; 63
    8224:	f8 94       	cli
    8226:	de bf       	out	0x3e, r29	; 62
    8228:	0f be       	out	0x3f, r0	; 63
    822a:	cd bf       	out	0x3d, r28	; 61
    822c:	70 e0       	ldi	r23, 0x00	; 0
    822e:	60 e0       	ldi	r22, 0x00	; 0
    8230:	81 ea       	ldi	r24, 0xA1	; 161
    8232:	9b e0       	ldi	r25, 0x0B	; 11
    8234:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8238:	a3 01       	movw	r20, r6
    823a:	4c 5e       	subi	r20, 0xEC	; 236
    823c:	5f 4f       	sbci	r21, 0xFF	; 255
    823e:	b4 01       	movw	r22, r8
    8240:	6c 5f       	subi	r22, 0xFC	; 252
    8242:	7f 4f       	sbci	r23, 0xFF	; 255
    8244:	c1 2c       	mov	r12, r1
    8246:	ee 24       	eor	r14, r14
    8248:	ea 94       	dec	r14
    824a:	fe 2c       	mov	r15, r14
    824c:	10 e0       	ldi	r17, 0x00	; 0
    824e:	00 e0       	ldi	r16, 0x00	; 0
    8250:	28 e0       	ldi	r18, 0x08	; 8
    8252:	c5 01       	movw	r24, r10
    8254:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8258:	83 01       	movw	r16, r6
    825a:	0c 5a       	subi	r16, 0xAC	; 172
    825c:	1f 4f       	sbci	r17, 0xFF	; 255
    825e:	94 01       	movw	r18, r8
    8260:	2c 50       	subi	r18, 0x0C	; 12
    8262:	3f 4f       	sbci	r19, 0xFF	; 255
    8264:	a3 01       	movw	r20, r6
    8266:	b4 01       	movw	r22, r8
    8268:	81 ea       	ldi	r24, 0xA1	; 161
    826a:	9b e0       	ldi	r25, 0x0B	; 11
    826c:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8270:	68 96       	adiw	r28, 0x18	; 24
    8272:	0f b6       	in	r0, 0x3f	; 63
    8274:	f8 94       	cli
    8276:	de bf       	out	0x3e, r29	; 62
    8278:	0f be       	out	0x3f, r0	; 63
    827a:	cd bf       	out	0x3d, r28	; 61
    827c:	df 91       	pop	r29
    827e:	cf 91       	pop	r28
    8280:	1f 91       	pop	r17
    8282:	0f 91       	pop	r16
    8284:	ff 90       	pop	r15
    8286:	ef 90       	pop	r14
    8288:	cf 90       	pop	r12
    828a:	bf 90       	pop	r11
    828c:	af 90       	pop	r10
    828e:	9f 90       	pop	r9
    8290:	8f 90       	pop	r8
    8292:	7f 90       	pop	r7
    8294:	6f 90       	pop	r6
    8296:	08 95       	ret
    8298:	1f 92       	push	r1
    829a:	9f 93       	push	r25
    829c:	1f 92       	push	r1
    829e:	8f 93       	push	r24
    82a0:	84 e0       	ldi	r24, 0x04	; 4
    82a2:	93 e0       	ldi	r25, 0x03	; 3
    82a4:	b8 cf       	rjmp	.-144    	; 0x8216 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x80>
    82a6:	6e e0       	ldi	r22, 0x0E	; 14
    82a8:	73 e0       	ldi	r23, 0x03	; 3
    82aa:	c5 01       	movw	r24, r10
    82ac:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    82b0:	bd cf       	rjmp	.-134    	; 0x822c <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x96>

000082b2 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
    82b2:	8f 92       	push	r8
    82b4:	9f 92       	push	r9
    82b6:	af 92       	push	r10
    82b8:	bf 92       	push	r11
    82ba:	cf 92       	push	r12
    82bc:	ef 92       	push	r14
    82be:	ff 92       	push	r15
    82c0:	0f 93       	push	r16
    82c2:	1f 93       	push	r17
    82c4:	cf 93       	push	r28
    82c6:	df 93       	push	r29
    82c8:	cd b7       	in	r28, 0x3d	; 61
    82ca:	de b7       	in	r29, 0x3e	; 62
    82cc:	60 97       	sbiw	r28, 0x10	; 16
    82ce:	0f b6       	in	r0, 0x3f	; 63
    82d0:	f8 94       	cli
    82d2:	de bf       	out	0x3e, r29	; 62
    82d4:	0f be       	out	0x3f, r0	; 63
    82d6:	cd bf       	out	0x3d, r28	; 61
    82d8:	4c 01       	movw	r8, r24
    82da:	8b 01       	movw	r16, r22
_Z14selftest_get_0h():
    82dc:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    82e0:	9e 01       	movw	r18, r28
    82e2:	2f 5f       	subi	r18, 0xFF	; 255
    82e4:	3f 4f       	sbci	r19, 0xFF	; 255
    82e6:	59 01       	movw	r10, r18
_Z27display_element_show_date_1jjjjhhPc():
    82e8:	80 fd       	sbrc	r24, 0
    82ea:	54 c0       	rjmp	.+168    	; 0x8394 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xe2>
_ZNK8DateTime4yearEv():
    82ec:	80 91 d4 0f 	lds	r24, 0x0FD4	; 0x800fd4 <now>
    82f0:	90 e0       	ldi	r25, 0x00	; 0
    82f2:	80 53       	subi	r24, 0x30	; 48
    82f4:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
    82f6:	9f 93       	push	r25
    82f8:	8f 93       	push	r24
    82fa:	80 91 d5 0f 	lds	r24, 0x0FD5	; 0x800fd5 <now+0x1>
    82fe:	1f 92       	push	r1
    8300:	8f 93       	push	r24
    8302:	80 91 d6 0f 	lds	r24, 0x0FD6	; 0x800fd6 <now+0x2>
    8306:	1f 92       	push	r1
    8308:	8f 93       	push	r24
    830a:	84 e1       	ldi	r24, 0x14	; 20
    830c:	93 e0       	ldi	r25, 0x03	; 3
    830e:	9f 93       	push	r25
    8310:	8f 93       	push	r24
    8312:	3f 93       	push	r19
    8314:	2f 93       	push	r18
    8316:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	f8 94       	cli
    831e:	de bf       	out	0x3e, r29	; 62
    8320:	0f be       	out	0x3f, r0	; 63
    8322:	cd bf       	out	0x3d, r28	; 61
    8324:	6f ef       	ldi	r22, 0xFF	; 255
    8326:	7f ef       	ldi	r23, 0xFF	; 255
    8328:	81 ea       	ldi	r24, 0xA1	; 161
    832a:	9b e0       	ldi	r25, 0x0B	; 11
    832c:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8330:	2e e8       	ldi	r18, 0x8E	; 142
    8332:	30 e0       	ldi	r19, 0x00	; 0
    8334:	a8 01       	movw	r20, r16
    8336:	b4 01       	movw	r22, r8
    8338:	81 ea       	ldi	r24, 0xA1	; 161
    833a:	9b e0       	ldi	r25, 0x0B	; 11
    833c:	0e 94 21 92 	call	0x12442	; 0x12442 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    8340:	a8 01       	movw	r20, r16
    8342:	4f 5f       	subi	r20, 0xFF	; 255
    8344:	5f 4f       	sbci	r21, 0xFF	; 255
    8346:	2e e8       	ldi	r18, 0x8E	; 142
    8348:	30 e0       	ldi	r19, 0x00	; 0
    834a:	b4 01       	movw	r22, r8
    834c:	81 ea       	ldi	r24, 0xA1	; 161
    834e:	9b e0       	ldi	r25, 0x0B	; 11
    8350:	0e 94 21 92 	call	0x12442	; 0x12442 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    8354:	a8 01       	movw	r20, r16
    8356:	4e 5f       	subi	r20, 0xFE	; 254
    8358:	5f 4f       	sbci	r21, 0xFF	; 255
    835a:	c1 2c       	mov	r12, r1
    835c:	ee 24       	eor	r14, r14
    835e:	ea 94       	dec	r14
    8360:	fe 2c       	mov	r15, r14
    8362:	10 e0       	ldi	r17, 0x00	; 0
    8364:	00 e0       	ldi	r16, 0x00	; 0
    8366:	23 e0       	ldi	r18, 0x03	; 3
    8368:	b4 01       	movw	r22, r8
    836a:	c5 01       	movw	r24, r10
    836c:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8370:	60 96       	adiw	r28, 0x10	; 16
    8372:	0f b6       	in	r0, 0x3f	; 63
    8374:	f8 94       	cli
    8376:	de bf       	out	0x3e, r29	; 62
    8378:	0f be       	out	0x3f, r0	; 63
    837a:	cd bf       	out	0x3d, r28	; 61
    837c:	df 91       	pop	r29
    837e:	cf 91       	pop	r28
    8380:	1f 91       	pop	r17
    8382:	0f 91       	pop	r16
    8384:	ff 90       	pop	r15
    8386:	ef 90       	pop	r14
    8388:	cf 90       	pop	r12
    838a:	bf 90       	pop	r11
    838c:	af 90       	pop	r10
    838e:	9f 90       	pop	r9
    8390:	8f 90       	pop	r8
    8392:	08 95       	ret
    8394:	63 e2       	ldi	r22, 0x23	; 35
    8396:	73 e0       	ldi	r23, 0x03	; 3
    8398:	c9 01       	movw	r24, r18
    839a:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    839e:	c2 cf       	rjmp	.-124    	; 0x8324 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>

000083a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
    83a0:	af 92       	push	r10
    83a2:	bf 92       	push	r11
    83a4:	cf 92       	push	r12
    83a6:	df 92       	push	r13
    83a8:	ef 92       	push	r14
    83aa:	ff 92       	push	r15
    83ac:	0f 93       	push	r16
    83ae:	1f 93       	push	r17
    83b0:	cf 93       	push	r28
    83b2:	df 93       	push	r29
    83b4:	8a 30       	cpi	r24, 0x0A	; 10
    83b6:	88 f5       	brcc	.+98     	; 0x841a <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    83b8:	7b 01       	movw	r14, r22
    83ba:	94 e1       	ldi	r25, 0x14	; 20
    83bc:	89 9f       	mul	r24, r25
    83be:	e0 01       	movw	r28, r0
    83c0:	11 24       	eor	r1, r1
    83c2:	6e 01       	movw	r12, r28
    83c4:	e6 e5       	ldi	r30, 0x56	; 86
    83c6:	ce 1a       	sub	r12, r30
    83c8:	ea ef       	ldi	r30, 0xFA	; 250
    83ca:	de 0a       	sbc	r13, r30
    83cc:	8a 01       	movw	r16, r20
    83ce:	5e 01       	movw	r10, r28
    83d0:	f4 e4       	ldi	r31, 0x44	; 68
    83d2:	af 1a       	sub	r10, r31
    83d4:	fa ef       	ldi	r31, 0xFA	; 250
    83d6:	bf 0a       	sbc	r11, r31
_ZNK5EERefdeEv():
    83d8:	c6 01       	movw	r24, r12
    83da:	0e 94 68 df 	call	0x1bed0	; 0x1bed0 <eeprom_read_byte>
_Z23remote_tds_get_completehPhPc():
    83de:	f8 01       	movw	r30, r16
    83e0:	81 93       	st	Z+, r24
    83e2:	8f 01       	movw	r16, r30
    83e4:	10 82       	st	Z, r1
    83e6:	88 23       	and	r24, r24
    83e8:	31 f0       	breq	.+12     	; 0x83f6 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    83ea:	ff ef       	ldi	r31, 0xFF	; 255
    83ec:	cf 1a       	sub	r12, r31
    83ee:	df 0a       	sbc	r13, r31
    83f0:	ac 14       	cp	r10, r12
    83f2:	bd 04       	cpc	r11, r13
    83f4:	89 f7       	brne	.-30     	; 0x83d8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
_ZNK5EERefdeEv():
    83f6:	ce 01       	movw	r24, r28
    83f8:	83 54       	subi	r24, 0x43	; 67
    83fa:	9a 4f       	sbci	r25, 0xFA	; 250
    83fc:	0e 94 68 df 	call	0x1bed0	; 0x1bed0 <eeprom_read_byte>
_Z23remote_tds_get_completehPhPc():
    8400:	f7 01       	movw	r30, r14
    8402:	80 83       	st	Z, r24
    8404:	df 91       	pop	r29
    8406:	cf 91       	pop	r28
    8408:	1f 91       	pop	r17
    840a:	0f 91       	pop	r16
    840c:	ff 90       	pop	r15
    840e:	ef 90       	pop	r14
    8410:	df 90       	pop	r13
    8412:	cf 90       	pop	r12
    8414:	bf 90       	pop	r11
    8416:	af 90       	pop	r10
    8418:	08 95       	ret
    841a:	8f ef       	ldi	r24, 0xFF	; 255
    841c:	fb 01       	movw	r30, r22
    841e:	f1 cf       	rjmp	.-30     	; 0x8402 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

00008420 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
    8420:	1f 93       	push	r17
    8422:	cf 93       	push	r28
    8424:	df 93       	push	r29
    8426:	cd b7       	in	r28, 0x3d	; 61
    8428:	de b7       	in	r29, 0x3e	; 62
    842a:	63 97       	sbiw	r28, 0x13	; 19
    842c:	0f b6       	in	r0, 0x3f	; 63
    842e:	f8 94       	cli
    8430:	de bf       	out	0x3e, r29	; 62
    8432:	0f be       	out	0x3f, r0	; 63
    8434:	cd bf       	out	0x3d, r28	; 61
    8436:	16 2f       	mov	r17, r22
    8438:	ae 01       	movw	r20, r28
    843a:	4f 5f       	subi	r20, 0xFF	; 255
    843c:	5f 4f       	sbci	r21, 0xFF	; 255
    843e:	be 01       	movw	r22, r28
    8440:	6d 5e       	subi	r22, 0xED	; 237
    8442:	7f 4f       	sbci	r23, 0xFF	; 255
    8444:	81 2f       	mov	r24, r17
    8446:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    844a:	70 e0       	ldi	r23, 0x00	; 0
    844c:	60 e0       	ldi	r22, 0x00	; 0
    844e:	87 e6       	ldi	r24, 0x67	; 103
    8450:	90 e0       	ldi	r25, 0x00	; 0
    8452:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    8456:	2e e9       	ldi	r18, 0x9E	; 158
    8458:	34 e4       	ldi	r19, 0x44	; 68
    845a:	41 2f       	mov	r20, r17
    845c:	62 e1       	ldi	r22, 0x12	; 18
    845e:	ce 01       	movw	r24, r28
    8460:	01 96       	adiw	r24, 0x01	; 1
    8462:	0e 94 2d 3c 	call	0x785a	; 0x785a <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    8466:	63 96       	adiw	r28, 0x13	; 19
    8468:	0f b6       	in	r0, 0x3f	; 63
    846a:	f8 94       	cli
    846c:	de bf       	out	0x3e, r29	; 62
    846e:	0f be       	out	0x3f, r0	; 63
    8470:	cd bf       	out	0x3d, r28	; 61
    8472:	df 91       	pop	r29
    8474:	cf 91       	pop	r28
    8476:	1f 91       	pop	r17
    8478:	08 95       	ret

0000847a <remote_tds_set_name(unsigned char, char*)>:
_Z19remote_tds_set_namehPc():
    847a:	df 92       	push	r13
    847c:	ef 92       	push	r14
    847e:	ff 92       	push	r15
    8480:	0f 93       	push	r16
    8482:	1f 93       	push	r17
    8484:	cf 93       	push	r28
    8486:	df 93       	push	r29
    8488:	8a 30       	cpi	r24, 0x0A	; 10
    848a:	c0 f4       	brcc	.+48     	; 0x84bc <remote_tds_set_name(unsigned char, char*)+0x42>
    848c:	94 e1       	ldi	r25, 0x14	; 20
    848e:	89 9f       	mul	r24, r25
    8490:	e0 01       	movw	r28, r0
    8492:	11 24       	eor	r1, r1
    8494:	7b 01       	movw	r14, r22
    8496:	8e 01       	movw	r16, r28
    8498:	06 55       	subi	r16, 0x56	; 86
    849a:	1a 4f       	sbci	r17, 0xFA	; 250
    849c:	c4 54       	subi	r28, 0x44	; 68
    849e:	da 4f       	sbci	r29, 0xFA	; 250
    84a0:	f7 01       	movw	r30, r14
    84a2:	d1 90       	ld	r13, Z+
    84a4:	7f 01       	movw	r14, r30
    84a6:	6d 2d       	mov	r22, r13
    84a8:	c8 01       	movw	r24, r16
    84aa:	0e 94 b0 38 	call	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
    84ae:	dd 20       	and	r13, r13
    84b0:	29 f0       	breq	.+10     	; 0x84bc <remote_tds_set_name(unsigned char, char*)+0x42>
    84b2:	0f 5f       	subi	r16, 0xFF	; 255
    84b4:	1f 4f       	sbci	r17, 0xFF	; 255
    84b6:	0c 17       	cp	r16, r28
    84b8:	1d 07       	cpc	r17, r29
    84ba:	91 f7       	brne	.-28     	; 0x84a0 <remote_tds_set_name(unsigned char, char*)+0x26>
    84bc:	df 91       	pop	r29
    84be:	cf 91       	pop	r28
    84c0:	1f 91       	pop	r17
    84c2:	0f 91       	pop	r16
    84c4:	ff 90       	pop	r15
    84c6:	ef 90       	pop	r14
    84c8:	df 90       	pop	r13
    84ca:	08 95       	ret

000084cc <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
    84cc:	cf 93       	push	r28
    84ce:	df 93       	push	r29
    84d0:	8a 30       	cpi	r24, 0x0A	; 10
    84d2:	68 f4       	brcc	.+26     	; 0x84ee <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    84d4:	eb 01       	movw	r28, r22
    84d6:	24 e1       	ldi	r18, 0x14	; 20
    84d8:	82 9f       	mul	r24, r18
    84da:	c0 01       	movw	r24, r0
    84dc:	11 24       	eor	r1, r1
_ZNK5EERefdeEv():
    84de:	83 54       	subi	r24, 0x43	; 67
    84e0:	9a 4f       	sbci	r25, 0xFA	; 250
    84e2:	0e 94 68 df 	call	0x1bed0	; 0x1bed0 <eeprom_read_byte>
_Z21remote_tds_get_activehPh():
    84e6:	88 83       	st	Y, r24
    84e8:	df 91       	pop	r29
    84ea:	cf 91       	pop	r28
    84ec:	08 95       	ret
    84ee:	8f ef       	ldi	r24, 0xFF	; 255
    84f0:	fb 01       	movw	r30, r22
    84f2:	80 83       	st	Z, r24
    84f4:	f9 cf       	rjmp	.-14     	; 0x84e8 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

000084f6 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
    84f6:	cf 92       	push	r12
    84f8:	df 92       	push	r13
    84fa:	ff 92       	push	r15
    84fc:	0f 93       	push	r16
    84fe:	1f 93       	push	r17
    8500:	cf 93       	push	r28
    8502:	df 93       	push	r29
    8504:	1f 92       	push	r1
    8506:	cd b7       	in	r28, 0x3d	; 61
    8508:	de b7       	in	r29, 0x3e	; 62
    850a:	f8 2e       	mov	r15, r24
    850c:	69 01       	movw	r12, r18
    850e:	60 eb       	ldi	r22, 0xB0	; 176
    8510:	77 e5       	ldi	r23, 0x57	; 87
    8512:	c9 01       	movw	r24, r18
    8514:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8518:	f8 01       	movw	r30, r16
    851a:	10 82       	st	Z, r1
    851c:	be 01       	movw	r22, r28
    851e:	6f 5f       	subi	r22, 0xFF	; 255
    8520:	7f 4f       	sbci	r23, 0xFF	; 255
    8522:	8f 2d       	mov	r24, r15
    8524:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    8528:	89 81       	ldd	r24, Y+1	; 0x01
    852a:	81 30       	cpi	r24, 0x01	; 1
    852c:	39 f4       	brne	.+14     	; 0x853c <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    852e:	a6 01       	movw	r20, r12
    8530:	be 01       	movw	r22, r28
    8532:	6f 5f       	subi	r22, 0xFF	; 255
    8534:	7f 4f       	sbci	r23, 0xFF	; 255
    8536:	8f 2d       	mov	r24, r15
    8538:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    853c:	0f 90       	pop	r0
    853e:	df 91       	pop	r29
    8540:	cf 91       	pop	r28
    8542:	1f 91       	pop	r17
    8544:	0f 91       	pop	r16
    8546:	ff 90       	pop	r15
    8548:	df 90       	pop	r13
    854a:	cf 90       	pop	r12
    854c:	08 95       	ret

0000854e <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
    854e:	1f 93       	push	r17
    8550:	cf 93       	push	r28
    8552:	df 93       	push	r29
    8554:	1f 92       	push	r1
    8556:	cd b7       	in	r28, 0x3d	; 61
    8558:	de b7       	in	r29, 0x3e	; 62
    855a:	14 2f       	mov	r17, r20
    855c:	be 01       	movw	r22, r28
    855e:	6f 5f       	subi	r22, 0xFF	; 255
    8560:	7f 4f       	sbci	r23, 0xFF	; 255
    8562:	84 2f       	mov	r24, r20
    8564:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    8568:	89 81       	ldd	r24, Y+1	; 0x01
    856a:	81 30       	cpi	r24, 0x01	; 1
    856c:	31 f4       	brne	.+12     	; 0x857a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
    856e:	61 2f       	mov	r22, r17
    8570:	70 e0       	ldi	r23, 0x00	; 0
    8572:	87 e0       	ldi	r24, 0x07	; 7
    8574:	90 e0       	ldi	r25, 0x00	; 0
    8576:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    857a:	0f 90       	pop	r0
    857c:	df 91       	pop	r29
    857e:	cf 91       	pop	r28
    8580:	1f 91       	pop	r17
    8582:	08 95       	ret

00008584 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
    8584:	9f 92       	push	r9
    8586:	af 92       	push	r10
    8588:	bf 92       	push	r11
    858a:	cf 92       	push	r12
    858c:	df 92       	push	r13
    858e:	ef 92       	push	r14
    8590:	0f 93       	push	r16
    8592:	1f 93       	push	r17
    8594:	cf 93       	push	r28
    8596:	df 93       	push	r29
    8598:	cd b7       	in	r28, 0x3d	; 61
    859a:	de b7       	in	r29, 0x3e	; 62
    859c:	65 97       	sbiw	r28, 0x15	; 21
    859e:	0f b6       	in	r0, 0x3f	; 63
    85a0:	f8 94       	cli
    85a2:	de bf       	out	0x3e, r29	; 62
    85a4:	0f be       	out	0x3f, r0	; 63
    85a6:	cd bf       	out	0x3d, r28	; 61
    85a8:	98 2e       	mov	r9, r24
    85aa:	e4 2e       	mov	r14, r20
    85ac:	69 01       	movw	r12, r18
    85ae:	58 01       	movw	r10, r16
    85b0:	69 eb       	ldi	r22, 0xB9	; 185
    85b2:	75 e0       	ldi	r23, 0x05	; 5
    85b4:	c9 01       	movw	r24, r18
    85b6:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    85ba:	69 eb       	ldi	r22, 0xB9	; 185
    85bc:	75 e0       	ldi	r23, 0x05	; 5
    85be:	c8 01       	movw	r24, r16
    85c0:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    85c4:	00 e0       	ldi	r16, 0x00	; 0
    85c6:	10 e0       	ldi	r17, 0x00	; 0
    85c8:	80 2f       	mov	r24, r16
    85ca:	0e 94 51 87 	call	0x10ea2	; 0x10ea2 <tds_used(unsigned char)>
    85ce:	81 30       	cpi	r24, 0x01	; 1
    85d0:	11 f4       	brne	.+4      	; 0x85d6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
    85d2:	ee 20       	and	r14, r14
    85d4:	19 f0       	breq	.+6      	; 0x85dc <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
    85d6:	81 e0       	ldi	r24, 0x01	; 1
    85d8:	e8 12       	cpse	r14, r24
    85da:	25 c0       	rjmp	.+74     	; 0x8626 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa2>
    85dc:	91 12       	cpse	r9, r17
    85de:	22 c0       	rjmp	.+68     	; 0x8624 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xa0>
    85e0:	be 01       	movw	r22, r28
    85e2:	6f 5f       	subi	r22, 0xFF	; 255
    85e4:	7f 4f       	sbci	r23, 0xFF	; 255
    85e6:	80 2f       	mov	r24, r16
    85e8:	0e 94 22 88 	call	0x11044	; 0x11044 <tds_get_name(unsigned char, char*)>
    85ec:	be 01       	movw	r22, r28
    85ee:	6f 5f       	subi	r22, 0xFF	; 255
    85f0:	7f 4f       	sbci	r23, 0xFF	; 255
    85f2:	c5 01       	movw	r24, r10
    85f4:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    85f8:	69 e3       	ldi	r22, 0x39	; 57
    85fa:	78 e5       	ldi	r23, 0x58	; 88
    85fc:	c6 01       	movw	r24, r12
    85fe:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8602:	65 96       	adiw	r28, 0x15	; 21
    8604:	0f b6       	in	r0, 0x3f	; 63
    8606:	f8 94       	cli
    8608:	de bf       	out	0x3e, r29	; 62
    860a:	0f be       	out	0x3f, r0	; 63
    860c:	cd bf       	out	0x3d, r28	; 61
    860e:	df 91       	pop	r29
    8610:	cf 91       	pop	r28
    8612:	1f 91       	pop	r17
    8614:	0f 91       	pop	r16
    8616:	ef 90       	pop	r14
    8618:	df 90       	pop	r13
    861a:	cf 90       	pop	r12
    861c:	bf 90       	pop	r11
    861e:	af 90       	pop	r10
    8620:	9f 90       	pop	r9
    8622:	08 95       	ret
    8624:	1f 5f       	subi	r17, 0xFF	; 255
    8626:	0f 5f       	subi	r16, 0xFF	; 255
    8628:	06 30       	cpi	r16, 0x06	; 6
    862a:	71 f6       	brne	.-100    	; 0x85c8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x44>
    862c:	00 e0       	ldi	r16, 0x00	; 0
    862e:	be 01       	movw	r22, r28
    8630:	6b 5e       	subi	r22, 0xEB	; 235
    8632:	7f 4f       	sbci	r23, 0xFF	; 255
    8634:	80 2f       	mov	r24, r16
    8636:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    863a:	8d 89       	ldd	r24, Y+21	; 0x15
    863c:	81 30       	cpi	r24, 0x01	; 1
    863e:	11 f4       	brne	.+4      	; 0x8644 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
    8640:	ee 20       	and	r14, r14
    8642:	19 f0       	breq	.+6      	; 0x864a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc6>
    8644:	81 e0       	ldi	r24, 0x01	; 1
    8646:	e8 12       	cpse	r14, r24
    8648:	15 c0       	rjmp	.+42     	; 0x8674 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    864a:	91 12       	cpse	r9, r17
    864c:	12 c0       	rjmp	.+36     	; 0x8672 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xee>
    864e:	ae 01       	movw	r20, r28
    8650:	4f 5f       	subi	r20, 0xFF	; 255
    8652:	5f 4f       	sbci	r21, 0xFF	; 255
    8654:	be 01       	movw	r22, r28
    8656:	6b 5e       	subi	r22, 0xEB	; 235
    8658:	7f 4f       	sbci	r23, 0xFF	; 255
    865a:	80 2f       	mov	r24, r16
    865c:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8660:	be 01       	movw	r22, r28
    8662:	6f 5f       	subi	r22, 0xFF	; 255
    8664:	7f 4f       	sbci	r23, 0xFF	; 255
    8666:	c5 01       	movw	r24, r10
    8668:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    866c:	6a e2       	ldi	r22, 0x2A	; 42
    866e:	78 e5       	ldi	r23, 0x58	; 88
    8670:	c5 cf       	rjmp	.-118    	; 0x85fc <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
    8672:	1f 5f       	subi	r17, 0xFF	; 255
    8674:	0f 5f       	subi	r16, 0xFF	; 255
    8676:	0a 30       	cpi	r16, 0x0A	; 10
    8678:	d1 f6       	brne	.-76     	; 0x862e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xaa>
    867a:	c3 cf       	rjmp	.-122    	; 0x8602 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x7e>

0000867c <remote_tds_set_active(unsigned char, unsigned char)>:
_Z21remote_tds_set_activehh():
    867c:	8a 30       	cpi	r24, 0x0A	; 10
    867e:	40 f4       	brcc	.+16     	; 0x8690 <remote_tds_set_active(unsigned char, unsigned char)+0x14>
    8680:	24 e1       	ldi	r18, 0x14	; 20
    8682:	82 9f       	mul	r24, r18
    8684:	c0 01       	movw	r24, r0
    8686:	11 24       	eor	r1, r1
    8688:	83 54       	subi	r24, 0x43	; 67
    868a:	9a 4f       	sbci	r25, 0xFA	; 250
    868c:	0c 94 b0 38 	jmp	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
    8690:	08 95       	ret

00008692 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
    8692:	cf 93       	push	r28
    8694:	df 93       	push	r29
    8696:	c8 2f       	mov	r28, r24
    8698:	d6 2f       	mov	r29, r22
    869a:	ba 01       	movw	r22, r20
    869c:	0e 94 3d 42 	call	0x847a	; 0x847a <remote_tds_set_name(unsigned char, char*)>
    86a0:	6d 2f       	mov	r22, r29
    86a2:	8c 2f       	mov	r24, r28
    86a4:	df 91       	pop	r29
    86a6:	cf 91       	pop	r28
    86a8:	0c 94 3e 43 	jmp	0x867c	; 0x867c <remote_tds_set_active(unsigned char, unsigned char)>

000086ac <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
    86ac:	cf 93       	push	r28
    86ae:	df 93       	push	r29
    86b0:	cd b7       	in	r28, 0x3d	; 61
    86b2:	de b7       	in	r29, 0x3e	; 62
    86b4:	62 97       	sbiw	r28, 0x12	; 18
    86b6:	0f b6       	in	r0, 0x3f	; 63
    86b8:	f8 94       	cli
    86ba:	de bf       	out	0x3e, r29	; 62
    86bc:	0f be       	out	0x3f, r0	; 63
    86be:	cd bf       	out	0x3d, r28	; 61
    86c0:	e1 e0       	ldi	r30, 0x01	; 1
    86c2:	f0 e0       	ldi	r31, 0x00	; 0
    86c4:	ec 0f       	add	r30, r28
    86c6:	fd 1f       	adc	r31, r29
    86c8:	e8 0f       	add	r30, r24
    86ca:	f1 1d       	adc	r31, r1
    86cc:	10 82       	st	Z, r1
    86ce:	ae 01       	movw	r20, r28
    86d0:	4f 5f       	subi	r20, 0xFF	; 255
    86d2:	5f 4f       	sbci	r21, 0xFF	; 255
    86d4:	60 e0       	ldi	r22, 0x00	; 0
    86d6:	0e 94 49 43 	call	0x8692	; 0x8692 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    86da:	62 96       	adiw	r28, 0x12	; 18
    86dc:	0f b6       	in	r0, 0x3f	; 63
    86de:	f8 94       	cli
    86e0:	de bf       	out	0x3e, r29	; 62
    86e2:	0f be       	out	0x3f, r0	; 63
    86e4:	cd bf       	out	0x3d, r28	; 61
    86e6:	df 91       	pop	r29
    86e8:	cf 91       	pop	r28
    86ea:	08 95       	ret

000086ec <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
    86ec:	86 2f       	mov	r24, r22
    86ee:	0e 94 56 43 	call	0x86ac	; 0x86ac <remote_tds_clear(unsigned char)>
    86f2:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

000086f6 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
    86f6:	cf 93       	push	r28
    86f8:	df 93       	push	r29
    86fa:	cd b7       	in	r28, 0x3d	; 61
    86fc:	de b7       	in	r29, 0x3e	; 62
    86fe:	c1 58       	subi	r28, 0x81	; 129
    8700:	d1 09       	sbc	r29, r1
    8702:	0f b6       	in	r0, 0x3f	; 63
    8704:	f8 94       	cli
    8706:	de bf       	out	0x3e, r29	; 62
    8708:	0f be       	out	0x3f, r0	; 63
    870a:	cd bf       	out	0x3d, r28	; 61
    870c:	cf 57       	subi	r28, 0x7F	; 127
    870e:	df 4f       	sbci	r29, 0xFF	; 255
    8710:	18 82       	st	Y, r1
    8712:	c1 58       	subi	r28, 0x81	; 129
    8714:	d0 40       	sbci	r29, 0x00	; 0
    8716:	ae 01       	movw	r20, r28
    8718:	4f 5b       	subi	r20, 0xBF	; 191
    871a:	5f 4f       	sbci	r21, 0xFF	; 255
    871c:	be 01       	movw	r22, r28
    871e:	6f 57       	subi	r22, 0x7F	; 127
    8720:	7f 4f       	sbci	r23, 0xFF	; 255
    8722:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8726:	cf 57       	subi	r28, 0x7F	; 127
    8728:	df 4f       	sbci	r29, 0xFF	; 255
    872a:	88 81       	ld	r24, Y
    872c:	c1 58       	subi	r28, 0x81	; 129
    872e:	d0 40       	sbci	r29, 0x00	; 0
    8730:	81 30       	cpi	r24, 0x01	; 1
    8732:	a1 f4       	brne	.+40     	; 0x875c <remote_tds_subscibe_topic(unsigned char)+0x66>
    8734:	6e e2       	ldi	r22, 0x2E	; 46
    8736:	73 e0       	ldi	r23, 0x03	; 3
    8738:	ce 01       	movw	r24, r28
    873a:	01 96       	adiw	r24, 0x01	; 1
    873c:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    8740:	be 01       	movw	r22, r28
    8742:	6f 5b       	subi	r22, 0xBF	; 191
    8744:	7f 4f       	sbci	r23, 0xFF	; 255
    8746:	ce 01       	movw	r24, r28
    8748:	01 96       	adiw	r24, 0x01	; 1
    874a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    874e:	be 01       	movw	r22, r28
    8750:	6f 5f       	subi	r22, 0xFF	; 255
    8752:	7f 4f       	sbci	r23, 0xFF	; 255
    8754:	8f e8       	ldi	r24, 0x8F	; 143
    8756:	9d e0       	ldi	r25, 0x0D	; 13
    8758:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    875c:	cf 57       	subi	r28, 0x7F	; 127
    875e:	df 4f       	sbci	r29, 0xFF	; 255
    8760:	0f b6       	in	r0, 0x3f	; 63
    8762:	f8 94       	cli
    8764:	de bf       	out	0x3e, r29	; 62
    8766:	0f be       	out	0x3f, r0	; 63
    8768:	cd bf       	out	0x3d, r28	; 61
    876a:	df 91       	pop	r29
    876c:	cf 91       	pop	r28
    876e:	08 95       	ret

00008770 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
    8770:	86 2f       	mov	r24, r22
    8772:	0c 94 7b 43 	jmp	0x86f6	; 0x86f6 <remote_tds_subscibe_topic(unsigned char)>

00008776 <remote_tds_unsubscibe_topic(unsigned char)>:
_Z27remote_tds_unsubscibe_topich():
    8776:	cf 93       	push	r28
    8778:	df 93       	push	r29
    877a:	cd b7       	in	r28, 0x3d	; 61
    877c:	de b7       	in	r29, 0x3e	; 62
    877e:	c1 58       	subi	r28, 0x81	; 129
    8780:	d1 09       	sbc	r29, r1
    8782:	0f b6       	in	r0, 0x3f	; 63
    8784:	f8 94       	cli
    8786:	de bf       	out	0x3e, r29	; 62
    8788:	0f be       	out	0x3f, r0	; 63
    878a:	cd bf       	out	0x3d, r28	; 61
    878c:	cf 57       	subi	r28, 0x7F	; 127
    878e:	df 4f       	sbci	r29, 0xFF	; 255
    8790:	18 82       	st	Y, r1
    8792:	c1 58       	subi	r28, 0x81	; 129
    8794:	d0 40       	sbci	r29, 0x00	; 0
    8796:	ae 01       	movw	r20, r28
    8798:	4f 5b       	subi	r20, 0xBF	; 191
    879a:	5f 4f       	sbci	r21, 0xFF	; 255
    879c:	be 01       	movw	r22, r28
    879e:	6f 57       	subi	r22, 0x7F	; 127
    87a0:	7f 4f       	sbci	r23, 0xFF	; 255
    87a2:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    87a6:	cf 57       	subi	r28, 0x7F	; 127
    87a8:	df 4f       	sbci	r29, 0xFF	; 255
    87aa:	88 81       	ld	r24, Y
    87ac:	c1 58       	subi	r28, 0x81	; 129
    87ae:	d0 40       	sbci	r29, 0x00	; 0
    87b0:	81 30       	cpi	r24, 0x01	; 1
    87b2:	a1 f4       	brne	.+40     	; 0x87dc <remote_tds_unsubscibe_topic(unsigned char)+0x66>
    87b4:	6e e2       	ldi	r22, 0x2E	; 46
    87b6:	73 e0       	ldi	r23, 0x03	; 3
    87b8:	ce 01       	movw	r24, r28
    87ba:	01 96       	adiw	r24, 0x01	; 1
    87bc:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    87c0:	be 01       	movw	r22, r28
    87c2:	6f 5b       	subi	r22, 0xBF	; 191
    87c4:	7f 4f       	sbci	r23, 0xFF	; 255
    87c6:	ce 01       	movw	r24, r28
    87c8:	01 96       	adiw	r24, 0x01	; 1
    87ca:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    87ce:	be 01       	movw	r22, r28
    87d0:	6f 5f       	subi	r22, 0xFF	; 255
    87d2:	7f 4f       	sbci	r23, 0xFF	; 255
    87d4:	8f e8       	ldi	r24, 0x8F	; 143
    87d6:	9d e0       	ldi	r25, 0x0D	; 13
    87d8:	0e 94 75 c0 	call	0x180ea	; 0x180ea <PubSubClient::unsubscribe(char const*)>
    87dc:	cf 57       	subi	r28, 0x7F	; 127
    87de:	df 4f       	sbci	r29, 0xFF	; 255
    87e0:	0f b6       	in	r0, 0x3f	; 63
    87e2:	f8 94       	cli
    87e4:	de bf       	out	0x3e, r29	; 62
    87e6:	0f be       	out	0x3f, r0	; 63
    87e8:	cd bf       	out	0x3d, r28	; 61
    87ea:	df 91       	pop	r29
    87ec:	cf 91       	pop	r28
    87ee:	08 95       	ret

000087f0 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
    87f0:	1f 93       	push	r17
    87f2:	cf 93       	push	r28
    87f4:	df 93       	push	r29
    87f6:	1f 92       	push	r1
    87f8:	cd b7       	in	r28, 0x3d	; 61
    87fa:	de b7       	in	r29, 0x3e	; 62
    87fc:	10 e0       	ldi	r17, 0x00	; 0
    87fe:	be 01       	movw	r22, r28
    8800:	6f 5f       	subi	r22, 0xFF	; 255
    8802:	7f 4f       	sbci	r23, 0xFF	; 255
    8804:	81 2f       	mov	r24, r17
    8806:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    880a:	89 81       	ldd	r24, Y+1	; 0x01
    880c:	88 23       	and	r24, r24
    880e:	21 f0       	breq	.+8      	; 0x8818 <remote_tds_find_free()+0x28>
    8810:	1f 5f       	subi	r17, 0xFF	; 255
    8812:	1a 30       	cpi	r17, 0x0A	; 10
    8814:	a1 f7       	brne	.-24     	; 0x87fe <remote_tds_find_free()+0xe>
    8816:	1f ef       	ldi	r17, 0xFF	; 255
    8818:	81 2f       	mov	r24, r17
    881a:	0f 90       	pop	r0
    881c:	df 91       	pop	r29
    881e:	cf 91       	pop	r28
    8820:	1f 91       	pop	r17
    8822:	08 95       	ret

00008824 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
    8824:	1f 93       	push	r17
    8826:	cf 93       	push	r28
    8828:	df 93       	push	r29
    882a:	00 d0       	rcall	.+0      	; 0x882c <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    882c:	1f 92       	push	r1
    882e:	1f 92       	push	r1
    8830:	cd b7       	in	r28, 0x3d	; 61
    8832:	de b7       	in	r29, 0x3e	; 62
    8834:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <remote_tds_find_free()>
    8838:	18 2f       	mov	r17, r24
    883a:	8f 3f       	cpi	r24, 0xFF	; 255
    883c:	a1 f0       	breq	.+40     	; 0x8866 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x42>
    883e:	6d eb       	ldi	r22, 0xBD	; 189
    8840:	77 e5       	ldi	r23, 0x57	; 87
    8842:	ce 01       	movw	r24, r28
    8844:	01 96       	adiw	r24, 0x01	; 1
    8846:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    884a:	70 e0       	ldi	r23, 0x00	; 0
    884c:	60 e0       	ldi	r22, 0x00	; 0
    884e:	87 e6       	ldi	r24, 0x67	; 103
    8850:	90 e0       	ldi	r25, 0x00	; 0
    8852:	0e 94 30 3b 	call	0x7660	; 0x7660 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.53]>
    8856:	20 e7       	ldi	r18, 0x70	; 112
    8858:	34 e4       	ldi	r19, 0x44	; 68
    885a:	41 2f       	mov	r20, r17
    885c:	62 e1       	ldi	r22, 0x12	; 18
    885e:	ce 01       	movw	r24, r28
    8860:	01 96       	adiw	r24, 0x01	; 1
    8862:	0e 94 2d 3c 	call	0x785a	; 0x785a <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char))>
    8866:	0f 90       	pop	r0
    8868:	0f 90       	pop	r0
    886a:	0f 90       	pop	r0
    886c:	0f 90       	pop	r0
    886e:	0f 90       	pop	r0
    8870:	df 91       	pop	r29
    8872:	cf 91       	pop	r28
    8874:	1f 91       	pop	r17
    8876:	08 95       	ret

00008878 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
    8878:	ef 92       	push	r14
    887a:	ff 92       	push	r15
    887c:	0f 93       	push	r16
    887e:	1f 93       	push	r17
    8880:	cf 93       	push	r28
    8882:	df 93       	push	r29
    8884:	cd b7       	in	r28, 0x3d	; 61
    8886:	de b7       	in	r29, 0x3e	; 62
    8888:	63 97       	sbiw	r28, 0x13	; 19
    888a:	0f b6       	in	r0, 0x3f	; 63
    888c:	f8 94       	cli
    888e:	de bf       	out	0x3e, r29	; 62
    8890:	0f be       	out	0x3f, r0	; 63
    8892:	cd bf       	out	0x3d, r28	; 61
    8894:	7c 01       	movw	r14, r24
    8896:	10 e0       	ldi	r17, 0x00	; 0
    8898:	0f ef       	ldi	r16, 0xFF	; 255
    889a:	ae 01       	movw	r20, r28
    889c:	4f 5f       	subi	r20, 0xFF	; 255
    889e:	5f 4f       	sbci	r21, 0xFF	; 255
    88a0:	be 01       	movw	r22, r28
    88a2:	6d 5e       	subi	r22, 0xED	; 237
    88a4:	7f 4f       	sbci	r23, 0xFF	; 255
    88a6:	81 2f       	mov	r24, r17
    88a8:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    88ac:	be 01       	movw	r22, r28
    88ae:	6f 5f       	subi	r22, 0xFF	; 255
    88b0:	7f 4f       	sbci	r23, 0xFF	; 255
    88b2:	c7 01       	movw	r24, r14
    88b4:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    88b8:	89 2b       	or	r24, r25
    88ba:	09 f4       	brne	.+2      	; 0x88be <remote_tds_name_exist(char*)+0x46>
    88bc:	01 2f       	mov	r16, r17
    88be:	1f 5f       	subi	r17, 0xFF	; 255
    88c0:	1a 30       	cpi	r17, 0x0A	; 10
    88c2:	59 f7       	brne	.-42     	; 0x889a <remote_tds_name_exist(char*)+0x22>
    88c4:	80 2f       	mov	r24, r16
    88c6:	63 96       	adiw	r28, 0x13	; 19
    88c8:	0f b6       	in	r0, 0x3f	; 63
    88ca:	f8 94       	cli
    88cc:	de bf       	out	0x3e, r29	; 62
    88ce:	0f be       	out	0x3f, r0	; 63
    88d0:	cd bf       	out	0x3d, r28	; 61
    88d2:	df 91       	pop	r29
    88d4:	cf 91       	pop	r28
    88d6:	1f 91       	pop	r17
    88d8:	0f 91       	pop	r16
    88da:	ff 90       	pop	r15
    88dc:	ef 90       	pop	r14
    88de:	08 95       	ret

000088e0 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
    88e0:	1f 93       	push	r17
    88e2:	cf 93       	push	r28
    88e4:	df 93       	push	r29
    88e6:	cd b7       	in	r28, 0x3d	; 61
    88e8:	de b7       	in	r29, 0x3e	; 62
    88ea:	62 97       	sbiw	r28, 0x12	; 18
    88ec:	0f b6       	in	r0, 0x3f	; 63
    88ee:	f8 94       	cli
    88f0:	de bf       	out	0x3e, r29	; 62
    88f2:	0f be       	out	0x3f, r0	; 63
    88f4:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    88f6:	10 91 7f 09 	lds	r17, 0x097F	; 0x80097f <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
    88fa:	ce 01       	movw	r24, r28
    88fc:	01 96       	adiw	r24, 0x01	; 1
    88fe:	0e 94 97 3c 	call	0x792e	; 0x792e <display_element_get_string(char*)>
    8902:	89 81       	ldd	r24, Y+1	; 0x01
    8904:	88 23       	and	r24, r24
    8906:	81 f0       	breq	.+32     	; 0x8928 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8908:	ce 01       	movw	r24, r28
    890a:	01 96       	adiw	r24, 0x01	; 1
    890c:	0e 94 3c 44 	call	0x8878	; 0x8878 <remote_tds_name_exist(char*)>
    8910:	8f 3f       	cpi	r24, 0xFF	; 255
    8912:	51 f4       	brne	.+20     	; 0x8928 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
    8914:	ae 01       	movw	r20, r28
    8916:	4f 5f       	subi	r20, 0xFF	; 255
    8918:	5f 4f       	sbci	r21, 0xFF	; 255
    891a:	61 e0       	ldi	r22, 0x01	; 1
    891c:	81 2f       	mov	r24, r17
    891e:	0e 94 49 43 	call	0x8692	; 0x8692 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
    8922:	81 2f       	mov	r24, r17
    8924:	0e 94 7b 43 	call	0x86f6	; 0x86f6 <remote_tds_subscibe_topic(unsigned char)>
    8928:	62 96       	adiw	r28, 0x12	; 18
    892a:	0f b6       	in	r0, 0x3f	; 63
    892c:	f8 94       	cli
    892e:	de bf       	out	0x3e, r29	; 62
    8930:	0f be       	out	0x3f, r0	; 63
    8932:	cd bf       	out	0x3d, r28	; 61
    8934:	df 91       	pop	r29
    8936:	cf 91       	pop	r28
    8938:	1f 91       	pop	r17
    893a:	08 95       	ret

0000893c <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
    893c:	1f 93       	push	r17
    893e:	cf 93       	push	r28
    8940:	df 93       	push	r29
    8942:	cd b7       	in	r28, 0x3d	; 61
    8944:	de b7       	in	r29, 0x3e	; 62
    8946:	62 97       	sbiw	r28, 0x12	; 18
    8948:	0f b6       	in	r0, 0x3f	; 63
    894a:	f8 94       	cli
    894c:	de bf       	out	0x3e, r29	; 62
    894e:	0f be       	out	0x3f, r0	; 63
    8950:	cd bf       	out	0x3d, r28	; 61
_Z31display_element_get_string_argsv():
    8952:	10 91 7f 09 	lds	r17, 0x097F	; 0x80097f <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
    8956:	ce 01       	movw	r24, r28
    8958:	01 96       	adiw	r24, 0x01	; 1
    895a:	0e 94 97 3c 	call	0x792e	; 0x792e <display_element_get_string(char*)>
    895e:	89 81       	ldd	r24, Y+1	; 0x01
    8960:	88 23       	and	r24, r24
    8962:	61 f0       	breq	.+24     	; 0x897c <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8964:	ce 01       	movw	r24, r28
    8966:	01 96       	adiw	r24, 0x01	; 1
    8968:	0e 94 3c 44 	call	0x8878	; 0x8878 <remote_tds_name_exist(char*)>
    896c:	8f 3f       	cpi	r24, 0xFF	; 255
    896e:	31 f4       	brne	.+12     	; 0x897c <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x40>
    8970:	be 01       	movw	r22, r28
    8972:	6f 5f       	subi	r22, 0xFF	; 255
    8974:	7f 4f       	sbci	r23, 0xFF	; 255
    8976:	81 2f       	mov	r24, r17
    8978:	0e 94 3d 42 	call	0x847a	; 0x847a <remote_tds_set_name(unsigned char, char*)>
    897c:	62 96       	adiw	r28, 0x12	; 18
    897e:	0f b6       	in	r0, 0x3f	; 63
    8980:	f8 94       	cli
    8982:	de bf       	out	0x3e, r29	; 62
    8984:	0f be       	out	0x3f, r0	; 63
    8986:	cd bf       	out	0x3d, r28	; 61
    8988:	df 91       	pop	r29
    898a:	cf 91       	pop	r28
    898c:	1f 91       	pop	r17
    898e:	08 95       	ret

00008990 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
    8990:	1f 93       	push	r17
    8992:	cf 93       	push	r28
    8994:	df 93       	push	r29
    8996:	8a 30       	cpi	r24, 0x0A	; 10
    8998:	60 f5       	brcc	.+88     	; 0x89f2 <remote_tds_set_data(unsigned char, int)+0x62>
    899a:	17 2f       	mov	r17, r23
    899c:	26 2f       	mov	r18, r22
    899e:	93 e0       	ldi	r25, 0x03	; 3
    89a0:	89 9f       	mul	r24, r25
    89a2:	e0 01       	movw	r28, r0
    89a4:	11 24       	eor	r1, r1
    89a6:	ae 01       	movw	r20, r28
    89a8:	4c 59       	subi	r20, 0x9C	; 156
    89aa:	5f 4f       	sbci	r21, 0xFF	; 255
    89ac:	05 2e       	mov	r0, r21
    89ae:	00 0c       	add	r0, r0
    89b0:	66 0b       	sbc	r22, r22
    89b2:	77 0b       	sbc	r23, r23
    89b4:	87 e6       	ldi	r24, 0x67	; 103
    89b6:	9a e0       	ldi	r25, 0x0A	; 10
    89b8:	0e 94 ad a8 	call	0x1515a	; 0x1515a <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    89bc:	ae 01       	movw	r20, r28
    89be:	4b 59       	subi	r20, 0x9B	; 155
    89c0:	5f 4f       	sbci	r21, 0xFF	; 255
    89c2:	05 2e       	mov	r0, r21
    89c4:	00 0c       	add	r0, r0
    89c6:	66 0b       	sbc	r22, r22
    89c8:	77 0b       	sbc	r23, r23
    89ca:	21 2f       	mov	r18, r17
    89cc:	87 e6       	ldi	r24, 0x67	; 103
    89ce:	9a e0       	ldi	r25, 0x0A	; 10
    89d0:	0e 94 ad a8 	call	0x1515a	; 0x1515a <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    89d4:	ae 01       	movw	r20, r28
    89d6:	4a 59       	subi	r20, 0x9A	; 154
    89d8:	5f 4f       	sbci	r21, 0xFF	; 255
    89da:	05 2e       	mov	r0, r21
    89dc:	00 0c       	add	r0, r0
    89de:	66 0b       	sbc	r22, r22
    89e0:	77 0b       	sbc	r23, r23
    89e2:	20 e0       	ldi	r18, 0x00	; 0
    89e4:	87 e6       	ldi	r24, 0x67	; 103
    89e6:	9a e0       	ldi	r25, 0x0A	; 10
    89e8:	df 91       	pop	r29
    89ea:	cf 91       	pop	r28
    89ec:	1f 91       	pop	r17
    89ee:	0c 94 ad a8 	jmp	0x1515a	; 0x1515a <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    89f2:	df 91       	pop	r29
    89f4:	cf 91       	pop	r28
    89f6:	1f 91       	pop	r17
    89f8:	08 95       	ret

000089fa <remote_tds_get_data(unsigned char)>:
_Z19remote_tds_get_datah():
    89fa:	0f 93       	push	r16
    89fc:	1f 93       	push	r17
    89fe:	cf 93       	push	r28
    8a00:	df 93       	push	r29
    8a02:	8a 30       	cpi	r24, 0x0A	; 10
    8a04:	30 f5       	brcc	.+76     	; 0x8a52 <remote_tds_get_data(unsigned char)+0x58>
    8a06:	93 e0       	ldi	r25, 0x03	; 3
    8a08:	89 9f       	mul	r24, r25
    8a0a:	80 01       	movw	r16, r0
    8a0c:	11 24       	eor	r1, r1
    8a0e:	a8 01       	movw	r20, r16
    8a10:	4b 59       	subi	r20, 0x9B	; 155
    8a12:	5f 4f       	sbci	r21, 0xFF	; 255
    8a14:	05 2e       	mov	r0, r21
    8a16:	00 0c       	add	r0, r0
    8a18:	66 0b       	sbc	r22, r22
    8a1a:	77 0b       	sbc	r23, r23
    8a1c:	87 e6       	ldi	r24, 0x67	; 103
    8a1e:	9a e0       	ldi	r25, 0x0A	; 10
    8a20:	0e 94 88 a8 	call	0x15110	; 0x15110 <SRAM_23LC::readByte(unsigned long)>
    8a24:	c8 2f       	mov	r28, r24
    8a26:	d0 e0       	ldi	r29, 0x00	; 0
    8a28:	dc 2f       	mov	r29, r28
    8a2a:	cc 27       	eor	r28, r28
    8a2c:	a8 01       	movw	r20, r16
    8a2e:	4c 59       	subi	r20, 0x9C	; 156
    8a30:	5f 4f       	sbci	r21, 0xFF	; 255
    8a32:	05 2e       	mov	r0, r21
    8a34:	00 0c       	add	r0, r0
    8a36:	66 0b       	sbc	r22, r22
    8a38:	77 0b       	sbc	r23, r23
    8a3a:	87 e6       	ldi	r24, 0x67	; 103
    8a3c:	9a e0       	ldi	r25, 0x0A	; 10
    8a3e:	0e 94 88 a8 	call	0x15110	; 0x15110 <SRAM_23LC::readByte(unsigned long)>
    8a42:	8c 0f       	add	r24, r28
    8a44:	9d 2f       	mov	r25, r29
    8a46:	91 1d       	adc	r25, r1
    8a48:	df 91       	pop	r29
    8a4a:	cf 91       	pop	r28
    8a4c:	1f 91       	pop	r17
    8a4e:	0f 91       	pop	r16
    8a50:	08 95       	ret
    8a52:	90 e0       	ldi	r25, 0x00	; 0
    8a54:	80 e0       	ldi	r24, 0x00	; 0
    8a56:	f8 cf       	rjmp	.-16     	; 0x8a48 <remote_tds_get_data(unsigned char)+0x4e>

00008a58 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
    8a58:	8a 30       	cpi	r24, 0x0A	; 10
    8a5a:	70 f4       	brcc	.+28     	; 0x8a78 <remote_tds_get_last_update(unsigned char)+0x20>
    8a5c:	93 e0       	ldi	r25, 0x03	; 3
    8a5e:	89 9f       	mul	r24, r25
    8a60:	a0 01       	movw	r20, r0
    8a62:	11 24       	eor	r1, r1
    8a64:	4a 59       	subi	r20, 0x9A	; 154
    8a66:	5f 4f       	sbci	r21, 0xFF	; 255
    8a68:	05 2e       	mov	r0, r21
    8a6a:	00 0c       	add	r0, r0
    8a6c:	66 0b       	sbc	r22, r22
    8a6e:	77 0b       	sbc	r23, r23
    8a70:	87 e6       	ldi	r24, 0x67	; 103
    8a72:	9a e0       	ldi	r25, 0x0A	; 10
    8a74:	0c 94 88 a8 	jmp	0x15110	; 0x15110 <SRAM_23LC::readByte(unsigned long)>
    8a78:	8f ef       	ldi	r24, 0xFF	; 255
    8a7a:	08 95       	ret

00008a7c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
    8a7c:	3f 92       	push	r3
    8a7e:	4f 92       	push	r4
    8a80:	5f 92       	push	r5
    8a82:	6f 92       	push	r6
    8a84:	7f 92       	push	r7
    8a86:	8f 92       	push	r8
    8a88:	9f 92       	push	r9
    8a8a:	af 92       	push	r10
    8a8c:	bf 92       	push	r11
    8a8e:	cf 92       	push	r12
    8a90:	df 92       	push	r13
    8a92:	ef 92       	push	r14
    8a94:	ff 92       	push	r15
    8a96:	0f 93       	push	r16
    8a98:	1f 93       	push	r17
    8a9a:	cf 93       	push	r28
    8a9c:	df 93       	push	r29
    8a9e:	cd b7       	in	r28, 0x3d	; 61
    8aa0:	de b7       	in	r29, 0x3e	; 62
    8aa2:	cd 54       	subi	r28, 0x4D	; 77
    8aa4:	d1 09       	sbc	r29, r1
    8aa6:	0f b6       	in	r0, 0x3f	; 63
    8aa8:	f8 94       	cli
    8aaa:	de bf       	out	0x3e, r29	; 62
    8aac:	0f be       	out	0x3f, r0	; 63
    8aae:	cd bf       	out	0x3d, r28	; 61
    8ab0:	3c 01       	movw	r6, r24
    8ab2:	4b 01       	movw	r8, r22
    8ab4:	5a 01       	movw	r10, r20
    8ab6:	89 01       	movw	r16, r18
    8ab8:	de 2c       	mov	r13, r14
    8aba:	70 e0       	ldi	r23, 0x00	; 0
    8abc:	60 e0       	ldi	r22, 0x00	; 0
    8abe:	81 ea       	ldi	r24, 0xA1	; 161
    8ac0:	9b e0       	ldi	r25, 0x0B	; 11
    8ac2:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    8ac6:	08 0d       	add	r16, r8
    8ac8:	19 1d       	adc	r17, r9
    8aca:	93 01       	movw	r18, r6
    8acc:	2a 0d       	add	r18, r10
    8ace:	3b 1d       	adc	r19, r11
    8ad0:	a4 01       	movw	r20, r8
    8ad2:	b3 01       	movw	r22, r6
    8ad4:	81 ea       	ldi	r24, 0xA1	; 161
    8ad6:	9b e0       	ldi	r25, 0x0B	; 11
    8ad8:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    8adc:	ae 01       	movw	r20, r28
    8ade:	45 5c       	subi	r20, 0xC5	; 197
    8ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    8ae2:	be 01       	movw	r22, r28
    8ae4:	63 5b       	subi	r22, 0xB3	; 179
    8ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    8ae8:	8e 2d       	mov	r24, r14
    8aea:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    8aee:	2e 96       	adiw	r28, 0x0e	; 14
    8af0:	3f ac       	ldd	r3, Y+63	; 0x3f
    8af2:	2e 97       	sbiw	r28, 0x0e	; 14
    8af4:	81 e0       	ldi	r24, 0x01	; 1
    8af6:	38 12       	cpse	r3, r24
    8af8:	a9 c0       	rjmp	.+338    	; 0x8c4c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d0>
    8afa:	64 e2       	ldi	r22, 0x24	; 36
    8afc:	77 e5       	ldi	r23, 0x57	; 87
    8afe:	ce 01       	movw	r24, r28
    8b00:	01 96       	adiw	r24, 0x01	; 1
    8b02:	5c 01       	movw	r10, r24
    8b04:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8b08:	23 01       	movw	r4, r6
    8b0a:	95 e0       	ldi	r25, 0x05	; 5
    8b0c:	49 0e       	add	r4, r25
    8b0e:	51 1c       	adc	r5, r1
    8b10:	c1 2c       	mov	r12, r1
    8b12:	ee 24       	eor	r14, r14
    8b14:	ea 94       	dec	r14
    8b16:	fe 2c       	mov	r15, r14
    8b18:	10 e0       	ldi	r17, 0x00	; 0
    8b1a:	00 e0       	ldi	r16, 0x00	; 0
    8b1c:	22 e0       	ldi	r18, 0x02	; 2
    8b1e:	a4 01       	movw	r20, r8
    8b20:	46 5f       	subi	r20, 0xF6	; 246
    8b22:	5f 4f       	sbci	r21, 0xFF	; 255
    8b24:	b2 01       	movw	r22, r4
    8b26:	c5 01       	movw	r24, r10
    8b28:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8b2c:	be 01       	movw	r22, r28
    8b2e:	65 5c       	subi	r22, 0xC5	; 197
    8b30:	7f 4f       	sbci	r23, 0xFF	; 255
    8b32:	c5 01       	movw	r24, r10
    8b34:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    8b38:	b3 01       	movw	r22, r6
    8b3a:	6c 5e       	subi	r22, 0xEC	; 236
    8b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    8b3e:	22 e0       	ldi	r18, 0x02	; 2
    8b40:	a4 01       	movw	r20, r8
    8b42:	42 5e       	subi	r20, 0xE2	; 226
    8b44:	5f 4f       	sbci	r21, 0xFF	; 255
    8b46:	c5 01       	movw	r24, r10
    8b48:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8b4c:	8d 2d       	mov	r24, r13
    8b4e:	0e 94 fd 44 	call	0x89fa	; 0x89fa <remote_tds_get_data(unsigned char)>
    8b52:	bc 01       	movw	r22, r24
    8b54:	99 0f       	add	r25, r25
    8b56:	88 0b       	sbc	r24, r24
    8b58:	99 0b       	sbc	r25, r25
    8b5a:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    8b5e:	20 e0       	ldi	r18, 0x00	; 0
    8b60:	30 e0       	ldi	r19, 0x00	; 0
    8b62:	4a e7       	ldi	r20, 0x7A	; 122
    8b64:	54 e4       	ldi	r21, 0x44	; 68
    8b66:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    8b6a:	85 01       	movw	r16, r10
    8b6c:	22 e0       	ldi	r18, 0x02	; 2
    8b6e:	44 e0       	ldi	r20, 0x04	; 4
    8b70:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    8b74:	6e e7       	ldi	r22, 0x7E	; 126
    8b76:	75 e0       	ldi	r23, 0x05	; 5
    8b78:	c5 01       	movw	r24, r10
    8b7a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    8b7e:	3e 01       	movw	r6, r28
    8b80:	81 e2       	ldi	r24, 0x21	; 33
    8b82:	68 0e       	add	r6, r24
    8b84:	71 1c       	adc	r7, r1
    8b86:	67 ee       	ldi	r22, 0xE7	; 231
    8b88:	79 e5       	ldi	r23, 0x59	; 89
    8b8a:	c3 01       	movw	r24, r6
    8b8c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8b90:	b5 01       	movw	r22, r10
    8b92:	c3 01       	movw	r24, r6
    8b94:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    8b98:	10 e0       	ldi	r17, 0x00	; 0
    8b9a:	00 e0       	ldi	r16, 0x00	; 0
    8b9c:	22 e0       	ldi	r18, 0x02	; 2
    8b9e:	a4 01       	movw	r20, r8
    8ba0:	44 5c       	subi	r20, 0xC4	; 196
    8ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ba4:	b2 01       	movw	r22, r4
    8ba6:	c3 01       	movw	r24, r6
    8ba8:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8bac:	8d 2d       	mov	r24, r13
    8bae:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <remote_tds_get_last_update(unsigned char)>
    8bb2:	d8 2e       	mov	r13, r24
    8bb4:	67 e0       	ldi	r22, 0x07	; 7
    8bb6:	77 e5       	ldi	r23, 0x57	; 87
    8bb8:	c3 01       	movw	r24, r6
    8bba:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8bbe:	1f 92       	push	r1
    8bc0:	df 92       	push	r13
    8bc2:	7f 92       	push	r7
    8bc4:	6f 92       	push	r6
    8bc6:	83 ef       	ldi	r24, 0xF3	; 243
    8bc8:	92 e0       	ldi	r25, 0x02	; 2
    8bca:	9f 93       	push	r25
    8bcc:	8f 93       	push	r24
    8bce:	bf 92       	push	r11
    8bd0:	af 92       	push	r10
    8bd2:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    8bd6:	21 e0       	ldi	r18, 0x01	; 1
    8bd8:	a4 01       	movw	r20, r8
    8bda:	40 5b       	subi	r20, 0xB0	; 176
    8bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    8bde:	b2 01       	movw	r22, r4
    8be0:	c5 01       	movw	r24, r10
    8be2:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8be6:	0f b6       	in	r0, 0x3f	; 63
    8be8:	f8 94       	cli
    8bea:	de bf       	out	0x3e, r29	; 62
    8bec:	0f be       	out	0x3f, r0	; 63
    8bee:	cd bf       	out	0x3d, r28	; 61
    8bf0:	99 ef       	ldi	r25, 0xF9	; 249
    8bf2:	9d 15       	cp	r25, r13
    8bf4:	08 f4       	brcc	.+2      	; 0x8bf8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x17c>
    8bf6:	43 c0       	rjmp	.+134    	; 0x8c7e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x202>
    8bf8:	2e 96       	adiw	r28, 0x0e	; 14
    8bfa:	3f ae       	std	Y+63, r3	; 0x3f
    8bfc:	2e 97       	sbiw	r28, 0x0e	; 14
    8bfe:	6d e1       	ldi	r22, 0x1D	; 29
    8c00:	77 e5       	ldi	r23, 0x57	; 87
    8c02:	c3 01       	movw	r24, r6
    8c04:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8c08:	2e 96       	adiw	r28, 0x0e	; 14
    8c0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c0c:	2e 97       	sbiw	r28, 0x0e	; 14
    8c0e:	1f 92       	push	r1
    8c10:	8f 93       	push	r24
    8c12:	7f 92       	push	r7
    8c14:	6f 92       	push	r6
    8c16:	83 ef       	ldi	r24, 0xF3	; 243
    8c18:	92 e0       	ldi	r25, 0x02	; 2
    8c1a:	9f 93       	push	r25
    8c1c:	8f 93       	push	r24
    8c1e:	bf 92       	push	r11
    8c20:	af 92       	push	r10
    8c22:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    8c26:	a4 01       	movw	r20, r8
    8c28:	4c 59       	subi	r20, 0x9C	; 156
    8c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    8c2c:	c1 2c       	mov	r12, r1
    8c2e:	ee 24       	eor	r14, r14
    8c30:	ea 94       	dec	r14
    8c32:	fe 2c       	mov	r15, r14
    8c34:	10 e0       	ldi	r17, 0x00	; 0
    8c36:	00 e0       	ldi	r16, 0x00	; 0
    8c38:	22 e0       	ldi	r18, 0x02	; 2
    8c3a:	b2 01       	movw	r22, r4
    8c3c:	c5 01       	movw	r24, r10
    8c3e:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    8c42:	0f b6       	in	r0, 0x3f	; 63
    8c44:	f8 94       	cli
    8c46:	de bf       	out	0x3e, r29	; 62
    8c48:	0f be       	out	0x3f, r0	; 63
    8c4a:	cd bf       	out	0x3d, r28	; 61
    8c4c:	c3 5b       	subi	r28, 0xB3	; 179
    8c4e:	df 4f       	sbci	r29, 0xFF	; 255
    8c50:	0f b6       	in	r0, 0x3f	; 63
    8c52:	f8 94       	cli
    8c54:	de bf       	out	0x3e, r29	; 62
    8c56:	0f be       	out	0x3f, r0	; 63
    8c58:	cd bf       	out	0x3d, r28	; 61
    8c5a:	df 91       	pop	r29
    8c5c:	cf 91       	pop	r28
    8c5e:	1f 91       	pop	r17
    8c60:	0f 91       	pop	r16
    8c62:	ff 90       	pop	r15
    8c64:	ef 90       	pop	r14
    8c66:	df 90       	pop	r13
    8c68:	cf 90       	pop	r12
    8c6a:	bf 90       	pop	r11
    8c6c:	af 90       	pop	r10
    8c6e:	9f 90       	pop	r9
    8c70:	8f 90       	pop	r8
    8c72:	7f 90       	pop	r7
    8c74:	6f 90       	pop	r6
    8c76:	5f 90       	pop	r5
    8c78:	4f 90       	pop	r4
    8c7a:	3f 90       	pop	r3
    8c7c:	08 95       	ret
    8c7e:	2e 96       	adiw	r28, 0x0e	; 14
    8c80:	1f ae       	std	Y+63, r1	; 0x3f
    8c82:	2e 97       	sbiw	r28, 0x0e	; 14
    8c84:	bc cf       	rjmp	.-136    	; 0x8bfe <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x182>

00008c86 <remote_tds_inc_last_update(unsigned char)>:
_Z26remote_tds_inc_last_updateh():
    8c86:	cf 92       	push	r12
    8c88:	df 92       	push	r13
    8c8a:	ef 92       	push	r14
    8c8c:	ff 92       	push	r15
    8c8e:	8a 30       	cpi	r24, 0x0A	; 10
    8c90:	d8 f4       	brcc	.+54     	; 0x8cc8 <remote_tds_inc_last_update(unsigned char)+0x42>
    8c92:	93 e0       	ldi	r25, 0x03	; 3
    8c94:	89 9f       	mul	r24, r25
    8c96:	60 01       	movw	r12, r0
    8c98:	11 24       	eor	r1, r1
    8c9a:	86 e6       	ldi	r24, 0x66	; 102
    8c9c:	c8 0e       	add	r12, r24
    8c9e:	d1 1c       	adc	r13, r1
    8ca0:	0d 2c       	mov	r0, r13
    8ca2:	00 0c       	add	r0, r0
    8ca4:	ee 08       	sbc	r14, r14
    8ca6:	ff 08       	sbc	r15, r15
    8ca8:	b7 01       	movw	r22, r14
    8caa:	a6 01       	movw	r20, r12
    8cac:	87 e6       	ldi	r24, 0x67	; 103
    8cae:	9a e0       	ldi	r25, 0x0A	; 10
    8cb0:	0e 94 88 a8 	call	0x15110	; 0x15110 <SRAM_23LC::readByte(unsigned long)>
    8cb4:	8a 3f       	cpi	r24, 0xFA	; 250
    8cb6:	08 f4       	brcc	.+2      	; 0x8cba <remote_tds_inc_last_update(unsigned char)+0x34>
    8cb8:	8f 5f       	subi	r24, 0xFF	; 255
    8cba:	28 2f       	mov	r18, r24
    8cbc:	b7 01       	movw	r22, r14
    8cbe:	a6 01       	movw	r20, r12
    8cc0:	87 e6       	ldi	r24, 0x67	; 103
    8cc2:	9a e0       	ldi	r25, 0x0A	; 10
    8cc4:	0e 94 ad a8 	call	0x1515a	; 0x1515a <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    8cc8:	ff 90       	pop	r15
    8cca:	ef 90       	pop	r14
    8ccc:	df 90       	pop	r13
    8cce:	cf 90       	pop	r12
    8cd0:	08 95       	ret

00008cd2 <remote_tds_update_last_update()>:
_Z29remote_tds_update_last_updatev():
    8cd2:	1f 93       	push	r17
    8cd4:	cf 93       	push	r28
    8cd6:	df 93       	push	r29
    8cd8:	1f 92       	push	r1
    8cda:	cd b7       	in	r28, 0x3d	; 61
    8cdc:	de b7       	in	r29, 0x3e	; 62
    8cde:	10 e0       	ldi	r17, 0x00	; 0
    8ce0:	be 01       	movw	r22, r28
    8ce2:	6f 5f       	subi	r22, 0xFF	; 255
    8ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ce6:	81 2f       	mov	r24, r17
    8ce8:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    8cec:	89 81       	ldd	r24, Y+1	; 0x01
    8cee:	81 30       	cpi	r24, 0x01	; 1
    8cf0:	19 f4       	brne	.+6      	; 0x8cf8 <remote_tds_update_last_update()+0x26>
    8cf2:	81 2f       	mov	r24, r17
    8cf4:	0e 94 43 46 	call	0x8c86	; 0x8c86 <remote_tds_inc_last_update(unsigned char)>
    8cf8:	1f 5f       	subi	r17, 0xFF	; 255
    8cfa:	1a 30       	cpi	r17, 0x0A	; 10
    8cfc:	89 f7       	brne	.-30     	; 0x8ce0 <remote_tds_update_last_update()+0xe>
    8cfe:	0f 90       	pop	r0
    8d00:	df 91       	pop	r29
    8d02:	cf 91       	pop	r28
    8d04:	1f 91       	pop	r17
    8d06:	08 95       	ret

00008d08 <set_default_ring(unsigned char)>:
_Z16set_default_ringh():
    8d08:	68 2f       	mov	r22, r24
    8d0a:	8c e5       	ldi	r24, 0x5C	; 92
    8d0c:	90 e0       	ldi	r25, 0x00	; 0
    8d0e:	0c 94 b0 38 	jmp	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>

00008d12 <button_click_deactivate_term_ring(unsigned int, unsigned int, unsigned char)>:
_Z33button_click_deactivate_term_ringjjh():
    8d12:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    8d16:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
    8d1a:	8f ef       	ldi	r24, 0xFF	; 255
    8d1c:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <default_ring>
    8d20:	0e 94 84 46 	call	0x8d08	; 0x8d08 <set_default_ring(unsigned char)>
    8d24:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.50]>

00008d28 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
    8d28:	cf 93       	push	r28
    8d2a:	c8 2f       	mov	r28, r24
    8d2c:	61 e0       	ldi	r22, 0x01	; 1
    8d2e:	0e 94 30 8d 	call	0x11a60	; 0x11a60 <thermostat_ring_set_active(unsigned char, unsigned char)>
    8d32:	c0 93 2e 0a 	sts	0x0A2E, r28	; 0x800a2e <default_ring>
    8d36:	8c 2f       	mov	r24, r28
    8d38:	cf 91       	pop	r28
    8d3a:	0c 94 84 46 	jmp	0x8d08	; 0x8d08 <set_default_ring(unsigned char)>

00008d3e <get_default_ring()>:
_ZNK5EERefdeEv():
    8d3e:	8c e5       	ldi	r24, 0x5C	; 92
    8d40:	90 e0       	ldi	r25, 0x00	; 0
    8d42:	0c 94 68 df 	jmp	0x1bed0	; 0x1bed0 <eeprom_read_byte>

00008d46 <set_default_show_temp(unsigned char)>:
_Z21set_default_show_temph():
    8d46:	68 2f       	mov	r22, r24
    8d48:	8d e5       	ldi	r24, 0x5D	; 93
    8d4a:	90 e0       	ldi	r25, 0x00	; 0
    8d4c:	0c 94 b0 38 	jmp	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>

00008d50 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
    8d50:	84 2f       	mov	r24, r20
    8d52:	40 93 2d 0a 	sts	0x0A2D, r20	; 0x800a2d <default_show_temp>
    8d56:	0c 94 a3 46 	jmp	0x8d46	; 0x8d46 <set_default_show_temp(unsigned char)>

00008d5a <get_default_show_temp()>:
_ZNK5EERefdeEv():
    8d5a:	8d e5       	ldi	r24, 0x5D	; 93
    8d5c:	90 e0       	ldi	r25, 0x00	; 0
    8d5e:	0c 94 68 df 	jmp	0x1bed0	; 0x1bed0 <eeprom_read_byte>

00008d62 <tds_extended_memory_store()>:
_Z25tds_extended_memory_storev():
    8d62:	1f 93       	push	r17
    8d64:	cf 93       	push	r28
    8d66:	df 93       	push	r29
    8d68:	cd b7       	in	r28, 0x3d	; 61
    8d6a:	de b7       	in	r29, 0x3e	; 62
    8d6c:	66 97       	sbiw	r28, 0x16	; 22
    8d6e:	0f b6       	in	r0, 0x3f	; 63
    8d70:	f8 94       	cli
    8d72:	de bf       	out	0x3e, r29	; 62
    8d74:	0f be       	out	0x3f, r0	; 63
    8d76:	cd bf       	out	0x3d, r28	; 61
    8d78:	10 e0       	ldi	r17, 0x00	; 0
    8d7a:	be 01       	movw	r22, r28
    8d7c:	6f 5f       	subi	r22, 0xFF	; 255
    8d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    8d80:	81 2f       	mov	r24, r17
    8d82:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    8d86:	1f 5f       	subi	r17, 0xFF	; 255
    8d88:	16 30       	cpi	r17, 0x06	; 6
    8d8a:	b9 f7       	brne	.-18     	; 0x8d7a <tds_extended_memory_store()+0x18>
    8d8c:	66 96       	adiw	r28, 0x16	; 22
    8d8e:	0f b6       	in	r0, 0x3f	; 63
    8d90:	f8 94       	cli
    8d92:	de bf       	out	0x3e, r29	; 62
    8d94:	0f be       	out	0x3f, r0	; 63
    8d96:	cd bf       	out	0x3d, r28	; 61
    8d98:	df 91       	pop	r29
    8d9a:	cf 91       	pop	r28
    8d9c:	1f 91       	pop	r17
    8d9e:	08 95       	ret

00008da0 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
    8da0:	0f 93       	push	r16
    8da2:	1f 93       	push	r17
    8da4:	cf 93       	push	r28
    8da6:	df 93       	push	r29
    8da8:	cd b7       	in	r28, 0x3d	; 61
    8daa:	de b7       	in	r29, 0x3e	; 62
    8dac:	a4 97       	sbiw	r28, 0x24	; 36
    8dae:	0f b6       	in	r0, 0x3f	; 63
    8db0:	f8 94       	cli
    8db2:	de bf       	out	0x3e, r29	; 62
    8db4:	0f be       	out	0x3f, r0	; 63
    8db6:	cd bf       	out	0x3d, r28	; 61
    8db8:	8f e8       	ldi	r24, 0x8F	; 143
    8dba:	9d e0       	ldi	r25, 0x0D	; 13
    8dbc:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
    8dc0:	81 11       	cpse	r24, r1
    8dc2:	98 c0       	rjmp	.+304    	; 0x8ef4 <mqtt_reconnect()+0x154>
    8dc4:	ce 01       	movw	r24, r28
    8dc6:	4b 96       	adiw	r24, 0x1b	; 27
    8dc8:	0e 94 80 81 	call	0x10300	; 0x10300 <device_get_name(char*)>
    8dcc:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    8dd0:	00 91 54 0a 	lds	r16, 0x0A54	; 0x800a54 <lastmqttconnect>
    8dd4:	10 91 55 0a 	lds	r17, 0x0A55	; 0x800a55 <lastmqttconnect+0x1>
    8dd8:	20 91 56 0a 	lds	r18, 0x0A56	; 0x800a56 <lastmqttconnect+0x2>
    8ddc:	30 91 57 0a 	lds	r19, 0x0A57	; 0x800a57 <lastmqttconnect+0x3>
    8de0:	06 17       	cp	r16, r22
    8de2:	17 07       	cpc	r17, r23
    8de4:	28 07       	cpc	r18, r24
    8de6:	39 07       	cpc	r19, r25
    8de8:	0c f0       	brlt	.+2      	; 0x8dec <mqtt_reconnect()+0x4c>
    8dea:	84 c0       	rjmp	.+264    	; 0x8ef4 <mqtt_reconnect()+0x154>
    8dec:	68 57       	subi	r22, 0x78	; 120
    8dee:	7c 4e       	sbci	r23, 0xEC	; 236
    8df0:	8f 4f       	sbci	r24, 0xFF	; 255
    8df2:	9f 4f       	sbci	r25, 0xFF	; 255
    8df4:	60 93 54 0a 	sts	0x0A54, r22	; 0x800a54 <lastmqttconnect>
    8df8:	70 93 55 0a 	sts	0x0A55, r23	; 0x800a55 <lastmqttconnect+0x1>
    8dfc:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <lastmqttconnect+0x2>
    8e00:	90 93 57 0a 	sts	0x0A57, r25	; 0x800a57 <lastmqttconnect+0x3>
    8e04:	be 01       	movw	r22, r28
    8e06:	65 5e       	subi	r22, 0xE5	; 229
    8e08:	7f 4f       	sbci	r23, 0xFF	; 255
    8e0a:	8f e8       	ldi	r24, 0x8F	; 143
    8e0c:	9d e0       	ldi	r25, 0x0D	; 13
    8e0e:	0e 94 0c be 	call	0x17c18	; 0x17c18 <PubSubClient::connect(char const*)>
    8e12:	88 23       	and	r24, r24
    8e14:	09 f4       	brne	.+2      	; 0x8e18 <mqtt_reconnect()+0x78>
    8e16:	6e c0       	rjmp	.+220    	; 0x8ef4 <mqtt_reconnect()+0x154>
    8e18:	67 ed       	ldi	r22, 0xD7	; 215
    8e1a:	75 e5       	ldi	r23, 0x55	; 85
    8e1c:	ce 01       	movw	r24, r28
    8e1e:	01 96       	adiw	r24, 0x01	; 1
    8e20:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8e24:	be 01       	movw	r22, r28
    8e26:	65 5e       	subi	r22, 0xE5	; 229
    8e28:	7f 4f       	sbci	r23, 0xFF	; 255
    8e2a:	ce 01       	movw	r24, r28
    8e2c:	01 96       	adiw	r24, 0x01	; 1
    8e2e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    8e32:	6b e3       	ldi	r22, 0x3B	; 59
    8e34:	73 e0       	ldi	r23, 0x03	; 3
    8e36:	ce 01       	movw	r24, r28
    8e38:	01 96       	adiw	r24, 0x01	; 1
    8e3a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    8e3e:	be 01       	movw	r22, r28
    8e40:	6f 5f       	subi	r22, 0xFF	; 255
    8e42:	7f 4f       	sbci	r23, 0xFF	; 255
    8e44:	8f e8       	ldi	r24, 0x8F	; 143
    8e46:	9d e0       	ldi	r25, 0x0D	; 13
    8e48:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    8e4c:	67 ed       	ldi	r22, 0xD7	; 215
    8e4e:	75 e5       	ldi	r23, 0x55	; 85
    8e50:	ce 01       	movw	r24, r28
    8e52:	01 96       	adiw	r24, 0x01	; 1
    8e54:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8e58:	65 e3       	ldi	r22, 0x35	; 53
    8e5a:	73 e0       	ldi	r23, 0x03	; 3
    8e5c:	ce 01       	movw	r24, r28
    8e5e:	01 96       	adiw	r24, 0x01	; 1
    8e60:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    8e64:	be 01       	movw	r22, r28
    8e66:	6f 5f       	subi	r22, 0xFF	; 255
    8e68:	7f 4f       	sbci	r23, 0xFF	; 255
    8e6a:	8f e8       	ldi	r24, 0x8F	; 143
    8e6c:	9d e0       	ldi	r25, 0x0D	; 13
    8e6e:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    8e72:	10 e0       	ldi	r17, 0x00	; 0
    8e74:	81 2f       	mov	r24, r17
    8e76:	0e 94 7b 43 	call	0x86f6	; 0x86f6 <remote_tds_subscibe_topic(unsigned char)>
    8e7a:	1f 5f       	subi	r17, 0xFF	; 255
    8e7c:	1a 30       	cpi	r17, 0x0A	; 10
    8e7e:	d1 f7       	brne	.-12     	; 0x8e74 <mqtt_reconnect()+0xd4>
    8e80:	6e e9       	ldi	r22, 0x9E	; 158
    8e82:	75 e5       	ldi	r23, 0x55	; 85
    8e84:	ce 01       	movw	r24, r28
    8e86:	01 96       	adiw	r24, 0x01	; 1
    8e88:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8e8c:	6b e3       	ldi	r22, 0x3B	; 59
    8e8e:	73 e0       	ldi	r23, 0x03	; 3
    8e90:	ce 01       	movw	r24, r28
    8e92:	01 96       	adiw	r24, 0x01	; 1
    8e94:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    8e98:	be 01       	movw	r22, r28
    8e9a:	6f 5f       	subi	r22, 0xFF	; 255
    8e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e9e:	8f e8       	ldi	r24, 0x8F	; 143
    8ea0:	9d e0       	ldi	r25, 0x0D	; 13
    8ea2:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    8ea6:	66 e8       	ldi	r22, 0x86	; 134
    8ea8:	75 e5       	ldi	r23, 0x55	; 85
    8eaa:	ce 01       	movw	r24, r28
    8eac:	01 96       	adiw	r24, 0x01	; 1
    8eae:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8eb2:	be 01       	movw	r22, r28
    8eb4:	6f 5f       	subi	r22, 0xFF	; 255
    8eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    8eb8:	8f e8       	ldi	r24, 0x8F	; 143
    8eba:	9d e0       	ldi	r25, 0x0D	; 13
    8ebc:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    8ec0:	6f e6       	ldi	r22, 0x6F	; 111
    8ec2:	75 e5       	ldi	r23, 0x55	; 85
    8ec4:	ce 01       	movw	r24, r28
    8ec6:	01 96       	adiw	r24, 0x01	; 1
    8ec8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8ecc:	be 01       	movw	r22, r28
    8ece:	6f 5f       	subi	r22, 0xFF	; 255
    8ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed2:	8f e8       	ldi	r24, 0x8F	; 143
    8ed4:	9d e0       	ldi	r25, 0x0D	; 13
    8ed6:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    8eda:	6d ea       	ldi	r22, 0xAD	; 173
    8edc:	75 e5       	ldi	r23, 0x55	; 85
    8ede:	ce 01       	movw	r24, r28
    8ee0:	01 96       	adiw	r24, 0x01	; 1
    8ee2:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    8ee6:	be 01       	movw	r22, r28
    8ee8:	6f 5f       	subi	r22, 0xFF	; 255
    8eea:	7f 4f       	sbci	r23, 0xFF	; 255
    8eec:	8f e8       	ldi	r24, 0x8F	; 143
    8eee:	9d e0       	ldi	r25, 0x0D	; 13
    8ef0:	0e 94 72 c0 	call	0x180e4	; 0x180e4 <PubSubClient::subscribe(char const*)>
    8ef4:	8f e8       	ldi	r24, 0x8F	; 143
    8ef6:	9d e0       	ldi	r25, 0x0D	; 13
    8ef8:	0e 94 fe c0 	call	0x181fc	; 0x181fc <PubSubClient::state()>
    8efc:	a4 96       	adiw	r28, 0x24	; 36
    8efe:	0f b6       	in	r0, 0x3f	; 63
    8f00:	f8 94       	cli
    8f02:	de bf       	out	0x3e, r29	; 62
    8f04:	0f be       	out	0x3f, r0	; 63
    8f06:	cd bf       	out	0x3d, r28	; 61
    8f08:	df 91       	pop	r29
    8f0a:	cf 91       	pop	r28
    8f0c:	1f 91       	pop	r17
    8f0e:	0f 91       	pop	r16
    8f10:	08 95       	ret

00008f12 <send_mqtt_onewire()>:
_Z17send_mqtt_onewirev():
    8f12:	cf 92       	push	r12
    8f14:	df 92       	push	r13
    8f16:	ef 92       	push	r14
    8f18:	ff 92       	push	r15
    8f1a:	0f 93       	push	r16
    8f1c:	1f 93       	push	r17
    8f1e:	cf 93       	push	r28
    8f20:	df 93       	push	r29
    8f22:	cd b7       	in	r28, 0x3d	; 61
    8f24:	de b7       	in	r29, 0x3e	; 62
    8f26:	c0 54       	subi	r28, 0x40	; 64
    8f28:	d1 09       	sbc	r29, r1
    8f2a:	0f b6       	in	r0, 0x3f	; 63
    8f2c:	f8 94       	cli
    8f2e:	de bf       	out	0x3e, r29	; 62
    8f30:	0f be       	out	0x3f, r0	; 63
    8f32:	cd bf       	out	0x3d, r28	; 61
    8f34:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <Global_HWwirenum>
itoa():
    8f38:	4a e0       	ldi	r20, 0x0A	; 10
    8f3a:	be 01       	movw	r22, r28
    8f3c:	6f 5f       	subi	r22, 0xFF	; 255
    8f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f40:	90 e0       	ldi	r25, 0x00	; 0
    8f42:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    8f46:	ae 01       	movw	r20, r28
    8f48:	4f 5f       	subi	r20, 0xFF	; 255
    8f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    8f4c:	6e e3       	ldi	r22, 0x3E	; 62
    8f4e:	73 e0       	ldi	r23, 0x03	; 3
    8f50:	8f e8       	ldi	r24, 0x8F	; 143
    8f52:	9d e0       	ldi	r25, 0x0D	; 13
    8f54:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    8f58:	f1 2c       	mov	r15, r1
    8f5a:	8b e0       	ldi	r24, 0x0B	; 11
    8f5c:	e8 2e       	mov	r14, r24
    8f5e:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <Global_HWwirenum>
    8f62:	f8 16       	cp	r15, r24
    8f64:	e8 f5       	brcc	.+122    	; 0x8fe0 <send_mqtt_onewire()+0xce>
    8f66:	fe 9c       	mul	r15, r14
    8f68:	c0 01       	movw	r24, r0
    8f6a:	11 24       	eor	r1, r1
    8f6c:	9c 01       	movw	r18, r24
    8f6e:	29 52       	subi	r18, 0x29	; 41
    8f70:	3f 4e       	sbci	r19, 0xEF	; 239
    8f72:	69 01       	movw	r12, r18
    8f74:	00 e1       	ldi	r16, 0x10	; 16
    8f76:	28 e0       	ldi	r18, 0x08	; 8
    8f78:	a6 01       	movw	r20, r12
    8f7a:	6a e3       	ldi	r22, 0x3A	; 58
    8f7c:	ce 01       	movw	r24, r28
    8f7e:	01 96       	adiw	r24, 0x01	; 1
    8f80:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    8f84:	8e 01       	movw	r16, r28
    8f86:	0f 5f       	subi	r16, 0xFF	; 255
    8f88:	1f 4f       	sbci	r17, 0xFF	; 255
    8f8a:	2a e4       	ldi	r18, 0x4A	; 74
    8f8c:	33 e0       	ldi	r19, 0x03	; 3
    8f8e:	4f 2d       	mov	r20, r15
    8f90:	6e e4       	ldi	r22, 0x4E	; 78
    8f92:	73 e0       	ldi	r23, 0x03	; 3
    8f94:	8f e8       	ldi	r24, 0x8F	; 143
    8f96:	9d e0       	ldi	r25, 0x0D	; 13
    8f98:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8f9c:	f6 01       	movw	r30, r12
    8f9e:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
    8fa0:	4a e0       	ldi	r20, 0x0A	; 10
    8fa2:	b8 01       	movw	r22, r16
    8fa4:	90 e0       	ldi	r25, 0x00	; 0
    8fa6:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    8faa:	24 e5       	ldi	r18, 0x54	; 84
    8fac:	33 e0       	ldi	r19, 0x03	; 3
    8fae:	4f 2d       	mov	r20, r15
    8fb0:	6e e4       	ldi	r22, 0x4E	; 78
    8fb2:	73 e0       	ldi	r23, 0x03	; 3
    8fb4:	8f e8       	ldi	r24, 0x8F	; 143
    8fb6:	9d e0       	ldi	r25, 0x0D	; 13
    8fb8:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8fbc:	f6 01       	movw	r30, r12
    8fbe:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
    8fc0:	4a e0       	ldi	r20, 0x0A	; 10
    8fc2:	b8 01       	movw	r22, r16
    8fc4:	90 e0       	ldi	r25, 0x00	; 0
    8fc6:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_onewirev():
    8fca:	2d e5       	ldi	r18, 0x5D	; 93
    8fcc:	33 e0       	ldi	r19, 0x03	; 3
    8fce:	4f 2d       	mov	r20, r15
    8fd0:	6e e4       	ldi	r22, 0x4E	; 78
    8fd2:	73 e0       	ldi	r23, 0x03	; 3
    8fd4:	8f e8       	ldi	r24, 0x8F	; 143
    8fd6:	9d e0       	ldi	r25, 0x0D	; 13
    8fd8:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    8fdc:	f3 94       	inc	r15
    8fde:	bf cf       	rjmp	.-130    	; 0x8f5e <send_mqtt_onewire()+0x4c>
    8fe0:	c0 5c       	subi	r28, 0xC0	; 192
    8fe2:	df 4f       	sbci	r29, 0xFF	; 255
    8fe4:	0f b6       	in	r0, 0x3f	; 63
    8fe6:	f8 94       	cli
    8fe8:	de bf       	out	0x3e, r29	; 62
    8fea:	0f be       	out	0x3f, r0	; 63
    8fec:	cd bf       	out	0x3d, r28	; 61
    8fee:	df 91       	pop	r29
    8ff0:	cf 91       	pop	r28
    8ff2:	1f 91       	pop	r17
    8ff4:	0f 91       	pop	r16
    8ff6:	ff 90       	pop	r15
    8ff8:	ef 90       	pop	r14
    8ffa:	df 90       	pop	r13
    8ffc:	cf 90       	pop	r12
    8ffe:	08 95       	ret

00009000 <send_mqtt_tds()>:
_Z13send_mqtt_tdsv():
    9000:	2f 92       	push	r2
    9002:	3f 92       	push	r3
    9004:	4f 92       	push	r4
    9006:	5f 92       	push	r5
    9008:	6f 92       	push	r6
    900a:	7f 92       	push	r7
    900c:	8f 92       	push	r8
    900e:	9f 92       	push	r9
    9010:	af 92       	push	r10
    9012:	bf 92       	push	r11
    9014:	cf 92       	push	r12
    9016:	df 92       	push	r13
    9018:	ff 92       	push	r15
    901a:	0f 93       	push	r16
    901c:	1f 93       	push	r17
    901e:	cf 93       	push	r28
    9020:	df 93       	push	r29
    9022:	cd b7       	in	r28, 0x3d	; 61
    9024:	de b7       	in	r29, 0x3e	; 62
    9026:	c6 55       	subi	r28, 0x56	; 86
    9028:	d1 09       	sbc	r29, r1
    902a:	0f b6       	in	r0, 0x3f	; 63
    902c:	f8 94       	cli
    902e:	de bf       	out	0x3e, r29	; 62
    9030:	0f be       	out	0x3f, r0	; 63
    9032:	cd bf       	out	0x3d, r28	; 61
    9034:	3a e1       	ldi	r19, 0x1A	; 26
    9036:	c3 2e       	mov	r12, r19
    9038:	31 e1       	ldi	r19, 0x11	; 17
    903a:	d3 2e       	mov	r13, r19
    903c:	f1 2c       	mov	r15, r1
    903e:	4a e0       	ldi	r20, 0x0A	; 10
    9040:	a4 2e       	mov	r10, r20
    9042:	b1 2c       	mov	r11, r1
    9044:	54 e6       	ldi	r21, 0x64	; 100
    9046:	25 2e       	mov	r2, r21
    9048:	31 2c       	mov	r3, r1
    904a:	41 2c       	mov	r4, r1
    904c:	51 2c       	mov	r5, r1
    904e:	61 e4       	ldi	r22, 0x41	; 65
    9050:	86 2e       	mov	r8, r22
    9052:	91 2c       	mov	r9, r1
    9054:	8c 0e       	add	r8, r28
    9056:	9d 1e       	adc	r9, r29
    9058:	8c e0       	ldi	r24, 0x0C	; 12
    905a:	88 0e       	add	r8, r24
    905c:	91 1c       	adc	r9, r1
    905e:	71 e4       	ldi	r23, 0x41	; 65
    9060:	67 2e       	mov	r6, r23
    9062:	71 2c       	mov	r7, r1
    9064:	6c 0e       	add	r6, r28
    9066:	7d 1e       	adc	r7, r29
    9068:	ef ef       	ldi	r30, 0xFF	; 255
    906a:	6e 1a       	sub	r6, r30
    906c:	7e 0a       	sbc	r7, r30
    906e:	be 01       	movw	r22, r28
    9070:	6f 5b       	subi	r22, 0xBF	; 191
    9072:	7f 4f       	sbci	r23, 0xFF	; 255
    9074:	8f 2d       	mov	r24, r15
    9076:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    907a:	81 30       	cpi	r24, 0x01	; 1
    907c:	09 f0       	breq	.+2      	; 0x9080 <send_mqtt_tds()+0x80>
    907e:	ba c0       	rjmp	.+372    	; 0x91f4 <send_mqtt_tds()+0x1f4>
    9080:	22 96       	adiw	r28, 0x02	; 2
    9082:	8f ad       	ldd	r24, Y+63	; 0x3f
    9084:	22 97       	sbiw	r28, 0x02	; 2
    9086:	81 30       	cpi	r24, 0x01	; 1
    9088:	09 f0       	breq	.+2      	; 0x908c <send_mqtt_tds()+0x8c>
    908a:	b4 c0       	rjmp	.+360    	; 0x91f4 <send_mqtt_tds()+0x1f4>
    908c:	f6 01       	movw	r30, r12
    908e:	83 8d       	ldd	r24, Z+27	; 0x1b
    9090:	81 30       	cpi	r24, 0x01	; 1
    9092:	09 f0       	breq	.+2      	; 0x9096 <send_mqtt_tds()+0x96>
    9094:	af c0       	rjmp	.+350    	; 0x91f4 <send_mqtt_tds()+0x1f4>
    9096:	85 81       	ldd	r24, Z+5	; 0x05
    9098:	96 81       	ldd	r25, Z+6	; 0x06
    909a:	b5 01       	movw	r22, r10
    909c:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    90a0:	cb 01       	movw	r24, r22
itoa():
    90a2:	4a e0       	ldi	r20, 0x0A	; 10
    90a4:	be 01       	movw	r22, r28
    90a6:	6f 5f       	subi	r22, 0xFF	; 255
    90a8:	7f 4f       	sbci	r23, 0xFF	; 255
    90aa:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    90ae:	8e 01       	movw	r16, r28
    90b0:	0f 5f       	subi	r16, 0xFF	; 255
    90b2:	1f 4f       	sbci	r17, 0xFF	; 255
    90b4:	25 e6       	ldi	r18, 0x65	; 101
    90b6:	33 e0       	ldi	r19, 0x03	; 3
    90b8:	4f 2d       	mov	r20, r15
    90ba:	6f eb       	ldi	r22, 0xBF	; 191
    90bc:	73 e0       	ldi	r23, 0x03	; 3
    90be:	8f e8       	ldi	r24, 0x8F	; 143
    90c0:	9d e0       	ldi	r25, 0x0D	; 13
    90c2:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    90c6:	50 e0       	ldi	r21, 0x00	; 0
    90c8:	40 e0       	ldi	r20, 0x00	; 0
    90ca:	60 e0       	ldi	r22, 0x00	; 0
    90cc:	70 e0       	ldi	r23, 0x00	; 0
    90ce:	cb 01       	movw	r24, r22
    90d0:	fa 01       	movw	r30, r20
    90d2:	ee 0f       	add	r30, r30
    90d4:	ff 1f       	adc	r31, r31
    90d6:	ec 0d       	add	r30, r12
    90d8:	fd 1d       	adc	r31, r13
    90da:	07 81       	ldd	r16, Z+7	; 0x07
    90dc:	10 85       	ldd	r17, Z+8	; 0x08
    90de:	01 2e       	mov	r0, r17
    90e0:	00 0c       	add	r0, r0
    90e2:	22 0b       	sbc	r18, r18
    90e4:	33 0b       	sbc	r19, r19
    90e6:	60 0f       	add	r22, r16
    90e8:	71 1f       	adc	r23, r17
    90ea:	82 1f       	adc	r24, r18
    90ec:	93 1f       	adc	r25, r19
    90ee:	4f 5f       	subi	r20, 0xFF	; 255
    90f0:	5f 4f       	sbci	r21, 0xFF	; 255
    90f2:	4a 30       	cpi	r20, 0x0A	; 10
    90f4:	51 05       	cpc	r21, r1
    90f6:	61 f7       	brne	.-40     	; 0x90d0 <send_mqtt_tds()+0xd0>
    90f8:	a2 01       	movw	r20, r4
    90fa:	91 01       	movw	r18, r2
    90fc:	0e 94 b2 d3 	call	0x1a764	; 0x1a764 <__divmodsi4>
    9100:	c9 01       	movw	r24, r18
itoa():
    9102:	4a e0       	ldi	r20, 0x0A	; 10
    9104:	be 01       	movw	r22, r28
    9106:	6f 5f       	subi	r22, 0xFF	; 255
    9108:	7f 4f       	sbci	r23, 0xFF	; 255
    910a:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    910e:	8e 01       	movw	r16, r28
    9110:	0f 5f       	subi	r16, 0xFF	; 255
    9112:	1f 4f       	sbci	r17, 0xFF	; 255
    9114:	2a e6       	ldi	r18, 0x6A	; 106
    9116:	33 e0       	ldi	r19, 0x03	; 3
    9118:	4f 2d       	mov	r20, r15
    911a:	6f eb       	ldi	r22, 0xBF	; 191
    911c:	73 e0       	ldi	r23, 0x03	; 3
    911e:	8f e8       	ldi	r24, 0x8F	; 143
    9120:	9d e0       	ldi	r25, 0x0D	; 13
    9122:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9126:	b4 01       	movw	r22, r8
    9128:	c8 01       	movw	r24, r16
    912a:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    912e:	23 e7       	ldi	r18, 0x73	; 115
    9130:	33 e0       	ldi	r19, 0x03	; 3
    9132:	4f 2d       	mov	r20, r15
    9134:	6f eb       	ldi	r22, 0xBF	; 191
    9136:	73 e0       	ldi	r23, 0x03	; 3
    9138:	8f e8       	ldi	r24, 0x8F	; 143
    913a:	9d e0       	ldi	r25, 0x0D	; 13
    913c:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    9140:	4a e0       	ldi	r20, 0x0A	; 10
    9142:	b8 01       	movw	r22, r16
    9144:	2d 96       	adiw	r28, 0x0d	; 13
    9146:	8e ad       	ldd	r24, Y+62	; 0x3e
    9148:	9f ad       	ldd	r25, Y+63	; 0x3f
    914a:	2d 97       	sbiw	r28, 0x0d	; 13
    914c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9150:	25 e9       	ldi	r18, 0x95	; 149
    9152:	34 e0       	ldi	r19, 0x04	; 4
    9154:	4f 2d       	mov	r20, r15
    9156:	6f eb       	ldi	r22, 0xBF	; 191
    9158:	73 e0       	ldi	r23, 0x03	; 3
    915a:	8f e8       	ldi	r24, 0x8F	; 143
    915c:	9d e0       	ldi	r25, 0x0D	; 13
    915e:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9162:	f6 01       	movw	r30, r12
    9164:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
    9166:	4a e0       	ldi	r20, 0x0A	; 10
    9168:	b8 01       	movw	r22, r16
    916a:	90 e0       	ldi	r25, 0x00	; 0
    916c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    9170:	28 e7       	ldi	r18, 0x78	; 120
    9172:	33 e0       	ldi	r19, 0x03	; 3
    9174:	4f 2d       	mov	r20, r15
    9176:	6f eb       	ldi	r22, 0xBF	; 191
    9178:	73 e0       	ldi	r23, 0x03	; 3
    917a:	8f e8       	ldi	r24, 0x8F	; 143
    917c:	9d e0       	ldi	r25, 0x0D	; 13
    917e:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9182:	19 82       	std	Y+1, r1	; 0x01
    9184:	00 e1       	ldi	r16, 0x10	; 16
    9186:	28 e0       	ldi	r18, 0x08	; 8
    9188:	a3 01       	movw	r20, r6
    918a:	6a e3       	ldi	r22, 0x3A	; 58
    918c:	ce 01       	movw	r24, r28
    918e:	01 96       	adiw	r24, 0x01	; 1
    9190:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
    9194:	8e 01       	movw	r16, r28
    9196:	0f 5f       	subi	r16, 0xFF	; 255
    9198:	1f 4f       	sbci	r17, 0xFF	; 255
    919a:	2a e4       	ldi	r18, 0x4A	; 74
    919c:	33 e0       	ldi	r19, 0x03	; 3
    919e:	4f 2d       	mov	r20, r15
    91a0:	6f eb       	ldi	r22, 0xBF	; 191
    91a2:	73 e0       	ldi	r23, 0x03	; 3
    91a4:	8f e8       	ldi	r24, 0x8F	; 143
    91a6:	9d e0       	ldi	r25, 0x0D	; 13
    91a8:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    91ac:	66 96       	adiw	r28, 0x16	; 22
    91ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    91b0:	66 97       	sbiw	r28, 0x16	; 22
itoa():
    91b2:	4a e0       	ldi	r20, 0x0A	; 10
    91b4:	b8 01       	movw	r22, r16
    91b6:	90 e0       	ldi	r25, 0x00	; 0
    91b8:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    91bc:	2f e7       	ldi	r18, 0x7F	; 127
    91be:	33 e0       	ldi	r19, 0x03	; 3
    91c0:	4f 2d       	mov	r20, r15
    91c2:	6f eb       	ldi	r22, 0xBF	; 191
    91c4:	73 e0       	ldi	r23, 0x03	; 3
    91c6:	8f e8       	ldi	r24, 0x8F	; 143
    91c8:	9d e0       	ldi	r25, 0x0D	; 13
    91ca:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    91ce:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <uptime>
    91d2:	f6 01       	movw	r30, r12
    91d4:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
    91d6:	4a e0       	ldi	r20, 0x0A	; 10
    91d8:	b8 01       	movw	r22, r16
    91da:	89 1b       	sub	r24, r25
    91dc:	99 0b       	sbc	r25, r25
    91de:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z13send_mqtt_tdsv():
    91e2:	26 e8       	ldi	r18, 0x86	; 134
    91e4:	33 e0       	ldi	r19, 0x03	; 3
    91e6:	4f 2d       	mov	r20, r15
    91e8:	6f eb       	ldi	r22, 0xBF	; 191
    91ea:	73 e0       	ldi	r23, 0x03	; 3
    91ec:	8f e8       	ldi	r24, 0x8F	; 143
    91ee:	9d e0       	ldi	r25, 0x0D	; 13
    91f0:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    91f4:	f3 94       	inc	r15
    91f6:	fe e1       	ldi	r31, 0x1E	; 30
    91f8:	cf 0e       	add	r12, r31
    91fa:	d1 1c       	adc	r13, r1
    91fc:	86 e0       	ldi	r24, 0x06	; 6
    91fe:	f8 12       	cpse	r15, r24
    9200:	36 cf       	rjmp	.-404    	; 0x906e <send_mqtt_tds()+0x6e>
    9202:	ca 5a       	subi	r28, 0xAA	; 170
    9204:	df 4f       	sbci	r29, 0xFF	; 255
    9206:	0f b6       	in	r0, 0x3f	; 63
    9208:	f8 94       	cli
    920a:	de bf       	out	0x3e, r29	; 62
    920c:	0f be       	out	0x3f, r0	; 63
    920e:	cd bf       	out	0x3d, r28	; 61
    9210:	df 91       	pop	r29
    9212:	cf 91       	pop	r28
    9214:	1f 91       	pop	r17
    9216:	0f 91       	pop	r16
    9218:	ff 90       	pop	r15
    921a:	df 90       	pop	r13
    921c:	cf 90       	pop	r12
    921e:	bf 90       	pop	r11
    9220:	af 90       	pop	r10
    9222:	9f 90       	pop	r9
    9224:	8f 90       	pop	r8
    9226:	7f 90       	pop	r7
    9228:	6f 90       	pop	r6
    922a:	5f 90       	pop	r5
    922c:	4f 90       	pop	r4
    922e:	3f 90       	pop	r3
    9230:	2f 90       	pop	r2
    9232:	08 95       	ret

00009234 <send_mqtt_program()>:
_Z17send_mqtt_programv():
    9234:	af 92       	push	r10
    9236:	bf 92       	push	r11
    9238:	cf 92       	push	r12
    923a:	df 92       	push	r13
    923c:	ef 92       	push	r14
    923e:	ff 92       	push	r15
    9240:	0f 93       	push	r16
    9242:	1f 93       	push	r17
    9244:	cf 93       	push	r28
    9246:	df 93       	push	r29
    9248:	cd b7       	in	r28, 0x3d	; 61
    924a:	de b7       	in	r29, 0x3e	; 62
    924c:	cb 54       	subi	r28, 0x4B	; 75
    924e:	d1 09       	sbc	r29, r1
    9250:	0f b6       	in	r0, 0x3f	; 63
    9252:	f8 94       	cli
    9254:	de bf       	out	0x3e, r29	; 62
    9256:	0f be       	out	0x3f, r0	; 63
    9258:	cd bf       	out	0x3d, r28	; 61
    925a:	b1 2c       	mov	r11, r1
    925c:	8b 2d       	mov	r24, r11
    925e:	0e 94 4a 8f 	call	0x11e94	; 0x11e94 <thermostat_program_get_active(unsigned char)>
    9262:	a8 2e       	mov	r10, r24
    9264:	8f ef       	ldi	r24, 0xFF	; 255
    9266:	a8 16       	cp	r10, r24
    9268:	09 f4       	brne	.+2      	; 0x926c <send_mqtt_program()+0x38>
    926a:	e9 c0       	rjmp	.+466    	; 0x943e <send_mqtt_program()+0x20a>
    926c:	be 01       	movw	r22, r28
    926e:	6f 5f       	subi	r22, 0xFF	; 255
    9270:	7f 4f       	sbci	r23, 0xFF	; 255
    9272:	8b 2d       	mov	r24, r11
    9274:	0e 94 fe 8e 	call	0x11dfc	; 0x11dfc <thermostat_program_get_name(unsigned char, char*)>
    9278:	8e 01       	movw	r16, r28
    927a:	0f 5f       	subi	r16, 0xFF	; 255
    927c:	1f 4f       	sbci	r17, 0xFF	; 255
    927e:	23 e7       	ldi	r18, 0x73	; 115
    9280:	33 e0       	ldi	r19, 0x03	; 3
    9282:	4b 2d       	mov	r20, r11
    9284:	6f e8       	ldi	r22, 0x8F	; 143
    9286:	73 e0       	ldi	r23, 0x03	; 3
    9288:	8f e8       	ldi	r24, 0x8F	; 143
    928a:	9d e0       	ldi	r25, 0x0D	; 13
    928c:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
itoa():
    9290:	4a e0       	ldi	r20, 0x0A	; 10
    9292:	b8 01       	movw	r22, r16
    9294:	8a 2d       	mov	r24, r10
    9296:	90 e0       	ldi	r25, 0x00	; 0
    9298:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    929c:	24 e9       	ldi	r18, 0x94	; 148
    929e:	33 e0       	ldi	r19, 0x03	; 3
    92a0:	4b 2d       	mov	r20, r11
    92a2:	6f e8       	ldi	r22, 0x8F	; 143
    92a4:	73 e0       	ldi	r23, 0x03	; 3
    92a6:	8f e8       	ldi	r24, 0x8F	; 143
    92a8:	9d e0       	ldi	r25, 0x0D	; 13
    92aa:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    92ae:	a1 2c       	mov	r10, r1
    92b0:	ce 01       	movw	r24, r28
    92b2:	89 5b       	subi	r24, 0xB9	; 185
    92b4:	9f 4f       	sbci	r25, 0xFF	; 255
    92b6:	6c 01       	movw	r12, r24
    92b8:	01 96       	adiw	r24, 0x01	; 1
    92ba:	7c 01       	movw	r14, r24
    92bc:	8e 01       	movw	r16, r28
    92be:	07 5b       	subi	r16, 0xB7	; 183
    92c0:	1f 4f       	sbci	r17, 0xFF	; 255
    92c2:	9e 01       	movw	r18, r28
    92c4:	26 5b       	subi	r18, 0xB6	; 182
    92c6:	3f 4f       	sbci	r19, 0xFF	; 255
    92c8:	ae 01       	movw	r20, r28
    92ca:	45 5b       	subi	r20, 0xB5	; 181
    92cc:	5f 4f       	sbci	r21, 0xFF	; 255
    92ce:	6a 2d       	mov	r22, r10
    92d0:	8b 2d       	mov	r24, r11
    92d2:	0e 94 5a 8f 	call	0x11eb4	; 0x11eb4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
    92d6:	28 96       	adiw	r28, 0x08	; 8
    92d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    92da:	28 97       	sbiw	r28, 0x08	; 8
    92dc:	81 30       	cpi	r24, 0x01	; 1
    92de:	09 f0       	breq	.+2      	; 0x92e2 <send_mqtt_program()+0xae>
    92e0:	aa c0       	rjmp	.+340    	; 0x9436 <send_mqtt_program()+0x202>
    92e2:	2c 96       	adiw	r28, 0x0c	; 12
    92e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    92e6:	2c 97       	sbiw	r28, 0x0c	; 12
itoa():
    92e8:	4a e0       	ldi	r20, 0x0A	; 10
    92ea:	be 01       	movw	r22, r28
    92ec:	6f 5b       	subi	r22, 0xBF	; 191
    92ee:	7f 4f       	sbci	r23, 0xFF	; 255
    92f0:	90 e0       	ldi	r25, 0x00	; 0
    92f2:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    92f6:	be 01       	movw	r22, r28
    92f8:	6f 5b       	subi	r22, 0xBF	; 191
    92fa:	7f 4f       	sbci	r23, 0xFF	; 255
    92fc:	ce 01       	movw	r24, r28
    92fe:	01 96       	adiw	r24, 0x01	; 1
    9300:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    9304:	6b e9       	ldi	r22, 0x9B	; 155
    9306:	73 e0       	ldi	r23, 0x03	; 3
    9308:	ce 01       	movw	r24, r28
    930a:	01 96       	adiw	r24, 0x01	; 1
    930c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    9310:	2b 96       	adiw	r28, 0x0b	; 11
    9312:	8f ad       	ldd	r24, Y+63	; 0x3f
    9314:	2b 97       	sbiw	r28, 0x0b	; 11
itoa():
    9316:	4a e0       	ldi	r20, 0x0A	; 10
    9318:	be 01       	movw	r22, r28
    931a:	6f 5b       	subi	r22, 0xBF	; 191
    931c:	7f 4f       	sbci	r23, 0xFF	; 255
    931e:	90 e0       	ldi	r25, 0x00	; 0
    9320:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    9324:	be 01       	movw	r22, r28
    9326:	6f 5b       	subi	r22, 0xBF	; 191
    9328:	7f 4f       	sbci	r23, 0xFF	; 255
    932a:	ce 01       	movw	r24, r28
    932c:	01 96       	adiw	r24, 0x01	; 1
    932e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    9332:	6b e9       	ldi	r22, 0x9B	; 155
    9334:	73 e0       	ldi	r23, 0x03	; 3
    9336:	ce 01       	movw	r24, r28
    9338:	01 96       	adiw	r24, 0x01	; 1
    933a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    933e:	2a 96       	adiw	r28, 0x0a	; 10
    9340:	8f ad       	ldd	r24, Y+63	; 0x3f
    9342:	2a 97       	sbiw	r28, 0x0a	; 10
itoa():
    9344:	4a e0       	ldi	r20, 0x0A	; 10
    9346:	be 01       	movw	r22, r28
    9348:	6f 5b       	subi	r22, 0xBF	; 191
    934a:	7f 4f       	sbci	r23, 0xFF	; 255
    934c:	90 e0       	ldi	r25, 0x00	; 0
    934e:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    9352:	be 01       	movw	r22, r28
    9354:	6f 5b       	subi	r22, 0xBF	; 191
    9356:	7f 4f       	sbci	r23, 0xFF	; 255
    9358:	ce 01       	movw	r24, r28
    935a:	01 96       	adiw	r24, 0x01	; 1
    935c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    9360:	6b e9       	ldi	r22, 0x9B	; 155
    9362:	73 e0       	ldi	r23, 0x03	; 3
    9364:	ce 01       	movw	r24, r28
    9366:	01 96       	adiw	r24, 0x01	; 1
    9368:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    936c:	29 96       	adiw	r28, 0x09	; 9
    936e:	8f ad       	ldd	r24, Y+63	; 0x3f
    9370:	29 97       	sbiw	r28, 0x09	; 9
itoa():
    9372:	4a e0       	ldi	r20, 0x0A	; 10
    9374:	be 01       	movw	r22, r28
    9376:	6f 5b       	subi	r22, 0xBF	; 191
    9378:	7f 4f       	sbci	r23, 0xFF	; 255
    937a:	90 e0       	ldi	r25, 0x00	; 0
    937c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    9380:	be 01       	movw	r22, r28
    9382:	6f 5b       	subi	r22, 0xBF	; 191
    9384:	7f 4f       	sbci	r23, 0xFF	; 255
    9386:	ce 01       	movw	r24, r28
    9388:	01 96       	adiw	r24, 0x01	; 1
    938a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    938e:	ce 01       	movw	r24, r28
    9390:	01 96       	adiw	r24, 0x01	; 1
    9392:	7c 01       	movw	r14, r24
    9394:	08 ec       	ldi	r16, 0xC8	; 200
    9396:	17 e0       	ldi	r17, 0x07	; 7
    9398:	2a 2d       	mov	r18, r10
    939a:	4b 2d       	mov	r20, r11
    939c:	6d e9       	ldi	r22, 0x9D	; 157
    939e:	73 e0       	ldi	r23, 0x03	; 3
    93a0:	8f e8       	ldi	r24, 0x8F	; 143
    93a2:	9d e0       	ldi	r25, 0x0D	; 13
    93a4:	0e 94 22 83 	call	0x10644	; 0x10644 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    93a8:	28 96       	adiw	r28, 0x08	; 8
    93aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    93ac:	28 97       	sbiw	r28, 0x08	; 8
itoa():
    93ae:	4a e0       	ldi	r20, 0x0A	; 10
    93b0:	be 01       	movw	r22, r28
    93b2:	6f 5b       	subi	r22, 0xBF	; 191
    93b4:	7f 4f       	sbci	r23, 0xFF	; 255
    93b6:	90 e0       	ldi	r25, 0x00	; 0
    93b8:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    93bc:	be 01       	movw	r22, r28
    93be:	6f 5b       	subi	r22, 0xBF	; 191
    93c0:	7f 4f       	sbci	r23, 0xFF	; 255
    93c2:	c7 01       	movw	r24, r14
    93c4:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    93c8:	04 e9       	ldi	r16, 0x94	; 148
    93ca:	13 e0       	ldi	r17, 0x03	; 3
    93cc:	2a 2d       	mov	r18, r10
    93ce:	4b 2d       	mov	r20, r11
    93d0:	6d e9       	ldi	r22, 0x9D	; 157
    93d2:	73 e0       	ldi	r23, 0x03	; 3
    93d4:	8f e8       	ldi	r24, 0x8F	; 143
    93d6:	9d e0       	ldi	r25, 0x0D	; 13
    93d8:	0e 94 22 83 	call	0x10644	; 0x10644 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    93dc:	6a 2d       	mov	r22, r10
    93de:	8b 2d       	mov	r24, r11
    93e0:	0e 94 e9 8f 	call	0x11fd2	; 0x11fd2 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
    93e4:	4a e0       	ldi	r20, 0x0A	; 10
    93e6:	be 01       	movw	r22, r28
    93e8:	6f 5b       	subi	r22, 0xBF	; 191
    93ea:	7f 4f       	sbci	r23, 0xFF	; 255
    93ec:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    93f0:	be 01       	movw	r22, r28
    93f2:	6f 5b       	subi	r22, 0xBF	; 191
    93f4:	7f 4f       	sbci	r23, 0xFF	; 255
    93f6:	c7 01       	movw	r24, r14
    93f8:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    93fc:	0b ea       	ldi	r16, 0xAB	; 171
    93fe:	13 e0       	ldi	r17, 0x03	; 3
    9400:	2a 2d       	mov	r18, r10
    9402:	4b 2d       	mov	r20, r11
    9404:	6d e9       	ldi	r22, 0x9D	; 157
    9406:	73 e0       	ldi	r23, 0x03	; 3
    9408:	8f e8       	ldi	r24, 0x8F	; 143
    940a:	9d e0       	ldi	r25, 0x0D	; 13
    940c:	0e 94 22 83 	call	0x10644	; 0x10644 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9410:	6a 2d       	mov	r22, r10
    9412:	8b 2d       	mov	r24, r11
    9414:	0e 94 27 90 	call	0x1204e	; 0x1204e <thermostat_program_get_week(unsigned char, unsigned char)>
itoa():
    9418:	4a e0       	ldi	r20, 0x0A	; 10
    941a:	b7 01       	movw	r22, r14
    941c:	90 e0       	ldi	r25, 0x00	; 0
    941e:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z17send_mqtt_programv():
    9422:	05 eb       	ldi	r16, 0xB5	; 181
    9424:	13 e0       	ldi	r17, 0x03	; 3
    9426:	2a 2d       	mov	r18, r10
    9428:	4b 2d       	mov	r20, r11
    942a:	6d e9       	ldi	r22, 0x9D	; 157
    942c:	73 e0       	ldi	r23, 0x03	; 3
    942e:	8f e8       	ldi	r24, 0x8F	; 143
    9430:	9d e0       	ldi	r25, 0x0D	; 13
    9432:	0e 94 22 83 	call	0x10644	; 0x10644 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>
    9436:	a3 94       	inc	r10
    9438:	9b e0       	ldi	r25, 0x0B	; 11
    943a:	a9 12       	cpse	r10, r25
    943c:	39 cf       	rjmp	.-398    	; 0x92b0 <send_mqtt_program()+0x7c>
    943e:	b3 94       	inc	r11
    9440:	88 e0       	ldi	r24, 0x08	; 8
    9442:	b8 12       	cpse	r11, r24
    9444:	0b cf       	rjmp	.-490    	; 0x925c <send_mqtt_program()+0x28>
    9446:	c5 5b       	subi	r28, 0xB5	; 181
    9448:	df 4f       	sbci	r29, 0xFF	; 255
    944a:	0f b6       	in	r0, 0x3f	; 63
    944c:	f8 94       	cli
    944e:	de bf       	out	0x3e, r29	; 62
    9450:	0f be       	out	0x3f, r0	; 63
    9452:	cd bf       	out	0x3d, r28	; 61
    9454:	df 91       	pop	r29
    9456:	cf 91       	pop	r28
    9458:	1f 91       	pop	r17
    945a:	0f 91       	pop	r16
    945c:	ff 90       	pop	r15
    945e:	ef 90       	pop	r14
    9460:	df 90       	pop	r13
    9462:	cf 90       	pop	r12
    9464:	bf 90       	pop	r11
    9466:	af 90       	pop	r10
    9468:	08 95       	ret

0000946a <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
    946a:	ff 92       	push	r15
    946c:	0f 93       	push	r16
    946e:	1f 93       	push	r17
    9470:	cf 93       	push	r28
    9472:	df 93       	push	r29
    9474:	cd b7       	in	r28, 0x3d	; 61
    9476:	de b7       	in	r29, 0x3e	; 62
    9478:	a0 97       	sbiw	r28, 0x20	; 32
    947a:	0f b6       	in	r0, 0x3f	; 63
    947c:	f8 94       	cli
    947e:	de bf       	out	0x3e, r29	; 62
    9480:	0f be       	out	0x3f, r0	; 63
    9482:	cd bf       	out	0x3d, r28	; 61
    9484:	f8 2e       	mov	r15, r24
    9486:	0e 94 82 8c 	call	0x11904	; 0x11904 <thermostat_get_pid_p(unsigned char)>
    948a:	8e 01       	movw	r16, r28
    948c:	0f 5f       	subi	r16, 0xFF	; 255
    948e:	1f 4f       	sbci	r17, 0xFF	; 255
    9490:	22 e0       	ldi	r18, 0x02	; 2
    9492:	47 e0       	ldi	r20, 0x07	; 7
    9494:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    9498:	23 eb       	ldi	r18, 0xB3	; 179
    949a:	37 e0       	ldi	r19, 0x07	; 7
    949c:	4f 2d       	mov	r20, r15
    949e:	6a eb       	ldi	r22, 0xBA	; 186
    94a0:	73 e0       	ldi	r23, 0x03	; 3
    94a2:	8f e8       	ldi	r24, 0x8F	; 143
    94a4:	9d e0       	ldi	r25, 0x0D	; 13
    94a6:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94aa:	8f 2d       	mov	r24, r15
    94ac:	0e 94 b1 8c 	call	0x11962	; 0x11962 <thermostat_get_pid_i(unsigned char)>
    94b0:	22 e0       	ldi	r18, 0x02	; 2
    94b2:	47 e0       	ldi	r20, 0x07	; 7
    94b4:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    94b8:	2a eb       	ldi	r18, 0xBA	; 186
    94ba:	37 e0       	ldi	r19, 0x07	; 7
    94bc:	4f 2d       	mov	r20, r15
    94be:	6a eb       	ldi	r22, 0xBA	; 186
    94c0:	73 e0       	ldi	r23, 0x03	; 3
    94c2:	8f e8       	ldi	r24, 0x8F	; 143
    94c4:	9d e0       	ldi	r25, 0x0D	; 13
    94c6:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94ca:	8f 2d       	mov	r24, r15
    94cc:	0e 94 bc 8c 	call	0x11978	; 0x11978 <thermostat_get_pid_d(unsigned char)>
    94d0:	22 e0       	ldi	r18, 0x02	; 2
    94d2:	47 e0       	ldi	r20, 0x07	; 7
    94d4:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    94d8:	21 ec       	ldi	r18, 0xC1	; 193
    94da:	37 e0       	ldi	r19, 0x07	; 7
    94dc:	4f 2d       	mov	r20, r15
    94de:	6a eb       	ldi	r22, 0xBA	; 186
    94e0:	73 e0       	ldi	r23, 0x03	; 3
    94e2:	8f e8       	ldi	r24, 0x8F	; 143
    94e4:	9d e0       	ldi	r25, 0x0D	; 13
    94e6:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    94ea:	8f 2d       	mov	r24, r15
    94ec:	0e 94 c7 8c 	call	0x1198e	; 0x1198e <thermostat_get_pid_time(unsigned char)>
itoa():
    94f0:	4a e0       	ldi	r20, 0x0A	; 10
    94f2:	b8 01       	movw	r22, r16
    94f4:	90 e0       	ldi	r25, 0x00	; 0
    94f6:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
    94fa:	28 ec       	ldi	r18, 0xC8	; 200
    94fc:	37 e0       	ldi	r19, 0x07	; 7
    94fe:	4f 2d       	mov	r20, r15
    9500:	6a eb       	ldi	r22, 0xBA	; 186
    9502:	73 e0       	ldi	r23, 0x03	; 3
    9504:	8f e8       	ldi	r24, 0x8F	; 143
    9506:	9d e0       	ldi	r25, 0x0D	; 13
    9508:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    950c:	a0 96       	adiw	r28, 0x20	; 32
    950e:	0f b6       	in	r0, 0x3f	; 63
    9510:	f8 94       	cli
    9512:	de bf       	out	0x3e, r29	; 62
    9514:	0f be       	out	0x3f, r0	; 63
    9516:	cd bf       	out	0x3d, r28	; 61
    9518:	df 91       	pop	r29
    951a:	cf 91       	pop	r28
    951c:	1f 91       	pop	r17
    951e:	0f 91       	pop	r16
    9520:	ff 90       	pop	r15
    9522:	08 95       	ret

00009524 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
    9524:	ff 92       	push	r15
    9526:	0f 93       	push	r16
    9528:	1f 93       	push	r17
    952a:	cf 93       	push	r28
    952c:	df 93       	push	r29
    952e:	cd b7       	in	r28, 0x3d	; 61
    9530:	de b7       	in	r29, 0x3e	; 62
    9532:	63 97       	sbiw	r28, 0x13	; 19
    9534:	0f b6       	in	r0, 0x3f	; 63
    9536:	f8 94       	cli
    9538:	de bf       	out	0x3e, r29	; 62
    953a:	0f be       	out	0x3f, r0	; 63
    953c:	cd bf       	out	0x3d, r28	; 61
    953e:	1b 8a       	std	Y+19, r1	; 0x13
    9540:	f1 2c       	mov	r15, r1
    9542:	ae 01       	movw	r20, r28
    9544:	4f 5f       	subi	r20, 0xFF	; 255
    9546:	5f 4f       	sbci	r21, 0xFF	; 255
    9548:	be 01       	movw	r22, r28
    954a:	6d 5e       	subi	r22, 0xED	; 237
    954c:	7f 4f       	sbci	r23, 0xFF	; 255
    954e:	8f 2d       	mov	r24, r15
    9550:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
    9554:	8b 89       	ldd	r24, Y+19	; 0x13
    9556:	81 30       	cpi	r24, 0x01	; 1
    9558:	e1 f5       	brne	.+120    	; 0x95d2 <send_mqtt_remote_tds_status()+0xae>
    955a:	8e 01       	movw	r16, r28
    955c:	0f 5f       	subi	r16, 0xFF	; 255
    955e:	1f 4f       	sbci	r17, 0xFF	; 255
    9560:	23 e7       	ldi	r18, 0x73	; 115
    9562:	33 e0       	ldi	r19, 0x03	; 3
    9564:	4f 2d       	mov	r20, r15
    9566:	6e eb       	ldi	r22, 0xBE	; 190
    9568:	73 e0       	ldi	r23, 0x03	; 3
    956a:	8f e8       	ldi	r24, 0x8F	; 143
    956c:	9d e0       	ldi	r25, 0x0D	; 13
    956e:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9572:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
    9574:	4a e0       	ldi	r20, 0x0A	; 10
    9576:	b8 01       	movw	r22, r16
    9578:	90 e0       	ldi	r25, 0x00	; 0
    957a:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    957e:	24 e9       	ldi	r18, 0x94	; 148
    9580:	33 e0       	ldi	r19, 0x03	; 3
    9582:	4f 2d       	mov	r20, r15
    9584:	6e eb       	ldi	r22, 0xBE	; 190
    9586:	73 e0       	ldi	r23, 0x03	; 3
    9588:	8f e8       	ldi	r24, 0x8F	; 143
    958a:	9d e0       	ldi	r25, 0x0D	; 13
    958c:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9590:	8f 2d       	mov	r24, r15
    9592:	0e 94 fd 44 	call	0x89fa	; 0x89fa <remote_tds_get_data(unsigned char)>
itoa():
    9596:	4a e0       	ldi	r20, 0x0A	; 10
    9598:	b8 01       	movw	r22, r16
    959a:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    959e:	25 e6       	ldi	r18, 0x65	; 101
    95a0:	33 e0       	ldi	r19, 0x03	; 3
    95a2:	4f 2d       	mov	r20, r15
    95a4:	6e eb       	ldi	r22, 0xBE	; 190
    95a6:	73 e0       	ldi	r23, 0x03	; 3
    95a8:	8f e8       	ldi	r24, 0x8F	; 143
    95aa:	9d e0       	ldi	r25, 0x0D	; 13
    95ac:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    95b0:	8f 2d       	mov	r24, r15
    95b2:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <remote_tds_get_last_update(unsigned char)>
itoa():
    95b6:	4a e0       	ldi	r20, 0x0A	; 10
    95b8:	b8 01       	movw	r22, r16
    95ba:	90 e0       	ldi	r25, 0x00	; 0
    95bc:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
    95c0:	23 ec       	ldi	r18, 0xC3	; 195
    95c2:	33 e0       	ldi	r19, 0x03	; 3
    95c4:	4f 2d       	mov	r20, r15
    95c6:	6e eb       	ldi	r22, 0xBE	; 190
    95c8:	73 e0       	ldi	r23, 0x03	; 3
    95ca:	8f e8       	ldi	r24, 0x8F	; 143
    95cc:	9d e0       	ldi	r25, 0x0D	; 13
    95ce:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    95d2:	f3 94       	inc	r15
    95d4:	8a e0       	ldi	r24, 0x0A	; 10
    95d6:	f8 12       	cpse	r15, r24
    95d8:	b4 cf       	rjmp	.-152    	; 0x9542 <send_mqtt_remote_tds_status()+0x1e>
    95da:	63 96       	adiw	r28, 0x13	; 19
    95dc:	0f b6       	in	r0, 0x3f	; 63
    95de:	f8 94       	cli
    95e0:	de bf       	out	0x3e, r29	; 62
    95e2:	0f be       	out	0x3f, r0	; 63
    95e4:	cd bf       	out	0x3d, r28	; 61
    95e6:	df 91       	pop	r29
    95e8:	cf 91       	pop	r28
    95ea:	1f 91       	pop	r17
    95ec:	0f 91       	pop	r16
    95ee:	ff 90       	pop	r15
    95f0:	08 95       	ret

000095f2 <mqtt_publis_output(unsigned char, unsigned char)>:
_Z18mqtt_publis_outputhh():
    95f2:	0f 93       	push	r16
    95f4:	1f 93       	push	r17
    95f6:	cf 93       	push	r28
    95f8:	df 93       	push	r29
    95fa:	cd b7       	in	r28, 0x3d	; 61
    95fc:	de b7       	in	r29, 0x3e	; 62
    95fe:	c8 58       	subi	r28, 0x88	; 136
    9600:	d1 09       	sbc	r29, r1
    9602:	0f b6       	in	r0, 0x3f	; 63
    9604:	f8 94       	cli
    9606:	de bf       	out	0x3e, r29	; 62
    9608:	0f be       	out	0x3f, r0	; 63
    960a:	cd bf       	out	0x3d, r28	; 61
    960c:	8f 3f       	cpi	r24, 0xFF	; 255
    960e:	c9 f1       	breq	.+114    	; 0x9682 <mqtt_publis_output(unsigned char, unsigned char)+0x90>
    9610:	06 2f       	mov	r16, r22
    9612:	18 2f       	mov	r17, r24
    9614:	6b eb       	ldi	r22, 0xBB	; 187
    9616:	75 e5       	ldi	r23, 0x55	; 85
    9618:	ce 01       	movw	r24, r28
    961a:	8f 5b       	subi	r24, 0xBF	; 191
    961c:	9f 4f       	sbci	r25, 0xFF	; 255
    961e:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    9622:	6f ec       	ldi	r22, 0xCF	; 207
    9624:	73 e0       	ldi	r23, 0x03	; 3
    9626:	ce 01       	movw	r24, r28
    9628:	8f 5b       	subi	r24, 0xBF	; 191
    962a:	9f 4f       	sbci	r25, 0xFF	; 255
    962c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
    9630:	4a e0       	ldi	r20, 0x0A	; 10
    9632:	be 01       	movw	r22, r28
    9634:	6f 57       	subi	r22, 0x7F	; 127
    9636:	7f 4f       	sbci	r23, 0xFF	; 255
    9638:	81 2f       	mov	r24, r17
    963a:	90 e0       	ldi	r25, 0x00	; 0
    963c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    9640:	be 01       	movw	r22, r28
    9642:	6f 57       	subi	r22, 0x7F	; 127
    9644:	7f 4f       	sbci	r23, 0xFF	; 255
    9646:	ce 01       	movw	r24, r28
    9648:	8f 5b       	subi	r24, 0xBF	; 191
    964a:	9f 4f       	sbci	r25, 0xFF	; 255
    964c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    9650:	6d ed       	ldi	r22, 0xDD	; 221
    9652:	73 e0       	ldi	r23, 0x03	; 3
    9654:	ce 01       	movw	r24, r28
    9656:	8f 5b       	subi	r24, 0xBF	; 191
    9658:	9f 4f       	sbci	r25, 0xFF	; 255
    965a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
    965e:	4a e0       	ldi	r20, 0x0A	; 10
    9660:	be 01       	movw	r22, r28
    9662:	6f 5f       	subi	r22, 0xFF	; 255
    9664:	7f 4f       	sbci	r23, 0xFF	; 255
    9666:	80 2f       	mov	r24, r16
    9668:	90 e0       	ldi	r25, 0x00	; 0
    966a:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18mqtt_publis_outputhh():
    966e:	ae 01       	movw	r20, r28
    9670:	4f 5f       	subi	r20, 0xFF	; 255
    9672:	5f 4f       	sbci	r21, 0xFF	; 255
    9674:	be 01       	movw	r22, r28
    9676:	6f 5b       	subi	r22, 0xBF	; 191
    9678:	7f 4f       	sbci	r23, 0xFF	; 255
    967a:	8f e8       	ldi	r24, 0x8F	; 143
    967c:	9d e0       	ldi	r25, 0x0D	; 13
    967e:	0e 94 10 c0 	call	0x18020	; 0x18020 <PubSubClient::publish(char const*, char const*)>
    9682:	c8 57       	subi	r28, 0x78	; 120
    9684:	df 4f       	sbci	r29, 0xFF	; 255
    9686:	0f b6       	in	r0, 0x3f	; 63
    9688:	f8 94       	cli
    968a:	de bf       	out	0x3e, r29	; 62
    968c:	0f be       	out	0x3f, r0	; 63
    968e:	cd bf       	out	0x3d, r28	; 61
    9690:	df 91       	pop	r29
    9692:	cf 91       	pop	r28
    9694:	1f 91       	pop	r17
    9696:	0f 91       	pop	r16
    9698:	08 95       	ret

0000969a <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>:
_Z22mqtt_publis_output_pwmhhh():
    969a:	ff 92       	push	r15
    969c:	0f 93       	push	r16
    969e:	1f 93       	push	r17
    96a0:	cf 93       	push	r28
    96a2:	df 93       	push	r29
    96a4:	cd b7       	in	r28, 0x3d	; 61
    96a6:	de b7       	in	r29, 0x3e	; 62
    96a8:	c8 58       	subi	r28, 0x88	; 136
    96aa:	d1 09       	sbc	r29, r1
    96ac:	0f b6       	in	r0, 0x3f	; 63
    96ae:	f8 94       	cli
    96b0:	de bf       	out	0x3e, r29	; 62
    96b2:	0f be       	out	0x3f, r0	; 63
    96b4:	cd bf       	out	0x3d, r28	; 61
    96b6:	8f 3f       	cpi	r24, 0xFF	; 255
    96b8:	09 f4       	brne	.+2      	; 0x96bc <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x22>
    96ba:	4f c0       	rjmp	.+158    	; 0x975a <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0xc0>
    96bc:	f4 2e       	mov	r15, r20
    96be:	16 2f       	mov	r17, r22
    96c0:	08 2f       	mov	r16, r24
    96c2:	6b eb       	ldi	r22, 0xBB	; 187
    96c4:	75 e5       	ldi	r23, 0x55	; 85
    96c6:	ce 01       	movw	r24, r28
    96c8:	8f 5b       	subi	r24, 0xBF	; 191
    96ca:	9f 4f       	sbci	r25, 0xFF	; 255
    96cc:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    96d0:	6f ec       	ldi	r22, 0xCF	; 207
    96d2:	73 e0       	ldi	r23, 0x03	; 3
    96d4:	ce 01       	movw	r24, r28
    96d6:	8f 5b       	subi	r24, 0xBF	; 191
    96d8:	9f 4f       	sbci	r25, 0xFF	; 255
    96da:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
    96de:	4a e0       	ldi	r20, 0x0A	; 10
    96e0:	be 01       	movw	r22, r28
    96e2:	6f 57       	subi	r22, 0x7F	; 127
    96e4:	7f 4f       	sbci	r23, 0xFF	; 255
    96e6:	80 2f       	mov	r24, r16
    96e8:	90 e0       	ldi	r25, 0x00	; 0
    96ea:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    96ee:	be 01       	movw	r22, r28
    96f0:	6f 57       	subi	r22, 0x7F	; 127
    96f2:	7f 4f       	sbci	r23, 0xFF	; 255
    96f4:	ce 01       	movw	r24, r28
    96f6:	8f 5b       	subi	r24, 0xBF	; 191
    96f8:	9f 4f       	sbci	r25, 0xFF	; 255
    96fa:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    96fe:	64 ee       	ldi	r22, 0xE4	; 228
    9700:	73 e0       	ldi	r23, 0x03	; 3
    9702:	13 30       	cpi	r17, 0x03	; 3
    9704:	61 f0       	breq	.+24     	; 0x971e <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9706:	6a ee       	ldi	r22, 0xEA	; 234
    9708:	73 e0       	ldi	r23, 0x03	; 3
    970a:	15 30       	cpi	r17, 0x05	; 5
    970c:	41 f0       	breq	.+16     	; 0x971e <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    970e:	60 ef       	ldi	r22, 0xF0	; 240
    9710:	73 e0       	ldi	r23, 0x03	; 3
    9712:	16 30       	cpi	r17, 0x06	; 6
    9714:	21 f0       	breq	.+8      	; 0x971e <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x84>
    9716:	1e 3f       	cpi	r17, 0xFE	; 254
    9718:	39 f4       	brne	.+14     	; 0x9728 <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)+0x8e>
    971a:	65 ef       	ldi	r22, 0xF5	; 245
    971c:	73 e0       	ldi	r23, 0x03	; 3
    971e:	ce 01       	movw	r24, r28
    9720:	8f 5b       	subi	r24, 0xBF	; 191
    9722:	9f 4f       	sbci	r25, 0xFF	; 255
    9724:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    9728:	6a ef       	ldi	r22, 0xFA	; 250
    972a:	73 e0       	ldi	r23, 0x03	; 3
    972c:	ce 01       	movw	r24, r28
    972e:	8f 5b       	subi	r24, 0xBF	; 191
    9730:	9f 4f       	sbci	r25, 0xFF	; 255
    9732:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
    9736:	4a e0       	ldi	r20, 0x0A	; 10
    9738:	be 01       	movw	r22, r28
    973a:	6f 5f       	subi	r22, 0xFF	; 255
    973c:	7f 4f       	sbci	r23, 0xFF	; 255
    973e:	8f 2d       	mov	r24, r15
    9740:	90 e0       	ldi	r25, 0x00	; 0
    9742:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z22mqtt_publis_output_pwmhhh():
    9746:	ae 01       	movw	r20, r28
    9748:	4f 5f       	subi	r20, 0xFF	; 255
    974a:	5f 4f       	sbci	r21, 0xFF	; 255
    974c:	be 01       	movw	r22, r28
    974e:	6f 5b       	subi	r22, 0xBF	; 191
    9750:	7f 4f       	sbci	r23, 0xFF	; 255
    9752:	8f e8       	ldi	r24, 0x8F	; 143
    9754:	9d e0       	ldi	r25, 0x0D	; 13
    9756:	0e 94 10 c0 	call	0x18020	; 0x18020 <PubSubClient::publish(char const*, char const*)>
    975a:	c8 57       	subi	r28, 0x78	; 120
    975c:	df 4f       	sbci	r29, 0xFF	; 255
    975e:	0f b6       	in	r0, 0x3f	; 63
    9760:	f8 94       	cli
    9762:	de bf       	out	0x3e, r29	; 62
    9764:	0f be       	out	0x3f, r0	; 63
    9766:	cd bf       	out	0x3d, r28	; 61
    9768:	df 91       	pop	r29
    976a:	cf 91       	pop	r28
    976c:	1f 91       	pop	r17
    976e:	0f 91       	pop	r16
    9770:	ff 90       	pop	r15
    9772:	08 95       	ret

00009774 <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
    9774:	21 e0       	ldi	r18, 0x01	; 1
    9776:	30 e0       	ldi	r19, 0x00	; 0
    9778:	01 c0       	rjmp	.+2      	; 0x977c <selftest_set_0(unsigned char)+0x8>
    977a:	22 0f       	add	r18, r18
    977c:	8a 95       	dec	r24
    977e:	ea f7       	brpl	.-6      	; 0x977a <selftest_set_0(unsigned char)+0x6>
    9780:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    9784:	82 2b       	or	r24, r18
    9786:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <selftest_data>
    978a:	08 95       	ret

0000978c <selftest_clear_0(unsigned char)>:
_Z16selftest_clear_0h():
    978c:	21 e0       	ldi	r18, 0x01	; 1
    978e:	30 e0       	ldi	r19, 0x00	; 0
    9790:	01 c0       	rjmp	.+2      	; 0x9794 <selftest_clear_0(unsigned char)+0x8>
    9792:	22 0f       	add	r18, r18
    9794:	8a 95       	dec	r24
    9796:	ea f7       	brpl	.-6      	; 0x9792 <selftest_clear_0(unsigned char)+0x6>
    9798:	20 95       	com	r18
    979a:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    979e:	28 23       	and	r18, r24
    97a0:	20 93 4e 0a 	sts	0x0A4E, r18	; 0x800a4e <selftest_data>
    97a4:	08 95       	ret

000097a6 <selftest()>:
_Z8selftestv():
    97a6:	8b ed       	ldi	r24, 0xDB	; 219
    97a8:	9f e0       	ldi	r25, 0x0F	; 15
    97aa:	0e 94 8b c2 	call	0x18516	; 0x18516 <RTC_DS1307::isrunning()>
    97ae:	90 91 4e 0a 	lds	r25, 0x0A4E	; 0x800a4e <selftest_data>
    97b2:	81 11       	cpse	r24, r1
    97b4:	04 c0       	rjmp	.+8      	; 0x97be <selftest()+0x18>
    97b6:	91 60       	ori	r25, 0x01	; 1
    97b8:	90 93 4e 0a 	sts	0x0A4E, r25	; 0x800a4e <selftest_data>
    97bc:	08 95       	ret
    97be:	9e 7f       	andi	r25, 0xFE	; 254
    97c0:	fb cf       	rjmp	.-10     	; 0x97b8 <selftest()+0x12>

000097c2 <time_get_offset()>:
_ZNK5EERefdeEv():
    97c2:	81 e0       	ldi	r24, 0x01	; 1
    97c4:	90 e0       	ldi	r25, 0x00	; 0
    97c6:	0c 94 68 df 	jmp	0x1bed0	; 0x1bed0 <eeprom_read_byte>

000097ca <send_device_status()>:
_Z18send_device_statusv():
    97ca:	0f 93       	push	r16
    97cc:	1f 93       	push	r17
    97ce:	cf 93       	push	r28
    97d0:	df 93       	push	r29
    97d2:	cd b7       	in	r28, 0x3d	; 61
    97d4:	de b7       	in	r29, 0x3e	; 62
    97d6:	c0 58       	subi	r28, 0x80	; 128
    97d8:	d1 09       	sbc	r29, r1
    97da:	0f b6       	in	r0, 0x3f	; 63
    97dc:	f8 94       	cli
    97de:	de bf       	out	0x3e, r29	; 62
    97e0:	0f be       	out	0x3f, r0	; 63
    97e2:	cd bf       	out	0x3d, r28	; 61
    97e4:	8f e8       	ldi	r24, 0x8F	; 143
    97e6:	9d e0       	ldi	r25, 0x0D	; 13
    97e8:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
    97ec:	88 23       	and	r24, r24
    97ee:	09 f4       	brne	.+2      	; 0x97f2 <send_device_status()+0x28>
    97f0:	6b c1       	rjmp	.+726    	; 0x9ac8 <send_device_status()+0x2fe>
    97f2:	6f ef       	ldi	r22, 0xFF	; 255
    97f4:	73 e0       	ldi	r23, 0x03	; 3
    97f6:	ce 01       	movw	r24, r28
    97f8:	8f 5b       	subi	r24, 0xBF	; 191
    97fa:	9f 4f       	sbci	r25, 0xFF	; 255
    97fc:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
itoa():
    9800:	4a e0       	ldi	r20, 0x0A	; 10
    9802:	be 01       	movw	r22, r28
    9804:	6f 5f       	subi	r22, 0xFF	; 255
    9806:	7f 4f       	sbci	r23, 0xFF	; 255
    9808:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <uptime>
    980c:	90 91 40 0a 	lds	r25, 0x0A40	; 0x800a40 <uptime+0x1>
    9810:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    9814:	ae 01       	movw	r20, r28
    9816:	4f 5f       	subi	r20, 0xFF	; 255
    9818:	5f 4f       	sbci	r21, 0xFF	; 255
    981a:	be 01       	movw	r22, r28
    981c:	6f 5b       	subi	r22, 0xBF	; 191
    981e:	7f 4f       	sbci	r23, 0xFF	; 255
    9820:	8f e8       	ldi	r24, 0x8F	; 143
    9822:	9d e0       	ldi	r25, 0x0D	; 13
    9824:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9828:	6d e0       	ldi	r22, 0x0D	; 13
    982a:	74 e0       	ldi	r23, 0x04	; 4
    982c:	ce 01       	movw	r24, r28
    982e:	8f 5b       	subi	r24, 0xBF	; 191
    9830:	9f 4f       	sbci	r25, 0xFF	; 255
    9832:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
itoa():
    9836:	4a e0       	ldi	r20, 0x0A	; 10
    9838:	be 01       	movw	r22, r28
    983a:	6f 5f       	subi	r22, 0xFF	; 255
    983c:	7f 4f       	sbci	r23, 0xFF	; 255
    983e:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <light_curr>
    9842:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <light_curr+0x1>
    9846:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    984a:	ae 01       	movw	r20, r28
    984c:	4f 5f       	subi	r20, 0xFF	; 255
    984e:	5f 4f       	sbci	r21, 0xFF	; 255
    9850:	be 01       	movw	r22, r28
    9852:	6f 5b       	subi	r22, 0xBF	; 191
    9854:	7f 4f       	sbci	r23, 0xFF	; 255
    9856:	8f e8       	ldi	r24, 0x8F	; 143
    9858:	9d e0       	ldi	r25, 0x0D	; 13
    985a:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    985e:	6f e1       	ldi	r22, 0x1F	; 31
    9860:	74 e0       	ldi	r23, 0x04	; 4
    9862:	ce 01       	movw	r24, r28
    9864:	8f 5b       	subi	r24, 0xBF	; 191
    9866:	9f 4f       	sbci	r25, 0xFF	; 255
    9868:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    986c:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <auto_jas>
itoa():
    9870:	4a e0       	ldi	r20, 0x0A	; 10
    9872:	be 01       	movw	r22, r28
    9874:	6f 5f       	subi	r22, 0xFF	; 255
    9876:	7f 4f       	sbci	r23, 0xFF	; 255
    9878:	90 e0       	ldi	r25, 0x00	; 0
    987a:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    987e:	ae 01       	movw	r20, r28
    9880:	4f 5f       	subi	r20, 0xFF	; 255
    9882:	5f 4f       	sbci	r21, 0xFF	; 255
    9884:	be 01       	movw	r22, r28
    9886:	6f 5b       	subi	r22, 0xBF	; 191
    9888:	7f 4f       	sbci	r23, 0xFF	; 255
    988a:	8f e8       	ldi	r24, 0x8F	; 143
    988c:	9d e0       	ldi	r25, 0x0D	; 13
    988e:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9892:	66 e3       	ldi	r22, 0x36	; 54
    9894:	74 e0       	ldi	r23, 0x04	; 4
    9896:	ce 01       	movw	r24, r28
    9898:	8f 5b       	subi	r24, 0xBF	; 191
    989a:	9f 4f       	sbci	r25, 0xFF	; 255
    989c:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
itoa():
    98a0:	4a e0       	ldi	r20, 0x0A	; 10
    98a2:	be 01       	movw	r22, r28
    98a4:	6f 5f       	subi	r22, 0xFF	; 255
    98a6:	7f 4f       	sbci	r23, 0xFF	; 255
    98a8:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <load_min>
    98ac:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <load_min+0x1>
    98b0:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    98b4:	ae 01       	movw	r20, r28
    98b6:	4f 5f       	subi	r20, 0xFF	; 255
    98b8:	5f 4f       	sbci	r21, 0xFF	; 255
    98ba:	be 01       	movw	r22, r28
    98bc:	6f 5b       	subi	r22, 0xBF	; 191
    98be:	7f 4f       	sbci	r23, 0xFF	; 255
    98c0:	8f e8       	ldi	r24, 0x8F	; 143
    98c2:	9d e0       	ldi	r25, 0x0D	; 13
    98c4:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    98c8:	66 e4       	ldi	r22, 0x46	; 70
    98ca:	74 e0       	ldi	r23, 0x04	; 4
    98cc:	ce 01       	movw	r24, r28
    98ce:	8f 5b       	subi	r24, 0xBF	; 191
    98d0:	9f 4f       	sbci	r25, 0xFF	; 255
    98d2:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
itoa():
    98d6:	4a e0       	ldi	r20, 0x0A	; 10
    98d8:	be 01       	movw	r22, r28
    98da:	6f 5f       	subi	r22, 0xFF	; 255
    98dc:	7f 4f       	sbci	r23, 0xFF	; 255
    98de:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <load_max>
    98e2:	90 91 26 0a 	lds	r25, 0x0A26	; 0x800a26 <load_max+0x1>
    98e6:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    98ea:	ae 01       	movw	r20, r28
    98ec:	4f 5f       	subi	r20, 0xFF	; 255
    98ee:	5f 4f       	sbci	r21, 0xFF	; 255
    98f0:	be 01       	movw	r22, r28
    98f2:	6f 5b       	subi	r22, 0xBF	; 191
    98f4:	7f 4f       	sbci	r23, 0xFF	; 255
    98f6:	8f e8       	ldi	r24, 0x8F	; 143
    98f8:	9d e0       	ldi	r25, 0x0D	; 13
    98fa:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    98fe:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <load_max>
    9902:	10 92 26 0a 	sts	0x0A26, r1	; 0x800a26 <load_max+0x1>
    9906:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <load_max+0x2>
    990a:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <load_max+0x3>
    990e:	8f ef       	ldi	r24, 0xFF	; 255
    9910:	9f ef       	ldi	r25, 0xFF	; 255
    9912:	dc 01       	movw	r26, r24
    9914:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <load_min>
    9918:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <load_min+0x1>
    991c:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <load_min+0x2>
    9920:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <load_min+0x3>
    9924:	66 e5       	ldi	r22, 0x56	; 86
    9926:	74 e0       	ldi	r23, 0x04	; 4
    9928:	ce 01       	movw	r24, r28
    992a:	8f 5b       	subi	r24, 0xBF	; 191
    992c:	9f 4f       	sbci	r25, 0xFF	; 255
    992e:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    9932:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
itoa():
    9936:	4a e0       	ldi	r20, 0x0A	; 10
    9938:	be 01       	movw	r22, r28
    993a:	6f 5f       	subi	r22, 0xFF	; 255
    993c:	7f 4f       	sbci	r23, 0xFF	; 255
    993e:	90 e0       	ldi	r25, 0x00	; 0
    9940:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    9944:	ae 01       	movw	r20, r28
    9946:	4f 5f       	subi	r20, 0xFF	; 255
    9948:	5f 4f       	sbci	r21, 0xFF	; 255
    994a:	be 01       	movw	r22, r28
    994c:	6f 5b       	subi	r22, 0xBF	; 191
    994e:	7f 4f       	sbci	r23, 0xFF	; 255
    9950:	8f e8       	ldi	r24, 0x8F	; 143
    9952:	9d e0       	ldi	r25, 0x0D	; 13
    9954:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9958:	6a e6       	ldi	r22, 0x6A	; 106
    995a:	74 e0       	ldi	r23, 0x04	; 4
    995c:	ce 01       	movw	r24, r28
    995e:	8f 5b       	subi	r24, 0xBF	; 191
    9960:	9f 4f       	sbci	r25, 0xFF	; 255
    9962:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    9966:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
itoa():
    996a:	4a e0       	ldi	r20, 0x0A	; 10
    996c:	be 01       	movw	r22, r28
    996e:	6f 5f       	subi	r22, 0xFF	; 255
    9970:	7f 4f       	sbci	r23, 0xFF	; 255
    9972:	90 e0       	ldi	r25, 0x00	; 0
    9974:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    9978:	ae 01       	movw	r20, r28
    997a:	4f 5f       	subi	r20, 0xFF	; 255
    997c:	5f 4f       	sbci	r21, 0xFF	; 255
    997e:	be 01       	movw	r22, r28
    9980:	6f 5b       	subi	r22, 0xBF	; 191
    9982:	7f 4f       	sbci	r23, 0xFF	; 255
    9984:	8f e8       	ldi	r24, 0x8F	; 143
    9986:	9d e0       	ldi	r25, 0x0D	; 13
    9988:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    998c:	6a e7       	ldi	r22, 0x7A	; 122
    998e:	74 e0       	ldi	r23, 0x04	; 4
    9990:	ce 01       	movw	r24, r28
    9992:	8f 5b       	subi	r24, 0xBF	; 191
    9994:	9f 4f       	sbci	r25, 0xFF	; 255
    9996:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    999a:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <use_rtds>
itoa():
    999e:	4a e0       	ldi	r20, 0x0A	; 10
    99a0:	be 01       	movw	r22, r28
    99a2:	6f 5f       	subi	r22, 0xFF	; 255
    99a4:	7f 4f       	sbci	r23, 0xFF	; 255
    99a6:	90 e0       	ldi	r25, 0x00	; 0
    99a8:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    99ac:	ae 01       	movw	r20, r28
    99ae:	4f 5f       	subi	r20, 0xFF	; 255
    99b0:	5f 4f       	sbci	r21, 0xFF	; 255
    99b2:	be 01       	movw	r22, r28
    99b4:	6f 5b       	subi	r22, 0xBF	; 191
    99b6:	7f 4f       	sbci	r23, 0xFF	; 255
    99b8:	8f e8       	ldi	r24, 0x8F	; 143
    99ba:	9d e0       	ldi	r25, 0x0D	; 13
    99bc:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    99c0:	0e 94 e1 4b 	call	0x97c2	; 0x97c2 <time_get_offset()>
itoa():
    99c4:	4a e0       	ldi	r20, 0x0A	; 10
    99c6:	be 01       	movw	r22, r28
    99c8:	6f 5f       	subi	r22, 0xFF	; 255
    99ca:	7f 4f       	sbci	r23, 0xFF	; 255
    99cc:	90 e0       	ldi	r25, 0x00	; 0
    99ce:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z18send_device_statusv():
    99d2:	ae 01       	movw	r20, r28
    99d4:	4f 5f       	subi	r20, 0xFF	; 255
    99d6:	5f 4f       	sbci	r21, 0xFF	; 255
    99d8:	6c e8       	ldi	r22, 0x8C	; 140
    99da:	74 e0       	ldi	r23, 0x04	; 4
    99dc:	8f e8       	ldi	r24, 0x8F	; 143
    99de:	9d e0       	ldi	r25, 0x0D	; 13
    99e0:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    99e4:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <tritri>
    99e8:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <tritri+0x1>
    99ec:	25 e0       	ldi	r18, 0x05	; 5
    99ee:	28 9f       	mul	r18, r24
    99f0:	b0 01       	movw	r22, r0
    99f2:	29 9f       	mul	r18, r25
    99f4:	70 0d       	add	r23, r0
    99f6:	11 24       	eor	r1, r1
    99f8:	90 e0       	ldi	r25, 0x00	; 0
    99fa:	80 e0       	ldi	r24, 0x00	; 0
    99fc:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    9a00:	20 e0       	ldi	r18, 0x00	; 0
    9a02:	30 e0       	ldi	r19, 0x00	; 0
    9a04:	4a e7       	ldi	r20, 0x7A	; 122
    9a06:	54 e4       	ldi	r21, 0x44	; 68
    9a08:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
_Z18send_device_statusv():
    9a0c:	8e 01       	movw	r16, r28
    9a0e:	0f 5f       	subi	r16, 0xFF	; 255
    9a10:	1f 4f       	sbci	r17, 0xFF	; 255
    9a12:	22 e0       	ldi	r18, 0x02	; 2
    9a14:	44 e0       	ldi	r20, 0x04	; 4
    9a16:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    9a1a:	a8 01       	movw	r20, r16
    9a1c:	6c e9       	ldi	r22, 0x9C	; 156
    9a1e:	74 e0       	ldi	r23, 0x04	; 4
    9a20:	8f e8       	ldi	r24, 0x8F	; 143
    9a22:	9d e0       	ldi	r25, 0x0D	; 13
    9a24:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9a28:	60 91 4a 0a 	lds	r22, 0x0A4A	; 0x800a4a <petnula>
    9a2c:	70 91 4b 0a 	lds	r23, 0x0A4B	; 0x800a4b <petnula+0x1>
    9a30:	83 e0       	ldi	r24, 0x03	; 3
    9a32:	66 0f       	add	r22, r22
    9a34:	77 1f       	adc	r23, r23
    9a36:	8a 95       	dec	r24
    9a38:	e1 f7       	brne	.-8      	; 0x9a32 <send_device_status()+0x268>
    9a3a:	90 e0       	ldi	r25, 0x00	; 0
    9a3c:	80 e0       	ldi	r24, 0x00	; 0
    9a3e:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    9a42:	20 e0       	ldi	r18, 0x00	; 0
    9a44:	30 e0       	ldi	r19, 0x00	; 0
    9a46:	4a e7       	ldi	r20, 0x7A	; 122
    9a48:	54 e4       	ldi	r21, 0x44	; 68
    9a4a:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
_Z18send_device_statusv():
    9a4e:	22 e0       	ldi	r18, 0x02	; 2
    9a50:	44 e0       	ldi	r20, 0x04	; 4
    9a52:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    9a56:	a8 01       	movw	r20, r16
    9a58:	6f ea       	ldi	r22, 0xAF	; 175
    9a5a:	74 e0       	ldi	r23, 0x04	; 4
    9a5c:	8f e8       	ldi	r24, 0x8F	; 143
    9a5e:	9d e0       	ldi	r25, 0x0D	; 13
    9a60:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_napetijh():
    9a64:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <dvanact>
    9a68:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <dvanact+0x1>
    9a6c:	29 e3       	ldi	r18, 0x39	; 57
    9a6e:	28 9f       	mul	r18, r24
    9a70:	b0 01       	movw	r22, r0
    9a72:	29 9f       	mul	r18, r25
    9a74:	70 0d       	add	r23, r0
    9a76:	11 24       	eor	r1, r1
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	80 e0       	ldi	r24, 0x00	; 0
    9a7c:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    9a80:	20 e0       	ldi	r18, 0x00	; 0
    9a82:	30 e0       	ldi	r19, 0x00	; 0
    9a84:	4a e7       	ldi	r20, 0x7A	; 122
    9a86:	54 e4       	ldi	r21, 0x44	; 68
    9a88:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
_Z18send_device_statusv():
    9a8c:	22 e0       	ldi	r18, 0x02	; 2
    9a8e:	44 e0       	ldi	r20, 0x04	; 4
    9a90:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    9a94:	a8 01       	movw	r20, r16
    9a96:	62 ec       	ldi	r22, 0xC2	; 194
    9a98:	74 e0       	ldi	r23, 0x04	; 4
    9a9a:	8f e8       	ldi	r24, 0x8F	; 143
    9a9c:	9d e0       	ldi	r25, 0x0D	; 13
    9a9e:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z15prepocet_prouduj():
    9aa2:	60 91 46 0a 	lds	r22, 0x0A46	; 0x800a46 <proud>
    9aa6:	70 91 47 0a 	lds	r23, 0x0A47	; 0x800a47 <proud+0x1>
    9aaa:	90 e0       	ldi	r25, 0x00	; 0
    9aac:	80 e0       	ldi	r24, 0x00	; 0
    9aae:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
_Z18send_device_statusv():
    9ab2:	22 e0       	ldi	r18, 0x02	; 2
    9ab4:	44 e0       	ldi	r20, 0x04	; 4
    9ab6:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    9aba:	a8 01       	movw	r20, r16
    9abc:	65 ed       	ldi	r22, 0xD5	; 213
    9abe:	74 e0       	ldi	r23, 0x04	; 4
    9ac0:	8f e8       	ldi	r24, 0x8F	; 143
    9ac2:	9d e0       	ldi	r25, 0x0D	; 13
    9ac4:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
    9ac8:	c0 58       	subi	r28, 0x80	; 128
    9aca:	df 4f       	sbci	r29, 0xFF	; 255
    9acc:	0f b6       	in	r0, 0x3f	; 63
    9ace:	f8 94       	cli
    9ad0:	de bf       	out	0x3e, r29	; 62
    9ad2:	0f be       	out	0x3f, r0	; 63
    9ad4:	cd bf       	out	0x3d, r28	; 61
    9ad6:	df 91       	pop	r29
    9ad8:	cf 91       	pop	r28
    9ada:	1f 91       	pop	r17
    9adc:	0f 91       	pop	r16
    9ade:	08 95       	ret

00009ae0 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
    9ae0:	cf 93       	push	r28
    9ae2:	df 93       	push	r29
    9ae4:	cd b7       	in	r28, 0x3d	; 61
    9ae6:	de b7       	in	r29, 0x3e	; 62
    9ae8:	c7 54       	subi	r28, 0x47	; 71
    9aea:	d1 09       	sbc	r29, r1
    9aec:	0f b6       	in	r0, 0x3f	; 63
    9aee:	f8 94       	cli
    9af0:	de bf       	out	0x3e, r29	; 62
    9af2:	0f be       	out	0x3f, r0	; 63
    9af4:	cd bf       	out	0x3d, r28	; 61
    9af6:	6c ea       	ldi	r22, 0xAC	; 172
    9af8:	7f e0       	ldi	r23, 0x0F	; 15
    9afa:	ce 01       	movw	r24, r28
    9afc:	01 96       	adiw	r24, 0x01	; 1
    9afe:	0e 94 56 c9 	call	0x192ac	; 0x192ac <NTPClient::NTPClient(UDP&)>
    9b02:	0e 94 e1 4b 	call	0x97c2	; 0x97c2 <time_get_offset()>
    9b06:	48 2f       	mov	r20, r24
    9b08:	6b ed       	ldi	r22, 0xDB	; 219
    9b0a:	7f e0       	ldi	r23, 0x0F	; 15
    9b0c:	ce 01       	movw	r24, r28
    9b0e:	01 96       	adiw	r24, 0x01	; 1
    9b10:	0e 94 f9 85 	call	0x10bf2	; 0x10bf2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>
    9b14:	81 30       	cpi	r24, 0x01	; 1
    9b16:	61 f4       	brne	.+24     	; 0x9b30 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x50>
    9b18:	0e 94 c6 4b 	call	0x978c	; 0x978c <selftest_clear_0(unsigned char)>
    9b1c:	c9 5b       	subi	r28, 0xB9	; 185
    9b1e:	df 4f       	sbci	r29, 0xFF	; 255
    9b20:	0f b6       	in	r0, 0x3f	; 63
    9b22:	f8 94       	cli
    9b24:	de bf       	out	0x3e, r29	; 62
    9b26:	0f be       	out	0x3f, r0	; 63
    9b28:	cd bf       	out	0x3d, r28	; 61
    9b2a:	df 91       	pop	r29
    9b2c:	cf 91       	pop	r28
    9b2e:	08 95       	ret
    9b30:	81 e0       	ldi	r24, 0x01	; 1
    9b32:	0e 94 ba 4b 	call	0x9774	; 0x9774 <selftest_set_0(unsigned char)>
    9b36:	f2 cf       	rjmp	.-28     	; 0x9b1c <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x3c>

00009b38 <time_set_offset(unsigned char)>:
_Z15time_set_offseth():
    9b38:	68 2f       	mov	r22, r24
    9b3a:	81 e0       	ldi	r24, 0x01	; 1
    9b3c:	90 e0       	ldi	r25, 0x00	; 0
    9b3e:	0c 94 b0 38 	jmp	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>

00009b42 <setup_io_pin()>:
_Z12setup_io_pinv():
    9b42:	61 e0       	ldi	r22, 0x01	; 1
    9b44:	86 e0       	ldi	r24, 0x06	; 6
    9b46:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b4a:	61 e0       	ldi	r22, 0x01	; 1
    9b4c:	8f e0       	ldi	r24, 0x0F	; 15
    9b4e:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b52:	61 e0       	ldi	r22, 0x01	; 1
    9b54:	88 e0       	ldi	r24, 0x08	; 8
    9b56:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b5a:	61 e0       	ldi	r22, 0x01	; 1
    9b5c:	8c e0       	ldi	r24, 0x0C	; 12
    9b5e:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b62:	61 e0       	ldi	r22, 0x01	; 1
    9b64:	86 e1       	ldi	r24, 0x16	; 22
    9b66:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b6a:	61 e0       	ldi	r22, 0x01	; 1
    9b6c:	87 e1       	ldi	r24, 0x17	; 23
    9b6e:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b72:	62 e0       	ldi	r22, 0x02	; 2
    9b74:	8e e0       	ldi	r24, 0x0E	; 14
    9b76:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
    9b7a:	60 e0       	ldi	r22, 0x00	; 0
    9b7c:	8c e0       	ldi	r24, 0x0C	; 12
    9b7e:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
    9b82:	68 ee       	ldi	r22, 0xE8	; 232
    9b84:	73 e0       	ldi	r23, 0x03	; 3
    9b86:	80 e0       	ldi	r24, 0x00	; 0
    9b88:	90 e0       	ldi	r25, 0x00	; 0
    9b8a:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
    9b8e:	61 e0       	ldi	r22, 0x01	; 1
    9b90:	8c e0       	ldi	r24, 0x0C	; 12
    9b92:	0c 94 93 cd 	jmp	0x19b26	; 0x19b26 <digitalWrite>

00009b96 <convert_text_mode(char*)>:
_Z17convert_text_modePc():
    9b96:	ef 92       	push	r14
    9b98:	ff 92       	push	r15
    9b9a:	0f 93       	push	r16
    9b9c:	1f 93       	push	r17
    9b9e:	cf 93       	push	r28
    9ba0:	8c 01       	movw	r16, r24
    9ba2:	65 ee       	ldi	r22, 0xE5	; 229
    9ba4:	73 e0       	ldi	r23, 0x03	; 3
    9ba6:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    9baa:	7c 01       	movw	r14, r24
    9bac:	6c ee       	ldi	r22, 0xEC	; 236
    9bae:	74 e0       	ldi	r23, 0x04	; 4
    9bb0:	c8 01       	movw	r24, r16
    9bb2:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    9bb6:	c3 e0       	ldi	r28, 0x03	; 3
    9bb8:	89 2b       	or	r24, r25
    9bba:	21 f0       	breq	.+8      	; 0x9bc4 <convert_text_mode(char*)+0x2e>
    9bbc:	c1 e0       	ldi	r28, 0x01	; 1
    9bbe:	ef 28       	or	r14, r15
    9bc0:	09 f0       	breq	.+2      	; 0x9bc4 <convert_text_mode(char*)+0x2e>
    9bc2:	c0 e0       	ldi	r28, 0x00	; 0
    9bc4:	63 ef       	ldi	r22, 0xF3	; 243
    9bc6:	74 e0       	ldi	r23, 0x04	; 4
    9bc8:	c8 01       	movw	r24, r16
    9bca:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    9bce:	89 2b       	or	r24, r25
    9bd0:	09 f4       	brne	.+2      	; 0x9bd4 <convert_text_mode(char*)+0x3e>
    9bd2:	c2 e0       	ldi	r28, 0x02	; 2
    9bd4:	6b ee       	ldi	r22, 0xEB	; 235
    9bd6:	73 e0       	ldi	r23, 0x03	; 3
    9bd8:	c8 01       	movw	r24, r16
    9bda:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    9bde:	89 2b       	or	r24, r25
    9be0:	09 f4       	brne	.+2      	; 0x9be4 <convert_text_mode(char*)+0x4e>
    9be2:	c4 e0       	ldi	r28, 0x04	; 4
    9be4:	68 ef       	ldi	r22, 0xF8	; 248
    9be6:	74 e0       	ldi	r23, 0x04	; 4
    9be8:	c8 01       	movw	r24, r16
    9bea:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    9bee:	89 2b       	or	r24, r25
    9bf0:	09 f4       	brne	.+2      	; 0x9bf4 <convert_text_mode(char*)+0x5e>
    9bf2:	c6 e0       	ldi	r28, 0x06	; 6
    9bf4:	8c 2f       	mov	r24, r28
    9bf6:	cf 91       	pop	r28
    9bf8:	1f 91       	pop	r17
    9bfa:	0f 91       	pop	r16
    9bfc:	ff 90       	pop	r15
    9bfe:	ef 90       	pop	r14
    9c00:	08 95       	ret

00009c02 <convert_mode_text(unsigned char, char*)>:
_Z17convert_mode_texthPc():
    9c02:	28 2f       	mov	r18, r24
    9c04:	cb 01       	movw	r24, r22
    9c06:	61 e0       	ldi	r22, 0x01	; 1
    9c08:	75 e0       	ldi	r23, 0x05	; 5
    9c0a:	22 23       	and	r18, r18
    9c0c:	21 f0       	breq	.+8      	; 0x9c16 <convert_mode_text(unsigned char, char*)+0x14>
    9c0e:	21 30       	cpi	r18, 0x01	; 1
    9c10:	29 f4       	brne	.+10     	; 0x9c1c <convert_mode_text(unsigned char, char*)+0x1a>
    9c12:	65 ee       	ldi	r22, 0xE5	; 229
    9c14:	73 e0       	ldi	r23, 0x03	; 3
    9c16:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    9c1a:	08 95       	ret
    9c1c:	6c ee       	ldi	r22, 0xEC	; 236
    9c1e:	74 e0       	ldi	r23, 0x04	; 4
    9c20:	23 30       	cpi	r18, 0x03	; 3
    9c22:	61 f0       	breq	.+24     	; 0x9c3c <convert_mode_text(unsigned char, char*)+0x3a>
    9c24:	63 ef       	ldi	r22, 0xF3	; 243
    9c26:	74 e0       	ldi	r23, 0x04	; 4
    9c28:	22 30       	cpi	r18, 0x02	; 2
    9c2a:	41 f0       	breq	.+16     	; 0x9c3c <convert_mode_text(unsigned char, char*)+0x3a>
    9c2c:	6b ee       	ldi	r22, 0xEB	; 235
    9c2e:	73 e0       	ldi	r23, 0x03	; 3
    9c30:	24 30       	cpi	r18, 0x04	; 4
    9c32:	21 f0       	breq	.+8      	; 0x9c3c <convert_mode_text(unsigned char, char*)+0x3a>
    9c34:	26 30       	cpi	r18, 0x06	; 6
    9c36:	21 f4       	brne	.+8      	; 0x9c40 <convert_mode_text(unsigned char, char*)+0x3e>
    9c38:	68 ef       	ldi	r22, 0xF8	; 248
    9c3a:	74 e0       	ldi	r23, 0x04	; 4
    9c3c:	0c 94 88 d7 	jmp	0x1af10	; 0x1af10 <strcpy>
    9c40:	08 95       	ret

00009c42 <send_mqtt_ring()>:
_Z14send_mqtt_ringv():
    9c42:	cf 92       	push	r12
    9c44:	df 92       	push	r13
    9c46:	ff 92       	push	r15
    9c48:	0f 93       	push	r16
    9c4a:	1f 93       	push	r17
    9c4c:	cf 93       	push	r28
    9c4e:	df 93       	push	r29
    9c50:	cd b7       	in	r28, 0x3d	; 61
    9c52:	de b7       	in	r29, 0x3e	; 62
    9c54:	c0 54       	subi	r28, 0x40	; 64
    9c56:	d1 09       	sbc	r29, r1
    9c58:	0f b6       	in	r0, 0x3f	; 63
    9c5a:	f8 94       	cli
    9c5c:	de bf       	out	0x3e, r29	; 62
    9c5e:	0f be       	out	0x3f, r0	; 63
    9c60:	cd bf       	out	0x3d, r28	; 61
    9c62:	8f e4       	ldi	r24, 0x4F	; 79
    9c64:	c8 2e       	mov	r12, r24
    9c66:	8a e0       	ldi	r24, 0x0A	; 10
    9c68:	d8 2e       	mov	r13, r24
    9c6a:	f1 2c       	mov	r15, r1
    9c6c:	8f 2d       	mov	r24, r15
    9c6e:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
    9c72:	8f 3f       	cpi	r24, 0xFF	; 255
    9c74:	09 f4       	brne	.+2      	; 0x9c78 <send_mqtt_ring()+0x36>
    9c76:	b8 c0       	rjmp	.+368    	; 0x9de8 <send_mqtt_ring()+0x1a6>
    9c78:	be 01       	movw	r22, r28
    9c7a:	6f 5f       	subi	r22, 0xFF	; 255
    9c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    9c7e:	8f 2d       	mov	r24, r15
    9c80:	0e 94 cd 8c 	call	0x1199a	; 0x1199a <thermostat_ring_get_name(unsigned char, char*)>
    9c84:	8e 01       	movw	r16, r28
    9c86:	0f 5f       	subi	r16, 0xFF	; 255
    9c88:	1f 4f       	sbci	r17, 0xFF	; 255
    9c8a:	23 e7       	ldi	r18, 0x73	; 115
    9c8c:	33 e0       	ldi	r19, 0x03	; 3
    9c8e:	4f 2d       	mov	r20, r15
    9c90:	65 e6       	ldi	r22, 0x65	; 101
    9c92:	74 e0       	ldi	r23, 0x04	; 4
    9c94:	8f e8       	ldi	r24, 0x8F	; 143
    9c96:	9d e0       	ldi	r25, 0x0D	; 13
    9c98:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9c9c:	8f 2d       	mov	r24, r15
    9c9e:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <thermostat_ring_get_active(unsigned char)>
itoa():
    9ca2:	4a e0       	ldi	r20, 0x0A	; 10
    9ca4:	b8 01       	movw	r22, r16
    9ca6:	90 e0       	ldi	r25, 0x00	; 0
    9ca8:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9cac:	24 e9       	ldi	r18, 0x94	; 148
    9cae:	33 e0       	ldi	r19, 0x03	; 3
    9cb0:	4f 2d       	mov	r20, r15
    9cb2:	65 e6       	ldi	r22, 0x65	; 101
    9cb4:	74 e0       	ldi	r23, 0x04	; 4
    9cb6:	8f e8       	ldi	r24, 0x8F	; 143
    9cb8:	9d e0       	ldi	r25, 0x0D	; 13
    9cba:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9cbe:	8f 2d       	mov	r24, r15
    9cc0:	0e 94 38 8d 	call	0x11a70	; 0x11a70 <thermostat_ring_get_program_id(unsigned char)>
itoa():
    9cc4:	4a e0       	ldi	r20, 0x0A	; 10
    9cc6:	b8 01       	movw	r22, r16
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9cce:	25 e0       	ldi	r18, 0x05	; 5
    9cd0:	35 e0       	ldi	r19, 0x05	; 5
    9cd2:	4f 2d       	mov	r20, r15
    9cd4:	65 e6       	ldi	r22, 0x65	; 101
    9cd6:	74 e0       	ldi	r23, 0x04	; 4
    9cd8:	8f e8       	ldi	r24, 0x8F	; 143
    9cda:	9d e0       	ldi	r25, 0x0D	; 13
    9cdc:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9ce0:	8f 2d       	mov	r24, r15
    9ce2:	0e 94 48 8d 	call	0x11a90	; 0x11a90 <thermostat_ring_get_mezni(unsigned char)>
itoa():
    9ce6:	4a e0       	ldi	r20, 0x0A	; 10
    9ce8:	b8 01       	movw	r22, r16
    9cea:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9cee:	2b ea       	ldi	r18, 0xAB	; 171
    9cf0:	33 e0       	ldi	r19, 0x03	; 3
    9cf2:	4f 2d       	mov	r20, r15
    9cf4:	65 e6       	ldi	r22, 0x65	; 101
    9cf6:	74 e0       	ldi	r23, 0x04	; 4
    9cf8:	8f e8       	ldi	r24, 0x8F	; 143
    9cfa:	9d e0       	ldi	r25, 0x0D	; 13
    9cfc:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9d00:	8f 2d       	mov	r24, r15
    9d02:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
itoa():
    9d06:	4a e0       	ldi	r20, 0x0A	; 10
    9d08:	b8 01       	movw	r22, r16
    9d0a:	90 e0       	ldi	r25, 0x00	; 0
    9d0c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9d10:	22 e1       	ldi	r18, 0x12	; 18
    9d12:	35 e0       	ldi	r19, 0x05	; 5
    9d14:	4f 2d       	mov	r20, r15
    9d16:	65 e6       	ldi	r22, 0x65	; 101
    9d18:	74 e0       	ldi	r23, 0x04	; 4
    9d1a:	8f e8       	ldi	r24, 0x8F	; 143
    9d1c:	9d e0       	ldi	r25, 0x0D	; 13
    9d1e:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9d22:	8f 2d       	mov	r24, r15
    9d24:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
    9d28:	b8 01       	movw	r22, r16
    9d2a:	0e 94 01 4e 	call	0x9c02	; 0x9c02 <convert_mode_text(unsigned char, char*)>
    9d2e:	2d e0       	ldi	r18, 0x0D	; 13
    9d30:	35 e0       	ldi	r19, 0x05	; 5
    9d32:	4f 2d       	mov	r20, r15
    9d34:	65 e6       	ldi	r22, 0x65	; 101
    9d36:	74 e0       	ldi	r23, 0x04	; 4
    9d38:	8f e8       	ldi	r24, 0x8F	; 143
    9d3a:	9d e0       	ldi	r25, 0x0D	; 13
    9d3c:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9d40:	8f 2d       	mov	r24, r15
    9d42:	0e 94 ce 8b 	call	0x1179c	; 0x1179c <thermostat_ring_get_state(unsigned char)>
itoa():
    9d46:	4a e0       	ldi	r20, 0x0A	; 10
    9d48:	b8 01       	movw	r22, r16
    9d4a:	90 e0       	ldi	r25, 0x00	; 0
    9d4c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9d50:	27 e1       	ldi	r18, 0x17	; 23
    9d52:	35 e0       	ldi	r19, 0x05	; 5
    9d54:	4f 2d       	mov	r20, r15
    9d56:	65 e6       	ldi	r22, 0x65	; 101
    9d58:	74 e0       	ldi	r23, 0x04	; 4
    9d5a:	8f e8       	ldi	r24, 0x8F	; 143
    9d5c:	9d e0       	ldi	r25, 0x0D	; 13
    9d5e:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9d62:	8f 2d       	mov	r24, r15
    9d64:	0e 94 7c 8d 	call	0x11af8	; 0x11af8 <thermostat_ring_get_asociate_tds(unsigned char)>
itoa():
    9d68:	4a e0       	ldi	r20, 0x0A	; 10
    9d6a:	b8 01       	movw	r22, r16
    9d6c:	90 e0       	ldi	r25, 0x00	; 0
    9d6e:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9d72:	2e e1       	ldi	r18, 0x1E	; 30
    9d74:	35 e0       	ldi	r19, 0x05	; 5
    9d76:	4f 2d       	mov	r20, r15
    9d78:	65 e6       	ldi	r22, 0x65	; 101
    9d7a:	74 e0       	ldi	r23, 0x04	; 4
    9d7c:	8f e8       	ldi	r24, 0x8F	; 143
    9d7e:	9d e0       	ldi	r25, 0x0D	; 13
    9d80:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9d84:	8f 2d       	mov	r24, r15
    9d86:	0e 94 18 8d 	call	0x11a30	; 0x11a30 <thermostat_ring_get_output(unsigned char)>
itoa():
    9d8a:	4a e0       	ldi	r20, 0x0A	; 10
    9d8c:	b8 01       	movw	r22, r16
    9d8e:	90 e0       	ldi	r25, 0x00	; 0
    9d90:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9d94:	24 e2       	ldi	r18, 0x24	; 36
    9d96:	35 e0       	ldi	r19, 0x05	; 5
    9d98:	4f 2d       	mov	r20, r15
    9d9a:	65 e6       	ldi	r22, 0x65	; 101
    9d9c:	74 e0       	ldi	r23, 0x04	; 4
    9d9e:	8f e8       	ldi	r24, 0x8F	; 143
    9da0:	9d e0       	ldi	r25, 0x0D	; 13
    9da2:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9da6:	8f 2d       	mov	r24, r15
    9da8:	0e 94 a6 8d 	call	0x11b4c	; 0x11b4c <thermostat_ring_get_status_data(unsigned char)>
itoa():
    9dac:	4a e0       	ldi	r20, 0x0A	; 10
    9dae:	b8 01       	movw	r22, r16
    9db0:	90 e0       	ldi	r25, 0x00	; 0
    9db2:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9db6:	2b e2       	ldi	r18, 0x2B	; 43
    9db8:	35 e0       	ldi	r19, 0x05	; 5
    9dba:	4f 2d       	mov	r20, r15
    9dbc:	65 e6       	ldi	r22, 0x65	; 101
    9dbe:	74 e0       	ldi	r23, 0x04	; 4
    9dc0:	8f e8       	ldi	r24, 0x8F	; 143
    9dc2:	9d e0       	ldi	r25, 0x0D	; 13
    9dc4:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9dc8:	f6 01       	movw	r30, r12
    9dca:	80 81       	ld	r24, Z
itoa():
    9dcc:	4a e0       	ldi	r20, 0x0A	; 10
    9dce:	b8 01       	movw	r22, r16
    9dd0:	90 e0       	ldi	r25, 0x00	; 0
    9dd2:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z14send_mqtt_ringv():
    9dd6:	28 e3       	ldi	r18, 0x38	; 56
    9dd8:	35 e0       	ldi	r19, 0x05	; 5
    9dda:	4f 2d       	mov	r20, r15
    9ddc:	65 e6       	ldi	r22, 0x65	; 101
    9dde:	74 e0       	ldi	r23, 0x04	; 4
    9de0:	8f e8       	ldi	r24, 0x8F	; 143
    9de2:	9d e0       	ldi	r25, 0x0D	; 13
    9de4:	0e 94 98 82 	call	0x10530	; 0x10530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>
    9de8:	f3 94       	inc	r15
    9dea:	ff ef       	ldi	r31, 0xFF	; 255
    9dec:	cf 1a       	sub	r12, r31
    9dee:	df 0a       	sbc	r13, r31
    9df0:	85 e0       	ldi	r24, 0x05	; 5
    9df2:	f8 12       	cpse	r15, r24
    9df4:	3b cf       	rjmp	.-394    	; 0x9c6c <send_mqtt_ring()+0x2a>
    9df6:	c0 5c       	subi	r28, 0xC0	; 192
    9df8:	df 4f       	sbci	r29, 0xFF	; 255
    9dfa:	0f b6       	in	r0, 0x3f	; 63
    9dfc:	f8 94       	cli
    9dfe:	de bf       	out	0x3e, r29	; 62
    9e00:	0f be       	out	0x3f, r0	; 63
    9e02:	cd bf       	out	0x3d, r28	; 61
    9e04:	df 91       	pop	r29
    9e06:	cf 91       	pop	r28
    9e08:	1f 91       	pop	r17
    9e0a:	0f 91       	pop	r16
    9e0c:	ff 90       	pop	r15
    9e0e:	df 90       	pop	r13
    9e10:	cf 90       	pop	r12
    9e12:	08 95       	ret

00009e14 <convert_mode_text_1(unsigned char, char*)>:
_Z19convert_mode_text_1hPc():
    9e14:	28 2f       	mov	r18, r24
    9e16:	cb 01       	movw	r24, r22
    9e18:	61 e4       	ldi	r22, 0x41	; 65
    9e1a:	79 e5       	ldi	r23, 0x59	; 89
    9e1c:	22 23       	and	r18, r18
    9e1e:	61 f0       	breq	.+24     	; 0x9e38 <convert_mode_text_1(unsigned char, char*)+0x24>
    9e20:	67 e2       	ldi	r22, 0x27	; 39
    9e22:	79 e5       	ldi	r23, 0x59	; 89
    9e24:	21 30       	cpi	r18, 0x01	; 1
    9e26:	41 f0       	breq	.+16     	; 0x9e38 <convert_mode_text_1(unsigned char, char*)+0x24>
    9e28:	69 ed       	ldi	r22, 0xD9	; 217
    9e2a:	78 e5       	ldi	r23, 0x58	; 88
    9e2c:	23 30       	cpi	r18, 0x03	; 3
    9e2e:	21 f0       	breq	.+8      	; 0x9e38 <convert_mode_text_1(unsigned char, char*)+0x24>
    9e30:	22 30       	cpi	r18, 0x02	; 2
    9e32:	29 f4       	brne	.+10     	; 0x9e3e <convert_mode_text_1(unsigned char, char*)+0x2a>
    9e34:	61 ef       	ldi	r22, 0xF1	; 241
    9e36:	78 e5       	ldi	r23, 0x58	; 88
    9e38:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    9e3c:	08 95       	ret
    9e3e:	24 30       	cpi	r18, 0x04	; 4
    9e40:	21 f4       	brne	.+8      	; 0x9e4a <convert_mode_text_1(unsigned char, char*)+0x36>
    9e42:	69 ed       	ldi	r22, 0xD9	; 217
    9e44:	78 e5       	ldi	r23, 0x58	; 88
    9e46:	0c 94 55 d7 	jmp	0x1aeaa	; 0x1aeaa <strcpy_P>
    9e4a:	66 eb       	ldi	r22, 0xB6	; 182
    9e4c:	78 e5       	ldi	r23, 0x58	; 88
    9e4e:	26 30       	cpi	r18, 0x06	; 6
    9e50:	d1 f3       	breq	.-12     	; 0x9e46 <convert_mode_text_1(unsigned char, char*)+0x32>
    9e52:	28 30       	cpi	r18, 0x08	; 8
    9e54:	b1 f3       	breq	.-20     	; 0x9e42 <convert_mode_text_1(unsigned char, char*)+0x2e>
    9e56:	27 30       	cpi	r18, 0x07	; 7
    9e58:	19 f4       	brne	.+6      	; 0x9e60 <convert_mode_text_1(unsigned char, char*)+0x4c>
    9e5a:	6d e0       	ldi	r22, 0x0D	; 13
    9e5c:	79 e5       	ldi	r23, 0x59	; 89
    9e5e:	f3 cf       	rjmp	.-26     	; 0x9e46 <convert_mode_text_1(unsigned char, char*)+0x32>
    9e60:	08 95       	ret

00009e62 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
    9e62:	0f 93       	push	r16
    9e64:	1f 93       	push	r17
    9e66:	c9 01       	movw	r24, r18
    9e68:	68 ea       	ldi	r22, 0xA8	; 168
    9e6a:	79 e5       	ldi	r23, 0x59	; 89
    9e6c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    9e70:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <default_ring>
    9e74:	8f 3f       	cpi	r24, 0xFF	; 255
    9e76:	39 f0       	breq	.+14     	; 0x9e86 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
    9e78:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
    9e7c:	b8 01       	movw	r22, r16
    9e7e:	1f 91       	pop	r17
    9e80:	0f 91       	pop	r16
    9e82:	0c 94 0a 4f 	jmp	0x9e14	; 0x9e14 <convert_mode_text_1(unsigned char, char*)>
    9e86:	65 e2       	ldi	r22, 0x25	; 37
    9e88:	76 e5       	ldi	r23, 0x56	; 86
    9e8a:	c8 01       	movw	r24, r16
    9e8c:	1f 91       	pop	r17
    9e8e:	0f 91       	pop	r16
    9e90:	0c 94 55 d7 	jmp	0x1aeaa	; 0x1aeaa <strcpy_P>

00009e94 <thermostat()>:
_Z10thermostatv():
    9e94:	af 92       	push	r10
    9e96:	bf 92       	push	r11
    9e98:	cf 92       	push	r12
    9e9a:	df 92       	push	r13
    9e9c:	ef 92       	push	r14
    9e9e:	ff 92       	push	r15
    9ea0:	0f 93       	push	r16
    9ea2:	1f 93       	push	r17
    9ea4:	cf 93       	push	r28
    9ea6:	df 93       	push	r29
    9ea8:	cd b7       	in	r28, 0x3d	; 61
    9eaa:	de b7       	in	r29, 0x3e	; 62
    9eac:	69 97       	sbiw	r28, 0x19	; 25
    9eae:	0f b6       	in	r0, 0x3f	; 63
    9eb0:	f8 94       	cli
    9eb2:	de bf       	out	0x3e, r29	; 62
    9eb4:	0f be       	out	0x3f, r0	; 63
    9eb6:	cd bf       	out	0x3d, r28	; 61
    9eb8:	18 8e       	std	Y+24, r1	; 0x18
    9eba:	1f 8a       	std	Y+23, r1	; 0x17
    9ebc:	19 8e       	std	Y+25, r1	; 0x19
    9ebe:	10 e0       	ldi	r17, 0x00	; 0
    9ec0:	58 ec       	ldi	r21, 0xC8	; 200
    9ec2:	d5 2e       	mov	r13, r21
    9ec4:	6e e1       	ldi	r22, 0x1E	; 30
    9ec6:	b6 2e       	mov	r11, r22
    9ec8:	81 2f       	mov	r24, r17
    9eca:	0e 94 7c 8d 	call	0x11af8	; 0x11af8 <thermostat_ring_get_asociate_tds(unsigned char)>
    9ece:	e8 2e       	mov	r14, r24
    9ed0:	81 2f       	mov	r24, r17
    9ed2:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
    9ed6:	f8 2e       	mov	r15, r24
    9ed8:	81 2f       	mov	r24, r17
    9eda:	0e 94 18 8d 	call	0x11a30	; 0x11a30 <thermostat_ring_get_output(unsigned char)>
    9ede:	c8 2e       	mov	r12, r24
    9ee0:	81 2f       	mov	r24, r17
    9ee2:	0e 94 48 8d 	call	0x11a90	; 0x11a90 <thermostat_ring_get_mezni(unsigned char)>
    9ee6:	98 8f       	std	Y+24, r25	; 0x18
    9ee8:	8f 8b       	std	Y+23, r24	; 0x17
    9eea:	82 e0       	ldi	r24, 0x02	; 2
    9eec:	f8 12       	cpse	r15, r24
    9eee:	9b c0       	rjmp	.+310    	; 0xa026 <thermostat()+0x192>
    9ef0:	81 2f       	mov	r24, r17
    9ef2:	0e 94 38 8d 	call	0x11a70	; 0x11a70 <thermostat_ring_get_program_id(unsigned char)>
    9ef6:	a8 2e       	mov	r10, r24
    9ef8:	84 ed       	ldi	r24, 0xD4	; 212
    9efa:	9f e0       	ldi	r25, 0x0F	; 15
    9efc:	0e 94 08 c2 	call	0x18410	; 0x18410 <DateTime::dayOfTheWeek() const>
    9f00:	08 2f       	mov	r16, r24
    9f02:	20 91 d8 0f 	lds	r18, 0x0FD8	; 0x800fd8 <now+0x4>
    9f06:	40 91 d7 0f 	lds	r20, 0x0FD7	; 0x800fd7 <now+0x3>
    9f0a:	be 01       	movw	r22, r28
    9f0c:	69 5e       	subi	r22, 0xE9	; 233
    9f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f10:	8a 2d       	mov	r24, r10
    9f12:	0e 94 e7 90 	call	0x121ce	; 0x121ce <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>
    9f16:	8e 3f       	cpi	r24, 0xFE	; 254
    9f18:	09 f4       	brne	.+2      	; 0x9f1c <thermostat()+0x88>
    9f1a:	69 c0       	rjmp	.+210    	; 0x9fee <thermostat()+0x15a>
    9f1c:	08 f0       	brcs	.+2      	; 0x9f20 <thermostat()+0x8c>
    9f1e:	5f c0       	rjmp	.+190    	; 0x9fde <thermostat()+0x14a>
    9f20:	8d 3f       	cpi	r24, 0xFD	; 253
    9f22:	09 f4       	brne	.+2      	; 0x9f26 <thermostat()+0x92>
    9f24:	6e c0       	rjmp	.+220    	; 0xa002 <thermostat()+0x16e>
    9f26:	85 e0       	ldi	r24, 0x05	; 5
    9f28:	8e 15       	cp	r24, r14
    9f2a:	e8 f1       	brcs	.+122    	; 0x9fa6 <thermostat()+0x112>
    9f2c:	be 01       	movw	r22, r28
    9f2e:	6f 5f       	subi	r22, 0xFF	; 255
    9f30:	7f 4f       	sbci	r23, 0xFF	; 255
    9f32:	8e 2d       	mov	r24, r14
    9f34:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    9f38:	81 30       	cpi	r24, 0x01	; 1
    9f3a:	a9 f5       	brne	.+106    	; 0x9fa6 <thermostat()+0x112>
    9f3c:	89 81       	ldd	r24, Y+1	; 0x01
    9f3e:	81 30       	cpi	r24, 0x01	; 1
    9f40:	09 f0       	breq	.+2      	; 0x9f44 <thermostat()+0xb0>
    9f42:	7e c0       	rjmp	.+252    	; 0xa040 <thermostat()+0x1ac>
    9f44:	be 9c       	mul	r11, r14
    9f46:	f0 01       	movw	r30, r0
    9f48:	11 24       	eor	r1, r1
    9f4a:	e6 5e       	subi	r30, 0xE6	; 230
    9f4c:	fe 4e       	sbci	r31, 0xEE	; 238
    9f4e:	83 8d       	ldd	r24, Z+27	; 0x1b
    9f50:	81 30       	cpi	r24, 0x01	; 1
    9f52:	09 f0       	breq	.+2      	; 0x9f56 <thermostat()+0xc2>
    9f54:	75 c0       	rjmp	.+234    	; 0xa040 <thermostat()+0x1ac>
    9f56:	65 81       	ldd	r22, Z+5	; 0x05
    9f58:	76 81       	ldd	r23, Z+6	; 0x06
    9f5a:	07 2e       	mov	r0, r23
    9f5c:	00 0c       	add	r0, r0
    9f5e:	88 0b       	sbc	r24, r24
    9f60:	99 0b       	sbc	r25, r25
    9f62:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    9f66:	20 e0       	ldi	r18, 0x00	; 0
    9f68:	30 e0       	ldi	r19, 0x00	; 0
    9f6a:	48 ec       	ldi	r20, 0xC8	; 200
    9f6c:	52 e4       	ldi	r21, 0x42	; 66
    9f6e:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    9f72:	ab 01       	movw	r20, r22
    9f74:	bc 01       	movw	r22, r24
    9f76:	81 2f       	mov	r24, r17
    9f78:	0e 94 8d 8c 	call	0x1191a	; 0x1191a <thermostat_pid_input(unsigned char, double)>
    9f7c:	6f 89       	ldd	r22, Y+23	; 0x17
    9f7e:	78 8d       	ldd	r23, Y+24	; 0x18
    9f80:	07 2e       	mov	r0, r23
    9f82:	00 0c       	add	r0, r0
    9f84:	88 0b       	sbc	r24, r24
    9f86:	99 0b       	sbc	r25, r25
    9f88:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    9f8c:	ab 01       	movw	r20, r22
    9f8e:	bc 01       	movw	r22, r24
    9f90:	81 2f       	mov	r24, r17
    9f92:	0e 94 98 8c 	call	0x11930	; 0x11930 <thermostat_pid_setpoint(unsigned char, double)>
    9f96:	81 2f       	mov	r24, r17
    9f98:	0e 94 a3 8c 	call	0x11946	; 0x11946 <thermostat_pid_output(unsigned char)>
    9f9c:	d8 2e       	mov	r13, r24
    9f9e:	68 2f       	mov	r22, r24
    9fa0:	81 2f       	mov	r24, r17
    9fa2:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    9fa6:	0a ef       	ldi	r16, 0xFA	; 250
    9fa8:	0e 0d       	add	r16, r14
    9faa:	0a 30       	cpi	r16, 0x0A	; 10
    9fac:	08 f0       	brcs	.+2      	; 0x9fb0 <thermostat()+0x11c>
    9fae:	7f c0       	rjmp	.+254    	; 0xa0ae <thermostat()+0x21a>
    9fb0:	be 01       	movw	r22, r28
    9fb2:	67 5e       	subi	r22, 0xE7	; 231
    9fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    9fb6:	80 2f       	mov	r24, r16
    9fb8:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    9fbc:	89 8d       	ldd	r24, Y+25	; 0x19
    9fbe:	81 30       	cpi	r24, 0x01	; 1
    9fc0:	09 f4       	brne	.+2      	; 0x9fc4 <thermostat()+0x130>
    9fc2:	46 c0       	rjmp	.+140    	; 0xa050 <thermostat()+0x1bc>
    9fc4:	60 e0       	ldi	r22, 0x00	; 0
    9fc6:	81 2f       	mov	r24, r17
    9fc8:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    9fcc:	9e ef       	ldi	r25, 0xFE	; 254
    9fce:	f9 2e       	mov	r15, r25
    9fd0:	d1 2c       	mov	r13, r1
    9fd2:	4d 2d       	mov	r20, r13
    9fd4:	6f 2d       	mov	r22, r15
    9fd6:	8c 2d       	mov	r24, r12
    9fd8:	0e 94 4d 4b 	call	0x969a	; 0x969a <mqtt_publis_output_pwm(unsigned char, unsigned char, unsigned char)>
    9fdc:	72 c0       	rjmp	.+228    	; 0xa0c2 <thermostat()+0x22e>
    9fde:	60 e0       	ldi	r22, 0x00	; 0
    9fe0:	81 2f       	mov	r24, r17
    9fe2:	0e 94 d4 8b 	call	0x117a8	; 0x117a8 <thermostat_ring_set_state(unsigned char, unsigned char)>
    9fe6:	60 e0       	ldi	r22, 0x00	; 0
    9fe8:	81 2f       	mov	r24, r17
    9fea:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    9fee:	60 e0       	ldi	r22, 0x00	; 0
    9ff0:	81 2f       	mov	r24, r17
    9ff2:	0e 94 d4 8b 	call	0x117a8	; 0x117a8 <thermostat_ring_set_state(unsigned char, unsigned char)>
    9ff6:	60 e0       	ldi	r22, 0x00	; 0
    9ff8:	81 2f       	mov	r24, r17
    9ffa:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    9ffe:	f1 2c       	mov	r15, r1
    a000:	92 cf       	rjmp	.-220    	; 0x9f26 <thermostat()+0x92>
    a002:	61 e0       	ldi	r22, 0x01	; 1
    a004:	81 2f       	mov	r24, r17
    a006:	0e 94 d4 8b 	call	0x117a8	; 0x117a8 <thermostat_ring_set_state(unsigned char, unsigned char)>
    a00a:	8a 2d       	mov	r24, r10
    a00c:	0e 94 4a 8f 	call	0x11e94	; 0x11e94 <thermostat_program_get_active(unsigned char)>
    a010:	81 30       	cpi	r24, 0x01	; 1
    a012:	61 f0       	breq	.+24     	; 0xa02c <thermostat()+0x198>
    a014:	82 30       	cpi	r24, 0x02	; 2
    a016:	09 f0       	breq	.+2      	; 0xa01a <thermostat()+0x186>
    a018:	87 c0       	rjmp	.+270    	; 0xa128 <thermostat()+0x294>
    a01a:	81 2f       	mov	r24, r17
    a01c:	0e 94 72 8c 	call	0x118e4	; 0x118e4 <thermostat_pid_setdirection_reverse(unsigned char)>
    a020:	45 e0       	ldi	r20, 0x05	; 5
    a022:	f4 2e       	mov	r15, r20
    a024:	80 cf       	rjmp	.-256    	; 0x9f26 <thermostat()+0x92>
    a026:	83 e0       	ldi	r24, 0x03	; 3
    a028:	f8 12       	cpse	r15, r24
    a02a:	06 c0       	rjmp	.+12     	; 0xa038 <thermostat()+0x1a4>
    a02c:	81 2f       	mov	r24, r17
    a02e:	0e 94 62 8c 	call	0x118c4	; 0x118c4 <thermostat_pid_setdirection_direct(unsigned char)>
    a032:	33 e0       	ldi	r19, 0x03	; 3
    a034:	f3 2e       	mov	r15, r19
    a036:	77 cf       	rjmp	.-274    	; 0x9f26 <thermostat()+0x92>
    a038:	85 e0       	ldi	r24, 0x05	; 5
    a03a:	f8 12       	cpse	r15, r24
    a03c:	74 cf       	rjmp	.-280    	; 0x9f26 <thermostat()+0x92>
    a03e:	ed cf       	rjmp	.-38     	; 0xa01a <thermostat()+0x186>
    a040:	60 e0       	ldi	r22, 0x00	; 0
    a042:	81 2f       	mov	r24, r17
    a044:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a048:	d1 2c       	mov	r13, r1
    a04a:	2e ef       	ldi	r18, 0xFE	; 254
    a04c:	f2 2e       	mov	r15, r18
    a04e:	ab cf       	rjmp	.-170    	; 0x9fa6 <thermostat()+0x112>
    a050:	80 2f       	mov	r24, r16
    a052:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <remote_tds_get_last_update(unsigned char)>
    a056:	84 3b       	cpi	r24, 0xB4	; 180
    a058:	08 f0       	brcs	.+2      	; 0xa05c <thermostat()+0x1c8>
    a05a:	b4 cf       	rjmp	.-152    	; 0x9fc4 <thermostat()+0x130>
    a05c:	80 2f       	mov	r24, r16
    a05e:	0e 94 fd 44 	call	0x89fa	; 0x89fa <remote_tds_get_data(unsigned char)>
    a062:	bc 01       	movw	r22, r24
    a064:	99 0f       	add	r25, r25
    a066:	88 0b       	sbc	r24, r24
    a068:	99 0b       	sbc	r25, r25
    a06a:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    a06e:	20 e0       	ldi	r18, 0x00	; 0
    a070:	30 e0       	ldi	r19, 0x00	; 0
    a072:	4a e7       	ldi	r20, 0x7A	; 122
    a074:	54 e4       	ldi	r21, 0x44	; 68
    a076:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    a07a:	ab 01       	movw	r20, r22
    a07c:	bc 01       	movw	r22, r24
    a07e:	81 2f       	mov	r24, r17
    a080:	0e 94 8d 8c 	call	0x1191a	; 0x1191a <thermostat_pid_input(unsigned char, double)>
    a084:	6f 89       	ldd	r22, Y+23	; 0x17
    a086:	78 8d       	ldd	r23, Y+24	; 0x18
    a088:	07 2e       	mov	r0, r23
    a08a:	00 0c       	add	r0, r0
    a08c:	88 0b       	sbc	r24, r24
    a08e:	99 0b       	sbc	r25, r25
    a090:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    a094:	ab 01       	movw	r20, r22
    a096:	bc 01       	movw	r22, r24
    a098:	81 2f       	mov	r24, r17
    a09a:	0e 94 98 8c 	call	0x11930	; 0x11930 <thermostat_pid_setpoint(unsigned char, double)>
    a09e:	81 2f       	mov	r24, r17
    a0a0:	0e 94 a3 8c 	call	0x11946	; 0x11946 <thermostat_pid_output(unsigned char)>
    a0a4:	d8 2e       	mov	r13, r24
    a0a6:	68 2f       	mov	r22, r24
    a0a8:	81 2f       	mov	r24, r17
    a0aa:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a0ae:	f1 10       	cpse	r15, r1
    a0b0:	1d c0       	rjmp	.+58     	; 0xa0ec <thermostat()+0x258>
    a0b2:	6e ef       	ldi	r22, 0xFE	; 254
    a0b4:	8c 2d       	mov	r24, r12
    a0b6:	0e 94 f9 4a 	call	0x95f2	; 0x95f2 <mqtt_publis_output(unsigned char, unsigned char)>
    a0ba:	60 e0       	ldi	r22, 0x00	; 0
    a0bc:	81 2f       	mov	r24, r17
    a0be:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    a0c2:	1f 5f       	subi	r17, 0xFF	; 255
    a0c4:	15 30       	cpi	r17, 0x05	; 5
    a0c6:	09 f0       	breq	.+2      	; 0xa0ca <thermostat()+0x236>
    a0c8:	ff ce       	rjmp	.-514    	; 0x9ec8 <thermostat()+0x34>
    a0ca:	69 96       	adiw	r28, 0x19	; 25
    a0cc:	0f b6       	in	r0, 0x3f	; 63
    a0ce:	f8 94       	cli
    a0d0:	de bf       	out	0x3e, r29	; 62
    a0d2:	0f be       	out	0x3f, r0	; 63
    a0d4:	cd bf       	out	0x3d, r28	; 61
    a0d6:	df 91       	pop	r29
    a0d8:	cf 91       	pop	r28
    a0da:	1f 91       	pop	r17
    a0dc:	0f 91       	pop	r16
    a0de:	ff 90       	pop	r15
    a0e0:	ef 90       	pop	r14
    a0e2:	df 90       	pop	r13
    a0e4:	cf 90       	pop	r12
    a0e6:	bf 90       	pop	r11
    a0e8:	af 90       	pop	r10
    a0ea:	08 95       	ret
    a0ec:	81 e0       	ldi	r24, 0x01	; 1
    a0ee:	6a e0       	ldi	r22, 0x0A	; 10
    a0f0:	f8 16       	cp	r15, r24
    a0f2:	21 f0       	breq	.+8      	; 0xa0fc <thermostat()+0x268>
    a0f4:	84 e0       	ldi	r24, 0x04	; 4
    a0f6:	f8 12       	cpse	r15, r24
    a0f8:	06 c0       	rjmp	.+12     	; 0xa106 <thermostat()+0x272>
    a0fa:	6b e0       	ldi	r22, 0x0B	; 11
    a0fc:	8c 2d       	mov	r24, r12
    a0fe:	0e 94 f9 4a 	call	0x95f2	; 0x95f2 <mqtt_publis_output(unsigned char, unsigned char)>
    a102:	6f ef       	ldi	r22, 0xFF	; 255
    a104:	db cf       	rjmp	.-74     	; 0xa0bc <thermostat()+0x228>
    a106:	83 e0       	ldi	r24, 0x03	; 3
    a108:	f8 16       	cp	r15, r24
    a10a:	09 f4       	brne	.+2      	; 0xa10e <thermostat()+0x27a>
    a10c:	62 cf       	rjmp	.-316    	; 0x9fd2 <thermostat()+0x13e>
    a10e:	85 e0       	ldi	r24, 0x05	; 5
    a110:	f8 16       	cp	r15, r24
    a112:	09 f4       	brne	.+2      	; 0xa116 <thermostat()+0x282>
    a114:	5e cf       	rjmp	.-324    	; 0x9fd2 <thermostat()+0x13e>
    a116:	86 e0       	ldi	r24, 0x06	; 6
    a118:	f8 16       	cp	r15, r24
    a11a:	09 f4       	brne	.+2      	; 0xa11e <thermostat()+0x28a>
    a11c:	5a cf       	rjmp	.-332    	; 0x9fd2 <thermostat()+0x13e>
    a11e:	8e ef       	ldi	r24, 0xFE	; 254
    a120:	f8 16       	cp	r15, r24
    a122:	09 f4       	brne	.+2      	; 0xa126 <thermostat()+0x292>
    a124:	56 cf       	rjmp	.-340    	; 0x9fd2 <thermostat()+0x13e>
    a126:	cd cf       	rjmp	.-102    	; 0xa0c2 <thermostat()+0x22e>
    a128:	83 30       	cpi	r24, 0x03	; 3
    a12a:	09 f0       	breq	.+2      	; 0xa12e <thermostat()+0x29a>
    a12c:	fc ce       	rjmp	.-520    	; 0x9f26 <thermostat()+0x92>
    a12e:	86 e0       	ldi	r24, 0x06	; 6
    a130:	f8 2e       	mov	r15, r24
    a132:	f9 ce       	rjmp	.-526    	; 0x9f26 <thermostat()+0x92>

0000a134 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
    a134:	cf 93       	push	r28
    a136:	df 93       	push	r29
    a138:	fc 01       	movw	r30, r24
    a13a:	eb 01       	movw	r28, r22
    a13c:	22 23       	and	r18, r18
    a13e:	89 f1       	breq	.+98     	; 0xa1a2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a140:	88 81       	ld	r24, Y
    a142:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <menu_slider_data_max>
    a146:	80 81       	ld	r24, Z
    a148:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <menu_slider_data_min>
    a14c:	20 93 16 0a 	sts	0x0A16, r18	; 0x800a16 <menu_slider_data_max_element>
    a150:	a4 2f       	mov	r26, r20
    a152:	b0 e0       	ldi	r27, 0x00	; 0
    a154:	a7 5e       	subi	r26, 0xE7	; 231
    a156:	b5 4f       	sbci	r27, 0xF5	; 245
    a158:	ac 91       	ld	r26, X
    a15a:	a0 83       	st	Z, r26
    a15c:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <menu_slider_data_max>
    a160:	48 2f       	mov	r20, r24
    a162:	50 e0       	ldi	r21, 0x00	; 0
    a164:	a2 0f       	add	r26, r18
    a166:	bb 27       	eor	r27, r27
    a168:	bb 1f       	adc	r27, r27
    a16a:	4a 17       	cp	r20, r26
    a16c:	5b 07       	cpc	r21, r27
    a16e:	5c f4       	brge	.+22     	; 0xa186 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a170:	90 91 17 0a 	lds	r25, 0x0A17	; 0x800a17 <menu_slider_data_min>
    a174:	49 1b       	sub	r20, r25
    a176:	51 09       	sbc	r21, r1
    a178:	90 91 16 0a 	lds	r25, 0x0A16	; 0x800a16 <menu_slider_data_max_element>
    a17c:	94 17       	cp	r25, r20
    a17e:	15 06       	cpc	r1, r21
    a180:	14 f4       	brge	.+4      	; 0xa186 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x52>
    a182:	82 1b       	sub	r24, r18
    a184:	80 83       	st	Z, r24
    a186:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <menu_slider_data_max>
    a18a:	90 81       	ld	r25, Z
    a18c:	89 17       	cp	r24, r25
    a18e:	08 f4       	brcc	.+2      	; 0xa192 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x5e>
    a190:	80 83       	st	Z, r24
    a192:	80 81       	ld	r24, Z
    a194:	82 0f       	add	r24, r18
    a196:	88 83       	st	Y, r24
    a198:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <menu_slider_data_max>
    a19c:	28 17       	cp	r18, r24
    a19e:	08 f0       	brcs	.+2      	; 0xa1a2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x6e>
    a1a0:	88 83       	st	Y, r24
    a1a2:	df 91       	pop	r29
    a1a4:	cf 91       	pop	r28
    a1a6:	08 95       	ret

0000a1a8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
    a1a8:	2f 92       	push	r2
    a1aa:	3f 92       	push	r3
    a1ac:	4f 92       	push	r4
    a1ae:	5f 92       	push	r5
    a1b0:	6f 92       	push	r6
    a1b2:	7f 92       	push	r7
    a1b4:	8f 92       	push	r8
    a1b6:	9f 92       	push	r9
    a1b8:	af 92       	push	r10
    a1ba:	bf 92       	push	r11
    a1bc:	cf 92       	push	r12
    a1be:	df 92       	push	r13
    a1c0:	ef 92       	push	r14
    a1c2:	ff 92       	push	r15
    a1c4:	0f 93       	push	r16
    a1c6:	1f 93       	push	r17
    a1c8:	cf 93       	push	r28
    a1ca:	df 93       	push	r29
    a1cc:	00 d0       	rcall	.+0      	; 0xa1ce <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    a1ce:	00 d0       	rcall	.+0      	; 0xa1d0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x28>
    a1d0:	1f 92       	push	r1
    a1d2:	cd b7       	in	r28, 0x3d	; 61
    a1d4:	de b7       	in	r29, 0x3e	; 62
    a1d6:	1c 01       	movw	r2, r24
    a1d8:	2b 01       	movw	r4, r22
    a1da:	3a 01       	movw	r6, r20
    a1dc:	3a 83       	std	Y+2, r19	; 0x02
    a1de:	29 83       	std	Y+1, r18	; 0x01
    a1e0:	0b 83       	std	Y+3, r16	; 0x03
    a1e2:	9e 2c       	mov	r9, r14
    a1e4:	dd 82       	std	Y+5, r13	; 0x05
    a1e6:	cc 82       	std	Y+4, r12	; 0x04
    a1e8:	bf 82       	std	Y+7, r11	; 0x07
    a1ea:	ae 82       	std	Y+6, r10	; 0x06
    a1ec:	70 e0       	ldi	r23, 0x00	; 0
    a1ee:	60 e0       	ldi	r22, 0x00	; 0
    a1f0:	81 ea       	ldi	r24, 0xA1	; 161
    a1f2:	9b e0       	ldi	r25, 0x0B	; 11
    a1f4:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a1f8:	f1 2c       	mov	r15, r1
    a1fa:	e1 2c       	mov	r14, r1
    a1fc:	a9 80       	ldd	r10, Y+1	; 0x01
    a1fe:	ba 80       	ldd	r11, Y+2	; 0x02
    a200:	a4 0c       	add	r10, r4
    a202:	b5 1c       	adc	r11, r5
    a204:	61 01       	movw	r12, r2
    a206:	c6 0c       	add	r12, r6
    a208:	d7 1c       	adc	r13, r7
    a20a:	85 01       	movw	r16, r10
    a20c:	0e 19       	sub	r16, r14
    a20e:	1f 09       	sbc	r17, r15
    a210:	96 01       	movw	r18, r12
    a212:	2e 19       	sub	r18, r14
    a214:	3f 09       	sbc	r19, r15
    a216:	a7 01       	movw	r20, r14
    a218:	44 0d       	add	r20, r4
    a21a:	55 1d       	adc	r21, r5
    a21c:	b7 01       	movw	r22, r14
    a21e:	62 0d       	add	r22, r2
    a220:	73 1d       	adc	r23, r3
    a222:	81 ea       	ldi	r24, 0xA1	; 161
    a224:	9b e0       	ldi	r25, 0x0B	; 11
    a226:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a22a:	2f ef       	ldi	r18, 0xFF	; 255
    a22c:	e2 1a       	sub	r14, r18
    a22e:	f2 0a       	sbc	r15, r18
    a230:	43 e0       	ldi	r20, 0x03	; 3
    a232:	e4 16       	cp	r14, r20
    a234:	f1 04       	cpc	r15, r1
    a236:	49 f7       	brne	.-46     	; 0xa20a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x62>
    a238:	09 81       	ldd	r16, Y+1	; 0x01
    a23a:	1a 81       	ldd	r17, Y+2	; 0x02
    a23c:	03 50       	subi	r16, 0x03	; 3
    a23e:	11 09       	sbc	r17, r1
    a240:	73 01       	movw	r14, r6
    a242:	53 e0       	ldi	r21, 0x03	; 3
    a244:	e5 1a       	sub	r14, r21
    a246:	f1 08       	sbc	r15, r1
    a248:	81 e0       	ldi	r24, 0x01	; 1
    a24a:	88 12       	cpse	r8, r24
    a24c:	15 c0       	rjmp	.+42     	; 0xa278 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xd0>
    a24e:	6f ef       	ldi	r22, 0xFF	; 255
    a250:	7f ef       	ldi	r23, 0xFF	; 255
    a252:	81 ea       	ldi	r24, 0xA1	; 161
    a254:	9b e0       	ldi	r25, 0x0B	; 11
    a256:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a25a:	04 0d       	add	r16, r4
    a25c:	15 1d       	adc	r17, r5
    a25e:	91 01       	movw	r18, r2
    a260:	2e 0d       	add	r18, r14
    a262:	3f 1d       	adc	r19, r15
    a264:	a2 01       	movw	r20, r4
    a266:	4d 5f       	subi	r20, 0xFD	; 253
    a268:	5f 4f       	sbci	r21, 0xFF	; 255
    a26a:	b1 01       	movw	r22, r2
    a26c:	6d 5f       	subi	r22, 0xFD	; 253
    a26e:	7f 4f       	sbci	r23, 0xFF	; 255
    a270:	81 ea       	ldi	r24, 0xA1	; 161
    a272:	9b e0       	ldi	r25, 0x0B	; 11
    a274:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a278:	ec 81       	ldd	r30, Y+4	; 0x04
    a27a:	fd 81       	ldd	r31, Y+5	; 0x05
    a27c:	80 81       	ld	r24, Z
    a27e:	60 e0       	ldi	r22, 0x00	; 0
    a280:	b1 2c       	mov	r11, r1
    a282:	a1 2c       	mov	r10, r1
    a284:	88 23       	and	r24, r24
    a286:	a1 f1       	breq	.+104    	; 0xa2f0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x148>
    a288:	01 90       	ld	r0, Z+
    a28a:	00 20       	and	r0, r0
    a28c:	e9 f7       	brne	.-6      	; 0xa288 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xe0>
    a28e:	31 97       	sbiw	r30, 0x01	; 1
    a290:	4c 81       	ldd	r20, Y+4	; 0x04
    a292:	5d 81       	ldd	r21, Y+5	; 0x05
    a294:	e4 1b       	sub	r30, r20
    a296:	f5 0b       	sbc	r31, r21
_Z22show_string_size_highth():
    a298:	8b 81       	ldd	r24, Y+3	; 0x03
    a29a:	88 0f       	add	r24, r24
    a29c:	5b 81       	ldd	r21, Y+3	; 0x03
    a29e:	85 0f       	add	r24, r21
    a2a0:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a2a2:	a9 80       	ldd	r10, Y+1	; 0x01
    a2a4:	ba 80       	ldd	r11, Y+2	; 0x02
    a2a6:	a8 1a       	sub	r10, r24
    a2a8:	b1 08       	sbc	r11, r1
    a2aa:	b6 94       	lsr	r11
    a2ac:	a7 94       	ror	r10
    a2ae:	a2 01       	movw	r20, r4
    a2b0:	41 50       	subi	r20, 0x01	; 1
    a2b2:	51 09       	sbc	r21, r1
    a2b4:	4a 0d       	add	r20, r10
    a2b6:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a2b8:	86 e0       	ldi	r24, 0x06	; 6
    a2ba:	e8 9f       	mul	r30, r24
    a2bc:	f0 01       	movw	r30, r0
    a2be:	11 24       	eor	r1, r1
    a2c0:	2b 81       	ldd	r18, Y+3	; 0x03
    a2c2:	2e 9f       	mul	r18, r30
    a2c4:	c0 01       	movw	r24, r0
    a2c6:	2f 9f       	mul	r18, r31
    a2c8:	90 0d       	add	r25, r0
    a2ca:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a2cc:	b3 01       	movw	r22, r6
    a2ce:	68 1b       	sub	r22, r24
    a2d0:	79 0b       	sbc	r23, r25
    a2d2:	76 95       	lsr	r23
    a2d4:	67 95       	ror	r22
    a2d6:	62 0d       	add	r22, r2
    a2d8:	73 1d       	adc	r23, r3
    a2da:	c1 2c       	mov	r12, r1
    a2dc:	ee 24       	eor	r14, r14
    a2de:	ea 94       	dec	r14
    a2e0:	fe 2c       	mov	r15, r14
    a2e2:	10 e0       	ldi	r17, 0x00	; 0
    a2e4:	00 e0       	ldi	r16, 0x00	; 0
    a2e6:	8c 81       	ldd	r24, Y+4	; 0x04
    a2e8:	9d 81       	ldd	r25, Y+5	; 0x05
    a2ea:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a2ee:	62 e0       	ldi	r22, 0x02	; 2
    a2f0:	ee 81       	ldd	r30, Y+6	; 0x06
    a2f2:	ff 81       	ldd	r31, Y+7	; 0x07
    a2f4:	80 81       	ld	r24, Z
    a2f6:	88 23       	and	r24, r24
    a2f8:	d1 f1       	breq	.+116    	; 0xa36e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x1c6>
    a2fa:	01 90       	ld	r0, Z+
    a2fc:	00 20       	and	r0, r0
    a2fe:	e9 f7       	brne	.-6      	; 0xa2fa <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x152>
    a300:	9f 01       	movw	r18, r30
    a302:	21 50       	subi	r18, 0x01	; 1
    a304:	31 09       	sbc	r19, r1
    a306:	4e 81       	ldd	r20, Y+6	; 0x06
    a308:	5f 81       	ldd	r21, Y+7	; 0x07
    a30a:	24 1b       	sub	r18, r20
    a30c:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a30e:	89 2d       	mov	r24, r9
    a310:	88 0f       	add	r24, r24
    a312:	89 0d       	add	r24, r9
    a314:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
    a316:	e9 81       	ldd	r30, Y+1	; 0x01
    a318:	fa 81       	ldd	r31, Y+2	; 0x02
    a31a:	e8 1b       	sub	r30, r24
    a31c:	f1 09       	sbc	r31, r1
    a31e:	cf 01       	movw	r24, r30
    a320:	6e 5f       	subi	r22, 0xFE	; 254
    a322:	70 e0       	ldi	r23, 0x00	; 0
    a324:	0e 94 68 d3 	call	0x1a6d0	; 0x1a6d0 <__udivmodhi4>
    a328:	f1 e0       	ldi	r31, 0x01	; 1
    a32a:	4f 1a       	sub	r4, r31
    a32c:	51 08       	sbc	r5, r1
    a32e:	a4 0c       	add	r10, r4
    a330:	b5 1c       	adc	r11, r5
    a332:	ab 01       	movw	r20, r22
    a334:	4a 0d       	add	r20, r10
    a336:	5b 1d       	adc	r21, r11
_Z22show_string_size_widthhh():
    a338:	86 e0       	ldi	r24, 0x06	; 6
    a33a:	28 9f       	mul	r18, r24
    a33c:	90 01       	movw	r18, r0
    a33e:	11 24       	eor	r1, r1
    a340:	92 9e       	mul	r9, r18
    a342:	c0 01       	movw	r24, r0
    a344:	93 9e       	mul	r9, r19
    a346:	90 0d       	add	r25, r0
    a348:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
    a34a:	b3 01       	movw	r22, r6
    a34c:	68 1b       	sub	r22, r24
    a34e:	79 0b       	sbc	r23, r25
    a350:	76 95       	lsr	r23
    a352:	67 95       	ror	r22
    a354:	62 0d       	add	r22, r2
    a356:	73 1d       	adc	r23, r3
    a358:	c1 2c       	mov	r12, r1
    a35a:	ee 24       	eor	r14, r14
    a35c:	ea 94       	dec	r14
    a35e:	fe 2c       	mov	r15, r14
    a360:	10 e0       	ldi	r17, 0x00	; 0
    a362:	00 e0       	ldi	r16, 0x00	; 0
    a364:	29 2d       	mov	r18, r9
    a366:	8e 81       	ldd	r24, Y+6	; 0x06
    a368:	9f 81       	ldd	r25, Y+7	; 0x07
    a36a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a36e:	27 96       	adiw	r28, 0x07	; 7
    a370:	0f b6       	in	r0, 0x3f	; 63
    a372:	f8 94       	cli
    a374:	de bf       	out	0x3e, r29	; 62
    a376:	0f be       	out	0x3f, r0	; 63
    a378:	cd bf       	out	0x3d, r28	; 61
    a37a:	df 91       	pop	r29
    a37c:	cf 91       	pop	r28
    a37e:	1f 91       	pop	r17
    a380:	0f 91       	pop	r16
    a382:	ff 90       	pop	r15
    a384:	ef 90       	pop	r14
    a386:	df 90       	pop	r13
    a388:	cf 90       	pop	r12
    a38a:	bf 90       	pop	r11
    a38c:	af 90       	pop	r10
    a38e:	9f 90       	pop	r9
    a390:	8f 90       	pop	r8
    a392:	7f 90       	pop	r7
    a394:	6f 90       	pop	r6
    a396:	5f 90       	pop	r5
    a398:	4f 90       	pop	r4
    a39a:	3f 90       	pop	r3
    a39c:	2f 90       	pop	r2
    a39e:	08 95       	ret

0000a3a0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
    a3a0:	2f 92       	push	r2
    a3a2:	3f 92       	push	r3
    a3a4:	4f 92       	push	r4
    a3a6:	5f 92       	push	r5
    a3a8:	6f 92       	push	r6
    a3aa:	7f 92       	push	r7
    a3ac:	8f 92       	push	r8
    a3ae:	9f 92       	push	r9
    a3b0:	af 92       	push	r10
    a3b2:	bf 92       	push	r11
    a3b4:	cf 92       	push	r12
    a3b6:	df 92       	push	r13
    a3b8:	ef 92       	push	r14
    a3ba:	ff 92       	push	r15
    a3bc:	0f 93       	push	r16
    a3be:	1f 93       	push	r17
    a3c0:	cf 93       	push	r28
    a3c2:	df 93       	push	r29
    a3c4:	00 d0       	rcall	.+0      	; 0xa3c6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    a3c6:	1f 92       	push	r1
    a3c8:	1f 92       	push	r1
    a3ca:	cd b7       	in	r28, 0x3d	; 61
    a3cc:	de b7       	in	r29, 0x3e	; 62
    a3ce:	3c 01       	movw	r6, r24
    a3d0:	1b 01       	movw	r2, r22
    a3d2:	54 2e       	mov	r5, r20
    a3d4:	42 2e       	mov	r4, r18
    a3d6:	0b 83       	std	Y+3, r16	; 0x03
    a3d8:	ec 82       	std	Y+4, r14	; 0x04
    a3da:	88 20       	and	r8, r8
    a3dc:	41 f0       	breq	.+16     	; 0xa3ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    a3de:	41 e0       	ldi	r20, 0x01	; 1
    a3e0:	56 01       	movw	r10, r12
    a3e2:	84 16       	cp	r8, r20
    a3e4:	21 f0       	breq	.+8      	; 0xa3ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x4e>
    a3e6:	18 e1       	ldi	r17, 0x18	; 24
    a3e8:	a1 2e       	mov	r10, r17
    a3ea:	06 ec       	ldi	r16, 0xC6	; 198
    a3ec:	b0 2e       	mov	r11, r16
    a3ee:	70 e0       	ldi	r23, 0x00	; 0
    a3f0:	60 e0       	ldi	r22, 0x00	; 0
    a3f2:	81 ea       	ldi	r24, 0xA1	; 161
    a3f4:	9b e0       	ldi	r25, 0x0B	; 11
    a3f6:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a3fa:	f1 2c       	mov	r15, r1
    a3fc:	e1 2c       	mov	r14, r1
    a3fe:	84 2d       	mov	r24, r4
    a400:	90 e0       	ldi	r25, 0x00	; 0
    a402:	9a 83       	std	Y+2, r25	; 0x02
    a404:	89 83       	std	Y+1, r24	; 0x01
    a406:	85 2c       	mov	r8, r5
    a408:	91 2c       	mov	r9, r1
    a40a:	2c 01       	movw	r4, r24
    a40c:	42 0c       	add	r4, r2
    a40e:	53 1c       	adc	r5, r3
    a410:	64 01       	movw	r12, r8
    a412:	c6 0c       	add	r12, r6
    a414:	d7 1c       	adc	r13, r7
    a416:	82 01       	movw	r16, r4
    a418:	0e 19       	sub	r16, r14
    a41a:	1f 09       	sbc	r17, r15
    a41c:	96 01       	movw	r18, r12
    a41e:	2e 19       	sub	r18, r14
    a420:	3f 09       	sbc	r19, r15
    a422:	a1 01       	movw	r20, r2
    a424:	4e 0d       	add	r20, r14
    a426:	5f 1d       	adc	r21, r15
    a428:	b3 01       	movw	r22, r6
    a42a:	6e 0d       	add	r22, r14
    a42c:	7f 1d       	adc	r23, r15
    a42e:	81 ea       	ldi	r24, 0xA1	; 161
    a430:	9b e0       	ldi	r25, 0x0B	; 11
    a432:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a436:	9f ef       	ldi	r25, 0xFF	; 255
    a438:	e9 1a       	sub	r14, r25
    a43a:	f9 0a       	sbc	r15, r25
    a43c:	e3 e0       	ldi	r30, 0x03	; 3
    a43e:	ee 16       	cp	r14, r30
    a440:	f1 04       	cpc	r15, r1
    a442:	49 f7       	brne	.-46     	; 0xa416 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
    a444:	b5 01       	movw	r22, r10
    a446:	81 ea       	ldi	r24, 0xA1	; 161
    a448:	9b e0       	ldi	r25, 0x0B	; 11
    a44a:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a44e:	81 01       	movw	r16, r2
    a450:	03 50       	subi	r16, 0x03	; 3
    a452:	11 09       	sbc	r17, r1
    a454:	49 81       	ldd	r20, Y+1	; 0x01
    a456:	5a 81       	ldd	r21, Y+2	; 0x02
    a458:	04 0f       	add	r16, r20
    a45a:	15 1f       	adc	r17, r21
    a45c:	93 01       	movw	r18, r6
    a45e:	23 50       	subi	r18, 0x03	; 3
    a460:	31 09       	sbc	r19, r1
    a462:	28 0d       	add	r18, r8
    a464:	39 1d       	adc	r19, r9
    a466:	a1 01       	movw	r20, r2
    a468:	4d 5f       	subi	r20, 0xFD	; 253
    a46a:	5f 4f       	sbci	r21, 0xFF	; 255
    a46c:	b3 01       	movw	r22, r6
    a46e:	6d 5f       	subi	r22, 0xFD	; 253
    a470:	7f 4f       	sbci	r23, 0xFF	; 255
    a472:	81 ea       	ldi	r24, 0xA1	; 161
    a474:	9b e0       	ldi	r25, 0x0B	; 11
    a476:	0e 94 db 91 	call	0x123b6	; 0x123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>
    a47a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    a47c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    a47e:	80 81       	ld	r24, Z
    a480:	88 23       	and	r24, r24
    a482:	09 f4       	brne	.+2      	; 0xa486 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    a484:	a4 c0       	rjmp	.+328    	; 0xa5ce <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x22e>
    a486:	81 e0       	ldi	r24, 0x01	; 1
    a488:	b2 e0       	ldi	r27, 0x02	; 2
    a48a:	db 2e       	mov	r13, r27
    a48c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a48e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a490:	90 81       	ld	r25, Z
    a492:	99 23       	and	r25, r25
    a494:	09 f4       	brne	.+2      	; 0xa498 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xf8>
    a496:	9e c0       	rjmp	.+316    	; 0xa5d4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x234>
    a498:	d3 94       	inc	r13
    a49a:	d3 94       	inc	r13
    a49c:	f1 e0       	ldi	r31, 0x01	; 1
    a49e:	fd 83       	std	Y+5, r31	; 0x05
    a4a0:	51 2c       	mov	r5, r1
    a4a2:	41 2c       	mov	r4, r1
    a4a4:	81 30       	cpi	r24, 0x01	; 1
    a4a6:	d1 f5       	brne	.+116    	; 0xa51c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x17c>
    a4a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    a4aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    a4ac:	01 90       	ld	r0, Z+
    a4ae:	00 20       	and	r0, r0
    a4b0:	e9 f7       	brne	.-6      	; 0xa4ac <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x10c>
    a4b2:	9f 01       	movw	r18, r30
    a4b4:	21 50       	subi	r18, 0x01	; 1
    a4b6:	31 09       	sbc	r19, r1
    a4b8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    a4ba:	5c 8d       	ldd	r21, Y+28	; 0x1c
    a4bc:	24 1b       	sub	r18, r20
    a4be:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a4c0:	8b 81       	ldd	r24, Y+3	; 0x03
    a4c2:	88 0f       	add	r24, r24
    a4c4:	5b 81       	ldd	r21, Y+3	; 0x03
    a4c6:	85 0f       	add	r24, r21
    a4c8:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    a4ca:	e9 81       	ldd	r30, Y+1	; 0x01
    a4cc:	fa 81       	ldd	r31, Y+2	; 0x02
    a4ce:	e8 1b       	sub	r30, r24
    a4d0:	f1 09       	sbc	r31, r1
    a4d2:	cf 01       	movw	r24, r30
    a4d4:	6d 2d       	mov	r22, r13
    a4d6:	70 e0       	ldi	r23, 0x00	; 0
    a4d8:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    a4dc:	2b 01       	movw	r4, r22
    a4de:	a1 01       	movw	r20, r2
    a4e0:	41 50       	subi	r20, 0x01	; 1
    a4e2:	51 09       	sbc	r21, r1
    a4e4:	46 0f       	add	r20, r22
    a4e6:	57 1f       	adc	r21, r23
_Z22show_string_size_widthhh():
    a4e8:	f6 e0       	ldi	r31, 0x06	; 6
    a4ea:	2f 9f       	mul	r18, r31
    a4ec:	90 01       	movw	r18, r0
    a4ee:	11 24       	eor	r1, r1
    a4f0:	6b 81       	ldd	r22, Y+3	; 0x03
    a4f2:	62 9f       	mul	r22, r18
    a4f4:	c0 01       	movw	r24, r0
    a4f6:	63 9f       	mul	r22, r19
    a4f8:	90 0d       	add	r25, r0
    a4fa:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    a4fc:	b4 01       	movw	r22, r8
    a4fe:	68 1b       	sub	r22, r24
    a500:	79 0b       	sbc	r23, r25
    a502:	76 95       	lsr	r23
    a504:	67 95       	ror	r22
    a506:	66 0d       	add	r22, r6
    a508:	77 1d       	adc	r23, r7
    a50a:	c1 2c       	mov	r12, r1
    a50c:	75 01       	movw	r14, r10
    a50e:	10 e0       	ldi	r17, 0x00	; 0
    a510:	00 e0       	ldi	r16, 0x00	; 0
    a512:	2b 81       	ldd	r18, Y+3	; 0x03
    a514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    a516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    a518:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a51c:	8d 81       	ldd	r24, Y+5	; 0x05
    a51e:	81 30       	cpi	r24, 0x01	; 1
    a520:	f1 f5       	brne	.+124    	; 0xa59e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1fe>
    a522:	ed 8d       	ldd	r30, Y+29	; 0x1d
    a524:	fe 8d       	ldd	r31, Y+30	; 0x1e
    a526:	01 90       	ld	r0, Z+
    a528:	00 20       	and	r0, r0
    a52a:	e9 f7       	brne	.-6      	; 0xa526 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x186>
    a52c:	9f 01       	movw	r18, r30
    a52e:	21 50       	subi	r18, 0x01	; 1
    a530:	31 09       	sbc	r19, r1
    a532:	4d 8d       	ldd	r20, Y+29	; 0x1d
    a534:	5e 8d       	ldd	r21, Y+30	; 0x1e
    a536:	24 1b       	sub	r18, r20
    a538:	35 0b       	sbc	r19, r21
_Z22show_string_size_highth():
    a53a:	8c 81       	ldd	r24, Y+4	; 0x04
    a53c:	88 0f       	add	r24, r24
    a53e:	5c 81       	ldd	r21, Y+4	; 0x04
    a540:	85 0f       	add	r24, r21
    a542:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
    a544:	e9 81       	ldd	r30, Y+1	; 0x01
    a546:	fa 81       	ldd	r31, Y+2	; 0x02
    a548:	e8 1b       	sub	r30, r24
    a54a:	f1 09       	sbc	r31, r1
    a54c:	cf 01       	movw	r24, r30
    a54e:	88 0f       	add	r24, r24
    a550:	99 1f       	adc	r25, r25
    a552:	6d 2d       	mov	r22, r13
    a554:	70 e0       	ldi	r23, 0x00	; 0
    a556:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
    a55a:	f1 e0       	ldi	r31, 0x01	; 1
    a55c:	2f 1a       	sub	r2, r31
    a55e:	31 08       	sbc	r3, r1
    a560:	26 0e       	add	r2, r22
    a562:	37 1e       	adc	r3, r23
    a564:	a1 01       	movw	r20, r2
    a566:	44 0d       	add	r20, r4
    a568:	55 1d       	adc	r21, r5
_Z22show_string_size_widthhh():
    a56a:	66 e0       	ldi	r22, 0x06	; 6
    a56c:	26 9f       	mul	r18, r22
    a56e:	90 01       	movw	r18, r0
    a570:	11 24       	eor	r1, r1
    a572:	ec 81       	ldd	r30, Y+4	; 0x04
    a574:	e2 9f       	mul	r30, r18
    a576:	c0 01       	movw	r24, r0
    a578:	e3 9f       	mul	r30, r19
    a57a:	90 0d       	add	r25, r0
    a57c:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
    a57e:	b4 01       	movw	r22, r8
    a580:	68 1b       	sub	r22, r24
    a582:	79 0b       	sbc	r23, r25
    a584:	76 95       	lsr	r23
    a586:	67 95       	ror	r22
    a588:	66 0d       	add	r22, r6
    a58a:	77 1d       	adc	r23, r7
    a58c:	c1 2c       	mov	r12, r1
    a58e:	75 01       	movw	r14, r10
    a590:	10 e0       	ldi	r17, 0x00	; 0
    a592:	00 e0       	ldi	r16, 0x00	; 0
    a594:	2e 2f       	mov	r18, r30
    a596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a598:	9e 8d       	ldd	r25, Y+30	; 0x1e
    a59a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a59e:	0f 90       	pop	r0
    a5a0:	0f 90       	pop	r0
    a5a2:	0f 90       	pop	r0
    a5a4:	0f 90       	pop	r0
    a5a6:	0f 90       	pop	r0
    a5a8:	df 91       	pop	r29
    a5aa:	cf 91       	pop	r28
    a5ac:	1f 91       	pop	r17
    a5ae:	0f 91       	pop	r16
    a5b0:	ff 90       	pop	r15
    a5b2:	ef 90       	pop	r14
    a5b4:	df 90       	pop	r13
    a5b6:	cf 90       	pop	r12
    a5b8:	bf 90       	pop	r11
    a5ba:	af 90       	pop	r10
    a5bc:	9f 90       	pop	r9
    a5be:	8f 90       	pop	r8
    a5c0:	7f 90       	pop	r7
    a5c2:	6f 90       	pop	r6
    a5c4:	5f 90       	pop	r5
    a5c6:	4f 90       	pop	r4
    a5c8:	3f 90       	pop	r3
    a5ca:	2f 90       	pop	r2
    a5cc:	08 95       	ret
    a5ce:	80 e0       	ldi	r24, 0x00	; 0
    a5d0:	d1 2c       	mov	r13, r1
    a5d2:	5c cf       	rjmp	.-328    	; 0xa48c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xec>
    a5d4:	1d 82       	std	Y+5, r1	; 0x05
    a5d6:	64 cf       	rjmp	.-312    	; 0xa4a0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x100>

0000a5d8 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z15button_switch_1jjhhhhPcS_():
    a5d8:	2f 92       	push	r2
    a5da:	3f 92       	push	r3
    a5dc:	4f 92       	push	r4
    a5de:	5f 92       	push	r5
    a5e0:	6f 92       	push	r6
    a5e2:	7f 92       	push	r7
    a5e4:	8f 92       	push	r8
    a5e6:	9f 92       	push	r9
    a5e8:	af 92       	push	r10
    a5ea:	bf 92       	push	r11
    a5ec:	cf 92       	push	r12
    a5ee:	df 92       	push	r13
    a5f0:	ef 92       	push	r14
    a5f2:	ff 92       	push	r15
    a5f4:	0f 93       	push	r16
    a5f6:	1f 93       	push	r17
    a5f8:	cf 93       	push	r28
    a5fa:	df 93       	push	r29
    a5fc:	00 d0       	rcall	.+0      	; 0xa5fe <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x26>
    a5fe:	1f 92       	push	r1
    a600:	1f 92       	push	r1
    a602:	cd b7       	in	r28, 0x3d	; 61
    a604:	de b7       	in	r29, 0x3e	; 62
    a606:	4c 01       	movw	r8, r24
    a608:	3b 01       	movw	r6, r22
    a60a:	44 2e       	mov	r4, r20
    a60c:	f2 2e       	mov	r15, r18
    a60e:	09 83       	std	Y+1, r16	; 0x01
    a610:	db 82       	std	Y+3, r13	; 0x03
    a612:	ca 82       	std	Y+2, r12	; 0x02
    a614:	15 01       	movw	r2, r10
    a616:	70 e0       	ldi	r23, 0x00	; 0
    a618:	60 e0       	ldi	r22, 0x00	; 0
    a61a:	81 ea       	ldi	r24, 0xA1	; 161
    a61c:	9b e0       	ldi	r25, 0x0B	; 11
    a61e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a622:	1d 82       	std	Y+5, r1	; 0x05
    a624:	1c 82       	std	Y+4, r1	; 0x04
    a626:	af 2c       	mov	r10, r15
    a628:	b1 2c       	mov	r11, r1
    a62a:	65 01       	movw	r12, r10
    a62c:	c6 0c       	add	r12, r6
    a62e:	d7 1c       	adc	r13, r7
    a630:	51 2c       	mov	r5, r1
    a632:	72 01       	movw	r14, r4
    a634:	e8 0c       	add	r14, r8
    a636:	f9 1c       	adc	r15, r9
    a638:	86 01       	movw	r16, r12
    a63a:	8c 81       	ldd	r24, Y+4	; 0x04
    a63c:	9d 81       	ldd	r25, Y+5	; 0x05
    a63e:	08 1b       	sub	r16, r24
    a640:	19 0b       	sbc	r17, r25
    a642:	97 01       	movw	r18, r14
    a644:	28 1b       	sub	r18, r24
    a646:	39 0b       	sbc	r19, r25
    a648:	ac 01       	movw	r20, r24
    a64a:	46 0d       	add	r20, r6
    a64c:	57 1d       	adc	r21, r7
    a64e:	bc 01       	movw	r22, r24
    a650:	68 0d       	add	r22, r8
    a652:	79 1d       	adc	r23, r9
    a654:	81 ea       	ldi	r24, 0xA1	; 161
    a656:	9b e0       	ldi	r25, 0x0B	; 11
    a658:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a65c:	8c 81       	ldd	r24, Y+4	; 0x04
    a65e:	9d 81       	ldd	r25, Y+5	; 0x05
    a660:	01 96       	adiw	r24, 0x01	; 1
    a662:	9d 83       	std	Y+5, r25	; 0x05
    a664:	8c 83       	std	Y+4, r24	; 0x04
    a666:	03 97       	sbiw	r24, 0x03	; 3
    a668:	39 f7       	brne	.-50     	; 0xa638 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x60>
    a66a:	ea 81       	ldd	r30, Y+2	; 0x02
    a66c:	fb 81       	ldd	r31, Y+3	; 0x03
    a66e:	01 90       	ld	r0, Z+
    a670:	00 20       	and	r0, r0
    a672:	e9 f7       	brne	.-6      	; 0xa66e <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x96>
    a674:	31 97       	sbiw	r30, 0x01	; 1
    a676:	8a 81       	ldd	r24, Y+2	; 0x02
    a678:	9b 81       	ldd	r25, Y+3	; 0x03
    a67a:	e8 1b       	sub	r30, r24
    a67c:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    a67e:	89 81       	ldd	r24, Y+1	; 0x01
    a680:	88 0f       	add	r24, r24
    a682:	99 81       	ldd	r25, Y+1	; 0x01
    a684:	89 0f       	add	r24, r25
    a686:	88 0f       	add	r24, r24
_Z15button_switch_1jjhhhhPcS_():
    a688:	a5 01       	movw	r20, r10
    a68a:	48 1b       	sub	r20, r24
    a68c:	51 09       	sbc	r21, r1
    a68e:	57 ff       	sbrs	r21, 7
    a690:	02 c0       	rjmp	.+4      	; 0xa696 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
    a692:	4d 5f       	subi	r20, 0xFD	; 253
    a694:	5f 4f       	sbci	r21, 0xFF	; 255
    a696:	55 95       	asr	r21
    a698:	47 95       	ror	r20
    a69a:	55 95       	asr	r21
    a69c:	47 95       	ror	r20
    a69e:	46 0d       	add	r20, r6
    a6a0:	57 2d       	mov	r21, r7
    a6a2:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    a6a4:	26 e0       	ldi	r18, 0x06	; 6
    a6a6:	e2 9f       	mul	r30, r18
    a6a8:	f0 01       	movw	r30, r0
    a6aa:	11 24       	eor	r1, r1
    a6ac:	29 81       	ldd	r18, Y+1	; 0x01
    a6ae:	2e 9f       	mul	r18, r30
    a6b0:	c0 01       	movw	r24, r0
    a6b2:	2f 9f       	mul	r18, r31
    a6b4:	90 0d       	add	r25, r0
    a6b6:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    a6b8:	99 27       	eor	r25, r25
    a6ba:	b2 01       	movw	r22, r4
    a6bc:	68 1b       	sub	r22, r24
    a6be:	79 0b       	sbc	r23, r25
    a6c0:	77 ff       	sbrs	r23, 7
    a6c2:	02 c0       	rjmp	.+4      	; 0xa6c8 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0xf0>
    a6c4:	6f 5f       	subi	r22, 0xFF	; 255
    a6c6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6c8:	75 95       	asr	r23
    a6ca:	67 95       	ror	r22
    a6cc:	68 0d       	add	r22, r8
    a6ce:	79 2d       	mov	r23, r9
    a6d0:	71 1d       	adc	r23, r1
    a6d2:	c1 2c       	mov	r12, r1
    a6d4:	ee 24       	eor	r14, r14
    a6d6:	ea 94       	dec	r14
    a6d8:	fe 2c       	mov	r15, r14
    a6da:	10 e0       	ldi	r17, 0x00	; 0
    a6dc:	00 e0       	ldi	r16, 0x00	; 0
    a6de:	29 81       	ldd	r18, Y+1	; 0x01
    a6e0:	8a 81       	ldd	r24, Y+2	; 0x02
    a6e2:	9b 81       	ldd	r25, Y+3	; 0x03
    a6e4:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a6e8:	f1 01       	movw	r30, r2
    a6ea:	01 90       	ld	r0, Z+
    a6ec:	00 20       	and	r0, r0
    a6ee:	e9 f7       	brne	.-6      	; 0xa6ea <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
    a6f0:	31 97       	sbiw	r30, 0x01	; 1
    a6f2:	e2 19       	sub	r30, r2
    a6f4:	f3 09       	sbc	r31, r3
    a6f6:	a5 01       	movw	r20, r10
    a6f8:	46 50       	subi	r20, 0x06	; 6
    a6fa:	51 09       	sbc	r21, r1
    a6fc:	57 ff       	sbrs	r21, 7
    a6fe:	02 c0       	rjmp	.+4      	; 0xa704 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    a700:	4d 5f       	subi	r20, 0xFD	; 253
    a702:	5f 4f       	sbci	r21, 0xFF	; 255
    a704:	55 95       	asr	r21
    a706:	47 95       	ror	r20
    a708:	55 95       	asr	r21
    a70a:	47 95       	ror	r20
    a70c:	55 27       	eor	r21, r21
    a70e:	ca 01       	movw	r24, r20
    a710:	88 0f       	add	r24, r24
    a712:	99 1f       	adc	r25, r25
    a714:	48 0f       	add	r20, r24
    a716:	59 1f       	adc	r21, r25
    a718:	46 0d       	add	r20, r6
    a71a:	57 1d       	adc	r21, r7
_Z22show_string_size_widthhh():
    a71c:	86 e0       	ldi	r24, 0x06	; 6
    a71e:	e8 9f       	mul	r30, r24
    a720:	f0 01       	movw	r30, r0
    a722:	11 24       	eor	r1, r1
_Z15button_switch_1jjhhhhPcS_():
    a724:	ff 27       	eor	r31, r31
    a726:	b2 01       	movw	r22, r4
    a728:	6e 1b       	sub	r22, r30
    a72a:	7f 0b       	sbc	r23, r31
    a72c:	77 ff       	sbrs	r23, 7
    a72e:	02 c0       	rjmp	.+4      	; 0xa734 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)+0x15c>
    a730:	6f 5f       	subi	r22, 0xFF	; 255
    a732:	7f 4f       	sbci	r23, 0xFF	; 255
    a734:	75 95       	asr	r23
    a736:	67 95       	ror	r22
    a738:	68 0d       	add	r22, r8
    a73a:	79 2d       	mov	r23, r9
    a73c:	71 1d       	adc	r23, r1
    a73e:	c1 2c       	mov	r12, r1
    a740:	ee 24       	eor	r14, r14
    a742:	ea 94       	dec	r14
    a744:	fe 2c       	mov	r15, r14
    a746:	10 e0       	ldi	r17, 0x00	; 0
    a748:	00 e0       	ldi	r16, 0x00	; 0
    a74a:	21 e0       	ldi	r18, 0x01	; 1
    a74c:	c1 01       	movw	r24, r2
    a74e:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a752:	0f 90       	pop	r0
    a754:	0f 90       	pop	r0
    a756:	0f 90       	pop	r0
    a758:	0f 90       	pop	r0
    a75a:	0f 90       	pop	r0
    a75c:	df 91       	pop	r29
    a75e:	cf 91       	pop	r28
    a760:	1f 91       	pop	r17
    a762:	0f 91       	pop	r16
    a764:	ff 90       	pop	r15
    a766:	ef 90       	pop	r14
    a768:	df 90       	pop	r13
    a76a:	cf 90       	pop	r12
    a76c:	bf 90       	pop	r11
    a76e:	af 90       	pop	r10
    a770:	9f 90       	pop	r9
    a772:	8f 90       	pop	r8
    a774:	7f 90       	pop	r7
    a776:	6f 90       	pop	r6
    a778:	5f 90       	pop	r5
    a77a:	4f 90       	pop	r4
    a77c:	3f 90       	pop	r3
    a77e:	2f 90       	pop	r2
    a780:	08 95       	ret

0000a782 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
    a782:	2f 92       	push	r2
    a784:	3f 92       	push	r3
    a786:	4f 92       	push	r4
    a788:	5f 92       	push	r5
    a78a:	6f 92       	push	r6
    a78c:	7f 92       	push	r7
    a78e:	8f 92       	push	r8
    a790:	9f 92       	push	r9
    a792:	af 92       	push	r10
    a794:	bf 92       	push	r11
    a796:	cf 92       	push	r12
    a798:	df 92       	push	r13
    a79a:	ef 92       	push	r14
    a79c:	ff 92       	push	r15
    a79e:	0f 93       	push	r16
    a7a0:	1f 93       	push	r17
    a7a2:	cf 93       	push	r28
    a7a4:	df 93       	push	r29
    a7a6:	00 d0       	rcall	.+0      	; 0xa7a8 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x26>
    a7a8:	1f 92       	push	r1
    a7aa:	1f 92       	push	r1
    a7ac:	cd b7       	in	r28, 0x3d	; 61
    a7ae:	de b7       	in	r29, 0x3e	; 62
    a7b0:	6c 01       	movw	r12, r24
    a7b2:	5b 01       	movw	r10, r22
    a7b4:	1a 01       	movw	r2, r20
    a7b6:	29 01       	movw	r4, r18
    a7b8:	90 2e       	mov	r9, r16
    a7ba:	8e 2c       	mov	r8, r14
    a7bc:	70 e0       	ldi	r23, 0x00	; 0
    a7be:	60 e0       	ldi	r22, 0x00	; 0
    a7c0:	81 ea       	ldi	r24, 0xA1	; 161
    a7c2:	9b e0       	ldi	r25, 0x0B	; 11
    a7c4:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    a7c8:	f1 2c       	mov	r15, r1
    a7ca:	e1 2c       	mov	r14, r1
    a7cc:	35 01       	movw	r6, r10
    a7ce:	64 0c       	add	r6, r4
    a7d0:	75 1c       	adc	r7, r5
    a7d2:	c6 01       	movw	r24, r12
    a7d4:	82 0d       	add	r24, r2
    a7d6:	93 1d       	adc	r25, r3
    a7d8:	9d 83       	std	Y+5, r25	; 0x05
    a7da:	8c 83       	std	Y+4, r24	; 0x04
    a7dc:	83 01       	movw	r16, r6
    a7de:	0e 19       	sub	r16, r14
    a7e0:	1f 09       	sbc	r17, r15
    a7e2:	2c 81       	ldd	r18, Y+4	; 0x04
    a7e4:	3d 81       	ldd	r19, Y+5	; 0x05
    a7e6:	2e 19       	sub	r18, r14
    a7e8:	3f 09       	sbc	r19, r15
    a7ea:	a5 01       	movw	r20, r10
    a7ec:	4e 0d       	add	r20, r14
    a7ee:	5f 1d       	adc	r21, r15
    a7f0:	b6 01       	movw	r22, r12
    a7f2:	6e 0d       	add	r22, r14
    a7f4:	7f 1d       	adc	r23, r15
    a7f6:	81 ea       	ldi	r24, 0xA1	; 161
    a7f8:	9b e0       	ldi	r25, 0x0B	; 11
    a7fa:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
    a7fe:	9f ef       	ldi	r25, 0xFF	; 255
    a800:	e9 1a       	sub	r14, r25
    a802:	f9 0a       	sbc	r15, r25
    a804:	23 e0       	ldi	r18, 0x03	; 3
    a806:	e2 16       	cp	r14, r18
    a808:	f1 04       	cpc	r15, r1
    a80a:	41 f7       	brne	.-48     	; 0xa7dc <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x5a>
    a80c:	89 82       	std	Y+1, r8	; 0x01
    a80e:	1a 82       	std	Y+2, r1	; 0x02
    a810:	ce 01       	movw	r24, r28
    a812:	01 96       	adiw	r24, 0x01	; 1
    a814:	fc 01       	movw	r30, r24
    a816:	01 90       	ld	r0, Z+
    a818:	00 20       	and	r0, r0
    a81a:	e9 f7       	brne	.-6      	; 0xa816 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x94>
    a81c:	31 97       	sbiw	r30, 0x01	; 1
    a81e:	e8 1b       	sub	r30, r24
    a820:	f9 0b       	sbc	r31, r25
_Z22show_string_size_highth():
    a822:	29 2d       	mov	r18, r9
    a824:	22 0f       	add	r18, r18
    a826:	29 0d       	add	r18, r9
    a828:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
    a82a:	a2 01       	movw	r20, r4
    a82c:	42 1b       	sub	r20, r18
    a82e:	51 09       	sbc	r21, r1
    a830:	56 95       	lsr	r21
    a832:	47 95       	ror	r20
    a834:	56 95       	lsr	r21
    a836:	47 95       	ror	r20
    a838:	4a 0d       	add	r20, r10
    a83a:	5b 2d       	mov	r21, r11
    a83c:	51 1d       	adc	r21, r1
_Z22show_string_size_widthhh():
    a83e:	26 e0       	ldi	r18, 0x06	; 6
    a840:	e2 9f       	mul	r30, r18
    a842:	f0 01       	movw	r30, r0
    a844:	11 24       	eor	r1, r1
    a846:	9e 9e       	mul	r9, r30
    a848:	90 01       	movw	r18, r0
    a84a:	9f 9e       	mul	r9, r31
    a84c:	30 0d       	add	r19, r0
    a84e:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
    a850:	33 27       	eor	r19, r19
    a852:	b1 01       	movw	r22, r2
    a854:	62 1b       	sub	r22, r18
    a856:	73 0b       	sbc	r23, r19
    a858:	76 95       	lsr	r23
    a85a:	67 95       	ror	r22
    a85c:	6c 0d       	add	r22, r12
    a85e:	7d 2d       	mov	r23, r13
    a860:	71 1d       	adc	r23, r1
    a862:	c1 2c       	mov	r12, r1
    a864:	ee 24       	eor	r14, r14
    a866:	ea 94       	dec	r14
    a868:	fe 2c       	mov	r15, r14
    a86a:	10 e0       	ldi	r17, 0x00	; 0
    a86c:	00 e0       	ldi	r16, 0x00	; 0
    a86e:	29 2d       	mov	r18, r9
    a870:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    a874:	0f 90       	pop	r0
    a876:	0f 90       	pop	r0
    a878:	0f 90       	pop	r0
    a87a:	0f 90       	pop	r0
    a87c:	0f 90       	pop	r0
    a87e:	df 91       	pop	r29
    a880:	cf 91       	pop	r28
    a882:	1f 91       	pop	r17
    a884:	0f 91       	pop	r16
    a886:	ff 90       	pop	r15
    a888:	ef 90       	pop	r14
    a88a:	df 90       	pop	r13
    a88c:	cf 90       	pop	r12
    a88e:	bf 90       	pop	r11
    a890:	af 90       	pop	r10
    a892:	9f 90       	pop	r9
    a894:	8f 90       	pop	r8
    a896:	7f 90       	pop	r7
    a898:	6f 90       	pop	r6
    a89a:	5f 90       	pop	r5
    a89c:	4f 90       	pop	r4
    a89e:	3f 90       	pop	r3
    a8a0:	2f 90       	pop	r2
    a8a2:	08 95       	ret

0000a8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
    a8a4:	ef 92       	push	r14
    a8a6:	ff 92       	push	r15
    a8a8:	0f 93       	push	r16
    a8aa:	1f 93       	push	r17
_Z10is_pressediiiiii():
    a8ac:	80 17       	cp	r24, r16
    a8ae:	91 07       	cpc	r25, r17
    a8b0:	74 f4       	brge	.+28     	; 0xa8ce <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    a8b2:	84 0f       	add	r24, r20
    a8b4:	95 1f       	adc	r25, r21
_Z10is_pressediiiiii():
    a8b6:	08 17       	cp	r16, r24
    a8b8:	19 07       	cpc	r17, r25
    a8ba:	4c f4       	brge	.+18     	; 0xa8ce <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    a8bc:	6e 15       	cp	r22, r14
    a8be:	7f 05       	cpc	r23, r15
    a8c0:	34 f4       	brge	.+12     	; 0xa8ce <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
    a8c2:	62 0f       	add	r22, r18
    a8c4:	73 1f       	adc	r23, r19
_Z10is_pressediiiiii():
    a8c6:	81 e0       	ldi	r24, 0x01	; 1
    a8c8:	e6 16       	cp	r14, r22
    a8ca:	f7 06       	cpc	r15, r23
    a8cc:	0c f0       	brlt	.+2      	; 0xa8d0 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
    a8ce:	80 e0       	ldi	r24, 0x00	; 0
    a8d0:	1f 91       	pop	r17
    a8d2:	0f 91       	pop	r16
    a8d4:	ff 90       	pop	r15
    a8d6:	ef 90       	pop	r14
    a8d8:	08 95       	ret

0000a8da <draw_menu(bool)>:
_Z9draw_menub():
    a8da:	2f 92       	push	r2
    a8dc:	3f 92       	push	r3
    a8de:	4f 92       	push	r4
    a8e0:	5f 92       	push	r5
    a8e2:	6f 92       	push	r6
    a8e4:	7f 92       	push	r7
    a8e6:	8f 92       	push	r8
    a8e8:	9f 92       	push	r9
    a8ea:	af 92       	push	r10
    a8ec:	bf 92       	push	r11
    a8ee:	cf 92       	push	r12
    a8f0:	df 92       	push	r13
    a8f2:	ef 92       	push	r14
    a8f4:	ff 92       	push	r15
    a8f6:	0f 93       	push	r16
    a8f8:	1f 93       	push	r17
    a8fa:	cf 93       	push	r28
    a8fc:	df 93       	push	r29
    a8fe:	cd b7       	in	r28, 0x3d	; 61
    a900:	de b7       	in	r29, 0x3e	; 62
    a902:	c3 5e       	subi	r28, 0xE3	; 227
    a904:	d1 09       	sbc	r29, r1
    a906:	0f b6       	in	r0, 0x3f	; 63
    a908:	f8 94       	cli
    a90a:	de bf       	out	0x3e, r29	; 62
    a90c:	0f be       	out	0x3f, r0	; 63
    a90e:	cd bf       	out	0x3d, r28	; 61
    a910:	f8 2e       	mov	r15, r24
    a912:	ce 01       	movw	r24, r28
    a914:	8f 54       	subi	r24, 0x4F	; 79
    a916:	9f 4f       	sbci	r25, 0xFF	; 255
    a918:	0e 94 9d 39 	call	0x733a	; 0x733a <MenuHistoryGetMenu(unsigned char*)>
    a91c:	3c 01       	movw	r6, r24
    a91e:	60 e0       	ldi	r22, 0x00	; 0
    a920:	83 e8       	ldi	r24, 0x83	; 131
    a922:	9b e0       	ldi	r25, 0x0B	; 11
    a924:	0e 94 4c a6 	call	0x14c98	; 0x14c98 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>
    a928:	83 e8       	ldi	r24, 0x83	; 131
    a92a:	9b e0       	ldi	r25, 0x0B	; 11
    a92c:	0e 94 1f a7 	call	0x14e3e	; 0x14e3e <LCDWIKI_TOUCH::TP_Get_State() const>
    a930:	87 ff       	sbrs	r24, 7
    a932:	98 c1       	rjmp	.+816    	; 0xac64 <draw_menu(bool)+0x38a>
    a934:	f1 10       	cpse	r15, r1
    a936:	96 c1       	rjmp	.+812    	; 0xac64 <draw_menu(bool)+0x38a>
    a938:	20 91 87 0b 	lds	r18, 0x0B87	; 0x800b87 <my_touch+0x4>
    a93c:	30 91 88 0b 	lds	r19, 0x0B88	; 0x800b88 <my_touch+0x5>
    a940:	ce 53       	subi	r28, 0x3E	; 62
    a942:	df 4f       	sbci	r29, 0xFF	; 255
    a944:	39 83       	std	Y+1, r19	; 0x01
    a946:	28 83       	st	Y, r18
    a948:	c2 5c       	subi	r28, 0xC2	; 194
    a94a:	d0 40       	sbci	r29, 0x00	; 0
    a94c:	40 91 89 0b 	lds	r20, 0x0B89	; 0x800b89 <my_touch+0x6>
    a950:	50 91 8a 0b 	lds	r21, 0x0B8A	; 0x800b8a <my_touch+0x7>
    a954:	cc 53       	subi	r28, 0x3C	; 60
    a956:	df 4f       	sbci	r29, 0xFF	; 255
    a958:	59 83       	std	Y+1, r21	; 0x01
    a95a:	48 83       	st	Y, r20
    a95c:	c4 5c       	subi	r28, 0xC4	; 196
    a95e:	d0 40       	sbci	r29, 0x00	; 0
    a960:	83 01       	movw	r16, r6
    a962:	0a 53       	subi	r16, 0x3A	; 58
    a964:	1d 4f       	sbci	r17, 0xFD	; 253
    a966:	f8 01       	movw	r30, r16
    a968:	65 91       	lpm	r22, Z+
    a96a:	74 91       	lpm	r23, Z
    a96c:	ca 54       	subi	r28, 0x4A	; 74
    a96e:	df 4f       	sbci	r29, 0xFF	; 255
    a970:	79 83       	std	Y+1, r23	; 0x01
    a972:	68 83       	st	Y, r22
    a974:	c6 5b       	subi	r28, 0xB6	; 182
    a976:	d0 40       	sbci	r29, 0x00	; 0
    a978:	63 01       	movw	r12, r6
    a97a:	78 e3       	ldi	r23, 0x38	; 56
    a97c:	c7 1a       	sub	r12, r23
    a97e:	7d ef       	ldi	r23, 0xFD	; 253
    a980:	d7 0a       	sbc	r13, r23
    a982:	f6 01       	movw	r30, r12
    a984:	85 91       	lpm	r24, Z+
    a986:	94 91       	lpm	r25, Z
    a988:	c8 54       	subi	r28, 0x48	; 72
    a98a:	df 4f       	sbci	r29, 0xFF	; 255
    a98c:	99 83       	std	Y+1, r25	; 0x01
    a98e:	88 83       	st	Y, r24
    a990:	c8 5b       	subi	r28, 0xB8	; 184
    a992:	d0 40       	sbci	r29, 0x00	; 0
    a994:	f3 01       	movw	r30, r6
    a996:	ee 52       	subi	r30, 0x2E	; 46
    a998:	fd 4f       	sbci	r31, 0xFD	; 253
    a99a:	25 91       	lpm	r18, Z+
    a99c:	34 91       	lpm	r19, Z
    a99e:	53 01       	movw	r10, r6
    a9a0:	9b e3       	ldi	r25, 0x3B	; 59
    a9a2:	a9 1a       	sub	r10, r25
    a9a4:	9d ef       	ldi	r25, 0xFD	; 253
    a9a6:	b9 0a       	sbc	r11, r25
    a9a8:	f5 01       	movw	r30, r10
    a9aa:	84 91       	lpm	r24, Z
    a9ac:	cf 54       	subi	r28, 0x4F	; 79
    a9ae:	df 4f       	sbci	r29, 0xFF	; 255
    a9b0:	68 81       	ld	r22, Y
    a9b2:	c1 5b       	subi	r28, 0xB1	; 177
    a9b4:	d0 40       	sbci	r29, 0x00	; 0
    a9b6:	70 e0       	ldi	r23, 0x00	; 0
    a9b8:	4f ef       	ldi	r20, 0xFF	; 255
    a9ba:	90 e0       	ldi	r25, 0x00	; 0
    a9bc:	f9 01       	movw	r30, r18
    a9be:	19 95       	eicall
    a9c0:	91 2c       	mov	r9, r1
    a9c2:	88 23       	and	r24, r24
    a9c4:	11 f0       	breq	.+4      	; 0xa9ca <draw_menu(bool)+0xf0>
    a9c6:	99 24       	eor	r9, r9
    a9c8:	93 94       	inc	r9
    a9ca:	f3 01       	movw	r30, r6
    a9cc:	ec 52       	subi	r30, 0x2C	; 44
    a9ce:	fd 4f       	sbci	r31, 0xFD	; 253
    a9d0:	25 91       	lpm	r18, Z+
    a9d2:	34 91       	lpm	r19, Z
    a9d4:	f5 01       	movw	r30, r10
    a9d6:	84 91       	lpm	r24, Z
    a9d8:	cf 54       	subi	r28, 0x4F	; 79
    a9da:	df 4f       	sbci	r29, 0xFF	; 255
    a9dc:	68 81       	ld	r22, Y
    a9de:	c1 5b       	subi	r28, 0xB1	; 177
    a9e0:	d0 40       	sbci	r29, 0x00	; 0
    a9e2:	70 e0       	ldi	r23, 0x00	; 0
    a9e4:	4f ef       	ldi	r20, 0xFF	; 255
    a9e6:	90 e0       	ldi	r25, 0x00	; 0
    a9e8:	f9 01       	movw	r30, r18
    a9ea:	19 95       	eicall
    a9ec:	81 11       	cpse	r24, r1
    a9ee:	47 c1       	rjmp	.+654    	; 0xac7e <draw_menu(bool)+0x3a4>
    a9f0:	e8 94       	clt
    a9f2:	91 f8       	bld	r9, 1
    a9f4:	f3 01       	movw	r30, r6
    a9f6:	ea 52       	subi	r30, 0x2A	; 42
    a9f8:	fd 4f       	sbci	r31, 0xFD	; 253
    a9fa:	25 91       	lpm	r18, Z+
    a9fc:	34 91       	lpm	r19, Z
    a9fe:	f5 01       	movw	r30, r10
    aa00:	84 91       	lpm	r24, Z
    aa02:	cf 54       	subi	r28, 0x4F	; 79
    aa04:	df 4f       	sbci	r29, 0xFF	; 255
    aa06:	68 81       	ld	r22, Y
    aa08:	c1 5b       	subi	r28, 0xB1	; 177
    aa0a:	d0 40       	sbci	r29, 0x00	; 0
    aa0c:	70 e0       	ldi	r23, 0x00	; 0
    aa0e:	4f ef       	ldi	r20, 0xFF	; 255
    aa10:	90 e0       	ldi	r25, 0x00	; 0
    aa12:	f9 01       	movw	r30, r18
    aa14:	19 95       	eicall
    aa16:	81 11       	cpse	r24, r1
    aa18:	35 c1       	rjmp	.+618    	; 0xac84 <draw_menu(bool)+0x3aa>
    aa1a:	89 2d       	mov	r24, r9
    aa1c:	8b 7f       	andi	r24, 0xFB	; 251
    aa1e:	f1 10       	cpse	r15, r1
    aa20:	34 c1       	rjmp	.+616    	; 0xac8a <draw_menu(bool)+0x3b0>
    aa22:	87 7f       	andi	r24, 0xF7	; 247
    aa24:	cd 52       	subi	r28, 0x2D	; 45
    aa26:	df 4f       	sbci	r29, 0xFF	; 255
    aa28:	88 83       	st	Y, r24
    aa2a:	c3 5d       	subi	r28, 0xD3	; 211
    aa2c:	d0 40       	sbci	r29, 0x00	; 0
    aa2e:	f3 01       	movw	r30, r6
    aa30:	ef 52       	subi	r30, 0x2F	; 47
    aa32:	fd 4f       	sbci	r31, 0xFD	; 253
    aa34:	84 91       	lpm	r24, Z
    aa36:	cd 52       	subi	r28, 0x2D	; 45
    aa38:	df 4f       	sbci	r29, 0xFF	; 255
    aa3a:	68 81       	ld	r22, Y
    aa3c:	c3 5d       	subi	r28, 0xD3	; 211
    aa3e:	d0 40       	sbci	r29, 0x00	; 0
    aa40:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    aa44:	88 23       	and	r24, r24
    aa46:	e1 f0       	breq	.+56     	; 0xaa80 <draw_menu(bool)+0x1a6>
    aa48:	f3 01       	movw	r30, r6
    aa4a:	65 91       	lpm	r22, Z+
    aa4c:	74 91       	lpm	r23, Z
    aa4e:	ce 01       	movw	r24, r28
    aa50:	01 96       	adiw	r24, 0x01	; 1
    aa52:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    aa56:	f6 01       	movw	r30, r12
    aa58:	45 91       	lpm	r20, Z+
    aa5a:	54 91       	lpm	r21, Z
    aa5c:	f8 01       	movw	r30, r16
    aa5e:	65 91       	lpm	r22, Z+
    aa60:	74 91       	lpm	r23, Z
    aa62:	4b 5f       	subi	r20, 0xFB	; 251
    aa64:	5f 4f       	sbci	r21, 0xFF	; 255
    aa66:	6b 5f       	subi	r22, 0xFB	; 251
    aa68:	7f 4f       	sbci	r23, 0xFF	; 255
    aa6a:	c1 2c       	mov	r12, r1
    aa6c:	ee 24       	eor	r14, r14
    aa6e:	ea 94       	dec	r14
    aa70:	fe 2c       	mov	r15, r14
    aa72:	10 e0       	ldi	r17, 0x00	; 0
    aa74:	00 e0       	ldi	r16, 0x00	; 0
    aa76:	22 e0       	ldi	r18, 0x02	; 2
    aa78:	ce 01       	movw	r24, r28
    aa7a:	01 96       	adiw	r24, 0x01	; 1
    aa7c:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    aa80:	91 2c       	mov	r9, r1
    aa82:	c6 53       	subi	r28, 0x36	; 54
    aa84:	df 4f       	sbci	r29, 0xFF	; 255
    aa86:	18 82       	st	Y, r1
    aa88:	ca 5c       	subi	r28, 0xCA	; 202
    aa8a:	d0 40       	sbci	r29, 0x00	; 0
    aa8c:	93 01       	movw	r18, r6
    aa8e:	23 54       	subi	r18, 0x43	; 67
    aa90:	3d 4f       	sbci	r19, 0xFD	; 253
    aa92:	c6 54       	subi	r28, 0x46	; 70
    aa94:	df 4f       	sbci	r29, 0xFF	; 255
    aa96:	39 83       	std	Y+1, r19	; 0x01
    aa98:	28 83       	st	Y, r18
    aa9a:	ca 5b       	subi	r28, 0xBA	; 186
    aa9c:	d0 40       	sbci	r29, 0x00	; 0
    aa9e:	c6 54       	subi	r28, 0x46	; 70
    aaa0:	df 4f       	sbci	r29, 0xFF	; 255
    aaa2:	e8 81       	ld	r30, Y
    aaa4:	f9 81       	ldd	r31, Y+1	; 0x01
    aaa6:	ca 5b       	subi	r28, 0xBA	; 186
    aaa8:	d0 40       	sbci	r29, 0x00	; 0
    aaaa:	84 91       	lpm	r24, Z
    aaac:	98 16       	cp	r9, r24
    aaae:	08 f0       	brcs	.+2      	; 0xaab2 <draw_menu(bool)+0x1d8>
    aab0:	ee c0       	rjmp	.+476    	; 0xac8e <draw_menu(bool)+0x3b4>
    aab2:	89 2d       	mov	r24, r9
    aab4:	90 e0       	ldi	r25, 0x00	; 0
    aab6:	01 96       	adiw	r24, 0x01	; 1
    aab8:	f1 e1       	ldi	r31, 0x11	; 17
    aaba:	f8 9f       	mul	r31, r24
    aabc:	20 01       	movw	r4, r0
    aabe:	f9 9f       	mul	r31, r25
    aac0:	50 0c       	add	r5, r0
    aac2:	11 24       	eor	r1, r1
    aac4:	f3 01       	movw	r30, r6
    aac6:	e4 0d       	add	r30, r4
    aac8:	f5 1d       	adc	r31, r5
    aaca:	25 91       	lpm	r18, Z+
    aacc:	34 91       	lpm	r19, Z
    aace:	12 01       	movw	r2, r4
    aad0:	44 e0       	ldi	r20, 0x04	; 4
    aad2:	24 1a       	sub	r2, r20
    aad4:	31 08       	sbc	r3, r1
    aad6:	26 0c       	add	r2, r6
    aad8:	37 1c       	adc	r3, r7
    aada:	f1 01       	movw	r30, r2
    aadc:	84 91       	lpm	r24, Z
    aade:	cf 54       	subi	r28, 0x4F	; 79
    aae0:	df 4f       	sbci	r29, 0xFF	; 255
    aae2:	68 81       	ld	r22, Y
    aae4:	c1 5b       	subi	r28, 0xB1	; 177
    aae6:	d0 40       	sbci	r29, 0x00	; 0
    aae8:	70 e0       	ldi	r23, 0x00	; 0
    aaea:	49 2d       	mov	r20, r9
    aaec:	90 e0       	ldi	r25, 0x00	; 0
    aaee:	f9 01       	movw	r30, r18
    aaf0:	19 95       	eicall
    aaf2:	88 23       	and	r24, r24
    aaf4:	09 f4       	brne	.+2      	; 0xaaf8 <draw_menu(bool)+0x21e>
    aaf6:	b4 c0       	rjmp	.+360    	; 0xac60 <draw_menu(bool)+0x386>
    aaf8:	f2 01       	movw	r30, r4
    aafa:	31 97       	sbiw	r30, 0x01	; 1
    aafc:	e6 0d       	add	r30, r6
    aafe:	f7 1d       	adc	r31, r7
    ab00:	84 91       	lpm	r24, Z
    ab02:	cd 52       	subi	r28, 0x2D	; 45
    ab04:	df 4f       	sbci	r29, 0xFF	; 255
    ab06:	68 81       	ld	r22, Y
    ab08:	c3 5d       	subi	r28, 0xD3	; 211
    ab0a:	d0 40       	sbci	r29, 0x00	; 0
    ab0c:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    ab10:	88 23       	and	r24, r24
    ab12:	09 f4       	brne	.+2      	; 0xab16 <draw_menu(bool)+0x23c>
    ab14:	43 c0       	rjmp	.+134    	; 0xab9c <draw_menu(bool)+0x2c2>
    ab16:	f2 01       	movw	r30, r4
    ab18:	3f 97       	sbiw	r30, 0x0f	; 15
    ab1a:	e6 0d       	add	r30, r6
    ab1c:	f7 1d       	adc	r31, r7
    ab1e:	65 91       	lpm	r22, Z+
    ab20:	74 91       	lpm	r23, Z
    ab22:	ce 01       	movw	r24, r28
    ab24:	8f 57       	subi	r24, 0x7F	; 127
    ab26:	9f 4f       	sbci	r25, 0xFF	; 255
    ab28:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    ab2c:	19 82       	std	Y+1, r1	; 0x01
    ab2e:	f2 01       	movw	r30, r4
    ab30:	35 97       	sbiw	r30, 0x05	; 5
    ab32:	e6 0d       	add	r30, r6
    ab34:	f7 1d       	adc	r31, r7
    ab36:	e4 90       	lpm	r14, Z
    ab38:	04 91       	lpm	r16, Z
    ab3a:	f2 01       	movw	r30, r4
    ab3c:	37 97       	sbiw	r30, 0x07	; 7
    ab3e:	e6 0d       	add	r30, r6
    ab40:	f7 1d       	adc	r31, r7
    ab42:	25 91       	lpm	r18, Z+
    ab44:	34 91       	lpm	r19, Z
    ab46:	f2 01       	movw	r30, r4
    ab48:	39 97       	sbiw	r30, 0x09	; 9
    ab4a:	e6 0d       	add	r30, r6
    ab4c:	f7 1d       	adc	r31, r7
    ab4e:	45 91       	lpm	r20, Z+
    ab50:	54 91       	lpm	r21, Z
    ab52:	f2 01       	movw	r30, r4
    ab54:	3b 97       	sbiw	r30, 0x0b	; 11
    ab56:	e6 0d       	add	r30, r6
    ab58:	f7 1d       	adc	r31, r7
    ab5a:	65 91       	lpm	r22, Z+
    ab5c:	74 91       	lpm	r23, Z
    ab5e:	f2 01       	movw	r30, r4
    ab60:	3d 97       	sbiw	r30, 0x0d	; 13
    ab62:	e6 0d       	add	r30, r6
    ab64:	f7 1d       	adc	r31, r7
    ab66:	85 91       	lpm	r24, Z+
    ab68:	94 91       	lpm	r25, Z
    ab6a:	c8 54       	subi	r28, 0x48	; 72
    ab6c:	df 4f       	sbci	r29, 0xFF	; 255
    ab6e:	e8 81       	ld	r30, Y
    ab70:	f9 81       	ldd	r31, Y+1	; 0x01
    ab72:	c8 5b       	subi	r28, 0xB8	; 184
    ab74:	d0 40       	sbci	r29, 0x00	; 0
    ab76:	6e 0f       	add	r22, r30
    ab78:	7f 1f       	adc	r23, r31
    ab7a:	81 2c       	mov	r8, r1
    ab7c:	fe 01       	movw	r30, r28
    ab7e:	31 96       	adiw	r30, 0x01	; 1
    ab80:	5f 01       	movw	r10, r30
    ab82:	e0 58       	subi	r30, 0x80	; 128
    ab84:	ff 4f       	sbci	r31, 0xFF	; 255
    ab86:	6f 01       	movw	r12, r30
    ab88:	ca 54       	subi	r28, 0x4A	; 74
    ab8a:	df 4f       	sbci	r29, 0xFF	; 255
    ab8c:	e8 81       	ld	r30, Y
    ab8e:	f9 81       	ldd	r31, Y+1	; 0x01
    ab90:	c6 5b       	subi	r28, 0xB6	; 182
    ab92:	d0 40       	sbci	r29, 0x00	; 0
    ab94:	8e 0f       	add	r24, r30
    ab96:	9f 1f       	adc	r25, r31
    ab98:	0e 94 d4 50 	call	0xa1a8	; 0xa1a8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    ab9c:	ce 53       	subi	r28, 0x3E	; 62
    ab9e:	df 4f       	sbci	r29, 0xFF	; 255
    aba0:	28 81       	ld	r18, Y
    aba2:	39 81       	ldd	r19, Y+1	; 0x01
    aba4:	c2 5c       	subi	r28, 0xC2	; 194
    aba6:	d0 40       	sbci	r29, 0x00	; 0
    aba8:	23 2b       	or	r18, r19
    abaa:	09 f4       	brne	.+2      	; 0xabae <draw_menu(bool)+0x2d4>
    abac:	59 c0       	rjmp	.+178    	; 0xac60 <draw_menu(bool)+0x386>
    abae:	cc 53       	subi	r28, 0x3C	; 60
    abb0:	df 4f       	sbci	r29, 0xFF	; 255
    abb2:	48 81       	ld	r20, Y
    abb4:	59 81       	ldd	r21, Y+1	; 0x01
    abb6:	c4 5c       	subi	r28, 0xC4	; 196
    abb8:	d0 40       	sbci	r29, 0x00	; 0
    abba:	45 2b       	or	r20, r21
    abbc:	09 f4       	brne	.+2      	; 0xabc0 <draw_menu(bool)+0x2e6>
    abbe:	50 c0       	rjmp	.+160    	; 0xac60 <draw_menu(bool)+0x386>
    abc0:	f2 01       	movw	r30, r4
    abc2:	37 97       	sbiw	r30, 0x07	; 7
    abc4:	e6 0d       	add	r30, r6
    abc6:	f7 1d       	adc	r31, r7
    abc8:	25 91       	lpm	r18, Z+
    abca:	34 91       	lpm	r19, Z
    abcc:	f2 01       	movw	r30, r4
    abce:	39 97       	sbiw	r30, 0x09	; 9
    abd0:	e6 0d       	add	r30, r6
    abd2:	f7 1d       	adc	r31, r7
    abd4:	45 91       	lpm	r20, Z+
    abd6:	54 91       	lpm	r21, Z
    abd8:	f2 01       	movw	r30, r4
    abda:	3b 97       	sbiw	r30, 0x0b	; 11
    abdc:	e6 0d       	add	r30, r6
    abde:	f7 1d       	adc	r31, r7
    abe0:	65 91       	lpm	r22, Z+
    abe2:	74 91       	lpm	r23, Z
    abe4:	f2 01       	movw	r30, r4
    abe6:	3d 97       	sbiw	r30, 0x0d	; 13
    abe8:	e6 0d       	add	r30, r6
    abea:	f7 1d       	adc	r31, r7
    abec:	85 91       	lpm	r24, Z+
    abee:	94 91       	lpm	r25, Z
    abf0:	c8 54       	subi	r28, 0x48	; 72
    abf2:	df 4f       	sbci	r29, 0xFF	; 255
    abf4:	e8 81       	ld	r30, Y
    abf6:	f9 81       	ldd	r31, Y+1	; 0x01
    abf8:	c8 5b       	subi	r28, 0xB8	; 184
    abfa:	d0 40       	sbci	r29, 0x00	; 0
    abfc:	6e 0f       	add	r22, r30
    abfe:	7f 1f       	adc	r23, r31
    ac00:	cc 53       	subi	r28, 0x3C	; 60
    ac02:	df 4f       	sbci	r29, 0xFF	; 255
    ac04:	e8 80       	ld	r14, Y
    ac06:	f9 80       	ldd	r15, Y+1	; 0x01
    ac08:	c4 5c       	subi	r28, 0xC4	; 196
    ac0a:	d0 40       	sbci	r29, 0x00	; 0
    ac0c:	ce 53       	subi	r28, 0x3E	; 62
    ac0e:	df 4f       	sbci	r29, 0xFF	; 255
    ac10:	08 81       	ld	r16, Y
    ac12:	19 81       	ldd	r17, Y+1	; 0x01
    ac14:	c2 5c       	subi	r28, 0xC2	; 194
    ac16:	d0 40       	sbci	r29, 0x00	; 0
    ac18:	ca 54       	subi	r28, 0x4A	; 74
    ac1a:	df 4f       	sbci	r29, 0xFF	; 255
    ac1c:	e8 81       	ld	r30, Y
    ac1e:	f9 81       	ldd	r31, Y+1	; 0x01
    ac20:	c6 5b       	subi	r28, 0xB6	; 182
    ac22:	d0 40       	sbci	r29, 0x00	; 0
    ac24:	8e 0f       	add	r24, r30
    ac26:	9f 1f       	adc	r25, r31
    ac28:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    ac2c:	18 2f       	mov	r17, r24
    ac2e:	88 23       	and	r24, r24
    ac30:	b9 f0       	breq	.+46     	; 0xac60 <draw_menu(bool)+0x386>
    ac32:	f2 01       	movw	r30, r4
    ac34:	33 97       	sbiw	r30, 0x03	; 3
    ac36:	e6 0d       	add	r30, r6
    ac38:	f7 1d       	adc	r31, r7
    ac3a:	25 91       	lpm	r18, Z+
    ac3c:	34 91       	lpm	r19, Z
    ac3e:	f1 01       	movw	r30, r2
    ac40:	84 91       	lpm	r24, Z
    ac42:	cf 54       	subi	r28, 0x4F	; 79
    ac44:	df 4f       	sbci	r29, 0xFF	; 255
    ac46:	68 81       	ld	r22, Y
    ac48:	c1 5b       	subi	r28, 0xB1	; 177
    ac4a:	d0 40       	sbci	r29, 0x00	; 0
    ac4c:	70 e0       	ldi	r23, 0x00	; 0
    ac4e:	49 2d       	mov	r20, r9
    ac50:	90 e0       	ldi	r25, 0x00	; 0
    ac52:	f9 01       	movw	r30, r18
    ac54:	19 95       	eicall
    ac56:	c6 53       	subi	r28, 0x36	; 54
    ac58:	df 4f       	sbci	r29, 0xFF	; 255
    ac5a:	18 83       	st	Y, r17
    ac5c:	ca 5c       	subi	r28, 0xCA	; 202
    ac5e:	d0 40       	sbci	r29, 0x00	; 0
    ac60:	93 94       	inc	r9
    ac62:	1d cf       	rjmp	.-454    	; 0xaa9e <draw_menu(bool)+0x1c4>
    ac64:	cc 53       	subi	r28, 0x3C	; 60
    ac66:	df 4f       	sbci	r29, 0xFF	; 255
    ac68:	19 82       	std	Y+1, r1	; 0x01
    ac6a:	18 82       	st	Y, r1
    ac6c:	c4 5c       	subi	r28, 0xC4	; 196
    ac6e:	d0 40       	sbci	r29, 0x00	; 0
    ac70:	ce 53       	subi	r28, 0x3E	; 62
    ac72:	df 4f       	sbci	r29, 0xFF	; 255
    ac74:	19 82       	std	Y+1, r1	; 0x01
    ac76:	18 82       	st	Y, r1
    ac78:	c2 5c       	subi	r28, 0xC2	; 194
    ac7a:	d0 40       	sbci	r29, 0x00	; 0
    ac7c:	71 ce       	rjmp	.-798    	; 0xa960 <draw_menu(bool)+0x86>
    ac7e:	68 94       	set
    ac80:	91 f8       	bld	r9, 1
    ac82:	b8 ce       	rjmp	.-656    	; 0xa9f4 <draw_menu(bool)+0x11a>
    ac84:	89 2d       	mov	r24, r9
    ac86:	84 60       	ori	r24, 0x04	; 4
    ac88:	ca ce       	rjmp	.-620    	; 0xaa1e <draw_menu(bool)+0x144>
    ac8a:	88 60       	ori	r24, 0x08	; 8
    ac8c:	cb ce       	rjmp	.-618    	; 0xaa24 <draw_menu(bool)+0x14a>
    ac8e:	c6 53       	subi	r28, 0x36	; 54
    ac90:	df 4f       	sbci	r29, 0xFF	; 255
    ac92:	f8 81       	ld	r31, Y
    ac94:	ca 5c       	subi	r28, 0xCA	; 202
    ac96:	d0 40       	sbci	r29, 0x00	; 0
    ac98:	f1 11       	cpse	r31, r1
    ac9a:	0c 94 75 65 	jmp	0xcaea	; 0xcaea <draw_menu(bool)+0x2210>
    ac9e:	91 2c       	mov	r9, r1
    aca0:	93 01       	movw	r18, r6
    aca2:	22 54       	subi	r18, 0x42	; 66
    aca4:	3d 4f       	sbci	r19, 0xFD	; 253
    aca6:	c0 54       	subi	r28, 0x40	; 64
    aca8:	df 4f       	sbci	r29, 0xFF	; 255
    acaa:	39 83       	std	Y+1, r19	; 0x01
    acac:	28 83       	st	Y, r18
    acae:	c0 5c       	subi	r28, 0xC0	; 192
    acb0:	d0 40       	sbci	r29, 0x00	; 0
    acb2:	1e 01       	movw	r2, r28
    acb4:	31 e8       	ldi	r19, 0x81	; 129
    acb6:	23 0e       	add	r2, r19
    acb8:	31 1c       	adc	r3, r1
    acba:	c0 54       	subi	r28, 0x40	; 64
    acbc:	df 4f       	sbci	r29, 0xFF	; 255
    acbe:	e8 81       	ld	r30, Y
    acc0:	f9 81       	ldd	r31, Y+1	; 0x01
    acc2:	c0 5c       	subi	r28, 0xC0	; 192
    acc4:	d0 40       	sbci	r29, 0x00	; 0
    acc6:	84 91       	lpm	r24, Z
    acc8:	98 16       	cp	r9, r24
    acca:	08 f0       	brcs	.+2      	; 0xacce <draw_menu(bool)+0x3f4>
    accc:	1c c1       	rjmp	.+568    	; 0xaf06 <draw_menu(bool)+0x62c>
    acce:	f7 e1       	ldi	r31, 0x17	; 23
    acd0:	9f 9e       	mul	r9, r31
    acd2:	20 01       	movw	r4, r0
    acd4:	11 24       	eor	r1, r1
    acd6:	f2 01       	movw	r30, r4
    acd8:	ef 53       	subi	r30, 0x3F	; 63
    acda:	ff 4f       	sbci	r31, 0xFF	; 255
    acdc:	e6 0d       	add	r30, r6
    acde:	f7 1d       	adc	r31, r7
    ace0:	25 91       	lpm	r18, Z+
    ace2:	34 91       	lpm	r19, Z
    ace4:	c2 01       	movw	r24, r4
    ace6:	85 54       	subi	r24, 0x45	; 69
    ace8:	9f 4f       	sbci	r25, 0xFF	; 255
    acea:	a3 01       	movw	r20, r6
    acec:	48 0f       	add	r20, r24
    acee:	59 1f       	adc	r21, r25
    acf0:	c6 54       	subi	r28, 0x46	; 70
    acf2:	df 4f       	sbci	r29, 0xFF	; 255
    acf4:	59 83       	std	Y+1, r21	; 0x01
    acf6:	48 83       	st	Y, r20
    acf8:	ca 5b       	subi	r28, 0xBA	; 186
    acfa:	d0 40       	sbci	r29, 0x00	; 0
    acfc:	fa 01       	movw	r30, r20
    acfe:	84 91       	lpm	r24, Z
    ad00:	cf 54       	subi	r28, 0x4F	; 79
    ad02:	df 4f       	sbci	r29, 0xFF	; 255
    ad04:	68 81       	ld	r22, Y
    ad06:	c1 5b       	subi	r28, 0xB1	; 177
    ad08:	d0 40       	sbci	r29, 0x00	; 0
    ad0a:	70 e0       	ldi	r23, 0x00	; 0
    ad0c:	49 2d       	mov	r20, r9
    ad0e:	90 e0       	ldi	r25, 0x00	; 0
    ad10:	f9 01       	movw	r30, r18
    ad12:	19 95       	eicall
    ad14:	88 23       	and	r24, r24
    ad16:	09 f4       	brne	.+2      	; 0xad1a <draw_menu(bool)+0x440>
    ad18:	f4 c0       	rjmp	.+488    	; 0xaf02 <draw_menu(bool)+0x628>
    ad1a:	f2 01       	movw	r30, r4
    ad1c:	e0 54       	subi	r30, 0x40	; 64
    ad1e:	ff 4f       	sbci	r31, 0xFF	; 255
    ad20:	e6 0d       	add	r30, r6
    ad22:	f7 1d       	adc	r31, r7
    ad24:	84 91       	lpm	r24, Z
    ad26:	cd 52       	subi	r28, 0x2D	; 45
    ad28:	df 4f       	sbci	r29, 0xFF	; 255
    ad2a:	68 81       	ld	r22, Y
    ad2c:	c3 5d       	subi	r28, 0xD3	; 211
    ad2e:	d0 40       	sbci	r29, 0x00	; 0
    ad30:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    ad34:	88 23       	and	r24, r24
    ad36:	09 f4       	brne	.+2      	; 0xad3a <draw_menu(bool)+0x460>
    ad38:	78 c0       	rjmp	.+240    	; 0xae2a <draw_menu(bool)+0x550>
    ad3a:	f2 01       	movw	r30, r4
    ad3c:	e4 55       	subi	r30, 0x54	; 84
    ad3e:	ff 4f       	sbci	r31, 0xFF	; 255
    ad40:	e6 0d       	add	r30, r6
    ad42:	f7 1d       	adc	r31, r7
    ad44:	65 91       	lpm	r22, Z+
    ad46:	74 91       	lpm	r23, Z
    ad48:	c1 01       	movw	r24, r2
    ad4a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    ad4e:	f2 01       	movw	r30, r4
    ad50:	e2 54       	subi	r30, 0x42	; 66
    ad52:	ff 4f       	sbci	r31, 0xFF	; 255
    ad54:	e6 0d       	add	r30, r6
    ad56:	f7 1d       	adc	r31, r7
    ad58:	25 91       	lpm	r18, Z+
    ad5a:	34 91       	lpm	r19, Z
    ad5c:	c6 54       	subi	r28, 0x46	; 70
    ad5e:	df 4f       	sbci	r29, 0xFF	; 255
    ad60:	e8 81       	ld	r30, Y
    ad62:	f9 81       	ldd	r31, Y+1	; 0x01
    ad64:	ca 5b       	subi	r28, 0xBA	; 186
    ad66:	d0 40       	sbci	r29, 0x00	; 0
    ad68:	84 91       	lpm	r24, Z
    ad6a:	cf 54       	subi	r28, 0x4F	; 79
    ad6c:	df 4f       	sbci	r29, 0xFF	; 255
    ad6e:	68 81       	ld	r22, Y
    ad70:	c1 5b       	subi	r28, 0xB1	; 177
    ad72:	d0 40       	sbci	r29, 0x00	; 0
    ad74:	70 e0       	ldi	r23, 0x00	; 0
    ad76:	49 2d       	mov	r20, r9
    ad78:	90 e0       	ldi	r25, 0x00	; 0
    ad7a:	f9 01       	movw	r30, r18
    ad7c:	19 95       	eicall
    ad7e:	19 82       	std	Y+1, r1	; 0x01
    ad80:	f2 01       	movw	r30, r4
    ad82:	e7 54       	subi	r30, 0x47	; 71
    ad84:	ff 4f       	sbci	r31, 0xFF	; 255
    ad86:	e6 0d       	add	r30, r6
    ad88:	f7 1d       	adc	r31, r7
    ad8a:	a5 90       	lpm	r10, Z+
    ad8c:	b4 90       	lpm	r11, Z
    ad8e:	f2 01       	movw	r30, r4
    ad90:	e9 54       	subi	r30, 0x49	; 73
    ad92:	ff 4f       	sbci	r31, 0xFF	; 255
    ad94:	e6 0d       	add	r30, r6
    ad96:	f7 1d       	adc	r31, r7
    ad98:	c5 90       	lpm	r12, Z+
    ad9a:	d4 90       	lpm	r13, Z
    ad9c:	82 01       	movw	r16, r4
    ad9e:	0a 54       	subi	r16, 0x4A	; 74
    ada0:	1f 4f       	sbci	r17, 0xFF	; 255
    ada2:	06 0d       	add	r16, r6
    ada4:	17 1d       	adc	r17, r7
    ada6:	f8 01       	movw	r30, r16
    ada8:	04 91       	lpm	r16, Z
    adaa:	f2 01       	movw	r30, r4
    adac:	ec 54       	subi	r30, 0x4C	; 76
    adae:	ff 4f       	sbci	r31, 0xFF	; 255
    adb0:	e6 0d       	add	r30, r6
    adb2:	f7 1d       	adc	r31, r7
    adb4:	25 91       	lpm	r18, Z+
    adb6:	34 91       	lpm	r19, Z
    adb8:	f2 01       	movw	r30, r4
    adba:	ee 54       	subi	r30, 0x4E	; 78
    adbc:	ff 4f       	sbci	r31, 0xFF	; 255
    adbe:	e6 0d       	add	r30, r6
    adc0:	f7 1d       	adc	r31, r7
    adc2:	45 91       	lpm	r20, Z+
    adc4:	54 91       	lpm	r21, Z
    adc6:	f2 01       	movw	r30, r4
    adc8:	e0 55       	subi	r30, 0x50	; 80
    adca:	ff 4f       	sbci	r31, 0xFF	; 255
    adcc:	e6 0d       	add	r30, r6
    adce:	f7 1d       	adc	r31, r7
    add0:	65 91       	lpm	r22, Z+
    add2:	74 91       	lpm	r23, Z
    add4:	f2 01       	movw	r30, r4
    add6:	e2 55       	subi	r30, 0x52	; 82
    add8:	ff 4f       	sbci	r31, 0xFF	; 255
    adda:	e6 0d       	add	r30, r6
    addc:	f7 1d       	adc	r31, r7
    adde:	a5 91       	lpm	r26, Z+
    ade0:	b4 91       	lpm	r27, Z
    ade2:	88 24       	eor	r8, r8
    ade4:	83 94       	inc	r8
    ade6:	81 11       	cpse	r24, r1
    ade8:	01 c0       	rjmp	.+2      	; 0xadec <draw_menu(bool)+0x512>
    adea:	81 2c       	mov	r8, r1
    adec:	c8 54       	subi	r28, 0x48	; 72
    adee:	df 4f       	sbci	r29, 0xFF	; 255
    adf0:	88 81       	ld	r24, Y
    adf2:	99 81       	ldd	r25, Y+1	; 0x01
    adf4:	c8 5b       	subi	r28, 0xB8	; 184
    adf6:	d0 40       	sbci	r29, 0x00	; 0
    adf8:	68 0f       	add	r22, r24
    adfa:	79 1f       	adc	r23, r25
    adfc:	e1 e0       	ldi	r30, 0x01	; 1
    adfe:	f0 e0       	ldi	r31, 0x00	; 0
    ae00:	ec 0f       	add	r30, r28
    ae02:	fd 1f       	adc	r31, r29
    ae04:	ff 93       	push	r31
    ae06:	ef 93       	push	r30
    ae08:	3f 92       	push	r3
    ae0a:	2f 92       	push	r2
    ae0c:	e1 2c       	mov	r14, r1
    ae0e:	ca 54       	subi	r28, 0x4A	; 74
    ae10:	df 4f       	sbci	r29, 0xFF	; 255
    ae12:	88 81       	ld	r24, Y
    ae14:	99 81       	ldd	r25, Y+1	; 0x01
    ae16:	c6 5b       	subi	r28, 0xB6	; 182
    ae18:	d0 40       	sbci	r29, 0x00	; 0
    ae1a:	8a 0f       	add	r24, r26
    ae1c:	9b 1f       	adc	r25, r27
    ae1e:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    ae22:	0f 90       	pop	r0
    ae24:	0f 90       	pop	r0
    ae26:	0f 90       	pop	r0
    ae28:	0f 90       	pop	r0
    ae2a:	ce 53       	subi	r28, 0x3E	; 62
    ae2c:	df 4f       	sbci	r29, 0xFF	; 255
    ae2e:	28 81       	ld	r18, Y
    ae30:	39 81       	ldd	r19, Y+1	; 0x01
    ae32:	c2 5c       	subi	r28, 0xC2	; 194
    ae34:	d0 40       	sbci	r29, 0x00	; 0
    ae36:	23 2b       	or	r18, r19
    ae38:	09 f4       	brne	.+2      	; 0xae3c <draw_menu(bool)+0x562>
    ae3a:	63 c0       	rjmp	.+198    	; 0xaf02 <draw_menu(bool)+0x628>
    ae3c:	cc 53       	subi	r28, 0x3C	; 60
    ae3e:	df 4f       	sbci	r29, 0xFF	; 255
    ae40:	48 81       	ld	r20, Y
    ae42:	59 81       	ldd	r21, Y+1	; 0x01
    ae44:	c4 5c       	subi	r28, 0xC4	; 196
    ae46:	d0 40       	sbci	r29, 0x00	; 0
    ae48:	45 2b       	or	r20, r21
    ae4a:	09 f4       	brne	.+2      	; 0xae4e <draw_menu(bool)+0x574>
    ae4c:	5a c0       	rjmp	.+180    	; 0xaf02 <draw_menu(bool)+0x628>
    ae4e:	f2 01       	movw	r30, r4
    ae50:	ec 54       	subi	r30, 0x4C	; 76
    ae52:	ff 4f       	sbci	r31, 0xFF	; 255
    ae54:	e6 0d       	add	r30, r6
    ae56:	f7 1d       	adc	r31, r7
    ae58:	25 91       	lpm	r18, Z+
    ae5a:	34 91       	lpm	r19, Z
    ae5c:	f2 01       	movw	r30, r4
    ae5e:	ee 54       	subi	r30, 0x4E	; 78
    ae60:	ff 4f       	sbci	r31, 0xFF	; 255
    ae62:	e6 0d       	add	r30, r6
    ae64:	f7 1d       	adc	r31, r7
    ae66:	45 91       	lpm	r20, Z+
    ae68:	54 91       	lpm	r21, Z
    ae6a:	f2 01       	movw	r30, r4
    ae6c:	e0 55       	subi	r30, 0x50	; 80
    ae6e:	ff 4f       	sbci	r31, 0xFF	; 255
    ae70:	e6 0d       	add	r30, r6
    ae72:	f7 1d       	adc	r31, r7
    ae74:	65 91       	lpm	r22, Z+
    ae76:	74 91       	lpm	r23, Z
    ae78:	f2 01       	movw	r30, r4
    ae7a:	e2 55       	subi	r30, 0x52	; 82
    ae7c:	ff 4f       	sbci	r31, 0xFF	; 255
    ae7e:	e6 0d       	add	r30, r6
    ae80:	f7 1d       	adc	r31, r7
    ae82:	85 91       	lpm	r24, Z+
    ae84:	94 91       	lpm	r25, Z
    ae86:	c8 54       	subi	r28, 0x48	; 72
    ae88:	df 4f       	sbci	r29, 0xFF	; 255
    ae8a:	e8 81       	ld	r30, Y
    ae8c:	f9 81       	ldd	r31, Y+1	; 0x01
    ae8e:	c8 5b       	subi	r28, 0xB8	; 184
    ae90:	d0 40       	sbci	r29, 0x00	; 0
    ae92:	6e 0f       	add	r22, r30
    ae94:	7f 1f       	adc	r23, r31
    ae96:	cc 53       	subi	r28, 0x3C	; 60
    ae98:	df 4f       	sbci	r29, 0xFF	; 255
    ae9a:	e8 80       	ld	r14, Y
    ae9c:	f9 80       	ldd	r15, Y+1	; 0x01
    ae9e:	c4 5c       	subi	r28, 0xC4	; 196
    aea0:	d0 40       	sbci	r29, 0x00	; 0
    aea2:	ce 53       	subi	r28, 0x3E	; 62
    aea4:	df 4f       	sbci	r29, 0xFF	; 255
    aea6:	08 81       	ld	r16, Y
    aea8:	19 81       	ldd	r17, Y+1	; 0x01
    aeaa:	c2 5c       	subi	r28, 0xC2	; 194
    aeac:	d0 40       	sbci	r29, 0x00	; 0
    aeae:	ca 54       	subi	r28, 0x4A	; 74
    aeb0:	df 4f       	sbci	r29, 0xFF	; 255
    aeb2:	e8 81       	ld	r30, Y
    aeb4:	f9 81       	ldd	r31, Y+1	; 0x01
    aeb6:	c6 5b       	subi	r28, 0xB6	; 182
    aeb8:	d0 40       	sbci	r29, 0x00	; 0
    aeba:	8e 0f       	add	r24, r30
    aebc:	9f 1f       	adc	r25, r31
    aebe:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    aec2:	18 2f       	mov	r17, r24
    aec4:	88 23       	and	r24, r24
    aec6:	e9 f0       	breq	.+58     	; 0xaf02 <draw_menu(bool)+0x628>
    aec8:	f2 01       	movw	r30, r4
    aeca:	e4 54       	subi	r30, 0x44	; 68
    aecc:	ff 4f       	sbci	r31, 0xFF	; 255
    aece:	e6 0d       	add	r30, r6
    aed0:	f7 1d       	adc	r31, r7
    aed2:	25 91       	lpm	r18, Z+
    aed4:	34 91       	lpm	r19, Z
    aed6:	c6 54       	subi	r28, 0x46	; 70
    aed8:	df 4f       	sbci	r29, 0xFF	; 255
    aeda:	e8 81       	ld	r30, Y
    aedc:	f9 81       	ldd	r31, Y+1	; 0x01
    aede:	ca 5b       	subi	r28, 0xBA	; 186
    aee0:	d0 40       	sbci	r29, 0x00	; 0
    aee2:	84 91       	lpm	r24, Z
    aee4:	cf 54       	subi	r28, 0x4F	; 79
    aee6:	df 4f       	sbci	r29, 0xFF	; 255
    aee8:	68 81       	ld	r22, Y
    aeea:	c1 5b       	subi	r28, 0xB1	; 177
    aeec:	d0 40       	sbci	r29, 0x00	; 0
    aeee:	70 e0       	ldi	r23, 0x00	; 0
    aef0:	49 2d       	mov	r20, r9
    aef2:	90 e0       	ldi	r25, 0x00	; 0
    aef4:	f9 01       	movw	r30, r18
    aef6:	19 95       	eicall
    aef8:	c6 53       	subi	r28, 0x36	; 54
    aefa:	df 4f       	sbci	r29, 0xFF	; 255
    aefc:	18 83       	st	Y, r17
    aefe:	ca 5c       	subi	r28, 0xCA	; 202
    af00:	d0 40       	sbci	r29, 0x00	; 0
    af02:	93 94       	inc	r9
    af04:	da ce       	rjmp	.-588    	; 0xacba <draw_menu(bool)+0x3e0>
    af06:	c6 53       	subi	r28, 0x36	; 54
    af08:	df 4f       	sbci	r29, 0xFF	; 255
    af0a:	f8 81       	ld	r31, Y
    af0c:	ca 5c       	subi	r28, 0xCA	; 202
    af0e:	d0 40       	sbci	r29, 0x00	; 0
    af10:	f1 11       	cpse	r31, r1
    af12:	0c 94 75 65 	jmp	0xcaea	; 0xcaea <draw_menu(bool)+0x2210>
    af16:	91 2c       	mov	r9, r1
    af18:	23 01       	movw	r4, r6
    af1a:	21 e4       	ldi	r18, 0x41	; 65
    af1c:	42 1a       	sub	r4, r18
    af1e:	2d ef       	ldi	r18, 0xFD	; 253
    af20:	52 0a       	sbc	r5, r18
    af22:	92 e1       	ldi	r25, 0x12	; 18
    af24:	89 2e       	mov	r8, r25
    af26:	f2 01       	movw	r30, r4
    af28:	84 91       	lpm	r24, Z
    af2a:	98 16       	cp	r9, r24
    af2c:	08 f0       	brcs	.+2      	; 0xaf30 <draw_menu(bool)+0x656>
    af2e:	cc c0       	rjmp	.+408    	; 0xb0c8 <draw_menu(bool)+0x7ee>
    af30:	98 9c       	mul	r9, r8
    af32:	50 01       	movw	r10, r0
    af34:	11 24       	eor	r1, r1
    af36:	f5 01       	movw	r30, r10
    af38:	e3 5d       	subi	r30, 0xD3	; 211
    af3a:	fe 4f       	sbci	r31, 0xFE	; 254
    af3c:	e6 0d       	add	r30, r6
    af3e:	f7 1d       	adc	r31, r7
    af40:	25 91       	lpm	r18, Z+
    af42:	34 91       	lpm	r19, Z
    af44:	85 01       	movw	r16, r10
    af46:	0d 5d       	subi	r16, 0xDD	; 221
    af48:	1e 4f       	sbci	r17, 0xFE	; 254
    af4a:	06 0d       	add	r16, r6
    af4c:	17 1d       	adc	r17, r7
    af4e:	f8 01       	movw	r30, r16
    af50:	84 91       	lpm	r24, Z
    af52:	cf 54       	subi	r28, 0x4F	; 79
    af54:	df 4f       	sbci	r29, 0xFF	; 255
    af56:	68 81       	ld	r22, Y
    af58:	c1 5b       	subi	r28, 0xB1	; 177
    af5a:	d0 40       	sbci	r29, 0x00	; 0
    af5c:	70 e0       	ldi	r23, 0x00	; 0
    af5e:	49 2d       	mov	r20, r9
    af60:	90 e0       	ldi	r25, 0x00	; 0
    af62:	f9 01       	movw	r30, r18
    af64:	19 95       	eicall
    af66:	88 23       	and	r24, r24
    af68:	09 f4       	brne	.+2      	; 0xaf6c <draw_menu(bool)+0x692>
    af6a:	ac c0       	rjmp	.+344    	; 0xb0c4 <draw_menu(bool)+0x7ea>
    af6c:	f5 01       	movw	r30, r10
    af6e:	e6 5d       	subi	r30, 0xD6	; 214
    af70:	fe 4f       	sbci	r31, 0xFE	; 254
    af72:	e6 0d       	add	r30, r6
    af74:	f7 1d       	adc	r31, r7
    af76:	84 91       	lpm	r24, Z
    af78:	cd 52       	subi	r28, 0x2D	; 45
    af7a:	df 4f       	sbci	r29, 0xFF	; 255
    af7c:	68 81       	ld	r22, Y
    af7e:	c3 5d       	subi	r28, 0xD3	; 211
    af80:	d0 40       	sbci	r29, 0x00	; 0
    af82:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    af86:	88 23       	and	r24, r24
    af88:	09 f4       	brne	.+2      	; 0xaf8c <draw_menu(bool)+0x6b2>
    af8a:	4a c0       	rjmp	.+148    	; 0xb020 <draw_menu(bool)+0x746>
    af8c:	f5 01       	movw	r30, r10
    af8e:	e1 5d       	subi	r30, 0xD1	; 209
    af90:	fe 4f       	sbci	r31, 0xFE	; 254
    af92:	e6 0d       	add	r30, r6
    af94:	f7 1d       	adc	r31, r7
    af96:	65 91       	lpm	r22, Z+
    af98:	74 91       	lpm	r23, Z
    af9a:	ce 01       	movw	r24, r28
    af9c:	01 96       	adiw	r24, 0x01	; 1
    af9e:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    afa2:	f5 01       	movw	r30, r10
    afa4:	ec 5d       	subi	r30, 0xDC	; 220
    afa6:	fe 4f       	sbci	r31, 0xFE	; 254
    afa8:	e6 0d       	add	r30, r6
    afaa:	f7 1d       	adc	r31, r7
    afac:	a5 91       	lpm	r26, Z+
    afae:	b4 91       	lpm	r27, Z
    afb0:	f8 01       	movw	r30, r16
    afb2:	04 91       	lpm	r16, Z
    afb4:	f5 01       	movw	r30, r10
    afb6:	e8 5d       	subi	r30, 0xD8	; 216
    afb8:	fe 4f       	sbci	r31, 0xFE	; 254
    afba:	e6 0d       	add	r30, r6
    afbc:	f7 1d       	adc	r31, r7
    afbe:	25 91       	lpm	r18, Z+
    afc0:	34 91       	lpm	r19, Z
    afc2:	f5 01       	movw	r30, r10
    afc4:	ea 5d       	subi	r30, 0xDA	; 218
    afc6:	fe 4f       	sbci	r31, 0xFE	; 254
    afc8:	e6 0d       	add	r30, r6
    afca:	f7 1d       	adc	r31, r7
    afcc:	45 91       	lpm	r20, Z+
    afce:	54 91       	lpm	r21, Z
    afd0:	f5 01       	movw	r30, r10
    afd2:	ef 5d       	subi	r30, 0xDF	; 223
    afd4:	fe 4f       	sbci	r31, 0xFE	; 254
    afd6:	e6 0d       	add	r30, r6
    afd8:	f7 1d       	adc	r31, r7
    afda:	65 91       	lpm	r22, Z+
    afdc:	74 91       	lpm	r23, Z
    afde:	f5 01       	movw	r30, r10
    afe0:	e1 5e       	subi	r30, 0xE1	; 225
    afe2:	fe 4f       	sbci	r31, 0xFE	; 254
    afe4:	e6 0d       	add	r30, r6
    afe6:	f7 1d       	adc	r31, r7
    afe8:	85 91       	lpm	r24, Z+
    afea:	94 91       	lpm	r25, Z
    afec:	c8 54       	subi	r28, 0x48	; 72
    afee:	df 4f       	sbci	r29, 0xFF	; 255
    aff0:	e8 81       	ld	r30, Y
    aff2:	f9 81       	ldd	r31, Y+1	; 0x01
    aff4:	c8 5b       	subi	r28, 0xB8	; 184
    aff6:	d0 40       	sbci	r29, 0x00	; 0
    aff8:	6e 0f       	add	r22, r30
    affa:	7f 1f       	adc	r23, r31
    affc:	fe 01       	movw	r30, r28
    affe:	31 96       	adiw	r30, 0x01	; 1
    b000:	6f 01       	movw	r12, r30
    b002:	cf 54       	subi	r28, 0x4F	; 79
    b004:	df 4f       	sbci	r29, 0xFF	; 255
    b006:	e8 80       	ld	r14, Y
    b008:	c1 5b       	subi	r28, 0xB1	; 177
    b00a:	d0 40       	sbci	r29, 0x00	; 0
    b00c:	ca 54       	subi	r28, 0x4A	; 74
    b00e:	df 4f       	sbci	r29, 0xFF	; 255
    b010:	e8 81       	ld	r30, Y
    b012:	f9 81       	ldd	r31, Y+1	; 0x01
    b014:	c6 5b       	subi	r28, 0xB6	; 182
    b016:	d0 40       	sbci	r29, 0x00	; 0
    b018:	8e 0f       	add	r24, r30
    b01a:	9f 1f       	adc	r25, r31
    b01c:	fd 01       	movw	r30, r26
    b01e:	19 95       	eicall
    b020:	ce 53       	subi	r28, 0x3E	; 62
    b022:	df 4f       	sbci	r29, 0xFF	; 255
    b024:	28 81       	ld	r18, Y
    b026:	39 81       	ldd	r19, Y+1	; 0x01
    b028:	c2 5c       	subi	r28, 0xC2	; 194
    b02a:	d0 40       	sbci	r29, 0x00	; 0
    b02c:	23 2b       	or	r18, r19
    b02e:	09 f4       	brne	.+2      	; 0xb032 <draw_menu(bool)+0x758>
    b030:	49 c0       	rjmp	.+146    	; 0xb0c4 <draw_menu(bool)+0x7ea>
    b032:	cc 53       	subi	r28, 0x3C	; 60
    b034:	df 4f       	sbci	r29, 0xFF	; 255
    b036:	48 81       	ld	r20, Y
    b038:	59 81       	ldd	r21, Y+1	; 0x01
    b03a:	c4 5c       	subi	r28, 0xC4	; 196
    b03c:	d0 40       	sbci	r29, 0x00	; 0
    b03e:	45 2b       	or	r20, r21
    b040:	09 f4       	brne	.+2      	; 0xb044 <draw_menu(bool)+0x76a>
    b042:	40 c0       	rjmp	.+128    	; 0xb0c4 <draw_menu(bool)+0x7ea>
    b044:	f5 01       	movw	r30, r10
    b046:	e8 5d       	subi	r30, 0xD8	; 216
    b048:	fe 4f       	sbci	r31, 0xFE	; 254
    b04a:	e6 0d       	add	r30, r6
    b04c:	f7 1d       	adc	r31, r7
    b04e:	25 91       	lpm	r18, Z+
    b050:	34 91       	lpm	r19, Z
    b052:	f5 01       	movw	r30, r10
    b054:	ea 5d       	subi	r30, 0xDA	; 218
    b056:	fe 4f       	sbci	r31, 0xFE	; 254
    b058:	e6 0d       	add	r30, r6
    b05a:	f7 1d       	adc	r31, r7
    b05c:	45 91       	lpm	r20, Z+
    b05e:	54 91       	lpm	r21, Z
    b060:	f5 01       	movw	r30, r10
    b062:	ef 5d       	subi	r30, 0xDF	; 223
    b064:	fe 4f       	sbci	r31, 0xFE	; 254
    b066:	e6 0d       	add	r30, r6
    b068:	f7 1d       	adc	r31, r7
    b06a:	65 91       	lpm	r22, Z+
    b06c:	74 91       	lpm	r23, Z
    b06e:	f5 01       	movw	r30, r10
    b070:	e1 5e       	subi	r30, 0xE1	; 225
    b072:	fe 4f       	sbci	r31, 0xFE	; 254
    b074:	e6 0d       	add	r30, r6
    b076:	f7 1d       	adc	r31, r7
    b078:	85 91       	lpm	r24, Z+
    b07a:	94 91       	lpm	r25, Z
    b07c:	c8 54       	subi	r28, 0x48	; 72
    b07e:	df 4f       	sbci	r29, 0xFF	; 255
    b080:	e8 81       	ld	r30, Y
    b082:	f9 81       	ldd	r31, Y+1	; 0x01
    b084:	c8 5b       	subi	r28, 0xB8	; 184
    b086:	d0 40       	sbci	r29, 0x00	; 0
    b088:	6e 0f       	add	r22, r30
    b08a:	7f 1f       	adc	r23, r31
    b08c:	cc 53       	subi	r28, 0x3C	; 60
    b08e:	df 4f       	sbci	r29, 0xFF	; 255
    b090:	e8 80       	ld	r14, Y
    b092:	f9 80       	ldd	r15, Y+1	; 0x01
    b094:	c4 5c       	subi	r28, 0xC4	; 196
    b096:	d0 40       	sbci	r29, 0x00	; 0
    b098:	ce 53       	subi	r28, 0x3E	; 62
    b09a:	df 4f       	sbci	r29, 0xFF	; 255
    b09c:	08 81       	ld	r16, Y
    b09e:	19 81       	ldd	r17, Y+1	; 0x01
    b0a0:	c2 5c       	subi	r28, 0xC2	; 194
    b0a2:	d0 40       	sbci	r29, 0x00	; 0
    b0a4:	ca 54       	subi	r28, 0x4A	; 74
    b0a6:	df 4f       	sbci	r29, 0xFF	; 255
    b0a8:	e8 81       	ld	r30, Y
    b0aa:	f9 81       	ldd	r31, Y+1	; 0x01
    b0ac:	c6 5b       	subi	r28, 0xB6	; 182
    b0ae:	d0 40       	sbci	r29, 0x00	; 0
    b0b0:	8e 0f       	add	r24, r30
    b0b2:	9f 1f       	adc	r25, r31
    b0b4:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b0b8:	88 23       	and	r24, r24
    b0ba:	21 f0       	breq	.+8      	; 0xb0c4 <draw_menu(bool)+0x7ea>
    b0bc:	86 e4       	ldi	r24, 0x46	; 70
    b0be:	95 e0       	ldi	r25, 0x05	; 5
    b0c0:	0e 94 6a d8 	call	0x1b0d4	; 0x1b0d4 <puts>
    b0c4:	93 94       	inc	r9
    b0c6:	2f cf       	rjmp	.-418    	; 0xaf26 <draw_menu(bool)+0x64c>
    b0c8:	51 2c       	mov	r5, r1
    b0ca:	13 01       	movw	r2, r6
    b0cc:	f0 e4       	ldi	r31, 0x40	; 64
    b0ce:	2f 1a       	sub	r2, r31
    b0d0:	fd ef       	ldi	r31, 0xFD	; 253
    b0d2:	3f 0a       	sbc	r3, r31
    b0d4:	87 e1       	ldi	r24, 0x17	; 23
    b0d6:	48 2e       	mov	r4, r24
    b0d8:	f1 01       	movw	r30, r2
    b0da:	84 91       	lpm	r24, Z
    b0dc:	58 16       	cp	r5, r24
    b0de:	08 f0       	brcs	.+2      	; 0xb0e2 <draw_menu(bool)+0x808>
    b0e0:	01 c1       	rjmp	.+514    	; 0xb2e4 <draw_menu(bool)+0xa0a>
    b0e2:	54 9c       	mul	r5, r4
    b0e4:	40 01       	movw	r8, r0
    b0e6:	11 24       	eor	r1, r1
    b0e8:	f4 01       	movw	r30, r8
    b0ea:	e3 58       	subi	r30, 0x83	; 131
    b0ec:	fe 4f       	sbci	r31, 0xFE	; 254
    b0ee:	e6 0d       	add	r30, r6
    b0f0:	f7 1d       	adc	r31, r7
    b0f2:	84 91       	lpm	r24, Z
    b0f4:	cd 52       	subi	r28, 0x2D	; 45
    b0f6:	df 4f       	sbci	r29, 0xFF	; 255
    b0f8:	68 81       	ld	r22, Y
    b0fa:	c3 5d       	subi	r28, 0xD3	; 211
    b0fc:	d0 40       	sbci	r29, 0x00	; 0
    b0fe:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    b102:	88 23       	and	r24, r24
    b104:	09 f4       	brne	.+2      	; 0xb108 <draw_menu(bool)+0x82e>
    b106:	81 c0       	rjmp	.+258    	; 0xb20a <draw_menu(bool)+0x930>
    b108:	f4 01       	movw	r30, r8
    b10a:	e9 59       	subi	r30, 0x99	; 153
    b10c:	fe 4f       	sbci	r31, 0xFE	; 254
    b10e:	e6 0d       	add	r30, r6
    b110:	f7 1d       	adc	r31, r7
    b112:	65 91       	lpm	r22, Z+
    b114:	74 91       	lpm	r23, Z
    b116:	ce 01       	movw	r24, r28
    b118:	8f 57       	subi	r24, 0x7F	; 127
    b11a:	9f 4f       	sbci	r25, 0xFF	; 255
    b11c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    b120:	f4 01       	movw	r30, r8
    b122:	e7 58       	subi	r30, 0x87	; 135
    b124:	fe 4f       	sbci	r31, 0xFE	; 254
    b126:	e6 0d       	add	r30, r6
    b128:	f7 1d       	adc	r31, r7
    b12a:	25 91       	lpm	r18, Z+
    b12c:	34 91       	lpm	r19, Z
    b12e:	f4 01       	movw	r30, r8
    b130:	e5 58       	subi	r30, 0x85	; 133
    b132:	fe 4f       	sbci	r31, 0xFE	; 254
    b134:	e6 0d       	add	r30, r6
    b136:	f7 1d       	adc	r31, r7
    b138:	c5 90       	lpm	r12, Z+
    b13a:	d4 90       	lpm	r13, Z
    b13c:	84 01       	movw	r16, r8
    b13e:	0a 58       	subi	r16, 0x8A	; 138
    b140:	1e 4f       	sbci	r17, 0xFE	; 254
    b142:	06 0d       	add	r16, r6
    b144:	17 1d       	adc	r17, r7
    b146:	f8 01       	movw	r30, r16
    b148:	84 91       	lpm	r24, Z
    b14a:	cf 54       	subi	r28, 0x4F	; 79
    b14c:	df 4f       	sbci	r29, 0xFF	; 255
    b14e:	68 81       	ld	r22, Y
    b150:	c1 5b       	subi	r28, 0xB1	; 177
    b152:	d0 40       	sbci	r29, 0x00	; 0
    b154:	70 e0       	ldi	r23, 0x00	; 0
    b156:	45 2d       	mov	r20, r5
    b158:	90 e0       	ldi	r25, 0x00	; 0
    b15a:	f9 01       	movw	r30, r18
    b15c:	19 95       	eicall
    b15e:	f8 2e       	mov	r15, r24
    b160:	cf 55       	subi	r28, 0x5F	; 95
    b162:	df 4f       	sbci	r29, 0xFF	; 255
    b164:	18 82       	st	Y, r1
    b166:	c1 5a       	subi	r28, 0xA1	; 161
    b168:	d0 40       	sbci	r29, 0x00	; 0
    b16a:	f8 01       	movw	r30, r16
    b16c:	44 91       	lpm	r20, Z
    b16e:	84 91       	lpm	r24, Z
    b170:	8e 01       	movw	r16, r28
    b172:	0f 55       	subi	r16, 0x5F	; 95
    b174:	1f 4f       	sbci	r17, 0xFF	; 255
    b176:	9e 01       	movw	r18, r28
    b178:	2f 5f       	subi	r18, 0xFF	; 255
    b17a:	3f 4f       	sbci	r19, 0xFF	; 255
    b17c:	cf 54       	subi	r28, 0x4F	; 79
    b17e:	df 4f       	sbci	r29, 0xFF	; 255
    b180:	68 81       	ld	r22, Y
    b182:	c1 5b       	subi	r28, 0xB1	; 177
    b184:	d0 40       	sbci	r29, 0x00	; 0
    b186:	f6 01       	movw	r30, r12
    b188:	19 95       	eicall
    b18a:	f4 01       	movw	r30, r8
    b18c:	ef 58       	subi	r30, 0x8F	; 143
    b18e:	fe 4f       	sbci	r31, 0xFE	; 254
    b190:	e6 0d       	add	r30, r6
    b192:	f7 1d       	adc	r31, r7
    b194:	05 91       	lpm	r16, Z+
    b196:	14 91       	lpm	r17, Z
    b198:	f4 01       	movw	r30, r8
    b19a:	e1 59       	subi	r30, 0x91	; 145
    b19c:	fe 4f       	sbci	r31, 0xFE	; 254
    b19e:	e6 0d       	add	r30, r6
    b1a0:	f7 1d       	adc	r31, r7
    b1a2:	25 91       	lpm	r18, Z+
    b1a4:	34 91       	lpm	r19, Z
    b1a6:	f4 01       	movw	r30, r8
    b1a8:	e3 59       	subi	r30, 0x93	; 147
    b1aa:	fe 4f       	sbci	r31, 0xFE	; 254
    b1ac:	e6 0d       	add	r30, r6
    b1ae:	f7 1d       	adc	r31, r7
    b1b0:	45 91       	lpm	r20, Z+
    b1b2:	54 91       	lpm	r21, Z
    b1b4:	f4 01       	movw	r30, r8
    b1b6:	e5 59       	subi	r30, 0x95	; 149
    b1b8:	fe 4f       	sbci	r31, 0xFE	; 254
    b1ba:	e6 0d       	add	r30, r6
    b1bc:	f7 1d       	adc	r31, r7
    b1be:	65 91       	lpm	r22, Z+
    b1c0:	74 91       	lpm	r23, Z
    b1c2:	f4 01       	movw	r30, r8
    b1c4:	e7 59       	subi	r30, 0x97	; 151
    b1c6:	fe 4f       	sbci	r31, 0xFE	; 254
    b1c8:	e6 0d       	add	r30, r6
    b1ca:	f7 1d       	adc	r31, r7
    b1cc:	85 91       	lpm	r24, Z+
    b1ce:	94 91       	lpm	r25, Z
    b1d0:	ee 24       	eor	r14, r14
    b1d2:	e3 94       	inc	r14
    b1d4:	f1 10       	cpse	r15, r1
    b1d6:	01 c0       	rjmp	.+2      	; 0xb1da <draw_menu(bool)+0x900>
    b1d8:	e1 2c       	mov	r14, r1
    b1da:	c8 54       	subi	r28, 0x48	; 72
    b1dc:	df 4f       	sbci	r29, 0xFF	; 255
    b1de:	e8 81       	ld	r30, Y
    b1e0:	f9 81       	ldd	r31, Y+1	; 0x01
    b1e2:	c8 5b       	subi	r28, 0xB8	; 184
    b1e4:	d0 40       	sbci	r29, 0x00	; 0
    b1e6:	6e 0f       	add	r22, r30
    b1e8:	7f 1f       	adc	r23, r31
    b1ea:	fe 01       	movw	r30, r28
    b1ec:	31 96       	adiw	r30, 0x01	; 1
    b1ee:	5f 01       	movw	r10, r30
    b1f0:	e0 58       	subi	r30, 0x80	; 128
    b1f2:	ff 4f       	sbci	r31, 0xFF	; 255
    b1f4:	6f 01       	movw	r12, r30
    b1f6:	ca 54       	subi	r28, 0x4A	; 74
    b1f8:	df 4f       	sbci	r29, 0xFF	; 255
    b1fa:	e8 81       	ld	r30, Y
    b1fc:	f9 81       	ldd	r31, Y+1	; 0x01
    b1fe:	c6 5b       	subi	r28, 0xB6	; 182
    b200:	d0 40       	sbci	r29, 0x00	; 0
    b202:	8e 0f       	add	r24, r30
    b204:	9f 1f       	adc	r25, r31
    b206:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <button_switch_1(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, char*, char*)>
    b20a:	ce 53       	subi	r28, 0x3E	; 62
    b20c:	df 4f       	sbci	r29, 0xFF	; 255
    b20e:	28 81       	ld	r18, Y
    b210:	39 81       	ldd	r19, Y+1	; 0x01
    b212:	c2 5c       	subi	r28, 0xC2	; 194
    b214:	d0 40       	sbci	r29, 0x00	; 0
    b216:	23 2b       	or	r18, r19
    b218:	09 f4       	brne	.+2      	; 0xb21c <draw_menu(bool)+0x942>
    b21a:	62 c0       	rjmp	.+196    	; 0xb2e0 <draw_menu(bool)+0xa06>
    b21c:	cc 53       	subi	r28, 0x3C	; 60
    b21e:	df 4f       	sbci	r29, 0xFF	; 255
    b220:	48 81       	ld	r20, Y
    b222:	59 81       	ldd	r21, Y+1	; 0x01
    b224:	c4 5c       	subi	r28, 0xC4	; 196
    b226:	d0 40       	sbci	r29, 0x00	; 0
    b228:	45 2b       	or	r20, r21
    b22a:	09 f4       	brne	.+2      	; 0xb22e <draw_menu(bool)+0x954>
    b22c:	59 c0       	rjmp	.+178    	; 0xb2e0 <draw_menu(bool)+0xa06>
    b22e:	f4 01       	movw	r30, r8
    b230:	e1 59       	subi	r30, 0x91	; 145
    b232:	fe 4f       	sbci	r31, 0xFE	; 254
    b234:	e6 0d       	add	r30, r6
    b236:	f7 1d       	adc	r31, r7
    b238:	25 91       	lpm	r18, Z+
    b23a:	34 91       	lpm	r19, Z
    b23c:	f4 01       	movw	r30, r8
    b23e:	e3 59       	subi	r30, 0x93	; 147
    b240:	fe 4f       	sbci	r31, 0xFE	; 254
    b242:	e6 0d       	add	r30, r6
    b244:	f7 1d       	adc	r31, r7
    b246:	45 91       	lpm	r20, Z+
    b248:	54 91       	lpm	r21, Z
    b24a:	f4 01       	movw	r30, r8
    b24c:	e5 59       	subi	r30, 0x95	; 149
    b24e:	fe 4f       	sbci	r31, 0xFE	; 254
    b250:	e6 0d       	add	r30, r6
    b252:	f7 1d       	adc	r31, r7
    b254:	65 91       	lpm	r22, Z+
    b256:	74 91       	lpm	r23, Z
    b258:	f4 01       	movw	r30, r8
    b25a:	e7 59       	subi	r30, 0x97	; 151
    b25c:	fe 4f       	sbci	r31, 0xFE	; 254
    b25e:	e6 0d       	add	r30, r6
    b260:	f7 1d       	adc	r31, r7
    b262:	85 91       	lpm	r24, Z+
    b264:	94 91       	lpm	r25, Z
    b266:	c8 54       	subi	r28, 0x48	; 72
    b268:	df 4f       	sbci	r29, 0xFF	; 255
    b26a:	e8 81       	ld	r30, Y
    b26c:	f9 81       	ldd	r31, Y+1	; 0x01
    b26e:	c8 5b       	subi	r28, 0xB8	; 184
    b270:	d0 40       	sbci	r29, 0x00	; 0
    b272:	6e 0f       	add	r22, r30
    b274:	7f 1f       	adc	r23, r31
    b276:	cc 53       	subi	r28, 0x3C	; 60
    b278:	df 4f       	sbci	r29, 0xFF	; 255
    b27a:	e8 80       	ld	r14, Y
    b27c:	f9 80       	ldd	r15, Y+1	; 0x01
    b27e:	c4 5c       	subi	r28, 0xC4	; 196
    b280:	d0 40       	sbci	r29, 0x00	; 0
    b282:	ce 53       	subi	r28, 0x3E	; 62
    b284:	df 4f       	sbci	r29, 0xFF	; 255
    b286:	08 81       	ld	r16, Y
    b288:	19 81       	ldd	r17, Y+1	; 0x01
    b28a:	c2 5c       	subi	r28, 0xC2	; 194
    b28c:	d0 40       	sbci	r29, 0x00	; 0
    b28e:	ca 54       	subi	r28, 0x4A	; 74
    b290:	df 4f       	sbci	r29, 0xFF	; 255
    b292:	e8 81       	ld	r30, Y
    b294:	f9 81       	ldd	r31, Y+1	; 0x01
    b296:	c6 5b       	subi	r28, 0xB6	; 182
    b298:	d0 40       	sbci	r29, 0x00	; 0
    b29a:	8e 0f       	add	r24, r30
    b29c:	9f 1f       	adc	r25, r31
    b29e:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b2a2:	18 2f       	mov	r17, r24
    b2a4:	88 23       	and	r24, r24
    b2a6:	e1 f0       	breq	.+56     	; 0xb2e0 <draw_menu(bool)+0xa06>
    b2a8:	f4 01       	movw	r30, r8
    b2aa:	e9 58       	subi	r30, 0x89	; 137
    b2ac:	fe 4f       	sbci	r31, 0xFE	; 254
    b2ae:	e6 0d       	add	r30, r6
    b2b0:	f7 1d       	adc	r31, r7
    b2b2:	25 91       	lpm	r18, Z+
    b2b4:	34 91       	lpm	r19, Z
    b2b6:	f4 01       	movw	r30, r8
    b2b8:	ea 58       	subi	r30, 0x8A	; 138
    b2ba:	fe 4f       	sbci	r31, 0xFE	; 254
    b2bc:	e6 0d       	add	r30, r6
    b2be:	f7 1d       	adc	r31, r7
    b2c0:	84 91       	lpm	r24, Z
    b2c2:	cf 54       	subi	r28, 0x4F	; 79
    b2c4:	df 4f       	sbci	r29, 0xFF	; 255
    b2c6:	68 81       	ld	r22, Y
    b2c8:	c1 5b       	subi	r28, 0xB1	; 177
    b2ca:	d0 40       	sbci	r29, 0x00	; 0
    b2cc:	70 e0       	ldi	r23, 0x00	; 0
    b2ce:	45 2d       	mov	r20, r5
    b2d0:	90 e0       	ldi	r25, 0x00	; 0
    b2d2:	f9 01       	movw	r30, r18
    b2d4:	19 95       	eicall
    b2d6:	c6 53       	subi	r28, 0x36	; 54
    b2d8:	df 4f       	sbci	r29, 0xFF	; 255
    b2da:	18 83       	st	Y, r17
    b2dc:	ca 5c       	subi	r28, 0xCA	; 202
    b2de:	d0 40       	sbci	r29, 0x00	; 0
    b2e0:	53 94       	inc	r5
    b2e2:	fa ce       	rjmp	.-524    	; 0xb0d8 <draw_menu(bool)+0x7fe>
    b2e4:	c6 53       	subi	r28, 0x36	; 54
    b2e6:	df 4f       	sbci	r29, 0xFF	; 255
    b2e8:	f8 81       	ld	r31, Y
    b2ea:	ca 5c       	subi	r28, 0xCA	; 202
    b2ec:	d0 40       	sbci	r29, 0x00	; 0
    b2ee:	f1 11       	cpse	r31, r1
    b2f0:	0c 94 75 65 	jmp	0xcaea	; 0xcaea <draw_menu(bool)+0x2210>
    b2f4:	51 2c       	mov	r5, r1
    b2f6:	43 01       	movw	r8, r6
    b2f8:	2e e3       	ldi	r18, 0x3E	; 62
    b2fa:	82 1a       	sub	r8, r18
    b2fc:	2d ef       	ldi	r18, 0xFD	; 253
    b2fe:	92 0a       	sbc	r9, r18
    b300:	f4 01       	movw	r30, r8
    b302:	84 91       	lpm	r24, Z
    b304:	58 16       	cp	r5, r24
    b306:	08 f0       	brcs	.+2      	; 0xb30a <draw_menu(bool)+0xa30>
    b308:	d6 c0       	rjmp	.+428    	; 0xb4b6 <draw_menu(bool)+0xbdc>
    b30a:	f0 e1       	ldi	r31, 0x10	; 16
    b30c:	5f 9e       	mul	r5, r31
    b30e:	60 01       	movw	r12, r0
    b310:	11 24       	eor	r1, r1
    b312:	f6 01       	movw	r30, r12
    b314:	e8 51       	subi	r30, 0x18	; 24
    b316:	fe 4f       	sbci	r31, 0xFE	; 254
    b318:	e6 0d       	add	r30, r6
    b31a:	f7 1d       	adc	r31, r7
    b31c:	25 91       	lpm	r18, Z+
    b31e:	34 91       	lpm	r19, Z
    b320:	56 01       	movw	r10, r12
    b322:	4c e1       	ldi	r20, 0x1C	; 28
    b324:	a4 1a       	sub	r10, r20
    b326:	4e ef       	ldi	r20, 0xFE	; 254
    b328:	b4 0a       	sbc	r11, r20
    b32a:	a6 0c       	add	r10, r6
    b32c:	b7 1c       	adc	r11, r7
    b32e:	f5 01       	movw	r30, r10
    b330:	84 91       	lpm	r24, Z
    b332:	cf 54       	subi	r28, 0x4F	; 79
    b334:	df 4f       	sbci	r29, 0xFF	; 255
    b336:	68 81       	ld	r22, Y
    b338:	c1 5b       	subi	r28, 0xB1	; 177
    b33a:	d0 40       	sbci	r29, 0x00	; 0
    b33c:	70 e0       	ldi	r23, 0x00	; 0
    b33e:	45 2d       	mov	r20, r5
    b340:	90 e0       	ldi	r25, 0x00	; 0
    b342:	f9 01       	movw	r30, r18
    b344:	19 95       	eicall
    b346:	88 23       	and	r24, r24
    b348:	09 f4       	brne	.+2      	; 0xb34c <draw_menu(bool)+0xa72>
    b34a:	b3 c0       	rjmp	.+358    	; 0xb4b2 <draw_menu(bool)+0xbd8>
    b34c:	f6 01       	movw	r30, r12
    b34e:	e9 51       	subi	r30, 0x19	; 25
    b350:	fe 4f       	sbci	r31, 0xFE	; 254
    b352:	e6 0d       	add	r30, r6
    b354:	f7 1d       	adc	r31, r7
    b356:	84 91       	lpm	r24, Z
    b358:	cd 52       	subi	r28, 0x2D	; 45
    b35a:	df 4f       	sbci	r29, 0xFF	; 255
    b35c:	68 81       	ld	r22, Y
    b35e:	c3 5d       	subi	r28, 0xD3	; 211
    b360:	d0 40       	sbci	r29, 0x00	; 0
    b362:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    b366:	88 23       	and	r24, r24
    b368:	09 f4       	brne	.+2      	; 0xb36c <draw_menu(bool)+0xa92>
    b36a:	3c c0       	rjmp	.+120    	; 0xb3e4 <draw_menu(bool)+0xb0a>
    b36c:	f6 01       	movw	r30, r12
    b36e:	e6 52       	subi	r30, 0x26	; 38
    b370:	fe 4f       	sbci	r31, 0xFE	; 254
    b372:	e6 0d       	add	r30, r6
    b374:	f7 1d       	adc	r31, r7
    b376:	e5 90       	lpm	r14, Z+
    b378:	f4 90       	lpm	r15, Z
    b37a:	f6 01       	movw	r30, r12
    b37c:	ed 51       	subi	r30, 0x1D	; 29
    b37e:	fe 4f       	sbci	r31, 0xFE	; 254
    b380:	e6 0d       	add	r30, r6
    b382:	f7 1d       	adc	r31, r7
    b384:	05 91       	lpm	r16, Z+
    b386:	14 91       	lpm	r17, Z
    b388:	f6 01       	movw	r30, r12
    b38a:	ef 51       	subi	r30, 0x1F	; 31
    b38c:	fe 4f       	sbci	r31, 0xFE	; 254
    b38e:	e6 0d       	add	r30, r6
    b390:	f7 1d       	adc	r31, r7
    b392:	25 91       	lpm	r18, Z+
    b394:	34 91       	lpm	r19, Z
    b396:	f6 01       	movw	r30, r12
    b398:	e1 52       	subi	r30, 0x21	; 33
    b39a:	fe 4f       	sbci	r31, 0xFE	; 254
    b39c:	e6 0d       	add	r30, r6
    b39e:	f7 1d       	adc	r31, r7
    b3a0:	45 91       	lpm	r20, Z+
    b3a2:	54 91       	lpm	r21, Z
    b3a4:	f6 01       	movw	r30, r12
    b3a6:	e3 52       	subi	r30, 0x23	; 35
    b3a8:	fe 4f       	sbci	r31, 0xFE	; 254
    b3aa:	e6 0d       	add	r30, r6
    b3ac:	f7 1d       	adc	r31, r7
    b3ae:	65 91       	lpm	r22, Z+
    b3b0:	74 91       	lpm	r23, Z
    b3b2:	f6 01       	movw	r30, r12
    b3b4:	e5 52       	subi	r30, 0x25	; 37
    b3b6:	fe 4f       	sbci	r31, 0xFE	; 254
    b3b8:	e6 0d       	add	r30, r6
    b3ba:	f7 1d       	adc	r31, r7
    b3bc:	85 91       	lpm	r24, Z+
    b3be:	94 91       	lpm	r25, Z
    b3c0:	c8 54       	subi	r28, 0x48	; 72
    b3c2:	df 4f       	sbci	r29, 0xFF	; 255
    b3c4:	e8 81       	ld	r30, Y
    b3c6:	f9 81       	ldd	r31, Y+1	; 0x01
    b3c8:	c8 5b       	subi	r28, 0xB8	; 184
    b3ca:	d0 40       	sbci	r29, 0x00	; 0
    b3cc:	6e 0f       	add	r22, r30
    b3ce:	7f 1f       	adc	r23, r31
    b3d0:	ca 54       	subi	r28, 0x4A	; 74
    b3d2:	df 4f       	sbci	r29, 0xFF	; 255
    b3d4:	e8 81       	ld	r30, Y
    b3d6:	f9 81       	ldd	r31, Y+1	; 0x01
    b3d8:	c6 5b       	subi	r28, 0xB6	; 182
    b3da:	d0 40       	sbci	r29, 0x00	; 0
    b3dc:	8e 0f       	add	r24, r30
    b3de:	9f 1f       	adc	r25, r31
    b3e0:	0e 94 c1 53 	call	0xa782	; 0xa782 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    b3e4:	ce 53       	subi	r28, 0x3E	; 62
    b3e6:	df 4f       	sbci	r29, 0xFF	; 255
    b3e8:	28 81       	ld	r18, Y
    b3ea:	39 81       	ldd	r19, Y+1	; 0x01
    b3ec:	c2 5c       	subi	r28, 0xC2	; 194
    b3ee:	d0 40       	sbci	r29, 0x00	; 0
    b3f0:	23 2b       	or	r18, r19
    b3f2:	09 f4       	brne	.+2      	; 0xb3f6 <draw_menu(bool)+0xb1c>
    b3f4:	5e c0       	rjmp	.+188    	; 0xb4b2 <draw_menu(bool)+0xbd8>
    b3f6:	cc 53       	subi	r28, 0x3C	; 60
    b3f8:	df 4f       	sbci	r29, 0xFF	; 255
    b3fa:	48 81       	ld	r20, Y
    b3fc:	59 81       	ldd	r21, Y+1	; 0x01
    b3fe:	c4 5c       	subi	r28, 0xC4	; 196
    b400:	d0 40       	sbci	r29, 0x00	; 0
    b402:	45 2b       	or	r20, r21
    b404:	09 f4       	brne	.+2      	; 0xb408 <draw_menu(bool)+0xb2e>
    b406:	55 c0       	rjmp	.+170    	; 0xb4b2 <draw_menu(bool)+0xbd8>
    b408:	f6 01       	movw	r30, r12
    b40a:	ef 51       	subi	r30, 0x1F	; 31
    b40c:	fe 4f       	sbci	r31, 0xFE	; 254
    b40e:	e6 0d       	add	r30, r6
    b410:	f7 1d       	adc	r31, r7
    b412:	25 91       	lpm	r18, Z+
    b414:	34 91       	lpm	r19, Z
    b416:	f6 01       	movw	r30, r12
    b418:	e1 52       	subi	r30, 0x21	; 33
    b41a:	fe 4f       	sbci	r31, 0xFE	; 254
    b41c:	e6 0d       	add	r30, r6
    b41e:	f7 1d       	adc	r31, r7
    b420:	45 91       	lpm	r20, Z+
    b422:	54 91       	lpm	r21, Z
    b424:	f6 01       	movw	r30, r12
    b426:	e3 52       	subi	r30, 0x23	; 35
    b428:	fe 4f       	sbci	r31, 0xFE	; 254
    b42a:	e6 0d       	add	r30, r6
    b42c:	f7 1d       	adc	r31, r7
    b42e:	65 91       	lpm	r22, Z+
    b430:	74 91       	lpm	r23, Z
    b432:	f6 01       	movw	r30, r12
    b434:	e5 52       	subi	r30, 0x25	; 37
    b436:	fe 4f       	sbci	r31, 0xFE	; 254
    b438:	e6 0d       	add	r30, r6
    b43a:	f7 1d       	adc	r31, r7
    b43c:	85 91       	lpm	r24, Z+
    b43e:	94 91       	lpm	r25, Z
    b440:	c8 54       	subi	r28, 0x48	; 72
    b442:	df 4f       	sbci	r29, 0xFF	; 255
    b444:	e8 81       	ld	r30, Y
    b446:	f9 81       	ldd	r31, Y+1	; 0x01
    b448:	c8 5b       	subi	r28, 0xB8	; 184
    b44a:	d0 40       	sbci	r29, 0x00	; 0
    b44c:	6e 0f       	add	r22, r30
    b44e:	7f 1f       	adc	r23, r31
    b450:	cc 53       	subi	r28, 0x3C	; 60
    b452:	df 4f       	sbci	r29, 0xFF	; 255
    b454:	e8 80       	ld	r14, Y
    b456:	f9 80       	ldd	r15, Y+1	; 0x01
    b458:	c4 5c       	subi	r28, 0xC4	; 196
    b45a:	d0 40       	sbci	r29, 0x00	; 0
    b45c:	ce 53       	subi	r28, 0x3E	; 62
    b45e:	df 4f       	sbci	r29, 0xFF	; 255
    b460:	08 81       	ld	r16, Y
    b462:	19 81       	ldd	r17, Y+1	; 0x01
    b464:	c2 5c       	subi	r28, 0xC2	; 194
    b466:	d0 40       	sbci	r29, 0x00	; 0
    b468:	ca 54       	subi	r28, 0x4A	; 74
    b46a:	df 4f       	sbci	r29, 0xFF	; 255
    b46c:	e8 81       	ld	r30, Y
    b46e:	f9 81       	ldd	r31, Y+1	; 0x01
    b470:	c6 5b       	subi	r28, 0xB6	; 182
    b472:	d0 40       	sbci	r29, 0x00	; 0
    b474:	8e 0f       	add	r24, r30
    b476:	9f 1f       	adc	r25, r31
    b478:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b47c:	18 2f       	mov	r17, r24
    b47e:	88 23       	and	r24, r24
    b480:	c1 f0       	breq	.+48     	; 0xb4b2 <draw_menu(bool)+0xbd8>
    b482:	f6 01       	movw	r30, r12
    b484:	eb 51       	subi	r30, 0x1B	; 27
    b486:	fe 4f       	sbci	r31, 0xFE	; 254
    b488:	e6 0d       	add	r30, r6
    b48a:	f7 1d       	adc	r31, r7
    b48c:	25 91       	lpm	r18, Z+
    b48e:	34 91       	lpm	r19, Z
    b490:	f5 01       	movw	r30, r10
    b492:	84 91       	lpm	r24, Z
    b494:	cf 54       	subi	r28, 0x4F	; 79
    b496:	df 4f       	sbci	r29, 0xFF	; 255
    b498:	68 81       	ld	r22, Y
    b49a:	c1 5b       	subi	r28, 0xB1	; 177
    b49c:	d0 40       	sbci	r29, 0x00	; 0
    b49e:	70 e0       	ldi	r23, 0x00	; 0
    b4a0:	45 2d       	mov	r20, r5
    b4a2:	90 e0       	ldi	r25, 0x00	; 0
    b4a4:	f9 01       	movw	r30, r18
    b4a6:	19 95       	eicall
    b4a8:	c6 53       	subi	r28, 0x36	; 54
    b4aa:	df 4f       	sbci	r29, 0xFF	; 255
    b4ac:	18 83       	st	Y, r17
    b4ae:	ca 5c       	subi	r28, 0xCA	; 202
    b4b0:	d0 40       	sbci	r29, 0x00	; 0
    b4b2:	53 94       	inc	r5
    b4b4:	25 cf       	rjmp	.-438    	; 0xb300 <draw_menu(bool)+0xa26>
    b4b6:	c6 53       	subi	r28, 0x36	; 54
    b4b8:	df 4f       	sbci	r29, 0xFF	; 255
    b4ba:	f8 81       	ld	r31, Y
    b4bc:	ca 5c       	subi	r28, 0xCA	; 202
    b4be:	d0 40       	sbci	r29, 0x00	; 0
    b4c0:	f1 11       	cpse	r31, r1
    b4c2:	0c 94 75 65 	jmp	0xcaea	; 0xcaea <draw_menu(bool)+0x2210>
    b4c6:	51 2c       	mov	r5, r1
    b4c8:	93 01       	movw	r18, r6
    b4ca:	2d 53       	subi	r18, 0x3D	; 61
    b4cc:	3d 4f       	sbci	r19, 0xFD	; 253
    b4ce:	cc 52       	subi	r28, 0x2C	; 44
    b4d0:	df 4f       	sbci	r29, 0xFF	; 255
    b4d2:	39 83       	std	Y+1, r19	; 0x01
    b4d4:	28 83       	st	Y, r18
    b4d6:	c4 5d       	subi	r28, 0xD4	; 212
    b4d8:	d0 40       	sbci	r29, 0x00	; 0
    b4da:	cc 52       	subi	r28, 0x2C	; 44
    b4dc:	df 4f       	sbci	r29, 0xFF	; 255
    b4de:	e8 81       	ld	r30, Y
    b4e0:	f9 81       	ldd	r31, Y+1	; 0x01
    b4e2:	c4 5d       	subi	r28, 0xD4	; 212
    b4e4:	d0 40       	sbci	r29, 0x00	; 0
    b4e6:	84 91       	lpm	r24, Z
    b4e8:	58 16       	cp	r5, r24
    b4ea:	08 f0       	brcs	.+2      	; 0xb4ee <draw_menu(bool)+0xc14>
    b4ec:	60 c3       	rjmp	.+1728   	; 0xbbae <draw_menu(bool)+0x12d4>
    b4ee:	f7 e1       	ldi	r31, 0x17	; 23
    b4f0:	5f 9e       	mul	r5, r31
    b4f2:	60 01       	movw	r12, r0
    b4f4:	11 24       	eor	r1, r1
    b4f6:	f6 01       	movw	r30, r12
    b4f8:	e0 59       	subi	r30, 0x90	; 144
    b4fa:	fd 4f       	sbci	r31, 0xFD	; 253
    b4fc:	e6 0d       	add	r30, r6
    b4fe:	f7 1d       	adc	r31, r7
    b500:	84 91       	lpm	r24, Z
    b502:	cd 52       	subi	r28, 0x2D	; 45
    b504:	df 4f       	sbci	r29, 0xFF	; 255
    b506:	68 81       	ld	r22, Y
    b508:	c3 5d       	subi	r28, 0xD3	; 211
    b50a:	d0 40       	sbci	r29, 0x00	; 0
    b50c:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    b510:	88 23       	and	r24, r24
    b512:	09 f4       	brne	.+2      	; 0xb516 <draw_menu(bool)+0xc3c>
    b514:	98 c1       	rjmp	.+816    	; 0xb846 <draw_menu(bool)+0xf6c>
    b516:	ce 54       	subi	r28, 0x4E	; 78
    b518:	df 4f       	sbci	r29, 0xFF	; 255
    b51a:	18 82       	st	Y, r1
    b51c:	c2 5b       	subi	r28, 0xB2	; 178
    b51e:	d0 40       	sbci	r29, 0x00	; 0
    b520:	f6 01       	movw	r30, r12
    b522:	e2 59       	subi	r30, 0x92	; 146
    b524:	fd 4f       	sbci	r31, 0xFD	; 253
    b526:	e6 0d       	add	r30, r6
    b528:	f7 1d       	adc	r31, r7
    b52a:	25 91       	lpm	r18, Z+
    b52c:	34 91       	lpm	r19, Z
    b52e:	c6 01       	movw	r24, r12
    b530:	87 59       	subi	r24, 0x97	; 151
    b532:	9d 4f       	sbci	r25, 0xFD	; 253
    b534:	a3 01       	movw	r20, r6
    b536:	48 0f       	add	r20, r24
    b538:	59 1f       	adc	r21, r25
    b53a:	c6 54       	subi	r28, 0x46	; 70
    b53c:	df 4f       	sbci	r29, 0xFF	; 255
    b53e:	59 83       	std	Y+1, r21	; 0x01
    b540:	48 83       	st	Y, r20
    b542:	ca 5b       	subi	r28, 0xBA	; 186
    b544:	d0 40       	sbci	r29, 0x00	; 0
    b546:	fa 01       	movw	r30, r20
    b548:	84 91       	lpm	r24, Z
    b54a:	cf 54       	subi	r28, 0x4F	; 79
    b54c:	df 4f       	sbci	r29, 0xFF	; 255
    b54e:	68 81       	ld	r22, Y
    b550:	c1 5b       	subi	r28, 0xB1	; 177
    b552:	d0 40       	sbci	r29, 0x00	; 0
    b554:	70 e0       	ldi	r23, 0x00	; 0
    b556:	40 e0       	ldi	r20, 0x00	; 0
    b558:	90 e0       	ldi	r25, 0x00	; 0
    b55a:	f9 01       	movw	r30, r18
    b55c:	19 95       	eicall
    b55e:	cd 54       	subi	r28, 0x4D	; 77
    b560:	df 4f       	sbci	r29, 0xFF	; 255
    b562:	88 83       	st	Y, r24
    b564:	c3 5b       	subi	r28, 0xB3	; 179
    b566:	d0 40       	sbci	r29, 0x00	; 0
    b568:	f6 01       	movw	r30, r12
    b56a:	e6 59       	subi	r30, 0x96	; 150
    b56c:	fd 4f       	sbci	r31, 0xFD	; 253
    b56e:	e6 0d       	add	r30, r6
    b570:	f7 1d       	adc	r31, r7
    b572:	25 91       	lpm	r18, Z+
    b574:	34 91       	lpm	r19, Z
    b576:	cf 52       	subi	r28, 0x2F	; 47
    b578:	df 4f       	sbci	r29, 0xFF	; 255
    b57a:	39 83       	std	Y+1, r19	; 0x01
    b57c:	28 83       	st	Y, r18
    b57e:	c1 5d       	subi	r28, 0xD1	; 209
    b580:	d0 40       	sbci	r29, 0x00	; 0
    b582:	46 01       	movw	r8, r12
    b584:	36 ea       	ldi	r19, 0xA6	; 166
    b586:	83 1a       	sub	r8, r19
    b588:	3d ef       	ldi	r19, 0xFD	; 253
    b58a:	93 0a       	sbc	r9, r19
    b58c:	86 0c       	add	r8, r6
    b58e:	97 1c       	adc	r9, r7
    b590:	56 01       	movw	r10, r12
    b592:	44 ea       	ldi	r20, 0xA4	; 164
    b594:	a4 1a       	sub	r10, r20
    b596:	4d ef       	ldi	r20, 0xFD	; 253
    b598:	b4 0a       	sbc	r11, r20
    b59a:	a6 0c       	add	r10, r6
    b59c:	b7 1c       	adc	r11, r7
    b59e:	16 01       	movw	r2, r12
    b5a0:	5b e9       	ldi	r21, 0x9B	; 155
    b5a2:	25 1a       	sub	r2, r21
    b5a4:	5d ef       	ldi	r21, 0xFD	; 253
    b5a6:	35 0a       	sbc	r3, r21
    b5a8:	26 0c       	add	r2, r6
    b5aa:	37 1c       	adc	r3, r7
    b5ac:	c6 01       	movw	r24, r12
    b5ae:	8c 59       	subi	r24, 0x9C	; 156
    b5b0:	9d 4f       	sbci	r25, 0xFD	; 253
    b5b2:	b3 01       	movw	r22, r6
    b5b4:	68 0f       	add	r22, r24
    b5b6:	79 1f       	adc	r23, r25
    b5b8:	c0 54       	subi	r28, 0x40	; 64
    b5ba:	df 4f       	sbci	r29, 0xFF	; 255
    b5bc:	79 83       	std	Y+1, r23	; 0x01
    b5be:	68 83       	st	Y, r22
    b5c0:	c0 5c       	subi	r28, 0xC0	; 192
    b5c2:	d0 40       	sbci	r29, 0x00	; 0
    b5c4:	01 97       	sbiw	r24, 0x01	; 1
    b5c6:	f3 01       	movw	r30, r6
    b5c8:	e8 0f       	add	r30, r24
    b5ca:	f9 1f       	adc	r31, r25
    b5cc:	ca 53       	subi	r28, 0x3A	; 58
    b5ce:	df 4f       	sbci	r29, 0xFF	; 255
    b5d0:	f9 83       	std	Y+1, r31	; 0x01
    b5d2:	e8 83       	st	Y, r30
    b5d4:	c6 5c       	subi	r28, 0xC6	; 198
    b5d6:	d0 40       	sbci	r29, 0x00	; 0
    b5d8:	03 96       	adiw	r24, 0x03	; 3
    b5da:	93 01       	movw	r18, r6
    b5dc:	28 0f       	add	r18, r24
    b5de:	39 1f       	adc	r19, r25
    b5e0:	c8 53       	subi	r28, 0x38	; 56
    b5e2:	df 4f       	sbci	r29, 0xFF	; 255
    b5e4:	39 83       	std	Y+1, r19	; 0x01
    b5e6:	28 83       	st	Y, r18
    b5e8:	c8 5c       	subi	r28, 0xC8	; 200
    b5ea:	d0 40       	sbci	r29, 0x00	; 0
    b5ec:	04 97       	sbiw	r24, 0x04	; 4
    b5ee:	a3 01       	movw	r20, r6
    b5f0:	48 0f       	add	r20, r24
    b5f2:	59 1f       	adc	r21, r25
    b5f4:	c5 53       	subi	r28, 0x35	; 53
    b5f6:	df 4f       	sbci	r29, 0xFF	; 255
    b5f8:	59 83       	std	Y+1, r21	; 0x01
    b5fa:	48 83       	st	Y, r20
    b5fc:	cb 5c       	subi	r28, 0xCB	; 203
    b5fe:	d0 40       	sbci	r29, 0x00	; 0
    b600:	02 97       	sbiw	r24, 0x02	; 2
    b602:	b3 01       	movw	r22, r6
    b604:	68 0f       	add	r22, r24
    b606:	79 1f       	adc	r23, r25
    b608:	c3 53       	subi	r28, 0x33	; 51
    b60a:	df 4f       	sbci	r29, 0xFF	; 255
    b60c:	79 83       	std	Y+1, r23	; 0x01
    b60e:	68 83       	st	Y, r22
    b610:	cd 5c       	subi	r28, 0xCD	; 205
    b612:	d0 40       	sbci	r29, 0x00	; 0
    b614:	02 97       	sbiw	r24, 0x02	; 2
    b616:	f3 01       	movw	r30, r6
    b618:	e8 0f       	add	r30, r24
    b61a:	f9 1f       	adc	r31, r25
    b61c:	c1 53       	subi	r28, 0x31	; 49
    b61e:	df 4f       	sbci	r29, 0xFF	; 255
    b620:	f9 83       	std	Y+1, r31	; 0x01
    b622:	e8 83       	st	Y, r30
    b624:	cf 5c       	subi	r28, 0xCF	; 207
    b626:	d0 40       	sbci	r29, 0x00	; 0
    b628:	f1 2c       	mov	r15, r1
    b62a:	41 2c       	mov	r4, r1
    b62c:	ce 54       	subi	r28, 0x4E	; 78
    b62e:	df 4f       	sbci	r29, 0xFF	; 255
    b630:	88 81       	ld	r24, Y
    b632:	c2 5b       	subi	r28, 0xB2	; 178
    b634:	d0 40       	sbci	r29, 0x00	; 0
    b636:	cd 54       	subi	r28, 0x4D	; 77
    b638:	df 4f       	sbci	r29, 0xFF	; 255
    b63a:	98 81       	ld	r25, Y
    b63c:	c3 5b       	subi	r28, 0xB3	; 179
    b63e:	d0 40       	sbci	r29, 0x00	; 0
    b640:	89 17       	cp	r24, r25
    b642:	08 f0       	brcs	.+2      	; 0xb646 <draw_menu(bool)+0xd6c>
    b644:	00 c1       	rjmp	.+512    	; 0xb846 <draw_menu(bool)+0xf6c>
    b646:	f4 01       	movw	r30, r8
    b648:	45 91       	lpm	r20, Z+
    b64a:	54 91       	lpm	r21, Z
    b64c:	f5 01       	movw	r30, r10
    b64e:	25 91       	lpm	r18, Z+
    b650:	34 91       	lpm	r19, Z
    b652:	f1 01       	movw	r30, r2
    b654:	94 91       	lpm	r25, Z
    b656:	99 23       	and	r25, r25
    b658:	09 f4       	brne	.+2      	; 0xb65c <draw_menu(bool)+0xd82>
    b65a:	b7 c0       	rjmp	.+366    	; 0xb7ca <draw_menu(bool)+0xef0>
    b65c:	c8 54       	subi	r28, 0x48	; 72
    b65e:	df 4f       	sbci	r29, 0xFF	; 255
    b660:	68 81       	ld	r22, Y
    b662:	79 81       	ldd	r23, Y+1	; 0x01
    b664:	c8 5b       	subi	r28, 0xB8	; 184
    b666:	d0 40       	sbci	r29, 0x00	; 0
    b668:	62 0f       	add	r22, r18
    b66a:	73 1f       	adc	r23, r19
    b66c:	c2 54       	subi	r28, 0x42	; 66
    b66e:	df 4f       	sbci	r29, 0xFF	; 255
    b670:	79 83       	std	Y+1, r23	; 0x01
    b672:	68 83       	st	Y, r22
    b674:	ce 5b       	subi	r28, 0xBE	; 190
    b676:	d0 40       	sbci	r29, 0x00	; 0
    b678:	f1 01       	movw	r30, r2
    b67a:	94 91       	lpm	r25, Z
    b67c:	91 30       	cpi	r25, 0x01	; 1
    b67e:	09 f4       	brne	.+2      	; 0xb682 <draw_menu(bool)+0xda8>
    b680:	c3 c0       	rjmp	.+390    	; 0xb808 <draw_menu(bool)+0xf2e>
    b682:	ca 54       	subi	r28, 0x4A	; 74
    b684:	df 4f       	sbci	r29, 0xFF	; 255
    b686:	28 81       	ld	r18, Y
    b688:	39 81       	ldd	r19, Y+1	; 0x01
    b68a:	c6 5b       	subi	r28, 0xB6	; 182
    b68c:	d0 40       	sbci	r29, 0x00	; 0
    b68e:	24 0f       	add	r18, r20
    b690:	35 1f       	adc	r19, r21
    b692:	c4 54       	subi	r28, 0x44	; 68
    b694:	df 4f       	sbci	r29, 0xFF	; 255
    b696:	39 83       	std	Y+1, r19	; 0x01
    b698:	28 83       	st	Y, r18
    b69a:	cc 5b       	subi	r28, 0xBC	; 188
    b69c:	d0 40       	sbci	r29, 0x00	; 0
    b69e:	f1 01       	movw	r30, r2
    b6a0:	94 91       	lpm	r25, Z
    b6a2:	92 30       	cpi	r25, 0x02	; 2
    b6a4:	09 f0       	breq	.+2      	; 0xb6a8 <draw_menu(bool)+0xdce>
    b6a6:	46 c0       	rjmp	.+140    	; 0xb734 <draw_menu(bool)+0xe5a>
    b6a8:	f4 01       	movw	r30, r8
    b6aa:	25 91       	lpm	r18, Z+
    b6ac:	34 91       	lpm	r19, Z
    b6ae:	ca 53       	subi	r28, 0x3A	; 58
    b6b0:	df 4f       	sbci	r29, 0xFF	; 255
    b6b2:	e8 81       	ld	r30, Y
    b6b4:	f9 81       	ldd	r31, Y+1	; 0x01
    b6b6:	c6 5c       	subi	r28, 0xC6	; 198
    b6b8:	d0 40       	sbci	r29, 0x00	; 0
    b6ba:	94 91       	lpm	r25, Z
    b6bc:	ca 54       	subi	r28, 0x4A	; 74
    b6be:	df 4f       	sbci	r29, 0xFF	; 255
    b6c0:	48 81       	ld	r20, Y
    b6c2:	59 81       	ldd	r21, Y+1	; 0x01
    b6c4:	c6 5b       	subi	r28, 0xB6	; 182
    b6c6:	d0 40       	sbci	r29, 0x00	; 0
    b6c8:	24 0f       	add	r18, r20
    b6ca:	35 1f       	adc	r19, r21
    b6cc:	b9 01       	movw	r22, r18
    b6ce:	94 9d       	mul	r25, r4
    b6d0:	60 0d       	add	r22, r0
    b6d2:	71 1d       	adc	r23, r1
    b6d4:	11 24       	eor	r1, r1
    b6d6:	c4 54       	subi	r28, 0x44	; 68
    b6d8:	df 4f       	sbci	r29, 0xFF	; 255
    b6da:	79 83       	std	Y+1, r23	; 0x01
    b6dc:	68 83       	st	Y, r22
    b6de:	cc 5b       	subi	r28, 0xBC	; 188
    b6e0:	d0 40       	sbci	r29, 0x00	; 0
    b6e2:	f5 01       	movw	r30, r10
    b6e4:	25 91       	lpm	r18, Z+
    b6e6:	34 91       	lpm	r19, Z
    b6e8:	c0 54       	subi	r28, 0x40	; 64
    b6ea:	df 4f       	sbci	r29, 0xFF	; 255
    b6ec:	e8 81       	ld	r30, Y
    b6ee:	f9 81       	ldd	r31, Y+1	; 0x01
    b6f0:	c0 5c       	subi	r28, 0xC0	; 192
    b6f2:	d0 40       	sbci	r29, 0x00	; 0
    b6f4:	94 91       	lpm	r25, Z
    b6f6:	c8 54       	subi	r28, 0x48	; 72
    b6f8:	df 4f       	sbci	r29, 0xFF	; 255
    b6fa:	48 81       	ld	r20, Y
    b6fc:	59 81       	ldd	r21, Y+1	; 0x01
    b6fe:	c8 5b       	subi	r28, 0xB8	; 184
    b700:	d0 40       	sbci	r29, 0x00	; 0
    b702:	24 0f       	add	r18, r20
    b704:	35 1f       	adc	r19, r21
    b706:	b9 01       	movw	r22, r18
    b708:	9f 9d       	mul	r25, r15
    b70a:	60 0d       	add	r22, r0
    b70c:	71 1d       	adc	r23, r1
    b70e:	11 24       	eor	r1, r1
    b710:	c2 54       	subi	r28, 0x42	; 66
    b712:	df 4f       	sbci	r29, 0xFF	; 255
    b714:	79 83       	std	Y+1, r23	; 0x01
    b716:	68 83       	st	Y, r22
    b718:	ce 5b       	subi	r28, 0xBE	; 190
    b71a:	d0 40       	sbci	r29, 0x00	; 0
    b71c:	43 94       	inc	r4
    b71e:	c8 53       	subi	r28, 0x38	; 56
    b720:	df 4f       	sbci	r29, 0xFF	; 255
    b722:	e8 81       	ld	r30, Y
    b724:	f9 81       	ldd	r31, Y+1	; 0x01
    b726:	c8 5c       	subi	r28, 0xC8	; 200
    b728:	d0 40       	sbci	r29, 0x00	; 0
    b72a:	94 91       	lpm	r25, Z
    b72c:	49 16       	cp	r4, r25
    b72e:	10 f0       	brcs	.+4      	; 0xb734 <draw_menu(bool)+0xe5a>
    b730:	f3 94       	inc	r15
    b732:	41 2c       	mov	r4, r1
    b734:	c6 54       	subi	r28, 0x46	; 70
    b736:	df 4f       	sbci	r29, 0xFF	; 255
    b738:	e8 81       	ld	r30, Y
    b73a:	f9 81       	ldd	r31, Y+1	; 0x01
    b73c:	ca 5b       	subi	r28, 0xBA	; 186
    b73e:	d0 40       	sbci	r29, 0x00	; 0
    b740:	44 91       	lpm	r20, Z
    b742:	8e 01       	movw	r16, r28
    b744:	0f 57       	subi	r16, 0x7F	; 127
    b746:	1f 4f       	sbci	r17, 0xFF	; 255
    b748:	9e 01       	movw	r18, r28
    b74a:	2f 5f       	subi	r18, 0xFF	; 255
    b74c:	3f 4f       	sbci	r19, 0xFF	; 255
    b74e:	cf 54       	subi	r28, 0x4F	; 79
    b750:	df 4f       	sbci	r29, 0xFF	; 255
    b752:	68 81       	ld	r22, Y
    b754:	c1 5b       	subi	r28, 0xB1	; 177
    b756:	d0 40       	sbci	r29, 0x00	; 0
    b758:	cf 52       	subi	r28, 0x2F	; 47
    b75a:	df 4f       	sbci	r29, 0xFF	; 255
    b75c:	e8 81       	ld	r30, Y
    b75e:	f9 81       	ldd	r31, Y+1	; 0x01
    b760:	c1 5d       	subi	r28, 0xD1	; 209
    b762:	d0 40       	sbci	r29, 0x00	; 0
    b764:	19 95       	eicall
    b766:	c5 53       	subi	r28, 0x35	; 53
    b768:	df 4f       	sbci	r29, 0xFF	; 255
    b76a:	e8 81       	ld	r30, Y
    b76c:	f9 81       	ldd	r31, Y+1	; 0x01
    b76e:	cb 5c       	subi	r28, 0xCB	; 203
    b770:	d0 40       	sbci	r29, 0x00	; 0
    b772:	04 91       	lpm	r16, Z
    b774:	c3 53       	subi	r28, 0x33	; 51
    b776:	df 4f       	sbci	r29, 0xFF	; 255
    b778:	e8 81       	ld	r30, Y
    b77a:	f9 81       	ldd	r31, Y+1	; 0x01
    b77c:	cd 5c       	subi	r28, 0xCD	; 205
    b77e:	d0 40       	sbci	r29, 0x00	; 0
    b780:	25 91       	lpm	r18, Z+
    b782:	34 91       	lpm	r19, Z
    b784:	c1 53       	subi	r28, 0x31	; 49
    b786:	df 4f       	sbci	r29, 0xFF	; 255
    b788:	e8 81       	ld	r30, Y
    b78a:	f9 81       	ldd	r31, Y+1	; 0x01
    b78c:	cf 5c       	subi	r28, 0xCF	; 207
    b78e:	d0 40       	sbci	r29, 0x00	; 0
    b790:	45 91       	lpm	r20, Z+
    b792:	54 91       	lpm	r21, Z
    b794:	e9 80       	ldd	r14, Y+1	; 0x01
    b796:	c2 54       	subi	r28, 0x42	; 66
    b798:	df 4f       	sbci	r29, 0xFF	; 255
    b79a:	68 81       	ld	r22, Y
    b79c:	79 81       	ldd	r23, Y+1	; 0x01
    b79e:	ce 5b       	subi	r28, 0xBE	; 190
    b7a0:	d0 40       	sbci	r29, 0x00	; 0
    b7a2:	c4 54       	subi	r28, 0x44	; 68
    b7a4:	df 4f       	sbci	r29, 0xFF	; 255
    b7a6:	88 81       	ld	r24, Y
    b7a8:	99 81       	ldd	r25, Y+1	; 0x01
    b7aa:	cc 5b       	subi	r28, 0xBC	; 188
    b7ac:	d0 40       	sbci	r29, 0x00	; 0
    b7ae:	0e 94 c1 53 	call	0xa782	; 0xa782 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
    b7b2:	ce 54       	subi	r28, 0x4E	; 78
    b7b4:	df 4f       	sbci	r29, 0xFF	; 255
    b7b6:	88 81       	ld	r24, Y
    b7b8:	c2 5b       	subi	r28, 0xB2	; 178
    b7ba:	d0 40       	sbci	r29, 0x00	; 0
    b7bc:	8f 5f       	subi	r24, 0xFF	; 255
    b7be:	ce 54       	subi	r28, 0x4E	; 78
    b7c0:	df 4f       	sbci	r29, 0xFF	; 255
    b7c2:	88 83       	st	Y, r24
    b7c4:	c2 5b       	subi	r28, 0xB2	; 178
    b7c6:	d0 40       	sbci	r29, 0x00	; 0
    b7c8:	31 cf       	rjmp	.-414    	; 0xb62c <draw_menu(bool)+0xd52>
    b7ca:	f5 01       	movw	r30, r10
    b7cc:	25 91       	lpm	r18, Z+
    b7ce:	34 91       	lpm	r19, Z
    b7d0:	c0 54       	subi	r28, 0x40	; 64
    b7d2:	df 4f       	sbci	r29, 0xFF	; 255
    b7d4:	e8 81       	ld	r30, Y
    b7d6:	f9 81       	ldd	r31, Y+1	; 0x01
    b7d8:	c0 5c       	subi	r28, 0xC0	; 192
    b7da:	d0 40       	sbci	r29, 0x00	; 0
    b7dc:	94 91       	lpm	r25, Z
    b7de:	c8 54       	subi	r28, 0x48	; 72
    b7e0:	df 4f       	sbci	r29, 0xFF	; 255
    b7e2:	68 81       	ld	r22, Y
    b7e4:	79 81       	ldd	r23, Y+1	; 0x01
    b7e6:	c8 5b       	subi	r28, 0xB8	; 184
    b7e8:	d0 40       	sbci	r29, 0x00	; 0
    b7ea:	26 0f       	add	r18, r22
    b7ec:	37 1f       	adc	r19, r23
    b7ee:	f9 01       	movw	r30, r18
    b7f0:	94 9d       	mul	r25, r4
    b7f2:	e0 0d       	add	r30, r0
    b7f4:	f1 1d       	adc	r31, r1
    b7f6:	11 24       	eor	r1, r1
    b7f8:	c2 54       	subi	r28, 0x42	; 66
    b7fa:	df 4f       	sbci	r29, 0xFF	; 255
    b7fc:	f9 83       	std	Y+1, r31	; 0x01
    b7fe:	e8 83       	st	Y, r30
    b800:	ce 5b       	subi	r28, 0xBE	; 190
    b802:	d0 40       	sbci	r29, 0x00	; 0
    b804:	43 94       	inc	r4
    b806:	38 cf       	rjmp	.-400    	; 0xb678 <draw_menu(bool)+0xd9e>
    b808:	f4 01       	movw	r30, r8
    b80a:	25 91       	lpm	r18, Z+
    b80c:	34 91       	lpm	r19, Z
    b80e:	ca 53       	subi	r28, 0x3A	; 58
    b810:	df 4f       	sbci	r29, 0xFF	; 255
    b812:	e8 81       	ld	r30, Y
    b814:	f9 81       	ldd	r31, Y+1	; 0x01
    b816:	c6 5c       	subi	r28, 0xC6	; 198
    b818:	d0 40       	sbci	r29, 0x00	; 0
    b81a:	94 91       	lpm	r25, Z
    b81c:	ca 54       	subi	r28, 0x4A	; 74
    b81e:	df 4f       	sbci	r29, 0xFF	; 255
    b820:	48 81       	ld	r20, Y
    b822:	59 81       	ldd	r21, Y+1	; 0x01
    b824:	c6 5b       	subi	r28, 0xB6	; 182
    b826:	d0 40       	sbci	r29, 0x00	; 0
    b828:	24 0f       	add	r18, r20
    b82a:	35 1f       	adc	r19, r21
    b82c:	b9 01       	movw	r22, r18
    b82e:	94 9d       	mul	r25, r4
    b830:	60 0d       	add	r22, r0
    b832:	71 1d       	adc	r23, r1
    b834:	11 24       	eor	r1, r1
    b836:	c4 54       	subi	r28, 0x44	; 68
    b838:	df 4f       	sbci	r29, 0xFF	; 255
    b83a:	79 83       	std	Y+1, r23	; 0x01
    b83c:	68 83       	st	Y, r22
    b83e:	cc 5b       	subi	r28, 0xBC	; 188
    b840:	d0 40       	sbci	r29, 0x00	; 0
    b842:	43 94       	inc	r4
    b844:	2c cf       	rjmp	.-424    	; 0xb69e <draw_menu(bool)+0xdc4>
    b846:	ce 53       	subi	r28, 0x3E	; 62
    b848:	df 4f       	sbci	r29, 0xFF	; 255
    b84a:	28 81       	ld	r18, Y
    b84c:	39 81       	ldd	r19, Y+1	; 0x01
    b84e:	c2 5c       	subi	r28, 0xC2	; 194
    b850:	d0 40       	sbci	r29, 0x00	; 0
    b852:	23 2b       	or	r18, r19
    b854:	09 f4       	brne	.+2      	; 0xb858 <draw_menu(bool)+0xf7e>
    b856:	69 c1       	rjmp	.+722    	; 0xbb2a <draw_menu(bool)+0x1250>
    b858:	cc 53       	subi	r28, 0x3C	; 60
    b85a:	df 4f       	sbci	r29, 0xFF	; 255
    b85c:	48 81       	ld	r20, Y
    b85e:	59 81       	ldd	r21, Y+1	; 0x01
    b860:	c4 5c       	subi	r28, 0xC4	; 196
    b862:	d0 40       	sbci	r29, 0x00	; 0
    b864:	45 2b       	or	r20, r21
    b866:	09 f4       	brne	.+2      	; 0xb86a <draw_menu(bool)+0xf90>
    b868:	60 c1       	rjmp	.+704    	; 0xbb2a <draw_menu(bool)+0x1250>
    b86a:	ce 54       	subi	r28, 0x4E	; 78
    b86c:	df 4f       	sbci	r29, 0xFF	; 255
    b86e:	18 82       	st	Y, r1
    b870:	c2 5b       	subi	r28, 0xB2	; 178
    b872:	d0 40       	sbci	r29, 0x00	; 0
    b874:	f6 01       	movw	r30, r12
    b876:	e2 59       	subi	r30, 0x92	; 146
    b878:	fd 4f       	sbci	r31, 0xFD	; 253
    b87a:	e6 0d       	add	r30, r6
    b87c:	f7 1d       	adc	r31, r7
    b87e:	25 91       	lpm	r18, Z+
    b880:	34 91       	lpm	r19, Z
    b882:	c6 01       	movw	r24, r12
    b884:	87 59       	subi	r24, 0x97	; 151
    b886:	9d 4f       	sbci	r25, 0xFD	; 253
    b888:	b3 01       	movw	r22, r6
    b88a:	68 0f       	add	r22, r24
    b88c:	79 1f       	adc	r23, r25
    b88e:	ca 53       	subi	r28, 0x3A	; 58
    b890:	df 4f       	sbci	r29, 0xFF	; 255
    b892:	79 83       	std	Y+1, r23	; 0x01
    b894:	68 83       	st	Y, r22
    b896:	c6 5c       	subi	r28, 0xC6	; 198
    b898:	d0 40       	sbci	r29, 0x00	; 0
    b89a:	fb 01       	movw	r30, r22
    b89c:	84 91       	lpm	r24, Z
    b89e:	cf 54       	subi	r28, 0x4F	; 79
    b8a0:	df 4f       	sbci	r29, 0xFF	; 255
    b8a2:	68 81       	ld	r22, Y
    b8a4:	c1 5b       	subi	r28, 0xB1	; 177
    b8a6:	d0 40       	sbci	r29, 0x00	; 0
    b8a8:	70 e0       	ldi	r23, 0x00	; 0
    b8aa:	40 e0       	ldi	r20, 0x00	; 0
    b8ac:	90 e0       	ldi	r25, 0x00	; 0
    b8ae:	f9 01       	movw	r30, r18
    b8b0:	19 95       	eicall
    b8b2:	c0 54       	subi	r28, 0x40	; 64
    b8b4:	df 4f       	sbci	r29, 0xFF	; 255
    b8b6:	88 83       	st	Y, r24
    b8b8:	c0 5c       	subi	r28, 0xC0	; 192
    b8ba:	d0 40       	sbci	r29, 0x00	; 0
    b8bc:	cd 54       	subi	r28, 0x4D	; 77
    b8be:	df 4f       	sbci	r29, 0xFF	; 255
    b8c0:	88 83       	st	Y, r24
    b8c2:	c3 5b       	subi	r28, 0xB3	; 179
    b8c4:	d0 40       	sbci	r29, 0x00	; 0
    b8c6:	ce 54       	subi	r28, 0x4E	; 78
    b8c8:	df 4f       	sbci	r29, 0xFF	; 255
    b8ca:	a8 80       	ld	r10, Y
    b8cc:	c2 5b       	subi	r28, 0xB2	; 178
    b8ce:	d0 40       	sbci	r29, 0x00	; 0
    b8d0:	16 01       	movw	r2, r12
    b8d2:	f6 ea       	ldi	r31, 0xA6	; 166
    b8d4:	2f 1a       	sub	r2, r31
    b8d6:	fd ef       	ldi	r31, 0xFD	; 253
    b8d8:	3f 0a       	sbc	r3, r31
    b8da:	26 0c       	add	r2, r6
    b8dc:	37 1c       	adc	r3, r7
    b8de:	46 01       	movw	r8, r12
    b8e0:	24 ea       	ldi	r18, 0xA4	; 164
    b8e2:	82 1a       	sub	r8, r18
    b8e4:	2d ef       	ldi	r18, 0xFD	; 253
    b8e6:	92 0a       	sbc	r9, r18
    b8e8:	86 0c       	add	r8, r6
    b8ea:	97 1c       	adc	r9, r7
    b8ec:	c6 01       	movw	r24, r12
    b8ee:	8b 59       	subi	r24, 0x9B	; 155
    b8f0:	9d 4f       	sbci	r25, 0xFD	; 253
    b8f2:	a3 01       	movw	r20, r6
    b8f4:	48 0f       	add	r20, r24
    b8f6:	59 1f       	adc	r21, r25
    b8f8:	c6 54       	subi	r28, 0x46	; 70
    b8fa:	df 4f       	sbci	r29, 0xFF	; 255
    b8fc:	59 83       	std	Y+1, r21	; 0x01
    b8fe:	48 83       	st	Y, r20
    b900:	ca 5b       	subi	r28, 0xBA	; 186
    b902:	d0 40       	sbci	r29, 0x00	; 0
    b904:	01 97       	sbiw	r24, 0x01	; 1
    b906:	b3 01       	movw	r22, r6
    b908:	68 0f       	add	r22, r24
    b90a:	79 1f       	adc	r23, r25
    b90c:	c8 53       	subi	r28, 0x38	; 56
    b90e:	df 4f       	sbci	r29, 0xFF	; 255
    b910:	79 83       	std	Y+1, r23	; 0x01
    b912:	68 83       	st	Y, r22
    b914:	c8 5c       	subi	r28, 0xC8	; 200
    b916:	d0 40       	sbci	r29, 0x00	; 0
    b918:	01 97       	sbiw	r24, 0x01	; 1
    b91a:	f3 01       	movw	r30, r6
    b91c:	e8 0f       	add	r30, r24
    b91e:	f9 1f       	adc	r31, r25
    b920:	c5 53       	subi	r28, 0x35	; 53
    b922:	df 4f       	sbci	r29, 0xFF	; 255
    b924:	f9 83       	std	Y+1, r31	; 0x01
    b926:	e8 83       	st	Y, r30
    b928:	cb 5c       	subi	r28, 0xCB	; 203
    b92a:	d0 40       	sbci	r29, 0x00	; 0
    b92c:	03 96       	adiw	r24, 0x03	; 3
    b92e:	93 01       	movw	r18, r6
    b930:	28 0f       	add	r18, r24
    b932:	39 1f       	adc	r19, r25
    b934:	c3 53       	subi	r28, 0x33	; 51
    b936:	df 4f       	sbci	r29, 0xFF	; 255
    b938:	39 83       	std	Y+1, r19	; 0x01
    b93a:	28 83       	st	Y, r18
    b93c:	cd 5c       	subi	r28, 0xCD	; 205
    b93e:	d0 40       	sbci	r29, 0x00	; 0
    b940:	06 97       	sbiw	r24, 0x06	; 6
    b942:	a3 01       	movw	r20, r6
    b944:	48 0f       	add	r20, r24
    b946:	59 1f       	adc	r21, r25
    b948:	c1 53       	subi	r28, 0x31	; 49
    b94a:	df 4f       	sbci	r29, 0xFF	; 255
    b94c:	59 83       	std	Y+1, r21	; 0x01
    b94e:	48 83       	st	Y, r20
    b950:	cf 5c       	subi	r28, 0xCF	; 207
    b952:	d0 40       	sbci	r29, 0x00	; 0
    b954:	02 97       	sbiw	r24, 0x02	; 2
    b956:	b3 01       	movw	r22, r6
    b958:	68 0f       	add	r22, r24
    b95a:	79 1f       	adc	r23, r25
    b95c:	cf 52       	subi	r28, 0x2F	; 47
    b95e:	df 4f       	sbci	r29, 0xFF	; 255
    b960:	79 83       	std	Y+1, r23	; 0x01
    b962:	68 83       	st	Y, r22
    b964:	c1 5d       	subi	r28, 0xD1	; 209
    b966:	d0 40       	sbci	r29, 0x00	; 0
    b968:	41 2c       	mov	r4, r1
    b96a:	b1 2c       	mov	r11, r1
    b96c:	c0 54       	subi	r28, 0x40	; 64
    b96e:	df 4f       	sbci	r29, 0xFF	; 255
    b970:	78 81       	ld	r23, Y
    b972:	c0 5c       	subi	r28, 0xC0	; 192
    b974:	d0 40       	sbci	r29, 0x00	; 0
    b976:	a7 16       	cp	r10, r23
    b978:	08 f0       	brcs	.+2      	; 0xb97c <draw_menu(bool)+0x10a2>
    b97a:	d7 c0       	rjmp	.+430    	; 0xbb2a <draw_menu(bool)+0x1250>
    b97c:	f1 01       	movw	r30, r2
    b97e:	25 91       	lpm	r18, Z+
    b980:	34 91       	lpm	r19, Z
    b982:	f4 01       	movw	r30, r8
    b984:	85 91       	lpm	r24, Z+
    b986:	94 91       	lpm	r25, Z
    b988:	c6 54       	subi	r28, 0x46	; 70
    b98a:	df 4f       	sbci	r29, 0xFF	; 255
    b98c:	e8 81       	ld	r30, Y
    b98e:	f9 81       	ldd	r31, Y+1	; 0x01
    b990:	ca 5b       	subi	r28, 0xBA	; 186
    b992:	d0 40       	sbci	r29, 0x00	; 0
    b994:	44 91       	lpm	r20, Z
    b996:	44 23       	and	r20, r20
    b998:	09 f4       	brne	.+2      	; 0xb99c <draw_menu(bool)+0x10c2>
    b99a:	cb c0       	rjmp	.+406    	; 0xbb32 <draw_menu(bool)+0x1258>
    b99c:	c8 54       	subi	r28, 0x48	; 72
    b99e:	df 4f       	sbci	r29, 0xFF	; 255
    b9a0:	48 81       	ld	r20, Y
    b9a2:	59 81       	ldd	r21, Y+1	; 0x01
    b9a4:	c8 5b       	subi	r28, 0xB8	; 184
    b9a6:	d0 40       	sbci	r29, 0x00	; 0
    b9a8:	48 0f       	add	r20, r24
    b9aa:	59 1f       	adc	r21, r25
    b9ac:	c2 54       	subi	r28, 0x42	; 66
    b9ae:	df 4f       	sbci	r29, 0xFF	; 255
    b9b0:	59 83       	std	Y+1, r21	; 0x01
    b9b2:	48 83       	st	Y, r20
    b9b4:	ce 5b       	subi	r28, 0xBE	; 190
    b9b6:	d0 40       	sbci	r29, 0x00	; 0
    b9b8:	c6 54       	subi	r28, 0x46	; 70
    b9ba:	df 4f       	sbci	r29, 0xFF	; 255
    b9bc:	e8 81       	ld	r30, Y
    b9be:	f9 81       	ldd	r31, Y+1	; 0x01
    b9c0:	ca 5b       	subi	r28, 0xBA	; 186
    b9c2:	d0 40       	sbci	r29, 0x00	; 0
    b9c4:	84 91       	lpm	r24, Z
    b9c6:	81 30       	cpi	r24, 0x01	; 1
    b9c8:	09 f4       	brne	.+2      	; 0xb9cc <draw_menu(bool)+0x10f2>
    b9ca:	d2 c0       	rjmp	.+420    	; 0xbb70 <draw_menu(bool)+0x1296>
    b9cc:	ca 54       	subi	r28, 0x4A	; 74
    b9ce:	df 4f       	sbci	r29, 0xFF	; 255
    b9d0:	48 81       	ld	r20, Y
    b9d2:	59 81       	ldd	r21, Y+1	; 0x01
    b9d4:	c6 5b       	subi	r28, 0xB6	; 182
    b9d6:	d0 40       	sbci	r29, 0x00	; 0
    b9d8:	42 0f       	add	r20, r18
    b9da:	53 1f       	adc	r21, r19
    b9dc:	c4 54       	subi	r28, 0x44	; 68
    b9de:	df 4f       	sbci	r29, 0xFF	; 255
    b9e0:	59 83       	std	Y+1, r21	; 0x01
    b9e2:	48 83       	st	Y, r20
    b9e4:	cc 5b       	subi	r28, 0xBC	; 188
    b9e6:	d0 40       	sbci	r29, 0x00	; 0
    b9e8:	c6 54       	subi	r28, 0x46	; 70
    b9ea:	df 4f       	sbci	r29, 0xFF	; 255
    b9ec:	e8 81       	ld	r30, Y
    b9ee:	f9 81       	ldd	r31, Y+1	; 0x01
    b9f0:	ca 5b       	subi	r28, 0xBA	; 186
    b9f2:	d0 40       	sbci	r29, 0x00	; 0
    b9f4:	84 91       	lpm	r24, Z
    b9f6:	82 30       	cpi	r24, 0x02	; 2
    b9f8:	09 f0       	breq	.+2      	; 0xb9fc <draw_menu(bool)+0x1122>
    b9fa:	46 c0       	rjmp	.+140    	; 0xba88 <draw_menu(bool)+0x11ae>
    b9fc:	f1 01       	movw	r30, r2
    b9fe:	85 91       	lpm	r24, Z+
    ba00:	94 91       	lpm	r25, Z
    ba02:	c5 53       	subi	r28, 0x35	; 53
    ba04:	df 4f       	sbci	r29, 0xFF	; 255
    ba06:	e8 81       	ld	r30, Y
    ba08:	f9 81       	ldd	r31, Y+1	; 0x01
    ba0a:	cb 5c       	subi	r28, 0xCB	; 203
    ba0c:	d0 40       	sbci	r29, 0x00	; 0
    ba0e:	24 91       	lpm	r18, Z
    ba10:	ca 54       	subi	r28, 0x4A	; 74
    ba12:	df 4f       	sbci	r29, 0xFF	; 255
    ba14:	48 81       	ld	r20, Y
    ba16:	59 81       	ldd	r21, Y+1	; 0x01
    ba18:	c6 5b       	subi	r28, 0xB6	; 182
    ba1a:	d0 40       	sbci	r29, 0x00	; 0
    ba1c:	84 0f       	add	r24, r20
    ba1e:	95 1f       	adc	r25, r21
    ba20:	bc 01       	movw	r22, r24
    ba22:	2b 9d       	mul	r18, r11
    ba24:	60 0d       	add	r22, r0
    ba26:	71 1d       	adc	r23, r1
    ba28:	11 24       	eor	r1, r1
    ba2a:	c4 54       	subi	r28, 0x44	; 68
    ba2c:	df 4f       	sbci	r29, 0xFF	; 255
    ba2e:	79 83       	std	Y+1, r23	; 0x01
    ba30:	68 83       	st	Y, r22
    ba32:	cc 5b       	subi	r28, 0xBC	; 188
    ba34:	d0 40       	sbci	r29, 0x00	; 0
    ba36:	f4 01       	movw	r30, r8
    ba38:	85 91       	lpm	r24, Z+
    ba3a:	94 91       	lpm	r25, Z
    ba3c:	c8 53       	subi	r28, 0x38	; 56
    ba3e:	df 4f       	sbci	r29, 0xFF	; 255
    ba40:	e8 81       	ld	r30, Y
    ba42:	f9 81       	ldd	r31, Y+1	; 0x01
    ba44:	c8 5c       	subi	r28, 0xC8	; 200
    ba46:	d0 40       	sbci	r29, 0x00	; 0
    ba48:	24 91       	lpm	r18, Z
    ba4a:	c8 54       	subi	r28, 0x48	; 72
    ba4c:	df 4f       	sbci	r29, 0xFF	; 255
    ba4e:	48 81       	ld	r20, Y
    ba50:	59 81       	ldd	r21, Y+1	; 0x01
    ba52:	c8 5b       	subi	r28, 0xB8	; 184
    ba54:	d0 40       	sbci	r29, 0x00	; 0
    ba56:	84 0f       	add	r24, r20
    ba58:	95 1f       	adc	r25, r21
    ba5a:	bc 01       	movw	r22, r24
    ba5c:	24 9d       	mul	r18, r4
    ba5e:	60 0d       	add	r22, r0
    ba60:	71 1d       	adc	r23, r1
    ba62:	11 24       	eor	r1, r1
    ba64:	c2 54       	subi	r28, 0x42	; 66
    ba66:	df 4f       	sbci	r29, 0xFF	; 255
    ba68:	79 83       	std	Y+1, r23	; 0x01
    ba6a:	68 83       	st	Y, r22
    ba6c:	ce 5b       	subi	r28, 0xBE	; 190
    ba6e:	d0 40       	sbci	r29, 0x00	; 0
    ba70:	b3 94       	inc	r11
    ba72:	c3 53       	subi	r28, 0x33	; 51
    ba74:	df 4f       	sbci	r29, 0xFF	; 255
    ba76:	e8 81       	ld	r30, Y
    ba78:	f9 81       	ldd	r31, Y+1	; 0x01
    ba7a:	cd 5c       	subi	r28, 0xCD	; 205
    ba7c:	d0 40       	sbci	r29, 0x00	; 0
    ba7e:	84 91       	lpm	r24, Z
    ba80:	b8 16       	cp	r11, r24
    ba82:	10 f0       	brcs	.+4      	; 0xba88 <draw_menu(bool)+0x11ae>
    ba84:	43 94       	inc	r4
    ba86:	b1 2c       	mov	r11, r1
    ba88:	c1 53       	subi	r28, 0x31	; 49
    ba8a:	df 4f       	sbci	r29, 0xFF	; 255
    ba8c:	e8 81       	ld	r30, Y
    ba8e:	f9 81       	ldd	r31, Y+1	; 0x01
    ba90:	cf 5c       	subi	r28, 0xCF	; 207
    ba92:	d0 40       	sbci	r29, 0x00	; 0
    ba94:	25 91       	lpm	r18, Z+
    ba96:	34 91       	lpm	r19, Z
    ba98:	cf 52       	subi	r28, 0x2F	; 47
    ba9a:	df 4f       	sbci	r29, 0xFF	; 255
    ba9c:	e8 81       	ld	r30, Y
    ba9e:	f9 81       	ldd	r31, Y+1	; 0x01
    baa0:	c1 5d       	subi	r28, 0xD1	; 209
    baa2:	d0 40       	sbci	r29, 0x00	; 0
    baa4:	45 91       	lpm	r20, Z+
    baa6:	54 91       	lpm	r21, Z
    baa8:	cc 53       	subi	r28, 0x3C	; 60
    baaa:	df 4f       	sbci	r29, 0xFF	; 255
    baac:	e8 80       	ld	r14, Y
    baae:	f9 80       	ldd	r15, Y+1	; 0x01
    bab0:	c4 5c       	subi	r28, 0xC4	; 196
    bab2:	d0 40       	sbci	r29, 0x00	; 0
    bab4:	ce 53       	subi	r28, 0x3E	; 62
    bab6:	df 4f       	sbci	r29, 0xFF	; 255
    bab8:	08 81       	ld	r16, Y
    baba:	19 81       	ldd	r17, Y+1	; 0x01
    babc:	c2 5c       	subi	r28, 0xC2	; 194
    babe:	d0 40       	sbci	r29, 0x00	; 0
    bac0:	c2 54       	subi	r28, 0x42	; 66
    bac2:	df 4f       	sbci	r29, 0xFF	; 255
    bac4:	68 81       	ld	r22, Y
    bac6:	79 81       	ldd	r23, Y+1	; 0x01
    bac8:	ce 5b       	subi	r28, 0xBE	; 190
    baca:	d0 40       	sbci	r29, 0x00	; 0
    bacc:	c4 54       	subi	r28, 0x44	; 68
    bace:	df 4f       	sbci	r29, 0xFF	; 255
    bad0:	88 81       	ld	r24, Y
    bad2:	99 81       	ldd	r25, Y+1	; 0x01
    bad4:	cc 5b       	subi	r28, 0xBC	; 188
    bad6:	d0 40       	sbci	r29, 0x00	; 0
    bad8:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    badc:	18 2f       	mov	r17, r24
    bade:	81 e0       	ldi	r24, 0x01	; 1
    bae0:	8a 0d       	add	r24, r10
    bae2:	11 23       	and	r17, r17
    bae4:	21 f1       	breq	.+72     	; 0xbb2e <draw_menu(bool)+0x1254>
    bae6:	ce 54       	subi	r28, 0x4E	; 78
    bae8:	df 4f       	sbci	r29, 0xFF	; 255
    baea:	a8 82       	st	Y, r10
    baec:	c2 5b       	subi	r28, 0xB2	; 178
    baee:	d0 40       	sbci	r29, 0x00	; 0
    baf0:	f6 01       	movw	r30, r12
    baf2:	e4 59       	subi	r30, 0x94	; 148
    baf4:	fd 4f       	sbci	r31, 0xFD	; 253
    baf6:	e6 0d       	add	r30, r6
    baf8:	f7 1d       	adc	r31, r7
    bafa:	25 91       	lpm	r18, Z+
    bafc:	34 91       	lpm	r19, Z
    bafe:	ca 53       	subi	r28, 0x3A	; 58
    bb00:	df 4f       	sbci	r29, 0xFF	; 255
    bb02:	e8 81       	ld	r30, Y
    bb04:	f9 81       	ldd	r31, Y+1	; 0x01
    bb06:	c6 5c       	subi	r28, 0xC6	; 198
    bb08:	d0 40       	sbci	r29, 0x00	; 0
    bb0a:	84 91       	lpm	r24, Z
    bb0c:	cf 54       	subi	r28, 0x4F	; 79
    bb0e:	df 4f       	sbci	r29, 0xFF	; 255
    bb10:	68 81       	ld	r22, Y
    bb12:	c1 5b       	subi	r28, 0xB1	; 177
    bb14:	d0 40       	sbci	r29, 0x00	; 0
    bb16:	70 e0       	ldi	r23, 0x00	; 0
    bb18:	4a 2d       	mov	r20, r10
    bb1a:	90 e0       	ldi	r25, 0x00	; 0
    bb1c:	f9 01       	movw	r30, r18
    bb1e:	19 95       	eicall
    bb20:	c6 53       	subi	r28, 0x36	; 54
    bb22:	df 4f       	sbci	r29, 0xFF	; 255
    bb24:	18 83       	st	Y, r17
    bb26:	ca 5c       	subi	r28, 0xCA	; 202
    bb28:	d0 40       	sbci	r29, 0x00	; 0
    bb2a:	53 94       	inc	r5
    bb2c:	d6 cc       	rjmp	.-1620   	; 0xb4da <draw_menu(bool)+0xc00>
    bb2e:	a8 2e       	mov	r10, r24
    bb30:	1d cf       	rjmp	.-454    	; 0xb96c <draw_menu(bool)+0x1092>
    bb32:	f4 01       	movw	r30, r8
    bb34:	85 91       	lpm	r24, Z+
    bb36:	94 91       	lpm	r25, Z
    bb38:	c8 53       	subi	r28, 0x38	; 56
    bb3a:	df 4f       	sbci	r29, 0xFF	; 255
    bb3c:	e8 81       	ld	r30, Y
    bb3e:	f9 81       	ldd	r31, Y+1	; 0x01
    bb40:	c8 5c       	subi	r28, 0xC8	; 200
    bb42:	d0 40       	sbci	r29, 0x00	; 0
    bb44:	44 91       	lpm	r20, Z
    bb46:	c8 54       	subi	r28, 0x48	; 72
    bb48:	df 4f       	sbci	r29, 0xFF	; 255
    bb4a:	68 81       	ld	r22, Y
    bb4c:	79 81       	ldd	r23, Y+1	; 0x01
    bb4e:	c8 5b       	subi	r28, 0xB8	; 184
    bb50:	d0 40       	sbci	r29, 0x00	; 0
    bb52:	86 0f       	add	r24, r22
    bb54:	97 1f       	adc	r25, r23
    bb56:	fc 01       	movw	r30, r24
    bb58:	4b 9d       	mul	r20, r11
    bb5a:	e0 0d       	add	r30, r0
    bb5c:	f1 1d       	adc	r31, r1
    bb5e:	11 24       	eor	r1, r1
    bb60:	c2 54       	subi	r28, 0x42	; 66
    bb62:	df 4f       	sbci	r29, 0xFF	; 255
    bb64:	f9 83       	std	Y+1, r31	; 0x01
    bb66:	e8 83       	st	Y, r30
    bb68:	ce 5b       	subi	r28, 0xBE	; 190
    bb6a:	d0 40       	sbci	r29, 0x00	; 0
    bb6c:	b3 94       	inc	r11
    bb6e:	24 cf       	rjmp	.-440    	; 0xb9b8 <draw_menu(bool)+0x10de>
    bb70:	f1 01       	movw	r30, r2
    bb72:	85 91       	lpm	r24, Z+
    bb74:	94 91       	lpm	r25, Z
    bb76:	c5 53       	subi	r28, 0x35	; 53
    bb78:	df 4f       	sbci	r29, 0xFF	; 255
    bb7a:	e8 81       	ld	r30, Y
    bb7c:	f9 81       	ldd	r31, Y+1	; 0x01
    bb7e:	cb 5c       	subi	r28, 0xCB	; 203
    bb80:	d0 40       	sbci	r29, 0x00	; 0
    bb82:	24 91       	lpm	r18, Z
    bb84:	ca 54       	subi	r28, 0x4A	; 74
    bb86:	df 4f       	sbci	r29, 0xFF	; 255
    bb88:	48 81       	ld	r20, Y
    bb8a:	59 81       	ldd	r21, Y+1	; 0x01
    bb8c:	c6 5b       	subi	r28, 0xB6	; 182
    bb8e:	d0 40       	sbci	r29, 0x00	; 0
    bb90:	84 0f       	add	r24, r20
    bb92:	95 1f       	adc	r25, r21
    bb94:	bc 01       	movw	r22, r24
    bb96:	2b 9d       	mul	r18, r11
    bb98:	60 0d       	add	r22, r0
    bb9a:	71 1d       	adc	r23, r1
    bb9c:	11 24       	eor	r1, r1
    bb9e:	c4 54       	subi	r28, 0x44	; 68
    bba0:	df 4f       	sbci	r29, 0xFF	; 255
    bba2:	79 83       	std	Y+1, r23	; 0x01
    bba4:	68 83       	st	Y, r22
    bba6:	cc 5b       	subi	r28, 0xBC	; 188
    bba8:	d0 40       	sbci	r29, 0x00	; 0
    bbaa:	b3 94       	inc	r11
    bbac:	1d cf       	rjmp	.-454    	; 0xb9e8 <draw_menu(bool)+0x110e>
    bbae:	c6 53       	subi	r28, 0x36	; 54
    bbb0:	df 4f       	sbci	r29, 0xFF	; 255
    bbb2:	f8 81       	ld	r31, Y
    bbb4:	ca 5c       	subi	r28, 0xCA	; 202
    bbb6:	d0 40       	sbci	r29, 0x00	; 0
    bbb8:	f1 11       	cpse	r31, r1
    bbba:	0c 94 75 65 	jmp	0xcaea	; 0xcaea <draw_menu(bool)+0x2210>
    bbbe:	91 2c       	mov	r9, r1
    bbc0:	93 01       	movw	r18, r6
    bbc2:	2f 53       	subi	r18, 0x3F	; 63
    bbc4:	3d 4f       	sbci	r19, 0xFD	; 253
    bbc6:	cc 52       	subi	r28, 0x2C	; 44
    bbc8:	df 4f       	sbci	r29, 0xFF	; 255
    bbca:	39 83       	std	Y+1, r19	; 0x01
    bbcc:	28 83       	st	Y, r18
    bbce:	c4 5d       	subi	r28, 0xD4	; 212
    bbd0:	d0 40       	sbci	r29, 0x00	; 0
    bbd2:	cc 52       	subi	r28, 0x2C	; 44
    bbd4:	df 4f       	sbci	r29, 0xFF	; 255
    bbd6:	e8 81       	ld	r30, Y
    bbd8:	f9 81       	ldd	r31, Y+1	; 0x01
    bbda:	c4 5d       	subi	r28, 0xD4	; 212
    bbdc:	d0 40       	sbci	r29, 0x00	; 0
    bbde:	84 91       	lpm	r24, Z
    bbe0:	98 16       	cp	r9, r24
    bbe2:	08 f0       	brcs	.+2      	; 0xbbe6 <draw_menu(bool)+0x130c>
    bbe4:	1a c3       	rjmp	.+1588   	; 0xc21a <draw_menu(bool)+0x1940>
    bbe6:	f7 e1       	ldi	r31, 0x17	; 23
    bbe8:	9f 9e       	mul	r9, r31
    bbea:	20 01       	movw	r4, r0
    bbec:	11 24       	eor	r1, r1
    bbee:	f2 01       	movw	r30, r4
    bbf0:	ee 53       	subi	r30, 0x3E	; 62
    bbf2:	fe 4f       	sbci	r31, 0xFE	; 254
    bbf4:	e6 0d       	add	r30, r6
    bbf6:	f7 1d       	adc	r31, r7
    bbf8:	84 91       	lpm	r24, Z
    bbfa:	cd 52       	subi	r28, 0x2D	; 45
    bbfc:	df 4f       	sbci	r29, 0xFF	; 255
    bbfe:	68 81       	ld	r22, Y
    bc00:	c3 5d       	subi	r28, 0xD3	; 211
    bc02:	d0 40       	sbci	r29, 0x00	; 0
    bc04:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    bc08:	88 23       	and	r24, r24
    bc0a:	09 f4       	brne	.+2      	; 0xbc0e <draw_menu(bool)+0x1334>
    bc0c:	83 c1       	rjmp	.+774    	; 0xbf14 <draw_menu(bool)+0x163a>
    bc0e:	ce 54       	subi	r28, 0x4E	; 78
    bc10:	df 4f       	sbci	r29, 0xFF	; 255
    bc12:	18 82       	st	Y, r1
    bc14:	c2 5b       	subi	r28, 0xB2	; 178
    bc16:	d0 40       	sbci	r29, 0x00	; 0
    bc18:	f2 01       	movw	r30, r4
    bc1a:	e0 54       	subi	r30, 0x40	; 64
    bc1c:	fe 4f       	sbci	r31, 0xFE	; 254
    bc1e:	e6 0d       	add	r30, r6
    bc20:	f7 1d       	adc	r31, r7
    bc22:	25 91       	lpm	r18, Z+
    bc24:	34 91       	lpm	r19, Z
    bc26:	c2 01       	movw	r24, r4
    bc28:	85 54       	subi	r24, 0x45	; 69
    bc2a:	9e 4f       	sbci	r25, 0xFE	; 254
    bc2c:	a3 01       	movw	r20, r6
    bc2e:	48 0f       	add	r20, r24
    bc30:	59 1f       	adc	r21, r25
    bc32:	c6 54       	subi	r28, 0x46	; 70
    bc34:	df 4f       	sbci	r29, 0xFF	; 255
    bc36:	59 83       	std	Y+1, r21	; 0x01
    bc38:	48 83       	st	Y, r20
    bc3a:	ca 5b       	subi	r28, 0xBA	; 186
    bc3c:	d0 40       	sbci	r29, 0x00	; 0
    bc3e:	fa 01       	movw	r30, r20
    bc40:	84 91       	lpm	r24, Z
    bc42:	cf 54       	subi	r28, 0x4F	; 79
    bc44:	df 4f       	sbci	r29, 0xFF	; 255
    bc46:	68 81       	ld	r22, Y
    bc48:	c1 5b       	subi	r28, 0xB1	; 177
    bc4a:	d0 40       	sbci	r29, 0x00	; 0
    bc4c:	70 e0       	ldi	r23, 0x00	; 0
    bc4e:	40 e0       	ldi	r20, 0x00	; 0
    bc50:	90 e0       	ldi	r25, 0x00	; 0
    bc52:	f9 01       	movw	r30, r18
    bc54:	19 95       	eicall
    bc56:	cd 54       	subi	r28, 0x4D	; 77
    bc58:	df 4f       	sbci	r29, 0xFF	; 255
    bc5a:	88 83       	st	Y, r24
    bc5c:	c3 5b       	subi	r28, 0xB3	; 179
    bc5e:	d0 40       	sbci	r29, 0x00	; 0
    bc60:	f2 01       	movw	r30, r4
    bc62:	e4 54       	subi	r30, 0x44	; 68
    bc64:	fe 4f       	sbci	r31, 0xFE	; 254
    bc66:	e6 0d       	add	r30, r6
    bc68:	f7 1d       	adc	r31, r7
    bc6a:	25 91       	lpm	r18, Z+
    bc6c:	34 91       	lpm	r19, Z
    bc6e:	ca 52       	subi	r28, 0x2A	; 42
    bc70:	df 4f       	sbci	r29, 0xFF	; 255
    bc72:	39 83       	std	Y+1, r19	; 0x01
    bc74:	28 83       	st	Y, r18
    bc76:	c6 5d       	subi	r28, 0xD6	; 214
    bc78:	d0 40       	sbci	r29, 0x00	; 0
    bc7a:	f2 01       	movw	r30, r4
    bc7c:	e6 54       	subi	r30, 0x46	; 70
    bc7e:	fe 4f       	sbci	r31, 0xFE	; 254
    bc80:	e6 0d       	add	r30, r6
    bc82:	f7 1d       	adc	r31, r7
    bc84:	44 91       	lpm	r20, Z
    bc86:	4f 3f       	cpi	r20, 0xFF	; 255
    bc88:	b9 f0       	breq	.+46     	; 0xbcb8 <draw_menu(bool)+0x13de>
    bc8a:	f2 01       	movw	r30, r4
    bc8c:	e8 54       	subi	r30, 0x48	; 72
    bc8e:	fe 4f       	sbci	r31, 0xFE	; 254
    bc90:	e6 0d       	add	r30, r6
    bc92:	f7 1d       	adc	r31, r7
    bc94:	24 91       	lpm	r18, Z
    bc96:	f2 01       	movw	r30, r4
    bc98:	e7 54       	subi	r30, 0x47	; 71
    bc9a:	fe 4f       	sbci	r31, 0xFE	; 254
    bc9c:	e6 0d       	add	r30, r6
    bc9e:	f7 1d       	adc	r31, r7
    bca0:	e4 91       	lpm	r30, Z
    bca2:	2e 9f       	mul	r18, r30
    bca4:	20 2d       	mov	r18, r0
    bca6:	11 24       	eor	r1, r1
    bca8:	be 01       	movw	r22, r28
    bcaa:	6d 54       	subi	r22, 0x4D	; 77
    bcac:	7f 4f       	sbci	r23, 0xFF	; 255
    bcae:	ce 01       	movw	r24, r28
    bcb0:	8e 54       	subi	r24, 0x4E	; 78
    bcb2:	9f 4f       	sbci	r25, 0xFF	; 255
    bcb4:	0e 94 9a 50 	call	0xa134	; 0xa134 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    bcb8:	12 01       	movw	r2, r4
    bcba:	34 e5       	ldi	r19, 0x54	; 84
    bcbc:	23 1a       	sub	r2, r19
    bcbe:	3e ef       	ldi	r19, 0xFE	; 254
    bcc0:	33 0a       	sbc	r3, r19
    bcc2:	26 0c       	add	r2, r6
    bcc4:	37 1c       	adc	r3, r7
    bcc6:	c2 01       	movw	r24, r4
    bcc8:	82 55       	subi	r24, 0x52	; 82
    bcca:	9e 4f       	sbci	r25, 0xFE	; 254
    bccc:	a3 01       	movw	r20, r6
    bcce:	48 0f       	add	r20, r24
    bcd0:	59 1f       	adc	r21, r25
    bcd2:	c0 54       	subi	r28, 0x40	; 64
    bcd4:	df 4f       	sbci	r29, 0xFF	; 255
    bcd6:	59 83       	std	Y+1, r21	; 0x01
    bcd8:	48 83       	st	Y, r20
    bcda:	c0 5c       	subi	r28, 0xC0	; 192
    bcdc:	d0 40       	sbci	r29, 0x00	; 0
    bcde:	09 96       	adiw	r24, 0x09	; 9
    bce0:	b3 01       	movw	r22, r6
    bce2:	68 0f       	add	r22, r24
    bce4:	79 1f       	adc	r23, r25
    bce6:	ca 53       	subi	r28, 0x3A	; 58
    bce8:	df 4f       	sbci	r29, 0xFF	; 255
    bcea:	79 83       	std	Y+1, r23	; 0x01
    bcec:	68 83       	st	Y, r22
    bcee:	c6 5c       	subi	r28, 0xC6	; 198
    bcf0:	d0 40       	sbci	r29, 0x00	; 0
    bcf2:	01 97       	sbiw	r24, 0x01	; 1
    bcf4:	f3 01       	movw	r30, r6
    bcf6:	e8 0f       	add	r30, r24
    bcf8:	f9 1f       	adc	r31, r25
    bcfa:	c5 53       	subi	r28, 0x35	; 53
    bcfc:	df 4f       	sbci	r29, 0xFF	; 255
    bcfe:	f9 83       	std	Y+1, r31	; 0x01
    bd00:	e8 83       	st	Y, r30
    bd02:	cb 5c       	subi	r28, 0xCB	; 203
    bd04:	d0 40       	sbci	r29, 0x00	; 0
    bd06:	01 97       	sbiw	r24, 0x01	; 1
    bd08:	93 01       	movw	r18, r6
    bd0a:	28 0f       	add	r18, r24
    bd0c:	39 1f       	adc	r19, r25
    bd0e:	c3 53       	subi	r28, 0x33	; 51
    bd10:	df 4f       	sbci	r29, 0xFF	; 255
    bd12:	39 83       	std	Y+1, r19	; 0x01
    bd14:	28 83       	st	Y, r18
    bd16:	cd 5c       	subi	r28, 0xCD	; 205
    bd18:	d0 40       	sbci	r29, 0x00	; 0
    bd1a:	01 97       	sbiw	r24, 0x01	; 1
    bd1c:	a3 01       	movw	r20, r6
    bd1e:	48 0f       	add	r20, r24
    bd20:	59 1f       	adc	r21, r25
    bd22:	c8 53       	subi	r28, 0x38	; 56
    bd24:	df 4f       	sbci	r29, 0xFF	; 255
    bd26:	59 83       	std	Y+1, r21	; 0x01
    bd28:	48 83       	st	Y, r20
    bd2a:	c8 5c       	subi	r28, 0xC8	; 200
    bd2c:	d0 40       	sbci	r29, 0x00	; 0
    bd2e:	02 97       	sbiw	r24, 0x02	; 2
    bd30:	b3 01       	movw	r22, r6
    bd32:	68 0f       	add	r22, r24
    bd34:	79 1f       	adc	r23, r25
    bd36:	c1 53       	subi	r28, 0x31	; 49
    bd38:	df 4f       	sbci	r29, 0xFF	; 255
    bd3a:	79 83       	std	Y+1, r23	; 0x01
    bd3c:	68 83       	st	Y, r22
    bd3e:	cf 5c       	subi	r28, 0xCF	; 207
    bd40:	d0 40       	sbci	r29, 0x00	; 0
    bd42:	02 97       	sbiw	r24, 0x02	; 2
    bd44:	f3 01       	movw	r30, r6
    bd46:	e8 0f       	add	r30, r24
    bd48:	f9 1f       	adc	r31, r25
    bd4a:	cf 52       	subi	r28, 0x2F	; 47
    bd4c:	df 4f       	sbci	r29, 0xFF	; 255
    bd4e:	f9 83       	std	Y+1, r31	; 0x01
    bd50:	e8 83       	st	Y, r30
    bd52:	c1 5d       	subi	r28, 0xD1	; 209
    bd54:	d0 40       	sbci	r29, 0x00	; 0
    bd56:	f1 2c       	mov	r15, r1
    bd58:	ce 54       	subi	r28, 0x4E	; 78
    bd5a:	df 4f       	sbci	r29, 0xFF	; 255
    bd5c:	88 81       	ld	r24, Y
    bd5e:	c2 5b       	subi	r28, 0xB2	; 178
    bd60:	d0 40       	sbci	r29, 0x00	; 0
    bd62:	cd 54       	subi	r28, 0x4D	; 77
    bd64:	df 4f       	sbci	r29, 0xFF	; 255
    bd66:	98 81       	ld	r25, Y
    bd68:	c3 5b       	subi	r28, 0xB3	; 179
    bd6a:	d0 40       	sbci	r29, 0x00	; 0
    bd6c:	89 17       	cp	r24, r25
    bd6e:	08 f0       	brcs	.+2      	; 0xbd72 <draw_menu(bool)+0x1498>
    bd70:	d1 c0       	rjmp	.+418    	; 0xbf14 <draw_menu(bool)+0x163a>
    bd72:	f1 01       	movw	r30, r2
    bd74:	45 91       	lpm	r20, Z+
    bd76:	54 91       	lpm	r21, Z
    bd78:	c0 54       	subi	r28, 0x40	; 64
    bd7a:	df 4f       	sbci	r29, 0xFF	; 255
    bd7c:	e8 81       	ld	r30, Y
    bd7e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd80:	c0 5c       	subi	r28, 0xC0	; 192
    bd82:	d0 40       	sbci	r29, 0x00	; 0
    bd84:	25 91       	lpm	r18, Z+
    bd86:	34 91       	lpm	r19, Z
    bd88:	ca 53       	subi	r28, 0x3A	; 58
    bd8a:	df 4f       	sbci	r29, 0xFF	; 255
    bd8c:	e8 81       	ld	r30, Y
    bd8e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd90:	c6 5c       	subi	r28, 0xC6	; 198
    bd92:	d0 40       	sbci	r29, 0x00	; 0
    bd94:	94 91       	lpm	r25, Z
    bd96:	99 23       	and	r25, r25
    bd98:	09 f4       	brne	.+2      	; 0xbd9c <draw_menu(bool)+0x14c2>
    bd9a:	7b c0       	rjmp	.+246    	; 0xbe92 <draw_menu(bool)+0x15b8>
    bd9c:	c8 54       	subi	r28, 0x48	; 72
    bd9e:	df 4f       	sbci	r29, 0xFF	; 255
    bda0:	68 81       	ld	r22, Y
    bda2:	79 81       	ldd	r23, Y+1	; 0x01
    bda4:	c8 5b       	subi	r28, 0xB8	; 184
    bda6:	d0 40       	sbci	r29, 0x00	; 0
    bda8:	62 0f       	add	r22, r18
    bdaa:	73 1f       	adc	r23, r19
    bdac:	c2 54       	subi	r28, 0x42	; 66
    bdae:	df 4f       	sbci	r29, 0xFF	; 255
    bdb0:	79 83       	std	Y+1, r23	; 0x01
    bdb2:	68 83       	st	Y, r22
    bdb4:	ce 5b       	subi	r28, 0xBE	; 190
    bdb6:	d0 40       	sbci	r29, 0x00	; 0
    bdb8:	ca 53       	subi	r28, 0x3A	; 58
    bdba:	df 4f       	sbci	r29, 0xFF	; 255
    bdbc:	e8 81       	ld	r30, Y
    bdbe:	f9 81       	ldd	r31, Y+1	; 0x01
    bdc0:	c6 5c       	subi	r28, 0xC6	; 198
    bdc2:	d0 40       	sbci	r29, 0x00	; 0
    bdc4:	94 91       	lpm	r25, Z
    bdc6:	91 30       	cpi	r25, 0x01	; 1
    bdc8:	09 f4       	brne	.+2      	; 0xbdcc <draw_menu(bool)+0x14f2>
    bdca:	86 c0       	rjmp	.+268    	; 0xbed8 <draw_menu(bool)+0x15fe>
    bdcc:	ca 54       	subi	r28, 0x4A	; 74
    bdce:	df 4f       	sbci	r29, 0xFF	; 255
    bdd0:	28 81       	ld	r18, Y
    bdd2:	39 81       	ldd	r19, Y+1	; 0x01
    bdd4:	c6 5b       	subi	r28, 0xB6	; 182
    bdd6:	d0 40       	sbci	r29, 0x00	; 0
    bdd8:	24 0f       	add	r18, r20
    bdda:	35 1f       	adc	r19, r21
    bddc:	c4 54       	subi	r28, 0x44	; 68
    bdde:	df 4f       	sbci	r29, 0xFF	; 255
    bde0:	39 83       	std	Y+1, r19	; 0x01
    bde2:	28 83       	st	Y, r18
    bde4:	cc 5b       	subi	r28, 0xBC	; 188
    bde6:	d0 40       	sbci	r29, 0x00	; 0
    bde8:	c6 54       	subi	r28, 0x46	; 70
    bdea:	df 4f       	sbci	r29, 0xFF	; 255
    bdec:	e8 81       	ld	r30, Y
    bdee:	f9 81       	ldd	r31, Y+1	; 0x01
    bdf0:	ca 5b       	subi	r28, 0xBA	; 186
    bdf2:	d0 40       	sbci	r29, 0x00	; 0
    bdf4:	44 91       	lpm	r20, Z
    bdf6:	8e 01       	movw	r16, r28
    bdf8:	0f 57       	subi	r16, 0x7F	; 127
    bdfa:	1f 4f       	sbci	r17, 0xFF	; 255
    bdfc:	9e 01       	movw	r18, r28
    bdfe:	2f 5f       	subi	r18, 0xFF	; 255
    be00:	3f 4f       	sbci	r19, 0xFF	; 255
    be02:	cf 54       	subi	r28, 0x4F	; 79
    be04:	df 4f       	sbci	r29, 0xFF	; 255
    be06:	68 81       	ld	r22, Y
    be08:	c1 5b       	subi	r28, 0xB1	; 177
    be0a:	d0 40       	sbci	r29, 0x00	; 0
    be0c:	ca 52       	subi	r28, 0x2A	; 42
    be0e:	df 4f       	sbci	r29, 0xFF	; 255
    be10:	e8 81       	ld	r30, Y
    be12:	f9 81       	ldd	r31, Y+1	; 0x01
    be14:	c6 5d       	subi	r28, 0xD6	; 214
    be16:	d0 40       	sbci	r29, 0x00	; 0
    be18:	19 95       	eicall
    be1a:	c8 53       	subi	r28, 0x38	; 56
    be1c:	df 4f       	sbci	r29, 0xFF	; 255
    be1e:	e8 81       	ld	r30, Y
    be20:	f9 81       	ldd	r31, Y+1	; 0x01
    be22:	c8 5c       	subi	r28, 0xC8	; 200
    be24:	d0 40       	sbci	r29, 0x00	; 0
    be26:	e4 90       	lpm	r14, Z
    be28:	04 91       	lpm	r16, Z
    be2a:	c1 53       	subi	r28, 0x31	; 49
    be2c:	df 4f       	sbci	r29, 0xFF	; 255
    be2e:	e8 81       	ld	r30, Y
    be30:	f9 81       	ldd	r31, Y+1	; 0x01
    be32:	cf 5c       	subi	r28, 0xCF	; 207
    be34:	d0 40       	sbci	r29, 0x00	; 0
    be36:	25 91       	lpm	r18, Z+
    be38:	34 91       	lpm	r19, Z
    be3a:	cf 52       	subi	r28, 0x2F	; 47
    be3c:	df 4f       	sbci	r29, 0xFF	; 255
    be3e:	e8 81       	ld	r30, Y
    be40:	f9 81       	ldd	r31, Y+1	; 0x01
    be42:	c1 5d       	subi	r28, 0xD1	; 209
    be44:	d0 40       	sbci	r29, 0x00	; 0
    be46:	45 91       	lpm	r20, Z+
    be48:	54 91       	lpm	r21, Z
    be4a:	88 24       	eor	r8, r8
    be4c:	83 94       	inc	r8
    be4e:	be 01       	movw	r22, r28
    be50:	6f 57       	subi	r22, 0x7F	; 127
    be52:	7f 4f       	sbci	r23, 0xFF	; 255
    be54:	5b 01       	movw	r10, r22
    be56:	ce 01       	movw	r24, r28
    be58:	01 96       	adiw	r24, 0x01	; 1
    be5a:	6c 01       	movw	r12, r24
    be5c:	c2 54       	subi	r28, 0x42	; 66
    be5e:	df 4f       	sbci	r29, 0xFF	; 255
    be60:	68 81       	ld	r22, Y
    be62:	79 81       	ldd	r23, Y+1	; 0x01
    be64:	ce 5b       	subi	r28, 0xBE	; 190
    be66:	d0 40       	sbci	r29, 0x00	; 0
    be68:	c4 54       	subi	r28, 0x44	; 68
    be6a:	df 4f       	sbci	r29, 0xFF	; 255
    be6c:	88 81       	ld	r24, Y
    be6e:	99 81       	ldd	r25, Y+1	; 0x01
    be70:	cc 5b       	subi	r28, 0xBC	; 188
    be72:	d0 40       	sbci	r29, 0x00	; 0
    be74:	0e 94 d4 50 	call	0xa1a8	; 0xa1a8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
    be78:	f3 94       	inc	r15
    be7a:	ce 54       	subi	r28, 0x4E	; 78
    be7c:	df 4f       	sbci	r29, 0xFF	; 255
    be7e:	88 81       	ld	r24, Y
    be80:	c2 5b       	subi	r28, 0xB2	; 178
    be82:	d0 40       	sbci	r29, 0x00	; 0
    be84:	8f 5f       	subi	r24, 0xFF	; 255
    be86:	ce 54       	subi	r28, 0x4E	; 78
    be88:	df 4f       	sbci	r29, 0xFF	; 255
    be8a:	88 83       	st	Y, r24
    be8c:	c2 5b       	subi	r28, 0xB2	; 178
    be8e:	d0 40       	sbci	r29, 0x00	; 0
    be90:	63 cf       	rjmp	.-314    	; 0xbd58 <draw_menu(bool)+0x147e>
    be92:	c0 54       	subi	r28, 0x40	; 64
    be94:	df 4f       	sbci	r29, 0xFF	; 255
    be96:	e8 81       	ld	r30, Y
    be98:	f9 81       	ldd	r31, Y+1	; 0x01
    be9a:	c0 5c       	subi	r28, 0xC0	; 192
    be9c:	d0 40       	sbci	r29, 0x00	; 0
    be9e:	25 91       	lpm	r18, Z+
    bea0:	34 91       	lpm	r19, Z
    bea2:	c5 53       	subi	r28, 0x35	; 53
    bea4:	df 4f       	sbci	r29, 0xFF	; 255
    bea6:	e8 81       	ld	r30, Y
    bea8:	f9 81       	ldd	r31, Y+1	; 0x01
    beaa:	cb 5c       	subi	r28, 0xCB	; 203
    beac:	d0 40       	sbci	r29, 0x00	; 0
    beae:	94 91       	lpm	r25, Z
    beb0:	c8 54       	subi	r28, 0x48	; 72
    beb2:	df 4f       	sbci	r29, 0xFF	; 255
    beb4:	68 81       	ld	r22, Y
    beb6:	79 81       	ldd	r23, Y+1	; 0x01
    beb8:	c8 5b       	subi	r28, 0xB8	; 184
    beba:	d0 40       	sbci	r29, 0x00	; 0
    bebc:	26 0f       	add	r18, r22
    bebe:	37 1f       	adc	r19, r23
    bec0:	f9 01       	movw	r30, r18
    bec2:	9f 9d       	mul	r25, r15
    bec4:	e0 0d       	add	r30, r0
    bec6:	f1 1d       	adc	r31, r1
    bec8:	11 24       	eor	r1, r1
    beca:	c2 54       	subi	r28, 0x42	; 66
    becc:	df 4f       	sbci	r29, 0xFF	; 255
    bece:	f9 83       	std	Y+1, r31	; 0x01
    bed0:	e8 83       	st	Y, r30
    bed2:	ce 5b       	subi	r28, 0xBE	; 190
    bed4:	d0 40       	sbci	r29, 0x00	; 0
    bed6:	70 cf       	rjmp	.-288    	; 0xbdb8 <draw_menu(bool)+0x14de>
    bed8:	f1 01       	movw	r30, r2
    beda:	25 91       	lpm	r18, Z+
    bedc:	34 91       	lpm	r19, Z
    bede:	c3 53       	subi	r28, 0x33	; 51
    bee0:	df 4f       	sbci	r29, 0xFF	; 255
    bee2:	e8 81       	ld	r30, Y
    bee4:	f9 81       	ldd	r31, Y+1	; 0x01
    bee6:	cd 5c       	subi	r28, 0xCD	; 205
    bee8:	d0 40       	sbci	r29, 0x00	; 0
    beea:	94 91       	lpm	r25, Z
    beec:	ca 54       	subi	r28, 0x4A	; 74
    beee:	df 4f       	sbci	r29, 0xFF	; 255
    bef0:	48 81       	ld	r20, Y
    bef2:	59 81       	ldd	r21, Y+1	; 0x01
    bef4:	c6 5b       	subi	r28, 0xB6	; 182
    bef6:	d0 40       	sbci	r29, 0x00	; 0
    bef8:	24 0f       	add	r18, r20
    befa:	35 1f       	adc	r19, r21
    befc:	b9 01       	movw	r22, r18
    befe:	9f 9d       	mul	r25, r15
    bf00:	60 0d       	add	r22, r0
    bf02:	71 1d       	adc	r23, r1
    bf04:	11 24       	eor	r1, r1
    bf06:	c4 54       	subi	r28, 0x44	; 68
    bf08:	df 4f       	sbci	r29, 0xFF	; 255
    bf0a:	79 83       	std	Y+1, r23	; 0x01
    bf0c:	68 83       	st	Y, r22
    bf0e:	cc 5b       	subi	r28, 0xBC	; 188
    bf10:	d0 40       	sbci	r29, 0x00	; 0
    bf12:	6a cf       	rjmp	.-300    	; 0xbde8 <draw_menu(bool)+0x150e>
    bf14:	ce 53       	subi	r28, 0x3E	; 62
    bf16:	df 4f       	sbci	r29, 0xFF	; 255
    bf18:	e8 81       	ld	r30, Y
    bf1a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf1c:	c2 5c       	subi	r28, 0xC2	; 194
    bf1e:	d0 40       	sbci	r29, 0x00	; 0
    bf20:	ef 2b       	or	r30, r31
    bf22:	09 f4       	brne	.+2      	; 0xbf26 <draw_menu(bool)+0x164c>
    bf24:	57 c1       	rjmp	.+686    	; 0xc1d4 <draw_menu(bool)+0x18fa>
    bf26:	cc 53       	subi	r28, 0x3C	; 60
    bf28:	df 4f       	sbci	r29, 0xFF	; 255
    bf2a:	28 81       	ld	r18, Y
    bf2c:	39 81       	ldd	r19, Y+1	; 0x01
    bf2e:	c4 5c       	subi	r28, 0xC4	; 196
    bf30:	d0 40       	sbci	r29, 0x00	; 0
    bf32:	23 2b       	or	r18, r19
    bf34:	09 f4       	brne	.+2      	; 0xbf38 <draw_menu(bool)+0x165e>
    bf36:	4e c1       	rjmp	.+668    	; 0xc1d4 <draw_menu(bool)+0x18fa>
    bf38:	ce 54       	subi	r28, 0x4E	; 78
    bf3a:	df 4f       	sbci	r29, 0xFF	; 255
    bf3c:	18 82       	st	Y, r1
    bf3e:	c2 5b       	subi	r28, 0xB2	; 178
    bf40:	d0 40       	sbci	r29, 0x00	; 0
    bf42:	f2 01       	movw	r30, r4
    bf44:	e0 54       	subi	r30, 0x40	; 64
    bf46:	fe 4f       	sbci	r31, 0xFE	; 254
    bf48:	e6 0d       	add	r30, r6
    bf4a:	f7 1d       	adc	r31, r7
    bf4c:	25 91       	lpm	r18, Z+
    bf4e:	34 91       	lpm	r19, Z
    bf50:	c2 01       	movw	r24, r4
    bf52:	85 54       	subi	r24, 0x45	; 69
    bf54:	9e 4f       	sbci	r25, 0xFE	; 254
    bf56:	a3 01       	movw	r20, r6
    bf58:	48 0f       	add	r20, r24
    bf5a:	59 1f       	adc	r21, r25
    bf5c:	c6 54       	subi	r28, 0x46	; 70
    bf5e:	df 4f       	sbci	r29, 0xFF	; 255
    bf60:	59 83       	std	Y+1, r21	; 0x01
    bf62:	48 83       	st	Y, r20
    bf64:	ca 5b       	subi	r28, 0xBA	; 186
    bf66:	d0 40       	sbci	r29, 0x00	; 0
    bf68:	fa 01       	movw	r30, r20
    bf6a:	84 91       	lpm	r24, Z
    bf6c:	cf 54       	subi	r28, 0x4F	; 79
    bf6e:	df 4f       	sbci	r29, 0xFF	; 255
    bf70:	68 81       	ld	r22, Y
    bf72:	c1 5b       	subi	r28, 0xB1	; 177
    bf74:	d0 40       	sbci	r29, 0x00	; 0
    bf76:	70 e0       	ldi	r23, 0x00	; 0
    bf78:	40 e0       	ldi	r20, 0x00	; 0
    bf7a:	90 e0       	ldi	r25, 0x00	; 0
    bf7c:	f9 01       	movw	r30, r18
    bf7e:	19 95       	eicall
    bf80:	cd 54       	subi	r28, 0x4D	; 77
    bf82:	df 4f       	sbci	r29, 0xFF	; 255
    bf84:	88 83       	st	Y, r24
    bf86:	c3 5b       	subi	r28, 0xB3	; 179
    bf88:	d0 40       	sbci	r29, 0x00	; 0
    bf8a:	f2 01       	movw	r30, r4
    bf8c:	e6 54       	subi	r30, 0x46	; 70
    bf8e:	fe 4f       	sbci	r31, 0xFE	; 254
    bf90:	e6 0d       	add	r30, r6
    bf92:	f7 1d       	adc	r31, r7
    bf94:	44 91       	lpm	r20, Z
    bf96:	4f 3f       	cpi	r20, 0xFF	; 255
    bf98:	b9 f0       	breq	.+46     	; 0xbfc8 <draw_menu(bool)+0x16ee>
    bf9a:	f2 01       	movw	r30, r4
    bf9c:	e8 54       	subi	r30, 0x48	; 72
    bf9e:	fe 4f       	sbci	r31, 0xFE	; 254
    bfa0:	e6 0d       	add	r30, r6
    bfa2:	f7 1d       	adc	r31, r7
    bfa4:	24 91       	lpm	r18, Z
    bfa6:	f2 01       	movw	r30, r4
    bfa8:	e7 54       	subi	r30, 0x47	; 71
    bfaa:	fe 4f       	sbci	r31, 0xFE	; 254
    bfac:	e6 0d       	add	r30, r6
    bfae:	f7 1d       	adc	r31, r7
    bfb0:	e4 91       	lpm	r30, Z
    bfb2:	2e 9f       	mul	r18, r30
    bfb4:	20 2d       	mov	r18, r0
    bfb6:	11 24       	eor	r1, r1
    bfb8:	be 01       	movw	r22, r28
    bfba:	6d 54       	subi	r22, 0x4D	; 77
    bfbc:	7f 4f       	sbci	r23, 0xFF	; 255
    bfbe:	ce 01       	movw	r24, r28
    bfc0:	8e 54       	subi	r24, 0x4E	; 78
    bfc2:	9f 4f       	sbci	r25, 0xFF	; 255
    bfc4:	0e 94 9a 50 	call	0xa134	; 0xa134 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    bfc8:	ce 54       	subi	r28, 0x4E	; 78
    bfca:	df 4f       	sbci	r29, 0xFF	; 255
    bfcc:	f8 81       	ld	r31, Y
    bfce:	c2 5b       	subi	r28, 0xB2	; 178
    bfd0:	d0 40       	sbci	r29, 0x00	; 0
    bfd2:	cf 52       	subi	r28, 0x2F	; 47
    bfd4:	df 4f       	sbci	r29, 0xFF	; 255
    bfd6:	f8 83       	st	Y, r31
    bfd8:	c1 5d       	subi	r28, 0xD1	; 209
    bfda:	d0 40       	sbci	r29, 0x00	; 0
    bfdc:	cd 54       	subi	r28, 0x4D	; 77
    bfde:	df 4f       	sbci	r29, 0xFF	; 255
    bfe0:	28 81       	ld	r18, Y
    bfe2:	c3 5b       	subi	r28, 0xB3	; 179
    bfe4:	d0 40       	sbci	r29, 0x00	; 0
    bfe6:	ca 53       	subi	r28, 0x3A	; 58
    bfe8:	df 4f       	sbci	r29, 0xFF	; 255
    bfea:	28 83       	st	Y, r18
    bfec:	c6 5c       	subi	r28, 0xC6	; 198
    bfee:	d0 40       	sbci	r29, 0x00	; 0
    bff0:	62 01       	movw	r12, r4
    bff2:	34 e5       	ldi	r19, 0x54	; 84
    bff4:	c3 1a       	sub	r12, r19
    bff6:	3e ef       	ldi	r19, 0xFE	; 254
    bff8:	d3 0a       	sbc	r13, r19
    bffa:	c6 0c       	add	r12, r6
    bffc:	d7 1c       	adc	r13, r7
    bffe:	12 01       	movw	r2, r4
    c000:	42 e5       	ldi	r20, 0x52	; 82
    c002:	24 1a       	sub	r2, r20
    c004:	4e ef       	ldi	r20, 0xFE	; 254
    c006:	34 0a       	sbc	r3, r20
    c008:	26 0c       	add	r2, r6
    c00a:	37 1c       	adc	r3, r7
    c00c:	c2 01       	movw	r24, r4
    c00e:	89 54       	subi	r24, 0x49	; 73
    c010:	9e 4f       	sbci	r25, 0xFE	; 254
    c012:	b3 01       	movw	r22, r6
    c014:	68 0f       	add	r22, r24
    c016:	79 1f       	adc	r23, r25
    c018:	c0 54       	subi	r28, 0x40	; 64
    c01a:	df 4f       	sbci	r29, 0xFF	; 255
    c01c:	79 83       	std	Y+1, r23	; 0x01
    c01e:	68 83       	st	Y, r22
    c020:	c0 5c       	subi	r28, 0xC0	; 192
    c022:	d0 40       	sbci	r29, 0x00	; 0
    c024:	01 97       	sbiw	r24, 0x01	; 1
    c026:	f3 01       	movw	r30, r6
    c028:	e8 0f       	add	r30, r24
    c02a:	f9 1f       	adc	r31, r25
    c02c:	c8 53       	subi	r28, 0x38	; 56
    c02e:	df 4f       	sbci	r29, 0xFF	; 255
    c030:	f9 83       	std	Y+1, r31	; 0x01
    c032:	e8 83       	st	Y, r30
    c034:	c8 5c       	subi	r28, 0xC8	; 200
    c036:	d0 40       	sbci	r29, 0x00	; 0
    c038:	01 97       	sbiw	r24, 0x01	; 1
    c03a:	93 01       	movw	r18, r6
    c03c:	28 0f       	add	r18, r24
    c03e:	39 1f       	adc	r19, r25
    c040:	c5 53       	subi	r28, 0x35	; 53
    c042:	df 4f       	sbci	r29, 0xFF	; 255
    c044:	39 83       	std	Y+1, r19	; 0x01
    c046:	28 83       	st	Y, r18
    c048:	cb 5c       	subi	r28, 0xCB	; 203
    c04a:	d0 40       	sbci	r29, 0x00	; 0
    c04c:	03 97       	sbiw	r24, 0x03	; 3
    c04e:	a3 01       	movw	r20, r6
    c050:	48 0f       	add	r20, r24
    c052:	59 1f       	adc	r21, r25
    c054:	c3 53       	subi	r28, 0x33	; 51
    c056:	df 4f       	sbci	r29, 0xFF	; 255
    c058:	59 83       	std	Y+1, r21	; 0x01
    c05a:	48 83       	st	Y, r20
    c05c:	cd 5c       	subi	r28, 0xCD	; 205
    c05e:	d0 40       	sbci	r29, 0x00	; 0
    c060:	02 97       	sbiw	r24, 0x02	; 2
    c062:	b3 01       	movw	r22, r6
    c064:	68 0f       	add	r22, r24
    c066:	79 1f       	adc	r23, r25
    c068:	c1 53       	subi	r28, 0x31	; 49
    c06a:	df 4f       	sbci	r29, 0xFF	; 255
    c06c:	79 83       	std	Y+1, r23	; 0x01
    c06e:	68 83       	st	Y, r22
    c070:	cf 5c       	subi	r28, 0xCF	; 207
    c072:	d0 40       	sbci	r29, 0x00	; 0
    c074:	b1 2c       	mov	r11, r1
    c076:	a1 2c       	mov	r10, r1
    c078:	cf 52       	subi	r28, 0x2F	; 47
    c07a:	df 4f       	sbci	r29, 0xFF	; 255
    c07c:	88 80       	ld	r8, Y
    c07e:	c1 5d       	subi	r28, 0xD1	; 209
    c080:	d0 40       	sbci	r29, 0x00	; 0
    c082:	8a 0c       	add	r8, r10
    c084:	ca 53       	subi	r28, 0x3A	; 58
    c086:	df 4f       	sbci	r29, 0xFF	; 255
    c088:	78 81       	ld	r23, Y
    c08a:	c6 5c       	subi	r28, 0xC6	; 198
    c08c:	d0 40       	sbci	r29, 0x00	; 0
    c08e:	87 16       	cp	r8, r23
    c090:	08 f0       	brcs	.+2      	; 0xc094 <draw_menu(bool)+0x17ba>
    c092:	a0 c0       	rjmp	.+320    	; 0xc1d4 <draw_menu(bool)+0x18fa>
    c094:	f6 01       	movw	r30, r12
    c096:	25 91       	lpm	r18, Z+
    c098:	34 91       	lpm	r19, Z
    c09a:	f1 01       	movw	r30, r2
    c09c:	85 91       	lpm	r24, Z+
    c09e:	94 91       	lpm	r25, Z
    c0a0:	c0 54       	subi	r28, 0x40	; 64
    c0a2:	df 4f       	sbci	r29, 0xFF	; 255
    c0a4:	e8 81       	ld	r30, Y
    c0a6:	f9 81       	ldd	r31, Y+1	; 0x01
    c0a8:	c0 5c       	subi	r28, 0xC0	; 192
    c0aa:	d0 40       	sbci	r29, 0x00	; 0
    c0ac:	44 91       	lpm	r20, Z
    c0ae:	44 23       	and	r20, r20
    c0b0:	09 f4       	brne	.+2      	; 0xc0b4 <draw_menu(bool)+0x17da>
    c0b2:	92 c0       	rjmp	.+292    	; 0xc1d8 <draw_menu(bool)+0x18fe>
    c0b4:	c8 54       	subi	r28, 0x48	; 72
    c0b6:	df 4f       	sbci	r29, 0xFF	; 255
    c0b8:	48 81       	ld	r20, Y
    c0ba:	59 81       	ldd	r21, Y+1	; 0x01
    c0bc:	c8 5b       	subi	r28, 0xB8	; 184
    c0be:	d0 40       	sbci	r29, 0x00	; 0
    c0c0:	48 0f       	add	r20, r24
    c0c2:	59 1f       	adc	r21, r25
    c0c4:	c2 54       	subi	r28, 0x42	; 66
    c0c6:	df 4f       	sbci	r29, 0xFF	; 255
    c0c8:	59 83       	std	Y+1, r21	; 0x01
    c0ca:	48 83       	st	Y, r20
    c0cc:	ce 5b       	subi	r28, 0xBE	; 190
    c0ce:	d0 40       	sbci	r29, 0x00	; 0
    c0d0:	c0 54       	subi	r28, 0x40	; 64
    c0d2:	df 4f       	sbci	r29, 0xFF	; 255
    c0d4:	e8 81       	ld	r30, Y
    c0d6:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d8:	c0 5c       	subi	r28, 0xC0	; 192
    c0da:	d0 40       	sbci	r29, 0x00	; 0
    c0dc:	84 91       	lpm	r24, Z
    c0de:	ca 54       	subi	r28, 0x4A	; 74
    c0e0:	df 4f       	sbci	r29, 0xFF	; 255
    c0e2:	48 81       	ld	r20, Y
    c0e4:	59 81       	ldd	r21, Y+1	; 0x01
    c0e6:	c6 5b       	subi	r28, 0xB6	; 182
    c0e8:	d0 40       	sbci	r29, 0x00	; 0
    c0ea:	81 30       	cpi	r24, 0x01	; 1
    c0ec:	c1 f4       	brne	.+48     	; 0xc11e <draw_menu(bool)+0x1844>
    c0ee:	f6 01       	movw	r30, r12
    c0f0:	85 91       	lpm	r24, Z+
    c0f2:	94 91       	lpm	r25, Z
    c0f4:	c5 53       	subi	r28, 0x35	; 53
    c0f6:	df 4f       	sbci	r29, 0xFF	; 255
    c0f8:	e8 81       	ld	r30, Y
    c0fa:	f9 81       	ldd	r31, Y+1	; 0x01
    c0fc:	cb 5c       	subi	r28, 0xCB	; 203
    c0fe:	d0 40       	sbci	r29, 0x00	; 0
    c100:	44 91       	lpm	r20, Z
    c102:	ca 54       	subi	r28, 0x4A	; 74
    c104:	df 4f       	sbci	r29, 0xFF	; 255
    c106:	28 81       	ld	r18, Y
    c108:	39 81       	ldd	r19, Y+1	; 0x01
    c10a:	c6 5b       	subi	r28, 0xB6	; 182
    c10c:	d0 40       	sbci	r29, 0x00	; 0
    c10e:	82 0f       	add	r24, r18
    c110:	93 1f       	adc	r25, r19
    c112:	4a 9d       	mul	r20, r10
    c114:	90 01       	movw	r18, r0
    c116:	4b 9d       	mul	r20, r11
    c118:	30 0d       	add	r19, r0
    c11a:	11 24       	eor	r1, r1
    c11c:	ac 01       	movw	r20, r24
    c11e:	42 0f       	add	r20, r18
    c120:	53 1f       	adc	r21, r19
    c122:	c4 54       	subi	r28, 0x44	; 68
    c124:	df 4f       	sbci	r29, 0xFF	; 255
    c126:	59 83       	std	Y+1, r21	; 0x01
    c128:	48 83       	st	Y, r20
    c12a:	cc 5b       	subi	r28, 0xBC	; 188
    c12c:	d0 40       	sbci	r29, 0x00	; 0
    c12e:	c3 53       	subi	r28, 0x33	; 51
    c130:	df 4f       	sbci	r29, 0xFF	; 255
    c132:	e8 81       	ld	r30, Y
    c134:	f9 81       	ldd	r31, Y+1	; 0x01
    c136:	cd 5c       	subi	r28, 0xCD	; 205
    c138:	d0 40       	sbci	r29, 0x00	; 0
    c13a:	25 91       	lpm	r18, Z+
    c13c:	34 91       	lpm	r19, Z
    c13e:	c1 53       	subi	r28, 0x31	; 49
    c140:	df 4f       	sbci	r29, 0xFF	; 255
    c142:	e8 81       	ld	r30, Y
    c144:	f9 81       	ldd	r31, Y+1	; 0x01
    c146:	cf 5c       	subi	r28, 0xCF	; 207
    c148:	d0 40       	sbci	r29, 0x00	; 0
    c14a:	45 91       	lpm	r20, Z+
    c14c:	54 91       	lpm	r21, Z
    c14e:	cc 53       	subi	r28, 0x3C	; 60
    c150:	df 4f       	sbci	r29, 0xFF	; 255
    c152:	e8 80       	ld	r14, Y
    c154:	f9 80       	ldd	r15, Y+1	; 0x01
    c156:	c4 5c       	subi	r28, 0xC4	; 196
    c158:	d0 40       	sbci	r29, 0x00	; 0
    c15a:	ce 53       	subi	r28, 0x3E	; 62
    c15c:	df 4f       	sbci	r29, 0xFF	; 255
    c15e:	08 81       	ld	r16, Y
    c160:	19 81       	ldd	r17, Y+1	; 0x01
    c162:	c2 5c       	subi	r28, 0xC2	; 194
    c164:	d0 40       	sbci	r29, 0x00	; 0
    c166:	c2 54       	subi	r28, 0x42	; 66
    c168:	df 4f       	sbci	r29, 0xFF	; 255
    c16a:	68 81       	ld	r22, Y
    c16c:	79 81       	ldd	r23, Y+1	; 0x01
    c16e:	ce 5b       	subi	r28, 0xBE	; 190
    c170:	d0 40       	sbci	r29, 0x00	; 0
    c172:	c4 54       	subi	r28, 0x44	; 68
    c174:	df 4f       	sbci	r29, 0xFF	; 255
    c176:	88 81       	ld	r24, Y
    c178:	99 81       	ldd	r25, Y+1	; 0x01
    c17a:	cc 5b       	subi	r28, 0xBC	; 188
    c17c:	d0 40       	sbci	r29, 0x00	; 0
    c17e:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c182:	18 2f       	mov	r17, r24
    c184:	5f ef       	ldi	r21, 0xFF	; 255
    c186:	a5 1a       	sub	r10, r21
    c188:	b5 0a       	sbc	r11, r21
    c18a:	88 23       	and	r24, r24
    c18c:	09 f4       	brne	.+2      	; 0xc190 <draw_menu(bool)+0x18b6>
    c18e:	74 cf       	rjmp	.-280    	; 0xc078 <draw_menu(bool)+0x179e>
    c190:	ce 54       	subi	r28, 0x4E	; 78
    c192:	df 4f       	sbci	r29, 0xFF	; 255
    c194:	88 82       	st	Y, r8
    c196:	c2 5b       	subi	r28, 0xB2	; 178
    c198:	d0 40       	sbci	r29, 0x00	; 0
    c19a:	f2 01       	movw	r30, r4
    c19c:	e2 54       	subi	r30, 0x42	; 66
    c19e:	fe 4f       	sbci	r31, 0xFE	; 254
    c1a0:	e6 0d       	add	r30, r6
    c1a2:	f7 1d       	adc	r31, r7
    c1a4:	25 91       	lpm	r18, Z+
    c1a6:	34 91       	lpm	r19, Z
    c1a8:	c6 54       	subi	r28, 0x46	; 70
    c1aa:	df 4f       	sbci	r29, 0xFF	; 255
    c1ac:	e8 81       	ld	r30, Y
    c1ae:	f9 81       	ldd	r31, Y+1	; 0x01
    c1b0:	ca 5b       	subi	r28, 0xBA	; 186
    c1b2:	d0 40       	sbci	r29, 0x00	; 0
    c1b4:	84 91       	lpm	r24, Z
    c1b6:	cf 54       	subi	r28, 0x4F	; 79
    c1b8:	df 4f       	sbci	r29, 0xFF	; 255
    c1ba:	68 81       	ld	r22, Y
    c1bc:	c1 5b       	subi	r28, 0xB1	; 177
    c1be:	d0 40       	sbci	r29, 0x00	; 0
    c1c0:	70 e0       	ldi	r23, 0x00	; 0
    c1c2:	48 2d       	mov	r20, r8
    c1c4:	90 e0       	ldi	r25, 0x00	; 0
    c1c6:	f9 01       	movw	r30, r18
    c1c8:	19 95       	eicall
    c1ca:	c6 53       	subi	r28, 0x36	; 54
    c1cc:	df 4f       	sbci	r29, 0xFF	; 255
    c1ce:	18 83       	st	Y, r17
    c1d0:	ca 5c       	subi	r28, 0xCA	; 202
    c1d2:	d0 40       	sbci	r29, 0x00	; 0
    c1d4:	93 94       	inc	r9
    c1d6:	fd cc       	rjmp	.-1542   	; 0xbbd2 <draw_menu(bool)+0x12f8>
    c1d8:	f1 01       	movw	r30, r2
    c1da:	85 91       	lpm	r24, Z+
    c1dc:	94 91       	lpm	r25, Z
    c1de:	c8 53       	subi	r28, 0x38	; 56
    c1e0:	df 4f       	sbci	r29, 0xFF	; 255
    c1e2:	e8 81       	ld	r30, Y
    c1e4:	f9 81       	ldd	r31, Y+1	; 0x01
    c1e6:	c8 5c       	subi	r28, 0xC8	; 200
    c1e8:	d0 40       	sbci	r29, 0x00	; 0
    c1ea:	64 91       	lpm	r22, Z
    c1ec:	c8 54       	subi	r28, 0x48	; 72
    c1ee:	df 4f       	sbci	r29, 0xFF	; 255
    c1f0:	48 81       	ld	r20, Y
    c1f2:	59 81       	ldd	r21, Y+1	; 0x01
    c1f4:	c8 5b       	subi	r28, 0xB8	; 184
    c1f6:	d0 40       	sbci	r29, 0x00	; 0
    c1f8:	84 0f       	add	r24, r20
    c1fa:	95 1f       	adc	r25, r21
    c1fc:	6a 9d       	mul	r22, r10
    c1fe:	a0 01       	movw	r20, r0
    c200:	6b 9d       	mul	r22, r11
    c202:	50 0d       	add	r21, r0
    c204:	11 24       	eor	r1, r1
    c206:	bc 01       	movw	r22, r24
    c208:	64 0f       	add	r22, r20
    c20a:	75 1f       	adc	r23, r21
    c20c:	c2 54       	subi	r28, 0x42	; 66
    c20e:	df 4f       	sbci	r29, 0xFF	; 255
    c210:	79 83       	std	Y+1, r23	; 0x01
    c212:	68 83       	st	Y, r22
    c214:	ce 5b       	subi	r28, 0xBE	; 190
    c216:	d0 40       	sbci	r29, 0x00	; 0
    c218:	5b cf       	rjmp	.-330    	; 0xc0d0 <draw_menu(bool)+0x17f6>
    c21a:	c6 53       	subi	r28, 0x36	; 54
    c21c:	df 4f       	sbci	r29, 0xFF	; 255
    c21e:	f8 81       	ld	r31, Y
    c220:	ca 5c       	subi	r28, 0xCA	; 202
    c222:	d0 40       	sbci	r29, 0x00	; 0
    c224:	f1 11       	cpse	r31, r1
    c226:	61 c4       	rjmp	.+2242   	; 0xcaea <draw_menu(bool)+0x2210>
    c228:	21 2c       	mov	r2, r1
    c22a:	93 01       	movw	r18, r6
    c22c:	2c 53       	subi	r18, 0x3C	; 60
    c22e:	3d 4f       	sbci	r19, 0xFD	; 253
    c230:	c0 52       	subi	r28, 0x20	; 32
    c232:	df 4f       	sbci	r29, 0xFF	; 255
    c234:	39 83       	std	Y+1, r19	; 0x01
    c236:	28 83       	st	Y, r18
    c238:	c0 5e       	subi	r28, 0xE0	; 224
    c23a:	d0 40       	sbci	r29, 0x00	; 0
    c23c:	ae 01       	movw	r20, r28
    c23e:	4f 57       	subi	r20, 0x7F	; 127
    c240:	5f 4f       	sbci	r21, 0xFF	; 255
    c242:	cc 54       	subi	r28, 0x4C	; 76
    c244:	df 4f       	sbci	r29, 0xFF	; 255
    c246:	59 83       	std	Y+1, r21	; 0x01
    c248:	48 83       	st	Y, r20
    c24a:	c4 5b       	subi	r28, 0xB4	; 180
    c24c:	d0 40       	sbci	r29, 0x00	; 0
    c24e:	c0 52       	subi	r28, 0x20	; 32
    c250:	df 4f       	sbci	r29, 0xFF	; 255
    c252:	e8 81       	ld	r30, Y
    c254:	f9 81       	ldd	r31, Y+1	; 0x01
    c256:	c0 5e       	subi	r28, 0xE0	; 224
    c258:	d0 40       	sbci	r29, 0x00	; 0
    c25a:	84 91       	lpm	r24, Z
    c25c:	28 16       	cp	r2, r24
    c25e:	08 f0       	brcs	.+2      	; 0xc262 <draw_menu(bool)+0x1988>
    c260:	4a c4       	rjmp	.+2196   	; 0xcaf6 <draw_menu(bool)+0x221c>
    c262:	fe e1       	ldi	r31, 0x1E	; 30
    c264:	2f 9e       	mul	r2, r31
    c266:	20 01       	movw	r4, r0
    c268:	11 24       	eor	r1, r1
    c26a:	f2 01       	movw	r30, r4
    c26c:	e4 54       	subi	r30, 0x44	; 68
    c26e:	fd 4f       	sbci	r31, 0xFD	; 253
    c270:	e6 0d       	add	r30, r6
    c272:	f7 1d       	adc	r31, r7
    c274:	84 91       	lpm	r24, Z
    c276:	cd 52       	subi	r28, 0x2D	; 45
    c278:	df 4f       	sbci	r29, 0xFF	; 255
    c27a:	68 81       	ld	r22, Y
    c27c:	c3 5d       	subi	r28, 0xD3	; 211
    c27e:	d0 40       	sbci	r29, 0x00	; 0
    c280:	0e 94 7e 39 	call	0x72fc	; 0x72fc <enable_redraw(unsigned char, unsigned char)>
    c284:	88 23       	and	r24, r24
    c286:	09 f4       	brne	.+2      	; 0xc28a <draw_menu(bool)+0x19b0>
    c288:	5e c2       	rjmp	.+1212   	; 0xc746 <draw_menu(bool)+0x1e6c>
    c28a:	ce 54       	subi	r28, 0x4E	; 78
    c28c:	df 4f       	sbci	r29, 0xFF	; 255
    c28e:	18 82       	st	Y, r1
    c290:	c2 5b       	subi	r28, 0xB2	; 178
    c292:	d0 40       	sbci	r29, 0x00	; 0
    c294:	f2 01       	movw	r30, r4
    c296:	e8 54       	subi	r30, 0x48	; 72
    c298:	fd 4f       	sbci	r31, 0xFD	; 253
    c29a:	e6 0d       	add	r30, r6
    c29c:	f7 1d       	adc	r31, r7
    c29e:	25 91       	lpm	r18, Z+
    c2a0:	34 91       	lpm	r19, Z
    c2a2:	c2 01       	movw	r24, r4
    c2a4:	8d 54       	subi	r24, 0x4D	; 77
    c2a6:	9d 4f       	sbci	r25, 0xFD	; 253
    c2a8:	a3 01       	movw	r20, r6
    c2aa:	48 0f       	add	r20, r24
    c2ac:	59 1f       	adc	r21, r25
    c2ae:	c6 54       	subi	r28, 0x46	; 70
    c2b0:	df 4f       	sbci	r29, 0xFF	; 255
    c2b2:	59 83       	std	Y+1, r21	; 0x01
    c2b4:	48 83       	st	Y, r20
    c2b6:	ca 5b       	subi	r28, 0xBA	; 186
    c2b8:	d0 40       	sbci	r29, 0x00	; 0
    c2ba:	fa 01       	movw	r30, r20
    c2bc:	84 91       	lpm	r24, Z
    c2be:	cf 54       	subi	r28, 0x4F	; 79
    c2c0:	df 4f       	sbci	r29, 0xFF	; 255
    c2c2:	68 81       	ld	r22, Y
    c2c4:	c1 5b       	subi	r28, 0xB1	; 177
    c2c6:	d0 40       	sbci	r29, 0x00	; 0
    c2c8:	70 e0       	ldi	r23, 0x00	; 0
    c2ca:	40 e0       	ldi	r20, 0x00	; 0
    c2cc:	90 e0       	ldi	r25, 0x00	; 0
    c2ce:	f9 01       	movw	r30, r18
    c2d0:	19 95       	eicall
    c2d2:	cd 54       	subi	r28, 0x4D	; 77
    c2d4:	df 4f       	sbci	r29, 0xFF	; 255
    c2d6:	88 83       	st	Y, r24
    c2d8:	c3 5b       	subi	r28, 0xB3	; 179
    c2da:	d0 40       	sbci	r29, 0x00	; 0
    c2dc:	f2 01       	movw	r30, r4
    c2de:	ec 54       	subi	r30, 0x4C	; 76
    c2e0:	fd 4f       	sbci	r31, 0xFD	; 253
    c2e2:	e6 0d       	add	r30, r6
    c2e4:	f7 1d       	adc	r31, r7
    c2e6:	25 91       	lpm	r18, Z+
    c2e8:	34 91       	lpm	r19, Z
    c2ea:	ce 51       	subi	r28, 0x1E	; 30
    c2ec:	df 4f       	sbci	r29, 0xFF	; 255
    c2ee:	39 83       	std	Y+1, r19	; 0x01
    c2f0:	28 83       	st	Y, r18
    c2f2:	c2 5e       	subi	r28, 0xE2	; 226
    c2f4:	d0 40       	sbci	r29, 0x00	; 0
    c2f6:	f2 01       	movw	r30, r4
    c2f8:	ee 54       	subi	r30, 0x4E	; 78
    c2fa:	fd 4f       	sbci	r31, 0xFD	; 253
    c2fc:	e6 0d       	add	r30, r6
    c2fe:	f7 1d       	adc	r31, r7
    c300:	44 91       	lpm	r20, Z
    c302:	c2 01       	movw	r24, r4
    c304:	80 55       	subi	r24, 0x50	; 80
    c306:	9d 4f       	sbci	r25, 0xFD	; 253
    c308:	b3 01       	movw	r22, r6
    c30a:	68 0f       	add	r22, r24
    c30c:	79 1f       	adc	r23, r25
    c30e:	c1 53       	subi	r28, 0x31	; 49
    c310:	df 4f       	sbci	r29, 0xFF	; 255
    c312:	79 83       	std	Y+1, r23	; 0x01
    c314:	68 83       	st	Y, r22
    c316:	cf 5c       	subi	r28, 0xCF	; 207
    c318:	d0 40       	sbci	r29, 0x00	; 0
    c31a:	4f 3f       	cpi	r20, 0xFF	; 255
    c31c:	99 f0       	breq	.+38     	; 0xc344 <draw_menu(bool)+0x1a6a>
    c31e:	fb 01       	movw	r30, r22
    c320:	24 91       	lpm	r18, Z
    c322:	f2 01       	movw	r30, r4
    c324:	ef 54       	subi	r30, 0x4F	; 79
    c326:	fd 4f       	sbci	r31, 0xFD	; 253
    c328:	e6 0d       	add	r30, r6
    c32a:	f7 1d       	adc	r31, r7
    c32c:	e4 91       	lpm	r30, Z
    c32e:	2e 9f       	mul	r18, r30
    c330:	20 2d       	mov	r18, r0
    c332:	11 24       	eor	r1, r1
    c334:	be 01       	movw	r22, r28
    c336:	6d 54       	subi	r22, 0x4D	; 77
    c338:	7f 4f       	sbci	r23, 0xFF	; 255
    c33a:	ce 01       	movw	r24, r28
    c33c:	8e 54       	subi	r24, 0x4E	; 78
    c33e:	9f 4f       	sbci	r25, 0xFF	; 255
    c340:	0e 94 9a 50 	call	0xa134	; 0xa134 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c344:	c2 01       	movw	r24, r4
    c346:	81 55       	subi	r24, 0x51	; 81
    c348:	9d 4f       	sbci	r25, 0xFD	; 253
    c34a:	93 01       	movw	r18, r6
    c34c:	28 0f       	add	r18, r24
    c34e:	39 1f       	adc	r19, r25
    c350:	c0 54       	subi	r28, 0x40	; 64
    c352:	df 4f       	sbci	r29, 0xFF	; 255
    c354:	39 83       	std	Y+1, r19	; 0x01
    c356:	28 83       	st	Y, r18
    c358:	c0 5c       	subi	r28, 0xC0	; 192
    c35a:	d0 40       	sbci	r29, 0x00	; 0
    c35c:	40 97       	sbiw	r24, 0x10	; 16
    c35e:	a3 01       	movw	r20, r6
    c360:	48 0f       	add	r20, r24
    c362:	59 1f       	adc	r21, r25
    c364:	ca 53       	subi	r28, 0x3A	; 58
    c366:	df 4f       	sbci	r29, 0xFF	; 255
    c368:	59 83       	std	Y+1, r21	; 0x01
    c36a:	48 83       	st	Y, r20
    c36c:	c6 5c       	subi	r28, 0xC6	; 198
    c36e:	d0 40       	sbci	r29, 0x00	; 0
    c370:	02 96       	adiw	r24, 0x02	; 2
    c372:	b3 01       	movw	r22, r6
    c374:	68 0f       	add	r22, r24
    c376:	79 1f       	adc	r23, r25
    c378:	c8 53       	subi	r28, 0x38	; 56
    c37a:	df 4f       	sbci	r29, 0xFF	; 255
    c37c:	79 83       	std	Y+1, r23	; 0x01
    c37e:	68 83       	st	Y, r22
    c380:	c8 5c       	subi	r28, 0xC8	; 200
    c382:	d0 40       	sbci	r29, 0x00	; 0
    c384:	0d 96       	adiw	r24, 0x0d	; 13
    c386:	f3 01       	movw	r30, r6
    c388:	e8 0f       	add	r30, r24
    c38a:	f9 1f       	adc	r31, r25
    c38c:	c5 53       	subi	r28, 0x35	; 53
    c38e:	df 4f       	sbci	r29, 0xFF	; 255
    c390:	f9 83       	std	Y+1, r31	; 0x01
    c392:	e8 83       	st	Y, r30
    c394:	cb 5c       	subi	r28, 0xCB	; 203
    c396:	d0 40       	sbci	r29, 0x00	; 0
    c398:	01 97       	sbiw	r24, 0x01	; 1
    c39a:	93 01       	movw	r18, r6
    c39c:	28 0f       	add	r18, r24
    c39e:	39 1f       	adc	r19, r25
    c3a0:	c3 53       	subi	r28, 0x33	; 51
    c3a2:	df 4f       	sbci	r29, 0xFF	; 255
    c3a4:	39 83       	std	Y+1, r19	; 0x01
    c3a6:	28 83       	st	Y, r18
    c3a8:	cd 5c       	subi	r28, 0xCD	; 205
    c3aa:	d0 40       	sbci	r29, 0x00	; 0
    c3ac:	0d 96       	adiw	r24, 0x0d	; 13
    c3ae:	a3 01       	movw	r20, r6
    c3b0:	48 0f       	add	r20, r24
    c3b2:	59 1f       	adc	r21, r25
    c3b4:	cf 52       	subi	r28, 0x2F	; 47
    c3b6:	df 4f       	sbci	r29, 0xFF	; 255
    c3b8:	59 83       	std	Y+1, r21	; 0x01
    c3ba:	48 83       	st	Y, r20
    c3bc:	c1 5d       	subi	r28, 0xD1	; 209
    c3be:	d0 40       	sbci	r29, 0x00	; 0
    c3c0:	0f 97       	sbiw	r24, 0x0f	; 15
    c3c2:	b3 01       	movw	r22, r6
    c3c4:	68 0f       	add	r22, r24
    c3c6:	79 1f       	adc	r23, r25
    c3c8:	cc 52       	subi	r28, 0x2C	; 44
    c3ca:	df 4f       	sbci	r29, 0xFF	; 255
    c3cc:	79 83       	std	Y+1, r23	; 0x01
    c3ce:	68 83       	st	Y, r22
    c3d0:	c4 5d       	subi	r28, 0xD4	; 212
    c3d2:	d0 40       	sbci	r29, 0x00	; 0
    c3d4:	02 97       	sbiw	r24, 0x02	; 2
    c3d6:	f3 01       	movw	r30, r6
    c3d8:	e8 0f       	add	r30, r24
    c3da:	f9 1f       	adc	r31, r25
    c3dc:	ca 52       	subi	r28, 0x2A	; 42
    c3de:	df 4f       	sbci	r29, 0xFF	; 255
    c3e0:	f9 83       	std	Y+1, r31	; 0x01
    c3e2:	e8 83       	st	Y, r30
    c3e4:	c6 5d       	subi	r28, 0xD6	; 214
    c3e6:	d0 40       	sbci	r29, 0x00	; 0
    c3e8:	01 97       	sbiw	r24, 0x01	; 1
    c3ea:	93 01       	movw	r18, r6
    c3ec:	28 0f       	add	r18, r24
    c3ee:	39 1f       	adc	r19, r25
    c3f0:	c8 52       	subi	r28, 0x28	; 40
    c3f2:	df 4f       	sbci	r29, 0xFF	; 255
    c3f4:	39 83       	std	Y+1, r19	; 0x01
    c3f6:	28 83       	st	Y, r18
    c3f8:	c8 5d       	subi	r28, 0xD8	; 216
    c3fa:	d0 40       	sbci	r29, 0x00	; 0
    c3fc:	01 97       	sbiw	r24, 0x01	; 1
    c3fe:	a3 01       	movw	r20, r6
    c400:	48 0f       	add	r20, r24
    c402:	59 1f       	adc	r21, r25
    c404:	c6 52       	subi	r28, 0x26	; 38
    c406:	df 4f       	sbci	r29, 0xFF	; 255
    c408:	59 83       	std	Y+1, r21	; 0x01
    c40a:	48 83       	st	Y, r20
    c40c:	ca 5d       	subi	r28, 0xDA	; 218
    c40e:	d0 40       	sbci	r29, 0x00	; 0
    c410:	02 97       	sbiw	r24, 0x02	; 2
    c412:	b3 01       	movw	r22, r6
    c414:	68 0f       	add	r22, r24
    c416:	79 1f       	adc	r23, r25
    c418:	c4 52       	subi	r28, 0x24	; 36
    c41a:	df 4f       	sbci	r29, 0xFF	; 255
    c41c:	79 83       	std	Y+1, r23	; 0x01
    c41e:	68 83       	st	Y, r22
    c420:	cc 5d       	subi	r28, 0xDC	; 220
    c422:	d0 40       	sbci	r29, 0x00	; 0
    c424:	02 97       	sbiw	r24, 0x02	; 2
    c426:	f3 01       	movw	r30, r6
    c428:	e8 0f       	add	r30, r24
    c42a:	f9 1f       	adc	r31, r25
    c42c:	c2 52       	subi	r28, 0x22	; 34
    c42e:	df 4f       	sbci	r29, 0xFF	; 255
    c430:	f9 83       	std	Y+1, r31	; 0x01
    c432:	e8 83       	st	Y, r30
    c434:	ce 5d       	subi	r28, 0xDE	; 222
    c436:	d0 40       	sbci	r29, 0x00	; 0
    c438:	31 2c       	mov	r3, r1
    c43a:	91 2c       	mov	r9, r1
    c43c:	ce 54       	subi	r28, 0x4E	; 78
    c43e:	df 4f       	sbci	r29, 0xFF	; 255
    c440:	88 81       	ld	r24, Y
    c442:	c2 5b       	subi	r28, 0xB2	; 178
    c444:	d0 40       	sbci	r29, 0x00	; 0
    c446:	cd 54       	subi	r28, 0x4D	; 77
    c448:	df 4f       	sbci	r29, 0xFF	; 255
    c44a:	98 81       	ld	r25, Y
    c44c:	c3 5b       	subi	r28, 0xB3	; 179
    c44e:	d0 40       	sbci	r29, 0x00	; 0
    c450:	89 17       	cp	r24, r25
    c452:	08 f0       	brcs	.+2      	; 0xc456 <draw_menu(bool)+0x1b7c>
    c454:	78 c1       	rjmp	.+752    	; 0xc746 <draw_menu(bool)+0x1e6c>
    c456:	c0 54       	subi	r28, 0x40	; 64
    c458:	df 4f       	sbci	r29, 0xFF	; 255
    c45a:	e8 81       	ld	r30, Y
    c45c:	f9 81       	ldd	r31, Y+1	; 0x01
    c45e:	c0 5c       	subi	r28, 0xC0	; 192
    c460:	d0 40       	sbci	r29, 0x00	; 0
    c462:	94 91       	lpm	r25, Z
    c464:	91 11       	cpse	r25, r1
    c466:	39 c0       	rjmp	.+114    	; 0xc4da <draw_menu(bool)+0x1c00>
    c468:	ca 53       	subi	r28, 0x3A	; 58
    c46a:	df 4f       	sbci	r29, 0xFF	; 255
    c46c:	e8 81       	ld	r30, Y
    c46e:	f9 81       	ldd	r31, Y+1	; 0x01
    c470:	c6 5c       	subi	r28, 0xC6	; 198
    c472:	d0 40       	sbci	r29, 0x00	; 0
    c474:	25 91       	lpm	r18, Z+
    c476:	34 91       	lpm	r19, Z
    c478:	ca 54       	subi	r28, 0x4A	; 74
    c47a:	df 4f       	sbci	r29, 0xFF	; 255
    c47c:	48 81       	ld	r20, Y
    c47e:	59 81       	ldd	r21, Y+1	; 0x01
    c480:	c6 5b       	subi	r28, 0xB6	; 182
    c482:	d0 40       	sbci	r29, 0x00	; 0
    c484:	42 0f       	add	r20, r18
    c486:	53 1f       	adc	r21, r19
    c488:	c4 54       	subi	r28, 0x44	; 68
    c48a:	df 4f       	sbci	r29, 0xFF	; 255
    c48c:	59 83       	std	Y+1, r21	; 0x01
    c48e:	48 83       	st	Y, r20
    c490:	cc 5b       	subi	r28, 0xBC	; 188
    c492:	d0 40       	sbci	r29, 0x00	; 0
    c494:	c8 53       	subi	r28, 0x38	; 56
    c496:	df 4f       	sbci	r29, 0xFF	; 255
    c498:	e8 81       	ld	r30, Y
    c49a:	f9 81       	ldd	r31, Y+1	; 0x01
    c49c:	c8 5c       	subi	r28, 0xC8	; 200
    c49e:	d0 40       	sbci	r29, 0x00	; 0
    c4a0:	25 91       	lpm	r18, Z+
    c4a2:	34 91       	lpm	r19, Z
    c4a4:	c5 53       	subi	r28, 0x35	; 53
    c4a6:	df 4f       	sbci	r29, 0xFF	; 255
    c4a8:	e8 81       	ld	r30, Y
    c4aa:	f9 81       	ldd	r31, Y+1	; 0x01
    c4ac:	cb 5c       	subi	r28, 0xCB	; 203
    c4ae:	d0 40       	sbci	r29, 0x00	; 0
    c4b0:	94 91       	lpm	r25, Z
    c4b2:	c8 54       	subi	r28, 0x48	; 72
    c4b4:	df 4f       	sbci	r29, 0xFF	; 255
    c4b6:	48 81       	ld	r20, Y
    c4b8:	59 81       	ldd	r21, Y+1	; 0x01
    c4ba:	c8 5b       	subi	r28, 0xB8	; 184
    c4bc:	d0 40       	sbci	r29, 0x00	; 0
    c4be:	24 0f       	add	r18, r20
    c4c0:	35 1f       	adc	r19, r21
    c4c2:	b9 01       	movw	r22, r18
    c4c4:	99 9d       	mul	r25, r9
    c4c6:	60 0d       	add	r22, r0
    c4c8:	71 1d       	adc	r23, r1
    c4ca:	11 24       	eor	r1, r1
    c4cc:	c2 54       	subi	r28, 0x42	; 66
    c4ce:	df 4f       	sbci	r29, 0xFF	; 255
    c4d0:	79 83       	std	Y+1, r23	; 0x01
    c4d2:	68 83       	st	Y, r22
    c4d4:	ce 5b       	subi	r28, 0xBE	; 190
    c4d6:	d0 40       	sbci	r29, 0x00	; 0
    c4d8:	93 94       	inc	r9
    c4da:	c0 54       	subi	r28, 0x40	; 64
    c4dc:	df 4f       	sbci	r29, 0xFF	; 255
    c4de:	e8 81       	ld	r30, Y
    c4e0:	f9 81       	ldd	r31, Y+1	; 0x01
    c4e2:	c0 5c       	subi	r28, 0xC0	; 192
    c4e4:	d0 40       	sbci	r29, 0x00	; 0
    c4e6:	94 91       	lpm	r25, Z
    c4e8:	91 30       	cpi	r25, 0x01	; 1
    c4ea:	09 f0       	breq	.+2      	; 0xc4ee <draw_menu(bool)+0x1c14>
    c4ec:	39 c0       	rjmp	.+114    	; 0xc560 <draw_menu(bool)+0x1c86>
    c4ee:	c8 53       	subi	r28, 0x38	; 56
    c4f0:	df 4f       	sbci	r29, 0xFF	; 255
    c4f2:	e8 81       	ld	r30, Y
    c4f4:	f9 81       	ldd	r31, Y+1	; 0x01
    c4f6:	c8 5c       	subi	r28, 0xC8	; 200
    c4f8:	d0 40       	sbci	r29, 0x00	; 0
    c4fa:	25 91       	lpm	r18, Z+
    c4fc:	34 91       	lpm	r19, Z
    c4fe:	c8 54       	subi	r28, 0x48	; 72
    c500:	df 4f       	sbci	r29, 0xFF	; 255
    c502:	48 81       	ld	r20, Y
    c504:	59 81       	ldd	r21, Y+1	; 0x01
    c506:	c8 5b       	subi	r28, 0xB8	; 184
    c508:	d0 40       	sbci	r29, 0x00	; 0
    c50a:	42 0f       	add	r20, r18
    c50c:	53 1f       	adc	r21, r19
    c50e:	c2 54       	subi	r28, 0x42	; 66
    c510:	df 4f       	sbci	r29, 0xFF	; 255
    c512:	59 83       	std	Y+1, r21	; 0x01
    c514:	48 83       	st	Y, r20
    c516:	ce 5b       	subi	r28, 0xBE	; 190
    c518:	d0 40       	sbci	r29, 0x00	; 0
    c51a:	ca 53       	subi	r28, 0x3A	; 58
    c51c:	df 4f       	sbci	r29, 0xFF	; 255
    c51e:	e8 81       	ld	r30, Y
    c520:	f9 81       	ldd	r31, Y+1	; 0x01
    c522:	c6 5c       	subi	r28, 0xC6	; 198
    c524:	d0 40       	sbci	r29, 0x00	; 0
    c526:	25 91       	lpm	r18, Z+
    c528:	34 91       	lpm	r19, Z
    c52a:	c3 53       	subi	r28, 0x33	; 51
    c52c:	df 4f       	sbci	r29, 0xFF	; 255
    c52e:	e8 81       	ld	r30, Y
    c530:	f9 81       	ldd	r31, Y+1	; 0x01
    c532:	cd 5c       	subi	r28, 0xCD	; 205
    c534:	d0 40       	sbci	r29, 0x00	; 0
    c536:	94 91       	lpm	r25, Z
    c538:	ca 54       	subi	r28, 0x4A	; 74
    c53a:	df 4f       	sbci	r29, 0xFF	; 255
    c53c:	48 81       	ld	r20, Y
    c53e:	59 81       	ldd	r21, Y+1	; 0x01
    c540:	c6 5b       	subi	r28, 0xB6	; 182
    c542:	d0 40       	sbci	r29, 0x00	; 0
    c544:	24 0f       	add	r18, r20
    c546:	35 1f       	adc	r19, r21
    c548:	b9 01       	movw	r22, r18
    c54a:	99 9d       	mul	r25, r9
    c54c:	60 0d       	add	r22, r0
    c54e:	71 1d       	adc	r23, r1
    c550:	11 24       	eor	r1, r1
    c552:	c4 54       	subi	r28, 0x44	; 68
    c554:	df 4f       	sbci	r29, 0xFF	; 255
    c556:	79 83       	std	Y+1, r23	; 0x01
    c558:	68 83       	st	Y, r22
    c55a:	cc 5b       	subi	r28, 0xBC	; 188
    c55c:	d0 40       	sbci	r29, 0x00	; 0
    c55e:	93 94       	inc	r9
    c560:	c0 54       	subi	r28, 0x40	; 64
    c562:	df 4f       	sbci	r29, 0xFF	; 255
    c564:	e8 81       	ld	r30, Y
    c566:	f9 81       	ldd	r31, Y+1	; 0x01
    c568:	c0 5c       	subi	r28, 0xC0	; 192
    c56a:	d0 40       	sbci	r29, 0x00	; 0
    c56c:	94 91       	lpm	r25, Z
    c56e:	92 30       	cpi	r25, 0x02	; 2
    c570:	09 f0       	breq	.+2      	; 0xc574 <draw_menu(bool)+0x1c9a>
    c572:	50 c0       	rjmp	.+160    	; 0xc614 <draw_menu(bool)+0x1d3a>
    c574:	ca 53       	subi	r28, 0x3A	; 58
    c576:	df 4f       	sbci	r29, 0xFF	; 255
    c578:	e8 81       	ld	r30, Y
    c57a:	f9 81       	ldd	r31, Y+1	; 0x01
    c57c:	c6 5c       	subi	r28, 0xC6	; 198
    c57e:	d0 40       	sbci	r29, 0x00	; 0
    c580:	25 91       	lpm	r18, Z+
    c582:	34 91       	lpm	r19, Z
    c584:	c3 53       	subi	r28, 0x33	; 51
    c586:	df 4f       	sbci	r29, 0xFF	; 255
    c588:	e8 81       	ld	r30, Y
    c58a:	f9 81       	ldd	r31, Y+1	; 0x01
    c58c:	cd 5c       	subi	r28, 0xCD	; 205
    c58e:	d0 40       	sbci	r29, 0x00	; 0
    c590:	94 91       	lpm	r25, Z
    c592:	ca 54       	subi	r28, 0x4A	; 74
    c594:	df 4f       	sbci	r29, 0xFF	; 255
    c596:	48 81       	ld	r20, Y
    c598:	59 81       	ldd	r21, Y+1	; 0x01
    c59a:	c6 5b       	subi	r28, 0xB6	; 182
    c59c:	d0 40       	sbci	r29, 0x00	; 0
    c59e:	24 0f       	add	r18, r20
    c5a0:	35 1f       	adc	r19, r21
    c5a2:	b9 01       	movw	r22, r18
    c5a4:	99 9d       	mul	r25, r9
    c5a6:	60 0d       	add	r22, r0
    c5a8:	71 1d       	adc	r23, r1
    c5aa:	11 24       	eor	r1, r1
    c5ac:	c4 54       	subi	r28, 0x44	; 68
    c5ae:	df 4f       	sbci	r29, 0xFF	; 255
    c5b0:	79 83       	std	Y+1, r23	; 0x01
    c5b2:	68 83       	st	Y, r22
    c5b4:	cc 5b       	subi	r28, 0xBC	; 188
    c5b6:	d0 40       	sbci	r29, 0x00	; 0
    c5b8:	c8 53       	subi	r28, 0x38	; 56
    c5ba:	df 4f       	sbci	r29, 0xFF	; 255
    c5bc:	e8 81       	ld	r30, Y
    c5be:	f9 81       	ldd	r31, Y+1	; 0x01
    c5c0:	c8 5c       	subi	r28, 0xC8	; 200
    c5c2:	d0 40       	sbci	r29, 0x00	; 0
    c5c4:	25 91       	lpm	r18, Z+
    c5c6:	34 91       	lpm	r19, Z
    c5c8:	c5 53       	subi	r28, 0x35	; 53
    c5ca:	df 4f       	sbci	r29, 0xFF	; 255
    c5cc:	e8 81       	ld	r30, Y
    c5ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c5d0:	cb 5c       	subi	r28, 0xCB	; 203
    c5d2:	d0 40       	sbci	r29, 0x00	; 0
    c5d4:	94 91       	lpm	r25, Z
    c5d6:	c8 54       	subi	r28, 0x48	; 72
    c5d8:	df 4f       	sbci	r29, 0xFF	; 255
    c5da:	48 81       	ld	r20, Y
    c5dc:	59 81       	ldd	r21, Y+1	; 0x01
    c5de:	c8 5b       	subi	r28, 0xB8	; 184
    c5e0:	d0 40       	sbci	r29, 0x00	; 0
    c5e2:	24 0f       	add	r18, r20
    c5e4:	35 1f       	adc	r19, r21
    c5e6:	b9 01       	movw	r22, r18
    c5e8:	93 9d       	mul	r25, r3
    c5ea:	60 0d       	add	r22, r0
    c5ec:	71 1d       	adc	r23, r1
    c5ee:	11 24       	eor	r1, r1
    c5f0:	c2 54       	subi	r28, 0x42	; 66
    c5f2:	df 4f       	sbci	r29, 0xFF	; 255
    c5f4:	79 83       	std	Y+1, r23	; 0x01
    c5f6:	68 83       	st	Y, r22
    c5f8:	ce 5b       	subi	r28, 0xBE	; 190
    c5fa:	d0 40       	sbci	r29, 0x00	; 0
    c5fc:	93 94       	inc	r9
    c5fe:	c1 53       	subi	r28, 0x31	; 49
    c600:	df 4f       	sbci	r29, 0xFF	; 255
    c602:	e8 81       	ld	r30, Y
    c604:	f9 81       	ldd	r31, Y+1	; 0x01
    c606:	cf 5c       	subi	r28, 0xCF	; 207
    c608:	d0 40       	sbci	r29, 0x00	; 0
    c60a:	94 91       	lpm	r25, Z
    c60c:	99 16       	cp	r9, r25
    c60e:	10 f0       	brcs	.+4      	; 0xc614 <draw_menu(bool)+0x1d3a>
    c610:	33 94       	inc	r3
    c612:	91 2c       	mov	r9, r1
    c614:	c6 54       	subi	r28, 0x46	; 70
    c616:	df 4f       	sbci	r29, 0xFF	; 255
    c618:	e8 81       	ld	r30, Y
    c61a:	f9 81       	ldd	r31, Y+1	; 0x01
    c61c:	ca 5b       	subi	r28, 0xBA	; 186
    c61e:	d0 40       	sbci	r29, 0x00	; 0
    c620:	44 91       	lpm	r20, Z
    c622:	8e 01       	movw	r16, r28
    c624:	0f 57       	subi	r16, 0x7F	; 127
    c626:	1f 4f       	sbci	r17, 0xFF	; 255
    c628:	9e 01       	movw	r18, r28
    c62a:	2f 5f       	subi	r18, 0xFF	; 255
    c62c:	3f 4f       	sbci	r19, 0xFF	; 255
    c62e:	cf 54       	subi	r28, 0x4F	; 79
    c630:	df 4f       	sbci	r29, 0xFF	; 255
    c632:	68 81       	ld	r22, Y
    c634:	c1 5b       	subi	r28, 0xB1	; 177
    c636:	d0 40       	sbci	r29, 0x00	; 0
    c638:	ce 51       	subi	r28, 0x1E	; 30
    c63a:	df 4f       	sbci	r29, 0xFF	; 255
    c63c:	e8 81       	ld	r30, Y
    c63e:	f9 81       	ldd	r31, Y+1	; 0x01
    c640:	c2 5e       	subi	r28, 0xE2	; 226
    c642:	d0 40       	sbci	r29, 0x00	; 0
    c644:	19 95       	eicall
    c646:	cf 52       	subi	r28, 0x2F	; 47
    c648:	df 4f       	sbci	r29, 0xFF	; 255
    c64a:	e8 81       	ld	r30, Y
    c64c:	f9 81       	ldd	r31, Y+1	; 0x01
    c64e:	c1 5d       	subi	r28, 0xD1	; 209
    c650:	d0 40       	sbci	r29, 0x00	; 0
    c652:	25 91       	lpm	r18, Z+
    c654:	34 91       	lpm	r19, Z
    c656:	c6 54       	subi	r28, 0x46	; 70
    c658:	df 4f       	sbci	r29, 0xFF	; 255
    c65a:	e8 81       	ld	r30, Y
    c65c:	f9 81       	ldd	r31, Y+1	; 0x01
    c65e:	ca 5b       	subi	r28, 0xBA	; 186
    c660:	d0 40       	sbci	r29, 0x00	; 0
    c662:	84 91       	lpm	r24, Z
    c664:	cf 54       	subi	r28, 0x4F	; 79
    c666:	df 4f       	sbci	r29, 0xFF	; 255
    c668:	68 81       	ld	r22, Y
    c66a:	c1 5b       	subi	r28, 0xB1	; 177
    c66c:	d0 40       	sbci	r29, 0x00	; 0
    c66e:	70 e0       	ldi	r23, 0x00	; 0
    c670:	ce 54       	subi	r28, 0x4E	; 78
    c672:	df 4f       	sbci	r29, 0xFF	; 255
    c674:	48 81       	ld	r20, Y
    c676:	c2 5b       	subi	r28, 0xB2	; 178
    c678:	d0 40       	sbci	r29, 0x00	; 0
    c67a:	90 e0       	ldi	r25, 0x00	; 0
    c67c:	f9 01       	movw	r30, r18
    c67e:	19 95       	eicall
    c680:	cc 52       	subi	r28, 0x2C	; 44
    c682:	df 4f       	sbci	r29, 0xFF	; 255
    c684:	e8 81       	ld	r30, Y
    c686:	f9 81       	ldd	r31, Y+1	; 0x01
    c688:	c4 5d       	subi	r28, 0xD4	; 212
    c68a:	d0 40       	sbci	r29, 0x00	; 0
    c68c:	a5 90       	lpm	r10, Z+
    c68e:	b4 90       	lpm	r11, Z
    c690:	ca 52       	subi	r28, 0x2A	; 42
    c692:	df 4f       	sbci	r29, 0xFF	; 255
    c694:	e8 81       	ld	r30, Y
    c696:	f9 81       	ldd	r31, Y+1	; 0x01
    c698:	c6 5d       	subi	r28, 0xD6	; 214
    c69a:	d0 40       	sbci	r29, 0x00	; 0
    c69c:	c5 90       	lpm	r12, Z+
    c69e:	d4 90       	lpm	r13, Z
    c6a0:	c8 52       	subi	r28, 0x28	; 40
    c6a2:	df 4f       	sbci	r29, 0xFF	; 255
    c6a4:	e8 81       	ld	r30, Y
    c6a6:	f9 81       	ldd	r31, Y+1	; 0x01
    c6a8:	c8 5d       	subi	r28, 0xD8	; 216
    c6aa:	d0 40       	sbci	r29, 0x00	; 0
    c6ac:	e4 90       	lpm	r14, Z
    c6ae:	c6 52       	subi	r28, 0x26	; 38
    c6b0:	df 4f       	sbci	r29, 0xFF	; 255
    c6b2:	e8 81       	ld	r30, Y
    c6b4:	f9 81       	ldd	r31, Y+1	; 0x01
    c6b6:	ca 5d       	subi	r28, 0xDA	; 218
    c6b8:	d0 40       	sbci	r29, 0x00	; 0
    c6ba:	04 91       	lpm	r16, Z
    c6bc:	c4 52       	subi	r28, 0x24	; 36
    c6be:	df 4f       	sbci	r29, 0xFF	; 255
    c6c0:	e8 81       	ld	r30, Y
    c6c2:	f9 81       	ldd	r31, Y+1	; 0x01
    c6c4:	cc 5d       	subi	r28, 0xDC	; 220
    c6c6:	d0 40       	sbci	r29, 0x00	; 0
    c6c8:	25 91       	lpm	r18, Z+
    c6ca:	34 91       	lpm	r19, Z
    c6cc:	c2 52       	subi	r28, 0x22	; 34
    c6ce:	df 4f       	sbci	r29, 0xFF	; 255
    c6d0:	e8 81       	ld	r30, Y
    c6d2:	f9 81       	ldd	r31, Y+1	; 0x01
    c6d4:	ce 5d       	subi	r28, 0xDE	; 222
    c6d6:	d0 40       	sbci	r29, 0x00	; 0
    c6d8:	45 91       	lpm	r20, Z+
    c6da:	54 91       	lpm	r21, Z
    c6dc:	88 24       	eor	r8, r8
    c6de:	83 94       	inc	r8
    c6e0:	81 11       	cpse	r24, r1
    c6e2:	01 c0       	rjmp	.+2      	; 0xc6e6 <draw_menu(bool)+0x1e0c>
    c6e4:	81 2c       	mov	r8, r1
    c6e6:	cb 54       	subi	r28, 0x4B	; 75
    c6e8:	df 4f       	sbci	r29, 0xFF	; 255
    c6ea:	f8 81       	ld	r31, Y
    c6ec:	c5 5b       	subi	r28, 0xB5	; 181
    c6ee:	d0 40       	sbci	r29, 0x00	; 0
    c6f0:	ff 93       	push	r31
    c6f2:	cc 54       	subi	r28, 0x4C	; 76
    c6f4:	df 4f       	sbci	r29, 0xFF	; 255
    c6f6:	68 81       	ld	r22, Y
    c6f8:	c4 5b       	subi	r28, 0xB4	; 180
    c6fa:	d0 40       	sbci	r29, 0x00	; 0
    c6fc:	6f 93       	push	r22
    c6fe:	81 e0       	ldi	r24, 0x01	; 1
    c700:	90 e0       	ldi	r25, 0x00	; 0
    c702:	8c 0f       	add	r24, r28
    c704:	9d 1f       	adc	r25, r29
    c706:	9f 93       	push	r25
    c708:	8f 93       	push	r24
    c70a:	c2 54       	subi	r28, 0x42	; 66
    c70c:	df 4f       	sbci	r29, 0xFF	; 255
    c70e:	68 81       	ld	r22, Y
    c710:	79 81       	ldd	r23, Y+1	; 0x01
    c712:	ce 5b       	subi	r28, 0xBE	; 190
    c714:	d0 40       	sbci	r29, 0x00	; 0
    c716:	c4 54       	subi	r28, 0x44	; 68
    c718:	df 4f       	sbci	r29, 0xFF	; 255
    c71a:	88 81       	ld	r24, Y
    c71c:	99 81       	ldd	r25, Y+1	; 0x01
    c71e:	cc 5b       	subi	r28, 0xBC	; 188
    c720:	d0 40       	sbci	r29, 0x00	; 0
    c722:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    c726:	ce 54       	subi	r28, 0x4E	; 78
    c728:	df 4f       	sbci	r29, 0xFF	; 255
    c72a:	88 81       	ld	r24, Y
    c72c:	c2 5b       	subi	r28, 0xB2	; 178
    c72e:	d0 40       	sbci	r29, 0x00	; 0
    c730:	8f 5f       	subi	r24, 0xFF	; 255
    c732:	ce 54       	subi	r28, 0x4E	; 78
    c734:	df 4f       	sbci	r29, 0xFF	; 255
    c736:	88 83       	st	Y, r24
    c738:	c2 5b       	subi	r28, 0xB2	; 178
    c73a:	d0 40       	sbci	r29, 0x00	; 0
    c73c:	0f 90       	pop	r0
    c73e:	0f 90       	pop	r0
    c740:	0f 90       	pop	r0
    c742:	0f 90       	pop	r0
    c744:	7b ce       	rjmp	.-778    	; 0xc43c <draw_menu(bool)+0x1b62>
    c746:	ce 53       	subi	r28, 0x3E	; 62
    c748:	df 4f       	sbci	r29, 0xFF	; 255
    c74a:	e8 81       	ld	r30, Y
    c74c:	f9 81       	ldd	r31, Y+1	; 0x01
    c74e:	c2 5c       	subi	r28, 0xC2	; 194
    c750:	d0 40       	sbci	r29, 0x00	; 0
    c752:	ef 2b       	or	r30, r31
    c754:	09 f4       	brne	.+2      	; 0xc758 <draw_menu(bool)+0x1e7e>
    c756:	c5 c1       	rjmp	.+906    	; 0xcae2 <draw_menu(bool)+0x2208>
    c758:	cc 53       	subi	r28, 0x3C	; 60
    c75a:	df 4f       	sbci	r29, 0xFF	; 255
    c75c:	28 81       	ld	r18, Y
    c75e:	39 81       	ldd	r19, Y+1	; 0x01
    c760:	c4 5c       	subi	r28, 0xC4	; 196
    c762:	d0 40       	sbci	r29, 0x00	; 0
    c764:	23 2b       	or	r18, r19
    c766:	09 f4       	brne	.+2      	; 0xc76a <draw_menu(bool)+0x1e90>
    c768:	bc c1       	rjmp	.+888    	; 0xcae2 <draw_menu(bool)+0x2208>
    c76a:	ce 54       	subi	r28, 0x4E	; 78
    c76c:	df 4f       	sbci	r29, 0xFF	; 255
    c76e:	18 82       	st	Y, r1
    c770:	c2 5b       	subi	r28, 0xB2	; 178
    c772:	d0 40       	sbci	r29, 0x00	; 0
    c774:	f2 01       	movw	r30, r4
    c776:	e8 54       	subi	r30, 0x48	; 72
    c778:	fd 4f       	sbci	r31, 0xFD	; 253
    c77a:	e6 0d       	add	r30, r6
    c77c:	f7 1d       	adc	r31, r7
    c77e:	25 91       	lpm	r18, Z+
    c780:	34 91       	lpm	r19, Z
    c782:	c2 01       	movw	r24, r4
    c784:	8d 54       	subi	r24, 0x4D	; 77
    c786:	9d 4f       	sbci	r25, 0xFD	; 253
    c788:	a3 01       	movw	r20, r6
    c78a:	48 0f       	add	r20, r24
    c78c:	59 1f       	adc	r21, r25
    c78e:	c0 54       	subi	r28, 0x40	; 64
    c790:	df 4f       	sbci	r29, 0xFF	; 255
    c792:	59 83       	std	Y+1, r21	; 0x01
    c794:	48 83       	st	Y, r20
    c796:	c0 5c       	subi	r28, 0xC0	; 192
    c798:	d0 40       	sbci	r29, 0x00	; 0
    c79a:	fa 01       	movw	r30, r20
    c79c:	84 91       	lpm	r24, Z
    c79e:	cf 54       	subi	r28, 0x4F	; 79
    c7a0:	df 4f       	sbci	r29, 0xFF	; 255
    c7a2:	68 81       	ld	r22, Y
    c7a4:	c1 5b       	subi	r28, 0xB1	; 177
    c7a6:	d0 40       	sbci	r29, 0x00	; 0
    c7a8:	70 e0       	ldi	r23, 0x00	; 0
    c7aa:	40 e0       	ldi	r20, 0x00	; 0
    c7ac:	90 e0       	ldi	r25, 0x00	; 0
    c7ae:	f9 01       	movw	r30, r18
    c7b0:	19 95       	eicall
    c7b2:	cd 54       	subi	r28, 0x4D	; 77
    c7b4:	df 4f       	sbci	r29, 0xFF	; 255
    c7b6:	88 83       	st	Y, r24
    c7b8:	c3 5b       	subi	r28, 0xB3	; 179
    c7ba:	d0 40       	sbci	r29, 0x00	; 0
    c7bc:	f2 01       	movw	r30, r4
    c7be:	ee 54       	subi	r30, 0x4E	; 78
    c7c0:	fd 4f       	sbci	r31, 0xFD	; 253
    c7c2:	e6 0d       	add	r30, r6
    c7c4:	f7 1d       	adc	r31, r7
    c7c6:	44 91       	lpm	r20, Z
    c7c8:	c2 01       	movw	r24, r4
    c7ca:	80 55       	subi	r24, 0x50	; 80
    c7cc:	9d 4f       	sbci	r25, 0xFD	; 253
    c7ce:	93 01       	movw	r18, r6
    c7d0:	28 0f       	add	r18, r24
    c7d2:	39 1f       	adc	r19, r25
    c7d4:	c5 53       	subi	r28, 0x35	; 53
    c7d6:	df 4f       	sbci	r29, 0xFF	; 255
    c7d8:	39 83       	std	Y+1, r19	; 0x01
    c7da:	28 83       	st	Y, r18
    c7dc:	cb 5c       	subi	r28, 0xCB	; 203
    c7de:	d0 40       	sbci	r29, 0x00	; 0
    c7e0:	4f 3f       	cpi	r20, 0xFF	; 255
    c7e2:	99 f0       	breq	.+38     	; 0xc80a <draw_menu(bool)+0x1f30>
    c7e4:	f9 01       	movw	r30, r18
    c7e6:	24 91       	lpm	r18, Z
    c7e8:	f2 01       	movw	r30, r4
    c7ea:	ef 54       	subi	r30, 0x4F	; 79
    c7ec:	fd 4f       	sbci	r31, 0xFD	; 253
    c7ee:	e6 0d       	add	r30, r6
    c7f0:	f7 1d       	adc	r31, r7
    c7f2:	e4 91       	lpm	r30, Z
    c7f4:	2e 9f       	mul	r18, r30
    c7f6:	20 2d       	mov	r18, r0
    c7f8:	11 24       	eor	r1, r1
    c7fa:	be 01       	movw	r22, r28
    c7fc:	6d 54       	subi	r22, 0x4D	; 77
    c7fe:	7f 4f       	sbci	r23, 0xFF	; 255
    c800:	ce 01       	movw	r24, r28
    c802:	8e 54       	subi	r24, 0x4E	; 78
    c804:	9f 4f       	sbci	r25, 0xFF	; 255
    c806:	0e 94 9a 50 	call	0xa134	; 0xa134 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c80a:	ce 54       	subi	r28, 0x4E	; 78
    c80c:	df 4f       	sbci	r29, 0xFF	; 255
    c80e:	88 80       	ld	r8, Y
    c810:	c2 5b       	subi	r28, 0xB2	; 178
    c812:	d0 40       	sbci	r29, 0x00	; 0
    c814:	cd 54       	subi	r28, 0x4D	; 77
    c816:	df 4f       	sbci	r29, 0xFF	; 255
    c818:	f8 81       	ld	r31, Y
    c81a:	c3 5b       	subi	r28, 0xB3	; 179
    c81c:	d0 40       	sbci	r29, 0x00	; 0
    c81e:	c3 53       	subi	r28, 0x33	; 51
    c820:	df 4f       	sbci	r29, 0xFF	; 255
    c822:	f8 83       	st	Y, r31
    c824:	cd 5c       	subi	r28, 0xCD	; 205
    c826:	d0 40       	sbci	r29, 0x00	; 0
    c828:	c2 01       	movw	r24, r4
    c82a:	81 55       	subi	r24, 0x51	; 81
    c82c:	9d 4f       	sbci	r25, 0xFD	; 253
    c82e:	93 01       	movw	r18, r6
    c830:	28 0f       	add	r18, r24
    c832:	39 1f       	adc	r19, r25
    c834:	c6 54       	subi	r28, 0x46	; 70
    c836:	df 4f       	sbci	r29, 0xFF	; 255
    c838:	39 83       	std	Y+1, r19	; 0x01
    c83a:	28 83       	st	Y, r18
    c83c:	ca 5b       	subi	r28, 0xBA	; 186
    c83e:	d0 40       	sbci	r29, 0x00	; 0
    c840:	62 01       	movw	r12, r4
    c842:	31 e6       	ldi	r19, 0x61	; 97
    c844:	c3 1a       	sub	r12, r19
    c846:	3d ef       	ldi	r19, 0xFD	; 253
    c848:	d3 0a       	sbc	r13, r19
    c84a:	c6 0c       	add	r12, r6
    c84c:	d7 1c       	adc	r13, r7
    c84e:	52 01       	movw	r10, r4
    c850:	4f e5       	ldi	r20, 0x5F	; 95
    c852:	a4 1a       	sub	r10, r20
    c854:	4d ef       	ldi	r20, 0xFD	; 253
    c856:	b4 0a       	sbc	r11, r20
    c858:	a6 0c       	add	r10, r6
    c85a:	b7 1c       	adc	r11, r7
    c85c:	01 97       	sbiw	r24, 0x01	; 1
    c85e:	b3 01       	movw	r22, r6
    c860:	68 0f       	add	r22, r24
    c862:	79 1f       	adc	r23, r25
    c864:	ca 53       	subi	r28, 0x3A	; 58
    c866:	df 4f       	sbci	r29, 0xFF	; 255
    c868:	79 83       	std	Y+1, r23	; 0x01
    c86a:	68 83       	st	Y, r22
    c86c:	c6 5c       	subi	r28, 0xC6	; 198
    c86e:	d0 40       	sbci	r29, 0x00	; 0
    c870:	01 97       	sbiw	r24, 0x01	; 1
    c872:	f3 01       	movw	r30, r6
    c874:	e8 0f       	add	r30, r24
    c876:	f9 1f       	adc	r31, r25
    c878:	c8 53       	subi	r28, 0x38	; 56
    c87a:	df 4f       	sbci	r29, 0xFF	; 255
    c87c:	f9 83       	std	Y+1, r31	; 0x01
    c87e:	e8 83       	st	Y, r30
    c880:	c8 5c       	subi	r28, 0xC8	; 200
    c882:	d0 40       	sbci	r29, 0x00	; 0
    c884:	08 97       	sbiw	r24, 0x08	; 8
    c886:	93 01       	movw	r18, r6
    c888:	28 0f       	add	r18, r24
    c88a:	39 1f       	adc	r19, r25
    c88c:	c1 53       	subi	r28, 0x31	; 49
    c88e:	df 4f       	sbci	r29, 0xFF	; 255
    c890:	39 83       	std	Y+1, r19	; 0x01
    c892:	28 83       	st	Y, r18
    c894:	cf 5c       	subi	r28, 0xCF	; 207
    c896:	d0 40       	sbci	r29, 0x00	; 0
    c898:	02 97       	sbiw	r24, 0x02	; 2
    c89a:	a3 01       	movw	r20, r6
    c89c:	48 0f       	add	r20, r24
    c89e:	59 1f       	adc	r21, r25
    c8a0:	cf 52       	subi	r28, 0x2F	; 47
    c8a2:	df 4f       	sbci	r29, 0xFF	; 255
    c8a4:	59 83       	std	Y+1, r21	; 0x01
    c8a6:	48 83       	st	Y, r20
    c8a8:	c1 5d       	subi	r28, 0xD1	; 209
    c8aa:	d0 40       	sbci	r29, 0x00	; 0
    c8ac:	31 2c       	mov	r3, r1
    c8ae:	91 2c       	mov	r9, r1
    c8b0:	c3 53       	subi	r28, 0x33	; 51
    c8b2:	df 4f       	sbci	r29, 0xFF	; 255
    c8b4:	58 81       	ld	r21, Y
    c8b6:	cd 5c       	subi	r28, 0xCD	; 205
    c8b8:	d0 40       	sbci	r29, 0x00	; 0
    c8ba:	85 16       	cp	r8, r21
    c8bc:	08 f0       	brcs	.+2      	; 0xc8c0 <draw_menu(bool)+0x1fe6>
    c8be:	11 c1       	rjmp	.+546    	; 0xcae2 <draw_menu(bool)+0x2208>
    c8c0:	c6 54       	subi	r28, 0x46	; 70
    c8c2:	df 4f       	sbci	r29, 0xFF	; 255
    c8c4:	e8 81       	ld	r30, Y
    c8c6:	f9 81       	ldd	r31, Y+1	; 0x01
    c8c8:	ca 5b       	subi	r28, 0xBA	; 186
    c8ca:	d0 40       	sbci	r29, 0x00	; 0
    c8cc:	84 91       	lpm	r24, Z
    c8ce:	81 11       	cpse	r24, r1
    c8d0:	2f c0       	rjmp	.+94     	; 0xc930 <draw_menu(bool)+0x2056>
    c8d2:	f6 01       	movw	r30, r12
    c8d4:	85 91       	lpm	r24, Z+
    c8d6:	94 91       	lpm	r25, Z
    c8d8:	ca 54       	subi	r28, 0x4A	; 74
    c8da:	df 4f       	sbci	r29, 0xFF	; 255
    c8dc:	28 81       	ld	r18, Y
    c8de:	39 81       	ldd	r19, Y+1	; 0x01
    c8e0:	c6 5b       	subi	r28, 0xB6	; 182
    c8e2:	d0 40       	sbci	r29, 0x00	; 0
    c8e4:	28 0f       	add	r18, r24
    c8e6:	39 1f       	adc	r19, r25
    c8e8:	c4 54       	subi	r28, 0x44	; 68
    c8ea:	df 4f       	sbci	r29, 0xFF	; 255
    c8ec:	39 83       	std	Y+1, r19	; 0x01
    c8ee:	28 83       	st	Y, r18
    c8f0:	cc 5b       	subi	r28, 0xBC	; 188
    c8f2:	d0 40       	sbci	r29, 0x00	; 0
    c8f4:	f5 01       	movw	r30, r10
    c8f6:	85 91       	lpm	r24, Z+
    c8f8:	94 91       	lpm	r25, Z
    c8fa:	ca 53       	subi	r28, 0x3A	; 58
    c8fc:	df 4f       	sbci	r29, 0xFF	; 255
    c8fe:	e8 81       	ld	r30, Y
    c900:	f9 81       	ldd	r31, Y+1	; 0x01
    c902:	c6 5c       	subi	r28, 0xC6	; 198
    c904:	d0 40       	sbci	r29, 0x00	; 0
    c906:	24 91       	lpm	r18, Z
    c908:	c8 54       	subi	r28, 0x48	; 72
    c90a:	df 4f       	sbci	r29, 0xFF	; 255
    c90c:	48 81       	ld	r20, Y
    c90e:	59 81       	ldd	r21, Y+1	; 0x01
    c910:	c8 5b       	subi	r28, 0xB8	; 184
    c912:	d0 40       	sbci	r29, 0x00	; 0
    c914:	84 0f       	add	r24, r20
    c916:	95 1f       	adc	r25, r21
    c918:	bc 01       	movw	r22, r24
    c91a:	29 9d       	mul	r18, r9
    c91c:	60 0d       	add	r22, r0
    c91e:	71 1d       	adc	r23, r1
    c920:	11 24       	eor	r1, r1
    c922:	c2 54       	subi	r28, 0x42	; 66
    c924:	df 4f       	sbci	r29, 0xFF	; 255
    c926:	79 83       	std	Y+1, r23	; 0x01
    c928:	68 83       	st	Y, r22
    c92a:	ce 5b       	subi	r28, 0xBE	; 190
    c92c:	d0 40       	sbci	r29, 0x00	; 0
    c92e:	93 94       	inc	r9
    c930:	c6 54       	subi	r28, 0x46	; 70
    c932:	df 4f       	sbci	r29, 0xFF	; 255
    c934:	e8 81       	ld	r30, Y
    c936:	f9 81       	ldd	r31, Y+1	; 0x01
    c938:	ca 5b       	subi	r28, 0xBA	; 186
    c93a:	d0 40       	sbci	r29, 0x00	; 0
    c93c:	84 91       	lpm	r24, Z
    c93e:	81 30       	cpi	r24, 0x01	; 1
    c940:	79 f5       	brne	.+94     	; 0xc9a0 <draw_menu(bool)+0x20c6>
    c942:	f5 01       	movw	r30, r10
    c944:	85 91       	lpm	r24, Z+
    c946:	94 91       	lpm	r25, Z
    c948:	c8 54       	subi	r28, 0x48	; 72
    c94a:	df 4f       	sbci	r29, 0xFF	; 255
    c94c:	28 81       	ld	r18, Y
    c94e:	39 81       	ldd	r19, Y+1	; 0x01
    c950:	c8 5b       	subi	r28, 0xB8	; 184
    c952:	d0 40       	sbci	r29, 0x00	; 0
    c954:	28 0f       	add	r18, r24
    c956:	39 1f       	adc	r19, r25
    c958:	c2 54       	subi	r28, 0x42	; 66
    c95a:	df 4f       	sbci	r29, 0xFF	; 255
    c95c:	39 83       	std	Y+1, r19	; 0x01
    c95e:	28 83       	st	Y, r18
    c960:	ce 5b       	subi	r28, 0xBE	; 190
    c962:	d0 40       	sbci	r29, 0x00	; 0
    c964:	f6 01       	movw	r30, r12
    c966:	85 91       	lpm	r24, Z+
    c968:	94 91       	lpm	r25, Z
    c96a:	c8 53       	subi	r28, 0x38	; 56
    c96c:	df 4f       	sbci	r29, 0xFF	; 255
    c96e:	e8 81       	ld	r30, Y
    c970:	f9 81       	ldd	r31, Y+1	; 0x01
    c972:	c8 5c       	subi	r28, 0xC8	; 200
    c974:	d0 40       	sbci	r29, 0x00	; 0
    c976:	24 91       	lpm	r18, Z
    c978:	ca 54       	subi	r28, 0x4A	; 74
    c97a:	df 4f       	sbci	r29, 0xFF	; 255
    c97c:	48 81       	ld	r20, Y
    c97e:	59 81       	ldd	r21, Y+1	; 0x01
    c980:	c6 5b       	subi	r28, 0xB6	; 182
    c982:	d0 40       	sbci	r29, 0x00	; 0
    c984:	84 0f       	add	r24, r20
    c986:	95 1f       	adc	r25, r21
    c988:	bc 01       	movw	r22, r24
    c98a:	29 9d       	mul	r18, r9
    c98c:	60 0d       	add	r22, r0
    c98e:	71 1d       	adc	r23, r1
    c990:	11 24       	eor	r1, r1
    c992:	c4 54       	subi	r28, 0x44	; 68
    c994:	df 4f       	sbci	r29, 0xFF	; 255
    c996:	79 83       	std	Y+1, r23	; 0x01
    c998:	68 83       	st	Y, r22
    c99a:	cc 5b       	subi	r28, 0xBC	; 188
    c99c:	d0 40       	sbci	r29, 0x00	; 0
    c99e:	93 94       	inc	r9
    c9a0:	c6 54       	subi	r28, 0x46	; 70
    c9a2:	df 4f       	sbci	r29, 0xFF	; 255
    c9a4:	e8 81       	ld	r30, Y
    c9a6:	f9 81       	ldd	r31, Y+1	; 0x01
    c9a8:	ca 5b       	subi	r28, 0xBA	; 186
    c9aa:	d0 40       	sbci	r29, 0x00	; 0
    c9ac:	84 91       	lpm	r24, Z
    c9ae:	82 30       	cpi	r24, 0x02	; 2
    c9b0:	09 f0       	breq	.+2      	; 0xc9b4 <draw_menu(bool)+0x20da>
    c9b2:	46 c0       	rjmp	.+140    	; 0xca40 <draw_menu(bool)+0x2166>
    c9b4:	f6 01       	movw	r30, r12
    c9b6:	85 91       	lpm	r24, Z+
    c9b8:	94 91       	lpm	r25, Z
    c9ba:	c8 53       	subi	r28, 0x38	; 56
    c9bc:	df 4f       	sbci	r29, 0xFF	; 255
    c9be:	e8 81       	ld	r30, Y
    c9c0:	f9 81       	ldd	r31, Y+1	; 0x01
    c9c2:	c8 5c       	subi	r28, 0xC8	; 200
    c9c4:	d0 40       	sbci	r29, 0x00	; 0
    c9c6:	24 91       	lpm	r18, Z
    c9c8:	ca 54       	subi	r28, 0x4A	; 74
    c9ca:	df 4f       	sbci	r29, 0xFF	; 255
    c9cc:	48 81       	ld	r20, Y
    c9ce:	59 81       	ldd	r21, Y+1	; 0x01
    c9d0:	c6 5b       	subi	r28, 0xB6	; 182
    c9d2:	d0 40       	sbci	r29, 0x00	; 0
    c9d4:	84 0f       	add	r24, r20
    c9d6:	95 1f       	adc	r25, r21
    c9d8:	bc 01       	movw	r22, r24
    c9da:	29 9d       	mul	r18, r9
    c9dc:	60 0d       	add	r22, r0
    c9de:	71 1d       	adc	r23, r1
    c9e0:	11 24       	eor	r1, r1
    c9e2:	c4 54       	subi	r28, 0x44	; 68
    c9e4:	df 4f       	sbci	r29, 0xFF	; 255
    c9e6:	79 83       	std	Y+1, r23	; 0x01
    c9e8:	68 83       	st	Y, r22
    c9ea:	cc 5b       	subi	r28, 0xBC	; 188
    c9ec:	d0 40       	sbci	r29, 0x00	; 0
    c9ee:	f5 01       	movw	r30, r10
    c9f0:	85 91       	lpm	r24, Z+
    c9f2:	94 91       	lpm	r25, Z
    c9f4:	ca 53       	subi	r28, 0x3A	; 58
    c9f6:	df 4f       	sbci	r29, 0xFF	; 255
    c9f8:	e8 81       	ld	r30, Y
    c9fa:	f9 81       	ldd	r31, Y+1	; 0x01
    c9fc:	c6 5c       	subi	r28, 0xC6	; 198
    c9fe:	d0 40       	sbci	r29, 0x00	; 0
    ca00:	24 91       	lpm	r18, Z
    ca02:	c8 54       	subi	r28, 0x48	; 72
    ca04:	df 4f       	sbci	r29, 0xFF	; 255
    ca06:	48 81       	ld	r20, Y
    ca08:	59 81       	ldd	r21, Y+1	; 0x01
    ca0a:	c8 5b       	subi	r28, 0xB8	; 184
    ca0c:	d0 40       	sbci	r29, 0x00	; 0
    ca0e:	84 0f       	add	r24, r20
    ca10:	95 1f       	adc	r25, r21
    ca12:	bc 01       	movw	r22, r24
    ca14:	23 9d       	mul	r18, r3
    ca16:	60 0d       	add	r22, r0
    ca18:	71 1d       	adc	r23, r1
    ca1a:	11 24       	eor	r1, r1
    ca1c:	c2 54       	subi	r28, 0x42	; 66
    ca1e:	df 4f       	sbci	r29, 0xFF	; 255
    ca20:	79 83       	std	Y+1, r23	; 0x01
    ca22:	68 83       	st	Y, r22
    ca24:	ce 5b       	subi	r28, 0xBE	; 190
    ca26:	d0 40       	sbci	r29, 0x00	; 0
    ca28:	93 94       	inc	r9
    ca2a:	c5 53       	subi	r28, 0x35	; 53
    ca2c:	df 4f       	sbci	r29, 0xFF	; 255
    ca2e:	e8 81       	ld	r30, Y
    ca30:	f9 81       	ldd	r31, Y+1	; 0x01
    ca32:	cb 5c       	subi	r28, 0xCB	; 203
    ca34:	d0 40       	sbci	r29, 0x00	; 0
    ca36:	84 91       	lpm	r24, Z
    ca38:	98 16       	cp	r9, r24
    ca3a:	10 f0       	brcs	.+4      	; 0xca40 <draw_menu(bool)+0x2166>
    ca3c:	33 94       	inc	r3
    ca3e:	91 2c       	mov	r9, r1
    ca40:	c1 53       	subi	r28, 0x31	; 49
    ca42:	df 4f       	sbci	r29, 0xFF	; 255
    ca44:	e8 81       	ld	r30, Y
    ca46:	f9 81       	ldd	r31, Y+1	; 0x01
    ca48:	cf 5c       	subi	r28, 0xCF	; 207
    ca4a:	d0 40       	sbci	r29, 0x00	; 0
    ca4c:	25 91       	lpm	r18, Z+
    ca4e:	34 91       	lpm	r19, Z
    ca50:	cf 52       	subi	r28, 0x2F	; 47
    ca52:	df 4f       	sbci	r29, 0xFF	; 255
    ca54:	e8 81       	ld	r30, Y
    ca56:	f9 81       	ldd	r31, Y+1	; 0x01
    ca58:	c1 5d       	subi	r28, 0xD1	; 209
    ca5a:	d0 40       	sbci	r29, 0x00	; 0
    ca5c:	45 91       	lpm	r20, Z+
    ca5e:	54 91       	lpm	r21, Z
    ca60:	cc 53       	subi	r28, 0x3C	; 60
    ca62:	df 4f       	sbci	r29, 0xFF	; 255
    ca64:	e8 80       	ld	r14, Y
    ca66:	f9 80       	ldd	r15, Y+1	; 0x01
    ca68:	c4 5c       	subi	r28, 0xC4	; 196
    ca6a:	d0 40       	sbci	r29, 0x00	; 0
    ca6c:	ce 53       	subi	r28, 0x3E	; 62
    ca6e:	df 4f       	sbci	r29, 0xFF	; 255
    ca70:	08 81       	ld	r16, Y
    ca72:	19 81       	ldd	r17, Y+1	; 0x01
    ca74:	c2 5c       	subi	r28, 0xC2	; 194
    ca76:	d0 40       	sbci	r29, 0x00	; 0
    ca78:	c2 54       	subi	r28, 0x42	; 66
    ca7a:	df 4f       	sbci	r29, 0xFF	; 255
    ca7c:	68 81       	ld	r22, Y
    ca7e:	79 81       	ldd	r23, Y+1	; 0x01
    ca80:	ce 5b       	subi	r28, 0xBE	; 190
    ca82:	d0 40       	sbci	r29, 0x00	; 0
    ca84:	c4 54       	subi	r28, 0x44	; 68
    ca86:	df 4f       	sbci	r29, 0xFF	; 255
    ca88:	88 81       	ld	r24, Y
    ca8a:	99 81       	ldd	r25, Y+1	; 0x01
    ca8c:	cc 5b       	subi	r28, 0xBC	; 188
    ca8e:	d0 40       	sbci	r29, 0x00	; 0
    ca90:	0e 94 52 54 	call	0xa8a4	; 0xa8a4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    ca94:	18 2f       	mov	r17, r24
    ca96:	81 e0       	ldi	r24, 0x01	; 1
    ca98:	88 0d       	add	r24, r8
    ca9a:	11 23       	and	r17, r17
    ca9c:	21 f1       	breq	.+72     	; 0xcae6 <draw_menu(bool)+0x220c>
    ca9e:	ce 54       	subi	r28, 0x4E	; 78
    caa0:	df 4f       	sbci	r29, 0xFF	; 255
    caa2:	88 82       	st	Y, r8
    caa4:	c2 5b       	subi	r28, 0xB2	; 178
    caa6:	d0 40       	sbci	r29, 0x00	; 0
    caa8:	f2 01       	movw	r30, r4
    caaa:	ea 54       	subi	r30, 0x4A	; 74
    caac:	fd 4f       	sbci	r31, 0xFD	; 253
    caae:	e6 0d       	add	r30, r6
    cab0:	f7 1d       	adc	r31, r7
    cab2:	25 91       	lpm	r18, Z+
    cab4:	34 91       	lpm	r19, Z
    cab6:	c0 54       	subi	r28, 0x40	; 64
    cab8:	df 4f       	sbci	r29, 0xFF	; 255
    caba:	e8 81       	ld	r30, Y
    cabc:	f9 81       	ldd	r31, Y+1	; 0x01
    cabe:	c0 5c       	subi	r28, 0xC0	; 192
    cac0:	d0 40       	sbci	r29, 0x00	; 0
    cac2:	84 91       	lpm	r24, Z
    cac4:	cf 54       	subi	r28, 0x4F	; 79
    cac6:	df 4f       	sbci	r29, 0xFF	; 255
    cac8:	68 81       	ld	r22, Y
    caca:	c1 5b       	subi	r28, 0xB1	; 177
    cacc:	d0 40       	sbci	r29, 0x00	; 0
    cace:	70 e0       	ldi	r23, 0x00	; 0
    cad0:	48 2d       	mov	r20, r8
    cad2:	90 e0       	ldi	r25, 0x00	; 0
    cad4:	f9 01       	movw	r30, r18
    cad6:	19 95       	eicall
    cad8:	c6 53       	subi	r28, 0x36	; 54
    cada:	df 4f       	sbci	r29, 0xFF	; 255
    cadc:	18 83       	st	Y, r17
    cade:	ca 5c       	subi	r28, 0xCA	; 202
    cae0:	d0 40       	sbci	r29, 0x00	; 0
    cae2:	23 94       	inc	r2
    cae4:	b4 cb       	rjmp	.-2200   	; 0xc24e <draw_menu(bool)+0x1974>
    cae6:	88 2e       	mov	r8, r24
    cae8:	e3 ce       	rjmp	.-570    	; 0xc8b0 <draw_menu(bool)+0x1fd6>
    caea:	f1 e0       	ldi	r31, 0x01	; 1
    caec:	c6 53       	subi	r28, 0x36	; 54
    caee:	df 4f       	sbci	r29, 0xFF	; 255
    caf0:	f8 83       	st	Y, r31
    caf2:	ca 5c       	subi	r28, 0xCA	; 202
    caf4:	d0 40       	sbci	r29, 0x00	; 0
    caf6:	c6 53       	subi	r28, 0x36	; 54
    caf8:	df 4f       	sbci	r29, 0xFF	; 255
    cafa:	88 81       	ld	r24, Y
    cafc:	ca 5c       	subi	r28, 0xCA	; 202
    cafe:	d0 40       	sbci	r29, 0x00	; 0
    cb00:	cd 51       	subi	r28, 0x1D	; 29
    cb02:	df 4f       	sbci	r29, 0xFF	; 255
    cb04:	0f b6       	in	r0, 0x3f	; 63
    cb06:	f8 94       	cli
    cb08:	de bf       	out	0x3e, r29	; 62
    cb0a:	0f be       	out	0x3f, r0	; 63
    cb0c:	cd bf       	out	0x3d, r28	; 61
    cb0e:	df 91       	pop	r29
    cb10:	cf 91       	pop	r28
    cb12:	1f 91       	pop	r17
    cb14:	0f 91       	pop	r16
    cb16:	ff 90       	pop	r15
    cb18:	ef 90       	pop	r14
    cb1a:	df 90       	pop	r13
    cb1c:	cf 90       	pop	r12
    cb1e:	bf 90       	pop	r11
    cb20:	af 90       	pop	r10
    cb22:	9f 90       	pop	r9
    cb24:	8f 90       	pop	r8
    cb26:	7f 90       	pop	r7
    cb28:	6f 90       	pop	r6
    cb2a:	5f 90       	pop	r5
    cb2c:	4f 90       	pop	r4
    cb2e:	3f 90       	pop	r3
    cb30:	2f 90       	pop	r2
    cb32:	08 95       	ret

0000cb34 <setup>:
setup():
    cb34:	2f 92       	push	r2
    cb36:	3f 92       	push	r3
    cb38:	4f 92       	push	r4
    cb3a:	5f 92       	push	r5
    cb3c:	6f 92       	push	r6
    cb3e:	7f 92       	push	r7
    cb40:	8f 92       	push	r8
    cb42:	9f 92       	push	r9
    cb44:	af 92       	push	r10
    cb46:	bf 92       	push	r11
    cb48:	cf 92       	push	r12
    cb4a:	df 92       	push	r13
    cb4c:	ef 92       	push	r14
    cb4e:	ff 92       	push	r15
    cb50:	0f 93       	push	r16
    cb52:	1f 93       	push	r17
    cb54:	cf 93       	push	r28
    cb56:	df 93       	push	r29
    cb58:	cd b7       	in	r28, 0x3d	; 61
    cb5a:	de b7       	in	r29, 0x3e	; 62
    cb5c:	c2 53       	subi	r28, 0x32	; 50
    cb5e:	d1 40       	sbci	r29, 0x01	; 1
    cb60:	0f b6       	in	r0, 0x3f	; 63
    cb62:	f8 94       	cli
    cb64:	de bf       	out	0x3e, r29	; 62
    cb66:	0f be       	out	0x3f, r0	; 63
    cb68:	cd bf       	out	0x3d, r28	; 61
    cb6a:	6c ea       	ldi	r22, 0xAC	; 172
    cb6c:	7f e0       	ldi	r23, 0x0F	; 15
    cb6e:	ce 01       	movw	r24, r28
    cb70:	01 96       	adiw	r24, 0x01	; 1
    cb72:	0e 94 56 c9 	call	0x192ac	; 0x192ac <NTPClient::NTPClient(UDP&)>
    cb76:	0e 94 a1 4d 	call	0x9b42	; 0x9b42 <setup_io_pin()>
    cb7a:	78 94       	sei
    cb7c:	0e 94 da a8 	call	0x151b4	; 0x151b4 <SPIClass::begin()>
    cb80:	86 eb       	ldi	r24, 0xB6	; 182
    cb82:	92 e1       	ldi	r25, 0x12	; 18
    cb84:	0e 94 54 c4 	call	0x188a8	; 0x188a8 <TwoWire::begin()>
    cb88:	8b ed       	ldi	r24, 0xDB	; 219
    cb8a:	9f e0       	ldi	r25, 0x0F	; 15
    cb8c:	0e 94 15 c2 	call	0x1842a	; 0x1842a <RTC_DS1307::begin()>
    cb90:	8f e8       	ldi	r24, 0x8F	; 143
    cb92:	9d e0       	ldi	r25, 0x0D	; 13
    cb94:	0e 94 16 87 	call	0x10e2c	; 0x10e2c <mqtt_set_public_mqtt_client(PubSubClient*)>
    cb98:	70 e0       	ldi	r23, 0x00	; 0
    cb9a:	60 e0       	ldi	r22, 0x00	; 0
    cb9c:	88 eb       	ldi	r24, 0xB8	; 184
    cb9e:	96 e8       	ldi	r25, 0x86	; 134
    cba0:	0e 94 0b d8 	call	0x1b016	; 0x1b016 <fdevopen>
    cba4:	0e 94 78 39 	call	0x72f0	; 0x72f0 <printf_begin()>
    cba8:	8c ed       	ldi	r24, 0xDC	; 220
    cbaa:	9f e0       	ldi	r25, 0x0F	; 15
    cbac:	0e 94 2f a7 	call	0x14e5e	; 0x14e5e <SoftSPIB::begin()>
    cbb0:	0e 94 96 39 	call	0x732c	; 0x732c <MenuHistoryInit()>
    cbb4:	81 ea       	ldi	r24, 0xA1	; 161
    cbb6:	9b e0       	ldi	r25, 0x0B	; 11
    cbb8:	0e 94 08 a4 	call	0x14810	; 0x14810 <LCDWIKI_KBV::Init_LCD()>
    cbbc:	63 e0       	ldi	r22, 0x03	; 3
    cbbe:	81 ea       	ldi	r24, 0xA1	; 161
    cbc0:	9b e0       	ldi	r25, 0x0B	; 11
    cbc2:	0e 94 72 a1 	call	0x142e4	; 0x142e4 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
    cbc6:	63 e0       	ldi	r22, 0x03	; 3
    cbc8:	83 e8       	ldi	r24, 0x83	; 131
    cbca:	9b e0       	ldi	r25, 0x0B	; 11
    cbcc:	0e 94 1c a7 	call	0x14e38	; 0x14e38 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>
    cbd0:	81 ea       	ldi	r24, 0xA1	; 161
    cbd2:	9b e0       	ldi	r25, 0x0B	; 11
    cbd4:	0e 94 49 94 	call	0x12892	; 0x12892 <LCDWIKI_GUI::Get_Display_Height() const>
    cbd8:	7c 01       	movw	r14, r24
    cbda:	81 ea       	ldi	r24, 0xA1	; 161
    cbdc:	9b e0       	ldi	r25, 0x0B	; 11
    cbde:	0e 94 e8 93 	call	0x127d0	; 0x127d0 <LCDWIKI_GUI::Get_Display_Width() const>
    cbe2:	8c 01       	movw	r16, r24
    cbe4:	81 ea       	ldi	r24, 0xA1	; 161
    cbe6:	9b e0       	ldi	r25, 0x0B	; 11
    cbe8:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <LCDWIKI_KBV::Get_Rotation() const>
    cbec:	97 01       	movw	r18, r14
    cbee:	a8 01       	movw	r20, r16
    cbf0:	68 2f       	mov	r22, r24
    cbf2:	83 e8       	ldi	r24, 0x83	; 131
    cbf4:	9b e0       	ldi	r25, 0x0B	; 11
    cbf6:	0e 94 c5 a4 	call	0x1498a	; 0x1498a <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
    cbfa:	6f ef       	ldi	r22, 0xFF	; 255
    cbfc:	7f ef       	ldi	r23, 0xFF	; 255
    cbfe:	81 ea       	ldi	r24, 0xA1	; 161
    cc00:	9b e0       	ldi	r25, 0x0B	; 11
    cc02:	0e 94 37 92 	call	0x1246e	; 0x1246e <LCDWIKI_GUI::Fill_Screen(unsigned int)>
    cc06:	6f e1       	ldi	r22, 0x1F	; 31
    cc08:	70 e0       	ldi	r23, 0x00	; 0
    cc0a:	81 ea       	ldi	r24, 0xA1	; 161
    cc0c:	9b e0       	ldi	r25, 0x0B	; 11
    cc0e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
    cc12:	68 e0       	ldi	r22, 0x08	; 8
    cc14:	7b e5       	ldi	r23, 0x5B	; 91
    cc16:	ce 01       	movw	r24, r28
    cc18:	88 57       	subi	r24, 0x78	; 120
    cc1a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc1c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    cc20:	c1 2c       	mov	r12, r1
    cc22:	ee 24       	eor	r14, r14
    cc24:	ea 94       	dec	r14
    cc26:	fe 2c       	mov	r15, r14
    cc28:	0f e1       	ldi	r16, 0x1F	; 31
    cc2a:	10 e0       	ldi	r17, 0x00	; 0
    cc2c:	22 e0       	ldi	r18, 0x02	; 2
    cc2e:	4a e0       	ldi	r20, 0x0A	; 10
    cc30:	50 e0       	ldi	r21, 0x00	; 0
    cc32:	6e e1       	ldi	r22, 0x1E	; 30
    cc34:	70 e0       	ldi	r23, 0x00	; 0
    cc36:	ce 01       	movw	r24, r28
    cc38:	88 57       	subi	r24, 0x78	; 120
    cc3a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc3c:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cc40:	1e e1       	ldi	r17, 0x1E	; 30
    cc42:	61 2e       	mov	r6, r17
    cc44:	71 2c       	mov	r7, r1
    cc46:	c0 5d       	subi	r28, 0xD0	; 208
    cc48:	de 4f       	sbci	r29, 0xFE	; 254
    cc4a:	18 82       	st	Y, r1
    cc4c:	c0 53       	subi	r28, 0x30	; 48
    cc4e:	d1 40       	sbci	r29, 0x01	; 1
itoa():
    cc50:	5e 01       	movw	r10, r28
    cc52:	28 e4       	ldi	r18, 0x48	; 72
    cc54:	a2 0e       	add	r10, r18
    cc56:	b1 1c       	adc	r11, r1
setup():
    cc58:	68 ec       	ldi	r22, 0xC8	; 200
    cc5a:	70 e0       	ldi	r23, 0x00	; 0
    cc5c:	6c 0f       	add	r22, r28
    cc5e:	7d 1f       	adc	r23, r29
    cc60:	64 5f       	subi	r22, 0xF4	; 244
    cc62:	7f 4f       	sbci	r23, 0xFF	; 255
    cc64:	cf 5c       	subi	r28, 0xCF	; 207
    cc66:	de 4f       	sbci	r29, 0xFE	; 254
    cc68:	79 83       	std	Y+1, r23	; 0x01
    cc6a:	68 83       	st	Y, r22
    cc6c:	c1 53       	subi	r28, 0x31	; 49
    cc6e:	d1 40       	sbci	r29, 0x01	; 1
    cc70:	4e 01       	movw	r8, r28
    cc72:	7c ef       	ldi	r23, 0xFC	; 252
    cc74:	87 0e       	add	r8, r23
    cc76:	91 1c       	adc	r9, r1
    cc78:	ce 01       	movw	r24, r28
    cc7a:	8c 5e       	subi	r24, 0xEC	; 236
    cc7c:	9e 4f       	sbci	r25, 0xFE	; 254
    cc7e:	c2 5d       	subi	r28, 0xD2	; 210
    cc80:	de 4f       	sbci	r29, 0xFE	; 254
    cc82:	99 83       	std	Y+1, r25	; 0x01
    cc84:	88 83       	st	Y, r24
    cc86:	ce 52       	subi	r28, 0x2E	; 46
    cc88:	d1 40       	sbci	r29, 0x01	; 1
    cc8a:	1e 01       	movw	r2, r28
    cc8c:	94 ef       	ldi	r25, 0xF4	; 244
    cc8e:	29 1a       	sub	r2, r25
    cc90:	9e ef       	ldi	r25, 0xFE	; 254
    cc92:	39 0a       	sbc	r3, r25
    cc94:	2e 01       	movw	r4, r28
    cc96:	2c ef       	ldi	r18, 0xFC	; 252
    cc98:	42 1a       	sub	r4, r18
    cc9a:	2e ef       	ldi	r18, 0xFE	; 254
    cc9c:	52 0a       	sbc	r5, r18
    cc9e:	c1 2c       	mov	r12, r1
    cca0:	ee 24       	eor	r14, r14
    cca2:	ea 94       	dec	r14
    cca4:	fe 2c       	mov	r15, r14
    cca6:	00 e0       	ldi	r16, 0x00	; 0
    cca8:	18 ef       	ldi	r17, 0xF8	; 248
    ccaa:	21 e0       	ldi	r18, 0x01	; 1
    ccac:	4e e1       	ldi	r20, 0x1E	; 30
    ccae:	50 e0       	ldi	r21, 0x00	; 0
    ccb0:	b3 01       	movw	r22, r6
    ccb2:	83 e5       	ldi	r24, 0x53	; 83
    ccb4:	95 e0       	ldi	r25, 0x05	; 5
    ccb6:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ccba:	c0 5d       	subi	r28, 0xD0	; 208
    ccbc:	de 4f       	sbci	r29, 0xFE	; 254
    ccbe:	68 81       	ld	r22, Y
    ccc0:	c0 53       	subi	r28, 0x30	; 48
    ccc2:	d1 40       	sbci	r29, 0x01	; 1
    ccc4:	61 11       	cpse	r22, r1
    ccc6:	6d c1       	rjmp	.+730    	; 0xcfa2 <setup+0x46e>
    ccc8:	6e eb       	ldi	r22, 0xBE	; 190
    ccca:	7a e5       	ldi	r23, 0x5A	; 90
    cccc:	ce 01       	movw	r24, r28
    ccce:	88 57       	subi	r24, 0x78	; 120
    ccd0:	9f 4f       	sbci	r25, 0xFF	; 255
    ccd2:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    ccd6:	65 e5       	ldi	r22, 0x55	; 85
    ccd8:	75 e0       	ldi	r23, 0x05	; 5
    ccda:	ce 01       	movw	r24, r28
    ccdc:	88 57       	subi	r24, 0x78	; 120
    ccde:	9f 4f       	sbci	r25, 0xFF	; 255
    cce0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    cce4:	00 ee       	ldi	r16, 0xE0	; 224
    cce6:	17 e0       	ldi	r17, 0x07	; 7
    cce8:	21 e0       	ldi	r18, 0x01	; 1
    ccea:	42 e3       	ldi	r20, 0x32	; 50
    ccec:	50 e0       	ldi	r21, 0x00	; 0
    ccee:	6e e1       	ldi	r22, 0x1E	; 30
    ccf0:	70 e0       	ldi	r23, 0x00	; 0
    ccf2:	ce 01       	movw	r24, r28
    ccf4:	88 57       	subi	r24, 0x78	; 120
    ccf6:	9f 4f       	sbci	r25, 0xFF	; 255
    ccf8:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    ccfc:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <tritri+0x1>
    cd00:	10 92 4c 0a 	sts	0x0A4C, r1	; 0x800a4c <tritri>
    cd04:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <petnula+0x1>
    cd08:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <petnula>
    cd0c:	10 92 49 0a 	sts	0x0A49, r1	; 0x800a49 <dvanact+0x1>
    cd10:	10 92 48 0a 	sts	0x0A48, r1	; 0x800a48 <dvanact>
    cd14:	10 92 45 0a 	sts	0x0A45, r1	; 0x800a45 <light_curr+0x1>
    cd18:	10 92 44 0a 	sts	0x0A44, r1	; 0x800a44 <light_curr>
    cd1c:	43 e0       	ldi	r20, 0x03	; 3
    cd1e:	66 e0       	ldi	r22, 0x06	; 6
    cd20:	88 ef       	ldi	r24, 0xF8	; 248
    cd22:	0e 94 63 cb 	call	0x196c6	; 0x196c6 <init_a2d(unsigned char, unsigned char, unsigned char)>
    cd26:	81 e1       	ldi	r24, 0x11	; 17
    cd28:	93 e3       	ldi	r25, 0x33	; 51
    cd2a:	0e 94 5e cb 	call	0x196bc	; 0x196bc <a2d_handler(void (*)(unsigned char, unsigned int))>
    cd2e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cd32:	83 e0       	ldi	r24, 0x03	; 3
    cd34:	0e 94 80 cb 	call	0x19700	; 0x19700 <a2d_start_first(unsigned char)>
    cd38:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cd3c:	6b 01       	movw	r12, r22
    cd3e:	7c 01       	movw	r14, r24
    cd40:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cd44:	81 11       	cpse	r24, r1
    cd46:	0b c0       	rjmp	.+22     	; 0xcd5e <setup+0x22a>
    cd48:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cd4c:	6c 19       	sub	r22, r12
    cd4e:	7d 09       	sbc	r23, r13
    cd50:	8e 09       	sbc	r24, r14
    cd52:	9f 09       	sbc	r25, r15
    cd54:	6a 30       	cpi	r22, 0x0A	; 10
    cd56:	71 05       	cpc	r23, r1
    cd58:	81 05       	cpc	r24, r1
    cd5a:	91 05       	cpc	r25, r1
    cd5c:	88 f3       	brcs	.-30     	; 0xcd40 <setup+0x20c>
    cd5e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cd62:	86 e0       	ldi	r24, 0x06	; 6
    cd64:	0e 94 80 cb 	call	0x19700	; 0x19700 <a2d_start_first(unsigned char)>
    cd68:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cd6c:	6b 01       	movw	r12, r22
    cd6e:	7c 01       	movw	r14, r24
    cd70:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cd74:	81 11       	cpse	r24, r1
    cd76:	0b c0       	rjmp	.+22     	; 0xcd8e <setup+0x25a>
    cd78:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cd7c:	6c 19       	sub	r22, r12
    cd7e:	7d 09       	sbc	r23, r13
    cd80:	8e 09       	sbc	r24, r14
    cd82:	9f 09       	sbc	r25, r15
    cd84:	6a 30       	cpi	r22, 0x0A	; 10
    cd86:	71 05       	cpc	r23, r1
    cd88:	81 05       	cpc	r24, r1
    cd8a:	91 05       	cpc	r25, r1
    cd8c:	88 f3       	brcs	.-30     	; 0xcd70 <setup+0x23c>
    cd8e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cd92:	85 e0       	ldi	r24, 0x05	; 5
    cd94:	0e 94 80 cb 	call	0x19700	; 0x19700 <a2d_start_first(unsigned char)>
    cd98:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cd9c:	6b 01       	movw	r12, r22
    cd9e:	7c 01       	movw	r14, r24
    cda0:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cda4:	81 11       	cpse	r24, r1
    cda6:	0b c0       	rjmp	.+22     	; 0xcdbe <setup+0x28a>
    cda8:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cdac:	6c 19       	sub	r22, r12
    cdae:	7d 09       	sbc	r23, r13
    cdb0:	8e 09       	sbc	r24, r14
    cdb2:	9f 09       	sbc	r25, r15
    cdb4:	6a 30       	cpi	r22, 0x0A	; 10
    cdb6:	71 05       	cpc	r23, r1
    cdb8:	81 05       	cpc	r24, r1
    cdba:	91 05       	cpc	r25, r1
    cdbc:	88 f3       	brcs	.-30     	; 0xcda0 <setup+0x26c>
    cdbe:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cdc2:	84 e0       	ldi	r24, 0x04	; 4
    cdc4:	0e 94 80 cb 	call	0x19700	; 0x19700 <a2d_start_first(unsigned char)>
    cdc8:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cdcc:	6b 01       	movw	r12, r22
    cdce:	7c 01       	movw	r14, r24
    cdd0:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    cdd4:	81 11       	cpse	r24, r1
    cdd6:	0b c0       	rjmp	.+22     	; 0xcdee <setup+0x2ba>
    cdd8:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cddc:	6c 19       	sub	r22, r12
    cdde:	7d 09       	sbc	r23, r13
    cde0:	8e 09       	sbc	r24, r14
    cde2:	9f 09       	sbc	r25, r15
    cde4:	6a 30       	cpi	r22, 0x0A	; 10
    cde6:	71 05       	cpc	r23, r1
    cde8:	81 05       	cpc	r24, r1
    cdea:	91 05       	cpc	r25, r1
    cdec:	88 f3       	brcs	.-30     	; 0xcdd0 <setup+0x29c>
    cdee:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    cdf2:	87 e0       	ldi	r24, 0x07	; 7
    cdf4:	0e 94 80 cb 	call	0x19700	; 0x19700 <a2d_start_first(unsigned char)>
    cdf8:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    cdfc:	6b 01       	movw	r12, r22
    cdfe:	7c 01       	movw	r14, r24
    ce00:	80 91 43 0a 	lds	r24, 0x0A43	; 0x800a43 <a2d_run_now>
    ce04:	81 11       	cpse	r24, r1
    ce06:	0b c0       	rjmp	.+22     	; 0xce1e <setup+0x2ea>
    ce08:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    ce0c:	6c 19       	sub	r22, r12
    ce0e:	7d 09       	sbc	r23, r13
    ce10:	8e 09       	sbc	r24, r14
    ce12:	9f 09       	sbc	r25, r15
    ce14:	6a 30       	cpi	r22, 0x0A	; 10
    ce16:	71 05       	cpc	r23, r1
    ce18:	81 05       	cpc	r24, r1
    ce1a:	91 05       	cpc	r25, r1
    ce1c:	88 f3       	brcs	.-30     	; 0xce00 <setup+0x2cc>
    ce1e:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
_Z15prepocet_napetijh():
    ce22:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <tritri>
    ce26:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <tritri+0x1>
    ce2a:	25 e0       	ldi	r18, 0x05	; 5
    ce2c:	28 9f       	mul	r18, r24
    ce2e:	b0 01       	movw	r22, r0
    ce30:	29 9f       	mul	r18, r25
    ce32:	70 0d       	add	r23, r0
    ce34:	11 24       	eor	r1, r1
    ce36:	90 e0       	ldi	r25, 0x00	; 0
    ce38:	80 e0       	ldi	r24, 0x00	; 0
    ce3a:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    ce3e:	20 e0       	ldi	r18, 0x00	; 0
    ce40:	30 e0       	ldi	r19, 0x00	; 0
    ce42:	4a e7       	ldi	r20, 0x7A	; 122
    ce44:	54 e4       	ldi	r21, 0x44	; 68
    ce46:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
setup():
    ce4a:	8e 01       	movw	r16, r28
    ce4c:	0c 5e       	subi	r16, 0xEC	; 236
    ce4e:	1e 4f       	sbci	r17, 0xFE	; 254
    ce50:	22 e0       	ldi	r18, 0x02	; 2
    ce52:	44 e0       	ldi	r20, 0x04	; 4
    ce54:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
_Z15prepocet_napetijh():
    ce58:	60 91 4a 0a 	lds	r22, 0x0A4A	; 0x800a4a <petnula>
    ce5c:	70 91 4b 0a 	lds	r23, 0x0A4B	; 0x800a4b <petnula+0x1>
    ce60:	e3 e0       	ldi	r30, 0x03	; 3
    ce62:	66 0f       	add	r22, r22
    ce64:	77 1f       	adc	r23, r23
    ce66:	ea 95       	dec	r30
    ce68:	e1 f7       	brne	.-8      	; 0xce62 <setup+0x32e>
    ce6a:	90 e0       	ldi	r25, 0x00	; 0
    ce6c:	80 e0       	ldi	r24, 0x00	; 0
    ce6e:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    ce72:	20 e0       	ldi	r18, 0x00	; 0
    ce74:	30 e0       	ldi	r19, 0x00	; 0
    ce76:	4a e7       	ldi	r20, 0x7A	; 122
    ce78:	54 e4       	ldi	r21, 0x44	; 68
    ce7a:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
setup():
    ce7e:	81 01       	movw	r16, r2
    ce80:	22 e0       	ldi	r18, 0x02	; 2
    ce82:	44 e0       	ldi	r20, 0x04	; 4
    ce84:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
_Z15prepocet_napetijh():
    ce88:	80 91 48 0a 	lds	r24, 0x0A48	; 0x800a48 <dvanact>
    ce8c:	90 91 49 0a 	lds	r25, 0x0A49	; 0x800a49 <dvanact+0x1>
    ce90:	29 e3       	ldi	r18, 0x39	; 57
    ce92:	28 9f       	mul	r18, r24
    ce94:	b0 01       	movw	r22, r0
    ce96:	29 9f       	mul	r18, r25
    ce98:	70 0d       	add	r23, r0
    ce9a:	11 24       	eor	r1, r1
    ce9c:	90 e0       	ldi	r25, 0x00	; 0
    ce9e:	80 e0       	ldi	r24, 0x00	; 0
    cea0:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
    cea4:	20 e0       	ldi	r18, 0x00	; 0
    cea6:	30 e0       	ldi	r19, 0x00	; 0
    cea8:	4a e7       	ldi	r20, 0x7A	; 122
    ceaa:	54 e4       	ldi	r21, 0x44	; 68
    ceac:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
setup():
    ceb0:	82 01       	movw	r16, r4
    ceb2:	22 e0       	ldi	r18, 0x02	; 2
    ceb4:	44 e0       	ldi	r20, 0x04	; 4
    ceb6:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
_Z15prepocet_prouduj():
    ceba:	60 91 46 0a 	lds	r22, 0x0A46	; 0x800a46 <proud>
    cebe:	70 91 47 0a 	lds	r23, 0x0A47	; 0x800a47 <proud+0x1>
    cec2:	90 e0       	ldi	r25, 0x00	; 0
    cec4:	80 e0       	ldi	r24, 0x00	; 0
    cec6:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
setup():
    ceca:	84 01       	movw	r16, r8
    cecc:	22 e0       	ldi	r18, 0x02	; 2
    cece:	44 e0       	ldi	r20, 0x04	; 4
    ced0:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    ced4:	9f 92       	push	r9
    ced6:	8f 92       	push	r8
    ced8:	5f 92       	push	r5
    ceda:	4f 92       	push	r4
    cedc:	3f 92       	push	r3
    cede:	2f 92       	push	r2
    cee0:	c1 5d       	subi	r28, 0xD1	; 209
    cee2:	de 4f       	sbci	r29, 0xFE	; 254
    cee4:	78 81       	ld	r23, Y
    cee6:	cf 52       	subi	r28, 0x2F	; 47
    cee8:	d1 40       	sbci	r29, 0x01	; 1
    ceea:	7f 93       	push	r23
    ceec:	c2 5d       	subi	r28, 0xD2	; 210
    ceee:	de 4f       	sbci	r29, 0xFE	; 254
    cef0:	88 81       	ld	r24, Y
    cef2:	ce 52       	subi	r28, 0x2E	; 46
    cef4:	d1 40       	sbci	r29, 0x01	; 1
    cef6:	8f 93       	push	r24
    cef8:	88 e5       	ldi	r24, 0x58	; 88
    cefa:	95 e0       	ldi	r25, 0x05	; 5
    cefc:	9f 93       	push	r25
    cefe:	8f 93       	push	r24
    cf00:	bf 92       	push	r11
    cf02:	af 92       	push	r10
    cf04:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    cf08:	c1 2c       	mov	r12, r1
    cf0a:	ee 24       	eor	r14, r14
    cf0c:	ea 94       	dec	r14
    cf0e:	fe 2c       	mov	r15, r14
    cf10:	00 ee       	ldi	r16, 0xE0	; 224
    cf12:	17 e0       	ldi	r17, 0x07	; 7
    cf14:	21 e0       	ldi	r18, 0x01	; 1
    cf16:	42 e3       	ldi	r20, 0x32	; 50
    cf18:	50 e0       	ldi	r21, 0x00	; 0
    cf1a:	60 ea       	ldi	r22, 0xA0	; 160
    cf1c:	70 e0       	ldi	r23, 0x00	; 0
    cf1e:	c5 01       	movw	r24, r10
    cf20:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cf24:	0f b6       	in	r0, 0x3f	; 63
    cf26:	f8 94       	cli
    cf28:	de bf       	out	0x3e, r29	; 62
    cf2a:	0f be       	out	0x3f, r0	; 63
    cf2c:	cd bf       	out	0x3d, r28	; 61
    cf2e:	c0 5d       	subi	r28, 0xD0	; 208
    cf30:	de 4f       	sbci	r29, 0xFE	; 254
    cf32:	88 81       	ld	r24, Y
    cf34:	c0 53       	subi	r28, 0x30	; 48
    cf36:	d1 40       	sbci	r29, 0x01	; 1
    cf38:	8e 30       	cpi	r24, 0x0E	; 14
    cf3a:	09 f0       	breq	.+2      	; 0xcf3e <setup+0x40a>
    cf3c:	87 c4       	rjmp	.+2318   	; 0xd84c <setup+0xd18>
    cf3e:	6d e5       	ldi	r22, 0x5D	; 93
    cf40:	7a e5       	ldi	r23, 0x5A	; 90
    cf42:	ce 01       	movw	r24, r28
    cf44:	88 57       	subi	r24, 0x78	; 120
    cf46:	9f 4f       	sbci	r25, 0xFF	; 255
    cf48:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    cf4c:	c1 2c       	mov	r12, r1
    cf4e:	ee 24       	eor	r14, r14
    cf50:	ea 94       	dec	r14
    cf52:	fe 2c       	mov	r15, r14
    cf54:	00 ee       	ldi	r16, 0xE0	; 224
    cf56:	17 e0       	ldi	r17, 0x07	; 7
    cf58:	21 e0       	ldi	r18, 0x01	; 1
    cf5a:	4e eb       	ldi	r20, 0xBE	; 190
    cf5c:	50 e0       	ldi	r21, 0x00	; 0
    cf5e:	6e e1       	ldi	r22, 0x1E	; 30
    cf60:	70 e0       	ldi	r23, 0x00	; 0
    cf62:	ce 01       	movw	r24, r28
    cf64:	88 57       	subi	r24, 0x78	; 120
    cf66:	9f 4f       	sbci	r25, 0xFF	; 255
    cf68:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cf6c:	ce 01       	movw	r24, r28
    cf6e:	01 96       	adiw	r24, 0x01	; 1
    cf70:	0e 94 75 86 	call	0x10cea	; 0x10cea <ntp_check(NTPClient*)>
    cf74:	81 11       	cpse	r24, r1
    cf76:	51 c4       	rjmp	.+2210   	; 0xd81a <setup+0xce6>
    cf78:	62 e3       	ldi	r22, 0x32	; 50
    cf7a:	76 e5       	ldi	r23, 0x56	; 86
    cf7c:	ce 01       	movw	r24, r28
    cf7e:	88 57       	subi	r24, 0x78	; 120
    cf80:	9f 4f       	sbci	r25, 0xFF	; 255
    cf82:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    cf86:	00 e0       	ldi	r16, 0x00	; 0
    cf88:	18 ef       	ldi	r17, 0xF8	; 248
    cf8a:	21 e0       	ldi	r18, 0x01	; 1
    cf8c:	4e eb       	ldi	r20, 0xBE	; 190
    cf8e:	50 e0       	ldi	r21, 0x00	; 0
    cf90:	60 ea       	ldi	r22, 0xA0	; 160
    cf92:	70 e0       	ldi	r23, 0x00	; 0
    cf94:	ce 01       	movw	r24, r28
    cf96:	88 57       	subi	r24, 0x78	; 120
    cf98:	9f 4f       	sbci	r25, 0xFF	; 255
    cf9a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    cf9e:	81 e0       	ldi	r24, 0x01	; 1
    cfa0:	41 c3       	rjmp	.+1666   	; 0xd624 <setup+0xaf0>
    cfa2:	c0 5d       	subi	r28, 0xD0	; 208
    cfa4:	de 4f       	sbci	r29, 0xFE	; 254
    cfa6:	78 81       	ld	r23, Y
    cfa8:	c0 53       	subi	r28, 0x30	; 48
    cfaa:	d1 40       	sbci	r29, 0x01	; 1
    cfac:	71 30       	cpi	r23, 0x01	; 1
    cfae:	09 f0       	breq	.+2      	; 0xcfb2 <setup+0x47e>
    cfb0:	5a c0       	rjmp	.+180    	; 0xd066 <setup+0x532>
    cfb2:	6e eb       	ldi	r22, 0xBE	; 190
    cfb4:	7a e5       	ldi	r23, 0x5A	; 90
    cfb6:	ce 01       	movw	r24, r28
    cfb8:	88 57       	subi	r24, 0x78	; 120
    cfba:	9f 4f       	sbci	r25, 0xFF	; 255
    cfbc:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    cfc0:	66 e7       	ldi	r22, 0x76	; 118
    cfc2:	75 e0       	ldi	r23, 0x05	; 5
    cfc4:	ce 01       	movw	r24, r28
    cfc6:	88 57       	subi	r24, 0x78	; 120
    cfc8:	9f 4f       	sbci	r25, 0xFF	; 255
    cfca:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    cfce:	c1 2c       	mov	r12, r1
    cfd0:	ee 24       	eor	r14, r14
    cfd2:	ea 94       	dec	r14
    cfd4:	fe 2c       	mov	r15, r14
    cfd6:	00 ee       	ldi	r16, 0xE0	; 224
    cfd8:	17 e0       	ldi	r17, 0x07	; 7
    cfda:	21 e0       	ldi	r18, 0x01	; 1
    cfdc:	4c e3       	ldi	r20, 0x3C	; 60
    cfde:	50 e0       	ldi	r21, 0x00	; 0
    cfe0:	6e e1       	ldi	r22, 0x1E	; 30
    cfe2:	70 e0       	ldi	r23, 0x00	; 0
    cfe4:	ce 01       	movw	r24, r28
    cfe6:	88 57       	subi	r24, 0x78	; 120
    cfe8:	9f 4f       	sbci	r25, 0xFF	; 255
    cfea:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
_ZN24Temperature_LM75_Derived16readTemperatureCEv():
    cfee:	e0 91 eb 0b 	lds	r30, 0x0BEB	; 0x800beb <lm75_temp+0xb>
    cff2:	f0 91 ec 0b 	lds	r31, 0x0BEC	; 0x800bec <lm75_temp+0xc>
    cff6:	04 80       	ldd	r0, Z+4	; 0x04
    cff8:	f5 81       	ldd	r31, Z+5	; 0x05
    cffa:	e0 2d       	mov	r30, r0
    cffc:	60 81       	ld	r22, Z
    cffe:	80 ee       	ldi	r24, 0xE0	; 224
    d000:	9b e0       	ldi	r25, 0x0B	; 11
    d002:	0e 94 4f c3 	call	0x1869e	; 0x1869e <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
    d006:	bc 01       	movw	r22, r24
    d008:	99 0f       	add	r25, r25
    d00a:	88 0b       	sbc	r24, r24
    d00c:	99 0b       	sbc	r25, r25
    d00e:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    d012:	20 91 e7 0b 	lds	r18, 0x0BE7	; 0x800be7 <lm75_temp+0x7>
    d016:	30 91 e8 0b 	lds	r19, 0x0BE8	; 0x800be8 <lm75_temp+0x8>
    d01a:	40 91 e9 0b 	lds	r20, 0x0BE9	; 0x800be9 <lm75_temp+0x9>
    d01e:	50 91 ea 0b 	lds	r21, 0x0BEA	; 0x800bea <lm75_temp+0xa>
    d022:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
setup():
    d026:	84 01       	movw	r16, r8
    d028:	22 e0       	ldi	r18, 0x02	; 2
    d02a:	44 e0       	ldi	r20, 0x04	; 4
    d02c:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
    d030:	9f 92       	push	r9
    d032:	8f 92       	push	r8
    d034:	89 e7       	ldi	r24, 0x79	; 121
    d036:	95 e0       	ldi	r25, 0x05	; 5
    d038:	9f 93       	push	r25
    d03a:	8f 93       	push	r24
    d03c:	bf 92       	push	r11
    d03e:	af 92       	push	r10
    d040:	0e 94 95 d8 	call	0x1b12a	; 0x1b12a <sprintf>
    d044:	00 ee       	ldi	r16, 0xE0	; 224
    d046:	17 e0       	ldi	r17, 0x07	; 7
    d048:	21 e0       	ldi	r18, 0x01	; 1
    d04a:	4c e3       	ldi	r20, 0x3C	; 60
    d04c:	50 e0       	ldi	r21, 0x00	; 0
    d04e:	60 ea       	ldi	r22, 0xA0	; 160
    d050:	70 e0       	ldi	r23, 0x00	; 0
    d052:	c5 01       	movw	r24, r10
    d054:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d058:	0f 90       	pop	r0
    d05a:	0f 90       	pop	r0
    d05c:	0f 90       	pop	r0
    d05e:	0f 90       	pop	r0
    d060:	0f 90       	pop	r0
    d062:	0f 90       	pop	r0
    d064:	64 cf       	rjmp	.-312    	; 0xcf2e <setup+0x3fa>
    d066:	c0 5d       	subi	r28, 0xD0	; 208
    d068:	de 4f       	sbci	r29, 0xFE	; 254
    d06a:	88 81       	ld	r24, Y
    d06c:	c0 53       	subi	r28, 0x30	; 48
    d06e:	d1 40       	sbci	r29, 0x01	; 1
    d070:	82 30       	cpi	r24, 0x02	; 2
    d072:	09 f0       	breq	.+2      	; 0xd076 <setup+0x542>
    d074:	6d c1       	rjmp	.+730    	; 0xd350 <setup+0x81c>
_ZNK5EERefdeEv():
    d076:	8a e5       	ldi	r24, 0x5A	; 90
    d078:	90 e0       	ldi	r25, 0x00	; 0
    d07a:	0e 94 68 df 	call	0x1bed0	; 0x1bed0 <eeprom_read_byte>
setup():
    d07e:	8f 3f       	cpi	r24, 0xFF	; 255
    d080:	09 f0       	breq	.+2      	; 0xd084 <setup+0x550>
    d082:	53 c1       	rjmp	.+678    	; 0xd32a <setup+0x7f6>
    d084:	60 e0       	ldi	r22, 0x00	; 0
    d086:	8a e5       	ldi	r24, 0x5A	; 90
    d088:	90 e0       	ldi	r25, 0x00	; 0
    d08a:	0e 94 b0 38 	call	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
    d08e:	68 e3       	ldi	r22, 0x38	; 56
    d090:	7a e5       	ldi	r23, 0x5A	; 90
    d092:	ce 01       	movw	r24, r28
    d094:	88 57       	subi	r24, 0x78	; 120
    d096:	9f 4f       	sbci	r25, 0xFF	; 255
    d098:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d09c:	c1 2c       	mov	r12, r1
    d09e:	ee 24       	eor	r14, r14
    d0a0:	ea 94       	dec	r14
    d0a2:	fe 2c       	mov	r15, r14
    d0a4:	00 e0       	ldi	r16, 0x00	; 0
    d0a6:	18 ef       	ldi	r17, 0xF8	; 248
    d0a8:	21 e0       	ldi	r18, 0x01	; 1
    d0aa:	46 e4       	ldi	r20, 0x46	; 70
    d0ac:	50 e0       	ldi	r21, 0x00	; 0
    d0ae:	6e e1       	ldi	r22, 0x1E	; 30
    d0b0:	70 e0       	ldi	r23, 0x00	; 0
    d0b2:	ce 01       	movw	r24, r28
    d0b4:	88 57       	subi	r24, 0x78	; 120
    d0b6:	9f 4f       	sbci	r25, 0xFF	; 255
    d0b8:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d0bc:	8f ef       	ldi	r24, 0xFF	; 255
    d0be:	0e 94 a3 46 	call	0x8d46	; 0x8d46 <set_default_show_temp(unsigned char)>
    d0c2:	80 e0       	ldi	r24, 0x00	; 0
    d0c4:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
    d0c8:	81 e0       	ldi	r24, 0x01	; 1
    d0ca:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
    d0ce:	82 e0       	ldi	r24, 0x02	; 2
    d0d0:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
    d0d4:	83 e0       	ldi	r24, 0x03	; 3
    d0d6:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
    d0da:	84 e0       	ldi	r24, 0x04	; 4
    d0dc:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
    d0e0:	10 e0       	ldi	r17, 0x00	; 0
    d0e2:	69 eb       	ldi	r22, 0xB9	; 185
    d0e4:	75 e0       	ldi	r23, 0x05	; 5
    d0e6:	ce 01       	movw	r24, r28
    d0e8:	82 52       	subi	r24, 0x22	; 34
    d0ea:	9f 4f       	sbci	r25, 0xFF	; 255
    d0ec:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    d0f0:	81 2f       	mov	r24, r17
    d0f2:	0e 94 56 43 	call	0x86ac	; 0x86ac <remote_tds_clear(unsigned char)>
    d0f6:	1f 5f       	subi	r17, 0xFF	; 255
    d0f8:	1a 30       	cpi	r17, 0x0A	; 10
    d0fa:	99 f7       	brne	.-26     	; 0xd0e2 <setup+0x5ae>
    d0fc:	10 e0       	ldi	r17, 0x00	; 0
    d0fe:	6e e7       	ldi	r22, 0x7E	; 126
    d100:	76 e5       	ldi	r23, 0x56	; 86
    d102:	c5 01       	movw	r24, r10
    d104:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d108:	b5 01       	movw	r22, r10
    d10a:	81 2f       	mov	r24, r17
    d10c:	0e 94 22 8f 	call	0x11e44	; 0x11e44 <thermostat_program_set_name(unsigned char, char*)>
    d110:	6f ef       	ldi	r22, 0xFF	; 255
    d112:	81 2f       	mov	r24, r17
    d114:	0e 94 52 8f 	call	0x11ea4	; 0x11ea4 <thermostat_program_set_active(unsigned char, unsigned char)>
    d118:	f1 2c       	mov	r15, r1
    d11a:	c1 2c       	mov	r12, r1
    d11c:	e1 2c       	mov	r14, r1
    d11e:	00 e0       	ldi	r16, 0x00	; 0
    d120:	20 e0       	ldi	r18, 0x00	; 0
    d122:	40 e0       	ldi	r20, 0x00	; 0
    d124:	6f 2d       	mov	r22, r15
    d126:	81 2f       	mov	r24, r17
    d128:	0e 94 ad 8f 	call	0x11f5a	; 0x11f5a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    d12c:	4c ed       	ldi	r20, 0xDC	; 220
    d12e:	50 e0       	ldi	r21, 0x00	; 0
    d130:	6f 2d       	mov	r22, r15
    d132:	81 2f       	mov	r24, r17
    d134:	0e 94 0b 90 	call	0x12016	; 0x12016 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
    d138:	40 e0       	ldi	r20, 0x00	; 0
    d13a:	6f 2d       	mov	r22, r15
    d13c:	81 2f       	mov	r24, r17
    d13e:	0e 94 34 90 	call	0x12068	; 0x12068 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
    d142:	f3 94       	inc	r15
    d144:	9b e0       	ldi	r25, 0x0B	; 11
    d146:	f9 12       	cpse	r15, r25
    d148:	e8 cf       	rjmp	.-48     	; 0xd11a <setup+0x5e6>
    d14a:	1f 5f       	subi	r17, 0xFF	; 255
    d14c:	18 30       	cpi	r17, 0x08	; 8
    d14e:	b9 f6       	brne	.-82     	; 0xd0fe <setup+0x5ca>
    d150:	5a e0       	ldi	r21, 0x0A	; 10
    d152:	f5 2e       	mov	r15, r21
    d154:	1f ef       	ldi	r17, 0xFF	; 255
    d156:	be 01       	movw	r22, r28
    d158:	68 53       	subi	r22, 0x38	; 56
    d15a:	7f 4f       	sbci	r23, 0xFF	; 255
    d15c:	80 2f       	mov	r24, r16
    d15e:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    d162:	60 e8       	ldi	r22, 0x80	; 128
    d164:	75 e0       	ldi	r23, 0x05	; 5
    d166:	cf 5c       	subi	r28, 0xCF	; 207
    d168:	de 4f       	sbci	r29, 0xFE	; 254
    d16a:	88 81       	ld	r24, Y
    d16c:	99 81       	ldd	r25, Y+1	; 0x01
    d16e:	c1 53       	subi	r28, 0x31	; 49
    d170:	d1 40       	sbci	r29, 0x01	; 1
    d172:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    d176:	c8 53       	subi	r28, 0x38	; 56
    d178:	df 4f       	sbci	r29, 0xFF	; 255
    d17a:	18 82       	st	Y, r1
    d17c:	c8 5c       	subi	r28, 0xC8	; 200
    d17e:	d0 40       	sbci	r29, 0x00	; 0
    d180:	ce 52       	subi	r28, 0x2E	; 46
    d182:	df 4f       	sbci	r29, 0xFF	; 255
    d184:	19 82       	std	Y+1, r1	; 0x01
    d186:	18 82       	st	Y, r1
    d188:	c2 5d       	subi	r28, 0xD2	; 210
    d18a:	d0 40       	sbci	r29, 0x00	; 0
    d18c:	cf 52       	subi	r28, 0x2F	; 47
    d18e:	df 4f       	sbci	r29, 0xFF	; 255
    d190:	18 82       	st	Y, r1
    d192:	c1 5d       	subi	r28, 0xD1	; 209
    d194:	d0 40       	sbci	r29, 0x00	; 0
    d196:	c4 52       	subi	r28, 0x24	; 36
    d198:	df 4f       	sbci	r29, 0xFF	; 255
    d19a:	f8 82       	st	Y, r15
    d19c:	cc 5d       	subi	r28, 0xDC	; 220
    d19e:	d0 40       	sbci	r29, 0x00	; 0
    d1a0:	c7 53       	subi	r28, 0x37	; 55
    d1a2:	df 4f       	sbci	r29, 0xFF	; 255
    d1a4:	18 83       	st	Y, r17
    d1a6:	c9 5c       	subi	r28, 0xC9	; 201
    d1a8:	d0 40       	sbci	r29, 0x00	; 0
    d1aa:	c6 53       	subi	r28, 0x36	; 54
    d1ac:	df 4f       	sbci	r29, 0xFF	; 255
    d1ae:	18 83       	st	Y, r17
    d1b0:	ca 5c       	subi	r28, 0xCA	; 202
    d1b2:	d0 40       	sbci	r29, 0x00	; 0
    d1b4:	c5 53       	subi	r28, 0x35	; 53
    d1b6:	df 4f       	sbci	r29, 0xFF	; 255
    d1b8:	18 83       	st	Y, r17
    d1ba:	cb 5c       	subi	r28, 0xCB	; 203
    d1bc:	d0 40       	sbci	r29, 0x00	; 0
    d1be:	c4 53       	subi	r28, 0x34	; 52
    d1c0:	df 4f       	sbci	r29, 0xFF	; 255
    d1c2:	18 83       	st	Y, r17
    d1c4:	cc 5c       	subi	r28, 0xCC	; 204
    d1c6:	d0 40       	sbci	r29, 0x00	; 0
    d1c8:	c3 53       	subi	r28, 0x33	; 51
    d1ca:	df 4f       	sbci	r29, 0xFF	; 255
    d1cc:	18 83       	st	Y, r17
    d1ce:	cd 5c       	subi	r28, 0xCD	; 205
    d1d0:	d0 40       	sbci	r29, 0x00	; 0
    d1d2:	c2 53       	subi	r28, 0x32	; 50
    d1d4:	df 4f       	sbci	r29, 0xFF	; 255
    d1d6:	18 83       	st	Y, r17
    d1d8:	ce 5c       	subi	r28, 0xCE	; 206
    d1da:	d0 40       	sbci	r29, 0x00	; 0
    d1dc:	c1 53       	subi	r28, 0x31	; 49
    d1de:	df 4f       	sbci	r29, 0xFF	; 255
    d1e0:	18 83       	st	Y, r17
    d1e2:	cf 5c       	subi	r28, 0xCF	; 207
    d1e4:	d0 40       	sbci	r29, 0x00	; 0
    d1e6:	c0 53       	subi	r28, 0x30	; 48
    d1e8:	df 4f       	sbci	r29, 0xFF	; 255
    d1ea:	18 83       	st	Y, r17
    d1ec:	c0 5d       	subi	r28, 0xD0	; 208
    d1ee:	d0 40       	sbci	r29, 0x00	; 0
    d1f0:	be 01       	movw	r22, r28
    d1f2:	68 53       	subi	r22, 0x38	; 56
    d1f4:	7f 4f       	sbci	r23, 0xFF	; 255
    d1f6:	80 2f       	mov	r24, r16
    d1f8:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    d1fc:	0f 5f       	subi	r16, 0xFF	; 255
    d1fe:	06 30       	cpi	r16, 0x06	; 6
    d200:	09 f0       	breq	.+2      	; 0xd204 <setup+0x6d0>
    d202:	a9 cf       	rjmp	.-174    	; 0xd156 <setup+0x622>
    d204:	c1 2c       	mov	r12, r1
    d206:	ae e0       	ldi	r26, 0x0E	; 14
    d208:	ea 2e       	mov	r14, r26
    d20a:	01 e1       	ldi	r16, 0x11	; 17
    d20c:	2e e0       	ldi	r18, 0x0E	; 14
    d20e:	4c e0       	ldi	r20, 0x0C	; 12
    d210:	64 ee       	ldi	r22, 0xE4	; 228
    d212:	77 e0       	ldi	r23, 0x07	; 7
    d214:	ce 01       	movw	r24, r28
    d216:	8e 50       	subi	r24, 0x0E	; 14
    d218:	9f 4f       	sbci	r25, 0xFF	; 255
    d21a:	0e 94 f4 c1 	call	0x183e8	; 0x183e8 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    d21e:	ce 01       	movw	r24, r28
    d220:	8e 50       	subi	r24, 0x0E	; 14
    d222:	9f 4f       	sbci	r25, 0xFF	; 255
    d224:	0e 94 1b c2 	call	0x18436	; 0x18436 <RTC_DS1307::adjust(DateTime const&)>
    d228:	81 e0       	ldi	r24, 0x01	; 1
    d22a:	0e 94 9c 4d 	call	0x9b38	; 0x9b38 <time_set_offset(unsigned char)>
    d22e:	82 e0       	ldi	r24, 0x02	; 2
    d230:	80 93 75 10 	sts	0x1075, r24	; 0x801075 <device>
    d234:	91 e0       	ldi	r25, 0x01	; 1
    d236:	90 93 76 10 	sts	0x1076, r25	; 0x801076 <device+0x1>
    d23a:	80 93 77 10 	sts	0x1077, r24	; 0x801077 <device+0x2>
    d23e:	20 91 48 0a 	lds	r18, 0x0A48	; 0x800a48 <dvanact>
    d242:	30 91 49 0a 	lds	r19, 0x0A49	; 0x800a49 <dvanact+0x1>
    d246:	36 95       	lsr	r19
    d248:	27 95       	ror	r18
    d24a:	20 93 78 10 	sts	0x1078, r18	; 0x801078 <device+0x3>
    d24e:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <light_curr>
    d252:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <light_curr+0x1>
    d256:	36 95       	lsr	r19
    d258:	27 95       	ror	r18
    d25a:	20 93 79 10 	sts	0x1079, r18	; 0x801079 <device+0x4>
    d25e:	20 91 46 0a 	lds	r18, 0x0A46	; 0x800a46 <proud>
    d262:	30 91 47 0a 	lds	r19, 0x0A47	; 0x800a47 <proud+0x1>
    d266:	36 95       	lsr	r19
    d268:	27 95       	ror	r18
    d26a:	20 93 7a 10 	sts	0x107A, r18	; 0x80107a <device+0x5>
    d26e:	30 ec       	ldi	r19, 0xC0	; 192
    d270:	30 93 7b 10 	sts	0x107B, r19	; 0x80107b <device+0x6>
    d274:	28 ea       	ldi	r18, 0xA8	; 168
    d276:	20 93 7c 10 	sts	0x107C, r18	; 0x80107c <device+0x7>
    d27a:	80 93 7d 10 	sts	0x107D, r24	; 0x80107d <device+0x8>
    d27e:	4e e6       	ldi	r20, 0x6E	; 110
    d280:	40 93 7e 10 	sts	0x107E, r20	; 0x80107e <device+0x9>
    d284:	10 93 7f 10 	sts	0x107F, r17	; 0x80107f <device+0xa>
    d288:	10 93 80 10 	sts	0x1080, r17	; 0x801080 <device+0xb>
    d28c:	10 93 81 10 	sts	0x1081, r17	; 0x801081 <device+0xc>
    d290:	10 92 82 10 	sts	0x1082, r1	; 0x801082 <device+0xd>
    d294:	30 93 87 10 	sts	0x1087, r19	; 0x801087 <device+0x12>
    d298:	20 93 88 10 	sts	0x1088, r18	; 0x801088 <device+0x13>
    d29c:	80 93 89 10 	sts	0x1089, r24	; 0x801089 <device+0x14>
    d2a0:	90 93 8a 10 	sts	0x108A, r25	; 0x80108a <device+0x15>
    d2a4:	30 93 83 10 	sts	0x1083, r19	; 0x801083 <device+0xe>
    d2a8:	20 93 84 10 	sts	0x1084, r18	; 0x801084 <device+0xf>
    d2ac:	80 93 85 10 	sts	0x1085, r24	; 0x801085 <device+0x10>
    d2b0:	90 93 86 10 	sts	0x1086, r25	; 0x801086 <device+0x11>
    d2b4:	30 93 95 10 	sts	0x1095, r19	; 0x801095 <device+0x20>
    d2b8:	20 93 96 10 	sts	0x1096, r18	; 0x801096 <device+0x21>
    d2bc:	80 93 97 10 	sts	0x1097, r24	; 0x801097 <device+0x22>
    d2c0:	90 93 98 10 	sts	0x1098, r25	; 0x801098 <device+0x23>
    d2c4:	30 93 c3 10 	sts	0x10C3, r19	; 0x8010c3 <device+0x4e>
    d2c8:	20 93 c4 10 	sts	0x10C4, r18	; 0x8010c4 <device+0x4f>
    d2cc:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <device+0x50>
    d2d0:	90 93 c6 10 	sts	0x10C6, r25	; 0x8010c6 <device+0x51>
    d2d4:	8b e5       	ldi	r24, 0x5B	; 91
    d2d6:	97 e0       	ldi	r25, 0x07	; 7
    d2d8:	90 93 9a 10 	sts	0x109A, r25	; 0x80109a <device+0x25>
    d2dc:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <device+0x24>
    d2e0:	65 e8       	ldi	r22, 0x85	; 133
    d2e2:	75 e0       	ldi	r23, 0x05	; 5
    d2e4:	8b e9       	ldi	r24, 0x9B	; 155
    d2e6:	90 e1       	ldi	r25, 0x10	; 16
    d2e8:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    d2ec:	6b e8       	ldi	r22, 0x8B	; 139
    d2ee:	75 e0       	ldi	r23, 0x05	; 5
    d2f0:	8f ea       	ldi	r24, 0xAF	; 175
    d2f2:	90 e1       	ldi	r25, 0x10	; 16
    d2f4:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    d2f8:	0e 94 e1 80 	call	0x101c2	; 0x101c2 <save_setup_network()>
    d2fc:	6e e8       	ldi	r22, 0x8E	; 142
    d2fe:	75 e0       	ldi	r23, 0x05	; 5
    d300:	ce 01       	movw	r24, r28
    d302:	88 57       	subi	r24, 0x78	; 120
    d304:	9f 4f       	sbci	r25, 0xFF	; 255
    d306:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    d30a:	ce 01       	movw	r24, r28
    d30c:	88 57       	subi	r24, 0x78	; 120
    d30e:	9f 4f       	sbci	r25, 0xFF	; 255
    d310:	0e 94 99 81 	call	0x10332	; 0x10332 <device_set_name(char*)>
    d314:	ce 01       	movw	r24, r28
    d316:	8e 50       	subi	r24, 0x0E	; 14
    d318:	9f 4f       	sbci	r25, 0xFF	; 255
    d31a:	0e 94 80 81 	call	0x10300	; 0x10300 <device_get_name(char*)>
    d31e:	10 93 2e 0a 	sts	0x0A2E, r17	; 0x800a2e <default_ring>
    d322:	8f ef       	ldi	r24, 0xFF	; 255
    d324:	0e 94 84 46 	call	0x8d08	; 0x8d08 <set_default_ring(unsigned char)>
    d328:	02 ce       	rjmp	.-1020   	; 0xcf2e <setup+0x3fa>
    d32a:	6c e2       	ldi	r22, 0x2C	; 44
    d32c:	7a e5       	ldi	r23, 0x5A	; 90
    d32e:	ce 01       	movw	r24, r28
    d330:	88 57       	subi	r24, 0x78	; 120
    d332:	9f 4f       	sbci	r25, 0xFF	; 255
    d334:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d338:	c1 2c       	mov	r12, r1
    d33a:	ee 24       	eor	r14, r14
    d33c:	ea 94       	dec	r14
    d33e:	fe 2c       	mov	r15, r14
    d340:	00 ee       	ldi	r16, 0xE0	; 224
    d342:	17 e0       	ldi	r17, 0x07	; 7
    d344:	21 e0       	ldi	r18, 0x01	; 1
    d346:	46 e4       	ldi	r20, 0x46	; 70
    d348:	50 e0       	ldi	r21, 0x00	; 0
    d34a:	6e e1       	ldi	r22, 0x1E	; 30
    d34c:	70 e0       	ldi	r23, 0x00	; 0
    d34e:	47 c0       	rjmp	.+142    	; 0xd3de <setup+0x8aa>
    d350:	c0 5d       	subi	r28, 0xD0	; 208
    d352:	de 4f       	sbci	r29, 0xFE	; 254
    d354:	28 81       	ld	r18, Y
    d356:	c0 53       	subi	r28, 0x30	; 48
    d358:	d1 40       	sbci	r29, 0x01	; 1
    d35a:	23 30       	cpi	r18, 0x03	; 3
    d35c:	09 f0       	breq	.+2      	; 0xd360 <setup+0x82c>
    d35e:	5b c0       	rjmp	.+182    	; 0xd416 <setup+0x8e2>
    d360:	87 e6       	ldi	r24, 0x67	; 103
    d362:	9a e0       	ldi	r25, 0x0A	; 10
    d364:	0e 94 68 a8 	call	0x150d0	; 0x150d0 <SRAM_23LC::begin()>
    d368:	2b ea       	ldi	r18, 0xAB	; 171
    d36a:	40 e0       	ldi	r20, 0x00	; 0
    d36c:	50 e0       	ldi	r21, 0x00	; 0
    d36e:	ba 01       	movw	r22, r20
    d370:	87 e6       	ldi	r24, 0x67	; 103
    d372:	9a e0       	ldi	r25, 0x0A	; 10
    d374:	0e 94 ad a8 	call	0x1515a	; 0x1515a <SRAM_23LC::writeByte(unsigned long, unsigned char)>
    d378:	40 e0       	ldi	r20, 0x00	; 0
    d37a:	50 e0       	ldi	r21, 0x00	; 0
    d37c:	ba 01       	movw	r22, r20
    d37e:	87 e6       	ldi	r24, 0x67	; 103
    d380:	9a e0       	ldi	r25, 0x0A	; 10
    d382:	0e 94 88 a8 	call	0x15110	; 0x15110 <SRAM_23LC::readByte(unsigned long)>
    d386:	6f e1       	ldi	r22, 0x1F	; 31
    d388:	7a e5       	ldi	r23, 0x5A	; 90
    d38a:	8b 3a       	cpi	r24, 0xAB	; 171
    d38c:	71 f5       	brne	.+92     	; 0xd3ea <setup+0x8b6>
    d38e:	ce 01       	movw	r24, r28
    d390:	88 57       	subi	r24, 0x78	; 120
    d392:	9f 4f       	sbci	r25, 0xFF	; 255
    d394:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d398:	66 e9       	ldi	r22, 0x96	; 150
    d39a:	75 e0       	ldi	r23, 0x05	; 5
    d39c:	ce 01       	movw	r24, r28
    d39e:	88 57       	subi	r24, 0x78	; 120
    d3a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d3a2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    d3a6:	c1 2c       	mov	r12, r1
    d3a8:	ee 24       	eor	r14, r14
    d3aa:	ea 94       	dec	r14
    d3ac:	fe 2c       	mov	r15, r14
    d3ae:	00 ee       	ldi	r16, 0xE0	; 224
    d3b0:	17 e0       	ldi	r17, 0x07	; 7
    d3b2:	21 e0       	ldi	r18, 0x01	; 1
    d3b4:	40 e5       	ldi	r20, 0x50	; 80
    d3b6:	50 e0       	ldi	r21, 0x00	; 0
    d3b8:	6e e1       	ldi	r22, 0x1E	; 30
    d3ba:	70 e0       	ldi	r23, 0x00	; 0
    d3bc:	ce 01       	movw	r24, r28
    d3be:	88 57       	subi	r24, 0x78	; 120
    d3c0:	9f 4f       	sbci	r25, 0xFF	; 255
    d3c2:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d3c6:	6f e2       	ldi	r22, 0x2F	; 47
    d3c8:	76 e5       	ldi	r23, 0x56	; 86
    d3ca:	ce 01       	movw	r24, r28
    d3cc:	88 57       	subi	r24, 0x78	; 120
    d3ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d3d0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d3d4:	21 e0       	ldi	r18, 0x01	; 1
    d3d6:	40 e5       	ldi	r20, 0x50	; 80
    d3d8:	50 e0       	ldi	r21, 0x00	; 0
    d3da:	62 ed       	ldi	r22, 0xD2	; 210
    d3dc:	70 e0       	ldi	r23, 0x00	; 0
    d3de:	ce 01       	movw	r24, r28
    d3e0:	88 57       	subi	r24, 0x78	; 120
    d3e2:	9f 4f       	sbci	r25, 0xFF	; 255
    d3e4:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d3e8:	a2 cd       	rjmp	.-1212   	; 0xcf2e <setup+0x3fa>
    d3ea:	ce 01       	movw	r24, r28
    d3ec:	88 57       	subi	r24, 0x78	; 120
    d3ee:	9f 4f       	sbci	r25, 0xFF	; 255
    d3f0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d3f4:	62 e3       	ldi	r22, 0x32	; 50
    d3f6:	76 e5       	ldi	r23, 0x56	; 86
    d3f8:	ce 01       	movw	r24, r28
    d3fa:	88 57       	subi	r24, 0x78	; 120
    d3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    d3fe:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <strcat_P>
    d402:	c1 2c       	mov	r12, r1
    d404:	ee 24       	eor	r14, r14
    d406:	ea 94       	dec	r14
    d408:	fe 2c       	mov	r15, r14
    d40a:	00 e0       	ldi	r16, 0x00	; 0
    d40c:	18 ef       	ldi	r17, 0xF8	; 248
    d40e:	21 e0       	ldi	r18, 0x01	; 1
    d410:	40 e5       	ldi	r20, 0x50	; 80
    d412:	50 e0       	ldi	r21, 0x00	; 0
    d414:	9a cf       	rjmp	.-204    	; 0xd34a <setup+0x816>
    d416:	c0 5d       	subi	r28, 0xD0	; 208
    d418:	de 4f       	sbci	r29, 0xFE	; 254
    d41a:	68 81       	ld	r22, Y
    d41c:	c0 53       	subi	r28, 0x30	; 48
    d41e:	d1 40       	sbci	r29, 0x01	; 1
    d420:	64 30       	cpi	r22, 0x04	; 4
    d422:	09 f0       	breq	.+2      	; 0xd426 <setup+0x8f2>
    d424:	64 c2       	rjmp	.+1224   	; 0xd8ee <setup+0xdba>
    d426:	88 e5       	ldi	r24, 0x58	; 88
    d428:	9a e0       	ldi	r25, 0x0A	; 10
    d42a:	0e 94 ac a9 	call	0x15358	; 0x15358 <EEPROM_CAT25::begin()>
    d42e:	2a eb       	ldi	r18, 0xBA	; 186
    d430:	40 e0       	ldi	r20, 0x00	; 0
    d432:	50 e0       	ldi	r21, 0x00	; 0
    d434:	ba 01       	movw	r22, r20
    d436:	88 e5       	ldi	r24, 0x58	; 88
    d438:	9a e0       	ldi	r25, 0x0A	; 10
    d43a:	0e 94 99 aa 	call	0x15532	; 0x15532 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>
    d43e:	40 e0       	ldi	r20, 0x00	; 0
    d440:	50 e0       	ldi	r21, 0x00	; 0
    d442:	ba 01       	movw	r22, r20
    d444:	88 e5       	ldi	r24, 0x58	; 88
    d446:	9a e0       	ldi	r25, 0x0A	; 10
    d448:	0e 94 65 aa 	call	0x154ca	; 0x154ca <EEPROM_CAT25::readByte(unsigned long)>
    d44c:	6f e0       	ldi	r22, 0x0F	; 15
    d44e:	7a e5       	ldi	r23, 0x5A	; 90
    d450:	8a 3b       	cpi	r24, 0xBA	; 186
    d452:	e9 f4       	brne	.+58     	; 0xd48e <setup+0x95a>
    d454:	ce 01       	movw	r24, r28
    d456:	88 57       	subi	r24, 0x78	; 120
    d458:	9f 4f       	sbci	r25, 0xFF	; 255
    d45a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d45e:	6f e2       	ldi	r22, 0x2F	; 47
    d460:	76 e5       	ldi	r23, 0x56	; 86
    d462:	ce 01       	movw	r24, r28
    d464:	88 57       	subi	r24, 0x78	; 120
    d466:	9f 4f       	sbci	r25, 0xFF	; 255
    d468:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <strcat_P>
    d46c:	c1 2c       	mov	r12, r1
    d46e:	ee 24       	eor	r14, r14
    d470:	ea 94       	dec	r14
    d472:	fe 2c       	mov	r15, r14
    d474:	00 ee       	ldi	r16, 0xE0	; 224
    d476:	17 e0       	ldi	r17, 0x07	; 7
    d478:	21 e0       	ldi	r18, 0x01	; 1
    d47a:	4a e5       	ldi	r20, 0x5A	; 90
    d47c:	50 e0       	ldi	r21, 0x00	; 0
    d47e:	6e e1       	ldi	r22, 0x1E	; 30
    d480:	70 e0       	ldi	r23, 0x00	; 0
    d482:	ce 01       	movw	r24, r28
    d484:	88 57       	subi	r24, 0x78	; 120
    d486:	9f 4f       	sbci	r25, 0xFF	; 255
    d488:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d48c:	4d c0       	rjmp	.+154    	; 0xd528 <setup+0x9f4>
    d48e:	ce 01       	movw	r24, r28
    d490:	88 57       	subi	r24, 0x78	; 120
    d492:	9f 4f       	sbci	r25, 0xFF	; 255
    d494:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d498:	62 e3       	ldi	r22, 0x32	; 50
    d49a:	76 e5       	ldi	r23, 0x56	; 86
    d49c:	ce 01       	movw	r24, r28
    d49e:	88 57       	subi	r24, 0x78	; 120
    d4a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d4a2:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <strcat_P>
    d4a6:	c1 2c       	mov	r12, r1
    d4a8:	ee 24       	eor	r14, r14
    d4aa:	ea 94       	dec	r14
    d4ac:	fe 2c       	mov	r15, r14
    d4ae:	00 e0       	ldi	r16, 0x00	; 0
    d4b0:	18 ef       	ldi	r17, 0xF8	; 248
    d4b2:	e2 cf       	rjmp	.-60     	; 0xd478 <setup+0x944>
    d4b4:	6a ee       	ldi	r22, 0xEA	; 234
    d4b6:	7a e5       	ldi	r23, 0x5A	; 90
    d4b8:	ce 01       	movw	r24, r28
    d4ba:	88 57       	subi	r24, 0x78	; 120
    d4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d4be:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d4c2:	c1 2c       	mov	r12, r1
    d4c4:	ee 24       	eor	r14, r14
    d4c6:	ea 94       	dec	r14
    d4c8:	fe 2c       	mov	r15, r14
    d4ca:	00 ee       	ldi	r16, 0xE0	; 224
    d4cc:	17 e0       	ldi	r17, 0x07	; 7
    d4ce:	21 e0       	ldi	r18, 0x01	; 1
    d4d0:	44 e6       	ldi	r20, 0x64	; 100
    d4d2:	50 e0       	ldi	r21, 0x00	; 0
    d4d4:	6e e1       	ldi	r22, 0x1E	; 30
    d4d6:	70 e0       	ldi	r23, 0x00	; 0
    d4d8:	ce 01       	movw	r24, r28
    d4da:	88 57       	subi	r24, 0x78	; 120
    d4dc:	9f 4f       	sbci	r25, 0xFF	; 255
    d4de:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d4e2:	0e 94 3a 80 	call	0x10074	; 0x10074 <load_setup_network()>
    d4e6:	4a e1       	ldi	r20, 0x1A	; 26
    d4e8:	51 e1       	ldi	r21, 0x11	; 17
    d4ea:	26 e0       	ldi	r18, 0x06	; 6
    d4ec:	90 e0       	ldi	r25, 0x00	; 0
    d4ee:	80 e0       	ldi	r24, 0x00	; 0
    d4f0:	fc 01       	movw	r30, r24
    d4f2:	ee 0f       	add	r30, r30
    d4f4:	ff 1f       	adc	r31, r31
    d4f6:	e4 0f       	add	r30, r20
    d4f8:	f5 1f       	adc	r31, r21
    d4fa:	60 e2       	ldi	r22, 0x20	; 32
    d4fc:	7e e4       	ldi	r23, 0x4E	; 78
    d4fe:	70 87       	std	Z+8, r23	; 0x08
    d500:	67 83       	std	Z+7, r22	; 0x07
    d502:	01 96       	adiw	r24, 0x01	; 1
    d504:	8a 30       	cpi	r24, 0x0A	; 10
    d506:	91 05       	cpc	r25, r1
    d508:	99 f7       	brne	.-26     	; 0xd4f0 <setup+0x9bc>
    d50a:	21 50       	subi	r18, 0x01	; 1
    d50c:	42 5e       	subi	r20, 0xE2	; 226
    d50e:	5f 4f       	sbci	r21, 0xFF	; 255
    d510:	21 11       	cpse	r18, r1
    d512:	ec cf       	rjmp	.-40     	; 0xd4ec <setup+0x9b8>
    d514:	10 92 4f 0a 	sts	0x0A4F, r1	; 0x800a4f <last_output_update>
    d518:	10 92 50 0a 	sts	0x0A50, r1	; 0x800a50 <last_output_update+0x1>
    d51c:	10 92 51 0a 	sts	0x0A51, r1	; 0x800a51 <last_output_update+0x2>
    d520:	10 92 52 0a 	sts	0x0A52, r1	; 0x800a52 <last_output_update+0x3>
    d524:	10 92 53 0a 	sts	0x0A53, r1	; 0x800a53 <last_output_update+0x4>
    d528:	c0 5d       	subi	r28, 0xD0	; 208
    d52a:	de 4f       	sbci	r29, 0xFE	; 254
    d52c:	28 81       	ld	r18, Y
    d52e:	c0 53       	subi	r28, 0x30	; 48
    d530:	d1 40       	sbci	r29, 0x01	; 1
    d532:	2f 5f       	subi	r18, 0xFF	; 255
    d534:	c0 5d       	subi	r28, 0xD0	; 208
    d536:	de 4f       	sbci	r29, 0xFE	; 254
    d538:	28 83       	st	Y, r18
    d53a:	c0 53       	subi	r28, 0x30	; 48
    d53c:	d1 40       	sbci	r29, 0x01	; 1
    d53e:	6f e0       	ldi	r22, 0x0F	; 15
    d540:	66 0e       	add	r6, r22
    d542:	71 1c       	adc	r7, r1
    d544:	20 31       	cpi	r18, 0x10	; 16
    d546:	09 f0       	breq	.+2      	; 0xd54a <setup+0xa16>
    d548:	aa cb       	rjmp	.-2220   	; 0xcc9e <setup+0x16a>
    d54a:	64 ef       	ldi	r22, 0xF4	; 244
    d54c:	71 e0       	ldi	r23, 0x01	; 1
    d54e:	80 e0       	ldi	r24, 0x00	; 0
    d550:	90 e0       	ldi	r25, 0x00	; 0
    d552:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
    d556:	0e 94 2f 3a 	call	0x745e	; 0x745e <MenuPrepareStyle()>
    d55a:	81 e0       	ldi	r24, 0x01	; 1
    d55c:	0e 94 6d 54 	call	0xa8da	; 0xa8da <draw_menu(bool)>
    d560:	81 e0       	ldi	r24, 0x01	; 1
    d562:	80 93 43 0a 	sts	0x0A43, r24	; 0x800a43 <a2d_run_now>
    d566:	ce 5c       	subi	r28, 0xCE	; 206
    d568:	de 4f       	sbci	r29, 0xFE	; 254
    d56a:	0f b6       	in	r0, 0x3f	; 63
    d56c:	f8 94       	cli
    d56e:	de bf       	out	0x3e, r29	; 62
    d570:	0f be       	out	0x3f, r0	; 63
    d572:	cd bf       	out	0x3d, r28	; 61
    d574:	df 91       	pop	r29
    d576:	cf 91       	pop	r28
    d578:	1f 91       	pop	r17
    d57a:	0f 91       	pop	r16
    d57c:	ff 90       	pop	r15
    d57e:	ef 90       	pop	r14
    d580:	df 90       	pop	r13
    d582:	cf 90       	pop	r12
    d584:	bf 90       	pop	r11
    d586:	af 90       	pop	r10
    d588:	9f 90       	pop	r9
    d58a:	8f 90       	pop	r8
    d58c:	7f 90       	pop	r7
    d58e:	6f 90       	pop	r6
    d590:	5f 90       	pop	r5
    d592:	4f 90       	pop	r4
    d594:	3f 90       	pop	r3
    d596:	2f 90       	pop	r2
    d598:	08 95       	ret
    d59a:	6c ef       	ldi	r22, 0xFC	; 252
    d59c:	7a e5       	ldi	r23, 0x5A	; 90
    d59e:	ce 01       	movw	r24, r28
    d5a0:	88 57       	subi	r24, 0x78	; 120
    d5a2:	9f 4f       	sbci	r25, 0xFF	; 255
    d5a4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d5a8:	c1 2c       	mov	r12, r1
    d5aa:	ee 24       	eor	r14, r14
    d5ac:	ea 94       	dec	r14
    d5ae:	fe 2c       	mov	r15, r14
    d5b0:	00 ee       	ldi	r16, 0xE0	; 224
    d5b2:	17 e0       	ldi	r17, 0x07	; 7
    d5b4:	21 e0       	ldi	r18, 0x01	; 1
    d5b6:	4e e6       	ldi	r20, 0x6E	; 110
    d5b8:	50 e0       	ldi	r21, 0x00	; 0
    d5ba:	6e e1       	ldi	r22, 0x1E	; 30
    d5bc:	70 e0       	ldi	r23, 0x00	; 0
    d5be:	ce 01       	movw	r24, r28
    d5c0:	88 57       	subi	r24, 0x78	; 120
    d5c2:	9f 4f       	sbci	r25, 0xFF	; 255
    d5c4:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d5c8:	81 ea       	ldi	r24, 0xA1	; 161
    d5ca:	9b e0       	ldi	r25, 0x0B	; 11
    d5cc:	0e 94 49 94 	call	0x12892	; 0x12892 <LCDWIKI_GUI::Get_Display_Height() const>
    d5d0:	8c 01       	movw	r16, r24
    d5d2:	81 ea       	ldi	r24, 0xA1	; 161
    d5d4:	9b e0       	ldi	r25, 0x0B	; 11
    d5d6:	0e 94 e8 93 	call	0x127d0	; 0x127d0 <LCDWIKI_GUI::Get_Display_Width() const>
    d5da:	7c 01       	movw	r14, r24
    d5dc:	81 ea       	ldi	r24, 0xA1	; 161
    d5de:	9b e0       	ldi	r25, 0x0B	; 11
    d5e0:	0e 94 f2 a2 	call	0x145e4	; 0x145e4 <LCDWIKI_KBV::Get_Rotation() const>
    d5e4:	98 01       	movw	r18, r16
    d5e6:	a7 01       	movw	r20, r14
    d5e8:	68 2f       	mov	r22, r24
    d5ea:	83 e8       	ldi	r24, 0x83	; 131
    d5ec:	9b e0       	ldi	r25, 0x0B	; 11
    d5ee:	0e 94 c5 a4 	call	0x1498a	; 0x1498a <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>
    d5f2:	9a cf       	rjmp	.-204    	; 0xd528 <setup+0x9f4>
    d5f4:	62 e3       	ldi	r22, 0x32	; 50
    d5f6:	76 e5       	ldi	r23, 0x56	; 86
    d5f8:	ce 01       	movw	r24, r28
    d5fa:	88 57       	subi	r24, 0x78	; 120
    d5fc:	9f 4f       	sbci	r25, 0xFF	; 255
    d5fe:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d602:	c1 2c       	mov	r12, r1
    d604:	ee 24       	eor	r14, r14
    d606:	ea 94       	dec	r14
    d608:	fe 2c       	mov	r15, r14
    d60a:	00 e0       	ldi	r16, 0x00	; 0
    d60c:	18 ef       	ldi	r17, 0xF8	; 248
    d60e:	21 e0       	ldi	r18, 0x01	; 1
    d610:	48 e7       	ldi	r20, 0x78	; 120
    d612:	50 e0       	ldi	r21, 0x00	; 0
    d614:	60 ea       	ldi	r22, 0xA0	; 160
    d616:	70 e0       	ldi	r23, 0x00	; 0
    d618:	ce 01       	movw	r24, r28
    d61a:	88 57       	subi	r24, 0x78	; 120
    d61c:	9f 4f       	sbci	r25, 0xFF	; 255
    d61e:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d622:	82 e0       	ldi	r24, 0x02	; 2
    d624:	0e 94 ba 4b 	call	0x9774	; 0x9774 <selftest_set_0(unsigned char)>
    d628:	7f cf       	rjmp	.-258    	; 0xd528 <setup+0x9f4>
    d62a:	c0 5d       	subi	r28, 0xD0	; 208
    d62c:	de 4f       	sbci	r29, 0xFE	; 254
    d62e:	88 81       	ld	r24, Y
    d630:	c0 53       	subi	r28, 0x30	; 48
    d632:	d1 40       	sbci	r29, 0x01	; 1
    d634:	88 30       	cpi	r24, 0x08	; 8
    d636:	c1 f5       	brne	.+112    	; 0xd6a8 <setup+0xb74>
    d638:	6e ec       	ldi	r22, 0xCE	; 206
    d63a:	7a e5       	ldi	r23, 0x5A	; 90
    d63c:	ce 01       	movw	r24, r28
    d63e:	88 57       	subi	r24, 0x78	; 120
    d640:	9f 4f       	sbci	r25, 0xFF	; 255
    d642:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d646:	c1 2c       	mov	r12, r1
    d648:	ee 24       	eor	r14, r14
    d64a:	ea 94       	dec	r14
    d64c:	fe 2c       	mov	r15, r14
    d64e:	00 ee       	ldi	r16, 0xE0	; 224
    d650:	17 e0       	ldi	r17, 0x07	; 7
    d652:	21 e0       	ldi	r18, 0x01	; 1
    d654:	42 e8       	ldi	r20, 0x82	; 130
    d656:	50 e0       	ldi	r21, 0x00	; 0
    d658:	6e e1       	ldi	r22, 0x1E	; 30
    d65a:	70 e0       	ldi	r23, 0x00	; 0
    d65c:	ce 01       	movw	r24, r28
    d65e:	88 57       	subi	r24, 0x78	; 120
    d660:	9f 4f       	sbci	r25, 0xFF	; 255
    d662:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d666:	10 92 19 11 	sts	0x1119, r1	; 0x801119 <Global_HWwirenum>
    d66a:	80 e0       	ldi	r24, 0x00	; 0
    d66c:	0e 94 48 8a 	call	0x11490	; 0x11490 <one_hw_search_device(unsigned char)>
    d670:	0e 94 02 89 	call	0x11204	; 0x11204 <tds_update_associate()>
    d674:	60 ea       	ldi	r22, 0xA0	; 160
    d676:	75 e0       	ldi	r23, 0x05	; 5
    d678:	ce 01       	movw	r24, r28
    d67a:	88 57       	subi	r24, 0x78	; 120
    d67c:	9f 4f       	sbci	r25, 0xFF	; 255
    d67e:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
    d682:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <Global_HWwirenum>
itoa():
    d686:	4a e0       	ldi	r20, 0x0A	; 10
    d688:	b5 01       	movw	r22, r10
    d68a:	90 e0       	ldi	r25, 0x00	; 0
    d68c:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
setup():
    d690:	b5 01       	movw	r22, r10
    d692:	ce 01       	movw	r24, r28
    d694:	88 57       	subi	r24, 0x78	; 120
    d696:	9f 4f       	sbci	r25, 0xFF	; 255
    d698:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
    d69c:	21 e0       	ldi	r18, 0x01	; 1
    d69e:	42 e8       	ldi	r20, 0x82	; 130
    d6a0:	50 e0       	ldi	r21, 0x00	; 0
    d6a2:	60 ea       	ldi	r22, 0xA0	; 160
    d6a4:	70 e0       	ldi	r23, 0x00	; 0
    d6a6:	ed ce       	rjmp	.-550    	; 0xd482 <setup+0x94e>
    d6a8:	c0 5d       	subi	r28, 0xD0	; 208
    d6aa:	de 4f       	sbci	r29, 0xFE	; 254
    d6ac:	98 81       	ld	r25, Y
    d6ae:	c0 53       	subi	r28, 0x30	; 48
    d6b0:	d1 40       	sbci	r29, 0x01	; 1
    d6b2:	99 30       	cpi	r25, 0x09	; 9
    d6b4:	09 f0       	breq	.+2      	; 0xd6b8 <setup+0xb84>
    d6b6:	77 c1       	rjmp	.+750    	; 0xd9a6 <setup+0xe72>
    d6b8:	61 e0       	ldi	r22, 0x01	; 1
    d6ba:	86 e0       	ldi	r24, 0x06	; 6
    d6bc:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
    d6c0:	6a e0       	ldi	r22, 0x0A	; 10
    d6c2:	70 e0       	ldi	r23, 0x00	; 0
    d6c4:	80 e0       	ldi	r24, 0x00	; 0
    d6c6:	90 e0       	ldi	r25, 0x00	; 0
    d6c8:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
    d6cc:	60 e0       	ldi	r22, 0x00	; 0
    d6ce:	86 e0       	ldi	r24, 0x06	; 6
    d6d0:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
    d6d4:	6a e0       	ldi	r22, 0x0A	; 10
    d6d6:	70 e0       	ldi	r23, 0x00	; 0
    d6d8:	80 e0       	ldi	r24, 0x00	; 0
    d6da:	90 e0       	ldi	r25, 0x00	; 0
    d6dc:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
    d6e0:	61 e0       	ldi	r22, 0x01	; 1
    d6e2:	86 e0       	ldi	r24, 0x06	; 6
    d6e4:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
    d6e8:	64 e6       	ldi	r22, 0x64	; 100
    d6ea:	70 e0       	ldi	r23, 0x00	; 0
    d6ec:	80 e0       	ldi	r24, 0x00	; 0
    d6ee:	90 e0       	ldi	r25, 0x00	; 0
    d6f0:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
_ZN13EthernetClass4initEh():
    d6f4:	8f e0       	ldi	r24, 0x0F	; 15
    d6f6:	80 93 7b 12 	sts	0x127B, r24	; 0x80127b <Ethernet+0xc>
setup():
    d6fa:	6f e7       	ldi	r22, 0x7F	; 127
    d6fc:	70 e1       	ldi	r23, 0x10	; 16
    d6fe:	ce 01       	movw	r24, r28
    d700:	8e 50       	subi	r24, 0x0E	; 14
    d702:	9f 4f       	sbci	r25, 0xFF	; 255
    d704:	0e 94 b9 cf 	call	0x19f72	; 0x19f72 <IPAddress::IPAddress(unsigned char const*)>
    d708:	67 e8       	ldi	r22, 0x87	; 135
    d70a:	70 e1       	ldi	r23, 0x10	; 16
    d70c:	ce 01       	movw	r24, r28
    d70e:	84 5e       	subi	r24, 0xE4	; 228
    d710:	9e 4f       	sbci	r25, 0xFE	; 254
    d712:	0e 94 b9 cf 	call	0x19f72	; 0x19f72 <IPAddress::IPAddress(unsigned char const*)>
    d716:	63 e8       	ldi	r22, 0x83	; 131
    d718:	70 e1       	ldi	r23, 0x10	; 16
    d71a:	ce 01       	movw	r24, r28
    d71c:	8e 5d       	subi	r24, 0xDE	; 222
    d71e:	9e 4f       	sbci	r25, 0xFE	; 254
    d720:	0e 94 b9 cf 	call	0x19f72	; 0x19f72 <IPAddress::IPAddress(unsigned char const*)>
    d724:	6b e7       	ldi	r22, 0x7B	; 123
    d726:	70 e1       	ldi	r23, 0x10	; 16
    d728:	ce 01       	movw	r24, r28
    d72a:	88 5d       	subi	r24, 0xD8	; 216
    d72c:	9e 4f       	sbci	r25, 0xFE	; 254
    d72e:	0e 94 b9 cf 	call	0x19f72	; 0x19f72 <IPAddress::IPAddress(unsigned char const*)>
    d732:	be 01       	movw	r22, r28
    d734:	6e 50       	subi	r22, 0x0E	; 14
    d736:	7f 4f       	sbci	r23, 0xFF	; 255
    d738:	7b 01       	movw	r14, r22
    d73a:	8e 01       	movw	r16, r28
    d73c:	04 5e       	subi	r16, 0xE4	; 228
    d73e:	1e 4f       	sbci	r17, 0xFE	; 254
    d740:	9e 01       	movw	r18, r28
    d742:	2e 5d       	subi	r18, 0xDE	; 222
    d744:	3e 4f       	sbci	r19, 0xFE	; 254
    d746:	ae 01       	movw	r20, r28
    d748:	48 5d       	subi	r20, 0xD8	; 216
    d74a:	5e 4f       	sbci	r21, 0xFE	; 254
    d74c:	65 e7       	ldi	r22, 0x75	; 117
    d74e:	70 e1       	ldi	r23, 0x10	; 16
    d750:	8f e6       	ldi	r24, 0x6F	; 111
    d752:	92 e1       	ldi	r25, 0x12	; 18
    d754:	0e 94 00 ae 	call	0x15c00	; 0x15c00 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>
    d758:	6c ea       	ldi	r22, 0xAC	; 172
    d75a:	7a e5       	ldi	r23, 0x5A	; 90
    d75c:	ce 01       	movw	r24, r28
    d75e:	88 57       	subi	r24, 0x78	; 120
    d760:	9f 4f       	sbci	r25, 0xFF	; 255
    d762:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d766:	c1 2c       	mov	r12, r1
    d768:	ee 24       	eor	r14, r14
    d76a:	ea 94       	dec	r14
    d76c:	fe 2c       	mov	r15, r14
    d76e:	00 ee       	ldi	r16, 0xE0	; 224
    d770:	17 e0       	ldi	r17, 0x07	; 7
    d772:	21 e0       	ldi	r18, 0x01	; 1
    d774:	4c e8       	ldi	r20, 0x8C	; 140
    d776:	50 e0       	ldi	r21, 0x00	; 0
    d778:	6e e1       	ldi	r22, 0x1E	; 30
    d77a:	70 e0       	ldi	r23, 0x00	; 0
    d77c:	ce 01       	movw	r24, r28
    d77e:	88 57       	subi	r24, 0x78	; 120
    d780:	9f 4f       	sbci	r25, 0xFF	; 255
    d782:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d786:	64 e6       	ldi	r22, 0x64	; 100
    d788:	70 e0       	ldi	r23, 0x00	; 0
    d78a:	80 e0       	ldi	r24, 0x00	; 0
    d78c:	90 e0       	ldi	r25, 0x00	; 0
    d78e:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
    d792:	ca ce       	rjmp	.-620    	; 0xd528 <setup+0x9f4>
    d794:	85 e0       	ldi	r24, 0x05	; 5
    d796:	0e 94 ba 4b 	call	0x9774	; 0x9774 <selftest_set_0(unsigned char)>
    d79a:	3c c1       	rjmp	.+632    	; 0xda14 <setup+0xee0>
    d79c:	6f e2       	ldi	r22, 0x2F	; 47
    d79e:	76 e5       	ldi	r23, 0x56	; 86
    d7a0:	ce 01       	movw	r24, r28
    d7a2:	88 57       	subi	r24, 0x78	; 120
    d7a4:	9f 4f       	sbci	r25, 0xFF	; 255
    d7a6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d7aa:	c1 2c       	mov	r12, r1
    d7ac:	ee 24       	eor	r14, r14
    d7ae:	ea 94       	dec	r14
    d7b0:	fe 2c       	mov	r15, r14
    d7b2:	00 ee       	ldi	r16, 0xE0	; 224
    d7b4:	17 e0       	ldi	r17, 0x07	; 7
    d7b6:	65 c1       	rjmp	.+714    	; 0xda82 <setup+0xf4e>
    d7b8:	c0 5d       	subi	r28, 0xD0	; 208
    d7ba:	de 4f       	sbci	r29, 0xFE	; 254
    d7bc:	68 81       	ld	r22, Y
    d7be:	c0 53       	subi	r28, 0x30	; 48
    d7c0:	d1 40       	sbci	r29, 0x01	; 1
    d7c2:	6b 30       	cpi	r22, 0x0B	; 11
    d7c4:	89 f4       	brne	.+34     	; 0xd7e8 <setup+0xcb4>
    d7c6:	6c e8       	ldi	r22, 0x8C	; 140
    d7c8:	7a e5       	ldi	r23, 0x5A	; 90
    d7ca:	ce 01       	movw	r24, r28
    d7cc:	88 57       	subi	r24, 0x78	; 120
    d7ce:	9f 4f       	sbci	r25, 0xFF	; 255
    d7d0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d7d4:	c1 2c       	mov	r12, r1
    d7d6:	ee 24       	eor	r14, r14
    d7d8:	ea 94       	dec	r14
    d7da:	fe 2c       	mov	r15, r14
    d7dc:	00 ee       	ldi	r16, 0xE0	; 224
    d7de:	17 e0       	ldi	r17, 0x07	; 7
    d7e0:	21 e0       	ldi	r18, 0x01	; 1
    d7e2:	40 ea       	ldi	r20, 0xA0	; 160
    d7e4:	50 e0       	ldi	r21, 0x00	; 0
    d7e6:	4b ce       	rjmp	.-874    	; 0xd47e <setup+0x94a>
    d7e8:	c0 5d       	subi	r28, 0xD0	; 208
    d7ea:	de 4f       	sbci	r29, 0xFE	; 254
    d7ec:	78 81       	ld	r23, Y
    d7ee:	c0 53       	subi	r28, 0x30	; 48
    d7f0:	d1 40       	sbci	r29, 0x01	; 1
    d7f2:	7c 30       	cpi	r23, 0x0C	; 12
    d7f4:	09 f0       	breq	.+2      	; 0xd7f8 <setup+0xcc4>
    d7f6:	49 c1       	rjmp	.+658    	; 0xda8a <setup+0xf56>
    d7f8:	6f e7       	ldi	r22, 0x7F	; 127
    d7fa:	7a e5       	ldi	r23, 0x5A	; 90
    d7fc:	ce 01       	movw	r24, r28
    d7fe:	88 57       	subi	r24, 0x78	; 120
    d800:	9f 4f       	sbci	r25, 0xFF	; 255
    d802:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d806:	c1 2c       	mov	r12, r1
    d808:	ee 24       	eor	r14, r14
    d80a:	ea 94       	dec	r14
    d80c:	fe 2c       	mov	r15, r14
    d80e:	00 ee       	ldi	r16, 0xE0	; 224
    d810:	17 e0       	ldi	r17, 0x07	; 7
    d812:	21 e0       	ldi	r18, 0x01	; 1
    d814:	4a ea       	ldi	r20, 0xAA	; 170
    d816:	50 e0       	ldi	r21, 0x00	; 0
    d818:	32 ce       	rjmp	.-924    	; 0xd47e <setup+0x94a>
    d81a:	6f e2       	ldi	r22, 0x2F	; 47
    d81c:	76 e5       	ldi	r23, 0x56	; 86
    d81e:	ce 01       	movw	r24, r28
    d820:	88 57       	subi	r24, 0x78	; 120
    d822:	9f 4f       	sbci	r25, 0xFF	; 255
    d824:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d828:	c1 2c       	mov	r12, r1
    d82a:	ee 24       	eor	r14, r14
    d82c:	ea 94       	dec	r14
    d82e:	fe 2c       	mov	r15, r14
    d830:	00 ee       	ldi	r16, 0xE0	; 224
    d832:	17 e0       	ldi	r17, 0x07	; 7
    d834:	21 e0       	ldi	r18, 0x01	; 1
    d836:	4e eb       	ldi	r20, 0xBE	; 190
    d838:	50 e0       	ldi	r21, 0x00	; 0
    d83a:	60 ea       	ldi	r22, 0xA0	; 160
    d83c:	70 e0       	ldi	r23, 0x00	; 0
    d83e:	ce 01       	movw	r24, r28
    d840:	88 57       	subi	r24, 0x78	; 120
    d842:	9f 4f       	sbci	r25, 0xFF	; 255
    d844:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d848:	81 e0       	ldi	r24, 0x01	; 1
    d84a:	aa c0       	rjmp	.+340    	; 0xd9a0 <setup+0xe6c>
    d84c:	c0 5d       	subi	r28, 0xD0	; 208
    d84e:	de 4f       	sbci	r29, 0xFE	; 254
    d850:	98 81       	ld	r25, Y
    d852:	c0 53       	subi	r28, 0x30	; 48
    d854:	d1 40       	sbci	r29, 0x01	; 1
    d856:	9f 30       	cpi	r25, 0x0F	; 15
    d858:	09 f0       	breq	.+2      	; 0xd85c <setup+0xd28>
    d85a:	66 ce       	rjmp	.-820    	; 0xd528 <setup+0x9f4>
    d85c:	6a e4       	ldi	r22, 0x4A	; 74
    d85e:	7a e5       	ldi	r23, 0x5A	; 90
    d860:	ce 01       	movw	r24, r28
    d862:	88 57       	subi	r24, 0x78	; 120
    d864:	9f 4f       	sbci	r25, 0xFF	; 255
    d866:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d86a:	c1 2c       	mov	r12, r1
    d86c:	ee 24       	eor	r14, r14
    d86e:	ea 94       	dec	r14
    d870:	fe 2c       	mov	r15, r14
    d872:	00 ee       	ldi	r16, 0xE0	; 224
    d874:	17 e0       	ldi	r17, 0x07	; 7
    d876:	21 e0       	ldi	r18, 0x01	; 1
    d878:	48 ec       	ldi	r20, 0xC8	; 200
    d87a:	50 e0       	ldi	r21, 0x00	; 0
    d87c:	6e e1       	ldi	r22, 0x1E	; 30
    d87e:	70 e0       	ldi	r23, 0x00	; 0
    d880:	ce 01       	movw	r24, r28
    d882:	88 57       	subi	r24, 0x78	; 120
    d884:	9f 4f       	sbci	r25, 0xFF	; 255
    d886:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d88a:	8b ed       	ldi	r24, 0xDB	; 219
    d88c:	9f e0       	ldi	r25, 0x0F	; 15
    d88e:	0e 94 8b c2 	call	0x18516	; 0x18516 <RTC_DS1307::isrunning()>
    d892:	88 23       	and	r24, r24
    d894:	99 f0       	breq	.+38     	; 0xd8bc <setup+0xd88>
    d896:	6f e2       	ldi	r22, 0x2F	; 47
    d898:	76 e5       	ldi	r23, 0x56	; 86
    d89a:	ce 01       	movw	r24, r28
    d89c:	88 57       	subi	r24, 0x78	; 120
    d89e:	9f 4f       	sbci	r25, 0xFF	; 255
    d8a0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d8a4:	21 e0       	ldi	r18, 0x01	; 1
    d8a6:	48 ec       	ldi	r20, 0xC8	; 200
    d8a8:	50 e0       	ldi	r21, 0x00	; 0
    d8aa:	60 ea       	ldi	r22, 0xA0	; 160
    d8ac:	70 e0       	ldi	r23, 0x00	; 0
    d8ae:	ce 01       	movw	r24, r28
    d8b0:	88 57       	subi	r24, 0x78	; 120
    d8b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d8b4:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d8b8:	80 e0       	ldi	r24, 0x00	; 0
    d8ba:	72 c0       	rjmp	.+228    	; 0xd9a0 <setup+0xe6c>
    d8bc:	62 e3       	ldi	r22, 0x32	; 50
    d8be:	76 e5       	ldi	r23, 0x56	; 86
    d8c0:	ce 01       	movw	r24, r28
    d8c2:	88 57       	subi	r24, 0x78	; 120
    d8c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d8c6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d8ca:	c1 2c       	mov	r12, r1
    d8cc:	ee 24       	eor	r14, r14
    d8ce:	ea 94       	dec	r14
    d8d0:	fe 2c       	mov	r15, r14
    d8d2:	00 e0       	ldi	r16, 0x00	; 0
    d8d4:	18 ef       	ldi	r17, 0xF8	; 248
    d8d6:	21 e0       	ldi	r18, 0x01	; 1
    d8d8:	48 ec       	ldi	r20, 0xC8	; 200
    d8da:	50 e0       	ldi	r21, 0x00	; 0
    d8dc:	60 ea       	ldi	r22, 0xA0	; 160
    d8de:	70 e0       	ldi	r23, 0x00	; 0
    d8e0:	ce 01       	movw	r24, r28
    d8e2:	88 57       	subi	r24, 0x78	; 120
    d8e4:	9f 4f       	sbci	r25, 0xFF	; 255
    d8e6:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d8ea:	80 e0       	ldi	r24, 0x00	; 0
    d8ec:	9b ce       	rjmp	.-714    	; 0xd624 <setup+0xaf0>
    d8ee:	c0 5d       	subi	r28, 0xD0	; 208
    d8f0:	de 4f       	sbci	r29, 0xFE	; 254
    d8f2:	78 81       	ld	r23, Y
    d8f4:	c0 53       	subi	r28, 0x30	; 48
    d8f6:	d1 40       	sbci	r29, 0x01	; 1
    d8f8:	75 30       	cpi	r23, 0x05	; 5
    d8fa:	09 f4       	brne	.+2      	; 0xd8fe <setup+0xdca>
    d8fc:	db cd       	rjmp	.-1098   	; 0xd4b4 <setup+0x980>
    d8fe:	76 30       	cpi	r23, 0x06	; 6
    d900:	09 f4       	brne	.+2      	; 0xd904 <setup+0xdd0>
    d902:	4b ce       	rjmp	.-874    	; 0xd59a <setup+0xa66>
    d904:	77 30       	cpi	r23, 0x07	; 7
    d906:	09 f0       	breq	.+2      	; 0xd90a <setup+0xdd6>
    d908:	90 ce       	rjmp	.-736    	; 0xd62a <setup+0xaf6>
    d90a:	6b ed       	ldi	r22, 0xDB	; 219
    d90c:	7a e5       	ldi	r23, 0x5A	; 90
    d90e:	ce 01       	movw	r24, r28
    d910:	88 57       	subi	r24, 0x78	; 120
    d912:	9f 4f       	sbci	r25, 0xFF	; 255
    d914:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d918:	c1 2c       	mov	r12, r1
    d91a:	ee 24       	eor	r14, r14
    d91c:	ea 94       	dec	r14
    d91e:	fe 2c       	mov	r15, r14
    d920:	00 ee       	ldi	r16, 0xE0	; 224
    d922:	17 e0       	ldi	r17, 0x07	; 7
    d924:	21 e0       	ldi	r18, 0x01	; 1
    d926:	48 e7       	ldi	r20, 0x78	; 120
    d928:	50 e0       	ldi	r21, 0x00	; 0
    d92a:	6e e1       	ldi	r22, 0x1E	; 30
    d92c:	70 e0       	ldi	r23, 0x00	; 0
    d92e:	ce 01       	movw	r24, r28
    d930:	88 57       	subi	r24, 0x78	; 120
    d932:	9f 4f       	sbci	r25, 0xFF	; 255
    d934:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d938:	88 e1       	ldi	r24, 0x18	; 24
    d93a:	80 93 d5 10 	sts	0x10D5, r24	; 0x8010d5 <ds2482_address>
    d93e:	10 92 d6 10 	sts	0x10D6, r1	; 0x8010d6 <ds2482_address+0x1>
    d942:	ea e1       	ldi	r30, 0x1A	; 26
    d944:	f1 e1       	ldi	r31, 0x11	; 17
    d946:	15 8e       	std	Z+29, r1	; 0x1d
    d948:	14 8e       	std	Z+28, r1	; 0x1c
    d94a:	7e 96       	adiw	r30, 0x1e	; 30
    d94c:	71 e1       	ldi	r23, 0x11	; 17
    d94e:	ee 3c       	cpi	r30, 0xCE	; 206
    d950:	f7 07       	cpc	r31, r23
    d952:	c9 f7       	brne	.-14     	; 0xd946 <setup+0xe12>
itoa():
    d954:	4a e0       	ldi	r20, 0x0A	; 10
    d956:	be 01       	movw	r22, r28
    d958:	62 52       	subi	r22, 0x22	; 34
    d95a:	7f 4f       	sbci	r23, 0xFF	; 255
    d95c:	88 e1       	ldi	r24, 0x18	; 24
    d95e:	90 e0       	ldi	r25, 0x00	; 0
    d960:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
setup():
    d964:	80 91 d5 10 	lds	r24, 0x10D5	; 0x8010d5 <ds2482_address>
    d968:	0e 94 e1 c7 	call	0x18fc2	; 0x18fc2 <ds2482reset(unsigned char)>
    d96c:	81 11       	cpse	r24, r1
    d96e:	42 ce       	rjmp	.-892    	; 0xd5f4 <setup+0xac0>
    d970:	6f e2       	ldi	r22, 0x2F	; 47
    d972:	76 e5       	ldi	r23, 0x56	; 86
    d974:	ce 01       	movw	r24, r28
    d976:	88 57       	subi	r24, 0x78	; 120
    d978:	9f 4f       	sbci	r25, 0xFF	; 255
    d97a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d97e:	c1 2c       	mov	r12, r1
    d980:	ee 24       	eor	r14, r14
    d982:	ea 94       	dec	r14
    d984:	fe 2c       	mov	r15, r14
    d986:	00 ee       	ldi	r16, 0xE0	; 224
    d988:	17 e0       	ldi	r17, 0x07	; 7
    d98a:	21 e0       	ldi	r18, 0x01	; 1
    d98c:	48 e7       	ldi	r20, 0x78	; 120
    d98e:	50 e0       	ldi	r21, 0x00	; 0
    d990:	60 ea       	ldi	r22, 0xA0	; 160
    d992:	70 e0       	ldi	r23, 0x00	; 0
    d994:	ce 01       	movw	r24, r28
    d996:	88 57       	subi	r24, 0x78	; 120
    d998:	9f 4f       	sbci	r25, 0xFF	; 255
    d99a:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d99e:	82 e0       	ldi	r24, 0x02	; 2
    d9a0:	0e 94 c6 4b 	call	0x978c	; 0x978c <selftest_clear_0(unsigned char)>
    d9a4:	c1 cd       	rjmp	.-1150   	; 0xd528 <setup+0x9f4>
    d9a6:	c0 5d       	subi	r28, 0xD0	; 208
    d9a8:	de 4f       	sbci	r29, 0xFE	; 254
    d9aa:	88 81       	ld	r24, Y
    d9ac:	c0 53       	subi	r28, 0x30	; 48
    d9ae:	d1 40       	sbci	r29, 0x01	; 1
    d9b0:	8a 30       	cpi	r24, 0x0A	; 10
    d9b2:	09 f0       	breq	.+2      	; 0xd9b6 <setup+0xe82>
    d9b4:	01 cf       	rjmp	.-510    	; 0xd7b8 <setup+0xc84>
    d9b6:	6e e9       	ldi	r22, 0x9E	; 158
    d9b8:	7a e5       	ldi	r23, 0x5A	; 90
    d9ba:	ce 01       	movw	r24, r28
    d9bc:	88 57       	subi	r24, 0x78	; 120
    d9be:	9f 4f       	sbci	r25, 0xFF	; 255
    d9c0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    d9c4:	c1 2c       	mov	r12, r1
    d9c6:	ee 24       	eor	r14, r14
    d9c8:	ea 94       	dec	r14
    d9ca:	fe 2c       	mov	r15, r14
    d9cc:	00 ee       	ldi	r16, 0xE0	; 224
    d9ce:	17 e0       	ldi	r17, 0x07	; 7
    d9d0:	21 e0       	ldi	r18, 0x01	; 1
    d9d2:	46 e9       	ldi	r20, 0x96	; 150
    d9d4:	50 e0       	ldi	r21, 0x00	; 0
    d9d6:	6e e1       	ldi	r22, 0x1E	; 30
    d9d8:	70 e0       	ldi	r23, 0x00	; 0
    d9da:	ce 01       	movw	r24, r28
    d9dc:	88 57       	subi	r24, 0x78	; 120
    d9de:	9f 4f       	sbci	r25, 0xFF	; 255
    d9e0:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    d9e4:	40 91 99 10 	lds	r20, 0x1099	; 0x801099 <device+0x24>
    d9e8:	50 91 9a 10 	lds	r21, 0x109A	; 0x80109a <device+0x25>
    d9ec:	65 e9       	ldi	r22, 0x95	; 149
    d9ee:	70 e1       	ldi	r23, 0x10	; 16
    d9f0:	8f e8       	ldi	r24, 0x8F	; 143
    d9f2:	9d e0       	ldi	r25, 0x0D	; 13
    d9f4:	0e 94 be c0 	call	0x1817c	; 0x1817c <PubSubClient::setServer(unsigned char*, unsigned int)>
    d9f8:	65 e6       	ldi	r22, 0x65	; 101
    d9fa:	75 e7       	ldi	r23, 0x75	; 117
    d9fc:	8f e8       	ldi	r24, 0x8F	; 143
    d9fe:	9d e0       	ldi	r25, 0x0D	; 13
    da00:	0e 94 f8 c0 	call	0x181f0	; 0x181f0 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>
    da04:	88 ec       	ldi	r24, 0xC8	; 200
    da06:	95 e5       	ldi	r25, 0x55	; 85
    da08:	0e 94 93 82 	call	0x10526	; 0x10526 <send_mqtt_set_header(char const*)>
    da0c:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    da10:	6b 01       	movw	r12, r22
    da12:	7c 01       	movw	r14, r24
    da14:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    da18:	6c 19       	sub	r22, r12
    da1a:	7d 09       	sbc	r23, r13
    da1c:	8e 09       	sbc	r24, r14
    da1e:	9f 09       	sbc	r25, r15
    da20:	68 3b       	cpi	r22, 0xB8	; 184
    da22:	7b 40       	sbci	r23, 0x0B	; 11
    da24:	81 05       	cpc	r24, r1
    da26:	91 05       	cpc	r25, r1
    da28:	98 f4       	brcc	.+38     	; 0xda50 <setup+0xf1c>
    da2a:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <lastmqttconnect>
    da2e:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <lastmqttconnect+0x1>
    da32:	10 92 56 0a 	sts	0x0A56, r1	; 0x800a56 <lastmqttconnect+0x2>
    da36:	10 92 57 0a 	sts	0x0A57, r1	; 0x800a57 <lastmqttconnect+0x3>
    da3a:	8f e8       	ldi	r24, 0x8F	; 143
    da3c:	9d e0       	ldi	r25, 0x0D	; 13
    da3e:	0e 94 25 be 	call	0x17c4a	; 0x17c4a <PubSubClient::loop()>
    da42:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <mqtt_reconnect()>
    da46:	81 11       	cpse	r24, r1
    da48:	a5 ce       	rjmp	.-694    	; 0xd794 <setup+0xc60>
    da4a:	85 e0       	ldi	r24, 0x05	; 5
    da4c:	0e 94 c6 4b 	call	0x978c	; 0x978c <selftest_clear_0(unsigned char)>
    da50:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <lastmqttconnect>
    da54:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <lastmqttconnect+0x1>
    da58:	10 92 56 0a 	sts	0x0A56, r1	; 0x800a56 <lastmqttconnect+0x2>
    da5c:	10 92 57 0a 	sts	0x0A57, r1	; 0x800a57 <lastmqttconnect+0x3>
_Z14selftest_get_0h():
    da60:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
setup():
    da64:	85 ff       	sbrs	r24, 5
    da66:	9a ce       	rjmp	.-716    	; 0xd79c <setup+0xc68>
    da68:	62 e3       	ldi	r22, 0x32	; 50
    da6a:	76 e5       	ldi	r23, 0x56	; 86
    da6c:	ce 01       	movw	r24, r28
    da6e:	88 57       	subi	r24, 0x78	; 120
    da70:	9f 4f       	sbci	r25, 0xFF	; 255
    da72:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    da76:	c1 2c       	mov	r12, r1
    da78:	ee 24       	eor	r14, r14
    da7a:	ea 94       	dec	r14
    da7c:	fe 2c       	mov	r15, r14
    da7e:	00 e0       	ldi	r16, 0x00	; 0
    da80:	18 ef       	ldi	r17, 0xF8	; 248
    da82:	21 e0       	ldi	r18, 0x01	; 1
    da84:	46 e9       	ldi	r20, 0x96	; 150
    da86:	50 e0       	ldi	r21, 0x00	; 0
    da88:	0c ce       	rjmp	.-1000   	; 0xd6a2 <setup+0xb6e>
    da8a:	c0 5d       	subi	r28, 0xD0	; 208
    da8c:	de 4f       	sbci	r29, 0xFE	; 254
    da8e:	98 81       	ld	r25, Y
    da90:	c0 53       	subi	r28, 0x30	; 48
    da92:	d1 40       	sbci	r29, 0x01	; 1
    da94:	9d 30       	cpi	r25, 0x0D	; 13
    da96:	09 f0       	breq	.+2      	; 0xda9a <setup+0xf66>
    da98:	4a ca       	rjmp	.-2924   	; 0xcf2e <setup+0x3fa>
    da9a:	61 e7       	ldi	r22, 0x71	; 113
    da9c:	7a e5       	ldi	r23, 0x5A	; 90
    da9e:	ce 01       	movw	r24, r28
    daa0:	88 57       	subi	r24, 0x78	; 120
    daa2:	9f 4f       	sbci	r25, 0xFF	; 255
    daa4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
    daa8:	c1 2c       	mov	r12, r1
    daaa:	ee 24       	eor	r14, r14
    daac:	ea 94       	dec	r14
    daae:	fe 2c       	mov	r15, r14
    dab0:	00 ee       	ldi	r16, 0xE0	; 224
    dab2:	17 e0       	ldi	r17, 0x07	; 7
    dab4:	21 e0       	ldi	r18, 0x01	; 1
    dab6:	44 eb       	ldi	r20, 0xB4	; 180
    dab8:	50 e0       	ldi	r21, 0x00	; 0
    daba:	6e e1       	ldi	r22, 0x1E	; 30
    dabc:	70 e0       	ldi	r23, 0x00	; 0
    dabe:	ce 01       	movw	r24, r28
    dac0:	88 57       	subi	r24, 0x78	; 120
    dac2:	9f 4f       	sbci	r25, 0xFF	; 255
    dac4:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    dac8:	0e 94 e0 8b 	call	0x117c0	; 0x117c0 <thermostat_init_pid()>
    dacc:	10 e0       	ldi	r17, 0x00	; 0
    dace:	60 e0       	ldi	r22, 0x00	; 0
    dad0:	81 2f       	mov	r24, r17
    dad2:	0e 94 d4 8b 	call	0x117a8	; 0x117a8 <thermostat_ring_set_state(unsigned char, unsigned char)>
    dad6:	60 e0       	ldi	r22, 0x00	; 0
    dad8:	81 2f       	mov	r24, r17
    dada:	0e 94 da 8b 	call	0x117b4	; 0x117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>
    dade:	81 2f       	mov	r24, r17
    dae0:	0e 94 2f 8e 	call	0x11c5e	; 0x11c5e <thermostat_ring_get_pid_eeprom(unsigned char)>
    dae4:	81 2f       	mov	r24, r17
    dae6:	0e 94 e3 8d 	call	0x11bc6	; 0x11bc6 <thermostat_ring_update_pid_parameters(unsigned char)>
    daea:	1f 5f       	subi	r17, 0xFF	; 255
    daec:	15 30       	cpi	r17, 0x05	; 5
    daee:	79 f7       	brne	.-34     	; 0xdace <setup+0xf9a>
    daf0:	0e 94 9f 46 	call	0x8d3e	; 0x8d3e <get_default_ring()>
    daf4:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <default_ring>
    daf8:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <get_default_show_temp()>
    dafc:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <default_show_temp>
    db00:	13 cd       	rjmp	.-1498   	; 0xd528 <setup+0x9f4>

0000db02 <count_use_rtds()>:
_Z14count_use_rtdsv():
    db02:	0f 93       	push	r16
    db04:	1f 93       	push	r17
    db06:	cf 93       	push	r28
    db08:	df 93       	push	r29
    db0a:	1f 92       	push	r1
    db0c:	cd b7       	in	r28, 0x3d	; 61
    db0e:	de b7       	in	r29, 0x3e	; 62
    db10:	19 82       	std	Y+1, r1	; 0x01
    db12:	10 e0       	ldi	r17, 0x00	; 0
    db14:	00 e0       	ldi	r16, 0x00	; 0
    db16:	be 01       	movw	r22, r28
    db18:	6f 5f       	subi	r22, 0xFF	; 255
    db1a:	7f 4f       	sbci	r23, 0xFF	; 255
    db1c:	81 2f       	mov	r24, r17
    db1e:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
    db22:	89 81       	ldd	r24, Y+1	; 0x01
    db24:	81 30       	cpi	r24, 0x01	; 1
    db26:	09 f4       	brne	.+2      	; 0xdb2a <count_use_rtds()+0x28>
    db28:	0f 5f       	subi	r16, 0xFF	; 255
    db2a:	1f 5f       	subi	r17, 0xFF	; 255
    db2c:	1a 30       	cpi	r17, 0x0A	; 10
    db2e:	99 f7       	brne	.-26     	; 0xdb16 <count_use_rtds()+0x14>
    db30:	80 2f       	mov	r24, r16
    db32:	0f 90       	pop	r0
    db34:	df 91       	pop	r29
    db36:	cf 91       	pop	r28
    db38:	1f 91       	pop	r17
    db3a:	0f 91       	pop	r16
    db3c:	08 95       	ret

0000db3e <loop>:
loop():
    db3e:	cf 92       	push	r12
    db40:	df 92       	push	r13
    db42:	ef 92       	push	r14
    db44:	ff 92       	push	r15
    db46:	0f 93       	push	r16
    db48:	1f 93       	push	r17
    db4a:	cf 93       	push	r28
    db4c:	df 93       	push	r29
    db4e:	00 d0       	rcall	.+0      	; 0xdb50 <loop+0x12>
    db50:	00 d0       	rcall	.+0      	; 0xdb52 <loop+0x14>
    db52:	1f 92       	push	r1
    db54:	cd b7       	in	r28, 0x3d	; 61
    db56:	de b7       	in	r29, 0x3e	; 62
    db58:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    db5c:	6b 01       	movw	r12, r22
    db5e:	7c 01       	movw	r14, r24
    db60:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <mqtt_reconnect()>
    db64:	81 11       	cpse	r24, r1
    db66:	5f c1       	rjmp	.+702    	; 0xde26 <loop+0x2e8>
    db68:	85 e0       	ldi	r24, 0x05	; 5
    db6a:	0e 94 c6 4b 	call	0x978c	; 0x978c <selftest_clear_0(unsigned char)>
    db6e:	8f e8       	ldi	r24, 0x8F	; 143
    db70:	9d e0       	ldi	r25, 0x0D	; 13
    db72:	0e 94 25 be 	call	0x17c4a	; 0x17c4a <PubSubClient::loop()>
    db76:	80 e0       	ldi	r24, 0x00	; 0
    db78:	0e 94 6d 54 	call	0xa8da	; 0xa8da <draw_menu(bool)>
    db7c:	88 23       	and	r24, r24
    db7e:	19 f0       	breq	.+6      	; 0xdb86 <loop+0x48>
    db80:	81 e0       	ldi	r24, 0x01	; 1
    db82:	0e 94 6d 54 	call	0xa8da	; 0xa8da <draw_menu(bool)>
    db86:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    db8a:	00 91 2f 0a 	lds	r16, 0x0A2F	; 0x800a2f <milis_10s>
    db8e:	10 91 30 0a 	lds	r17, 0x0A30	; 0x800a30 <milis_10s+0x1>
    db92:	20 91 31 0a 	lds	r18, 0x0A31	; 0x800a31 <milis_10s+0x2>
    db96:	30 91 32 0a 	lds	r19, 0x0A32	; 0x800a32 <milis_10s+0x3>
    db9a:	ab 01       	movw	r20, r22
    db9c:	bc 01       	movw	r22, r24
    db9e:	40 1b       	sub	r20, r16
    dba0:	51 0b       	sbc	r21, r17
    dba2:	62 0b       	sbc	r22, r18
    dba4:	73 0b       	sbc	r23, r19
    dba6:	40 31       	cpi	r20, 0x10	; 16
    dba8:	57 42       	sbci	r21, 0x27	; 39
    dbaa:	61 05       	cpc	r22, r1
    dbac:	71 05       	cpc	r23, r1
    dbae:	78 f1       	brcs	.+94     	; 0xdc0e <loop+0xd0>
    dbb0:	d9 01       	movw	r26, r18
    dbb2:	c8 01       	movw	r24, r16
    dbb4:	80 5f       	subi	r24, 0xF0	; 240
    dbb6:	98 4d       	sbci	r25, 0xD8	; 216
    dbb8:	af 4f       	sbci	r26, 0xFF	; 255
    dbba:	bf 4f       	sbci	r27, 0xFF	; 255
    dbbc:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <milis_10s>
    dbc0:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <milis_10s+0x1>
    dbc4:	a0 93 31 0a 	sts	0x0A31, r26	; 0x800a31 <milis_10s+0x2>
    dbc8:	b0 93 32 0a 	sts	0x0A32, r27	; 0x800a32 <milis_10s+0x3>
    dbcc:	81 e0       	ldi	r24, 0x01	; 1
    dbce:	80 93 7a 09 	sts	0x097A, r24	; 0x80097a <menu_redraw10s>
    dbd2:	0e 94 89 47 	call	0x8f12	; 0x8f12 <send_mqtt_onewire()>
    dbd6:	8f e8       	ldi	r24, 0x8F	; 143
    dbd8:	9d e0       	ldi	r25, 0x0D	; 13
    dbda:	0e 94 2c 85 	call	0x10a58	; 0x10a58 <send_mqtt_status(PubSubClient*)>
    dbde:	0e 94 e5 4b 	call	0x97ca	; 0x97ca <send_device_status()>
    dbe2:	0e 94 21 4e 	call	0x9c42	; 0x9c42 <send_mqtt_ring()>
    dbe6:	0e 94 00 48 	call	0x9000	; 0x9000 <send_mqtt_tds()>
    dbea:	0e 94 1a 49 	call	0x9234	; 0x9234 <send_mqtt_program()>
    dbee:	0e 94 4a 4f 	call	0x9e94	; 0x9e94 <thermostat()>
    dbf2:	10 e0       	ldi	r17, 0x00	; 0
    dbf4:	81 2f       	mov	r24, r17
    dbf6:	0e 94 51 87 	call	0x10ea2	; 0x10ea2 <tds_used(unsigned char)>
    dbfa:	81 30       	cpi	r24, 0x01	; 1
    dbfc:	19 f4       	brne	.+6      	; 0xdc04 <loop+0xc6>
    dbfe:	81 2f       	mov	r24, r17
    dc00:	0e 94 35 4a 	call	0x946a	; 0x946a <mqtt_send_pid_variable(unsigned char)>
    dc04:	1f 5f       	subi	r17, 0xFF	; 255
    dc06:	15 30       	cpi	r17, 0x05	; 5
    dc08:	a9 f7       	brne	.-22     	; 0xdbf4 <loop+0xb6>
    dc0a:	0e 94 92 4a 	call	0x9524	; 0x9524 <send_mqtt_remote_tds_status()>
    dc0e:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    dc12:	00 91 33 0a 	lds	r16, 0x0A33	; 0x800a33 <milis_1s>
    dc16:	10 91 34 0a 	lds	r17, 0x0A34	; 0x800a34 <milis_1s+0x1>
    dc1a:	20 91 35 0a 	lds	r18, 0x0A35	; 0x800a35 <milis_1s+0x2>
    dc1e:	30 91 36 0a 	lds	r19, 0x0A36	; 0x800a36 <milis_1s+0x3>
    dc22:	ab 01       	movw	r20, r22
    dc24:	bc 01       	movw	r22, r24
    dc26:	40 1b       	sub	r20, r16
    dc28:	51 0b       	sbc	r21, r17
    dc2a:	62 0b       	sbc	r22, r18
    dc2c:	73 0b       	sbc	r23, r19
    dc2e:	48 3e       	cpi	r20, 0xE8	; 232
    dc30:	53 40       	sbci	r21, 0x03	; 3
    dc32:	61 05       	cpc	r22, r1
    dc34:	71 05       	cpc	r23, r1
    dc36:	38 f1       	brcs	.+78     	; 0xdc86 <loop+0x148>
    dc38:	d9 01       	movw	r26, r18
    dc3a:	c8 01       	movw	r24, r16
    dc3c:	88 51       	subi	r24, 0x18	; 24
    dc3e:	9c 4f       	sbci	r25, 0xFC	; 252
    dc40:	af 4f       	sbci	r26, 0xFF	; 255
    dc42:	bf 4f       	sbci	r27, 0xFF	; 255
    dc44:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <milis_1s>
    dc48:	90 93 34 0a 	sts	0x0A34, r25	; 0x800a34 <milis_1s+0x1>
    dc4c:	a0 93 35 0a 	sts	0x0A35, r26	; 0x800a35 <milis_1s+0x2>
    dc50:	b0 93 36 0a 	sts	0x0A36, r27	; 0x800a36 <milis_1s+0x3>
    dc54:	80 91 3f 0a 	lds	r24, 0x0A3F	; 0x800a3f <uptime>
    dc58:	90 91 40 0a 	lds	r25, 0x0A40	; 0x800a40 <uptime+0x1>
    dc5c:	a0 91 41 0a 	lds	r26, 0x0A41	; 0x800a41 <uptime+0x2>
    dc60:	b0 91 42 0a 	lds	r27, 0x0A42	; 0x800a42 <uptime+0x3>
    dc64:	01 96       	adiw	r24, 0x01	; 1
    dc66:	a1 1d       	adc	r26, r1
    dc68:	b1 1d       	adc	r27, r1
    dc6a:	80 93 3f 0a 	sts	0x0A3F, r24	; 0x800a3f <uptime>
    dc6e:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <uptime+0x1>
    dc72:	a0 93 41 0a 	sts	0x0A41, r26	; 0x800a41 <uptime+0x2>
    dc76:	b0 93 42 0a 	sts	0x0A42, r27	; 0x800a42 <uptime+0x3>
    dc7a:	0e 94 a9 8a 	call	0x11552	; 0x11552 <mereni_hwwire(unsigned int)>
    dc7e:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <tds_extended_memory_store()>
    dc82:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <remote_tds_update_last_update()>
    dc86:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    dc8a:	00 91 37 0a 	lds	r16, 0x0A37	; 0x800a37 <milis_05s>
    dc8e:	10 91 38 0a 	lds	r17, 0x0A38	; 0x800a38 <milis_05s+0x1>
    dc92:	20 91 39 0a 	lds	r18, 0x0A39	; 0x800a39 <milis_05s+0x2>
    dc96:	30 91 3a 0a 	lds	r19, 0x0A3A	; 0x800a3a <milis_05s+0x3>
    dc9a:	ab 01       	movw	r20, r22
    dc9c:	bc 01       	movw	r22, r24
    dc9e:	40 1b       	sub	r20, r16
    dca0:	51 0b       	sbc	r21, r17
    dca2:	62 0b       	sbc	r22, r18
    dca4:	73 0b       	sbc	r23, r19
    dca6:	44 3f       	cpi	r20, 0xF4	; 244
    dca8:	51 40       	sbci	r21, 0x01	; 1
    dcaa:	61 05       	cpc	r22, r1
    dcac:	71 05       	cpc	r23, r1
    dcae:	40 f1       	brcs	.+80     	; 0xdd00 <loop+0x1c2>
    dcb0:	d9 01       	movw	r26, r18
    dcb2:	c8 01       	movw	r24, r16
    dcb4:	8c 50       	subi	r24, 0x0C	; 12
    dcb6:	9e 4f       	sbci	r25, 0xFE	; 254
    dcb8:	af 4f       	sbci	r26, 0xFF	; 255
    dcba:	bf 4f       	sbci	r27, 0xFF	; 255
    dcbc:	80 93 37 0a 	sts	0x0A37, r24	; 0x800a37 <milis_05s>
    dcc0:	90 93 38 0a 	sts	0x0A38, r25	; 0x800a38 <milis_05s+0x1>
    dcc4:	a0 93 39 0a 	sts	0x0A39, r26	; 0x800a39 <milis_05s+0x2>
    dcc8:	b0 93 3a 0a 	sts	0x0A3A, r27	; 0x800a3a <milis_05s+0x3>
    dccc:	ce 01       	movw	r24, r28
    dcce:	01 96       	adiw	r24, 0x01	; 1
    dcd0:	0e 94 ab c2 	call	0x18556	; 0x18556 <RTC_DS1307::now()>
    dcd4:	87 e0       	ldi	r24, 0x07	; 7
    dcd6:	fe 01       	movw	r30, r28
    dcd8:	31 96       	adiw	r30, 0x01	; 1
    dcda:	a4 ed       	ldi	r26, 0xD4	; 212
    dcdc:	bf e0       	ldi	r27, 0x0F	; 15
    dcde:	01 90       	ld	r0, Z+
    dce0:	0d 92       	st	X+, r0
    dce2:	8a 95       	dec	r24
    dce4:	e1 f7       	brne	.-8      	; 0xdcde <loop+0x1a0>
    dce6:	0e 94 d3 4b 	call	0x97a6	; 0x97a6 <selftest()>
    dcea:	81 e0       	ldi	r24, 0x01	; 1
    dcec:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <menu_redraw05s>
    dcf0:	0e 94 81 6d 	call	0xdb02	; 0xdb02 <count_use_rtds()>
    dcf4:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <use_rtds>
    dcf8:	0e 94 3b 87 	call	0x10e76	; 0x10e76 <count_use_tds()>
    dcfc:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <use_tds>
    dd00:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    dd04:	00 91 3b 0a 	lds	r16, 0x0A3B	; 0x800a3b <milis_005s>
    dd08:	10 91 3c 0a 	lds	r17, 0x0A3C	; 0x800a3c <milis_005s+0x1>
    dd0c:	20 91 3d 0a 	lds	r18, 0x0A3D	; 0x800a3d <milis_005s+0x2>
    dd10:	30 91 3e 0a 	lds	r19, 0x0A3E	; 0x800a3e <milis_005s+0x3>
    dd14:	ab 01       	movw	r20, r22
    dd16:	bc 01       	movw	r22, r24
    dd18:	40 1b       	sub	r20, r16
    dd1a:	51 0b       	sbc	r21, r17
    dd1c:	62 0b       	sbc	r22, r18
    dd1e:	73 0b       	sbc	r23, r19
    dd20:	42 33       	cpi	r20, 0x32	; 50
    dd22:	51 05       	cpc	r21, r1
    dd24:	61 05       	cpc	r22, r1
    dd26:	71 05       	cpc	r23, r1
    dd28:	d8 f0       	brcs	.+54     	; 0xdd60 <loop+0x222>
    dd2a:	d9 01       	movw	r26, r18
    dd2c:	c8 01       	movw	r24, r16
    dd2e:	c2 96       	adiw	r24, 0x32	; 50
    dd30:	a1 1d       	adc	r26, r1
    dd32:	b1 1d       	adc	r27, r1
    dd34:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <milis_005s>
    dd38:	90 93 3c 0a 	sts	0x0A3C, r25	; 0x800a3c <milis_005s+0x1>
    dd3c:	a0 93 3d 0a 	sts	0x0A3D, r26	; 0x800a3d <milis_005s+0x2>
    dd40:	b0 93 3e 0a 	sts	0x0A3E, r27	; 0x800a3e <milis_005s+0x3>
    dd44:	10 91 43 0a 	lds	r17, 0x0A43	; 0x800a43 <a2d_run_now>
    dd48:	11 30       	cpi	r17, 0x01	; 1
    dd4a:	51 f4       	brne	.+20     	; 0xdd60 <loop+0x222>
    dd4c:	0e 94 93 cb 	call	0x19726	; 0x19726 <a2d_start_process()>
    dd50:	10 92 43 0a 	sts	0x0A43, r1	; 0x800a43 <a2d_run_now>
    dd54:	0e 94 b3 cb 	call	0x19766	; 0x19766 <a2d_done()>
    dd58:	81 11       	cpse	r24, r1
    dd5a:	02 c0       	rjmp	.+4      	; 0xdd60 <loop+0x222>
    dd5c:	10 93 43 0a 	sts	0x0A43, r17	; 0x800a43 <a2d_run_now>
    dd60:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
    dd64:	dc 01       	movw	r26, r24
    dd66:	cb 01       	movw	r24, r22
    dd68:	8c 19       	sub	r24, r12
    dd6a:	9d 09       	sbc	r25, r13
    dd6c:	ae 09       	sbc	r26, r14
    dd6e:	bf 09       	sbc	r27, r15
    dd70:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <load>
    dd74:	90 93 2a 0a 	sts	0x0A2A, r25	; 0x800a2a <load+0x1>
    dd78:	a0 93 2b 0a 	sts	0x0A2B, r26	; 0x800a2b <load+0x2>
    dd7c:	b0 93 2c 0a 	sts	0x0A2C, r27	; 0x800a2c <load+0x3>
    dd80:	c0 90 36 02 	lds	r12, 0x0236	; 0x800236 <load_min>
    dd84:	d0 90 37 02 	lds	r13, 0x0237	; 0x800237 <load_min+0x1>
    dd88:	e0 90 38 02 	lds	r14, 0x0238	; 0x800238 <load_min+0x2>
    dd8c:	f0 90 39 02 	lds	r15, 0x0239	; 0x800239 <load_min+0x3>
    dd90:	8c 15       	cp	r24, r12
    dd92:	9d 05       	cpc	r25, r13
    dd94:	ae 05       	cpc	r26, r14
    dd96:	bf 05       	cpc	r27, r15
    dd98:	44 f4       	brge	.+16     	; 0xddaa <loop+0x26c>
    dd9a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <load_min>
    dd9e:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <load_min+0x1>
    dda2:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <load_min+0x2>
    dda6:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <load_min+0x3>
    ddaa:	c0 90 25 0a 	lds	r12, 0x0A25	; 0x800a25 <load_max>
    ddae:	d0 90 26 0a 	lds	r13, 0x0A26	; 0x800a26 <load_max+0x1>
    ddb2:	e0 90 27 0a 	lds	r14, 0x0A27	; 0x800a27 <load_max+0x2>
    ddb6:	f0 90 28 0a 	lds	r15, 0x0A28	; 0x800a28 <load_max+0x3>
    ddba:	c8 16       	cp	r12, r24
    ddbc:	d9 06       	cpc	r13, r25
    ddbe:	ea 06       	cpc	r14, r26
    ddc0:	fb 06       	cpc	r15, r27
    ddc2:	44 f4       	brge	.+16     	; 0xddd4 <loop+0x296>
    ddc4:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <load_max>
    ddc8:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <load_max+0x1>
    ddcc:	a0 93 27 0a 	sts	0x0A27, r26	; 0x800a27 <load_max+0x2>
    ddd0:	b0 93 28 0a 	sts	0x0A28, r27	; 0x800a28 <load_max+0x3>
    ddd4:	80 91 44 0a 	lds	r24, 0x0A44	; 0x800a44 <light_curr>
    ddd8:	90 91 45 0a 	lds	r25, 0x0A45	; 0x800a45 <light_curr+0x1>
    dddc:	20 91 23 0a 	lds	r18, 0x0A23	; 0x800a23 <light_min>
    dde0:	30 91 24 0a 	lds	r19, 0x0A24	; 0x800a24 <light_min+0x1>
    dde4:	82 17       	cp	r24, r18
    dde6:	93 07       	cpc	r25, r19
    dde8:	20 f4       	brcc	.+8      	; 0xddf2 <loop+0x2b4>
    ddea:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <light_min+0x1>
    ddee:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <light_min>
    ddf2:	20 91 21 0a 	lds	r18, 0x0A21	; 0x800a21 <light_max>
    ddf6:	30 91 22 0a 	lds	r19, 0x0A22	; 0x800a22 <light_max+0x1>
    ddfa:	28 17       	cp	r18, r24
    ddfc:	39 07       	cpc	r19, r25
    ddfe:	20 f4       	brcc	.+8      	; 0xde08 <loop+0x2ca>
    de00:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <light_max+0x1>
    de04:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <light_max>
    de08:	27 96       	adiw	r28, 0x07	; 7
    de0a:	0f b6       	in	r0, 0x3f	; 63
    de0c:	f8 94       	cli
    de0e:	de bf       	out	0x3e, r29	; 62
    de10:	0f be       	out	0x3f, r0	; 63
    de12:	cd bf       	out	0x3d, r28	; 61
    de14:	df 91       	pop	r29
    de16:	cf 91       	pop	r28
    de18:	1f 91       	pop	r17
    de1a:	0f 91       	pop	r16
    de1c:	ff 90       	pop	r15
    de1e:	ef 90       	pop	r14
    de20:	df 90       	pop	r13
    de22:	cf 90       	pop	r12
    de24:	08 95       	ret
    de26:	85 e0       	ldi	r24, 0x05	; 5
    de28:	0e 94 ba 4b 	call	0x9774	; 0x9774 <selftest_set_0(unsigned char)>
    de2c:	a0 ce       	rjmp	.-704    	; 0xdb6e <loop+0x30>

0000de2e <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4979
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
    de2e:	8f 92       	push	r8
    de30:	9f 92       	push	r9
    de32:	af 92       	push	r10
    de34:	bf 92       	push	r11
    de36:	cf 92       	push	r12
    de38:	df 92       	push	r13
    de3a:	ef 92       	push	r14
    de3c:	ff 92       	push	r15
    de3e:	0f 93       	push	r16
    de40:	1f 93       	push	r17
    de42:	cf 93       	push	r28
    de44:	df 93       	push	r29
    de46:	cd b7       	in	r28, 0x3d	; 61
    de48:	de b7       	in	r29, 0x3e	; 62
    de4a:	67 97       	sbiw	r28, 0x17	; 23
    de4c:	0f b6       	in	r0, 0x3f	; 63
    de4e:	f8 94       	cli
    de50:	de bf       	out	0x3e, r29	; 62
    de52:	0f be       	out	0x3f, r0	; 63
    de54:	cd bf       	out	0x3d, r28	; 61
    de56:	e8 2e       	mov	r14, r24
    de58:	5b 01       	movw	r10, r22
    de5a:	4a 01       	movw	r8, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4984
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    de5c:	62 e3       	ldi	r22, 0x32	; 50
    de5e:	76 e5       	ldi	r23, 0x56	; 86
    de60:	c5 01       	movw	r24, r10
    de62:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4985
  *temp = 0.0;
    de66:	f4 01       	movw	r30, r8
    de68:	10 82       	st	Z, r1
    de6a:	11 82       	std	Z+1, r1	; 0x01
    de6c:	12 82       	std	Z+2, r1	; 0x02
    de6e:	13 82       	std	Z+3, r1	; 0x03
    de70:	d1 2c       	mov	r13, r1
    de72:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4981
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    de74:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4994
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    de76:	1e e1       	ldi	r17, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4988
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    de78:	be 01       	movw	r22, r28
    de7a:	6f 5f       	subi	r22, 0xFF	; 255
    de7c:	7f 4f       	sbci	r23, 0xFF	; 255
    de7e:	8c 2d       	mov	r24, r12
    de80:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    de84:	81 30       	cpi	r24, 0x01	; 1
    de86:	f1 f5       	brne	.+124    	; 0xdf04 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
      if (tds.used == 1)
    de88:	89 81       	ldd	r24, Y+1	; 0x01
    de8a:	81 30       	cpi	r24, 0x01	; 1
    de8c:	d9 f5       	brne	.+118    	; 0xdf04 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4991
      {
        if (cri == device)
    de8e:	e0 12       	cpse	r14, r16
    de90:	38 c0       	rjmp	.+112    	; 0xdf02 <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4993
        {
          strcpy(name, tds.name);
    de92:	be 01       	movw	r22, r28
    de94:	63 5f       	subi	r22, 0xF3	; 243
    de96:	7f 4f       	sbci	r23, 0xFF	; 255
    de98:	c5 01       	movw	r24, r10
    de9a:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4994
          if (status_tds18s20[idx].online == True)
    de9e:	1c 9d       	mul	r17, r12
    dea0:	f0 01       	movw	r30, r0
    dea2:	1d 9d       	mul	r17, r13
    dea4:	f0 0d       	add	r31, r0
    dea6:	11 24       	eor	r1, r1
    dea8:	e6 5e       	subi	r30, 0xE6	; 230
    deaa:	fe 4e       	sbci	r31, 0xEE	; 238
    deac:	f3 8c       	ldd	r15, Z+27	; 0x1b
    deae:	81 e0       	ldi	r24, 0x01	; 1
    deb0:	f8 12       	cpse	r15, r24
    deb2:	27 c0       	rjmp	.+78     	; 0xdf02 <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4996
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    deb4:	65 81       	ldd	r22, Z+5	; 0x05
    deb6:	76 81       	ldd	r23, Z+6	; 0x06
    deb8:	07 2e       	mov	r0, r23
    deba:	00 0c       	add	r0, r0
    debc:	88 0b       	sbc	r24, r24
    debe:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    dec0:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    dec4:	20 e0       	ldi	r18, 0x00	; 0
    dec6:	30 e0       	ldi	r19, 0x00	; 0
    dec8:	4a e7       	ldi	r20, 0x7A	; 122
    deca:	54 e4       	ldi	r21, 0x44	; 68
    decc:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    ded0:	f4 01       	movw	r30, r8
    ded2:	60 83       	st	Z, r22
    ded4:	71 83       	std	Z+1, r23	; 0x01
    ded6:	82 83       	std	Z+2, r24	; 0x02
    ded8:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5025
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
}
    deda:	8f 2d       	mov	r24, r15
    dedc:	67 96       	adiw	r28, 0x17	; 23
    dede:	0f b6       	in	r0, 0x3f	; 63
    dee0:	f8 94       	cli
    dee2:	de bf       	out	0x3e, r29	; 62
    dee4:	0f be       	out	0x3f, r0	; 63
    dee6:	cd bf       	out	0x3d, r28	; 61
    dee8:	df 91       	pop	r29
    deea:	cf 91       	pop	r28
    deec:	1f 91       	pop	r17
    deee:	0f 91       	pop	r16
    def0:	ff 90       	pop	r15
    def2:	ef 90       	pop	r14
    def4:	df 90       	pop	r13
    def6:	cf 90       	pop	r12
    def8:	bf 90       	pop	r11
    defa:	af 90       	pop	r10
    defc:	9f 90       	pop	r9
    defe:	8f 90       	pop	r8
    df00:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5001
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    df02:	0f 5f       	subi	r16, 0xFF	; 255
    df04:	ff ef       	ldi	r31, 0xFF	; 255
    df06:	cf 1a       	sub	r12, r31
    df08:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4987 (discriminator 2)
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    df0a:	86 e0       	ldi	r24, 0x06	; 6
    df0c:	c8 16       	cp	r12, r24
    df0e:	d1 04       	cpc	r13, r1
    df10:	09 f0       	breq	.+2      	; 0xdf14 <get_global_temp(unsigned char, char*, float*)+0xe6>
    df12:	b2 cf       	rjmp	.-156    	; 0xde78 <get_global_temp(unsigned char, char*, float*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5004
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    df14:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5006
  {
    remote_tds_get_active(idx, &active);
    df16:	be 01       	movw	r22, r28
    df18:	69 5e       	subi	r22, 0xE9	; 233
    df1a:	7f 4f       	sbci	r23, 0xFF	; 255
    df1c:	81 2f       	mov	r24, r17
    df1e:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5007
    if (active == 1)
    df22:	ff 88       	ldd	r15, Y+23	; 0x17
    df24:	e1 e0       	ldi	r30, 0x01	; 1
    df26:	fe 12       	cpse	r15, r30
    df28:	17 c0       	rjmp	.+46     	; 0xdf58 <get_global_temp(unsigned char, char*, float*)+0x12a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5009
    {
      if (cri == device)
    df2a:	e0 12       	cpse	r14, r16
    df2c:	14 c0       	rjmp	.+40     	; 0xdf56 <get_global_temp(unsigned char, char*, float*)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5011
      {
        remote_tds_get_complete(idx, &active, name);
    df2e:	a5 01       	movw	r20, r10
    df30:	be 01       	movw	r22, r28
    df32:	69 5e       	subi	r22, 0xE9	; 233
    df34:	7f 4f       	sbci	r23, 0xFF	; 255
    df36:	81 2f       	mov	r24, r17
    df38:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5012
        if (remote_tds_get_last_update(idx) < 250)
    df3c:	81 2f       	mov	r24, r17
    df3e:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <remote_tds_get_last_update(unsigned char)>
    df42:	8a 3f       	cpi	r24, 0xFA	; 250
    df44:	40 f4       	brcc	.+16     	; 0xdf56 <get_global_temp(unsigned char, char*, float*)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    df46:	81 2f       	mov	r24, r17
    df48:	0e 94 fd 44 	call	0x89fa	; 0x89fa <remote_tds_get_data(unsigned char)>
    df4c:	bc 01       	movw	r22, r24
    df4e:	99 0f       	add	r25, r25
    df50:	88 0b       	sbc	r24, r24
    df52:	99 0b       	sbc	r25, r25
    df54:	b5 cf       	rjmp	.-150    	; 0xdec0 <get_global_temp(unsigned char, char*, float*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5019
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    df56:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5004 (discriminator 2)
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    df58:	1f 5f       	subi	r17, 0xFF	; 255
    df5a:	1a 30       	cpi	r17, 0x0A	; 10
    df5c:	e1 f6       	brne	.-72     	; 0xdf16 <get_global_temp(unsigned char, char*, float*)+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4982
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    df5e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024
      cri++;
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
    df60:	bc cf       	rjmp	.-136    	; 0xdeda <get_global_temp(unsigned char, char*, float*)+0xac>

0000df62 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4392
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    df62:	2f 92       	push	r2
    df64:	3f 92       	push	r3
    df66:	4f 92       	push	r4
    df68:	5f 92       	push	r5
    df6a:	6f 92       	push	r6
    df6c:	7f 92       	push	r7
    df6e:	8f 92       	push	r8
    df70:	9f 92       	push	r9
    df72:	af 92       	push	r10
    df74:	bf 92       	push	r11
    df76:	cf 92       	push	r12
    df78:	df 92       	push	r13
    df7a:	ef 92       	push	r14
    df7c:	ff 92       	push	r15
    df7e:	0f 93       	push	r16
    df80:	1f 93       	push	r17
    df82:	cf 93       	push	r28
    df84:	df 93       	push	r29
    df86:	cd b7       	in	r28, 0x3d	; 61
    df88:	de b7       	in	r29, 0x3e	; 62
    df8a:	e8 97       	sbiw	r28, 0x38	; 56
    df8c:	0f b6       	in	r0, 0x3f	; 63
    df8e:	f8 94       	cli
    df90:	de bf       	out	0x3e, r29	; 62
    df92:	0f be       	out	0x3f, r0	; 63
    df94:	cd bf       	out	0x3d, r28	; 61
    df96:	4c 01       	movw	r8, r24
    df98:	3b 01       	movw	r6, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4397
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    df9a:	60 ef       	ldi	r22, 0xF0	; 240
    df9c:	79 e5       	ldi	r23, 0x59	; 89
    df9e:	ce 01       	movw	r24, r28
    dfa0:	01 96       	adiw	r24, 0x01	; 1
    dfa2:	5c 01       	movw	r10, r24
    dfa4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4398
  stat = get_global_temp(default_show_temp, str2, &te);
    dfa8:	ae 01       	movw	r20, r28
    dfaa:	4b 5c       	subi	r20, 0xCB	; 203
    dfac:	5f 4f       	sbci	r21, 0xFF	; 255
    dfae:	be 01       	movw	r22, r28
    dfb0:	6f 5d       	subi	r22, 0xDF	; 223
    dfb2:	7f 4f       	sbci	r23, 0xFF	; 255
    dfb4:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <default_show_temp>
    dfb8:	0e 94 17 6f 	call	0xde2e	; 0xde2e <get_global_temp(unsigned char, char*, float*)>
    dfbc:	d8 2e       	mov	r13, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
  strcat(str1, str2);
    dfbe:	be 01       	movw	r22, r28
    dfc0:	6f 5d       	subi	r22, 0xDF	; 223
    dfc2:	7f 4f       	sbci	r23, 0xFF	; 255
    dfc4:	c5 01       	movw	r24, r10
    dfc6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4400
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    dfca:	a3 01       	movw	r20, r6
    dfcc:	4b 5f       	subi	r20, 0xFB	; 251
    dfce:	5f 4f       	sbci	r21, 0xFF	; 255
    dfd0:	b4 01       	movw	r22, r8
    dfd2:	6b 5f       	subi	r22, 0xFB	; 251
    dfd4:	7f 4f       	sbci	r23, 0xFF	; 255
    dfd6:	c1 2c       	mov	r12, r1
    dfd8:	ee 24       	eor	r14, r14
    dfda:	ea 94       	dec	r14
    dfdc:	fe 2c       	mov	r15, r14
    dfde:	10 e0       	ldi	r17, 0x00	; 0
    dfe0:	00 e0       	ldi	r16, 0x00	; 0
    dfe2:	21 e0       	ldi	r18, 0x01	; 1
    dfe4:	c5 01       	movw	r24, r10
    dfe6:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
    dfea:	23 01       	movw	r4, r6
    dfec:	94 e1       	ldi	r25, 0x14	; 20
    dfee:	49 0e       	add	r4, r25
    dff0:	51 1c       	adc	r5, r1
    dff2:	14 01       	movw	r2, r8
    dff4:	84 e0       	ldi	r24, 0x04	; 4
    dff6:	28 0e       	add	r2, r24
    dff8:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401
  if (stat == 1)
    dffa:	91 e0       	ldi	r25, 0x01	; 1
    dffc:	d9 12       	cpse	r13, r25
    dffe:	4e c0       	rjmp	.+156    	; 0xe09c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4403
  {
    dtostrf(te, 4, 1, str1);
    e000:	6d a9       	ldd	r22, Y+53	; 0x35
    e002:	7e a9       	ldd	r23, Y+54	; 0x36
    e004:	8f a9       	ldd	r24, Y+55	; 0x37
    e006:	98 ad       	ldd	r25, Y+56	; 0x38
    e008:	85 01       	movw	r16, r10
    e00a:	21 e0       	ldi	r18, 0x01	; 1
    e00c:	44 e0       	ldi	r20, 0x04	; 4
    e00e:	0e 94 f3 d3 	call	0x1a7e6	; 0x1a7e6 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4404
    if (strlen(str1) <= 4)
    e012:	f5 01       	movw	r30, r10
    e014:	01 90       	ld	r0, Z+
    e016:	00 20       	and	r0, r0
    e018:	e9 f7       	brne	.-6      	; 0xe014 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb2>
    e01a:	31 97       	sbiw	r30, 0x01	; 1
    e01c:	ea 19       	sub	r30, r10
    e01e:	fb 09       	sbc	r31, r11
    e020:	35 97       	sbiw	r30, 0x05	; 5
    e022:	28 f4       	brcc	.+10     	; 0xe02e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4405
      strcat(str1, "C");
    e024:	6e e7       	ldi	r22, 0x7E	; 126
    e026:	75 e0       	ldi	r23, 0x05	; 5
    e028:	c5 01       	movw	r24, r10
    e02a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    e02e:	c1 2c       	mov	r12, r1
    e030:	ee 24       	eor	r14, r14
    e032:	ea 94       	dec	r14
    e034:	fe 2c       	mov	r15, r14
    e036:	10 e0       	ldi	r17, 0x00	; 0
    e038:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    e03a:	28 e0       	ldi	r18, 0x08	; 8
    e03c:	a2 01       	movw	r20, r4
    e03e:	b1 01       	movw	r22, r2
    e040:	c5 01       	movw	r24, r10
    e042:	0e 94 0a 3d 	call	0x7a14	; 0x7a14 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4413
  }
  my_lcd.Set_Draw_color(BLACK);
    e046:	70 e0       	ldi	r23, 0x00	; 0
    e048:	60 e0       	ldi	r22, 0x00	; 0
    e04a:	81 ea       	ldi	r24, 0xA1	; 161
    e04c:	9b e0       	ldi	r25, 0x0B	; 11
    e04e:	0e 94 d7 91 	call	0x123ae	; 0x123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4414
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    e052:	83 01       	movw	r16, r6
    e054:	0c 5a       	subi	r16, 0xAC	; 172
    e056:	1f 4f       	sbci	r17, 0xFF	; 255
    e058:	94 01       	movw	r18, r8
    e05a:	2c 50       	subi	r18, 0x0C	; 12
    e05c:	3f 4f       	sbci	r19, 0xFF	; 255
    e05e:	a3 01       	movw	r20, r6
    e060:	b4 01       	movw	r22, r8
    e062:	81 ea       	ldi	r24, 0xA1	; 161
    e064:	9b e0       	ldi	r25, 0x0B	; 11
    e066:	0e 94 62 92 	call	0x124c4	; 0x124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
}
    e06a:	e8 96       	adiw	r28, 0x38	; 56
    e06c:	0f b6       	in	r0, 0x3f	; 63
    e06e:	f8 94       	cli
    e070:	de bf       	out	0x3e, r29	; 62
    e072:	0f be       	out	0x3f, r0	; 63
    e074:	cd bf       	out	0x3d, r28	; 61
    e076:	df 91       	pop	r29
    e078:	cf 91       	pop	r28
    e07a:	1f 91       	pop	r17
    e07c:	0f 91       	pop	r16
    e07e:	ff 90       	pop	r15
    e080:	ef 90       	pop	r14
    e082:	df 90       	pop	r13
    e084:	cf 90       	pop	r12
    e086:	bf 90       	pop	r11
    e088:	af 90       	pop	r10
    e08a:	9f 90       	pop	r9
    e08c:	8f 90       	pop	r8
    e08e:	7f 90       	pop	r7
    e090:	6f 90       	pop	r6
    e092:	5f 90       	pop	r5
    e094:	4f 90       	pop	r4
    e096:	3f 90       	pop	r3
    e098:	2f 90       	pop	r2
    e09a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    e09c:	62 e3       	ldi	r22, 0x32	; 50
    e09e:	76 e5       	ldi	r23, 0x56	; 86
    e0a0:	c5 01       	movw	r24, r10
    e0a2:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    e0a6:	c1 2c       	mov	r12, r1
    e0a8:	ee 24       	eor	r14, r14
    e0aa:	ea 94       	dec	r14
    e0ac:	fe 2c       	mov	r15, r14
    e0ae:	00 e0       	ldi	r16, 0x00	; 0
    e0b0:	18 ef       	ldi	r17, 0xF8	; 248
    e0b2:	c3 cf       	rjmp	.-122    	; 0xe03a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd8>

0000e0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    e0b4:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    e0b6:	80 85       	ldd	r24, Z+8	; 0x08
    e0b8:	81 11       	cpse	r24, r1
    e0ba:	0a c0       	rjmp	.+20     	; 0xe0d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    e0bc:	a2 81       	ldd	r26, Z+2	; 0x02
    e0be:	b3 81       	ldd	r27, Z+3	; 0x03
    e0c0:	cd 01       	movw	r24, r26
    e0c2:	01 96       	adiw	r24, 0x01	; 1
    e0c4:	93 83       	std	Z+3, r25	; 0x03
    e0c6:	82 83       	std	Z+2, r24	; 0x02
    e0c8:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    e0ca:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    e0cc:	81 e0       	ldi	r24, 0x01	; 1
    e0ce:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    e0d0:	87 81       	ldd	r24, Z+7	; 0x07
    e0d2:	08 95       	ret

0000e0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    e0d4:	1f 93       	push	r17
    e0d6:	cf 93       	push	r28
    e0d8:	df 93       	push	r29
    e0da:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    e0dc:	ce 01       	movw	r24, r28
    e0de:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e0e2:	8b 30       	cpi	r24, 0x0B	; 11
    e0e4:	3c f4       	brge	.+14     	; 0xe0f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    e0e6:	89 30       	cpi	r24, 0x09	; 9
    e0e8:	5c f4       	brge	.+22     	; 0xe100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    e0ea:	88 23       	and	r24, r24
    e0ec:	e9 f0       	breq	.+58     	; 0xe128 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    e0ee:	90 e0       	ldi	r25, 0x00	; 0
    e0f0:	80 e0       	ldi	r24, 0x00	; 0
    e0f2:	1c c0       	rjmp	.+56     	; 0xe12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    e0f4:	80 32       	cpi	r24, 0x20	; 32
    e0f6:	21 f0       	breq	.+8      	; 0xe100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    e0f8:	8f 32       	cpi	r24, 0x2F	; 47
    e0fa:	21 f0       	breq	.+8      	; 0xe104 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    e0fc:	8d 30       	cpi	r24, 0x0D	; 13
    e0fe:	b9 f7       	brne	.-18     	; 0xe0ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e100:	18 86       	std	Y+8, r1	; 0x08
    e102:	ec cf       	rjmp	.-40     	; 0xe0dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    e104:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    e106:	ce 01       	movw	r24, r28
    e108:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e10c:	8a 32       	cpi	r24, 0x2A	; 42
    e10e:	29 f0       	breq	.+10     	; 0xe11a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    e110:	8f 32       	cpi	r24, 0x2F	; 47
    e112:	d1 f0       	breq	.+52     	; 0xe148 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    e114:	82 e0       	ldi	r24, 0x02	; 2
    e116:	90 e0       	ldi	r25, 0x00	; 0
    e118:	09 c0       	rjmp	.+18     	; 0xe12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e11a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    e11c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    e11e:	ce 01       	movw	r24, r28
    e120:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    e124:	81 11       	cpse	r24, r1
    e126:	06 c0       	rjmp	.+12     	; 0xe134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    e128:	81 e0       	ldi	r24, 0x01	; 1
    e12a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    e12c:	df 91       	pop	r29
    e12e:	cf 91       	pop	r28
    e130:	1f 91       	pop	r17
    e132:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    e134:	8f 32       	cpi	r24, 0x2F	; 47
    e136:	11 f4       	brne	.+4      	; 0xe13c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303 (discriminator 1)
    e138:	11 11       	cpse	r17, r1
    e13a:	e2 cf       	rjmp	.-60     	; 0xe100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    e13c:	11 e0       	ldi	r17, 0x01	; 1
    e13e:	8a 32       	cpi	r24, 0x2A	; 42
    e140:	09 f0       	breq	.+2      	; 0xe144 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    e142:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e144:	18 86       	std	Y+8, r1	; 0x08
    e146:	eb cf       	rjmp	.-42     	; 0xe11e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    e148:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    e14a:	ce 01       	movw	r24, r28
    e14c:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    e150:	88 23       	and	r24, r24
    e152:	51 f3       	breq	.-44     	; 0xe128 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    e154:	8a 30       	cpi	r24, 0x0A	; 10
    e156:	c1 f7       	brne	.-16     	; 0xe148 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    e158:	c1 cf       	rjmp	.-126    	; 0xe0dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000e15a <float ArduinoJson::Internals::parseFloat<float>(char const*)>:
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:15

namespace ArduinoJson {
namespace Internals {

template <typename T>
inline T parseFloat(const char* s) {
    e15a:	ff 92       	push	r15
    e15c:	0f 93       	push	r16
    e15e:	1f 93       	push	r17
    e160:	cf 93       	push	r28
    e162:	df 93       	push	r29
    e164:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:20
  typedef FloatTraits<T> traits;
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL
    e166:	89 2b       	or	r24, r25
    e168:	09 f4       	brne	.+2      	; 0xe16c <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x12>
    e16a:	8b c0       	rjmp	.+278    	; 0xe282 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x128>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23

  bool negative_result = false;
  switch (*s) {
    e16c:	88 81       	ld	r24, Y
    e16e:	8b 32       	cpi	r24, 0x2B	; 43
    e170:	91 f1       	breq	.+100    	; 0xe1d6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7c>
    e172:	8d 32       	cpi	r24, 0x2D	; 45
    e174:	89 f5       	brne	.+98     	; 0xe1d8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x7e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    e176:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    e178:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    e17a:	88 81       	ld	r24, Y
    e17c:	84 37       	cpi	r24, 0x74	; 116
    e17e:	09 f4       	brne	.+2      	; 0xe182 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x28>
    e180:	db c0       	rjmp	.+438    	; 0xe338 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34 (discriminator 2)
  if (*s == 'n' || *s == 'N') return traits::nan();
    e182:	8f 7d       	andi	r24, 0xDF	; 223
    e184:	8e 34       	cpi	r24, 0x4E	; 78
    e186:	09 f4       	brne	.+2      	; 0xe18a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x30>
    e188:	dc c0       	rjmp	.+440    	; 0xe342 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1e8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35 (discriminator 1)
  if (*s == 'i' || *s == 'I')
    e18a:	89 34       	cpi	r24, 0x49	; 73
    e18c:	09 f4       	brne	.+2      	; 0xe190 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x36>
    e18e:	84 c0       	rjmp	.+264    	; 0xe298 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    e190:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    e192:	20 e0       	ldi	r18, 0x00	; 0
    e194:	30 e0       	ldi	r19, 0x00	; 0
    e196:	a9 01       	movw	r20, r18
    e198:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    e19a:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    e19c:	80 ed       	ldi	r24, 0xD0	; 208
    e19e:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    e1a0:	8a 30       	cpi	r24, 0x0A	; 10
    e1a2:	f0 f4       	brcc	.+60     	; 0xe1e0 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x86>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    e1a4:	2c 3c       	cpi	r18, 0xCC	; 204
    e1a6:	8c ec       	ldi	r24, 0xCC	; 204
    e1a8:	38 07       	cpc	r19, r24
    e1aa:	8c e0       	ldi	r24, 0x0C	; 12
    e1ac:	48 07       	cpc	r20, r24
    e1ae:	51 05       	cpc	r21, r1
    e1b0:	ac f4       	brge	.+42     	; 0xe1dc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x82>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    e1b2:	aa e0       	ldi	r26, 0x0A	; 10
    e1b4:	b0 e0       	ldi	r27, 0x00	; 0
    e1b6:	0e 94 e8 d3 	call	0x1a7d0	; 0x1a7d0 <__muluhisi3>
    e1ba:	20 2f       	mov	r18, r16
    e1bc:	00 0f       	add	r16, r16
    e1be:	33 0b       	sbc	r19, r19
    e1c0:	20 53       	subi	r18, 0x30	; 48
    e1c2:	31 09       	sbc	r19, r1
    e1c4:	03 2e       	mov	r0, r19
    e1c6:	00 0c       	add	r0, r0
    e1c8:	44 0b       	sbc	r20, r20
    e1ca:	55 0b       	sbc	r21, r21
    e1cc:	26 0f       	add	r18, r22
    e1ce:	37 1f       	adc	r19, r23
    e1d0:	48 1f       	adc	r20, r24
    e1d2:	59 1f       	adc	r21, r25
    e1d4:	e1 cf       	rjmp	.-62     	; 0xe198 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e1d6:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    e1d8:	10 e0       	ldi	r17, 0x00	; 0
    e1da:	cf cf       	rjmp	.-98     	; 0xe17a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x20>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    e1dc:	f3 94       	inc	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    e1de:	dc cf       	rjmp	.-72     	; 0xe198 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    else
      exponent_offset++;
    s++;
  }

  if (*s == '.') {
    e1e0:	0e 32       	cpi	r16, 0x2E	; 46
    e1e2:	11 f5       	brne	.+68     	; 0xe228 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    e1e4:	ef 01       	movw	r28, r30
    e1e6:	21 96       	adiw	r28, 0x01	; 1
    e1e8:	fe 01       	movw	r30, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    e1ea:	09 91       	ld	r16, Y+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e1ec:	80 ed       	ldi	r24, 0xD0	; 208
    e1ee:	80 0f       	add	r24, r16
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    e1f0:	8a 30       	cpi	r24, 0x0A	; 10
    e1f2:	d0 f4       	brcc	.+52     	; 0xe228 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    e1f4:	2c 3c       	cpi	r18, 0xCC	; 204
    e1f6:	8c ec       	ldi	r24, 0xCC	; 204
    e1f8:	38 07       	cpc	r19, r24
    e1fa:	8c e0       	ldi	r24, 0x0C	; 12
    e1fc:	48 07       	cpc	r20, r24
    e1fe:	51 05       	cpc	r21, r1
    e200:	9c f7       	brge	.-26     	; 0xe1e8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    e202:	aa e0       	ldi	r26, 0x0A	; 10
    e204:	b0 e0       	ldi	r27, 0x00	; 0
    e206:	0e 94 e8 d3 	call	0x1a7d0	; 0x1a7d0 <__muluhisi3>
    e20a:	20 2f       	mov	r18, r16
    e20c:	00 0f       	add	r16, r16
    e20e:	33 0b       	sbc	r19, r19
    e210:	20 53       	subi	r18, 0x30	; 48
    e212:	31 09       	sbc	r19, r1
    e214:	03 2e       	mov	r0, r19
    e216:	00 0c       	add	r0, r0
    e218:	44 0b       	sbc	r20, r20
    e21a:	55 0b       	sbc	r21, r21
    e21c:	26 0f       	add	r18, r22
    e21e:	37 1f       	adc	r19, r23
    e220:	48 1f       	adc	r20, r24
    e222:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    e224:	fa 94       	dec	r15
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
    e226:	e0 cf       	rjmp	.-64     	; 0xe1e8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x8e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    e228:	80 81       	ld	r24, Z
    e22a:	8f 7d       	andi	r24, 0xDF	; 223
    e22c:	cf 2d       	mov	r28, r15
    e22e:	ff 0c       	add	r15, r15
    e230:	dd 0b       	sbc	r29, r29
    e232:	85 34       	cpi	r24, 0x45	; 69
    e234:	09 f0       	breq	.+2      	; 0xe238 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xde>
    e236:	65 c0       	rjmp	.+202    	; 0xe302 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    e238:	81 81       	ldd	r24, Z+1	; 0x01
    e23a:	8d 32       	cpi	r24, 0x2D	; 45
    e23c:	31 f5       	brne	.+76     	; 0xe28a <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x130>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    e23e:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    e240:	71 e0       	ldi	r23, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    e242:	90 e0       	ldi	r25, 0x00	; 0
    e244:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    e246:	0a e0       	ldi	r16, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    e248:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e24a:	a0 ed       	ldi	r26, 0xD0	; 208
    e24c:	a6 0f       	add	r26, r22
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    e24e:	aa 30       	cpi	r26, 0x0A	; 10
    e250:	70 f5       	brcc	.+92     	; 0xe2ae <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x154>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    e252:	08 9f       	mul	r16, r24
    e254:	d0 01       	movw	r26, r0
    e256:	09 9f       	mul	r16, r25
    e258:	b0 0d       	add	r27, r0
    e25a:	11 24       	eor	r1, r1
    e25c:	86 2f       	mov	r24, r22
    e25e:	66 0f       	add	r22, r22
    e260:	99 0b       	sbc	r25, r25
    e262:	c0 97       	sbiw	r24, 0x30	; 48
    e264:	8a 0f       	add	r24, r26
    e266:	9b 1f       	adc	r25, r27
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    e268:	dc 01       	movw	r26, r24
    e26a:	ac 0f       	add	r26, r28
    e26c:	bd 1f       	adc	r27, r29
    e26e:	97 97       	sbiw	r26, 0x27	; 39
    e270:	5c f3       	brlt	.-42     	; 0xe248 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    e272:	77 23       	and	r23, r23
    e274:	89 f0       	breq	.+34     	; 0xe298 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    e276:	60 e0       	ldi	r22, 0x00	; 0
    e278:	70 e0       	ldi	r23, 0x00	; 0
    e27a:	80 e0       	ldi	r24, 0x00	; 0
    e27c:	90 e8       	ldi	r25, 0x80	; 128
    e27e:	11 11       	cpse	r17, r1
    e280:	3a c0       	rjmp	.+116    	; 0xe2f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
    e282:	60 e0       	ldi	r22, 0x00	; 0
    e284:	70 e0       	ldi	r23, 0x00	; 0
    e286:	cb 01       	movw	r24, r22
    e288:	36 c0       	rjmp	.+108    	; 0xe2f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    e28a:	8b 32       	cpi	r24, 0x2B	; 43
    e28c:	19 f0       	breq	.+6      	; 0xe294 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x13a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    e28e:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    e290:	70 e0       	ldi	r23, 0x00	; 0
    e292:	d7 cf       	rjmp	.-82     	; 0xe242 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0xe8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    e294:	32 96       	adiw	r30, 0x02	; 2
    e296:	fc cf       	rjmp	.-8      	; 0xe290 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x136>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    e298:	60 e0       	ldi	r22, 0x00	; 0
    e29a:	70 e0       	ldi	r23, 0x00	; 0
    e29c:	80 e8       	ldi	r24, 0x80	; 128
    e29e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    e2a0:	11 11       	cpse	r17, r1
    e2a2:	29 c0       	rjmp	.+82     	; 0xe2f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    e2a4:	60 e0       	ldi	r22, 0x00	; 0
    e2a6:	70 e0       	ldi	r23, 0x00	; 0
    e2a8:	80 e8       	ldi	r24, 0x80	; 128
    e2aa:	9f e7       	ldi	r25, 0x7F	; 127
    e2ac:	24 c0       	rjmp	.+72     	; 0xe2f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    e2ae:	77 23       	and	r23, r23
    e2b0:	19 f0       	breq	.+6      	; 0xe2b8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81 (discriminator 1)
    e2b2:	91 95       	neg	r25
    e2b4:	81 95       	neg	r24
    e2b6:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    e2b8:	c8 0f       	add	r28, r24
    e2ba:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    e2bc:	ca 01       	movw	r24, r20
    e2be:	b9 01       	movw	r22, r18
    e2c0:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    e2c4:	1c 16       	cp	r1, r28
    e2c6:	1d 06       	cpc	r1, r29
    e2c8:	fc f4       	brge	.+62     	; 0xe308 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    e2ca:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    e2cc:	c0 ff       	sbrs	r28, 0
    e2ce:	0c c0       	rjmp	.+24     	; 0xe2e8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x18e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    e2d0:	24 e0       	ldi	r18, 0x04	; 4
    e2d2:	02 9f       	mul	r16, r18
    e2d4:	f0 01       	movw	r30, r0
    e2d6:	11 24       	eor	r1, r1
    e2d8:	e2 5e       	subi	r30, 0xE2	; 226
    e2da:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    e2dc:	20 81       	ld	r18, Z
    e2de:	31 81       	ldd	r19, Z+1	; 0x01
    e2e0:	42 81       	ldd	r20, Z+2	; 0x02
    e2e2:	53 81       	ldd	r21, Z+3	; 0x03
    e2e4:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    e2e8:	d5 95       	asr	r29
    e2ea:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    e2ec:	0f 5f       	subi	r16, 0xFF	; 255
    e2ee:	20 97       	sbiw	r28, 0x00	; 0
    e2f0:	69 f7       	brne	.-38     	; 0xe2cc <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x172>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    e2f2:	11 11       	cpse	r17, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87 (discriminator 1)
    e2f4:	90 58       	subi	r25, 0x80	; 128
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:88
}
    e2f6:	df 91       	pop	r29
    e2f8:	cf 91       	pop	r28
    e2fa:	1f 91       	pop	r17
    e2fc:	0f 91       	pop	r16
    e2fe:	ff 90       	pop	r15
    e300:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    e302:	90 e0       	ldi	r25, 0x00	; 0
    e304:	80 e0       	ldi	r24, 0x00	; 0
    e306:	d8 cf       	rjmp	.-80     	; 0xe2b8 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x15e>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    e308:	d1 95       	neg	r29
    e30a:	c1 95       	neg	r28
    e30c:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    e30e:	00 e0       	ldi	r16, 0x00	; 0
    e310:	20 97       	sbiw	r28, 0x00	; 0
    e312:	79 f3       	breq	.-34     	; 0xe2f2 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x198>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    e314:	c0 ff       	sbrs	r28, 0
    e316:	0c c0       	rjmp	.+24     	; 0xe330 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1d6>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    e318:	24 e0       	ldi	r18, 0x04	; 4
    e31a:	02 9f       	mul	r16, r18
    e31c:	f0 01       	movw	r30, r0
    e31e:	11 24       	eor	r1, r1
    e320:	ea 5f       	subi	r30, 0xFA	; 250
    e322:	fd 4f       	sbci	r31, 0xFD	; 253
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE10make_floatIiEEffT_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    e324:	20 81       	ld	r18, Z
    e326:	31 81       	ldd	r19, Z+1	; 0x01
    e328:	42 81       	ldd	r20, Z+2	; 0x02
    e32a:	53 81       	ldd	r21, Z+3	; 0x03
    e32c:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    e330:	d5 95       	asr	r29
    e332:	c7 95       	ror	r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    e334:	0f 5f       	subi	r16, 0xFF	; 255
    e336:	ec cf       	rjmp	.-40     	; 0xe310 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x1b6>
_ZN11ArduinoJson9Internals10parseFloatIfEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    e338:	60 e0       	ldi	r22, 0x00	; 0
    e33a:	70 e0       	ldi	r23, 0x00	; 0
    e33c:	80 e8       	ldi	r24, 0x80	; 128
    e33e:	9f e3       	ldi	r25, 0x3F	; 63
    e340:	da cf       	rjmp	.-76     	; 0xe2f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    e342:	60 e0       	ldi	r22, 0x00	; 0
    e344:	70 e0       	ldi	r23, 0x00	; 0
    e346:	80 ec       	ldi	r24, 0xC0	; 192
    e348:	9f e7       	ldi	r25, 0x7F	; 127
    e34a:	d5 cf       	rjmp	.-86     	; 0xe2f6 <float ArduinoJson::Internals::parseFloat<float>(char const*)+0x19c>

0000e34c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    e34c:	df 92       	push	r13
    e34e:	ef 92       	push	r14
    e350:	ff 92       	push	r15
    e352:	0f 93       	push	r16
    e354:	1f 93       	push	r17
    e356:	cf 93       	push	r28
    e358:	df 93       	push	r29
    e35a:	ec 01       	movw	r28, r24
    e35c:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    e35e:	0c 81       	ldd	r16, Y+4	; 0x04
    e360:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    e362:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e366:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e368:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    e36a:	ce 01       	movw	r24, r28
    e36c:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e370:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    e372:	d8 16       	cp	r13, r24
    e374:	89 f1       	breq	.+98     	; 0xe3d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    e376:	81 11       	cpse	r24, r1
    e378:	0a c0       	rjmp	.+20     	; 0xe38e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    e37a:	81 e0       	ldi	r24, 0x01	; 1
    e37c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    e37e:	df 91       	pop	r29
    e380:	cf 91       	pop	r28
    e382:	1f 91       	pop	r17
    e384:	0f 91       	pop	r16
    e386:	ff 90       	pop	r15
    e388:	ef 90       	pop	r14
    e38a:	df 90       	pop	r13
    e38c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    e38e:	8c 35       	cpi	r24, 0x5C	; 92
    e390:	d1 f4       	brne	.+52     	; 0xe3c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    e392:	ce 01       	movw	r24, r28
    e394:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    e398:	88 23       	and	r24, r24
    e39a:	79 f3       	breq	.-34     	; 0xe37a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    e39c:	85 37       	cpi	r24, 0x75	; 117
    e39e:	19 f4       	brne	.+6      	; 0xe3a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    e3a0:	84 e0       	ldi	r24, 0x04	; 4
    e3a2:	90 e0       	ldi	r25, 0x00	; 0
    e3a4:	ec cf       	rjmp	.-40     	; 0xe37e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    e3a6:	ef ea       	ldi	r30, 0xAF	; 175
    e3a8:	f5 e0       	ldi	r31, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    e3aa:	90 81       	ld	r25, Z
    e3ac:	99 23       	and	r25, r25
    e3ae:	51 f0       	breq	.+20     	; 0xe3c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    e3b0:	89 13       	cpse	r24, r25
    e3b2:	06 c0       	rjmp	.+12     	; 0xe3c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    e3b4:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    e3b6:	81 11       	cpse	r24, r1
    e3b8:	05 c0       	rjmp	.+10     	; 0xe3c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    e3ba:	82 e0       	ldi	r24, 0x02	; 2
    e3bc:	90 e0       	ldi	r25, 0x00	; 0
    e3be:	df cf       	rjmp	.-66     	; 0xe37e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
_ZN11ArduinoJson9Internals14EscapeSequence12unescapeCharEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    e3c0:	32 96       	adiw	r30, 0x02	; 2
    e3c2:	f3 cf       	rjmp	.-26     	; 0xe3aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e3c4:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    e3c6:	ec 81       	ldd	r30, Y+4	; 0x04
    e3c8:	fd 81       	ldd	r31, Y+5	; 0x05
    e3ca:	9f 01       	movw	r18, r30
    e3cc:	2f 5f       	subi	r18, 0xFF	; 255
    e3ce:	3f 4f       	sbci	r19, 0xFF	; 255
    e3d0:	3d 83       	std	Y+5, r19	; 0x05
    e3d2:	2c 83       	std	Y+4, r18	; 0x04
    e3d4:	80 83       	st	Z, r24
    e3d6:	c9 cf       	rjmp	.-110    	; 0xe36a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    e3d8:	ec 81       	ldd	r30, Y+4	; 0x04
    e3da:	fd 81       	ldd	r31, Y+5	; 0x05
    e3dc:	cf 01       	movw	r24, r30
    e3de:	01 96       	adiw	r24, 0x01	; 1
    e3e0:	9d 83       	std	Y+5, r25	; 0x05
    e3e2:	8c 83       	std	Y+4, r24	; 0x04
    e3e4:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    e3e6:	f7 01       	movw	r30, r14
    e3e8:	11 83       	std	Z+1, r17	; 0x01
    e3ea:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    e3ec:	83 e0       	ldi	r24, 0x03	; 3
    e3ee:	90 e0       	ldi	r25, 0x00	; 0
    e3f0:	01 2b       	or	r16, r17
    e3f2:	29 f2       	breq	.-118    	; 0xe37e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    e3f4:	90 e0       	ldi	r25, 0x00	; 0
    e3f6:	80 e0       	ldi	r24, 0x00	; 0
    e3f8:	c2 cf       	rjmp	.-124    	; 0xe37e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

0000e3fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    e3fa:	80 33       	cpi	r24, 0x30	; 48
    e3fc:	9c f0       	brlt	.+38     	; 0xe424 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    e3fe:	8a 33       	cpi	r24, 0x3A	; 58
    e400:	24 f0       	brlt	.+8      	; 0xe40a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    e402:	8f 35       	cpi	r24, 0x5F	; 95
    e404:	24 f0       	brlt	.+8      	; 0xe40e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    e406:	8b 37       	cpi	r24, 0x7B	; 123
    e408:	24 f4       	brge	.+8      	; 0xe412 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    e40a:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    e40c:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    e40e:	81 34       	cpi	r24, 0x41	; 65
    e410:	4c f0       	brlt	.+18     	; 0xe424 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    e412:	8b 35       	cpi	r24, 0x5B	; 91
    e414:	d4 f3       	brlt	.-12     	; 0xe40a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    e416:	93 ed       	ldi	r25, 0xD3	; 211
    e418:	98 0f       	add	r25, r24
    e41a:	81 e0       	ldi	r24, 0x01	; 1
    e41c:	92 30       	cpi	r25, 0x02	; 2
    e41e:	b0 f3       	brcs	.-20     	; 0xe40c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    e420:	80 e0       	ldi	r24, 0x00	; 0
    e422:	08 95       	ret
    e424:	8b 32       	cpi	r24, 0x2B	; 43
    e426:	b9 f7       	brne	.-18     	; 0xe416 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    e428:	f0 cf       	rjmp	.-32     	; 0xe40a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

0000e42a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:236
    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    e42a:	8f 92       	push	r8
    e42c:	9f 92       	push	r9
    e42e:	af 92       	push	r10
    e430:	bf 92       	push	r11
    e432:	cf 92       	push	r12
    e434:	df 92       	push	r13
    e436:	ef 92       	push	r14
    e438:	ff 92       	push	r15
    e43a:	0f 93       	push	r16
    e43c:	1f 93       	push	r17
    e43e:	cf 93       	push	r28
    e440:	df 93       	push	r29
    e442:	cd b7       	in	r28, 0x3d	; 61
    e444:	de b7       	in	r29, 0x3e	; 62
    e446:	c0 54       	subi	r28, 0x40	; 64
    e448:	d1 09       	sbc	r29, r1
    e44a:	0f b6       	in	r0, 0x3f	; 63
    e44c:	f8 94       	cli
    e44e:	de bf       	out	0x3e, r29	; 62
    e450:	0f be       	out	0x3f, r0	; 63
    e452:	cd bf       	out	0x3d, r28	; 61
    e454:	5c 01       	movw	r10, r24
    e456:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    e458:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e45c:	c8 2e       	mov	r12, r24
    e45e:	ce 01       	movw	r24, r28
    e460:	01 96       	adiw	r24, 0x01	; 1
    e462:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    e464:	d1 2c       	mov	r13, r1
    e466:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    e468:	8c 2d       	mov	r24, r12
    e46a:	0e 94 fd 71 	call	0xe3fa	; 0xe3fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    e46e:	88 23       	and	r24, r24
    e470:	71 f0       	breq	.+28     	; 0xe48e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241 (discriminator 1)
    e472:	9f e3       	ldi	r25, 0x3F	; 63
    e474:	d9 16       	cp	r13, r25
    e476:	59 f0       	breq	.+22     	; 0xe48e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x64>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e478:	f5 01       	movw	r30, r10
    e47a:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    e47c:	d3 94       	inc	r13
    e47e:	f4 01       	movw	r30, r8
    e480:	c1 92       	st	Z+, r12
    e482:	4f 01       	movw	r8, r30
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    e484:	c5 01       	movw	r24, r10
    e486:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e48a:	c8 2e       	mov	r12, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241
  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    e48c:	ed cf       	rjmp	.-38     	; 0xe468 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    e48e:	f7 01       	movw	r30, r14
    e490:	ed 0d       	add	r30, r13
    e492:	f1 1d       	adc	r31, r1
    e494:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    e496:	89 81       	ldd	r24, Y+1	; 0x01
    e498:	88 23       	and	r24, r24
    e49a:	09 f4       	brne	.+2      	; 0xe49e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x74>
    e49c:	56 c0       	rjmp	.+172    	; 0xe54a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals6issignEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    e49e:	8d 32       	cpi	r24, 0x2D	; 45
    e4a0:	19 f0       	breq	.+6      	; 0xe4a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x7e>
    e4a2:	f7 01       	movw	r30, r14
    e4a4:	8b 32       	cpi	r24, 0x2B	; 43
    e4a6:	11 f4       	brne	.+4      	; 0xe4ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    e4a8:	fe 01       	movw	r30, r28
    e4aa:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
  while (isdigit(*s)) s++;
    e4ac:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    e4ae:	20 ed       	ldi	r18, 0xD0	; 208
    e4b0:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals9isIntegerEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    e4b2:	2a 30       	cpi	r18, 0x0A	; 10
    e4b4:	d8 f3       	brcs	.-10     	; 0xe4ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x82>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    e4b6:	91 11       	cpse	r25, r1
    e4b8:	48 c0       	rjmp	.+144    	; 0xe54a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x120>
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    e4ba:	84 37       	cpi	r24, 0x74	; 116
    e4bc:	09 f4       	brne	.+2      	; 0xe4c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x96>
    e4be:	a4 c0       	rjmp	.+328    	; 0xe608 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    e4c0:	8b 32       	cpi	r24, 0x2B	; 43
    e4c2:	51 f0       	breq	.+20     	; 0xe4d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e4c4:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    e4c6:	8d 32       	cpi	r24, 0x2D	; 45
    e4c8:	61 f4       	brne	.+24     	; 0xe4e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
    case '-':
      negative_result = true;
    e4ca:	dd 24       	eor	r13, r13
    e4cc:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
      s++;
    e4ce:	7e 01       	movw	r14, r28
    e4d0:	82 e0       	ldi	r24, 0x02	; 2
    e4d2:	e8 0e       	add	r14, r24
    e4d4:	f1 1c       	adc	r15, r1
    e4d6:	05 c0       	rjmp	.+10     	; 0xe4e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xb8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    e4d8:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    e4da:	7e 01       	movw	r14, r28
    e4dc:	f2 e0       	ldi	r31, 0x02	; 2
    e4de:	ef 0e       	add	r14, r31
    e4e0:	f1 1c       	adc	r15, r1
    e4e2:	f7 01       	movw	r30, r14
    e4e4:	20 e0       	ldi	r18, 0x00	; 0
    e4e6:	30 e0       	ldi	r19, 0x00	; 0
    e4e8:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
      break;
  }

  while (isdigit(*s)) {
    e4ea:	f1 90       	ld	r15, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    e4ec:	80 ed       	ldi	r24, 0xD0	; 208
    e4ee:	8f 0d       	add	r24, r15
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    e4f0:	8a 30       	cpi	r24, 0x0A	; 10
    e4f2:	90 f4       	brcc	.+36     	; 0xe518 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xee>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    e4f4:	aa e0       	ldi	r26, 0x0A	; 10
    e4f6:	b0 e0       	ldi	r27, 0x00	; 0
    e4f8:	0e 94 e8 d3 	call	0x1a7d0	; 0x1a7d0 <__muluhisi3>
    e4fc:	2f 2d       	mov	r18, r15
    e4fe:	ff 0c       	add	r15, r15
    e500:	33 0b       	sbc	r19, r19
    e502:	20 53       	subi	r18, 0x30	; 48
    e504:	31 09       	sbc	r19, r1
    e506:	03 2e       	mov	r0, r19
    e508:	00 0c       	add	r0, r0
    e50a:	44 0b       	sbc	r20, r20
    e50c:	55 0b       	sbc	r21, r21
    e50e:	26 0f       	add	r18, r22
    e510:	37 1f       	adc	r19, r23
    e512:	48 1f       	adc	r20, r24
    e514:	59 1f       	adc	r21, r25
    e516:	e9 cf       	rjmp	.-46     	; 0xe4ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xc0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    e518:	dd 20       	and	r13, r13
    e51a:	09 f4       	brne	.+2      	; 0xe51e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0xf4>
    e51c:	79 c0       	rjmp	.+242    	; 0xe610 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1e6>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    e51e:	01 15       	cp	r16, r1
    e520:	11 05       	cpc	r17, r1
    e522:	81 f0       	breq	.+32     	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    e524:	87 e0       	ldi	r24, 0x07	; 7
    e526:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    e528:	21 15       	cp	r18, r1
    e52a:	31 05       	cpc	r19, r1
    e52c:	41 05       	cpc	r20, r1
    e52e:	51 05       	cpc	r21, r1
    e530:	11 f4       	brne	.+4      	; 0xe536 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x10c>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    e532:	86 e0       	ldi	r24, 0x06	; 6
    e534:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    e536:	f8 01       	movw	r30, r16
    e538:	91 83       	std	Z+1, r25	; 0x01
    e53a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    e53c:	22 83       	std	Z+2, r18	; 0x02
    e53e:	33 83       	std	Z+3, r19	; 0x03
    e540:	44 83       	std	Z+4, r20	; 0x04
    e542:	55 83       	std	Z+5, r21	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    e544:	90 e0       	ldi	r25, 0x00	; 0
    e546:	80 e0       	ldi	r24, 0x00	; 0
    e548:	4b c0       	rjmp	.+150    	; 0xe5e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b6>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
    }
    buffer[n] = 0;

    if (isInteger(buffer)) {
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    e54a:	c7 01       	movw	r24, r14
    e54c:	0e 94 2b 39 	call	0x7256	; 0x7256 <ArduinoJson::Internals::isFloat(char const*)>
    e550:	88 23       	and	r24, r24
    e552:	81 f0       	breq	.+32     	; 0xe574 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x14a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:251
      result.set(parseFloat<JsonFloat>(buffer));
    e554:	c7 01       	movw	r24, r14
    e556:	0e 94 ad 70 	call	0xe15a	; 0xe15a <float ArduinoJson::Internals::parseFloat<float>(char const*)>
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    e55a:	01 15       	cp	r16, r1
    e55c:	11 05       	cpc	r17, r1
    e55e:	91 f3       	breq	.-28     	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    e560:	2a e0       	ldi	r18, 0x0A	; 10
    e562:	30 e0       	ldi	r19, 0x00	; 0
    e564:	f8 01       	movw	r30, r16
    e566:	31 83       	std	Z+1, r19	; 0x01
    e568:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    e56a:	62 83       	std	Z+2, r22	; 0x02
    e56c:	73 83       	std	Z+3, r23	; 0x03
    e56e:	84 83       	std	Z+4, r24	; 0x04
    e570:	95 83       	std	Z+5, r25	; 0x05
    e572:	e8 cf       	rjmp	.-48     	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
    } else if (!strcmp(buffer, "true")) {
    e574:	6a eb       	ldi	r22, 0xBA	; 186
    e576:	75 e0       	ldi	r23, 0x05	; 5
    e578:	c7 01       	movw	r24, r14
    e57a:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    e57e:	89 2b       	or	r24, r25
    e580:	89 f4       	brne	.+34     	; 0xe5a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x17a>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    e582:	01 15       	cp	r16, r1
    e584:	11 05       	cpc	r17, r1
    e586:	f1 f2       	breq	.-68     	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    e588:	85 e0       	ldi	r24, 0x05	; 5
    e58a:	90 e0       	ldi	r25, 0x00	; 0
    e58c:	f8 01       	movw	r30, r16
    e58e:	91 83       	std	Z+1, r25	; 0x01
    e590:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    e592:	81 e0       	ldi	r24, 0x01	; 1
    e594:	90 e0       	ldi	r25, 0x00	; 0
    e596:	a0 e0       	ldi	r26, 0x00	; 0
    e598:	b0 e0       	ldi	r27, 0x00	; 0
    e59a:	82 83       	std	Z+2, r24	; 0x02
    e59c:	93 83       	std	Z+3, r25	; 0x03
    e59e:	a4 83       	std	Z+4, r26	; 0x04
    e5a0:	b5 83       	std	Z+5, r27	; 0x05
    e5a2:	d0 cf       	rjmp	.-96     	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    e5a4:	6f eb       	ldi	r22, 0xBF	; 191
    e5a6:	75 e0       	ldi	r23, 0x05	; 5
    e5a8:	c7 01       	movw	r24, r14
    e5aa:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    e5ae:	89 2b       	or	r24, r25
    e5b0:	69 f4       	brne	.+26     	; 0xe5cc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1a2>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    e5b2:	01 15       	cp	r16, r1
    e5b4:	11 05       	cpc	r17, r1
    e5b6:	31 f2       	breq	.-116    	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    e5b8:	85 e0       	ldi	r24, 0x05	; 5
    e5ba:	90 e0       	ldi	r25, 0x00	; 0
    e5bc:	f8 01       	movw	r30, r16
    e5be:	91 83       	std	Z+1, r25	; 0x01
    e5c0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    e5c2:	12 82       	std	Z+2, r1	; 0x02
    e5c4:	13 82       	std	Z+3, r1	; 0x03
    e5c6:	14 82       	std	Z+4, r1	; 0x04
    e5c8:	15 82       	std	Z+5, r1	; 0x05
    e5ca:	bc cf       	rjmp	.-136    	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseNumericValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    e5cc:	65 ec       	ldi	r22, 0xC5	; 197
    e5ce:	75 e0       	ldi	r23, 0x05	; 5
    e5d0:	c7 01       	movw	r24, r14
    e5d2:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    e5d6:	89 2b       	or	r24, r25
    e5d8:	09 f4       	brne	.+2      	; 0xe5dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1b2>
    e5da:	b4 cf       	rjmp	.-152    	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    e5dc:	82 e0       	ldi	r24, 0x02	; 2
    e5de:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:262
    }
    return DeserializationError::Ok;
  }
    e5e0:	c0 5c       	subi	r28, 0xC0	; 192
    e5e2:	df 4f       	sbci	r29, 0xFF	; 255
    e5e4:	0f b6       	in	r0, 0x3f	; 63
    e5e6:	f8 94       	cli
    e5e8:	de bf       	out	0x3e, r29	; 62
    e5ea:	0f be       	out	0x3f, r0	; 63
    e5ec:	cd bf       	out	0x3d, r28	; 61
    e5ee:	df 91       	pop	r29
    e5f0:	cf 91       	pop	r28
    e5f2:	1f 91       	pop	r17
    e5f4:	0f 91       	pop	r16
    e5f6:	ff 90       	pop	r15
    e5f8:	ef 90       	pop	r14
    e5fa:	df 90       	pop	r13
    e5fc:	cf 90       	pop	r12
    e5fe:	bf 90       	pop	r11
    e600:	af 90       	pop	r10
    e602:	9f 90       	pop	r9
    e604:	8f 90       	pop	r8
    e606:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIlEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    e608:	21 e0       	ldi	r18, 0x01	; 1
    e60a:	30 e0       	ldi	r19, 0x00	; 0
    e60c:	40 e0       	ldi	r20, 0x00	; 0
    e60e:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    e610:	01 15       	cp	r16, r1
    e612:	11 05       	cpc	r17, r1
    e614:	09 f0       	breq	.+2      	; 0xe618 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x1ee>
    e616:	8d cf       	rjmp	.-230    	; 0xe532 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x108>
    e618:	95 cf       	rjmp	.-214    	; 0xe544 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)+0x11a>

0000e61a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:166
    } else {
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    e61a:	cf 92       	push	r12
    e61c:	df 92       	push	r13
    e61e:	ef 92       	push	r14
    e620:	ff 92       	push	r15
    e622:	1f 93       	push	r17
    e624:	cf 93       	push	r28
    e626:	df 93       	push	r29
    e628:	ec 01       	movw	r28, r24
    e62a:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
    if (isQuote(current())) {
    e62c:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    e630:	87 32       	cpi	r24, 0x27	; 39
    e632:	a1 f0       	breq	.+40     	; 0xe65c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
    e634:	82 32       	cpi	r24, 0x22	; 34
    e636:	91 f0       	breq	.+36     	; 0xe65c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x42>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC4EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    e638:	ec 80       	ldd	r14, Y+4	; 0x04
    e63a:	fd 80       	ldd	r15, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    e63c:	ce 01       	movw	r24, r28
    e63e:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e642:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    e644:	81 11       	cpse	r24, r1
    e646:	15 c0       	rjmp	.+42     	; 0xe672 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x58>
    e648:	81 e0       	ldi	r24, 0x01	; 1
    e64a:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE8parseKeyEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    if (isQuote(current())) {
      return parseQuotedString(key);
    } else {
      return parseNonQuotedString(key);
    }
  }
    e64c:	df 91       	pop	r29
    e64e:	cf 91       	pop	r28
    e650:	1f 91       	pop	r17
    e652:	ff 90       	pop	r15
    e654:	ef 90       	pop	r14
    e656:	df 90       	pop	r13
    e658:	cf 90       	pop	r12
    e65a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    e65c:	b6 01       	movw	r22, r12
    e65e:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:172
    } else {
      return parseNonQuotedString(key);
    }
  }
    e660:	df 91       	pop	r29
    e662:	cf 91       	pop	r28
    e664:	1f 91       	pop	r17
    e666:	ff 90       	pop	r15
    e668:	ef 90       	pop	r14
    e66a:	df 90       	pop	r13
    e66c:	cf 90       	pop	r12
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    e66e:	0c 94 a6 71 	jmp	0xe34c	; 0xe34c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    e672:	0e 94 fd 71 	call	0xe3fa	; 0xe3fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    e676:	88 23       	and	r24, r24
    e678:	09 f1       	breq	.+66     	; 0xe6bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0xa2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e67a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    e67c:	ec 81       	ldd	r30, Y+4	; 0x04
    e67e:	fd 81       	ldd	r31, Y+5	; 0x05
    e680:	cf 01       	movw	r24, r30
    e682:	01 96       	adiw	r24, 0x01	; 1
    e684:	9d 83       	std	Y+5, r25	; 0x05
    e686:	8c 83       	std	Y+4, r24	; 0x04
    e688:	10 83       	st	Z, r17
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    e68a:	ce 01       	movw	r24, r28
    e68c:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e690:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    e692:	0e 94 fd 71 	call	0xe3fa	; 0xe3fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    e696:	81 11       	cpse	r24, r1
    e698:	f0 cf       	rjmp	.-32     	; 0xe67a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x60>
_ZNK11ArduinoJson9Internals11StringMoverIcE6String5c_strEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    e69a:	ec 81       	ldd	r30, Y+4	; 0x04
    e69c:	fd 81       	ldd	r31, Y+5	; 0x05
    e69e:	cf 01       	movw	r24, r30
    e6a0:	01 96       	adiw	r24, 0x01	; 1
    e6a2:	9d 83       	std	Y+5, r25	; 0x05
    e6a4:	8c 83       	std	Y+4, r24	; 0x04
    e6a6:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE20parseNonQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    e6a8:	f6 01       	movw	r30, r12
    e6aa:	f1 82       	std	Z+1, r15	; 0x01
    e6ac:	e0 82       	st	Z, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:233
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
    e6ae:	90 e0       	ldi	r25, 0x00	; 0
    e6b0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    e6b2:	ef 28       	or	r14, r15
    e6b4:	59 f6       	brne	.-106    	; 0xe64c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
    e6b6:	83 e0       	ldi	r24, 0x03	; 3
    e6b8:	90 e0       	ldi	r25, 0x00	; 0
    e6ba:	c8 cf       	rjmp	.-112    	; 0xe64c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:228
        move();
        str.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    e6bc:	82 e0       	ldi	r24, 0x02	; 2
    e6be:	90 e0       	ldi	r25, 0x00	; 0
    e6c0:	c5 cf       	rjmp	.-118    	; 0xe64c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)+0x32>

0000e6c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:106
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    e6c2:	3f 92       	push	r3
    e6c4:	4f 92       	push	r4
    e6c6:	5f 92       	push	r5
    e6c8:	6f 92       	push	r6
    e6ca:	7f 92       	push	r7
    e6cc:	8f 92       	push	r8
    e6ce:	9f 92       	push	r9
    e6d0:	af 92       	push	r10
    e6d2:	bf 92       	push	r11
    e6d4:	cf 92       	push	r12
    e6d6:	df 92       	push	r13
    e6d8:	ef 92       	push	r14
    e6da:	ff 92       	push	r15
    e6dc:	0f 93       	push	r16
    e6de:	1f 93       	push	r17
    e6e0:	cf 93       	push	r28
    e6e2:	df 93       	push	r29
    e6e4:	1f 92       	push	r1
    e6e6:	1f 92       	push	r1
    e6e8:	cd b7       	in	r28, 0x3d	; 61
    e6ea:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    e6ec:	dc 01       	movw	r26, r24
    e6ee:	16 96       	adiw	r26, 0x06	; 6
    e6f0:	2c 91       	ld	r18, X
    e6f2:	16 97       	sbiw	r26, 0x06	; 6
    e6f4:	21 11       	cpse	r18, r1
    e6f6:	16 c0       	rjmp	.+44     	; 0xe724 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x62>
    e6f8:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    e6fa:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:156

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
    e6fc:	0f 90       	pop	r0
    e6fe:	0f 90       	pop	r0
    e700:	df 91       	pop	r29
    e702:	cf 91       	pop	r28
    e704:	1f 91       	pop	r17
    e706:	0f 91       	pop	r16
    e708:	ff 90       	pop	r15
    e70a:	ef 90       	pop	r14
    e70c:	df 90       	pop	r13
    e70e:	cf 90       	pop	r12
    e710:	bf 90       	pop	r11
    e712:	af 90       	pop	r10
    e714:	9f 90       	pop	r9
    e716:	8f 90       	pop	r8
    e718:	7f 90       	pop	r7
    e71a:	6f 90       	pop	r6
    e71c:	5f 90       	pop	r5
    e71e:	4f 90       	pop	r4
    e720:	3f 90       	pop	r3
    e722:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    e724:	6b 01       	movw	r12, r22
    e726:	61 15       	cp	r22, r1
    e728:	71 05       	cpc	r23, r1
    e72a:	11 f4       	brne	.+4      	; 0xe730 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    e72c:	83 e0       	ldi	r24, 0x03	; 3
    e72e:	e5 cf       	rjmp	.-54     	; 0xe6fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
    e730:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    e732:	89 e0       	ldi	r24, 0x09	; 9
    e734:	90 e0       	ldi	r25, 0x00	; 0
    e736:	fb 01       	movw	r30, r22
    e738:	91 83       	std	Z+1, r25	; 0x01
    e73a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    e73c:	13 82       	std	Z+3, r1	; 0x03
    e73e:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    e740:	15 82       	std	Z+5, r1	; 0x05
    e742:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    e744:	4b 01       	movw	r8, r22
    e746:	f2 e0       	ldi	r31, 0x02	; 2
    e748:	8f 0e       	add	r8, r31
    e74a:	91 1c       	adc	r9, r1
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    e74c:	7a 01       	movw	r14, r20
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e74e:	cd 01       	movw	r24, r26
    e750:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e754:	8b 37       	cpi	r24, 0x7B	; 123
    e756:	11 f0       	breq	.+4      	; 0xe75c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x9a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:132
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
    e758:	82 e0       	ldi	r24, 0x02	; 2
    e75a:	cf cf       	rjmp	.-98     	; 0xe6fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e75c:	d8 01       	movw	r26, r16
    e75e:	18 96       	adiw	r26, 0x08	; 8
    e760:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    e762:	c8 01       	movw	r24, r16
    e764:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    e768:	00 97       	sbiw	r24, 0x00	; 0
    e76a:	41 f6       	brne	.-112    	; 0xe6fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e76c:	c8 01       	movw	r24, r16
    e76e:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e772:	8d 37       	cpi	r24, 0x7D	; 125
    e774:	09 f4       	brne	.+2      	; 0xe778 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xb6>
    e776:	4b c0       	rjmp	.+150    	; 0xe80e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x14c>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    e778:	8c e0       	ldi	r24, 0x0C	; 12
    e77a:	38 2e       	mov	r3, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:126

    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
    e77c:	be 01       	movw	r22, r28
    e77e:	6f 5f       	subi	r22, 0xFF	; 255
    e780:	7f 4f       	sbci	r23, 0xFF	; 255
    e782:	c8 01       	movw	r24, r16
    e784:	0e 94 0d 73 	call	0xe61a	; 0xe61a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseKey(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
      if (err) return err;
    e788:	00 97       	sbiw	r24, 0x00	; 0
    e78a:	09 f0       	breq	.+2      	; 0xe78e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xcc>
    e78c:	b7 cf       	rjmp	.-146    	; 0xe6fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    e78e:	c8 01       	movw	r24, r16
    e790:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    e794:	00 97       	sbiw	r24, 0x00	; 0
    e796:	09 f0       	breq	.+2      	; 0xe79a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xd8>
    e798:	b1 cf       	rjmp	.-158    	; 0xe6fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e79a:	c8 01       	movw	r24, r16
    e79c:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e7a0:	8a 33       	cpi	r24, 0x3A	; 58
    e7a2:	d1 f6       	brne	.-76     	; 0xe758 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e7a4:	d8 01       	movw	r26, r16
    e7a6:	18 96       	adiw	r26, 0x08	; 8
    e7a8:	1c 92       	st	X, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    e7aa:	a9 80       	ldd	r10, Y+1	; 0x01
    e7ac:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    e7ae:	a1 14       	cp	r10, r1
    e7b0:	b1 04       	cpc	r11, r1
    e7b2:	89 f5       	brne	.+98     	; 0xe816 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x154>
    e7b4:	90 e0       	ldi	r25, 0x00	; 0
    e7b6:	80 e0       	ldi	r24, 0x00	; 0
    e7b8:	30 e0       	ldi	r19, 0x00	; 0
    e7ba:	20 e0       	ldi	r18, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    e7bc:	43 2e       	mov	r4, r19
    e7be:	52 2e       	mov	r5, r18
    e7c0:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    e7c2:	89 2b       	or	r24, r25
    e7c4:	09 f4       	brne	.+2      	; 0xe7c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x106>
    e7c6:	b2 cf       	rjmp	.-156    	; 0xe72c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x6a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    e7c8:	d8 01       	movw	r26, r16
    e7ca:	16 96       	adiw	r26, 0x06	; 6
    e7cc:	8c 91       	ld	r24, X
    e7ce:	16 97       	sbiw	r26, 0x06	; 6
    e7d0:	81 50       	subi	r24, 0x01	; 1
    e7d2:	16 96       	adiw	r26, 0x06	; 6
    e7d4:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    e7d6:	b3 01       	movw	r22, r6
    e7d8:	a2 01       	movw	r20, r4
    e7da:	c8 01       	movw	r24, r16
    e7dc:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    e7e0:	f8 01       	movw	r30, r16
    e7e2:	26 81       	ldd	r18, Z+6	; 0x06
    e7e4:	2f 5f       	subi	r18, 0xFF	; 255
    e7e6:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    e7e8:	00 97       	sbiw	r24, 0x00	; 0
    e7ea:	09 f0       	breq	.+2      	; 0xe7ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x12c>
    e7ec:	87 cf       	rjmp	.-242    	; 0xe6fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    e7ee:	c8 01       	movw	r24, r16
    e7f0:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    e7f4:	00 97       	sbiw	r24, 0x00	; 0
    e7f6:	09 f0       	breq	.+2      	; 0xe7fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x138>
    e7f8:	81 cf       	rjmp	.-254    	; 0xe6fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e7fa:	c8 01       	movw	r24, r16
    e7fc:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e800:	8d 37       	cpi	r24, 0x7D	; 125
    e802:	09 f0       	breq	.+2      	; 0xe806 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x144>
    e804:	43 c0       	rjmp	.+134    	; 0xe88c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ca>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e806:	d8 01       	movw	r26, r16
    e808:	18 96       	adiw	r26, 0x08	; 8
    e80a:	1c 92       	st	X, r1
    e80c:	02 c0       	rjmp	.+4      	; 0xe812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x150>
    e80e:	f8 01       	movw	r30, r16
    e810:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:149
      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
    e812:	80 e0       	ldi	r24, 0x00	; 0
    e814:	72 cf       	rjmp	.-284    	; 0xe6fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x38>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    e816:	b5 01       	movw	r22, r10
    e818:	c4 01       	movw	r24, r8
    e81a:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    e81e:	00 97       	sbiw	r24, 0x00	; 0
    e820:	49 f5       	brne	.+82     	; 0xe874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b2>
_ZN11ArduinoJson9Internals21AllocableInMemoryPoolnwEjPNS0_10MemoryPoolE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    e822:	d7 01       	movw	r26, r14
    e824:	ed 91       	ld	r30, X+
    e826:	fc 91       	ld	r31, X
    e828:	01 90       	ld	r0, Z+
    e82a:	f0 81       	ld	r31, Z
    e82c:	e0 2d       	mov	r30, r0
    e82e:	6c e0       	ldi	r22, 0x0C	; 12
    e830:	70 e0       	ldi	r23, 0x00	; 0
    e832:	c7 01       	movw	r24, r14
    e834:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    e836:	00 97       	sbiw	r24, 0x00	; 0
    e838:	09 f4       	brne	.+2      	; 0xe83c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17a>
    e83a:	bc cf       	rjmp	.-136    	; 0xe7b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xf2>
    e83c:	fc 01       	movw	r30, r24
    e83e:	23 2d       	mov	r18, r3
    e840:	11 92       	st	Z+, r1
    e842:	2a 95       	dec	r18
    e844:	e9 f7       	brne	.-6      	; 0xe840 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x17e>
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    e846:	dc 01       	movw	r26, r24
    e848:	1d 92       	st	X+, r1
    e84a:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    e84c:	d6 01       	movw	r26, r12
    e84e:	14 96       	adiw	r26, 0x04	; 4
    e850:	ed 91       	ld	r30, X+
    e852:	fc 91       	ld	r31, X
    e854:	15 97       	sbiw	r26, 0x05	; 5
    e856:	30 97       	sbiw	r30, 0x00	; 0
    e858:	81 f0       	breq	.+32     	; 0xe87a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    e85a:	dc 01       	movw	r26, r24
    e85c:	19 96       	adiw	r26, 0x09	; 9
    e85e:	fc 93       	st	X, r31
    e860:	ee 93       	st	-X, r30
    e862:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    e864:	97 83       	std	Z+7, r25	; 0x07
    e866:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    e868:	f6 01       	movw	r30, r12
    e86a:	95 83       	std	Z+5, r25	; 0x05
    e86c:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    e86e:	fc 01       	movw	r30, r24
    e870:	b3 86       	std	Z+11, r11	; 0x0b
    e872:	a2 86       	std	Z+10, r10	; 0x0a
_ZN11ArduinoJson11JsonVariant2toINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
    e874:	3e 2d       	mov	r19, r14
    e876:	2f 2d       	mov	r18, r15
    e878:	a1 cf       	rjmp	.-190    	; 0xe7bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xfa>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    e87a:	13 96       	adiw	r26, 0x03	; 3
    e87c:	9c 93       	st	X, r25
    e87e:	8e 93       	st	-X, r24
    e880:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    e882:	15 96       	adiw	r26, 0x05	; 5
    e884:	9c 93       	st	X, r25
    e886:	8e 93       	st	-X, r24
    e888:	14 97       	sbiw	r26, 0x04	; 4
    e88a:	f1 cf       	rjmp	.-30     	; 0xe86e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1ac>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e88c:	c8 01       	movw	r24, r16
    e88e:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e892:	8c 32       	cpi	r24, 0x2C	; 44
    e894:	09 f0       	breq	.+2      	; 0xe898 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1d6>
    e896:	60 cf       	rjmp	.-320    	; 0xe758 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x96>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e898:	f8 01       	movw	r30, r16
    e89a:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE11parseObjectENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    e89c:	c8 01       	movw	r24, r16
    e89e:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    e8a2:	00 97       	sbiw	r24, 0x00	; 0
    e8a4:	09 f4       	brne	.+2      	; 0xe8a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x1e6>
    e8a6:	6a cf       	rjmp	.-300    	; 0xe77c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0xba>
    e8a8:	29 cf       	rjmp	.-430    	; 0xe6fc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)+0x3a>

0000e8aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    e8aa:	8f 92       	push	r8
    e8ac:	9f 92       	push	r9
    e8ae:	af 92       	push	r10
    e8b0:	bf 92       	push	r11
    e8b2:	ef 92       	push	r14
    e8b4:	ff 92       	push	r15
    e8b6:	0f 93       	push	r16
    e8b8:	1f 93       	push	r17
    e8ba:	cf 93       	push	r28
    e8bc:	df 93       	push	r29
    e8be:	1f 92       	push	r1
    e8c0:	1f 92       	push	r1
    e8c2:	cd b7       	in	r28, 0x3d	; 61
    e8c4:	de b7       	in	r29, 0x3e	; 62
    e8c6:	8c 01       	movw	r16, r24
    e8c8:	4a 01       	movw	r8, r20
    e8ca:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    e8cc:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    e8d0:	00 97       	sbiw	r24, 0x00	; 0
    e8d2:	e1 f4       	brne	.+56     	; 0xe90c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    e8d4:	c8 01       	movw	r24, r16
    e8d6:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e8da:	8b 35       	cpi	r24, 0x5B	; 91
    e8dc:	91 f0       	breq	.+36     	; 0xe902 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58>
    e8de:	8b 37       	cpi	r24, 0x7B	; 123
    e8e0:	11 f1       	breq	.+68     	; 0xe926 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7c>
    e8e2:	75 01       	movw	r14, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    e8e4:	c8 01       	movw	r24, r16
    e8e6:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7isQuoteEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    e8ea:	87 32       	cpi	r24, 0x27	; 39
    e8ec:	11 f1       	breq	.+68     	; 0xe932 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    e8ee:	82 32       	cpi	r24, 0x22	; 34
    e8f0:	01 f1       	breq	.+64     	; 0xe932 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:162

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
      return parseStringValue(variant);
    } else {
      return parseNumericValue(variant);
    e8f2:	b5 01       	movw	r22, r10
    e8f4:	a4 01       	movw	r20, r8
    e8f6:	c8 01       	movw	r24, r16
    e8f8:	0e 94 15 72 	call	0xe42a	; 0xe42a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseNumericValue(ArduinoJson::JsonVariant)>
    e8fc:	9c 01       	movw	r18, r24
    e8fe:	c9 01       	movw	r24, r18
    e900:	05 c0       	rjmp	.+10     	; 0xe90c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:34
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
      case '[':
        return parseArray(variant);
    e902:	b5 01       	movw	r22, r10
    e904:	a4 01       	movw	r20, r8
    e906:	c8 01       	movw	r24, r16
    e908:	0e 94 b1 74 	call	0xe962	; 0xe962 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    e90c:	0f 90       	pop	r0
    e90e:	0f 90       	pop	r0
    e910:	df 91       	pop	r29
    e912:	cf 91       	pop	r28
    e914:	1f 91       	pop	r17
    e916:	0f 91       	pop	r16
    e918:	ff 90       	pop	r15
    e91a:	ef 90       	pop	r14
    e91c:	bf 90       	pop	r11
    e91e:	af 90       	pop	r10
    e920:	9f 90       	pop	r9
    e922:	8f 90       	pop	r8
    e924:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:37
    switch (current()) {
      case '[':
        return parseArray(variant);

      case '{':
        return parseObject(variant);
    e926:	b5 01       	movw	r22, r10
    e928:	a4 01       	movw	r20, r8
    e92a:	c8 01       	movw	r24, r16
    e92c:	0e 94 61 73 	call	0xe6c2	; 0xe6c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseObject(ArduinoJson::JsonVariant)>
    e930:	ed cf       	rjmp	.-38     	; 0xe90c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x62>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    e932:	be 01       	movw	r22, r28
    e934:	6f 5f       	subi	r22, 0xFF	; 255
    e936:	7f 4f       	sbci	r23, 0xFF	; 255
    e938:	c8 01       	movw	r24, r16
    e93a:	0e 94 a6 71 	call	0xe34c	; 0xe34c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    e93e:	9c 01       	movw	r18, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    e940:	89 2b       	or	r24, r25
    e942:	e9 f6       	brne	.-70     	; 0xe8fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    e944:	e1 14       	cp	r14, r1
    e946:	f1 04       	cpc	r15, r1
    e948:	49 f0       	breq	.+18     	; 0xe95c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    e94a:	89 81       	ldd	r24, Y+1	; 0x01
    e94c:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    e94e:	23 e0       	ldi	r18, 0x03	; 3
    e950:	30 e0       	ldi	r19, 0x00	; 0
    e952:	f7 01       	movw	r30, r14
    e954:	31 83       	std	Z+1, r19	; 0x01
    e956:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    e958:	93 83       	std	Z+3, r25	; 0x03
    e95a:	82 83       	std	Z+2, r24	; 0x02
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:179
    return DeserializationError::Ok;
    e95c:	30 e0       	ldi	r19, 0x00	; 0
    e95e:	20 e0       	ldi	r18, 0x00	; 0
    e960:	ce cf       	rjmp	.-100    	; 0xe8fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x54>

0000e962 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:68
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    e962:	0f 93       	push	r16
    e964:	1f 93       	push	r17
    e966:	cf 93       	push	r28
    e968:	df 93       	push	r29
    e96a:	00 d0       	rcall	.+0      	; 0xe96c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xa>
    e96c:	1f 92       	push	r1
    e96e:	cd b7       	in	r28, 0x3d	; 61
    e970:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    e972:	fc 01       	movw	r30, r24
    e974:	26 81       	ldd	r18, Z+6	; 0x06
    e976:	21 11       	cpse	r18, r1
    e978:	0b c0       	rjmp	.+22     	; 0xe990 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x2e>
    e97a:	85 e0       	ldi	r24, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    e97c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:104 (discriminator 2)
    }
  }
    e97e:	0f 90       	pop	r0
    e980:	0f 90       	pop	r0
    e982:	0f 90       	pop	r0
    e984:	0f 90       	pop	r0
    e986:	df 91       	pop	r29
    e988:	cf 91       	pop	r28
    e98a:	1f 91       	pop	r17
    e98c:	0f 91       	pop	r16
    e98e:	08 95       	ret
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    e990:	fb 01       	movw	r30, r22
    e992:	30 97       	sbiw	r30, 0x00	; 0
    e994:	99 f0       	breq	.+38     	; 0xe9bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x5a>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    e996:	28 e0       	ldi	r18, 0x08	; 8
    e998:	30 e0       	ldi	r19, 0x00	; 0
    e99a:	31 83       	std	Z+1, r19	; 0x01
    e99c:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    e99e:	13 82       	std	Z+3, r1	; 0x03
    e9a0:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    e9a2:	15 82       	std	Z+5, r1	; 0x05
    e9a4:	14 82       	std	Z+4, r1	; 0x04
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:73
    return &content.asArray;
    e9a6:	9b 01       	movw	r18, r22
    e9a8:	2e 5f       	subi	r18, 0xFE	; 254
    e9aa:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:71
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonArray array = variant.to<JsonArray>();
    e9ac:	5a 83       	std	Y+2, r21	; 0x02
    e9ae:	49 83       	std	Y+1, r20	; 0x01
    e9b0:	3c 83       	std	Y+4, r19	; 0x04
    e9b2:	2b 83       	std	Y+3, r18	; 0x03
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:72
    if (array.isNull()) return DeserializationError::NoMemory;
    e9b4:	23 2b       	or	r18, r19
    e9b6:	39 f4       	brne	.+14     	; 0xe9c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x64>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    e9b8:	83 e0       	ldi	r24, 0x03	; 3
    e9ba:	e0 cf       	rjmp	.-64     	; 0xe97c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson11JsonVariant2toINS_9JsonArrayEEENS_9Internals9enable_ifIXsrNS3_7is_sameIT_S2_EE5valueES2_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78
    e9bc:	30 e0       	ldi	r19, 0x00	; 0
    e9be:	20 e0       	ldi	r18, 0x00	; 0
    e9c0:	50 e0       	ldi	r21, 0x00	; 0
    e9c2:	40 e0       	ldi	r20, 0x00	; 0
    e9c4:	f3 cf       	rjmp	.-26     	; 0xe9ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x4a>
    e9c6:	8c 01       	movw	r16, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e9c8:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e9cc:	8b 35       	cpi	r24, 0x5B	; 91
    e9ce:	11 f0       	breq	.+4      	; 0xe9d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x72>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:102
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    e9d0:	82 e0       	ldi	r24, 0x02	; 2
    e9d2:	d4 cf       	rjmp	.-88     	; 0xe97c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e9d4:	f8 01       	movw	r30, r16
    e9d6:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    e9d8:	c8 01       	movw	r24, r16
    e9da:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    e9de:	00 97       	sbiw	r24, 0x00	; 0
    e9e0:	71 f6       	brne	.-100    	; 0xe97e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    e9e2:	c8 01       	movw	r24, r16
    e9e4:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    e9e8:	8d 35       	cpi	r24, 0x5D	; 93
    e9ea:	21 f4       	brne	.+8      	; 0xe9f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    e9ec:	f8 01       	movw	r30, r16
    e9ee:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:101
      // 2 - Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
    e9f0:	80 e0       	ldi	r24, 0x00	; 0
    e9f2:	c4 cf       	rjmp	.-120    	; 0xe97c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:87
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
    e9f4:	ce 01       	movw	r24, r28
    e9f6:	01 96       	adiw	r24, 0x01	; 1
    e9f8:	0e 94 de 38 	call	0x71bc	; 0x71bc <ArduinoJson::JsonArray::add()>
    e9fc:	ab 01       	movw	r20, r22
    e9fe:	bc 01       	movw	r22, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88
      if (value.isInvalid()) return DeserializationError::NoMemory;
    ea00:	89 2b       	or	r24, r25
    ea02:	d1 f2       	breq	.-76     	; 0xe9b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x56>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    ea04:	f8 01       	movw	r30, r16
    ea06:	86 81       	ldd	r24, Z+6	; 0x06
    ea08:	81 50       	subi	r24, 0x01	; 1
    ea0a:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    ea0c:	c8 01       	movw	r24, r16
    ea0e:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    ea12:	f8 01       	movw	r30, r16
    ea14:	26 81       	ldd	r18, Z+6	; 0x06
    ea16:	2f 5f       	subi	r18, 0xFF	; 255
    ea18:	26 83       	std	Z+6, r18	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    ea1a:	00 97       	sbiw	r24, 0x00	; 0
    ea1c:	09 f0       	breq	.+2      	; 0xea20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xbe>
    ea1e:	af cf       	rjmp	.-162    	; 0xe97e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    ea20:	c8 01       	movw	r24, r16
    ea22:	0e 94 6a 70 	call	0xe0d4	; 0xe0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    ea26:	00 97       	sbiw	r24, 0x00	; 0
    ea28:	09 f0       	breq	.+2      	; 0xea2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0xca>
    ea2a:	a9 cf       	rjmp	.-174    	; 0xe97e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x1c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ea2c:	c8 01       	movw	r24, r16
    ea2e:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ea32:	8d 35       	cpi	r24, 0x5D	; 93
    ea34:	d9 f2       	breq	.-74     	; 0xe9ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x8a>
    ea36:	c8 01       	movw	r24, r16
    ea38:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ea3c:	8c 32       	cpi	r24, 0x2C	; 44
    ea3e:	41 f6       	brne	.-112    	; 0xe9d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x6e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ea40:	f8 01       	movw	r30, r16
    ea42:	10 86       	std	Z+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE10parseArrayENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:85

    // Empty array?
    if (eat(']')) return DeserializationError::Ok;

    // Read each value
    for (;;) {
    ea44:	d7 cf       	rjmp	.-82     	; 0xe9f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseArray(ArduinoJson::JsonVariant)+0x92>

0000ea46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
    ea46:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
    ea48:	80 81       	ld	r24, Z
    ea4a:	91 81       	ldd	r25, Z+1	; 0x01
    ea4c:	87 30       	cpi	r24, 0x07	; 7
    ea4e:	91 05       	cpc	r25, r1
    ea50:	38 f4       	brcc	.+14     	; 0xea60 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
    ea52:	85 30       	cpi	r24, 0x05	; 5
    ea54:	91 05       	cpc	r25, r1
    ea56:	88 f4       	brcc	.+34     	; 0xea7a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
    ea58:	03 97       	sbiw	r24, 0x03	; 3
    ea5a:	a0 f4       	brcc	.+40     	; 0xea84 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    ea5c:	80 e0       	ldi	r24, 0x00	; 0
    ea5e:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    ea60:	87 30       	cpi	r24, 0x07	; 7
    ea62:	91 05       	cpc	r25, r1
    ea64:	61 f0       	breq	.+24     	; 0xea7e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
    ea66:	0a 97       	sbiw	r24, 0x0a	; 10
    ea68:	c9 f7       	brne	.-14     	; 0xea5c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    ea6a:	62 81       	ldd	r22, Z+2	; 0x02
    ea6c:	73 81       	ldd	r23, Z+3	; 0x03
    ea6e:	84 81       	ldd	r24, Z+4	; 0x04
    ea70:	95 81       	ldd	r25, Z+5	; 0x05
    ea72:	0e 94 f9 d1 	call	0x1a3f2	; 0x1a3f2 <__fixunssfsi>
    ea76:	86 2f       	mov	r24, r22
    ea78:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    ea7a:	82 81       	ldd	r24, Z+2	; 0x02
    ea7c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    ea7e:	82 81       	ldd	r24, Z+2	; 0x02
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    ea80:	81 95       	neg	r24
    ea82:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    ea84:	02 80       	ldd	r0, Z+2	; 0x02
    ea86:	f3 81       	ldd	r31, Z+3	; 0x03
    ea88:	e0 2d       	mov	r30, r0
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    ea8a:	30 97       	sbiw	r30, 0x00	; 0
    ea8c:	39 f3       	breq	.-50     	; 0xea5c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    ea8e:	80 81       	ld	r24, Z
    ea90:	84 37       	cpi	r24, 0x74	; 116
    ea92:	c9 f0       	breq	.+50     	; 0xeac6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    ea94:	8b 32       	cpi	r24, 0x2B	; 43
    ea96:	89 f0       	breq	.+34     	; 0xeaba <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
    ea98:	8d 32       	cpi	r24, 0x2D	; 45
    ea9a:	81 f4       	brne	.+32     	; 0xeabc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    ea9c:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    ea9e:	91 e0       	ldi	r25, 0x01	; 1
    eaa0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    eaa2:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    eaa4:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    eaa6:	30 ed       	ldi	r19, 0xD0	; 208
    eaa8:	36 0f       	add	r19, r22
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    eaaa:	3a 30       	cpi	r19, 0x0A	; 10
    eaac:	48 f4       	brcc	.+18     	; 0xeac0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
    eaae:	82 9f       	mul	r24, r18
    eab0:	60 0d       	add	r22, r0
    eab2:	11 24       	eor	r1, r1
    eab4:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    eab6:	80 53       	subi	r24, 0x30	; 48
    eab8:	f5 cf       	rjmp	.-22     	; 0xeaa4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    eaba:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    eabc:	90 e0       	ldi	r25, 0x00	; 0
    eabe:	f0 cf       	rjmp	.-32     	; 0xeaa0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    eac0:	91 11       	cpse	r25, r1
    eac2:	de cf       	rjmp	.-68     	; 0xea80 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
    eac4:	08 95       	ret
_ZN11ArduinoJson9Internals12parseIntegerIhEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    eac6:	81 e0       	ldi	r24, 0x01	; 1
    eac8:	fd cf       	rjmp	.-6      	; 0xeac4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0000eaca <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    eaca:	2f 92       	push	r2
    eacc:	3f 92       	push	r3
    eace:	4f 92       	push	r4
    ead0:	5f 92       	push	r5
    ead2:	6f 92       	push	r6
    ead4:	7f 92       	push	r7
    ead6:	8f 92       	push	r8
    ead8:	9f 92       	push	r9
    eada:	af 92       	push	r10
    eadc:	bf 92       	push	r11
    eade:	cf 92       	push	r12
    eae0:	df 92       	push	r13
    eae2:	ef 92       	push	r14
    eae4:	ff 92       	push	r15
    eae6:	0f 93       	push	r16
    eae8:	1f 93       	push	r17
    eaea:	cf 93       	push	r28
    eaec:	df 93       	push	r29
    eaee:	cd b7       	in	r28, 0x3d	; 61
    eaf0:	de b7       	in	r29, 0x3e	; 62
    eaf2:	c8 5c       	subi	r28, 0xC8	; 200
    eaf4:	d1 09       	sbc	r29, r1
    eaf6:	0f b6       	in	r0, 0x3f	; 63
    eaf8:	f8 94       	cli
    eafa:	de bf       	out	0x3e, r29	; 62
    eafc:	0f be       	out	0x3f, r0	; 63
    eafe:	cd bf       	out	0x3d, r28	; 61
    eb00:	4c 01       	movw	r8, r24
    eb02:	8b 01       	movw	r16, r22
    eb04:	7a 01       	movw	r14, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
  uint8_t id_interval = 0;
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
    eb06:	6c ea       	ldi	r22, 0xAC	; 172
    eb08:	7f e0       	ldi	r23, 0x0F	; 15
    eb0a:	ce 01       	movw	r24, r28
    eb0c:	01 96       	adiw	r24, 0x01	; 1
    eb0e:	0e 94 56 c9 	call	0x192ac	; 0x192ac <NTPClient::NTPClient(UDP&)>
    eb12:	e0 ee       	ldi	r30, 0xE0	; 224
    eb14:	f8 e0       	ldi	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    eb16:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479 (discriminator 2)
    eb18:	11 92       	st	Z+, r1
    eb1a:	8f 5f       	subi	r24, 0xFF	; 255
    eb1c:	80 38       	cpi	r24, 0x80	; 128
    eb1e:	e1 f7       	brne	.-8      	; 0xeb18 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    eb20:	80 91 6f 10 	lds	r24, 0x106F	; 0x80106f <mqtt_receive_message>
    eb24:	90 91 70 10 	lds	r25, 0x1070	; 0x801070 <mqtt_receive_message+0x1>
    eb28:	01 96       	adiw	r24, 0x01	; 1
    eb2a:	90 93 70 10 	sts	0x1070, r25	; 0x801070 <mqtt_receive_message+0x1>
    eb2e:	80 93 6f 10 	sts	0x106F, r24	; 0x80106f <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
  strncpy(my_payload, (char*) payload, length);
    eb32:	a7 01       	movw	r20, r14
    eb34:	b8 01       	movw	r22, r16
    eb36:	80 ee       	ldi	r24, 0xE0	; 224
    eb38:	98 e0       	ldi	r25, 0x08	; 8
    eb3a:	0e 94 9d d7 	call	0x1af3a	; 0x1af3a <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    eb3e:	5e 01       	movw	r10, r28
    eb40:	88 e4       	ldi	r24, 0x48	; 72
    eb42:	a8 0e       	add	r10, r24
    eb44:	b1 1c       	adc	r11, r1
    eb46:	6f e6       	ldi	r22, 0x6F	; 111
    eb48:	75 e5       	ldi	r23, 0x55	; 85
    eb4a:	c5 01       	movw	r24, r10
    eb4c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
  if (strcmp(str1, topic) == 0)
    eb50:	b4 01       	movw	r22, r8
    eb52:	c5 01       	movw	r24, r10
    eb54:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    eb58:	89 2b       	or	r24, r25
    eb5a:	71 f4       	brne	.+28     	; 0xeb78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    eb5c:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    eb60:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    eb64:	01 96       	adiw	r24, 0x01	; 1
    eb66:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    eb6a:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
    eb6e:	62 e0       	ldi	r22, 0x02	; 2
    eb70:	80 ee       	ldi	r24, 0xE0	; 224
    eb72:	98 e0       	ldi	r25, 0x08	; 8
    eb74:	0e 94 f8 85 	call	0x10bf0	; 0x10bf0 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
  }
  strcpy_P(str1, thermctl_subscribe);
    eb78:	66 e8       	ldi	r22, 0x86	; 134
    eb7a:	75 e5       	ldi	r23, 0x55	; 85
    eb7c:	c5 01       	movw	r24, r10
    eb7e:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
  if (strcmp(str1, topic) == 0)
    eb82:	b4 01       	movw	r22, r8
    eb84:	c5 01       	movw	r24, r10
    eb86:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    eb8a:	89 2b       	or	r24, r25
    eb8c:	71 f4       	brne	.+28     	; 0xebaa <mqtt_callback(char*, unsigned char*, unsigned int)+0xe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
  {
    mqtt_process_message++;
    eb8e:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    eb92:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    eb96:	01 96       	adiw	r24, 0x01	; 1
    eb98:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    eb9c:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
    eba0:	61 e0       	ldi	r22, 0x01	; 1
    eba2:	80 ee       	ldi	r24, 0xE0	; 224
    eba4:	98 e0       	ldi	r25, 0x08	; 8
    eba6:	0e 94 f8 85 	call	0x10bf0	; 0x10bf0 <know_mqtt_create_or_update(char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2500
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    ebaa:	67 ed       	ldi	r22, 0xD7	; 215
    ebac:	75 e5       	ldi	r23, 0x55	; 85
    ebae:	c5 01       	movw	r24, r10
    ebb0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
  strcat_P(str1, global_time_set);
    ebb4:	6c e0       	ldi	r22, 0x0C	; 12
    ebb6:	76 e5       	ldi	r23, 0x56	; 86
    ebb8:	c5 01       	movw	r24, r10
    ebba:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
  if (strcmp(str1, topic) == 0)
    ebbe:	b4 01       	movw	r22, r8
    ebc0:	c5 01       	movw	r24, r10
    ebc2:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    ebc6:	89 2b       	or	r24, r25
    ebc8:	09 f0       	breq	.+2      	; 0xebcc <mqtt_callback(char*, unsigned char*, unsigned int)+0x102>
    ebca:	bc c0       	rjmp	.+376    	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
  {
    mqtt_process_message++;
    ebcc:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    ebd0:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    ebd4:	01 96       	adiw	r24, 0x01	; 1
    ebd6:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    ebda:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    ebde:	20 91 74 0a 	lds	r18, 0x0A74	; 0x800a74 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC4ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    ebe2:	85 e7       	ldi	r24, 0x75	; 117
    ebe4:	9a e0       	ldi	r25, 0x0A	; 10
    ebe6:	c8 57       	subi	r28, 0x78	; 120
    ebe8:	df 4f       	sbci	r29, 0xFF	; 255
    ebea:	99 83       	std	Y+1, r25	; 0x01
    ebec:	88 83       	st	Y, r24
    ebee:	c8 58       	subi	r28, 0x88	; 136
    ebf0:	d0 40       	sbci	r29, 0x00	; 0
    ebf2:	80 ee       	ldi	r24, 0xE0	; 224
    ebf4:	98 e0       	ldi	r25, 0x08	; 8
    ebf6:	c6 57       	subi	r28, 0x76	; 118
    ebf8:	df 4f       	sbci	r29, 0xFF	; 255
    ebfa:	99 83       	std	Y+1, r25	; 0x01
    ebfc:	88 83       	st	Y, r24
    ebfe:	ca 58       	subi	r28, 0x8A	; 138
    ec00:	d0 40       	sbci	r29, 0x00	; 0
    ec02:	c4 57       	subi	r28, 0x74	; 116
    ec04:	df 4f       	sbci	r29, 0xFF	; 255
    ec06:	99 83       	std	Y+1, r25	; 0x01
    ec08:	88 83       	st	Y, r24
    ec0a:	cc 58       	subi	r28, 0x8C	; 140
    ec0c:	d0 40       	sbci	r29, 0x00	; 0
    ec0e:	c2 57       	subi	r28, 0x72	; 114
    ec10:	df 4f       	sbci	r29, 0xFF	; 255
    ec12:	28 83       	st	Y, r18
    ec14:	ce 58       	subi	r28, 0x8E	; 142
    ec16:	d0 40       	sbci	r29, 0x00	; 0
    ec18:	c0 57       	subi	r28, 0x70	; 112
    ec1a:	df 4f       	sbci	r29, 0xFF	; 255
    ec1c:	18 82       	st	Y, r1
    ec1e:	c0 59       	subi	r28, 0x90	; 144
    ec20:	d0 40       	sbci	r29, 0x00	; 0
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66
  }

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    ec22:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <doc+0x8>
    ec26:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <doc+0x7>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    ec2a:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <doc+0x10a>
    ec2e:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <doc+0x109>
    ec32:	45 e7       	ldi	r20, 0x75	; 117
    ec34:	5a e0       	ldi	r21, 0x0A	; 10
    ec36:	6d e7       	ldi	r22, 0x7D	; 125
    ec38:	7b e0       	ldi	r23, 0x0B	; 11
_ZN11ArduinoJson9Internals11deserializeINS0_16JsonDeserializerENS_18StaticJsonDocumentILj256EEEcEENS_20DeserializationErrorERT0_PT1_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    ec3a:	ce 01       	movw	r24, r28
    ec3c:	88 57       	subi	r24, 0x78	; 120
    ec3e:	9f 4f       	sbci	r25, 0xFF	; 255
    ec40:	0e 94 55 74 	call	0xe8aa	; 0xe8aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    ec44:	80 91 7d 0b 	lds	r24, 0x0B7D	; 0x800b7d <doc+0x109>
    ec48:	90 91 7e 0b 	lds	r25, 0x0B7E	; 0x800b7e <doc+0x10a>
    ec4c:	71 2c       	mov	r7, r1
    ec4e:	61 2c       	mov	r6, r1
    ec50:	09 97       	sbiw	r24, 0x09	; 9
    ec52:	21 f4       	brne	.+8      	; 0xec5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x192>
    ec54:	8f e7       	ldi	r24, 0x7F	; 127
    ec56:	68 2e       	mov	r6, r24
    ec58:	8b e0       	ldi	r24, 0x0B	; 11
    ec5a:	78 2e       	mov	r7, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    ec5c:	6a ec       	ldi	r22, 0xCA	; 202
    ec5e:	75 e0       	ldi	r23, 0x05	; 5
    ec60:	c3 01       	movw	r24, r6
    ec62:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ec66:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    ec68:	89 2b       	or	r24, r25
    ec6a:	09 f4       	brne	.+2      	; 0xec6e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a4>
    ec6c:	6b c0       	rjmp	.+214    	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ec6e:	6f ec       	ldi	r22, 0xCF	; 207
    ec70:	75 e0       	ldi	r23, 0x05	; 5
    ec72:	c3 01       	movw	r24, r6
    ec74:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ec78:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    ec7a:	89 2b       	or	r24, r25
    ec7c:	09 f4       	brne	.+2      	; 0xec80 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b6>
    ec7e:	62 c0       	rjmp	.+196    	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ec80:	65 ed       	ldi	r22, 0xD5	; 213
    ec82:	75 e0       	ldi	r23, 0x05	; 5
    ec84:	c3 01       	movw	r24, r6
    ec86:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ec8a:	1c 01       	movw	r2, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    ec8c:	89 2b       	or	r24, r25
    ec8e:	09 f4       	brne	.+2      	; 0xec92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c8>
    ec90:	59 c0       	rjmp	.+178    	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ec92:	6a ed       	ldi	r22, 0xDA	; 218
    ec94:	75 e0       	ldi	r23, 0x05	; 5
    ec96:	c3 01       	movw	r24, r6
    ec98:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
    ec9c:	8c 01       	movw	r16, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    ec9e:	89 2b       	or	r24, r25
    eca0:	09 f4       	brne	.+2      	; 0xeca4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1da>
    eca2:	50 c0       	rjmp	.+160    	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    eca4:	61 ee       	ldi	r22, 0xE1	; 225
    eca6:	75 e0       	ldi	r23, 0x05	; 5
    eca8:	c3 01       	movw	r24, r6
    ecaa:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
    ecae:	00 97       	sbiw	r24, 0x00	; 0
    ecb0:	09 f4       	brne	.+2      	; 0xecb4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ea>
    ecb2:	48 c0       	rjmp	.+144    	; 0xed44 <mqtt_callback(char*, unsigned char*, unsigned int)+0x27a>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    ecb4:	0e 94 23 75 	call	0xea46	; 0xea46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    ecb8:	c8 2e       	mov	r12, r24
    ecba:	c8 01       	movw	r24, r16
    ecbc:	0e 94 23 75 	call	0xea46	; 0xea46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    ecc0:	d8 2e       	mov	r13, r24
    ecc2:	c1 01       	movw	r24, r2
    ecc4:	0e 94 23 75 	call	0xea46	; 0xea46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    ecc8:	08 2f       	mov	r16, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    ecca:	68 ee       	ldi	r22, 0xE8	; 232
    eccc:	75 e0       	ldi	r23, 0x05	; 5
    ecce:	c3 01       	movw	r24, r6
    ecd0:	0e 94 b2 38 	call	0x7164	; 0x7164 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.36]>
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    ecd4:	10 e0       	ldi	r17, 0x00	; 0
    ecd6:	00 97       	sbiw	r24, 0x00	; 0
    ecd8:	19 f0       	breq	.+6      	; 0xece0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    ecda:	0e 94 23 75 	call	0xea46	; 0xea46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    ecde:	18 2f       	mov	r17, r24
    ece0:	c7 01       	movw	r24, r14
    ece2:	0e 94 23 75 	call	0xea46	; 0xea46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    ece6:	f8 2e       	mov	r15, r24
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    ece8:	d2 01       	movw	r26, r4
    ecea:	8d 91       	ld	r24, X+
    ecec:	9c 91       	ld	r25, X
    ecee:	11 97       	sbiw	r26, 0x01	; 1
    ecf0:	87 30       	cpi	r24, 0x07	; 7
    ecf2:	91 05       	cpc	r25, r1
    ecf4:	48 f4       	brcc	.+18     	; 0xed08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23e>
    ecf6:	85 30       	cpi	r24, 0x05	; 5
    ecf8:	91 05       	cpc	r25, r1
    ecfa:	a0 f4       	brcc	.+40     	; 0xed24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
    ecfc:	03 97       	sbiw	r24, 0x03	; 3
    ecfe:	08 f0       	brcs	.+2      	; 0xed02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
    ed00:	e7 c0       	rjmp	.+462    	; 0xeed0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x406>
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    ed02:	70 e0       	ldi	r23, 0x00	; 0
    ed04:	60 e0       	ldi	r22, 0x00	; 0
    ed06:	11 c0       	rjmp	.+34     	; 0xed2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    ed08:	87 30       	cpi	r24, 0x07	; 7
    ed0a:	91 05       	cpc	r25, r1
    ed0c:	09 f4       	brne	.+2      	; 0xed10 <mqtt_callback(char*, unsigned char*, unsigned int)+0x246>
    ed0e:	d9 c0       	rjmp	.+434    	; 0xeec2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
    ed10:	0a 97       	sbiw	r24, 0x0a	; 10
    ed12:	b9 f7       	brne	.-18     	; 0xed02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    ed14:	f2 01       	movw	r30, r4
    ed16:	62 81       	ldd	r22, Z+2	; 0x02
    ed18:	73 81       	ldd	r23, Z+3	; 0x03
    ed1a:	84 81       	ldd	r24, Z+4	; 0x04
    ed1c:	95 81       	ldd	r25, Z+5	; 0x05
    ed1e:	0e 94 f9 d1 	call	0x1a3f2	; 0x1a3f2 <__fixunssfsi>
    ed22:	03 c0       	rjmp	.+6      	; 0xed2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    ed24:	f2 01       	movw	r30, r4
    ed26:	62 81       	ldd	r22, Z+2	; 0x02
    ed28:	73 81       	ldd	r23, Z+3	; 0x03
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    ed2a:	ed 2c       	mov	r14, r13
    ed2c:	21 2f       	mov	r18, r17
    ed2e:	4f 2d       	mov	r20, r15
    ed30:	ce 01       	movw	r24, r28
    ed32:	88 57       	subi	r24, 0x78	; 120
    ed34:	9f 4f       	sbci	r25, 0xFF	; 255
    ed36:	0e 94 f4 c1 	call	0x183e8	; 0x183e8 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    ed3a:	ce 01       	movw	r24, r28
    ed3c:	88 57       	subi	r24, 0x78	; 120
    ed3e:	9f 4f       	sbci	r25, 0xFF	; 255
    ed40:	0e 94 1b c2 	call	0x18436	; 0x18436 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2511
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    ed44:	67 ed       	ldi	r22, 0xD7	; 215
    ed46:	75 e5       	ldi	r23, 0x55	; 85
    ed48:	c5 01       	movw	r24, r10
    ed4a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
  strcat_P(str1, global_time_ntp);
    ed4e:	6c ef       	ldi	r22, 0xFC	; 252
    ed50:	75 e5       	ldi	r23, 0x55	; 85
    ed52:	c5 01       	movw	r24, r10
    ed54:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
  if (strcmp(str1, topic) == 0)
    ed58:	b4 01       	movw	r22, r8
    ed5a:	c5 01       	movw	r24, r10
    ed5c:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    ed60:	89 2b       	or	r24, r25
    ed62:	b9 f4       	brne	.+46     	; 0xed92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
  {
    mqtt_process_message++;
    ed64:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    ed68:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    ed6c:	01 96       	adiw	r24, 0x01	; 1
    ed6e:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    ed72:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    ed76:	0e 94 e1 4b 	call	0x97c2	; 0x97c2 <time_get_offset()>
    ed7a:	48 2f       	mov	r20, r24
    ed7c:	6b ed       	ldi	r22, 0xDB	; 219
    ed7e:	7f e0       	ldi	r23, 0x0F	; 15
    ed80:	ce 01       	movw	r24, r28
    ed82:	01 96       	adiw	r24, 0x01	; 1
    ed84:	0e 94 f9 85 	call	0x10bf2	; 0x10bf2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>
    ed88:	81 30       	cpi	r24, 0x01	; 1
    ed8a:	09 f0       	breq	.+2      	; 0xed8e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c4>
    ed8c:	ce c0       	rjmp	.+412    	; 0xef2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x460>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
      selftest_clear_0(SELFTEST_ERR_NTP);
    ed8e:	0e 94 c6 4b 	call	0x978c	; 0x978c <selftest_clear_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    ed92:	67 ed       	ldi	r22, 0xD7	; 215
    ed94:	75 e5       	ldi	r23, 0x55	; 85
    ed96:	c5 01       	movw	r24, r10
    ed98:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
  strcat_P(str1, global_time_offset);
    ed9c:	65 ee       	ldi	r22, 0xE5	; 229
    ed9e:	75 e5       	ldi	r23, 0x55	; 85
    eda0:	c5 01       	movw	r24, r10
    eda2:	0e 94 4a d7 	call	0x1ae94	; 0x1ae94 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
  if (strcmp(str1, topic) == 0)
    eda6:	b4 01       	movw	r22, r8
    eda8:	c5 01       	movw	r24, r10
    edaa:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    edae:	89 2b       	or	r24, r25
    edb0:	79 f4       	brne	.+30     	; 0xedd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x306>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
  {
    mqtt_process_message++;
    edb2:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    edb6:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    edba:	01 96       	adiw	r24, 0x01	; 1
    edbc:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    edc0:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
    time_set_offset(atoi(my_payload));
    edc4:	80 ee       	ldi	r24, 0xE0	; 224
    edc6:	98 e0       	ldi	r25, 0x08	; 8
    edc8:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    edcc:	0e 94 9c 4d 	call	0x9b38	; 0x9b38 <time_set_offset(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    edd0:	67 ed       	ldi	r22, 0xD7	; 215
    edd2:	75 e5       	ldi	r23, 0x55	; 85
    edd4:	c5 01       	movw	r24, r10
    edd6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2532
  strcat(str1, device.nazev);
    edda:	6b e8       	ldi	r22, 0x8B	; 139
    eddc:	70 e1       	ldi	r23, 0x10	; 16
    edde:	c5 01       	movw	r24, r10
    ede0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2533
  strcat(str1, "/tds/associate");
    ede4:	6c ee       	ldi	r22, 0xEC	; 236
    ede6:	75 e0       	ldi	r23, 0x05	; 5
    ede8:	c5 01       	movw	r24, r10
    edea:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
  if (strcmp(str1, topic) == 0)
    edee:	b4 01       	movw	r22, r8
    edf0:	c5 01       	movw	r24, r10
    edf2:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    edf6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    edf8:	89 2b       	or	r24, r25
    edfa:	c1 f4       	brne	.+48     	; 0xee2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2536
  {
    mqtt_process_message++;
    edfc:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    ee00:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    ee04:	01 96       	adiw	r24, 0x01	; 1
    ee06:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    ee0a:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2537
    id = atoi(my_payload);
    ee0e:	80 ee       	ldi	r24, 0xE0	; 224
    ee10:	98 e0       	ldi	r25, 0x08	; 8
    ee12:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    ee16:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538
    if (tds_associate(id) == 255)
    ee18:	0e 94 c7 89 	call	0x1138e	; 0x1138e <tds_associate(unsigned char)>
    ee1c:	8f 3f       	cpi	r24, 0xFF	; 255
    ee1e:	31 f4       	brne	.+12     	; 0xee2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x362>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2539
      log_error(&mqtt_client, "tds/associate full or bad id");
    ee20:	6b ef       	ldi	r22, 0xFB	; 251
    ee22:	75 e0       	ldi	r23, 0x05	; 5
    ee24:	8f e8       	ldi	r24, 0x8F	; 143
    ee26:	9d e0       	ldi	r25, 0x0D	; 13
    ee28:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    ee2c:	67 ed       	ldi	r22, 0xD7	; 215
    ee2e:	75 e5       	ldi	r23, 0x55	; 85
    ee30:	c5 01       	movw	r24, r10
    ee32:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
  strcat(str1, device.nazev);
    ee36:	6b e8       	ldi	r22, 0x8B	; 139
    ee38:	70 e1       	ldi	r23, 0x10	; 16
    ee3a:	c5 01       	movw	r24, r10
    ee3c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
  strcat(str1, "/tds/set/");
    ee40:	68 e1       	ldi	r22, 0x18	; 24
    ee42:	76 e0       	ldi	r23, 0x06	; 6
    ee44:	c5 01       	movw	r24, r10
    ee46:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ee4a:	f5 01       	movw	r30, r10
    ee4c:	01 90       	ld	r0, Z+
    ee4e:	00 20       	and	r0, r0
    ee50:	e9 f7       	brne	.-6      	; 0xee4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x382>
    ee52:	31 97       	sbiw	r30, 0x01	; 1
    ee54:	af 01       	movw	r20, r30
    ee56:	4a 19       	sub	r20, r10
    ee58:	5b 09       	sbc	r21, r11
    ee5a:	b4 01       	movw	r22, r8
    ee5c:	c5 01       	movw	r24, r10
    ee5e:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    ee62:	89 2b       	or	r24, r25
    ee64:	09 f0       	breq	.+2      	; 0xee68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x39e>
    ee66:	b6 c0       	rjmp	.+364    	; 0xefd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
  {
    mqtt_process_message++;
    ee68:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    ee6c:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    ee70:	01 96       	adiw	r24, 0x01	; 1
    ee72:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    ee76:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ee7a:	f5 01       	movw	r30, r10
    ee7c:	01 90       	ld	r0, Z+
    ee7e:	00 20       	and	r0, r0
    ee80:	e9 f7       	brne	.-6      	; 0xee7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3b2>
    ee82:	31 97       	sbiw	r30, 0x01	; 1
    ee84:	ea 19       	sub	r30, r10
    ee86:	fb 09       	sbc	r31, r11
    ee88:	9e 2f       	mov	r25, r30
    ee8a:	4e 2f       	mov	r20, r30
    ee8c:	84 2f       	mov	r24, r20
    ee8e:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552 (discriminator 3)
    ee90:	24 2f       	mov	r18, r20
    ee92:	30 e0       	ldi	r19, 0x00	; 0
    ee94:	d4 01       	movw	r26, r8
    ee96:	0d 90       	ld	r0, X+
    ee98:	00 20       	and	r0, r0
    ee9a:	e9 f7       	brne	.-6      	; 0xee96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3cc>
    ee9c:	11 97       	sbiw	r26, 0x01	; 1
    ee9e:	a8 19       	sub	r26, r8
    eea0:	b9 09       	sbc	r27, r9
    eea2:	2a 17       	cp	r18, r26
    eea4:	3b 07       	cpc	r19, r27
    eea6:	08 f0       	brcs	.+2      	; 0xeeaa <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e0>
    eea8:	44 c0       	rjmp	.+136    	; 0xef32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x468>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2554 (discriminator 2)
    {
      str1[cnt] = topic[f];
    eeaa:	d5 01       	movw	r26, r10
    eeac:	a8 0f       	add	r26, r24
    eeae:	b1 1d       	adc	r27, r1
    eeb0:	28 0d       	add	r18, r8
    eeb2:	39 1d       	adc	r19, r9
    eeb4:	f9 01       	movw	r30, r18
    eeb6:	80 81       	ld	r24, Z
    eeb8:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2555 (discriminator 2)
      str1[cnt + 1] = 0;
    eeba:	11 96       	adiw	r26, 0x01	; 1
    eebc:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552 (discriminator 2)
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    eebe:	4f 5f       	subi	r20, 0xFF	; 255
    eec0:	e5 cf       	rjmp	.-54     	; 0xee8c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3c2>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    eec2:	12 96       	adiw	r26, 0x02	; 2
    eec4:	6d 91       	ld	r22, X+
    eec6:	7c 91       	ld	r23, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    eec8:	71 95       	neg	r23
    eeca:	61 95       	neg	r22
    eecc:	71 09       	sbc	r23, r1
    eece:	2d cf       	rjmp	.-422    	; 0xed2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIjEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    eed0:	12 96       	adiw	r26, 0x02	; 2
    eed2:	ed 91       	ld	r30, X+
    eed4:	fc 91       	ld	r31, X
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    eed6:	30 97       	sbiw	r30, 0x00	; 0
    eed8:	09 f4       	brne	.+2      	; 0xeedc <mqtt_callback(char*, unsigned char*, unsigned int)+0x412>
    eeda:	13 cf       	rjmp	.-474    	; 0xed02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x238>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    eedc:	80 81       	ld	r24, Z
    eede:	61 e0       	ldi	r22, 0x01	; 1
    eee0:	70 e0       	ldi	r23, 0x00	; 0
    eee2:	84 37       	cpi	r24, 0x74	; 116
    eee4:	09 f4       	brne	.+2      	; 0xeee8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x41e>
    eee6:	21 cf       	rjmp	.-446    	; 0xed2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    eee8:	8b 32       	cpi	r24, 0x2B	; 43
    eeea:	c9 f0       	breq	.+50     	; 0xef1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x454>
    eeec:	8d 32       	cpi	r24, 0x2D	; 45
    eeee:	c1 f4       	brne	.+48     	; 0xef20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    eef0:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    eef2:	81 e0       	ldi	r24, 0x01	; 1
    eef4:	70 e0       	ldi	r23, 0x00	; 0
    eef6:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    eef8:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    eefa:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    eefc:	20 ed       	ldi	r18, 0xD0	; 208
    eefe:	29 0f       	add	r18, r25
_ZN11ArduinoJson9Internals12parseIntegerIjEET_PKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    ef00:	2a 30       	cpi	r18, 0x0A	; 10
    ef02:	80 f4       	brcc	.+32     	; 0xef24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    ef04:	46 9f       	mul	r20, r22
    ef06:	90 01       	movw	r18, r0
    ef08:	47 9f       	mul	r20, r23
    ef0a:	30 0d       	add	r19, r0
    ef0c:	11 24       	eor	r1, r1
    ef0e:	b9 01       	movw	r22, r18
    ef10:	60 53       	subi	r22, 0x30	; 48
    ef12:	71 09       	sbc	r23, r1
    ef14:	69 0f       	add	r22, r25
    ef16:	71 1d       	adc	r23, r1
    ef18:	97 fd       	sbrc	r25, 7
    ef1a:	7a 95       	dec	r23
    ef1c:	ee cf       	rjmp	.-36     	; 0xeefa <mqtt_callback(char*, unsigned char*, unsigned int)+0x430>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    ef1e:	31 96       	adiw	r30, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    ef20:	80 e0       	ldi	r24, 0x00	; 0
    ef22:	e8 cf       	rjmp	.-48     	; 0xeef4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    ef24:	81 11       	cpse	r24, r1
    ef26:	d0 cf       	rjmp	.-96     	; 0xeec8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3fe>
    ef28:	00 cf       	rjmp	.-512    	; 0xed2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x260>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
    ef2a:	81 e0       	ldi	r24, 0x01	; 1
    ef2c:	0e 94 ba 4b 	call	0x9774	; 0x9774 <selftest_set_0(unsigned char)>
    ef30:	30 cf       	rjmp	.-416    	; 0xed92 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2559
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ef32:	63 e3       	ldi	r22, 0x33	; 51
    ef34:	73 e0       	ldi	r23, 0x03	; 3
    ef36:	c5 01       	movw	r24, r10
    ef38:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    ef3c:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ef3e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
    pch = strtok (str1, "/");
    while (pch != NULL)
    ef40:	e1 14       	cp	r14, r1
    ef42:	f1 04       	cpc	r15, r1
    ef44:	09 f4       	brne	.+2      	; 0xef48 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
    ef46:	46 c0       	rjmp	.+140    	; 0xefd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x50a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
    {
      if (cnt == 0) id = atoi(pch);
    ef48:	01 11       	cpse	r16, r1
    ef4a:	0d c0       	rjmp	.+26     	; 0xef66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x49c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562 (discriminator 1)
    ef4c:	c7 01       	movw	r24, r14
    ef4e:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    ef52:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563 (discriminator 1)
      if (id < HW_ONEWIRE_MAXROMS)
    ef54:	86 30       	cpi	r24, 0x06	; 6
    ef56:	a8 f1       	brcs	.+106    	; 0xefc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    ef58:	69 e5       	ldi	r22, 0x59	; 89
    ef5a:	76 e0       	ldi	r23, 0x06	; 6
    ef5c:	8f e8       	ldi	r24, 0x8F	; 143
    ef5e:	9d e0       	ldi	r25, 0x0D	; 13
    ef60:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    ef64:	2e c0       	rjmp	.+92     	; 0xefc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    ef66:	16 30       	cpi	r17, 0x06	; 6
    ef68:	b8 f7       	brcc	.-18     	; 0xef58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    ef6a:	01 30       	cpi	r16, 0x01	; 1
    ef6c:	51 f5       	brne	.+84     	; 0xefc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565 (discriminator 1)
    ef6e:	63 e7       	ldi	r22, 0x73	; 115
    ef70:	73 e0       	ldi	r23, 0x03	; 3
    ef72:	c7 01       	movw	r24, r14
    ef74:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    ef78:	89 2b       	or	r24, r25
    ef7a:	29 f4       	brne	.+10     	; 0xef86 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565 (discriminator 2)
    ef7c:	60 ee       	ldi	r22, 0xE0	; 224
    ef7e:	78 e0       	ldi	r23, 0x08	; 8
    ef80:	81 2f       	mov	r24, r17
    ef82:	0e 94 45 88 	call	0x1108a	; 0x1108a <tds_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    ef86:	65 e9       	ldi	r22, 0x95	; 149
    ef88:	74 e0       	ldi	r23, 0x04	; 4
    ef8a:	c7 01       	movw	r24, r14
    ef8c:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    ef90:	89 2b       	or	r24, r25
    ef92:	41 f4       	brne	.+16     	; 0xefa4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566 (discriminator 2)
    ef94:	80 ee       	ldi	r24, 0xE0	; 224
    ef96:	98 e0       	ldi	r25, 0x08	; 8
    ef98:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    ef9c:	bc 01       	movw	r22, r24
    ef9e:	81 2f       	mov	r24, r17
    efa0:	0e 94 70 88 	call	0x110e0	; 0x110e0 <tds_set_offset(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    efa4:	6f e7       	ldi	r22, 0x7F	; 127
    efa6:	73 e0       	ldi	r23, 0x03	; 3
    efa8:	c7 01       	movw	r24, r14
    efaa:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    efae:	89 2b       	or	r24, r25
    efb0:	41 f4       	brne	.+16     	; 0xefc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2567 (discriminator 2)
    efb2:	80 ee       	ldi	r24, 0xE0	; 224
    efb4:	98 e0       	ldi	r25, 0x08	; 8
    efb6:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    efba:	68 2f       	mov	r22, r24
    efbc:	81 2f       	mov	r24, r17
    efbe:	0e 94 b2 88 	call	0x11164	; 0x11164 <tds_set_period(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    efc2:	63 e3       	ldi	r22, 0x33	; 51
    efc4:	73 e0       	ldi	r23, 0x03	; 3
    efc6:	90 e0       	ldi	r25, 0x00	; 0
    efc8:	80 e0       	ldi	r24, 0x00	; 0
    efca:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    efce:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
      cnt++;
    efd0:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    efd2:	b6 cf       	rjmp	.-148    	; 0xef40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2579
      cnt++;
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    efd4:	67 ed       	ldi	r22, 0xD7	; 215
    efd6:	75 e5       	ldi	r23, 0x55	; 85
    efd8:	c5 01       	movw	r24, r10
    efda:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
  strcat(str1, device.nazev);
    efde:	6b e8       	ldi	r22, 0x8B	; 139
    efe0:	70 e1       	ldi	r23, 0x10	; 16
    efe2:	c5 01       	movw	r24, r10
    efe4:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
  strcat(str1, "/tds/clear");
    efe8:	62 e2       	ldi	r22, 0x22	; 34
    efea:	76 e0       	ldi	r23, 0x06	; 6
    efec:	c5 01       	movw	r24, r10
    efee:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  if (strncmp(str1, topic, strlen(str1)) == 0)
    eff2:	f5 01       	movw	r30, r10
    eff4:	01 90       	ld	r0, Z+
    eff6:	00 20       	and	r0, r0
    eff8:	e9 f7       	brne	.-6      	; 0xeff4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x52a>
    effa:	31 97       	sbiw	r30, 0x01	; 1
    effc:	af 01       	movw	r20, r30
    effe:	4a 19       	sub	r20, r10
    f000:	5b 09       	sbc	r21, r11
    f002:	b4 01       	movw	r22, r8
    f004:	c5 01       	movw	r24, r10
    f006:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f00a:	89 2b       	or	r24, r25
    f00c:	99 f4       	brne	.+38     	; 0xf034 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
  {
    mqtt_process_message++;
    f00e:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f012:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f016:	01 96       	adiw	r24, 0x01	; 1
    f018:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f01c:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
    id = atoi(my_payload);
    f020:	80 ee       	ldi	r24, 0xE0	; 224
    f022:	98 e0       	ldi	r25, 0x08	; 8
    f024:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f028:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
    if (id < HW_ONEWIRE_MAXROMS)
    f02a:	86 30       	cpi	r24, 0x06	; 6
    f02c:	08 f0       	brcs	.+2      	; 0xf030 <mqtt_callback(char*, unsigned char*, unsigned int)+0x566>
    f02e:	83 c0       	rjmp	.+262    	; 0xf136 <mqtt_callback(char*, unsigned char*, unsigned int)+0x66c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
      tds_set_clear(id);
    f030:	0e 94 4c 89 	call	0x11298	; 0x11298 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    f034:	67 ed       	ldi	r22, 0xD7	; 215
    f036:	75 e5       	ldi	r23, 0x55	; 85
    f038:	c5 01       	movw	r24, r10
    f03a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
  strcat(str1, device.nazev);
    f03e:	6b e8       	ldi	r22, 0x8B	; 139
    f040:	70 e1       	ldi	r23, 0x10	; 16
    f042:	c5 01       	movw	r24, r10
    f044:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2598
  strcat(str1, "/rtds/register");
    f048:	6e e3       	ldi	r22, 0x3E	; 62
    f04a:	76 e0       	ldi	r23, 0x06	; 6
    f04c:	c5 01       	movw	r24, r10
    f04e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f052:	f5 01       	movw	r30, r10
    f054:	01 90       	ld	r0, Z+
    f056:	00 20       	and	r0, r0
    f058:	e9 f7       	brne	.-6      	; 0xf054 <mqtt_callback(char*, unsigned char*, unsigned int)+0x58a>
    f05a:	31 97       	sbiw	r30, 0x01	; 1
    f05c:	af 01       	movw	r20, r30
    f05e:	4a 19       	sub	r20, r10
    f060:	5b 09       	sbc	r21, r11
    f062:	b4 01       	movw	r22, r8
    f064:	c5 01       	movw	r24, r10
    f066:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f06a:	89 2b       	or	r24, r25
    f06c:	d1 f4       	brne	.+52     	; 0xf0a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
  {
    mqtt_process_message++;
    f06e:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f072:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f076:	01 96       	adiw	r24, 0x01	; 1
    f078:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f07c:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
    if (remote_tds_name_exist(my_payload) == 255)
    f080:	80 ee       	ldi	r24, 0xE0	; 224
    f082:	98 e0       	ldi	r25, 0x08	; 8
    f084:	0e 94 3c 44 	call	0x8878	; 0x8878 <remote_tds_name_exist(char*)>
    f088:	8f 3f       	cpi	r24, 0xFF	; 255
    f08a:	59 f4       	brne	.+22     	; 0xf0a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
    {
      id = remote_tds_find_free();
    f08c:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <remote_tds_find_free()>
    f090:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2605
      remote_tds_set_complete(id, 1, my_payload);
    f092:	40 ee       	ldi	r20, 0xE0	; 224
    f094:	58 e0       	ldi	r21, 0x08	; 8
    f096:	61 e0       	ldi	r22, 0x01	; 1
    f098:	0e 94 49 43 	call	0x8692	; 0x8692 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
      remote_tds_subscibe_topic(id);
    f09c:	81 2f       	mov	r24, r17
    f09e:	0e 94 7b 43 	call	0x86f6	; 0x86f6 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    f0a2:	67 ed       	ldi	r22, 0xD7	; 215
    f0a4:	75 e5       	ldi	r23, 0x55	; 85
    f0a6:	c5 01       	movw	r24, r10
    f0a8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2613
  strcat(str1, device.nazev);
    f0ac:	6b e8       	ldi	r22, 0x8B	; 139
    f0ae:	70 e1       	ldi	r23, 0x10	; 16
    f0b0:	c5 01       	movw	r24, r10
    f0b2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
  strcat(str1, "/rtds/set/");
    f0b6:	6d e4       	ldi	r22, 0x4D	; 77
    f0b8:	76 e0       	ldi	r23, 0x06	; 6
    f0ba:	c5 01       	movw	r24, r10
    f0bc:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f0c0:	f5 01       	movw	r30, r10
    f0c2:	01 90       	ld	r0, Z+
    f0c4:	00 20       	and	r0, r0
    f0c6:	e9 f7       	brne	.-6      	; 0xf0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f8>
    f0c8:	31 97       	sbiw	r30, 0x01	; 1
    f0ca:	af 01       	movw	r20, r30
    f0cc:	4a 19       	sub	r20, r10
    f0ce:	5b 09       	sbc	r21, r11
    f0d0:	b4 01       	movw	r22, r8
    f0d2:	c5 01       	movw	r24, r10
    f0d4:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f0d8:	89 2b       	or	r24, r25
    f0da:	09 f0       	breq	.+2      	; 0xf0de <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    f0dc:	6e c0       	rjmp	.+220    	; 0xf1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
  {
    mqtt_process_message++;
    f0de:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f0e2:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f0e6:	01 96       	adiw	r24, 0x01	; 1
    f0e8:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f0ec:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f0f0:	f5 01       	movw	r30, r10
    f0f2:	01 90       	ld	r0, Z+
    f0f4:	00 20       	and	r0, r0
    f0f6:	e9 f7       	brne	.-6      	; 0xf0f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x628>
    f0f8:	31 97       	sbiw	r30, 0x01	; 1
    f0fa:	ea 19       	sub	r30, r10
    f0fc:	fb 09       	sbc	r31, r11
    f0fe:	9e 2f       	mov	r25, r30
    f100:	4e 2f       	mov	r20, r30
    f102:	84 2f       	mov	r24, r20
    f104:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619 (discriminator 3)
    f106:	24 2f       	mov	r18, r20
    f108:	30 e0       	ldi	r19, 0x00	; 0
    f10a:	d4 01       	movw	r26, r8
    f10c:	0d 90       	ld	r0, X+
    f10e:	00 20       	and	r0, r0
    f110:	e9 f7       	brne	.-6      	; 0xf10c <mqtt_callback(char*, unsigned char*, unsigned int)+0x642>
    f112:	11 97       	sbiw	r26, 0x01	; 1
    f114:	a8 19       	sub	r26, r8
    f116:	b9 09       	sbc	r27, r9
    f118:	2a 17       	cp	r18, r26
    f11a:	3b 07       	cpc	r19, r27
    f11c:	98 f4       	brcc	.+38     	; 0xf144 <mqtt_callback(char*, unsigned char*, unsigned int)+0x67a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f11e:	d5 01       	movw	r26, r10
    f120:	a8 0f       	add	r26, r24
    f122:	b1 1d       	adc	r27, r1
    f124:	28 0d       	add	r18, r8
    f126:	39 1d       	adc	r19, r9
    f128:	f9 01       	movw	r30, r18
    f12a:	80 81       	ld	r24, Z
    f12c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622 (discriminator 2)
      str1[cnt + 1] = 0;
    f12e:	11 96       	adiw	r26, 0x01	; 1
    f130:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619 (discriminator 2)
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f132:	4f 5f       	subi	r20, 0xFF	; 255
    f134:	e6 cf       	rjmp	.-52     	; 0xf102 <mqtt_callback(char*, unsigned char*, unsigned int)+0x638>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    f136:	6d e2       	ldi	r22, 0x2D	; 45
    f138:	76 e0       	ldi	r23, 0x06	; 6
    f13a:	8f e8       	ldi	r24, 0x8F	; 143
    f13c:	9d e0       	ldi	r25, 0x0D	; 13
    f13e:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    f142:	78 cf       	rjmp	.-272    	; 0xf034 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f144:	63 e3       	ldi	r22, 0x33	; 51
    f146:	73 e0       	ldi	r23, 0x03	; 3
    f148:	c5 01       	movw	r24, r10
    f14a:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2625
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f14e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
    pch = strtok (str1, "/");
    while (pch != NULL)
    f150:	00 97       	sbiw	r24, 0x00	; 0
    f152:	99 f1       	breq	.+102    	; 0xf1ba <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
    {
      if (cnt == 0) id = atoi(pch);
    f154:	01 11       	cpse	r16, r1
    f156:	0b c0       	rjmp	.+22     	; 0xf16e <mqtt_callback(char*, unsigned char*, unsigned int)+0x6a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629 (discriminator 1)
    f158:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f15c:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2643
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    f15e:	63 e3       	ldi	r22, 0x33	; 51
    f160:	73 e0       	ldi	r23, 0x03	; 3
    f162:	90 e0       	ldi	r25, 0x00	; 0
    f164:	80 e0       	ldi	r24, 0x00	; 0
    f166:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2644
      cnt++;
    f16a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f16c:	f1 cf       	rjmp	.-30     	; 0xf150 <mqtt_callback(char*, unsigned char*, unsigned int)+0x686>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2630
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    f16e:	01 30       	cpi	r16, 0x01	; 1
    f170:	b1 f7       	brne	.-20     	; 0xf15e <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2630 (discriminator 1)
    f172:	63 e7       	ldi	r22, 0x73	; 115
    f174:	73 e0       	ldi	r23, 0x03	; 3
    f176:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f17a:	89 2b       	or	r24, r25
    f17c:	81 f7       	brne	.-32     	; 0xf15e <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2632
      {
        remote_tds_get_active(id, &active);
    f17e:	be 01       	movw	r22, r28
    f180:	68 53       	subi	r22, 0x38	; 56
    f182:	7f 4f       	sbci	r23, 0xFF	; 255
    f184:	81 2f       	mov	r24, r17
    f186:	0e 94 66 42 	call	0x84cc	; 0x84cc <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
        if (active == 0)
    f18a:	c8 53       	subi	r28, 0x38	; 56
    f18c:	df 4f       	sbci	r29, 0xFF	; 255
    f18e:	88 81       	ld	r24, Y
    f190:	c8 5c       	subi	r28, 0xC8	; 200
    f192:	d0 40       	sbci	r29, 0x00	; 0
    f194:	81 11       	cpse	r24, r1
    f196:	0a c0       	rjmp	.+20     	; 0xf1ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x6e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
        {
          remote_tds_set_complete(id, 1, my_payload);
    f198:	40 ee       	ldi	r20, 0xE0	; 224
    f19a:	58 e0       	ldi	r21, 0x08	; 8
    f19c:	61 e0       	ldi	r22, 0x01	; 1
    f19e:	81 2f       	mov	r24, r17
    f1a0:	0e 94 49 43 	call	0x8692	; 0x8692 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
          remote_tds_subscibe_topic(id);
    f1a4:	81 2f       	mov	r24, r17
    f1a6:	0e 94 7b 43 	call	0x86f6	; 0x86f6 <remote_tds_subscibe_topic(unsigned char)>
    f1aa:	d9 cf       	rjmp	.-78     	; 0xf15e <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    f1ac:	68 e5       	ldi	r22, 0x58	; 88
    f1ae:	76 e0       	ldi	r23, 0x06	; 6
    f1b0:	8f e8       	ldi	r24, 0x8F	; 143
    f1b2:	9d e0       	ldi	r25, 0x0D	; 13
    f1b4:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    f1b8:	d2 cf       	rjmp	.-92     	; 0xf15e <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    f1ba:	67 ed       	ldi	r22, 0xD7	; 215
    f1bc:	75 e5       	ldi	r23, 0x55	; 85
    f1be:	c5 01       	movw	r24, r10
    f1c0:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
  strcat(str1, device.nazev);
    f1c4:	6b e8       	ldi	r22, 0x8B	; 139
    f1c6:	70 e1       	ldi	r23, 0x10	; 16
    f1c8:	c5 01       	movw	r24, r10
    f1ca:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
  strcat(str1, "/rtds/clear");
    f1ce:	68 e6       	ldi	r22, 0x68	; 104
    f1d0:	76 e0       	ldi	r23, 0x06	; 6
    f1d2:	c5 01       	movw	r24, r10
    f1d4:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f1d8:	f5 01       	movw	r30, r10
    f1da:	01 90       	ld	r0, Z+
    f1dc:	00 20       	and	r0, r0
    f1de:	e9 f7       	brne	.-6      	; 0xf1da <mqtt_callback(char*, unsigned char*, unsigned int)+0x710>
    f1e0:	31 97       	sbiw	r30, 0x01	; 1
    f1e2:	af 01       	movw	r20, r30
    f1e4:	4a 19       	sub	r20, r10
    f1e6:	5b 09       	sbc	r21, r11
    f1e8:	b4 01       	movw	r22, r8
    f1ea:	c5 01       	movw	r24, r10
    f1ec:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f1f0:	89 2b       	or	r24, r25
    f1f2:	99 f4       	brne	.+38     	; 0xf21a <mqtt_callback(char*, unsigned char*, unsigned int)+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
  {
    mqtt_process_message++;
    f1f4:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f1f8:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f1fc:	01 96       	adiw	r24, 0x01	; 1
    f1fe:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f202:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
    id = atoi(my_payload);
    f206:	80 ee       	ldi	r24, 0xE0	; 224
    f208:	98 e0       	ldi	r25, 0x08	; 8
    f20a:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f20e:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
    remote_tds_unsubscibe_topic(id);
    f210:	0e 94 bb 43 	call	0x8776	; 0x8776 <remote_tds_unsubscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    f214:	81 2f       	mov	r24, r17
    f216:	0e 94 56 43 	call	0x86ac	; 0x86ac <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    f21a:	67 ed       	ldi	r22, 0xD7	; 215
    f21c:	75 e5       	ldi	r23, 0x55	; 85
    f21e:	c5 01       	movw	r24, r10
    f220:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
  strcat(str1, device.nazev);
    f224:	6b e8       	ldi	r22, 0x8B	; 139
    f226:	70 e1       	ldi	r23, 0x10	; 16
    f228:	c5 01       	movw	r24, r10
    f22a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2665
  strcat(str1, "/rtds/get");
    f22e:	64 e7       	ldi	r22, 0x74	; 116
    f230:	76 e0       	ldi	r23, 0x06	; 6
    f232:	c5 01       	movw	r24, r10
    f234:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f238:	f5 01       	movw	r30, r10
    f23a:	01 90       	ld	r0, Z+
    f23c:	00 20       	and	r0, r0
    f23e:	e9 f7       	brne	.-6      	; 0xf23a <mqtt_callback(char*, unsigned char*, unsigned int)+0x770>
    f240:	31 97       	sbiw	r30, 0x01	; 1
    f242:	af 01       	movw	r20, r30
    f244:	4a 19       	sub	r20, r10
    f246:	5b 09       	sbc	r21, r11
    f248:	b4 01       	movw	r22, r8
    f24a:	c5 01       	movw	r24, r10
    f24c:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f250:	89 2b       	or	r24, r25
    f252:	11 f4       	brne	.+4      	; 0xf258 <mqtt_callback(char*, unsigned char*, unsigned int)+0x78e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  {
    send_mqtt_remote_tds_status();
    f254:	0e 94 92 4a 	call	0x9524	; 0x9524 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    f258:	6e e2       	ldi	r22, 0x2E	; 46
    f25a:	73 e0       	ldi	r23, 0x03	; 3
    f25c:	c5 01       	movw	r24, r10
    f25e:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f262:	f5 01       	movw	r30, r10
    f264:	01 90       	ld	r0, Z+
    f266:	00 20       	and	r0, r0
    f268:	e9 f7       	brne	.-6      	; 0xf264 <mqtt_callback(char*, unsigned char*, unsigned int)+0x79a>
    f26a:	31 97       	sbiw	r30, 0x01	; 1
    f26c:	af 01       	movw	r20, r30
    f26e:	4a 19       	sub	r20, r10
    f270:	5b 09       	sbc	r21, r11
    f272:	b4 01       	movw	r22, r8
    f274:	c5 01       	movw	r24, r10
    f276:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f27a:	89 2b       	or	r24, r25
    f27c:	09 f0       	breq	.+2      	; 0xf280 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b6>
    f27e:	55 c0       	rjmp	.+170    	; 0xf32a <mqtt_callback(char*, unsigned char*, unsigned int)+0x860>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
  {
    mqtt_process_message++;
    f280:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f284:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f288:	01 96       	adiw	r24, 0x01	; 1
    f28a:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f28e:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f292:	f5 01       	movw	r30, r10
    f294:	01 90       	ld	r0, Z+
    f296:	00 20       	and	r0, r0
    f298:	e9 f7       	brne	.-6      	; 0xf294 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ca>
    f29a:	31 97       	sbiw	r30, 0x01	; 1
    f29c:	ea 19       	sub	r30, r10
    f29e:	fb 09       	sbc	r31, r11
    f2a0:	9e 2f       	mov	r25, r30
    f2a2:	4e 2f       	mov	r20, r30
    f2a4:	84 2f       	mov	r24, r20
    f2a6:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677 (discriminator 3)
    f2a8:	24 2f       	mov	r18, r20
    f2aa:	30 e0       	ldi	r19, 0x00	; 0
    f2ac:	d4 01       	movw	r26, r8
    f2ae:	0d 90       	ld	r0, X+
    f2b0:	00 20       	and	r0, r0
    f2b2:	e9 f7       	brne	.-6      	; 0xf2ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e4>
    f2b4:	11 97       	sbiw	r26, 0x01	; 1
    f2b6:	a8 19       	sub	r26, r8
    f2b8:	b9 09       	sbc	r27, r9
    f2ba:	2a 17       	cp	r18, r26
    f2bc:	3b 07       	cpc	r19, r27
    f2be:	60 f4       	brcc	.+24     	; 0xf2d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f2c0:	d5 01       	movw	r26, r10
    f2c2:	a8 0f       	add	r26, r24
    f2c4:	b1 1d       	adc	r27, r1
    f2c6:	28 0d       	add	r18, r8
    f2c8:	39 1d       	adc	r19, r9
    f2ca:	f9 01       	movw	r30, r18
    f2cc:	80 81       	ld	r24, Z
    f2ce:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680 (discriminator 2)
      str1[cnt + 1] = 0;
    f2d0:	11 96       	adiw	r26, 0x01	; 1
    f2d2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677 (discriminator 2)
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f2d4:	4f 5f       	subi	r20, 0xFF	; 255
    f2d6:	e6 cf       	rjmp	.-52     	; 0xf2a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f2d8:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
    {
      uint8_t active = 0;
    f2da:	c8 57       	subi	r28, 0x78	; 120
    f2dc:	df 4f       	sbci	r29, 0xFF	; 255
    f2de:	18 82       	st	Y, r1
    f2e0:	c8 58       	subi	r28, 0x88	; 136
    f2e2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
      remote_tds_get_complete(idx, &active, tmp1);
    f2e4:	ae 01       	movw	r20, r28
    f2e6:	48 55       	subi	r20, 0x58	; 88
    f2e8:	5f 4f       	sbci	r21, 0xFF	; 255
    f2ea:	be 01       	movw	r22, r28
    f2ec:	68 57       	subi	r22, 0x78	; 120
    f2ee:	7f 4f       	sbci	r23, 0xFF	; 255
    f2f0:	80 2f       	mov	r24, r16
    f2f2:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
      if (active == 1 && strcmp(tmp1, str1) == 0)
    f2f6:	c8 57       	subi	r28, 0x78	; 120
    f2f8:	df 4f       	sbci	r29, 0xFF	; 255
    f2fa:	88 81       	ld	r24, Y
    f2fc:	c8 58       	subi	r28, 0x88	; 136
    f2fe:	d0 40       	sbci	r29, 0x00	; 0
    f300:	81 30       	cpi	r24, 0x01	; 1
    f302:	81 f4       	brne	.+32     	; 0xf324 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687 (discriminator 1)
    f304:	b5 01       	movw	r22, r10
    f306:	ce 01       	movw	r24, r28
    f308:	88 55       	subi	r24, 0x58	; 88
    f30a:	9f 4f       	sbci	r25, 0xFF	; 255
    f30c:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f310:	89 2b       	or	r24, r25
    f312:	41 f4       	brne	.+16     	; 0xf324 <mqtt_callback(char*, unsigned char*, unsigned int)+0x85a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
      {
        remote_tds_set_data(idx, atoi(my_payload));
    f314:	80 ee       	ldi	r24, 0xE0	; 224
    f316:	98 e0       	ldi	r25, 0x08	; 8
    f318:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f31c:	bc 01       	movw	r22, r24
    f31e:	80 2f       	mov	r24, r16
    f320:	0e 94 c8 44 	call	0x8990	; 0x8990 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683 (discriminator 2)
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f324:	0f 5f       	subi	r16, 0xFF	; 255
    f326:	0a 30       	cpi	r16, 0x0A	; 10
    f328:	c1 f6       	brne	.-80     	; 0xf2da <mqtt_callback(char*, unsigned char*, unsigned int)+0x810>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    f32a:	6e e7       	ldi	r22, 0x7E	; 126
    f32c:	76 e0       	ldi	r23, 0x06	; 6
    f32e:	c5 01       	movw	r24, r10
    f330:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    f334:	67 ed       	ldi	r22, 0xD7	; 215
    f336:	75 e5       	ldi	r23, 0x55	; 85
    f338:	c5 01       	movw	r24, r10
    f33a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2709
  strcat(str1, device.nazev);
    f33e:	6b e8       	ldi	r22, 0x8B	; 139
    f340:	70 e1       	ldi	r23, 0x10	; 16
    f342:	c5 01       	movw	r24, r10
    f344:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
  strcat(str1, "/prog/set/");
    f348:	69 e8       	ldi	r22, 0x89	; 137
    f34a:	76 e0       	ldi	r23, 0x06	; 6
    f34c:	c5 01       	movw	r24, r10
    f34e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f352:	f5 01       	movw	r30, r10
    f354:	01 90       	ld	r0, Z+
    f356:	00 20       	and	r0, r0
    f358:	e9 f7       	brne	.-6      	; 0xf354 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
    f35a:	31 97       	sbiw	r30, 0x01	; 1
    f35c:	af 01       	movw	r20, r30
    f35e:	4a 19       	sub	r20, r10
    f360:	5b 09       	sbc	r21, r11
    f362:	b4 01       	movw	r22, r8
    f364:	c5 01       	movw	r24, r10
    f366:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f36a:	89 2b       	or	r24, r25
    f36c:	09 f0       	breq	.+2      	; 0xf370 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8a6>
    f36e:	45 c0       	rjmp	.+138    	; 0xf3fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  {
    mqtt_process_message++;
    f370:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f374:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f378:	01 96       	adiw	r24, 0x01	; 1
    f37a:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f37e:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f382:	f5 01       	movw	r30, r10
    f384:	01 90       	ld	r0, Z+
    f386:	00 20       	and	r0, r0
    f388:	e9 f7       	brne	.-6      	; 0xf384 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ba>
    f38a:	31 97       	sbiw	r30, 0x01	; 1
    f38c:	ea 19       	sub	r30, r10
    f38e:	fb 09       	sbc	r31, r11
    f390:	9e 2f       	mov	r25, r30
    f392:	4e 2f       	mov	r20, r30
    f394:	84 2f       	mov	r24, r20
    f396:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715 (discriminator 3)
    f398:	24 2f       	mov	r18, r20
    f39a:	30 e0       	ldi	r19, 0x00	; 0
    f39c:	d4 01       	movw	r26, r8
    f39e:	0d 90       	ld	r0, X+
    f3a0:	00 20       	and	r0, r0
    f3a2:	e9 f7       	brne	.-6      	; 0xf39e <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
    f3a4:	11 97       	sbiw	r26, 0x01	; 1
    f3a6:	a8 19       	sub	r26, r8
    f3a8:	b9 09       	sbc	r27, r9
    f3aa:	2a 17       	cp	r18, r26
    f3ac:	3b 07       	cpc	r19, r27
    f3ae:	60 f4       	brcc	.+24     	; 0xf3c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f3b0:	d5 01       	movw	r26, r10
    f3b2:	a8 0f       	add	r26, r24
    f3b4:	b1 1d       	adc	r27, r1
    f3b6:	28 0d       	add	r18, r8
    f3b8:	39 1d       	adc	r19, r9
    f3ba:	f9 01       	movw	r30, r18
    f3bc:	80 81       	ld	r24, Z
    f3be:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718 (discriminator 2)
      str1[cnt + 1] = 0;
    f3c0:	11 96       	adiw	r26, 0x01	; 1
    f3c2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715 (discriminator 2)
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f3c4:	4f 5f       	subi	r20, 0xFF	; 255
    f3c6:	e6 cf       	rjmp	.-52     	; 0xf394 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2722
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f3c8:	63 e3       	ldi	r22, 0x33	; 51
    f3ca:	73 e0       	ldi	r23, 0x03	; 3
    f3cc:	c5 01       	movw	r24, r10
    f3ce:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    f3d2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f3d4:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
    pch = strtok (str1, "/");
    while (pch != NULL)
    f3d6:	e1 14       	cp	r14, r1
    f3d8:	f1 04       	cpc	r15, r1
    f3da:	79 f0       	breq	.+30     	; 0xf3fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
    {
      if (cnt == 0) id = atoi(pch);
    f3dc:	01 11       	cpse	r16, r1
    f3de:	bc c0       	rjmp	.+376    	; 0xf558 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725 (discriminator 1)
    f3e0:	c7 01       	movw	r24, r14
    f3e2:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f3e6:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726 (discriminator 1)
      if (id < AVAILABLE_PROGRAM)
    f3e8:	88 30       	cpi	r24, 0x08	; 8
    f3ea:	08 f4       	brcc	.+2      	; 0xf3ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x924>
    f3ec:	d5 c0       	rjmp	.+426    	; 0xf598 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    f3ee:	64 e9       	ldi	r22, 0x94	; 148
    f3f0:	76 e0       	ldi	r23, 0x06	; 6
    f3f2:	8f e8       	ldi	r24, 0x8F	; 143
    f3f4:	9d e0       	ldi	r25, 0x0D	; 13
    f3f6:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    f3fa:	67 ed       	ldi	r22, 0xD7	; 215
    f3fc:	75 e5       	ldi	r23, 0x55	; 85
    f3fe:	c5 01       	movw	r24, r10
    f400:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2742
  strcat(str1, device.nazev);
    f404:	6b e8       	ldi	r22, 0x8B	; 139
    f406:	70 e1       	ldi	r23, 0x10	; 16
    f408:	c5 01       	movw	r24, r10
    f40a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  strcat(str1, "/prog/clear");
    f40e:	64 ea       	ldi	r22, 0xA4	; 164
    f410:	76 e0       	ldi	r23, 0x06	; 6
    f412:	c5 01       	movw	r24, r10
    f414:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f418:	f5 01       	movw	r30, r10
    f41a:	01 90       	ld	r0, Z+
    f41c:	00 20       	and	r0, r0
    f41e:	e9 f7       	brne	.-6      	; 0xf41a <mqtt_callback(char*, unsigned char*, unsigned int)+0x950>
    f420:	31 97       	sbiw	r30, 0x01	; 1
    f422:	af 01       	movw	r20, r30
    f424:	4a 19       	sub	r20, r10
    f426:	5b 09       	sbc	r21, r11
    f428:	b4 01       	movw	r22, r8
    f42a:	c5 01       	movw	r24, r10
    f42c:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f430:	89 2b       	or	r24, r25
    f432:	09 f0       	breq	.+2      	; 0xf436 <mqtt_callback(char*, unsigned char*, unsigned int)+0x96c>
    f434:	47 c0       	rjmp	.+142    	; 0xf4c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
  {
    mqtt_process_message++;
    f436:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f43a:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f43e:	01 96       	adiw	r24, 0x01	; 1
    f440:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f444:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2747
    id = atoi(my_payload);
    f448:	80 ee       	ldi	r24, 0xE0	; 224
    f44a:	98 e0       	ldi	r25, 0x08	; 8
    f44c:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f450:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2748
    if (id < AVAILABLE_PROGRAM)
    f452:	88 30       	cpi	r24, 0x08	; 8
    f454:	08 f0       	brcs	.+2      	; 0xf458 <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
    f456:	a9 c0       	rjmp	.+338    	; 0xf5aa <mqtt_callback(char*, unsigned char*, unsigned int)+0xae0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
    {
      strcpy_P(tmp2, text_prog);
    f458:	6e e7       	ldi	r22, 0x7E	; 126
    f45a:	76 e5       	ldi	r23, 0x56	; 86
    f45c:	ce 01       	movw	r24, r28
    f45e:	88 57       	subi	r24, 0x78	; 120
    f460:	9f 4f       	sbci	r25, 0xFF	; 255
    f462:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
      thermostat_program_set_name(id, tmp2);
    f466:	be 01       	movw	r22, r28
    f468:	68 57       	subi	r22, 0x78	; 120
    f46a:	7f 4f       	sbci	r23, 0xFF	; 255
    f46c:	81 2f       	mov	r24, r17
    f46e:	0e 94 22 8f 	call	0x11e44	; 0x11e44 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
      thermostat_program_set_active(id, PROG_FREE);
    f472:	6f ef       	ldi	r22, 0xFF	; 255
    f474:	81 2f       	mov	r24, r17
    f476:	0e 94 52 8f 	call	0x11ea4	; 0x11ea4 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    f47a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    f47c:	c1 2c       	mov	r12, r1
    f47e:	e1 2c       	mov	r14, r1
    f480:	00 e0       	ldi	r16, 0x00	; 0
    f482:	20 e0       	ldi	r18, 0x00	; 0
    f484:	40 e0       	ldi	r20, 0x00	; 0
    f486:	6f 2d       	mov	r22, r15
    f488:	81 2f       	mov	r24, r17
    f48a:	0e 94 ad 8f 	call	0x11f5a	; 0x11f5a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756 (discriminator 2)
        thermostat_program_set_threshold(id, progid, 220);
    f48e:	4c ed       	ldi	r20, 0xDC	; 220
    f490:	50 e0       	ldi	r21, 0x00	; 0
    f492:	6f 2d       	mov	r22, r15
    f494:	81 2f       	mov	r24, r17
    f496:	0e 94 0b 90 	call	0x12016	; 0x12016 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757 (discriminator 2)
        thermostat_program_set_week(id, progid, 0);
    f49a:	40 e0       	ldi	r20, 0x00	; 0
    f49c:	6f 2d       	mov	r22, r15
    f49e:	81 2f       	mov	r24, r17
    f4a0:	0e 94 34 90 	call	0x12068	; 0x12068 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2753 (discriminator 2)
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    f4a4:	f3 94       	inc	r15
    f4a6:	fb e0       	ldi	r31, 0x0B	; 11
    f4a8:	ff 12       	cpse	r15, r31
    f4aa:	e8 cf       	rjmp	.-48     	; 0xf47c <mqtt_callback(char*, unsigned char*, unsigned int)+0x9b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    f4ac:	80 2f       	mov	r24, r16
    f4ae:	0e 94 38 8d 	call	0x11a70	; 0x11a70 <thermostat_ring_get_program_id(unsigned char)>
    f4b2:	81 13       	cpse	r24, r17
    f4b4:	04 c0       	rjmp	.+8      	; 0xf4be <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
    f4b6:	6f ef       	ldi	r22, 0xFF	; 255
    f4b8:	80 2f       	mov	r24, r16
    f4ba:	0e 94 40 8d 	call	0x11a80	; 0x11a80 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2759 (discriminator 2)
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    f4be:	0f 5f       	subi	r16, 0xFF	; 255
    f4c0:	05 30       	cpi	r16, 0x05	; 5
    f4c2:	a1 f7       	brne	.-24     	; 0xf4ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x9e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    f4c4:	67 ed       	ldi	r22, 0xD7	; 215
    f4c6:	75 e5       	ldi	r23, 0x55	; 85
    f4c8:	c5 01       	movw	r24, r10
    f4ca:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  strcat(str1, device.nazev);
    f4ce:	6b e8       	ldi	r22, 0x8B	; 139
    f4d0:	70 e1       	ldi	r23, 0x10	; 16
    f4d2:	c5 01       	movw	r24, r10
    f4d4:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
  strcat(str1, "/prog_interval/set/");
    f4d8:	62 ec       	ldi	r22, 0xC2	; 194
    f4da:	76 e0       	ldi	r23, 0x06	; 6
    f4dc:	c5 01       	movw	r24, r10
    f4de:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f4e2:	f5 01       	movw	r30, r10
    f4e4:	01 90       	ld	r0, Z+
    f4e6:	00 20       	and	r0, r0
    f4e8:	e9 f7       	brne	.-6      	; 0xf4e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1a>
    f4ea:	31 97       	sbiw	r30, 0x01	; 1
    f4ec:	af 01       	movw	r20, r30
    f4ee:	4a 19       	sub	r20, r10
    f4f0:	5b 09       	sbc	r21, r11
    f4f2:	b4 01       	movw	r22, r8
    f4f4:	c5 01       	movw	r24, r10
    f4f6:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f4fa:	89 2b       	or	r24, r25
    f4fc:	09 f0       	breq	.+2      	; 0xf500 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa36>
    f4fe:	bb c0       	rjmp	.+374    	; 0xf676 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
  {
    mqtt_process_message++;
    f500:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f504:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f508:	01 96       	adiw	r24, 0x01	; 1
    f50a:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f50e:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f512:	f5 01       	movw	r30, r10
    f514:	01 90       	ld	r0, Z+
    f516:	00 20       	and	r0, r0
    f518:	e9 f7       	brne	.-6      	; 0xf514 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4a>
    f51a:	31 97       	sbiw	r30, 0x01	; 1
    f51c:	ea 19       	sub	r30, r10
    f51e:	fb 09       	sbc	r31, r11
    f520:	9e 2f       	mov	r25, r30
    f522:	4e 2f       	mov	r20, r30
    f524:	84 2f       	mov	r24, r20
    f526:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780 (discriminator 3)
    f528:	24 2f       	mov	r18, r20
    f52a:	30 e0       	ldi	r19, 0x00	; 0
    f52c:	d4 01       	movw	r26, r8
    f52e:	0d 90       	ld	r0, X+
    f530:	00 20       	and	r0, r0
    f532:	e9 f7       	brne	.-6      	; 0xf52e <mqtt_callback(char*, unsigned char*, unsigned int)+0xa64>
    f534:	11 97       	sbiw	r26, 0x01	; 1
    f536:	a8 19       	sub	r26, r8
    f538:	b9 09       	sbc	r27, r9
    f53a:	2a 17       	cp	r18, r26
    f53c:	3b 07       	cpc	r19, r27
    f53e:	e0 f5       	brcc	.+120    	; 0xf5b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f540:	d5 01       	movw	r26, r10
    f542:	a8 0f       	add	r26, r24
    f544:	b1 1d       	adc	r27, r1
    f546:	28 0d       	add	r18, r8
    f548:	39 1d       	adc	r19, r9
    f54a:	f9 01       	movw	r30, r18
    f54c:	80 81       	ld	r24, Z
    f54e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783 (discriminator 2)
      str1[cnt + 1] = 0;
    f550:	11 96       	adiw	r26, 0x01	; 1
    f552:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780 (discriminator 2)
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f554:	4f 5f       	subi	r20, 0xFF	; 255
    f556:	e6 cf       	rjmp	.-52     	; 0xf524 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    f558:	18 30       	cpi	r17, 0x08	; 8
    f55a:	08 f0       	brcs	.+2      	; 0xf55e <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
    f55c:	48 cf       	rjmp	.-368    	; 0xf3ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x924>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    f55e:	01 30       	cpi	r16, 0x01	; 1
    f560:	d9 f4       	brne	.+54     	; 0xf598 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728 (discriminator 1)
    f562:	63 e7       	ldi	r22, 0x73	; 115
    f564:	73 e0       	ldi	r23, 0x03	; 3
    f566:	c7 01       	movw	r24, r14
    f568:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f56c:	89 2b       	or	r24, r25
    f56e:	29 f4       	brne	.+10     	; 0xf57a <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728 (discriminator 2)
    f570:	60 ee       	ldi	r22, 0xE0	; 224
    f572:	78 e0       	ldi	r23, 0x08	; 8
    f574:	81 2f       	mov	r24, r17
    f576:	0e 94 22 8f 	call	0x11e44	; 0x11e44 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    f57a:	64 e9       	ldi	r22, 0x94	; 148
    f57c:	73 e0       	ldi	r23, 0x03	; 3
    f57e:	c7 01       	movw	r24, r14
    f580:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f584:	89 2b       	or	r24, r25
    f586:	41 f4       	brne	.+16     	; 0xf598 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729 (discriminator 2)
    f588:	80 ee       	ldi	r24, 0xE0	; 224
    f58a:	98 e0       	ldi	r25, 0x08	; 8
    f58c:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f590:	68 2f       	mov	r22, r24
    f592:	81 2f       	mov	r24, r17
    f594:	0e 94 52 8f 	call	0x11ea4	; 0x11ea4 <thermostat_program_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    f598:	63 e3       	ldi	r22, 0x33	; 51
    f59a:	73 e0       	ldi	r23, 0x03	; 3
    f59c:	90 e0       	ldi	r25, 0x00	; 0
    f59e:	80 e0       	ldi	r24, 0x00	; 0
    f5a0:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    f5a4:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
      cnt++;
    f5a6:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f5a8:	16 cf       	rjmp	.-468    	; 0xf3d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x90c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2769
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    f5aa:	60 eb       	ldi	r22, 0xB0	; 176
    f5ac:	76 e0       	ldi	r23, 0x06	; 6
    f5ae:	8f e8       	ldi	r24, 0x8F	; 143
    f5b0:	9d e0       	ldi	r25, 0x0D	; 13
    f5b2:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    f5b6:	86 cf       	rjmp	.-244    	; 0xf4c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2787
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f5b8:	63 e3       	ldi	r22, 0x33	; 51
    f5ba:	73 e0       	ldi	r23, 0x03	; 3
    f5bc:	c5 01       	movw	r24, r10
    f5be:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    f5c2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2472
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    f5c4:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2786
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f5c6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
    pch = strtok (str1, "/");
    while (pch != NULL)
    f5c8:	e1 14       	cp	r14, r1
    f5ca:	f1 04       	cpc	r15, r1
    f5cc:	09 f4       	brne	.+2      	; 0xf5d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb06>
    f5ce:	53 c0       	rjmp	.+166    	; 0xf676 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
    {
      if (cnt == 0) id = atoi(pch);
    f5d0:	01 11       	cpse	r16, r1
    f5d2:	43 c0       	rjmp	.+134    	; 0xf65a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790 (discriminator 1)
    f5d4:	c7 01       	movw	r24, r14
    f5d6:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f5da:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    f5dc:	18 30       	cpi	r17, 0x08	; 8
    f5de:	08 f0       	brcs	.+2      	; 0xf5e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb18>
    f5e0:	44 c0       	rjmp	.+136    	; 0xf66a <mqtt_callback(char*, unsigned char*, unsigned int)+0xba0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792 (discriminator 1)
    f5e2:	fa e0       	ldi	r31, 0x0A	; 10
    f5e4:	fd 15       	cp	r31, r13
    f5e6:	08 f4       	brcc	.+2      	; 0xf5ea <mqtt_callback(char*, unsigned char*, unsigned int)+0xb20>
    f5e8:	40 c0       	rjmp	.+128    	; 0xf66a <mqtt_callback(char*, unsigned char*, unsigned int)+0xba0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    f5ea:	02 30       	cpi	r16, 0x02	; 2
    f5ec:	69 f5       	brne	.+90     	; 0xf648 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794 (discriminator 1)
    f5ee:	64 e9       	ldi	r22, 0x94	; 148
    f5f0:	73 e0       	ldi	r23, 0x03	; 3
    f5f2:	c7 01       	movw	r24, r14
    f5f4:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f5f8:	89 2b       	or	r24, r25
    f5fa:	49 f4       	brne	.+18     	; 0xf60e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794 (discriminator 2)
    f5fc:	80 ee       	ldi	r24, 0xE0	; 224
    f5fe:	98 e0       	ldi	r25, 0x08	; 8
    f600:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f604:	48 2f       	mov	r20, r24
    f606:	6d 2d       	mov	r22, r13
    f608:	81 2f       	mov	r24, r17
    f60a:	0e 94 a6 90 	call	0x1214c	; 0x1214c <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    f60e:	6b ea       	ldi	r22, 0xAB	; 171
    f610:	73 e0       	ldi	r23, 0x03	; 3
    f612:	c7 01       	movw	r24, r14
    f614:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f618:	89 2b       	or	r24, r25
    f61a:	49 f4       	brne	.+18     	; 0xf62e <mqtt_callback(char*, unsigned char*, unsigned int)+0xb64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795 (discriminator 2)
    f61c:	80 ee       	ldi	r24, 0xE0	; 224
    f61e:	98 e0       	ldi	r25, 0x08	; 8
    f620:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f624:	ac 01       	movw	r20, r24
    f626:	6d 2d       	mov	r22, r13
    f628:	81 2f       	mov	r24, r17
    f62a:	0e 94 0b 90 	call	0x12016	; 0x12016 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    f62e:	68 ec       	ldi	r22, 0xC8	; 200
    f630:	77 e0       	ldi	r23, 0x07	; 7
    f632:	c7 01       	movw	r24, r14
    f634:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f638:	89 2b       	or	r24, r25
    f63a:	31 f4       	brne	.+12     	; 0xf648 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796 (discriminator 2)
    f63c:	40 ee       	ldi	r20, 0xE0	; 224
    f63e:	58 e0       	ldi	r21, 0x08	; 8
    f640:	6d 2d       	mov	r22, r13
    f642:	81 2f       	mov	r24, r17
    f644:	0e 94 42 90 	call	0x12084	; 0x12084 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    f648:	63 e3       	ldi	r22, 0x33	; 51
    f64a:	73 e0       	ldi	r23, 0x03	; 3
    f64c:	90 e0       	ldi	r25, 0x00	; 0
    f64e:	80 e0       	ldi	r24, 0x00	; 0
    f650:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    f654:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2804
      cnt++;
    f656:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2788
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f658:	b7 cf       	rjmp	.-146    	; 0xf5c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xafe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    f65a:	01 30       	cpi	r16, 0x01	; 1
    f65c:	09 f0       	breq	.+2      	; 0xf660 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb96>
    f65e:	be cf       	rjmp	.-132    	; 0xf5dc <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791 (discriminator 1)
    f660:	c7 01       	movw	r24, r14
    f662:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f666:	d8 2e       	mov	r13, r24
    f668:	b9 cf       	rjmp	.-142    	; 0xf5dc <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    f66a:	66 ed       	ldi	r22, 0xD6	; 214
    f66c:	76 e0       	ldi	r23, 0x06	; 6
    f66e:	8f e8       	ldi	r24, 0x8F	; 143
    f670:	9d e0       	ldi	r25, 0x0D	; 13
    f672:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    f676:	67 ed       	ldi	r22, 0xD7	; 215
    f678:	75 e5       	ldi	r23, 0x55	; 85
    f67a:	c5 01       	movw	r24, r10
    f67c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810
  strcat(str1, device.nazev);
    f680:	6b e8       	ldi	r22, 0x8B	; 139
    f682:	70 e1       	ldi	r23, 0x10	; 16
    f684:	c5 01       	movw	r24, r10
    f686:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
  strcat(str1, "/ring/default");
    f68a:	6f ee       	ldi	r22, 0xEF	; 239
    f68c:	76 e0       	ldi	r23, 0x06	; 6
    f68e:	c5 01       	movw	r24, r10
    f690:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
  if (strcmp(str1, topic) == 0)
    f694:	b4 01       	movw	r22, r8
    f696:	c5 01       	movw	r24, r10
    f698:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f69c:	89 2b       	or	r24, r25
    f69e:	89 f4       	brne	.+34     	; 0xf6c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2814
  {
    mqtt_process_message++;
    f6a0:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    f6a4:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    f6a8:	01 96       	adiw	r24, 0x01	; 1
    f6aa:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    f6ae:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
    default_ring = atoi(my_payload);
    f6b2:	80 ee       	ldi	r24, 0xE0	; 224
    f6b4:	98 e0       	ldi	r25, 0x08	; 8
    f6b6:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f6ba:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
    set_default_ring(default_ring);
    f6be:	0e 94 84 46 	call	0x8d08	; 0x8d08 <set_default_ring(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2820
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    f6c2:	67 ed       	ldi	r22, 0xD7	; 215
    f6c4:	75 e5       	ldi	r23, 0x55	; 85
    f6c6:	c5 01       	movw	r24, r10
    f6c8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
  strcat(str1, device.nazev);
    f6cc:	6b e8       	ldi	r22, 0x8B	; 139
    f6ce:	70 e1       	ldi	r23, 0x10	; 16
    f6d0:	c5 01       	movw	r24, r10
    f6d2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
  strcat(str1, "/ring/get/");
    f6d6:	6d ef       	ldi	r22, 0xFD	; 253
    f6d8:	76 e0       	ldi	r23, 0x06	; 6
    f6da:	c5 01       	movw	r24, r10
    f6dc:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f6e0:	f5 01       	movw	r30, r10
    f6e2:	01 90       	ld	r0, Z+
    f6e4:	00 20       	and	r0, r0
    f6e6:	e9 f7       	brne	.-6      	; 0xf6e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc18>
    f6e8:	31 97       	sbiw	r30, 0x01	; 1
    f6ea:	7f 01       	movw	r14, r30
    f6ec:	ea 18       	sub	r14, r10
    f6ee:	fb 08       	sbc	r15, r11
    f6f0:	a7 01       	movw	r20, r14
    f6f2:	b4 01       	movw	r22, r8
    f6f4:	c5 01       	movw	r24, r10
    f6f6:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f6fa:	89 2b       	or	r24, r25
    f6fc:	09 f0       	breq	.+2      	; 0xf700 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc36>
    f6fe:	47 c0       	rjmp	.+142    	; 0xf78e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f700:	9e 2d       	mov	r25, r14
    f702:	8e 2d       	mov	r24, r14
    f704:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826 (discriminator 3)
    f706:	2e 2d       	mov	r18, r14
    f708:	30 e0       	ldi	r19, 0x00	; 0
    f70a:	f4 01       	movw	r30, r8
    f70c:	01 90       	ld	r0, Z+
    f70e:	00 20       	and	r0, r0
    f710:	e9 f7       	brne	.-6      	; 0xf70c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc42>
    f712:	31 97       	sbiw	r30, 0x01	; 1
    f714:	e8 19       	sub	r30, r8
    f716:	f9 09       	sbc	r31, r9
    f718:	2e 17       	cp	r18, r30
    f71a:	3f 07       	cpc	r19, r31
    f71c:	58 f4       	brcc	.+22     	; 0xf734 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f71e:	f5 01       	movw	r30, r10
    f720:	e8 0f       	add	r30, r24
    f722:	f1 1d       	adc	r31, r1
    f724:	28 0d       	add	r18, r8
    f726:	39 1d       	adc	r19, r9
    f728:	d9 01       	movw	r26, r18
    f72a:	8c 91       	ld	r24, X
    f72c:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829 (discriminator 2)
      str1[cnt + 1] = 0;
    f72e:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f730:	e3 94       	inc	r14
    f732:	e7 cf       	rjmp	.-50     	; 0xf702 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f734:	63 e3       	ldi	r22, 0x33	; 51
    f736:	73 e0       	ldi	r23, 0x03	; 3
    f738:	c5 01       	movw	r24, r10
    f73a:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f73e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
    pch = strtok (str1, "/");
    while (pch != NULL)
    f740:	00 97       	sbiw	r24, 0x00	; 0
    f742:	29 f1       	breq	.+74     	; 0xf78e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836
    {
      if (cnt == 0) id = atoi(my_payload);
    f744:	01 11       	cpse	r16, r1
    f746:	0e c0       	rjmp	.+28     	; 0xf764 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc9a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2836 (discriminator 1)
    f748:	80 ee       	ldi	r24, 0xE0	; 224
    f74a:	98 e0       	ldi	r25, 0x08	; 8
    f74c:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f750:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    f752:	85 30       	cpi	r24, 0x05	; 5
    f754:	a0 f0       	brcs	.+40     	; 0xf77e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2843
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    f756:	68 e0       	ldi	r22, 0x08	; 8
    f758:	77 e0       	ldi	r23, 0x07	; 7
    f75a:	8f e8       	ldi	r24, 0x8F	; 143
    f75c:	9d e0       	ldi	r25, 0x0D	; 13
    f75e:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    f762:	0d c0       	rjmp	.+26     	; 0xf77e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    f764:	15 30       	cpi	r17, 0x05	; 5
    f766:	b8 f7       	brcc	.-18     	; 0xf756 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    f768:	01 30       	cpi	r16, 0x01	; 1
    f76a:	49 f4       	brne	.+18     	; 0xf77e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839 (discriminator 1)
    f76c:	6a eb       	ldi	r22, 0xBA	; 186
    f76e:	73 e0       	ldi	r23, 0x03	; 3
    f770:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f774:	89 2b       	or	r24, r25
    f776:	19 f4       	brne	.+6      	; 0xf77e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2839 (discriminator 2)
    f778:	81 2f       	mov	r24, r17
    f77a:	0e 94 35 4a 	call	0x946a	; 0x946a <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2845
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    f77e:	63 e3       	ldi	r22, 0x33	; 51
    f780:	73 e0       	ldi	r23, 0x03	; 3
    f782:	90 e0       	ldi	r25, 0x00	; 0
    f784:	80 e0       	ldi	r24, 0x00	; 0
    f786:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
      cnt++;
    f78a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    f78c:	d9 cf       	rjmp	.-78     	; 0xf740 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2865
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    f78e:	67 ed       	ldi	r22, 0xD7	; 215
    f790:	75 e5       	ldi	r23, 0x55	; 85
    f792:	c5 01       	movw	r24, r10
    f794:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2866
  strcat(str1, device.nazev);
    f798:	6b e8       	ldi	r22, 0x8B	; 139
    f79a:	70 e1       	ldi	r23, 0x10	; 16
    f79c:	c5 01       	movw	r24, r10
    f79e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2867
  strcat(str1, "/ring/set/");
    f7a2:	68 e1       	ldi	r22, 0x18	; 24
    f7a4:	77 e0       	ldi	r23, 0x07	; 7
    f7a6:	c5 01       	movw	r24, r10
    f7a8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f7ac:	f5 01       	movw	r30, r10
    f7ae:	01 90       	ld	r0, Z+
    f7b0:	00 20       	and	r0, r0
    f7b2:	e9 f7       	brne	.-6      	; 0xf7ae <mqtt_callback(char*, unsigned char*, unsigned int)+0xce4>
    f7b4:	31 97       	sbiw	r30, 0x01	; 1
    f7b6:	7f 01       	movw	r14, r30
    f7b8:	ea 18       	sub	r14, r10
    f7ba:	fb 08       	sbc	r15, r11
    f7bc:	a7 01       	movw	r20, r14
    f7be:	b4 01       	movw	r22, r8
    f7c0:	c5 01       	movw	r24, r10
    f7c2:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    f7c6:	89 2b       	or	r24, r25
    f7c8:	09 f0       	breq	.+2      	; 0xf7cc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd02>
    f7ca:	4a c1       	rjmp	.+660    	; 0xfa60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f7cc:	9e 2d       	mov	r25, r14
    f7ce:	8e 2d       	mov	r24, r14
    f7d0:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871 (discriminator 3)
    f7d2:	2e 2d       	mov	r18, r14
    f7d4:	30 e0       	ldi	r19, 0x00	; 0
    f7d6:	f4 01       	movw	r30, r8
    f7d8:	01 90       	ld	r0, Z+
    f7da:	00 20       	and	r0, r0
    f7dc:	e9 f7       	brne	.-6      	; 0xf7d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    f7de:	31 97       	sbiw	r30, 0x01	; 1
    f7e0:	e8 19       	sub	r30, r8
    f7e2:	f9 09       	sbc	r31, r9
    f7e4:	2e 17       	cp	r18, r30
    f7e6:	3f 07       	cpc	r19, r31
    f7e8:	58 f4       	brcc	.+22     	; 0xf800 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873 (discriminator 2)
    {
      str1[cnt] = topic[f];
    f7ea:	f5 01       	movw	r30, r10
    f7ec:	e8 0f       	add	r30, r24
    f7ee:	f1 1d       	adc	r31, r1
    f7f0:	28 0d       	add	r18, r8
    f7f2:	39 1d       	adc	r19, r9
    f7f4:	d9 01       	movw	r26, r18
    f7f6:	8c 91       	ld	r24, X
    f7f8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874 (discriminator 2)
      str1[cnt + 1] = 0;
    f7fa:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871 (discriminator 2)
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f7fc:	e3 94       	inc	r14
    f7fe:	e7 cf       	rjmp	.-50     	; 0xf7ce <mqtt_callback(char*, unsigned char*, unsigned int)+0xd04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f800:	63 e3       	ldi	r22, 0x33	; 51
    f802:	73 e0       	ldi	r23, 0x03	; 3
    f804:	c5 01       	movw	r24, r10
    f806:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    f80a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f80c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
    pch = strtok (str1, "/");
    while (pch != NULL)
    f80e:	e1 14       	cp	r14, r1
    f810:	f1 04       	cpc	r15, r1
    f812:	09 f4       	brne	.+2      	; 0xf816 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd4c>
    f814:	25 c1       	rjmp	.+586    	; 0xfa60 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
    {
      if (cnt == 0) id = atoi(pch);
    f816:	01 11       	cpse	r16, r1
    f818:	0e c0       	rjmp	.+28     	; 0xf836 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881 (discriminator 1)
    f81a:	c7 01       	movw	r24, r14
    f81c:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f820:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882 (discriminator 1)
      if (id < MAX_THERMOSTAT)
    f822:	85 30       	cpi	r24, 0x05	; 5
    f824:	08 f4       	brcc	.+2      	; 0xf828 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5e>
    f826:	13 c1       	rjmp	.+550    	; 0xfa4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2919
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    f828:	68 e0       	ldi	r22, 0x08	; 8
    f82a:	77 e0       	ldi	r23, 0x07	; 7
    f82c:	8f e8       	ldi	r24, 0x8F	; 143
    f82e:	9d e0       	ldi	r25, 0x0D	; 13
    f830:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    f834:	0c c1       	rjmp	.+536    	; 0xfa4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    f836:	15 30       	cpi	r17, 0x05	; 5
    f838:	b8 f7       	brcc	.-18     	; 0xf828 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    f83a:	01 30       	cpi	r16, 0x01	; 1
    f83c:	09 f0       	breq	.+2      	; 0xf840 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd76>
    f83e:	07 c1       	rjmp	.+526    	; 0xfa4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884 (discriminator 1)
    f840:	63 e7       	ldi	r22, 0x73	; 115
    f842:	73 e0       	ldi	r23, 0x03	; 3
    f844:	c7 01       	movw	r24, r14
    f846:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f84a:	89 2b       	or	r24, r25
    f84c:	29 f4       	brne	.+10     	; 0xf858 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884 (discriminator 2)
    f84e:	60 ee       	ldi	r22, 0xE0	; 224
    f850:	78 e0       	ldi	r23, 0x08	; 8
    f852:	81 2f       	mov	r24, r17
    f854:	0e 94 f1 8c 	call	0x119e2	; 0x119e2 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2885
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    f858:	65 e0       	ldi	r22, 0x05	; 5
    f85a:	75 e0       	ldi	r23, 0x05	; 5
    f85c:	c7 01       	movw	r24, r14
    f85e:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f862:	89 2b       	or	r24, r25
    f864:	59 f4       	brne	.+22     	; 0xf87c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    f866:	80 ee       	ldi	r24, 0xE0	; 224
    f868:	98 e0       	ldi	r25, 0x08	; 8
    f86a:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f86e:	88 30       	cpi	r24, 0x08	; 8
    f870:	91 05       	cpc	r25, r1
    f872:	24 f4       	brge	.+8      	; 0xf87c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2887
            thermostat_ring_set_program_id(id, atoi(my_payload));
    f874:	68 2f       	mov	r22, r24
    f876:	81 2f       	mov	r24, r17
    f878:	0e 94 40 8d 	call	0x11a80	; 0x11a80 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    f87c:	63 ea       	ldi	r22, 0xA3	; 163
    f87e:	77 e0       	ldi	r23, 0x07	; 7
    f880:	c7 01       	movw	r24, r14
    f882:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f886:	89 2b       	or	r24, r25
    f888:	79 f4       	brne	.+30     	; 0xf8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888 (discriminator 2)
    f88a:	80 ee       	ldi	r24, 0xE0	; 224
    f88c:	98 e0       	ldi	r25, 0x08	; 8
    f88e:	0e 94 1f d7 	call	0x1ae3e	; 0x1ae3e <atof>
    f892:	20 e0       	ldi	r18, 0x00	; 0
    f894:	30 e0       	ldi	r19, 0x00	; 0
    f896:	40 e2       	ldi	r20, 0x20	; 32
    f898:	51 e4       	ldi	r21, 0x41	; 65
    f89a:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
    f89e:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <__fixsfsi>
    f8a2:	81 2f       	mov	r24, r17
    f8a4:	0e 94 65 8d 	call	0x11aca	; 0x11aca <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    f8a8:	6b ea       	ldi	r22, 0xAB	; 171
    f8aa:	73 e0       	ldi	r23, 0x03	; 3
    f8ac:	c7 01       	movw	r24, r14
    f8ae:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f8b2:	89 2b       	or	r24, r25
    f8b4:	41 f4       	brne	.+16     	; 0xf8c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889 (discriminator 2)
    f8b6:	80 ee       	ldi	r24, 0xE0	; 224
    f8b8:	98 e0       	ldi	r25, 0x08	; 8
    f8ba:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f8be:	bc 01       	movw	r22, r24
    f8c0:	81 2f       	mov	r24, r17
    f8c2:	0e 94 65 8d 	call	0x11aca	; 0x11aca <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    f8c6:	6d e0       	ldi	r22, 0x0D	; 13
    f8c8:	75 e0       	ldi	r23, 0x05	; 5
    f8ca:	c7 01       	movw	r24, r14
    f8cc:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f8d0:	89 2b       	or	r24, r25
    f8d2:	29 f5       	brne	.+74     	; 0xf91e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
        {
          active = convert_text_mode(my_payload);
    f8d4:	80 ee       	ldi	r24, 0xE0	; 224
    f8d6:	98 e0       	ldi	r25, 0x08	; 8
    f8d8:	0e 94 cb 4d 	call	0x9b96	; 0x9b96 <convert_text_mode(char*)>
    f8dc:	c8 53       	subi	r28, 0x38	; 56
    f8de:	df 4f       	sbci	r29, 0xFF	; 255
    f8e0:	88 83       	st	Y, r24
    f8e2:	c8 5c       	subi	r28, 0xC8	; 200
    f8e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2893
          thermostat_ring_set_mode(id, active);
    f8e6:	68 2f       	mov	r22, r24
    f8e8:	81 2f       	mov	r24, r17
    f8ea:	0e 94 94 8d 	call	0x11b28	; 0x11b28 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894
          if (active == TERM_MODE_MAN_HEAT)
    f8ee:	c8 53       	subi	r28, 0x38	; 56
    f8f0:	df 4f       	sbci	r29, 0xFF	; 255
    f8f2:	88 81       	ld	r24, Y
    f8f4:	c8 5c       	subi	r28, 0xC8	; 200
    f8f6:	d0 40       	sbci	r29, 0x00	; 0
    f8f8:	83 30       	cpi	r24, 0x03	; 3
    f8fa:	29 f4       	brne	.+10     	; 0xf906 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    f8fc:	40 e0       	ldi	r20, 0x00	; 0
    f8fe:	60 e0       	ldi	r22, 0x00	; 0
    f900:	81 2f       	mov	r24, r17
    f902:	0e 94 c9 8d 	call	0x11b92	; 0x11b92 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
          if (active == TERM_MODE_MAN_COOL)
    f906:	c8 53       	subi	r28, 0x38	; 56
    f908:	df 4f       	sbci	r29, 0xFF	; 255
    f90a:	88 81       	ld	r24, Y
    f90c:	c8 5c       	subi	r28, 0xC8	; 200
    f90e:	d0 40       	sbci	r29, 0x00	; 0
    f910:	85 30       	cpi	r24, 0x05	; 5
    f912:	29 f4       	brne	.+10     	; 0xf91e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    f914:	41 e0       	ldi	r20, 0x01	; 1
    f916:	60 e0       	ldi	r22, 0x00	; 0
    f918:	81 2f       	mov	r24, r17
    f91a:	0e 94 c9 8d 	call	0x11b92	; 0x11b92 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    f91e:	62 e1       	ldi	r22, 0x12	; 18
    f920:	75 e0       	ldi	r23, 0x05	; 5
    f922:	c7 01       	movw	r24, r14
    f924:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f928:	89 2b       	or	r24, r25
    f92a:	29 f5       	brne	.+74     	; 0xf976 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2901
        {
          active = atoi(my_payload);
    f92c:	80 ee       	ldi	r24, 0xE0	; 224
    f92e:	98 e0       	ldi	r25, 0x08	; 8
    f930:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f934:	c8 53       	subi	r28, 0x38	; 56
    f936:	df 4f       	sbci	r29, 0xFF	; 255
    f938:	88 83       	st	Y, r24
    f93a:	c8 5c       	subi	r28, 0xC8	; 200
    f93c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2902
          thermostat_ring_set_mode(id, active);
    f93e:	68 2f       	mov	r22, r24
    f940:	81 2f       	mov	r24, r17
    f942:	0e 94 94 8d 	call	0x11b28	; 0x11b28 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
          if (active == TERM_MODE_MAN_HEAT)
    f946:	c8 53       	subi	r28, 0x38	; 56
    f948:	df 4f       	sbci	r29, 0xFF	; 255
    f94a:	88 81       	ld	r24, Y
    f94c:	c8 5c       	subi	r28, 0xC8	; 200
    f94e:	d0 40       	sbci	r29, 0x00	; 0
    f950:	83 30       	cpi	r24, 0x03	; 3
    f952:	29 f4       	brne	.+10     	; 0xf95e <mqtt_callback(char*, unsigned char*, unsigned int)+0xe94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2904
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    f954:	40 e0       	ldi	r20, 0x00	; 0
    f956:	60 e0       	ldi	r22, 0x00	; 0
    f958:	81 2f       	mov	r24, r17
    f95a:	0e 94 c9 8d 	call	0x11b92	; 0x11b92 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2905
          if (active == TERM_MODE_MAN_COOL)
    f95e:	c8 53       	subi	r28, 0x38	; 56
    f960:	df 4f       	sbci	r29, 0xFF	; 255
    f962:	88 81       	ld	r24, Y
    f964:	c8 5c       	subi	r28, 0xC8	; 200
    f966:	d0 40       	sbci	r29, 0x00	; 0
    f968:	85 30       	cpi	r24, 0x05	; 5
    f96a:	29 f4       	brne	.+10     	; 0xf976 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2906
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    f96c:	41 e0       	ldi	r20, 0x01	; 1
    f96e:	60 e0       	ldi	r22, 0x00	; 0
    f970:	81 2f       	mov	r24, r17
    f972:	0e 94 c9 8d 	call	0x11b92	; 0x11b92 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2908
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    f976:	6e e1       	ldi	r22, 0x1E	; 30
    f978:	75 e0       	ldi	r23, 0x05	; 5
    f97a:	c7 01       	movw	r24, r14
    f97c:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f980:	89 2b       	or	r24, r25
    f982:	41 f4       	brne	.+16     	; 0xf994 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2908 (discriminator 2)
    f984:	80 ee       	ldi	r24, 0xE0	; 224
    f986:	98 e0       	ldi	r25, 0x08	; 8
    f988:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f98c:	68 2f       	mov	r22, r24
    f98e:	81 2f       	mov	r24, r17
    f990:	0e 94 84 8d 	call	0x11b08	; 0x11b08 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    f994:	64 e9       	ldi	r22, 0x94	; 148
    f996:	73 e0       	ldi	r23, 0x03	; 3
    f998:	c7 01       	movw	r24, r14
    f99a:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f99e:	89 2b       	or	r24, r25
    f9a0:	41 f4       	brne	.+16     	; 0xf9b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xee8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2910 (discriminator 2)
    f9a2:	80 ee       	ldi	r24, 0xE0	; 224
    f9a4:	98 e0       	ldi	r25, 0x08	; 8
    f9a6:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f9aa:	68 2f       	mov	r22, r24
    f9ac:	81 2f       	mov	r24, r17
    f9ae:	0e 94 30 8d 	call	0x11a60	; 0x11a60 <thermostat_ring_set_active(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    f9b2:	64 e2       	ldi	r22, 0x24	; 36
    f9b4:	75 e0       	ldi	r23, 0x05	; 5
    f9b6:	c7 01       	movw	r24, r14
    f9b8:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f9bc:	89 2b       	or	r24, r25
    f9be:	41 f4       	brne	.+16     	; 0xf9d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911 (discriminator 2)
    f9c0:	80 ee       	ldi	r24, 0xE0	; 224
    f9c2:	98 e0       	ldi	r25, 0x08	; 8
    f9c4:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    f9c8:	68 2f       	mov	r22, r24
    f9ca:	81 2f       	mov	r24, r17
    f9cc:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <thermostat_ring_set_output(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    f9d0:	6f ea       	ldi	r22, 0xAF	; 175
    f9d2:	77 e0       	ldi	r23, 0x07	; 7
    f9d4:	c7 01       	movw	r24, r14
    f9d6:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f9da:	89 2b       	or	r24, r25
    f9dc:	49 f4       	brne	.+18     	; 0xf9f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912 (discriminator 2)
    f9de:	80 ee       	ldi	r24, 0xE0	; 224
    f9e0:	98 e0       	ldi	r25, 0x08	; 8
    f9e2:	0e 94 1f d7 	call	0x1ae3e	; 0x1ae3e <atof>
    f9e6:	ab 01       	movw	r20, r22
    f9e8:	bc 01       	movw	r22, r24
    f9ea:	81 2f       	mov	r24, r17
    f9ec:	0e 94 b8 8e 	call	0x11d70	; 0x11d70 <thermostat_ring_pid_set_kp(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    f9f0:	66 eb       	ldi	r22, 0xB6	; 182
    f9f2:	77 e0       	ldi	r23, 0x07	; 7
    f9f4:	c7 01       	movw	r24, r14
    f9f6:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    f9fa:	89 2b       	or	r24, r25
    f9fc:	49 f4       	brne	.+18     	; 0xfa10 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913 (discriminator 2)
    f9fe:	80 ee       	ldi	r24, 0xE0	; 224
    fa00:	98 e0       	ldi	r25, 0x08	; 8
    fa02:	0e 94 1f d7 	call	0x1ae3e	; 0x1ae3e <atof>
    fa06:	ab 01       	movw	r20, r22
    fa08:	bc 01       	movw	r22, r24
    fa0a:	81 2f       	mov	r24, r17
    fa0c:	0e 94 cb 8e 	call	0x11d96	; 0x11d96 <thermostat_ring_pid_set_ki(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    fa10:	6d eb       	ldi	r22, 0xBD	; 189
    fa12:	77 e0       	ldi	r23, 0x07	; 7
    fa14:	c7 01       	movw	r24, r14
    fa16:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fa1a:	89 2b       	or	r24, r25
    fa1c:	49 f4       	brne	.+18     	; 0xfa30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914 (discriminator 2)
    fa1e:	80 ee       	ldi	r24, 0xE0	; 224
    fa20:	98 e0       	ldi	r25, 0x08	; 8
    fa22:	0e 94 1f d7 	call	0x1ae3e	; 0x1ae3e <atof>
    fa26:	ab 01       	movw	r20, r22
    fa28:	bc 01       	movw	r22, r24
    fa2a:	81 2f       	mov	r24, r17
    fa2c:	0e 94 de 8e 	call	0x11dbc	; 0x11dbc <thermostat_ring_pid_set_kd(unsigned char, float)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    fa30:	64 ec       	ldi	r22, 0xC4	; 196
    fa32:	77 e0       	ldi	r23, 0x07	; 7
    fa34:	c7 01       	movw	r24, r14
    fa36:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fa3a:	89 2b       	or	r24, r25
    fa3c:	41 f4       	brne	.+16     	; 0xfa4e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915 (discriminator 2)
    fa3e:	80 ee       	ldi	r24, 0xE0	; 224
    fa40:	98 e0       	ldi	r25, 0x08	; 8
    fa42:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    fa46:	68 2f       	mov	r22, r24
    fa48:	81 2f       	mov	r24, r17
    fa4a:	0e 94 f1 8e 	call	0x11de2	; 0x11de2 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    fa4e:	63 e3       	ldi	r22, 0x33	; 51
    fa50:	73 e0       	ldi	r23, 0x03	; 3
    fa52:	90 e0       	ldi	r25, 0x00	; 0
    fa54:	80 e0       	ldi	r24, 0x00	; 0
    fa56:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    fa5a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
      cnt++;
    fa5c:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    fa5e:	d7 ce       	rjmp	.-594    	; 0xf80e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
      cnt++;
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    fa60:	67 ed       	ldi	r22, 0xD7	; 215
    fa62:	75 e5       	ldi	r23, 0x55	; 85
    fa64:	c5 01       	movw	r24, r10
    fa66:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2928
  strcat(str1, device.nazev);
    fa6a:	6b e8       	ldi	r22, 0x8B	; 139
    fa6c:	70 e1       	ldi	r23, 0x10	; 16
    fa6e:	c5 01       	movw	r24, r10
    fa70:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
  strcat(str1, "/ring/clear");
    fa74:	63 e2       	ldi	r22, 0x23	; 35
    fa76:	77 e0       	ldi	r23, 0x07	; 7
    fa78:	c5 01       	movw	r24, r10
    fa7a:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2930
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fa7e:	f5 01       	movw	r30, r10
    fa80:	01 90       	ld	r0, Z+
    fa82:	00 20       	and	r0, r0
    fa84:	e9 f7       	brne	.-6      	; 0xfa80 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb6>
    fa86:	31 97       	sbiw	r30, 0x01	; 1
    fa88:	af 01       	movw	r20, r30
    fa8a:	4a 19       	sub	r20, r10
    fa8c:	5b 09       	sbc	r21, r11
    fa8e:	b4 01       	movw	r22, r8
    fa90:	c5 01       	movw	r24, r10
    fa92:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    fa96:	89 2b       	or	r24, r25
    fa98:	99 f4       	brne	.+38     	; 0xfac0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2932
  {
    mqtt_process_message++;
    fa9a:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fa9e:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    faa2:	01 96       	adiw	r24, 0x01	; 1
    faa4:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    faa8:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
    id = atoi(my_payload);
    faac:	80 ee       	ldi	r24, 0xE0	; 224
    faae:	98 e0       	ldi	r25, 0x08	; 8
    fab0:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    fab4:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2934
    if (id < MAX_THERMOSTAT)
    fab6:	85 30       	cpi	r24, 0x05	; 5
    fab8:	08 f0       	brcs	.+2      	; 0xfabc <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
    faba:	76 c0       	rjmp	.+236    	; 0xfba8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
    {
      thermostat_ring_clear(id);
    fabc:	0e 94 74 91 	call	0x122e8	; 0x122e8 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2947
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    fac0:	67 ed       	ldi	r22, 0xD7	; 215
    fac2:	75 e5       	ldi	r23, 0x55	; 85
    fac4:	c5 01       	movw	r24, r10
    fac6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2948
  strcat(str1, device.nazev);
    faca:	6b e8       	ldi	r22, 0x8B	; 139
    facc:	70 e1       	ldi	r23, 0x10	; 16
    face:	c5 01       	movw	r24, r10
    fad0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2949
  strcat(str1, "/network/get/config");
    fad4:	61 e4       	ldi	r22, 0x41	; 65
    fad6:	77 e0       	ldi	r23, 0x07	; 7
    fad8:	c5 01       	movw	r24, r10
    fada:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fade:	f5 01       	movw	r30, r10
    fae0:	01 90       	ld	r0, Z+
    fae2:	00 20       	and	r0, r0
    fae4:	e9 f7       	brne	.-6      	; 0xfae0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1016>
    fae6:	31 97       	sbiw	r30, 0x01	; 1
    fae8:	af 01       	movw	r20, r30
    faea:	4a 19       	sub	r20, r10
    faec:	5b 09       	sbc	r21, r11
    faee:	b4 01       	movw	r22, r8
    faf0:	c5 01       	movw	r24, r10
    faf2:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    faf6:	89 2b       	or	r24, r25
    faf8:	69 f4       	brne	.+26     	; 0xfb14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x104a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2952
  {
    mqtt_process_message++;
    fafa:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fafe:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fb02:	01 96       	adiw	r24, 0x01	; 1
    fb04:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fb08:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2953
    send_network_config(&mqtt_client);
    fb0c:	8f e8       	ldi	r24, 0x8F	; 143
    fb0e:	9d e0       	ldi	r25, 0x0D	; 13
    fb10:	0e 94 25 84 	call	0x1084a	; 0x1084a <send_network_config(PubSubClient*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2967
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    fb14:	67 ed       	ldi	r22, 0xD7	; 215
    fb16:	75 e5       	ldi	r23, 0x55	; 85
    fb18:	c5 01       	movw	r24, r10
    fb1a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2968
  strcat(str1, device.nazev);
    fb1e:	6b e8       	ldi	r22, 0x8B	; 139
    fb20:	70 e1       	ldi	r23, 0x10	; 16
    fb22:	c5 01       	movw	r24, r10
    fb24:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
  strcat(str1, "/network/set/");
    fb28:	65 e5       	ldi	r22, 0x55	; 85
    fb2a:	77 e0       	ldi	r23, 0x07	; 7
    fb2c:	c5 01       	movw	r24, r10
    fb2e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fb32:	f5 01       	movw	r30, r10
    fb34:	01 90       	ld	r0, Z+
    fb36:	00 20       	and	r0, r0
    fb38:	e9 f7       	brne	.-6      	; 0xfb34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x106a>
    fb3a:	31 97       	sbiw	r30, 0x01	; 1
    fb3c:	af 01       	movw	r20, r30
    fb3e:	4a 19       	sub	r20, r10
    fb40:	5b 09       	sbc	r21, r11
    fb42:	b4 01       	movw	r22, r8
    fb44:	c5 01       	movw	r24, r10
    fb46:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    fb4a:	89 2b       	or	r24, r25
    fb4c:	09 f0       	breq	.+2      	; 0xfb50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    fb4e:	44 c0       	rjmp	.+136    	; 0xfbd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2972
  {
    mqtt_process_message++;
    fb50:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fb54:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fb58:	01 96       	adiw	r24, 0x01	; 1
    fb5a:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fb5e:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fb62:	f5 01       	movw	r30, r10
    fb64:	01 90       	ld	r0, Z+
    fb66:	00 20       	and	r0, r0
    fb68:	e9 f7       	brne	.-6      	; 0xfb64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x109a>
    fb6a:	31 97       	sbiw	r30, 0x01	; 1
    fb6c:	ea 19       	sub	r30, r10
    fb6e:	fb 09       	sbc	r31, r11
    fb70:	9e 2f       	mov	r25, r30
    fb72:	4e 2f       	mov	r20, r30
    fb74:	84 2f       	mov	r24, r20
    fb76:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974 (discriminator 3)
    fb78:	24 2f       	mov	r18, r20
    fb7a:	30 e0       	ldi	r19, 0x00	; 0
    fb7c:	d4 01       	movw	r26, r8
    fb7e:	0d 90       	ld	r0, X+
    fb80:	00 20       	and	r0, r0
    fb82:	e9 f7       	brne	.-6      	; 0xfb7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x10b4>
    fb84:	11 97       	sbiw	r26, 0x01	; 1
    fb86:	a8 19       	sub	r26, r8
    fb88:	b9 09       	sbc	r27, r9
    fb8a:	2a 17       	cp	r18, r26
    fb8c:	3b 07       	cpc	r19, r27
    fb8e:	98 f4       	brcc	.+38     	; 0xfbb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976 (discriminator 2)
    {
      str1[cnt] = topic[f];
    fb90:	d5 01       	movw	r26, r10
    fb92:	a8 0f       	add	r26, r24
    fb94:	b1 1d       	adc	r27, r1
    fb96:	28 0d       	add	r18, r8
    fb98:	39 1d       	adc	r19, r9
    fb9a:	f9 01       	movw	r30, r18
    fb9c:	80 81       	ld	r24, Z
    fb9e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977 (discriminator 2)
      str1[cnt + 1] = 0;
    fba0:	11 96       	adiw	r26, 0x01	; 1
    fba2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974 (discriminator 2)
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fba4:	4f 5f       	subi	r20, 0xFF	; 255
    fba6:	e6 cf       	rjmp	.-52     	; 0xfb74 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    fba8:	6f e2       	ldi	r22, 0x2F	; 47
    fbaa:	77 e0       	ldi	r23, 0x07	; 7
    fbac:	8f e8       	ldi	r24, 0x8F	; 143
    fbae:	9d e0       	ldi	r25, 0x0D	; 13
    fbb0:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
    fbb4:	85 cf       	rjmp	.-246    	; 0xfac0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    fbb6:	60 ee       	ldi	r22, 0xE0	; 224
    fbb8:	78 e0       	ldi	r23, 0x08	; 8
    fbba:	c5 01       	movw	r24, r10
    fbbc:	0e 94 c1 81 	call	0x10382	; 0x10382 <setting_network(char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
    if (cnt == 1)
    fbc0:	81 30       	cpi	r24, 0x01	; 1
    fbc2:	41 f4       	brne	.+16     	; 0xfbd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2983
    {
      save_setup_network();
    fbc4:	0e 94 e1 80 	call	0x101c2	; 0x101c2 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    fbc8:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <selftest_data>
    fbcc:	80 68       	ori	r24, 0x80	; 128
    fbce:	80 93 4e 0a 	sts	0x0A4E, r24	; 0x800a4e <selftest_data>
    fbd2:	02 c0       	rjmp	.+4      	; 0xfbd8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x110e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    fbd4:	82 30       	cpi	r24, 0x02	; 2
    fbd6:	c1 f3       	breq	.-16     	; 0xfbc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    fbd8:	67 ed       	ldi	r22, 0xD7	; 215
    fbda:	75 e5       	ldi	r23, 0x55	; 85
    fbdc:	c5 01       	movw	r24, r10
    fbde:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2994
  strcat(str1, device.nazev);
    fbe2:	6b e8       	ldi	r22, 0x8B	; 139
    fbe4:	70 e1       	ldi	r23, 0x10	; 16
    fbe6:	c5 01       	movw	r24, r10
    fbe8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
  strcat(str1, "/light/set/");
    fbec:	63 e6       	ldi	r22, 0x63	; 99
    fbee:	77 e0       	ldi	r23, 0x07	; 7
    fbf0:	c5 01       	movw	r24, r10
    fbf2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fbf6:	f5 01       	movw	r30, r10
    fbf8:	01 90       	ld	r0, Z+
    fbfa:	00 20       	and	r0, r0
    fbfc:	e9 f7       	brne	.-6      	; 0xfbf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x112e>
    fbfe:	31 97       	sbiw	r30, 0x01	; 1
    fc00:	af 01       	movw	r20, r30
    fc02:	4a 19       	sub	r20, r10
    fc04:	5b 09       	sbc	r21, r11
    fc06:	b4 01       	movw	r22, r8
    fc08:	c5 01       	movw	r24, r10
    fc0a:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    fc0e:	89 2b       	or	r24, r25
    fc10:	09 f0       	breq	.+2      	; 0xfc14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x114a>
    fc12:	41 c0       	rjmp	.+130    	; 0xfc96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
  {
    mqtt_process_message++;
    fc14:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fc18:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fc1c:	01 96       	adiw	r24, 0x01	; 1
    fc1e:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fc22:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3001
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fc26:	f5 01       	movw	r30, r10
    fc28:	01 90       	ld	r0, Z+
    fc2a:	00 20       	and	r0, r0
    fc2c:	e9 f7       	brne	.-6      	; 0xfc28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x115e>
    fc2e:	31 97       	sbiw	r30, 0x01	; 1
    fc30:	ea 19       	sub	r30, r10
    fc32:	fb 09       	sbc	r31, r11
    fc34:	9e 2f       	mov	r25, r30
    fc36:	4e 2f       	mov	r20, r30
    fc38:	84 2f       	mov	r24, r20
    fc3a:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3001 (discriminator 3)
    fc3c:	24 2f       	mov	r18, r20
    fc3e:	30 e0       	ldi	r19, 0x00	; 0
    fc40:	d4 01       	movw	r26, r8
    fc42:	0d 90       	ld	r0, X+
    fc44:	00 20       	and	r0, r0
    fc46:	e9 f7       	brne	.-6      	; 0xfc42 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1178>
    fc48:	11 97       	sbiw	r26, 0x01	; 1
    fc4a:	a8 19       	sub	r26, r8
    fc4c:	b9 09       	sbc	r27, r9
    fc4e:	2a 17       	cp	r18, r26
    fc50:	3b 07       	cpc	r19, r27
    fc52:	60 f4       	brcc	.+24     	; 0xfc6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003 (discriminator 2)
    {
      str1[cnt] = topic[f];
    fc54:	d5 01       	movw	r26, r10
    fc56:	a8 0f       	add	r26, r24
    fc58:	b1 1d       	adc	r27, r1
    fc5a:	28 0d       	add	r18, r8
    fc5c:	39 1d       	adc	r19, r9
    fc5e:	f9 01       	movw	r30, r18
    fc60:	80 81       	ld	r24, Z
    fc62:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3004 (discriminator 2)
      str1[cnt + 1] = 0;
    fc64:	11 96       	adiw	r26, 0x01	; 1
    fc66:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3001 (discriminator 2)
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fc68:	4f 5f       	subi	r20, 0xFF	; 255
    fc6a:	e6 cf       	rjmp	.-52     	; 0xfc38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x116e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3008
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fc6c:	63 e3       	ldi	r22, 0x33	; 51
    fc6e:	73 e0       	ldi	r23, 0x03	; 3
    fc70:	c5 01       	movw	r24, r10
    fc72:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fc76:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
    pch = strtok (str1, "/");
    while (pch != NULL)
    fc78:	00 97       	sbiw	r24, 0x00	; 0
    fc7a:	69 f0       	breq	.+26     	; 0xfc96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011
    {
      if (cnt == 0) id = atoi(pch);
    fc7c:	01 11       	cpse	r16, r1
    fc7e:	03 c0       	rjmp	.+6      	; 0xfc86 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3011 (discriminator 1)
    fc80:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    fc84:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3014
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    fc86:	63 e3       	ldi	r22, 0x33	; 51
    fc88:	73 e0       	ldi	r23, 0x03	; 3
    fc8a:	90 e0       	ldi	r25, 0x00	; 0
    fc8c:	80 e0       	ldi	r24, 0x00	; 0
    fc8e:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
      cnt++;
    fc92:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    fc94:	f1 cf       	rjmp	.-30     	; 0xfc78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
      cnt++;
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    fc96:	6d ea       	ldi	r22, 0xAD	; 173
    fc98:	75 e5       	ldi	r23, 0x55	; 85
    fc9a:	c5 01       	movw	r24, r10
    fc9c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3021
  strcat(str1, "output/");
    fca0:	65 ed       	ldi	r22, 0xD5	; 213
    fca2:	73 e0       	ldi	r23, 0x03	; 3
    fca4:	c5 01       	movw	r24, r10
    fca6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fcaa:	f5 01       	movw	r30, r10
    fcac:	01 90       	ld	r0, Z+
    fcae:	00 20       	and	r0, r0
    fcb0:	e9 f7       	brne	.-6      	; 0xfcac <mqtt_callback(char*, unsigned char*, unsigned int)+0x11e2>
    fcb2:	31 97       	sbiw	r30, 0x01	; 1
    fcb4:	af 01       	movw	r20, r30
    fcb6:	4a 19       	sub	r20, r10
    fcb8:	5b 09       	sbc	r21, r11
    fcba:	b4 01       	movw	r22, r8
    fcbc:	c5 01       	movw	r24, r10
    fcbe:	0e 94 8f d7 	call	0x1af1e	; 0x1af1e <strncmp>
    fcc2:	89 2b       	or	r24, r25
    fcc4:	09 f0       	breq	.+2      	; 0xfcc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fe>
    fcc6:	6d c0       	rjmp	.+218    	; 0xfda2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
  {
    mqtt_process_message++;
    fcc8:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fccc:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fcd0:	01 96       	adiw	r24, 0x01	; 1
    fcd2:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fcd6:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fcda:	f5 01       	movw	r30, r10
    fcdc:	01 90       	ld	r0, Z+
    fcde:	00 20       	and	r0, r0
    fce0:	e9 f7       	brne	.-6      	; 0xfcdc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1212>
    fce2:	31 97       	sbiw	r30, 0x01	; 1
    fce4:	ea 19       	sub	r30, r10
    fce6:	fb 09       	sbc	r31, r11
    fce8:	9e 2f       	mov	r25, r30
    fcea:	4e 2f       	mov	r20, r30
    fcec:	84 2f       	mov	r24, r20
    fcee:	89 1b       	sub	r24, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026 (discriminator 3)
    fcf0:	24 2f       	mov	r18, r20
    fcf2:	30 e0       	ldi	r19, 0x00	; 0
    fcf4:	d4 01       	movw	r26, r8
    fcf6:	0d 90       	ld	r0, X+
    fcf8:	00 20       	and	r0, r0
    fcfa:	e9 f7       	brne	.-6      	; 0xfcf6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x122c>
    fcfc:	11 97       	sbiw	r26, 0x01	; 1
    fcfe:	a8 19       	sub	r26, r8
    fd00:	b9 09       	sbc	r27, r9
    fd02:	2a 17       	cp	r18, r26
    fd04:	3b 07       	cpc	r19, r27
    fd06:	60 f4       	brcc	.+24     	; 0xfd20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1256>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028 (discriminator 2)
    {
      str1[cnt] = topic[f];
    fd08:	d5 01       	movw	r26, r10
    fd0a:	a8 0f       	add	r26, r24
    fd0c:	b1 1d       	adc	r27, r1
    fd0e:	28 0d       	add	r18, r8
    fd10:	39 1d       	adc	r19, r9
    fd12:	f9 01       	movw	r30, r18
    fd14:	80 81       	ld	r24, Z
    fd16:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3029 (discriminator 2)
      str1[cnt + 1] = 0;
    fd18:	11 96       	adiw	r26, 0x01	; 1
    fd1a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026 (discriminator 2)
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fd1c:	4f 5f       	subi	r20, 0xFF	; 255
    fd1e:	e6 cf       	rjmp	.-52     	; 0xfcec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1222>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3033
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fd20:	63 e3       	ldi	r22, 0x33	; 51
    fd22:	73 e0       	ldi	r23, 0x03	; 3
    fd24:	c5 01       	movw	r24, r10
    fd26:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    fd2a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3032
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fd2c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3034
    pch = strtok (str1, "/");
    while (pch != NULL)
    fd2e:	e1 14       	cp	r14, r1
    fd30:	f1 04       	cpc	r15, r1
    fd32:	b9 f1       	breq	.+110    	; 0xfda2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
    {
      if (cnt == 0) id = atoi(pch);
    fd34:	01 11       	cpse	r16, r1
    fd36:	0d c0       	rjmp	.+26     	; 0xfd52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1288>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036 (discriminator 1)
    fd38:	c7 01       	movw	r24, r14
    fd3a:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    fd3e:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    fd40:	63 e3       	ldi	r22, 0x33	; 51
    fd42:	73 e0       	ldi	r23, 0x03	; 3
    fd44:	90 e0       	ldi	r25, 0x00	; 0
    fd46:	80 e0       	ldi	r24, 0x00	; 0
    fd48:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
    fd4c:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
      cnt++;
    fd4e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3034
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    fd50:	ee cf       	rjmp	.-36     	; 0xfd2e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1264>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3037
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    fd52:	01 30       	cpi	r16, 0x01	; 1
    fd54:	a9 f7       	brne	.-22     	; 0xfd40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    fd56:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
          if (thermostat_ring_get_output(idx) == id)
    fd58:	8d 2d       	mov	r24, r13
    fd5a:	0e 94 18 8d 	call	0x11a30	; 0x11a30 <thermostat_ring_get_output(unsigned char)>
    fd5e:	c8 2e       	mov	r12, r24
    fd60:	81 13       	cpse	r24, r17
    fd62:	1a c0       	rjmp	.+52     	; 0xfd98 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    fd64:	6b ef       	ldi	r22, 0xFB	; 251
    fd66:	73 e0       	ldi	r23, 0x03	; 3
    fd68:	c7 01       	movw	r24, r14
    fd6a:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fd6e:	89 2b       	or	r24, r25
    fd70:	29 f0       	breq	.+10     	; 0xfd7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x12b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042 (discriminator 1)
    fd72:	e1 2f       	mov	r30, r17
    fd74:	f0 e0       	ldi	r31, 0x00	; 0
    fd76:	e1 5b       	subi	r30, 0xB1	; 177
    fd78:	f5 4f       	sbci	r31, 0xF5	; 245
    fd7a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    fd7c:	6e ed       	ldi	r22, 0xDE	; 222
    fd7e:	73 e0       	ldi	r23, 0x03	; 3
    fd80:	c7 01       	movw	r24, r14
    fd82:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fd86:	89 2b       	or	r24, r25
    fd88:	29 f0       	breq	.+10     	; 0xfd94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043 (discriminator 1)
    fd8a:	e1 2f       	mov	r30, r17
    fd8c:	f0 e0       	ldi	r31, 0x00	; 0
    fd8e:	e1 5b       	subi	r30, 0xB1	; 177
    fd90:	f5 4f       	sbci	r31, 0xF5	; 245
    fd92:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    fd94:	1c 2d       	mov	r17, r12
    fd96:	d4 cf       	rjmp	.-88     	; 0xfd40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039 (discriminator 2)
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    fd98:	d3 94       	inc	r13
    fd9a:	f5 e0       	ldi	r31, 0x05	; 5
    fd9c:	df 12       	cpse	r13, r31
    fd9e:	dc cf       	rjmp	.-72     	; 0xfd58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128e>
    fda0:	cf cf       	rjmp	.-98     	; 0xfd40 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    fda2:	67 ed       	ldi	r22, 0xD7	; 215
    fda4:	75 e5       	ldi	r23, 0x55	; 85
    fda6:	c5 01       	movw	r24, r10
    fda8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
  strcat(str1, device.nazev);
    fdac:	6b e8       	ldi	r22, 0x8B	; 139
    fdae:	70 e1       	ldi	r23, 0x10	; 16
    fdb0:	c5 01       	movw	r24, r10
    fdb2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
  strcat(str1, "/reload");
    fdb6:	6f e6       	ldi	r22, 0x6F	; 111
    fdb8:	77 e0       	ldi	r23, 0x07	; 7
    fdba:	c5 01       	movw	r24, r10
    fdbc:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
  if (strcmp(str1, topic) == 0)
    fdc0:	b4 01       	movw	r22, r8
    fdc2:	c5 01       	movw	r24, r10
    fdc4:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fdc8:	89 2b       	or	r24, r25
    fdca:	a1 f4       	brne	.+40     	; 0xfdf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x132a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
  {
    mqtt_process_message++;
    fdcc:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fdd0:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fdd4:	01 96       	adiw	r24, 0x01	; 1
    fdd6:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fdda:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
    log_error(&mqtt_client, "reload ..... ");
    fdde:	67 e7       	ldi	r22, 0x77	; 119
    fde0:	77 e0       	ldi	r23, 0x07	; 7
    fde2:	8f e8       	ldi	r24, 0x8F	; 143
    fde4:	9d e0       	ldi	r25, 0x0D	; 13
    fde6:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
    resetFunc();
    fdea:	e0 91 60 09 	lds	r30, 0x0960	; 0x800960 <resetFunc>
    fdee:	f0 91 61 09 	lds	r31, 0x0961	; 0x800961 <resetFunc+0x1>
    fdf2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3064
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    fdf4:	67 ed       	ldi	r22, 0xD7	; 215
    fdf6:	75 e5       	ldi	r23, 0x55	; 85
    fdf8:	c5 01       	movw	r24, r10
    fdfa:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3065
  strcat(str1, device.nazev);
    fdfe:	6b e8       	ldi	r22, 0x8B	; 139
    fe00:	70 e1       	ldi	r23, 0x10	; 16
    fe02:	c5 01       	movw	r24, r10
    fe04:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
  strcat(str1, "/bootloader");
    fe08:	65 e8       	ldi	r22, 0x85	; 133
    fe0a:	77 e0       	ldi	r23, 0x07	; 7
    fe0c:	c5 01       	movw	r24, r10
    fe0e:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3067
  if (strcmp(str1, topic) == 0)
    fe12:	b4 01       	movw	r22, r8
    fe14:	c5 01       	movw	r24, r10
    fe16:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fe1a:	89 2b       	or	r24, r25
    fe1c:	f9 f4       	brne	.+62     	; 0xfe5c <__DATA_REGION_LENGTH__+0x5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
  {
    mqtt_process_message++;
    fe1e:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fe22:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fe26:	01 96       	adiw	r24, 0x01	; 1
    fe28:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fe2c:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3070
    log_error(&mqtt_client, "bootloader ..... ");
    fe30:	61 e9       	ldi	r22, 0x91	; 145
    fe32:	77 e0       	ldi	r23, 0x07	; 7
    fe34:	8f e8       	ldi	r24, 0x8F	; 143
    fe36:	9d e0       	ldi	r25, 0x0D	; 13
    fe38:	0e 94 ef 86 	call	0x10dde	; 0x10dde <log_error(PubSubClient*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3071
    EEPROM.write(bootloader_tag, 255);
    fe3c:	6f ef       	ldi	r22, 0xFF	; 255
    fe3e:	90 e0       	ldi	r25, 0x00	; 0
    fe40:	80 e0       	ldi	r24, 0x00	; 0
    fe42:	0e 94 b0 38 	call	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    fe46:	88 e1       	ldi	r24, 0x18	; 24
    fe48:	9e e0       	ldi	r25, 0x0E	; 14
    fe4a:	0f b6       	in	r0, 0x3f	; 63
    fe4c:	f8 94       	cli
    fe4e:	a8 95       	wdr
    fe50:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    fe54:	0f be       	out	0x3f, r0	; 63
    fe56:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    fe5a:	ff cf       	rjmp	.-2      	; 0xfe5a <__DATA_REGION_LENGTH__+0x5a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    fe5c:	67 ed       	ldi	r22, 0xD7	; 215
    fe5e:	75 e5       	ldi	r23, 0x55	; 85
    fe60:	c5 01       	movw	r24, r10
    fe62:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
  strcat(str1, device.nazev);
    fe66:	6b e8       	ldi	r22, 0x8B	; 139
    fe68:	70 e1       	ldi	r23, 0x10	; 16
    fe6a:	c5 01       	movw	r24, r10
    fe6c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
  strcat(str1, "/default");
    fe70:	64 ef       	ldi	r22, 0xF4	; 244
    fe72:	76 e0       	ldi	r23, 0x06	; 6
    fe74:	c5 01       	movw	r24, r10
    fe76:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3080
  if (strcmp(str1, topic) == 0)
    fe7a:	b4 01       	movw	r22, r8
    fe7c:	c5 01       	movw	r24, r10
    fe7e:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
    fe82:	89 2b       	or	r24, r25
    fe84:	91 f4       	brne	.+36     	; 0xfeaa <__DATA_REGION_LENGTH__+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3082
  {
    mqtt_process_message++;
    fe86:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
    fe8a:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
    fe8e:	01 96       	adiw	r24, 0x01	; 1
    fe90:	90 93 6e 10 	sts	0x106E, r25	; 0x80106e <mqtt_process_message+0x1>
    fe94:	80 93 6d 10 	sts	0x106D, r24	; 0x80106d <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    fe98:	80 ee       	ldi	r24, 0xE0	; 224
    fe9a:	98 e0       	ldi	r25, 0x08	; 8
    fe9c:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
    fea0:	68 2f       	mov	r22, r24
    fea2:	8a e5       	ldi	r24, 0x5A	; 90
    fea4:	90 e0       	ldi	r25, 0x00	; 0
    fea6:	0e 94 b0 38 	call	0x7160	; 0x7160 <EEPROMClass::write(int, unsigned char) [clone .isra.8]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3087
  }

}
    feaa:	c8 53       	subi	r28, 0x38	; 56
    feac:	df 4f       	sbci	r29, 0xFF	; 255
    feae:	0f b6       	in	r0, 0x3f	; 63
    feb0:	f8 94       	cli
    feb2:	de bf       	out	0x3e, r29	; 62
    feb4:	0f be       	out	0x3f, r0	; 63
    feb6:	cd bf       	out	0x3d, r28	; 61
    feb8:	df 91       	pop	r29
    feba:	cf 91       	pop	r28
    febc:	1f 91       	pop	r17
    febe:	0f 91       	pop	r16
    fec0:	ff 90       	pop	r15
    fec2:	ef 90       	pop	r14
    fec4:	df 90       	pop	r13
    fec6:	cf 90       	pop	r12
    fec8:	bf 90       	pop	r11
    feca:	af 90       	pop	r10
    fecc:	9f 90       	pop	r9
    fece:	8f 90       	pop	r8
    fed0:	7f 90       	pop	r7
    fed2:	6f 90       	pop	r6
    fed4:	5f 90       	pop	r5
    fed6:	4f 90       	pop	r4
    fed8:	3f 90       	pop	r3
    feda:	2f 90       	pop	r2
    fedc:	08 95       	ret

0000fede <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)>:
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5607
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);

  }
}
    fede:	cf 92       	push	r12
    fee0:	ef 92       	push	r14
    fee2:	0f 93       	push	r16
    fee4:	cf 93       	push	r28
    fee6:	df 93       	push	r29
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    fee8:	00 e0       	ldi	r16, 0x00	; 0
    feea:	20 e0       	ldi	r18, 0x00	; 0
    feec:	40 e0       	ldi	r20, 0x00	; 0
    feee:	60 e0       	ldi	r22, 0x00	; 0
    fef0:	83 ee       	ldi	r24, 0xE3	; 227
    fef2:	9f e0       	ldi	r25, 0x0F	; 15
    fef4:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:33
#include "NetworkSettingsMenu.h"
#include "pidDialogMenu.h"
#include "OneWireMenu.h"


SoftSPIB swSPI(STORAGE_MOSI, STORAGE_MISO, STORAGE_CLK);
    fef8:	29 e1       	ldi	r18, 0x19	; 25
    fefa:	4a e1       	ldi	r20, 0x1A	; 26
    fefc:	68 e1       	ldi	r22, 0x18	; 24
    fefe:	8c ed       	ldi	r24, 0xDC	; 220
    ff00:	9f e0       	ldi	r25, 0x0F	; 15
    ff02:	0e 94 22 a7 	call	0x14e44	; 0x14e44 <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:37


RTC_DS1307 rtc;
DateTime now;
    ff06:	40 e0       	ldi	r20, 0x00	; 0
    ff08:	50 e0       	ldi	r21, 0x00	; 0
    ff0a:	ba 01       	movw	r22, r20
    ff0c:	84 ed       	ldi	r24, 0xD4	; 212
    ff0e:	9f e0       	ldi	r25, 0x0F	; 15
    ff10:	0e 94 77 c1 	call	0x182ee	; 0x182ee <DateTime::DateTime(unsigned long)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:39

EthernetClient ethClient;
    ff14:	87 ec       	ldi	r24, 0xC7	; 199
    ff16:	9f e0       	ldi	r25, 0x0F	; 15
    ff18:	0e 94 60 af 	call	0x15ec0	; 0x15ec0 <EthernetClient::EthernetClient()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:40
EthernetUDP udpClient;
    ff1c:	8c ea       	ldi	r24, 0xAC	; 172
    ff1e:	9f e0       	ldi	r25, 0x0F	; 15
    ff20:	0e 94 c3 b1 	call	0x16386	; 0x16386 <EthernetUDP::EthernetUDP()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:41
PubSubClient mqtt_client(ethClient);
    ff24:	67 ec       	ldi	r22, 0xC7	; 199
    ff26:	7f e0       	ldi	r23, 0x0F	; 15
    ff28:	8f e8       	ldi	r24, 0x8F	; 143
    ff2a:	9d e0       	ldi	r25, 0x0D	; 13
    ff2c:	0e 94 93 ba 	call	0x17526	; 0x17526 <PubSubClient::PubSubClient(Client&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:45



RF24 radio(NRF_CE, NRF_CS);
    ff30:	42 e0       	ldi	r20, 0x02	; 2
    ff32:	50 e0       	ldi	r21, 0x00	; 0
    ff34:	63 e0       	ldi	r22, 0x03	; 3
    ff36:	70 e0       	ldi	r23, 0x00	; 0
    ff38:	87 e7       	ldi	r24, 0x77	; 119
    ff3a:	9d e0       	ldi	r25, 0x0D	; 13
    ff3c:	0e 94 0f c1 	call	0x1821e	; 0x1821e <RF24::RF24(unsigned int, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:46
RF24Network network(radio);
    ff40:	67 e7       	ldi	r22, 0x77	; 119
    ff42:	7d e0       	ldi	r23, 0x0D	; 13
    ff44:	85 e0       	ldi	r24, 0x05	; 5
    ff46:	9c e0       	ldi	r25, 0x0C	; 12
    ff48:	0e 94 24 c1 	call	0x18248	; 0x18248 <RF24Network::RF24Network(RF24&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:47
RF24Mesh mesh(radio, network);
    ff4c:	45 e0       	ldi	r20, 0x05	; 5
    ff4e:	5c e0       	ldi	r21, 0x0C	; 12
    ff50:	67 e7       	ldi	r22, 0x77	; 119
    ff52:	7d e0       	ldi	r23, 0x0D	; 13
    ff54:	8d ee       	ldi	r24, 0xED	; 237
    ff56:	9b e0       	ldi	r25, 0x0B	; 11
    ff58:	0e 94 3e c1 	call	0x1827c	; 0x1827c <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:66
  void writeIntegerTemperatureRegister(uint8_t register_index, int16_t value);

public:

  Temperature_LM75_Derived(TwoWire *bus, uint8_t i2c_address, Attributes *attributes) {
    this->bus = bus;
    ff5c:	c0 ee       	ldi	r28, 0xE0	; 224
    ff5e:	db e0       	ldi	r29, 0x0B	; 11
    ff60:	86 eb       	ldi	r24, 0xB6	; 182
    ff62:	92 e1       	ldi	r25, 0x12	; 18
    ff64:	99 83       	std	Y+1, r25	; 0x01
    ff66:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:67
    this->i2c_address = i2c_address;
    ff68:	88 e4       	ldi	r24, 0x48	; 72
    ff6a:	8a 83       	std	Y+2, r24	; 0x02
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:68
    this->attributes = attributes;
    ff6c:	ee e7       	ldi	r30, 0x7E	; 126
    ff6e:	f2 e0       	ldi	r31, 0x02	; 2
    ff70:	fc 87       	std	Y+12, r31	; 0x0c
    ff72:	eb 87       	std	Y+11, r30	; 0x0b
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:70

    setInternalResolution(attributes->default_temperature_resolution);
    ff74:	91 81       	ldd	r25, Z+1	; 0x01
_ZN24Temperature_LM75_Derived21setInternalResolutionEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:51
  Attributes *attributes;

  // Set the internal resolution of the temperature sensor, which affects
  // conversions and which bits are discarded.
  void setInternalResolution(uint8_t resolution) {
    this->resolution = resolution;
    ff76:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:52
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
    ff78:	80 81       	ld	r24, Z
    ff7a:	89 1b       	sub	r24, r25
    ff7c:	99 0b       	sbc	r25, r25
    ff7e:	61 e0       	ldi	r22, 0x01	; 1
    ff80:	70 e0       	ldi	r23, 0x00	; 0
    ff82:	9b 01       	movw	r18, r22
    ff84:	02 c0       	rjmp	.+4      	; 0xff8a <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xac>
    ff86:	22 0f       	add	r18, r18
    ff88:	33 1f       	adc	r19, r19
    ff8a:	8a 95       	dec	r24
    ff8c:	e2 f7       	brpl	.-8      	; 0xff86 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xa8>
    ff8e:	c9 01       	movw	r24, r18
    ff90:	91 95       	neg	r25
    ff92:	81 95       	neg	r24
    ff94:	91 09       	sbc	r25, r1
    ff96:	9d 83       	std	Y+5, r25	; 0x05
    ff98:	8c 83       	std	Y+4, r24	; 0x04
_ZN24Temperature_LM75_DerivedC4EP7TwoWirehPNS_10AttributesE():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:71
    this->bus = bus;
    this->i2c_address = i2c_address;
    this->attributes = attributes;

    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
    ff9a:	82 81       	ldd	r24, Z+2	; 0x02
_ZN24Temperature_LM75_Derived31setInternalTemperatureFracWidthEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:56
    this->resolution = resolution;
    this->resolution_mask = ~(uint16_t)((1 << (attributes->temperature_width - resolution)) - 1);
  }

  void setInternalTemperatureFracWidth(uint8_t temperature_frac_width) {
    this->temperature_frac_width = temperature_frac_width;
    ff9c:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:57
    temperature_frac_factor = 1.0 / (float)(1 << temperature_frac_width);
    ff9e:	02 c0       	rjmp	.+4      	; 0xffa4 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xc6>
    ffa0:	66 0f       	add	r22, r22
    ffa2:	77 1f       	adc	r23, r23
    ffa4:	8a 95       	dec	r24
    ffa6:	e2 f7       	brpl	.-8      	; 0xffa0 <_GLOBAL__sub_I__Z11serial_putccP6(float, int, long,...)+0xc2>
    ffa8:	07 2e       	mov	r0, r23
    ffaa:	00 0c       	add	r0, r0
    ffac:	88 0b       	sbc	r24, r24
    ffae:	99 0b       	sbc	r25, r25
    ffb0:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
    ffb4:	9b 01       	movw	r18, r22
    ffb6:	ac 01       	movw	r20, r24
    ffb8:	60 e0       	ldi	r22, 0x00	; 0
    ffba:	70 e0       	ldi	r23, 0x00	; 0
    ffbc:	80 e8       	ldi	r24, 0x80	; 128
    ffbe:	9f e3       	ldi	r25, 0x3F	; 63
    ffc0:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
    ffc4:	6f 83       	std	Y+7, r22	; 0x07
    ffc6:	78 87       	std	Y+8, r23	; 0x08
    ffc8:	89 87       	std	Y+9, r24	; 0x09
    ffca:	9a 87       	std	Y+10, r25	; 0x0a
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:51
Generic_LM75_11Bit lm75_temp;


LCDWIKI_KBV my_lcd(ST7796S, 33, 35, 36, 32, 34); //model,cs,cd,wr,rd,reset
    ffcc:	82 e2       	ldi	r24, 0x22	; 34
    ffce:	c8 2e       	mov	r12, r24
    ffd0:	90 e2       	ldi	r25, 0x20	; 32
    ffd2:	e9 2e       	mov	r14, r25
    ffd4:	04 e2       	ldi	r16, 0x24	; 36
    ffd6:	23 e2       	ldi	r18, 0x23	; 35
    ffd8:	41 e2       	ldi	r20, 0x21	; 33
    ffda:	6a e0       	ldi	r22, 0x0A	; 10
    ffdc:	70 e0       	ldi	r23, 0x00	; 0
    ffde:	81 ea       	ldi	r24, 0xA1	; 161
    ffe0:	9b e0       	ldi	r25, 0x0B	; 11
    ffe2:	0e 94 f2 96 	call	0x12de4	; 0x12de4 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:52
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7); //tcs,tclk,tdout,tdin,tirq
    ffe6:	27 e0       	ldi	r18, 0x07	; 7
    ffe8:	e2 2e       	mov	r14, r18
    ffea:	0e e1       	ldi	r16, 0x1E	; 30
    ffec:	2d e1       	ldi	r18, 0x1D	; 29
    ffee:	4b e1       	ldi	r20, 0x1B	; 27
    fff0:	6c e1       	ldi	r22, 0x1C	; 28
    fff2:	83 e8       	ldi	r24, 0x83	; 131
    fff4:	9b e0       	ldi	r25, 0x0B	; 11
    fff6:	0e 94 1d a4 	call	0x1483a	; 0x1483a <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char)>
_ZN11ArduinoJson18StaticJsonDocumentILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/StaticJsonDocument.hpp:18
template <size_t CAPACITY>
class StaticJsonDocument {
 public:
  uint8_t nestingLimit;

  StaticJsonDocument() : nestingLimit(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
    fffa:	e4 e7       	ldi	r30, 0x74	; 116
    fffc:	fa e0       	ldi	r31, 0x0A	; 10
    fffe:	8a e0       	ldi	r24, 0x0A	; 10
   10000:	80 83       	st	Z, r24
_ZN11ArduinoJson9Internals20StaticMemoryPoolBaseC4EPcj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:44
    StaticMemoryPoolBase* _parent;
    char* _start;
  };

  StaticMemoryPoolBase(char* memoryPool, size_t capa)
      : _buffer(memoryPool), _capacity(capa), _size(0) {}
   10002:	8d e7       	ldi	r24, 0x7D	; 125
   10004:	9a e0       	ldi	r25, 0x0A	; 10
   10006:	94 83       	std	Z+4, r25	; 0x04
   10008:	83 83       	std	Z+3, r24	; 0x03
   1000a:	80 e0       	ldi	r24, 0x00	; 0
   1000c:	91 e0       	ldi	r25, 0x01	; 1
   1000e:	96 83       	std	Z+6, r25	; 0x06
   10010:	85 83       	std	Z+5, r24	; 0x05
   10012:	10 86       	std	Z+8, r1	; 0x08
   10014:	17 82       	std	Z+7, r1	; 0x07
_ZN11ArduinoJson9Internals16StaticMemoryPoolILj256EEC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:115
class StaticMemoryPool : public StaticMemoryPoolBase {
  static const size_t ACTUAL_CAPACITY = Max<1, CAPACITY>::value;

 public:
  explicit StaticMemoryPool()
      : StaticMemoryPoolBase(_buffer, ACTUAL_CAPACITY) {}
   10016:	81 ed       	ldi	r24, 0xD1	; 209
   10018:	97 e0       	ldi	r25, 0x07	; 7
   1001a:	92 83       	std	Z+2, r25	; 0x02
   1001c:	81 83       	std	Z+1, r24	; 0x01
_ZN11ArduinoJson9Internals15JsonVariantDataC4Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
   1001e:	10 92 7e 0b 	sts	0x0B7E, r1	; 0x800b7e <doc+0x10a>
   10022:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <doc+0x109>
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:56

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
   10026:	21 e0       	ldi	r18, 0x01	; 1
   10028:	30 e0       	ldi	r19, 0x00	; 0
   1002a:	46 e1       	ldi	r20, 0x16	; 22
   1002c:	6c ed       	ldi	r22, 0xDC	; 220
   1002e:	7f e0       	ldi	r23, 0x0F	; 15
   10030:	87 e6       	ldi	r24, 0x67	; 103
   10032:	9a e0       	ldi	r25, 0x0A	; 10
   10034:	0e 94 df a7 	call	0x14fbe	; 0x14fbe <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:57
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
   10038:	30 e0       	ldi	r19, 0x00	; 0
   1003a:	20 e0       	ldi	r18, 0x00	; 0
   1003c:	47 e1       	ldi	r20, 0x17	; 23
   1003e:	6c ed       	ldi	r22, 0xDC	; 220
   10040:	7f e0       	ldi	r23, 0x0F	; 15
   10042:	88 e5       	ldi	r24, 0x58	; 88
   10044:	9a e0       	ldi	r25, 0x0A	; 10
_GLOBAL__sub_I__Z11serial_putccP6__file():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5607
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);

  }
}
   10046:	df 91       	pop	r29
   10048:	cf 91       	pop	r28
   1004a:	0f 91       	pop	r16
   1004c:	ef 90       	pop	r14
   1004e:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:57
LCDWIKI_TOUCH my_touch(28, 27, 29, 30, 7); //tcs,tclk,tdout,tdin,tirq

StaticJsonDocument<256> doc;

SRAM_23LC SRAM(&swSPI, STORAGE_RAM_CS, SRAM_23LC1024);
EEPROM_CAT25 SROM(&swSPI, STORAGE_EEPROM_CS , CAT25M02);
   10050:	0c 94 10 a9 	jmp	0x15220	; 0x15220 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>

00010054 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
   10054:	cf 93       	push	r28
   10056:	c8 2f       	mov	r28, r24
_ZN14HardwareSerial5writeEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   10058:	68 2f       	mov	r22, r24
   1005a:	84 e9       	ldi	r24, 0x94	; 148
   1005c:	93 e1       	ldi	r25, 0x13	; 19
   1005e:	0e 94 83 ce 	call	0x19d06	; 0x19d06 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
   10062:	8c 2f       	mov	r24, r28
   10064:	cc 0f       	add	r28, r28
   10066:	99 0b       	sbc	r25, r25
   10068:	cf 91       	pop	r28
   1006a:	08 95       	ret

0001006c <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
}

PubSubClient * mqtt_get_public_mqtt_client(void)
{
  return pub_mqtt_client;
}
   1006c:	0c 94 68 df 	jmp	0x1bed0	; 0x1bed0 <eeprom_read_byte>

00010070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   10070:	0c 94 70 df 	jmp	0x1bee0	; 0x1bee0 <eeprom_write_byte>

00010074 <load_setup_network()>:
_Z18load_setup_networkv():
   10074:	ef 92       	push	r14
   10076:	ff 92       	push	r15
   10078:	0f 93       	push	r16
   1007a:	1f 93       	push	r17
   1007c:	cf 93       	push	r28
   1007e:	df 93       	push	r29
   10080:	05 e7       	ldi	r16, 0x75	; 117
   10082:	10 e1       	ldi	r17, 0x10	; 16
   10084:	ce e6       	ldi	r28, 0x6E	; 110
   10086:	d0 e0       	ldi	r29, 0x00	; 0
   10088:	ce 01       	movw	r24, r28
   1008a:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   1008e:	f8 01       	movw	r30, r16
   10090:	81 93       	st	Z+, r24
   10092:	8f 01       	movw	r16, r30
   10094:	21 96       	adiw	r28, 0x01	; 1
   10096:	c4 37       	cpi	r28, 0x74	; 116
   10098:	d1 05       	cpc	r29, r1
   1009a:	b1 f7       	brne	.-20     	; 0x10088 <load_setup_network()+0x14>
   1009c:	0b e7       	ldi	r16, 0x7B	; 123
   1009e:	10 e1       	ldi	r17, 0x10	; 16
   100a0:	ce 01       	movw	r24, r28
   100a2:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   100a6:	f8 01       	movw	r30, r16
   100a8:	81 93       	st	Z+, r24
   100aa:	8f 01       	movw	r16, r30
   100ac:	21 96       	adiw	r28, 0x01	; 1
   100ae:	c8 37       	cpi	r28, 0x78	; 120
   100b0:	d1 05       	cpc	r29, r1
   100b2:	b1 f7       	brne	.-20     	; 0x100a0 <load_setup_network()+0x2c>
   100b4:	0f e7       	ldi	r16, 0x7F	; 127
   100b6:	10 e1       	ldi	r17, 0x10	; 16
   100b8:	ce 01       	movw	r24, r28
   100ba:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   100be:	f8 01       	movw	r30, r16
   100c0:	81 93       	st	Z+, r24
   100c2:	8f 01       	movw	r16, r30
   100c4:	21 96       	adiw	r28, 0x01	; 1
   100c6:	cc 37       	cpi	r28, 0x7C	; 124
   100c8:	d1 05       	cpc	r29, r1
   100ca:	b1 f7       	brne	.-20     	; 0x100b8 <load_setup_network()+0x44>
   100cc:	47 e8       	ldi	r20, 0x87	; 135
   100ce:	e4 2e       	mov	r14, r20
   100d0:	40 e1       	ldi	r20, 0x10	; 16
   100d2:	f4 2e       	mov	r15, r20
   100d4:	00 e8       	ldi	r16, 0x80	; 128
   100d6:	10 e0       	ldi	r17, 0x00	; 0
   100d8:	c8 01       	movw	r24, r16
   100da:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   100de:	f7 01       	movw	r30, r14
   100e0:	81 93       	st	Z+, r24
   100e2:	7f 01       	movw	r14, r30
   100e4:	0f 5f       	subi	r16, 0xFF	; 255
   100e6:	1f 4f       	sbci	r17, 0xFF	; 255
   100e8:	04 38       	cpi	r16, 0x84	; 132
   100ea:	11 05       	cpc	r17, r1
   100ec:	a9 f7       	brne	.-22     	; 0x100d8 <load_setup_network()+0x64>
   100ee:	33 e8       	ldi	r19, 0x83	; 131
   100f0:	e3 2e       	mov	r14, r19
   100f2:	30 e1       	ldi	r19, 0x10	; 16
   100f4:	f3 2e       	mov	r15, r19
   100f6:	ce 01       	movw	r24, r28
   100f8:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   100fc:	f7 01       	movw	r30, r14
   100fe:	81 93       	st	Z+, r24
   10100:	7f 01       	movw	r14, r30
   10102:	21 96       	adiw	r28, 0x01	; 1
   10104:	c0 38       	cpi	r28, 0x80	; 128
   10106:	d1 05       	cpc	r29, r1
   10108:	b1 f7       	brne	.-20     	; 0x100f6 <load_setup_network()+0x82>
   1010a:	2b e8       	ldi	r18, 0x8B	; 139
   1010c:	e2 2e       	mov	r14, r18
   1010e:	20 e1       	ldi	r18, 0x10	; 16
   10110:	f2 2e       	mov	r15, r18
   10112:	c4 e6       	ldi	r28, 0x64	; 100
   10114:	d0 e0       	ldi	r29, 0x00	; 0
   10116:	ce 01       	movw	r24, r28
   10118:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   1011c:	f7 01       	movw	r30, r14
   1011e:	81 93       	st	Z+, r24
   10120:	7f 01       	movw	r14, r30
   10122:	21 96       	adiw	r28, 0x01	; 1
   10124:	cd 36       	cpi	r28, 0x6D	; 109
   10126:	d1 05       	cpc	r29, r1
   10128:	b1 f7       	brne	.-20     	; 0x10116 <load_setup_network()+0xa2>
   1012a:	c5 e9       	ldi	r28, 0x95	; 149
   1012c:	d0 e1       	ldi	r29, 0x10	; 16
   1012e:	c8 01       	movw	r24, r16
   10130:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   10134:	89 93       	st	Y+, r24
   10136:	0f 5f       	subi	r16, 0xFF	; 255
   10138:	1f 4f       	sbci	r17, 0xFF	; 255
   1013a:	08 38       	cpi	r16, 0x88	; 136
   1013c:	11 05       	cpc	r17, r1
   1013e:	b9 f7       	brne	.-18     	; 0x1012e <load_setup_network()+0xba>
   10140:	88 e8       	ldi	r24, 0x88	; 136
   10142:	90 e0       	ldi	r25, 0x00	; 0
   10144:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   10148:	c8 2f       	mov	r28, r24
   1014a:	89 e8       	ldi	r24, 0x89	; 137
   1014c:	90 e0       	ldi	r25, 0x00	; 0
   1014e:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   10152:	2c 2f       	mov	r18, r28
   10154:	30 e0       	ldi	r19, 0x00	; 0
   10156:	32 2f       	mov	r19, r18
   10158:	22 27       	eor	r18, r18
   1015a:	82 0f       	add	r24, r18
   1015c:	93 2f       	mov	r25, r19
   1015e:	91 1d       	adc	r25, r1
   10160:	90 93 9a 10 	sts	0x109A, r25	; 0x80109a <device+0x25>
   10164:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <device+0x24>
   10168:	0b e9       	ldi	r16, 0x9B	; 155
   1016a:	10 e1       	ldi	r17, 0x10	; 16
   1016c:	ca e8       	ldi	r28, 0x8A	; 138
   1016e:	d0 e0       	ldi	r29, 0x00	; 0
   10170:	ce 01       	movw	r24, r28
   10172:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   10176:	f8 01       	movw	r30, r16
   10178:	81 93       	st	Z+, r24
   1017a:	8f 01       	movw	r16, r30
   1017c:	21 96       	adiw	r28, 0x01	; 1
   1017e:	ce 39       	cpi	r28, 0x9E	; 158
   10180:	d1 05       	cpc	r29, r1
   10182:	b1 f7       	brne	.-20     	; 0x10170 <load_setup_network()+0xfc>
   10184:	0f ea       	ldi	r16, 0xAF	; 175
   10186:	10 e1       	ldi	r17, 0x10	; 16
   10188:	ce 01       	movw	r24, r28
   1018a:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   1018e:	f8 01       	movw	r30, r16
   10190:	81 93       	st	Z+, r24
   10192:	8f 01       	movw	r16, r30
   10194:	21 96       	adiw	r28, 0x01	; 1
   10196:	c2 3b       	cpi	r28, 0xB2	; 178
   10198:	d1 05       	cpc	r29, r1
   1019a:	b1 f7       	brne	.-20     	; 0x10188 <load_setup_network()+0x114>
   1019c:	03 ec       	ldi	r16, 0xC3	; 195
   1019e:	10 e1       	ldi	r17, 0x10	; 16
   101a0:	ce 01       	movw	r24, r28
   101a2:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   101a6:	f8 01       	movw	r30, r16
   101a8:	81 93       	st	Z+, r24
   101aa:	8f 01       	movw	r16, r30
   101ac:	21 96       	adiw	r28, 0x01	; 1
   101ae:	c6 3b       	cpi	r28, 0xB6	; 182
   101b0:	d1 05       	cpc	r29, r1
   101b2:	b1 f7       	brne	.-20     	; 0x101a0 <load_setup_network()+0x12c>
   101b4:	df 91       	pop	r29
   101b6:	cf 91       	pop	r28
   101b8:	1f 91       	pop	r17
   101ba:	0f 91       	pop	r16
   101bc:	ff 90       	pop	r15
   101be:	ef 90       	pop	r14
   101c0:	08 95       	ret

000101c2 <save_setup_network()>:
_Z18save_setup_networkv():
   101c2:	ef 92       	push	r14
   101c4:	ff 92       	push	r15
   101c6:	0f 93       	push	r16
   101c8:	1f 93       	push	r17
   101ca:	cf 93       	push	r28
   101cc:	df 93       	push	r29
   101ce:	05 e7       	ldi	r16, 0x75	; 117
   101d0:	10 e1       	ldi	r17, 0x10	; 16
   101d2:	ce e6       	ldi	r28, 0x6E	; 110
   101d4:	d0 e0       	ldi	r29, 0x00	; 0
   101d6:	f8 01       	movw	r30, r16
   101d8:	61 91       	ld	r22, Z+
   101da:	8f 01       	movw	r16, r30
   101dc:	ce 01       	movw	r24, r28
   101de:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   101e2:	21 96       	adiw	r28, 0x01	; 1
   101e4:	c4 37       	cpi	r28, 0x74	; 116
   101e6:	d1 05       	cpc	r29, r1
   101e8:	b1 f7       	brne	.-20     	; 0x101d6 <save_setup_network()+0x14>
   101ea:	0b e7       	ldi	r16, 0x7B	; 123
   101ec:	10 e1       	ldi	r17, 0x10	; 16
   101ee:	f8 01       	movw	r30, r16
   101f0:	61 91       	ld	r22, Z+
   101f2:	8f 01       	movw	r16, r30
   101f4:	ce 01       	movw	r24, r28
   101f6:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   101fa:	21 96       	adiw	r28, 0x01	; 1
   101fc:	c8 37       	cpi	r28, 0x78	; 120
   101fe:	d1 05       	cpc	r29, r1
   10200:	b1 f7       	brne	.-20     	; 0x101ee <save_setup_network()+0x2c>
   10202:	0f e7       	ldi	r16, 0x7F	; 127
   10204:	10 e1       	ldi	r17, 0x10	; 16
   10206:	f8 01       	movw	r30, r16
   10208:	61 91       	ld	r22, Z+
   1020a:	8f 01       	movw	r16, r30
   1020c:	ce 01       	movw	r24, r28
   1020e:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10212:	21 96       	adiw	r28, 0x01	; 1
   10214:	cc 37       	cpi	r28, 0x7C	; 124
   10216:	d1 05       	cpc	r29, r1
   10218:	b1 f7       	brne	.-20     	; 0x10206 <save_setup_network()+0x44>
   1021a:	27 e8       	ldi	r18, 0x87	; 135
   1021c:	e2 2e       	mov	r14, r18
   1021e:	20 e1       	ldi	r18, 0x10	; 16
   10220:	f2 2e       	mov	r15, r18
   10222:	00 e8       	ldi	r16, 0x80	; 128
   10224:	10 e0       	ldi	r17, 0x00	; 0
   10226:	f7 01       	movw	r30, r14
   10228:	61 91       	ld	r22, Z+
   1022a:	7f 01       	movw	r14, r30
   1022c:	c8 01       	movw	r24, r16
   1022e:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10232:	0f 5f       	subi	r16, 0xFF	; 255
   10234:	1f 4f       	sbci	r17, 0xFF	; 255
   10236:	04 38       	cpi	r16, 0x84	; 132
   10238:	11 05       	cpc	r17, r1
   1023a:	a9 f7       	brne	.-22     	; 0x10226 <save_setup_network()+0x64>
   1023c:	93 e8       	ldi	r25, 0x83	; 131
   1023e:	e9 2e       	mov	r14, r25
   10240:	90 e1       	ldi	r25, 0x10	; 16
   10242:	f9 2e       	mov	r15, r25
   10244:	f7 01       	movw	r30, r14
   10246:	61 91       	ld	r22, Z+
   10248:	7f 01       	movw	r14, r30
   1024a:	ce 01       	movw	r24, r28
   1024c:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10250:	21 96       	adiw	r28, 0x01	; 1
   10252:	c0 38       	cpi	r28, 0x80	; 128
   10254:	d1 05       	cpc	r29, r1
   10256:	b1 f7       	brne	.-20     	; 0x10244 <save_setup_network()+0x82>
   10258:	8b e8       	ldi	r24, 0x8B	; 139
   1025a:	e8 2e       	mov	r14, r24
   1025c:	80 e1       	ldi	r24, 0x10	; 16
   1025e:	f8 2e       	mov	r15, r24
   10260:	c4 e6       	ldi	r28, 0x64	; 100
   10262:	d0 e0       	ldi	r29, 0x00	; 0
   10264:	f7 01       	movw	r30, r14
   10266:	61 91       	ld	r22, Z+
   10268:	7f 01       	movw	r14, r30
   1026a:	ce 01       	movw	r24, r28
   1026c:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10270:	21 96       	adiw	r28, 0x01	; 1
   10272:	cd 36       	cpi	r28, 0x6D	; 109
   10274:	d1 05       	cpc	r29, r1
   10276:	b1 f7       	brne	.-20     	; 0x10264 <save_setup_network()+0xa2>
   10278:	c5 e9       	ldi	r28, 0x95	; 149
   1027a:	d0 e1       	ldi	r29, 0x10	; 16
   1027c:	69 91       	ld	r22, Y+
   1027e:	c8 01       	movw	r24, r16
   10280:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10284:	0f 5f       	subi	r16, 0xFF	; 255
   10286:	1f 4f       	sbci	r17, 0xFF	; 255
   10288:	08 38       	cpi	r16, 0x88	; 136
   1028a:	11 05       	cpc	r17, r1
   1028c:	b9 f7       	brne	.-18     	; 0x1027c <save_setup_network()+0xba>
   1028e:	60 91 9a 10 	lds	r22, 0x109A	; 0x80109a <device+0x25>
   10292:	88 e8       	ldi	r24, 0x88	; 136
   10294:	90 e0       	ldi	r25, 0x00	; 0
   10296:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1029a:	60 91 99 10 	lds	r22, 0x1099	; 0x801099 <device+0x24>
   1029e:	89 e8       	ldi	r24, 0x89	; 137
   102a0:	90 e0       	ldi	r25, 0x00	; 0
   102a2:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   102a6:	0b e9       	ldi	r16, 0x9B	; 155
   102a8:	10 e1       	ldi	r17, 0x10	; 16
   102aa:	ca e8       	ldi	r28, 0x8A	; 138
   102ac:	d0 e0       	ldi	r29, 0x00	; 0
   102ae:	f8 01       	movw	r30, r16
   102b0:	61 91       	ld	r22, Z+
   102b2:	8f 01       	movw	r16, r30
   102b4:	ce 01       	movw	r24, r28
   102b6:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   102ba:	21 96       	adiw	r28, 0x01	; 1
   102bc:	ce 39       	cpi	r28, 0x9E	; 158
   102be:	d1 05       	cpc	r29, r1
   102c0:	b1 f7       	brne	.-20     	; 0x102ae <save_setup_network()+0xec>
   102c2:	0f ea       	ldi	r16, 0xAF	; 175
   102c4:	10 e1       	ldi	r17, 0x10	; 16
   102c6:	f8 01       	movw	r30, r16
   102c8:	61 91       	ld	r22, Z+
   102ca:	8f 01       	movw	r16, r30
   102cc:	ce 01       	movw	r24, r28
   102ce:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   102d2:	21 96       	adiw	r28, 0x01	; 1
   102d4:	c2 3b       	cpi	r28, 0xB2	; 178
   102d6:	d1 05       	cpc	r29, r1
   102d8:	b1 f7       	brne	.-20     	; 0x102c6 <save_setup_network()+0x104>
   102da:	03 ec       	ldi	r16, 0xC3	; 195
   102dc:	10 e1       	ldi	r17, 0x10	; 16
   102de:	f8 01       	movw	r30, r16
   102e0:	61 91       	ld	r22, Z+
   102e2:	8f 01       	movw	r16, r30
   102e4:	ce 01       	movw	r24, r28
   102e6:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   102ea:	21 96       	adiw	r28, 0x01	; 1
   102ec:	c6 3b       	cpi	r28, 0xB6	; 182
   102ee:	d1 05       	cpc	r29, r1
   102f0:	b1 f7       	brne	.-20     	; 0x102de <save_setup_network()+0x11c>
   102f2:	df 91       	pop	r29
   102f4:	cf 91       	pop	r28
   102f6:	1f 91       	pop	r17
   102f8:	0f 91       	pop	r16
   102fa:	ff 90       	pop	r15
   102fc:	ef 90       	pop	r14
   102fe:	08 95       	ret

00010300 <device_get_name(char*)>:
_Z15device_get_namePc():
   10300:	0f 93       	push	r16
   10302:	1f 93       	push	r17
   10304:	cf 93       	push	r28
   10306:	df 93       	push	r29
   10308:	8c 01       	movw	r16, r24
   1030a:	c4 e6       	ldi	r28, 0x64	; 100
   1030c:	d0 e0       	ldi	r29, 0x00	; 0
   1030e:	ce 01       	movw	r24, r28
   10310:	0e 94 36 80 	call	0x1006c	; 0x1006c <EEPROMClass::read(int) [clone .isra.0]>
   10314:	f8 01       	movw	r30, r16
   10316:	81 93       	st	Z+, r24
   10318:	8f 01       	movw	r16, r30
   1031a:	10 82       	st	Z, r1
   1031c:	88 23       	and	r24, r24
   1031e:	21 f0       	breq	.+8      	; 0x10328 <device_get_name(char*)+0x28>
   10320:	21 96       	adiw	r28, 0x01	; 1
   10322:	cd 36       	cpi	r28, 0x6D	; 109
   10324:	d1 05       	cpc	r29, r1
   10326:	99 f7       	brne	.-26     	; 0x1030e <device_get_name(char*)+0xe>
   10328:	df 91       	pop	r29
   1032a:	cf 91       	pop	r28
   1032c:	1f 91       	pop	r17
   1032e:	0f 91       	pop	r16
   10330:	08 95       	ret

00010332 <device_set_name(char*)>:
_Z15device_set_namePc():
   10332:	ff 92       	push	r15
   10334:	0f 93       	push	r16
   10336:	1f 93       	push	r17
   10338:	cf 93       	push	r28
   1033a:	df 93       	push	r29
   1033c:	8c 01       	movw	r16, r24
   1033e:	d0 e0       	ldi	r29, 0x00	; 0
   10340:	c0 e0       	ldi	r28, 0x00	; 0
   10342:	f8 01       	movw	r30, r16
   10344:	f1 90       	ld	r15, Z+
   10346:	8f 01       	movw	r16, r30
   10348:	6f 2d       	mov	r22, r15
   1034a:	ce 01       	movw	r24, r28
   1034c:	8c 59       	subi	r24, 0x9C	; 156
   1034e:	9f 4f       	sbci	r25, 0xFF	; 255
   10350:	0e 94 38 80 	call	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10354:	f1 10       	cpse	r15, r1
   10356:	0b c0       	rjmp	.+22     	; 0x1036e <device_set_name(char*)+0x3c>
   10358:	60 e0       	ldi	r22, 0x00	; 0
   1035a:	ce 01       	movw	r24, r28
   1035c:	8b 59       	subi	r24, 0x9B	; 155
   1035e:	9f 4f       	sbci	r25, 0xFF	; 255
   10360:	df 91       	pop	r29
   10362:	cf 91       	pop	r28
   10364:	1f 91       	pop	r17
   10366:	0f 91       	pop	r16
   10368:	ff 90       	pop	r15
   1036a:	0c 94 38 80 	jmp	0x10070	; 0x10070 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1036e:	21 96       	adiw	r28, 0x01	; 1
   10370:	c9 30       	cpi	r28, 0x09	; 9
   10372:	d1 05       	cpc	r29, r1
   10374:	31 f7       	brne	.-52     	; 0x10342 <device_set_name(char*)+0x10>
   10376:	df 91       	pop	r29
   10378:	cf 91       	pop	r28
   1037a:	1f 91       	pop	r17
   1037c:	0f 91       	pop	r16
   1037e:	ff 90       	pop	r15
   10380:	08 95       	ret

00010382 <setting_network(char*, char*)>:
_Z15setting_networkPcS_():
   10382:	ef 92       	push	r14
   10384:	ff 92       	push	r15
   10386:	0f 93       	push	r16
   10388:	1f 93       	push	r17
   1038a:	cf 93       	push	r28
   1038c:	df 93       	push	r29
   1038e:	7b 01       	movw	r14, r22
   10390:	63 e3       	ldi	r22, 0x33	; 51
   10392:	73 e0       	ldi	r23, 0x03	; 3
   10394:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
   10398:	ec 01       	movw	r28, r24
   1039a:	10 e0       	ldi	r17, 0x00	; 0
   1039c:	20 97       	sbiw	r28, 0x00	; 0
   1039e:	09 f4       	brne	.+2      	; 0x103a2 <setting_network(char*, char*)+0x20>
   103a0:	ba c0       	rjmp	.+372    	; 0x10516 <setting_network(char*, char*)+0x194>
   103a2:	63 ed       	ldi	r22, 0xD3	; 211
   103a4:	77 e0       	ldi	r23, 0x07	; 7
   103a6:	ce 01       	movw	r24, r28
   103a8:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   103ac:	89 2b       	or	r24, r25
   103ae:	59 f4       	brne	.+22     	; 0x103c6 <setting_network(char*, char*)+0x44>
   103b0:	0a e0       	ldi	r16, 0x0A	; 10
   103b2:	10 e0       	ldi	r17, 0x00	; 0
   103b4:	26 e0       	ldi	r18, 0x06	; 6
   103b6:	30 e0       	ldi	r19, 0x00	; 0
   103b8:	45 e7       	ldi	r20, 0x75	; 117
   103ba:	50 e1       	ldi	r21, 0x10	; 16
   103bc:	6a e3       	ldi	r22, 0x3A	; 58
   103be:	c7 01       	movw	r24, r14
   103c0:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   103c4:	11 e0       	ldi	r17, 0x01	; 1
   103c6:	67 ed       	ldi	r22, 0xD7	; 215
   103c8:	77 e0       	ldi	r23, 0x07	; 7
   103ca:	ce 01       	movw	r24, r28
   103cc:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   103d0:	89 2b       	or	r24, r25
   103d2:	59 f4       	brne	.+22     	; 0x103ea <setting_network(char*, char*)+0x68>
   103d4:	0a e0       	ldi	r16, 0x0A	; 10
   103d6:	10 e0       	ldi	r17, 0x00	; 0
   103d8:	24 e0       	ldi	r18, 0x04	; 4
   103da:	30 e0       	ldi	r19, 0x00	; 0
   103dc:	4b e7       	ldi	r20, 0x7B	; 123
   103de:	50 e1       	ldi	r21, 0x10	; 16
   103e0:	6e e2       	ldi	r22, 0x2E	; 46
   103e2:	c7 01       	movw	r24, r14
   103e4:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   103e8:	11 e0       	ldi	r17, 0x01	; 1
   103ea:	6a ed       	ldi	r22, 0xDA	; 218
   103ec:	77 e0       	ldi	r23, 0x07	; 7
   103ee:	ce 01       	movw	r24, r28
   103f0:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   103f4:	89 2b       	or	r24, r25
   103f6:	59 f4       	brne	.+22     	; 0x1040e <setting_network(char*, char*)+0x8c>
   103f8:	0a e0       	ldi	r16, 0x0A	; 10
   103fa:	10 e0       	ldi	r17, 0x00	; 0
   103fc:	24 e0       	ldi	r18, 0x04	; 4
   103fe:	30 e0       	ldi	r19, 0x00	; 0
   10400:	4f e7       	ldi	r20, 0x7F	; 127
   10402:	50 e1       	ldi	r21, 0x10	; 16
   10404:	6e e2       	ldi	r22, 0x2E	; 46
   10406:	c7 01       	movw	r24, r14
   10408:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   1040c:	11 e0       	ldi	r17, 0x01	; 1
   1040e:	62 ee       	ldi	r22, 0xE2	; 226
   10410:	77 e0       	ldi	r23, 0x07	; 7
   10412:	ce 01       	movw	r24, r28
   10414:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   10418:	89 2b       	or	r24, r25
   1041a:	59 f4       	brne	.+22     	; 0x10432 <setting_network(char*, char*)+0xb0>
   1041c:	0a e0       	ldi	r16, 0x0A	; 10
   1041e:	10 e0       	ldi	r17, 0x00	; 0
   10420:	24 e0       	ldi	r18, 0x04	; 4
   10422:	30 e0       	ldi	r19, 0x00	; 0
   10424:	47 e8       	ldi	r20, 0x87	; 135
   10426:	50 e1       	ldi	r21, 0x10	; 16
   10428:	6e e2       	ldi	r22, 0x2E	; 46
   1042a:	c7 01       	movw	r24, r14
   1042c:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   10430:	11 e0       	ldi	r17, 0x01	; 1
   10432:	65 ee       	ldi	r22, 0xE5	; 229
   10434:	77 e0       	ldi	r23, 0x07	; 7
   10436:	ce 01       	movw	r24, r28
   10438:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   1043c:	89 2b       	or	r24, r25
   1043e:	59 f4       	brne	.+22     	; 0x10456 <setting_network(char*, char*)+0xd4>
   10440:	0a e0       	ldi	r16, 0x0A	; 10
   10442:	10 e0       	ldi	r17, 0x00	; 0
   10444:	24 e0       	ldi	r18, 0x04	; 4
   10446:	30 e0       	ldi	r19, 0x00	; 0
   10448:	43 e8       	ldi	r20, 0x83	; 131
   1044a:	50 e1       	ldi	r21, 0x10	; 16
   1044c:	6e e2       	ldi	r22, 0x2E	; 46
   1044e:	c7 01       	movw	r24, r14
   10450:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   10454:	11 e0       	ldi	r17, 0x01	; 1
   10456:	69 ee       	ldi	r22, 0xE9	; 233
   10458:	77 e0       	ldi	r23, 0x07	; 7
   1045a:	ce 01       	movw	r24, r28
   1045c:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   10460:	89 2b       	or	r24, r25
   10462:	59 f4       	brne	.+22     	; 0x1047a <setting_network(char*, char*)+0xf8>
   10464:	0a e0       	ldi	r16, 0x0A	; 10
   10466:	10 e0       	ldi	r17, 0x00	; 0
   10468:	24 e0       	ldi	r18, 0x04	; 4
   1046a:	30 e0       	ldi	r19, 0x00	; 0
   1046c:	43 ec       	ldi	r20, 0xC3	; 195
   1046e:	50 e1       	ldi	r21, 0x10	; 16
   10470:	6e e2       	ldi	r22, 0x2E	; 46
   10472:	c7 01       	movw	r24, r14
   10474:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   10478:	11 e0       	ldi	r17, 0x01	; 1
   1047a:	6d ee       	ldi	r22, 0xED	; 237
   1047c:	77 e0       	ldi	r23, 0x07	; 7
   1047e:	ce 01       	movw	r24, r28
   10480:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   10484:	89 2b       	or	r24, r25
   10486:	59 f4       	brne	.+22     	; 0x1049e <setting_network(char*, char*)+0x11c>
   10488:	0a e0       	ldi	r16, 0x0A	; 10
   1048a:	10 e0       	ldi	r17, 0x00	; 0
   1048c:	24 e0       	ldi	r18, 0x04	; 4
   1048e:	30 e0       	ldi	r19, 0x00	; 0
   10490:	45 e9       	ldi	r20, 0x95	; 149
   10492:	50 e1       	ldi	r21, 0x10	; 16
   10494:	6e e2       	ldi	r22, 0x2E	; 46
   10496:	c7 01       	movw	r24, r14
   10498:	0e 94 f2 b6 	call	0x16de4	; 0x16de4 <parseBytes(char const*, char, unsigned char*, int, int)>
   1049c:	11 e0       	ldi	r17, 0x01	; 1
   1049e:	67 ef       	ldi	r22, 0xF7	; 247
   104a0:	77 e0       	ldi	r23, 0x07	; 7
   104a2:	ce 01       	movw	r24, r28
   104a4:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   104a8:	89 2b       	or	r24, r25
   104aa:	41 f4       	brne	.+16     	; 0x104bc <setting_network(char*, char*)+0x13a>
   104ac:	c7 01       	movw	r24, r14
   104ae:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   104b2:	90 93 9a 10 	sts	0x109A, r25	; 0x80109a <device+0x25>
   104b6:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <device+0x24>
   104ba:	11 e0       	ldi	r17, 0x01	; 1
   104bc:	61 e0       	ldi	r22, 0x01	; 1
   104be:	78 e0       	ldi	r23, 0x08	; 8
   104c0:	ce 01       	movw	r24, r28
   104c2:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   104c6:	89 2b       	or	r24, r25
   104c8:	31 f4       	brne	.+12     	; 0x104d6 <setting_network(char*, char*)+0x154>
   104ca:	b7 01       	movw	r22, r14
   104cc:	8b e9       	ldi	r24, 0x9B	; 155
   104ce:	90 e1       	ldi	r25, 0x10	; 16
   104d0:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   104d4:	11 e0       	ldi	r17, 0x01	; 1
   104d6:	6b e0       	ldi	r22, 0x0B	; 11
   104d8:	78 e0       	ldi	r23, 0x08	; 8
   104da:	ce 01       	movw	r24, r28
   104dc:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   104e0:	89 2b       	or	r24, r25
   104e2:	31 f4       	brne	.+12     	; 0x104f0 <setting_network(char*, char*)+0x16e>
   104e4:	b7 01       	movw	r22, r14
   104e6:	8f ea       	ldi	r24, 0xAF	; 175
   104e8:	90 e1       	ldi	r25, 0x10	; 16
   104ea:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   104ee:	11 e0       	ldi	r17, 0x01	; 1
   104f0:	63 e7       	ldi	r22, 0x73	; 115
   104f2:	73 e0       	ldi	r23, 0x03	; 3
   104f4:	ce 01       	movw	r24, r28
   104f6:	0e 94 7f d7 	call	0x1aefe	; 0x1aefe <strcmp>
   104fa:	89 2b       	or	r24, r25
   104fc:	21 f4       	brne	.+8      	; 0x10506 <setting_network(char*, char*)+0x184>
   104fe:	c7 01       	movw	r24, r14
   10500:	0e 94 99 81 	call	0x10332	; 0x10332 <device_set_name(char*)>
   10504:	12 e0       	ldi	r17, 0x02	; 2
   10506:	63 e3       	ldi	r22, 0x33	; 51
   10508:	73 e0       	ldi	r23, 0x03	; 3
   1050a:	90 e0       	ldi	r25, 0x00	; 0
   1050c:	80 e0       	ldi	r24, 0x00	; 0
   1050e:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
   10512:	ec 01       	movw	r28, r24
   10514:	43 cf       	rjmp	.-378    	; 0x1039c <setting_network(char*, char*)+0x1a>
   10516:	81 2f       	mov	r24, r17
   10518:	df 91       	pop	r29
   1051a:	cf 91       	pop	r28
   1051c:	1f 91       	pop	r17
   1051e:	0f 91       	pop	r16
   10520:	ff 90       	pop	r15
   10522:	ef 90       	pop	r14
   10524:	08 95       	ret

00010526 <send_mqtt_set_header(char const*)>:
_Z20send_mqtt_set_headerPKc():
   10526:	90 93 72 10 	sts	0x1072, r25	; 0x801072 <header_out+0x1>
   1052a:	80 93 71 10 	sts	0x1071, r24	; 0x801071 <header_out>
   1052e:	08 95       	ret

00010530 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   10530:	9f 92       	push	r9
   10532:	af 92       	push	r10
   10534:	bf 92       	push	r11
   10536:	cf 92       	push	r12
   10538:	df 92       	push	r13
   1053a:	ef 92       	push	r14
   1053c:	ff 92       	push	r15
   1053e:	0f 93       	push	r16
   10540:	1f 93       	push	r17
   10542:	cf 93       	push	r28
   10544:	df 93       	push	r29
   10546:	cd b7       	in	r28, 0x3d	; 61
   10548:	de b7       	in	r29, 0x3e	; 62
   1054a:	c6 55       	subi	r28, 0x56	; 86
   1054c:	d1 09       	sbc	r29, r1
   1054e:	0f b6       	in	r0, 0x3f	; 63
   10550:	f8 94       	cli
   10552:	de bf       	out	0x3e, r29	; 62
   10554:	0f be       	out	0x3f, r0	; 63
   10556:	cd bf       	out	0x3d, r28	; 61
   10558:	7c 01       	movw	r14, r24
   1055a:	5b 01       	movw	r10, r22
   1055c:	94 2e       	mov	r9, r20
   1055e:	69 01       	movw	r12, r18
   10560:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   10564:	88 23       	and	r24, r24
   10566:	09 f4       	brne	.+2      	; 0x1056a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0x3a>
   10568:	51 c0       	rjmp	.+162    	; 0x1060c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xdc>
   1056a:	80 91 73 10 	lds	r24, 0x1073	; 0x801073 <mqtt_send_message>
   1056e:	90 91 74 10 	lds	r25, 0x1074	; 0x801074 <mqtt_send_message+0x1>
   10572:	01 96       	adiw	r24, 0x01	; 1
   10574:	90 93 74 10 	sts	0x1074, r25	; 0x801074 <mqtt_send_message+0x1>
   10578:	80 93 73 10 	sts	0x1073, r24	; 0x801073 <mqtt_send_message>
   1057c:	ce 01       	movw	r24, r28
   1057e:	83 5b       	subi	r24, 0xB3	; 179
   10580:	9f 4f       	sbci	r25, 0xFF	; 255
   10582:	0e 94 80 81 	call	0x10300	; 0x10300 <device_get_name(char*)>
   10586:	60 91 71 10 	lds	r22, 0x1071	; 0x801071 <header_out>
   1058a:	70 91 72 10 	lds	r23, 0x1072	; 0x801072 <header_out+0x1>
   1058e:	ce 01       	movw	r24, r28
   10590:	01 96       	adiw	r24, 0x01	; 1
   10592:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10596:	be 01       	movw	r22, r28
   10598:	63 5b       	subi	r22, 0xB3	; 179
   1059a:	7f 4f       	sbci	r23, 0xFF	; 255
   1059c:	ce 01       	movw	r24, r28
   1059e:	01 96       	adiw	r24, 0x01	; 1
   105a0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   105a4:	63 e3       	ldi	r22, 0x33	; 51
   105a6:	73 e0       	ldi	r23, 0x03	; 3
   105a8:	ce 01       	movw	r24, r28
   105aa:	01 96       	adiw	r24, 0x01	; 1
   105ac:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   105b0:	b5 01       	movw	r22, r10
   105b2:	ce 01       	movw	r24, r28
   105b4:	01 96       	adiw	r24, 0x01	; 1
   105b6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   105ba:	63 e3       	ldi	r22, 0x33	; 51
   105bc:	73 e0       	ldi	r23, 0x03	; 3
   105be:	ce 01       	movw	r24, r28
   105c0:	01 96       	adiw	r24, 0x01	; 1
   105c2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
   105c6:	4a e0       	ldi	r20, 0x0A	; 10
   105c8:	be 01       	movw	r22, r28
   105ca:	6f 5b       	subi	r22, 0xBF	; 191
   105cc:	7f 4f       	sbci	r23, 0xFF	; 255
   105ce:	89 2d       	mov	r24, r9
   105d0:	90 e0       	ldi	r25, 0x00	; 0
   105d2:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_():
   105d6:	be 01       	movw	r22, r28
   105d8:	6f 5b       	subi	r22, 0xBF	; 191
   105da:	7f 4f       	sbci	r23, 0xFF	; 255
   105dc:	ce 01       	movw	r24, r28
   105de:	01 96       	adiw	r24, 0x01	; 1
   105e0:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   105e4:	63 e3       	ldi	r22, 0x33	; 51
   105e6:	73 e0       	ldi	r23, 0x03	; 3
   105e8:	ce 01       	movw	r24, r28
   105ea:	01 96       	adiw	r24, 0x01	; 1
   105ec:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   105f0:	b6 01       	movw	r22, r12
   105f2:	ce 01       	movw	r24, r28
   105f4:	01 96       	adiw	r24, 0x01	; 1
   105f6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   105fa:	a8 01       	movw	r20, r16
   105fc:	be 01       	movw	r22, r28
   105fe:	6f 5f       	subi	r22, 0xFF	; 255
   10600:	7f 4f       	sbci	r23, 0xFF	; 255
   10602:	c7 01       	movw	r24, r14
   10604:	0e 94 10 c0 	call	0x18020	; 0x18020 <PubSubClient::publish(char const*, char const*)>
   10608:	81 11       	cpse	r24, r1
   1060a:	09 c0       	rjmp	.+18     	; 0x1061e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*)+0xee>
   1060c:	80 91 c7 10 	lds	r24, 0x10C7	; 0x8010c7 <mqtt_error>
   10610:	90 91 c8 10 	lds	r25, 0x10C8	; 0x8010c8 <mqtt_error+0x1>
   10614:	01 96       	adiw	r24, 0x01	; 1
   10616:	90 93 c8 10 	sts	0x10C8, r25	; 0x8010c8 <mqtt_error+0x1>
   1061a:	80 93 c7 10 	sts	0x10C7, r24	; 0x8010c7 <mqtt_error>
   1061e:	ca 5a       	subi	r28, 0xAA	; 170
   10620:	df 4f       	sbci	r29, 0xFF	; 255
   10622:	0f b6       	in	r0, 0x3f	; 63
   10624:	f8 94       	cli
   10626:	de bf       	out	0x3e, r29	; 62
   10628:	0f be       	out	0x3f, r0	; 63
   1062a:	cd bf       	out	0x3d, r28	; 61
   1062c:	df 91       	pop	r29
   1062e:	cf 91       	pop	r28
   10630:	1f 91       	pop	r17
   10632:	0f 91       	pop	r16
   10634:	ff 90       	pop	r15
   10636:	ef 90       	pop	r14
   10638:	df 90       	pop	r13
   1063a:	cf 90       	pop	r12
   1063c:	bf 90       	pop	r11
   1063e:	af 90       	pop	r10
   10640:	9f 90       	pop	r9
   10642:	08 95       	ret

00010644 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10644:	8f 92       	push	r8
   10646:	9f 92       	push	r9
   10648:	af 92       	push	r10
   1064a:	bf 92       	push	r11
   1064c:	cf 92       	push	r12
   1064e:	df 92       	push	r13
   10650:	ef 92       	push	r14
   10652:	ff 92       	push	r15
   10654:	0f 93       	push	r16
   10656:	1f 93       	push	r17
   10658:	cf 93       	push	r28
   1065a:	df 93       	push	r29
   1065c:	cd b7       	in	r28, 0x3d	; 61
   1065e:	de b7       	in	r29, 0x3e	; 62
   10660:	c6 55       	subi	r28, 0x56	; 86
   10662:	d1 09       	sbc	r29, r1
   10664:	0f b6       	in	r0, 0x3f	; 63
   10666:	f8 94       	cli
   10668:	de bf       	out	0x3e, r29	; 62
   1066a:	0f be       	out	0x3f, r0	; 63
   1066c:	cd bf       	out	0x3d, r28	; 61
   1066e:	6c 01       	movw	r12, r24
   10670:	5b 01       	movw	r10, r22
   10672:	84 2e       	mov	r8, r20
   10674:	92 2e       	mov	r9, r18
   10676:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   1067a:	88 23       	and	r24, r24
   1067c:	09 f4       	brne	.+2      	; 0x10680 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x3c>
   1067e:	66 c0       	rjmp	.+204    	; 0x1074c <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x108>
   10680:	80 91 73 10 	lds	r24, 0x1073	; 0x801073 <mqtt_send_message>
   10684:	90 91 74 10 	lds	r25, 0x1074	; 0x801074 <mqtt_send_message+0x1>
   10688:	01 96       	adiw	r24, 0x01	; 1
   1068a:	90 93 74 10 	sts	0x1074, r25	; 0x801074 <mqtt_send_message+0x1>
   1068e:	80 93 73 10 	sts	0x1073, r24	; 0x801073 <mqtt_send_message>
   10692:	ce 01       	movw	r24, r28
   10694:	83 5b       	subi	r24, 0xB3	; 179
   10696:	9f 4f       	sbci	r25, 0xFF	; 255
   10698:	0e 94 80 81 	call	0x10300	; 0x10300 <device_get_name(char*)>
   1069c:	60 91 71 10 	lds	r22, 0x1071	; 0x801071 <header_out>
   106a0:	70 91 72 10 	lds	r23, 0x1072	; 0x801072 <header_out+0x1>
   106a4:	ce 01       	movw	r24, r28
   106a6:	01 96       	adiw	r24, 0x01	; 1
   106a8:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   106ac:	be 01       	movw	r22, r28
   106ae:	63 5b       	subi	r22, 0xB3	; 179
   106b0:	7f 4f       	sbci	r23, 0xFF	; 255
   106b2:	ce 01       	movw	r24, r28
   106b4:	01 96       	adiw	r24, 0x01	; 1
   106b6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   106ba:	63 e3       	ldi	r22, 0x33	; 51
   106bc:	73 e0       	ldi	r23, 0x03	; 3
   106be:	ce 01       	movw	r24, r28
   106c0:	01 96       	adiw	r24, 0x01	; 1
   106c2:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   106c6:	b5 01       	movw	r22, r10
   106c8:	ce 01       	movw	r24, r28
   106ca:	01 96       	adiw	r24, 0x01	; 1
   106cc:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   106d0:	63 e3       	ldi	r22, 0x33	; 51
   106d2:	73 e0       	ldi	r23, 0x03	; 3
   106d4:	ce 01       	movw	r24, r28
   106d6:	01 96       	adiw	r24, 0x01	; 1
   106d8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
   106dc:	4a e0       	ldi	r20, 0x0A	; 10
   106de:	be 01       	movw	r22, r28
   106e0:	6f 5b       	subi	r22, 0xBF	; 191
   106e2:	7f 4f       	sbci	r23, 0xFF	; 255
   106e4:	88 2d       	mov	r24, r8
   106e6:	90 e0       	ldi	r25, 0x00	; 0
   106e8:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   106ec:	be 01       	movw	r22, r28
   106ee:	6f 5b       	subi	r22, 0xBF	; 191
   106f0:	7f 4f       	sbci	r23, 0xFF	; 255
   106f2:	ce 01       	movw	r24, r28
   106f4:	01 96       	adiw	r24, 0x01	; 1
   106f6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   106fa:	63 e3       	ldi	r22, 0x33	; 51
   106fc:	73 e0       	ldi	r23, 0x03	; 3
   106fe:	ce 01       	movw	r24, r28
   10700:	01 96       	adiw	r24, 0x01	; 1
   10702:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
itoa():
   10706:	4a e0       	ldi	r20, 0x0A	; 10
   10708:	be 01       	movw	r22, r28
   1070a:	6f 5b       	subi	r22, 0xBF	; 191
   1070c:	7f 4f       	sbci	r23, 0xFF	; 255
   1070e:	89 2d       	mov	r24, r9
   10710:	90 e0       	ldi	r25, 0x00	; 0
   10712:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_():
   10716:	be 01       	movw	r22, r28
   10718:	6f 5b       	subi	r22, 0xBF	; 191
   1071a:	7f 4f       	sbci	r23, 0xFF	; 255
   1071c:	ce 01       	movw	r24, r28
   1071e:	01 96       	adiw	r24, 0x01	; 1
   10720:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   10724:	63 e3       	ldi	r22, 0x33	; 51
   10726:	73 e0       	ldi	r23, 0x03	; 3
   10728:	ce 01       	movw	r24, r28
   1072a:	01 96       	adiw	r24, 0x01	; 1
   1072c:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   10730:	b8 01       	movw	r22, r16
   10732:	ce 01       	movw	r24, r28
   10734:	01 96       	adiw	r24, 0x01	; 1
   10736:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   1073a:	a7 01       	movw	r20, r14
   1073c:	be 01       	movw	r22, r28
   1073e:	6f 5f       	subi	r22, 0xFF	; 255
   10740:	7f 4f       	sbci	r23, 0xFF	; 255
   10742:	c6 01       	movw	r24, r12
   10744:	0e 94 10 c0 	call	0x18020	; 0x18020 <PubSubClient::publish(char const*, char const*)>
   10748:	81 11       	cpse	r24, r1
   1074a:	09 c0       	rjmp	.+18     	; 0x1075e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*)+0x11a>
   1074c:	80 91 c7 10 	lds	r24, 0x10C7	; 0x8010c7 <mqtt_error>
   10750:	90 91 c8 10 	lds	r25, 0x10C8	; 0x8010c8 <mqtt_error+0x1>
   10754:	01 96       	adiw	r24, 0x01	; 1
   10756:	90 93 c8 10 	sts	0x10C8, r25	; 0x8010c8 <mqtt_error+0x1>
   1075a:	80 93 c7 10 	sts	0x10C7, r24	; 0x8010c7 <mqtt_error>
   1075e:	ca 5a       	subi	r28, 0xAA	; 170
   10760:	df 4f       	sbci	r29, 0xFF	; 255
   10762:	0f b6       	in	r0, 0x3f	; 63
   10764:	f8 94       	cli
   10766:	de bf       	out	0x3e, r29	; 62
   10768:	0f be       	out	0x3f, r0	; 63
   1076a:	cd bf       	out	0x3d, r28	; 61
   1076c:	df 91       	pop	r29
   1076e:	cf 91       	pop	r28
   10770:	1f 91       	pop	r17
   10772:	0f 91       	pop	r16
   10774:	ff 90       	pop	r15
   10776:	ef 90       	pop	r14
   10778:	df 90       	pop	r13
   1077a:	cf 90       	pop	r12
   1077c:	bf 90       	pop	r11
   1077e:	af 90       	pop	r10
   10780:	9f 90       	pop	r9
   10782:	8f 90       	pop	r8
   10784:	08 95       	ret

00010786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
   10786:	cf 92       	push	r12
   10788:	df 92       	push	r13
   1078a:	ef 92       	push	r14
   1078c:	ff 92       	push	r15
   1078e:	0f 93       	push	r16
   10790:	1f 93       	push	r17
   10792:	cf 93       	push	r28
   10794:	df 93       	push	r29
   10796:	cd b7       	in	r28, 0x3d	; 61
   10798:	de b7       	in	r29, 0x3e	; 62
   1079a:	ca 54       	subi	r28, 0x4A	; 74
   1079c:	d1 09       	sbc	r29, r1
   1079e:	0f b6       	in	r0, 0x3f	; 63
   107a0:	f8 94       	cli
   107a2:	de bf       	out	0x3e, r29	; 62
   107a4:	0f be       	out	0x3f, r0	; 63
   107a6:	cd bf       	out	0x3d, r28	; 61
   107a8:	8c 01       	movw	r16, r24
   107aa:	6b 01       	movw	r12, r22
   107ac:	7a 01       	movw	r14, r20
   107ae:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   107b2:	88 23       	and	r24, r24
   107b4:	89 f1       	breq	.+98     	; 0x10818 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
   107b6:	80 91 73 10 	lds	r24, 0x1073	; 0x801073 <mqtt_send_message>
   107ba:	90 91 74 10 	lds	r25, 0x1074	; 0x801074 <mqtt_send_message+0x1>
   107be:	01 96       	adiw	r24, 0x01	; 1
   107c0:	90 93 74 10 	sts	0x1074, r25	; 0x801074 <mqtt_send_message+0x1>
   107c4:	80 93 73 10 	sts	0x1073, r24	; 0x801073 <mqtt_send_message>
   107c8:	ce 01       	movw	r24, r28
   107ca:	8f 5b       	subi	r24, 0xBF	; 191
   107cc:	9f 4f       	sbci	r25, 0xFF	; 255
   107ce:	0e 94 80 81 	call	0x10300	; 0x10300 <device_get_name(char*)>
   107d2:	60 91 71 10 	lds	r22, 0x1071	; 0x801071 <header_out>
   107d6:	70 91 72 10 	lds	r23, 0x1072	; 0x801072 <header_out+0x1>
   107da:	ce 01       	movw	r24, r28
   107dc:	01 96       	adiw	r24, 0x01	; 1
   107de:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   107e2:	be 01       	movw	r22, r28
   107e4:	6f 5b       	subi	r22, 0xBF	; 191
   107e6:	7f 4f       	sbci	r23, 0xFF	; 255
   107e8:	ce 01       	movw	r24, r28
   107ea:	01 96       	adiw	r24, 0x01	; 1
   107ec:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   107f0:	63 e3       	ldi	r22, 0x33	; 51
   107f2:	73 e0       	ldi	r23, 0x03	; 3
   107f4:	ce 01       	movw	r24, r28
   107f6:	01 96       	adiw	r24, 0x01	; 1
   107f8:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   107fc:	b6 01       	movw	r22, r12
   107fe:	ce 01       	movw	r24, r28
   10800:	01 96       	adiw	r24, 0x01	; 1
   10802:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   10806:	a7 01       	movw	r20, r14
   10808:	be 01       	movw	r22, r28
   1080a:	6f 5f       	subi	r22, 0xFF	; 255
   1080c:	7f 4f       	sbci	r23, 0xFF	; 255
   1080e:	c8 01       	movw	r24, r16
   10810:	0e 94 10 c0 	call	0x18020	; 0x18020 <PubSubClient::publish(char const*, char const*)>
   10814:	81 11       	cpse	r24, r1
   10816:	09 c0       	rjmp	.+18     	; 0x1082a <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
   10818:	80 91 c7 10 	lds	r24, 0x10C7	; 0x8010c7 <mqtt_error>
   1081c:	90 91 c8 10 	lds	r25, 0x10C8	; 0x8010c8 <mqtt_error+0x1>
   10820:	01 96       	adiw	r24, 0x01	; 1
   10822:	90 93 c8 10 	sts	0x10C8, r25	; 0x8010c8 <mqtt_error+0x1>
   10826:	80 93 c7 10 	sts	0x10C7, r24	; 0x8010c7 <mqtt_error>
   1082a:	c6 5b       	subi	r28, 0xB6	; 182
   1082c:	df 4f       	sbci	r29, 0xFF	; 255
   1082e:	0f b6       	in	r0, 0x3f	; 63
   10830:	f8 94       	cli
   10832:	de bf       	out	0x3e, r29	; 62
   10834:	0f be       	out	0x3f, r0	; 63
   10836:	cd bf       	out	0x3d, r28	; 61
   10838:	df 91       	pop	r29
   1083a:	cf 91       	pop	r28
   1083c:	1f 91       	pop	r17
   1083e:	0f 91       	pop	r16
   10840:	ff 90       	pop	r15
   10842:	ef 90       	pop	r14
   10844:	df 90       	pop	r13
   10846:	cf 90       	pop	r12
   10848:	08 95       	ret

0001084a <send_network_config(PubSubClient*)>:
_Z19send_network_configP12PubSubClient():
   1084a:	ef 92       	push	r14
   1084c:	ff 92       	push	r15
   1084e:	0f 93       	push	r16
   10850:	cf 93       	push	r28
   10852:	df 93       	push	r29
   10854:	cd b7       	in	r28, 0x3d	; 61
   10856:	de b7       	in	r29, 0x3e	; 62
   10858:	e4 97       	sbiw	r28, 0x34	; 52
   1085a:	0f b6       	in	r0, 0x3f	; 63
   1085c:	f8 94       	cli
   1085e:	de bf       	out	0x3e, r29	; 62
   10860:	0f be       	out	0x3f, r0	; 63
   10862:	cd bf       	out	0x3d, r28	; 61
   10864:	7c 01       	movw	r14, r24
   10866:	19 a2       	std	Y+33, r1	; 0x21
   10868:	00 e1       	ldi	r16, 0x10	; 16
   1086a:	26 e0       	ldi	r18, 0x06	; 6
   1086c:	45 e7       	ldi	r20, 0x75	; 117
   1086e:	50 e1       	ldi	r21, 0x10	; 16
   10870:	6a e3       	ldi	r22, 0x3A	; 58
   10872:	ce 01       	movw	r24, r28
   10874:	81 96       	adiw	r24, 0x21	; 33
   10876:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1087a:	68 e9       	ldi	r22, 0x98	; 152
   1087c:	7b e5       	ldi	r23, 0x5B	; 91
   1087e:	ce 01       	movw	r24, r28
   10880:	01 96       	adiw	r24, 0x01	; 1
   10882:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10886:	ae 01       	movw	r20, r28
   10888:	4f 5d       	subi	r20, 0xDF	; 223
   1088a:	5f 4f       	sbci	r21, 0xFF	; 255
   1088c:	be 01       	movw	r22, r28
   1088e:	6f 5f       	subi	r22, 0xFF	; 255
   10890:	7f 4f       	sbci	r23, 0xFF	; 255
   10892:	c7 01       	movw	r24, r14
   10894:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10898:	19 a2       	std	Y+33, r1	; 0x21
   1089a:	0a e0       	ldi	r16, 0x0A	; 10
   1089c:	24 e0       	ldi	r18, 0x04	; 4
   1089e:	4b e7       	ldi	r20, 0x7B	; 123
   108a0:	50 e1       	ldi	r21, 0x10	; 16
   108a2:	6e e2       	ldi	r22, 0x2E	; 46
   108a4:	ce 01       	movw	r24, r28
   108a6:	81 96       	adiw	r24, 0x21	; 33
   108a8:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   108ac:	65 ec       	ldi	r22, 0xC5	; 197
   108ae:	7b e5       	ldi	r23, 0x5B	; 91
   108b0:	ce 01       	movw	r24, r28
   108b2:	01 96       	adiw	r24, 0x01	; 1
   108b4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   108b8:	ae 01       	movw	r20, r28
   108ba:	4f 5d       	subi	r20, 0xDF	; 223
   108bc:	5f 4f       	sbci	r21, 0xFF	; 255
   108be:	be 01       	movw	r22, r28
   108c0:	6f 5f       	subi	r22, 0xFF	; 255
   108c2:	7f 4f       	sbci	r23, 0xFF	; 255
   108c4:	c7 01       	movw	r24, r14
   108c6:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   108ca:	19 a2       	std	Y+33, r1	; 0x21
   108cc:	24 e0       	ldi	r18, 0x04	; 4
   108ce:	4f e7       	ldi	r20, 0x7F	; 127
   108d0:	50 e1       	ldi	r21, 0x10	; 16
   108d2:	6e e2       	ldi	r22, 0x2E	; 46
   108d4:	ce 01       	movw	r24, r28
   108d6:	81 96       	adiw	r24, 0x21	; 33
   108d8:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   108dc:	68 e8       	ldi	r22, 0x88	; 136
   108de:	7b e5       	ldi	r23, 0x5B	; 91
   108e0:	ce 01       	movw	r24, r28
   108e2:	01 96       	adiw	r24, 0x01	; 1
   108e4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   108e8:	ae 01       	movw	r20, r28
   108ea:	4f 5d       	subi	r20, 0xDF	; 223
   108ec:	5f 4f       	sbci	r21, 0xFF	; 255
   108ee:	be 01       	movw	r22, r28
   108f0:	6f 5f       	subi	r22, 0xFF	; 255
   108f2:	7f 4f       	sbci	r23, 0xFF	; 255
   108f4:	c7 01       	movw	r24, r14
   108f6:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   108fa:	19 a2       	std	Y+33, r1	; 0x21
   108fc:	24 e0       	ldi	r18, 0x04	; 4
   108fe:	47 e8       	ldi	r20, 0x87	; 135
   10900:	50 e1       	ldi	r21, 0x10	; 16
   10902:	6e e2       	ldi	r22, 0x2E	; 46
   10904:	ce 01       	movw	r24, r28
   10906:	81 96       	adiw	r24, 0x21	; 33
   10908:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1090c:	6d e7       	ldi	r22, 0x7D	; 125
   1090e:	7b e5       	ldi	r23, 0x5B	; 91
   10910:	ce 01       	movw	r24, r28
   10912:	01 96       	adiw	r24, 0x01	; 1
   10914:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10918:	ae 01       	movw	r20, r28
   1091a:	4f 5d       	subi	r20, 0xDF	; 223
   1091c:	5f 4f       	sbci	r21, 0xFF	; 255
   1091e:	be 01       	movw	r22, r28
   10920:	6f 5f       	subi	r22, 0xFF	; 255
   10922:	7f 4f       	sbci	r23, 0xFF	; 255
   10924:	c7 01       	movw	r24, r14
   10926:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1092a:	19 a2       	std	Y+33, r1	; 0x21
   1092c:	24 e0       	ldi	r18, 0x04	; 4
   1092e:	43 e8       	ldi	r20, 0x83	; 131
   10930:	50 e1       	ldi	r21, 0x10	; 16
   10932:	6e e2       	ldi	r22, 0x2E	; 46
   10934:	ce 01       	movw	r24, r28
   10936:	81 96       	adiw	r24, 0x21	; 33
   10938:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1093c:	61 e7       	ldi	r22, 0x71	; 113
   1093e:	7b e5       	ldi	r23, 0x5B	; 91
   10940:	ce 01       	movw	r24, r28
   10942:	01 96       	adiw	r24, 0x01	; 1
   10944:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10948:	ae 01       	movw	r20, r28
   1094a:	4f 5d       	subi	r20, 0xDF	; 223
   1094c:	5f 4f       	sbci	r21, 0xFF	; 255
   1094e:	be 01       	movw	r22, r28
   10950:	6f 5f       	subi	r22, 0xFF	; 255
   10952:	7f 4f       	sbci	r23, 0xFF	; 255
   10954:	c7 01       	movw	r24, r14
   10956:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1095a:	19 a2       	std	Y+33, r1	; 0x21
   1095c:	24 e0       	ldi	r18, 0x04	; 4
   1095e:	43 ec       	ldi	r20, 0xC3	; 195
   10960:	50 e1       	ldi	r21, 0x10	; 16
   10962:	6e e2       	ldi	r22, 0x2E	; 46
   10964:	ce 01       	movw	r24, r28
   10966:	81 96       	adiw	r24, 0x21	; 33
   10968:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1096c:	65 e6       	ldi	r22, 0x65	; 101
   1096e:	7b e5       	ldi	r23, 0x5B	; 91
   10970:	ce 01       	movw	r24, r28
   10972:	01 96       	adiw	r24, 0x01	; 1
   10974:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10978:	ae 01       	movw	r20, r28
   1097a:	4f 5d       	subi	r20, 0xDF	; 223
   1097c:	5f 4f       	sbci	r21, 0xFF	; 255
   1097e:	be 01       	movw	r22, r28
   10980:	6f 5f       	subi	r22, 0xFF	; 255
   10982:	7f 4f       	sbci	r23, 0xFF	; 255
   10984:	c7 01       	movw	r24, r14
   10986:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1098a:	19 a2       	std	Y+33, r1	; 0x21
   1098c:	24 e0       	ldi	r18, 0x04	; 4
   1098e:	45 e9       	ldi	r20, 0x95	; 149
   10990:	50 e1       	ldi	r21, 0x10	; 16
   10992:	6e e2       	ldi	r22, 0x2E	; 46
   10994:	ce 01       	movw	r24, r28
   10996:	81 96       	adiw	r24, 0x21	; 33
   10998:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   1099c:	63 e5       	ldi	r22, 0x53	; 83
   1099e:	7b e5       	ldi	r23, 0x5B	; 91
   109a0:	ce 01       	movw	r24, r28
   109a2:	01 96       	adiw	r24, 0x01	; 1
   109a4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   109a8:	ae 01       	movw	r20, r28
   109aa:	4f 5d       	subi	r20, 0xDF	; 223
   109ac:	5f 4f       	sbci	r21, 0xFF	; 255
   109ae:	be 01       	movw	r22, r28
   109b0:	6f 5f       	subi	r22, 0xFF	; 255
   109b2:	7f 4f       	sbci	r23, 0xFF	; 255
   109b4:	c7 01       	movw	r24, r14
   109b6:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
   109ba:	4a e0       	ldi	r20, 0x0A	; 10
   109bc:	be 01       	movw	r22, r28
   109be:	6f 5d       	subi	r22, 0xDF	; 223
   109c0:	7f 4f       	sbci	r23, 0xFF	; 255
   109c2:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <device+0x24>
   109c6:	90 91 9a 10 	lds	r25, 0x109A	; 0x80109a <device+0x25>
   109ca:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z19send_network_configP12PubSubClient():
   109ce:	61 e4       	ldi	r22, 0x41	; 65
   109d0:	7b e5       	ldi	r23, 0x5B	; 91
   109d2:	ce 01       	movw	r24, r28
   109d4:	01 96       	adiw	r24, 0x01	; 1
   109d6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   109da:	ae 01       	movw	r20, r28
   109dc:	4f 5d       	subi	r20, 0xDF	; 223
   109de:	5f 4f       	sbci	r21, 0xFF	; 255
   109e0:	be 01       	movw	r22, r28
   109e2:	6f 5f       	subi	r22, 0xFF	; 255
   109e4:	7f 4f       	sbci	r23, 0xFF	; 255
   109e6:	c7 01       	movw	r24, r14
   109e8:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   109ec:	6f e2       	ldi	r22, 0x2F	; 47
   109ee:	7b e5       	ldi	r23, 0x5B	; 91
   109f0:	ce 01       	movw	r24, r28
   109f2:	01 96       	adiw	r24, 0x01	; 1
   109f4:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   109f8:	4b e9       	ldi	r20, 0x9B	; 155
   109fa:	50 e1       	ldi	r21, 0x10	; 16
   109fc:	be 01       	movw	r22, r28
   109fe:	6f 5f       	subi	r22, 0xFF	; 255
   10a00:	7f 4f       	sbci	r23, 0xFF	; 255
   10a02:	c7 01       	movw	r24, r14
   10a04:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10a08:	6e e1       	ldi	r22, 0x1E	; 30
   10a0a:	7b e5       	ldi	r23, 0x5B	; 91
   10a0c:	ce 01       	movw	r24, r28
   10a0e:	01 96       	adiw	r24, 0x01	; 1
   10a10:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10a14:	4f ea       	ldi	r20, 0xAF	; 175
   10a16:	50 e1       	ldi	r21, 0x10	; 16
   10a18:	be 01       	movw	r22, r28
   10a1a:	6f 5f       	subi	r22, 0xFF	; 255
   10a1c:	7f 4f       	sbci	r23, 0xFF	; 255
   10a1e:	c7 01       	movw	r24, r14
   10a20:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10a24:	68 eb       	ldi	r22, 0xB8	; 184
   10a26:	7b e5       	ldi	r23, 0x5B	; 91
   10a28:	ce 01       	movw	r24, r28
   10a2a:	01 96       	adiw	r24, 0x01	; 1
   10a2c:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10a30:	4b e8       	ldi	r20, 0x8B	; 139
   10a32:	50 e1       	ldi	r21, 0x10	; 16
   10a34:	be 01       	movw	r22, r28
   10a36:	6f 5f       	subi	r22, 0xFF	; 255
   10a38:	7f 4f       	sbci	r23, 0xFF	; 255
   10a3a:	c7 01       	movw	r24, r14
   10a3c:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10a40:	e4 96       	adiw	r28, 0x34	; 52
   10a42:	0f b6       	in	r0, 0x3f	; 63
   10a44:	f8 94       	cli
   10a46:	de bf       	out	0x3e, r29	; 62
   10a48:	0f be       	out	0x3f, r0	; 63
   10a4a:	cd bf       	out	0x3d, r28	; 61
   10a4c:	df 91       	pop	r29
   10a4e:	cf 91       	pop	r28
   10a50:	0f 91       	pop	r16
   10a52:	ff 90       	pop	r15
   10a54:	ef 90       	pop	r14
   10a56:	08 95       	ret

00010a58 <send_mqtt_status(PubSubClient*)>:
_Z16send_mqtt_statusP12PubSubClient():
   10a58:	ef 92       	push	r14
   10a5a:	ff 92       	push	r15
   10a5c:	0f 93       	push	r16
   10a5e:	cf 93       	push	r28
   10a60:	df 93       	push	r29
   10a62:	cd b7       	in	r28, 0x3d	; 61
   10a64:	de b7       	in	r29, 0x3e	; 62
   10a66:	c0 58       	subi	r28, 0x80	; 128
   10a68:	d1 09       	sbc	r29, r1
   10a6a:	0f b6       	in	r0, 0x3f	; 63
   10a6c:	f8 94       	cli
   10a6e:	de bf       	out	0x3e, r29	; 62
   10a70:	0f be       	out	0x3f, r0	; 63
   10a72:	cd bf       	out	0x3d, r28	; 61
   10a74:	7c 01       	movw	r14, r24
   10a76:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   10a7a:	88 23       	and	r24, r24
   10a7c:	09 f4       	brne	.+2      	; 0x10a80 <send_mqtt_status(PubSubClient*)+0x28>
   10a7e:	a7 c0       	rjmp	.+334    	; 0x10bce <send_mqtt_status(PubSubClient*)+0x176>
   10a80:	6a e0       	ldi	r22, 0x0A	; 10
   10a82:	7c e5       	ldi	r23, 0x5C	; 92
   10a84:	ce 01       	movw	r24, r28
   10a86:	8f 5b       	subi	r24, 0xBF	; 191
   10a88:	9f 4f       	sbci	r25, 0xFF	; 255
   10a8a:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
itoa():
   10a8e:	4a e0       	ldi	r20, 0x0A	; 10
   10a90:	be 01       	movw	r22, r28
   10a92:	6f 5f       	subi	r22, 0xFF	; 255
   10a94:	7f 4f       	sbci	r23, 0xFF	; 255
   10a96:	80 91 73 10 	lds	r24, 0x1073	; 0x801073 <mqtt_send_message>
   10a9a:	90 91 74 10 	lds	r25, 0x1074	; 0x801074 <mqtt_send_message+0x1>
   10a9e:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10aa2:	10 92 74 10 	sts	0x1074, r1	; 0x801074 <mqtt_send_message+0x1>
   10aa6:	10 92 73 10 	sts	0x1073, r1	; 0x801073 <mqtt_send_message>
   10aaa:	ae 01       	movw	r20, r28
   10aac:	4f 5f       	subi	r20, 0xFF	; 255
   10aae:	5f 4f       	sbci	r21, 0xFF	; 255
   10ab0:	be 01       	movw	r22, r28
   10ab2:	6f 5b       	subi	r22, 0xBF	; 191
   10ab4:	7f 4f       	sbci	r23, 0xFF	; 255
   10ab6:	c7 01       	movw	r24, r14
   10ab8:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10abc:	68 ef       	ldi	r22, 0xF8	; 248
   10abe:	7b e5       	ldi	r23, 0x5B	; 91
   10ac0:	ce 01       	movw	r24, r28
   10ac2:	8f 5b       	subi	r24, 0xBF	; 191
   10ac4:	9f 4f       	sbci	r25, 0xFF	; 255
   10ac6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
itoa():
   10aca:	4a e0       	ldi	r20, 0x0A	; 10
   10acc:	be 01       	movw	r22, r28
   10ace:	6f 5f       	subi	r22, 0xFF	; 255
   10ad0:	7f 4f       	sbci	r23, 0xFF	; 255
   10ad2:	80 91 c7 10 	lds	r24, 0x10C7	; 0x8010c7 <mqtt_error>
   10ad6:	90 91 c8 10 	lds	r25, 0x10C8	; 0x8010c8 <mqtt_error+0x1>
   10ada:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10ade:	ae 01       	movw	r20, r28
   10ae0:	4f 5f       	subi	r20, 0xFF	; 255
   10ae2:	5f 4f       	sbci	r21, 0xFF	; 255
   10ae4:	be 01       	movw	r22, r28
   10ae6:	6f 5b       	subi	r22, 0xBF	; 191
   10ae8:	7f 4f       	sbci	r23, 0xFF	; 255
   10aea:	c7 01       	movw	r24, r14
   10aec:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10af0:	64 ee       	ldi	r22, 0xE4	; 228
   10af2:	7b e5       	ldi	r23, 0x5B	; 91
   10af4:	ce 01       	movw	r24, r28
   10af6:	8f 5b       	subi	r24, 0xBF	; 191
   10af8:	9f 4f       	sbci	r25, 0xFF	; 255
   10afa:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
itoa():
   10afe:	4a e0       	ldi	r20, 0x0A	; 10
   10b00:	be 01       	movw	r22, r28
   10b02:	6f 5f       	subi	r22, 0xFF	; 255
   10b04:	7f 4f       	sbci	r23, 0xFF	; 255
   10b06:	80 91 6f 10 	lds	r24, 0x106F	; 0x80106f <mqtt_receive_message>
   10b0a:	90 91 70 10 	lds	r25, 0x1070	; 0x801070 <mqtt_receive_message+0x1>
   10b0e:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10b12:	10 92 70 10 	sts	0x1070, r1	; 0x801070 <mqtt_receive_message+0x1>
   10b16:	10 92 6f 10 	sts	0x106F, r1	; 0x80106f <mqtt_receive_message>
   10b1a:	ae 01       	movw	r20, r28
   10b1c:	4f 5f       	subi	r20, 0xFF	; 255
   10b1e:	5f 4f       	sbci	r21, 0xFF	; 255
   10b20:	be 01       	movw	r22, r28
   10b22:	6f 5b       	subi	r22, 0xBF	; 191
   10b24:	7f 4f       	sbci	r23, 0xFF	; 255
   10b26:	c7 01       	movw	r24, r14
   10b28:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10b2c:	60 ed       	ldi	r22, 0xD0	; 208
   10b2e:	7b e5       	ldi	r23, 0x5B	; 91
   10b30:	ce 01       	movw	r24, r28
   10b32:	8f 5b       	subi	r24, 0xBF	; 191
   10b34:	9f 4f       	sbci	r25, 0xFF	; 255
   10b36:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
itoa():
   10b3a:	4a e0       	ldi	r20, 0x0A	; 10
   10b3c:	be 01       	movw	r22, r28
   10b3e:	6f 5f       	subi	r22, 0xFF	; 255
   10b40:	7f 4f       	sbci	r23, 0xFF	; 255
   10b42:	80 91 6d 10 	lds	r24, 0x106D	; 0x80106d <mqtt_process_message>
   10b46:	90 91 6e 10 	lds	r25, 0x106E	; 0x80106e <mqtt_process_message+0x1>
   10b4a:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10b4e:	10 92 6e 10 	sts	0x106E, r1	; 0x80106e <mqtt_process_message+0x1>
   10b52:	10 92 6d 10 	sts	0x106D, r1	; 0x80106d <mqtt_process_message>
   10b56:	ae 01       	movw	r20, r28
   10b58:	4f 5f       	subi	r20, 0xFF	; 255
   10b5a:	5f 4f       	sbci	r21, 0xFF	; 255
   10b5c:	be 01       	movw	r22, r28
   10b5e:	6f 5b       	subi	r22, 0xBF	; 191
   10b60:	7f 4f       	sbci	r23, 0xFF	; 255
   10b62:	c7 01       	movw	r24, r14
   10b64:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10b68:	19 82       	std	Y+1, r1	; 0x01
   10b6a:	0a e0       	ldi	r16, 0x0A	; 10
   10b6c:	24 e0       	ldi	r18, 0x04	; 4
   10b6e:	4b e7       	ldi	r20, 0x7B	; 123
   10b70:	50 e1       	ldi	r21, 0x10	; 16
   10b72:	6e e2       	ldi	r22, 0x2E	; 46
   10b74:	ce 01       	movw	r24, r28
   10b76:	01 96       	adiw	r24, 0x01	; 1
   10b78:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10b7c:	65 ec       	ldi	r22, 0xC5	; 197
   10b7e:	7b e5       	ldi	r23, 0x5B	; 91
   10b80:	ce 01       	movw	r24, r28
   10b82:	8f 5b       	subi	r24, 0xBF	; 191
   10b84:	9f 4f       	sbci	r25, 0xFF	; 255
   10b86:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10b8a:	ae 01       	movw	r20, r28
   10b8c:	4f 5f       	subi	r20, 0xFF	; 255
   10b8e:	5f 4f       	sbci	r21, 0xFF	; 255
   10b90:	be 01       	movw	r22, r28
   10b92:	6f 5b       	subi	r22, 0xBF	; 191
   10b94:	7f 4f       	sbci	r23, 0xFF	; 255
   10b96:	c7 01       	movw	r24, r14
   10b98:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10b9c:	64 ea       	ldi	r22, 0xA4	; 164
   10b9e:	7b e5       	ldi	r23, 0x5B	; 91
   10ba0:	ce 01       	movw	r24, r28
   10ba2:	8f 5b       	subi	r24, 0xBF	; 191
   10ba4:	9f 4f       	sbci	r25, 0xFF	; 255
   10ba6:	0e 94 55 d7 	call	0x1aeaa	; 0x1aeaa <strcpy_P>
   10baa:	80 91 6c 10 	lds	r24, 0x106C	; 0x80106c <count_know_mqtt>
itoa():
   10bae:	4a e0       	ldi	r20, 0x0A	; 10
   10bb0:	be 01       	movw	r22, r28
   10bb2:	6f 5f       	subi	r22, 0xFF	; 255
   10bb4:	7f 4f       	sbci	r23, 0xFF	; 255
   10bb6:	90 e0       	ldi	r25, 0x00	; 0
   10bb8:	0e 94 de d7 	call	0x1afbc	; 0x1afbc <__itoa_ncheck>
_Z16send_mqtt_statusP12PubSubClient():
   10bbc:	ae 01       	movw	r20, r28
   10bbe:	4f 5f       	subi	r20, 0xFF	; 255
   10bc0:	5f 4f       	sbci	r21, 0xFF	; 255
   10bc2:	be 01       	movw	r22, r28
   10bc4:	6f 5b       	subi	r22, 0xBF	; 191
   10bc6:	7f 4f       	sbci	r23, 0xFF	; 255
   10bc8:	c7 01       	movw	r24, r14
   10bca:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10bce:	10 92 c8 10 	sts	0x10C8, r1	; 0x8010c8 <mqtt_error+0x1>
   10bd2:	10 92 c7 10 	sts	0x10C7, r1	; 0x8010c7 <mqtt_error>
   10bd6:	c0 58       	subi	r28, 0x80	; 128
   10bd8:	df 4f       	sbci	r29, 0xFF	; 255
   10bda:	0f b6       	in	r0, 0x3f	; 63
   10bdc:	f8 94       	cli
   10bde:	de bf       	out	0x3e, r29	; 62
   10be0:	0f be       	out	0x3f, r0	; 63
   10be2:	cd bf       	out	0x3d, r28	; 61
   10be4:	df 91       	pop	r29
   10be6:	cf 91       	pop	r28
   10be8:	0f 91       	pop	r16
   10bea:	ff 90       	pop	r15
   10bec:	ef 90       	pop	r14
   10bee:	08 95       	ret

00010bf0 <know_mqtt_create_or_update(char*, unsigned char)>:
_Z26know_mqtt_create_or_updatePch():
   10bf0:	08 95       	ret

00010bf2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307h():
   10bf2:	af 92       	push	r10
   10bf4:	bf 92       	push	r11
   10bf6:	cf 92       	push	r12
   10bf8:	ef 92       	push	r14
   10bfa:	ff 92       	push	r15
   10bfc:	0f 93       	push	r16
   10bfe:	1f 93       	push	r17
   10c00:	cf 93       	push	r28
   10c02:	df 93       	push	r29
   10c04:	cd b7       	in	r28, 0x3d	; 61
   10c06:	de b7       	in	r29, 0x3e	; 62
   10c08:	6b 97       	sbiw	r28, 0x1b	; 27
   10c0a:	0f b6       	in	r0, 0x3f	; 63
   10c0c:	f8 94       	cli
   10c0e:	de bf       	out	0x3e, r29	; 62
   10c10:	0f be       	out	0x3f, r0	; 63
   10c12:	cd bf       	out	0x3d, r28	; 61
   10c14:	5c 01       	movw	r10, r24
   10c16:	14 2f       	mov	r17, r20
   10c18:	19 82       	std	Y+1, r1	; 0x01
   10c1a:	0a e0       	ldi	r16, 0x0A	; 10
   10c1c:	24 e0       	ldi	r18, 0x04	; 4
   10c1e:	43 ec       	ldi	r20, 0xC3	; 195
   10c20:	50 e1       	ldi	r21, 0x10	; 16
   10c22:	6e e2       	ldi	r22, 0x2E	; 46
   10c24:	ce 01       	movw	r24, r28
   10c26:	01 96       	adiw	r24, 0x01	; 1
   10c28:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10c2c:	c5 01       	movw	r24, r10
   10c2e:	0e 94 8a c9 	call	0x19314	; 0x19314 <NTPClient::begin()>
   10c32:	80 e1       	ldi	r24, 0x10	; 16
   10c34:	9e e0       	ldi	r25, 0x0E	; 14
   10c36:	18 9f       	mul	r17, r24
   10c38:	b0 01       	movw	r22, r0
   10c3a:	19 9f       	mul	r17, r25
   10c3c:	70 0d       	add	r23, r0
   10c3e:	11 24       	eor	r1, r1
   10c40:	c5 01       	movw	r24, r10
   10c42:	0e 94 51 ca 	call	0x194a2	; 0x194a2 <NTPClient::setTimeOffset(int)>
   10c46:	be 01       	movw	r22, r28
   10c48:	6f 5f       	subi	r22, 0xFF	; 255
   10c4a:	7f 4f       	sbci	r23, 0xFF	; 255
   10c4c:	c5 01       	movw	r24, r10
   10c4e:	0e 94 61 ca 	call	0x194c2	; 0x194c2 <NTPClient::setPoolServerName(char const*)>
   10c52:	c5 01       	movw	r24, r10
   10c54:	0e 94 18 cb 	call	0x19630	; 0x19630 <NTPClient::update()>
   10c58:	10 e0       	ldi	r17, 0x00	; 0
   10c5a:	88 23       	and	r24, r24
   10c5c:	91 f1       	breq	.+100    	; 0x10cc2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char)+0xd0>
   10c5e:	c5 01       	movw	r24, r10
   10c60:	0e 94 37 ca 	call	0x1946e	; 0x1946e <NTPClient::getSeconds() const>
   10c64:	c8 2e       	mov	r12, r24
   10c66:	c5 01       	movw	r24, r10
   10c68:	0e 94 27 ca 	call	0x1944e	; 0x1944e <NTPClient::getMinutes() const>
   10c6c:	e8 2e       	mov	r14, r24
   10c6e:	c5 01       	movw	r24, r10
   10c70:	0e 94 17 ca 	call	0x1942e	; 0x1942e <NTPClient::getHours() const>
   10c74:	08 2f       	mov	r16, r24
   10c76:	c5 01       	movw	r24, r10
   10c78:	0e 94 fb c9 	call	0x193f6	; 0x193f6 <NTPClient::getDate() const>
   10c7c:	f8 2e       	mov	r15, r24
   10c7e:	c5 01       	movw	r24, r10
   10c80:	0e 94 de c9 	call	0x193bc	; 0x193bc <NTPClient::getMonth() const>
   10c84:	18 2f       	mov	r17, r24
   10c86:	c5 01       	movw	r24, r10
   10c88:	0e 94 c2 c9 	call	0x19384	; 0x19384 <NTPClient::getYear() const>
   10c8c:	2f 2d       	mov	r18, r15
   10c8e:	41 2f       	mov	r20, r17
   10c90:	bc 01       	movw	r22, r24
   10c92:	ce 01       	movw	r24, r28
   10c94:	45 96       	adiw	r24, 0x15	; 21
   10c96:	0e 94 f4 c1 	call	0x183e8	; 0x183e8 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
   10c9a:	ce 01       	movw	r24, r28
   10c9c:	45 96       	adiw	r24, 0x15	; 21
   10c9e:	0e 94 1b c2 	call	0x18436	; 0x18436 <RTC_DS1307::adjust(DateTime const&)>
   10ca2:	c5 01       	movw	r24, r10
   10ca4:	0e 94 c2 c9 	call	0x19384	; 0x19384 <NTPClient::getYear() const>
   10ca8:	9f 93       	push	r25
   10caa:	8f 93       	push	r24
   10cac:	85 e1       	ldi	r24, 0x15	; 21
   10cae:	98 e0       	ldi	r25, 0x08	; 8
   10cb0:	9f 93       	push	r25
   10cb2:	8f 93       	push	r24
   10cb4:	0e 94 56 d8 	call	0x1b0ac	; 0x1b0ac <printf>
   10cb8:	0f 90       	pop	r0
   10cba:	0f 90       	pop	r0
   10cbc:	0f 90       	pop	r0
   10cbe:	0f 90       	pop	r0
   10cc0:	11 e0       	ldi	r17, 0x01	; 1
   10cc2:	c5 01       	movw	r24, r10
   10cc4:	0e 94 41 ca 	call	0x19482	; 0x19482 <NTPClient::end()>
   10cc8:	81 2f       	mov	r24, r17
   10cca:	6b 96       	adiw	r28, 0x1b	; 27
   10ccc:	0f b6       	in	r0, 0x3f	; 63
   10cce:	f8 94       	cli
   10cd0:	de bf       	out	0x3e, r29	; 62
   10cd2:	0f be       	out	0x3f, r0	; 63
   10cd4:	cd bf       	out	0x3d, r28	; 61
   10cd6:	df 91       	pop	r29
   10cd8:	cf 91       	pop	r28
   10cda:	1f 91       	pop	r17
   10cdc:	0f 91       	pop	r16
   10cde:	ff 90       	pop	r15
   10ce0:	ef 90       	pop	r14
   10ce2:	cf 90       	pop	r12
   10ce4:	bf 90       	pop	r11
   10ce6:	af 90       	pop	r10
   10ce8:	08 95       	ret

00010cea <ntp_check(NTPClient*)>:
_Z9ntp_checkP9NTPClient():
   10cea:	ef 92       	push	r14
   10cec:	ff 92       	push	r15
   10cee:	0f 93       	push	r16
   10cf0:	1f 93       	push	r17
   10cf2:	cf 93       	push	r28
   10cf4:	df 93       	push	r29
   10cf6:	cd b7       	in	r28, 0x3d	; 61
   10cf8:	de b7       	in	r29, 0x3e	; 62
   10cfa:	64 97       	sbiw	r28, 0x14	; 20
   10cfc:	0f b6       	in	r0, 0x3f	; 63
   10cfe:	f8 94       	cli
   10d00:	de bf       	out	0x3e, r29	; 62
   10d02:	0f be       	out	0x3f, r0	; 63
   10d04:	cd bf       	out	0x3d, r28	; 61
   10d06:	7c 01       	movw	r14, r24
   10d08:	19 82       	std	Y+1, r1	; 0x01
   10d0a:	0a e0       	ldi	r16, 0x0A	; 10
   10d0c:	24 e0       	ldi	r18, 0x04	; 4
   10d0e:	43 ec       	ldi	r20, 0xC3	; 195
   10d10:	50 e1       	ldi	r21, 0x10	; 16
   10d12:	6e e2       	ldi	r22, 0x2E	; 46
   10d14:	ce 01       	movw	r24, r28
   10d16:	01 96       	adiw	r24, 0x01	; 1
   10d18:	0e 94 2e b7 	call	0x16e5c	; 0x16e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
   10d1c:	c7 01       	movw	r24, r14
   10d1e:	0e 94 8a c9 	call	0x19314	; 0x19314 <NTPClient::begin()>
   10d22:	60 e1       	ldi	r22, 0x10	; 16
   10d24:	7e e0       	ldi	r23, 0x0E	; 14
   10d26:	c7 01       	movw	r24, r14
   10d28:	0e 94 51 ca 	call	0x194a2	; 0x194a2 <NTPClient::setTimeOffset(int)>
   10d2c:	be 01       	movw	r22, r28
   10d2e:	6f 5f       	subi	r22, 0xFF	; 255
   10d30:	7f 4f       	sbci	r23, 0xFF	; 255
   10d32:	c7 01       	movw	r24, r14
   10d34:	0e 94 61 ca 	call	0x194c2	; 0x194c2 <NTPClient::setPoolServerName(char const*)>
   10d38:	41 e0       	ldi	r20, 0x01	; 1
   10d3a:	50 e0       	ldi	r21, 0x00	; 0
   10d3c:	60 e0       	ldi	r22, 0x00	; 0
   10d3e:	70 e0       	ldi	r23, 0x00	; 0
   10d40:	c7 01       	movw	r24, r14
   10d42:	0e 94 5b ca 	call	0x194b6	; 0x194b6 <NTPClient::setUpdateInterval(unsigned long)>
   10d46:	c7 01       	movw	r24, r14
   10d48:	0e 94 18 cb 	call	0x19630	; 0x19630 <NTPClient::update()>
   10d4c:	18 2f       	mov	r17, r24
   10d4e:	c7 01       	movw	r24, r14
   10d50:	0e 94 41 ca 	call	0x19482	; 0x19482 <NTPClient::end()>
   10d54:	81 2f       	mov	r24, r17
   10d56:	64 96       	adiw	r28, 0x14	; 20
   10d58:	0f b6       	in	r0, 0x3f	; 63
   10d5a:	f8 94       	cli
   10d5c:	de bf       	out	0x3e, r29	; 62
   10d5e:	0f be       	out	0x3f, r0	; 63
   10d60:	cd bf       	out	0x3d, r28	; 61
   10d62:	df 91       	pop	r29
   10d64:	cf 91       	pop	r28
   10d66:	1f 91       	pop	r17
   10d68:	0f 91       	pop	r16
   10d6a:	ff 90       	pop	r15
   10d6c:	ef 90       	pop	r14
   10d6e:	08 95       	ret

00010d70 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
   10d70:	cf 93       	push	r28
   10d72:	df 93       	push	r29
   10d74:	cd b7       	in	r28, 0x3d	; 61
   10d76:	de b7       	in	r29, 0x3e	; 62
   10d78:	60 97       	sbiw	r28, 0x10	; 16
   10d7a:	0f b6       	in	r0, 0x3f	; 63
   10d7c:	f8 94       	cli
   10d7e:	de bf       	out	0x3e, r29	; 62
   10d80:	0f be       	out	0x3f, r0	; 63
   10d82:	cd bf       	out	0x3d, r28	; 61
   10d84:	90 91 6b 10 	lds	r25, 0x106B	; 0x80106b <mqtt_log_cnt>
   10d88:	e9 2f       	mov	r30, r25
   10d8a:	f0 e0       	ldi	r31, 0x00	; 0
   10d8c:	e5 51       	subi	r30, 0x15	; 21
   10d8e:	f0 4f       	sbci	r31, 0xF0	; 240
   10d90:	80 83       	st	Z, r24
   10d92:	11 82       	std	Z+1, r1	; 0x01
   10d94:	9f 5f       	subi	r25, 0xFF	; 255
   10d96:	90 93 6b 10 	sts	0x106B, r25	; 0x80106b <mqtt_log_cnt>
   10d9a:	97 fd       	sbrc	r25, 7
   10d9c:	04 c0       	rjmp	.+8      	; 0x10da6 <printf_via_mqtt(char, __file*)+0x36>
   10d9e:	8a 30       	cpi	r24, 0x0A	; 10
   10da0:	11 f0       	breq	.+4      	; 0x10da6 <printf_via_mqtt(char, __file*)+0x36>
   10da2:	81 11       	cpse	r24, r1
   10da4:	13 c0       	rjmp	.+38     	; 0x10dcc <printf_via_mqtt(char, __file*)+0x5c>
   10da6:	6a e1       	ldi	r22, 0x1A	; 26
   10da8:	78 e0       	ldi	r23, 0x08	; 8
   10daa:	ce 01       	movw	r24, r28
   10dac:	01 96       	adiw	r24, 0x01	; 1
   10dae:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   10db2:	4b ee       	ldi	r20, 0xEB	; 235
   10db4:	5f e0       	ldi	r21, 0x0F	; 15
   10db6:	be 01       	movw	r22, r28
   10db8:	6f 5f       	subi	r22, 0xFF	; 255
   10dba:	7f 4f       	sbci	r23, 0xFF	; 255
   10dbc:	80 91 e9 0f 	lds	r24, 0x0FE9	; 0x800fe9 <pub_mqtt_client>
   10dc0:	90 91 ea 0f 	lds	r25, 0x0FEA	; 0x800fea <pub_mqtt_client+0x1>
   10dc4:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10dc8:	10 92 6b 10 	sts	0x106B, r1	; 0x80106b <mqtt_log_cnt>
   10dcc:	60 96       	adiw	r28, 0x10	; 16
   10dce:	0f b6       	in	r0, 0x3f	; 63
   10dd0:	f8 94       	cli
   10dd2:	de bf       	out	0x3e, r29	; 62
   10dd4:	0f be       	out	0x3f, r0	; 63
   10dd6:	cd bf       	out	0x3d, r28	; 61
   10dd8:	df 91       	pop	r29
   10dda:	cf 91       	pop	r28
   10ddc:	08 95       	ret

00010dde <log_error(PubSubClient*, char*)>:
_Z9log_errorP12PubSubClientPc():
   10dde:	ef 92       	push	r14
   10de0:	ff 92       	push	r15
   10de2:	0f 93       	push	r16
   10de4:	1f 93       	push	r17
   10de6:	cf 93       	push	r28
   10de8:	df 93       	push	r29
   10dea:	00 d0       	rcall	.+0      	; 0x10dec <log_error(PubSubClient*, char*)+0xe>
   10dec:	00 d0       	rcall	.+0      	; 0x10dee <log_error(PubSubClient*, char*)+0x10>
   10dee:	00 d0       	rcall	.+0      	; 0x10df0 <log_error(PubSubClient*, char*)+0x12>
   10df0:	cd b7       	in	r28, 0x3d	; 61
   10df2:	de b7       	in	r29, 0x3e	; 62
   10df4:	8c 01       	movw	r16, r24
   10df6:	7b 01       	movw	r14, r22
   10df8:	65 e2       	ldi	r22, 0x25	; 37
   10dfa:	78 e0       	ldi	r23, 0x08	; 8
   10dfc:	ce 01       	movw	r24, r28
   10dfe:	01 96       	adiw	r24, 0x01	; 1
   10e00:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   10e04:	a7 01       	movw	r20, r14
   10e06:	be 01       	movw	r22, r28
   10e08:	6f 5f       	subi	r22, 0xFF	; 255
   10e0a:	7f 4f       	sbci	r23, 0xFF	; 255
   10e0c:	c8 01       	movw	r24, r16
   10e0e:	0e 94 c3 83 	call	0x10786	; 0x10786 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   10e12:	29 96       	adiw	r28, 0x09	; 9
   10e14:	0f b6       	in	r0, 0x3f	; 63
   10e16:	f8 94       	cli
   10e18:	de bf       	out	0x3e, r29	; 62
   10e1a:	0f be       	out	0x3f, r0	; 63
   10e1c:	cd bf       	out	0x3d, r28	; 61
   10e1e:	df 91       	pop	r29
   10e20:	cf 91       	pop	r28
   10e22:	1f 91       	pop	r17
   10e24:	0f 91       	pop	r16
   10e26:	ff 90       	pop	r15
   10e28:	ef 90       	pop	r14
   10e2a:	08 95       	ret

00010e2c <mqtt_set_public_mqtt_client(PubSubClient*)>:
_Z27mqtt_set_public_mqtt_clientP12PubSubClient():
   10e2c:	90 93 ea 0f 	sts	0x0FEA, r25	; 0x800fea <pub_mqtt_client+0x1>
   10e30:	80 93 e9 0f 	sts	0x0FE9, r24	; 0x800fe9 <pub_mqtt_client>
   10e34:	08 95       	ret

00010e36 <_GLOBAL__sub_I_mqtt_error>:
_GLOBAL__sub_I_mqtt_error():
   10e36:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   10e38:	00 e0       	ldi	r16, 0x00	; 0
   10e3a:	20 e0       	ldi	r18, 0x00	; 0
   10e3c:	40 e0       	ldi	r20, 0x00	; 0
   10e3e:	60 e0       	ldi	r22, 0x00	; 0
   10e40:	89 ec       	ldi	r24, 0xC9	; 201
   10e42:	90 e1       	ldi	r25, 0x10	; 16
   10e44:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN16struct_my_deviceC4Ev():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.h:55
#define TYPE_THERMCTL 1
#define TYPE_TERMBIG 2
#define TYPE_BRANA 3
#define TYPE_MASTER 4

typedef struct struct_my_device
   10e48:	8b e5       	ldi	r24, 0x5B	; 91
   10e4a:	97 e0       	ldi	r25, 0x07	; 7
   10e4c:	90 93 9a 10 	sts	0x109A, r25	; 0x80109a <device+0x25>
   10e50:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <device+0x24>
_GLOBAL__sub_I_mqtt_error():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:466
   10e54:	0f 91       	pop	r16
   10e56:	08 95       	ret

00010e58 <_GLOBAL__sub_I_scan_rf_net_enable>:
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
      strcat(payload, tmp1);
      strcat(payload, " ");
    }
    send_mqtt_general_payload(mqtt_client, topic, payload);
  }
}
   10e58:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   10e5a:	00 e0       	ldi	r16, 0x00	; 0
   10e5c:	20 e0       	ldi	r18, 0x00	; 0
   10e5e:	40 e0       	ldi	r20, 0x00	; 0
   10e60:	60 e0       	ldi	r22, 0x00	; 0
   10e62:	8f ec       	ldi	r24, 0xCF	; 207
   10e64:	90 e1       	ldi	r25, 0x10	; 16
   10e66:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I_scan_rf_net_enable():
/tmp/arduino_build_41303/sketch/saric_nrf.cpp:93
   10e6a:	0f 91       	pop	r16
   10e6c:	08 95       	ret

00010e6e <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:199
}

uint8_t tds_get_idx_from_wrom(uint8_t id)
{
  return w_rom[id].tds_idx;
}
   10e6e:	0c 94 68 df 	jmp	0x1bed0	; 0x1bed0 <eeprom_read_byte>

00010e72 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   10e72:	0c 94 70 df 	jmp	0x1bee0	; 0x1bee0 <eeprom_write_byte>

00010e76 <count_use_tds()>:
_Z13count_use_tdsv():
   10e76:	1f 93       	push	r17
   10e78:	cf 93       	push	r28
   10e7a:	df 93       	push	r29
   10e7c:	c8 ec       	ldi	r28, 0xC8	; 200
   10e7e:	d0 e0       	ldi	r29, 0x00	; 0
   10e80:	10 e0       	ldi	r17, 0x00	; 0
   10e82:	ce 01       	movw	r24, r28
   10e84:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10e88:	81 30       	cpi	r24, 0x01	; 1
   10e8a:	09 f4       	brne	.+2      	; 0x10e8e <count_use_tds()+0x18>
   10e8c:	1f 5f       	subi	r17, 0xFF	; 255
   10e8e:	66 96       	adiw	r28, 0x16	; 22
   10e90:	cc 34       	cpi	r28, 0x4C	; 76
   10e92:	81 e0       	ldi	r24, 0x01	; 1
   10e94:	d8 07       	cpc	r29, r24
   10e96:	a9 f7       	brne	.-22     	; 0x10e82 <count_use_tds()+0xc>
   10e98:	81 2f       	mov	r24, r17
   10e9a:	df 91       	pop	r29
   10e9c:	cf 91       	pop	r28
   10e9e:	1f 91       	pop	r17
   10ea0:	08 95       	ret

00010ea2 <tds_used(unsigned char)>:
_Z8tds_usedh():
   10ea2:	86 30       	cpi	r24, 0x06	; 6
   10ea4:	40 f4       	brcc	.+16     	; 0x10eb6 <tds_used(unsigned char)+0x14>
   10ea6:	26 e1       	ldi	r18, 0x16	; 22
   10ea8:	82 9f       	mul	r24, r18
   10eaa:	c0 01       	movw	r24, r0
   10eac:	11 24       	eor	r1, r1
   10eae:	88 53       	subi	r24, 0x38	; 56
   10eb0:	9f 4f       	sbci	r25, 0xFF	; 255
   10eb2:	0c 94 37 87 	jmp	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10eb6:	08 95       	ret

00010eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
   10eb8:	af 92       	push	r10
   10eba:	bf 92       	push	r11
   10ebc:	cf 92       	push	r12
   10ebe:	df 92       	push	r13
   10ec0:	ef 92       	push	r14
   10ec2:	ff 92       	push	r15
   10ec4:	0f 93       	push	r16
   10ec6:	1f 93       	push	r17
   10ec8:	cf 93       	push	r28
   10eca:	df 93       	push	r29
   10ecc:	86 30       	cpi	r24, 0x06	; 6
   10ece:	08 f0       	brcs	.+2      	; 0x10ed2 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   10ed0:	56 c0       	rjmp	.+172    	; 0x10f7e <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
   10ed2:	8b 01       	movw	r16, r22
   10ed4:	96 e1       	ldi	r25, 0x16	; 22
   10ed6:	89 9f       	mul	r24, r25
   10ed8:	e0 01       	movw	r28, r0
   10eda:	11 24       	eor	r1, r1
   10edc:	ce 01       	movw	r24, r28
   10ede:	88 53       	subi	r24, 0x38	; 56
   10ee0:	9f 4f       	sbci	r25, 0xFF	; 255
   10ee2:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10ee6:	f8 01       	movw	r30, r16
   10ee8:	81 93       	st	Z+, r24
   10eea:	6f 01       	movw	r12, r30
   10eec:	7e 01       	movw	r14, r28
   10eee:	f9 ec       	ldi	r31, 0xC9	; 201
   10ef0:	ef 0e       	add	r14, r31
   10ef2:	f1 1c       	adc	r15, r1
   10ef4:	5e 01       	movw	r10, r28
   10ef6:	81 ed       	ldi	r24, 0xD1	; 209
   10ef8:	a8 0e       	add	r10, r24
   10efa:	b1 1c       	adc	r11, r1
   10efc:	c7 01       	movw	r24, r14
   10efe:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10f02:	f6 01       	movw	r30, r12
   10f04:	81 93       	st	Z+, r24
   10f06:	6f 01       	movw	r12, r30
   10f08:	c7 01       	movw	r24, r14
   10f0a:	0b 96       	adiw	r24, 0x0b	; 11
   10f0c:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10f10:	f6 01       	movw	r30, r12
   10f12:	82 87       	std	Z+10, r24	; 0x0a
   10f14:	ff ef       	ldi	r31, 0xFF	; 255
   10f16:	ef 1a       	sub	r14, r31
   10f18:	ff 0a       	sbc	r15, r31
   10f1a:	ea 14       	cp	r14, r10
   10f1c:	fb 04       	cpc	r15, r11
   10f1e:	71 f7       	brne	.-36     	; 0x10efc <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
   10f20:	f8 01       	movw	r30, r16
   10f22:	13 8a       	std	Z+19, r1	; 0x13
   10f24:	c7 01       	movw	r24, r14
   10f26:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10f2a:	f8 01       	movw	r30, r16
   10f2c:	81 87       	std	Z+9, r24	; 0x09
   10f2e:	ce 01       	movw	r24, r28
   10f30:	8e 52       	subi	r24, 0x2E	; 46
   10f32:	9f 4f       	sbci	r25, 0xFF	; 255
   10f34:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10f38:	f8 2e       	mov	r15, r24
   10f3a:	ce 01       	movw	r24, r28
   10f3c:	8d 52       	subi	r24, 0x2D	; 45
   10f3e:	9f 4f       	sbci	r25, 0xFF	; 255
   10f40:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10f44:	2f 2d       	mov	r18, r15
   10f46:	30 e0       	ldi	r19, 0x00	; 0
   10f48:	32 2f       	mov	r19, r18
   10f4a:	22 27       	eor	r18, r18
   10f4c:	82 0f       	add	r24, r18
   10f4e:	93 2f       	mov	r25, r19
   10f50:	91 1d       	adc	r25, r1
   10f52:	f8 01       	movw	r30, r16
   10f54:	93 87       	std	Z+11, r25	; 0x0b
   10f56:	82 87       	std	Z+10, r24	; 0x0a
   10f58:	ce 01       	movw	r24, r28
   10f5a:	84 52       	subi	r24, 0x24	; 36
   10f5c:	9f 4f       	sbci	r25, 0xFF	; 255
   10f5e:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EEPROMClass::read(int) [clone .isra.0]>
   10f62:	f8 01       	movw	r30, r16
   10f64:	84 8b       	std	Z+20, r24	; 0x14
   10f66:	81 e0       	ldi	r24, 0x01	; 1
   10f68:	df 91       	pop	r29
   10f6a:	cf 91       	pop	r28
   10f6c:	1f 91       	pop	r17
   10f6e:	0f 91       	pop	r16
   10f70:	ff 90       	pop	r15
   10f72:	ef 90       	pop	r14
   10f74:	df 90       	pop	r13
   10f76:	cf 90       	pop	r12
   10f78:	bf 90       	pop	r11
   10f7a:	af 90       	pop	r10
   10f7c:	08 95       	ret
   10f7e:	80 e0       	ldi	r24, 0x00	; 0
   10f80:	f3 cf       	rjmp	.-26     	; 0x10f68 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

00010f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
   10f82:	af 92       	push	r10
   10f84:	bf 92       	push	r11
   10f86:	cf 92       	push	r12
   10f88:	df 92       	push	r13
   10f8a:	ef 92       	push	r14
   10f8c:	ff 92       	push	r15
   10f8e:	0f 93       	push	r16
   10f90:	1f 93       	push	r17
   10f92:	cf 93       	push	r28
   10f94:	df 93       	push	r29
   10f96:	86 30       	cpi	r24, 0x06	; 6
   10f98:	08 f0       	brcs	.+2      	; 0x10f9c <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
   10f9a:	49 c0       	rjmp	.+146    	; 0x1102e <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
   10f9c:	6b 01       	movw	r12, r22
   10f9e:	96 e1       	ldi	r25, 0x16	; 22
   10fa0:	89 9f       	mul	r24, r25
   10fa2:	e0 01       	movw	r28, r0
   10fa4:	11 24       	eor	r1, r1
   10fa6:	f6 01       	movw	r30, r12
   10fa8:	61 91       	ld	r22, Z+
   10faa:	7f 01       	movw	r14, r30
   10fac:	ce 01       	movw	r24, r28
   10fae:	88 53       	subi	r24, 0x38	; 56
   10fb0:	9f 4f       	sbci	r25, 0xFF	; 255
   10fb2:	0e 94 39 87 	call	0x10e72	; 0x10e72 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10fb6:	8e 01       	movw	r16, r28
   10fb8:	07 53       	subi	r16, 0x37	; 55
   10fba:	1f 4f       	sbci	r17, 0xFF	; 255
   10fbc:	5e 01       	movw	r10, r28
   10fbe:	f1 ed       	ldi	r31, 0xD1	; 209
   10fc0:	af 0e       	add	r10, r31
   10fc2:	b1 1c       	adc	r11, r1
   10fc4:	f7 01       	movw	r30, r14
   10fc6:	61 91       	ld	r22, Z+
   10fc8:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   10fca:	c8 01       	movw	r24, r16
   10fcc:	0e 94 70 df 	call	0x1bee0	; 0x1bee0 <eeprom_write_byte>
   10fd0:	f7 01       	movw	r30, r14
   10fd2:	62 85       	ldd	r22, Z+10	; 0x0a
   10fd4:	c8 01       	movw	r24, r16
   10fd6:	0b 96       	adiw	r24, 0x0b	; 11
   10fd8:	0e 94 70 df 	call	0x1bee0	; 0x1bee0 <eeprom_write_byte>
   10fdc:	0f 5f       	subi	r16, 0xFF	; 255
   10fde:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12set_tds18s20hP15struct_DDS18s20():
   10fe0:	0a 15       	cp	r16, r10
   10fe2:	1b 05       	cpc	r17, r11
   10fe4:	79 f7       	brne	.-34     	; 0x10fc4 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
   10fe6:	f6 01       	movw	r30, r12
   10fe8:	61 85       	ldd	r22, Z+9	; 0x09
   10fea:	c8 01       	movw	r24, r16
   10fec:	0e 94 39 87 	call	0x10e72	; 0x10e72 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10ff0:	f6 01       	movw	r30, r12
   10ff2:	63 85       	ldd	r22, Z+11	; 0x0b
   10ff4:	ce 01       	movw	r24, r28
   10ff6:	8e 52       	subi	r24, 0x2E	; 46
   10ff8:	9f 4f       	sbci	r25, 0xFF	; 255
   10ffa:	0e 94 39 87 	call	0x10e72	; 0x10e72 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   10ffe:	f6 01       	movw	r30, r12
   11000:	62 85       	ldd	r22, Z+10	; 0x0a
   11002:	ce 01       	movw	r24, r28
   11004:	8d 52       	subi	r24, 0x2D	; 45
   11006:	9f 4f       	sbci	r25, 0xFF	; 255
   11008:	0e 94 39 87 	call	0x10e72	; 0x10e72 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1100c:	f6 01       	movw	r30, r12
   1100e:	64 89       	ldd	r22, Z+20	; 0x14
   11010:	ce 01       	movw	r24, r28
   11012:	84 52       	subi	r24, 0x24	; 36
   11014:	9f 4f       	sbci	r25, 0xFF	; 255
   11016:	df 91       	pop	r29
   11018:	cf 91       	pop	r28
   1101a:	1f 91       	pop	r17
   1101c:	0f 91       	pop	r16
   1101e:	ff 90       	pop	r15
   11020:	ef 90       	pop	r14
   11022:	df 90       	pop	r13
   11024:	cf 90       	pop	r12
   11026:	bf 90       	pop	r11
   11028:	af 90       	pop	r10
   1102a:	0c 94 39 87 	jmp	0x10e72	; 0x10e72 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
   1102e:	df 91       	pop	r29
   11030:	cf 91       	pop	r28
   11032:	1f 91       	pop	r17
   11034:	0f 91       	pop	r16
   11036:	ff 90       	pop	r15
   11038:	ef 90       	pop	r14
   1103a:	df 90       	pop	r13
   1103c:	cf 90       	pop	r12
   1103e:	bf 90       	pop	r11
   11040:	af 90       	pop	r10
   11042:	08 95       	ret

00011044 <tds_get_name(unsigned char, char*)>:
_Z12tds_get_namehPc():
   11044:	0f 93       	push	r16
   11046:	1f 93       	push	r17
   11048:	cf 93       	push	r28
   1104a:	df 93       	push	r29
   1104c:	cd b7       	in	r28, 0x3d	; 61
   1104e:	de b7       	in	r29, 0x3e	; 62
   11050:	66 97       	sbiw	r28, 0x16	; 22
   11052:	0f b6       	in	r0, 0x3f	; 63
   11054:	f8 94       	cli
   11056:	de bf       	out	0x3e, r29	; 62
   11058:	0f be       	out	0x3f, r0	; 63
   1105a:	cd bf       	out	0x3d, r28	; 61
   1105c:	8b 01       	movw	r16, r22
   1105e:	be 01       	movw	r22, r28
   11060:	6f 5f       	subi	r22, 0xFF	; 255
   11062:	7f 4f       	sbci	r23, 0xFF	; 255
   11064:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11068:	be 01       	movw	r22, r28
   1106a:	63 5f       	subi	r22, 0xF3	; 243
   1106c:	7f 4f       	sbci	r23, 0xFF	; 255
   1106e:	c8 01       	movw	r24, r16
   11070:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   11074:	66 96       	adiw	r28, 0x16	; 22
   11076:	0f b6       	in	r0, 0x3f	; 63
   11078:	f8 94       	cli
   1107a:	de bf       	out	0x3e, r29	; 62
   1107c:	0f be       	out	0x3f, r0	; 63
   1107e:	cd bf       	out	0x3d, r28	; 61
   11080:	df 91       	pop	r29
   11082:	cf 91       	pop	r28
   11084:	1f 91       	pop	r17
   11086:	0f 91       	pop	r16
   11088:	08 95       	ret

0001108a <tds_set_name(unsigned char, char*)>:
_Z12tds_set_namehPc():
   1108a:	ef 92       	push	r14
   1108c:	ff 92       	push	r15
   1108e:	1f 93       	push	r17
   11090:	cf 93       	push	r28
   11092:	df 93       	push	r29
   11094:	cd b7       	in	r28, 0x3d	; 61
   11096:	de b7       	in	r29, 0x3e	; 62
   11098:	66 97       	sbiw	r28, 0x16	; 22
   1109a:	0f b6       	in	r0, 0x3f	; 63
   1109c:	f8 94       	cli
   1109e:	de bf       	out	0x3e, r29	; 62
   110a0:	0f be       	out	0x3f, r0	; 63
   110a2:	cd bf       	out	0x3d, r28	; 61
   110a4:	18 2f       	mov	r17, r24
   110a6:	7b 01       	movw	r14, r22
   110a8:	be 01       	movw	r22, r28
   110aa:	6f 5f       	subi	r22, 0xFF	; 255
   110ac:	7f 4f       	sbci	r23, 0xFF	; 255
   110ae:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   110b2:	b7 01       	movw	r22, r14
   110b4:	ce 01       	movw	r24, r28
   110b6:	0d 96       	adiw	r24, 0x0d	; 13
   110b8:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   110bc:	be 01       	movw	r22, r28
   110be:	6f 5f       	subi	r22, 0xFF	; 255
   110c0:	7f 4f       	sbci	r23, 0xFF	; 255
   110c2:	81 2f       	mov	r24, r17
   110c4:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   110c8:	66 96       	adiw	r28, 0x16	; 22
   110ca:	0f b6       	in	r0, 0x3f	; 63
   110cc:	f8 94       	cli
   110ce:	de bf       	out	0x3e, r29	; 62
   110d0:	0f be       	out	0x3f, r0	; 63
   110d2:	cd bf       	out	0x3d, r28	; 61
   110d4:	df 91       	pop	r29
   110d6:	cf 91       	pop	r28
   110d8:	1f 91       	pop	r17
   110da:	ff 90       	pop	r15
   110dc:	ef 90       	pop	r14
   110de:	08 95       	ret

000110e0 <tds_set_offset(unsigned char, int)>:
_Z14tds_set_offsethi():
   110e0:	ef 92       	push	r14
   110e2:	ff 92       	push	r15
   110e4:	1f 93       	push	r17
   110e6:	cf 93       	push	r28
   110e8:	df 93       	push	r29
   110ea:	cd b7       	in	r28, 0x3d	; 61
   110ec:	de b7       	in	r29, 0x3e	; 62
   110ee:	66 97       	sbiw	r28, 0x16	; 22
   110f0:	0f b6       	in	r0, 0x3f	; 63
   110f2:	f8 94       	cli
   110f4:	de bf       	out	0x3e, r29	; 62
   110f6:	0f be       	out	0x3f, r0	; 63
   110f8:	cd bf       	out	0x3d, r28	; 61
   110fa:	18 2f       	mov	r17, r24
   110fc:	7b 01       	movw	r14, r22
   110fe:	be 01       	movw	r22, r28
   11100:	6f 5f       	subi	r22, 0xFF	; 255
   11102:	7f 4f       	sbci	r23, 0xFF	; 255
   11104:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11108:	fc 86       	std	Y+12, r15	; 0x0c
   1110a:	eb 86       	std	Y+11, r14	; 0x0b
   1110c:	be 01       	movw	r22, r28
   1110e:	6f 5f       	subi	r22, 0xFF	; 255
   11110:	7f 4f       	sbci	r23, 0xFF	; 255
   11112:	81 2f       	mov	r24, r17
   11114:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11118:	66 96       	adiw	r28, 0x16	; 22
   1111a:	0f b6       	in	r0, 0x3f	; 63
   1111c:	f8 94       	cli
   1111e:	de bf       	out	0x3e, r29	; 62
   11120:	0f be       	out	0x3f, r0	; 63
   11122:	cd bf       	out	0x3d, r28	; 61
   11124:	df 91       	pop	r29
   11126:	cf 91       	pop	r28
   11128:	1f 91       	pop	r17
   1112a:	ff 90       	pop	r15
   1112c:	ef 90       	pop	r14
   1112e:	08 95       	ret

00011130 <tds_get_offset(unsigned char)>:
_Z14tds_get_offseth():
   11130:	cf 93       	push	r28
   11132:	df 93       	push	r29
   11134:	cd b7       	in	r28, 0x3d	; 61
   11136:	de b7       	in	r29, 0x3e	; 62
   11138:	66 97       	sbiw	r28, 0x16	; 22
   1113a:	0f b6       	in	r0, 0x3f	; 63
   1113c:	f8 94       	cli
   1113e:	de bf       	out	0x3e, r29	; 62
   11140:	0f be       	out	0x3f, r0	; 63
   11142:	cd bf       	out	0x3d, r28	; 61
   11144:	be 01       	movw	r22, r28
   11146:	6f 5f       	subi	r22, 0xFF	; 255
   11148:	7f 4f       	sbci	r23, 0xFF	; 255
   1114a:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1114e:	8b 85       	ldd	r24, Y+11	; 0x0b
   11150:	9c 85       	ldd	r25, Y+12	; 0x0c
   11152:	66 96       	adiw	r28, 0x16	; 22
   11154:	0f b6       	in	r0, 0x3f	; 63
   11156:	f8 94       	cli
   11158:	de bf       	out	0x3e, r29	; 62
   1115a:	0f be       	out	0x3f, r0	; 63
   1115c:	cd bf       	out	0x3d, r28	; 61
   1115e:	df 91       	pop	r29
   11160:	cf 91       	pop	r28
   11162:	08 95       	ret

00011164 <tds_set_period(unsigned char, unsigned char)>:
_Z14tds_set_periodhh():
   11164:	0f 93       	push	r16
   11166:	1f 93       	push	r17
   11168:	cf 93       	push	r28
   1116a:	df 93       	push	r29
   1116c:	cd b7       	in	r28, 0x3d	; 61
   1116e:	de b7       	in	r29, 0x3e	; 62
   11170:	66 97       	sbiw	r28, 0x16	; 22
   11172:	0f b6       	in	r0, 0x3f	; 63
   11174:	f8 94       	cli
   11176:	de bf       	out	0x3e, r29	; 62
   11178:	0f be       	out	0x3f, r0	; 63
   1117a:	cd bf       	out	0x3d, r28	; 61
   1117c:	18 2f       	mov	r17, r24
   1117e:	06 2f       	mov	r16, r22
   11180:	be 01       	movw	r22, r28
   11182:	6f 5f       	subi	r22, 0xFF	; 255
   11184:	7f 4f       	sbci	r23, 0xFF	; 255
   11186:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1118a:	0d 8b       	std	Y+21, r16	; 0x15
   1118c:	be 01       	movw	r22, r28
   1118e:	6f 5f       	subi	r22, 0xFF	; 255
   11190:	7f 4f       	sbci	r23, 0xFF	; 255
   11192:	81 2f       	mov	r24, r17
   11194:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11198:	66 96       	adiw	r28, 0x16	; 22
   1119a:	0f b6       	in	r0, 0x3f	; 63
   1119c:	f8 94       	cli
   1119e:	de bf       	out	0x3e, r29	; 62
   111a0:	0f be       	out	0x3f, r0	; 63
   111a2:	cd bf       	out	0x3d, r28	; 61
   111a4:	df 91       	pop	r29
   111a6:	cf 91       	pop	r28
   111a8:	1f 91       	pop	r17
   111aa:	0f 91       	pop	r16
   111ac:	08 95       	ret

000111ae <tds_get_period(unsigned char)>:
_Z14tds_get_periodh():
   111ae:	cf 93       	push	r28
   111b0:	df 93       	push	r29
   111b2:	cd b7       	in	r28, 0x3d	; 61
   111b4:	de b7       	in	r29, 0x3e	; 62
   111b6:	66 97       	sbiw	r28, 0x16	; 22
   111b8:	0f b6       	in	r0, 0x3f	; 63
   111ba:	f8 94       	cli
   111bc:	de bf       	out	0x3e, r29	; 62
   111be:	0f be       	out	0x3f, r0	; 63
   111c0:	cd bf       	out	0x3d, r28	; 61
   111c2:	be 01       	movw	r22, r28
   111c4:	6f 5f       	subi	r22, 0xFF	; 255
   111c6:	7f 4f       	sbci	r23, 0xFF	; 255
   111c8:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   111cc:	8d 89       	ldd	r24, Y+21	; 0x15
   111ce:	90 e0       	ldi	r25, 0x00	; 0
   111d0:	66 96       	adiw	r28, 0x16	; 22
   111d2:	0f b6       	in	r0, 0x3f	; 63
   111d4:	f8 94       	cli
   111d6:	de bf       	out	0x3e, r29	; 62
   111d8:	0f be       	out	0x3f, r0	; 63
   111da:	cd bf       	out	0x3d, r28	; 61
   111dc:	df 91       	pop	r29
   111de:	cf 91       	pop	r28
   111e0:	08 95       	ret

000111e2 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
   111e2:	fb 01       	movw	r30, r22
   111e4:	9c 01       	movw	r18, r24
   111e6:	28 5f       	subi	r18, 0xF8	; 248
   111e8:	3f 4f       	sbci	r19, 0xFF	; 255
   111ea:	dc 01       	movw	r26, r24
   111ec:	5d 91       	ld	r21, X+
   111ee:	cd 01       	movw	r24, r26
   111f0:	41 91       	ld	r20, Z+
   111f2:	54 13       	cpse	r21, r20
   111f4:	05 c0       	rjmp	.+10     	; 0x11200 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
   111f6:	a2 17       	cp	r26, r18
   111f8:	b3 07       	cpc	r27, r19
   111fa:	b9 f7       	brne	.-18     	; 0x111ea <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
   111fc:	81 e0       	ldi	r24, 0x01	; 1
   111fe:	08 95       	ret
   11200:	80 e0       	ldi	r24, 0x00	; 0
   11202:	08 95       	ret

00011204 <tds_update_associate()>:
_Z20tds_update_associatev():
   11204:	ef 92       	push	r14
   11206:	ff 92       	push	r15
   11208:	0f 93       	push	r16
   1120a:	1f 93       	push	r17
   1120c:	cf 93       	push	r28
   1120e:	df 93       	push	r29
   11210:	cd b7       	in	r28, 0x3d	; 61
   11212:	de b7       	in	r29, 0x3e	; 62
   11214:	6e 97       	sbiw	r28, 0x1e	; 30
   11216:	0f b6       	in	r0, 0x3f	; 63
   11218:	f8 94       	cli
   1121a:	de bf       	out	0x3e, r29	; 62
   1121c:	0f be       	out	0x3f, r0	; 63
   1121e:	cd bf       	out	0x3d, r28	; 61
   11220:	1f 8a       	std	Y+23, r1	; 0x17
   11222:	18 8e       	std	Y+24, r1	; 0x18
   11224:	19 8e       	std	Y+25, r1	; 0x19
   11226:	1a 8e       	std	Y+26, r1	; 0x1a
   11228:	1b 8e       	std	Y+27, r1	; 0x1b
   1122a:	1c 8e       	std	Y+28, r1	; 0x1c
   1122c:	1d 8e       	std	Y+29, r1	; 0x1d
   1122e:	1e 8e       	std	Y+30, r1	; 0x1e
   11230:	07 ed       	ldi	r16, 0xD7	; 215
   11232:	10 e1       	ldi	r17, 0x10	; 16
   11234:	ee 24       	eor	r14, r14
   11236:	ea 94       	dec	r14
   11238:	f8 01       	movw	r30, r16
   1123a:	e2 86       	std	Z+10, r14	; 0x0a
   1123c:	b8 01       	movw	r22, r16
   1123e:	ce 01       	movw	r24, r28
   11240:	47 96       	adiw	r24, 0x17	; 23
   11242:	0e 94 f1 88 	call	0x111e2	; 0x111e2 <tds_compare_rom(unsigned char*, unsigned char*)>
   11246:	81 11       	cpse	r24, r1
   11248:	14 c0       	rjmp	.+40     	; 0x11272 <tds_update_associate()+0x6e>
   1124a:	f1 2c       	mov	r15, r1
   1124c:	be 01       	movw	r22, r28
   1124e:	6f 5f       	subi	r22, 0xFF	; 255
   11250:	7f 4f       	sbci	r23, 0xFF	; 255
   11252:	8f 2d       	mov	r24, r15
   11254:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11258:	b8 01       	movw	r22, r16
   1125a:	ce 01       	movw	r24, r28
   1125c:	02 96       	adiw	r24, 0x02	; 2
   1125e:	0e 94 f1 88 	call	0x111e2	; 0x111e2 <tds_compare_rom(unsigned char*, unsigned char*)>
   11262:	88 23       	and	r24, r24
   11264:	11 f0       	breq	.+4      	; 0x1126a <tds_update_associate()+0x66>
   11266:	f8 01       	movw	r30, r16
   11268:	f2 86       	std	Z+10, r15	; 0x0a
   1126a:	f3 94       	inc	r15
   1126c:	f6 e0       	ldi	r31, 0x06	; 6
   1126e:	ff 12       	cpse	r15, r31
   11270:	ed cf       	rjmp	.-38     	; 0x1124c <tds_update_associate()+0x48>
   11272:	05 5f       	subi	r16, 0xF5	; 245
   11274:	1f 4f       	sbci	r17, 0xFF	; 255
   11276:	81 e1       	ldi	r24, 0x11	; 17
   11278:	09 31       	cpi	r16, 0x19	; 25
   1127a:	18 07       	cpc	r17, r24
   1127c:	e9 f6       	brne	.-70     	; 0x11238 <tds_update_associate()+0x34>
   1127e:	6e 96       	adiw	r28, 0x1e	; 30
   11280:	0f b6       	in	r0, 0x3f	; 63
   11282:	f8 94       	cli
   11284:	de bf       	out	0x3e, r29	; 62
   11286:	0f be       	out	0x3f, r0	; 63
   11288:	cd bf       	out	0x3d, r28	; 61
   1128a:	df 91       	pop	r29
   1128c:	cf 91       	pop	r28
   1128e:	1f 91       	pop	r17
   11290:	0f 91       	pop	r16
   11292:	ff 90       	pop	r15
   11294:	ef 90       	pop	r14
   11296:	08 95       	ret

00011298 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
   11298:	1f 93       	push	r17
   1129a:	cf 93       	push	r28
   1129c:	df 93       	push	r29
   1129e:	cd b7       	in	r28, 0x3d	; 61
   112a0:	de b7       	in	r29, 0x3e	; 62
   112a2:	66 97       	sbiw	r28, 0x16	; 22
   112a4:	0f b6       	in	r0, 0x3f	; 63
   112a6:	f8 94       	cli
   112a8:	de bf       	out	0x3e, r29	; 62
   112aa:	0f be       	out	0x3f, r0	; 63
   112ac:	cd bf       	out	0x3d, r28	; 61
   112ae:	18 2f       	mov	r17, r24
   112b0:	be 01       	movw	r22, r28
   112b2:	6f 5f       	subi	r22, 0xFF	; 255
   112b4:	7f 4f       	sbci	r23, 0xFF	; 255
   112b6:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   112ba:	19 82       	std	Y+1, r1	; 0x01
   112bc:	60 e8       	ldi	r22, 0x80	; 128
   112be:	75 e0       	ldi	r23, 0x05	; 5
   112c0:	ce 01       	movw	r24, r28
   112c2:	0d 96       	adiw	r24, 0x0d	; 13
   112c4:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
   112c8:	1c 86       	std	Y+12, r1	; 0x0c
   112ca:	1b 86       	std	Y+11, r1	; 0x0b
   112cc:	8a e0       	ldi	r24, 0x0A	; 10
   112ce:	8d 8b       	std	Y+21, r24	; 0x15
   112d0:	1a 82       	std	Y+2, r1	; 0x02
   112d2:	1b 82       	std	Y+3, r1	; 0x03
   112d4:	1c 82       	std	Y+4, r1	; 0x04
   112d6:	1d 82       	std	Y+5, r1	; 0x05
   112d8:	1e 82       	std	Y+6, r1	; 0x06
   112da:	1f 82       	std	Y+7, r1	; 0x07
   112dc:	18 86       	std	Y+8, r1	; 0x08
   112de:	19 86       	std	Y+9, r1	; 0x09
   112e0:	1a 86       	std	Y+10, r1	; 0x0a
   112e2:	be 01       	movw	r22, r28
   112e4:	6f 5f       	subi	r22, 0xFF	; 255
   112e6:	7f 4f       	sbci	r23, 0xFF	; 255
   112e8:	81 2f       	mov	r24, r17
   112ea:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   112ee:	0e 94 02 89 	call	0x11204	; 0x11204 <tds_update_associate()>
   112f2:	66 96       	adiw	r28, 0x16	; 22
   112f4:	0f b6       	in	r0, 0x3f	; 63
   112f6:	f8 94       	cli
   112f8:	de bf       	out	0x3e, r29	; 62
   112fa:	0f be       	out	0x3f, r0	; 63
   112fc:	cd bf       	out	0x3d, r28	; 61
   112fe:	df 91       	pop	r29
   11300:	cf 91       	pop	r28
   11302:	1f 91       	pop	r17
   11304:	08 95       	ret

00011306 <tds_set_clear_wrom_id(unsigned char)>:
_Z21tds_set_clear_wrom_idh():
   11306:	9b e0       	ldi	r25, 0x0B	; 11
   11308:	89 9f       	mul	r24, r25
   1130a:	f0 01       	movw	r30, r0
   1130c:	11 24       	eor	r1, r1
   1130e:	e9 52       	subi	r30, 0x29	; 41
   11310:	ff 4e       	sbci	r31, 0xEF	; 239
   11312:	82 85       	ldd	r24, Z+10	; 0x0a
   11314:	0c 94 4c 89 	jmp	0x11298	; 0x11298 <tds_set_clear(unsigned char)>

00011318 <tds_check_associate(unsigned char)>:
_Z19tds_check_associateh():
   11318:	ff 92       	push	r15
   1131a:	0f 93       	push	r16
   1131c:	1f 93       	push	r17
   1131e:	cf 93       	push	r28
   11320:	df 93       	push	r29
   11322:	cd b7       	in	r28, 0x3d	; 61
   11324:	de b7       	in	r29, 0x3e	; 62
   11326:	66 97       	sbiw	r28, 0x16	; 22
   11328:	0f b6       	in	r0, 0x3f	; 63
   1132a:	f8 94       	cli
   1132c:	de bf       	out	0x3e, r29	; 62
   1132e:	0f be       	out	0x3f, r0	; 63
   11330:	cd bf       	out	0x3d, r28	; 61
   11332:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <Global_HWwirenum>
   11336:	89 17       	cp	r24, r25
   11338:	38 f5       	brcc	.+78     	; 0x11388 <tds_check_associate(unsigned char)+0x70>
   1133a:	9b e0       	ldi	r25, 0x0B	; 11
   1133c:	89 9f       	mul	r24, r25
   1133e:	80 01       	movw	r16, r0
   11340:	11 24       	eor	r1, r1
   11342:	09 52       	subi	r16, 0x29	; 41
   11344:	1f 4e       	sbci	r17, 0xEF	; 239
   11346:	f1 2c       	mov	r15, r1
   11348:	be 01       	movw	r22, r28
   1134a:	6f 5f       	subi	r22, 0xFF	; 255
   1134c:	7f 4f       	sbci	r23, 0xFF	; 255
   1134e:	8f 2d       	mov	r24, r15
   11350:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   11354:	b8 01       	movw	r22, r16
   11356:	ce 01       	movw	r24, r28
   11358:	02 96       	adiw	r24, 0x02	; 2
   1135a:	0e 94 f1 88 	call	0x111e2	; 0x111e2 <tds_compare_rom(unsigned char*, unsigned char*)>
   1135e:	81 11       	cpse	r24, r1
   11360:	06 c0       	rjmp	.+12     	; 0x1136e <tds_check_associate(unsigned char)+0x56>
   11362:	f3 94       	inc	r15
   11364:	86 e0       	ldi	r24, 0x06	; 6
   11366:	f8 12       	cpse	r15, r24
   11368:	ef cf       	rjmp	.-34     	; 0x11348 <tds_check_associate(unsigned char)+0x30>
   1136a:	ff 24       	eor	r15, r15
   1136c:	fa 94       	dec	r15
   1136e:	8f 2d       	mov	r24, r15
   11370:	66 96       	adiw	r28, 0x16	; 22
   11372:	0f b6       	in	r0, 0x3f	; 63
   11374:	f8 94       	cli
   11376:	de bf       	out	0x3e, r29	; 62
   11378:	0f be       	out	0x3f, r0	; 63
   1137a:	cd bf       	out	0x3d, r28	; 61
   1137c:	df 91       	pop	r29
   1137e:	cf 91       	pop	r28
   11380:	1f 91       	pop	r17
   11382:	0f 91       	pop	r16
   11384:	ff 90       	pop	r15
   11386:	08 95       	ret
   11388:	8e ef       	ldi	r24, 0xFE	; 254
   1138a:	f8 2e       	mov	r15, r24
   1138c:	f0 cf       	rjmp	.-32     	; 0x1136e <tds_check_associate(unsigned char)+0x56>

0001138e <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202

uint8_t tds_associate(uint8_t id)
{
   1138e:	df 92       	push	r13
   11390:	ef 92       	push	r14
   11392:	ff 92       	push	r15
   11394:	0f 93       	push	r16
   11396:	1f 93       	push	r17
   11398:	cf 93       	push	r28
   1139a:	df 93       	push	r29
   1139c:	cd b7       	in	r28, 0x3d	; 61
   1139e:	de b7       	in	r29, 0x3e	; 62
   113a0:	66 97       	sbiw	r28, 0x16	; 22
   113a2:	0f b6       	in	r0, 0x3f	; 63
   113a4:	f8 94       	cli
   113a6:	de bf       	out	0x3e, r29	; 62
   113a8:	0f be       	out	0x3f, r0	; 63
   113aa:	cd bf       	out	0x3d, r28	; 61
   113ac:	08 2f       	mov	r16, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:205
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
   113ae:	0e 94 8c 89 	call	0x11318	; 0x11318 <tds_check_associate(unsigned char)>
   113b2:	8f 3f       	cpi	r24, 0xFF	; 255
   113b4:	09 f0       	breq	.+2      	; 0x113b8 <tds_associate(unsigned char)+0x2a>
   113b6:	6a c0       	rjmp	.+212    	; 0x1148c <tds_associate(unsigned char)+0xfe>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   113b8:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
   113ba:	eb e0       	ldi	r30, 0x0B	; 11
   113bc:	de 2e       	mov	r13, r30
   113be:	d0 9e       	mul	r13, r16
   113c0:	c0 01       	movw	r24, r0
   113c2:	11 24       	eor	r1, r1
   113c4:	9c 01       	movw	r18, r24
   113c6:	20 52       	subi	r18, 0x20	; 32
   113c8:	3f 4e       	sbci	r19, 0xEF	; 239
   113ca:	79 01       	movw	r14, r18
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
   113cc:	be 01       	movw	r22, r28
   113ce:	6f 5f       	subi	r22, 0xFF	; 255
   113d0:	7f 4f       	sbci	r23, 0xFF	; 255
   113d2:	81 2f       	mov	r24, r17
   113d4:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
   113d8:	89 81       	ldd	r24, Y+1	; 0x01
   113da:	81 11       	cpse	r24, r1
   113dc:	53 c0       	rjmp	.+166    	; 0x11484 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210 (discriminator 1)
   113de:	f7 01       	movw	r30, r14
   113e0:	80 81       	ld	r24, Z
   113e2:	81 30       	cpi	r24, 0x01	; 1
   113e4:	09 f0       	breq	.+2      	; 0x113e8 <tds_associate(unsigned char)+0x5a>
   113e6:	4e c0       	rjmp	.+156    	; 0x11484 <tds_associate(unsigned char)+0xf6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
   113e8:	89 83       	std	Y+1, r24	; 0x01
   113ea:	de 01       	movw	r26, r28
   113ec:	12 96       	adiw	r26, 0x02	; 2
   113ee:	0d 9d       	mul	r16, r13
   113f0:	c0 01       	movw	r24, r0
   113f2:	11 24       	eor	r1, r1
   113f4:	30 e0       	ldi	r19, 0x00	; 0
   113f6:	20 e0       	ldi	r18, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214 (discriminator 2)
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
   113f8:	f9 01       	movw	r30, r18
   113fa:	e8 0f       	add	r30, r24
   113fc:	f9 1f       	adc	r31, r25
   113fe:	e9 52       	subi	r30, 0x29	; 41
   11400:	ff 4e       	sbci	r31, 0xEF	; 239
   11402:	40 81       	ld	r20, Z
   11404:	4d 93       	st	X+, r20
   11406:	2f 5f       	subi	r18, 0xFF	; 255
   11408:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213 (discriminator 2)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
   1140a:	28 30       	cpi	r18, 0x08	; 8
   1140c:	31 05       	cpc	r19, r1
   1140e:	a1 f7       	brne	.-24     	; 0x113f8 <tds_associate(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
   11410:	2b e0       	ldi	r18, 0x0B	; 11
   11412:	12 9f       	mul	r17, r18
   11414:	f0 01       	movw	r30, r0
   11416:	11 24       	eor	r1, r1
   11418:	e9 52       	subi	r30, 0x29	; 41
   1141a:	ff 4e       	sbci	r31, 0xEF	; 239
   1141c:	e0 85       	ldd	r30, Z+8	; 0x08
   1141e:	f0 e0       	ldi	r31, 0x00	; 0
   11420:	ee 0f       	add	r30, r30
   11422:	ff 1f       	adc	r31, r31
   11424:	eb 52       	subi	r30, 0x2B	; 43
   11426:	ff 4e       	sbci	r31, 0xEF	; 239
   11428:	80 81       	ld	r24, Z
   1142a:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
   1142c:	be 01       	movw	r22, r28
   1142e:	6f 5f       	subi	r22, 0xFF	; 255
   11430:	7f 4f       	sbci	r23, 0xFF	; 255
   11432:	81 2f       	mov	r24, r17
   11434:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <set_tds18s20(unsigned char, struct_DDS18s20*)>
   11438:	3e e1       	ldi	r19, 0x1E	; 30
   1143a:	13 9f       	mul	r17, r19
   1143c:	a0 01       	movw	r20, r0
   1143e:	11 24       	eor	r1, r1
   11440:	90 e0       	ldi	r25, 0x00	; 0
   11442:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   11444:	20 e2       	ldi	r18, 0x20	; 32
   11446:	3e e4       	ldi	r19, 0x4E	; 78
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218 (discriminator 2)
   11448:	fc 01       	movw	r30, r24
   1144a:	ee 0f       	add	r30, r30
   1144c:	ff 1f       	adc	r31, r31
   1144e:	e4 0f       	add	r30, r20
   11450:	f5 1f       	adc	r31, r21
   11452:	e6 5e       	subi	r30, 0xE6	; 230
   11454:	fe 4e       	sbci	r31, 0xEE	; 238
   11456:	30 87       	std	Z+8, r19	; 0x08
   11458:	27 83       	std	Z+7, r18	; 0x07
   1145a:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217 (discriminator 2)
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   1145c:	8a 30       	cpi	r24, 0x0A	; 10
   1145e:	91 05       	cpc	r25, r1
   11460:	99 f7       	brne	.-26     	; 0x11448 <tds_associate(unsigned char)+0xba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
   11462:	0e 94 02 89 	call	0x11204	; 0x11204 <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
   11466:	81 2f       	mov	r24, r17
   11468:	66 96       	adiw	r28, 0x16	; 22
   1146a:	0f b6       	in	r0, 0x3f	; 63
   1146c:	f8 94       	cli
   1146e:	de bf       	out	0x3e, r29	; 62
   11470:	0f be       	out	0x3f, r0	; 63
   11472:	cd bf       	out	0x3d, r28	; 61
   11474:	df 91       	pop	r29
   11476:	cf 91       	pop	r28
   11478:	1f 91       	pop	r17
   1147a:	0f 91       	pop	r16
   1147c:	ff 90       	pop	r15
   1147e:	ef 90       	pop	r14
   11480:	df 90       	pop	r13
   11482:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207 (discriminator 2)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11484:	1f 5f       	subi	r17, 0xFF	; 255
   11486:	16 30       	cpi	r17, 0x06	; 6
   11488:	09 f0       	breq	.+2      	; 0x1148c <tds_associate(unsigned char)+0xfe>
   1148a:	a0 cf       	rjmp	.-192    	; 0x113cc <tds_associate(unsigned char)+0x3e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
   1148c:	1f ef       	ldi	r17, 0xFF	; 255
   1148e:	e9 cf       	rjmp	.-46     	; 0x11462 <tds_associate(unsigned char)+0xd4>

00011490 <one_hw_search_device(unsigned char)>:
_Z20one_hw_search_deviceh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:232

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
   11490:	df 92       	push	r13
   11492:	ef 92       	push	r14
   11494:	ff 92       	push	r15
   11496:	0f 93       	push	r16
   11498:	1f 93       	push	r17
   1149a:	cf 93       	push	r28
   1149c:	df 93       	push	r29
   1149e:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   114a0:	c8 2f       	mov	r28, r24
   114a2:	d0 e0       	ldi	r29, 0x00	; 0
   114a4:	cc 0f       	add	r28, r28
   114a6:	dd 1f       	adc	r29, r29
   114a8:	cb 52       	subi	r28, 0x2B	; 43
   114aa:	df 4e       	sbci	r29, 0xEF	; 239
   114ac:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   114ae:	88 81       	ld	r24, Y
   114b0:	0e 94 27 c8 	call	0x1904e	; 0x1904e <ds2482init(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   114b4:	88 81       	ld	r24, Y
   114b6:	0e 94 e1 c7 	call	0x18fc2	; 0x18fc2 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   114ba:	88 81       	ld	r24, Y
   114bc:	0e 94 40 c8 	call	0x19080	; 0x19080 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   114c0:	6e ec       	ldi	r22, 0xCE	; 206
   114c2:	71 e1       	ldi	r23, 0x11	; 17
   114c4:	88 81       	ld	r24, Y
   114c6:	0e 94 db c7 	call	0x18fb6	; 0x18fb6 <owMatchFirst(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   114ca:	81 11       	cpse	r24, r1
   114cc:	3a c0       	rjmp	.+116    	; 0x11542 <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   114ce:	8e 01       	movw	r16, r28
   114d0:	0f 5f       	subi	r16, 0xFF	; 255
   114d2:	1f 4f       	sbci	r17, 0xFF	; 255
   114d4:	9b e0       	ldi	r25, 0x0B	; 11
   114d6:	e9 2e       	mov	r14, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   114d8:	dd 24       	eor	r13, r13
   114da:	d3 94       	inc	r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   114dc:	f8 01       	movw	r30, r16
   114de:	90 81       	ld	r25, Z
   114e0:	96 30       	cpi	r25, 0x06	; 6
   114e2:	78 f5       	brcc	.+94     	; 0x11542 <one_hw_search_device(unsigned char)+0xb2>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   114e4:	20 91 19 11 	lds	r18, 0x1119	; 0x801119 <Global_HWwirenum>
   114e8:	42 2f       	mov	r20, r18
   114ea:	50 e0       	ldi	r21, 0x00	; 0
   114ec:	ae ec       	ldi	r26, 0xCE	; 206
   114ee:	b1 e1       	ldi	r27, 0x11	; 17
   114f0:	2e 9d       	mul	r18, r14
   114f2:	90 01       	movw	r18, r0
   114f4:	11 24       	eor	r1, r1
   114f6:	90 e0       	ldi	r25, 0x00	; 0
   114f8:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249 (discriminator 2)
   114fa:	6d 91       	ld	r22, X+
   114fc:	fc 01       	movw	r30, r24
   114fe:	e2 0f       	add	r30, r18
   11500:	f3 1f       	adc	r31, r19
   11502:	e9 52       	subi	r30, 0x29	; 41
   11504:	ff 4e       	sbci	r31, 0xEF	; 239
   11506:	60 83       	st	Z, r22
   11508:	01 96       	adiw	r24, 0x01	; 1
   1150a:	88 30       	cpi	r24, 0x08	; 8
   1150c:	91 05       	cpc	r25, r1
   1150e:	a9 f7       	brne	.-22     	; 0x114fa <one_hw_search_device(unsigned char)+0x6a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   11510:	e4 9e       	mul	r14, r20
   11512:	f0 01       	movw	r30, r0
   11514:	e5 9e       	mul	r14, r21
   11516:	f0 0d       	add	r31, r0
   11518:	11 24       	eor	r1, r1
   1151a:	e9 52       	subi	r30, 0x29	; 41
   1151c:	ff 4e       	sbci	r31, 0xEF	; 239
   1151e:	f0 86       	std	Z+8, r15	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   11520:	d1 86       	std	Z+9, r13	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   11522:	6e ec       	ldi	r22, 0xCE	; 206
   11524:	71 e1       	ldi	r23, 0x11	; 17
   11526:	88 81       	ld	r24, Y
   11528:	0e 94 55 c7 	call	0x18eaa	; 0x18eaa <owMatchNext(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   1152c:	f8 01       	movw	r30, r16
   1152e:	90 81       	ld	r25, Z
   11530:	9f 5f       	subi	r25, 0xFF	; 255
   11532:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   11534:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <Global_HWwirenum>
   11538:	9f 5f       	subi	r25, 0xFF	; 255
   1153a:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   1153e:	85 30       	cpi	r24, 0x05	; 5
   11540:	69 f6       	brne	.-102    	; 0x114dc <one_hw_search_device(unsigned char)+0x4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   11542:	df 91       	pop	r29
   11544:	cf 91       	pop	r28
   11546:	1f 91       	pop	r17
   11548:	0f 91       	pop	r16
   1154a:	ff 90       	pop	r15
   1154c:	ef 90       	pop	r14
   1154e:	df 90       	pop	r13
   11550:	08 95       	ret

00011552 <mereni_hwwire(unsigned int)>:
_Z13mereni_hwwirej():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:266
//////
/// funkce mereni na sbernici
uint8_t mereni_hwwire(uint16_t uptime)
{
   11552:	af 92       	push	r10
   11554:	bf 92       	push	r11
   11556:	cf 92       	push	r12
   11558:	df 92       	push	r13
   1155a:	ef 92       	push	r14
   1155c:	ff 92       	push	r15
   1155e:	0f 93       	push	r16
   11560:	1f 93       	push	r17
   11562:	cf 93       	push	r28
   11564:	df 93       	push	r29
   11566:	cd b7       	in	r28, 0x3d	; 61
   11568:	de b7       	in	r29, 0x3e	; 62
   1156a:	68 97       	sbiw	r28, 0x18	; 24
   1156c:	0f b6       	in	r0, 0x3f	; 63
   1156e:	f8 94       	cli
   11570:	de bf       	out	0x3e, r29	; 62
   11572:	0f be       	out	0x3f, r0	; 63
   11574:	cd bf       	out	0x3d, r28	; 61
   11576:	5a e1       	ldi	r21, 0x1A	; 26
   11578:	e5 2e       	mov	r14, r21
   1157a:	51 e1       	ldi	r21, 0x11	; 17
   1157c:	f5 2e       	mov	r15, r21
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1157e:	00 e0       	ldi	r16, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11580:	6c 01       	movw	r12, r24
   11582:	dd 24       	eor	r13, r13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11584:	6e e1       	ldi	r22, 0x1E	; 30
   11586:	a6 2e       	mov	r10, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   11588:	be 01       	movw	r22, r28
   1158a:	6f 5f       	subi	r22, 0xFF	; 255
   1158c:	7f 4f       	sbci	r23, 0xFF	; 255
   1158e:	80 2f       	mov	r24, r16
   11590:	0e 94 5c 87 	call	0x10eb8	; 0x10eb8 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   11594:	19 81       	ldd	r17, Y+1	; 0x01
   11596:	11 30       	cpi	r17, 0x01	; 1
   11598:	09 f0       	breq	.+2      	; 0x1159c <mereni_hwwire(unsigned int)+0x4a>
   1159a:	e2 c0       	rjmp	.+452    	; 0x11760 <mereni_hwwire(unsigned int)+0x20e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273 (discriminator 1)
   1159c:	f7 01       	movw	r30, r14
   1159e:	84 8d       	ldd	r24, Z+28	; 0x1c
   115a0:	9d 89       	ldd	r25, Y+21	; 0x15
   115a2:	96 01       	movw	r18, r12
   115a4:	28 1b       	sub	r18, r24
   115a6:	31 09       	sbc	r19, r1
   115a8:	92 17       	cp	r25, r18
   115aa:	13 06       	cpc	r1, r19
   115ac:	11 f0       	breq	.+4      	; 0x115b2 <mereni_hwwire(unsigned int)+0x60>
   115ae:	08 f0       	brcs	.+2      	; 0x115b2 <mereni_hwwire(unsigned int)+0x60>
   115b0:	d7 c0       	rjmp	.+430    	; 0x11760 <mereni_hwwire(unsigned int)+0x20e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   115b2:	89 0f       	add	r24, r25
   115b4:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   115b6:	85 8d       	ldd	r24, Z+29	; 0x1d
   115b8:	81 11       	cpse	r24, r1
   115ba:	0f c0       	rjmp	.+30     	; 0x115da <mereni_hwwire(unsigned int)+0x88>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   115bc:	8a 85       	ldd	r24, Y+10	; 0x0a
   115be:	0e 94 40 c8 	call	0x19080	; 0x19080 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   115c2:	be 01       	movw	r22, r28
   115c4:	6e 5f       	subi	r22, 0xFE	; 254
   115c6:	7f 4f       	sbci	r23, 0xFF	; 255
   115c8:	8a 85       	ldd	r24, Y+10	; 0x0a
   115ca:	0e 94 3f c7 	call	0x18e7e	; 0x18e7e <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   115ce:	64 e4       	ldi	r22, 0x44	; 68
   115d0:	8a 85       	ldd	r24, Y+10	; 0x0a
   115d2:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   115d6:	f7 01       	movw	r30, r14
   115d8:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   115da:	f7 01       	movw	r30, r14
   115dc:	b5 8c       	ldd	r11, Z+29	; 0x1d
   115de:	f1 e0       	ldi	r31, 0x01	; 1
   115e0:	bf 12       	cpse	r11, r31
   115e2:	be c0       	rjmp	.+380    	; 0x11760 <mereni_hwwire(unsigned int)+0x20e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        e = owReset(tds.assigned_ds2482);
   115e4:	8a 85       	ldd	r24, Y+10	; 0x0a
   115e6:	0e 94 40 c8 	call	0x19080	; 0x19080 <ds2482owReset(unsigned char)>
   115ea:	8f 8b       	std	Y+23, r24	; 0x17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        e = e + owMatchRom(tds.assigned_ds2482, tds.rom);
   115ec:	be 01       	movw	r22, r28
   115ee:	6e 5f       	subi	r22, 0xFE	; 254
   115f0:	7f 4f       	sbci	r23, 0xFF	; 255
   115f2:	8a 85       	ldd	r24, Y+10	; 0x0a
   115f4:	0e 94 3f c7 	call	0x18e7e	; 0x18e7e <owMatchRom(unsigned char, unsigned char*)>
   115f8:	9f 89       	ldd	r25, Y+23	; 0x17
   115fa:	89 0f       	add	r24, r25
   115fc:	8f 8b       	std	Y+23, r24	; 0x17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        e = e + owReadByte(tds.assigned_ds2482, &t);
   115fe:	be 01       	movw	r22, r28
   11600:	68 5e       	subi	r22, 0xE8	; 232
   11602:	7f 4f       	sbci	r23, 0xFF	; 255
   11604:	8a 85       	ldd	r24, Y+10	; 0x0a
   11606:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   1160a:	9f 89       	ldd	r25, Y+23	; 0x17
   1160c:	89 0f       	add	r24, r25
   1160e:	8f 8b       	std	Y+23, r24	; 0x17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0 && e == 0) 
   11610:	98 8d       	ldd	r25, Y+24	; 0x18
   11612:	99 23       	and	r25, r25
   11614:	09 f4       	brne	.+2      	; 0x11618 <mereni_hwwire(unsigned int)+0xc6>
   11616:	a4 c0       	rjmp	.+328    	; 0x11760 <mereni_hwwire(unsigned int)+0x20e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288 (discriminator 1)
   11618:	81 11       	cpse	r24, r1
   1161a:	a2 c0       	rjmp	.+324    	; 0x11760 <mereni_hwwire(unsigned int)+0x20e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   1161c:	f7 01       	movw	r30, r14
   1161e:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   11620:	8a 85       	ldd	r24, Y+10	; 0x0a
   11622:	0e 94 40 c8 	call	0x19080	; 0x19080 <ds2482owReset(unsigned char)>
   11626:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   11628:	be 01       	movw	r22, r28
   1162a:	6e 5f       	subi	r22, 0xFE	; 254
   1162c:	7f 4f       	sbci	r23, 0xFF	; 255
   1162e:	8a 85       	ldd	r24, Y+10	; 0x0a
   11630:	0e 94 3f c7 	call	0x18e7e	; 0x18e7e <owMatchRom(unsigned char, unsigned char*)>
   11634:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   11636:	6e eb       	ldi	r22, 0xBE	; 190
   11638:	8a 85       	ldd	r24, Y+10	; 0x0a
   1163a:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <ds2482owWriteByte(unsigned char, unsigned char)>
   1163e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   11640:	be 01       	movw	r22, r28
   11642:	69 5e       	subi	r22, 0xE9	; 233
   11644:	7f 4f       	sbci	r23, 0xFF	; 255
   11646:	8a 85       	ldd	r24, Y+10	; 0x0a
   11648:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   1164c:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   1164e:	8f 89       	ldd	r24, Y+23	; 0x17
   11650:	f7 01       	movw	r30, r14
   11652:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   11654:	be 01       	movw	r22, r28
   11656:	69 5e       	subi	r22, 0xE9	; 233
   11658:	7f 4f       	sbci	r23, 0xFF	; 255
   1165a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1165c:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   11660:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   11662:	8f 89       	ldd	r24, Y+23	; 0x17
   11664:	f7 01       	movw	r30, r14
   11666:	81 83       	std	Z+1, r24	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   11668:	be 01       	movw	r22, r28
   1166a:	69 5e       	subi	r22, 0xE9	; 233
   1166c:	7f 4f       	sbci	r23, 0xFF	; 255
   1166e:	8a 85       	ldd	r24, Y+10	; 0x0a
   11670:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   11674:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   11676:	be 01       	movw	r22, r28
   11678:	69 5e       	subi	r22, 0xE9	; 233
   1167a:	7f 4f       	sbci	r23, 0xFF	; 255
   1167c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1167e:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   11682:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   11684:	be 01       	movw	r22, r28
   11686:	69 5e       	subi	r22, 0xE9	; 233
   11688:	7f 4f       	sbci	r23, 0xFF	; 255
   1168a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1168c:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   11690:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   11692:	be 01       	movw	r22, r28
   11694:	69 5e       	subi	r22, 0xE9	; 233
   11696:	7f 4f       	sbci	r23, 0xFF	; 255
   11698:	8a 85       	ldd	r24, Y+10	; 0x0a
   1169a:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   1169e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   116a0:	be 01       	movw	r22, r28
   116a2:	69 5e       	subi	r22, 0xE9	; 233
   116a4:	7f 4f       	sbci	r23, 0xFF	; 255
   116a6:	8a 85       	ldd	r24, Y+10	; 0x0a
   116a8:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   116ac:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   116ae:	8f 89       	ldd	r24, Y+23	; 0x17
   116b0:	f7 01       	movw	r30, r14
   116b2:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   116b4:	be 01       	movw	r22, r28
   116b6:	69 5e       	subi	r22, 0xE9	; 233
   116b8:	7f 4f       	sbci	r23, 0xFF	; 255
   116ba:	8a 85       	ldd	r24, Y+10	; 0x0a
   116bc:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
   116c0:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   116c2:	8f 89       	ldd	r24, Y+23	; 0x17
   116c4:	f7 01       	movw	r30, r14
   116c6:	83 83       	std	Z+3, r24	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   116c8:	be 01       	movw	r22, r28
   116ca:	69 5e       	subi	r22, 0xE9	; 233
   116cc:	7f 4f       	sbci	r23, 0xFF	; 255
   116ce:	8a 85       	ldd	r24, Y+10	; 0x0a
   116d0:	0e 94 03 c9 	call	0x19206	; 0x19206 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   116d4:	9f 89       	ldd	r25, Y+23	; 0x17
   116d6:	f7 01       	movw	r30, r14
   116d8:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   116da:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   116dc:	09 f0       	breq	.+2      	; 0x116e0 <mereni_hwwire(unsigned int)+0x18e>
   116de:	58 c0       	rjmp	.+176    	; 0x11790 <mereni_hwwire(unsigned int)+0x23e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   116e0:	63 81       	ldd	r22, Z+3	; 0x03
   116e2:	70 e0       	ldi	r23, 0x00	; 0
   116e4:	e8 8d       	ldd	r30, Y+24	; 0x18
   116e6:	ae 9e       	mul	r10, r30
   116e8:	f0 01       	movw	r30, r0
   116ea:	11 24       	eor	r1, r1
   116ec:	e6 5e       	subi	r30, 0xE6	; 230
   116ee:	fe 4e       	sbci	r31, 0xEE	; 238
   116f0:	82 81       	ldd	r24, Z+2	; 0x02
   116f2:	9b 01       	movw	r18, r22
   116f4:	28 1b       	sub	r18, r24
   116f6:	31 09       	sbc	r19, r1
   116f8:	c9 01       	movw	r24, r18
   116fa:	96 95       	lsr	r25
   116fc:	98 2f       	mov	r25, r24
   116fe:	88 27       	eor	r24, r24
   11700:	97 95       	ror	r25
   11702:	87 95       	ror	r24
   11704:	0e 94 7c d3 	call	0x1a6f8	; 0x1a6f8 <__divmodhi4>
   11708:	8b 85       	ldd	r24, Y+11	; 0x0b
   1170a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1170c:	40 97       	sbiw	r24, 0x10	; 16
   1170e:	68 0f       	add	r22, r24
   11710:	79 1f       	adc	r23, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   11712:	f7 01       	movw	r30, r14
   11714:	81 81       	ldd	r24, Z+1	; 0x01
   11716:	90 e0       	ldi	r25, 0x00	; 0
   11718:	98 2f       	mov	r25, r24
   1171a:	88 27       	eor	r24, r24
   1171c:	99 0f       	add	r25, r25
   1171e:	99 0f       	add	r25, r25
   11720:	99 0f       	add	r25, r25
   11722:	20 81       	ld	r18, Z
   11724:	f8 e0       	ldi	r31, 0x08	; 8
   11726:	2f 9f       	mul	r18, r31
   11728:	90 01       	movw	r18, r0
   1172a:	11 24       	eor	r1, r1
   1172c:	82 2b       	or	r24, r18
   1172e:	93 2b       	or	r25, r19
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   11730:	43 e0       	ldi	r20, 0x03	; 3
   11732:	88 0f       	add	r24, r24
   11734:	99 1f       	adc	r25, r25
   11736:	4a 95       	dec	r20
   11738:	e1 f7       	brne	.-8      	; 0x11732 <mereni_hwwire(unsigned int)+0x1e0>
   1173a:	80 78       	andi	r24, 0x80	; 128
   1173c:	68 0f       	add	r22, r24
   1173e:	79 1f       	adc	r23, r25
   11740:	f7 01       	movw	r30, r14
   11742:	76 83       	std	Z+6, r23	; 0x06
   11744:	65 83       	std	Z+5, r22	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   11746:	b3 8e       	std	Z+27, r11	; 0x1b
   11748:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313 (discriminator 2)
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   1174a:	27 89       	ldd	r18, Z+23	; 0x17
   1174c:	30 8d       	ldd	r19, Z+24	; 0x18
   1174e:	32 8f       	std	Z+26, r19	; 0x1a
   11750:	21 8f       	std	Z+25, r18	; 0x19
   11752:	81 50       	subi	r24, 0x01	; 1
   11754:	32 97       	sbiw	r30, 0x02	; 2
   11756:	81 11       	cpse	r24, r1
   11758:	f8 cf       	rjmp	.-16     	; 0x1174a <mereni_hwwire(unsigned int)+0x1f8>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   1175a:	f7 01       	movw	r30, r14
   1175c:	70 87       	std	Z+8, r23	; 0x08
   1175e:	67 83       	std	Z+7, r22	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270 (discriminator 2)
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   11760:	0f 5f       	subi	r16, 0xFF	; 255
   11762:	fe e1       	ldi	r31, 0x1E	; 30
   11764:	ef 0e       	add	r14, r31
   11766:	f1 1c       	adc	r15, r1
   11768:	06 30       	cpi	r16, 0x06	; 6
   1176a:	09 f0       	breq	.+2      	; 0x1176e <mereni_hwwire(unsigned int)+0x21c>
   1176c:	0d cf       	rjmp	.-486    	; 0x11588 <mereni_hwwire(unsigned int)+0x36>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:326
          }
        }
      }
    }
  }
}
   1176e:	68 96       	adiw	r28, 0x18	; 24
   11770:	0f b6       	in	r0, 0x3f	; 63
   11772:	f8 94       	cli
   11774:	de bf       	out	0x3e, r29	; 62
   11776:	0f be       	out	0x3f, r0	; 63
   11778:	cd bf       	out	0x3d, r28	; 61
   1177a:	df 91       	pop	r29
   1177c:	cf 91       	pop	r28
   1177e:	1f 91       	pop	r17
   11780:	0f 91       	pop	r16
   11782:	ff 90       	pop	r15
   11784:	ef 90       	pop	r14
   11786:	df 90       	pop	r13
   11788:	cf 90       	pop	r12
   1178a:	bf 90       	pop	r11
   1178c:	af 90       	pop	r10
   1178e:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   11790:	13 8e       	std	Z+27, r1	; 0x1b
   11792:	e6 cf       	rjmp	.-52     	; 0x11760 <mereni_hwwire(unsigned int)+0x20e>

00011794 <EEPROMClass::read(int) [clone .isra.0]>:
_ZNK5EERefdeEv():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:60
  array_pids[idx]->SetControllerDirection(REVERSE);
}

void thermostat_pid_compute(uint8_t idx)
{
  array_pids[idx]->Compute();
   11794:	0c 94 68 df 	jmp	0x1bed0	; 0x1bed0 <eeprom_read_byte>

00011798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>:
_ZN5EERefaSEh():
   11798:	0c 94 70 df 	jmp	0x1bee0	; 0x1bee0 <eeprom_write_byte>

0001179c <thermostat_ring_get_state(unsigned char)>:
_Z25thermostat_ring_get_stateh():
   1179c:	e8 2f       	mov	r30, r24
   1179e:	f0 e0       	ldi	r31, 0x00	; 0
   117a0:	e3 52       	subi	r30, 0x23	; 35
   117a2:	fe 4e       	sbci	r31, 0xEE	; 238
   117a4:	80 81       	ld	r24, Z
   117a6:	08 95       	ret

000117a8 <thermostat_ring_set_state(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_statehh():
   117a8:	e8 2f       	mov	r30, r24
   117aa:	f0 e0       	ldi	r31, 0x00	; 0
   117ac:	e3 52       	subi	r30, 0x23	; 35
   117ae:	fe 4e       	sbci	r31, 0xEE	; 238
   117b0:	60 83       	st	Z, r22
   117b2:	08 95       	ret

000117b4 <thermostat_ring_set_power(unsigned char, unsigned char)>:
_Z25thermostat_ring_set_powerhh():
   117b4:	e8 2f       	mov	r30, r24
   117b6:	f0 e0       	ldi	r31, 0x00	; 0
   117b8:	e8 52       	subi	r30, 0x28	; 40
   117ba:	fe 4e       	sbci	r31, 0xEE	; 238
   117bc:	60 83       	st	Z, r22
   117be:	08 95       	ret

000117c0 <thermostat_init_pid()>:
_Z19thermostat_init_pidv():
   117c0:	2f 92       	push	r2
   117c2:	3f 92       	push	r3
   117c4:	4f 92       	push	r4
   117c6:	5f 92       	push	r5
   117c8:	6f 92       	push	r6
   117ca:	7f 92       	push	r7
   117cc:	8f 92       	push	r8
   117ce:	9f 92       	push	r9
   117d0:	af 92       	push	r10
   117d2:	bf 92       	push	r11
   117d4:	cf 92       	push	r12
   117d6:	df 92       	push	r13
   117d8:	ef 92       	push	r14
   117da:	ff 92       	push	r15
   117dc:	0f 93       	push	r16
   117de:	1f 93       	push	r17
   117e0:	cf 93       	push	r28
   117e2:	df 93       	push	r29
   117e4:	2b e4       	ldi	r18, 0x4B	; 75
   117e6:	82 2e       	mov	r8, r18
   117e8:	22 e1       	ldi	r18, 0x12	; 18
   117ea:	92 2e       	mov	r9, r18
   117ec:	37 e3       	ldi	r19, 0x37	; 55
   117ee:	43 2e       	mov	r4, r19
   117f0:	32 e1       	ldi	r19, 0x12	; 18
   117f2:	53 2e       	mov	r5, r19
   117f4:	43 e2       	ldi	r20, 0x23	; 35
   117f6:	24 2e       	mov	r2, r20
   117f8:	42 e1       	ldi	r20, 0x12	; 18
   117fa:	34 2e       	mov	r3, r20
   117fc:	d0 e0       	ldi	r29, 0x00	; 0
   117fe:	c0 e0       	ldi	r28, 0x00	; 0
   11800:	8c e3       	ldi	r24, 0x3C	; 60
   11802:	90 e0       	ldi	r25, 0x00	; 0
   11804:	0e 94 0a d1 	call	0x1a214	; 0x1a214 <operator new(unsigned int)>
   11808:	3c 01       	movw	r6, r24
   1180a:	1f 92       	push	r1
   1180c:	1f 92       	push	r1
   1180e:	8f e3       	ldi	r24, 0x3F	; 63
   11810:	8f 93       	push	r24
   11812:	80 e8       	ldi	r24, 0x80	; 128
   11814:	8f 93       	push	r24
   11816:	1f 92       	push	r1
   11818:	1f 92       	push	r1
   1181a:	a1 2c       	mov	r10, r1
   1181c:	b1 2c       	mov	r11, r1
   1181e:	80 ea       	ldi	r24, 0xA0	; 160
   11820:	c8 2e       	mov	r12, r24
   11822:	80 e4       	ldi	r24, 0x40	; 64
   11824:	d8 2e       	mov	r13, r24
   11826:	e1 2c       	mov	r14, r1
   11828:	f1 2c       	mov	r15, r1
   1182a:	00 e0       	ldi	r16, 0x00	; 0
   1182c:	10 e4       	ldi	r17, 0x40	; 64
   1182e:	91 01       	movw	r18, r2
   11830:	a2 01       	movw	r20, r4
   11832:	b4 01       	movw	r22, r8
   11834:	c3 01       	movw	r24, r6
   11836:	0e 94 61 ba 	call	0x174c2	; 0x174c2 <PID::PID(double*, double*, double*, double, double, double, int)>
   1183a:	e0 91 d6 11 	lds	r30, 0x11D6	; 0x8011d6 <array_pids>
   1183e:	f0 91 d7 11 	lds	r31, 0x11D7	; 0x8011d7 <array_pids+0x1>
   11842:	ec 0f       	add	r30, r28
   11844:	fd 1f       	adc	r31, r29
   11846:	71 82       	std	Z+1, r7	; 0x01
   11848:	60 82       	st	Z, r6
   1184a:	61 e0       	ldi	r22, 0x01	; 1
   1184c:	70 e0       	ldi	r23, 0x00	; 0
   1184e:	c3 01       	movw	r24, r6
   11850:	0e 94 99 b9 	call	0x17332	; 0x17332 <PID::SetMode(int)>
   11854:	e0 91 d6 11 	lds	r30, 0x11D6	; 0x8011d6 <array_pids>
   11858:	f0 91 d7 11 	lds	r31, 0x11D7	; 0x8011d7 <array_pids+0x1>
   1185c:	ec 0f       	add	r30, r28
   1185e:	fd 1f       	adc	r31, r29
   11860:	00 e0       	ldi	r16, 0x00	; 0
   11862:	10 e0       	ldi	r17, 0x00	; 0
   11864:	2f e7       	ldi	r18, 0x7F	; 127
   11866:	33 e4       	ldi	r19, 0x43	; 67
   11868:	40 e0       	ldi	r20, 0x00	; 0
   1186a:	50 e0       	ldi	r21, 0x00	; 0
   1186c:	ba 01       	movw	r22, r20
   1186e:	80 81       	ld	r24, Z
   11870:	91 81       	ldd	r25, Z+1	; 0x01
   11872:	0e 94 d1 b8 	call	0x171a2	; 0x171a2 <PID::SetOutputLimits(double, double)>
   11876:	84 e0       	ldi	r24, 0x04	; 4
   11878:	88 0e       	add	r8, r24
   1187a:	91 1c       	adc	r9, r1
   1187c:	84 e0       	ldi	r24, 0x04	; 4
   1187e:	48 0e       	add	r4, r24
   11880:	51 1c       	adc	r5, r1
   11882:	84 e0       	ldi	r24, 0x04	; 4
   11884:	28 0e       	add	r2, r24
   11886:	31 1c       	adc	r3, r1
   11888:	22 96       	adiw	r28, 0x02	; 2
   1188a:	0f 90       	pop	r0
   1188c:	0f 90       	pop	r0
   1188e:	0f 90       	pop	r0
   11890:	0f 90       	pop	r0
   11892:	0f 90       	pop	r0
   11894:	0f 90       	pop	r0
   11896:	ca 30       	cpi	r28, 0x0A	; 10
   11898:	d1 05       	cpc	r29, r1
   1189a:	09 f0       	breq	.+2      	; 0x1189e <thermostat_init_pid()+0xde>
   1189c:	b1 cf       	rjmp	.-158    	; 0x11800 <thermostat_init_pid()+0x40>
   1189e:	df 91       	pop	r29
   118a0:	cf 91       	pop	r28
   118a2:	1f 91       	pop	r17
   118a4:	0f 91       	pop	r16
   118a6:	ff 90       	pop	r15
   118a8:	ef 90       	pop	r14
   118aa:	df 90       	pop	r13
   118ac:	cf 90       	pop	r12
   118ae:	bf 90       	pop	r11
   118b0:	af 90       	pop	r10
   118b2:	9f 90       	pop	r9
   118b4:	8f 90       	pop	r8
   118b6:	7f 90       	pop	r7
   118b8:	6f 90       	pop	r6
   118ba:	5f 90       	pop	r5
   118bc:	4f 90       	pop	r4
   118be:	3f 90       	pop	r3
   118c0:	2f 90       	pop	r2
   118c2:	08 95       	ret

000118c4 <thermostat_pid_setdirection_direct(unsigned char)>:
_Z34thermostat_pid_setdirection_directh():
   118c4:	90 e0       	ldi	r25, 0x00	; 0
   118c6:	88 0f       	add	r24, r24
   118c8:	99 1f       	adc	r25, r25
   118ca:	20 91 d6 11 	lds	r18, 0x11D6	; 0x8011d6 <array_pids>
   118ce:	30 91 d7 11 	lds	r19, 0x11D7	; 0x8011d7 <array_pids+0x1>
   118d2:	82 0f       	add	r24, r18
   118d4:	93 1f       	adc	r25, r19
   118d6:	70 e0       	ldi	r23, 0x00	; 0
   118d8:	60 e0       	ldi	r22, 0x00	; 0
   118da:	fc 01       	movw	r30, r24
   118dc:	80 81       	ld	r24, Z
   118de:	91 81       	ldd	r25, Z+1	; 0x01
   118e0:	0c 94 b0 b9 	jmp	0x17360	; 0x17360 <PID::SetControllerDirection(int)>

000118e4 <thermostat_pid_setdirection_reverse(unsigned char)>:
_Z35thermostat_pid_setdirection_reverseh():
   118e4:	90 e0       	ldi	r25, 0x00	; 0
   118e6:	88 0f       	add	r24, r24
   118e8:	99 1f       	adc	r25, r25
   118ea:	20 91 d6 11 	lds	r18, 0x11D6	; 0x8011d6 <array_pids>
   118ee:	30 91 d7 11 	lds	r19, 0x11D7	; 0x8011d7 <array_pids+0x1>
   118f2:	82 0f       	add	r24, r18
   118f4:	93 1f       	adc	r25, r19
   118f6:	61 e0       	ldi	r22, 0x01	; 1
   118f8:	70 e0       	ldi	r23, 0x00	; 0
   118fa:	fc 01       	movw	r30, r24
   118fc:	80 81       	ld	r24, Z
   118fe:	91 81       	ldd	r25, Z+1	; 0x01
   11900:	0c 94 b0 b9 	jmp	0x17360	; 0x17360 <PID::SetControllerDirection(int)>

00011904 <thermostat_get_pid_p(unsigned char)>:
_Z20thermostat_get_pid_ph():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
   11904:	94 e0       	ldi	r25, 0x04	; 4
   11906:	89 9f       	mul	r24, r25
   11908:	f0 01       	movw	r30, r0
   1190a:	11 24       	eor	r1, r1
   1190c:	e1 5f       	subi	r30, 0xF1	; 241
   1190e:	fd 4e       	sbci	r31, 0xED	; 237
   11910:	60 81       	ld	r22, Z
   11912:	71 81       	ldd	r23, Z+1	; 0x01
   11914:	82 81       	ldd	r24, Z+2	; 0x02
   11916:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:66
}
   11918:	08 95       	ret

0001191a <thermostat_pid_input(unsigned char, double)>:
_Z20thermostat_pid_inputhd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1191a:	94 e0       	ldi	r25, 0x04	; 4
   1191c:	89 9f       	mul	r24, r25
   1191e:	f0 01       	movw	r30, r0
   11920:	11 24       	eor	r1, r1
   11922:	e5 5b       	subi	r30, 0xB5	; 181
   11924:	fd 4e       	sbci	r31, 0xED	; 237
   11926:	40 83       	st	Z, r20
   11928:	51 83       	std	Z+1, r21	; 0x01
   1192a:	62 83       	std	Z+2, r22	; 0x02
   1192c:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:71
}
   1192e:	08 95       	ret

00011930 <thermostat_pid_setpoint(unsigned char, double)>:
_Z23thermostat_pid_setpointhd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   11930:	94 e0       	ldi	r25, 0x04	; 4
   11932:	89 9f       	mul	r24, r25
   11934:	f0 01       	movw	r30, r0
   11936:	11 24       	eor	r1, r1
   11938:	ed 5d       	subi	r30, 0xDD	; 221
   1193a:	fd 4e       	sbci	r31, 0xED	; 237
   1193c:	40 83       	st	Z, r20
   1193e:	51 83       	std	Z+1, r21	; 0x01
   11940:	62 83       	std	Z+2, r22	; 0x02
   11942:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:76
}
   11944:	08 95       	ret

00011946 <thermostat_pid_output(unsigned char)>:
_Z21thermostat_pid_outputh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   11946:	94 e0       	ldi	r25, 0x04	; 4
   11948:	89 9f       	mul	r24, r25
   1194a:	f0 01       	movw	r30, r0
   1194c:	11 24       	eor	r1, r1
   1194e:	e9 5c       	subi	r30, 0xC9	; 201
   11950:	fd 4e       	sbci	r31, 0xED	; 237
   11952:	60 81       	ld	r22, Z
   11954:	71 81       	ldd	r23, Z+1	; 0x01
   11956:	82 81       	ldd	r24, Z+2	; 0x02
   11958:	93 81       	ldd	r25, Z+3	; 0x03
   1195a:	0e 94 f9 d1 	call	0x1a3f2	; 0x1a3f2 <__fixunssfsi>
   1195e:	86 2f       	mov	r24, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:81
}
   11960:	08 95       	ret

00011962 <thermostat_get_pid_i(unsigned char)>:
_Z20thermostat_get_pid_ih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
   11962:	94 e0       	ldi	r25, 0x04	; 4
   11964:	89 9f       	mul	r24, r25
   11966:	f0 01       	movw	r30, r0
   11968:	11 24       	eor	r1, r1
   1196a:	e5 50       	subi	r30, 0x05	; 5
   1196c:	fe 4e       	sbci	r31, 0xEE	; 238
   1196e:	60 81       	ld	r22, Z
   11970:	71 81       	ldd	r23, Z+1	; 0x01
   11972:	82 81       	ldd	r24, Z+2	; 0x02
   11974:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:86
}
   11976:	08 95       	ret

00011978 <thermostat_get_pid_d(unsigned char)>:
_Z20thermostat_get_pid_dh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
   11978:	94 e0       	ldi	r25, 0x04	; 4
   1197a:	89 9f       	mul	r24, r25
   1197c:	f0 01       	movw	r30, r0
   1197e:	11 24       	eor	r1, r1
   11980:	e9 51       	subi	r30, 0x19	; 25
   11982:	fe 4e       	sbci	r31, 0xEE	; 238
   11984:	60 81       	ld	r22, Z
   11986:	71 81       	ldd	r23, Z+1	; 0x01
   11988:	82 81       	ldd	r24, Z+2	; 0x02
   1198a:	93 81       	ldd	r25, Z+3	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:91
}
   1198c:	08 95       	ret

0001198e <thermostat_get_pid_time(unsigned char)>:
_Z23thermostat_get_pid_timeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
   1198e:	e8 2f       	mov	r30, r24
   11990:	f0 e0       	ldi	r31, 0x00	; 0
   11992:	ee 51       	subi	r30, 0x1E	; 30
   11994:	fe 4e       	sbci	r31, 0xEE	; 238
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:96
}
   11996:	80 81       	ld	r24, Z
   11998:	08 95       	ret

0001199a <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:100

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
   1199a:	ef 92       	push	r14
   1199c:	ff 92       	push	r15
   1199e:	0f 93       	push	r16
   119a0:	1f 93       	push	r17
   119a2:	cf 93       	push	r28
   119a4:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
   119a6:	91 e2       	ldi	r25, 0x21	; 33
   119a8:	89 9f       	mul	r24, r25
   119aa:	e0 01       	movw	r28, r0
   119ac:	11 24       	eor	r1, r1
   119ae:	8e 01       	movw	r16, r28
   119b0:	04 5b       	subi	r16, 0xB4	; 180
   119b2:	1e 4f       	sbci	r17, 0xFE	; 254
   119b4:	7b 01       	movw	r14, r22
   119b6:	cb 5a       	subi	r28, 0xAB	; 171
   119b8:	de 4f       	sbci	r29, 0xFE	; 254
   119ba:	c8 01       	movw	r24, r16
   119bc:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:105
    name[i] = t;
   119c0:	f7 01       	movw	r30, r14
   119c2:	81 93       	st	Z+, r24
   119c4:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
   119c6:	88 23       	and	r24, r24
   119c8:	29 f0       	breq	.+10     	; 0x119d4 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
   119ca:	0f 5f       	subi	r16, 0xFF	; 255
   119cc:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:102 (discriminator 2)

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   119ce:	0c 17       	cp	r16, r28
   119d0:	1d 07       	cpc	r17, r29
   119d2:	99 f7       	brne	.-26     	; 0x119ba <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
   119d4:	df 91       	pop	r29
   119d6:	cf 91       	pop	r28
   119d8:	1f 91       	pop	r17
   119da:	0f 91       	pop	r16
   119dc:	ff 90       	pop	r15
   119de:	ef 90       	pop	r14
   119e0:	08 95       	ret

000119e2 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:110
void thermostat_ring_set_name(uint8_t idx, char *name)
{
   119e2:	df 92       	push	r13
   119e4:	ef 92       	push	r14
   119e6:	ff 92       	push	r15
   119e8:	0f 93       	push	r16
   119ea:	1f 93       	push	r17
   119ec:	cf 93       	push	r28
   119ee:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
   119f0:	91 e2       	ldi	r25, 0x21	; 33
   119f2:	89 9f       	mul	r24, r25
   119f4:	e0 01       	movw	r28, r0
   119f6:	11 24       	eor	r1, r1
   119f8:	7b 01       	movw	r14, r22
   119fa:	8e 01       	movw	r16, r28
   119fc:	04 5b       	subi	r16, 0xB4	; 180
   119fe:	1e 4f       	sbci	r17, 0xFE	; 254
   11a00:	cb 5a       	subi	r28, 0xAB	; 171
   11a02:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
   11a04:	f7 01       	movw	r30, r14
   11a06:	d1 90       	ld	r13, Z+
   11a08:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
   11a0a:	6d 2d       	mov	r22, r13
   11a0c:	c8 01       	movw	r24, r16
   11a0e:	0e 94 cc 8b 	call	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
   11a12:	dd 20       	and	r13, r13
   11a14:	29 f0       	breq	.+10     	; 0x11a20 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
   11a16:	0f 5f       	subi	r16, 0xFF	; 255
   11a18:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:112 (discriminator 2)
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   11a1a:	0c 17       	cp	r16, r28
   11a1c:	1d 07       	cpc	r17, r29
   11a1e:	91 f7       	brne	.-28     	; 0x11a04 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
   11a20:	df 91       	pop	r29
   11a22:	cf 91       	pop	r28
   11a24:	1f 91       	pop	r17
   11a26:	0f 91       	pop	r16
   11a28:	ff 90       	pop	r15
   11a2a:	ef 90       	pop	r14
   11a2c:	df 90       	pop	r13
   11a2e:	08 95       	ret

00011a30 <thermostat_ring_get_output(unsigned char)>:
_Z26thermostat_ring_get_outputh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   11a30:	21 e2       	ldi	r18, 0x21	; 33
   11a32:	82 9f       	mul	r24, r18
   11a34:	c0 01       	movw	r24, r0
   11a36:	11 24       	eor	r1, r1
   11a38:	81 5a       	subi	r24, 0xA1	; 161
   11a3a:	9e 4f       	sbci	r25, 0xFE	; 254
   11a3c:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011a40 <thermostat_ring_set_output(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_outputhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   11a40:	21 e2       	ldi	r18, 0x21	; 33
   11a42:	82 9f       	mul	r24, r18
   11a44:	c0 01       	movw	r24, r0
   11a46:	11 24       	eor	r1, r1
   11a48:	81 5a       	subi	r24, 0xA1	; 161
   11a4a:	9e 4f       	sbci	r25, 0xFE	; 254
   11a4c:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011a50 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
   11a50:	21 e2       	ldi	r18, 0x21	; 33
   11a52:	82 9f       	mul	r24, r18
   11a54:	c0 01       	movw	r24, r0
   11a56:	11 24       	eor	r1, r1
   11a58:	83 5a       	subi	r24, 0xA3	; 163
   11a5a:	9e 4f       	sbci	r25, 0xFE	; 254
   11a5c:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011a60 <thermostat_ring_set_active(unsigned char, unsigned char)>:
_Z26thermostat_ring_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   11a60:	21 e2       	ldi	r18, 0x21	; 33
   11a62:	82 9f       	mul	r24, r18
   11a64:	c0 01       	movw	r24, r0
   11a66:	11 24       	eor	r1, r1
   11a68:	83 5a       	subi	r24, 0xA3	; 163
   11a6a:	9e 4f       	sbci	r25, 0xFE	; 254
   11a6c:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011a70 <thermostat_ring_get_program_id(unsigned char)>:
_Z30thermostat_ring_get_program_idh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   11a70:	21 e2       	ldi	r18, 0x21	; 33
   11a72:	82 9f       	mul	r24, r18
   11a74:	c0 01       	movw	r24, r0
   11a76:	11 24       	eor	r1, r1
   11a78:	85 5a       	subi	r24, 0xA5	; 165
   11a7a:	9e 4f       	sbci	r25, 0xFE	; 254
   11a7c:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011a80 <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   11a80:	21 e2       	ldi	r18, 0x21	; 33
   11a82:	82 9f       	mul	r24, r18
   11a84:	c0 01       	movw	r24, r0
   11a86:	11 24       	eor	r1, r1
   11a88:	85 5a       	subi	r24, 0xA5	; 165
   11a8a:	9e 4f       	sbci	r25, 0xFE	; 254
   11a8c:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011a90 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:153
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
   11a90:	0f 93       	push	r16
   11a92:	1f 93       	push	r17
   11a94:	cf 93       	push	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
   11a96:	91 e2       	ldi	r25, 0x21	; 33
   11a98:	89 9f       	mul	r24, r25
   11a9a:	80 01       	movw	r16, r0
   11a9c:	11 24       	eor	r1, r1
   11a9e:	c8 01       	movw	r24, r16
   11aa0:	8a 5a       	subi	r24, 0xAA	; 170
   11aa2:	9e 4f       	sbci	r25, 0xFE	; 254
   11aa4:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   11aa8:	c8 2f       	mov	r28, r24
   11aaa:	c8 01       	movw	r24, r16
   11aac:	89 5a       	subi	r24, 0xA9	; 169
   11aae:	9e 4f       	sbci	r25, 0xFE	; 254
   11ab0:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   11ab4:	2c 2f       	mov	r18, r28
   11ab6:	30 e0       	ldi	r19, 0x00	; 0
   11ab8:	32 2f       	mov	r19, r18
   11aba:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:155
}
   11abc:	82 0f       	add	r24, r18
   11abe:	93 2f       	mov	r25, r19
   11ac0:	91 1d       	adc	r25, r1
   11ac2:	cf 91       	pop	r28
   11ac4:	1f 91       	pop	r17
   11ac6:	0f 91       	pop	r16
   11ac8:	08 95       	ret

00011aca <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:157
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
   11aca:	1f 93       	push	r17
   11acc:	cf 93       	push	r28
   11ace:	df 93       	push	r29
   11ad0:	16 2f       	mov	r17, r22
   11ad2:	67 2f       	mov	r22, r23
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
   11ad4:	91 e2       	ldi	r25, 0x21	; 33
   11ad6:	89 9f       	mul	r24, r25
   11ad8:	e0 01       	movw	r28, r0
   11ada:	11 24       	eor	r1, r1
   11adc:	ce 01       	movw	r24, r28
   11ade:	8a 5a       	subi	r24, 0xAA	; 170
   11ae0:	9e 4f       	sbci	r25, 0xFE	; 254
   11ae2:	0e 94 cc 8b 	call	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
   11ae6:	61 2f       	mov	r22, r17
   11ae8:	ce 01       	movw	r24, r28
   11aea:	89 5a       	subi	r24, 0xA9	; 169
   11aec:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:160
}
   11aee:	df 91       	pop	r29
   11af0:	cf 91       	pop	r28
   11af2:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
   11af4:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011af8 <thermostat_ring_get_asociate_tds(unsigned char)>:
_Z32thermostat_ring_get_asociate_tdsh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   11af8:	21 e2       	ldi	r18, 0x21	; 33
   11afa:	82 9f       	mul	r24, r18
   11afc:	c0 01       	movw	r24, r0
   11afe:	11 24       	eor	r1, r1
   11b00:	84 5a       	subi	r24, 0xA4	; 164
   11b02:	9e 4f       	sbci	r25, 0xFE	; 254
   11b04:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011b08 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_asociate_tdshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   11b08:	21 e2       	ldi	r18, 0x21	; 33
   11b0a:	82 9f       	mul	r24, r18
   11b0c:	c0 01       	movw	r24, r0
   11b0e:	11 24       	eor	r1, r1
   11b10:	84 5a       	subi	r24, 0xA4	; 164
   11b12:	9e 4f       	sbci	r25, 0xFE	; 254
   11b14:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011b18 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
   11b18:	21 e2       	ldi	r18, 0x21	; 33
   11b1a:	82 9f       	mul	r24, r18
   11b1c:	c0 01       	movw	r24, r0
   11b1e:	11 24       	eor	r1, r1
   11b20:	82 5a       	subi	r24, 0xA2	; 162
   11b22:	9e 4f       	sbci	r25, 0xFE	; 254
   11b24:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011b28 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
   11b28:	21 e2       	ldi	r18, 0x21	; 33
   11b2a:	82 9f       	mul	r24, r18
   11b2c:	c0 01       	movw	r24, r0
   11b2e:	11 24       	eor	r1, r1
   11b30:	82 5a       	subi	r24, 0xA2	; 162
   11b32:	9e 4f       	sbci	r25, 0xFE	; 254
   11b34:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011b38 <thermostat_ring_get_mode_1(unsigned char, unsigned char)>:
_Z26thermostat_ring_get_mode_1hh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:183
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
   11b38:	cf 93       	push	r28
   11b3a:	c6 2f       	mov	r28, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
   11b3c:	0e 94 8c 8d 	call	0x11b18	; 0x11b18 <thermostat_ring_get_mode(unsigned char)>
   11b40:	91 e0       	ldi	r25, 0x01	; 1
   11b42:	8c 13       	cpse	r24, r28
   11b44:	90 e0       	ldi	r25, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:188
    ret = true;
  return ret;
}
   11b46:	89 2f       	mov	r24, r25
   11b48:	cf 91       	pop	r28
   11b4a:	08 95       	ret

00011b4c <thermostat_ring_get_status_data(unsigned char)>:
_Z31thermostat_ring_get_status_datah():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   11b4c:	21 e2       	ldi	r18, 0x21	; 33
   11b4e:	82 9f       	mul	r24, r18
   11b50:	c0 01       	movw	r24, r0
   11b52:	11 24       	eor	r1, r1
   11b54:	88 5a       	subi	r24, 0xA8	; 168
   11b56:	9e 4f       	sbci	r25, 0xFE	; 254
   11b58:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011b5c <thermostat_ring_get_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_get_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:196
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
   11b5c:	cf 93       	push	r28
   11b5e:	c6 2f       	mov	r28, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:197
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
   11b60:	21 e2       	ldi	r18, 0x21	; 33
   11b62:	82 9f       	mul	r24, r18
   11b64:	c0 01       	movw	r24, r0
   11b66:	11 24       	eor	r1, r1
   11b68:	88 5a       	subi	r24, 0xA8	; 168
   11b6a:	9e 4f       	sbci	r25, 0xFE	; 254
   11b6c:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   11b70:	21 e0       	ldi	r18, 0x01	; 1
   11b72:	30 e0       	ldi	r19, 0x00	; 0
   11b74:	01 c0       	rjmp	.+2      	; 0x11b78 <thermostat_ring_get_status_bites(unsigned char, unsigned char)+0x1c>
   11b76:	22 0f       	add	r18, r18
   11b78:	ca 95       	dec	r28
   11b7a:	ea f7       	brpl	.-6      	; 0x11b76 <thermostat_ring_get_status_bites(unsigned char, unsigned char)+0x1a>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:198
}
   11b7c:	82 23       	and	r24, r18
   11b7e:	cf 91       	pop	r28
   11b80:	08 95       	ret

00011b82 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>:
_Z32thermostat_ring_set_status_biteshh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   11b82:	21 e2       	ldi	r18, 0x21	; 33
   11b84:	82 9f       	mul	r24, r18
   11b86:	c0 01       	movw	r24, r0
   11b88:	11 24       	eor	r1, r1
   11b8a:	88 5a       	subi	r24, 0xA8	; 168
   11b8c:	9e 4f       	sbci	r25, 0xFE	; 254
   11b8e:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011b92 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)>:
_Z28thermostat_ring_update_biteshhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:204
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
   11b92:	1f 93       	push	r17
   11b94:	cf 93       	push	r28
   11b96:	df 93       	push	r29
   11b98:	c8 2f       	mov	r28, r24
   11b9a:	16 2f       	mov	r17, r22
   11b9c:	d4 2f       	mov	r29, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:205
  uint8_t b = thermostat_ring_get_status_data(idx);
   11b9e:	0e 94 a6 8d 	call	0x11b4c	; 0x11b4c <thermostat_ring_get_status_data(unsigned char)>
   11ba2:	61 e0       	ldi	r22, 0x01	; 1
   11ba4:	70 e0       	ldi	r23, 0x00	; 0
   11ba6:	01 c0       	rjmp	.+2      	; 0x11baa <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x18>
   11ba8:	66 0f       	add	r22, r22
   11baa:	1a 95       	dec	r17
   11bac:	ea f7       	brpl	.-6      	; 0x11ba8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x16>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  if (sets == 0) cbi(b, bits);
   11bae:	d1 11       	cpse	r29, r1
   11bb0:	08 c0       	rjmp	.+16     	; 0x11bc2 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x30>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206 (discriminator 1)
   11bb2:	60 95       	com	r22
   11bb4:	68 23       	and	r22, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   11bb6:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
}
   11bb8:	df 91       	pop	r29
   11bba:	cf 91       	pop	r28
   11bbc:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:208
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
   11bbe:	0c 94 c1 8d 	jmp	0x11b82	; 0x11b82 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   11bc2:	68 2b       	or	r22, r24
   11bc4:	f8 cf       	rjmp	.-16     	; 0x11bb6 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char)+0x24>

00011bc6 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
   11bc6:	af 92       	push	r10
   11bc8:	bf 92       	push	r11
   11bca:	cf 92       	push	r12
   11bcc:	df 92       	push	r13
   11bce:	ef 92       	push	r14
   11bd0:	ff 92       	push	r15
   11bd2:	0f 93       	push	r16
   11bd4:	1f 93       	push	r17
   11bd6:	cf 93       	push	r28
   11bd8:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
   11bda:	c8 2f       	mov	r28, r24
   11bdc:	d0 e0       	ldi	r29, 0x00	; 0
   11bde:	5e 01       	movw	r10, r28
   11be0:	aa 0c       	add	r10, r10
   11be2:	bb 1c       	adc	r11, r11
   11be4:	ce 01       	movw	r24, r28
   11be6:	88 0f       	add	r24, r24
   11be8:	99 1f       	adc	r25, r25
   11bea:	88 0f       	add	r24, r24
   11bec:	99 1f       	adc	r25, r25
   11bee:	fc 01       	movw	r30, r24
   11bf0:	e9 51       	subi	r30, 0x19	; 25
   11bf2:	fe 4e       	sbci	r31, 0xEE	; 238
   11bf4:	c0 80       	ld	r12, Z
   11bf6:	d1 80       	ldd	r13, Z+1	; 0x01
   11bf8:	e2 80       	ldd	r14, Z+2	; 0x02
   11bfa:	f3 80       	ldd	r15, Z+3	; 0x03
   11bfc:	fc 01       	movw	r30, r24
   11bfe:	e5 50       	subi	r30, 0x05	; 5
   11c00:	fe 4e       	sbci	r31, 0xEE	; 238
   11c02:	00 81       	ld	r16, Z
   11c04:	11 81       	ldd	r17, Z+1	; 0x01
   11c06:	22 81       	ldd	r18, Z+2	; 0x02
   11c08:	33 81       	ldd	r19, Z+3	; 0x03
   11c0a:	81 5f       	subi	r24, 0xF1	; 241
   11c0c:	9d 4e       	sbci	r25, 0xED	; 237
   11c0e:	fc 01       	movw	r30, r24
   11c10:	40 81       	ld	r20, Z
   11c12:	51 81       	ldd	r21, Z+1	; 0x01
   11c14:	62 81       	ldd	r22, Z+2	; 0x02
   11c16:	73 81       	ldd	r23, Z+3	; 0x03
   11c18:	e0 91 d6 11 	lds	r30, 0x11D6	; 0x8011d6 <array_pids>
   11c1c:	f0 91 d7 11 	lds	r31, 0x11D7	; 0x8011d7 <array_pids+0x1>
   11c20:	ea 0d       	add	r30, r10
   11c22:	fb 1d       	adc	r31, r11
   11c24:	80 81       	ld	r24, Z
   11c26:	91 81       	ldd	r25, Z+1	; 0x01
   11c28:	0e 94 6e b8 	call	0x170dc	; 0x170dc <PID::SetTunings(double, double, double)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   11c2c:	ce 51       	subi	r28, 0x1E	; 30
   11c2e:	de 4e       	sbci	r29, 0xEE	; 238
   11c30:	68 81       	ld	r22, Y
   11c32:	70 e0       	ldi	r23, 0x00	; 0
   11c34:	80 91 d6 11 	lds	r24, 0x11D6	; 0x8011d6 <array_pids>
   11c38:	90 91 d7 11 	lds	r25, 0x11D7	; 0x8011d7 <array_pids+0x1>
   11c3c:	a8 0e       	add	r10, r24
   11c3e:	b9 1e       	adc	r11, r25
   11c40:	f5 01       	movw	r30, r10
   11c42:	80 81       	ld	r24, Z
   11c44:	91 81       	ldd	r25, Z+1	; 0x01
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
   11c46:	df 91       	pop	r29
   11c48:	cf 91       	pop	r28
   11c4a:	1f 91       	pop	r17
   11c4c:	0f 91       	pop	r16
   11c4e:	ff 90       	pop	r15
   11c50:	ef 90       	pop	r14
   11c52:	df 90       	pop	r13
   11c54:	cf 90       	pop	r12
   11c56:	bf 90       	pop	r11
   11c58:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220


void thermostat_ring_update_pid_parameters(uint8_t idx)
{
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
  array_pids[idx]->SetSampleTime(PID_time[idx]);
   11c5a:	0c 94 84 b8 	jmp	0x17108	; 0x17108 <PID::SetSampleTime(int)>

00011c5e <thermostat_ring_get_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_get_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:224
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
   11c5e:	ef 92       	push	r14
   11c60:	ff 92       	push	r15
   11c62:	0f 93       	push	r16
   11c64:	1f 93       	push	r17
   11c66:	cf 93       	push	r28
   11c68:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   11c6a:	e8 2e       	mov	r14, r24
   11c6c:	f1 2c       	mov	r15, r1
   11c6e:	91 e2       	ldi	r25, 0x21	; 33
   11c70:	89 9f       	mul	r24, r25
   11c72:	e0 01       	movw	r28, r0
   11c74:	11 24       	eor	r1, r1
   11c76:	ce 01       	movw	r24, r28
   11c78:	80 5a       	subi	r24, 0xA0	; 160
   11c7a:	9e 4f       	sbci	r25, 0xFE	; 254
   11c7c:	0e 94 8c b6 	call	0x16d18	; 0x16d18 <EEPROMreadFloat(unsigned int)>
   11c80:	87 01       	movw	r16, r14
   11c82:	00 0f       	add	r16, r16
   11c84:	11 1f       	adc	r17, r17
   11c86:	00 0f       	add	r16, r16
   11c88:	11 1f       	adc	r17, r17
   11c8a:	f8 01       	movw	r30, r16
   11c8c:	e1 5f       	subi	r30, 0xF1	; 241
   11c8e:	fd 4e       	sbci	r31, 0xED	; 237
   11c90:	60 83       	st	Z, r22
   11c92:	71 83       	std	Z+1, r23	; 0x01
   11c94:	82 83       	std	Z+2, r24	; 0x02
   11c96:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   11c98:	ce 01       	movw	r24, r28
   11c9a:	8c 59       	subi	r24, 0x9C	; 156
   11c9c:	9e 4f       	sbci	r25, 0xFE	; 254
   11c9e:	0e 94 8c b6 	call	0x16d18	; 0x16d18 <EEPROMreadFloat(unsigned int)>
   11ca2:	f8 01       	movw	r30, r16
   11ca4:	e5 50       	subi	r30, 0x05	; 5
   11ca6:	fe 4e       	sbci	r31, 0xEE	; 238
   11ca8:	60 83       	st	Z, r22
   11caa:	71 83       	std	Z+1, r23	; 0x01
   11cac:	82 83       	std	Z+2, r24	; 0x02
   11cae:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   11cb0:	ce 01       	movw	r24, r28
   11cb2:	88 59       	subi	r24, 0x98	; 152
   11cb4:	9e 4f       	sbci	r25, 0xFE	; 254
   11cb6:	0e 94 8c b6 	call	0x16d18	; 0x16d18 <EEPROMreadFloat(unsigned int)>
   11cba:	f8 01       	movw	r30, r16
   11cbc:	e9 51       	subi	r30, 0x19	; 25
   11cbe:	fe 4e       	sbci	r31, 0xEE	; 238
   11cc0:	60 83       	st	Z, r22
   11cc2:	71 83       	std	Z+1, r23	; 0x01
   11cc4:	82 83       	std	Z+2, r24	; 0x02
   11cc6:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   11cc8:	ce 01       	movw	r24, r28
   11cca:	84 59       	subi	r24, 0x94	; 148
   11ccc:	9e 4f       	sbci	r25, 0xFE	; 254
   11cce:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   11cd2:	f7 01       	movw	r30, r14
   11cd4:	ee 51       	subi	r30, 0x1E	; 30
   11cd6:	fe 4e       	sbci	r31, 0xEE	; 238
   11cd8:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:229
}
   11cda:	df 91       	pop	r29
   11cdc:	cf 91       	pop	r28
   11cde:	1f 91       	pop	r17
   11ce0:	0f 91       	pop	r16
   11ce2:	ff 90       	pop	r15
   11ce4:	ef 90       	pop	r14
   11ce6:	08 95       	ret

00011ce8 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
   11ce8:	ef 92       	push	r14
   11cea:	ff 92       	push	r15
   11cec:	0f 93       	push	r16
   11cee:	1f 93       	push	r17
   11cf0:	cf 93       	push	r28
   11cf2:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
   11cf4:	e8 2e       	mov	r14, r24
   11cf6:	f1 2c       	mov	r15, r1
   11cf8:	91 e2       	ldi	r25, 0x21	; 33
   11cfa:	89 9f       	mul	r24, r25
   11cfc:	e0 01       	movw	r28, r0
   11cfe:	11 24       	eor	r1, r1
   11d00:	87 01       	movw	r16, r14
   11d02:	00 0f       	add	r16, r16
   11d04:	11 1f       	adc	r17, r17
   11d06:	00 0f       	add	r16, r16
   11d08:	11 1f       	adc	r17, r17
   11d0a:	f8 01       	movw	r30, r16
   11d0c:	e1 5f       	subi	r30, 0xF1	; 241
   11d0e:	fd 4e       	sbci	r31, 0xED	; 237
   11d10:	40 81       	ld	r20, Z
   11d12:	51 81       	ldd	r21, Z+1	; 0x01
   11d14:	62 81       	ldd	r22, Z+2	; 0x02
   11d16:	73 81       	ldd	r23, Z+3	; 0x03
   11d18:	ce 01       	movw	r24, r28
   11d1a:	80 5a       	subi	r24, 0xA0	; 160
   11d1c:	9e 4f       	sbci	r25, 0xFE	; 254
   11d1e:	0e 94 be b6 	call	0x16d7c	; 0x16d7c <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
   11d22:	f8 01       	movw	r30, r16
   11d24:	e5 50       	subi	r30, 0x05	; 5
   11d26:	fe 4e       	sbci	r31, 0xEE	; 238
   11d28:	40 81       	ld	r20, Z
   11d2a:	51 81       	ldd	r21, Z+1	; 0x01
   11d2c:	62 81       	ldd	r22, Z+2	; 0x02
   11d2e:	73 81       	ldd	r23, Z+3	; 0x03
   11d30:	ce 01       	movw	r24, r28
   11d32:	8c 59       	subi	r24, 0x9C	; 156
   11d34:	9e 4f       	sbci	r25, 0xFE	; 254
   11d36:	0e 94 be b6 	call	0x16d7c	; 0x16d7c <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
   11d3a:	f8 01       	movw	r30, r16
   11d3c:	e9 51       	subi	r30, 0x19	; 25
   11d3e:	fe 4e       	sbci	r31, 0xEE	; 238
   11d40:	40 81       	ld	r20, Z
   11d42:	51 81       	ldd	r21, Z+1	; 0x01
   11d44:	62 81       	ldd	r22, Z+2	; 0x02
   11d46:	73 81       	ldd	r23, Z+3	; 0x03
   11d48:	ce 01       	movw	r24, r28
   11d4a:	88 59       	subi	r24, 0x98	; 152
   11d4c:	9e 4f       	sbci	r25, 0xFE	; 254
   11d4e:	0e 94 be b6 	call	0x16d7c	; 0x16d7c <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   11d52:	f7 01       	movw	r30, r14
   11d54:	ee 51       	subi	r30, 0x1E	; 30
   11d56:	fe 4e       	sbci	r31, 0xEE	; 238
   11d58:	60 81       	ld	r22, Z
   11d5a:	ce 01       	movw	r24, r28
   11d5c:	84 59       	subi	r24, 0x94	; 148
   11d5e:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
   11d60:	df 91       	pop	r29
   11d62:	cf 91       	pop	r28
   11d64:	1f 91       	pop	r17
   11d66:	0f 91       	pop	r16
   11d68:	ff 90       	pop	r15
   11d6a:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
   11d6c:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011d70 <thermostat_ring_pid_set_kp(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kphf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:240
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
   11d70:	cf 93       	push	r28
   11d72:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  PID_p[id] = x;
   11d74:	84 e0       	ldi	r24, 0x04	; 4
   11d76:	c8 9f       	mul	r28, r24
   11d78:	f0 01       	movw	r30, r0
   11d7a:	11 24       	eor	r1, r1
   11d7c:	e1 5f       	subi	r30, 0xF1	; 241
   11d7e:	fd 4e       	sbci	r31, 0xED	; 237
   11d80:	40 83       	st	Z, r20
   11d82:	51 83       	std	Z+1, r21	; 0x01
   11d84:	62 83       	std	Z+2, r22	; 0x02
   11d86:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   11d88:	8c 2f       	mov	r24, r28
   11d8a:	0e 94 e3 8d 	call	0x11bc6	; 0x11bc6 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   11d8e:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:244
}
   11d90:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11d92:	0c 94 74 8e 	jmp	0x11ce8	; 0x11ce8 <thermostat_ring_set_pid_eeprom(unsigned char)>

00011d96 <thermostat_ring_pid_set_ki(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kihf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:246
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
   11d96:	cf 93       	push	r28
   11d98:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  PID_i[id] = x;
   11d9a:	84 e0       	ldi	r24, 0x04	; 4
   11d9c:	c8 9f       	mul	r28, r24
   11d9e:	f0 01       	movw	r30, r0
   11da0:	11 24       	eor	r1, r1
   11da2:	e5 50       	subi	r30, 0x05	; 5
   11da4:	fe 4e       	sbci	r31, 0xEE	; 238
   11da6:	40 83       	st	Z, r20
   11da8:	51 83       	std	Z+1, r21	; 0x01
   11daa:	62 83       	std	Z+2, r22	; 0x02
   11dac:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   11dae:	8c 2f       	mov	r24, r28
   11db0:	0e 94 e3 8d 	call	0x11bc6	; 0x11bc6 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   11db4:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:250
}
   11db6:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11db8:	0c 94 74 8e 	jmp	0x11ce8	; 0x11ce8 <thermostat_ring_set_pid_eeprom(unsigned char)>

00011dbc <thermostat_ring_pid_set_kd(unsigned char, float)>:
_Z26thermostat_ring_pid_set_kdhf():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:252
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
   11dbc:	cf 93       	push	r28
   11dbe:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  PID_d[id] = x;
   11dc0:	84 e0       	ldi	r24, 0x04	; 4
   11dc2:	c8 9f       	mul	r28, r24
   11dc4:	f0 01       	movw	r30, r0
   11dc6:	11 24       	eor	r1, r1
   11dc8:	e9 51       	subi	r30, 0x19	; 25
   11dca:	fe 4e       	sbci	r31, 0xEE	; 238
   11dcc:	40 83       	st	Z, r20
   11dce:	51 83       	std	Z+1, r21	; 0x01
   11dd0:	62 83       	std	Z+2, r22	; 0x02
   11dd2:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   11dd4:	8c 2f       	mov	r24, r28
   11dd6:	0e 94 e3 8d 	call	0x11bc6	; 0x11bc6 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   11dda:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:256
}
   11ddc:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11dde:	0c 94 74 8e 	jmp	0x11ce8	; 0x11ce8 <thermostat_ring_set_pid_eeprom(unsigned char)>

00011de2 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>:
_Z28thermostat_ring_pid_set_timehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:259
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
   11de2:	cf 93       	push	r28
   11de4:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  PID_time[id] = timer;
   11de6:	e8 2f       	mov	r30, r24
   11de8:	f0 e0       	ldi	r31, 0x00	; 0
   11dea:	ee 51       	subi	r30, 0x1E	; 30
   11dec:	fe 4e       	sbci	r31, 0xEE	; 238
   11dee:	60 83       	st	Z, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   11df0:	0e 94 e3 8d 	call	0x11bc6	; 0x11bc6 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   11df4:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:263
}
   11df6:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
   11df8:	0c 94 74 8e 	jmp	0x11ce8	; 0x11ce8 <thermostat_ring_set_pid_eeprom(unsigned char)>

00011dfc <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
   11dfc:	ef 92       	push	r14
   11dfe:	ff 92       	push	r15
   11e00:	0f 93       	push	r16
   11e02:	1f 93       	push	r17
   11e04:	cf 93       	push	r28
   11e06:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   11e08:	9d e4       	ldi	r25, 0x4D	; 77
   11e0a:	89 9f       	mul	r24, r25
   11e0c:	e0 01       	movw	r28, r0
   11e0e:	11 24       	eor	r1, r1
   11e10:	8e 01       	movw	r16, r28
   11e12:	0c 5c       	subi	r16, 0xCC	; 204
   11e14:	1d 4f       	sbci	r17, 0xFD	; 253
   11e16:	7b 01       	movw	r14, r22
   11e18:	c2 5c       	subi	r28, 0xC2	; 194
   11e1a:	dd 4f       	sbci	r29, 0xFD	; 253
   11e1c:	c8 01       	movw	r24, r16
   11e1e:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   11e22:	f7 01       	movw	r30, r14
   11e24:	81 93       	st	Z+, r24
   11e26:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   11e28:	88 23       	and	r24, r24
   11e2a:	29 f0       	breq	.+10     	; 0x11e36 <thermostat_program_get_name(unsigned char, char*)+0x3a>
   11e2c:	0f 5f       	subi	r16, 0xFF	; 255
   11e2e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272 (discriminator 2)
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   11e30:	0c 17       	cp	r16, r28
   11e32:	1d 07       	cpc	r17, r29
   11e34:	99 f7       	brne	.-26     	; 0x11e1c <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
   11e36:	df 91       	pop	r29
   11e38:	cf 91       	pop	r28
   11e3a:	1f 91       	pop	r17
   11e3c:	0f 91       	pop	r16
   11e3e:	ff 90       	pop	r15
   11e40:	ef 90       	pop	r14
   11e42:	08 95       	ret

00011e44 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
   11e44:	ef 92       	push	r14
   11e46:	ff 92       	push	r15
   11e48:	0f 93       	push	r16
   11e4a:	1f 93       	push	r17
   11e4c:	cf 93       	push	r28
   11e4e:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
   11e50:	9d e4       	ldi	r25, 0x4D	; 77
   11e52:	89 9f       	mul	r24, r25
   11e54:	80 01       	movw	r16, r0
   11e56:	11 24       	eor	r1, r1
   11e58:	eb 01       	movw	r28, r22
   11e5a:	78 01       	movw	r14, r16
   11e5c:	8c ec       	ldi	r24, 0xCC	; 204
   11e5e:	e8 1a       	sub	r14, r24
   11e60:	8d ef       	ldi	r24, 0xFD	; 253
   11e62:	f8 0a       	sbc	r15, r24
   11e64:	02 5c       	subi	r16, 0xC2	; 194
   11e66:	1d 4f       	sbci	r17, 0xFD	; 253
   11e68:	69 91       	ld	r22, Y+
   11e6a:	c7 01       	movw	r24, r14
   11e6c:	0e 94 cc 8b 	call	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
   11e70:	fe 01       	movw	r30, r28
   11e72:	31 97       	sbiw	r30, 0x01	; 1
   11e74:	80 81       	ld	r24, Z
   11e76:	88 23       	and	r24, r24
   11e78:	31 f0       	breq	.+12     	; 0x11e86 <thermostat_program_set_name(unsigned char, char*)+0x42>
   11e7a:	9f ef       	ldi	r25, 0xFF	; 255
   11e7c:	e9 1a       	sub	r14, r25
   11e7e:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282 (discriminator 2)
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   11e80:	e0 16       	cp	r14, r16
   11e82:	f1 06       	cpc	r15, r17
   11e84:	89 f7       	brne	.-30     	; 0x11e68 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
   11e86:	df 91       	pop	r29
   11e88:	cf 91       	pop	r28
   11e8a:	1f 91       	pop	r17
   11e8c:	0f 91       	pop	r16
   11e8e:	ff 90       	pop	r15
   11e90:	ef 90       	pop	r14
   11e92:	08 95       	ret

00011e94 <thermostat_program_get_active(unsigned char)>:
_Z29thermostat_program_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   11e94:	2d e4       	ldi	r18, 0x4D	; 77
   11e96:	82 9f       	mul	r24, r18
   11e98:	c0 01       	movw	r24, r0
   11e9a:	11 24       	eor	r1, r1
   11e9c:	8f 50       	subi	r24, 0x0F	; 15
   11e9e:	9e 4f       	sbci	r25, 0xFE	; 254
   11ea0:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00011ea4 <thermostat_program_set_active(unsigned char, unsigned char)>:
_Z29thermostat_program_set_activehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   11ea4:	2d e4       	ldi	r18, 0x4D	; 77
   11ea6:	82 9f       	mul	r24, r18
   11ea8:	c0 01       	movw	r24, r0
   11eaa:	11 24       	eor	r1, r1
   11eac:	8f 50       	subi	r24, 0x0F	; 15
   11eae:	9e 4f       	sbci	r25, 0xFE	; 254
   11eb0:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011eb4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
   11eb4:	7f 92       	push	r7
   11eb6:	8f 92       	push	r8
   11eb8:	9f 92       	push	r9
   11eba:	af 92       	push	r10
   11ebc:	bf 92       	push	r11
   11ebe:	cf 92       	push	r12
   11ec0:	df 92       	push	r13
   11ec2:	ef 92       	push	r14
   11ec4:	ff 92       	push	r15
   11ec6:	0f 93       	push	r16
   11ec8:	1f 93       	push	r17
   11eca:	cf 93       	push	r28
   11ecc:	df 93       	push	r29
   11ece:	5a 01       	movw	r10, r20
   11ed0:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
   11ed2:	9d e4       	ldi	r25, 0x4D	; 77
   11ed4:	89 9f       	mul	r24, r25
   11ed6:	40 01       	movw	r8, r0
   11ed8:	11 24       	eor	r1, r1
   11eda:	ef e0       	ldi	r30, 0x0F	; 15
   11edc:	8e 1a       	sub	r8, r30
   11ede:	ee ef       	ldi	r30, 0xFE	; 254
   11ee0:	9e 0a       	sbc	r9, r30
   11ee2:	f6 e0       	ldi	r31, 0x06	; 6
   11ee4:	6f 9f       	mul	r22, r31
   11ee6:	80 0c       	add	r8, r0
   11ee8:	91 1c       	adc	r9, r1
   11eea:	11 24       	eor	r1, r1
   11eec:	c4 01       	movw	r24, r8
   11eee:	02 96       	adiw	r24, 0x02	; 2
   11ef0:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   11ef4:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
   11ef6:	c4 01       	movw	r24, r8
   11ef8:	03 96       	adiw	r24, 0x03	; 3
   11efa:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
   11efe:	97 2d       	mov	r25, r7
   11f00:	96 95       	lsr	r25
   11f02:	96 95       	lsr	r25
   11f04:	96 95       	lsr	r25
   11f06:	f5 01       	movw	r30, r10
   11f08:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
   11f0a:	27 2d       	mov	r18, r7
   11f0c:	30 e0       	ldi	r19, 0x00	; 0
   11f0e:	35 95       	asr	r19
   11f10:	27 95       	ror	r18
   11f12:	23 70       	andi	r18, 0x03	; 3
   11f14:	9f e0       	ldi	r25, 0x0F	; 15
   11f16:	29 9f       	mul	r18, r25
   11f18:	20 2d       	mov	r18, r0
   11f1a:	11 24       	eor	r1, r1
   11f1c:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
   11f1e:	28 2f       	mov	r18, r24
   11f20:	26 95       	lsr	r18
   11f22:	26 95       	lsr	r18
   11f24:	26 95       	lsr	r18
   11f26:	f8 01       	movw	r30, r16
   11f28:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
   11f2a:	83 70       	andi	r24, 0x03	; 3
   11f2c:	89 9f       	mul	r24, r25
   11f2e:	80 2d       	mov	r24, r0
   11f30:	11 24       	eor	r1, r1
   11f32:	f7 01       	movw	r30, r14
   11f34:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
   11f36:	87 2d       	mov	r24, r7
   11f38:	81 70       	andi	r24, 0x01	; 1
   11f3a:	f6 01       	movw	r30, r12
   11f3c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
   11f3e:	df 91       	pop	r29
   11f40:	cf 91       	pop	r28
   11f42:	1f 91       	pop	r17
   11f44:	0f 91       	pop	r16
   11f46:	ff 90       	pop	r15
   11f48:	ef 90       	pop	r14
   11f4a:	df 90       	pop	r13
   11f4c:	cf 90       	pop	r12
   11f4e:	bf 90       	pop	r11
   11f50:	af 90       	pop	r10
   11f52:	9f 90       	pop	r9
   11f54:	8f 90       	pop	r8
   11f56:	7f 90       	pop	r7
   11f58:	08 95       	ret

00011f5a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
   11f5a:	cf 92       	push	r12
   11f5c:	ef 92       	push	r14
   11f5e:	0f 93       	push	r16
   11f60:	1f 93       	push	r17
   11f62:	cf 93       	push	r28
   11f64:	df 93       	push	r29
   11f66:	c8 2f       	mov	r28, r24
   11f68:	56 2f       	mov	r21, r22
   11f6a:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
   11f6c:	3f e0       	ldi	r19, 0x0F	; 15
   11f6e:	63 2f       	mov	r22, r19
   11f70:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   11f74:	83 70       	andi	r24, 0x03	; 3
   11f76:	98 e0       	ldi	r25, 0x08	; 8
   11f78:	09 9f       	mul	r16, r25
   11f7a:	80 01       	movw	r16, r0
   11f7c:	11 24       	eor	r1, r1
   11f7e:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   11f80:	8d e4       	ldi	r24, 0x4D	; 77
   11f82:	c8 9f       	mul	r28, r24
   11f84:	e0 01       	movw	r28, r0
   11f86:	11 24       	eor	r1, r1
   11f88:	cf 50       	subi	r28, 0x0F	; 15
   11f8a:	de 4f       	sbci	r29, 0xFE	; 254
   11f8c:	96 e0       	ldi	r25, 0x06	; 6
   11f8e:	59 9f       	mul	r21, r25
   11f90:	c0 0d       	add	r28, r0
   11f92:	d1 1d       	adc	r29, r1
   11f94:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
   11f96:	82 2f       	mov	r24, r18
   11f98:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   11f9c:	68 2f       	mov	r22, r24
   11f9e:	66 0f       	add	r22, r22
   11fa0:	66 70       	andi	r22, 0x06	; 6
   11fa2:	88 e0       	ldi	r24, 0x08	; 8
   11fa4:	48 9f       	mul	r20, r24
   11fa6:	a0 01       	movw	r20, r0
   11fa8:	11 24       	eor	r1, r1
   11faa:	9c 2d       	mov	r25, r12
   11fac:	91 70       	andi	r25, 0x01	; 1
   11fae:	c9 2e       	mov	r12, r25
   11fb0:	c4 0e       	add	r12, r20
   11fb2:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
   11fb4:	ce 01       	movw	r24, r28
   11fb6:	02 96       	adiw	r24, 0x02	; 2
   11fb8:	0e 94 cc 8b 	call	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   11fbc:	60 2f       	mov	r22, r16
   11fbe:	ce 01       	movw	r24, r28
   11fc0:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
   11fc2:	df 91       	pop	r29
   11fc4:	cf 91       	pop	r28
   11fc6:	1f 91       	pop	r17
   11fc8:	0f 91       	pop	r16
   11fca:	ef 90       	pop	r14
   11fcc:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
   11fce:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00011fd2 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
   11fd2:	1f 93       	push	r17
   11fd4:	cf 93       	push	r28
   11fd6:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   11fd8:	9d e4       	ldi	r25, 0x4D	; 77
   11fda:	89 9f       	mul	r24, r25
   11fdc:	e0 01       	movw	r28, r0
   11fde:	11 24       	eor	r1, r1
   11fe0:	cf 50       	subi	r28, 0x0F	; 15
   11fe2:	de 4f       	sbci	r29, 0xFE	; 254
   11fe4:	86 e0       	ldi	r24, 0x06	; 6
   11fe6:	68 9f       	mul	r22, r24
   11fe8:	c0 0d       	add	r28, r0
   11fea:	d1 1d       	adc	r29, r1
   11fec:	11 24       	eor	r1, r1
   11fee:	ce 01       	movw	r24, r28
   11ff0:	05 96       	adiw	r24, 0x05	; 5
   11ff2:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   11ff6:	18 2f       	mov	r17, r24
   11ff8:	ce 01       	movw	r24, r28
   11ffa:	04 96       	adiw	r24, 0x04	; 4
   11ffc:	0e 94 ca 8b 	call	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>
   12000:	21 2f       	mov	r18, r17
   12002:	30 e0       	ldi	r19, 0x00	; 0
   12004:	32 2f       	mov	r19, r18
   12006:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
   12008:	82 0f       	add	r24, r18
   1200a:	93 2f       	mov	r25, r19
   1200c:	91 1d       	adc	r25, r1
   1200e:	df 91       	pop	r29
   12010:	cf 91       	pop	r28
   12012:	1f 91       	pop	r17
   12014:	08 95       	ret

00012016 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
   12016:	1f 93       	push	r17
   12018:	cf 93       	push	r28
   1201a:	df 93       	push	r29
   1201c:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
   1201e:	9d e4       	ldi	r25, 0x4D	; 77
   12020:	89 9f       	mul	r24, r25
   12022:	e0 01       	movw	r28, r0
   12024:	11 24       	eor	r1, r1
   12026:	cf 50       	subi	r28, 0x0F	; 15
   12028:	de 4f       	sbci	r29, 0xFE	; 254
   1202a:	86 e0       	ldi	r24, 0x06	; 6
   1202c:	68 9f       	mul	r22, r24
   1202e:	c0 0d       	add	r28, r0
   12030:	d1 1d       	adc	r29, r1
   12032:	11 24       	eor	r1, r1
   12034:	65 2f       	mov	r22, r21
   12036:	ce 01       	movw	r24, r28
   12038:	05 96       	adiw	r24, 0x05	; 5
   1203a:	0e 94 cc 8b 	call	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   1203e:	61 2f       	mov	r22, r17
   12040:	ce 01       	movw	r24, r28
   12042:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
   12044:	df 91       	pop	r29
   12046:	cf 91       	pop	r28
   12048:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
   1204a:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

0001204e <thermostat_program_get_week(unsigned char, unsigned char)>:
_Z27thermostat_program_get_weekhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1204e:	2d e4       	ldi	r18, 0x4D	; 77
   12050:	82 9f       	mul	r24, r18
   12052:	c0 01       	movw	r24, r0
   12054:	11 24       	eor	r1, r1
   12056:	26 e0       	ldi	r18, 0x06	; 6
   12058:	62 9f       	mul	r22, r18
   1205a:	80 0d       	add	r24, r0
   1205c:	91 1d       	adc	r25, r1
   1205e:	11 24       	eor	r1, r1
   12060:	8e 50       	subi	r24, 0x0E	; 14
   12062:	9e 4f       	sbci	r25, 0xFE	; 254
   12064:	0c 94 ca 8b 	jmp	0x11794	; 0x11794 <EEPROMClass::read(int) [clone .isra.0]>

00012068 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
   12068:	2d e4       	ldi	r18, 0x4D	; 77
   1206a:	82 9f       	mul	r24, r18
   1206c:	c0 01       	movw	r24, r0
   1206e:	11 24       	eor	r1, r1
   12070:	26 e0       	ldi	r18, 0x06	; 6
   12072:	62 9f       	mul	r22, r18
   12074:	80 0d       	add	r24, r0
   12076:	91 1d       	adc	r25, r1
   12078:	11 24       	eor	r1, r1
   1207a:	64 2f       	mov	r22, r20
   1207c:	8e 50       	subi	r24, 0x0E	; 14
   1207e:	9e 4f       	sbci	r25, 0xFE	; 254
   12080:	0c 94 cc 8b 	jmp	0x11798	; 0x11798 <EEPROMClass::write(int, unsigned char) [clone .isra.1]>

00012084 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)>:
_Z37thermostat_program_set_parse_intervalhhPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:338
}


//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
   12084:	bf 92       	push	r11
   12086:	cf 92       	push	r12
   12088:	df 92       	push	r13
   1208a:	ef 92       	push	r14
   1208c:	ff 92       	push	r15
   1208e:	0f 93       	push	r16
   12090:	1f 93       	push	r17
   12092:	cf 93       	push	r28
   12094:	df 93       	push	r29
   12096:	d8 2f       	mov	r29, r24
   12098:	16 2f       	mov	r17, r22
   1209a:	ca 01       	movw	r24, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   1209c:	6b e9       	ldi	r22, 0x9B	; 155
   1209e:	73 e0       	ldi	r23, 0x03	; 3
   120a0:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   120a4:	f1 2c       	mov	r15, r1
   120a6:	c1 2c       	mov	r12, r1
   120a8:	e1 2c       	mov	r14, r1
   120aa:	00 e0       	ldi	r16, 0x00	; 0
   120ac:	b1 2c       	mov	r11, r1
   120ae:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   120b0:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   120b2:	00 97       	sbiw	r24, 0x00	; 0
   120b4:	59 f1       	breq	.+86     	; 0x1210c <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   120b6:	c1 11       	cpse	r28, r1
   120b8:	0b c0       	rjmp	.+22     	; 0x120d0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x4c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346 (discriminator 1)
   120ba:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   120be:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   120c0:	6b e9       	ldi	r22, 0x9B	; 155
   120c2:	73 e0       	ldi	r23, 0x03	; 3
   120c4:	90 e0       	ldi	r25, 0x00	; 0
   120c6:	80 e0       	ldi	r24, 0x00	; 0
   120c8:	0e 94 5c d7 	call	0x1aeb8	; 0x1aeb8 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   120cc:	cf 5f       	subi	r28, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
   120ce:	f1 cf       	rjmp	.-30     	; 0x120b2 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x2e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   120d0:	c1 30       	cpi	r28, 0x01	; 1
   120d2:	21 f4       	brne	.+8      	; 0x120dc <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x58>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347 (discriminator 1)
   120d4:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   120d8:	b8 2e       	mov	r11, r24
   120da:	f2 cf       	rjmp	.-28     	; 0x120c0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   120dc:	c2 30       	cpi	r28, 0x02	; 2
   120de:	21 f4       	brne	.+8      	; 0x120e8 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x64>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348 (discriminator 1)
   120e0:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   120e4:	08 2f       	mov	r16, r24
   120e6:	ec cf       	rjmp	.-40     	; 0x120c0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   120e8:	c3 30       	cpi	r28, 0x03	; 3
   120ea:	21 f4       	brne	.+8      	; 0x120f4 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x70>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349 (discriminator 1)
   120ec:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   120f0:	e8 2e       	mov	r14, r24
   120f2:	e6 cf       	rjmp	.-52     	; 0x120c0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   120f4:	c4 30       	cpi	r28, 0x04	; 4
   120f6:	21 f4       	brne	.+8      	; 0x12100 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x7c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350 (discriminator 1)
   120f8:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   120fc:	f8 2e       	mov	r15, r24
   120fe:	e0 cf       	rjmp	.-64     	; 0x120c0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   12100:	c5 30       	cpi	r28, 0x05	; 5
   12102:	f1 f6       	brne	.-68     	; 0x120c0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351 (discriminator 1)
   12104:	0e 94 23 d7 	call	0x1ae46	; 0x1ae46 <atoi>
   12108:	c8 2e       	mov	r12, r24
   1210a:	da cf       	rjmp	.-76     	; 0x120c0 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   1210c:	c6 30       	cpi	r28, 0x06	; 6
   1210e:	a1 f4       	brne	.+40     	; 0x12138 <thermostat_program_set_parse_interval(unsigned char, unsigned char, char*)+0xb4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   12110:	2b 2d       	mov	r18, r11
   12112:	4d 2d       	mov	r20, r13
   12114:	61 2f       	mov	r22, r17
   12116:	8d 2f       	mov	r24, r29
   12118:	0e 94 ad 8f 	call	0x11f5a	; 0x11f5a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   1211c:	4f 2d       	mov	r20, r15
   1211e:	61 2f       	mov	r22, r17
   12120:	8d 2f       	mov	r24, r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   12122:	df 91       	pop	r29
   12124:	cf 91       	pop	r28
   12126:	1f 91       	pop	r17
   12128:	0f 91       	pop	r16
   1212a:	ff 90       	pop	r15
   1212c:	ef 90       	pop	r14
   1212e:	df 90       	pop	r13
   12130:	cf 90       	pop	r12
   12132:	bf 90       	pop	r11
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    cnt++;
  }
  if (cnt == 6)
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    thermostat_program_set_week(program_id, interval_id, week);
   12134:	0c 94 34 90 	jmp	0x12068	; 0x12068 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:361
  }
}
   12138:	df 91       	pop	r29
   1213a:	cf 91       	pop	r28
   1213c:	1f 91       	pop	r17
   1213e:	0f 91       	pop	r16
   12140:	ff 90       	pop	r15
   12142:	ef 90       	pop	r14
   12144:	df 90       	pop	r13
   12146:	cf 90       	pop	r12
   12148:	bf 90       	pop	r11
   1214a:	08 95       	ret

0001214c <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)>:
_Z38thermostat_program_set_interval_activehhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:377
}


/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
   1214c:	9f 92       	push	r9
   1214e:	af 92       	push	r10
   12150:	bf 92       	push	r11
   12152:	cf 92       	push	r12
   12154:	df 92       	push	r13
   12156:	ef 92       	push	r14
   12158:	ff 92       	push	r15
   1215a:	0f 93       	push	r16
   1215c:	1f 93       	push	r17
   1215e:	cf 93       	push	r28
   12160:	df 93       	push	r29
   12162:	00 d0       	rcall	.+0      	; 0x12164 <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x18>
   12164:	1f 92       	push	r1
   12166:	1f 92       	push	r1
   12168:	cd b7       	in	r28, 0x3d	; 61
   1216a:	de b7       	in	r29, 0x3e	; 62
   1216c:	b8 2e       	mov	r11, r24
   1216e:	a6 2e       	mov	r10, r22
   12170:	94 2e       	mov	r9, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12172:	ce 01       	movw	r24, r28
   12174:	01 96       	adiw	r24, 0x01	; 1
   12176:	6c 01       	movw	r12, r24
   12178:	01 96       	adiw	r24, 0x01	; 1
   1217a:	7c 01       	movw	r14, r24
   1217c:	8e 01       	movw	r16, r28
   1217e:	0d 5f       	subi	r16, 0xFD	; 253
   12180:	1f 4f       	sbci	r17, 0xFF	; 255
   12182:	9e 01       	movw	r18, r28
   12184:	2c 5f       	subi	r18, 0xFC	; 252
   12186:	3f 4f       	sbci	r19, 0xFF	; 255
   12188:	ae 01       	movw	r20, r28
   1218a:	4b 5f       	subi	r20, 0xFB	; 251
   1218c:	5f 4f       	sbci	r21, 0xFF	; 255
   1218e:	8b 2d       	mov	r24, r11
   12190:	0e 94 5a 8f 	call	0x11eb4	; 0x11eb4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   12194:	89 81       	ldd	r24, Y+1	; 0x01
   12196:	89 15       	cp	r24, r9
   12198:	49 f0       	breq	.+18     	; 0x121ac <thermostat_program_set_interval_active(unsigned char, unsigned char, unsigned char)+0x60>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1219a:	c9 2c       	mov	r12, r9
   1219c:	ea 80       	ldd	r14, Y+2	; 0x02
   1219e:	0b 81       	ldd	r16, Y+3	; 0x03
   121a0:	2c 81       	ldd	r18, Y+4	; 0x04
   121a2:	4d 81       	ldd	r20, Y+5	; 0x05
   121a4:	6a 2d       	mov	r22, r10
   121a6:	8b 2d       	mov	r24, r11
   121a8:	0e 94 ad 8f 	call	0x11f5a	; 0x11f5a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:382
}
   121ac:	0f 90       	pop	r0
   121ae:	0f 90       	pop	r0
   121b0:	0f 90       	pop	r0
   121b2:	0f 90       	pop	r0
   121b4:	0f 90       	pop	r0
   121b6:	df 91       	pop	r29
   121b8:	cf 91       	pop	r28
   121ba:	1f 91       	pop	r17
   121bc:	0f 91       	pop	r16
   121be:	ff 90       	pop	r15
   121c0:	ef 90       	pop	r14
   121c2:	df 90       	pop	r13
   121c4:	cf 90       	pop	r12
   121c6:	bf 90       	pop	r11
   121c8:	af 90       	pop	r10
   121ca:	9f 90       	pop	r9
   121cc:	08 95       	ret

000121ce <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)>:
_Z18thermostat_runninghPihhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:387
/***************************************************************************************************************/
///// vraci 1 pokud je termostat aktivni
/// now.dayOfTheWeek() 0..nedele; 6..sobota
uint8_t thermostat_running(uint8_t program, int16_t *threshold, uint8_t now_hour, uint8_t now_minute, uint8_t now_dayweek)
{
   121ce:	3f 92       	push	r3
   121d0:	4f 92       	push	r4
   121d2:	5f 92       	push	r5
   121d4:	6f 92       	push	r6
   121d6:	7f 92       	push	r7
   121d8:	8f 92       	push	r8
   121da:	9f 92       	push	r9
   121dc:	af 92       	push	r10
   121de:	bf 92       	push	r11
   121e0:	cf 92       	push	r12
   121e2:	df 92       	push	r13
   121e4:	ef 92       	push	r14
   121e6:	ff 92       	push	r15
   121e8:	0f 93       	push	r16
   121ea:	1f 93       	push	r17
   121ec:	cf 93       	push	r28
   121ee:	df 93       	push	r29
   121f0:	00 d0       	rcall	.+0      	; 0x121f2 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x24>
   121f2:	1f 92       	push	r1
   121f4:	1f 92       	push	r1
   121f6:	cd b7       	in	r28, 0x3d	; 61
   121f8:	de b7       	in	r29, 0x3e	; 62
   121fa:	b8 2e       	mov	r11, r24
   121fc:	2b 01       	movw	r4, r22
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   121fe:	8f ef       	ldi	r24, 0xFF	; 255
   12200:	b8 16       	cp	r11, r24
   12202:	09 f4       	brne	.+2      	; 0x12206 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x38>
   12204:	54 c0       	rjmp	.+168    	; 0x122ae <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xe0>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   12206:	82 2e       	mov	r8, r18
   12208:	91 2c       	mov	r9, r1
   1220a:	9c e3       	ldi	r25, 0x3C	; 60
   1220c:	49 9f       	mul	r20, r25
   1220e:	80 0c       	add	r8, r0
   12210:	91 1c       	adc	r9, r1
   12212:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   12214:	81 e0       	ldi	r24, 0x01	; 1
   12216:	90 e0       	ldi	r25, 0x00	; 0
   12218:	02 c0       	rjmp	.+4      	; 0x1221e <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x50>
   1221a:	88 0f       	add	r24, r24
   1221c:	99 1f       	adc	r25, r25
   1221e:	0a 95       	dec	r16
   12220:	e2 f7       	brpl	.-8      	; 0x1221a <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x4c>
   12222:	66 24       	eor	r6, r6
   12224:	63 94       	inc	r6
   12226:	71 2c       	mov	r7, r1
   12228:	89 2b       	or	r24, r25
   1222a:	11 f4       	brne	.+4      	; 0x12230 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x62>
   1222c:	71 2c       	mov	r7, r1
   1222e:	61 2c       	mov	r6, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   12230:	a1 2c       	mov	r10, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   12232:	9c e3       	ldi	r25, 0x3C	; 60
   12234:	39 2e       	mov	r3, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   12236:	fe 01       	movw	r30, r28
   12238:	31 96       	adiw	r30, 0x01	; 1
   1223a:	6f 01       	movw	r12, r30
   1223c:	ce 01       	movw	r24, r28
   1223e:	02 96       	adiw	r24, 0x02	; 2
   12240:	7c 01       	movw	r14, r24
   12242:	8e 01       	movw	r16, r28
   12244:	0d 5f       	subi	r16, 0xFD	; 253
   12246:	1f 4f       	sbci	r17, 0xFF	; 255
   12248:	9e 01       	movw	r18, r28
   1224a:	2c 5f       	subi	r18, 0xFC	; 252
   1224c:	3f 4f       	sbci	r19, 0xFF	; 255
   1224e:	ae 01       	movw	r20, r28
   12250:	4b 5f       	subi	r20, 0xFB	; 251
   12252:	5f 4f       	sbci	r21, 0xFF	; 255
   12254:	6a 2d       	mov	r22, r10
   12256:	8b 2d       	mov	r24, r11
   12258:	0e 94 5a 8f 	call	0x11eb4	; 0x11eb4 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   1225c:	89 81       	ldd	r24, Y+1	; 0x01
   1225e:	81 30       	cpi	r24, 0x01	; 1
   12260:	f1 f5       	brne	.+124    	; 0x122de <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:399
      {
        week = thermostat_program_get_week(program, interval_id);
   12262:	6a 2d       	mov	r22, r10
   12264:	8b 2d       	mov	r24, r11
   12266:	0e 94 27 90 	call	0x1204e	; 0x1204e <thermostat_program_get_week(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
        t_start = start_hour * 60 + start_min;
   1226a:	9d 81       	ldd	r25, Y+5	; 0x05
   1226c:	2c 81       	ldd	r18, Y+4	; 0x04
   1226e:	30 e0       	ldi	r19, 0x00	; 0
   12270:	93 9d       	mul	r25, r3
   12272:	20 0d       	add	r18, r0
   12274:	31 1d       	adc	r19, r1
   12276:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   12278:	82 16       	cp	r8, r18
   1227a:	93 06       	cpc	r9, r19
   1227c:	84 f1       	brlt	.+96     	; 0x122de <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401 (discriminator 1)
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   1227e:	9b 81       	ldd	r25, Y+3	; 0x03
   12280:	2a 81       	ldd	r18, Y+2	; 0x02
   12282:	30 e0       	ldi	r19, 0x00	; 0
   12284:	93 9d       	mul	r25, r3
   12286:	20 0d       	add	r18, r0
   12288:	31 1d       	adc	r19, r1
   1228a:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 1)
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1228c:	82 16       	cp	r8, r18
   1228e:	93 06       	cpc	r9, r19
   12290:	34 f5       	brge	.+76     	; 0x122de <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403 (discriminator 2)
   12292:	90 e0       	ldi	r25, 0x00	; 0
   12294:	86 21       	and	r24, r6
   12296:	97 21       	and	r25, r7
   12298:	89 2b       	or	r24, r25
   1229a:	09 f1       	breq	.+66     	; 0x122de <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x110>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   1229c:	6a 2d       	mov	r22, r10
   1229e:	8b 2d       	mov	r24, r11
   122a0:	0e 94 e9 8f 	call	0x11fd2	; 0x11fd2 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   122a4:	f2 01       	movw	r30, r4
   122a6:	91 83       	std	Z+1, r25	; 0x01
   122a8:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:411
          ret = PROG_ACTIVE;
          break;
        }
      }
    }
    ret = PROG_NO_INTERVAL;
   122aa:	8e ef       	ldi	r24, 0xFE	; 254
   122ac:	b8 2e       	mov	r11, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:414
  }
  return ret;
}
   122ae:	8b 2d       	mov	r24, r11
   122b0:	0f 90       	pop	r0
   122b2:	0f 90       	pop	r0
   122b4:	0f 90       	pop	r0
   122b6:	0f 90       	pop	r0
   122b8:	0f 90       	pop	r0
   122ba:	df 91       	pop	r29
   122bc:	cf 91       	pop	r28
   122be:	1f 91       	pop	r17
   122c0:	0f 91       	pop	r16
   122c2:	ff 90       	pop	r15
   122c4:	ef 90       	pop	r14
   122c6:	df 90       	pop	r13
   122c8:	cf 90       	pop	r12
   122ca:	bf 90       	pop	r11
   122cc:	af 90       	pop	r10
   122ce:	9f 90       	pop	r9
   122d0:	8f 90       	pop	r8
   122d2:	7f 90       	pop	r7
   122d4:	6f 90       	pop	r6
   122d6:	5f 90       	pop	r5
   122d8:	4f 90       	pop	r4
   122da:	3f 90       	pop	r3
   122dc:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394 (discriminator 2)
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   122de:	a3 94       	inc	r10
   122e0:	fb e0       	ldi	r31, 0x0B	; 11
   122e2:	af 12       	cpse	r10, r31
   122e4:	a8 cf       	rjmp	.-176    	; 0x12236 <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0x68>
   122e6:	e1 cf       	rjmp	.-62     	; 0x122aa <thermostat_running(unsigned char, int*, unsigned char, unsigned char, unsigned char)+0xdc>

000122e8 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
   122e8:	cf 93       	push	r28
   122ea:	c8 2f       	mov	r28, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:419
  thermostat_ring_pid_set_kp(idx, 1);
   122ec:	40 e0       	ldi	r20, 0x00	; 0
   122ee:	50 e0       	ldi	r21, 0x00	; 0
   122f0:	60 e8       	ldi	r22, 0x80	; 128
   122f2:	7f e3       	ldi	r23, 0x3F	; 63
   122f4:	0e 94 b8 8e 	call	0x11d70	; 0x11d70 <thermostat_ring_pid_set_kp(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:420
  thermostat_ring_pid_set_ki(idx, 0.5);
   122f8:	40 e0       	ldi	r20, 0x00	; 0
   122fa:	50 e0       	ldi	r21, 0x00	; 0
   122fc:	60 e0       	ldi	r22, 0x00	; 0
   122fe:	7f e3       	ldi	r23, 0x3F	; 63
   12300:	8c 2f       	mov	r24, r28
   12302:	0e 94 cb 8e 	call	0x11d96	; 0x11d96 <thermostat_ring_pid_set_ki(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:421
  thermostat_ring_pid_set_kd(idx, 1);
   12306:	40 e0       	ldi	r20, 0x00	; 0
   12308:	50 e0       	ldi	r21, 0x00	; 0
   1230a:	60 e8       	ldi	r22, 0x80	; 128
   1230c:	7f e3       	ldi	r23, 0x3F	; 63
   1230e:	8c 2f       	mov	r24, r28
   12310:	0e 94 de 8e 	call	0x11dbc	; 0x11dbc <thermostat_ring_pid_set_kd(unsigned char, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:422
  thermostat_ring_pid_set_time(idx, 60);
   12314:	6c e3       	ldi	r22, 0x3C	; 60
   12316:	8c 2f       	mov	r24, r28
   12318:	0e 94 f1 8e 	call	0x11de2	; 0x11de2 <thermostat_ring_pid_set_time(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:423
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
   1231c:	6f ef       	ldi	r22, 0xFF	; 255
   1231e:	8c 2f       	mov	r24, r28
   12320:	0e 94 84 8d 	call	0x11b08	; 0x11b08 <thermostat_ring_set_asociate_tds(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_set_mezni(idx, 220);
   12324:	6c ed       	ldi	r22, 0xDC	; 220
   12326:	70 e0       	ldi	r23, 0x00	; 0
   12328:	8c 2f       	mov	r24, r28
   1232a:	0e 94 65 8d 	call	0x11aca	; 0x11aca <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
   1232e:	6f ef       	ldi	r22, 0xFF	; 255
   12330:	8c 2f       	mov	r24, r28
   12332:	0e 94 40 8d 	call	0x11a80	; 0x11a80 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
_Z25thermostat_ring_set_statehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   12336:	8c 2f       	mov	r24, r28
   12338:	90 e0       	ldi	r25, 0x00	; 0
   1233a:	fc 01       	movw	r30, r24
   1233c:	e3 52       	subi	r30, 0x23	; 35
   1233e:	fe 4e       	sbci	r31, 0xEE	; 238
   12340:	10 82       	st	Z, r1
_Z25thermostat_ring_set_powerhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:33
{
  return therm_power[idx];
}
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
   12342:	88 52       	subi	r24, 0x28	; 40
   12344:	9e 4e       	sbci	r25, 0xEE	; 238
   12346:	fc 01       	movw	r30, r24
   12348:	10 82       	st	Z, r1
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:428
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
   1234a:	6f ef       	ldi	r22, 0xFF	; 255
   1234c:	8c 2f       	mov	r24, r28
   1234e:	0e 94 30 8d 	call	0x11a60	; 0x11a60 <thermostat_ring_set_active(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:429
  thermostat_ring_set_output(idx, 255);
   12352:	6f ef       	ldi	r22, 0xFF	; 255
   12354:	8c 2f       	mov	r24, r28
   12356:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <thermostat_ring_set_output(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_mode(idx, 0);
   1235a:	60 e0       	ldi	r22, 0x00	; 0
   1235c:	8c 2f       	mov	r24, r28
   1235e:	0e 94 94 8d 	call	0x11b28	; 0x11b28 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
   12362:	60 e8       	ldi	r22, 0x80	; 128
   12364:	75 e0       	ldi	r23, 0x05	; 5
   12366:	8c 2f       	mov	r24, r28
   12368:	0e 94 f1 8c 	call	0x119e2	; 0x119e2 <thermostat_ring_set_name(unsigned char, char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_status_bites(idx, 0);
   1236c:	60 e0       	ldi	r22, 0x00	; 0
   1236e:	8c 2f       	mov	r24, r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
}
   12370:	cf 91       	pop	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:432
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
   12372:	0c 94 c1 8d 	jmp	0x11b82	; 0x11b82 <thermostat_ring_set_status_bites(unsigned char, unsigned char)>

00012376 <_GLOBAL__sub_I_PID_Input>:
_GLOBAL__sub_I_PID_Input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:36
void thermostat_ring_set_power(uint8_t idx, uint8_t stav)
{
  therm_power[idx] = stav;
}

PID** array_pids = new PID*[MAX_THERMOSTAT];
   12376:	8a e0       	ldi	r24, 0x0A	; 10
   12378:	90 e0       	ldi	r25, 0x00	; 0
   1237a:	0e 94 0c d1 	call	0x1a218	; 0x1a218 <operator new[](unsigned int)>
   1237e:	90 93 d7 11 	sts	0x11D7, r25	; 0x8011d7 <array_pids+0x1>
   12382:	80 93 d6 11 	sts	0x11D6, r24	; 0x8011d6 <array_pids>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
   12386:	08 95       	ret

00012388 <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:787
				}
			}
		}
	}
	Print(st, x, y);
}
   12388:	fc 01       	movw	r30, r24
   1238a:	81 e3       	ldi	r24, 0x31	; 49
   1238c:	98 e0       	ldi	r25, 0x08	; 8
   1238e:	91 83       	std	Z+1, r25	; 0x01
   12390:	80 83       	st	Z, r24
   12392:	80 e0       	ldi	r24, 0x00	; 0
   12394:	98 ef       	ldi	r25, 0xF8	; 248
   12396:	91 87       	std	Z+9, r25	; 0x09
   12398:	80 87       	std	Z+8, r24	; 0x08
   1239a:	20 ee       	ldi	r18, 0xE0	; 224
   1239c:	37 e0       	ldi	r19, 0x07	; 7
   1239e:	37 83       	std	Z+7, r19	; 0x07
   123a0:	26 83       	std	Z+6, r18	; 0x06
   123a2:	93 87       	std	Z+11, r25	; 0x0b
   123a4:	82 87       	std	Z+10, r24	; 0x0a
   123a6:	81 e0       	ldi	r24, 0x01	; 1
   123a8:	84 87       	std	Z+12, r24	; 0x0c
   123aa:	15 86       	std	Z+13, r1	; 0x0d
   123ac:	08 95       	ret

000123ae <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
   123ae:	fc 01       	movw	r30, r24
   123b0:	73 87       	std	Z+11, r23	; 0x0b
   123b2:	62 87       	std	Z+10, r22	; 0x0a
   123b4:	08 95       	ret

000123b6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii():
   123b6:	ef 92       	push	r14
   123b8:	ff 92       	push	r15
   123ba:	0f 93       	push	r16
   123bc:	1f 93       	push	r17
   123be:	cf 93       	push	r28
   123c0:	df 93       	push	r29
   123c2:	e9 01       	movw	r28, r18
   123c4:	79 01       	movw	r14, r18
   123c6:	e6 1a       	sub	r14, r22
   123c8:	f7 0a       	sbc	r15, r23
   123ca:	97 01       	movw	r18, r14
   123cc:	2f 5f       	subi	r18, 0xFF	; 255
   123ce:	3f 4f       	sbci	r19, 0xFF	; 255
   123d0:	f8 01       	movw	r30, r16
   123d2:	e4 1b       	sub	r30, r20
   123d4:	f5 0b       	sbc	r31, r21
   123d6:	df 01       	movw	r26, r30
   123d8:	11 96       	adiw	r26, 0x01	; 1
   123da:	37 ff       	sbrs	r19, 7
   123dc:	04 c0       	rjmp	.+8      	; 0x123e6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x30>
   123de:	97 01       	movw	r18, r14
   123e0:	20 95       	com	r18
   123e2:	30 95       	com	r19
   123e4:	be 01       	movw	r22, r28
   123e6:	b7 ff       	sbrs	r27, 7
   123e8:	04 c0       	rjmp	.+8      	; 0x123f2 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int)+0x3c>
   123ea:	df 01       	movw	r26, r30
   123ec:	a0 95       	com	r26
   123ee:	b0 95       	com	r27
   123f0:	a8 01       	movw	r20, r16
   123f2:	ec 01       	movw	r28, r24
   123f4:	ea 84       	ldd	r14, Y+10	; 0x0a
   123f6:	fb 84       	ldd	r15, Y+11	; 0x0b
   123f8:	e8 81       	ld	r30, Y
   123fa:	f9 81       	ldd	r31, Y+1	; 0x01
   123fc:	04 80       	ldd	r0, Z+4	; 0x04
   123fe:	f5 81       	ldd	r31, Z+5	; 0x05
   12400:	e0 2d       	mov	r30, r0
   12402:	8d 01       	movw	r16, r26
   12404:	19 95       	eicall
   12406:	df 91       	pop	r29
   12408:	cf 91       	pop	r28
   1240a:	1f 91       	pop	r17
   1240c:	0f 91       	pop	r16
   1240e:	ff 90       	pop	r15
   12410:	ef 90       	pop	r14
   12412:	08 95       	ret

00012414 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
   12414:	ef 92       	push	r14
   12416:	ff 92       	push	r15
   12418:	0f 93       	push	r16
   1241a:	1f 93       	push	r17
   1241c:	dc 01       	movw	r26, r24
   1241e:	1a 96       	adiw	r26, 0x0a	; 10
   12420:	ed 90       	ld	r14, X+
   12422:	fc 90       	ld	r15, X
   12424:	1b 97       	sbiw	r26, 0x0b	; 11
   12426:	ed 91       	ld	r30, X+
   12428:	fc 91       	ld	r31, X
   1242a:	04 80       	ldd	r0, Z+4	; 0x04
   1242c:	f5 81       	ldd	r31, Z+5	; 0x05
   1242e:	e0 2d       	mov	r30, r0
   12430:	89 01       	movw	r16, r18
   12432:	21 e0       	ldi	r18, 0x01	; 1
   12434:	30 e0       	ldi	r19, 0x00	; 0
   12436:	19 95       	eicall
   12438:	1f 91       	pop	r17
   1243a:	0f 91       	pop	r16
   1243c:	ff 90       	pop	r15
   1243e:	ef 90       	pop	r14
   12440:	08 95       	ret

00012442 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
   12442:	ef 92       	push	r14
   12444:	ff 92       	push	r15
   12446:	0f 93       	push	r16
   12448:	1f 93       	push	r17
   1244a:	dc 01       	movw	r26, r24
   1244c:	1a 96       	adiw	r26, 0x0a	; 10
   1244e:	ed 90       	ld	r14, X+
   12450:	fc 90       	ld	r15, X
   12452:	1b 97       	sbiw	r26, 0x0b	; 11
   12454:	ed 91       	ld	r30, X+
   12456:	fc 91       	ld	r31, X
   12458:	04 80       	ldd	r0, Z+4	; 0x04
   1245a:	f5 81       	ldd	r31, Z+5	; 0x05
   1245c:	e0 2d       	mov	r30, r0
   1245e:	01 e0       	ldi	r16, 0x01	; 1
   12460:	10 e0       	ldi	r17, 0x00	; 0
   12462:	19 95       	eicall
   12464:	1f 91       	pop	r17
   12466:	0f 91       	pop	r16
   12468:	ff 90       	pop	r15
   1246a:	ef 90       	pop	r14
   1246c:	08 95       	ret

0001246e <LCDWIKI_GUI::Fill_Screen(unsigned int)>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj():
   1246e:	cf 92       	push	r12
   12470:	df 92       	push	r13
   12472:	ef 92       	push	r14
   12474:	ff 92       	push	r15
   12476:	0f 93       	push	r16
   12478:	1f 93       	push	r17
   1247a:	cf 93       	push	r28
   1247c:	df 93       	push	r29
   1247e:	ec 01       	movw	r28, r24
   12480:	7b 01       	movw	r14, r22
   12482:	e8 81       	ld	r30, Y
   12484:	f9 81       	ldd	r31, Y+1	; 0x01
   12486:	c4 80       	ldd	r12, Z+4	; 0x04
   12488:	d5 80       	ldd	r13, Z+5	; 0x05
   1248a:	04 84       	ldd	r0, Z+12	; 0x0c
   1248c:	f5 85       	ldd	r31, Z+13	; 0x0d
   1248e:	e0 2d       	mov	r30, r0
   12490:	19 95       	eicall
   12492:	8c 01       	movw	r16, r24
   12494:	e8 81       	ld	r30, Y
   12496:	f9 81       	ldd	r31, Y+1	; 0x01
   12498:	06 84       	ldd	r0, Z+14	; 0x0e
   1249a:	f7 85       	ldd	r31, Z+15	; 0x0f
   1249c:	e0 2d       	mov	r30, r0
   1249e:	ce 01       	movw	r24, r28
   124a0:	19 95       	eicall
   124a2:	9c 01       	movw	r18, r24
   124a4:	50 e0       	ldi	r21, 0x00	; 0
   124a6:	40 e0       	ldi	r20, 0x00	; 0
   124a8:	70 e0       	ldi	r23, 0x00	; 0
   124aa:	60 e0       	ldi	r22, 0x00	; 0
   124ac:	ce 01       	movw	r24, r28
   124ae:	f6 01       	movw	r30, r12
   124b0:	19 95       	eicall
   124b2:	df 91       	pop	r29
   124b4:	cf 91       	pop	r28
   124b6:	1f 91       	pop	r17
   124b8:	0f 91       	pop	r16
   124ba:	ff 90       	pop	r15
   124bc:	ef 90       	pop	r14
   124be:	df 90       	pop	r13
   124c0:	cf 90       	pop	r12
   124c2:	08 95       	ret

000124c4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii():
   124c4:	6f 92       	push	r6
   124c6:	7f 92       	push	r7
   124c8:	8f 92       	push	r8
   124ca:	9f 92       	push	r9
   124cc:	af 92       	push	r10
   124ce:	bf 92       	push	r11
   124d0:	cf 92       	push	r12
   124d2:	df 92       	push	r13
   124d4:	ef 92       	push	r14
   124d6:	ff 92       	push	r15
   124d8:	0f 93       	push	r16
   124da:	1f 93       	push	r17
   124dc:	cf 93       	push	r28
   124de:	df 93       	push	r29
   124e0:	3c 01       	movw	r6, r24
   124e2:	7b 01       	movw	r14, r22
   124e4:	ea 01       	movw	r28, r20
   124e6:	49 01       	movw	r8, r18
   124e8:	26 1b       	sub	r18, r22
   124ea:	37 0b       	sbc	r19, r23
   124ec:	59 01       	movw	r10, r18
   124ee:	4f ef       	ldi	r20, 0xFF	; 255
   124f0:	a4 1a       	sub	r10, r20
   124f2:	b4 0a       	sbc	r11, r20
   124f4:	c8 01       	movw	r24, r16
   124f6:	8c 1b       	sub	r24, r28
   124f8:	9d 0b       	sbc	r25, r29
   124fa:	6c 01       	movw	r12, r24
   124fc:	4f ef       	ldi	r20, 0xFF	; 255
   124fe:	c4 1a       	sub	r12, r20
   12500:	d4 0a       	sbc	r13, r20
   12502:	b7 fe       	sbrs	r11, 7
   12504:	04 c0       	rjmp	.+8      	; 0x1250e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x4a>
   12506:	59 01       	movw	r10, r18
   12508:	a0 94       	com	r10
   1250a:	b0 94       	com	r11
   1250c:	74 01       	movw	r14, r8
   1250e:	d7 fe       	sbrs	r13, 7
   12510:	04 c0       	rjmp	.+8      	; 0x1251a <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int)+0x56>
   12512:	6c 01       	movw	r12, r24
   12514:	c0 94       	com	r12
   12516:	d0 94       	com	r13
   12518:	e8 01       	movw	r28, r16
   1251a:	95 01       	movw	r18, r10
   1251c:	ae 01       	movw	r20, r28
   1251e:	b7 01       	movw	r22, r14
   12520:	c3 01       	movw	r24, r6
   12522:	0e 94 21 92 	call	0x12442	; 0x12442 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12526:	95 01       	movw	r18, r10
   12528:	a8 01       	movw	r20, r16
   1252a:	b7 01       	movw	r22, r14
   1252c:	c3 01       	movw	r24, r6
   1252e:	0e 94 21 92 	call	0x12442	; 0x12442 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
   12532:	96 01       	movw	r18, r12
   12534:	ae 01       	movw	r20, r28
   12536:	b7 01       	movw	r22, r14
   12538:	c3 01       	movw	r24, r6
   1253a:	0e 94 0a 92 	call	0x12414	; 0x12414 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
   1253e:	96 01       	movw	r18, r12
   12540:	ae 01       	movw	r20, r28
   12542:	b4 01       	movw	r22, r8
   12544:	c3 01       	movw	r24, r6
   12546:	df 91       	pop	r29
   12548:	cf 91       	pop	r28
   1254a:	1f 91       	pop	r17
   1254c:	0f 91       	pop	r16
   1254e:	ff 90       	pop	r15
   12550:	ef 90       	pop	r14
   12552:	df 90       	pop	r13
   12554:	cf 90       	pop	r12
   12556:	bf 90       	pop	r11
   12558:	af 90       	pop	r10
   1255a:	9f 90       	pop	r9
   1255c:	8f 90       	pop	r8
   1255e:	7f 90       	pop	r7
   12560:	6f 90       	pop	r6
   12562:	0c 94 0a 92 	jmp	0x12414	; 0x12414 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>

00012566 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
   12566:	fc 01       	movw	r30, r24
   12568:	77 83       	std	Z+7, r23	; 0x07
   1256a:	66 83       	std	Z+6, r22	; 0x06
   1256c:	08 95       	ret

0001256e <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
   1256e:	fc 01       	movw	r30, r24
   12570:	71 87       	std	Z+9, r23	; 0x09
   12572:	60 87       	std	Z+8, r22	; 0x08
   12574:	08 95       	ret

00012576 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
   12576:	fc 01       	movw	r30, r24
   12578:	64 87       	std	Z+12, r22	; 0x0c
   1257a:	08 95       	ret

0001257c <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
   1257c:	fc 01       	movw	r30, r24
   1257e:	65 87       	std	Z+13, r22	; 0x0d
   12580:	08 95       	ret

00012582 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
   12582:	2f 92       	push	r2
   12584:	3f 92       	push	r3
   12586:	4f 92       	push	r4
   12588:	5f 92       	push	r5
   1258a:	6f 92       	push	r6
   1258c:	7f 92       	push	r7
   1258e:	8f 92       	push	r8
   12590:	9f 92       	push	r9
   12592:	af 92       	push	r10
   12594:	bf 92       	push	r11
   12596:	cf 92       	push	r12
   12598:	df 92       	push	r13
   1259a:	ef 92       	push	r14
   1259c:	ff 92       	push	r15
   1259e:	0f 93       	push	r16
   125a0:	1f 93       	push	r17
   125a2:	cf 93       	push	r28
   125a4:	df 93       	push	r29
   125a6:	cd b7       	in	r28, 0x3d	; 61
   125a8:	de b7       	in	r29, 0x3e	; 62
   125aa:	2d 97       	sbiw	r28, 0x0d	; 13
   125ac:	0f b6       	in	r0, 0x3f	; 63
   125ae:	f8 94       	cli
   125b0:	de bf       	out	0x3e, r29	; 62
   125b2:	0f be       	out	0x3f, r0	; 63
   125b4:	cd bf       	out	0x3d, r28	; 61
   125b6:	3c 01       	movw	r6, r24
   125b8:	4b 01       	movw	r8, r22
   125ba:	2a 01       	movw	r4, r20
   125bc:	d2 2e       	mov	r13, r18
   125be:	1c 83       	std	Y+4, r17	; 0x04
   125c0:	0b 83       	std	Y+3, r16	; 0x03
   125c2:	fe 82       	std	Y+6, r15	; 0x06
   125c4:	ed 82       	std	Y+5, r14	; 0x05
   125c6:	ca 82       	std	Y+2, r12	; 0x02
   125c8:	a9 86       	std	Y+9, r10	; 0x09
   125ca:	dc 01       	movw	r26, r24
   125cc:	ed 91       	ld	r30, X+
   125ce:	fc 91       	ld	r31, X
   125d0:	06 84       	ldd	r0, Z+14	; 0x0e
   125d2:	f7 85       	ldd	r31, Z+15	; 0x0f
   125d4:	e0 2d       	mov	r30, r0
   125d6:	19 95       	eicall
   125d8:	88 16       	cp	r8, r24
   125da:	99 06       	cpc	r9, r25
   125dc:	0c f0       	brlt	.+2      	; 0x125e0 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
   125de:	7a c0       	rjmp	.+244    	; 0x126d4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   125e0:	d3 01       	movw	r26, r6
   125e2:	ed 91       	ld	r30, X+
   125e4:	fc 91       	ld	r31, X
   125e6:	04 84       	ldd	r0, Z+12	; 0x0c
   125e8:	f5 85       	ldd	r31, Z+13	; 0x0d
   125ea:	e0 2d       	mov	r30, r0
   125ec:	c3 01       	movw	r24, r6
   125ee:	19 95       	eicall
   125f0:	48 16       	cp	r4, r24
   125f2:	59 06       	cpc	r5, r25
   125f4:	0c f0       	brlt	.+2      	; 0x125f8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
   125f6:	6e c0       	rjmp	.+220    	; 0x126d4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   125f8:	3a 81       	ldd	r19, Y+2	; 0x02
   125fa:	23 2f       	mov	r18, r19
   125fc:	30 e0       	ldi	r19, 0x00	; 0
   125fe:	3d 87       	std	Y+13, r19	; 0x0d
   12600:	2c 87       	std	Y+12, r18	; 0x0c
   12602:	c4 01       	movw	r24, r8
   12604:	aa 81       	ldd	r26, Y+2	; 0x02
   12606:	46 e0       	ldi	r20, 0x06	; 6
   12608:	a4 9f       	mul	r26, r20
   1260a:	80 0d       	add	r24, r0
   1260c:	91 1d       	adc	r25, r1
   1260e:	11 24       	eor	r1, r1
   12610:	18 16       	cp	r1, r24
   12612:	19 06       	cpc	r1, r25
   12614:	0c f0       	brlt	.+2      	; 0x12618 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
   12616:	5e c0       	rjmp	.+188    	; 0x126d4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12618:	c9 01       	movw	r24, r18
   1261a:	23 e0       	ldi	r18, 0x03	; 3
   1261c:	88 0f       	add	r24, r24
   1261e:	99 1f       	adc	r25, r25
   12620:	2a 95       	dec	r18
   12622:	e1 f7       	brne	.-8      	; 0x1261c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
   12624:	84 0d       	add	r24, r4
   12626:	95 1d       	adc	r25, r5
   12628:	18 16       	cp	r1, r24
   1262a:	19 06       	cpc	r1, r25
   1262c:	0c f0       	brlt	.+2      	; 0x12630 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
   1262e:	52 c0       	rjmp	.+164    	; 0x126d4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   12630:	bf ea       	ldi	r27, 0xAF	; 175
   12632:	bd 15       	cp	r27, r13
   12634:	08 f4       	brcc	.+2      	; 0x12638 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
   12636:	d3 94       	inc	r13
   12638:	54 01       	movw	r10, r8
   1263a:	19 82       	std	Y+1, r1	; 0x01
   1263c:	8b e1       	ldi	r24, 0x1B	; 27
   1263e:	9c e5       	ldi	r25, 0x5C	; 92
   12640:	88 19       	sub	r24, r8
   12642:	99 09       	sbc	r25, r9
   12644:	9c 01       	movw	r18, r24
   12646:	45 e0       	ldi	r20, 0x05	; 5
   12648:	d4 9e       	mul	r13, r20
   1264a:	20 0d       	add	r18, r0
   1264c:	31 1d       	adc	r19, r1
   1264e:	11 24       	eor	r1, r1
   12650:	3b 87       	std	Y+11, r19	; 0x0b
   12652:	2a 87       	std	Y+10, r18	; 0x0a
   12654:	89 81       	ldd	r24, Y+1	; 0x01
   12656:	e0 e0       	ldi	r30, 0x00	; 0
   12658:	85 30       	cpi	r24, 0x05	; 5
   1265a:	29 f0       	breq	.+10     	; 0x12666 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
   1265c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1265e:	fb 85       	ldd	r31, Y+11	; 0x0b
   12660:	ea 0d       	add	r30, r10
   12662:	fb 1d       	adc	r31, r11
   12664:	e4 91       	lpm	r30, Z
   12666:	62 01       	movw	r12, r4
   12668:	31 2c       	mov	r3, r1
   1266a:	21 2c       	mov	r2, r1
   1266c:	ae 2f       	mov	r26, r30
   1266e:	b0 e0       	ldi	r27, 0x00	; 0
   12670:	b8 87       	std	Y+8, r27	; 0x08
   12672:	af 83       	std	Y+7, r26	; 0x07
   12674:	e0 ff       	sbrs	r30, 0
   12676:	54 c0       	rjmp	.+168    	; 0x12720 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
   12678:	d3 01       	movw	r26, r6
   1267a:	ed 91       	ld	r30, X+
   1267c:	fc 91       	ld	r31, X
   1267e:	ba 81       	ldd	r27, Y+2	; 0x02
   12680:	b1 30       	cpi	r27, 0x01	; 1
   12682:	09 f0       	breq	.+2      	; 0x12686 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
   12684:	40 c0       	rjmp	.+128    	; 0x12706 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
   12686:	02 80       	ldd	r0, Z+2	; 0x02
   12688:	f3 81       	ldd	r31, Z+3	; 0x03
   1268a:	e0 2d       	mov	r30, r0
   1268c:	2b 81       	ldd	r18, Y+3	; 0x03
   1268e:	3c 81       	ldd	r19, Y+4	; 0x04
   12690:	a2 01       	movw	r20, r4
   12692:	42 0d       	add	r20, r2
   12694:	53 1d       	adc	r21, r3
   12696:	b5 01       	movw	r22, r10
   12698:	c3 01       	movw	r24, r6
   1269a:	19 95       	eicall
   1269c:	ef 81       	ldd	r30, Y+7	; 0x07
   1269e:	f8 85       	ldd	r31, Y+8	; 0x08
   126a0:	f5 95       	asr	r31
   126a2:	e7 95       	ror	r30
   126a4:	2f ef       	ldi	r18, 0xFF	; 255
   126a6:	22 1a       	sub	r2, r18
   126a8:	32 0a       	sbc	r3, r18
   126aa:	8c 85       	ldd	r24, Y+12	; 0x0c
   126ac:	9d 85       	ldd	r25, Y+13	; 0x0d
   126ae:	c8 0e       	add	r12, r24
   126b0:	d9 1e       	adc	r13, r25
   126b2:	98 e0       	ldi	r25, 0x08	; 8
   126b4:	29 16       	cp	r2, r25
   126b6:	31 04       	cpc	r3, r1
   126b8:	c9 f6       	brne	.-78     	; 0x1266c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
   126ba:	af ef       	ldi	r26, 0xFF	; 255
   126bc:	aa 1a       	sub	r10, r26
   126be:	ba 0a       	sbc	r11, r26
   126c0:	2c 85       	ldd	r18, Y+12	; 0x0c
   126c2:	3d 85       	ldd	r19, Y+13	; 0x0d
   126c4:	82 0e       	add	r8, r18
   126c6:	93 1e       	adc	r9, r19
   126c8:	39 81       	ldd	r19, Y+1	; 0x01
   126ca:	3f 5f       	subi	r19, 0xFF	; 255
   126cc:	39 83       	std	Y+1, r19	; 0x01
   126ce:	36 30       	cpi	r19, 0x06	; 6
   126d0:	09 f0       	breq	.+2      	; 0x126d4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
   126d2:	c0 cf       	rjmp	.-128    	; 0x12654 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
   126d4:	2d 96       	adiw	r28, 0x0d	; 13
   126d6:	0f b6       	in	r0, 0x3f	; 63
   126d8:	f8 94       	cli
   126da:	de bf       	out	0x3e, r29	; 62
   126dc:	0f be       	out	0x3f, r0	; 63
   126de:	cd bf       	out	0x3d, r28	; 61
   126e0:	df 91       	pop	r29
   126e2:	cf 91       	pop	r28
   126e4:	1f 91       	pop	r17
   126e6:	0f 91       	pop	r16
   126e8:	ff 90       	pop	r15
   126ea:	ef 90       	pop	r14
   126ec:	df 90       	pop	r13
   126ee:	cf 90       	pop	r12
   126f0:	bf 90       	pop	r11
   126f2:	af 90       	pop	r10
   126f4:	9f 90       	pop	r9
   126f6:	8f 90       	pop	r8
   126f8:	7f 90       	pop	r7
   126fa:	6f 90       	pop	r6
   126fc:	5f 90       	pop	r5
   126fe:	4f 90       	pop	r4
   12700:	3f 90       	pop	r3
   12702:	2f 90       	pop	r2
   12704:	08 95       	ret
   12706:	04 80       	ldd	r0, Z+4	; 0x04
   12708:	f5 81       	ldd	r31, Z+5	; 0x05
   1270a:	e0 2d       	mov	r30, r0
   1270c:	eb 80       	ldd	r14, Y+3	; 0x03
   1270e:	fc 80       	ldd	r15, Y+4	; 0x04
   12710:	0c 85       	ldd	r16, Y+12	; 0x0c
   12712:	1d 85       	ldd	r17, Y+13	; 0x0d
   12714:	98 01       	movw	r18, r16
   12716:	a6 01       	movw	r20, r12
   12718:	b4 01       	movw	r22, r8
   1271a:	c3 01       	movw	r24, r6
   1271c:	19 95       	eicall
   1271e:	be cf       	rjmp	.-132    	; 0x1269c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12720:	2d 81       	ldd	r18, Y+5	; 0x05
   12722:	3e 81       	ldd	r19, Y+6	; 0x06
   12724:	8b 81       	ldd	r24, Y+3	; 0x03
   12726:	9c 81       	ldd	r25, Y+4	; 0x04
   12728:	28 17       	cp	r18, r24
   1272a:	39 07       	cpc	r19, r25
   1272c:	09 f4       	brne	.+2      	; 0x12730 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
   1272e:	b6 cf       	rjmp	.-148    	; 0x1269c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12730:	99 85       	ldd	r25, Y+9	; 0x09
   12732:	91 11       	cpse	r25, r1
   12734:	b3 cf       	rjmp	.-154    	; 0x1269c <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
   12736:	d3 01       	movw	r26, r6
   12738:	ed 91       	ld	r30, X+
   1273a:	fc 91       	ld	r31, X
   1273c:	ba 81       	ldd	r27, Y+2	; 0x02
   1273e:	b1 30       	cpi	r27, 0x01	; 1
   12740:	21 f4       	brne	.+8      	; 0x1274a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
   12742:	02 80       	ldd	r0, Z+2	; 0x02
   12744:	f3 81       	ldd	r31, Z+3	; 0x03
   12746:	e0 2d       	mov	r30, r0
   12748:	a3 cf       	rjmp	.-186    	; 0x12690 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
   1274a:	04 80       	ldd	r0, Z+4	; 0x04
   1274c:	f5 81       	ldd	r31, Z+5	; 0x05
   1274e:	e0 2d       	mov	r30, r0
   12750:	ed 80       	ldd	r14, Y+5	; 0x05
   12752:	fe 80       	ldd	r15, Y+6	; 0x06
   12754:	dd cf       	rjmp	.-70     	; 0x12710 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

00012756 <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
   12756:	af 92       	push	r10
   12758:	cf 92       	push	r12
   1275a:	ef 92       	push	r14
   1275c:	ff 92       	push	r15
   1275e:	0f 93       	push	r16
   12760:	1f 93       	push	r17
   12762:	cf 93       	push	r28
   12764:	df 93       	push	r29
   12766:	ec 01       	movw	r28, r24
   12768:	6a 30       	cpi	r22, 0x0A	; 10
   1276a:	c1 f4       	brne	.+48     	; 0x1279c <LCDWIKI_GUI::write(unsigned char)+0x46>
   1276c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1276e:	98 e0       	ldi	r25, 0x08	; 8
   12770:	89 9f       	mul	r24, r25
   12772:	90 01       	movw	r18, r0
   12774:	11 24       	eor	r1, r1
   12776:	8c 81       	ldd	r24, Y+4	; 0x04
   12778:	9d 81       	ldd	r25, Y+5	; 0x05
   1277a:	82 0f       	add	r24, r18
   1277c:	93 1f       	adc	r25, r19
   1277e:	9d 83       	std	Y+5, r25	; 0x05
   12780:	8c 83       	std	Y+4, r24	; 0x04
   12782:	1b 82       	std	Y+3, r1	; 0x03
   12784:	1a 82       	std	Y+2, r1	; 0x02
   12786:	81 e0       	ldi	r24, 0x01	; 1
   12788:	90 e0       	ldi	r25, 0x00	; 0
   1278a:	df 91       	pop	r29
   1278c:	cf 91       	pop	r28
   1278e:	1f 91       	pop	r17
   12790:	0f 91       	pop	r16
   12792:	ff 90       	pop	r15
   12794:	ef 90       	pop	r14
   12796:	cf 90       	pop	r12
   12798:	af 90       	pop	r10
   1279a:	08 95       	ret
   1279c:	6d 30       	cpi	r22, 0x0D	; 13
   1279e:	99 f3       	breq	.-26     	; 0x12786 <LCDWIKI_GUI::write(unsigned char)+0x30>
   127a0:	26 2f       	mov	r18, r22
   127a2:	e8 84       	ldd	r14, Y+8	; 0x08
   127a4:	f9 84       	ldd	r15, Y+9	; 0x09
   127a6:	0e 81       	ldd	r16, Y+6	; 0x06
   127a8:	1f 81       	ldd	r17, Y+7	; 0x07
   127aa:	4c 81       	ldd	r20, Y+4	; 0x04
   127ac:	5d 81       	ldd	r21, Y+5	; 0x05
   127ae:	6a 81       	ldd	r22, Y+2	; 0x02
   127b0:	7b 81       	ldd	r23, Y+3	; 0x03
   127b2:	ad 84       	ldd	r10, Y+13	; 0x0d
   127b4:	cc 84       	ldd	r12, Y+12	; 0x0c
   127b6:	0e 94 c1 92 	call	0x12582	; 0x12582 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
   127ba:	2c 85       	ldd	r18, Y+12	; 0x0c
   127bc:	8a 81       	ldd	r24, Y+2	; 0x02
   127be:	9b 81       	ldd	r25, Y+3	; 0x03
   127c0:	36 e0       	ldi	r19, 0x06	; 6
   127c2:	23 9f       	mul	r18, r19
   127c4:	80 0d       	add	r24, r0
   127c6:	91 1d       	adc	r25, r1
   127c8:	11 24       	eor	r1, r1
   127ca:	9b 83       	std	Y+3, r25	; 0x03
   127cc:	8a 83       	std	Y+2, r24	; 0x02
   127ce:	db cf       	rjmp	.-74     	; 0x12786 <LCDWIKI_GUI::write(unsigned char)+0x30>

000127d0 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
   127d0:	dc 01       	movw	r26, r24
   127d2:	ed 91       	ld	r30, X+
   127d4:	fc 91       	ld	r31, X
   127d6:	06 84       	ldd	r0, Z+14	; 0x0e
   127d8:	f7 85       	ldd	r31, Z+15	; 0x0f
   127da:	e0 2d       	mov	r30, r0
   127dc:	19 94       	eijmp

000127de <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
   127de:	af 92       	push	r10
   127e0:	bf 92       	push	r11
   127e2:	cf 92       	push	r12
   127e4:	df 92       	push	r13
   127e6:	ef 92       	push	r14
   127e8:	ff 92       	push	r15
   127ea:	0f 93       	push	r16
   127ec:	1f 93       	push	r17
   127ee:	cf 93       	push	r28
   127f0:	df 93       	push	r29
   127f2:	ec 01       	movw	r28, r24
   127f4:	6b 01       	movw	r12, r22
   127f6:	8a 01       	movw	r16, r20
   127f8:	79 01       	movw	r14, r18
   127fa:	ca 01       	movw	r24, r20
   127fc:	8e 50       	subi	r24, 0x0E	; 14
   127fe:	97 42       	sbci	r25, 0x27	; 39
   12800:	02 97       	sbiw	r24, 0x02	; 2
   12802:	00 f5       	brcc	.+64     	; 0x12844 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
   12804:	fb 01       	movw	r30, r22
   12806:	01 90       	ld	r0, Z+
   12808:	00 20       	and	r0, r0
   1280a:	e9 f7       	brne	.-6      	; 0x12806 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
   1280c:	31 97       	sbiw	r30, 0x01	; 1
   1280e:	e6 1b       	sub	r30, r22
   12810:	f7 0b       	sbc	r31, r23
   12812:	8c 85       	ldd	r24, Y+12	; 0x0c
   12814:	26 e0       	ldi	r18, 0x06	; 6
   12816:	82 9f       	mul	r24, r18
   12818:	c0 01       	movw	r24, r0
   1281a:	11 24       	eor	r1, r1
   1281c:	8e 9f       	mul	r24, r30
   1281e:	50 01       	movw	r10, r0
   12820:	8f 9f       	mul	r24, r31
   12822:	b0 0c       	add	r11, r0
   12824:	9e 9f       	mul	r25, r30
   12826:	b0 0c       	add	r11, r0
   12828:	11 24       	eor	r1, r1
   1282a:	ce 01       	movw	r24, r28
   1282c:	0e 94 e8 93 	call	0x127d0	; 0x127d0 <LCDWIKI_GUI::Get_Display_Width() const>
   12830:	8a 19       	sub	r24, r10
   12832:	9b 09       	sbc	r25, r11
   12834:	0e 30       	cpi	r16, 0x0E	; 14
   12836:	17 42       	sbci	r17, 0x27	; 39
   12838:	19 f5       	brne	.+70     	; 0x12880 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
   1283a:	97 fd       	sbrc	r25, 7
   1283c:	01 96       	adiw	r24, 0x01	; 1
   1283e:	8c 01       	movw	r16, r24
   12840:	15 95       	asr	r17
   12842:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
   12844:	1b 83       	std	Y+3, r17	; 0x03
   12846:	0a 83       	std	Y+2, r16	; 0x02
   12848:	fd 82       	std	Y+5, r15	; 0x05
   1284a:	ec 82       	std	Y+4, r14	; 0x04
   1284c:	86 01       	movw	r16, r12
   1284e:	78 01       	movw	r14, r16
   12850:	ec 18       	sub	r14, r12
   12852:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
   12854:	f8 01       	movw	r30, r16
   12856:	61 91       	ld	r22, Z+
   12858:	8f 01       	movw	r16, r30
   1285a:	66 23       	and	r22, r22
   1285c:	29 f0       	breq	.+10     	; 0x12868 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
   1285e:	ce 01       	movw	r24, r28
   12860:	0e 94 ab 93 	call	0x12756	; 0x12756 <LCDWIKI_GUI::write(unsigned char)>
   12864:	89 2b       	or	r24, r25
   12866:	99 f7       	brne	.-26     	; 0x1284e <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
   12868:	c7 01       	movw	r24, r14
   1286a:	df 91       	pop	r29
   1286c:	cf 91       	pop	r28
   1286e:	1f 91       	pop	r17
   12870:	0f 91       	pop	r16
   12872:	ff 90       	pop	r15
   12874:	ef 90       	pop	r14
   12876:	df 90       	pop	r13
   12878:	cf 90       	pop	r12
   1287a:	bf 90       	pop	r11
   1287c:	af 90       	pop	r10
   1287e:	08 95       	ret
   12880:	8c 01       	movw	r16, r24
   12882:	01 50       	subi	r16, 0x01	; 1
   12884:	11 09       	sbc	r17, r1
   12886:	de cf       	rjmp	.-68     	; 0x12844 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

00012888 <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
   12888:	fb 01       	movw	r30, r22
   1288a:	60 81       	ld	r22, Z
   1288c:	71 81       	ldd	r23, Z+1	; 0x01
   1288e:	0c 94 ef 93 	jmp	0x127de	; 0x127de <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00012892 <LCDWIKI_GUI::Get_Display_Height() const>:
_ZNK11LCDWIKI_GUI18Get_Display_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:817
}

//get lcd height 
int16_t LCDWIKI_GUI::Get_Display_Height(void) const
{
	return Get_Height();
   12892:	dc 01       	movw	r26, r24
   12894:	ed 91       	ld	r30, X+
   12896:	fc 91       	ld	r31, X
   12898:	04 84       	ldd	r0, Z+12	; 0x0c
   1289a:	f5 85       	ldd	r31, Z+13	; 0x0d
   1289c:	e0 2d       	mov	r30, r0
   1289e:	19 94       	eijmp

000128a0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:951
		{
			Write_Cmd_Data(cmd, d);                      //static function
        }
        size -= 2 * sizeof(int16_t);
    }
}
   128a0:	0f 93       	push	r16
   128a2:	cf 93       	push	r28
   128a4:	df 93       	push	r29
   128a6:	dc 01       	movw	r26, r24
   128a8:	01 70       	andi	r16, 0x01	; 1
   128aa:	9e 96       	adiw	r26, 0x2e	; 46
   128ac:	ed 91       	ld	r30, X+
   128ae:	fc 91       	ld	r31, X
   128b0:	9f 97       	sbiw	r26, 0x2f	; 47
   128b2:	80 81       	ld	r24, Z
   128b4:	da 96       	adiw	r26, 0x3a	; 58
   128b6:	9c 91       	ld	r25, X
   128b8:	da 97       	sbiw	r26, 0x3a	; 58
   128ba:	89 23       	and	r24, r25
   128bc:	80 83       	st	Z, r24
   128be:	22 23       	and	r18, r18
   128c0:	09 f4       	brne	.+2      	; 0x128c4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
   128c2:	5b c0       	rjmp	.+182    	; 0x1297a <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
   128c4:	58 96       	adiw	r26, 0x18	; 24
   128c6:	8d 91       	ld	r24, X+
   128c8:	9c 91       	ld	r25, X
   128ca:	59 97       	sbiw	r26, 0x19	; 25
   128cc:	89 2b       	or	r24, r25
   128ce:	49 f5       	brne	.+82     	; 0x12922 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
   128d0:	d0 96       	adiw	r26, 0x30	; 48
   128d2:	ed 91       	ld	r30, X+
   128d4:	fc 91       	ld	r31, X
   128d6:	d1 97       	sbiw	r26, 0x31	; 49
   128d8:	80 81       	ld	r24, Z
   128da:	db 96       	adiw	r26, 0x3b	; 59
   128dc:	9c 91       	ld	r25, X
   128de:	db 97       	sbiw	r26, 0x3b	; 59
   128e0:	89 23       	and	r24, r25
   128e2:	80 83       	st	Z, r24
   128e4:	12 b8       	out	0x02, r1	; 2
   128e6:	d2 96       	adiw	r26, 0x32	; 50
   128e8:	ed 91       	ld	r30, X+
   128ea:	fc 91       	ld	r31, X
   128ec:	d3 97       	sbiw	r26, 0x33	; 51
   128ee:	80 81       	ld	r24, Z
   128f0:	dc 96       	adiw	r26, 0x3c	; 60
   128f2:	9c 91       	ld	r25, X
   128f4:	dc 97       	sbiw	r26, 0x3c	; 60
   128f6:	89 23       	and	r24, r25
   128f8:	80 83       	st	Z, r24
   128fa:	d2 96       	adiw	r26, 0x32	; 50
   128fc:	ed 91       	ld	r30, X+
   128fe:	fc 91       	ld	r31, X
   12900:	d3 97       	sbiw	r26, 0x33	; 51
   12902:	80 81       	ld	r24, Z
   12904:	d8 96       	adiw	r26, 0x38	; 56
   12906:	9c 91       	ld	r25, X
   12908:	d8 97       	sbiw	r26, 0x38	; 56
   1290a:	89 2b       	or	r24, r25
   1290c:	80 83       	st	Z, r24
   1290e:	d0 96       	adiw	r26, 0x30	; 48
   12910:	ed 91       	ld	r30, X+
   12912:	fc 91       	ld	r31, X
   12914:	d1 97       	sbiw	r26, 0x31	; 49
   12916:	80 81       	ld	r24, Z
   12918:	d7 96       	adiw	r26, 0x37	; 55
   1291a:	9c 91       	ld	r25, X
   1291c:	d7 97       	sbiw	r26, 0x37	; 55
   1291e:	89 2b       	or	r24, r25
   12920:	80 83       	st	Z, r24
   12922:	d0 96       	adiw	r26, 0x30	; 48
   12924:	ed 91       	ld	r30, X+
   12926:	fc 91       	ld	r31, X
   12928:	d1 97       	sbiw	r26, 0x31	; 49
   1292a:	80 81       	ld	r24, Z
   1292c:	db 96       	adiw	r26, 0x3b	; 59
   1292e:	9c 91       	ld	r25, X
   12930:	db 97       	sbiw	r26, 0x3b	; 59
   12932:	89 23       	and	r24, r25
   12934:	80 83       	st	Z, r24
   12936:	90 96       	adiw	r26, 0x20	; 32
   12938:	8c 91       	ld	r24, X
   1293a:	90 97       	sbiw	r26, 0x20	; 32
   1293c:	82 b9       	out	0x02, r24	; 2
   1293e:	d2 96       	adiw	r26, 0x32	; 50
   12940:	ed 91       	ld	r30, X+
   12942:	fc 91       	ld	r31, X
   12944:	d3 97       	sbiw	r26, 0x33	; 51
   12946:	80 81       	ld	r24, Z
   12948:	dc 96       	adiw	r26, 0x3c	; 60
   1294a:	9c 91       	ld	r25, X
   1294c:	dc 97       	sbiw	r26, 0x3c	; 60
   1294e:	89 23       	and	r24, r25
   12950:	80 83       	st	Z, r24
   12952:	d2 96       	adiw	r26, 0x32	; 50
   12954:	ed 91       	ld	r30, X+
   12956:	fc 91       	ld	r31, X
   12958:	d3 97       	sbiw	r26, 0x33	; 51
   1295a:	80 81       	ld	r24, Z
   1295c:	d8 96       	adiw	r26, 0x38	; 56
   1295e:	9c 91       	ld	r25, X
   12960:	d8 97       	sbiw	r26, 0x38	; 56
   12962:	89 2b       	or	r24, r25
   12964:	80 83       	st	Z, r24
   12966:	d0 96       	adiw	r26, 0x30	; 48
   12968:	ed 91       	ld	r30, X+
   1296a:	fc 91       	ld	r31, X
   1296c:	d1 97       	sbiw	r26, 0x31	; 49
   1296e:	80 81       	ld	r24, Z
   12970:	d7 96       	adiw	r26, 0x37	; 55
   12972:	9c 91       	ld	r25, X
   12974:	d7 97       	sbiw	r26, 0x37	; 55
   12976:	89 2b       	or	r24, r25
   12978:	80 83       	st	Z, r24
   1297a:	eb 01       	movw	r28, r22
   1297c:	ca 01       	movw	r24, r20
   1297e:	18 16       	cp	r1, r24
   12980:	19 06       	cpc	r1, r25
   12982:	bc f5       	brge	.+110    	; 0x129f2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
   12984:	00 23       	and	r16, r16
   12986:	91 f1       	breq	.+100    	; 0x129ec <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
   12988:	fe 01       	movw	r30, r28
   1298a:	45 91       	lpm	r20, Z+
   1298c:	54 91       	lpm	r21, Z
   1298e:	34 2f       	mov	r19, r20
   12990:	25 2f       	mov	r18, r21
   12992:	22 b9       	out	0x02, r18	; 2
   12994:	d2 96       	adiw	r26, 0x32	; 50
   12996:	ed 91       	ld	r30, X+
   12998:	fc 91       	ld	r31, X
   1299a:	d3 97       	sbiw	r26, 0x33	; 51
   1299c:	20 81       	ld	r18, Z
   1299e:	dc 96       	adiw	r26, 0x3c	; 60
   129a0:	4c 91       	ld	r20, X
   129a2:	dc 97       	sbiw	r26, 0x3c	; 60
   129a4:	24 23       	and	r18, r20
   129a6:	20 83       	st	Z, r18
   129a8:	d2 96       	adiw	r26, 0x32	; 50
   129aa:	ed 91       	ld	r30, X+
   129ac:	fc 91       	ld	r31, X
   129ae:	d3 97       	sbiw	r26, 0x33	; 51
   129b0:	20 81       	ld	r18, Z
   129b2:	d8 96       	adiw	r26, 0x38	; 56
   129b4:	4c 91       	ld	r20, X
   129b6:	d8 97       	sbiw	r26, 0x38	; 56
   129b8:	24 2b       	or	r18, r20
   129ba:	20 83       	st	Z, r18
   129bc:	32 b9       	out	0x02, r19	; 2
   129be:	d2 96       	adiw	r26, 0x32	; 50
   129c0:	ed 91       	ld	r30, X+
   129c2:	fc 91       	ld	r31, X
   129c4:	d3 97       	sbiw	r26, 0x33	; 51
   129c6:	20 81       	ld	r18, Z
   129c8:	dc 96       	adiw	r26, 0x3c	; 60
   129ca:	3c 91       	ld	r19, X
   129cc:	dc 97       	sbiw	r26, 0x3c	; 60
   129ce:	23 23       	and	r18, r19
   129d0:	20 83       	st	Z, r18
   129d2:	d2 96       	adiw	r26, 0x32	; 50
   129d4:	ed 91       	ld	r30, X+
   129d6:	fc 91       	ld	r31, X
   129d8:	d3 97       	sbiw	r26, 0x33	; 51
   129da:	20 81       	ld	r18, Z
   129dc:	d8 96       	adiw	r26, 0x38	; 56
   129de:	3c 91       	ld	r19, X
   129e0:	d8 97       	sbiw	r26, 0x38	; 56
   129e2:	23 2b       	or	r18, r19
   129e4:	20 83       	st	Z, r18
   129e6:	22 96       	adiw	r28, 0x02	; 2
   129e8:	01 97       	sbiw	r24, 0x01	; 1
   129ea:	c9 cf       	rjmp	.-110    	; 0x1297e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
   129ec:	38 81       	ld	r19, Y
   129ee:	29 81       	ldd	r18, Y+1	; 0x01
   129f0:	d0 cf       	rjmp	.-96     	; 0x12992 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
   129f2:	9e 96       	adiw	r26, 0x2e	; 46
   129f4:	ed 91       	ld	r30, X+
   129f6:	fc 91       	ld	r31, X
   129f8:	9f 97       	sbiw	r26, 0x2f	; 47
   129fa:	80 81       	ld	r24, Z
   129fc:	d6 96       	adiw	r26, 0x36	; 54
   129fe:	9c 91       	ld	r25, X
   12a00:	89 2b       	or	r24, r25
   12a02:	80 83       	st	Z, r24
   12a04:	df 91       	pop	r29
   12a06:	cf 91       	pop	r28
   12a08:	0f 91       	pop	r16
   12a0a:	08 95       	ret

00012a0c <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
   12a0c:	38 e0       	ldi	r19, 0x08	; 8
   12a0e:	43 9f       	mul	r20, r19
   12a10:	c0 01       	movw	r24, r0
   12a12:	11 24       	eor	r1, r1
   12a14:	80 7e       	andi	r24, 0xE0	; 224
   12a16:	97 70       	andi	r25, 0x07	; 7
   12a18:	26 95       	lsr	r18
   12a1a:	26 95       	lsr	r18
   12a1c:	26 95       	lsr	r18
   12a1e:	82 2b       	or	r24, r18
   12a20:	70 e0       	ldi	r23, 0x00	; 0
   12a22:	76 2f       	mov	r23, r22
   12a24:	66 27       	eor	r22, r22
   12a26:	66 27       	eor	r22, r22
   12a28:	78 7f       	andi	r23, 0xF8	; 248
   12a2a:	86 2b       	or	r24, r22
   12a2c:	97 2b       	or	r25, r23
   12a2e:	08 95       	ret

00012a30 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
   12a30:	7f 92       	push	r7
   12a32:	8f 92       	push	r8
   12a34:	9f 92       	push	r9
   12a36:	af 92       	push	r10
   12a38:	bf 92       	push	r11
   12a3a:	cf 92       	push	r12
   12a3c:	df 92       	push	r13
   12a3e:	ef 92       	push	r14
   12a40:	ff 92       	push	r15
   12a42:	0f 93       	push	r16
   12a44:	1f 93       	push	r17
   12a46:	cf 93       	push	r28
   12a48:	df 93       	push	r29
   12a4a:	ec 01       	movw	r28, r24
   12a4c:	59 01       	movw	r10, r18
   12a4e:	98 01       	movw	r18, r16
   12a50:	0e 9d       	mul	r16, r14
   12a52:	60 01       	movw	r12, r0
   12a54:	0f 9d       	mul	r16, r15
   12a56:	d0 0c       	add	r13, r0
   12a58:	1e 9d       	mul	r17, r14
   12a5a:	d0 0c       	add	r13, r0
   12a5c:	11 24       	eor	r1, r1
   12a5e:	87 01       	movw	r16, r14
   12a60:	04 0f       	add	r16, r20
   12a62:	15 1f       	adc	r17, r21
   12a64:	01 50       	subi	r16, 0x01	; 1
   12a66:	11 09       	sbc	r17, r1
   12a68:	26 0f       	add	r18, r22
   12a6a:	37 1f       	adc	r19, r23
   12a6c:	21 50       	subi	r18, 0x01	; 1
   12a6e:	31 09       	sbc	r19, r1
   12a70:	e8 81       	ld	r30, Y
   12a72:	f9 81       	ldd	r31, Y+1	; 0x01
   12a74:	06 80       	ldd	r0, Z+6	; 0x06
   12a76:	f7 81       	ldd	r31, Z+7	; 0x07
   12a78:	e0 2d       	mov	r30, r0
   12a7a:	19 95       	eicall
   12a7c:	77 24       	eor	r7, r7
   12a7e:	7a 94       	dec	r7
   12a80:	1c 14       	cp	r1, r12
   12a82:	1d 04       	cpc	r1, r13
   12a84:	0c f0       	brlt	.+2      	; 0x12a88 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
   12a86:	0a c1       	rjmp	.+532    	; 0x12c9c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
   12a88:	ee a5       	ldd	r30, Y+46	; 0x2e
   12a8a:	ff a5       	ldd	r31, Y+47	; 0x2f
   12a8c:	80 81       	ld	r24, Z
   12a8e:	9a ad       	ldd	r25, Y+58	; 0x3a
   12a90:	89 23       	and	r24, r25
   12a92:	80 83       	st	Z, r24
   12a94:	e8 a9       	ldd	r30, Y+48	; 0x30
   12a96:	f9 a9       	ldd	r31, Y+49	; 0x31
   12a98:	80 81       	ld	r24, Z
   12a9a:	9b ad       	ldd	r25, Y+59	; 0x3b
   12a9c:	89 23       	and	r24, r25
   12a9e:	80 83       	st	Z, r24
   12aa0:	9a a1       	ldd	r25, Y+34	; 0x22
   12aa2:	8b a1       	ldd	r24, Y+35	; 0x23
   12aa4:	82 b9       	out	0x02, r24	; 2
   12aa6:	ea a9       	ldd	r30, Y+50	; 0x32
   12aa8:	fb a9       	ldd	r31, Y+51	; 0x33
   12aaa:	80 81       	ld	r24, Z
   12aac:	2c ad       	ldd	r18, Y+60	; 0x3c
   12aae:	82 23       	and	r24, r18
   12ab0:	80 83       	st	Z, r24
   12ab2:	ea a9       	ldd	r30, Y+50	; 0x32
   12ab4:	fb a9       	ldd	r31, Y+51	; 0x33
   12ab6:	80 81       	ld	r24, Z
   12ab8:	28 ad       	ldd	r18, Y+56	; 0x38
   12aba:	82 2b       	or	r24, r18
   12abc:	80 83       	st	Z, r24
   12abe:	92 b9       	out	0x02, r25	; 2
   12ac0:	ea a9       	ldd	r30, Y+50	; 0x32
   12ac2:	fb a9       	ldd	r31, Y+51	; 0x33
   12ac4:	80 81       	ld	r24, Z
   12ac6:	9c ad       	ldd	r25, Y+60	; 0x3c
   12ac8:	89 23       	and	r24, r25
   12aca:	80 83       	st	Z, r24
   12acc:	ea a9       	ldd	r30, Y+50	; 0x32
   12ace:	fb a9       	ldd	r31, Y+51	; 0x33
   12ad0:	80 81       	ld	r24, Z
   12ad2:	98 ad       	ldd	r25, Y+56	; 0x38
   12ad4:	89 2b       	or	r24, r25
   12ad6:	80 83       	st	Z, r24
   12ad8:	e8 a9       	ldd	r30, Y+48	; 0x30
   12ada:	f9 a9       	ldd	r31, Y+49	; 0x31
   12adc:	80 81       	ld	r24, Z
   12ade:	9f a9       	ldd	r25, Y+55	; 0x37
   12ae0:	89 2b       	or	r24, r25
   12ae2:	80 83       	st	Z, r24
   12ae4:	81 b1       	in	r24, 0x01	; 1
   12ae6:	11 b8       	out	0x01, r1	; 1
   12ae8:	88 8d       	ldd	r24, Y+24	; 0x18
   12aea:	99 8d       	ldd	r25, Y+25	; 0x19
   12aec:	89 2b       	or	r24, r25
   12aee:	09 f0       	breq	.+2      	; 0x12af2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
   12af0:	67 c0       	rjmp	.+206    	; 0x12bc0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
   12af2:	f5 01       	movw	r30, r10
   12af4:	c6 01       	movw	r24, r12
   12af6:	42 e0       	ldi	r20, 0x02	; 2
   12af8:	50 e0       	ldi	r21, 0x00	; 0
   12afa:	ac a9       	ldd	r26, Y+52	; 0x34
   12afc:	bd a9       	ldd	r27, Y+53	; 0x35
   12afe:	2c 91       	ld	r18, X
   12b00:	3d ad       	ldd	r19, Y+61	; 0x3d
   12b02:	23 23       	and	r18, r19
   12b04:	2c 93       	st	X, r18
   12b06:	20 b1       	in	r18, 0x00	; 0
   12b08:	ac a9       	ldd	r26, Y+52	; 0x34
   12b0a:	bd a9       	ldd	r27, Y+53	; 0x35
   12b0c:	2c 91       	ld	r18, X
   12b0e:	39 ad       	ldd	r19, Y+57	; 0x39
   12b10:	23 2b       	or	r18, r19
   12b12:	2c 93       	st	X, r18
   12b14:	ac a9       	ldd	r26, Y+52	; 0x34
   12b16:	bd a9       	ldd	r27, Y+53	; 0x35
   12b18:	2c 91       	ld	r18, X
   12b1a:	3d ad       	ldd	r19, Y+61	; 0x3d
   12b1c:	23 23       	and	r18, r19
   12b1e:	2c 93       	st	X, r18
   12b20:	20 b1       	in	r18, 0x00	; 0
   12b22:	ac a9       	ldd	r26, Y+52	; 0x34
   12b24:	bd a9       	ldd	r27, Y+53	; 0x35
   12b26:	2c 91       	ld	r18, X
   12b28:	39 ad       	ldd	r19, Y+57	; 0x39
   12b2a:	23 2b       	or	r18, r19
   12b2c:	2c 93       	st	X, r18
   12b2e:	ac a9       	ldd	r26, Y+52	; 0x34
   12b30:	bd a9       	ldd	r27, Y+53	; 0x35
   12b32:	2c 91       	ld	r18, X
   12b34:	3d ad       	ldd	r19, Y+61	; 0x3d
   12b36:	23 23       	and	r18, r19
   12b38:	2c 93       	st	X, r18
   12b3a:	20 b1       	in	r18, 0x00	; 0
   12b3c:	ac a9       	ldd	r26, Y+52	; 0x34
   12b3e:	bd a9       	ldd	r27, Y+53	; 0x35
   12b40:	3c 91       	ld	r19, X
   12b42:	69 ad       	ldd	r22, Y+57	; 0x39
   12b44:	36 2b       	or	r19, r22
   12b46:	3c 93       	st	X, r19
   12b48:	ac a9       	ldd	r26, Y+52	; 0x34
   12b4a:	bd a9       	ldd	r27, Y+53	; 0x35
   12b4c:	3c 91       	ld	r19, X
   12b4e:	6d ad       	ldd	r22, Y+61	; 0x3d
   12b50:	36 23       	and	r19, r22
   12b52:	3c 93       	st	X, r19
   12b54:	60 b1       	in	r22, 0x00	; 0
   12b56:	ac a9       	ldd	r26, Y+52	; 0x34
   12b58:	bd a9       	ldd	r27, Y+53	; 0x35
   12b5a:	3c 91       	ld	r19, X
   12b5c:	79 ad       	ldd	r23, Y+57	; 0x39
   12b5e:	37 2b       	or	r19, r23
   12b60:	3c 93       	st	X, r19
   12b62:	41 30       	cpi	r20, 0x01	; 1
   12b64:	51 05       	cpc	r21, r1
   12b66:	49 f5       	brne	.+82     	; 0x12bba <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
   12b68:	32 2f       	mov	r19, r18
   12b6a:	26 2f       	mov	r18, r22
   12b6c:	21 93       	st	Z+, r18
   12b6e:	31 93       	st	Z+, r19
   12b70:	01 97       	sbiw	r24, 0x01	; 1
   12b72:	09 f0       	breq	.+2      	; 0x12b76 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
   12b74:	c0 cf       	rjmp	.-128    	; 0x12af6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
   12b76:	cc 0c       	add	r12, r12
   12b78:	dd 1c       	adc	r13, r13
   12b7a:	ac 0c       	add	r10, r12
   12b7c:	bd 1c       	adc	r11, r13
   12b7e:	0c 89       	ldd	r16, Y+20	; 0x14
   12b80:	1d 89       	ldd	r17, Y+21	; 0x15
   12b82:	01 50       	subi	r16, 0x01	; 1
   12b84:	11 09       	sbc	r17, r1
   12b86:	2a 89       	ldd	r18, Y+18	; 0x12
   12b88:	3b 89       	ldd	r19, Y+19	; 0x13
   12b8a:	21 50       	subi	r18, 0x01	; 1
   12b8c:	31 09       	sbc	r19, r1
   12b8e:	e8 81       	ld	r30, Y
   12b90:	f9 81       	ldd	r31, Y+1	; 0x01
   12b92:	06 80       	ldd	r0, Z+6	; 0x06
   12b94:	f7 81       	ldd	r31, Z+7	; 0x07
   12b96:	e0 2d       	mov	r30, r0
   12b98:	50 e0       	ldi	r21, 0x00	; 0
   12b9a:	40 e0       	ldi	r20, 0x00	; 0
   12b9c:	70 e0       	ldi	r23, 0x00	; 0
   12b9e:	60 e0       	ldi	r22, 0x00	; 0
   12ba0:	ce 01       	movw	r24, r28
   12ba2:	19 95       	eicall
   12ba4:	ee a5       	ldd	r30, Y+46	; 0x2e
   12ba6:	ff a5       	ldd	r31, Y+47	; 0x2f
   12ba8:	80 81       	ld	r24, Z
   12baa:	9e a9       	ldd	r25, Y+54	; 0x36
   12bac:	89 2b       	or	r24, r25
   12bae:	80 83       	st	Z, r24
   12bb0:	81 b1       	in	r24, 0x01	; 1
   12bb2:	71 b8       	out	0x01, r7	; 1
   12bb4:	d1 2c       	mov	r13, r1
   12bb6:	c1 2c       	mov	r12, r1
   12bb8:	63 cf       	rjmp	.-314    	; 0x12a80 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
   12bba:	41 e0       	ldi	r20, 0x01	; 1
   12bbc:	50 e0       	ldi	r21, 0x00	; 0
   12bbe:	9d cf       	rjmp	.-198    	; 0x12afa <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
   12bc0:	ec a9       	ldd	r30, Y+52	; 0x34
   12bc2:	fd a9       	ldd	r31, Y+53	; 0x35
   12bc4:	80 81       	ld	r24, Z
   12bc6:	9d ad       	ldd	r25, Y+61	; 0x3d
   12bc8:	89 23       	and	r24, r25
   12bca:	80 83       	st	Z, r24
   12bcc:	80 b1       	in	r24, 0x00	; 0
   12bce:	ec a9       	ldd	r30, Y+52	; 0x34
   12bd0:	fd a9       	ldd	r31, Y+53	; 0x35
   12bd2:	80 81       	ld	r24, Z
   12bd4:	99 ad       	ldd	r25, Y+57	; 0x39
   12bd6:	89 2b       	or	r24, r25
   12bd8:	80 83       	st	Z, r24
   12bda:	75 01       	movw	r14, r10
   12bdc:	86 01       	movw	r16, r12
   12bde:	8c a5       	ldd	r24, Y+44	; 0x2c
   12be0:	9d a5       	ldd	r25, Y+45	; 0x2d
   12be2:	81 30       	cpi	r24, 0x01	; 1
   12be4:	91 05       	cpc	r25, r1
   12be6:	d9 f5       	brne	.+118    	; 0x12c5e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
   12be8:	ec a9       	ldd	r30, Y+52	; 0x34
   12bea:	fd a9       	ldd	r31, Y+53	; 0x35
   12bec:	80 81       	ld	r24, Z
   12bee:	9d ad       	ldd	r25, Y+61	; 0x3d
   12bf0:	89 23       	and	r24, r25
   12bf2:	80 83       	st	Z, r24
   12bf4:	60 b1       	in	r22, 0x00	; 0
   12bf6:	ec a9       	ldd	r30, Y+52	; 0x34
   12bf8:	fd a9       	ldd	r31, Y+53	; 0x35
   12bfa:	80 81       	ld	r24, Z
   12bfc:	99 ad       	ldd	r25, Y+57	; 0x39
   12bfe:	89 2b       	or	r24, r25
   12c00:	80 83       	st	Z, r24
   12c02:	ec a9       	ldd	r30, Y+52	; 0x34
   12c04:	fd a9       	ldd	r31, Y+53	; 0x35
   12c06:	80 81       	ld	r24, Z
   12c08:	9d ad       	ldd	r25, Y+61	; 0x3d
   12c0a:	89 23       	and	r24, r25
   12c0c:	80 83       	st	Z, r24
   12c0e:	40 b1       	in	r20, 0x00	; 0
   12c10:	ec a9       	ldd	r30, Y+52	; 0x34
   12c12:	fd a9       	ldd	r31, Y+53	; 0x35
   12c14:	80 81       	ld	r24, Z
   12c16:	99 ad       	ldd	r25, Y+57	; 0x39
   12c18:	89 2b       	or	r24, r25
   12c1a:	80 83       	st	Z, r24
   12c1c:	ec a9       	ldd	r30, Y+52	; 0x34
   12c1e:	fd a9       	ldd	r31, Y+53	; 0x35
   12c20:	80 81       	ld	r24, Z
   12c22:	9d ad       	ldd	r25, Y+61	; 0x3d
   12c24:	89 23       	and	r24, r25
   12c26:	80 83       	st	Z, r24
   12c28:	20 b1       	in	r18, 0x00	; 0
   12c2a:	ec a9       	ldd	r30, Y+52	; 0x34
   12c2c:	fd a9       	ldd	r31, Y+53	; 0x35
   12c2e:	80 81       	ld	r24, Z
   12c30:	99 ad       	ldd	r25, Y+57	; 0x39
   12c32:	89 2b       	or	r24, r25
   12c34:	80 83       	st	Z, r24
   12c36:	e8 81       	ld	r30, Y
   12c38:	f9 81       	ldd	r31, Y+1	; 0x01
   12c3a:	01 90       	ld	r0, Z+
   12c3c:	f0 81       	ld	r31, Z
   12c3e:	e0 2d       	mov	r30, r0
   12c40:	ce 01       	movw	r24, r28
   12c42:	19 95       	eicall
   12c44:	4c 01       	movw	r8, r24
   12c46:	f7 01       	movw	r30, r14
   12c48:	81 92       	st	Z+, r8
   12c4a:	91 92       	st	Z+, r9
   12c4c:	7f 01       	movw	r14, r30
   12c4e:	01 50       	subi	r16, 0x01	; 1
   12c50:	11 09       	sbc	r17, r1
   12c52:	29 f6       	brne	.-118    	; 0x12bde <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
   12c54:	cc 0c       	add	r12, r12
   12c56:	dd 1c       	adc	r13, r13
   12c58:	ac 0c       	add	r10, r12
   12c5a:	bd 1c       	adc	r11, r13
   12c5c:	a3 cf       	rjmp	.-186    	; 0x12ba4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
   12c5e:	89 2b       	or	r24, r25
   12c60:	91 f7       	brne	.-28     	; 0x12c46 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   12c62:	ec a9       	ldd	r30, Y+52	; 0x34
   12c64:	fd a9       	ldd	r31, Y+53	; 0x35
   12c66:	80 81       	ld	r24, Z
   12c68:	9d ad       	ldd	r25, Y+61	; 0x3d
   12c6a:	89 23       	and	r24, r25
   12c6c:	80 83       	st	Z, r24
   12c6e:	80 b0       	in	r8, 0x00	; 0
   12c70:	ec a9       	ldd	r30, Y+52	; 0x34
   12c72:	fd a9       	ldd	r31, Y+53	; 0x35
   12c74:	80 81       	ld	r24, Z
   12c76:	99 ad       	ldd	r25, Y+57	; 0x39
   12c78:	89 2b       	or	r24, r25
   12c7a:	80 83       	st	Z, r24
   12c7c:	ec a9       	ldd	r30, Y+52	; 0x34
   12c7e:	fd a9       	ldd	r31, Y+53	; 0x35
   12c80:	80 81       	ld	r24, Z
   12c82:	9d ad       	ldd	r25, Y+61	; 0x3d
   12c84:	89 23       	and	r24, r25
   12c86:	80 83       	st	Z, r24
   12c88:	90 b1       	in	r25, 0x00	; 0
   12c8a:	ec a9       	ldd	r30, Y+52	; 0x34
   12c8c:	fd a9       	ldd	r31, Y+53	; 0x35
   12c8e:	80 81       	ld	r24, Z
   12c90:	29 ad       	ldd	r18, Y+57	; 0x39
   12c92:	82 2b       	or	r24, r18
   12c94:	80 83       	st	Z, r24
   12c96:	98 2c       	mov	r9, r8
   12c98:	89 2e       	mov	r8, r25
   12c9a:	d5 cf       	rjmp	.-86     	; 0x12c46 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
   12c9c:	90 e0       	ldi	r25, 0x00	; 0
   12c9e:	80 e0       	ldi	r24, 0x00	; 0
   12ca0:	df 91       	pop	r29
   12ca2:	cf 91       	pop	r28
   12ca4:	1f 91       	pop	r17
   12ca6:	0f 91       	pop	r16
   12ca8:	ff 90       	pop	r15
   12caa:	ef 90       	pop	r14
   12cac:	df 90       	pop	r13
   12cae:	cf 90       	pop	r12
   12cb0:	bf 90       	pop	r11
   12cb2:	af 90       	pop	r10
   12cb4:	9f 90       	pop	r9
   12cb6:	8f 90       	pop	r8
   12cb8:	7f 90       	pop	r7
   12cba:	08 95       	ret

00012cbc <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
   12cbc:	fc 01       	movw	r30, r24
   12cbe:	82 89       	ldd	r24, Z+18	; 0x12
   12cc0:	93 89       	ldd	r25, Z+19	; 0x13
   12cc2:	08 95       	ret

00012cc4 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
   12cc4:	fc 01       	movw	r30, r24
   12cc6:	84 89       	ldd	r24, Z+20	; 0x14
   12cc8:	95 89       	ldd	r25, Z+21	; 0x15
   12cca:	08 95       	ret

00012ccc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
   12ccc:	af 92       	push	r10
   12cce:	bf 92       	push	r11
   12cd0:	cf 92       	push	r12
   12cd2:	df 92       	push	r13
   12cd4:	ef 92       	push	r14
   12cd6:	ff 92       	push	r15
   12cd8:	0f 93       	push	r16
   12cda:	1f 93       	push	r17
   12cdc:	cf 93       	push	r28
   12cde:	df 93       	push	r29
   12ce0:	77 fd       	sbrc	r23, 7
   12ce2:	75 c0       	rjmp	.+234    	; 0x12dce <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12ce4:	57 fd       	sbrc	r21, 7
   12ce6:	73 c0       	rjmp	.+230    	; 0x12dce <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12ce8:	c3 2e       	mov	r12, r19
   12cea:	d2 2e       	mov	r13, r18
   12cec:	5a 01       	movw	r10, r20
   12cee:	7b 01       	movw	r14, r22
   12cf0:	ec 01       	movw	r28, r24
   12cf2:	e8 81       	ld	r30, Y
   12cf4:	f9 81       	ldd	r31, Y+1	; 0x01
   12cf6:	06 84       	ldd	r0, Z+14	; 0x0e
   12cf8:	f7 85       	ldd	r31, Z+15	; 0x0f
   12cfa:	e0 2d       	mov	r30, r0
   12cfc:	19 95       	eicall
   12cfe:	8e 15       	cp	r24, r14
   12d00:	9f 05       	cpc	r25, r15
   12d02:	0c f4       	brge	.+2      	; 0x12d06 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
   12d04:	64 c0       	rjmp	.+200    	; 0x12dce <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12d06:	e8 81       	ld	r30, Y
   12d08:	f9 81       	ldd	r31, Y+1	; 0x01
   12d0a:	04 84       	ldd	r0, Z+12	; 0x0c
   12d0c:	f5 85       	ldd	r31, Z+13	; 0x0d
   12d0e:	e0 2d       	mov	r30, r0
   12d10:	ce 01       	movw	r24, r28
   12d12:	19 95       	eicall
   12d14:	8a 15       	cp	r24, r10
   12d16:	9b 05       	cpc	r25, r11
   12d18:	0c f4       	brge	.+2      	; 0x12d1c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
   12d1a:	59 c0       	rjmp	.+178    	; 0x12dce <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
   12d1c:	e8 81       	ld	r30, Y
   12d1e:	f9 81       	ldd	r31, Y+1	; 0x01
   12d20:	06 80       	ldd	r0, Z+6	; 0x06
   12d22:	f7 81       	ldd	r31, Z+7	; 0x07
   12d24:	e0 2d       	mov	r30, r0
   12d26:	85 01       	movw	r16, r10
   12d28:	97 01       	movw	r18, r14
   12d2a:	a5 01       	movw	r20, r10
   12d2c:	b7 01       	movw	r22, r14
   12d2e:	ce 01       	movw	r24, r28
   12d30:	19 95       	eicall
   12d32:	ee a5       	ldd	r30, Y+46	; 0x2e
   12d34:	ff a5       	ldd	r31, Y+47	; 0x2f
   12d36:	80 81       	ld	r24, Z
   12d38:	9a ad       	ldd	r25, Y+58	; 0x3a
   12d3a:	89 23       	and	r24, r25
   12d3c:	80 83       	st	Z, r24
   12d3e:	98 a1       	ldd	r25, Y+32	; 0x20
   12d40:	29 a1       	ldd	r18, Y+33	; 0x21
   12d42:	e8 a9       	ldd	r30, Y+48	; 0x30
   12d44:	f9 a9       	ldd	r31, Y+49	; 0x31
   12d46:	80 81       	ld	r24, Z
   12d48:	3b ad       	ldd	r19, Y+59	; 0x3b
   12d4a:	83 23       	and	r24, r19
   12d4c:	80 83       	st	Z, r24
   12d4e:	22 b9       	out	0x02, r18	; 2
   12d50:	ea a9       	ldd	r30, Y+50	; 0x32
   12d52:	fb a9       	ldd	r31, Y+51	; 0x33
   12d54:	80 81       	ld	r24, Z
   12d56:	2c ad       	ldd	r18, Y+60	; 0x3c
   12d58:	82 23       	and	r24, r18
   12d5a:	80 83       	st	Z, r24
   12d5c:	ea a9       	ldd	r30, Y+50	; 0x32
   12d5e:	fb a9       	ldd	r31, Y+51	; 0x33
   12d60:	80 81       	ld	r24, Z
   12d62:	28 ad       	ldd	r18, Y+56	; 0x38
   12d64:	82 2b       	or	r24, r18
   12d66:	80 83       	st	Z, r24
   12d68:	92 b9       	out	0x02, r25	; 2
   12d6a:	ea a9       	ldd	r30, Y+50	; 0x32
   12d6c:	fb a9       	ldd	r31, Y+51	; 0x33
   12d6e:	80 81       	ld	r24, Z
   12d70:	9c ad       	ldd	r25, Y+60	; 0x3c
   12d72:	89 23       	and	r24, r25
   12d74:	80 83       	st	Z, r24
   12d76:	ea a9       	ldd	r30, Y+50	; 0x32
   12d78:	fb a9       	ldd	r31, Y+51	; 0x33
   12d7a:	80 81       	ld	r24, Z
   12d7c:	98 ad       	ldd	r25, Y+56	; 0x38
   12d7e:	89 2b       	or	r24, r25
   12d80:	80 83       	st	Z, r24
   12d82:	e8 a9       	ldd	r30, Y+48	; 0x30
   12d84:	f9 a9       	ldd	r31, Y+49	; 0x31
   12d86:	80 81       	ld	r24, Z
   12d88:	9f a9       	ldd	r25, Y+55	; 0x37
   12d8a:	89 2b       	or	r24, r25
   12d8c:	80 83       	st	Z, r24
   12d8e:	c2 b8       	out	0x02, r12	; 2
   12d90:	ea a9       	ldd	r30, Y+50	; 0x32
   12d92:	fb a9       	ldd	r31, Y+51	; 0x33
   12d94:	80 81       	ld	r24, Z
   12d96:	9c ad       	ldd	r25, Y+60	; 0x3c
   12d98:	89 23       	and	r24, r25
   12d9a:	80 83       	st	Z, r24
   12d9c:	ea a9       	ldd	r30, Y+50	; 0x32
   12d9e:	fb a9       	ldd	r31, Y+51	; 0x33
   12da0:	80 81       	ld	r24, Z
   12da2:	98 ad       	ldd	r25, Y+56	; 0x38
   12da4:	89 2b       	or	r24, r25
   12da6:	80 83       	st	Z, r24
   12da8:	d2 b8       	out	0x02, r13	; 2
   12daa:	ea a9       	ldd	r30, Y+50	; 0x32
   12dac:	fb a9       	ldd	r31, Y+51	; 0x33
   12dae:	80 81       	ld	r24, Z
   12db0:	9c ad       	ldd	r25, Y+60	; 0x3c
   12db2:	89 23       	and	r24, r25
   12db4:	80 83       	st	Z, r24
   12db6:	ea a9       	ldd	r30, Y+50	; 0x32
   12db8:	fb a9       	ldd	r31, Y+51	; 0x33
   12dba:	80 81       	ld	r24, Z
   12dbc:	98 ad       	ldd	r25, Y+56	; 0x38
   12dbe:	89 2b       	or	r24, r25
   12dc0:	80 83       	st	Z, r24
   12dc2:	ee a5       	ldd	r30, Y+46	; 0x2e
   12dc4:	ff a5       	ldd	r31, Y+47	; 0x2f
   12dc6:	80 81       	ld	r24, Z
   12dc8:	9e a9       	ldd	r25, Y+54	; 0x36
   12dca:	89 2b       	or	r24, r25
   12dcc:	80 83       	st	Z, r24
   12dce:	df 91       	pop	r29
   12dd0:	cf 91       	pop	r28
   12dd2:	1f 91       	pop	r17
   12dd4:	0f 91       	pop	r16
   12dd6:	ff 90       	pop	r15
   12dd8:	ef 90       	pop	r14
   12dda:	df 90       	pop	r13
   12ddc:	cf 90       	pop	r12
   12dde:	bf 90       	pop	r11
   12de0:	af 90       	pop	r10
   12de2:	08 95       	ret

00012de4 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBVC2Ejhhhhh():
   12de4:	9f 92       	push	r9
   12de6:	af 92       	push	r10
   12de8:	bf 92       	push	r11
   12dea:	cf 92       	push	r12
   12dec:	df 92       	push	r13
   12dee:	ef 92       	push	r14
   12df0:	ff 92       	push	r15
   12df2:	0f 93       	push	r16
   12df4:	1f 93       	push	r17
   12df6:	cf 93       	push	r28
   12df8:	df 93       	push	r29
   12dfa:	ec 01       	movw	r28, r24
   12dfc:	5b 01       	movw	r10, r22
   12dfe:	14 2f       	mov	r17, r20
   12e00:	d2 2e       	mov	r13, r18
   12e02:	9e 2c       	mov	r9, r14
   12e04:	0e 94 c4 91 	call	0x12388	; 0x12388 <LCDWIKI_GUI::LCDWIKI_GUI()>
   12e08:	8b e4       	ldi	r24, 0x4B	; 75
   12e0a:	98 e0       	ldi	r25, 0x08	; 8
   12e0c:	99 83       	std	Y+1, r25	; 0x01
   12e0e:	88 83       	st	Y, r24
   12e10:	ce ae       	std	Y+62, r12	; 0x3e
   12e12:	61 2f       	mov	r22, r17
   12e14:	70 e0       	ldi	r23, 0x00	; 0
   12e16:	fb 01       	movw	r30, r22
   12e18:	e6 50       	subi	r30, 0x06	; 6
   12e1a:	fe 49       	sbci	r31, 0x9E	; 158
   12e1c:	e4 91       	lpm	r30, Z
   12e1e:	f0 e0       	ldi	r31, 0x00	; 0
   12e20:	ee 0f       	add	r30, r30
   12e22:	ff 1f       	adc	r31, r31
   12e24:	e0 5c       	subi	r30, 0xC0	; 192
   12e26:	fd 49       	sbci	r31, 0x9D	; 157
   12e28:	a5 91       	lpm	r26, Z+
   12e2a:	b4 91       	lpm	r27, Z
   12e2c:	bf a7       	std	Y+47, r27	; 0x2f
   12e2e:	ae a7       	std	Y+46, r26	; 0x2e
   12e30:	4d 2d       	mov	r20, r13
   12e32:	50 e0       	ldi	r21, 0x00	; 0
   12e34:	fa 01       	movw	r30, r20
   12e36:	e6 50       	subi	r30, 0x06	; 6
   12e38:	fe 49       	sbci	r31, 0x9E	; 158
   12e3a:	e4 91       	lpm	r30, Z
   12e3c:	f0 e0       	ldi	r31, 0x00	; 0
   12e3e:	ee 0f       	add	r30, r30
   12e40:	ff 1f       	adc	r31, r31
   12e42:	e0 5c       	subi	r30, 0xC0	; 192
   12e44:	fd 49       	sbci	r31, 0x9D	; 157
   12e46:	85 91       	lpm	r24, Z+
   12e48:	94 91       	lpm	r25, Z
   12e4a:	99 ab       	std	Y+49, r25	; 0x31
   12e4c:	88 ab       	std	Y+48, r24	; 0x30
   12e4e:	20 2f       	mov	r18, r16
   12e50:	30 e0       	ldi	r19, 0x00	; 0
   12e52:	f9 01       	movw	r30, r18
   12e54:	e6 50       	subi	r30, 0x06	; 6
   12e56:	fe 49       	sbci	r31, 0x9E	; 158
   12e58:	e4 91       	lpm	r30, Z
   12e5a:	f0 e0       	ldi	r31, 0x00	; 0
   12e5c:	ee 0f       	add	r30, r30
   12e5e:	ff 1f       	adc	r31, r31
   12e60:	e0 5c       	subi	r30, 0xC0	; 192
   12e62:	fd 49       	sbci	r31, 0x9D	; 157
   12e64:	85 91       	lpm	r24, Z+
   12e66:	94 91       	lpm	r25, Z
   12e68:	9b ab       	std	Y+51, r25	; 0x33
   12e6a:	8a ab       	std	Y+50, r24	; 0x32
   12e6c:	8e 2d       	mov	r24, r14
   12e6e:	90 e0       	ldi	r25, 0x00	; 0
   12e70:	fc 01       	movw	r30, r24
   12e72:	e6 50       	subi	r30, 0x06	; 6
   12e74:	fe 49       	sbci	r31, 0x9E	; 158
   12e76:	e4 91       	lpm	r30, Z
   12e78:	f0 e0       	ldi	r31, 0x00	; 0
   12e7a:	ee 0f       	add	r30, r30
   12e7c:	ff 1f       	adc	r31, r31
   12e7e:	e0 5c       	subi	r30, 0xC0	; 192
   12e80:	fd 49       	sbci	r31, 0x9D	; 157
   12e82:	e5 90       	lpm	r14, Z+
   12e84:	f4 90       	lpm	r15, Z
   12e86:	fd aa       	std	Y+53, r15	; 0x35
   12e88:	ec aa       	std	Y+52, r14	; 0x34
   12e8a:	6c 53       	subi	r22, 0x3C	; 60
   12e8c:	7e 49       	sbci	r23, 0x9E	; 158
   12e8e:	fb 01       	movw	r30, r22
   12e90:	64 91       	lpm	r22, Z
   12e92:	6e ab       	std	Y+54, r22	; 0x36
   12e94:	4c 53       	subi	r20, 0x3C	; 60
   12e96:	5e 49       	sbci	r21, 0x9E	; 158
   12e98:	fa 01       	movw	r30, r20
   12e9a:	44 91       	lpm	r20, Z
   12e9c:	4f ab       	std	Y+55, r20	; 0x37
   12e9e:	2c 53       	subi	r18, 0x3C	; 60
   12ea0:	3e 49       	sbci	r19, 0x9E	; 158
   12ea2:	f9 01       	movw	r30, r18
   12ea4:	24 91       	lpm	r18, Z
   12ea6:	28 af       	std	Y+56, r18	; 0x38
   12ea8:	8c 53       	subi	r24, 0x3C	; 60
   12eaa:	9e 49       	sbci	r25, 0x9E	; 158
   12eac:	fc 01       	movw	r30, r24
   12eae:	84 91       	lpm	r24, Z
   12eb0:	89 af       	std	Y+57, r24	; 0x39
   12eb2:	96 2f       	mov	r25, r22
   12eb4:	90 95       	com	r25
   12eb6:	9a af       	std	Y+58, r25	; 0x3a
   12eb8:	e4 2f       	mov	r30, r20
   12eba:	e0 95       	com	r30
   12ebc:	eb af       	std	Y+59, r30	; 0x3b
   12ebe:	20 95       	com	r18
   12ec0:	2c af       	std	Y+60, r18	; 0x3c
   12ec2:	80 95       	com	r24
   12ec4:	8d af       	std	Y+61, r24	; 0x3d
   12ec6:	ec 91       	ld	r30, X
   12ec8:	6e 2b       	or	r22, r30
   12eca:	6c 93       	st	X, r22
   12ecc:	e8 a9       	ldd	r30, Y+48	; 0x30
   12ece:	f9 a9       	ldd	r31, Y+49	; 0x31
   12ed0:	80 81       	ld	r24, Z
   12ed2:	9f a9       	ldd	r25, Y+55	; 0x37
   12ed4:	89 2b       	or	r24, r25
   12ed6:	80 83       	st	Z, r24
   12ed8:	ea a9       	ldd	r30, Y+50	; 0x32
   12eda:	fb a9       	ldd	r31, Y+51	; 0x33
   12edc:	80 81       	ld	r24, Z
   12ede:	98 ad       	ldd	r25, Y+56	; 0x38
   12ee0:	89 2b       	or	r24, r25
   12ee2:	80 83       	st	Z, r24
   12ee4:	ec a9       	ldd	r30, Y+52	; 0x34
   12ee6:	fd a9       	ldd	r31, Y+53	; 0x35
   12ee8:	80 81       	ld	r24, Z
   12eea:	99 ad       	ldd	r25, Y+57	; 0x39
   12eec:	89 2b       	or	r24, r25
   12eee:	80 83       	st	Z, r24
   12ef0:	61 e0       	ldi	r22, 0x01	; 1
   12ef2:	81 2f       	mov	r24, r17
   12ef4:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   12ef8:	61 e0       	ldi	r22, 0x01	; 1
   12efa:	8d 2d       	mov	r24, r13
   12efc:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   12f00:	61 e0       	ldi	r22, 0x01	; 1
   12f02:	80 2f       	mov	r24, r16
   12f04:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   12f08:	61 e0       	ldi	r22, 0x01	; 1
   12f0a:	89 2d       	mov	r24, r9
   12f0c:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   12f10:	cc 20       	and	r12, r12
   12f12:	41 f0       	breq	.+16     	; 0x12f24 <LCDWIKI_KBV::LCDWIKI_KBV(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x140>
   12f14:	61 e0       	ldi	r22, 0x01	; 1
   12f16:	8c 2d       	mov	r24, r12
   12f18:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   12f1c:	61 e0       	ldi	r22, 0x01	; 1
   12f1e:	8c 2d       	mov	r24, r12
   12f20:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   12f24:	1f 8a       	std	Y+23, r1	; 0x17
   12f26:	1e 8a       	std	Y+22, r1	; 0x16
   12f28:	86 e0       	ldi	r24, 0x06	; 6
   12f2a:	8a 9d       	mul	r24, r10
   12f2c:	f0 01       	movw	r30, r0
   12f2e:	8b 9d       	mul	r24, r11
   12f30:	f0 0d       	add	r31, r0
   12f32:	11 24       	eor	r1, r1
   12f34:	e6 5c       	subi	r30, 0xC6	; 198
   12f36:	fd 4f       	sbci	r31, 0xFD	; 253
   12f38:	80 81       	ld	r24, Z
   12f3a:	91 81       	ldd	r25, Z+1	; 0x01
   12f3c:	9b 8f       	std	Y+27, r25	; 0x1b
   12f3e:	8a 8f       	std	Y+26, r24	; 0x1a
   12f40:	82 81       	ldd	r24, Z+2	; 0x02
   12f42:	93 81       	ldd	r25, Z+3	; 0x03
   12f44:	9f 87       	std	Y+15, r25	; 0x0f
   12f46:	8e 87       	std	Y+14, r24	; 0x0e
   12f48:	84 81       	ldd	r24, Z+4	; 0x04
   12f4a:	95 81       	ldd	r25, Z+5	; 0x05
   12f4c:	99 8b       	std	Y+17, r25	; 0x11
   12f4e:	88 8b       	std	Y+16, r24	; 0x10
   12f50:	81 b1       	in	r24, 0x01	; 1
   12f52:	8f ef       	ldi	r24, 0xFF	; 255
   12f54:	81 b9       	out	0x01, r24	; 1
   12f56:	8e 85       	ldd	r24, Y+14	; 0x0e
   12f58:	9f 85       	ldd	r25, Y+15	; 0x0f
   12f5a:	9b 8b       	std	Y+19, r25	; 0x13
   12f5c:	8a 8b       	std	Y+18, r24	; 0x12
   12f5e:	88 89       	ldd	r24, Y+16	; 0x10
   12f60:	99 89       	ldd	r25, Y+17	; 0x11
   12f62:	9d 8b       	std	Y+21, r25	; 0x15
   12f64:	8c 8b       	std	Y+20, r24	; 0x14
   12f66:	df 91       	pop	r29
   12f68:	cf 91       	pop	r28
   12f6a:	1f 91       	pop	r17
   12f6c:	0f 91       	pop	r16
   12f6e:	ff 90       	pop	r15
   12f70:	ef 90       	pop	r14
   12f72:	df 90       	pop	r13
   12f74:	cf 90       	pop	r12
   12f76:	bf 90       	pop	r11
   12f78:	af 90       	pop	r10
   12f7a:	9f 90       	pop	r9
   12f7c:	08 95       	ret

00012f7e <LCDWIKI_KBV::reset()>:
_ZN11LCDWIKI_KBV5resetEv():
   12f7e:	cf 93       	push	r28
   12f80:	df 93       	push	r29
   12f82:	ec 01       	movw	r28, r24
   12f84:	ee a5       	ldd	r30, Y+46	; 0x2e
   12f86:	ff a5       	ldd	r31, Y+47	; 0x2f
   12f88:	80 81       	ld	r24, Z
   12f8a:	9e a9       	ldd	r25, Y+54	; 0x36
   12f8c:	89 2b       	or	r24, r25
   12f8e:	80 83       	st	Z, r24
   12f90:	ec a9       	ldd	r30, Y+52	; 0x34
   12f92:	fd a9       	ldd	r31, Y+53	; 0x35
   12f94:	80 81       	ld	r24, Z
   12f96:	99 ad       	ldd	r25, Y+57	; 0x39
   12f98:	89 2b       	or	r24, r25
   12f9a:	80 83       	st	Z, r24
   12f9c:	ea a9       	ldd	r30, Y+50	; 0x32
   12f9e:	fb a9       	ldd	r31, Y+51	; 0x33
   12fa0:	80 81       	ld	r24, Z
   12fa2:	98 ad       	ldd	r25, Y+56	; 0x38
   12fa4:	89 2b       	or	r24, r25
   12fa6:	80 83       	st	Z, r24
   12fa8:	8e ad       	ldd	r24, Y+62	; 0x3e
   12faa:	88 23       	and	r24, r24
   12fac:	69 f0       	breq	.+26     	; 0x12fc8 <LCDWIKI_KBV::reset()+0x4a>
   12fae:	60 e0       	ldi	r22, 0x00	; 0
   12fb0:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   12fb4:	62 e0       	ldi	r22, 0x02	; 2
   12fb6:	70 e0       	ldi	r23, 0x00	; 0
   12fb8:	80 e0       	ldi	r24, 0x00	; 0
   12fba:	90 e0       	ldi	r25, 0x00	; 0
   12fbc:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
   12fc0:	61 e0       	ldi	r22, 0x01	; 1
   12fc2:	8e ad       	ldd	r24, Y+62	; 0x3e
   12fc4:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   12fc8:	ee a5       	ldd	r30, Y+46	; 0x2e
   12fca:	ff a5       	ldd	r31, Y+47	; 0x2f
   12fcc:	80 81       	ld	r24, Z
   12fce:	9a ad       	ldd	r25, Y+58	; 0x3a
   12fd0:	89 23       	and	r24, r25
   12fd2:	80 83       	st	Z, r24
   12fd4:	e8 a9       	ldd	r30, Y+48	; 0x30
   12fd6:	f9 a9       	ldd	r31, Y+49	; 0x31
   12fd8:	80 81       	ld	r24, Z
   12fda:	9b ad       	ldd	r25, Y+59	; 0x3b
   12fdc:	89 23       	and	r24, r25
   12fde:	80 83       	st	Z, r24
   12fe0:	12 b8       	out	0x02, r1	; 2
   12fe2:	ea a9       	ldd	r30, Y+50	; 0x32
   12fe4:	fb a9       	ldd	r31, Y+51	; 0x33
   12fe6:	80 81       	ld	r24, Z
   12fe8:	9c ad       	ldd	r25, Y+60	; 0x3c
   12fea:	89 23       	and	r24, r25
   12fec:	80 83       	st	Z, r24
   12fee:	ea a9       	ldd	r30, Y+50	; 0x32
   12ff0:	fb a9       	ldd	r31, Y+51	; 0x33
   12ff2:	80 81       	ld	r24, Z
   12ff4:	98 ad       	ldd	r25, Y+56	; 0x38
   12ff6:	89 2b       	or	r24, r25
   12ff8:	80 83       	st	Z, r24
   12ffa:	83 e0       	ldi	r24, 0x03	; 3
   12ffc:	ea a9       	ldd	r30, Y+50	; 0x32
   12ffe:	fb a9       	ldd	r31, Y+51	; 0x33
   13000:	90 81       	ld	r25, Z
   13002:	2c ad       	ldd	r18, Y+60	; 0x3c
   13004:	92 23       	and	r25, r18
   13006:	90 83       	st	Z, r25
   13008:	ea a9       	ldd	r30, Y+50	; 0x32
   1300a:	fb a9       	ldd	r31, Y+51	; 0x33
   1300c:	90 81       	ld	r25, Z
   1300e:	28 ad       	ldd	r18, Y+56	; 0x38
   13010:	92 2b       	or	r25, r18
   13012:	90 83       	st	Z, r25
   13014:	81 50       	subi	r24, 0x01	; 1
   13016:	91 f7       	brne	.-28     	; 0x12ffc <LCDWIKI_KBV::reset()+0x7e>
   13018:	ee a5       	ldd	r30, Y+46	; 0x2e
   1301a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1301c:	80 81       	ld	r24, Z
   1301e:	9e a9       	ldd	r25, Y+54	; 0x36
   13020:	89 2b       	or	r24, r25
   13022:	80 83       	st	Z, r24
   13024:	df 91       	pop	r29
   13026:	cf 91       	pop	r28
   13028:	08 95       	ret

0001302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
   1302a:	cf 93       	push	r28
   1302c:	df 93       	push	r29
   1302e:	fc 01       	movw	r30, r24
   13030:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13032:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13034:	8c 91       	ld	r24, X
   13036:	92 ad       	ldd	r25, Z+58	; 0x3a
   13038:	89 23       	and	r24, r25
   1303a:	8c 93       	st	X, r24
   1303c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1303e:	b1 a9       	ldd	r27, Z+49	; 0x31
   13040:	8c 91       	ld	r24, X
   13042:	93 ad       	ldd	r25, Z+59	; 0x3b
   13044:	89 23       	and	r24, r25
   13046:	8c 93       	st	X, r24
   13048:	72 b9       	out	0x02, r23	; 2
   1304a:	a2 a9       	ldd	r26, Z+50	; 0x32
   1304c:	b3 a9       	ldd	r27, Z+51	; 0x33
   1304e:	8c 91       	ld	r24, X
   13050:	94 ad       	ldd	r25, Z+60	; 0x3c
   13052:	89 23       	and	r24, r25
   13054:	8c 93       	st	X, r24
   13056:	a2 a9       	ldd	r26, Z+50	; 0x32
   13058:	b3 a9       	ldd	r27, Z+51	; 0x33
   1305a:	8c 91       	ld	r24, X
   1305c:	90 ad       	ldd	r25, Z+56	; 0x38
   1305e:	89 2b       	or	r24, r25
   13060:	8c 93       	st	X, r24
   13062:	62 b9       	out	0x02, r22	; 2
   13064:	a2 a9       	ldd	r26, Z+50	; 0x32
   13066:	b3 a9       	ldd	r27, Z+51	; 0x33
   13068:	8c 91       	ld	r24, X
   1306a:	94 ad       	ldd	r25, Z+60	; 0x3c
   1306c:	89 23       	and	r24, r25
   1306e:	8c 93       	st	X, r24
   13070:	a2 a9       	ldd	r26, Z+50	; 0x32
   13072:	b3 a9       	ldd	r27, Z+51	; 0x33
   13074:	8c 91       	ld	r24, X
   13076:	90 ad       	ldd	r25, Z+56	; 0x38
   13078:	89 2b       	or	r24, r25
   1307a:	8c 93       	st	X, r24
   1307c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1307e:	b1 a9       	ldd	r27, Z+49	; 0x31
   13080:	8c 91       	ld	r24, X
   13082:	97 a9       	ldd	r25, Z+55	; 0x37
   13084:	89 2b       	or	r24, r25
   13086:	8c 93       	st	X, r24
   13088:	da 01       	movw	r26, r20
   1308a:	9f ef       	ldi	r25, 0xFF	; 255
   1308c:	92 0f       	add	r25, r18
   1308e:	12 16       	cp	r1, r18
   13090:	0c f0       	brlt	.+2      	; 0x13094 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   13092:	3f c0       	rjmp	.+126    	; 0x13112 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
   13094:	8d 91       	ld	r24, X+
   13096:	82 b9       	out	0x02, r24	; 2
   13098:	c2 a9       	ldd	r28, Z+50	; 0x32
   1309a:	d3 a9       	ldd	r29, Z+51	; 0x33
   1309c:	88 81       	ld	r24, Y
   1309e:	24 ad       	ldd	r18, Z+60	; 0x3c
   130a0:	82 23       	and	r24, r18
   130a2:	88 83       	st	Y, r24
   130a4:	c2 a9       	ldd	r28, Z+50	; 0x32
   130a6:	d3 a9       	ldd	r29, Z+51	; 0x33
   130a8:	88 81       	ld	r24, Y
   130aa:	20 ad       	ldd	r18, Z+56	; 0x38
   130ac:	82 2b       	or	r24, r18
   130ae:	88 83       	st	Y, r24
   130b0:	99 23       	and	r25, r25
   130b2:	69 f1       	breq	.+90     	; 0x1310e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   130b4:	20 8d       	ldd	r18, Z+24	; 0x18
   130b6:	31 8d       	ldd	r19, Z+25	; 0x19
   130b8:	21 30       	cpi	r18, 0x01	; 1
   130ba:	31 05       	cpc	r19, r1
   130bc:	41 f5       	brne	.+80     	; 0x1310e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   130be:	6f 5f       	subi	r22, 0xFF	; 255
   130c0:	7f 4f       	sbci	r23, 0xFF	; 255
   130c2:	c0 a9       	ldd	r28, Z+48	; 0x30
   130c4:	d1 a9       	ldd	r29, Z+49	; 0x31
   130c6:	88 81       	ld	r24, Y
   130c8:	23 ad       	ldd	r18, Z+59	; 0x3b
   130ca:	82 23       	and	r24, r18
   130cc:	88 83       	st	Y, r24
   130ce:	72 b9       	out	0x02, r23	; 2
   130d0:	c2 a9       	ldd	r28, Z+50	; 0x32
   130d2:	d3 a9       	ldd	r29, Z+51	; 0x33
   130d4:	88 81       	ld	r24, Y
   130d6:	24 ad       	ldd	r18, Z+60	; 0x3c
   130d8:	82 23       	and	r24, r18
   130da:	88 83       	st	Y, r24
   130dc:	c2 a9       	ldd	r28, Z+50	; 0x32
   130de:	d3 a9       	ldd	r29, Z+51	; 0x33
   130e0:	88 81       	ld	r24, Y
   130e2:	20 ad       	ldd	r18, Z+56	; 0x38
   130e4:	82 2b       	or	r24, r18
   130e6:	88 83       	st	Y, r24
   130e8:	62 b9       	out	0x02, r22	; 2
   130ea:	c2 a9       	ldd	r28, Z+50	; 0x32
   130ec:	d3 a9       	ldd	r29, Z+51	; 0x33
   130ee:	88 81       	ld	r24, Y
   130f0:	24 ad       	ldd	r18, Z+60	; 0x3c
   130f2:	82 23       	and	r24, r18
   130f4:	88 83       	st	Y, r24
   130f6:	c2 a9       	ldd	r28, Z+50	; 0x32
   130f8:	d3 a9       	ldd	r29, Z+51	; 0x33
   130fa:	88 81       	ld	r24, Y
   130fc:	20 ad       	ldd	r18, Z+56	; 0x38
   130fe:	82 2b       	or	r24, r18
   13100:	88 83       	st	Y, r24
   13102:	c0 a9       	ldd	r28, Z+48	; 0x30
   13104:	d1 a9       	ldd	r29, Z+49	; 0x31
   13106:	88 81       	ld	r24, Y
   13108:	27 a9       	ldd	r18, Z+55	; 0x37
   1310a:	82 2b       	or	r24, r18
   1310c:	88 83       	st	Y, r24
   1310e:	29 2f       	mov	r18, r25
   13110:	bc cf       	rjmp	.-136    	; 0x1308a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
   13112:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13114:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13116:	8c 91       	ld	r24, X
   13118:	96 a9       	ldd	r25, Z+54	; 0x36
   1311a:	89 2b       	or	r24, r25
   1311c:	8c 93       	st	X, r24
   1311e:	df 91       	pop	r29
   13120:	cf 91       	pop	r28
   13122:	08 95       	ret

00013124 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
   13124:	af 92       	push	r10
   13126:	bf 92       	push	r11
   13128:	cf 92       	push	r12
   1312a:	df 92       	push	r13
   1312c:	ef 92       	push	r14
   1312e:	ff 92       	push	r15
   13130:	0f 93       	push	r16
   13132:	1f 93       	push	r17
   13134:	cf 93       	push	r28
   13136:	df 93       	push	r29
   13138:	00 d0       	rcall	.+0      	; 0x1313a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   1313a:	00 d0       	rcall	.+0      	; 0x1313c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   1313c:	1f 92       	push	r1
   1313e:	1f 92       	push	r1
   13140:	cd b7       	in	r28, 0x3d	; 61
   13142:	de b7       	in	r29, 0x3e	; 62
   13144:	7c 01       	movw	r14, r24
   13146:	dc 01       	movw	r26, r24
   13148:	9e 96       	adiw	r26, 0x2e	; 46
   1314a:	ed 91       	ld	r30, X+
   1314c:	fc 91       	ld	r31, X
   1314e:	9f 97       	sbiw	r26, 0x2f	; 47
   13150:	80 81       	ld	r24, Z
   13152:	da 96       	adiw	r26, 0x3a	; 58
   13154:	9c 91       	ld	r25, X
   13156:	da 97       	sbiw	r26, 0x3a	; 58
   13158:	89 23       	and	r24, r25
   1315a:	80 83       	st	Z, r24
   1315c:	58 96       	adiw	r26, 0x18	; 24
   1315e:	8d 91       	ld	r24, X+
   13160:	9c 91       	ld	r25, X
   13162:	59 97       	sbiw	r26, 0x19	; 25
   13164:	00 97       	sbiw	r24, 0x00	; 0
   13166:	09 f0       	breq	.+2      	; 0x1316a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   13168:	44 c3       	rjmp	.+1672   	; 0x137f2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
   1316a:	56 96       	adiw	r26, 0x16	; 22
   1316c:	8d 91       	ld	r24, X+
   1316e:	9c 91       	ld	r25, X
   13170:	57 97       	sbiw	r26, 0x17	; 23
   13172:	82 30       	cpi	r24, 0x02	; 2
   13174:	91 05       	cpc	r25, r1
   13176:	09 f4       	brne	.+2      	; 0x1317a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   13178:	0b c3       	rjmp	.+1558   	; 0x13790 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   1317a:	83 30       	cpi	r24, 0x03	; 3
   1317c:	91 05       	cpc	r25, r1
   1317e:	09 f4       	brne	.+2      	; 0x13182 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   13180:	23 c3       	rjmp	.+1606   	; 0x137c8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   13182:	01 97       	sbiw	r24, 0x01	; 1
   13184:	09 f0       	breq	.+2      	; 0x13188 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   13186:	32 c3       	rjmp	.+1636   	; 0x137ec <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
   13188:	1e 96       	adiw	r26, 0x0e	; 14
   1318a:	0d 90       	ld	r0, X+
   1318c:	bc 91       	ld	r27, X
   1318e:	a0 2d       	mov	r26, r0
   13190:	68 01       	movw	r12, r16
   13192:	c0 94       	com	r12
   13194:	d0 94       	com	r13
   13196:	40 95       	com	r20
   13198:	50 95       	com	r21
   1319a:	fa 01       	movw	r30, r20
   1319c:	ea 0f       	add	r30, r26
   1319e:	fb 1f       	adc	r31, r27
   131a0:	cb 01       	movw	r24, r22
   131a2:	89 01       	movw	r16, r18
   131a4:	9f 01       	movw	r18, r30
   131a6:	ab 01       	movw	r20, r22
   131a8:	b6 01       	movw	r22, r12
   131aa:	6a 0f       	add	r22, r26
   131ac:	7b 1f       	adc	r23, r27
   131ae:	d7 01       	movw	r26, r14
   131b0:	d0 96       	adiw	r26, 0x30	; 48
   131b2:	cd 90       	ld	r12, X+
   131b4:	dc 90       	ld	r13, X
   131b6:	d6 01       	movw	r26, r12
   131b8:	bc 90       	ld	r11, X
   131ba:	d7 01       	movw	r26, r14
   131bc:	db 96       	adiw	r26, 0x3b	; 59
   131be:	ac 90       	ld	r10, X
   131c0:	ba 20       	and	r11, r10
   131c2:	d6 01       	movw	r26, r12
   131c4:	bc 92       	st	X, r11
   131c6:	12 b8       	out	0x02, r1	; 2
   131c8:	d7 01       	movw	r26, r14
   131ca:	d2 96       	adiw	r26, 0x32	; 50
   131cc:	cd 90       	ld	r12, X+
   131ce:	dc 90       	ld	r13, X
   131d0:	d6 01       	movw	r26, r12
   131d2:	bc 90       	ld	r11, X
   131d4:	d7 01       	movw	r26, r14
   131d6:	dc 96       	adiw	r26, 0x3c	; 60
   131d8:	ac 90       	ld	r10, X
   131da:	ba 20       	and	r11, r10
   131dc:	d6 01       	movw	r26, r12
   131de:	bc 92       	st	X, r11
   131e0:	d7 01       	movw	r26, r14
   131e2:	d2 96       	adiw	r26, 0x32	; 50
   131e4:	cd 90       	ld	r12, X+
   131e6:	dc 90       	ld	r13, X
   131e8:	d6 01       	movw	r26, r12
   131ea:	bc 90       	ld	r11, X
   131ec:	d7 01       	movw	r26, r14
   131ee:	d8 96       	adiw	r26, 0x38	; 56
   131f0:	ac 90       	ld	r10, X
   131f2:	ba 28       	or	r11, r10
   131f4:	d6 01       	movw	r26, r12
   131f6:	bc 92       	st	X, r11
   131f8:	a0 e5       	ldi	r26, 0x50	; 80
   131fa:	a2 b9       	out	0x02, r26	; 2
   131fc:	d7 01       	movw	r26, r14
   131fe:	d2 96       	adiw	r26, 0x32	; 50
   13200:	cd 90       	ld	r12, X+
   13202:	dc 90       	ld	r13, X
   13204:	d6 01       	movw	r26, r12
   13206:	bc 90       	ld	r11, X
   13208:	d7 01       	movw	r26, r14
   1320a:	dc 96       	adiw	r26, 0x3c	; 60
   1320c:	ac 90       	ld	r10, X
   1320e:	ba 20       	and	r11, r10
   13210:	d6 01       	movw	r26, r12
   13212:	bc 92       	st	X, r11
   13214:	d7 01       	movw	r26, r14
   13216:	d2 96       	adiw	r26, 0x32	; 50
   13218:	cd 90       	ld	r12, X+
   1321a:	dc 90       	ld	r13, X
   1321c:	d6 01       	movw	r26, r12
   1321e:	bc 90       	ld	r11, X
   13220:	d7 01       	movw	r26, r14
   13222:	d8 96       	adiw	r26, 0x38	; 56
   13224:	ac 90       	ld	r10, X
   13226:	ba 28       	or	r11, r10
   13228:	d6 01       	movw	r26, r12
   1322a:	bc 92       	st	X, r11
   1322c:	d7 01       	movw	r26, r14
   1322e:	d0 96       	adiw	r26, 0x30	; 48
   13230:	cd 90       	ld	r12, X+
   13232:	dc 90       	ld	r13, X
   13234:	d6 01       	movw	r26, r12
   13236:	bc 90       	ld	r11, X
   13238:	d7 01       	movw	r26, r14
   1323a:	d7 96       	adiw	r26, 0x37	; 55
   1323c:	ac 90       	ld	r10, X
   1323e:	ba 28       	or	r11, r10
   13240:	d6 01       	movw	r26, r12
   13242:	bc 92       	st	X, r11
   13244:	72 b9       	out	0x02, r23	; 2
   13246:	d7 01       	movw	r26, r14
   13248:	d2 96       	adiw	r26, 0x32	; 50
   1324a:	ad 90       	ld	r10, X+
   1324c:	bc 90       	ld	r11, X
   1324e:	d5 01       	movw	r26, r10
   13250:	7c 91       	ld	r23, X
   13252:	d7 01       	movw	r26, r14
   13254:	dc 96       	adiw	r26, 0x3c	; 60
   13256:	dc 90       	ld	r13, X
   13258:	7d 21       	and	r23, r13
   1325a:	d5 01       	movw	r26, r10
   1325c:	7c 93       	st	X, r23
   1325e:	d7 01       	movw	r26, r14
   13260:	d2 96       	adiw	r26, 0x32	; 50
   13262:	ad 90       	ld	r10, X+
   13264:	bc 90       	ld	r11, X
   13266:	d5 01       	movw	r26, r10
   13268:	7c 91       	ld	r23, X
   1326a:	d7 01       	movw	r26, r14
   1326c:	d8 96       	adiw	r26, 0x38	; 56
   1326e:	dc 90       	ld	r13, X
   13270:	7d 29       	or	r23, r13
   13272:	d5 01       	movw	r26, r10
   13274:	7c 93       	st	X, r23
   13276:	62 b9       	out	0x02, r22	; 2
   13278:	d7 01       	movw	r26, r14
   1327a:	d2 96       	adiw	r26, 0x32	; 50
   1327c:	cd 90       	ld	r12, X+
   1327e:	dc 90       	ld	r13, X
   13280:	d6 01       	movw	r26, r12
   13282:	6c 91       	ld	r22, X
   13284:	d7 01       	movw	r26, r14
   13286:	dc 96       	adiw	r26, 0x3c	; 60
   13288:	7c 91       	ld	r23, X
   1328a:	67 23       	and	r22, r23
   1328c:	d6 01       	movw	r26, r12
   1328e:	6c 93       	st	X, r22
   13290:	d7 01       	movw	r26, r14
   13292:	d2 96       	adiw	r26, 0x32	; 50
   13294:	cd 90       	ld	r12, X+
   13296:	dc 90       	ld	r13, X
   13298:	d6 01       	movw	r26, r12
   1329a:	6c 91       	ld	r22, X
   1329c:	d7 01       	movw	r26, r14
   1329e:	d8 96       	adiw	r26, 0x38	; 56
   132a0:	7c 91       	ld	r23, X
   132a2:	67 2b       	or	r22, r23
   132a4:	d6 01       	movw	r26, r12
   132a6:	6c 93       	st	X, r22
   132a8:	d7 01       	movw	r26, r14
   132aa:	d0 96       	adiw	r26, 0x30	; 48
   132ac:	cd 90       	ld	r12, X+
   132ae:	dc 90       	ld	r13, X
   132b0:	d6 01       	movw	r26, r12
   132b2:	6c 91       	ld	r22, X
   132b4:	d7 01       	movw	r26, r14
   132b6:	db 96       	adiw	r26, 0x3b	; 59
   132b8:	7c 91       	ld	r23, X
   132ba:	67 23       	and	r22, r23
   132bc:	d6 01       	movw	r26, r12
   132be:	6c 93       	st	X, r22
   132c0:	12 b8       	out	0x02, r1	; 2
   132c2:	d7 01       	movw	r26, r14
   132c4:	d2 96       	adiw	r26, 0x32	; 50
   132c6:	cd 90       	ld	r12, X+
   132c8:	dc 90       	ld	r13, X
   132ca:	d6 01       	movw	r26, r12
   132cc:	6c 91       	ld	r22, X
   132ce:	d7 01       	movw	r26, r14
   132d0:	dc 96       	adiw	r26, 0x3c	; 60
   132d2:	7c 91       	ld	r23, X
   132d4:	67 23       	and	r22, r23
   132d6:	d6 01       	movw	r26, r12
   132d8:	6c 93       	st	X, r22
   132da:	d7 01       	movw	r26, r14
   132dc:	d2 96       	adiw	r26, 0x32	; 50
   132de:	cd 90       	ld	r12, X+
   132e0:	dc 90       	ld	r13, X
   132e2:	d6 01       	movw	r26, r12
   132e4:	6c 91       	ld	r22, X
   132e6:	d7 01       	movw	r26, r14
   132e8:	d8 96       	adiw	r26, 0x38	; 56
   132ea:	7c 91       	ld	r23, X
   132ec:	67 2b       	or	r22, r23
   132ee:	d6 01       	movw	r26, r12
   132f0:	6c 93       	st	X, r22
   132f2:	61 e5       	ldi	r22, 0x51	; 81
   132f4:	62 b9       	out	0x02, r22	; 2
   132f6:	d7 01       	movw	r26, r14
   132f8:	d2 96       	adiw	r26, 0x32	; 50
   132fa:	cd 90       	ld	r12, X+
   132fc:	dc 90       	ld	r13, X
   132fe:	d6 01       	movw	r26, r12
   13300:	6c 91       	ld	r22, X
   13302:	d7 01       	movw	r26, r14
   13304:	dc 96       	adiw	r26, 0x3c	; 60
   13306:	7c 91       	ld	r23, X
   13308:	67 23       	and	r22, r23
   1330a:	d6 01       	movw	r26, r12
   1330c:	6c 93       	st	X, r22
   1330e:	d7 01       	movw	r26, r14
   13310:	d2 96       	adiw	r26, 0x32	; 50
   13312:	cd 90       	ld	r12, X+
   13314:	dc 90       	ld	r13, X
   13316:	d6 01       	movw	r26, r12
   13318:	6c 91       	ld	r22, X
   1331a:	d7 01       	movw	r26, r14
   1331c:	d8 96       	adiw	r26, 0x38	; 56
   1331e:	7c 91       	ld	r23, X
   13320:	67 2b       	or	r22, r23
   13322:	d6 01       	movw	r26, r12
   13324:	6c 93       	st	X, r22
   13326:	d7 01       	movw	r26, r14
   13328:	d0 96       	adiw	r26, 0x30	; 48
   1332a:	cd 90       	ld	r12, X+
   1332c:	dc 90       	ld	r13, X
   1332e:	d6 01       	movw	r26, r12
   13330:	6c 91       	ld	r22, X
   13332:	d7 01       	movw	r26, r14
   13334:	d7 96       	adiw	r26, 0x37	; 55
   13336:	7c 91       	ld	r23, X
   13338:	67 2b       	or	r22, r23
   1333a:	d6 01       	movw	r26, r12
   1333c:	6c 93       	st	X, r22
   1333e:	32 b9       	out	0x02, r19	; 2
   13340:	d7 01       	movw	r26, r14
   13342:	d2 96       	adiw	r26, 0x32	; 50
   13344:	cd 90       	ld	r12, X+
   13346:	dc 90       	ld	r13, X
   13348:	d6 01       	movw	r26, r12
   1334a:	3c 91       	ld	r19, X
   1334c:	d7 01       	movw	r26, r14
   1334e:	dc 96       	adiw	r26, 0x3c	; 60
   13350:	6c 91       	ld	r22, X
   13352:	36 23       	and	r19, r22
   13354:	d6 01       	movw	r26, r12
   13356:	3c 93       	st	X, r19
   13358:	d7 01       	movw	r26, r14
   1335a:	d2 96       	adiw	r26, 0x32	; 50
   1335c:	cd 90       	ld	r12, X+
   1335e:	dc 90       	ld	r13, X
   13360:	d6 01       	movw	r26, r12
   13362:	3c 91       	ld	r19, X
   13364:	d7 01       	movw	r26, r14
   13366:	d8 96       	adiw	r26, 0x38	; 56
   13368:	6c 91       	ld	r22, X
   1336a:	36 2b       	or	r19, r22
   1336c:	d6 01       	movw	r26, r12
   1336e:	3c 93       	st	X, r19
   13370:	22 b9       	out	0x02, r18	; 2
   13372:	d7 01       	movw	r26, r14
   13374:	d2 96       	adiw	r26, 0x32	; 50
   13376:	6d 91       	ld	r22, X+
   13378:	7c 91       	ld	r23, X
   1337a:	db 01       	movw	r26, r22
   1337c:	2c 91       	ld	r18, X
   1337e:	d7 01       	movw	r26, r14
   13380:	dc 96       	adiw	r26, 0x3c	; 60
   13382:	3c 91       	ld	r19, X
   13384:	23 23       	and	r18, r19
   13386:	db 01       	movw	r26, r22
   13388:	2c 93       	st	X, r18
   1338a:	d7 01       	movw	r26, r14
   1338c:	d2 96       	adiw	r26, 0x32	; 50
   1338e:	6d 91       	ld	r22, X+
   13390:	7c 91       	ld	r23, X
   13392:	db 01       	movw	r26, r22
   13394:	2c 91       	ld	r18, X
   13396:	d7 01       	movw	r26, r14
   13398:	d8 96       	adiw	r26, 0x38	; 56
   1339a:	3c 91       	ld	r19, X
   1339c:	23 2b       	or	r18, r19
   1339e:	db 01       	movw	r26, r22
   133a0:	2c 93       	st	X, r18
   133a2:	d7 01       	movw	r26, r14
   133a4:	d0 96       	adiw	r26, 0x30	; 48
   133a6:	6d 91       	ld	r22, X+
   133a8:	7c 91       	ld	r23, X
   133aa:	db 01       	movw	r26, r22
   133ac:	2c 91       	ld	r18, X
   133ae:	d7 01       	movw	r26, r14
   133b0:	db 96       	adiw	r26, 0x3b	; 59
   133b2:	3c 91       	ld	r19, X
   133b4:	23 23       	and	r18, r19
   133b6:	db 01       	movw	r26, r22
   133b8:	2c 93       	st	X, r18
   133ba:	12 b8       	out	0x02, r1	; 2
   133bc:	d7 01       	movw	r26, r14
   133be:	d2 96       	adiw	r26, 0x32	; 50
   133c0:	6d 91       	ld	r22, X+
   133c2:	7c 91       	ld	r23, X
   133c4:	db 01       	movw	r26, r22
   133c6:	2c 91       	ld	r18, X
   133c8:	d7 01       	movw	r26, r14
   133ca:	dc 96       	adiw	r26, 0x3c	; 60
   133cc:	3c 91       	ld	r19, X
   133ce:	23 23       	and	r18, r19
   133d0:	db 01       	movw	r26, r22
   133d2:	2c 93       	st	X, r18
   133d4:	d7 01       	movw	r26, r14
   133d6:	d2 96       	adiw	r26, 0x32	; 50
   133d8:	6d 91       	ld	r22, X+
   133da:	7c 91       	ld	r23, X
   133dc:	db 01       	movw	r26, r22
   133de:	2c 91       	ld	r18, X
   133e0:	d7 01       	movw	r26, r14
   133e2:	d8 96       	adiw	r26, 0x38	; 56
   133e4:	3c 91       	ld	r19, X
   133e6:	23 2b       	or	r18, r19
   133e8:	db 01       	movw	r26, r22
   133ea:	2c 93       	st	X, r18
   133ec:	22 e5       	ldi	r18, 0x52	; 82
   133ee:	22 b9       	out	0x02, r18	; 2
   133f0:	d7 01       	movw	r26, r14
   133f2:	d2 96       	adiw	r26, 0x32	; 50
   133f4:	6d 91       	ld	r22, X+
   133f6:	7c 91       	ld	r23, X
   133f8:	db 01       	movw	r26, r22
   133fa:	2c 91       	ld	r18, X
   133fc:	d7 01       	movw	r26, r14
   133fe:	dc 96       	adiw	r26, 0x3c	; 60
   13400:	3c 91       	ld	r19, X
   13402:	23 23       	and	r18, r19
   13404:	db 01       	movw	r26, r22
   13406:	2c 93       	st	X, r18
   13408:	d7 01       	movw	r26, r14
   1340a:	d2 96       	adiw	r26, 0x32	; 50
   1340c:	6d 91       	ld	r22, X+
   1340e:	7c 91       	ld	r23, X
   13410:	db 01       	movw	r26, r22
   13412:	2c 91       	ld	r18, X
   13414:	d7 01       	movw	r26, r14
   13416:	d8 96       	adiw	r26, 0x38	; 56
   13418:	3c 91       	ld	r19, X
   1341a:	23 2b       	or	r18, r19
   1341c:	db 01       	movw	r26, r22
   1341e:	2c 93       	st	X, r18
   13420:	d7 01       	movw	r26, r14
   13422:	d0 96       	adiw	r26, 0x30	; 48
   13424:	6d 91       	ld	r22, X+
   13426:	7c 91       	ld	r23, X
   13428:	db 01       	movw	r26, r22
   1342a:	2c 91       	ld	r18, X
   1342c:	d7 01       	movw	r26, r14
   1342e:	d7 96       	adiw	r26, 0x37	; 55
   13430:	3c 91       	ld	r19, X
   13432:	23 2b       	or	r18, r19
   13434:	db 01       	movw	r26, r22
   13436:	2c 93       	st	X, r18
   13438:	52 b9       	out	0x02, r21	; 2
   1343a:	d7 01       	movw	r26, r14
   1343c:	d2 96       	adiw	r26, 0x32	; 50
   1343e:	6d 91       	ld	r22, X+
   13440:	7c 91       	ld	r23, X
   13442:	db 01       	movw	r26, r22
   13444:	2c 91       	ld	r18, X
   13446:	d7 01       	movw	r26, r14
   13448:	dc 96       	adiw	r26, 0x3c	; 60
   1344a:	3c 91       	ld	r19, X
   1344c:	23 23       	and	r18, r19
   1344e:	db 01       	movw	r26, r22
   13450:	2c 93       	st	X, r18
   13452:	d7 01       	movw	r26, r14
   13454:	d2 96       	adiw	r26, 0x32	; 50
   13456:	6d 91       	ld	r22, X+
   13458:	7c 91       	ld	r23, X
   1345a:	db 01       	movw	r26, r22
   1345c:	2c 91       	ld	r18, X
   1345e:	d7 01       	movw	r26, r14
   13460:	d8 96       	adiw	r26, 0x38	; 56
   13462:	3c 91       	ld	r19, X
   13464:	23 2b       	or	r18, r19
   13466:	db 01       	movw	r26, r22
   13468:	2c 93       	st	X, r18
   1346a:	42 b9       	out	0x02, r20	; 2
   1346c:	d7 01       	movw	r26, r14
   1346e:	d2 96       	adiw	r26, 0x32	; 50
   13470:	4d 91       	ld	r20, X+
   13472:	5c 91       	ld	r21, X
   13474:	da 01       	movw	r26, r20
   13476:	2c 91       	ld	r18, X
   13478:	d7 01       	movw	r26, r14
   1347a:	dc 96       	adiw	r26, 0x3c	; 60
   1347c:	3c 91       	ld	r19, X
   1347e:	23 23       	and	r18, r19
   13480:	da 01       	movw	r26, r20
   13482:	2c 93       	st	X, r18
   13484:	d7 01       	movw	r26, r14
   13486:	d2 96       	adiw	r26, 0x32	; 50
   13488:	4d 91       	ld	r20, X+
   1348a:	5c 91       	ld	r21, X
   1348c:	da 01       	movw	r26, r20
   1348e:	2c 91       	ld	r18, X
   13490:	d7 01       	movw	r26, r14
   13492:	d8 96       	adiw	r26, 0x38	; 56
   13494:	3c 91       	ld	r19, X
   13496:	23 2b       	or	r18, r19
   13498:	da 01       	movw	r26, r20
   1349a:	2c 93       	st	X, r18
   1349c:	d7 01       	movw	r26, r14
   1349e:	d0 96       	adiw	r26, 0x30	; 48
   134a0:	4d 91       	ld	r20, X+
   134a2:	5c 91       	ld	r21, X
   134a4:	da 01       	movw	r26, r20
   134a6:	2c 91       	ld	r18, X
   134a8:	d7 01       	movw	r26, r14
   134aa:	db 96       	adiw	r26, 0x3b	; 59
   134ac:	3c 91       	ld	r19, X
   134ae:	23 23       	and	r18, r19
   134b0:	da 01       	movw	r26, r20
   134b2:	2c 93       	st	X, r18
   134b4:	12 b8       	out	0x02, r1	; 2
   134b6:	d7 01       	movw	r26, r14
   134b8:	d2 96       	adiw	r26, 0x32	; 50
   134ba:	4d 91       	ld	r20, X+
   134bc:	5c 91       	ld	r21, X
   134be:	da 01       	movw	r26, r20
   134c0:	2c 91       	ld	r18, X
   134c2:	d7 01       	movw	r26, r14
   134c4:	dc 96       	adiw	r26, 0x3c	; 60
   134c6:	3c 91       	ld	r19, X
   134c8:	23 23       	and	r18, r19
   134ca:	da 01       	movw	r26, r20
   134cc:	2c 93       	st	X, r18
   134ce:	d7 01       	movw	r26, r14
   134d0:	d2 96       	adiw	r26, 0x32	; 50
   134d2:	4d 91       	ld	r20, X+
   134d4:	5c 91       	ld	r21, X
   134d6:	da 01       	movw	r26, r20
   134d8:	2c 91       	ld	r18, X
   134da:	d7 01       	movw	r26, r14
   134dc:	d8 96       	adiw	r26, 0x38	; 56
   134de:	3c 91       	ld	r19, X
   134e0:	23 2b       	or	r18, r19
   134e2:	da 01       	movw	r26, r20
   134e4:	2c 93       	st	X, r18
   134e6:	23 e5       	ldi	r18, 0x53	; 83
   134e8:	22 b9       	out	0x02, r18	; 2
   134ea:	d7 01       	movw	r26, r14
   134ec:	d2 96       	adiw	r26, 0x32	; 50
   134ee:	4d 91       	ld	r20, X+
   134f0:	5c 91       	ld	r21, X
   134f2:	da 01       	movw	r26, r20
   134f4:	2c 91       	ld	r18, X
   134f6:	d7 01       	movw	r26, r14
   134f8:	dc 96       	adiw	r26, 0x3c	; 60
   134fa:	3c 91       	ld	r19, X
   134fc:	23 23       	and	r18, r19
   134fe:	da 01       	movw	r26, r20
   13500:	2c 93       	st	X, r18
   13502:	d7 01       	movw	r26, r14
   13504:	d2 96       	adiw	r26, 0x32	; 50
   13506:	4d 91       	ld	r20, X+
   13508:	5c 91       	ld	r21, X
   1350a:	da 01       	movw	r26, r20
   1350c:	2c 91       	ld	r18, X
   1350e:	d7 01       	movw	r26, r14
   13510:	d8 96       	adiw	r26, 0x38	; 56
   13512:	3c 91       	ld	r19, X
   13514:	23 2b       	or	r18, r19
   13516:	da 01       	movw	r26, r20
   13518:	2c 93       	st	X, r18
   1351a:	d7 01       	movw	r26, r14
   1351c:	d0 96       	adiw	r26, 0x30	; 48
   1351e:	4d 91       	ld	r20, X+
   13520:	5c 91       	ld	r21, X
   13522:	da 01       	movw	r26, r20
   13524:	2c 91       	ld	r18, X
   13526:	d7 01       	movw	r26, r14
   13528:	d7 96       	adiw	r26, 0x37	; 55
   1352a:	3c 91       	ld	r19, X
   1352c:	23 2b       	or	r18, r19
   1352e:	da 01       	movw	r26, r20
   13530:	2c 93       	st	X, r18
   13532:	12 b9       	out	0x02, r17	; 2
   13534:	d7 01       	movw	r26, r14
   13536:	d2 96       	adiw	r26, 0x32	; 50
   13538:	4d 91       	ld	r20, X+
   1353a:	5c 91       	ld	r21, X
   1353c:	da 01       	movw	r26, r20
   1353e:	2c 91       	ld	r18, X
   13540:	d7 01       	movw	r26, r14
   13542:	dc 96       	adiw	r26, 0x3c	; 60
   13544:	3c 91       	ld	r19, X
   13546:	23 23       	and	r18, r19
   13548:	da 01       	movw	r26, r20
   1354a:	2c 93       	st	X, r18
   1354c:	d7 01       	movw	r26, r14
   1354e:	d2 96       	adiw	r26, 0x32	; 50
   13550:	4d 91       	ld	r20, X+
   13552:	5c 91       	ld	r21, X
   13554:	da 01       	movw	r26, r20
   13556:	2c 91       	ld	r18, X
   13558:	d7 01       	movw	r26, r14
   1355a:	d8 96       	adiw	r26, 0x38	; 56
   1355c:	3c 91       	ld	r19, X
   1355e:	23 2b       	or	r18, r19
   13560:	da 01       	movw	r26, r20
   13562:	2c 93       	st	X, r18
   13564:	02 b9       	out	0x02, r16	; 2
   13566:	d7 01       	movw	r26, r14
   13568:	d2 96       	adiw	r26, 0x32	; 50
   1356a:	4d 91       	ld	r20, X+
   1356c:	5c 91       	ld	r21, X
   1356e:	da 01       	movw	r26, r20
   13570:	2c 91       	ld	r18, X
   13572:	d7 01       	movw	r26, r14
   13574:	dc 96       	adiw	r26, 0x3c	; 60
   13576:	3c 91       	ld	r19, X
   13578:	23 23       	and	r18, r19
   1357a:	da 01       	movw	r26, r20
   1357c:	2c 93       	st	X, r18
   1357e:	d7 01       	movw	r26, r14
   13580:	d2 96       	adiw	r26, 0x32	; 50
   13582:	4d 91       	ld	r20, X+
   13584:	5c 91       	ld	r21, X
   13586:	da 01       	movw	r26, r20
   13588:	2c 91       	ld	r18, X
   1358a:	d7 01       	movw	r26, r14
   1358c:	d8 96       	adiw	r26, 0x38	; 56
   1358e:	3c 91       	ld	r19, X
   13590:	23 2b       	or	r18, r19
   13592:	da 01       	movw	r26, r20
   13594:	2c 93       	st	X, r18
   13596:	d7 01       	movw	r26, r14
   13598:	d0 96       	adiw	r26, 0x30	; 48
   1359a:	4d 91       	ld	r20, X+
   1359c:	5c 91       	ld	r21, X
   1359e:	da 01       	movw	r26, r20
   135a0:	2c 91       	ld	r18, X
   135a2:	d7 01       	movw	r26, r14
   135a4:	db 96       	adiw	r26, 0x3b	; 59
   135a6:	3c 91       	ld	r19, X
   135a8:	23 23       	and	r18, r19
   135aa:	da 01       	movw	r26, r20
   135ac:	2c 93       	st	X, r18
   135ae:	12 b8       	out	0x02, r1	; 2
   135b0:	d7 01       	movw	r26, r14
   135b2:	d2 96       	adiw	r26, 0x32	; 50
   135b4:	4d 91       	ld	r20, X+
   135b6:	5c 91       	ld	r21, X
   135b8:	da 01       	movw	r26, r20
   135ba:	2c 91       	ld	r18, X
   135bc:	d7 01       	movw	r26, r14
   135be:	dc 96       	adiw	r26, 0x3c	; 60
   135c0:	3c 91       	ld	r19, X
   135c2:	23 23       	and	r18, r19
   135c4:	da 01       	movw	r26, r20
   135c6:	2c 93       	st	X, r18
   135c8:	d7 01       	movw	r26, r14
   135ca:	d2 96       	adiw	r26, 0x32	; 50
   135cc:	4d 91       	ld	r20, X+
   135ce:	5c 91       	ld	r21, X
   135d0:	da 01       	movw	r26, r20
   135d2:	2c 91       	ld	r18, X
   135d4:	d7 01       	movw	r26, r14
   135d6:	d8 96       	adiw	r26, 0x38	; 56
   135d8:	3c 91       	ld	r19, X
   135da:	23 2b       	or	r18, r19
   135dc:	da 01       	movw	r26, r20
   135de:	2c 93       	st	X, r18
   135e0:	20 e2       	ldi	r18, 0x20	; 32
   135e2:	22 b9       	out	0x02, r18	; 2
   135e4:	d7 01       	movw	r26, r14
   135e6:	d2 96       	adiw	r26, 0x32	; 50
   135e8:	4d 91       	ld	r20, X+
   135ea:	5c 91       	ld	r21, X
   135ec:	da 01       	movw	r26, r20
   135ee:	2c 91       	ld	r18, X
   135f0:	d7 01       	movw	r26, r14
   135f2:	dc 96       	adiw	r26, 0x3c	; 60
   135f4:	3c 91       	ld	r19, X
   135f6:	23 23       	and	r18, r19
   135f8:	da 01       	movw	r26, r20
   135fa:	2c 93       	st	X, r18
   135fc:	d7 01       	movw	r26, r14
   135fe:	d2 96       	adiw	r26, 0x32	; 50
   13600:	4d 91       	ld	r20, X+
   13602:	5c 91       	ld	r21, X
   13604:	da 01       	movw	r26, r20
   13606:	2c 91       	ld	r18, X
   13608:	d7 01       	movw	r26, r14
   1360a:	d8 96       	adiw	r26, 0x38	; 56
   1360c:	3c 91       	ld	r19, X
   1360e:	23 2b       	or	r18, r19
   13610:	da 01       	movw	r26, r20
   13612:	2c 93       	st	X, r18
   13614:	d7 01       	movw	r26, r14
   13616:	d0 96       	adiw	r26, 0x30	; 48
   13618:	4d 91       	ld	r20, X+
   1361a:	5c 91       	ld	r21, X
   1361c:	da 01       	movw	r26, r20
   1361e:	2c 91       	ld	r18, X
   13620:	d7 01       	movw	r26, r14
   13622:	d7 96       	adiw	r26, 0x37	; 55
   13624:	3c 91       	ld	r19, X
   13626:	23 2b       	or	r18, r19
   13628:	da 01       	movw	r26, r20
   1362a:	2c 93       	st	X, r18
   1362c:	f2 b9       	out	0x02, r31	; 2
   1362e:	d7 01       	movw	r26, r14
   13630:	d2 96       	adiw	r26, 0x32	; 50
   13632:	4d 91       	ld	r20, X+
   13634:	5c 91       	ld	r21, X
   13636:	da 01       	movw	r26, r20
   13638:	2c 91       	ld	r18, X
   1363a:	d7 01       	movw	r26, r14
   1363c:	dc 96       	adiw	r26, 0x3c	; 60
   1363e:	3c 91       	ld	r19, X
   13640:	23 23       	and	r18, r19
   13642:	da 01       	movw	r26, r20
   13644:	2c 93       	st	X, r18
   13646:	d7 01       	movw	r26, r14
   13648:	d2 96       	adiw	r26, 0x32	; 50
   1364a:	4d 91       	ld	r20, X+
   1364c:	5c 91       	ld	r21, X
   1364e:	da 01       	movw	r26, r20
   13650:	2c 91       	ld	r18, X
   13652:	d7 01       	movw	r26, r14
   13654:	d8 96       	adiw	r26, 0x38	; 56
   13656:	3c 91       	ld	r19, X
   13658:	23 2b       	or	r18, r19
   1365a:	da 01       	movw	r26, r20
   1365c:	2c 93       	st	X, r18
   1365e:	e2 b9       	out	0x02, r30	; 2
   13660:	d7 01       	movw	r26, r14
   13662:	d2 96       	adiw	r26, 0x32	; 50
   13664:	ed 91       	ld	r30, X+
   13666:	fc 91       	ld	r31, X
   13668:	d3 97       	sbiw	r26, 0x33	; 51
   1366a:	20 81       	ld	r18, Z
   1366c:	dc 96       	adiw	r26, 0x3c	; 60
   1366e:	3c 91       	ld	r19, X
   13670:	dc 97       	sbiw	r26, 0x3c	; 60
   13672:	23 23       	and	r18, r19
   13674:	20 83       	st	Z, r18
   13676:	d2 96       	adiw	r26, 0x32	; 50
   13678:	ed 91       	ld	r30, X+
   1367a:	fc 91       	ld	r31, X
   1367c:	d3 97       	sbiw	r26, 0x33	; 51
   1367e:	20 81       	ld	r18, Z
   13680:	d8 96       	adiw	r26, 0x38	; 56
   13682:	3c 91       	ld	r19, X
   13684:	d8 97       	sbiw	r26, 0x38	; 56
   13686:	23 2b       	or	r18, r19
   13688:	20 83       	st	Z, r18
   1368a:	d0 96       	adiw	r26, 0x30	; 48
   1368c:	ed 91       	ld	r30, X+
   1368e:	fc 91       	ld	r31, X
   13690:	d1 97       	sbiw	r26, 0x31	; 49
   13692:	20 81       	ld	r18, Z
   13694:	db 96       	adiw	r26, 0x3b	; 59
   13696:	3c 91       	ld	r19, X
   13698:	db 97       	sbiw	r26, 0x3b	; 59
   1369a:	23 23       	and	r18, r19
   1369c:	20 83       	st	Z, r18
   1369e:	12 b8       	out	0x02, r1	; 2
   136a0:	d2 96       	adiw	r26, 0x32	; 50
   136a2:	ed 91       	ld	r30, X+
   136a4:	fc 91       	ld	r31, X
   136a6:	d3 97       	sbiw	r26, 0x33	; 51
   136a8:	20 81       	ld	r18, Z
   136aa:	dc 96       	adiw	r26, 0x3c	; 60
   136ac:	3c 91       	ld	r19, X
   136ae:	dc 97       	sbiw	r26, 0x3c	; 60
   136b0:	23 23       	and	r18, r19
   136b2:	20 83       	st	Z, r18
   136b4:	d2 96       	adiw	r26, 0x32	; 50
   136b6:	ed 91       	ld	r30, X+
   136b8:	fc 91       	ld	r31, X
   136ba:	d3 97       	sbiw	r26, 0x33	; 51
   136bc:	20 81       	ld	r18, Z
   136be:	d8 96       	adiw	r26, 0x38	; 56
   136c0:	3c 91       	ld	r19, X
   136c2:	d8 97       	sbiw	r26, 0x38	; 56
   136c4:	23 2b       	or	r18, r19
   136c6:	20 83       	st	Z, r18
   136c8:	21 e2       	ldi	r18, 0x21	; 33
   136ca:	22 b9       	out	0x02, r18	; 2
   136cc:	d2 96       	adiw	r26, 0x32	; 50
   136ce:	ed 91       	ld	r30, X+
   136d0:	fc 91       	ld	r31, X
   136d2:	d3 97       	sbiw	r26, 0x33	; 51
   136d4:	20 81       	ld	r18, Z
   136d6:	dc 96       	adiw	r26, 0x3c	; 60
   136d8:	3c 91       	ld	r19, X
   136da:	dc 97       	sbiw	r26, 0x3c	; 60
   136dc:	23 23       	and	r18, r19
   136de:	20 83       	st	Z, r18
   136e0:	d2 96       	adiw	r26, 0x32	; 50
   136e2:	ed 91       	ld	r30, X+
   136e4:	fc 91       	ld	r31, X
   136e6:	d3 97       	sbiw	r26, 0x33	; 51
   136e8:	20 81       	ld	r18, Z
   136ea:	d8 96       	adiw	r26, 0x38	; 56
   136ec:	3c 91       	ld	r19, X
   136ee:	d8 97       	sbiw	r26, 0x38	; 56
   136f0:	23 2b       	or	r18, r19
   136f2:	20 83       	st	Z, r18
   136f4:	d0 96       	adiw	r26, 0x30	; 48
   136f6:	ed 91       	ld	r30, X+
   136f8:	fc 91       	ld	r31, X
   136fa:	d1 97       	sbiw	r26, 0x31	; 49
   136fc:	20 81       	ld	r18, Z
   136fe:	d7 96       	adiw	r26, 0x37	; 55
   13700:	3c 91       	ld	r19, X
   13702:	d7 97       	sbiw	r26, 0x37	; 55
   13704:	23 2b       	or	r18, r19
   13706:	20 83       	st	Z, r18
   13708:	92 b9       	out	0x02, r25	; 2
   1370a:	d2 96       	adiw	r26, 0x32	; 50
   1370c:	ed 91       	ld	r30, X+
   1370e:	fc 91       	ld	r31, X
   13710:	d3 97       	sbiw	r26, 0x33	; 51
   13712:	90 81       	ld	r25, Z
   13714:	dc 96       	adiw	r26, 0x3c	; 60
   13716:	2c 91       	ld	r18, X
   13718:	dc 97       	sbiw	r26, 0x3c	; 60
   1371a:	92 23       	and	r25, r18
   1371c:	90 83       	st	Z, r25
   1371e:	d2 96       	adiw	r26, 0x32	; 50
   13720:	ed 91       	ld	r30, X+
   13722:	fc 91       	ld	r31, X
   13724:	d3 97       	sbiw	r26, 0x33	; 51
   13726:	90 81       	ld	r25, Z
   13728:	d8 96       	adiw	r26, 0x38	; 56
   1372a:	2c 91       	ld	r18, X
   1372c:	d8 97       	sbiw	r26, 0x38	; 56
   1372e:	92 2b       	or	r25, r18
   13730:	90 83       	st	Z, r25
   13732:	82 b9       	out	0x02, r24	; 2
   13734:	d2 96       	adiw	r26, 0x32	; 50
   13736:	ed 91       	ld	r30, X+
   13738:	fc 91       	ld	r31, X
   1373a:	d3 97       	sbiw	r26, 0x33	; 51
   1373c:	80 81       	ld	r24, Z
   1373e:	dc 96       	adiw	r26, 0x3c	; 60
   13740:	9c 91       	ld	r25, X
   13742:	dc 97       	sbiw	r26, 0x3c	; 60
   13744:	89 23       	and	r24, r25
   13746:	80 83       	st	Z, r24
   13748:	d2 96       	adiw	r26, 0x32	; 50
   1374a:	ed 91       	ld	r30, X+
   1374c:	fc 91       	ld	r31, X
   1374e:	d3 97       	sbiw	r26, 0x33	; 51
   13750:	80 81       	ld	r24, Z
   13752:	d8 96       	adiw	r26, 0x38	; 56
   13754:	9c 91       	ld	r25, X
   13756:	89 2b       	or	r24, r25
   13758:	80 83       	st	Z, r24
   1375a:	d7 01       	movw	r26, r14
   1375c:	9e 96       	adiw	r26, 0x2e	; 46
   1375e:	ed 91       	ld	r30, X+
   13760:	fc 91       	ld	r31, X
   13762:	9f 97       	sbiw	r26, 0x2f	; 47
   13764:	80 81       	ld	r24, Z
   13766:	d6 96       	adiw	r26, 0x36	; 54
   13768:	9c 91       	ld	r25, X
   1376a:	89 2b       	or	r24, r25
   1376c:	80 83       	st	Z, r24
   1376e:	28 96       	adiw	r28, 0x08	; 8
   13770:	0f b6       	in	r0, 0x3f	; 63
   13772:	f8 94       	cli
   13774:	de bf       	out	0x3e, r29	; 62
   13776:	0f be       	out	0x3f, r0	; 63
   13778:	cd bf       	out	0x3d, r28	; 61
   1377a:	df 91       	pop	r29
   1377c:	cf 91       	pop	r28
   1377e:	1f 91       	pop	r17
   13780:	0f 91       	pop	r16
   13782:	ff 90       	pop	r15
   13784:	ef 90       	pop	r14
   13786:	df 90       	pop	r13
   13788:	cf 90       	pop	r12
   1378a:	bf 90       	pop	r11
   1378c:	af 90       	pop	r10
   1378e:	08 95       	ret
   13790:	f7 01       	movw	r30, r14
   13792:	a6 85       	ldd	r26, Z+14	; 0x0e
   13794:	b7 85       	ldd	r27, Z+15	; 0x0f
   13796:	59 01       	movw	r10, r18
   13798:	a0 94       	com	r10
   1379a:	b0 94       	com	r11
   1379c:	9d 01       	movw	r18, r26
   1379e:	26 1b       	sub	r18, r22
   137a0:	37 0b       	sbc	r19, r23
   137a2:	21 50       	subi	r18, 0x01	; 1
   137a4:	31 09       	sbc	r19, r1
   137a6:	60 89       	ldd	r22, Z+16	; 0x10
   137a8:	71 89       	ldd	r23, Z+17	; 0x11
   137aa:	68 01       	movw	r12, r16
   137ac:	c0 94       	com	r12
   137ae:	d0 94       	com	r13
   137b0:	8a 01       	movw	r16, r20
   137b2:	00 95       	com	r16
   137b4:	10 95       	com	r17
   137b6:	06 0f       	add	r16, r22
   137b8:	17 1f       	adc	r17, r23
   137ba:	c8 01       	movw	r24, r16
   137bc:	f9 01       	movw	r30, r18
   137be:	a6 01       	movw	r20, r12
   137c0:	46 0f       	add	r20, r22
   137c2:	57 1f       	adc	r21, r23
   137c4:	b5 01       	movw	r22, r10
   137c6:	f1 cc       	rjmp	.-1566   	; 0x131aa <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
   137c8:	f7 01       	movw	r30, r14
   137ca:	a0 89       	ldd	r26, Z+16	; 0x10
   137cc:	b1 89       	ldd	r27, Z+17	; 0x11
   137ce:	69 01       	movw	r12, r18
   137d0:	c0 94       	com	r12
   137d2:	d0 94       	com	r13
   137d4:	cd 01       	movw	r24, r26
   137d6:	86 1b       	sub	r24, r22
   137d8:	97 0b       	sbc	r25, r23
   137da:	01 97       	sbiw	r24, 0x01	; 1
   137dc:	fa 01       	movw	r30, r20
   137de:	98 01       	movw	r18, r16
   137e0:	8c 01       	movw	r16, r24
   137e2:	ba 01       	movw	r22, r20
   137e4:	a6 01       	movw	r20, r12
   137e6:	4a 0f       	add	r20, r26
   137e8:	5b 1f       	adc	r21, r27
   137ea:	e1 cc       	rjmp	.-1598   	; 0x131ae <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   137ec:	ca 01       	movw	r24, r20
   137ee:	fb 01       	movw	r30, r22
   137f0:	de cc       	rjmp	.-1604   	; 0x131ae <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
   137f2:	01 97       	sbiw	r24, 0x01	; 1
   137f4:	09 f0       	breq	.+2      	; 0x137f8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   137f6:	e5 c1       	rjmp	.+970    	; 0x13bc2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
   137f8:	d0 96       	adiw	r26, 0x30	; 48
   137fa:	ed 91       	ld	r30, X+
   137fc:	fc 91       	ld	r31, X
   137fe:	d1 97       	sbiw	r26, 0x31	; 49
   13800:	80 81       	ld	r24, Z
   13802:	db 96       	adiw	r26, 0x3b	; 59
   13804:	9c 91       	ld	r25, X
   13806:	db 97       	sbiw	r26, 0x3b	; 59
   13808:	89 23       	and	r24, r25
   1380a:	80 83       	st	Z, r24
   1380c:	82 e0       	ldi	r24, 0x02	; 2
   1380e:	82 b9       	out	0x02, r24	; 2
   13810:	d2 96       	adiw	r26, 0x32	; 50
   13812:	ed 91       	ld	r30, X+
   13814:	fc 91       	ld	r31, X
   13816:	d3 97       	sbiw	r26, 0x33	; 51
   13818:	80 81       	ld	r24, Z
   1381a:	dc 96       	adiw	r26, 0x3c	; 60
   1381c:	9c 91       	ld	r25, X
   1381e:	dc 97       	sbiw	r26, 0x3c	; 60
   13820:	89 23       	and	r24, r25
   13822:	80 83       	st	Z, r24
   13824:	d2 96       	adiw	r26, 0x32	; 50
   13826:	ed 91       	ld	r30, X+
   13828:	fc 91       	ld	r31, X
   1382a:	d3 97       	sbiw	r26, 0x33	; 51
   1382c:	80 81       	ld	r24, Z
   1382e:	d8 96       	adiw	r26, 0x38	; 56
   13830:	9c 91       	ld	r25, X
   13832:	d8 97       	sbiw	r26, 0x38	; 56
   13834:	89 2b       	or	r24, r25
   13836:	80 83       	st	Z, r24
   13838:	d0 96       	adiw	r26, 0x30	; 48
   1383a:	ed 91       	ld	r30, X+
   1383c:	fc 91       	ld	r31, X
   1383e:	d1 97       	sbiw	r26, 0x31	; 49
   13840:	80 81       	ld	r24, Z
   13842:	d7 96       	adiw	r26, 0x37	; 55
   13844:	9c 91       	ld	r25, X
   13846:	d7 97       	sbiw	r26, 0x37	; 55
   13848:	89 2b       	or	r24, r25
   1384a:	80 83       	st	Z, r24
   1384c:	72 b9       	out	0x02, r23	; 2
   1384e:	d2 96       	adiw	r26, 0x32	; 50
   13850:	ed 91       	ld	r30, X+
   13852:	fc 91       	ld	r31, X
   13854:	d3 97       	sbiw	r26, 0x33	; 51
   13856:	80 81       	ld	r24, Z
   13858:	dc 96       	adiw	r26, 0x3c	; 60
   1385a:	9c 91       	ld	r25, X
   1385c:	dc 97       	sbiw	r26, 0x3c	; 60
   1385e:	89 23       	and	r24, r25
   13860:	80 83       	st	Z, r24
   13862:	d2 96       	adiw	r26, 0x32	; 50
   13864:	ed 91       	ld	r30, X+
   13866:	fc 91       	ld	r31, X
   13868:	d3 97       	sbiw	r26, 0x33	; 51
   1386a:	80 81       	ld	r24, Z
   1386c:	d8 96       	adiw	r26, 0x38	; 56
   1386e:	9c 91       	ld	r25, X
   13870:	d8 97       	sbiw	r26, 0x38	; 56
   13872:	89 2b       	or	r24, r25
   13874:	80 83       	st	Z, r24
   13876:	d0 96       	adiw	r26, 0x30	; 48
   13878:	ed 91       	ld	r30, X+
   1387a:	fc 91       	ld	r31, X
   1387c:	d1 97       	sbiw	r26, 0x31	; 49
   1387e:	80 81       	ld	r24, Z
   13880:	db 96       	adiw	r26, 0x3b	; 59
   13882:	9c 91       	ld	r25, X
   13884:	db 97       	sbiw	r26, 0x3b	; 59
   13886:	89 23       	and	r24, r25
   13888:	80 83       	st	Z, r24
   1388a:	83 e0       	ldi	r24, 0x03	; 3
   1388c:	82 b9       	out	0x02, r24	; 2
   1388e:	d2 96       	adiw	r26, 0x32	; 50
   13890:	ed 91       	ld	r30, X+
   13892:	fc 91       	ld	r31, X
   13894:	d3 97       	sbiw	r26, 0x33	; 51
   13896:	80 81       	ld	r24, Z
   13898:	dc 96       	adiw	r26, 0x3c	; 60
   1389a:	9c 91       	ld	r25, X
   1389c:	dc 97       	sbiw	r26, 0x3c	; 60
   1389e:	89 23       	and	r24, r25
   138a0:	80 83       	st	Z, r24
   138a2:	d2 96       	adiw	r26, 0x32	; 50
   138a4:	ed 91       	ld	r30, X+
   138a6:	fc 91       	ld	r31, X
   138a8:	d3 97       	sbiw	r26, 0x33	; 51
   138aa:	80 81       	ld	r24, Z
   138ac:	d8 96       	adiw	r26, 0x38	; 56
   138ae:	9c 91       	ld	r25, X
   138b0:	d8 97       	sbiw	r26, 0x38	; 56
   138b2:	89 2b       	or	r24, r25
   138b4:	80 83       	st	Z, r24
   138b6:	d0 96       	adiw	r26, 0x30	; 48
   138b8:	ed 91       	ld	r30, X+
   138ba:	fc 91       	ld	r31, X
   138bc:	d1 97       	sbiw	r26, 0x31	; 49
   138be:	80 81       	ld	r24, Z
   138c0:	d7 96       	adiw	r26, 0x37	; 55
   138c2:	9c 91       	ld	r25, X
   138c4:	d7 97       	sbiw	r26, 0x37	; 55
   138c6:	89 2b       	or	r24, r25
   138c8:	80 83       	st	Z, r24
   138ca:	62 b9       	out	0x02, r22	; 2
   138cc:	d2 96       	adiw	r26, 0x32	; 50
   138ce:	ed 91       	ld	r30, X+
   138d0:	fc 91       	ld	r31, X
   138d2:	d3 97       	sbiw	r26, 0x33	; 51
   138d4:	80 81       	ld	r24, Z
   138d6:	dc 96       	adiw	r26, 0x3c	; 60
   138d8:	9c 91       	ld	r25, X
   138da:	dc 97       	sbiw	r26, 0x3c	; 60
   138dc:	89 23       	and	r24, r25
   138de:	80 83       	st	Z, r24
   138e0:	d2 96       	adiw	r26, 0x32	; 50
   138e2:	ed 91       	ld	r30, X+
   138e4:	fc 91       	ld	r31, X
   138e6:	d3 97       	sbiw	r26, 0x33	; 51
   138e8:	80 81       	ld	r24, Z
   138ea:	d8 96       	adiw	r26, 0x38	; 56
   138ec:	9c 91       	ld	r25, X
   138ee:	d8 97       	sbiw	r26, 0x38	; 56
   138f0:	89 2b       	or	r24, r25
   138f2:	80 83       	st	Z, r24
   138f4:	d0 96       	adiw	r26, 0x30	; 48
   138f6:	ed 91       	ld	r30, X+
   138f8:	fc 91       	ld	r31, X
   138fa:	d1 97       	sbiw	r26, 0x31	; 49
   138fc:	80 81       	ld	r24, Z
   138fe:	db 96       	adiw	r26, 0x3b	; 59
   13900:	9c 91       	ld	r25, X
   13902:	db 97       	sbiw	r26, 0x3b	; 59
   13904:	89 23       	and	r24, r25
   13906:	80 83       	st	Z, r24
   13908:	86 e0       	ldi	r24, 0x06	; 6
   1390a:	82 b9       	out	0x02, r24	; 2
   1390c:	d2 96       	adiw	r26, 0x32	; 50
   1390e:	ed 91       	ld	r30, X+
   13910:	fc 91       	ld	r31, X
   13912:	d3 97       	sbiw	r26, 0x33	; 51
   13914:	80 81       	ld	r24, Z
   13916:	dc 96       	adiw	r26, 0x3c	; 60
   13918:	9c 91       	ld	r25, X
   1391a:	dc 97       	sbiw	r26, 0x3c	; 60
   1391c:	89 23       	and	r24, r25
   1391e:	80 83       	st	Z, r24
   13920:	d2 96       	adiw	r26, 0x32	; 50
   13922:	ed 91       	ld	r30, X+
   13924:	fc 91       	ld	r31, X
   13926:	d3 97       	sbiw	r26, 0x33	; 51
   13928:	80 81       	ld	r24, Z
   1392a:	d8 96       	adiw	r26, 0x38	; 56
   1392c:	9c 91       	ld	r25, X
   1392e:	d8 97       	sbiw	r26, 0x38	; 56
   13930:	89 2b       	or	r24, r25
   13932:	80 83       	st	Z, r24
   13934:	d0 96       	adiw	r26, 0x30	; 48
   13936:	ed 91       	ld	r30, X+
   13938:	fc 91       	ld	r31, X
   1393a:	d1 97       	sbiw	r26, 0x31	; 49
   1393c:	80 81       	ld	r24, Z
   1393e:	d7 96       	adiw	r26, 0x37	; 55
   13940:	9c 91       	ld	r25, X
   13942:	d7 97       	sbiw	r26, 0x37	; 55
   13944:	89 2b       	or	r24, r25
   13946:	80 83       	st	Z, r24
   13948:	52 b9       	out	0x02, r21	; 2
   1394a:	d2 96       	adiw	r26, 0x32	; 50
   1394c:	ed 91       	ld	r30, X+
   1394e:	fc 91       	ld	r31, X
   13950:	d3 97       	sbiw	r26, 0x33	; 51
   13952:	80 81       	ld	r24, Z
   13954:	dc 96       	adiw	r26, 0x3c	; 60
   13956:	9c 91       	ld	r25, X
   13958:	dc 97       	sbiw	r26, 0x3c	; 60
   1395a:	89 23       	and	r24, r25
   1395c:	80 83       	st	Z, r24
   1395e:	d2 96       	adiw	r26, 0x32	; 50
   13960:	ed 91       	ld	r30, X+
   13962:	fc 91       	ld	r31, X
   13964:	d3 97       	sbiw	r26, 0x33	; 51
   13966:	80 81       	ld	r24, Z
   13968:	d8 96       	adiw	r26, 0x38	; 56
   1396a:	9c 91       	ld	r25, X
   1396c:	d8 97       	sbiw	r26, 0x38	; 56
   1396e:	89 2b       	or	r24, r25
   13970:	80 83       	st	Z, r24
   13972:	d0 96       	adiw	r26, 0x30	; 48
   13974:	ed 91       	ld	r30, X+
   13976:	fc 91       	ld	r31, X
   13978:	d1 97       	sbiw	r26, 0x31	; 49
   1397a:	80 81       	ld	r24, Z
   1397c:	db 96       	adiw	r26, 0x3b	; 59
   1397e:	9c 91       	ld	r25, X
   13980:	db 97       	sbiw	r26, 0x3b	; 59
   13982:	89 23       	and	r24, r25
   13984:	80 83       	st	Z, r24
   13986:	87 e0       	ldi	r24, 0x07	; 7
   13988:	82 b9       	out	0x02, r24	; 2
   1398a:	d2 96       	adiw	r26, 0x32	; 50
   1398c:	ed 91       	ld	r30, X+
   1398e:	fc 91       	ld	r31, X
   13990:	d3 97       	sbiw	r26, 0x33	; 51
   13992:	80 81       	ld	r24, Z
   13994:	dc 96       	adiw	r26, 0x3c	; 60
   13996:	9c 91       	ld	r25, X
   13998:	dc 97       	sbiw	r26, 0x3c	; 60
   1399a:	89 23       	and	r24, r25
   1399c:	80 83       	st	Z, r24
   1399e:	d2 96       	adiw	r26, 0x32	; 50
   139a0:	ed 91       	ld	r30, X+
   139a2:	fc 91       	ld	r31, X
   139a4:	d3 97       	sbiw	r26, 0x33	; 51
   139a6:	80 81       	ld	r24, Z
   139a8:	d8 96       	adiw	r26, 0x38	; 56
   139aa:	9c 91       	ld	r25, X
   139ac:	d8 97       	sbiw	r26, 0x38	; 56
   139ae:	89 2b       	or	r24, r25
   139b0:	80 83       	st	Z, r24
   139b2:	d0 96       	adiw	r26, 0x30	; 48
   139b4:	ed 91       	ld	r30, X+
   139b6:	fc 91       	ld	r31, X
   139b8:	d1 97       	sbiw	r26, 0x31	; 49
   139ba:	80 81       	ld	r24, Z
   139bc:	d7 96       	adiw	r26, 0x37	; 55
   139be:	9c 91       	ld	r25, X
   139c0:	d7 97       	sbiw	r26, 0x37	; 55
   139c2:	89 2b       	or	r24, r25
   139c4:	80 83       	st	Z, r24
   139c6:	42 b9       	out	0x02, r20	; 2
   139c8:	d2 96       	adiw	r26, 0x32	; 50
   139ca:	ed 91       	ld	r30, X+
   139cc:	fc 91       	ld	r31, X
   139ce:	d3 97       	sbiw	r26, 0x33	; 51
   139d0:	80 81       	ld	r24, Z
   139d2:	dc 96       	adiw	r26, 0x3c	; 60
   139d4:	9c 91       	ld	r25, X
   139d6:	dc 97       	sbiw	r26, 0x3c	; 60
   139d8:	89 23       	and	r24, r25
   139da:	80 83       	st	Z, r24
   139dc:	d2 96       	adiw	r26, 0x32	; 50
   139de:	ed 91       	ld	r30, X+
   139e0:	fc 91       	ld	r31, X
   139e2:	d3 97       	sbiw	r26, 0x33	; 51
   139e4:	80 81       	ld	r24, Z
   139e6:	d8 96       	adiw	r26, 0x38	; 56
   139e8:	9c 91       	ld	r25, X
   139ea:	d8 97       	sbiw	r26, 0x38	; 56
   139ec:	89 2b       	or	r24, r25
   139ee:	80 83       	st	Z, r24
   139f0:	d0 96       	adiw	r26, 0x30	; 48
   139f2:	ed 91       	ld	r30, X+
   139f4:	fc 91       	ld	r31, X
   139f6:	d1 97       	sbiw	r26, 0x31	; 49
   139f8:	80 81       	ld	r24, Z
   139fa:	db 96       	adiw	r26, 0x3b	; 59
   139fc:	9c 91       	ld	r25, X
   139fe:	db 97       	sbiw	r26, 0x3b	; 59
   13a00:	89 23       	and	r24, r25
   13a02:	80 83       	st	Z, r24
   13a04:	84 e0       	ldi	r24, 0x04	; 4
   13a06:	82 b9       	out	0x02, r24	; 2
   13a08:	d2 96       	adiw	r26, 0x32	; 50
   13a0a:	ed 91       	ld	r30, X+
   13a0c:	fc 91       	ld	r31, X
   13a0e:	d3 97       	sbiw	r26, 0x33	; 51
   13a10:	80 81       	ld	r24, Z
   13a12:	dc 96       	adiw	r26, 0x3c	; 60
   13a14:	9c 91       	ld	r25, X
   13a16:	dc 97       	sbiw	r26, 0x3c	; 60
   13a18:	89 23       	and	r24, r25
   13a1a:	80 83       	st	Z, r24
   13a1c:	d2 96       	adiw	r26, 0x32	; 50
   13a1e:	ed 91       	ld	r30, X+
   13a20:	fc 91       	ld	r31, X
   13a22:	d3 97       	sbiw	r26, 0x33	; 51
   13a24:	80 81       	ld	r24, Z
   13a26:	d8 96       	adiw	r26, 0x38	; 56
   13a28:	9c 91       	ld	r25, X
   13a2a:	d8 97       	sbiw	r26, 0x38	; 56
   13a2c:	89 2b       	or	r24, r25
   13a2e:	80 83       	st	Z, r24
   13a30:	d0 96       	adiw	r26, 0x30	; 48
   13a32:	ed 91       	ld	r30, X+
   13a34:	fc 91       	ld	r31, X
   13a36:	d1 97       	sbiw	r26, 0x31	; 49
   13a38:	80 81       	ld	r24, Z
   13a3a:	d7 96       	adiw	r26, 0x37	; 55
   13a3c:	9c 91       	ld	r25, X
   13a3e:	d7 97       	sbiw	r26, 0x37	; 55
   13a40:	89 2b       	or	r24, r25
   13a42:	80 83       	st	Z, r24
   13a44:	32 b9       	out	0x02, r19	; 2
   13a46:	d2 96       	adiw	r26, 0x32	; 50
   13a48:	ed 91       	ld	r30, X+
   13a4a:	fc 91       	ld	r31, X
   13a4c:	d3 97       	sbiw	r26, 0x33	; 51
   13a4e:	80 81       	ld	r24, Z
   13a50:	dc 96       	adiw	r26, 0x3c	; 60
   13a52:	9c 91       	ld	r25, X
   13a54:	dc 97       	sbiw	r26, 0x3c	; 60
   13a56:	89 23       	and	r24, r25
   13a58:	80 83       	st	Z, r24
   13a5a:	d2 96       	adiw	r26, 0x32	; 50
   13a5c:	ed 91       	ld	r30, X+
   13a5e:	fc 91       	ld	r31, X
   13a60:	d3 97       	sbiw	r26, 0x33	; 51
   13a62:	80 81       	ld	r24, Z
   13a64:	d8 96       	adiw	r26, 0x38	; 56
   13a66:	9c 91       	ld	r25, X
   13a68:	d8 97       	sbiw	r26, 0x38	; 56
   13a6a:	89 2b       	or	r24, r25
   13a6c:	80 83       	st	Z, r24
   13a6e:	d0 96       	adiw	r26, 0x30	; 48
   13a70:	ed 91       	ld	r30, X+
   13a72:	fc 91       	ld	r31, X
   13a74:	d1 97       	sbiw	r26, 0x31	; 49
   13a76:	80 81       	ld	r24, Z
   13a78:	db 96       	adiw	r26, 0x3b	; 59
   13a7a:	9c 91       	ld	r25, X
   13a7c:	db 97       	sbiw	r26, 0x3b	; 59
   13a7e:	89 23       	and	r24, r25
   13a80:	80 83       	st	Z, r24
   13a82:	85 e0       	ldi	r24, 0x05	; 5
   13a84:	82 b9       	out	0x02, r24	; 2
   13a86:	d2 96       	adiw	r26, 0x32	; 50
   13a88:	ed 91       	ld	r30, X+
   13a8a:	fc 91       	ld	r31, X
   13a8c:	d3 97       	sbiw	r26, 0x33	; 51
   13a8e:	80 81       	ld	r24, Z
   13a90:	dc 96       	adiw	r26, 0x3c	; 60
   13a92:	9c 91       	ld	r25, X
   13a94:	dc 97       	sbiw	r26, 0x3c	; 60
   13a96:	89 23       	and	r24, r25
   13a98:	80 83       	st	Z, r24
   13a9a:	d2 96       	adiw	r26, 0x32	; 50
   13a9c:	ed 91       	ld	r30, X+
   13a9e:	fc 91       	ld	r31, X
   13aa0:	d3 97       	sbiw	r26, 0x33	; 51
   13aa2:	80 81       	ld	r24, Z
   13aa4:	d8 96       	adiw	r26, 0x38	; 56
   13aa6:	9c 91       	ld	r25, X
   13aa8:	d8 97       	sbiw	r26, 0x38	; 56
   13aaa:	89 2b       	or	r24, r25
   13aac:	80 83       	st	Z, r24
   13aae:	d0 96       	adiw	r26, 0x30	; 48
   13ab0:	ed 91       	ld	r30, X+
   13ab2:	fc 91       	ld	r31, X
   13ab4:	d1 97       	sbiw	r26, 0x31	; 49
   13ab6:	80 81       	ld	r24, Z
   13ab8:	d7 96       	adiw	r26, 0x37	; 55
   13aba:	9c 91       	ld	r25, X
   13abc:	d7 97       	sbiw	r26, 0x37	; 55
   13abe:	89 2b       	or	r24, r25
   13ac0:	80 83       	st	Z, r24
   13ac2:	22 b9       	out	0x02, r18	; 2
   13ac4:	d2 96       	adiw	r26, 0x32	; 50
   13ac6:	ed 91       	ld	r30, X+
   13ac8:	fc 91       	ld	r31, X
   13aca:	d3 97       	sbiw	r26, 0x33	; 51
   13acc:	80 81       	ld	r24, Z
   13ace:	dc 96       	adiw	r26, 0x3c	; 60
   13ad0:	9c 91       	ld	r25, X
   13ad2:	dc 97       	sbiw	r26, 0x3c	; 60
   13ad4:	89 23       	and	r24, r25
   13ad6:	80 83       	st	Z, r24
   13ad8:	d2 96       	adiw	r26, 0x32	; 50
   13ada:	ed 91       	ld	r30, X+
   13adc:	fc 91       	ld	r31, X
   13ade:	d3 97       	sbiw	r26, 0x33	; 51
   13ae0:	80 81       	ld	r24, Z
   13ae2:	d8 96       	adiw	r26, 0x38	; 56
   13ae4:	9c 91       	ld	r25, X
   13ae6:	d8 97       	sbiw	r26, 0x38	; 56
   13ae8:	89 2b       	or	r24, r25
   13aea:	80 83       	st	Z, r24
   13aec:	d0 96       	adiw	r26, 0x30	; 48
   13aee:	ed 91       	ld	r30, X+
   13af0:	fc 91       	ld	r31, X
   13af2:	d1 97       	sbiw	r26, 0x31	; 49
   13af4:	80 81       	ld	r24, Z
   13af6:	db 96       	adiw	r26, 0x3b	; 59
   13af8:	9c 91       	ld	r25, X
   13afa:	db 97       	sbiw	r26, 0x3b	; 59
   13afc:	89 23       	and	r24, r25
   13afe:	80 83       	st	Z, r24
   13b00:	88 e0       	ldi	r24, 0x08	; 8
   13b02:	82 b9       	out	0x02, r24	; 2
   13b04:	d2 96       	adiw	r26, 0x32	; 50
   13b06:	ed 91       	ld	r30, X+
   13b08:	fc 91       	ld	r31, X
   13b0a:	d3 97       	sbiw	r26, 0x33	; 51
   13b0c:	80 81       	ld	r24, Z
   13b0e:	dc 96       	adiw	r26, 0x3c	; 60
   13b10:	9c 91       	ld	r25, X
   13b12:	dc 97       	sbiw	r26, 0x3c	; 60
   13b14:	89 23       	and	r24, r25
   13b16:	80 83       	st	Z, r24
   13b18:	d2 96       	adiw	r26, 0x32	; 50
   13b1a:	ed 91       	ld	r30, X+
   13b1c:	fc 91       	ld	r31, X
   13b1e:	d3 97       	sbiw	r26, 0x33	; 51
   13b20:	80 81       	ld	r24, Z
   13b22:	d8 96       	adiw	r26, 0x38	; 56
   13b24:	9c 91       	ld	r25, X
   13b26:	d8 97       	sbiw	r26, 0x38	; 56
   13b28:	89 2b       	or	r24, r25
   13b2a:	80 83       	st	Z, r24
   13b2c:	d0 96       	adiw	r26, 0x30	; 48
   13b2e:	ed 91       	ld	r30, X+
   13b30:	fc 91       	ld	r31, X
   13b32:	d1 97       	sbiw	r26, 0x31	; 49
   13b34:	80 81       	ld	r24, Z
   13b36:	d7 96       	adiw	r26, 0x37	; 55
   13b38:	9c 91       	ld	r25, X
   13b3a:	d7 97       	sbiw	r26, 0x37	; 55
   13b3c:	89 2b       	or	r24, r25
   13b3e:	80 83       	st	Z, r24
   13b40:	12 b9       	out	0x02, r17	; 2
   13b42:	d2 96       	adiw	r26, 0x32	; 50
   13b44:	ed 91       	ld	r30, X+
   13b46:	fc 91       	ld	r31, X
   13b48:	d3 97       	sbiw	r26, 0x33	; 51
   13b4a:	80 81       	ld	r24, Z
   13b4c:	dc 96       	adiw	r26, 0x3c	; 60
   13b4e:	9c 91       	ld	r25, X
   13b50:	dc 97       	sbiw	r26, 0x3c	; 60
   13b52:	89 23       	and	r24, r25
   13b54:	80 83       	st	Z, r24
   13b56:	d2 96       	adiw	r26, 0x32	; 50
   13b58:	ed 91       	ld	r30, X+
   13b5a:	fc 91       	ld	r31, X
   13b5c:	d3 97       	sbiw	r26, 0x33	; 51
   13b5e:	80 81       	ld	r24, Z
   13b60:	d8 96       	adiw	r26, 0x38	; 56
   13b62:	9c 91       	ld	r25, X
   13b64:	d8 97       	sbiw	r26, 0x38	; 56
   13b66:	89 2b       	or	r24, r25
   13b68:	80 83       	st	Z, r24
   13b6a:	d0 96       	adiw	r26, 0x30	; 48
   13b6c:	ed 91       	ld	r30, X+
   13b6e:	fc 91       	ld	r31, X
   13b70:	d1 97       	sbiw	r26, 0x31	; 49
   13b72:	80 81       	ld	r24, Z
   13b74:	db 96       	adiw	r26, 0x3b	; 59
   13b76:	9c 91       	ld	r25, X
   13b78:	db 97       	sbiw	r26, 0x3b	; 59
   13b7a:	89 23       	and	r24, r25
   13b7c:	80 83       	st	Z, r24
   13b7e:	89 e0       	ldi	r24, 0x09	; 9
   13b80:	82 b9       	out	0x02, r24	; 2
   13b82:	d2 96       	adiw	r26, 0x32	; 50
   13b84:	ed 91       	ld	r30, X+
   13b86:	fc 91       	ld	r31, X
   13b88:	d3 97       	sbiw	r26, 0x33	; 51
   13b8a:	80 81       	ld	r24, Z
   13b8c:	dc 96       	adiw	r26, 0x3c	; 60
   13b8e:	9c 91       	ld	r25, X
   13b90:	dc 97       	sbiw	r26, 0x3c	; 60
   13b92:	89 23       	and	r24, r25
   13b94:	80 83       	st	Z, r24
   13b96:	d2 96       	adiw	r26, 0x32	; 50
   13b98:	ed 91       	ld	r30, X+
   13b9a:	fc 91       	ld	r31, X
   13b9c:	d3 97       	sbiw	r26, 0x33	; 51
   13b9e:	80 81       	ld	r24, Z
   13ba0:	d8 96       	adiw	r26, 0x38	; 56
   13ba2:	9c 91       	ld	r25, X
   13ba4:	d8 97       	sbiw	r26, 0x38	; 56
   13ba6:	89 2b       	or	r24, r25
   13ba8:	80 83       	st	Z, r24
   13baa:	d0 96       	adiw	r26, 0x30	; 48
   13bac:	ed 91       	ld	r30, X+
   13bae:	fc 91       	ld	r31, X
   13bb0:	d1 97       	sbiw	r26, 0x31	; 49
   13bb2:	80 81       	ld	r24, Z
   13bb4:	d7 96       	adiw	r26, 0x37	; 55
   13bb6:	9c 91       	ld	r25, X
   13bb8:	d7 97       	sbiw	r26, 0x37	; 55
   13bba:	89 2b       	or	r24, r25
   13bbc:	80 83       	st	Z, r24
   13bbe:	02 b9       	out	0x02, r16	; 2
   13bc0:	b9 cd       	rjmp	.-1166   	; 0x13734 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
   13bc2:	7d 83       	std	Y+5, r23	; 0x05
   13bc4:	6e 83       	std	Y+6, r22	; 0x06
   13bc6:	3f 83       	std	Y+7, r19	; 0x07
   13bc8:	28 87       	std	Y+8, r18	; 0x08
   13bca:	59 83       	std	Y+1, r21	; 0x01
   13bcc:	4a 83       	std	Y+2, r20	; 0x02
   13bce:	1b 83       	std	Y+3, r17	; 0x03
   13bd0:	0c 83       	std	Y+4, r16	; 0x04
   13bd2:	f7 01       	movw	r30, r14
   13bd4:	64 8d       	ldd	r22, Z+28	; 0x1c
   13bd6:	75 8d       	ldd	r23, Z+29	; 0x1d
   13bd8:	24 e0       	ldi	r18, 0x04	; 4
   13bda:	ae 01       	movw	r20, r28
   13bdc:	4b 5f       	subi	r20, 0xFB	; 251
   13bde:	5f 4f       	sbci	r21, 0xFF	; 255
   13be0:	c7 01       	movw	r24, r14
   13be2:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13be6:	d7 01       	movw	r26, r14
   13be8:	5e 96       	adiw	r26, 0x1e	; 30
   13bea:	6d 91       	ld	r22, X+
   13bec:	7c 91       	ld	r23, X
   13bee:	24 e0       	ldi	r18, 0x04	; 4
   13bf0:	ae 01       	movw	r20, r28
   13bf2:	4f 5f       	subi	r20, 0xFF	; 255
   13bf4:	5f 4f       	sbci	r21, 0xFF	; 255
   13bf6:	c7 01       	movw	r24, r14
   13bf8:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   13bfc:	ae cd       	rjmp	.-1188   	; 0x1375a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00013bfe <LCDWIKI_KBV::Set_LR()>:
_ZN11LCDWIKI_KBV6Set_LREv():
   13bfe:	fc 01       	movw	r30, r24
   13c00:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13c02:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13c04:	8c 91       	ld	r24, X
   13c06:	92 ad       	ldd	r25, Z+58	; 0x3a
   13c08:	89 23       	and	r24, r25
   13c0a:	8c 93       	st	X, r24
   13c0c:	a0 a9       	ldd	r26, Z+48	; 0x30
   13c0e:	b1 a9       	ldd	r27, Z+49	; 0x31
   13c10:	8c 91       	ld	r24, X
   13c12:	93 ad       	ldd	r25, Z+59	; 0x3b
   13c14:	89 23       	and	r24, r25
   13c16:	8c 93       	st	X, r24
   13c18:	84 e0       	ldi	r24, 0x04	; 4
   13c1a:	82 b9       	out	0x02, r24	; 2
   13c1c:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c1e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c20:	8c 91       	ld	r24, X
   13c22:	94 ad       	ldd	r25, Z+60	; 0x3c
   13c24:	89 23       	and	r24, r25
   13c26:	8c 93       	st	X, r24
   13c28:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c2a:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c2c:	8c 91       	ld	r24, X
   13c2e:	90 ad       	ldd	r25, Z+56	; 0x38
   13c30:	89 2b       	or	r24, r25
   13c32:	8c 93       	st	X, r24
   13c34:	a0 a9       	ldd	r26, Z+48	; 0x30
   13c36:	b1 a9       	ldd	r27, Z+49	; 0x31
   13c38:	8c 91       	ld	r24, X
   13c3a:	97 a9       	ldd	r25, Z+55	; 0x37
   13c3c:	89 2b       	or	r24, r25
   13c3e:	8c 93       	st	X, r24
   13c40:	82 89       	ldd	r24, Z+18	; 0x12
   13c42:	93 89       	ldd	r25, Z+19	; 0x13
   13c44:	01 97       	sbiw	r24, 0x01	; 1
   13c46:	92 b9       	out	0x02, r25	; 2
   13c48:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c4a:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c4c:	8c 91       	ld	r24, X
   13c4e:	94 ad       	ldd	r25, Z+60	; 0x3c
   13c50:	89 23       	and	r24, r25
   13c52:	8c 93       	st	X, r24
   13c54:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c56:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c58:	8c 91       	ld	r24, X
   13c5a:	90 ad       	ldd	r25, Z+56	; 0x38
   13c5c:	89 2b       	or	r24, r25
   13c5e:	8c 93       	st	X, r24
   13c60:	a0 a9       	ldd	r26, Z+48	; 0x30
   13c62:	b1 a9       	ldd	r27, Z+49	; 0x31
   13c64:	8c 91       	ld	r24, X
   13c66:	93 ad       	ldd	r25, Z+59	; 0x3b
   13c68:	89 23       	and	r24, r25
   13c6a:	8c 93       	st	X, r24
   13c6c:	85 e0       	ldi	r24, 0x05	; 5
   13c6e:	82 b9       	out	0x02, r24	; 2
   13c70:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c72:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c74:	8c 91       	ld	r24, X
   13c76:	94 ad       	ldd	r25, Z+60	; 0x3c
   13c78:	89 23       	and	r24, r25
   13c7a:	8c 93       	st	X, r24
   13c7c:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c7e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c80:	8c 91       	ld	r24, X
   13c82:	90 ad       	ldd	r25, Z+56	; 0x38
   13c84:	89 2b       	or	r24, r25
   13c86:	8c 93       	st	X, r24
   13c88:	a0 a9       	ldd	r26, Z+48	; 0x30
   13c8a:	b1 a9       	ldd	r27, Z+49	; 0x31
   13c8c:	8c 91       	ld	r24, X
   13c8e:	97 a9       	ldd	r25, Z+55	; 0x37
   13c90:	89 2b       	or	r24, r25
   13c92:	8c 93       	st	X, r24
   13c94:	82 89       	ldd	r24, Z+18	; 0x12
   13c96:	81 50       	subi	r24, 0x01	; 1
   13c98:	82 b9       	out	0x02, r24	; 2
   13c9a:	a2 a9       	ldd	r26, Z+50	; 0x32
   13c9c:	b3 a9       	ldd	r27, Z+51	; 0x33
   13c9e:	8c 91       	ld	r24, X
   13ca0:	94 ad       	ldd	r25, Z+60	; 0x3c
   13ca2:	89 23       	and	r24, r25
   13ca4:	8c 93       	st	X, r24
   13ca6:	a2 a9       	ldd	r26, Z+50	; 0x32
   13ca8:	b3 a9       	ldd	r27, Z+51	; 0x33
   13caa:	8c 91       	ld	r24, X
   13cac:	90 ad       	ldd	r25, Z+56	; 0x38
   13cae:	89 2b       	or	r24, r25
   13cb0:	8c 93       	st	X, r24
   13cb2:	a0 a9       	ldd	r26, Z+48	; 0x30
   13cb4:	b1 a9       	ldd	r27, Z+49	; 0x31
   13cb6:	8c 91       	ld	r24, X
   13cb8:	93 ad       	ldd	r25, Z+59	; 0x3b
   13cba:	89 23       	and	r24, r25
   13cbc:	8c 93       	st	X, r24
   13cbe:	88 e0       	ldi	r24, 0x08	; 8
   13cc0:	82 b9       	out	0x02, r24	; 2
   13cc2:	a2 a9       	ldd	r26, Z+50	; 0x32
   13cc4:	b3 a9       	ldd	r27, Z+51	; 0x33
   13cc6:	8c 91       	ld	r24, X
   13cc8:	94 ad       	ldd	r25, Z+60	; 0x3c
   13cca:	89 23       	and	r24, r25
   13ccc:	8c 93       	st	X, r24
   13cce:	a2 a9       	ldd	r26, Z+50	; 0x32
   13cd0:	b3 a9       	ldd	r27, Z+51	; 0x33
   13cd2:	8c 91       	ld	r24, X
   13cd4:	90 ad       	ldd	r25, Z+56	; 0x38
   13cd6:	89 2b       	or	r24, r25
   13cd8:	8c 93       	st	X, r24
   13cda:	a0 a9       	ldd	r26, Z+48	; 0x30
   13cdc:	b1 a9       	ldd	r27, Z+49	; 0x31
   13cde:	8c 91       	ld	r24, X
   13ce0:	97 a9       	ldd	r25, Z+55	; 0x37
   13ce2:	89 2b       	or	r24, r25
   13ce4:	8c 93       	st	X, r24
   13ce6:	84 89       	ldd	r24, Z+20	; 0x14
   13ce8:	95 89       	ldd	r25, Z+21	; 0x15
   13cea:	01 97       	sbiw	r24, 0x01	; 1
   13cec:	92 b9       	out	0x02, r25	; 2
   13cee:	a2 a9       	ldd	r26, Z+50	; 0x32
   13cf0:	b3 a9       	ldd	r27, Z+51	; 0x33
   13cf2:	8c 91       	ld	r24, X
   13cf4:	94 ad       	ldd	r25, Z+60	; 0x3c
   13cf6:	89 23       	and	r24, r25
   13cf8:	8c 93       	st	X, r24
   13cfa:	a2 a9       	ldd	r26, Z+50	; 0x32
   13cfc:	b3 a9       	ldd	r27, Z+51	; 0x33
   13cfe:	8c 91       	ld	r24, X
   13d00:	90 ad       	ldd	r25, Z+56	; 0x38
   13d02:	89 2b       	or	r24, r25
   13d04:	8c 93       	st	X, r24
   13d06:	a0 a9       	ldd	r26, Z+48	; 0x30
   13d08:	b1 a9       	ldd	r27, Z+49	; 0x31
   13d0a:	8c 91       	ld	r24, X
   13d0c:	93 ad       	ldd	r25, Z+59	; 0x3b
   13d0e:	89 23       	and	r24, r25
   13d10:	8c 93       	st	X, r24
   13d12:	89 e0       	ldi	r24, 0x09	; 9
   13d14:	82 b9       	out	0x02, r24	; 2
   13d16:	a2 a9       	ldd	r26, Z+50	; 0x32
   13d18:	b3 a9       	ldd	r27, Z+51	; 0x33
   13d1a:	8c 91       	ld	r24, X
   13d1c:	94 ad       	ldd	r25, Z+60	; 0x3c
   13d1e:	89 23       	and	r24, r25
   13d20:	8c 93       	st	X, r24
   13d22:	a2 a9       	ldd	r26, Z+50	; 0x32
   13d24:	b3 a9       	ldd	r27, Z+51	; 0x33
   13d26:	8c 91       	ld	r24, X
   13d28:	90 ad       	ldd	r25, Z+56	; 0x38
   13d2a:	89 2b       	or	r24, r25
   13d2c:	8c 93       	st	X, r24
   13d2e:	a0 a9       	ldd	r26, Z+48	; 0x30
   13d30:	b1 a9       	ldd	r27, Z+49	; 0x31
   13d32:	8c 91       	ld	r24, X
   13d34:	97 a9       	ldd	r25, Z+55	; 0x37
   13d36:	89 2b       	or	r24, r25
   13d38:	8c 93       	st	X, r24
   13d3a:	84 89       	ldd	r24, Z+20	; 0x14
   13d3c:	81 50       	subi	r24, 0x01	; 1
   13d3e:	82 b9       	out	0x02, r24	; 2
   13d40:	a2 a9       	ldd	r26, Z+50	; 0x32
   13d42:	b3 a9       	ldd	r27, Z+51	; 0x33
   13d44:	8c 91       	ld	r24, X
   13d46:	94 ad       	ldd	r25, Z+60	; 0x3c
   13d48:	89 23       	and	r24, r25
   13d4a:	8c 93       	st	X, r24
   13d4c:	a2 a9       	ldd	r26, Z+50	; 0x32
   13d4e:	b3 a9       	ldd	r27, Z+51	; 0x33
   13d50:	8c 91       	ld	r24, X
   13d52:	90 ad       	ldd	r25, Z+56	; 0x38
   13d54:	89 2b       	or	r24, r25
   13d56:	8c 93       	st	X, r24
   13d58:	a6 a5       	ldd	r26, Z+46	; 0x2e
   13d5a:	b7 a5       	ldd	r27, Z+47	; 0x2f
   13d5c:	8c 91       	ld	r24, X
   13d5e:	96 a9       	ldd	r25, Z+54	; 0x36
   13d60:	89 2b       	or	r24, r25
   13d62:	8c 93       	st	X, r24
   13d64:	08 95       	ret

00013d66 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
   13d66:	4f 92       	push	r4
   13d68:	5f 92       	push	r5
   13d6a:	6f 92       	push	r6
   13d6c:	7f 92       	push	r7
   13d6e:	8f 92       	push	r8
   13d70:	9f 92       	push	r9
   13d72:	af 92       	push	r10
   13d74:	bf 92       	push	r11
   13d76:	cf 92       	push	r12
   13d78:	df 92       	push	r13
   13d7a:	ef 92       	push	r14
   13d7c:	ff 92       	push	r15
   13d7e:	0f 93       	push	r16
   13d80:	1f 93       	push	r17
   13d82:	cf 93       	push	r28
   13d84:	df 93       	push	r29
   13d86:	ec 01       	movw	r28, r24
   13d88:	5a 01       	movw	r10, r20
   13d8a:	27 01       	movw	r4, r14
   13d8c:	37 ff       	sbrs	r19, 7
   13d8e:	05 c0       	rjmp	.+10     	; 0x13d9a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
   13d90:	62 0f       	add	r22, r18
   13d92:	73 1f       	adc	r23, r19
   13d94:	31 95       	neg	r19
   13d96:	21 95       	neg	r18
   13d98:	31 09       	sbc	r19, r1
   13d9a:	7b 01       	movw	r14, r22
   13d9c:	e2 0e       	add	r14, r18
   13d9e:	f3 1e       	adc	r15, r19
   13da0:	6b 01       	movw	r12, r22
   13da2:	77 ff       	sbrs	r23, 7
   13da4:	02 c0       	rjmp	.+4      	; 0x13daa <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
   13da6:	d1 2c       	mov	r13, r1
   13da8:	c1 2c       	mov	r12, r1
   13daa:	e8 81       	ld	r30, Y
   13dac:	f9 81       	ldd	r31, Y+1	; 0x01
   13dae:	06 84       	ldd	r0, Z+14	; 0x0e
   13db0:	f7 85       	ldd	r31, Z+15	; 0x0f
   13db2:	e0 2d       	mov	r30, r0
   13db4:	ce 01       	movw	r24, r28
   13db6:	19 95       	eicall
   13db8:	8e 15       	cp	r24, r14
   13dba:	9f 05       	cpc	r25, r15
   13dbc:	44 f4       	brge	.+16     	; 0x13dce <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
   13dbe:	e8 81       	ld	r30, Y
   13dc0:	f9 81       	ldd	r31, Y+1	; 0x01
   13dc2:	06 84       	ldd	r0, Z+14	; 0x0e
   13dc4:	f7 85       	ldd	r31, Z+15	; 0x0f
   13dc6:	e0 2d       	mov	r30, r0
   13dc8:	ce 01       	movw	r24, r28
   13dca:	19 95       	eicall
   13dcc:	7c 01       	movw	r14, r24
   13dce:	47 01       	movw	r8, r14
   13dd0:	8c 18       	sub	r8, r12
   13dd2:	9d 08       	sbc	r9, r13
   13dd4:	17 ff       	sbrs	r17, 7
   13dd6:	05 c0       	rjmp	.+10     	; 0x13de2 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
   13dd8:	a0 0e       	add	r10, r16
   13dda:	b1 1e       	adc	r11, r17
   13ddc:	11 95       	neg	r17
   13dde:	01 95       	neg	r16
   13de0:	11 09       	sbc	r17, r1
   13de2:	0a 0d       	add	r16, r10
   13de4:	1b 1d       	adc	r17, r11
   13de6:	b7 fe       	sbrs	r11, 7
   13de8:	02 c0       	rjmp	.+4      	; 0x13dee <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
   13dea:	b1 2c       	mov	r11, r1
   13dec:	a1 2c       	mov	r10, r1
   13dee:	e8 81       	ld	r30, Y
   13df0:	f9 81       	ldd	r31, Y+1	; 0x01
   13df2:	04 84       	ldd	r0, Z+12	; 0x0c
   13df4:	f5 85       	ldd	r31, Z+13	; 0x0d
   13df6:	e0 2d       	mov	r30, r0
   13df8:	ce 01       	movw	r24, r28
   13dfa:	19 95       	eicall
   13dfc:	80 17       	cp	r24, r16
   13dfe:	91 07       	cpc	r25, r17
   13e00:	44 f4       	brge	.+16     	; 0x13e12 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
   13e02:	e8 81       	ld	r30, Y
   13e04:	f9 81       	ldd	r31, Y+1	; 0x01
   13e06:	04 84       	ldd	r0, Z+12	; 0x0c
   13e08:	f5 85       	ldd	r31, Z+13	; 0x0d
   13e0a:	e0 2d       	mov	r30, r0
   13e0c:	ce 01       	movw	r24, r28
   13e0e:	19 95       	eicall
   13e10:	8c 01       	movw	r16, r24
   13e12:	38 01       	movw	r6, r16
   13e14:	6a 18       	sub	r6, r10
   13e16:	7b 08       	sbc	r7, r11
   13e18:	01 50       	subi	r16, 0x01	; 1
   13e1a:	11 09       	sbc	r17, r1
   13e1c:	97 01       	movw	r18, r14
   13e1e:	21 50       	subi	r18, 0x01	; 1
   13e20:	31 09       	sbc	r19, r1
   13e22:	e8 81       	ld	r30, Y
   13e24:	f9 81       	ldd	r31, Y+1	; 0x01
   13e26:	06 80       	ldd	r0, Z+6	; 0x06
   13e28:	f7 81       	ldd	r31, Z+7	; 0x07
   13e2a:	e0 2d       	mov	r30, r0
   13e2c:	a5 01       	movw	r20, r10
   13e2e:	b6 01       	movw	r22, r12
   13e30:	ce 01       	movw	r24, r28
   13e32:	19 95       	eicall
   13e34:	ee a5       	ldd	r30, Y+46	; 0x2e
   13e36:	ff a5       	ldd	r31, Y+47	; 0x2f
   13e38:	80 81       	ld	r24, Z
   13e3a:	9a ad       	ldd	r25, Y+58	; 0x3a
   13e3c:	89 23       	and	r24, r25
   13e3e:	80 83       	st	Z, r24
   13e40:	88 8d       	ldd	r24, Y+24	; 0x18
   13e42:	99 8d       	ldd	r25, Y+25	; 0x19
   13e44:	89 2b       	or	r24, r25
   13e46:	c9 f4       	brne	.+50     	; 0x13e7a <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
   13e48:	e8 a9       	ldd	r30, Y+48	; 0x30
   13e4a:	f9 a9       	ldd	r31, Y+49	; 0x31
   13e4c:	80 81       	ld	r24, Z
   13e4e:	9b ad       	ldd	r25, Y+59	; 0x3b
   13e50:	89 23       	and	r24, r25
   13e52:	80 83       	st	Z, r24
   13e54:	12 b8       	out	0x02, r1	; 2
   13e56:	ea a9       	ldd	r30, Y+50	; 0x32
   13e58:	fb a9       	ldd	r31, Y+51	; 0x33
   13e5a:	80 81       	ld	r24, Z
   13e5c:	9c ad       	ldd	r25, Y+60	; 0x3c
   13e5e:	89 23       	and	r24, r25
   13e60:	80 83       	st	Z, r24
   13e62:	ea a9       	ldd	r30, Y+50	; 0x32
   13e64:	fb a9       	ldd	r31, Y+51	; 0x33
   13e66:	80 81       	ld	r24, Z
   13e68:	98 ad       	ldd	r25, Y+56	; 0x38
   13e6a:	89 2b       	or	r24, r25
   13e6c:	80 83       	st	Z, r24
   13e6e:	e8 a9       	ldd	r30, Y+48	; 0x30
   13e70:	f9 a9       	ldd	r31, Y+49	; 0x31
   13e72:	80 81       	ld	r24, Z
   13e74:	9f a9       	ldd	r25, Y+55	; 0x37
   13e76:	89 2b       	or	r24, r25
   13e78:	80 83       	st	Z, r24
   13e7a:	e8 a9       	ldd	r30, Y+48	; 0x30
   13e7c:	f9 a9       	ldd	r31, Y+49	; 0x31
   13e7e:	80 81       	ld	r24, Z
   13e80:	9b ad       	ldd	r25, Y+59	; 0x3b
   13e82:	89 23       	and	r24, r25
   13e84:	80 83       	st	Z, r24
   13e86:	88 a1       	ldd	r24, Y+32	; 0x20
   13e88:	82 b9       	out	0x02, r24	; 2
   13e8a:	ea a9       	ldd	r30, Y+50	; 0x32
   13e8c:	fb a9       	ldd	r31, Y+51	; 0x33
   13e8e:	80 81       	ld	r24, Z
   13e90:	9c ad       	ldd	r25, Y+60	; 0x3c
   13e92:	89 23       	and	r24, r25
   13e94:	80 83       	st	Z, r24
   13e96:	ea a9       	ldd	r30, Y+50	; 0x32
   13e98:	fb a9       	ldd	r31, Y+51	; 0x33
   13e9a:	80 81       	ld	r24, Z
   13e9c:	98 ad       	ldd	r25, Y+56	; 0x38
   13e9e:	89 2b       	or	r24, r25
   13ea0:	80 83       	st	Z, r24
   13ea2:	e8 a9       	ldd	r30, Y+48	; 0x30
   13ea4:	f9 a9       	ldd	r31, Y+49	; 0x31
   13ea6:	80 81       	ld	r24, Z
   13ea8:	9f a9       	ldd	r25, Y+55	; 0x37
   13eaa:	89 2b       	or	r24, r25
   13eac:	80 83       	st	Z, r24
   13eae:	86 14       	cp	r8, r6
   13eb0:	97 04       	cpc	r9, r7
   13eb2:	2c f0       	brlt	.+10     	; 0x13ebe <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   13eb4:	96 2d       	mov	r25, r6
   13eb6:	87 2d       	mov	r24, r7
   13eb8:	34 01       	movw	r6, r8
   13eba:	89 2e       	mov	r8, r25
   13ebc:	98 2e       	mov	r9, r24
   13ebe:	18 14       	cp	r1, r8
   13ec0:	19 04       	cpc	r1, r9
   13ec2:	0c f5       	brge	.+66     	; 0x13f06 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
   13ec4:	c3 01       	movw	r24, r6
   13ec6:	52 b8       	out	0x02, r5	; 2
   13ec8:	ea a9       	ldd	r30, Y+50	; 0x32
   13eca:	fb a9       	ldd	r31, Y+51	; 0x33
   13ecc:	20 81       	ld	r18, Z
   13ece:	3c ad       	ldd	r19, Y+60	; 0x3c
   13ed0:	23 23       	and	r18, r19
   13ed2:	20 83       	st	Z, r18
   13ed4:	ea a9       	ldd	r30, Y+50	; 0x32
   13ed6:	fb a9       	ldd	r31, Y+51	; 0x33
   13ed8:	20 81       	ld	r18, Z
   13eda:	38 ad       	ldd	r19, Y+56	; 0x38
   13edc:	23 2b       	or	r18, r19
   13ede:	20 83       	st	Z, r18
   13ee0:	42 b8       	out	0x02, r4	; 2
   13ee2:	ea a9       	ldd	r30, Y+50	; 0x32
   13ee4:	fb a9       	ldd	r31, Y+51	; 0x33
   13ee6:	20 81       	ld	r18, Z
   13ee8:	3c ad       	ldd	r19, Y+60	; 0x3c
   13eea:	23 23       	and	r18, r19
   13eec:	20 83       	st	Z, r18
   13eee:	ea a9       	ldd	r30, Y+50	; 0x32
   13ef0:	fb a9       	ldd	r31, Y+51	; 0x33
   13ef2:	20 81       	ld	r18, Z
   13ef4:	38 ad       	ldd	r19, Y+56	; 0x38
   13ef6:	23 2b       	or	r18, r19
   13ef8:	20 83       	st	Z, r18
   13efa:	01 97       	sbiw	r24, 0x01	; 1
   13efc:	21 f7       	brne	.-56     	; 0x13ec6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
   13efe:	81 e0       	ldi	r24, 0x01	; 1
   13f00:	88 1a       	sub	r8, r24
   13f02:	91 08       	sbc	r9, r1
   13f04:	dc cf       	rjmp	.-72     	; 0x13ebe <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
   13f06:	88 8d       	ldd	r24, Y+24	; 0x18
   13f08:	99 8d       	ldd	r25, Y+25	; 0x19
   13f0a:	00 97       	sbiw	r24, 0x00	; 0
   13f0c:	51 f5       	brne	.+84     	; 0x13f62 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
   13f0e:	0c 89       	ldd	r16, Y+20	; 0x14
   13f10:	1d 89       	ldd	r17, Y+21	; 0x15
   13f12:	01 50       	subi	r16, 0x01	; 1
   13f14:	11 09       	sbc	r17, r1
   13f16:	2a 89       	ldd	r18, Y+18	; 0x12
   13f18:	3b 89       	ldd	r19, Y+19	; 0x13
   13f1a:	21 50       	subi	r18, 0x01	; 1
   13f1c:	31 09       	sbc	r19, r1
   13f1e:	e8 81       	ld	r30, Y
   13f20:	f9 81       	ldd	r31, Y+1	; 0x01
   13f22:	06 80       	ldd	r0, Z+6	; 0x06
   13f24:	f7 81       	ldd	r31, Z+7	; 0x07
   13f26:	e0 2d       	mov	r30, r0
   13f28:	50 e0       	ldi	r21, 0x00	; 0
   13f2a:	40 e0       	ldi	r20, 0x00	; 0
   13f2c:	70 e0       	ldi	r23, 0x00	; 0
   13f2e:	60 e0       	ldi	r22, 0x00	; 0
   13f30:	ce 01       	movw	r24, r28
   13f32:	19 95       	eicall
   13f34:	ee a5       	ldd	r30, Y+46	; 0x2e
   13f36:	ff a5       	ldd	r31, Y+47	; 0x2f
   13f38:	80 81       	ld	r24, Z
   13f3a:	9e a9       	ldd	r25, Y+54	; 0x36
   13f3c:	89 2b       	or	r24, r25
   13f3e:	80 83       	st	Z, r24
   13f40:	df 91       	pop	r29
   13f42:	cf 91       	pop	r28
   13f44:	1f 91       	pop	r17
   13f46:	0f 91       	pop	r16
   13f48:	ff 90       	pop	r15
   13f4a:	ef 90       	pop	r14
   13f4c:	df 90       	pop	r13
   13f4e:	cf 90       	pop	r12
   13f50:	bf 90       	pop	r11
   13f52:	af 90       	pop	r10
   13f54:	9f 90       	pop	r9
   13f56:	8f 90       	pop	r8
   13f58:	7f 90       	pop	r7
   13f5a:	6f 90       	pop	r6
   13f5c:	5f 90       	pop	r5
   13f5e:	4f 90       	pop	r4
   13f60:	08 95       	ret
   13f62:	01 97       	sbiw	r24, 0x01	; 1
   13f64:	39 f7       	brne	.-50     	; 0x13f34 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
   13f66:	ce 01       	movw	r24, r28
   13f68:	0e 94 ff 9d 	call	0x13bfe	; 0x13bfe <LCDWIKI_KBV::Set_LR()>
   13f6c:	e3 cf       	rjmp	.-58     	; 0x13f34 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00013f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_KBV8Read_RegEja():
   13f6e:	1f 93       	push	r17
   13f70:	cf 93       	push	r28
   13f72:	df 93       	push	r29
   13f74:	ec 01       	movw	r28, r24
   13f76:	14 2f       	mov	r17, r20
   13f78:	ee a5       	ldd	r30, Y+46	; 0x2e
   13f7a:	ff a5       	ldd	r31, Y+47	; 0x2f
   13f7c:	80 81       	ld	r24, Z
   13f7e:	9a ad       	ldd	r25, Y+58	; 0x3a
   13f80:	89 23       	and	r24, r25
   13f82:	80 83       	st	Z, r24
   13f84:	e8 a9       	ldd	r30, Y+48	; 0x30
   13f86:	f9 a9       	ldd	r31, Y+49	; 0x31
   13f88:	80 81       	ld	r24, Z
   13f8a:	9b ad       	ldd	r25, Y+59	; 0x3b
   13f8c:	89 23       	and	r24, r25
   13f8e:	80 83       	st	Z, r24
   13f90:	72 b9       	out	0x02, r23	; 2
   13f92:	ea a9       	ldd	r30, Y+50	; 0x32
   13f94:	fb a9       	ldd	r31, Y+51	; 0x33
   13f96:	80 81       	ld	r24, Z
   13f98:	9c ad       	ldd	r25, Y+60	; 0x3c
   13f9a:	89 23       	and	r24, r25
   13f9c:	80 83       	st	Z, r24
   13f9e:	ea a9       	ldd	r30, Y+50	; 0x32
   13fa0:	fb a9       	ldd	r31, Y+51	; 0x33
   13fa2:	80 81       	ld	r24, Z
   13fa4:	98 ad       	ldd	r25, Y+56	; 0x38
   13fa6:	89 2b       	or	r24, r25
   13fa8:	80 83       	st	Z, r24
   13faa:	62 b9       	out	0x02, r22	; 2
   13fac:	ea a9       	ldd	r30, Y+50	; 0x32
   13fae:	fb a9       	ldd	r31, Y+51	; 0x33
   13fb0:	80 81       	ld	r24, Z
   13fb2:	9c ad       	ldd	r25, Y+60	; 0x3c
   13fb4:	89 23       	and	r24, r25
   13fb6:	80 83       	st	Z, r24
   13fb8:	ea a9       	ldd	r30, Y+50	; 0x32
   13fba:	fb a9       	ldd	r31, Y+51	; 0x33
   13fbc:	80 81       	ld	r24, Z
   13fbe:	98 ad       	ldd	r25, Y+56	; 0x38
   13fc0:	89 2b       	or	r24, r25
   13fc2:	80 83       	st	Z, r24
   13fc4:	e8 a9       	ldd	r30, Y+48	; 0x30
   13fc6:	f9 a9       	ldd	r31, Y+49	; 0x31
   13fc8:	80 81       	ld	r24, Z
   13fca:	9f a9       	ldd	r25, Y+55	; 0x37
   13fcc:	89 2b       	or	r24, r25
   13fce:	80 83       	st	Z, r24
   13fd0:	81 b1       	in	r24, 0x01	; 1
   13fd2:	11 b8       	out	0x01, r1	; 1
   13fd4:	61 e0       	ldi	r22, 0x01	; 1
   13fd6:	70 e0       	ldi	r23, 0x00	; 0
   13fd8:	80 e0       	ldi	r24, 0x00	; 0
   13fda:	90 e0       	ldi	r25, 0x00	; 0
   13fdc:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
   13fe0:	ec a9       	ldd	r30, Y+52	; 0x34
   13fe2:	fd a9       	ldd	r31, Y+53	; 0x35
   13fe4:	80 81       	ld	r24, Z
   13fe6:	9d ad       	ldd	r25, Y+61	; 0x3d
   13fe8:	89 23       	and	r24, r25
   13fea:	80 83       	st	Z, r24
   13fec:	20 b1       	in	r18, 0x00	; 0
   13fee:	ec a9       	ldd	r30, Y+52	; 0x34
   13ff0:	fd a9       	ldd	r31, Y+53	; 0x35
   13ff2:	90 81       	ld	r25, Z
   13ff4:	89 ad       	ldd	r24, Y+57	; 0x39
   13ff6:	98 2b       	or	r25, r24
   13ff8:	90 83       	st	Z, r25
   13ffa:	ec a9       	ldd	r30, Y+52	; 0x34
   13ffc:	fd a9       	ldd	r31, Y+53	; 0x35
   13ffe:	90 81       	ld	r25, Z
   14000:	8d ad       	ldd	r24, Y+61	; 0x3d
   14002:	98 23       	and	r25, r24
   14004:	90 83       	st	Z, r25
   14006:	80 b1       	in	r24, 0x00	; 0
   14008:	ec a9       	ldd	r30, Y+52	; 0x34
   1400a:	fd a9       	ldd	r31, Y+53	; 0x35
   1400c:	90 81       	ld	r25, Z
   1400e:	39 ad       	ldd	r19, Y+57	; 0x39
   14010:	93 2b       	or	r25, r19
   14012:	90 83       	st	Z, r25
   14014:	11 50       	subi	r17, 0x01	; 1
   14016:	17 ff       	sbrs	r17, 7
   14018:	e3 cf       	rjmp	.-58     	; 0x13fe0 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)+0x72>
   1401a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1401c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1401e:	90 81       	ld	r25, Z
   14020:	3e a9       	ldd	r19, Y+54	; 0x36
   14022:	93 2b       	or	r25, r19
   14024:	90 83       	st	Z, r25
   14026:	91 b1       	in	r25, 0x01	; 1
   14028:	9f ef       	ldi	r25, 0xFF	; 255
   1402a:	91 b9       	out	0x01, r25	; 1
   1402c:	92 2f       	mov	r25, r18
   1402e:	df 91       	pop	r29
   14030:	cf 91       	pop	r28
   14032:	1f 91       	pop	r17
   14034:	08 95       	ret

00014036 <LCDWIKI_KBV::Read_ID()>:
_ZN11LCDWIKI_KBV7Read_IDEv():
   14036:	0f 93       	push	r16
   14038:	1f 93       	push	r17
   1403a:	cf 93       	push	r28
   1403c:	df 93       	push	r29
   1403e:	00 d0       	rcall	.+0      	; 0x14040 <LCDWIKI_KBV::Read_ID()+0xa>
   14040:	cd b7       	in	r28, 0x3d	; 61
   14042:	de b7       	in	r29, 0x3e	; 62
   14044:	8c 01       	movw	r16, r24
   14046:	40 e0       	ldi	r20, 0x00	; 0
   14048:	64 e0       	ldi	r22, 0x04	; 4
   1404a:	70 e0       	ldi	r23, 0x00	; 0
   1404c:	0e 94 b7 9f 	call	0x13f6e	; 0x13f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14050:	89 2b       	or	r24, r25
   14052:	39 f5       	brne	.+78     	; 0x140a2 <LCDWIKI_KBV::Read_ID()+0x6c>
   14054:	41 e0       	ldi	r20, 0x01	; 1
   14056:	64 e0       	ldi	r22, 0x04	; 4
   14058:	70 e0       	ldi	r23, 0x00	; 0
   1405a:	c8 01       	movw	r24, r16
   1405c:	0e 94 b7 9f 	call	0x13f6e	; 0x13f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14060:	81 15       	cp	r24, r1
   14062:	90 48       	sbci	r25, 0x80	; 128
   14064:	f1 f4       	brne	.+60     	; 0x140a2 <LCDWIKI_KBV::Read_ID()+0x6c>
   14066:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <LM75_Compatible_Registers+0x4>
   1406a:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <LM75_Compatible_Registers+0x5>
   1406e:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <LM75_Compatible_Registers+0x6>
   14072:	89 83       	std	Y+1, r24	; 0x01
   14074:	9a 83       	std	Y+2, r25	; 0x02
   14076:	ab 83       	std	Y+3, r26	; 0x03
   14078:	23 e0       	ldi	r18, 0x03	; 3
   1407a:	ae 01       	movw	r20, r28
   1407c:	4f 5f       	subi	r20, 0xFF	; 255
   1407e:	5f 4f       	sbci	r21, 0xFF	; 255
   14080:	69 eb       	ldi	r22, 0xB9	; 185
   14082:	70 e0       	ldi	r23, 0x00	; 0
   14084:	c8 01       	movw	r24, r16
   14086:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1408a:	40 e0       	ldi	r20, 0x00	; 0
   1408c:	60 ed       	ldi	r22, 0xD0	; 208
   1408e:	70 e0       	ldi	r23, 0x00	; 0
   14090:	c8 01       	movw	r24, r16
   14092:	0e 94 b7 9f 	call	0x13f6e	; 0x13f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   14096:	41 e0       	ldi	r20, 0x01	; 1
   14098:	60 ed       	ldi	r22, 0xD0	; 208
   1409a:	70 e0       	ldi	r23, 0x00	; 0
   1409c:	c8 01       	movw	r24, r16
   1409e:	0e 94 b7 9f 	call	0x13f6e	; 0x13f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   140a2:	41 e0       	ldi	r20, 0x01	; 1
   140a4:	63 ed       	ldi	r22, 0xD3	; 211
   140a6:	70 e0       	ldi	r23, 0x00	; 0
   140a8:	c8 01       	movw	r24, r16
   140aa:	0e 94 b7 9f 	call	0x13f6e	; 0x13f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   140ae:	81 34       	cpi	r24, 0x41	; 65
   140b0:	23 e9       	ldi	r18, 0x93	; 147
   140b2:	92 07       	cpc	r25, r18
   140b4:	91 f0       	breq	.+36     	; 0x140da <LCDWIKI_KBV::Read_ID()+0xa4>
   140b6:	86 38       	cpi	r24, 0x86	; 134
   140b8:	24 e9       	ldi	r18, 0x94	; 148
   140ba:	92 07       	cpc	r25, r18
   140bc:	71 f0       	breq	.+28     	; 0x140da <LCDWIKI_KBV::Read_ID()+0xa4>
   140be:	88 38       	cpi	r24, 0x88	; 136
   140c0:	24 e9       	ldi	r18, 0x94	; 148
   140c2:	92 07       	cpc	r25, r18
   140c4:	51 f0       	breq	.+20     	; 0x140da <LCDWIKI_KBV::Read_ID()+0xa4>
   140c6:	86 39       	cpi	r24, 0x96	; 150
   140c8:	27 e7       	ldi	r18, 0x77	; 119
   140ca:	92 07       	cpc	r25, r18
   140cc:	31 f0       	breq	.+12     	; 0x140da <LCDWIKI_KBV::Read_ID()+0xa4>
   140ce:	40 e0       	ldi	r20, 0x00	; 0
   140d0:	70 e0       	ldi	r23, 0x00	; 0
   140d2:	60 e0       	ldi	r22, 0x00	; 0
   140d4:	c8 01       	movw	r24, r16
   140d6:	0e 94 b7 9f 	call	0x13f6e	; 0x13f6e <LCDWIKI_KBV::Read_Reg(unsigned int, signed char)>
   140da:	0f 90       	pop	r0
   140dc:	0f 90       	pop	r0
   140de:	0f 90       	pop	r0
   140e0:	df 91       	pop	r29
   140e2:	cf 91       	pop	r28
   140e4:	1f 91       	pop	r17
   140e6:	0f 91       	pop	r16
   140e8:	08 95       	ret

000140ea <LCDWIKI_KBV::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_KBV11Vert_ScrollEiii():
   140ea:	cf 92       	push	r12
   140ec:	df 92       	push	r13
   140ee:	ef 92       	push	r14
   140f0:	ff 92       	push	r15
   140f2:	0f 93       	push	r16
   140f4:	1f 93       	push	r17
   140f6:	cf 93       	push	r28
   140f8:	df 93       	push	r29
   140fa:	00 d0       	rcall	.+0      	; 0x140fc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x12>
   140fc:	00 d0       	rcall	.+0      	; 0x140fe <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x14>
   140fe:	cd b7       	in	r28, 0x3d	; 61
   14100:	de b7       	in	r29, 0x3e	; 62
   14102:	8c 01       	movw	r16, r24
   14104:	79 01       	movw	r14, r18
   14106:	88 27       	eor	r24, r24
   14108:	99 27       	eor	r25, r25
   1410a:	84 1b       	sub	r24, r20
   1410c:	95 0b       	sbc	r25, r21
   1410e:	6b 01       	movw	r12, r22
   14110:	82 17       	cp	r24, r18
   14112:	93 07       	cpc	r25, r19
   14114:	0c f0       	brlt	.+2      	; 0x14118 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x2e>
   14116:	a3 c0       	rjmp	.+326    	; 0x1425e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   14118:	24 17       	cp	r18, r20
   1411a:	35 07       	cpc	r19, r21
   1411c:	0c f0       	brlt	.+2      	; 0x14120 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x36>
   1411e:	9f c0       	rjmp	.+318    	; 0x1425e <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x174>
   14120:	c2 0e       	add	r12, r18
   14122:	d3 1e       	adc	r13, r19
   14124:	37 ff       	sbrs	r19, 7
   14126:	02 c0       	rjmp	.+4      	; 0x1412c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   14128:	c4 0e       	add	r12, r20
   1412a:	d5 1e       	adc	r13, r21
   1412c:	d8 01       	movw	r26, r16
   1412e:	58 96       	adiw	r26, 0x18	; 24
   14130:	8d 91       	ld	r24, X+
   14132:	9c 91       	ld	r25, X
   14134:	59 97       	sbiw	r26, 0x19	; 25
   14136:	89 2b       	or	r24, r25
   14138:	09 f0       	breq	.+2      	; 0x1413c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x52>
   1413a:	94 c0       	rjmp	.+296    	; 0x14264 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x17a>
   1413c:	d0 96       	adiw	r26, 0x30	; 48
   1413e:	ed 91       	ld	r30, X+
   14140:	fc 91       	ld	r31, X
   14142:	d1 97       	sbiw	r26, 0x31	; 49
   14144:	80 81       	ld	r24, Z
   14146:	db 96       	adiw	r26, 0x3b	; 59
   14148:	9c 91       	ld	r25, X
   1414a:	db 97       	sbiw	r26, 0x3b	; 59
   1414c:	89 23       	and	r24, r25
   1414e:	80 83       	st	Z, r24
   14150:	94 96       	adiw	r26, 0x24	; 36
   14152:	8c 91       	ld	r24, X
   14154:	94 97       	sbiw	r26, 0x24	; 36
   14156:	82 b9       	out	0x02, r24	; 2
   14158:	d2 96       	adiw	r26, 0x32	; 50
   1415a:	ed 91       	ld	r30, X+
   1415c:	fc 91       	ld	r31, X
   1415e:	d3 97       	sbiw	r26, 0x33	; 51
   14160:	80 81       	ld	r24, Z
   14162:	dc 96       	adiw	r26, 0x3c	; 60
   14164:	9c 91       	ld	r25, X
   14166:	dc 97       	sbiw	r26, 0x3c	; 60
   14168:	89 23       	and	r24, r25
   1416a:	80 83       	st	Z, r24
   1416c:	d2 96       	adiw	r26, 0x32	; 50
   1416e:	ed 91       	ld	r30, X+
   14170:	fc 91       	ld	r31, X
   14172:	d3 97       	sbiw	r26, 0x33	; 51
   14174:	80 81       	ld	r24, Z
   14176:	d8 96       	adiw	r26, 0x38	; 56
   14178:	9c 91       	ld	r25, X
   1417a:	d8 97       	sbiw	r26, 0x38	; 56
   1417c:	89 2b       	or	r24, r25
   1417e:	80 83       	st	Z, r24
   14180:	d0 96       	adiw	r26, 0x30	; 48
   14182:	ed 91       	ld	r30, X+
   14184:	fc 91       	ld	r31, X
   14186:	d1 97       	sbiw	r26, 0x31	; 49
   14188:	80 81       	ld	r24, Z
   1418a:	d7 96       	adiw	r26, 0x37	; 55
   1418c:	9c 91       	ld	r25, X
   1418e:	d7 97       	sbiw	r26, 0x37	; 55
   14190:	89 2b       	or	r24, r25
   14192:	80 83       	st	Z, r24
   14194:	83 e0       	ldi	r24, 0x03	; 3
   14196:	82 b9       	out	0x02, r24	; 2
   14198:	d2 96       	adiw	r26, 0x32	; 50
   1419a:	ed 91       	ld	r30, X+
   1419c:	fc 91       	ld	r31, X
   1419e:	d3 97       	sbiw	r26, 0x33	; 51
   141a0:	80 81       	ld	r24, Z
   141a2:	dc 96       	adiw	r26, 0x3c	; 60
   141a4:	9c 91       	ld	r25, X
   141a6:	dc 97       	sbiw	r26, 0x3c	; 60
   141a8:	89 23       	and	r24, r25
   141aa:	80 83       	st	Z, r24
   141ac:	d2 96       	adiw	r26, 0x32	; 50
   141ae:	ed 91       	ld	r30, X+
   141b0:	fc 91       	ld	r31, X
   141b2:	d3 97       	sbiw	r26, 0x33	; 51
   141b4:	80 81       	ld	r24, Z
   141b6:	d8 96       	adiw	r26, 0x38	; 56
   141b8:	9c 91       	ld	r25, X
   141ba:	d8 97       	sbiw	r26, 0x38	; 56
   141bc:	89 2b       	or	r24, r25
   141be:	80 83       	st	Z, r24
   141c0:	d0 96       	adiw	r26, 0x30	; 48
   141c2:	ed 91       	ld	r30, X+
   141c4:	fc 91       	ld	r31, X
   141c6:	d1 97       	sbiw	r26, 0x31	; 49
   141c8:	80 81       	ld	r24, Z
   141ca:	db 96       	adiw	r26, 0x3b	; 59
   141cc:	9c 91       	ld	r25, X
   141ce:	db 97       	sbiw	r26, 0x3b	; 59
   141d0:	89 23       	and	r24, r25
   141d2:	80 83       	st	Z, r24
   141d4:	96 96       	adiw	r26, 0x26	; 38
   141d6:	8c 91       	ld	r24, X
   141d8:	96 97       	sbiw	r26, 0x26	; 38
   141da:	82 b9       	out	0x02, r24	; 2
   141dc:	d2 96       	adiw	r26, 0x32	; 50
   141de:	ed 91       	ld	r30, X+
   141e0:	fc 91       	ld	r31, X
   141e2:	d3 97       	sbiw	r26, 0x33	; 51
   141e4:	80 81       	ld	r24, Z
   141e6:	dc 96       	adiw	r26, 0x3c	; 60
   141e8:	9c 91       	ld	r25, X
   141ea:	dc 97       	sbiw	r26, 0x3c	; 60
   141ec:	89 23       	and	r24, r25
   141ee:	80 83       	st	Z, r24
   141f0:	d2 96       	adiw	r26, 0x32	; 50
   141f2:	ed 91       	ld	r30, X+
   141f4:	fc 91       	ld	r31, X
   141f6:	d3 97       	sbiw	r26, 0x33	; 51
   141f8:	80 81       	ld	r24, Z
   141fa:	d8 96       	adiw	r26, 0x38	; 56
   141fc:	9c 91       	ld	r25, X
   141fe:	d8 97       	sbiw	r26, 0x38	; 56
   14200:	89 2b       	or	r24, r25
   14202:	80 83       	st	Z, r24
   14204:	d0 96       	adiw	r26, 0x30	; 48
   14206:	ed 91       	ld	r30, X+
   14208:	fc 91       	ld	r31, X
   1420a:	d1 97       	sbiw	r26, 0x31	; 49
   1420c:	80 81       	ld	r24, Z
   1420e:	d7 96       	adiw	r26, 0x37	; 55
   14210:	9c 91       	ld	r25, X
   14212:	d7 97       	sbiw	r26, 0x37	; 55
   14214:	89 2b       	or	r24, r25
   14216:	80 83       	st	Z, r24
   14218:	c2 b8       	out	0x02, r12	; 2
   1421a:	d2 96       	adiw	r26, 0x32	; 50
   1421c:	ed 91       	ld	r30, X+
   1421e:	fc 91       	ld	r31, X
   14220:	d3 97       	sbiw	r26, 0x33	; 51
   14222:	80 81       	ld	r24, Z
   14224:	dc 96       	adiw	r26, 0x3c	; 60
   14226:	9c 91       	ld	r25, X
   14228:	dc 97       	sbiw	r26, 0x3c	; 60
   1422a:	89 23       	and	r24, r25
   1422c:	80 83       	st	Z, r24
   1422e:	d2 96       	adiw	r26, 0x32	; 50
   14230:	ed 91       	ld	r30, X+
   14232:	fc 91       	ld	r31, X
   14234:	d3 97       	sbiw	r26, 0x33	; 51
   14236:	80 81       	ld	r24, Z
   14238:	d8 96       	adiw	r26, 0x38	; 56
   1423a:	9c 91       	ld	r25, X
   1423c:	89 2b       	or	r24, r25
   1423e:	80 83       	st	Z, r24
   14240:	26 96       	adiw	r28, 0x06	; 6
   14242:	0f b6       	in	r0, 0x3f	; 63
   14244:	f8 94       	cli
   14246:	de bf       	out	0x3e, r29	; 62
   14248:	0f be       	out	0x3f, r0	; 63
   1424a:	cd bf       	out	0x3d, r28	; 61
   1424c:	df 91       	pop	r29
   1424e:	cf 91       	pop	r28
   14250:	1f 91       	pop	r17
   14252:	0f 91       	pop	r16
   14254:	ff 90       	pop	r15
   14256:	ef 90       	pop	r14
   14258:	df 90       	pop	r13
   1425a:	cf 90       	pop	r12
   1425c:	08 95       	ret
   1425e:	f1 2c       	mov	r15, r1
   14260:	e1 2c       	mov	r14, r1
   14262:	64 cf       	rjmp	.-312    	; 0x1412c <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x42>
   14264:	f8 01       	movw	r30, r16
   14266:	80 89       	ldd	r24, Z+16	; 0x10
   14268:	91 89       	ldd	r25, Z+17	; 0x11
   1426a:	86 1b       	sub	r24, r22
   1426c:	97 0b       	sbc	r25, r23
   1426e:	84 1b       	sub	r24, r20
   14270:	95 0b       	sbc	r25, r21
   14272:	79 83       	std	Y+1, r23	; 0x01
   14274:	6a 83       	std	Y+2, r22	; 0x02
   14276:	5b 83       	std	Y+3, r21	; 0x03
   14278:	4c 83       	std	Y+4, r20	; 0x04
   1427a:	9d 83       	std	Y+5, r25	; 0x05
   1427c:	8e 83       	std	Y+6, r24	; 0x06
   1427e:	64 a1       	ldd	r22, Z+36	; 0x24
   14280:	75 a1       	ldd	r23, Z+37	; 0x25
   14282:	26 e0       	ldi	r18, 0x06	; 6
   14284:	ae 01       	movw	r20, r28
   14286:	4f 5f       	subi	r20, 0xFF	; 255
   14288:	5f 4f       	sbci	r21, 0xFF	; 255
   1428a:	c8 01       	movw	r24, r16
   1428c:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14290:	d9 82       	std	Y+1, r13	; 0x01
   14292:	ca 82       	std	Y+2, r12	; 0x02
   14294:	d8 01       	movw	r26, r16
   14296:	96 96       	adiw	r26, 0x26	; 38
   14298:	6d 91       	ld	r22, X+
   1429a:	7c 91       	ld	r23, X
   1429c:	22 e0       	ldi	r18, 0x02	; 2
   1429e:	ae 01       	movw	r20, r28
   142a0:	4f 5f       	subi	r20, 0xFF	; 255
   142a2:	5f 4f       	sbci	r21, 0xFF	; 255
   142a4:	c8 01       	movw	r24, r16
   142a6:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   142aa:	f8 01       	movw	r30, r16
   142ac:	80 8d       	ldd	r24, Z+24	; 0x18
   142ae:	91 8d       	ldd	r25, Z+25	; 0x19
   142b0:	01 97       	sbiw	r24, 0x01	; 1
   142b2:	79 f4       	brne	.+30     	; 0x142d2 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e8>
   142b4:	88 e0       	ldi	r24, 0x08	; 8
   142b6:	ef 28       	or	r14, r15
   142b8:	09 f4       	brne	.+2      	; 0x142bc <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1d2>
   142ba:	80 e0       	ldi	r24, 0x00	; 0
   142bc:	89 83       	std	Y+1, r24	; 0x01
   142be:	21 e0       	ldi	r18, 0x01	; 1
   142c0:	ae 01       	movw	r20, r28
   142c2:	4f 5f       	subi	r20, 0xFF	; 255
   142c4:	5f 4f       	sbci	r21, 0xFF	; 255
   142c6:	61 e0       	ldi	r22, 0x01	; 1
   142c8:	70 e0       	ldi	r23, 0x00	; 0
   142ca:	c8 01       	movw	r24, r16
   142cc:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   142d0:	b7 cf       	rjmp	.-146    	; 0x14240 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   142d2:	ef 28       	or	r14, r15
   142d4:	09 f0       	breq	.+2      	; 0x142d8 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1ee>
   142d6:	b4 cf       	rjmp	.-152    	; 0x14240 <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x156>
   142d8:	20 e0       	ldi	r18, 0x00	; 0
   142da:	50 e0       	ldi	r21, 0x00	; 0
   142dc:	40 e0       	ldi	r20, 0x00	; 0
   142de:	63 e1       	ldi	r22, 0x13	; 19
   142e0:	70 e0       	ldi	r23, 0x00	; 0
   142e2:	f3 cf       	rjmp	.-26     	; 0x142ca <LCDWIKI_KBV::Vert_Scroll(int, int, int)+0x1e0>

000142e4 <LCDWIKI_KBV::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_KBV12Set_RotationEh():
   142e4:	0f 93       	push	r16
   142e6:	1f 93       	push	r17
   142e8:	cf 93       	push	r28
   142ea:	df 93       	push	r29
   142ec:	ec 01       	movw	r28, r24
   142ee:	86 2f       	mov	r24, r22
   142f0:	83 70       	andi	r24, 0x03	; 3
   142f2:	90 e0       	ldi	r25, 0x00	; 0
   142f4:	9f 8b       	std	Y+23, r25	; 0x17
   142f6:	8e 8b       	std	Y+22, r24	; 0x16
   142f8:	26 2f       	mov	r18, r22
   142fa:	21 70       	andi	r18, 0x01	; 1
   142fc:	60 ff       	sbrs	r22, 0
   142fe:	8e c0       	rjmp	.+284    	; 0x1441c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x138>
   14300:	88 89       	ldd	r24, Y+16	; 0x10
   14302:	99 89       	ldd	r25, Y+17	; 0x11
   14304:	9b 8b       	std	Y+19, r25	; 0x13
   14306:	8a 8b       	std	Y+18, r24	; 0x12
   14308:	22 23       	and	r18, r18
   1430a:	09 f4       	brne	.+2      	; 0x1430e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a>
   1430c:	8a c0       	rjmp	.+276    	; 0x14422 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x13e>
   1430e:	8e 85       	ldd	r24, Y+14	; 0x0e
   14310:	9f 85       	ldd	r25, Y+15	; 0x0f
   14312:	9d 8b       	std	Y+21, r25	; 0x15
   14314:	8c 8b       	std	Y+20, r24	; 0x14
   14316:	ae a5       	ldd	r26, Y+46	; 0x2e
   14318:	bf a5       	ldd	r27, Y+47	; 0x2f
   1431a:	8c 91       	ld	r24, X
   1431c:	9a ad       	ldd	r25, Y+58	; 0x3a
   1431e:	89 23       	and	r24, r25
   14320:	8c 93       	st	X, r24
   14322:	48 8d       	ldd	r20, Y+24	; 0x18
   14324:	59 8d       	ldd	r21, Y+25	; 0x19
   14326:	8e 89       	ldd	r24, Y+22	; 0x16
   14328:	9f 89       	ldd	r25, Y+23	; 0x17
   1432a:	a8 a9       	ldd	r26, Y+48	; 0x30
   1432c:	b9 a9       	ldd	r27, Y+49	; 0x31
   1432e:	2b ad       	ldd	r18, Y+59	; 0x3b
   14330:	41 15       	cp	r20, r1
   14332:	51 05       	cpc	r21, r1
   14334:	09 f0       	breq	.+2      	; 0x14338 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x54>
   14336:	7a c0       	rjmp	.+244    	; 0x1442c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x148>
   14338:	01 97       	sbiw	r24, 0x01	; 1
   1433a:	83 30       	cpi	r24, 0x03	; 3
   1433c:	91 05       	cpc	r25, r1
   1433e:	08 f0       	brcs	.+2      	; 0x14342 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x5e>
   14340:	73 c0       	rjmp	.+230    	; 0x14428 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x144>
   14342:	88 0f       	add	r24, r24
   14344:	99 1f       	adc	r25, r25
   14346:	fc 01       	movw	r30, r24
   14348:	ef 5b       	subi	r30, 0xBF	; 191
   1434a:	f7 4f       	sbci	r31, 0xF7	; 247
   1434c:	90 81       	ld	r25, Z
   1434e:	38 a5       	ldd	r19, Y+40	; 0x28
   14350:	49 a5       	ldd	r20, Y+41	; 0x29
   14352:	8c 91       	ld	r24, X
   14354:	28 23       	and	r18, r24
   14356:	2c 93       	st	X, r18
   14358:	42 b9       	out	0x02, r20	; 2
   1435a:	ea a9       	ldd	r30, Y+50	; 0x32
   1435c:	fb a9       	ldd	r31, Y+51	; 0x33
   1435e:	80 81       	ld	r24, Z
   14360:	2c ad       	ldd	r18, Y+60	; 0x3c
   14362:	82 23       	and	r24, r18
   14364:	80 83       	st	Z, r24
   14366:	ea a9       	ldd	r30, Y+50	; 0x32
   14368:	fb a9       	ldd	r31, Y+51	; 0x33
   1436a:	80 81       	ld	r24, Z
   1436c:	28 ad       	ldd	r18, Y+56	; 0x38
   1436e:	82 2b       	or	r24, r18
   14370:	80 83       	st	Z, r24
   14372:	32 b9       	out	0x02, r19	; 2
   14374:	ea a9       	ldd	r30, Y+50	; 0x32
   14376:	fb a9       	ldd	r31, Y+51	; 0x33
   14378:	80 81       	ld	r24, Z
   1437a:	2c ad       	ldd	r18, Y+60	; 0x3c
   1437c:	82 23       	and	r24, r18
   1437e:	80 83       	st	Z, r24
   14380:	ea a9       	ldd	r30, Y+50	; 0x32
   14382:	fb a9       	ldd	r31, Y+51	; 0x33
   14384:	80 81       	ld	r24, Z
   14386:	28 ad       	ldd	r18, Y+56	; 0x38
   14388:	82 2b       	or	r24, r18
   1438a:	80 83       	st	Z, r24
   1438c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1438e:	f9 a9       	ldd	r31, Y+49	; 0x31
   14390:	80 81       	ld	r24, Z
   14392:	2f a9       	ldd	r18, Y+55	; 0x37
   14394:	82 2b       	or	r24, r18
   14396:	80 83       	st	Z, r24
   14398:	80 e1       	ldi	r24, 0x10	; 16
   1439a:	82 b9       	out	0x02, r24	; 2
   1439c:	ea a9       	ldd	r30, Y+50	; 0x32
   1439e:	fb a9       	ldd	r31, Y+51	; 0x33
   143a0:	80 81       	ld	r24, Z
   143a2:	2c ad       	ldd	r18, Y+60	; 0x3c
   143a4:	82 23       	and	r24, r18
   143a6:	80 83       	st	Z, r24
   143a8:	ea a9       	ldd	r30, Y+50	; 0x32
   143aa:	fb a9       	ldd	r31, Y+51	; 0x33
   143ac:	80 81       	ld	r24, Z
   143ae:	28 ad       	ldd	r18, Y+56	; 0x38
   143b0:	82 2b       	or	r24, r18
   143b2:	80 83       	st	Z, r24
   143b4:	92 b9       	out	0x02, r25	; 2
   143b6:	ea a9       	ldd	r30, Y+50	; 0x32
   143b8:	fb a9       	ldd	r31, Y+51	; 0x33
   143ba:	80 81       	ld	r24, Z
   143bc:	9c ad       	ldd	r25, Y+60	; 0x3c
   143be:	89 23       	and	r24, r25
   143c0:	80 83       	st	Z, r24
   143c2:	ea a9       	ldd	r30, Y+50	; 0x32
   143c4:	fb a9       	ldd	r31, Y+51	; 0x33
   143c6:	80 81       	ld	r24, Z
   143c8:	98 ad       	ldd	r25, Y+56	; 0x38
   143ca:	89 2b       	or	r24, r25
   143cc:	80 83       	st	Z, r24
   143ce:	0c 89       	ldd	r16, Y+20	; 0x14
   143d0:	1d 89       	ldd	r17, Y+21	; 0x15
   143d2:	01 50       	subi	r16, 0x01	; 1
   143d4:	11 09       	sbc	r17, r1
   143d6:	2a 89       	ldd	r18, Y+18	; 0x12
   143d8:	3b 89       	ldd	r19, Y+19	; 0x13
   143da:	21 50       	subi	r18, 0x01	; 1
   143dc:	31 09       	sbc	r19, r1
   143de:	e8 81       	ld	r30, Y
   143e0:	f9 81       	ldd	r31, Y+1	; 0x01
   143e2:	06 80       	ldd	r0, Z+6	; 0x06
   143e4:	f7 81       	ldd	r31, Z+7	; 0x07
   143e6:	e0 2d       	mov	r30, r0
   143e8:	50 e0       	ldi	r21, 0x00	; 0
   143ea:	40 e0       	ldi	r20, 0x00	; 0
   143ec:	70 e0       	ldi	r23, 0x00	; 0
   143ee:	60 e0       	ldi	r22, 0x00	; 0
   143f0:	ce 01       	movw	r24, r28
   143f2:	19 95       	eicall
   143f4:	48 89       	ldd	r20, Y+16	; 0x10
   143f6:	59 89       	ldd	r21, Y+17	; 0x11
   143f8:	30 e0       	ldi	r19, 0x00	; 0
   143fa:	20 e0       	ldi	r18, 0x00	; 0
   143fc:	70 e0       	ldi	r23, 0x00	; 0
   143fe:	60 e0       	ldi	r22, 0x00	; 0
   14400:	ce 01       	movw	r24, r28
   14402:	0e 94 75 a0 	call	0x140ea	; 0x140ea <LCDWIKI_KBV::Vert_Scroll(int, int, int)>
   14406:	ee a5       	ldd	r30, Y+46	; 0x2e
   14408:	ff a5       	ldd	r31, Y+47	; 0x2f
   1440a:	80 81       	ld	r24, Z
   1440c:	9e a9       	ldd	r25, Y+54	; 0x36
   1440e:	89 2b       	or	r24, r25
   14410:	80 83       	st	Z, r24
   14412:	df 91       	pop	r29
   14414:	cf 91       	pop	r28
   14416:	1f 91       	pop	r17
   14418:	0f 91       	pop	r16
   1441a:	08 95       	ret
   1441c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1441e:	9f 85       	ldd	r25, Y+15	; 0x0f
   14420:	71 cf       	rjmp	.-286    	; 0x14304 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x20>
   14422:	88 89       	ldd	r24, Y+16	; 0x10
   14424:	99 89       	ldd	r25, Y+17	; 0x11
   14426:	75 cf       	rjmp	.-278    	; 0x14312 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2e>
   14428:	90 e3       	ldi	r25, 0x30	; 48
   1442a:	91 cf       	rjmp	.-222    	; 0x1434e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x6a>
   1442c:	46 30       	cpi	r20, 0x06	; 6
   1442e:	51 05       	cpc	r21, r1
   14430:	51 f5       	brne	.+84     	; 0x14486 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1a2>
   14432:	81 30       	cpi	r24, 0x01	; 1
   14434:	91 05       	cpc	r25, r1
   14436:	f9 f0       	breq	.+62     	; 0x14476 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x192>
   14438:	20 f1       	brcs	.+72     	; 0x14482 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19e>
   1443a:	82 30       	cpi	r24, 0x02	; 2
   1443c:	91 05       	cpc	r25, r1
   1443e:	e9 f0       	breq	.+58     	; 0x1447a <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x196>
   14440:	03 97       	sbiw	r24, 0x03	; 3
   14442:	e9 f0       	breq	.+58     	; 0x1447e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x19a>
   14444:	8c 91       	ld	r24, X
   14446:	28 23       	and	r18, r24
   14448:	2c 93       	st	X, r18
   1444a:	88 a5       	ldd	r24, Y+40	; 0x28
   1444c:	82 b9       	out	0x02, r24	; 2
   1444e:	ea a9       	ldd	r30, Y+50	; 0x32
   14450:	fb a9       	ldd	r31, Y+51	; 0x33
   14452:	80 81       	ld	r24, Z
   14454:	9c ad       	ldd	r25, Y+60	; 0x3c
   14456:	89 23       	and	r24, r25
   14458:	80 83       	st	Z, r24
   1445a:	ea a9       	ldd	r30, Y+50	; 0x32
   1445c:	fb a9       	ldd	r31, Y+51	; 0x33
   1445e:	80 81       	ld	r24, Z
   14460:	98 ad       	ldd	r25, Y+56	; 0x38
   14462:	89 2b       	or	r24, r25
   14464:	80 83       	st	Z, r24
   14466:	e8 a9       	ldd	r30, Y+48	; 0x30
   14468:	f9 a9       	ldd	r31, Y+49	; 0x31
   1446a:	80 81       	ld	r24, Z
   1446c:	9f a9       	ldd	r25, Y+55	; 0x37
   1446e:	89 2b       	or	r24, r25
   14470:	80 83       	st	Z, r24
   14472:	12 b9       	out	0x02, r17	; 2
   14474:	a0 cf       	rjmp	.-192    	; 0x143b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14476:	10 ea       	ldi	r17, 0xA0	; 160
   14478:	e5 cf       	rjmp	.-54     	; 0x14444 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   1447a:	10 e0       	ldi	r17, 0x00	; 0
   1447c:	e3 cf       	rjmp	.-58     	; 0x14444 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   1447e:	10 e6       	ldi	r17, 0x60	; 96
   14480:	e1 cf       	rjmp	.-62     	; 0x14444 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14482:	10 ed       	ldi	r17, 0xD0	; 208
   14484:	df cf       	rjmp	.-66     	; 0x14444 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x160>
   14486:	48 30       	cpi	r20, 0x08	; 8
   14488:	51 05       	cpc	r21, r1
   1448a:	49 f5       	brne	.+82     	; 0x144de <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1fa>
   1448c:	fb e2       	ldi	r31, 0x2B	; 43
   1448e:	81 30       	cpi	r24, 0x01	; 1
   14490:	91 05       	cpc	r25, r1
   14492:	51 f0       	breq	.+20     	; 0x144a8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   14494:	f9 e0       	ldi	r31, 0x09	; 9
   14496:	81 30       	cpi	r24, 0x01	; 1
   14498:	91 05       	cpc	r25, r1
   1449a:	30 f0       	brcs	.+12     	; 0x144a8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   1449c:	fa e0       	ldi	r31, 0x0A	; 10
   1449e:	82 30       	cpi	r24, 0x02	; 2
   144a0:	91 05       	cpc	r25, r1
   144a2:	11 f0       	breq	.+4      	; 0x144a8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   144a4:	03 97       	sbiw	r24, 0x03	; 3
   144a6:	c9 f0       	breq	.+50     	; 0x144da <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1f6>
   144a8:	8c 91       	ld	r24, X
   144aa:	28 23       	and	r18, r24
   144ac:	2c 93       	st	X, r18
   144ae:	88 a5       	ldd	r24, Y+40	; 0x28
   144b0:	82 b9       	out	0x02, r24	; 2
   144b2:	aa a9       	ldd	r26, Y+50	; 0x32
   144b4:	bb a9       	ldd	r27, Y+51	; 0x33
   144b6:	8c 91       	ld	r24, X
   144b8:	9c ad       	ldd	r25, Y+60	; 0x3c
   144ba:	89 23       	and	r24, r25
   144bc:	8c 93       	st	X, r24
   144be:	aa a9       	ldd	r26, Y+50	; 0x32
   144c0:	bb a9       	ldd	r27, Y+51	; 0x33
   144c2:	8c 91       	ld	r24, X
   144c4:	98 ad       	ldd	r25, Y+56	; 0x38
   144c6:	89 2b       	or	r24, r25
   144c8:	8c 93       	st	X, r24
   144ca:	a8 a9       	ldd	r26, Y+48	; 0x30
   144cc:	b9 a9       	ldd	r27, Y+49	; 0x31
   144ce:	8c 91       	ld	r24, X
   144d0:	9f a9       	ldd	r25, Y+55	; 0x37
   144d2:	89 2b       	or	r24, r25
   144d4:	8c 93       	st	X, r24
   144d6:	f2 b9       	out	0x02, r31	; 2
   144d8:	6e cf       	rjmp	.-292    	; 0x143b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   144da:	f8 e2       	ldi	r31, 0x28	; 40
   144dc:	e5 cf       	rjmp	.-54     	; 0x144a8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x1c4>
   144de:	45 30       	cpi	r20, 0x05	; 5
   144e0:	51 05       	cpc	r21, r1
   144e2:	49 f5       	brne	.+82     	; 0x14536 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x252>
   144e4:	e8 e7       	ldi	r30, 0x78	; 120
   144e6:	81 30       	cpi	r24, 0x01	; 1
   144e8:	91 05       	cpc	r25, r1
   144ea:	51 f0       	breq	.+20     	; 0x14500 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   144ec:	e8 e0       	ldi	r30, 0x08	; 8
   144ee:	81 30       	cpi	r24, 0x01	; 1
   144f0:	91 05       	cpc	r25, r1
   144f2:	30 f0       	brcs	.+12     	; 0x14500 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   144f4:	e8 ec       	ldi	r30, 0xC8	; 200
   144f6:	82 30       	cpi	r24, 0x02	; 2
   144f8:	91 05       	cpc	r25, r1
   144fa:	11 f0       	breq	.+4      	; 0x14500 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   144fc:	03 97       	sbiw	r24, 0x03	; 3
   144fe:	c9 f0       	breq	.+50     	; 0x14532 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x24e>
   14500:	8c 91       	ld	r24, X
   14502:	28 23       	and	r18, r24
   14504:	2c 93       	st	X, r18
   14506:	88 a5       	ldd	r24, Y+40	; 0x28
   14508:	82 b9       	out	0x02, r24	; 2
   1450a:	aa a9       	ldd	r26, Y+50	; 0x32
   1450c:	bb a9       	ldd	r27, Y+51	; 0x33
   1450e:	8c 91       	ld	r24, X
   14510:	9c ad       	ldd	r25, Y+60	; 0x3c
   14512:	89 23       	and	r24, r25
   14514:	8c 93       	st	X, r24
   14516:	aa a9       	ldd	r26, Y+50	; 0x32
   14518:	bb a9       	ldd	r27, Y+51	; 0x33
   1451a:	8c 91       	ld	r24, X
   1451c:	98 ad       	ldd	r25, Y+56	; 0x38
   1451e:	89 2b       	or	r24, r25
   14520:	8c 93       	st	X, r24
   14522:	a8 a9       	ldd	r26, Y+48	; 0x30
   14524:	b9 a9       	ldd	r27, Y+49	; 0x31
   14526:	8c 91       	ld	r24, X
   14528:	9f a9       	ldd	r25, Y+55	; 0x37
   1452a:	89 2b       	or	r24, r25
   1452c:	8c 93       	st	X, r24
   1452e:	e2 b9       	out	0x02, r30	; 2
   14530:	42 cf       	rjmp	.-380    	; 0x143b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14532:	e8 ea       	ldi	r30, 0xA8	; 168
   14534:	e5 cf       	rjmp	.-54     	; 0x14500 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x21c>
   14536:	47 30       	cpi	r20, 0x07	; 7
   14538:	51 05       	cpc	r21, r1
   1453a:	51 f5       	brne	.+84     	; 0x14590 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2ac>
   1453c:	81 30       	cpi	r24, 0x01	; 1
   1453e:	91 05       	cpc	r25, r1
   14540:	f9 f0       	breq	.+62     	; 0x14580 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x29c>
   14542:	20 f1       	brcs	.+72     	; 0x1458c <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a8>
   14544:	82 30       	cpi	r24, 0x02	; 2
   14546:	91 05       	cpc	r25, r1
   14548:	e9 f0       	breq	.+58     	; 0x14584 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a0>
   1454a:	03 97       	sbiw	r24, 0x03	; 3
   1454c:	e9 f0       	breq	.+58     	; 0x14588 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2a4>
   1454e:	8c 91       	ld	r24, X
   14550:	28 23       	and	r18, r24
   14552:	2c 93       	st	X, r18
   14554:	88 a5       	ldd	r24, Y+40	; 0x28
   14556:	82 b9       	out	0x02, r24	; 2
   14558:	ea a9       	ldd	r30, Y+50	; 0x32
   1455a:	fb a9       	ldd	r31, Y+51	; 0x33
   1455c:	80 81       	ld	r24, Z
   1455e:	9c ad       	ldd	r25, Y+60	; 0x3c
   14560:	89 23       	and	r24, r25
   14562:	80 83       	st	Z, r24
   14564:	ea a9       	ldd	r30, Y+50	; 0x32
   14566:	fb a9       	ldd	r31, Y+51	; 0x33
   14568:	80 81       	ld	r24, Z
   1456a:	98 ad       	ldd	r25, Y+56	; 0x38
   1456c:	89 2b       	or	r24, r25
   1456e:	80 83       	st	Z, r24
   14570:	e8 a9       	ldd	r30, Y+48	; 0x30
   14572:	f9 a9       	ldd	r31, Y+49	; 0x31
   14574:	80 81       	ld	r24, Z
   14576:	9f a9       	ldd	r25, Y+55	; 0x37
   14578:	89 2b       	or	r24, r25
   1457a:	80 83       	st	Z, r24
   1457c:	72 b9       	out	0x02, r23	; 2
   1457e:	1b cf       	rjmp	.-458    	; 0x143b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   14580:	78 ea       	ldi	r23, 0xA8	; 168
   14582:	e5 cf       	rjmp	.-54     	; 0x1454e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14584:	78 e1       	ldi	r23, 0x18	; 24
   14586:	e3 cf       	rjmp	.-58     	; 0x1454e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14588:	78 e7       	ldi	r23, 0x78	; 120
   1458a:	e1 cf       	rjmp	.-62     	; 0x1454e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   1458c:	78 ec       	ldi	r23, 0xC8	; 200
   1458e:	df cf       	rjmp	.-66     	; 0x1454e <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x26a>
   14590:	81 30       	cpi	r24, 0x01	; 1
   14592:	91 05       	cpc	r25, r1
   14594:	f9 f0       	breq	.+62     	; 0x145d4 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f0>
   14596:	20 f1       	brcs	.+72     	; 0x145e0 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2fc>
   14598:	82 30       	cpi	r24, 0x02	; 2
   1459a:	91 05       	cpc	r25, r1
   1459c:	e9 f0       	breq	.+58     	; 0x145d8 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f4>
   1459e:	03 97       	sbiw	r24, 0x03	; 3
   145a0:	e9 f0       	breq	.+58     	; 0x145dc <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2f8>
   145a2:	8c 91       	ld	r24, X
   145a4:	28 23       	and	r18, r24
   145a6:	2c 93       	st	X, r18
   145a8:	88 a5       	ldd	r24, Y+40	; 0x28
   145aa:	82 b9       	out	0x02, r24	; 2
   145ac:	ea a9       	ldd	r30, Y+50	; 0x32
   145ae:	fb a9       	ldd	r31, Y+51	; 0x33
   145b0:	80 81       	ld	r24, Z
   145b2:	9c ad       	ldd	r25, Y+60	; 0x3c
   145b4:	89 23       	and	r24, r25
   145b6:	80 83       	st	Z, r24
   145b8:	ea a9       	ldd	r30, Y+50	; 0x32
   145ba:	fb a9       	ldd	r31, Y+51	; 0x33
   145bc:	80 81       	ld	r24, Z
   145be:	98 ad       	ldd	r25, Y+56	; 0x38
   145c0:	89 2b       	or	r24, r25
   145c2:	80 83       	st	Z, r24
   145c4:	e8 a9       	ldd	r30, Y+48	; 0x30
   145c6:	f9 a9       	ldd	r31, Y+49	; 0x31
   145c8:	80 81       	ld	r24, Z
   145ca:	9f a9       	ldd	r25, Y+55	; 0x37
   145cc:	89 2b       	or	r24, r25
   145ce:	80 83       	st	Z, r24
   145d0:	32 b9       	out	0x02, r19	; 2
   145d2:	f1 ce       	rjmp	.-542    	; 0x143b6 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0xd2>
   145d4:	38 e2       	ldi	r19, 0x28	; 40
   145d6:	e5 cf       	rjmp	.-54     	; 0x145a2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   145d8:	38 e9       	ldi	r19, 0x98	; 152
   145da:	e3 cf       	rjmp	.-58     	; 0x145a2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   145dc:	38 ef       	ldi	r19, 0xF8	; 248
   145de:	e1 cf       	rjmp	.-62     	; 0x145a2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>
   145e0:	38 e4       	ldi	r19, 0x48	; 72
   145e2:	df cf       	rjmp	.-66     	; 0x145a2 <LCDWIKI_KBV::Set_Rotation(unsigned char)+0x2be>

000145e4 <LCDWIKI_KBV::Get_Rotation() const>:
_ZNK11LCDWIKI_KBV12Get_RotationEv():
   145e4:	fc 01       	movw	r30, r24
   145e6:	86 89       	ldd	r24, Z+22	; 0x16
   145e8:	08 95       	ret

000145ea <LCDWIKI_KBV::Invert_Display(bool)>:
_ZN11LCDWIKI_KBV14Invert_DisplayEb():
   145ea:	fc 01       	movw	r30, r24
   145ec:	a6 a5       	ldd	r26, Z+46	; 0x2e
   145ee:	b7 a5       	ldd	r27, Z+47	; 0x2f
   145f0:	8c 91       	ld	r24, X
   145f2:	92 ad       	ldd	r25, Z+58	; 0x3a
   145f4:	89 23       	and	r24, r25
   145f6:	8c 93       	st	X, r24
   145f8:	82 a5       	ldd	r24, Z+42	; 0x2a
   145fa:	40 8d       	ldd	r20, Z+24	; 0x18
   145fc:	51 8d       	ldd	r21, Z+25	; 0x19
   145fe:	a0 a9       	ldd	r26, Z+48	; 0x30
   14600:	b1 a9       	ldd	r27, Z+49	; 0x31
   14602:	23 ad       	ldd	r18, Z+59	; 0x3b
   14604:	9c 91       	ld	r25, X
   14606:	92 23       	and	r25, r18
   14608:	9c 93       	st	X, r25
   1460a:	41 15       	cp	r20, r1
   1460c:	51 05       	cpc	r21, r1
   1460e:	49 f5       	brne	.+82     	; 0x14662 <LCDWIKI_KBV::Invert_Display(bool)+0x78>
   14610:	91 e6       	ldi	r25, 0x61	; 97
   14612:	92 b9       	out	0x02, r25	; 2
   14614:	a2 a9       	ldd	r26, Z+50	; 0x32
   14616:	b3 a9       	ldd	r27, Z+51	; 0x33
   14618:	9c 91       	ld	r25, X
   1461a:	24 ad       	ldd	r18, Z+60	; 0x3c
   1461c:	92 23       	and	r25, r18
   1461e:	9c 93       	st	X, r25
   14620:	a2 a9       	ldd	r26, Z+50	; 0x32
   14622:	b3 a9       	ldd	r27, Z+51	; 0x33
   14624:	9c 91       	ld	r25, X
   14626:	20 ad       	ldd	r18, Z+56	; 0x38
   14628:	92 2b       	or	r25, r18
   1462a:	9c 93       	st	X, r25
   1462c:	a0 a9       	ldd	r26, Z+48	; 0x30
   1462e:	b1 a9       	ldd	r27, Z+49	; 0x31
   14630:	9c 91       	ld	r25, X
   14632:	27 a9       	ldd	r18, Z+55	; 0x37
   14634:	92 2b       	or	r25, r18
   14636:	9c 93       	st	X, r25
   14638:	68 27       	eor	r22, r24
   1463a:	62 b9       	out	0x02, r22	; 2
   1463c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1463e:	b3 a9       	ldd	r27, Z+51	; 0x33
   14640:	8c 91       	ld	r24, X
   14642:	94 ad       	ldd	r25, Z+60	; 0x3c
   14644:	89 23       	and	r24, r25
   14646:	8c 93       	st	X, r24
   14648:	a2 a9       	ldd	r26, Z+50	; 0x32
   1464a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1464c:	8c 91       	ld	r24, X
   1464e:	90 ad       	ldd	r25, Z+56	; 0x38
   14650:	89 2b       	or	r24, r25
   14652:	8c 93       	st	X, r24
   14654:	a6 a5       	ldd	r26, Z+46	; 0x2e
   14656:	b7 a5       	ldd	r27, Z+47	; 0x2f
   14658:	8c 91       	ld	r24, X
   1465a:	96 a9       	ldd	r25, Z+54	; 0x36
   1465c:	89 2b       	or	r24, r25
   1465e:	8c 93       	st	X, r24
   14660:	08 95       	ret
   14662:	41 30       	cpi	r20, 0x01	; 1
   14664:	51 05       	cpc	r21, r1
   14666:	d9 f4       	brne	.+54     	; 0x1469e <LCDWIKI_KBV::Invert_Display(bool)+0xb4>
   14668:	91 e0       	ldi	r25, 0x01	; 1
   1466a:	92 b9       	out	0x02, r25	; 2
   1466c:	a2 a9       	ldd	r26, Z+50	; 0x32
   1466e:	b3 a9       	ldd	r27, Z+51	; 0x33
   14670:	9c 91       	ld	r25, X
   14672:	24 ad       	ldd	r18, Z+60	; 0x3c
   14674:	92 23       	and	r25, r18
   14676:	9c 93       	st	X, r25
   14678:	a2 a9       	ldd	r26, Z+50	; 0x32
   1467a:	b3 a9       	ldd	r27, Z+51	; 0x33
   1467c:	9c 91       	ld	r25, X
   1467e:	20 ad       	ldd	r18, Z+56	; 0x38
   14680:	92 2b       	or	r25, r18
   14682:	9c 93       	st	X, r25
   14684:	a0 a9       	ldd	r26, Z+48	; 0x30
   14686:	b1 a9       	ldd	r27, Z+49	; 0x31
   14688:	9c 91       	ld	r25, X
   1468a:	27 a9       	ldd	r18, Z+55	; 0x37
   1468c:	92 2b       	or	r25, r18
   1468e:	9c 93       	st	X, r25
   14690:	86 17       	cp	r24, r22
   14692:	19 f0       	breq	.+6      	; 0x1469a <LCDWIKI_KBV::Invert_Display(bool)+0xb0>
   14694:	88 e0       	ldi	r24, 0x08	; 8
   14696:	82 b9       	out	0x02, r24	; 2
   14698:	d1 cf       	rjmp	.-94     	; 0x1463c <LCDWIKI_KBV::Invert_Display(bool)+0x52>
   1469a:	8a e0       	ldi	r24, 0x0A	; 10
   1469c:	fc cf       	rjmp	.-8      	; 0x14696 <LCDWIKI_KBV::Invert_Display(bool)+0xac>
   1469e:	86 17       	cp	r24, r22
   146a0:	99 f0       	breq	.+38     	; 0x146c8 <LCDWIKI_KBV::Invert_Display(bool)+0xde>
   146a2:	81 e2       	ldi	r24, 0x21	; 33
   146a4:	82 b9       	out	0x02, r24	; 2
   146a6:	a2 a9       	ldd	r26, Z+50	; 0x32
   146a8:	b3 a9       	ldd	r27, Z+51	; 0x33
   146aa:	8c 91       	ld	r24, X
   146ac:	94 ad       	ldd	r25, Z+60	; 0x3c
   146ae:	89 23       	and	r24, r25
   146b0:	8c 93       	st	X, r24
   146b2:	a2 a9       	ldd	r26, Z+50	; 0x32
   146b4:	b3 a9       	ldd	r27, Z+51	; 0x33
   146b6:	8c 91       	ld	r24, X
   146b8:	90 ad       	ldd	r25, Z+56	; 0x38
   146ba:	89 2b       	or	r24, r25
   146bc:	8c 93       	st	X, r24
   146be:	a0 a9       	ldd	r26, Z+48	; 0x30
   146c0:	b1 a9       	ldd	r27, Z+49	; 0x31
   146c2:	8c 91       	ld	r24, X
   146c4:	97 a9       	ldd	r25, Z+55	; 0x37
   146c6:	c4 cf       	rjmp	.-120    	; 0x14650 <LCDWIKI_KBV::Invert_Display(bool)+0x66>
   146c8:	80 e2       	ldi	r24, 0x20	; 32
   146ca:	ec cf       	rjmp	.-40     	; 0x146a4 <LCDWIKI_KBV::Invert_Display(bool)+0xba>

000146cc <LCDWIKI_KBV::init_table8(void const*, int)>:
_ZN11LCDWIKI_KBV11init_table8EPKvi():
   146cc:	af 92       	push	r10
   146ce:	bf 92       	push	r11
   146d0:	cf 92       	push	r12
   146d2:	df 92       	push	r13
   146d4:	ef 92       	push	r14
   146d6:	ff 92       	push	r15
   146d8:	1f 93       	push	r17
   146da:	cf 93       	push	r28
   146dc:	df 93       	push	r29
   146de:	cd b7       	in	r28, 0x3d	; 61
   146e0:	de b7       	in	r29, 0x3e	; 62
   146e2:	68 97       	sbiw	r28, 0x18	; 24
   146e4:	0f b6       	in	r0, 0x3f	; 63
   146e6:	f8 94       	cli
   146e8:	de bf       	out	0x3e, r29	; 62
   146ea:	0f be       	out	0x3f, r0	; 63
   146ec:	cd bf       	out	0x3d, r28	; 61
   146ee:	5c 01       	movw	r10, r24
   146f0:	7b 01       	movw	r14, r22
   146f2:	6a 01       	movw	r12, r20
   146f4:	1c 14       	cp	r1, r12
   146f6:	1d 04       	cpc	r1, r13
   146f8:	74 f5       	brge	.+92     	; 0x14756 <LCDWIKI_KBV::init_table8(void const*, int)+0x8a>
   146fa:	f7 01       	movw	r30, r14
   146fc:	64 91       	lpm	r22, Z
   146fe:	31 96       	adiw	r30, 0x01	; 1
   14700:	14 91       	lpm	r17, Z
   14702:	f2 e0       	ldi	r31, 0x02	; 2
   14704:	ef 0e       	add	r14, r31
   14706:	f1 1c       	adc	r15, r1
   14708:	6f 37       	cpi	r22, 0x7F	; 127
   1470a:	79 f0       	breq	.+30     	; 0x1472a <LCDWIKI_KBV::init_table8(void const*, int)+0x5e>
   1470c:	de 01       	movw	r26, r28
   1470e:	11 96       	adiw	r26, 0x01	; 1
   14710:	30 e0       	ldi	r19, 0x00	; 0
   14712:	20 e0       	ldi	r18, 0x00	; 0
   14714:	ad 01       	movw	r20, r26
   14716:	21 17       	cp	r18, r17
   14718:	b0 f4       	brcc	.+44     	; 0x14746 <LCDWIKI_KBV::init_table8(void const*, int)+0x7a>
   1471a:	f7 01       	movw	r30, r14
   1471c:	e2 0f       	add	r30, r18
   1471e:	f3 1f       	adc	r31, r19
   14720:	e4 91       	lpm	r30, Z
   14722:	ed 93       	st	X+, r30
   14724:	2f 5f       	subi	r18, 0xFF	; 255
   14726:	3f 4f       	sbci	r19, 0xFF	; 255
   14728:	f6 cf       	rjmp	.-20     	; 0x14716 <LCDWIKI_KBV::init_table8(void const*, int)+0x4a>
   1472a:	61 2f       	mov	r22, r17
   1472c:	70 e0       	ldi	r23, 0x00	; 0
   1472e:	90 e0       	ldi	r25, 0x00	; 0
   14730:	80 e0       	ldi	r24, 0x00	; 0
   14732:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
   14736:	10 e0       	ldi	r17, 0x00	; 0
   14738:	61 2f       	mov	r22, r17
   1473a:	70 e0       	ldi	r23, 0x00	; 0
   1473c:	6e 5f       	subi	r22, 0xFE	; 254
   1473e:	7f 4f       	sbci	r23, 0xFF	; 255
   14740:	c6 1a       	sub	r12, r22
   14742:	d7 0a       	sbc	r13, r23
   14744:	d7 cf       	rjmp	.-82     	; 0x146f4 <LCDWIKI_KBV::init_table8(void const*, int)+0x28>
   14746:	e1 0e       	add	r14, r17
   14748:	f1 1c       	adc	r15, r1
   1474a:	70 e0       	ldi	r23, 0x00	; 0
   1474c:	21 2f       	mov	r18, r17
   1474e:	c5 01       	movw	r24, r10
   14750:	0e 94 15 98 	call	0x1302a	; 0x1302a <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   14754:	f1 cf       	rjmp	.-30     	; 0x14738 <LCDWIKI_KBV::init_table8(void const*, int)+0x6c>
   14756:	68 96       	adiw	r28, 0x18	; 24
   14758:	0f b6       	in	r0, 0x3f	; 63
   1475a:	f8 94       	cli
   1475c:	de bf       	out	0x3e, r29	; 62
   1475e:	0f be       	out	0x3f, r0	; 63
   14760:	cd bf       	out	0x3d, r28	; 61
   14762:	df 91       	pop	r29
   14764:	cf 91       	pop	r28
   14766:	1f 91       	pop	r17
   14768:	ff 90       	pop	r15
   1476a:	ef 90       	pop	r14
   1476c:	df 90       	pop	r13
   1476e:	cf 90       	pop	r12
   14770:	bf 90       	pop	r11
   14772:	af 90       	pop	r10
   14774:	08 95       	ret

00014776 <LCDWIKI_KBV::start(unsigned int)>:
_ZN11LCDWIKI_KBV5startEj():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:954

void LCDWIKI_KBV::start(uint16_t ID)
{
   14776:	0f 93       	push	r16
   14778:	1f 93       	push	r17
   1477a:	cf 93       	push	r28
   1477c:	df 93       	push	r29
   1477e:	ec 01       	movw	r28, r24
   14780:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
	reset();
   14782:	0e 94 bf 97 	call	0x12f7e	; 0x12f7e <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   14786:	68 ec       	ldi	r22, 0xC8	; 200
   14788:	70 e0       	ldi	r23, 0x00	; 0
   1478a:	80 e0       	ldi	r24, 0x00	; 0
   1478c:	90 e0       	ldi	r25, 0x00	; 0
   1478e:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   14792:	06 39       	cpi	r16, 0x96	; 150
   14794:	17 47       	sbci	r17, 0x77	; 119
   14796:	b9 f5       	brne	.+110    	; 0x14806 <LCDWIKI_KBV::start(unsigned int)+0x90>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   14798:	89 e0       	ldi	r24, 0x09	; 9
   1479a:	90 e0       	ldi	r25, 0x00	; 0
   1479c:	99 8f       	std	Y+25, r25	; 0x19
   1479e:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   147a0:	8a e2       	ldi	r24, 0x2A	; 42
   147a2:	90 e0       	ldi	r25, 0x00	; 0
   147a4:	9d 8f       	std	Y+29, r25	; 0x1d
   147a6:	8c 8f       	std	Y+28, r24	; 0x1c
   147a8:	8b e2       	ldi	r24, 0x2B	; 43
   147aa:	90 e0       	ldi	r25, 0x00	; 0
   147ac:	9f 8f       	std	Y+31, r25	; 0x1f
   147ae:	8e 8f       	std	Y+30, r24	; 0x1e
   147b0:	8c e2       	ldi	r24, 0x2C	; 44
   147b2:	90 e0       	ldi	r25, 0x00	; 0
   147b4:	99 a3       	std	Y+33, r25	; 0x21
   147b6:	88 a3       	std	Y+32, r24	; 0x20
   147b8:	8e e2       	ldi	r24, 0x2E	; 46
   147ba:	90 e0       	ldi	r25, 0x00	; 0
   147bc:	9b a3       	std	Y+35, r25	; 0x23
   147be:	8a a3       	std	Y+34, r24	; 0x22
   147c0:	83 e3       	ldi	r24, 0x33	; 51
   147c2:	90 e0       	ldi	r25, 0x00	; 0
   147c4:	9d a3       	std	Y+37, r25	; 0x25
   147c6:	8c a3       	std	Y+36, r24	; 0x24
   147c8:	87 e3       	ldi	r24, 0x37	; 55
   147ca:	90 e0       	ldi	r25, 0x00	; 0
   147cc:	9f a3       	std	Y+39, r25	; 0x27
   147ce:	8e a3       	std	Y+38, r24	; 0x26
   147d0:	86 e3       	ldi	r24, 0x36	; 54
   147d2:	90 e0       	ldi	r25, 0x00	; 0
   147d4:	99 a7       	std	Y+41, r25	; 0x29
   147d6:	88 a7       	std	Y+40, r24	; 0x28
   147d8:	1b a6       	std	Y+43, r1	; 0x2b
   147da:	1a a6       	std	Y+42, r1	; 0x2a
   147dc:	1d a6       	std	Y+45, r1	; 0x2d
   147de:	1c a6       	std	Y+44, r1	; 0x2c
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:996
            	0xF0, 1, 0x69,
            	0x13, 0,
            	0x11, 0,
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
   147e0:	4c e6       	ldi	r20, 0x6C	; 108
   147e2:	50 e0       	ldi	r21, 0x00	; 0
   147e4:	66 e1       	ldi	r22, 0x16	; 22
   147e6:	71 e6       	ldi	r23, 0x61	; 97
   147e8:	ce 01       	movw	r24, r28
   147ea:	0e 94 66 a3 	call	0x146cc	; 0x146cc <LCDWIKI_KBV::init_table8(void const*, int)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   147ee:	6e 89       	ldd	r22, Y+22	; 0x16
   147f0:	ce 01       	movw	r24, r28
   147f2:	0e 94 72 a1 	call	0x142e4	; 0x142e4 <LCDWIKI_KBV::Set_Rotation(unsigned char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
	Invert_Display(false);
   147f6:	60 e0       	ldi	r22, 0x00	; 0
   147f8:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1004
}
   147fa:	df 91       	pop	r29
   147fc:	cf 91       	pop	r28
   147fe:	1f 91       	pop	r17
   14800:	0f 91       	pop	r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1003
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
   14802:	0c 94 f5 a2 	jmp	0x145ea	; 0x145ea <LCDWIKI_KBV::Invert_Display(bool)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   14806:	8f ef       	ldi	r24, 0xFF	; 255
   14808:	90 e0       	ldi	r25, 0x00	; 0
   1480a:	99 8f       	std	Y+25, r25	; 0x19
   1480c:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1000
			break;		
   1480e:	ef cf       	rjmp	.-34     	; 0x147ee <LCDWIKI_KBV::start(unsigned int)+0x78>

00014810 <LCDWIKI_KBV::Init_LCD()>:
_ZN11LCDWIKI_KBV8Init_LCDEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:233
}
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
   14810:	cf 93       	push	r28
   14812:	df 93       	push	r29
   14814:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
	reset();
   14816:	0e 94 bf 97 	call	0x12f7e	; 0x12f7e <LCDWIKI_KBV::reset()>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   1481a:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1481c:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1481e:	01 96       	adiw	r24, 0x01	; 1
   14820:	29 f4       	brne	.+10     	; 0x1482c <LCDWIKI_KBV::Init_LCD()+0x1c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
	{
		lcd_model = Read_ID(); 
   14822:	ce 01       	movw	r24, r28
   14824:	0e 94 1b a0 	call	0x14036	; 0x14036 <LCDWIKI_KBV::Read_ID()>
   14828:	9b 8f       	std	Y+27, r25	; 0x1b
   1482a:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   1482c:	6a 8d       	ldd	r22, Y+26	; 0x1a
   1482e:	7b 8d       	ldd	r23, Y+27	; 0x1b
   14830:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:242
//	Set_Rotation(0);
}
   14832:	df 91       	pop	r29
   14834:	cf 91       	pop	r28
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   14836:	0c 94 bb a3 	jmp	0x14776	; 0x14776 <LCDWIKI_KBV::start(unsigned int)>

0001483a <LCDWIKI_TOUCH::LCDWIKI_TOUCH(signed char, signed char, signed char, signed char, signed char)>:
_ZN13LCDWIKI_TOUCHC2Eaaaaa():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:362
}

void LCDWIKI_TOUCH::TP_Set_State(uint8_t val)
{
	touch_statue = val;
}
   1483a:	bf 92       	push	r11
   1483c:	cf 92       	push	r12
   1483e:	df 92       	push	r13
   14840:	ef 92       	push	r14
   14842:	ff 92       	push	r15
   14844:	0f 93       	push	r16
   14846:	1f 93       	push	r17
   14848:	cf 93       	push	r28
   1484a:	df 93       	push	r29
   1484c:	ec 01       	movw	r28, r24
   1484e:	b6 2e       	mov	r11, r22
   14850:	f4 2e       	mov	r15, r20
   14852:	12 2f       	mov	r17, r18
   14854:	86 2f       	mov	r24, r22
   14856:	66 0f       	add	r22, r22
   14858:	99 0b       	sbc	r25, r25
   1485a:	fc 01       	movw	r30, r24
   1485c:	e6 50       	subi	r30, 0x06	; 6
   1485e:	fe 49       	sbci	r31, 0x9E	; 158
   14860:	e4 91       	lpm	r30, Z
   14862:	f0 e0       	ldi	r31, 0x00	; 0
   14864:	ee 0f       	add	r30, r30
   14866:	ff 1f       	adc	r31, r31
   14868:	e0 5c       	subi	r30, 0xC0	; 192
   1486a:	fd 49       	sbci	r31, 0x9D	; 157
   1486c:	25 91       	lpm	r18, Z+
   1486e:	34 91       	lpm	r19, Z
   14870:	38 8b       	std	Y+16, r19	; 0x10
   14872:	2f 87       	std	Y+15, r18	; 0x0f
   14874:	a4 2f       	mov	r26, r20
   14876:	44 0f       	add	r20, r20
   14878:	bb 0b       	sbc	r27, r27
   1487a:	fd 01       	movw	r30, r26
   1487c:	e6 50       	subi	r30, 0x06	; 6
   1487e:	fe 49       	sbci	r31, 0x9E	; 158
   14880:	e4 91       	lpm	r30, Z
   14882:	f0 e0       	ldi	r31, 0x00	; 0
   14884:	ee 0f       	add	r30, r30
   14886:	ff 1f       	adc	r31, r31
   14888:	e0 5c       	subi	r30, 0xC0	; 192
   1488a:	fd 49       	sbci	r31, 0x9D	; 157
   1488c:	25 91       	lpm	r18, Z+
   1488e:	34 91       	lpm	r19, Z
   14890:	3a 8b       	std	Y+18, r19	; 0x12
   14892:	29 8b       	std	Y+17, r18	; 0x11
   14894:	61 2f       	mov	r22, r17
   14896:	01 2e       	mov	r0, r17
   14898:	00 0c       	add	r0, r0
   1489a:	77 0b       	sbc	r23, r23
   1489c:	fb 01       	movw	r30, r22
   1489e:	e6 50       	subi	r30, 0x06	; 6
   148a0:	fe 49       	sbci	r31, 0x9E	; 158
   148a2:	e4 91       	lpm	r30, Z
   148a4:	f0 e0       	ldi	r31, 0x00	; 0
   148a6:	ee 0f       	add	r30, r30
   148a8:	ff 1f       	adc	r31, r31
   148aa:	e0 5d       	subi	r30, 0xD0	; 208
   148ac:	fd 49       	sbci	r31, 0x9D	; 157
   148ae:	25 91       	lpm	r18, Z+
   148b0:	34 91       	lpm	r19, Z
   148b2:	3c 8b       	std	Y+20, r19	; 0x14
   148b4:	2b 8b       	std	Y+19, r18	; 0x13
   148b6:	40 2f       	mov	r20, r16
   148b8:	00 2e       	mov	r0, r16
   148ba:	00 0c       	add	r0, r0
   148bc:	55 0b       	sbc	r21, r21
   148be:	fa 01       	movw	r30, r20
   148c0:	e6 50       	subi	r30, 0x06	; 6
   148c2:	fe 49       	sbci	r31, 0x9E	; 158
   148c4:	e4 91       	lpm	r30, Z
   148c6:	f0 e0       	ldi	r31, 0x00	; 0
   148c8:	ee 0f       	add	r30, r30
   148ca:	ff 1f       	adc	r31, r31
   148cc:	e0 5c       	subi	r30, 0xC0	; 192
   148ce:	fd 49       	sbci	r31, 0x9D	; 157
   148d0:	25 91       	lpm	r18, Z+
   148d2:	34 91       	lpm	r19, Z
   148d4:	3e 8b       	std	Y+22, r19	; 0x16
   148d6:	2d 8b       	std	Y+21, r18	; 0x15
   148d8:	2e 2d       	mov	r18, r14
   148da:	0e 2c       	mov	r0, r14
   148dc:	00 0c       	add	r0, r0
   148de:	33 0b       	sbc	r19, r19
   148e0:	f9 01       	movw	r30, r18
   148e2:	e6 50       	subi	r30, 0x06	; 6
   148e4:	fe 49       	sbci	r31, 0x9E	; 158
   148e6:	e4 91       	lpm	r30, Z
   148e8:	f0 e0       	ldi	r31, 0x00	; 0
   148ea:	ee 0f       	add	r30, r30
   148ec:	ff 1f       	adc	r31, r31
   148ee:	e0 5d       	subi	r30, 0xD0	; 208
   148f0:	fd 49       	sbci	r31, 0x9D	; 157
   148f2:	c5 90       	lpm	r12, Z+
   148f4:	d4 90       	lpm	r13, Z
   148f6:	d8 8e       	std	Y+24, r13	; 0x18
   148f8:	cf 8a       	std	Y+23, r12	; 0x17
   148fa:	fc 01       	movw	r30, r24
   148fc:	ec 53       	subi	r30, 0x3C	; 60
   148fe:	fe 49       	sbci	r31, 0x9E	; 158
   14900:	e4 91       	lpm	r30, Z
   14902:	e9 8f       	std	Y+25, r30	; 0x19
   14904:	fd 01       	movw	r30, r26
   14906:	ec 53       	subi	r30, 0x3C	; 60
   14908:	fe 49       	sbci	r31, 0x9E	; 158
   1490a:	e4 91       	lpm	r30, Z
   1490c:	ea 8f       	std	Y+26, r30	; 0x1a
   1490e:	fb 01       	movw	r30, r22
   14910:	ec 53       	subi	r30, 0x3C	; 60
   14912:	fe 49       	sbci	r31, 0x9E	; 158
   14914:	e4 91       	lpm	r30, Z
   14916:	eb 8f       	std	Y+27, r30	; 0x1b
   14918:	fa 01       	movw	r30, r20
   1491a:	ec 53       	subi	r30, 0x3C	; 60
   1491c:	fe 49       	sbci	r31, 0x9E	; 158
   1491e:	e4 91       	lpm	r30, Z
   14920:	ec 8f       	std	Y+28, r30	; 0x1c
   14922:	f9 01       	movw	r30, r18
   14924:	ec 53       	subi	r30, 0x3C	; 60
   14926:	fe 49       	sbci	r31, 0x9E	; 158
   14928:	e4 91       	lpm	r30, Z
   1492a:	ed 8f       	std	Y+29, r30	; 0x1d
   1492c:	61 e0       	ldi	r22, 0x01	; 1
   1492e:	8b 2d       	mov	r24, r11
   14930:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   14934:	61 e0       	ldi	r22, 0x01	; 1
   14936:	8f 2d       	mov	r24, r15
   14938:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   1493c:	60 e0       	ldi	r22, 0x00	; 0
   1493e:	81 2f       	mov	r24, r17
   14940:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   14944:	61 e0       	ldi	r22, 0x01	; 1
   14946:	80 2f       	mov	r24, r16
   14948:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   1494c:	60 e0       	ldi	r22, 0x00	; 0
   1494e:	8e 2d       	mov	r24, r14
   14950:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   14954:	1c 86       	std	Y+12, r1	; 0x0c
   14956:	1d 86       	std	Y+13, r1	; 0x0d
   14958:	1e 86       	std	Y+14, r1	; 0x0e
   1495a:	19 86       	std	Y+9, r1	; 0x09
   1495c:	18 86       	std	Y+8, r1	; 0x08
   1495e:	1b 86       	std	Y+11, r1	; 0x0b
   14960:	1a 86       	std	Y+10, r1	; 0x0a
   14962:	19 82       	std	Y+1, r1	; 0x01
   14964:	18 82       	st	Y, r1
   14966:	1b 82       	std	Y+3, r1	; 0x03
   14968:	1a 82       	std	Y+2, r1	; 0x02
   1496a:	8f ef       	ldi	r24, 0xFF	; 255
   1496c:	9f ef       	ldi	r25, 0xFF	; 255
   1496e:	9d 83       	std	Y+5, r25	; 0x05
   14970:	8c 83       	std	Y+4, r24	; 0x04
   14972:	9f 83       	std	Y+7, r25	; 0x07
   14974:	8e 83       	std	Y+6, r24	; 0x06
   14976:	df 91       	pop	r29
   14978:	cf 91       	pop	r28
   1497a:	1f 91       	pop	r17
   1497c:	0f 91       	pop	r16
   1497e:	ff 90       	pop	r15
   14980:	ef 90       	pop	r14
   14982:	df 90       	pop	r13
   14984:	cf 90       	pop	r12
   14986:	bf 90       	pop	r11
   14988:	08 95       	ret

0001498a <LCDWIKI_TOUCH::TP_Init(unsigned char, unsigned int, unsigned int)>:
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   1498a:	fc 01       	movw	r30, r24
   1498c:	a5 89       	ldd	r26, Z+21	; 0x15
   1498e:	b6 89       	ldd	r27, Z+22	; 0x16
   14990:	8c 91       	ld	r24, X
   14992:	94 8d       	ldd	r25, Z+28	; 0x1c
   14994:	89 2b       	or	r24, r25
   14996:	8c 93       	st	X, r24
   14998:	a1 89       	ldd	r26, Z+17	; 0x11
   1499a:	b2 89       	ldd	r27, Z+18	; 0x12
   1499c:	8c 91       	ld	r24, X
   1499e:	92 8d       	ldd	r25, Z+26	; 0x1a
   149a0:	89 2b       	or	r24, r25
   149a2:	8c 93       	st	X, r24
   149a4:	a7 85       	ldd	r26, Z+15	; 0x0f
   149a6:	b0 89       	ldd	r27, Z+16	; 0x10
   149a8:	8c 91       	ld	r24, X
   149aa:	91 8d       	ldd	r25, Z+25	; 0x19
   149ac:	89 2b       	or	r24, r25
   149ae:	8c 93       	st	X, r24
   149b0:	51 87       	std	Z+9, r21	; 0x09
   149b2:	40 87       	std	Z+8, r20	; 0x08
   149b4:	33 87       	std	Z+11, r19	; 0x0b
   149b6:	22 87       	std	Z+10, r18	; 0x0a
_ZN13LCDWIKI_TOUCH16LCD_Set_RotationEh():
   149b8:	66 87       	std	Z+14, r22	; 0x0e
_ZN13LCDWIKI_TOUCH7TP_InitEhjj():
   149ba:	08 95       	ret

000149bc <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>:
_ZN13LCDWIKI_TOUCH13TP_Write_ByteEh():
   149bc:	fc 01       	movw	r30, r24
   149be:	28 e0       	ldi	r18, 0x08	; 8
   149c0:	30 e0       	ldi	r19, 0x00	; 0
   149c2:	90 e8       	ldi	r25, 0x80	; 128
   149c4:	a5 89       	ldd	r26, Z+21	; 0x15
   149c6:	b6 89       	ldd	r27, Z+22	; 0x16
   149c8:	84 8d       	ldd	r24, Z+28	; 0x1c
   149ca:	46 2f       	mov	r20, r22
   149cc:	49 23       	and	r20, r25
   149ce:	a9 f0       	breq	.+42     	; 0x149fa <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x3e>
   149d0:	4c 91       	ld	r20, X
   149d2:	84 2b       	or	r24, r20
   149d4:	8c 93       	st	X, r24
   149d6:	a1 89       	ldd	r26, Z+17	; 0x11
   149d8:	b2 89       	ldd	r27, Z+18	; 0x12
   149da:	4c 91       	ld	r20, X
   149dc:	82 8d       	ldd	r24, Z+26	; 0x1a
   149de:	80 95       	com	r24
   149e0:	84 23       	and	r24, r20
   149e2:	8c 93       	st	X, r24
   149e4:	a1 89       	ldd	r26, Z+17	; 0x11
   149e6:	b2 89       	ldd	r27, Z+18	; 0x12
   149e8:	8c 91       	ld	r24, X
   149ea:	42 8d       	ldd	r20, Z+26	; 0x1a
   149ec:	84 2b       	or	r24, r20
   149ee:	8c 93       	st	X, r24
   149f0:	96 95       	lsr	r25
   149f2:	21 50       	subi	r18, 0x01	; 1
   149f4:	31 09       	sbc	r19, r1
   149f6:	31 f7       	brne	.-52     	; 0x149c4 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x8>
   149f8:	08 95       	ret
   149fa:	4c 91       	ld	r20, X
   149fc:	80 95       	com	r24
   149fe:	84 23       	and	r24, r20
   14a00:	e9 cf       	rjmp	.-46     	; 0x149d4 <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)+0x18>

00014a02 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>:
_ZN13LCDWIKI_TOUCH11TP_Read_ADCEh():
   14a02:	cf 93       	push	r28
   14a04:	df 93       	push	r29
   14a06:	ec 01       	movw	r28, r24
   14a08:	ef 85       	ldd	r30, Y+15	; 0x0f
   14a0a:	f8 89       	ldd	r31, Y+16	; 0x10
   14a0c:	90 81       	ld	r25, Z
   14a0e:	89 8d       	ldd	r24, Y+25	; 0x19
   14a10:	80 95       	com	r24
   14a12:	89 23       	and	r24, r25
   14a14:	80 83       	st	Z, r24
   14a16:	e9 89       	ldd	r30, Y+17	; 0x11
   14a18:	fa 89       	ldd	r31, Y+18	; 0x12
   14a1a:	90 81       	ld	r25, Z
   14a1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
   14a1e:	80 95       	com	r24
   14a20:	89 23       	and	r24, r25
   14a22:	80 83       	st	Z, r24
   14a24:	ed 89       	ldd	r30, Y+21	; 0x15
   14a26:	fe 89       	ldd	r31, Y+22	; 0x16
   14a28:	90 81       	ld	r25, Z
   14a2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   14a2c:	80 95       	com	r24
   14a2e:	89 23       	and	r24, r25
   14a30:	80 83       	st	Z, r24
   14a32:	ce 01       	movw	r24, r28
   14a34:	0e 94 de a4 	call	0x149bc	; 0x149bc <LCDWIKI_TOUCH::TP_Write_Byte(unsigned char)>
   14a38:	e9 89       	ldd	r30, Y+17	; 0x11
   14a3a:	fa 89       	ldd	r31, Y+18	; 0x12
   14a3c:	90 81       	ld	r25, Z
   14a3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
   14a40:	80 95       	com	r24
   14a42:	89 23       	and	r24, r25
   14a44:	80 83       	st	Z, r24
   14a46:	e9 89       	ldd	r30, Y+17	; 0x11
   14a48:	fa 89       	ldd	r31, Y+18	; 0x12
   14a4a:	80 81       	ld	r24, Z
   14a4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
   14a4e:	89 2b       	or	r24, r25
   14a50:	80 83       	st	Z, r24
   14a52:	e9 89       	ldd	r30, Y+17	; 0x11
   14a54:	fa 89       	ldd	r31, Y+18	; 0x12
   14a56:	90 81       	ld	r25, Z
   14a58:	8a 8d       	ldd	r24, Y+26	; 0x1a
   14a5a:	80 95       	com	r24
   14a5c:	89 23       	and	r24, r25
   14a5e:	80 83       	st	Z, r24
   14a60:	30 e1       	ldi	r19, 0x10	; 16
   14a62:	90 e0       	ldi	r25, 0x00	; 0
   14a64:	80 e0       	ldi	r24, 0x00	; 0
   14a66:	88 0f       	add	r24, r24
   14a68:	99 1f       	adc	r25, r25
   14a6a:	e9 89       	ldd	r30, Y+17	; 0x11
   14a6c:	fa 89       	ldd	r31, Y+18	; 0x12
   14a6e:	40 81       	ld	r20, Z
   14a70:	2a 8d       	ldd	r18, Y+26	; 0x1a
   14a72:	20 95       	com	r18
   14a74:	24 23       	and	r18, r20
   14a76:	20 83       	st	Z, r18
   14a78:	e9 89       	ldd	r30, Y+17	; 0x11
   14a7a:	fa 89       	ldd	r31, Y+18	; 0x12
   14a7c:	20 81       	ld	r18, Z
   14a7e:	4a 8d       	ldd	r20, Y+26	; 0x1a
   14a80:	24 2b       	or	r18, r20
   14a82:	20 83       	st	Z, r18
   14a84:	eb 89       	ldd	r30, Y+19	; 0x13
   14a86:	fc 89       	ldd	r31, Y+20	; 0x14
   14a88:	20 81       	ld	r18, Z
   14a8a:	4b 8d       	ldd	r20, Y+27	; 0x1b
   14a8c:	24 23       	and	r18, r20
   14a8e:	09 f0       	breq	.+2      	; 0x14a92 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x90>
   14a90:	01 96       	adiw	r24, 0x01	; 1
   14a92:	31 50       	subi	r19, 0x01	; 1
   14a94:	41 f7       	brne	.-48     	; 0x14a66 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0x64>
   14a96:	ef 85       	ldd	r30, Y+15	; 0x0f
   14a98:	f8 89       	ldd	r31, Y+16	; 0x10
   14a9a:	20 81       	ld	r18, Z
   14a9c:	39 8d       	ldd	r19, Y+25	; 0x19
   14a9e:	23 2b       	or	r18, r19
   14aa0:	20 83       	st	Z, r18
   14aa2:	24 e0       	ldi	r18, 0x04	; 4
   14aa4:	96 95       	lsr	r25
   14aa6:	87 95       	ror	r24
   14aa8:	2a 95       	dec	r18
   14aaa:	e1 f7       	brne	.-8      	; 0x14aa4 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)+0xa2>
   14aac:	df 91       	pop	r29
   14aae:	cf 91       	pop	r28
   14ab0:	08 95       	ret

00014ab2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh():
   14ab2:	9f 92       	push	r9
   14ab4:	af 92       	push	r10
   14ab6:	bf 92       	push	r11
   14ab8:	cf 92       	push	r12
   14aba:	df 92       	push	r13
   14abc:	ef 92       	push	r14
   14abe:	ff 92       	push	r15
   14ac0:	0f 93       	push	r16
   14ac2:	1f 93       	push	r17
   14ac4:	cf 93       	push	r28
   14ac6:	df 93       	push	r29
   14ac8:	00 d0       	rcall	.+0      	; 0x14aca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x18>
   14aca:	00 d0       	rcall	.+0      	; 0x14acc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1a>
   14acc:	00 d0       	rcall	.+0      	; 0x14ace <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x1c>
   14ace:	1f 92       	push	r1
   14ad0:	cd b7       	in	r28, 0x3d	; 61
   14ad2:	de b7       	in	r29, 0x3e	; 62
   14ad4:	5c 01       	movw	r10, r24
   14ad6:	96 2e       	mov	r9, r22
   14ad8:	8e 01       	movw	r16, r28
   14ada:	0f 5f       	subi	r16, 0xFF	; 255
   14adc:	1f 4f       	sbci	r17, 0xFF	; 255
   14ade:	6e 01       	movw	r12, r28
   14ae0:	8b e0       	ldi	r24, 0x0B	; 11
   14ae2:	c8 0e       	add	r12, r24
   14ae4:	d1 1c       	adc	r13, r1
   14ae6:	78 01       	movw	r14, r16
   14ae8:	69 2d       	mov	r22, r9
   14aea:	c5 01       	movw	r24, r10
   14aec:	0e 94 01 a5 	call	0x14a02	; 0x14a02 <LCDWIKI_TOUCH::TP_Read_ADC(unsigned char)>
   14af0:	d7 01       	movw	r26, r14
   14af2:	8d 93       	st	X+, r24
   14af4:	9d 93       	st	X+, r25
   14af6:	7d 01       	movw	r14, r26
   14af8:	ac 15       	cp	r26, r12
   14afa:	bd 05       	cpc	r27, r13
   14afc:	a9 f7       	brne	.-22     	; 0x14ae8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x36>
   14afe:	a8 01       	movw	r20, r16
   14b00:	48 5f       	subi	r20, 0xF8	; 248
   14b02:	5f 4f       	sbci	r21, 0xFF	; 255
   14b04:	f8 01       	movw	r30, r16
   14b06:	d8 01       	movw	r26, r16
   14b08:	8d 91       	ld	r24, X+
   14b0a:	9c 91       	ld	r25, X
   14b0c:	11 97       	sbiw	r26, 0x01	; 1
   14b0e:	22 81       	ldd	r18, Z+2	; 0x02
   14b10:	33 81       	ldd	r19, Z+3	; 0x03
   14b12:	28 17       	cp	r18, r24
   14b14:	39 07       	cpc	r19, r25
   14b16:	20 f4       	brcc	.+8      	; 0x14b20 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x6e>
   14b18:	2d 93       	st	X+, r18
   14b1a:	3c 93       	st	X, r19
   14b1c:	93 83       	std	Z+3, r25	; 0x03
   14b1e:	82 83       	std	Z+2, r24	; 0x02
   14b20:	32 96       	adiw	r30, 0x02	; 2
   14b22:	e4 17       	cp	r30, r20
   14b24:	f5 07       	cpc	r31, r21
   14b26:	79 f7       	brne	.-34     	; 0x14b06 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x54>
   14b28:	0e 5f       	subi	r16, 0xFE	; 254
   14b2a:	1f 4f       	sbci	r17, 0xFF	; 255
   14b2c:	e0 17       	cp	r30, r16
   14b2e:	f1 07       	cpc	r31, r17
   14b30:	49 f7       	brne	.-46     	; 0x14b04 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)+0x52>
   14b32:	8b 81       	ldd	r24, Y+3	; 0x03
   14b34:	9c 81       	ldd	r25, Y+4	; 0x04
   14b36:	2d 81       	ldd	r18, Y+5	; 0x05
   14b38:	3e 81       	ldd	r19, Y+6	; 0x06
   14b3a:	82 0f       	add	r24, r18
   14b3c:	93 1f       	adc	r25, r19
   14b3e:	2f 81       	ldd	r18, Y+7	; 0x07
   14b40:	38 85       	ldd	r19, Y+8	; 0x08
   14b42:	82 0f       	add	r24, r18
   14b44:	93 1f       	adc	r25, r19
   14b46:	63 e0       	ldi	r22, 0x03	; 3
   14b48:	70 e0       	ldi	r23, 0x00	; 0
   14b4a:	0e 94 68 d3 	call	0x1a6d0	; 0x1a6d0 <__udivmodhi4>
   14b4e:	cb 01       	movw	r24, r22
   14b50:	2a 96       	adiw	r28, 0x0a	; 10
   14b52:	0f b6       	in	r0, 0x3f	; 63
   14b54:	f8 94       	cli
   14b56:	de bf       	out	0x3e, r29	; 62
   14b58:	0f be       	out	0x3f, r0	; 63
   14b5a:	cd bf       	out	0x3d, r28	; 61
   14b5c:	df 91       	pop	r29
   14b5e:	cf 91       	pop	r28
   14b60:	1f 91       	pop	r17
   14b62:	0f 91       	pop	r16
   14b64:	ff 90       	pop	r15
   14b66:	ef 90       	pop	r14
   14b68:	df 90       	pop	r13
   14b6a:	cf 90       	pop	r12
   14b6c:	bf 90       	pop	r11
   14b6e:	af 90       	pop	r10
   14b70:	9f 90       	pop	r9
   14b72:	08 95       	ret

00014b74 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH18TP_Read_CoordinateEPjS0_():
   14b74:	cf 92       	push	r12
   14b76:	df 92       	push	r13
   14b78:	ef 92       	push	r14
   14b7a:	ff 92       	push	r15
   14b7c:	0f 93       	push	r16
   14b7e:	1f 93       	push	r17
   14b80:	cf 93       	push	r28
   14b82:	df 93       	push	r29
   14b84:	ec 01       	movw	r28, r24
   14b86:	7b 01       	movw	r14, r22
   14b88:	8a 01       	movw	r16, r20
   14b8a:	60 ed       	ldi	r22, 0xD0	; 208
   14b8c:	0e 94 59 a5 	call	0x14ab2	; 0x14ab2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   14b90:	6c 01       	movw	r12, r24
   14b92:	60 e9       	ldi	r22, 0x90	; 144
   14b94:	ce 01       	movw	r24, r28
   14b96:	0e 94 59 a5 	call	0x14ab2	; 0x14ab2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char)>
   14b9a:	f7 01       	movw	r30, r14
   14b9c:	d1 82       	std	Z+1, r13	; 0x01
   14b9e:	c0 82       	st	Z, r12
   14ba0:	f8 01       	movw	r30, r16
   14ba2:	91 83       	std	Z+1, r25	; 0x01
   14ba4:	80 83       	st	Z, r24
   14ba6:	81 e0       	ldi	r24, 0x01	; 1
   14ba8:	df 91       	pop	r29
   14baa:	cf 91       	pop	r28
   14bac:	1f 91       	pop	r17
   14bae:	0f 91       	pop	r16
   14bb0:	ff 90       	pop	r15
   14bb2:	ef 90       	pop	r14
   14bb4:	df 90       	pop	r13
   14bb6:	cf 90       	pop	r12
   14bb8:	08 95       	ret

00014bba <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>:
_ZN13LCDWIKI_TOUCH19TP_Read_Coordinate2EPjS0_():
   14bba:	cf 92       	push	r12
   14bbc:	df 92       	push	r13
   14bbe:	ef 92       	push	r14
   14bc0:	ff 92       	push	r15
   14bc2:	0f 93       	push	r16
   14bc4:	1f 93       	push	r17
   14bc6:	cf 93       	push	r28
   14bc8:	df 93       	push	r29
   14bca:	00 d0       	rcall	.+0      	; 0x14bcc <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x12>
   14bcc:	00 d0       	rcall	.+0      	; 0x14bce <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x14>
   14bce:	1f 92       	push	r1
   14bd0:	1f 92       	push	r1
   14bd2:	cd b7       	in	r28, 0x3d	; 61
   14bd4:	de b7       	in	r29, 0x3e	; 62
   14bd6:	6c 01       	movw	r12, r24
   14bd8:	7b 01       	movw	r14, r22
   14bda:	8a 01       	movw	r16, r20
   14bdc:	ae 01       	movw	r20, r28
   14bde:	4b 5f       	subi	r20, 0xFB	; 251
   14be0:	5f 4f       	sbci	r21, 0xFF	; 255
   14be2:	be 01       	movw	r22, r28
   14be4:	69 5f       	subi	r22, 0xF9	; 249
   14be6:	7f 4f       	sbci	r23, 0xFF	; 255
   14be8:	0e 94 ba a5 	call	0x14b74	; 0x14b74 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   14bec:	81 11       	cpse	r24, r1
   14bee:	10 c0       	rjmp	.+32     	; 0x14c10 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x56>
   14bf0:	80 e0       	ldi	r24, 0x00	; 0
   14bf2:	28 96       	adiw	r28, 0x08	; 8
   14bf4:	0f b6       	in	r0, 0x3f	; 63
   14bf6:	f8 94       	cli
   14bf8:	de bf       	out	0x3e, r29	; 62
   14bfa:	0f be       	out	0x3f, r0	; 63
   14bfc:	cd bf       	out	0x3d, r28	; 61
   14bfe:	df 91       	pop	r29
   14c00:	cf 91       	pop	r28
   14c02:	1f 91       	pop	r17
   14c04:	0f 91       	pop	r16
   14c06:	ff 90       	pop	r15
   14c08:	ef 90       	pop	r14
   14c0a:	df 90       	pop	r13
   14c0c:	cf 90       	pop	r12
   14c0e:	08 95       	ret
   14c10:	ae 01       	movw	r20, r28
   14c12:	4f 5f       	subi	r20, 0xFF	; 255
   14c14:	5f 4f       	sbci	r21, 0xFF	; 255
   14c16:	be 01       	movw	r22, r28
   14c18:	6d 5f       	subi	r22, 0xFD	; 253
   14c1a:	7f 4f       	sbci	r23, 0xFF	; 255
   14c1c:	c6 01       	movw	r24, r12
   14c1e:	0e 94 ba a5 	call	0x14b74	; 0x14b74 <LCDWIKI_TOUCH::TP_Read_Coordinate(unsigned int*, unsigned int*)>
   14c22:	88 23       	and	r24, r24
   14c24:	29 f3       	breq	.-54     	; 0x14bf0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14c26:	2b 81       	ldd	r18, Y+3	; 0x03
   14c28:	3c 81       	ldd	r19, Y+4	; 0x04
   14c2a:	6f 81       	ldd	r22, Y+7	; 0x07
   14c2c:	78 85       	ldd	r23, Y+8	; 0x08
   14c2e:	62 17       	cp	r22, r18
   14c30:	73 07       	cpc	r23, r19
   14c32:	40 f0       	brcs	.+16     	; 0x14c44 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x8a>
   14c34:	c9 01       	movw	r24, r18
   14c36:	c2 96       	adiw	r24, 0x32	; 50
   14c38:	68 17       	cp	r22, r24
   14c3a:	79 07       	cpc	r23, r25
   14c3c:	40 f0       	brcs	.+16     	; 0x14c4e <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x94>
   14c3e:	26 17       	cp	r18, r22
   14c40:	37 07       	cpc	r19, r23
   14c42:	b0 f2       	brcs	.-84     	; 0x14bf0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14c44:	cb 01       	movw	r24, r22
   14c46:	c2 96       	adiw	r24, 0x32	; 50
   14c48:	28 17       	cp	r18, r24
   14c4a:	39 07       	cpc	r19, r25
   14c4c:	88 f6       	brcc	.-94     	; 0x14bf0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14c4e:	89 81       	ldd	r24, Y+1	; 0x01
   14c50:	9a 81       	ldd	r25, Y+2	; 0x02
   14c52:	4d 81       	ldd	r20, Y+5	; 0x05
   14c54:	5e 81       	ldd	r21, Y+6	; 0x06
   14c56:	48 17       	cp	r20, r24
   14c58:	59 07       	cpc	r21, r25
   14c5a:	40 f0       	brcs	.+16     	; 0x14c6c <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xb2>
   14c5c:	fc 01       	movw	r30, r24
   14c5e:	f2 96       	adiw	r30, 0x32	; 50
   14c60:	4e 17       	cp	r20, r30
   14c62:	5f 07       	cpc	r21, r31
   14c64:	48 f0       	brcs	.+18     	; 0x14c78 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   14c66:	84 17       	cp	r24, r20
   14c68:	95 07       	cpc	r25, r21
   14c6a:	10 f2       	brcs	.-124    	; 0x14bf0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14c6c:	fa 01       	movw	r30, r20
   14c6e:	f2 96       	adiw	r30, 0x32	; 50
   14c70:	8e 17       	cp	r24, r30
   14c72:	9f 07       	cpc	r25, r31
   14c74:	08 f0       	brcs	.+2      	; 0x14c78 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0xbe>
   14c76:	bc cf       	rjmp	.-136    	; 0x14bf0 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x36>
   14c78:	26 0f       	add	r18, r22
   14c7a:	37 1f       	adc	r19, r23
   14c7c:	36 95       	lsr	r19
   14c7e:	27 95       	ror	r18
   14c80:	f7 01       	movw	r30, r14
   14c82:	31 83       	std	Z+1, r19	; 0x01
   14c84:	20 83       	st	Z, r18
   14c86:	84 0f       	add	r24, r20
   14c88:	95 1f       	adc	r25, r21
   14c8a:	96 95       	lsr	r25
   14c8c:	87 95       	ror	r24
   14c8e:	f8 01       	movw	r30, r16
   14c90:	91 83       	std	Z+1, r25	; 0x01
   14c92:	80 83       	st	Z, r24
   14c94:	81 e0       	ldi	r24, 0x01	; 1
   14c96:	ad cf       	rjmp	.-166    	; 0x14bf2 <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)+0x38>

00014c98 <LCDWIKI_TOUCH::TP_Scan(unsigned char)>:
_ZN13LCDWIKI_TOUCH7TP_ScanEh():
   14c98:	cf 92       	push	r12
   14c9a:	df 92       	push	r13
   14c9c:	ef 92       	push	r14
   14c9e:	ff 92       	push	r15
   14ca0:	0f 93       	push	r16
   14ca2:	1f 93       	push	r17
   14ca4:	cf 93       	push	r28
   14ca6:	df 93       	push	r29
   14ca8:	ec 01       	movw	r28, r24
   14caa:	96 2f       	mov	r25, r22
   14cac:	ef 89       	ldd	r30, Y+23	; 0x17
   14cae:	f8 8d       	ldd	r31, Y+24	; 0x18
   14cb0:	80 81       	ld	r24, Z
   14cb2:	2d 8d       	ldd	r18, Y+29	; 0x1d
   14cb4:	82 23       	and	r24, r18
   14cb6:	09 f0       	breq	.+2      	; 0x14cba <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x22>
   14cb8:	ae c0       	rjmp	.+348    	; 0x14e16 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17e>
   14cba:	ae 01       	movw	r20, r28
   14cbc:	4a 5f       	subi	r20, 0xFA	; 250
   14cbe:	5f 4f       	sbci	r21, 0xFF	; 255
   14cc0:	be 01       	movw	r22, r28
   14cc2:	6c 5f       	subi	r22, 0xFC	; 252
   14cc4:	7f 4f       	sbci	r23, 0xFF	; 255
   14cc6:	99 23       	and	r25, r25
   14cc8:	d9 f0       	breq	.+54     	; 0x14d00 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x68>
   14cca:	ce 01       	movw	r24, r28
   14ccc:	0e 94 dd a5 	call	0x14bba	; 0x14bba <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   14cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
   14cd2:	87 fd       	sbrc	r24, 7
   14cd4:	0a c0       	rjmp	.+20     	; 0x14cea <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   14cd6:	80 ec       	ldi	r24, 0xC0	; 192
   14cd8:	8c 87       	std	Y+12, r24	; 0x0c
   14cda:	8c 81       	ldd	r24, Y+4	; 0x04
   14cdc:	9d 81       	ldd	r25, Y+5	; 0x05
   14cde:	99 83       	std	Y+1, r25	; 0x01
   14ce0:	88 83       	st	Y, r24
   14ce2:	8e 81       	ldd	r24, Y+6	; 0x06
   14ce4:	9f 81       	ldd	r25, Y+7	; 0x07
   14ce6:	9b 83       	std	Y+3, r25	; 0x03
   14ce8:	8a 83       	std	Y+2, r24	; 0x02
   14cea:	8c 85       	ldd	r24, Y+12	; 0x0c
   14cec:	80 78       	andi	r24, 0x80	; 128
   14cee:	df 91       	pop	r29
   14cf0:	cf 91       	pop	r28
   14cf2:	1f 91       	pop	r17
   14cf4:	0f 91       	pop	r16
   14cf6:	ff 90       	pop	r15
   14cf8:	ef 90       	pop	r14
   14cfa:	df 90       	pop	r13
   14cfc:	cf 90       	pop	r12
   14cfe:	08 95       	ret
   14d00:	ce 01       	movw	r24, r28
   14d02:	0e 94 dd a5 	call	0x14bba	; 0x14bba <LCDWIKI_TOUCH::TP_Read_Coordinate2(unsigned int*, unsigned int*)>
   14d06:	88 23       	and	r24, r24
   14d08:	19 f3       	breq	.-58     	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14d0a:	2c 81       	ldd	r18, Y+4	; 0x04
   14d0c:	3d 81       	ldd	r19, Y+5	; 0x05
   14d0e:	a4 e5       	ldi	r26, 0x54	; 84
   14d10:	b3 e0       	ldi	r27, 0x03	; 3
   14d12:	0e 94 d9 d3 	call	0x1a7b2	; 0x1a7b2 <__umulhisi3>
   14d16:	20 e1       	ldi	r18, 0x10	; 16
   14d18:	c2 2e       	mov	r12, r18
   14d1a:	27 e2       	ldi	r18, 0x27	; 39
   14d1c:	d2 2e       	mov	r13, r18
   14d1e:	e1 2c       	mov	r14, r1
   14d20:	f1 2c       	mov	r15, r1
   14d22:	a7 01       	movw	r20, r14
   14d24:	96 01       	movw	r18, r12
   14d26:	0e 94 b2 d3 	call	0x1a764	; 0x1a764 <__divmodsi4>
   14d2a:	89 01       	movw	r16, r18
   14d2c:	0e 50       	subi	r16, 0x0E	; 14
   14d2e:	11 09       	sbc	r17, r1
   14d30:	1d 83       	std	Y+5, r17	; 0x05
   14d32:	0c 83       	std	Y+4, r16	; 0x04
   14d34:	2e 81       	ldd	r18, Y+6	; 0x06
   14d36:	3f 81       	ldd	r19, Y+7	; 0x07
   14d38:	a4 e0       	ldi	r26, 0x04	; 4
   14d3a:	b5 e0       	ldi	r27, 0x05	; 5
   14d3c:	0e 94 d9 d3 	call	0x1a7b2	; 0x1a7b2 <__umulhisi3>
   14d40:	a7 01       	movw	r20, r14
   14d42:	96 01       	movw	r18, r12
   14d44:	0e 94 b2 d3 	call	0x1a764	; 0x1a764 <__divmodsi4>
   14d48:	2e 51       	subi	r18, 0x1E	; 30
   14d4a:	31 09       	sbc	r19, r1
   14d4c:	3f 83       	std	Y+7, r19	; 0x07
   14d4e:	2e 83       	std	Y+6, r18	; 0x06
   14d50:	8d 85       	ldd	r24, Y+13	; 0x0d
   14d52:	81 30       	cpi	r24, 0x01	; 1
   14d54:	a9 f1       	breq	.+106    	; 0x14dc0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x128>
   14d56:	90 f0       	brcs	.+36     	; 0x14d7c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe4>
   14d58:	82 30       	cpi	r24, 0x02	; 2
   14d5a:	09 f4       	brne	.+2      	; 0x14d5e <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xc6>
   14d5c:	53 c0       	rjmp	.+166    	; 0x14e04 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x16c>
   14d5e:	83 30       	cpi	r24, 0x03	; 3
   14d60:	09 f0       	breq	.+2      	; 0x14d64 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xcc>
   14d62:	b6 cf       	rjmp	.-148    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14d64:	8e 85       	ldd	r24, Y+14	; 0x0e
   14d66:	88 23       	and	r24, r24
   14d68:	e1 f1       	breq	.+120    	; 0x14de2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   14d6a:	81 30       	cpi	r24, 0x01	; 1
   14d6c:	09 f4       	brne	.+2      	; 0x14d70 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xd8>
   14d6e:	43 c0       	rjmp	.+134    	; 0x14df6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   14d70:	82 30       	cpi	r24, 0x02	; 2
   14d72:	49 f1       	breq	.+82     	; 0x14dc6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x12e>
   14d74:	83 30       	cpi	r24, 0x03	; 3
   14d76:	09 f0       	breq	.+2      	; 0x14d7a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xe2>
   14d78:	ab cf       	rjmp	.-170    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14d7a:	2c c0       	rjmp	.+88     	; 0x14dd4 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x13c>
   14d7c:	8e 85       	ldd	r24, Y+14	; 0x0e
   14d7e:	88 23       	and	r24, r24
   14d80:	09 f4       	brne	.+2      	; 0x14d84 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xec>
   14d82:	a6 cf       	rjmp	.-180    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14d84:	81 30       	cpi	r24, 0x01	; 1
   14d86:	39 f4       	brne	.+14     	; 0x14d96 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xfe>
   14d88:	3d 83       	std	Y+5, r19	; 0x05
   14d8a:	2c 83       	std	Y+4, r18	; 0x04
   14d8c:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d8e:	9b 85       	ldd	r25, Y+11	; 0x0b
   14d90:	80 1b       	sub	r24, r16
   14d92:	91 0b       	sbc	r25, r17
   14d94:	2a c0       	rjmp	.+84     	; 0x14dea <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x152>
   14d96:	82 30       	cpi	r24, 0x02	; 2
   14d98:	39 f4       	brne	.+14     	; 0x14da8 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x110>
   14d9a:	88 85       	ldd	r24, Y+8	; 0x08
   14d9c:	99 85       	ldd	r25, Y+9	; 0x09
   14d9e:	80 1b       	sub	r24, r16
   14da0:	91 0b       	sbc	r25, r17
   14da2:	9d 83       	std	Y+5, r25	; 0x05
   14da4:	8c 83       	std	Y+4, r24	; 0x04
   14da6:	1d c0       	rjmp	.+58     	; 0x14de2 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x14a>
   14da8:	83 30       	cpi	r24, 0x03	; 3
   14daa:	09 f0       	breq	.+2      	; 0x14dae <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   14dac:	91 cf       	rjmp	.-222    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14dae:	1f 83       	std	Y+7, r17	; 0x07
   14db0:	0e 83       	std	Y+6, r16	; 0x06
   14db2:	88 85       	ldd	r24, Y+8	; 0x08
   14db4:	99 85       	ldd	r25, Y+9	; 0x09
   14db6:	82 1b       	sub	r24, r18
   14db8:	93 0b       	sbc	r25, r19
   14dba:	9d 83       	std	Y+5, r25	; 0x05
   14dbc:	8c 83       	std	Y+4, r24	; 0x04
   14dbe:	88 cf       	rjmp	.-240    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14dc0:	8e 85       	ldd	r24, Y+14	; 0x0e
   14dc2:	81 11       	cpse	r24, r1
   14dc4:	05 c0       	rjmp	.+10     	; 0x14dd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x138>
   14dc6:	88 85       	ldd	r24, Y+8	; 0x08
   14dc8:	99 85       	ldd	r25, Y+9	; 0x09
   14dca:	80 1b       	sub	r24, r16
   14dcc:	91 0b       	sbc	r25, r17
   14dce:	f5 cf       	rjmp	.-22     	; 0x14dba <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x122>
   14dd0:	81 30       	cpi	r24, 0x01	; 1
   14dd2:	29 f4       	brne	.+10     	; 0x14dde <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x146>
   14dd4:	3d 83       	std	Y+5, r19	; 0x05
   14dd6:	2c 83       	std	Y+4, r18	; 0x04
   14dd8:	1f 83       	std	Y+7, r17	; 0x07
   14dda:	0e 83       	std	Y+6, r16	; 0x06
   14ddc:	79 cf       	rjmp	.-270    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14dde:	82 30       	cpi	r24, 0x02	; 2
   14de0:	39 f4       	brne	.+14     	; 0x14df0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x158>
   14de2:	8a 85       	ldd	r24, Y+10	; 0x0a
   14de4:	9b 85       	ldd	r25, Y+11	; 0x0b
   14de6:	82 1b       	sub	r24, r18
   14de8:	93 0b       	sbc	r25, r19
   14dea:	9f 83       	std	Y+7, r25	; 0x07
   14dec:	8e 83       	std	Y+6, r24	; 0x06
   14dee:	70 cf       	rjmp	.-288    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14df0:	83 30       	cpi	r24, 0x03	; 3
   14df2:	09 f0       	breq	.+2      	; 0x14df6 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x15e>
   14df4:	6d cf       	rjmp	.-294    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14df6:	88 85       	ldd	r24, Y+8	; 0x08
   14df8:	99 85       	ldd	r25, Y+9	; 0x09
   14dfa:	82 1b       	sub	r24, r18
   14dfc:	93 0b       	sbc	r25, r19
   14dfe:	9d 83       	std	Y+5, r25	; 0x05
   14e00:	8c 83       	std	Y+4, r24	; 0x04
   14e02:	c4 cf       	rjmp	.-120    	; 0x14d8c <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf4>
   14e04:	8e 85       	ldd	r24, Y+14	; 0x0e
   14e06:	88 23       	and	r24, r24
   14e08:	41 f2       	breq	.-112    	; 0x14d9a <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x102>
   14e0a:	81 30       	cpi	r24, 0x01	; 1
   14e0c:	81 f2       	breq	.-96     	; 0x14dae <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x116>
   14e0e:	83 30       	cpi	r24, 0x03	; 3
   14e10:	09 f0       	breq	.+2      	; 0x14e14 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x17c>
   14e12:	5e cf       	rjmp	.-324    	; 0x14cd0 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x38>
   14e14:	b9 cf       	rjmp	.-142    	; 0x14d88 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0xf0>
   14e16:	8c 85       	ldd	r24, Y+12	; 0x0c
   14e18:	87 ff       	sbrs	r24, 7
   14e1a:	03 c0       	rjmp	.+6      	; 0x14e22 <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x18a>
   14e1c:	8f 77       	andi	r24, 0x7F	; 127
   14e1e:	8c 87       	std	Y+12, r24	; 0x0c
   14e20:	64 cf       	rjmp	.-312    	; 0x14cea <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>
   14e22:	19 82       	std	Y+1, r1	; 0x01
   14e24:	18 82       	st	Y, r1
   14e26:	1b 82       	std	Y+3, r1	; 0x03
   14e28:	1a 82       	std	Y+2, r1	; 0x02
   14e2a:	8f ef       	ldi	r24, 0xFF	; 255
   14e2c:	9f ef       	ldi	r25, 0xFF	; 255
   14e2e:	9d 83       	std	Y+5, r25	; 0x05
   14e30:	8c 83       	std	Y+4, r24	; 0x04
   14e32:	9f 83       	std	Y+7, r25	; 0x07
   14e34:	8e 83       	std	Y+6, r24	; 0x06
   14e36:	59 cf       	rjmp	.-334    	; 0x14cea <LCDWIKI_TOUCH::TP_Scan(unsigned char)+0x52>

00014e38 <LCDWIKI_TOUCH::TP_Set_Rotation(unsigned char)>:
_ZN13LCDWIKI_TOUCH15TP_Set_RotationEh():
   14e38:	fc 01       	movw	r30, r24
   14e3a:	65 87       	std	Z+13, r22	; 0x0d
   14e3c:	08 95       	ret

00014e3e <LCDWIKI_TOUCH::TP_Get_State() const>:
_ZNK13LCDWIKI_TOUCH12TP_Get_StateEv():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:367

uint8_t LCDWIKI_TOUCH::TP_Get_State(void) const
{
	return touch_statue;
}
   14e3e:	fc 01       	movw	r30, r24
   14e40:	84 85       	ldd	r24, Z+12	; 0x0c
   14e42:	08 95       	ret

00014e44 <SoftSPIB::SoftSPIB(unsigned char, unsigned char, unsigned char)>:
_ZN8SoftSPIBC2Ehhh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:48
            _cke = 0;
            break;
        case SPI_MODE3:
            _ckp = 1;
            _cke = 1;
            break;
   14e44:	fc 01       	movw	r30, r24
   14e46:	82 2f       	mov	r24, r18
   14e48:	64 83       	std	Z+4, r22	; 0x04
   14e4a:	43 83       	std	Z+3, r20	; 0x03
   14e4c:	25 83       	std	Z+5, r18	; 0x05
   14e4e:	92 e0       	ldi	r25, 0x02	; 2
   14e50:	92 83       	std	Z+2, r25	; 0x02
   14e52:	10 82       	st	Z, r1
   14e54:	11 82       	std	Z+1, r1	; 0x01
   14e56:	16 82       	std	Z+6, r1	; 0x06
   14e58:	60 e0       	ldi	r22, 0x00	; 0
   14e5a:	0c 94 93 cd 	jmp	0x19b26	; 0x19b26 <digitalWrite>

00014e5e <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
   14e5e:	cf 93       	push	r28
   14e60:	df 93       	push	r29
   14e62:	ec 01       	movw	r28, r24
   14e64:	61 e0       	ldi	r22, 0x01	; 1
   14e66:	8c 81       	ldd	r24, Y+4	; 0x04
   14e68:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   14e6c:	60 e0       	ldi	r22, 0x00	; 0
   14e6e:	8b 81       	ldd	r24, Y+3	; 0x03
   14e70:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   14e74:	61 e0       	ldi	r22, 0x01	; 1
   14e76:	8d 81       	ldd	r24, Y+5	; 0x05
   14e78:	df 91       	pop	r29
   14e7a:	cf 91       	pop	r28
   14e7c:	0c 94 57 cd 	jmp	0x19aae	; 0x19aae <pinMode>

00014e80 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   14e80:	8f 92       	push	r8
   14e82:	9f 92       	push	r9
   14e84:	af 92       	push	r10
   14e86:	bf 92       	push	r11
   14e88:	cf 92       	push	r12
   14e8a:	df 92       	push	r13
   14e8c:	ff 92       	push	r15
   14e8e:	0f 93       	push	r16
   14e90:	1f 93       	push	r17
   14e92:	cf 93       	push	r28
   14e94:	df 93       	push	r29
   14e96:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   14e98:	fc 01       	movw	r30, r24
   14e9a:	86 81       	ldd	r24, Z+6	; 0x06
   14e9c:	81 11       	cpse	r24, r1
   14e9e:	35 c0       	rjmp	.+106    	; 0x14f0a <SoftSPIB::transfer(unsigned char)+0x8a>
   14ea0:	86 2f       	mov	r24, r22
   14ea2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   14ea4:	ec 01       	movw	r28, r24
   14ea6:	d6 95       	lsr	r29
   14ea8:	dc 2f       	mov	r29, r28
   14eaa:	cc 27       	eor	r28, r28
   14eac:	d7 95       	ror	r29
   14eae:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   14eb0:	66 1f       	adc	r22, r22
   14eb2:	66 27       	eor	r22, r22
   14eb4:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   14eb6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   14eb8:	ec 01       	movw	r28, r24
   14eba:	35 e0       	ldi	r19, 0x05	; 5
   14ebc:	cc 0f       	add	r28, r28
   14ebe:	dd 1f       	adc	r29, r29
   14ec0:	3a 95       	dec	r19
   14ec2:	e1 f7       	brne	.-8      	; 0x14ebc <SoftSPIB::transfer(unsigned char)+0x3c>
   14ec4:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   14ec6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   14ec8:	ec 01       	movw	r28, r24
   14eca:	43 e0       	ldi	r20, 0x03	; 3
   14ecc:	cc 0f       	add	r28, r28
   14ece:	dd 1f       	adc	r29, r29
   14ed0:	4a 95       	dec	r20
   14ed2:	e1 f7       	brne	.-8      	; 0x14ecc <SoftSPIB::transfer(unsigned char)+0x4c>
   14ed4:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   14ed6:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   14ed8:	ec 01       	movw	r28, r24
   14eda:	cc 0f       	add	r28, r28
   14edc:	dd 1f       	adc	r29, r29
   14ede:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   14ee0:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   14ee2:	ec 01       	movw	r28, r24
   14ee4:	d5 95       	asr	r29
   14ee6:	c7 95       	ror	r28
   14ee8:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   14eea:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   14eec:	ec 01       	movw	r28, r24
   14eee:	e3 e0       	ldi	r30, 0x03	; 3
   14ef0:	d5 95       	asr	r29
   14ef2:	c7 95       	ror	r28
   14ef4:	ea 95       	dec	r30
   14ef6:	e1 f7       	brne	.-8      	; 0x14ef0 <SoftSPIB::transfer(unsigned char)+0x70>
   14ef8:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   14efa:	6c 2b       	or	r22, r28
   14efc:	f5 e0       	ldi	r31, 0x05	; 5
   14efe:	95 95       	asr	r25
   14f00:	87 95       	ror	r24
   14f02:	fa 95       	dec	r31
   14f04:	e1 f7       	brne	.-8      	; 0x14efe <SoftSPIB::transfer(unsigned char)+0x7e>
   14f06:	82 70       	andi	r24, 0x02	; 2
   14f08:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   14f0a:	91 e0       	ldi	r25, 0x01	; 1
   14f0c:	80 e0       	ldi	r24, 0x00	; 0
   14f0e:	f8 01       	movw	r30, r16
   14f10:	21 81       	ldd	r18, Z+1	; 0x01
   14f12:	21 11       	cpse	r18, r1
   14f14:	01 c0       	rjmp	.+2      	; 0x14f18 <SoftSPIB::transfer(unsigned char)+0x98>
   14f16:	90 e0       	ldi	r25, 0x00	; 0
   14f18:	c9 2e       	mov	r12, r25
   14f1a:	d8 2e       	mov	r13, r24
   14f1c:	b1 2c       	mov	r11, r1
   14f1e:	a1 2c       	mov	r10, r1
   14f20:	f1 2c       	mov	r15, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   14f22:	c6 2f       	mov	r28, r22
   14f24:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   14f26:	f8 01       	movw	r30, r16
   14f28:	80 81       	ld	r24, Z
   14f2a:	88 23       	and	r24, r24
   14f2c:	39 f0       	breq	.+14     	; 0x14f3c <SoftSPIB::transfer(unsigned char)+0xbc>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   14f2e:	f1 e0       	ldi	r31, 0x01	; 1
   14f30:	cf 26       	eor	r12, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   14f32:	6c 2d       	mov	r22, r12
   14f34:	f8 01       	movw	r30, r16
   14f36:	85 81       	ldd	r24, Z+5	; 0x05
   14f38:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   14f3c:	be 01       	movw	r22, r28
   14f3e:	0a 2c       	mov	r0, r10
   14f40:	02 c0       	rjmp	.+4      	; 0x14f46 <SoftSPIB::transfer(unsigned char)+0xc6>
   14f42:	75 95       	asr	r23
   14f44:	67 95       	ror	r22
   14f46:	0a 94       	dec	r0
   14f48:	e2 f7       	brpl	.-8      	; 0x14f42 <SoftSPIB::transfer(unsigned char)+0xc2>
   14f4a:	61 70       	andi	r22, 0x01	; 1
   14f4c:	f8 01       	movw	r30, r16
   14f4e:	84 81       	ldd	r24, Z+4	; 0x04
   14f50:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   14f54:	46 01       	movw	r8, r12
   14f56:	f1 e0       	ldi	r31, 0x01	; 1
   14f58:	8f 26       	eor	r8, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   14f5a:	68 2d       	mov	r22, r8
   14f5c:	f8 01       	movw	r30, r16
   14f5e:	85 81       	ldd	r24, Z+5	; 0x05
   14f60:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:116

        /* ... Read bit */
        {
            bval = digitalRead(_miso);
   14f64:	f8 01       	movw	r30, r16
   14f66:	83 81       	ldd	r24, Z+3	; 0x03
   14f68:	0e 94 c1 cd 	call	0x19b82	; 0x19b82 <digitalRead>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

            if (_order == MSBFIRST) {
   14f6c:	f8 01       	movw	r30, r16
   14f6e:	96 81       	ldd	r25, Z+6	; 0x06
   14f70:	91 11       	cpse	r25, r1
   14f72:	1b c0       	rjmp	.+54     	; 0x14faa <SoftSPIB::transfer(unsigned char)+0x12a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   14f74:	ff 0c       	add	r15, r15
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   14f76:	f8 2a       	or	r15, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   14f78:	f8 01       	movw	r30, r16
   14f7a:	80 81       	ld	r24, Z
   14f7c:	88 23       	and	r24, r24
   14f7e:	d1 f0       	breq	.+52     	; 0x14fb4 <SoftSPIB::transfer(unsigned char)+0x134>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   14f80:	64 01       	movw	r12, r8
   14f82:	ff ef       	ldi	r31, 0xFF	; 255
   14f84:	af 1a       	sub	r10, r31
   14f86:	bf 0a       	sbc	r11, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98 (discriminator 2)

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   14f88:	28 e0       	ldi	r18, 0x08	; 8
   14f8a:	a2 16       	cp	r10, r18
   14f8c:	b1 04       	cpc	r11, r1
   14f8e:	59 f6       	brne	.-106    	; 0x14f26 <SoftSPIB::transfer(unsigned char)+0xa6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   14f90:	8f 2d       	mov	r24, r15
   14f92:	df 91       	pop	r29
   14f94:	cf 91       	pop	r28
   14f96:	1f 91       	pop	r17
   14f98:	0f 91       	pop	r16
   14f9a:	ff 90       	pop	r15
   14f9c:	df 90       	pop	r13
   14f9e:	cf 90       	pop	r12
   14fa0:	bf 90       	pop	r11
   14fa2:	af 90       	pop	r10
   14fa4:	9f 90       	pop	r9
   14fa6:	8f 90       	pop	r8
   14fa8:	08 95       	ret
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   14faa:	87 95       	ror	r24
   14fac:	88 27       	eor	r24, r24
   14fae:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   14fb0:	f6 94       	lsr	r15
   14fb2:	e1 cf       	rjmp	.-62     	; 0x14f76 <SoftSPIB::transfer(unsigned char)+0xf6>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   14fb4:	6c 2d       	mov	r22, r12
   14fb6:	85 81       	ldd	r24, Z+5	; 0x05
   14fb8:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   14fbc:	e2 cf       	rjmp	.-60     	; 0x14f82 <SoftSPIB::transfer(unsigned char)+0x102>

00014fbe <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)>:
_ZN9SRAM_23LCC2EP8SoftSPIBh17_SRAM_23LC_Device():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:62
  endCommand();
}

void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
   14fbe:	fc 01       	movw	r30, r24
   14fc0:	80 e0       	ldi	r24, 0x00	; 0
   14fc2:	90 e0       	ldi	r25, 0x00	; 0
   14fc4:	a2 e0       	ldi	r26, 0x02	; 2
   14fc6:	b0 e0       	ldi	r27, 0x00	; 0
   14fc8:	23 30       	cpi	r18, 0x03	; 3
   14fca:	31 05       	cpc	r19, r1
   14fcc:	40 f0       	brcs	.+16     	; 0x14fde <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   14fce:	c9 01       	movw	r24, r18
   14fd0:	03 97       	sbiw	r24, 0x03	; 3
   14fd2:	03 97       	sbiw	r24, 0x03	; 3
   14fd4:	70 f4       	brcc	.+28     	; 0x14ff2 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x34>
   14fd6:	80 e0       	ldi	r24, 0x00	; 0
   14fd8:	90 e0       	ldi	r25, 0x00	; 0
   14fda:	a1 e0       	ldi	r26, 0x01	; 1
   14fdc:	b0 e0       	ldi	r27, 0x00	; 0
   14fde:	84 83       	std	Z+4, r24	; 0x04
   14fe0:	95 83       	std	Z+5, r25	; 0x05
   14fe2:	a6 83       	std	Z+6, r26	; 0x06
   14fe4:	b7 83       	std	Z+7, r27	; 0x07
   14fe6:	33 83       	std	Z+3, r19	; 0x03
   14fe8:	22 83       	std	Z+2, r18	; 0x02
   14fea:	71 83       	std	Z+1, r23	; 0x01
   14fec:	60 83       	st	Z, r22
   14fee:	40 87       	std	Z+8, r20	; 0x08
   14ff0:	08 95       	ret
   14ff2:	c9 01       	movw	r24, r18
   14ff4:	06 97       	sbiw	r24, 0x06	; 6
   14ff6:	02 97       	sbiw	r24, 0x02	; 2
   14ff8:	28 f4       	brcc	.+10     	; 0x15004 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x46>
   14ffa:	80 e0       	ldi	r24, 0x00	; 0
   14ffc:	90 e8       	ldi	r25, 0x80	; 128
   14ffe:	a0 e0       	ldi	r26, 0x00	; 0
   15000:	b0 e0       	ldi	r27, 0x00	; 0
   15002:	ed cf       	rjmp	.-38     	; 0x14fde <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>
   15004:	c9 01       	movw	r24, r18
   15006:	08 97       	sbiw	r24, 0x08	; 8
   15008:	02 97       	sbiw	r24, 0x02	; 2
   1500a:	68 f7       	brcc	.-38     	; 0x14fe6 <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x28>
   1500c:	80 e0       	ldi	r24, 0x00	; 0
   1500e:	90 e2       	ldi	r25, 0x20	; 32
   15010:	a0 e0       	ldi	r26, 0x00	; 0
   15012:	b0 e0       	ldi	r27, 0x00	; 0
   15014:	e4 cf       	rjmp	.-56     	; 0x14fde <SRAM_23LC::SRAM_23LC(SoftSPIB*, unsigned char, _SRAM_23LC_Device)+0x20>

00015016 <SRAM_23LC::sendAddressBytes(unsigned long)>:
_ZN9SRAM_23LC16sendAddressBytesEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:134
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
{
   15016:	cf 92       	push	r12
   15018:	df 92       	push	r13
   1501a:	ef 92       	push	r14
   1501c:	ff 92       	push	r15
   1501e:	cf 93       	push	r28
   15020:	df 93       	push	r29
   15022:	ec 01       	movw	r28, r24
   15024:	6a 01       	movw	r12, r20
   15026:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
  if (_capacity > 0x10000) {
   15028:	8c 81       	ldd	r24, Y+4	; 0x04
   1502a:	9d 81       	ldd	r25, Y+5	; 0x05
   1502c:	ae 81       	ldd	r26, Y+6	; 0x06
   1502e:	bf 81       	ldd	r27, Y+7	; 0x07
   15030:	01 97       	sbiw	r24, 0x01	; 1
   15032:	a1 40       	sbci	r26, 0x01	; 1
   15034:	b1 05       	cpc	r27, r1
   15036:	38 f0       	brcs	.+14     	; 0x15046 <SRAM_23LC::sendAddressBytes(unsigned long)+0x30>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   15038:	b7 01       	movw	r22, r14
   1503a:	88 27       	eor	r24, r24
   1503c:	99 27       	eor	r25, r25
   1503e:	88 81       	ld	r24, Y
   15040:	99 81       	ldd	r25, Y+1	; 0x01
   15042:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   15046:	99 27       	eor	r25, r25
   15048:	8f 2d       	mov	r24, r15
   1504a:	7e 2d       	mov	r23, r14
   1504c:	6d 2d       	mov	r22, r13
   1504e:	88 81       	ld	r24, Y
   15050:	99 81       	ldd	r25, Y+1	; 0x01
   15052:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   15056:	6c 2d       	mov	r22, r12
   15058:	88 81       	ld	r24, Y
   1505a:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   1505c:	df 91       	pop	r29
   1505e:	cf 91       	pop	r28
   15060:	ff 90       	pop	r15
   15062:	ef 90       	pop	r14
   15064:	df 90       	pop	r13
   15066:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   15068:	0c 94 40 a7 	jmp	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>

0001506c <SRAM_23LC::startCommand(unsigned char, unsigned long)>:
_ZN9SRAM_23LC12startCommandEhm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:123

  return(length);
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
   1506c:	cf 92       	push	r12
   1506e:	df 92       	push	r13
   15070:	ef 92       	push	r14
   15072:	ff 92       	push	r15
   15074:	0f 93       	push	r16
   15076:	1f 93       	push	r17
   15078:	cf 93       	push	r28
   1507a:	8c 01       	movw	r16, r24
   1507c:	c6 2f       	mov	r28, r22
   1507e:	69 01       	movw	r12, r18
   15080:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   15082:	60 e0       	ldi	r22, 0x00	; 0
   15084:	fc 01       	movw	r30, r24
   15086:	80 85       	ldd	r24, Z+8	; 0x08
   15088:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1508c:	6c 2f       	mov	r22, r28
   1508e:	f8 01       	movw	r30, r16
   15090:	80 81       	ld	r24, Z
   15092:	91 81       	ldd	r25, Z+1	; 0x01
   15094:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:128
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
   15098:	c2 50       	subi	r28, 0x02	; 2
   1509a:	c2 30       	cpi	r28, 0x02	; 2
   1509c:	60 f4       	brcc	.+24     	; 0x150b6 <SRAM_23LC::startCommand(unsigned char, unsigned long)+0x4a>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
    sendAddressBytes(address);
   1509e:	b7 01       	movw	r22, r14
   150a0:	a6 01       	movw	r20, r12
   150a2:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   150a4:	cf 91       	pop	r28
   150a6:	1f 91       	pop	r17
   150a8:	0f 91       	pop	r16
   150aa:	ff 90       	pop	r15
   150ac:	ef 90       	pop	r14
   150ae:	df 90       	pop	r13
   150b0:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);

  _spi->transfer(command);
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   150b2:	0c 94 0b a8 	jmp	0x15016	; 0x15016 <SRAM_23LC::sendAddressBytes(unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:131
  }
}
   150b6:	cf 91       	pop	r28
   150b8:	1f 91       	pop	r17
   150ba:	0f 91       	pop	r16
   150bc:	ff 90       	pop	r15
   150be:	ef 90       	pop	r14
   150c0:	df 90       	pop	r13
   150c2:	cf 90       	pop	r12
   150c4:	08 95       	ret

000150c6 <SRAM_23LC::endCommand()>:
_ZN9SRAM_23LC10endCommandEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   150c6:	61 e0       	ldi	r22, 0x01	; 1
   150c8:	fc 01       	movw	r30, r24
   150ca:	80 85       	ldd	r24, Z+8	; 0x08
   150cc:	0c 94 93 cd 	jmp	0x19b26	; 0x19b26 <digitalWrite>

000150d0 <SRAM_23LC::begin()>:
_ZN9SRAM_23LC5beginEv():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:49




void SRAM_23LC::begin(void)
{
   150d0:	cf 93       	push	r28
   150d2:	df 93       	push	r29
   150d4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50
  digitalWrite(_chipSelect, HIGH);
   150d6:	61 e0       	ldi	r22, 0x01	; 1
   150d8:	88 85       	ldd	r24, Y+8	; 0x08
   150da:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   150de:	61 e0       	ldi	r22, 0x01	; 1
   150e0:	88 85       	ldd	r24, Y+8	; 0x08
   150e2:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   150e6:	88 81       	ld	r24, Y
   150e8:	99 81       	ldd	r25, Y+1	; 0x01
   150ea:	0e 94 2f a7 	call	0x14e5e	; 0x14e5e <SoftSPIB::begin()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:55

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
   150ee:	20 e0       	ldi	r18, 0x00	; 0
   150f0:	30 e0       	ldi	r19, 0x00	; 0
   150f2:	a9 01       	movw	r20, r18
   150f4:	61 e0       	ldi	r22, 0x01	; 1
   150f6:	ce 01       	movw	r24, r28
   150f8:	0e 94 36 a8 	call	0x1506c	; 0x1506c <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   150fc:	60 e4       	ldi	r22, 0x40	; 64
   150fe:	88 81       	ld	r24, Y
   15100:	99 81       	ldd	r25, Y+1	; 0x01
   15102:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57
  endCommand();
   15106:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:58
}
   15108:	df 91       	pop	r29
   1510a:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:57

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
  endCommand();
   1510c:	0c 94 63 a8 	jmp	0x150c6	; 0x150c6 <SRAM_23LC::endCommand()>

00015110 <SRAM_23LC::readByte(unsigned long)>:
_ZN9SRAM_23LC8readByteEm():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:66
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
   15110:	0f 93       	push	r16
   15112:	1f 93       	push	r17
   15114:	cf 93       	push	r28
   15116:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
  if (address >= _capacity) {
   15118:	fc 01       	movw	r30, r24
   1511a:	04 81       	ldd	r16, Z+4	; 0x04
   1511c:	15 81       	ldd	r17, Z+5	; 0x05
   1511e:	26 81       	ldd	r18, Z+6	; 0x06
   15120:	37 81       	ldd	r19, Z+7	; 0x07
   15122:	40 17       	cp	r20, r16
   15124:	51 07       	cpc	r21, r17
   15126:	62 07       	cpc	r22, r18
   15128:	73 07       	cpc	r23, r19
   1512a:	a8 f4       	brcc	.+42     	; 0x15156 <SRAM_23LC::readByte(unsigned long)+0x46>
   1512c:	9a 01       	movw	r18, r20
   1512e:	ab 01       	movw	r20, r22
   15130:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:71
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
   15132:	63 e0       	ldi	r22, 0x03	; 3
   15134:	0e 94 36 a8 	call	0x1506c	; 0x1506c <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   15138:	6f ef       	ldi	r22, 0xFF	; 255
   1513a:	88 81       	ld	r24, Y
   1513c:	99 81       	ldd	r25, Y+1	; 0x01
   1513e:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
   15142:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:73
  endCommand();
   15144:	ce 01       	movw	r24, r28
   15146:	0e 94 63 a8 	call	0x150c6	; 0x150c6 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76

  return(ret);
}
   1514a:	81 2f       	mov	r24, r17
   1514c:	df 91       	pop	r29
   1514e:	cf 91       	pop	r28
   15150:	1f 91       	pop	r17
   15152:	0f 91       	pop	r16
   15154:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   15156:	10 e0       	ldi	r17, 0x00	; 0
   15158:	f8 cf       	rjmp	.-16     	; 0x1514a <SRAM_23LC::readByte(unsigned long)+0x3a>

0001515a <SRAM_23LC::writeByte(unsigned long, unsigned char)>:
_ZN9SRAM_23LC9writeByteEmh():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:79

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
   1515a:	cf 92       	push	r12
   1515c:	df 92       	push	r13
   1515e:	ef 92       	push	r14
   15160:	ff 92       	push	r15
   15162:	1f 93       	push	r17
   15164:	cf 93       	push	r28
   15166:	df 93       	push	r29
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
  if (address >= _capacity) {
   15168:	fc 01       	movw	r30, r24
   1516a:	c4 80       	ldd	r12, Z+4	; 0x04
   1516c:	d5 80       	ldd	r13, Z+5	; 0x05
   1516e:	e6 80       	ldd	r14, Z+6	; 0x06
   15170:	f7 80       	ldd	r15, Z+7	; 0x07
   15172:	4c 15       	cp	r20, r12
   15174:	5d 05       	cpc	r21, r13
   15176:	6e 05       	cpc	r22, r14
   15178:	7f 05       	cpc	r23, r15
   1517a:	c8 f4       	brcc	.+50     	; 0x151ae <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x54>
   1517c:	12 2f       	mov	r17, r18
   1517e:	9a 01       	movw	r18, r20
   15180:	ab 01       	movw	r20, r22
   15182:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:84
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
   15184:	62 e0       	ldi	r22, 0x02	; 2
   15186:	0e 94 36 a8 	call	0x1506c	; 0x1506c <SRAM_23LC::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  _spi->transfer(byte);
   1518a:	61 2f       	mov	r22, r17
   1518c:	88 81       	ld	r24, Y
   1518e:	99 81       	ldd	r25, Y+1	; 0x01
   15190:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:86
  endCommand();
   15194:	ce 01       	movw	r24, r28
   15196:	0e 94 63 a8 	call	0x150c6	; 0x150c6 <SRAM_23LC::endCommand()>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:87
  return(1);
   1519a:	81 e0       	ldi	r24, 0x01	; 1
   1519c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88
}
   1519e:	df 91       	pop	r29
   151a0:	cf 91       	pop	r28
   151a2:	1f 91       	pop	r17
   151a4:	ff 90       	pop	r15
   151a6:	ef 90       	pop	r14
   151a8:	df 90       	pop	r13
   151aa:	cf 90       	pop	r12
   151ac:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   151ae:	90 e0       	ldi	r25, 0x00	; 0
   151b0:	80 e0       	ldi	r24, 0x00	; 0
   151b2:	f5 cf       	rjmp	.-22     	; 0x1519e <SRAM_23LC::writeByte(unsigned long, unsigned char)+0x44>

000151b4 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   151b4:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   151b6:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   151b8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   151ba:	80 91 62 12 	lds	r24, 0x1262	; 0x801262 <SPIClass::initialized>
   151be:	81 11       	cpse	r24, r1
   151c0:	27 c0       	rjmp	.+78     	; 0x15210 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   151c2:	e2 e0       	ldi	r30, 0x02	; 2
   151c4:	f2 e6       	ldi	r31, 0x62	; 98
   151c6:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   151c8:	ec ec       	ldi	r30, 0xCC	; 204
   151ca:	f1 e6       	ldi	r31, 0x61	; 97
   151cc:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   151ce:	e8 2f       	mov	r30, r24
   151d0:	f0 e0       	ldi	r31, 0x00	; 0
   151d2:	ee 0f       	add	r30, r30
   151d4:	ff 1f       	adc	r31, r31
   151d6:	e0 5b       	subi	r30, 0xB0	; 176
   151d8:	fd 49       	sbci	r31, 0x9D	; 157
   151da:	a5 91       	lpm	r26, Z+
   151dc:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   151de:	ec 91       	ld	r30, X
   151e0:	e9 23       	and	r30, r25
   151e2:	21 f4       	brne	.+8      	; 0x151ec <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   151e4:	61 e0       	ldi	r22, 0x01	; 1
   151e6:	88 e0       	ldi	r24, 0x08	; 8
   151e8:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   151ec:	61 e0       	ldi	r22, 0x01	; 1
   151ee:	88 e0       	ldi	r24, 0x08	; 8
   151f0:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   151f4:	8c b5       	in	r24, 0x2c	; 44
   151f6:	80 61       	ori	r24, 0x10	; 16
   151f8:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   151fa:	8c b5       	in	r24, 0x2c	; 44
   151fc:	80 64       	ori	r24, 0x40	; 64
   151fe:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   15200:	61 e0       	ldi	r22, 0x01	; 1
   15202:	89 e0       	ldi	r24, 0x09	; 9
   15204:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   15208:	61 e0       	ldi	r22, 0x01	; 1
   1520a:	8a e0       	ldi	r24, 0x0A	; 10
   1520c:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   15210:	80 91 62 12 	lds	r24, 0x1262	; 0x801262 <SPIClass::initialized>
   15214:	8f 5f       	subi	r24, 0xFF	; 255
   15216:	80 93 62 12 	sts	0x1262, r24	; 0x801262 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   1521a:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   1521c:	cf 91       	pop	r28
   1521e:	08 95       	ret

00015220 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)>:
_ZN12EEPROM_CAT25C2EP8SoftSPIBh20_EEPROM_CAT25_Device():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:67
}

void EEPROM_CAT25::disableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WRDI, 0);
  endCommand();
   15220:	cf 92       	push	r12
   15222:	df 92       	push	r13
   15224:	ef 92       	push	r14
   15226:	ff 92       	push	r15
   15228:	dc 01       	movw	r26, r24
   1522a:	2e 30       	cpi	r18, 0x0E	; 14
   1522c:	31 05       	cpc	r19, r1
   1522e:	30 f5       	brcc	.+76     	; 0x1527c <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x5c>
   15230:	f9 01       	movw	r30, r18
   15232:	88 27       	eor	r24, r24
   15234:	e1 5e       	subi	r30, 0xE1	; 225
   15236:	f6 45       	sbci	r31, 0x56	; 86
   15238:	8f 4f       	sbci	r24, 0xFF	; 255
   1523a:	0c 94 d1 d3 	jmp	0x1a7a2	; 0x1a7a2 <__tablejump2__>
   1523e:	2d a9       	ldd	r18, Y+53	; 0x35
   15240:	4c a9       	ldd	r20, Y+52	; 0x34
   15242:	52 a9       	ldd	r21, Z+50	; 0x32
   15244:	5f a9       	ldd	r21, Y+55	; 0x37
   15246:	6d a9       	ldd	r22, Y+53	; 0x35
   15248:	73 a9       	ldd	r23, Z+51	; 0x33
   1524a:	79 a9       	ldd	r23, Y+49	; 0x31
   1524c:	87 a9       	ldd	r24, Z+55	; 0x37
   1524e:	87 a9       	ldd	r24, Z+55	; 0x37
   15250:	8d a9       	ldd	r24, Y+53	; 0x35
   15252:	8d a9       	ldd	r24, Y+53	; 0x35
   15254:	93 a9       	ldd	r25, Z+51	; 0x33
   15256:	a1 a9       	ldd	r26, Z+49	; 0x31
   15258:	a6 a9       	ldd	r26, Z+54	; 0x36
   1525a:	c1 2c       	mov	r12, r1
   1525c:	d1 2c       	mov	r13, r1
   1525e:	94 e0       	ldi	r25, 0x04	; 4
   15260:	e9 2e       	mov	r14, r25
   15262:	f1 2c       	mov	r15, r1
   15264:	14 96       	adiw	r26, 0x04	; 4
   15266:	cd 92       	st	X+, r12
   15268:	dd 92       	st	X+, r13
   1526a:	ed 92       	st	X+, r14
   1526c:	fc 92       	st	X, r15
   1526e:	17 97       	sbiw	r26, 0x07	; 7
   15270:	80 e0       	ldi	r24, 0x00	; 0
   15272:	91 e0       	ldi	r25, 0x01	; 1
   15274:	19 96       	adiw	r26, 0x09	; 9
   15276:	9c 93       	st	X, r25
   15278:	8e 93       	st	-X, r24
   1527a:	18 97       	sbiw	r26, 0x08	; 8
   1527c:	13 96       	adiw	r26, 0x03	; 3
   1527e:	3c 93       	st	X, r19
   15280:	2e 93       	st	-X, r18
   15282:	12 97       	sbiw	r26, 0x02	; 2
   15284:	11 96       	adiw	r26, 0x01	; 1
   15286:	7c 93       	st	X, r23
   15288:	6e 93       	st	-X, r22
   1528a:	1a 96       	adiw	r26, 0x0a	; 10
   1528c:	4c 93       	st	X, r20
   1528e:	ff 90       	pop	r15
   15290:	ef 90       	pop	r14
   15292:	df 90       	pop	r13
   15294:	cf 90       	pop	r12
   15296:	08 95       	ret
   15298:	c1 2c       	mov	r12, r1
   1529a:	d1 2c       	mov	r13, r1
   1529c:	82 e0       	ldi	r24, 0x02	; 2
   1529e:	e8 2e       	mov	r14, r24
   152a0:	f1 2c       	mov	r15, r1
   152a2:	e0 cf       	rjmp	.-64     	; 0x15264 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x44>
   152a4:	c1 2c       	mov	r12, r1
   152a6:	d1 2c       	mov	r13, r1
   152a8:	76 01       	movw	r14, r12
   152aa:	e3 94       	inc	r14
   152ac:	14 96       	adiw	r26, 0x04	; 4
   152ae:	cd 92       	st	X+, r12
   152b0:	dd 92       	st	X+, r13
   152b2:	ed 92       	st	X+, r14
   152b4:	fc 92       	st	X, r15
   152b6:	17 97       	sbiw	r26, 0x07	; 7
   152b8:	80 e8       	ldi	r24, 0x80	; 128
   152ba:	90 e0       	ldi	r25, 0x00	; 0
   152bc:	db cf       	rjmp	.-74     	; 0x15274 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   152be:	c1 2c       	mov	r12, r1
   152c0:	e0 e8       	ldi	r30, 0x80	; 128
   152c2:	de 2e       	mov	r13, r30
   152c4:	e1 2c       	mov	r14, r1
   152c6:	f1 2c       	mov	r15, r1
   152c8:	14 96       	adiw	r26, 0x04	; 4
   152ca:	cd 92       	st	X+, r12
   152cc:	dd 92       	st	X+, r13
   152ce:	ed 92       	st	X+, r14
   152d0:	fc 92       	st	X, r15
   152d2:	17 97       	sbiw	r26, 0x07	; 7
   152d4:	80 e4       	ldi	r24, 0x40	; 64
   152d6:	90 e0       	ldi	r25, 0x00	; 0
   152d8:	cd cf       	rjmp	.-102    	; 0x15274 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   152da:	c1 2c       	mov	r12, r1
   152dc:	50 e4       	ldi	r21, 0x40	; 64
   152de:	d5 2e       	mov	r13, r21
   152e0:	e1 2c       	mov	r14, r1
   152e2:	f1 2c       	mov	r15, r1
   152e4:	f1 cf       	rjmp	.-30     	; 0x152c8 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   152e6:	c1 2c       	mov	r12, r1
   152e8:	90 e2       	ldi	r25, 0x20	; 32
   152ea:	d9 2e       	mov	r13, r25
   152ec:	e1 2c       	mov	r14, r1
   152ee:	f1 2c       	mov	r15, r1
   152f0:	eb cf       	rjmp	.-42     	; 0x152c8 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xa8>
   152f2:	c1 2c       	mov	r12, r1
   152f4:	80 e1       	ldi	r24, 0x10	; 16
   152f6:	d8 2e       	mov	r13, r24
   152f8:	e1 2c       	mov	r14, r1
   152fa:	f1 2c       	mov	r15, r1
   152fc:	14 96       	adiw	r26, 0x04	; 4
   152fe:	cd 92       	st	X+, r12
   15300:	dd 92       	st	X+, r13
   15302:	ed 92       	st	X+, r14
   15304:	fc 92       	st	X, r15
   15306:	17 97       	sbiw	r26, 0x07	; 7
   15308:	80 e2       	ldi	r24, 0x20	; 32
   1530a:	90 e0       	ldi	r25, 0x00	; 0
   1530c:	b3 cf       	rjmp	.-154    	; 0x15274 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   1530e:	c1 2c       	mov	r12, r1
   15310:	f8 e0       	ldi	r31, 0x08	; 8
   15312:	df 2e       	mov	r13, r31
   15314:	e1 2c       	mov	r14, r1
   15316:	f1 2c       	mov	r15, r1
   15318:	f1 cf       	rjmp	.-30     	; 0x152fc <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   1531a:	c1 2c       	mov	r12, r1
   1531c:	e4 e0       	ldi	r30, 0x04	; 4
   1531e:	de 2e       	mov	r13, r30
   15320:	e1 2c       	mov	r14, r1
   15322:	f1 2c       	mov	r15, r1
   15324:	eb cf       	rjmp	.-42     	; 0x152fc <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0xdc>
   15326:	c1 2c       	mov	r12, r1
   15328:	52 e0       	ldi	r21, 0x02	; 2
   1532a:	d5 2e       	mov	r13, r21
   1532c:	e1 2c       	mov	r14, r1
   1532e:	f1 2c       	mov	r15, r1
   15330:	14 96       	adiw	r26, 0x04	; 4
   15332:	cd 92       	st	X+, r12
   15334:	dd 92       	st	X+, r13
   15336:	ed 92       	st	X+, r14
   15338:	fc 92       	st	X, r15
   1533a:	17 97       	sbiw	r26, 0x07	; 7
   1533c:	80 e1       	ldi	r24, 0x10	; 16
   1533e:	90 e0       	ldi	r25, 0x00	; 0
   15340:	99 cf       	rjmp	.-206    	; 0x15274 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x54>
   15342:	c1 2c       	mov	r12, r1
   15344:	d1 2c       	mov	r13, r1
   15346:	76 01       	movw	r14, r12
   15348:	d3 94       	inc	r13
   1534a:	f2 cf       	rjmp	.-28     	; 0x15330 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>
   1534c:	80 e8       	ldi	r24, 0x80	; 128
   1534e:	c8 2e       	mov	r12, r24
   15350:	d1 2c       	mov	r13, r1
   15352:	e1 2c       	mov	r14, r1
   15354:	f1 2c       	mov	r15, r1
   15356:	ec cf       	rjmp	.-40     	; 0x15330 <EEPROM_CAT25::EEPROM_CAT25(SoftSPIB*, unsigned char, _EEPROM_CAT25_Device)+0x110>

00015358 <EEPROM_CAT25::begin()>:
_ZN12EEPROM_CAT255beginEv():
   15358:	cf 93       	push	r28
   1535a:	df 93       	push	r29
   1535c:	ec 01       	movw	r28, r24
   1535e:	61 e0       	ldi	r22, 0x01	; 1
   15360:	8a 85       	ldd	r24, Y+10	; 0x0a
   15362:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   15366:	61 e0       	ldi	r22, 0x01	; 1
   15368:	8a 85       	ldd	r24, Y+10	; 0x0a
   1536a:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
   1536e:	88 81       	ld	r24, Y
   15370:	99 81       	ldd	r25, Y+1	; 0x01
   15372:	df 91       	pop	r29
   15374:	cf 91       	pop	r28
   15376:	0c 94 2f a7 	jmp	0x14e5e	; 0x14e5e <SoftSPIB::begin()>

0001537a <EEPROM_CAT25::sendAddressBytes(unsigned long)>:
_ZN12EEPROM_CAT2516sendAddressBytesEm():
   1537a:	cf 92       	push	r12
   1537c:	df 92       	push	r13
   1537e:	ef 92       	push	r14
   15380:	ff 92       	push	r15
   15382:	cf 93       	push	r28
   15384:	df 93       	push	r29
   15386:	ec 01       	movw	r28, r24
   15388:	6a 01       	movw	r12, r20
   1538a:	7b 01       	movw	r14, r22
   1538c:	8c 81       	ldd	r24, Y+4	; 0x04
   1538e:	9d 81       	ldd	r25, Y+5	; 0x05
   15390:	ae 81       	ldd	r26, Y+6	; 0x06
   15392:	bf 81       	ldd	r27, Y+7	; 0x07
   15394:	01 97       	sbiw	r24, 0x01	; 1
   15396:	a1 40       	sbci	r26, 0x01	; 1
   15398:	b1 05       	cpc	r27, r1
   1539a:	38 f0       	brcs	.+14     	; 0x153aa <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x30>
   1539c:	b7 01       	movw	r22, r14
   1539e:	88 27       	eor	r24, r24
   153a0:	99 27       	eor	r25, r25
   153a2:	88 81       	ld	r24, Y
   153a4:	99 81       	ldd	r25, Y+1	; 0x01
   153a6:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
   153aa:	8c 81       	ldd	r24, Y+4	; 0x04
   153ac:	9d 81       	ldd	r25, Y+5	; 0x05
   153ae:	ae 81       	ldd	r26, Y+6	; 0x06
   153b0:	bf 81       	ldd	r27, Y+7	; 0x07
   153b2:	81 30       	cpi	r24, 0x01	; 1
   153b4:	91 40       	sbci	r25, 0x01	; 1
   153b6:	a1 05       	cpc	r26, r1
   153b8:	b1 05       	cpc	r27, r1
   153ba:	60 f0       	brcs	.+24     	; 0x153d4 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   153bc:	8a 81       	ldd	r24, Y+2	; 0x02
   153be:	9b 81       	ldd	r25, Y+3	; 0x03
   153c0:	0b 97       	sbiw	r24, 0x0b	; 11
   153c2:	41 f0       	breq	.+16     	; 0x153d4 <EEPROM_CAT25::sendAddressBytes(unsigned long)+0x5a>
   153c4:	99 27       	eor	r25, r25
   153c6:	8f 2d       	mov	r24, r15
   153c8:	7e 2d       	mov	r23, r14
   153ca:	6d 2d       	mov	r22, r13
   153cc:	88 81       	ld	r24, Y
   153ce:	99 81       	ldd	r25, Y+1	; 0x01
   153d0:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
   153d4:	6c 2d       	mov	r22, r12
   153d6:	88 81       	ld	r24, Y
   153d8:	99 81       	ldd	r25, Y+1	; 0x01
   153da:	df 91       	pop	r29
   153dc:	cf 91       	pop	r28
   153de:	ff 90       	pop	r15
   153e0:	ef 90       	pop	r14
   153e2:	df 90       	pop	r13
   153e4:	cf 90       	pop	r12
   153e6:	0c 94 40 a7 	jmp	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>

000153ea <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>:
_ZN12EEPROM_CAT2512startCommandEhm():
   153ea:	cf 92       	push	r12
   153ec:	df 92       	push	r13
   153ee:	ef 92       	push	r14
   153f0:	ff 92       	push	r15
   153f2:	0f 93       	push	r16
   153f4:	1f 93       	push	r17
   153f6:	cf 93       	push	r28
   153f8:	8c 01       	movw	r16, r24
   153fa:	c6 2f       	mov	r28, r22
   153fc:	69 01       	movw	r12, r18
   153fe:	7a 01       	movw	r14, r20
   15400:	60 e0       	ldi	r22, 0x00	; 0
   15402:	fc 01       	movw	r30, r24
   15404:	82 85       	ldd	r24, Z+10	; 0x0a
   15406:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   1540a:	f8 01       	movw	r30, r16
   1540c:	82 81       	ldd	r24, Z+2	; 0x02
   1540e:	93 81       	ldd	r25, Z+3	; 0x03
   15410:	0b 97       	sbiw	r24, 0x0b	; 11
   15412:	71 f4       	brne	.+28     	; 0x15430 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15414:	ff ef       	ldi	r31, 0xFF	; 255
   15416:	cf 16       	cp	r12, r31
   15418:	d1 04       	cpc	r13, r1
   1541a:	e1 04       	cpc	r14, r1
   1541c:	f1 04       	cpc	r15, r1
   1541e:	41 f0       	breq	.+16     	; 0x15430 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15420:	38 f0       	brcs	.+14     	; 0x15430 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   15422:	c3 30       	cpi	r28, 0x03	; 3
   15424:	21 f0       	breq	.+8      	; 0x1542e <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x44>
   15426:	c2 30       	cpi	r28, 0x02	; 2
   15428:	19 f4       	brne	.+6      	; 0x15430 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1542a:	ca e0       	ldi	r28, 0x0A	; 10
   1542c:	01 c0       	rjmp	.+2      	; 0x15430 <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x46>
   1542e:	cb e0       	ldi	r28, 0x0B	; 11
   15430:	6c 2f       	mov	r22, r28
   15432:	f8 01       	movw	r30, r16
   15434:	80 81       	ld	r24, Z
   15436:	91 81       	ldd	r25, Z+1	; 0x01
   15438:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
   1543c:	c2 50       	subi	r28, 0x02	; 2
   1543e:	c2 30       	cpi	r28, 0x02	; 2
   15440:	60 f4       	brcc	.+24     	; 0x1545a <EEPROM_CAT25::startCommand(unsigned char, unsigned long)+0x70>
   15442:	b7 01       	movw	r22, r14
   15444:	a6 01       	movw	r20, r12
   15446:	c8 01       	movw	r24, r16
   15448:	cf 91       	pop	r28
   1544a:	1f 91       	pop	r17
   1544c:	0f 91       	pop	r16
   1544e:	ff 90       	pop	r15
   15450:	ef 90       	pop	r14
   15452:	df 90       	pop	r13
   15454:	cf 90       	pop	r12
   15456:	0c 94 bd a9 	jmp	0x1537a	; 0x1537a <EEPROM_CAT25::sendAddressBytes(unsigned long)>
   1545a:	cf 91       	pop	r28
   1545c:	1f 91       	pop	r17
   1545e:	0f 91       	pop	r16
   15460:	ff 90       	pop	r15
   15462:	ef 90       	pop	r14
   15464:	df 90       	pop	r13
   15466:	cf 90       	pop	r12
   15468:	08 95       	ret

0001546a <EEPROM_CAT25::endCommand()>:
_ZN12EEPROM_CAT2510endCommandEv():
   1546a:	61 e0       	ldi	r22, 0x01	; 1
   1546c:	fc 01       	movw	r30, r24
   1546e:	82 85       	ldd	r24, Z+10	; 0x0a
   15470:	0c 94 93 cd 	jmp	0x19b26	; 0x19b26 <digitalWrite>

00015474 <EEPROM_CAT25::getStatusRegister()>:
_ZN12EEPROM_CAT2517getStatusRegisterEv():
   15474:	1f 93       	push	r17
   15476:	cf 93       	push	r28
   15478:	df 93       	push	r29
   1547a:	ec 01       	movw	r28, r24
   1547c:	20 e0       	ldi	r18, 0x00	; 0
   1547e:	30 e0       	ldi	r19, 0x00	; 0
   15480:	a9 01       	movw	r20, r18
   15482:	65 e0       	ldi	r22, 0x05	; 5
   15484:	0e 94 f5 a9 	call	0x153ea	; 0x153ea <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   15488:	6f ef       	ldi	r22, 0xFF	; 255
   1548a:	88 81       	ld	r24, Y
   1548c:	99 81       	ldd	r25, Y+1	; 0x01
   1548e:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
   15492:	18 2f       	mov	r17, r24
   15494:	ce 01       	movw	r24, r28
   15496:	0e 94 35 aa 	call	0x1546a	; 0x1546a <EEPROM_CAT25::endCommand()>
   1549a:	81 2f       	mov	r24, r17
   1549c:	df 91       	pop	r29
   1549e:	cf 91       	pop	r28
   154a0:	1f 91       	pop	r17
   154a2:	08 95       	ret

000154a4 <EEPROM_CAT25::isReady()>:
_ZN12EEPROM_CAT257isReadyEv():
   154a4:	0e 94 3a aa 	call	0x15474	; 0x15474 <EEPROM_CAT25::getStatusRegister()>
   154a8:	80 95       	com	r24
   154aa:	81 70       	andi	r24, 0x01	; 1
   154ac:	08 95       	ret

000154ae <EEPROM_CAT25::enableWrite()>:
_ZN12EEPROM_CAT2511enableWriteEv():
   154ae:	cf 93       	push	r28
   154b0:	df 93       	push	r29
   154b2:	ec 01       	movw	r28, r24
   154b4:	20 e0       	ldi	r18, 0x00	; 0
   154b6:	30 e0       	ldi	r19, 0x00	; 0
   154b8:	a9 01       	movw	r20, r18
   154ba:	66 e0       	ldi	r22, 0x06	; 6
   154bc:	0e 94 f5 a9 	call	0x153ea	; 0x153ea <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
   154c0:	ce 01       	movw	r24, r28
   154c2:	df 91       	pop	r29
   154c4:	cf 91       	pop	r28
   154c6:	0c 94 35 aa 	jmp	0x1546a	; 0x1546a <EEPROM_CAT25::endCommand()>

000154ca <EEPROM_CAT25::readByte(unsigned long)>:
_ZN12EEPROM_CAT258readByteEm():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:71
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
   154ca:	cf 92       	push	r12
   154cc:	df 92       	push	r13
   154ce:	ef 92       	push	r14
   154d0:	ff 92       	push	r15
   154d2:	1f 93       	push	r17
   154d4:	cf 93       	push	r28
   154d6:	df 93       	push	r29
   154d8:	ec 01       	movw	r28, r24
   154da:	6a 01       	movw	r12, r20
   154dc:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  if (address >= _capacity) {
   154de:	8c 81       	ldd	r24, Y+4	; 0x04
   154e0:	9d 81       	ldd	r25, Y+5	; 0x05
   154e2:	ae 81       	ldd	r26, Y+6	; 0x06
   154e4:	bf 81       	ldd	r27, Y+7	; 0x07
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:73
    return(0);
   154e6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   154e8:	c8 16       	cp	r12, r24
   154ea:	d9 06       	cpc	r13, r25
   154ec:	ea 06       	cpc	r14, r26
   154ee:	fb 06       	cpc	r15, r27
   154f0:	b8 f4       	brcc	.+46     	; 0x15520 <EEPROM_CAT25::readByte(unsigned long)+0x56>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
    return(0);
  }

  while (!isReady()) {
   154f2:	ce 01       	movw	r24, r28
   154f4:	0e 94 52 aa 	call	0x154a4	; 0x154a4 <EEPROM_CAT25::isReady()>
   154f8:	81 11       	cpse	r24, r1
   154fa:	03 c0       	rjmp	.+6      	; 0x15502 <EEPROM_CAT25::readByte(unsigned long)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:77
    yield();
   154fc:	0e 94 f5 cb 	call	0x197ea	; 0x197ea <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:76
{
  if (address >= _capacity) {
    return(0);
  }

  while (!isReady()) {
   15500:	f8 cf       	rjmp	.-16     	; 0x154f2 <EEPROM_CAT25::readByte(unsigned long)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   15502:	a7 01       	movw	r20, r14
   15504:	96 01       	movw	r18, r12
   15506:	63 e0       	ldi	r22, 0x03	; 3
   15508:	ce 01       	movw	r24, r28
   1550a:	0e 94 f5 a9 	call	0x153ea	; 0x153ea <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1550e:	6f ef       	ldi	r22, 0xFF	; 255
   15510:	88 81       	ld	r24, Y
   15512:	99 81       	ldd	r25, Y+1	; 0x01
   15514:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
   15518:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   1551a:	ce 01       	movw	r24, r28
   1551c:	0e 94 35 aa 	call	0x1546a	; 0x1546a <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:85

  return(ret);
}
   15520:	81 2f       	mov	r24, r17
   15522:	df 91       	pop	r29
   15524:	cf 91       	pop	r28
   15526:	1f 91       	pop	r17
   15528:	ff 90       	pop	r15
   1552a:	ef 90       	pop	r14
   1552c:	df 90       	pop	r13
   1552e:	cf 90       	pop	r12
   15530:	08 95       	ret

00015532 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)>:
_ZN12EEPROM_CAT259writeByteEmh():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:88

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{
   15532:	cf 92       	push	r12
   15534:	df 92       	push	r13
   15536:	ef 92       	push	r14
   15538:	ff 92       	push	r15
   1553a:	1f 93       	push	r17
   1553c:	cf 93       	push	r28
   1553e:	df 93       	push	r29
   15540:	ec 01       	movw	r28, r24
   15542:	6a 01       	movw	r12, r20
   15544:	7b 01       	movw	r14, r22
   15546:	12 2f       	mov	r17, r18
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90

  if (address >= _capacity) {
   15548:	8c 81       	ldd	r24, Y+4	; 0x04
   1554a:	9d 81       	ldd	r25, Y+5	; 0x05
   1554c:	ae 81       	ldd	r26, Y+6	; 0x06
   1554e:	bf 81       	ldd	r27, Y+7	; 0x07
   15550:	c8 16       	cp	r12, r24
   15552:	d9 06       	cpc	r13, r25
   15554:	ea 06       	cpc	r14, r26
   15556:	fb 06       	cpc	r15, r27
   15558:	18 f5       	brcc	.+70     	; 0x155a0 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x6e>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
    return(0);
  }


  while (!isReady()) {
   1555a:	ce 01       	movw	r24, r28
   1555c:	0e 94 52 aa 	call	0x154a4	; 0x154a4 <EEPROM_CAT25::isReady()>
   15560:	81 11       	cpse	r24, r1
   15562:	03 c0       	rjmp	.+6      	; 0x1556a <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x38>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:96
    yield();
   15564:	0e 94 f5 cb 	call	0x197ea	; 0x197ea <yield>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:95
  if (address >= _capacity) {
    return(0);
  }


  while (!isReady()) {
   15568:	f8 cf       	rjmp	.-16     	; 0x1555a <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x28>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:99
    yield();
  }

  enableWrite();
   1556a:	ce 01       	movw	r24, r28
   1556c:	0e 94 57 aa 	call	0x154ae	; 0x154ae <EEPROM_CAT25::enableWrite()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   15570:	a7 01       	movw	r20, r14
   15572:	96 01       	movw	r18, r12
   15574:	62 e0       	ldi	r22, 0x02	; 2
   15576:	ce 01       	movw	r24, r28
   15578:	0e 94 f5 a9 	call	0x153ea	; 0x153ea <EEPROM_CAT25::startCommand(unsigned char, unsigned long)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   1557c:	61 2f       	mov	r22, r17
   1557e:	88 81       	ld	r24, Y
   15580:	99 81       	ldd	r25, Y+1	; 0x01
   15582:	0e 94 40 a7 	call	0x14e80	; 0x14e80 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   15586:	ce 01       	movw	r24, r28
   15588:	0e 94 35 aa 	call	0x1546a	; 0x1546a <EEPROM_CAT25::endCommand()>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:104

  return(1);
   1558c:	81 e0       	ldi	r24, 0x01	; 1
   1558e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:105
}
   15590:	df 91       	pop	r29
   15592:	cf 91       	pop	r28
   15594:	1f 91       	pop	r17
   15596:	ff 90       	pop	r15
   15598:	ef 90       	pop	r14
   1559a:	df 90       	pop	r13
   1559c:	cf 90       	pop	r12
   1559e:	08 95       	ret
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:91

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    return(0);
   155a0:	90 e0       	ldi	r25, 0x00	; 0
   155a2:	80 e0       	ldi	r24, 0x00	; 0
   155a4:	f5 cf       	rjmp	.-22     	; 0x15590 <EEPROM_CAT25::writeByte(unsigned long, unsigned char)+0x5e>

000155a6 <_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm>:
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
    unsigned long m = n;
    n /= 16;
    char c = m - 16 * n;
    *str-- = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);
}
   155a6:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   155a8:	00 e0       	ldi	r16, 0x00	; 0
   155aa:	20 e0       	ldi	r18, 0x00	; 0
   155ac:	40 e0       	ldi	r20, 0x00	; 0
   155ae:	60 e0       	ldi	r22, 0x00	; 0
   155b0:	83 e6       	ldi	r24, 0x63	; 99
   155b2:	92 e1       	ldi	r25, 0x12	; 18
   155b4:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DhcpClass13beginWithDHCPEPhmm():
/home/saric/Arduino/libraries/Ethernet2/src/Dhcp.cpp:518
   155b8:	0f 91       	pop	r16
   155ba:	08 95       	ret

000155bc <DNSClient::begin(IPAddress const&)>:
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   155bc:	fb 01       	movw	r30, r22
   155be:	42 81       	ldd	r20, Z+2	; 0x02
   155c0:	53 81       	ldd	r21, Z+3	; 0x03
   155c2:	64 81       	ldd	r22, Z+4	; 0x04
   155c4:	75 81       	ldd	r23, Z+5	; 0x05
   155c6:	fc 01       	movw	r30, r24
   155c8:	42 83       	std	Z+2, r20	; 0x02
   155ca:	53 83       	std	Z+3, r21	; 0x03
   155cc:	64 83       	std	Z+4, r22	; 0x04
   155ce:	75 83       	std	Z+5, r23	; 0x05
_ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   155d0:	17 82       	std	Z+7, r1	; 0x07
   155d2:	16 82       	std	Z+6, r1	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:55
}
   155d4:	08 95       	ret

000155d6 <DNSClient::inet_aton(char const*, IPAddress&)>:
_ZN9DNSClient9inet_atonEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:59


int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
   155d6:	fb 01       	movw	r30, r22
   155d8:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   155da:	8d 91       	ld	r24, X+
   155dc:	81 11       	cpse	r24, r1
   155de:	fd cf       	rjmp	.-6      	; 0x155da <DNSClient::inet_aton(char const*, IPAddress&)+0x4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   155e0:	90 e0       	ldi	r25, 0x00	; 0
   155e2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   155e4:	70 e0       	ldi	r23, 0x00	; 0
   155e6:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   155e8:	3a e0       	ldi	r19, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   155ea:	21 91       	ld	r18, Z+
   155ec:	22 23       	and	r18, r18
   155ee:	f9 f0       	breq	.+62     	; 0x1562e <DNSClient::inet_aton(char const*, IPAddress&)+0x58>
   155f0:	64 30       	cpi	r22, 0x04	; 4
   155f2:	71 05       	cpc	r23, r1
   155f4:	54 f5       	brge	.+84     	; 0x1564a <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   155f6:	2e 32       	cpi	r18, 0x2E	; 46
   155f8:	71 f4       	brne	.+28     	; 0x15616 <DNSClient::inet_aton(char const*, IPAddress&)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   155fa:	8f 3f       	cpi	r24, 0xFF	; 255
   155fc:	91 05       	cpc	r25, r1
   155fe:	09 f0       	breq	.+2      	; 0x15602 <DNSClient::inet_aton(char const*, IPAddress&)+0x2c>
   15600:	24 f5       	brge	.+72     	; 0x1564a <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   15602:	da 01       	movw	r26, r20
   15604:	a6 0f       	add	r26, r22
   15606:	b7 1f       	adc	r27, r23
   15608:	12 96       	adiw	r26, 0x02	; 2
   1560a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   1560c:	6f 5f       	subi	r22, 0xFF	; 255
   1560e:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   15610:	90 e0       	ldi	r25, 0x00	; 0
   15612:	80 e0       	ldi	r24, 0x00	; 0
   15614:	ea cf       	rjmp	.-44     	; 0x155ea <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   15616:	38 9f       	mul	r19, r24
   15618:	d0 01       	movw	r26, r0
   1561a:	39 9f       	mul	r19, r25
   1561c:	b0 0d       	add	r27, r0
   1561e:	11 24       	eor	r1, r1
   15620:	82 2f       	mov	r24, r18
   15622:	22 0f       	add	r18, r18
   15624:	99 0b       	sbc	r25, r25
   15626:	c0 97       	sbiw	r24, 0x30	; 48
   15628:	8a 0f       	add	r24, r26
   1562a:	9b 1f       	adc	r25, r27
   1562c:	de cf       	rjmp	.-68     	; 0x155ea <DNSClient::inet_aton(char const*, IPAddress&)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   1562e:	8f 3f       	cpi	r24, 0xFF	; 255
   15630:	91 05       	cpc	r25, r1
   15632:	09 f0       	breq	.+2      	; 0x15636 <DNSClient::inet_aton(char const*, IPAddress&)+0x60>
   15634:	54 f4       	brge	.+20     	; 0x1564a <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
   15636:	64 30       	cpi	r22, 0x04	; 4
   15638:	71 05       	cpc	r23, r1
   1563a:	3c f4       	brge	.+14     	; 0x1564a <DNSClient::inet_aton(char const*, IPAddress&)+0x74>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   1563c:	46 0f       	add	r20, r22
   1563e:	57 1f       	adc	r21, r23
   15640:	fa 01       	movw	r30, r20
   15642:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:109
            return 1;
   15644:	81 e0       	ldi	r24, 0x01	; 1
   15646:	90 e0       	ldi	r25, 0x00	; 0
   15648:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:104
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
        {
            // You can't have IP address segments that don't fit in a byte,
            // or more than four segments
            return 0;
   1564a:	90 e0       	ldi	r25, 0x00	; 0
   1564c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:116
    }
    else
    {
        return 0;
    }
}
   1564e:	08 95       	ret

00015650 <_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress>:
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   15650:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   15652:	00 e0       	ldi	r16, 0x00	; 0
   15654:	20 e0       	ldi	r18, 0x00	; 0
   15656:	40 e0       	ldi	r20, 0x00	; 0
   15658:	60 e0       	ldi	r22, 0x00	; 0
   1565a:	89 e6       	ldi	r24, 0x69	; 105
   1565c:	92 e1       	ldi	r25, 0x12	; 18
   1565e:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9DNSClient5beginERK9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
   15662:	0f 91       	pop	r16
   15664:	08 95       	ret

00015666 <DNSClient::BuildRequest(char const*)>:
_ZN9DNSClient12BuildRequestEPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:176

    return ret;
}

uint16_t DNSClient::BuildRequest(const char* aName)
{
   15666:	8f 92       	push	r8
   15668:	9f 92       	push	r9
   1566a:	af 92       	push	r10
   1566c:	bf 92       	push	r11
   1566e:	cf 92       	push	r12
   15670:	df 92       	push	r13
   15672:	ef 92       	push	r14
   15674:	ff 92       	push	r15
   15676:	0f 93       	push	r16
   15678:	1f 93       	push	r17
   1567a:	cf 93       	push	r28
   1567c:	df 93       	push	r29
   1567e:	00 d0       	rcall	.+0      	; 0x15680 <DNSClient::BuildRequest(char const*)+0x1a>
   15680:	cd b7       	in	r28, 0x3d	; 61
   15682:	de b7       	in	r29, 0x3e	; 62
   15684:	6c 01       	movw	r12, r24
   15686:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   15688:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   1568c:	f6 01       	movw	r30, r12
   1568e:	77 83       	std	Z+7, r23	; 0x07
   15690:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   15692:	86 01       	movw	r16, r12
   15694:	08 5f       	subi	r16, 0xF8	; 248
   15696:	1f 4f       	sbci	r17, 0xFF	; 255
   15698:	b6 01       	movw	r22, r12
   1569a:	6a 5f       	subi	r22, 0xFA	; 250
   1569c:	7f 4f       	sbci	r23, 0xFF	; 255
   1569e:	42 e0       	ldi	r20, 0x02	; 2
   156a0:	50 e0       	ldi	r21, 0x00	; 0
   156a2:	c8 01       	movw	r24, r16
   156a4:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   156a8:	81 e0       	ldi	r24, 0x01	; 1
   156aa:	90 e0       	ldi	r25, 0x00	; 0
   156ac:	9a 83       	std	Y+2, r25	; 0x02
   156ae:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   156b0:	42 e0       	ldi	r20, 0x02	; 2
   156b2:	50 e0       	ldi	r21, 0x00	; 0
   156b4:	be 01       	movw	r22, r28
   156b6:	6f 5f       	subi	r22, 0xFF	; 255
   156b8:	7f 4f       	sbci	r23, 0xFF	; 255
   156ba:	c8 01       	movw	r24, r16
   156bc:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   156c0:	80 e0       	ldi	r24, 0x00	; 0
   156c2:	91 e0       	ldi	r25, 0x01	; 1
   156c4:	9a 83       	std	Y+2, r25	; 0x02
   156c6:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   156c8:	42 e0       	ldi	r20, 0x02	; 2
   156ca:	50 e0       	ldi	r21, 0x00	; 0
   156cc:	be 01       	movw	r22, r28
   156ce:	6f 5f       	subi	r22, 0xFF	; 255
   156d0:	7f 4f       	sbci	r23, 0xFF	; 255
   156d2:	c8 01       	movw	r24, r16
   156d4:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   156d8:	1a 82       	std	Y+2, r1	; 0x02
   156da:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   156dc:	42 e0       	ldi	r20, 0x02	; 2
   156de:	50 e0       	ldi	r21, 0x00	; 0
   156e0:	be 01       	movw	r22, r28
   156e2:	6f 5f       	subi	r22, 0xFF	; 255
   156e4:	7f 4f       	sbci	r23, 0xFF	; 255
   156e6:	c8 01       	movw	r24, r16
   156e8:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   156ec:	42 e0       	ldi	r20, 0x02	; 2
   156ee:	50 e0       	ldi	r21, 0x00	; 0
   156f0:	be 01       	movw	r22, r28
   156f2:	6f 5f       	subi	r22, 0xFF	; 255
   156f4:	7f 4f       	sbci	r23, 0xFF	; 255
   156f6:	c8 01       	movw	r24, r16
   156f8:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   156fc:	42 e0       	ldi	r20, 0x02	; 2
   156fe:	50 e0       	ldi	r21, 0x00	; 0
   15700:	be 01       	movw	r22, r28
   15702:	6f 5f       	subi	r22, 0xFF	; 255
   15704:	7f 4f       	sbci	r23, 0xFF	; 255
   15706:	c8 01       	movw	r24, r16
   15708:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   1570c:	67 01       	movw	r12, r14
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   1570e:	f7 01       	movw	r30, r14
   15710:	80 81       	ld	r24, Z
   15712:	88 23       	and	r24, r24
   15714:	01 f1       	breq	.+64     	; 0x15756 <DNSClient::BuildRequest(char const*)+0xf0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   15716:	76 01       	movw	r14, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   15718:	f7 01       	movw	r30, r14
   1571a:	81 91       	ld	r24, Z+
   1571c:	5f 01       	movw	r10, r30
   1571e:	88 23       	and	r24, r24
   15720:	11 f0       	breq	.+4      	; 0x15726 <DNSClient::BuildRequest(char const*)+0xc0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224 (discriminator 1)
   15722:	8e 32       	cpi	r24, 0x2E	; 46
   15724:	b1 f4       	brne	.+44     	; 0x15752 <DNSClient::BuildRequest(char const*)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   15726:	47 01       	movw	r8, r14
   15728:	8c 18       	sub	r8, r12
   1572a:	9d 08       	sbc	r9, r13
   1572c:	18 14       	cp	r1, r8
   1572e:	19 04       	cpc	r1, r9
   15730:	74 f4       	brge	.+28     	; 0x1574e <DNSClient::BuildRequest(char const*)+0xe8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   15732:	8b 82       	std	Y+3, r8	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   15734:	41 e0       	ldi	r20, 0x01	; 1
   15736:	50 e0       	ldi	r21, 0x00	; 0
   15738:	be 01       	movw	r22, r28
   1573a:	6d 5f       	subi	r22, 0xFD	; 253
   1573c:	7f 4f       	sbci	r23, 0xFF	; 255
   1573e:	c8 01       	movw	r24, r16
   15740:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   15744:	a4 01       	movw	r20, r8
   15746:	b6 01       	movw	r22, r12
   15748:	c8 01       	movw	r24, r16
   1574a:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    // Build question
    const char* start =aName;
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   1574e:	65 01       	movw	r12, r10
   15750:	de cf       	rjmp	.-68     	; 0x1570e <DNSClient::BuildRequest(char const*)+0xa8>
   15752:	75 01       	movw	r14, r10
   15754:	e1 cf       	rjmp	.-62     	; 0x15718 <DNSClient::BuildRequest(char const*)+0xb2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   15756:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   15758:	41 e0       	ldi	r20, 0x01	; 1
   1575a:	50 e0       	ldi	r21, 0x00	; 0
   1575c:	be 01       	movw	r22, r28
   1575e:	6d 5f       	subi	r22, 0xFD	; 253
   15760:	7f 4f       	sbci	r23, 0xFF	; 255
   15762:	c8 01       	movw	r24, r16
   15764:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   15768:	e1 2c       	mov	r14, r1
   1576a:	ff 24       	eor	r15, r15
   1576c:	f3 94       	inc	r15
   1576e:	fa 82       	std	Y+2, r15	; 0x02
   15770:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15772:	42 e0       	ldi	r20, 0x02	; 2
   15774:	50 e0       	ldi	r21, 0x00	; 0
   15776:	be 01       	movw	r22, r28
   15778:	6f 5f       	subi	r22, 0xFF	; 255
   1577a:	7f 4f       	sbci	r23, 0xFF	; 255
   1577c:	c8 01       	movw	r24, r16
   1577e:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   15782:	fa 82       	std	Y+2, r15	; 0x02
   15784:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   15786:	42 e0       	ldi	r20, 0x02	; 2
   15788:	50 e0       	ldi	r21, 0x00	; 0
   1578a:	be 01       	movw	r22, r28
   1578c:	6f 5f       	subi	r22, 0xFF	; 255
   1578e:	7f 4f       	sbci	r23, 0xFF	; 255
   15790:	c8 01       	movw	r24, r16
   15792:	0e 94 c8 b0 	call	0x16190	; 0x16190 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:252
    // Success!  Everything buffered okay
    return 1;
}
   15796:	81 e0       	ldi	r24, 0x01	; 1
   15798:	90 e0       	ldi	r25, 0x00	; 0
   1579a:	0f 90       	pop	r0
   1579c:	0f 90       	pop	r0
   1579e:	0f 90       	pop	r0
   157a0:	df 91       	pop	r29
   157a2:	cf 91       	pop	r28
   157a4:	1f 91       	pop	r17
   157a6:	0f 91       	pop	r16
   157a8:	ff 90       	pop	r15
   157aa:	ef 90       	pop	r14
   157ac:	df 90       	pop	r13
   157ae:	cf 90       	pop	r12
   157b0:	bf 90       	pop	r11
   157b2:	af 90       	pop	r10
   157b4:	9f 90       	pop	r9
   157b6:	8f 90       	pop	r8
   157b8:	08 95       	ret

000157ba <DNSClient::ProcessResponse(unsigned int, IPAddress&)>:
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:256


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
   157ba:	2f 92       	push	r2
   157bc:	3f 92       	push	r3
   157be:	4f 92       	push	r4
   157c0:	5f 92       	push	r5
   157c2:	6f 92       	push	r6
   157c4:	7f 92       	push	r7
   157c6:	8f 92       	push	r8
   157c8:	9f 92       	push	r9
   157ca:	af 92       	push	r10
   157cc:	bf 92       	push	r11
   157ce:	cf 92       	push	r12
   157d0:	df 92       	push	r13
   157d2:	ef 92       	push	r14
   157d4:	ff 92       	push	r15
   157d6:	0f 93       	push	r16
   157d8:	1f 93       	push	r17
   157da:	cf 93       	push	r28
   157dc:	df 93       	push	r29
   157de:	cd b7       	in	r28, 0x3d	; 61
   157e0:	de b7       	in	r29, 0x3e	; 62
   157e2:	63 97       	sbiw	r28, 0x13	; 19
   157e4:	0f b6       	in	r0, 0x3f	; 63
   157e6:	f8 94       	cli
   157e8:	de bf       	out	0x3e, r29	; 62
   157ea:	0f be       	out	0x3f, r0	; 63
   157ec:	cd bf       	out	0x3d, r28	; 61
   157ee:	7c 01       	movw	r14, r24
   157f0:	2b 01       	movw	r4, r22
   157f2:	1a 01       	movw	r2, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
    uint32_t startTime = millis();
   157f4:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   157f8:	4b 01       	movw	r8, r22
   157fa:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   157fc:	87 01       	movw	r16, r14
   157fe:	08 5f       	subi	r16, 0xF8	; 248
   15800:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   15802:	71 2c       	mov	r7, r1
   15804:	61 2c       	mov	r6, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   15806:	c8 01       	movw	r24, r16
   15808:	0e 94 3d b1 	call	0x1627a	; 0x1627a <EthernetUDP::parsePacket()>
   1580c:	18 16       	cp	r1, r24
   1580e:	19 06       	cpc	r1, r25
   15810:	9c f0       	brlt	.+38     	; 0x15838 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x7e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   15812:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   15816:	68 19       	sub	r22, r8
   15818:	79 09       	sbc	r23, r9
   1581a:	8a 09       	sbc	r24, r10
   1581c:	9b 09       	sbc	r25, r11
   1581e:	46 16       	cp	r4, r22
   15820:	57 06       	cpc	r5, r23
   15822:	68 06       	cpc	r6, r24
   15824:	79 06       	cpc	r7, r25
   15826:	08 f4       	brcc	.+2      	; 0x1582a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x70>
   15828:	31 c1       	rjmp	.+610    	; 0x15a8c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2d2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   1582a:	62 e3       	ldi	r22, 0x32	; 50
   1582c:	70 e0       	ldi	r23, 0x00	; 0
   1582e:	80 e0       	ldi	r24, 0x00	; 0
   15830:	90 e0       	ldi	r25, 0x00	; 0
   15832:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260
uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   15836:	e7 cf       	rjmp	.-50     	; 0x15806 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x4c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   15838:	f7 01       	movw	r30, r14
   1583a:	42 81       	ldd	r20, Z+2	; 0x02
   1583c:	53 81       	ldd	r21, Z+3	; 0x03
   1583e:	64 81       	ldd	r22, Z+4	; 0x04
   15840:	75 81       	ldd	r23, Z+5	; 0x05
   15842:	81 8d       	ldd	r24, Z+25	; 0x19
   15844:	92 8d       	ldd	r25, Z+26	; 0x1a
   15846:	a3 8d       	ldd	r26, Z+27	; 0x1b
   15848:	b4 8d       	ldd	r27, Z+28	; 0x1c
   1584a:	48 17       	cp	r20, r24
   1584c:	59 07       	cpc	r21, r25
   1584e:	6a 07       	cpc	r22, r26
   15850:	7b 07       	cpc	r23, r27
   15852:	09 f0       	breq	.+2      	; 0x15856 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x9c>
   15854:	1f c1       	rjmp	.+574    	; 0x15a94 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271 (discriminator 2)
   15856:	85 8d       	ldd	r24, Z+29	; 0x1d
   15858:	96 8d       	ldd	r25, Z+30	; 0x1e
   1585a:	c5 97       	sbiw	r24, 0x35	; 53
   1585c:	09 f0       	breq	.+2      	; 0x15860 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xa6>
   1585e:	1a c1       	rjmp	.+564    	; 0x15a94 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2da>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   15860:	c8 01       	movw	r24, r16
   15862:	0e 94 7b b0 	call	0x160f6	; 0x160f6 <EthernetUDP::available()>
   15866:	0c 97       	sbiw	r24, 0x0c	; 12
   15868:	0c f4       	brge	.+2      	; 0x1586c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xb2>
   1586a:	19 c1       	rjmp	.+562    	; 0x15a9e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2e4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   1586c:	4c e0       	ldi	r20, 0x0C	; 12
   1586e:	50 e0       	ldi	r21, 0x00	; 0
   15870:	be 01       	movw	r22, r28
   15872:	6f 5f       	subi	r22, 0xFF	; 255
   15874:	7f 4f       	sbci	r23, 0xFF	; 255
   15876:	c8 01       	movw	r24, r16
   15878:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   1587c:	8b 81       	ldd	r24, Y+3	; 0x03
   1587e:	9c 81       	ldd	r25, Y+4	; 0x04
   15880:	98 27       	eor	r25, r24
   15882:	89 27       	eor	r24, r25
   15884:	98 27       	eor	r25, r24
   15886:	9a 8b       	std	Y+18, r25	; 0x12
   15888:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   1588a:	f7 01       	movw	r30, r14
   1588c:	46 81       	ldd	r20, Z+6	; 0x06
   1588e:	57 81       	ldd	r21, Z+7	; 0x07
   15890:	29 81       	ldd	r18, Y+1	; 0x01
   15892:	3a 81       	ldd	r19, Y+2	; 0x02
   15894:	42 17       	cp	r20, r18
   15896:	53 07       	cpc	r21, r19
   15898:	11 f4       	brne	.+4      	; 0x1589e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xe4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287 (discriminator 1)
   1589a:	97 fd       	sbrc	r25, 7
   1589c:	21 c0       	rjmp	.+66     	; 0x158e0 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   1589e:	c8 01       	movw	r24, r16
   158a0:	0e 94 95 b0 	call	0x1612a	; 0x1612a <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   158a4:	7c ef       	ldi	r23, 0xFC	; 252
   158a6:	e7 2e       	mov	r14, r23
   158a8:	ff 24       	eor	r15, r15
   158aa:	fa 94       	dec	r15
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:422
    // Mark the entire packet as read
    iUdp.flush();

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
}
   158ac:	c7 01       	movw	r24, r14
   158ae:	63 96       	adiw	r28, 0x13	; 19
   158b0:	0f b6       	in	r0, 0x3f	; 63
   158b2:	f8 94       	cli
   158b4:	de bf       	out	0x3e, r29	; 62
   158b6:	0f be       	out	0x3f, r0	; 63
   158b8:	cd bf       	out	0x3d, r28	; 61
   158ba:	df 91       	pop	r29
   158bc:	cf 91       	pop	r28
   158be:	1f 91       	pop	r17
   158c0:	0f 91       	pop	r16
   158c2:	ff 90       	pop	r15
   158c4:	ef 90       	pop	r14
   158c6:	df 90       	pop	r13
   158c8:	cf 90       	pop	r12
   158ca:	bf 90       	pop	r11
   158cc:	af 90       	pop	r10
   158ce:	9f 90       	pop	r9
   158d0:	8f 90       	pop	r8
   158d2:	7f 90       	pop	r7
   158d4:	6f 90       	pop	r6
   158d6:	5f 90       	pop	r5
   158d8:	4f 90       	pop	r4
   158da:	3f 90       	pop	r3
   158dc:	2f 90       	pop	r2
   158de:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   158e0:	8f 70       	andi	r24, 0x0F	; 15
   158e2:	92 70       	andi	r25, 0x02	; 2
   158e4:	89 2b       	or	r24, r25
   158e6:	41 f0       	breq	.+16     	; 0x158f8 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x13e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   158e8:	c8 01       	movw	r24, r16
   158ea:	0e 94 95 b0 	call	0x1612a	; 0x1612a <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   158ee:	6b ef       	ldi	r22, 0xFB	; 251
   158f0:	e6 2e       	mov	r14, r22
   158f2:	ff 24       	eor	r15, r15
   158f4:	fa 94       	dec	r15
   158f6:	da cf       	rjmp	.-76     	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   158f8:	cf 80       	ldd	r12, Y+7	; 0x07
   158fa:	d8 84       	ldd	r13, Y+8	; 0x08
   158fc:	dc 24       	eor	r13, r12
   158fe:	cd 24       	eor	r12, r13
   15900:	dc 24       	eor	r13, r12
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   15902:	f1 2c       	mov	r15, r1
   15904:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   15906:	c1 14       	cp	r12, r1
   15908:	d1 04       	cpc	r13, r1
   1590a:	d1 f4       	brne	.+52     	; 0x15940 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x186>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   1590c:	c8 01       	movw	r24, r16
   1590e:	0e 94 95 b0 	call	0x1612a	; 0x1612a <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   15912:	5a ef       	ldi	r21, 0xFA	; 250
   15914:	e5 2e       	mov	r14, r21
   15916:	ff 24       	eor	r15, r15
   15918:	fa 94       	dec	r15
   1591a:	c8 cf       	rjmp	.-112    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   1591c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1591e:	81 11       	cpse	r24, r1
   15920:	17 c0       	rjmp	.+46     	; 0x15950 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x196>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   15922:	c8 01       	movw	r24, r16
   15924:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
   15928:	c8 01       	movw	r24, r16
   1592a:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
   1592e:	c8 01       	movw	r24, r16
   15930:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
   15934:	c8 01       	movw	r24, r16
   15936:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1593a:	ff ef       	ldi	r31, 0xFF	; 255
   1593c:	ef 1a       	sub	r14, r31
   1593e:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313 (discriminator 1)
   15940:	8d 81       	ldd	r24, Y+5	; 0x05
   15942:	9e 81       	ldd	r25, Y+6	; 0x06
   15944:	98 27       	eor	r25, r24
   15946:	89 27       	eor	r24, r25
   15948:	98 27       	eor	r25, r24
   1594a:	e8 16       	cp	r14, r24
   1594c:	f9 06       	cpc	r15, r25
   1594e:	a8 f4       	brcc	.+42     	; 0x1597a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   15950:	41 e0       	ldi	r20, 0x01	; 1
   15952:	50 e0       	ldi	r21, 0x00	; 0
   15954:	be 01       	movw	r22, r28
   15956:	63 5f       	subi	r22, 0xF3	; 243
   15958:	7f 4f       	sbci	r23, 0xFF	; 255
   1595a:	c8 01       	movw	r24, r16
   1595c:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   15960:	8d 85       	ldd	r24, Y+13	; 0x0d
   15962:	88 23       	and	r24, r24
   15964:	d9 f2       	breq	.-74     	; 0x1591c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   15966:	8d 85       	ldd	r24, Y+13	; 0x0d
   15968:	9f ef       	ldi	r25, 0xFF	; 255
   1596a:	98 0f       	add	r25, r24
   1596c:	9d 87       	std	Y+13, r25	; 0x0d
   1596e:	88 23       	and	r24, r24
   15970:	a9 f2       	breq	.-86     	; 0x1591c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x162>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   15972:	c8 01       	movw	r24, r16
   15974:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            iUdp.read(&len, sizeof(len));
            if (len > 0)
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   15978:	f6 cf       	rjmp	.-20     	; 0x15966 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1ac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   1597a:	b1 2c       	mov	r11, r1
   1597c:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   1597e:	41 e0       	ldi	r20, 0x01	; 1
   15980:	50 e0       	ldi	r21, 0x00	; 0
   15982:	be 01       	movw	r22, r28
   15984:	6d 5e       	subi	r22, 0xED	; 237
   15986:	7f 4f       	sbci	r23, 0xFF	; 255
   15988:	c8 01       	movw	r24, r16
   1598a:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   1598e:	8b 89       	ldd	r24, Y+19	; 0x13
   15990:	98 2f       	mov	r25, r24
   15992:	90 7c       	andi	r25, 0xC0	; 192
   15994:	61 f4       	brne	.+24     	; 0x159ae <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1f4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   15996:	88 23       	and	r24, r24
   15998:	89 f0       	breq	.+34     	; 0x159bc <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x202>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   1599a:	8b 89       	ldd	r24, Y+19	; 0x13
   1599c:	9f ef       	ldi	r25, 0xFF	; 255
   1599e:	98 0f       	add	r25, r24
   159a0:	9b 8b       	std	Y+19, r25	; 0x13
   159a2:	88 23       	and	r24, r24
   159a4:	41 f0       	breq	.+16     	; 0x159b6 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1fc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   159a6:	c8 01       	movw	r24, r16
   159a8:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                if (len > 0)
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   159ac:	f6 cf       	rjmp	.-20     	; 0x1599a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1e0>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   159ae:	c8 01       	movw	r24, r16
   159b0:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   159b4:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   159b6:	8b 89       	ldd	r24, Y+19	; 0x13
   159b8:	81 11       	cpse	r24, r1
   159ba:	e1 cf       	rjmp	.-62     	; 0x1597e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   159bc:	42 e0       	ldi	r20, 0x02	; 2
   159be:	50 e0       	ldi	r21, 0x00	; 0
   159c0:	be 01       	movw	r22, r28
   159c2:	61 5f       	subi	r22, 0xF1	; 241
   159c4:	7f 4f       	sbci	r23, 0xFF	; 255
   159c6:	c8 01       	movw	r24, r16
   159c8:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   159cc:	42 e0       	ldi	r20, 0x02	; 2
   159ce:	50 e0       	ldi	r21, 0x00	; 0
   159d0:	be 01       	movw	r22, r28
   159d2:	63 5f       	subi	r22, 0xF3	; 243
   159d4:	7f 4f       	sbci	r23, 0xFF	; 255
   159d6:	c8 01       	movw	r24, r16
   159d8:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   159dc:	c8 01       	movw	r24, r16
   159de:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
   159e2:	c8 01       	movw	r24, r16
   159e4:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
   159e8:	c8 01       	movw	r24, r16
   159ea:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
   159ee:	c8 01       	movw	r24, r16
   159f0:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   159f4:	42 e0       	ldi	r20, 0x02	; 2
   159f6:	50 e0       	ldi	r21, 0x00	; 0
   159f8:	be 01       	movw	r22, r28
   159fa:	6f 5e       	subi	r22, 0xEF	; 239
   159fc:	7f 4f       	sbci	r23, 0xFF	; 255
   159fe:	c8 01       	movw	r24, r16
   15a00:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   15a04:	8f 85       	ldd	r24, Y+15	; 0x0f
   15a06:	98 89       	ldd	r25, Y+16	; 0x10
   15a08:	81 15       	cp	r24, r1
   15a0a:	91 40       	sbci	r25, 0x01	; 1
   15a0c:	f9 f4       	brne	.+62     	; 0x15a4c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395 (discriminator 1)
   15a0e:	ed 84       	ldd	r14, Y+13	; 0x0d
   15a10:	fe 84       	ldd	r15, Y+14	; 0x0e
   15a12:	fe 24       	eor	r15, r14
   15a14:	ef 24       	eor	r14, r15
   15a16:	fe 24       	eor	r15, r14
   15a18:	81 e0       	ldi	r24, 0x01	; 1
   15a1a:	e8 16       	cp	r14, r24
   15a1c:	f1 04       	cpc	r15, r1
   15a1e:	b1 f4       	brne	.+44     	; 0x15a4c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x292>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   15a20:	89 89       	ldd	r24, Y+17	; 0x11
   15a22:	9a 89       	ldd	r25, Y+18	; 0x12
   15a24:	81 15       	cp	r24, r1
   15a26:	94 40       	sbci	r25, 0x04	; 4
   15a28:	41 f0       	breq	.+16     	; 0x15a3a <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x280>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   15a2a:	c8 01       	movw	r24, r16
   15a2c:	0e 94 95 b0 	call	0x1612a	; 0x1612a <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   15a30:	47 ef       	ldi	r20, 0xF7	; 247
   15a32:	e4 2e       	mov	r14, r20
   15a34:	ff 24       	eor	r15, r15
   15a36:	fa 94       	dec	r15
   15a38:	39 cf       	rjmp	.-398    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   15a3a:	b1 01       	movw	r22, r2
   15a3c:	6e 5f       	subi	r22, 0xFE	; 254
   15a3e:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN9DNSClient15ProcessResponseEjR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   15a40:	44 e0       	ldi	r20, 0x04	; 4
   15a42:	50 e0       	ldi	r21, 0x00	; 0
   15a44:	c8 01       	movw	r24, r16
   15a46:	0e 94 06 b1 	call	0x1620c	; 0x1620c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:405
            return SUCCESS;
   15a4a:	30 cf       	rjmp	.-416    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
   15a4c:	f1 2c       	mov	r15, r1
   15a4e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 3)
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   15a50:	89 89       	ldd	r24, Y+17	; 0x11
   15a52:	9a 89       	ldd	r25, Y+18	; 0x12
   15a54:	98 27       	eor	r25, r24
   15a56:	89 27       	eor	r24, r25
   15a58:	98 27       	eor	r25, r24
   15a5a:	e8 16       	cp	r14, r24
   15a5c:	f9 06       	cpc	r15, r25
   15a5e:	38 f4       	brcc	.+14     	; 0x15a6e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2b4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412 (discriminator 2)
            {
                iUdp.read(); // we don't care about the returned byte
   15a60:	c8 01       	movw	r24, r16
   15a62:	0e 94 dc b0 	call	0x161b8	; 0x161b8 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410 (discriminator 2)
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   15a66:	ff ef       	ldi	r31, 0xFF	; 255
   15a68:	ef 1a       	sub	r14, r31
   15a6a:	ff 0a       	sbc	r15, r31
   15a6c:	f1 cf       	rjmp	.-30     	; 0x15a50 <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x296>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   15a6e:	2f ef       	ldi	r18, 0xFF	; 255
   15a70:	a2 1a       	sub	r10, r18
   15a72:	b2 0a       	sbc	r11, r18
   15a74:	ca 14       	cp	r12, r10
   15a76:	db 04       	cpc	r13, r11
   15a78:	09 f0       	breq	.+2      	; 0x15a7c <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x2c2>
   15a7a:	81 cf       	rjmp	.-254    	; 0x1597e <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0x1c4>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   15a7c:	c8 01       	movw	r24, r16
   15a7e:	0e 94 95 b0 	call	0x1612a	; 0x1612a <EthernetUDP::flush()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   15a82:	36 ef       	ldi	r19, 0xF6	; 246
   15a84:	e3 2e       	mov	r14, r19
   15a86:	ff 24       	eor	r15, r15
   15a88:	fa 94       	dec	r15
   15a8a:	10 cf       	rjmp	.-480    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   15a8c:	ee 24       	eor	r14, r14
   15a8e:	ea 94       	dec	r14
   15a90:	fe 2c       	mov	r15, r14
   15a92:	0c cf       	rjmp	.-488    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   15a94:	9e ef       	ldi	r25, 0xFE	; 254
   15a96:	e9 2e       	mov	r14, r25
   15a98:	ff 24       	eor	r15, r15
   15a9a:	fa 94       	dec	r15
   15a9c:	07 cf       	rjmp	.-498    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   15a9e:	8d ef       	ldi	r24, 0xFD	; 253
   15aa0:	e8 2e       	mov	r14, r24
   15aa2:	ff 24       	eor	r15, r15
   15aa4:	fa 94       	dec	r15
   15aa6:	02 cf       	rjmp	.-508    	; 0x158ac <DNSClient::ProcessResponse(unsigned int, IPAddress&)+0xf2>

00015aa8 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   15aa8:	8f 92       	push	r8
   15aaa:	9f 92       	push	r9
   15aac:	af 92       	push	r10
   15aae:	bf 92       	push	r11
   15ab0:	cf 92       	push	r12
   15ab2:	df 92       	push	r13
   15ab4:	ef 92       	push	r14
   15ab6:	ff 92       	push	r15
   15ab8:	0f 93       	push	r16
   15aba:	1f 93       	push	r17
   15abc:	cf 93       	push	r28
   15abe:	df 93       	push	r29
   15ac0:	00 d0       	rcall	.+0      	; 0x15ac2 <DNSClient::getHostByName(char const*, IPAddress&)+0x1a>
   15ac2:	00 d0       	rcall	.+0      	; 0x15ac4 <DNSClient::getHostByName(char const*, IPAddress&)+0x1c>
   15ac4:	cd b7       	in	r28, 0x3d	; 61
   15ac6:	de b7       	in	r29, 0x3e	; 62
   15ac8:	7c 01       	movw	r14, r24
   15aca:	4b 01       	movw	r8, r22
   15acc:	5a 01       	movw	r10, r20
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:123
    int ret =0;

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
   15ace:	0e 94 eb aa 	call	0x155d6	; 0x155d6 <DNSClient::inet_aton(char const*, IPAddress&)>
   15ad2:	8c 01       	movw	r16, r24
   15ad4:	89 2b       	or	r24, r25
   15ad6:	09 f0       	breq	.+2      	; 0x15ada <DNSClient::getHostByName(char const*, IPAddress&)+0x32>
   15ad8:	6d c0       	rjmp	.+218    	; 0x15bb4 <DNSClient::getHostByName(char const*, IPAddress&)+0x10c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   15ada:	f7 01       	movw	r30, r14
   15adc:	42 81       	ldd	r20, Z+2	; 0x02
   15ade:	53 81       	ldd	r21, Z+3	; 0x03
   15ae0:	64 81       	ldd	r22, Z+4	; 0x04
   15ae2:	75 81       	ldd	r23, Z+5	; 0x05
   15ae4:	80 91 6b 12 	lds	r24, 0x126B	; 0x80126b <INADDR_NONE+0x2>
   15ae8:	90 91 6c 12 	lds	r25, 0x126C	; 0x80126c <INADDR_NONE+0x3>
   15aec:	a0 91 6d 12 	lds	r26, 0x126D	; 0x80126d <INADDR_NONE+0x4>
   15af0:	b0 91 6e 12 	lds	r27, 0x126E	; 0x80126e <INADDR_NONE+0x5>
   15af4:	48 17       	cp	r20, r24
   15af6:	59 07       	cpc	r21, r25
   15af8:	6a 07       	cpc	r22, r26
   15afa:	7b 07       	cpc	r23, r27
   15afc:	09 f4       	brne	.+2      	; 0x15b00 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   15afe:	5d c0       	rjmp	.+186    	; 0x15bba <DNSClient::getHostByName(char const*, IPAddress&)+0x112>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   15b00:	67 01       	movw	r12, r14
   15b02:	f8 e0       	ldi	r31, 0x08	; 8
   15b04:	cf 0e       	add	r12, r31
   15b06:	d1 1c       	adc	r13, r1
   15b08:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   15b0c:	6f 70       	andi	r22, 0x0F	; 15
   15b0e:	77 27       	eor	r23, r23
   15b10:	7c 5f       	subi	r23, 0xFC	; 252
   15b12:	c6 01       	movw	r24, r12
   15b14:	0e 94 8e b1 	call	0x1631c	; 0x1631c <EthernetUDP::begin(unsigned int)>
   15b18:	81 30       	cpi	r24, 0x01	; 1
   15b1a:	29 f5       	brne	.+74     	; 0x15b66 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   15b1c:	8c ed       	ldi	r24, 0xDC	; 220
   15b1e:	98 e0       	ldi	r25, 0x08	; 8
   15b20:	9a 83       	std	Y+2, r25	; 0x02
   15b22:	89 83       	std	Y+1, r24	; 0x01
   15b24:	f7 01       	movw	r30, r14
   15b26:	82 81       	ldd	r24, Z+2	; 0x02
   15b28:	93 81       	ldd	r25, Z+3	; 0x03
   15b2a:	a4 81       	ldd	r26, Z+4	; 0x04
   15b2c:	b5 81       	ldd	r27, Z+5	; 0x05
   15b2e:	8b 83       	std	Y+3, r24	; 0x03
   15b30:	9c 83       	std	Y+4, r25	; 0x04
   15b32:	ad 83       	std	Y+5, r26	; 0x05
   15b34:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   15b36:	45 e3       	ldi	r20, 0x35	; 53
   15b38:	50 e0       	ldi	r21, 0x00	; 0
   15b3a:	be 01       	movw	r22, r28
   15b3c:	6f 5f       	subi	r22, 0xFF	; 255
   15b3e:	7f 4f       	sbci	r23, 0xFF	; 255
   15b40:	c6 01       	movw	r24, r12
   15b42:	0e 94 bc b0 	call	0x16178	; 0x16178 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   15b46:	89 2b       	or	r24, r25
   15b48:	59 f0       	breq	.+22     	; 0x15b60 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:147
            {
                // Now output the request data
                ret = BuildRequest(aHostname);
   15b4a:	b4 01       	movw	r22, r8
   15b4c:	c7 01       	movw	r24, r14
   15b4e:	0e 94 33 ab 	call	0x15666	; 0x15666 <DNSClient::BuildRequest(char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:148
                if (ret != 0)
   15b52:	89 2b       	or	r24, r25
   15b54:	29 f0       	breq	.+10     	; 0x15b60 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   15b56:	c6 01       	movw	r24, r12
   15b58:	0e 94 c4 b0 	call	0x16188	; 0x16188 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   15b5c:	89 2b       	or	r24, r25
   15b5e:	31 f5       	brne	.+76     	; 0x15bac <DNSClient::getHostByName(char const*, IPAddress&)+0x104>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   15b60:	c6 01       	movw	r24, r12
   15b62:	0e 94 a7 b0 	call	0x1614e	; 0x1614e <EthernetUDP::stop()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
    }

    return ret;
}
   15b66:	c8 01       	movw	r24, r16
   15b68:	26 96       	adiw	r28, 0x06	; 6
   15b6a:	0f b6       	in	r0, 0x3f	; 63
   15b6c:	f8 94       	cli
   15b6e:	de bf       	out	0x3e, r29	; 62
   15b70:	0f be       	out	0x3f, r0	; 63
   15b72:	cd bf       	out	0x3d, r28	; 61
   15b74:	df 91       	pop	r29
   15b76:	cf 91       	pop	r28
   15b78:	1f 91       	pop	r17
   15b7a:	0f 91       	pop	r16
   15b7c:	ff 90       	pop	r15
   15b7e:	ef 90       	pop	r14
   15b80:	df 90       	pop	r13
   15b82:	cf 90       	pop	r12
   15b84:	bf 90       	pop	r11
   15b86:	af 90       	pop	r10
   15b88:	9f 90       	pop	r9
   15b8a:	8f 90       	pop	r8
   15b8c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157 (discriminator 1)
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   15b8e:	0f 3f       	cpi	r16, 0xFF	; 255
   15b90:	10 07       	cpc	r17, r16
   15b92:	31 f7       	brne	.-52     	; 0x15b60 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:159
                        {
                            ret = ProcessResponse(5000, aResult);
   15b94:	a5 01       	movw	r20, r10
   15b96:	68 e8       	ldi	r22, 0x88	; 136
   15b98:	73 e1       	ldi	r23, 0x13	; 19
   15b9a:	c7 01       	movw	r24, r14
   15b9c:	0e 94 dd ab 	call	0x157ba	; 0x157ba <DNSClient::ProcessResponse(unsigned int, IPAddress&)>
   15ba0:	8c 01       	movw	r16, r24
   15ba2:	81 e0       	ldi	r24, 0x01	; 1
   15ba4:	88 1a       	sub	r8, r24
   15ba6:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   15ba8:	91 f7       	brne	.-28     	; 0x15b8e <DNSClient::getHostByName(char const*, IPAddress&)+0xe6>
   15baa:	da cf       	rjmp	.-76     	; 0x15b60 <DNSClient::getHostByName(char const*, IPAddress&)+0xb8>
   15bac:	83 e0       	ldi	r24, 0x03	; 3
   15bae:	88 2e       	mov	r8, r24
   15bb0:	91 2c       	mov	r9, r1
   15bb2:	f0 cf       	rjmp	.-32     	; 0x15b94 <DNSClient::getHostByName(char const*, IPAddress&)+0xec>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   15bb4:	01 e0       	ldi	r16, 0x01	; 1
   15bb6:	10 e0       	ldi	r17, 0x00	; 0
   15bb8:	d6 cf       	rjmp	.-84     	; 0x15b66 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   15bba:	0e ef       	ldi	r16, 0xFE	; 254
   15bbc:	1f ef       	ldi	r17, 0xFF	; 255
   15bbe:	d3 cf       	rjmp	.-90     	; 0x15b66 <DNSClient::getHostByName(char const*, IPAddress&)+0xbe>

00015bc0 <W5500Class::writeGAR(unsigned char*)>:
_ZN10W5500Class8writeGAREPh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:207
    return _dnsDomainName;
}

char* EthernetClass::hostName(){
    return _hostName;
}
   15bc0:	24 e0       	ldi	r18, 0x04	; 4
   15bc2:	30 e0       	ldi	r19, 0x00	; 0
   15bc4:	ac 01       	movw	r20, r24
   15bc6:	64 e0       	ldi	r22, 0x04	; 4
   15bc8:	81 e0       	ldi	r24, 0x01	; 1
   15bca:	90 e0       	ldi	r25, 0x00	; 0
   15bcc:	0c 94 93 b4 	jmp	0x16926	; 0x16926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015bd0 <W5500Class::writeSUBR(unsigned char*)>:
_ZN10W5500Class9writeSUBREPh():
   15bd0:	24 e0       	ldi	r18, 0x04	; 4
   15bd2:	30 e0       	ldi	r19, 0x00	; 0
   15bd4:	ac 01       	movw	r20, r24
   15bd6:	64 e0       	ldi	r22, 0x04	; 4
   15bd8:	85 e0       	ldi	r24, 0x05	; 5
   15bda:	90 e0       	ldi	r25, 0x00	; 0
   15bdc:	0c 94 93 b4 	jmp	0x16926	; 0x16926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015be0 <W5500Class::writeSHAR(unsigned char*)>:
_ZN10W5500Class9writeSHAREPh():
   15be0:	26 e0       	ldi	r18, 0x06	; 6
   15be2:	30 e0       	ldi	r19, 0x00	; 0
   15be4:	ac 01       	movw	r20, r24
   15be6:	64 e0       	ldi	r22, 0x04	; 4
   15be8:	89 e0       	ldi	r24, 0x09	; 9
   15bea:	90 e0       	ldi	r25, 0x00	; 0
   15bec:	0c 94 93 b4 	jmp	0x16926	; 0x16926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015bf0 <W5500Class::writeSIPR(unsigned char*)>:
_ZN10W5500Class9writeSIPREPh():
   15bf0:	24 e0       	ldi	r18, 0x04	; 4
   15bf2:	30 e0       	ldi	r19, 0x00	; 0
   15bf4:	ac 01       	movw	r20, r24
   15bf6:	64 e0       	ldi	r22, 0x04	; 4
   15bf8:	8f e0       	ldi	r24, 0x0F	; 15
   15bfa:	90 e0       	ldi	r25, 0x00	; 0
   15bfc:	0c 94 93 b4 	jmp	0x16926	; 0x16926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

00015c00 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress)>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   15c00:	8f 92       	push	r8
   15c02:	9f 92       	push	r9
   15c04:	af 92       	push	r10
   15c06:	bf 92       	push	r11
   15c08:	cf 92       	push	r12
   15c0a:	df 92       	push	r13
   15c0c:	ef 92       	push	r14
   15c0e:	ff 92       	push	r15
   15c10:	0f 93       	push	r16
   15c12:	1f 93       	push	r17
   15c14:	cf 93       	push	r28
   15c16:	df 93       	push	r29
   15c18:	4c 01       	movw	r8, r24
   15c1a:	5b 01       	movw	r10, r22
   15c1c:	6a 01       	movw	r12, r20
   15c1e:	e9 01       	movw	r28, r18
   15c20:	fc 01       	movw	r30, r24
   15c22:	64 85       	ldd	r22, Z+12	; 0x0c
   15c24:	8f ea       	ldi	r24, 0xAF	; 175
   15c26:	92 e1       	ldi	r25, 0x12	; 18
   15c28:	0e 94 eb b4 	call	0x169d6	; 0x169d6 <W5500Class::init(unsigned char)>
_ZN10W5500Class13setMACAddressEPh():
   15c2c:	c5 01       	movw	r24, r10
   15c2e:	0e 94 f0 ad 	call	0x15be0	; 0x15be0 <W5500Class::writeSHAR(unsigned char*)>
_ZN10W5500Class12setIPAddressEPh():
   15c32:	c6 01       	movw	r24, r12
   15c34:	02 96       	adiw	r24, 0x02	; 2
   15c36:	0e 94 f8 ad 	call	0x15bf0	; 0x15bf0 <W5500Class::writeSIPR(unsigned char*)>
_ZN10W5500Class12setGatewayIpEPh():
   15c3a:	c8 01       	movw	r24, r16
   15c3c:	02 96       	adiw	r24, 0x02	; 2
   15c3e:	0e 94 e0 ad 	call	0x15bc0	; 0x15bc0 <W5500Class::writeGAR(unsigned char*)>
_ZN10W5500Class13setSubnetMaskEPh():
   15c42:	c7 01       	movw	r24, r14
   15c44:	02 96       	adiw	r24, 0x02	; 2
   15c46:	0e 94 e8 ad 	call	0x15bd0	; 0x15bd0 <W5500Class::writeSUBR(unsigned char*)>
_ZN9IPAddressaSERKS_():
   15c4a:	8a 81       	ldd	r24, Y+2	; 0x02
   15c4c:	9b 81       	ldd	r25, Y+3	; 0x03
   15c4e:	ac 81       	ldd	r26, Y+4	; 0x04
   15c50:	bd 81       	ldd	r27, Y+5	; 0x05
   15c52:	f4 01       	movw	r30, r8
   15c54:	82 83       	std	Z+2, r24	; 0x02
   15c56:	93 83       	std	Z+3, r25	; 0x03
   15c58:	a4 83       	std	Z+4, r26	; 0x04
   15c5a:	b5 83       	std	Z+5, r27	; 0x05
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_():
   15c5c:	df 91       	pop	r29
   15c5e:	cf 91       	pop	r28
   15c60:	1f 91       	pop	r17
   15c62:	0f 91       	pop	r16
   15c64:	ff 90       	pop	r15
   15c66:	ef 90       	pop	r14
   15c68:	df 90       	pop	r13
   15c6a:	cf 90       	pop	r12
   15c6c:	bf 90       	pop	r11
   15c6e:	af 90       	pop	r10
   15c70:	9f 90       	pop	r9
   15c72:	8f 90       	pop	r8
   15c74:	08 95       	ret

00015c76 <EthernetClass::dnsServerIP()>:
_ZN9IPAddressC4ERKS_():
   15c76:	2c ed       	ldi	r18, 0xDC	; 220
   15c78:	38 e0       	ldi	r19, 0x08	; 8
   15c7a:	fc 01       	movw	r30, r24
   15c7c:	31 83       	std	Z+1, r19	; 0x01
   15c7e:	20 83       	st	Z, r18
   15c80:	fb 01       	movw	r30, r22
   15c82:	42 81       	ldd	r20, Z+2	; 0x02
   15c84:	53 81       	ldd	r21, Z+3	; 0x03
   15c86:	64 81       	ldd	r22, Z+4	; 0x04
   15c88:	75 81       	ldd	r23, Z+5	; 0x05
   15c8a:	fc 01       	movw	r30, r24
   15c8c:	42 83       	std	Z+2, r20	; 0x02
   15c8e:	53 83       	std	Z+3, r21	; 0x03
   15c90:	64 83       	std	Z+4, r22	; 0x04
   15c92:	75 83       	std	Z+5, r23	; 0x05
_ZN13EthernetClass11dnsServerIPEv():
   15c94:	08 95       	ret

00015c96 <_GLOBAL__sub_I__ZN13EthernetClass6_stateE>:
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209

EthernetClass Ethernet;
   15c96:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   15c98:	00 e0       	ldi	r16, 0x00	; 0
   15c9a:	20 e0       	ldi	r18, 0x00	; 0
   15c9c:	40 e0       	ldi	r20, 0x00	; 0
   15c9e:	60 e0       	ldi	r22, 0x00	; 0
   15ca0:	8c e8       	ldi	r24, 0x8C	; 140
   15ca2:	92 e1       	ldi	r25, 0x12	; 18
   15ca4:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN13EthernetClassC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:34
  uint8_t w5500_cspin;

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
   15ca8:	8f e6       	ldi	r24, 0x6F	; 111
   15caa:	92 e1       	ldi	r25, 0x12	; 18
   15cac:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress()>
   15cb0:	ef e6       	ldi	r30, 0x6F	; 111
   15cb2:	f2 e1       	ldi	r31, 0x12	; 18
   15cb4:	13 86       	std	Z+11, r1	; 0x0b
   15cb6:	12 86       	std	Z+10, r1	; 0x0a
   15cb8:	8a e0       	ldi	r24, 0x0A	; 10
   15cba:	84 87       	std	Z+12, r24	; 0x0c
_GLOBAL__sub_I__ZN13EthernetClass6_stateE():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:209
   15cbc:	0f 91       	pop	r16
   15cbe:	08 95       	ret

00015cc0 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
   15cc0:	90 e0       	ldi	r25, 0x00	; 0
   15cc2:	80 e0       	ldi	r24, 0x00	; 0
   15cc4:	08 95       	ret

00015cc6 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:21

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}
   15cc6:	dc 01       	movw	r26, r24
   15cc8:	ed 91       	ld	r30, X+
   15cca:	fc 91       	ld	r31, X
   15ccc:	02 8c       	ldd	r0, Z+26	; 0x1a
   15cce:	f3 8d       	ldd	r31, Z+27	; 0x1b
   15cd0:	e0 2d       	mov	r30, r0
   15cd2:	19 95       	eicall
   15cd4:	91 e0       	ldi	r25, 0x01	; 1
   15cd6:	89 27       	eor	r24, r25
   15cd8:	08 95       	ret

00015cda <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
   15cda:	cf 93       	push	r28
   15cdc:	df 93       	push	r29
   15cde:	1f 92       	push	r1
   15ce0:	cd b7       	in	r28, 0x3d	; 61
   15ce2:	de b7       	in	r29, 0x3e	; 62
   15ce4:	69 83       	std	Y+1, r22	; 0x01
   15ce6:	dc 01       	movw	r26, r24
   15ce8:	ed 91       	ld	r30, X+
   15cea:	fc 91       	ld	r31, X
   15cec:	02 80       	ldd	r0, Z+2	; 0x02
   15cee:	f3 81       	ldd	r31, Z+3	; 0x03
   15cf0:	e0 2d       	mov	r30, r0
   15cf2:	41 e0       	ldi	r20, 0x01	; 1
   15cf4:	50 e0       	ldi	r21, 0x00	; 0
   15cf6:	be 01       	movw	r22, r28
   15cf8:	6f 5f       	subi	r22, 0xFF	; 255
   15cfa:	7f 4f       	sbci	r23, 0xFF	; 255
   15cfc:	19 95       	eicall
   15cfe:	0f 90       	pop	r0
   15d00:	df 91       	pop	r29
   15d02:	cf 91       	pop	r28
   15d04:	08 95       	ret

00015d06 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
   15d06:	21 e0       	ldi	r18, 0x01	; 1
   15d08:	fc 01       	movw	r30, r24
   15d0a:	84 85       	ldd	r24, Z+12	; 0x0c
   15d0c:	88 30       	cpi	r24, 0x08	; 8
   15d0e:	09 f4       	brne	.+2      	; 0x15d12 <EthernetClient::operator bool()+0xc>
   15d10:	20 e0       	ldi	r18, 0x00	; 0
   15d12:	82 2f       	mov	r24, r18
   15d14:	08 95       	ret

00015d16 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
   15d16:	fc 01       	movw	r30, r24
   15d18:	94 85       	ldd	r25, Z+12	; 0x0c
   15d1a:	fb 01       	movw	r30, r22
   15d1c:	84 85       	ldd	r24, Z+12	; 0x0c
   15d1e:	98 13       	cpse	r25, r24
   15d20:	03 c0       	rjmp	.+6      	; 0x15d28 <EthernetClient::operator==(EthernetClient const&)+0x12>
   15d22:	81 e0       	ldi	r24, 0x01	; 1
   15d24:	98 30       	cpi	r25, 0x08	; 8
   15d26:	09 f4       	brne	.+2      	; 0x15d2a <EthernetClient::operator==(EthernetClient const&)+0x14>
   15d28:	80 e0       	ldi	r24, 0x00	; 0
   15d2a:	08 95       	ret

00015d2c <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
   15d2c:	cf 92       	push	r12
   15d2e:	df 92       	push	r13
   15d30:	ef 92       	push	r14
   15d32:	ff 92       	push	r15
   15d34:	0f 93       	push	r16
   15d36:	1f 93       	push	r17
   15d38:	cf 93       	push	r28
   15d3a:	df 93       	push	r29
   15d3c:	cd b7       	in	r28, 0x3d	; 61
   15d3e:	de b7       	in	r29, 0x3e	; 62
   15d40:	af 97       	sbiw	r28, 0x2f	; 47
   15d42:	0f b6       	in	r0, 0x3f	; 63
   15d44:	f8 94       	cli
   15d46:	de bf       	out	0x3e, r29	; 62
   15d48:	0f be       	out	0x3f, r0	; 63
   15d4a:	cd bf       	out	0x3d, r28	; 61
   15d4c:	8c 01       	movw	r16, r24
   15d4e:	6b 01       	movw	r12, r22
   15d50:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
   15d52:	ce 01       	movw	r24, r28
   15d54:	01 96       	adiw	r24, 0x01	; 1
   15d56:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress()>
   15d5a:	ce 01       	movw	r24, r28
   15d5c:	09 96       	adiw	r24, 0x09	; 9
   15d5e:	0e 94 c3 b1 	call	0x16386	; 0x16386 <EthernetUDP::EthernetUDP()>
_ZN14EthernetClient7connectEPKcj():
   15d62:	ce 01       	movw	r24, r28
   15d64:	8a 96       	adiw	r24, 0x2a	; 42
   15d66:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress()>
   15d6a:	6f e6       	ldi	r22, 0x6F	; 111
   15d6c:	72 e1       	ldi	r23, 0x12	; 18
   15d6e:	ce 01       	movw	r24, r28
   15d70:	84 96       	adiw	r24, 0x24	; 36
   15d72:	0e 94 3b ae 	call	0x15c76	; 0x15c76 <EthernetClass::dnsServerIP()>
   15d76:	be 01       	movw	r22, r28
   15d78:	6c 5d       	subi	r22, 0xDC	; 220
   15d7a:	7f 4f       	sbci	r23, 0xFF	; 255
   15d7c:	ce 01       	movw	r24, r28
   15d7e:	01 96       	adiw	r24, 0x01	; 1
   15d80:	0e 94 de aa 	call	0x155bc	; 0x155bc <DNSClient::begin(IPAddress const&)>
   15d84:	ae 01       	movw	r20, r28
   15d86:	46 5d       	subi	r20, 0xD6	; 214
   15d88:	5f 4f       	sbci	r21, 0xFF	; 255
   15d8a:	b6 01       	movw	r22, r12
   15d8c:	ce 01       	movw	r24, r28
   15d8e:	01 96       	adiw	r24, 0x01	; 1
   15d90:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <DNSClient::getHostByName(char const*, IPAddress&)>
   15d94:	81 30       	cpi	r24, 0x01	; 1
   15d96:	91 05       	cpc	r25, r1
   15d98:	c1 f4       	brne	.+48     	; 0x15dca <EthernetClient::connect(char const*, unsigned int)+0x9e>
   15d9a:	d8 01       	movw	r26, r16
   15d9c:	ed 91       	ld	r30, X+
   15d9e:	fc 91       	ld	r31, X
   15da0:	06 84       	ldd	r0, Z+14	; 0x0e
   15da2:	f7 85       	ldd	r31, Z+15	; 0x0f
   15da4:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   15da6:	8c ed       	ldi	r24, 0xDC	; 220
   15da8:	98 e0       	ldi	r25, 0x08	; 8
   15daa:	9d a3       	std	Y+37, r25	; 0x25
   15dac:	8c a3       	std	Y+36, r24	; 0x24
   15dae:	8c a5       	ldd	r24, Y+44	; 0x2c
   15db0:	9d a5       	ldd	r25, Y+45	; 0x2d
   15db2:	ae a5       	ldd	r26, Y+46	; 0x2e
   15db4:	bf a5       	ldd	r27, Y+47	; 0x2f
   15db6:	8e a3       	std	Y+38, r24	; 0x26
   15db8:	9f a3       	std	Y+39, r25	; 0x27
   15dba:	a8 a7       	std	Y+40, r26	; 0x28
   15dbc:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
   15dbe:	a7 01       	movw	r20, r14
   15dc0:	be 01       	movw	r22, r28
   15dc2:	6c 5d       	subi	r22, 0xDC	; 220
   15dc4:	7f 4f       	sbci	r23, 0xFF	; 255
   15dc6:	c8 01       	movw	r24, r16
   15dc8:	19 95       	eicall
   15dca:	af 96       	adiw	r28, 0x2f	; 47
   15dcc:	0f b6       	in	r0, 0x3f	; 63
   15dce:	f8 94       	cli
   15dd0:	de bf       	out	0x3e, r29	; 62
   15dd2:	0f be       	out	0x3f, r0	; 63
   15dd4:	cd bf       	out	0x3d, r28	; 61
   15dd6:	df 91       	pop	r29
   15dd8:	cf 91       	pop	r28
   15dda:	1f 91       	pop	r17
   15ddc:	0f 91       	pop	r16
   15dde:	ff 90       	pop	r15
   15de0:	ef 90       	pop	r14
   15de2:	df 90       	pop	r13
   15de4:	cf 90       	pop	r12
   15de6:	08 95       	ret

00015de8 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
   15de8:	0f 93       	push	r16
   15dea:	1f 93       	push	r17
   15dec:	cf 93       	push	r28
   15dee:	df 93       	push	r29
   15df0:	8c 01       	movw	r16, r24
   15df2:	ea 01       	movw	r28, r20
   15df4:	fc 01       	movw	r30, r24
   15df6:	84 85       	ldd	r24, Z+12	; 0x0c
   15df8:	88 30       	cpi	r24, 0x08	; 8
   15dfa:	69 f4       	brne	.+26     	; 0x15e16 <EthernetClient::write(unsigned char const*, unsigned int)+0x2e>
_ZN5Print13setWriteErrorEi():
   15dfc:	81 e0       	ldi	r24, 0x01	; 1
   15dfe:	90 e0       	ldi	r25, 0x00	; 0
   15e00:	f8 01       	movw	r30, r16
   15e02:	93 83       	std	Z+3, r25	; 0x03
   15e04:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
   15e06:	d0 e0       	ldi	r29, 0x00	; 0
   15e08:	c0 e0       	ldi	r28, 0x00	; 0
   15e0a:	ce 01       	movw	r24, r28
   15e0c:	df 91       	pop	r29
   15e0e:	cf 91       	pop	r28
   15e10:	1f 91       	pop	r17
   15e12:	0f 91       	pop	r16
   15e14:	08 95       	ret
   15e16:	0e 94 16 b3 	call	0x1662c	; 0x1662c <send(unsigned char, unsigned char const*, unsigned int)>
   15e1a:	89 2b       	or	r24, r25
   15e1c:	79 f3       	breq	.-34     	; 0x15dfc <EthernetClient::write(unsigned char const*, unsigned int)+0x14>
   15e1e:	f5 cf       	rjmp	.-22     	; 0x15e0a <EthernetClient::write(unsigned char const*, unsigned int)+0x22>

00015e20 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
   15e20:	fc 01       	movw	r30, r24
   15e22:	64 85       	ldd	r22, Z+12	; 0x0c
   15e24:	68 30       	cpi	r22, 0x08	; 8
   15e26:	21 f0       	breq	.+8      	; 0x15e30 <EthernetClient::available()+0x10>
   15e28:	8f ea       	ldi	r24, 0xAF	; 175
   15e2a:	92 e1       	ldi	r25, 0x12	; 18
   15e2c:	0c 94 6e b5 	jmp	0x16adc	; 0x16adc <W5500Class::getRXReceivedSize(unsigned char)>
   15e30:	90 e0       	ldi	r25, 0x00	; 0
   15e32:	80 e0       	ldi	r24, 0x00	; 0
   15e34:	08 95       	ret

00015e36 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
   15e36:	cf 93       	push	r28
   15e38:	df 93       	push	r29
   15e3a:	1f 92       	push	r1
   15e3c:	cd b7       	in	r28, 0x3d	; 61
   15e3e:	de b7       	in	r29, 0x3e	; 62
   15e40:	41 e0       	ldi	r20, 0x01	; 1
   15e42:	50 e0       	ldi	r21, 0x00	; 0
   15e44:	be 01       	movw	r22, r28
   15e46:	6f 5f       	subi	r22, 0xFF	; 255
   15e48:	7f 4f       	sbci	r23, 0xFF	; 255
   15e4a:	fc 01       	movw	r30, r24
   15e4c:	84 85       	ldd	r24, Z+12	; 0x0c
   15e4e:	0e 94 67 b3 	call	0x166ce	; 0x166ce <recv(unsigned char, unsigned char*, int)>
   15e52:	18 16       	cp	r1, r24
   15e54:	19 06       	cpc	r1, r25
   15e56:	34 f4       	brge	.+12     	; 0x15e64 <EthernetClient::read()+0x2e>
   15e58:	89 81       	ldd	r24, Y+1	; 0x01
   15e5a:	90 e0       	ldi	r25, 0x00	; 0
   15e5c:	0f 90       	pop	r0
   15e5e:	df 91       	pop	r29
   15e60:	cf 91       	pop	r28
   15e62:	08 95       	ret
   15e64:	8f ef       	ldi	r24, 0xFF	; 255
   15e66:	9f ef       	ldi	r25, 0xFF	; 255
   15e68:	f9 cf       	rjmp	.-14     	; 0x15e5c <EthernetClient::read()+0x26>

00015e6a <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
   15e6a:	fc 01       	movw	r30, r24
   15e6c:	84 85       	ldd	r24, Z+12	; 0x0c
   15e6e:	0c 94 67 b3 	jmp	0x166ce	; 0x166ce <recv(unsigned char, unsigned char*, int)>

00015e72 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
   15e72:	0f 93       	push	r16
   15e74:	1f 93       	push	r17
   15e76:	cf 93       	push	r28
   15e78:	df 93       	push	r29
   15e7a:	1f 92       	push	r1
   15e7c:	cd b7       	in	r28, 0x3d	; 61
   15e7e:	de b7       	in	r29, 0x3e	; 62
   15e80:	8c 01       	movw	r16, r24
   15e82:	dc 01       	movw	r26, r24
   15e84:	ed 91       	ld	r30, X+
   15e86:	fc 91       	ld	r31, X
   15e88:	00 84       	ldd	r0, Z+8	; 0x08
   15e8a:	f1 85       	ldd	r31, Z+9	; 0x09
   15e8c:	e0 2d       	mov	r30, r0
   15e8e:	19 95       	eicall
   15e90:	89 2b       	or	r24, r25
   15e92:	79 f0       	breq	.+30     	; 0x15eb2 <EthernetClient::peek()+0x40>
   15e94:	be 01       	movw	r22, r28
   15e96:	6f 5f       	subi	r22, 0xFF	; 255
   15e98:	7f 4f       	sbci	r23, 0xFF	; 255
   15e9a:	f8 01       	movw	r30, r16
   15e9c:	84 85       	ldd	r24, Z+12	; 0x0c
   15e9e:	0e 94 ad b3 	call	0x1675a	; 0x1675a <peek(unsigned char, unsigned char*)>
   15ea2:	89 81       	ldd	r24, Y+1	; 0x01
   15ea4:	90 e0       	ldi	r25, 0x00	; 0
   15ea6:	0f 90       	pop	r0
   15ea8:	df 91       	pop	r29
   15eaa:	cf 91       	pop	r28
   15eac:	1f 91       	pop	r17
   15eae:	0f 91       	pop	r16
   15eb0:	08 95       	ret
   15eb2:	8f ef       	ldi	r24, 0xFF	; 255
   15eb4:	9f ef       	ldi	r25, 0xFF	; 255
   15eb6:	f7 cf       	rjmp	.-18     	; 0x15ea6 <EthernetClient::peek()+0x34>

00015eb8 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
   15eb8:	fc 01       	movw	r30, r24
   15eba:	84 85       	ldd	r24, Z+12	; 0x0c
   15ebc:	0c 94 bb b3 	jmp	0x16776	; 0x16776 <flush(unsigned char)>

00015ec0 <EthernetClient::EthernetClient()>:
_ZN14EthernetClientC2Ev():
   15ec0:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
   15ec2:	13 82       	std	Z+3, r1	; 0x03
   15ec4:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
   15ec6:	88 ee       	ldi	r24, 0xE8	; 232
   15ec8:	93 e0       	ldi	r25, 0x03	; 3
   15eca:	a0 e0       	ldi	r26, 0x00	; 0
   15ecc:	b0 e0       	ldi	r27, 0x00	; 0
   15ece:	84 83       	std	Z+4, r24	; 0x04
   15ed0:	95 83       	std	Z+5, r25	; 0x05
   15ed2:	a6 83       	std	Z+6, r26	; 0x06
   15ed4:	b7 83       	std	Z+7, r27	; 0x07
_ZN14EthernetClientC2Ev():
   15ed6:	8f e5       	ldi	r24, 0x5F	; 95
   15ed8:	98 e0       	ldi	r25, 0x08	; 8
   15eda:	91 83       	std	Z+1, r25	; 0x01
   15edc:	80 83       	st	Z, r24
   15ede:	88 e0       	ldi	r24, 0x08	; 8
   15ee0:	84 87       	std	Z+12, r24	; 0x0c
   15ee2:	08 95       	ret

00015ee4 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   15ee4:	fc 01       	movw	r30, r24
   15ee6:	64 85       	ldd	r22, Z+12	; 0x0c
   15ee8:	68 30       	cpi	r22, 0x08	; 8
   15eea:	41 f0       	breq	.+16     	; 0x15efc <EthernetClient::status()+0x18>
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
   15eec:	62 95       	swap	r22
   15eee:	66 0f       	add	r22, r22
   15ef0:	60 7e       	andi	r22, 0xE0	; 224
   15ef2:	68 5f       	subi	r22, 0xF8	; 248
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   15ef4:	83 e0       	ldi	r24, 0x03	; 3
   15ef6:	90 e0       	ldi	r25, 0x00	; 0
   15ef8:	0c 94 c7 b4 	jmp	0x1698e	; 0x1698e <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   15efc:	80 e0       	ldi	r24, 0x00	; 0
   15efe:	08 95       	ret

00015f00 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   15f00:	cf 92       	push	r12
   15f02:	df 92       	push	r13
   15f04:	ef 92       	push	r14
   15f06:	ff 92       	push	r15
   15f08:	0f 93       	push	r16
   15f0a:	1f 93       	push	r17
   15f0c:	cf 93       	push	r28
   15f0e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   15f10:	fc 01       	movw	r30, r24
   15f12:	e4 84       	ldd	r14, Z+12	; 0x0c
   15f14:	f8 e0       	ldi	r31, 0x08	; 8
   15f16:	ef 16       	cp	r14, r31
   15f18:	59 f0       	breq	.+22     	; 0x15f30 <EthernetClient::connect(IPAddress, unsigned int)+0x30>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   15f1a:	90 e0       	ldi	r25, 0x00	; 0
   15f1c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   15f1e:	df 91       	pop	r29
   15f20:	cf 91       	pop	r28
   15f22:	1f 91       	pop	r17
   15f24:	0f 91       	pop	r16
   15f26:	ff 90       	pop	r15
   15f28:	ef 90       	pop	r14
   15f2a:	df 90       	pop	r13
   15f2c:	cf 90       	pop	r12
   15f2e:	08 95       	ret
   15f30:	6a 01       	movw	r12, r20
   15f32:	8b 01       	movw	r16, r22
   15f34:	ec 01       	movw	r28, r24
   15f36:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   15f38:	6e 2d       	mov	r22, r14
   15f3a:	83 e0       	ldi	r24, 0x03	; 3
   15f3c:	90 e0       	ldi	r25, 0x00	; 0
   15f3e:	0e 94 c7 b4 	call	0x1698e	; 0x1698e <W5500Class::read(unsigned int, unsigned char)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   15f42:	81 11       	cpse	r24, r1
   15f44:	23 c0       	rjmp	.+70     	; 0x15f8c <EthernetClient::connect(IPAddress, unsigned int)+0x8c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   15f46:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   15f48:	8c 85       	ldd	r24, Y+12	; 0x0c
   15f4a:	88 30       	cpi	r24, 0x08	; 8
   15f4c:	31 f3       	breq	.-52     	; 0x15f1a <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   15f4e:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <EthernetClient::_srcport>
   15f52:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <EthernetClient::_srcport+0x1>
   15f56:	2f 5f       	subi	r18, 0xFF	; 255
   15f58:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   15f5a:	11 f1       	breq	.+68     	; 0x15fa0 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   15f5c:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <EthernetClient::_srcport+0x1>
   15f60:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <EthernetClient::_srcport>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:55
  socket(_sock, SnMR::TCP, _srcport, 0);
   15f64:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <EthernetClient::_srcport>
   15f68:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <EthernetClient::_srcport+0x1>
   15f6c:	20 e0       	ldi	r18, 0x00	; 0
   15f6e:	61 e0       	ldi	r22, 0x01	; 1
   15f70:	0e 94 a3 b2 	call	0x16546	; 0x16546 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   15f74:	b8 01       	movw	r22, r16
   15f76:	6e 5f       	subi	r22, 0xFE	; 254
   15f78:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   15f7a:	a6 01       	movw	r20, r12
   15f7c:	8c 85       	ldd	r24, Y+12	; 0x0c
   15f7e:	0e 94 d9 b2 	call	0x165b2	; 0x165b2 <connect(unsigned char, unsigned char*, unsigned int)>
   15f82:	81 11       	cpse	r24, r1
   15f84:	10 c0       	rjmp	.+32     	; 0x15fa6 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
    _sock = MAX_SOCK_NUM;
   15f86:	88 e0       	ldi	r24, 0x08	; 8
   15f88:	8c 87       	std	Y+12, r24	; 0x0c
   15f8a:	c7 cf       	rjmp	.-114    	; 0x15f1a <EthernetClient::connect(IPAddress, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   15f8c:	8b 7f       	andi	r24, 0xFB	; 251
   15f8e:	88 31       	cpi	r24, 0x18	; 24
   15f90:	d1 f2       	breq	.-76     	; 0x15f46 <EthernetClient::connect(IPAddress, unsigned int)+0x46>
   15f92:	f3 94       	inc	r15
   15f94:	20 e2       	ldi	r18, 0x20	; 32
   15f96:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   15f98:	88 e0       	ldi	r24, 0x08	; 8
   15f9a:	f8 12       	cpse	r15, r24
   15f9c:	cd cf       	rjmp	.-102    	; 0x15f38 <EthernetClient::connect(IPAddress, unsigned int)+0x38>
   15f9e:	d4 cf       	rjmp	.-88     	; 0x15f48 <EthernetClient::connect(IPAddress, unsigned int)+0x48>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   15fa0:	20 e0       	ldi	r18, 0x00	; 0
   15fa2:	34 e0       	ldi	r19, 0x04	; 4
   15fa4:	db cf       	rjmp	.-74     	; 0x15f5c <EthernetClient::connect(IPAddress, unsigned int)+0x5c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   15fa6:	ce 01       	movw	r24, r28
   15fa8:	0e 94 72 af 	call	0x15ee4	; 0x15ee4 <EthernetClient::status()>
   15fac:	87 31       	cpi	r24, 0x17	; 23
   15fae:	51 f0       	breq	.+20     	; 0x15fc4 <EthernetClient::connect(IPAddress, unsigned int)+0xc4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   15fb0:	61 e0       	ldi	r22, 0x01	; 1
   15fb2:	70 e0       	ldi	r23, 0x00	; 0
   15fb4:	80 e0       	ldi	r24, 0x00	; 0
   15fb6:	90 e0       	ldi	r25, 0x00	; 0
   15fb8:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   15fbc:	ce 01       	movw	r24, r28
   15fbe:	0e 94 72 af 	call	0x15ee4	; 0x15ee4 <EthernetClient::status()>
   15fc2:	df cf       	rjmp	.-66     	; 0x15f82 <EthernetClient::connect(IPAddress, unsigned int)+0x82>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   15fc4:	81 e0       	ldi	r24, 0x01	; 1
   15fc6:	90 e0       	ldi	r25, 0x00	; 0
   15fc8:	aa cf       	rjmp	.-172    	; 0x15f1e <EthernetClient::connect(IPAddress, unsigned int)+0x1e>

00015fca <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   15fca:	cf 92       	push	r12
   15fcc:	df 92       	push	r13
   15fce:	ef 92       	push	r14
   15fd0:	ff 92       	push	r15
   15fd2:	cf 93       	push	r28
   15fd4:	df 93       	push	r29
   15fd6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   15fd8:	8c 85       	ldd	r24, Y+12	; 0x0c
   15fda:	88 30       	cpi	r24, 0x08	; 8
   15fdc:	79 f1       	breq	.+94     	; 0x1603c <EthernetClient::stop()+0x72>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:131
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
   15fde:	0e 94 0f b3 	call	0x1661e	; 0x1661e <disconnect(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
  unsigned long start = millis();
   15fe2:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   15fe6:	6b 01       	movw	r12, r22
   15fe8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   15fea:	ce 01       	movw	r24, r28
   15fec:	0e 94 72 af 	call	0x15ee4	; 0x15ee4 <EthernetClient::status()>
   15ff0:	88 23       	and	r24, r24
   15ff2:	91 f0       	breq	.+36     	; 0x16018 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135 (discriminator 1)
   15ff4:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   15ff8:	6c 19       	sub	r22, r12
   15ffa:	7d 09       	sbc	r23, r13
   15ffc:	8e 09       	sbc	r24, r14
   15ffe:	9f 09       	sbc	r25, r15
   16000:	68 3e       	cpi	r22, 0xE8	; 232
   16002:	73 40       	sbci	r23, 0x03	; 3
   16004:	81 05       	cpc	r24, r1
   16006:	91 05       	cpc	r25, r1
   16008:	38 f4       	brcc	.+14     	; 0x16018 <EthernetClient::stop()+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   1600a:	61 e0       	ldi	r22, 0x01	; 1
   1600c:	70 e0       	ldi	r23, 0x00	; 0
   1600e:	80 e0       	ldi	r24, 0x00	; 0
   16010:	90 e0       	ldi	r25, 0x00	; 0
   16012:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135
  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   16016:	e9 cf       	rjmp	.-46     	; 0x15fea <EthernetClient::stop()+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139
    delay(1);

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   16018:	ce 01       	movw	r24, r28
   1601a:	0e 94 72 af 	call	0x15ee4	; 0x15ee4 <EthernetClient::status()>
   1601e:	88 23       	and	r24, r24
   16020:	19 f0       	breq	.+6      	; 0x16028 <EthernetClient::stop()+0x5e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   16022:	8c 85       	ldd	r24, Y+12	; 0x0c
   16024:	0e 94 95 b2 	call	0x1652a	; 0x1652a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   16028:	ec 85       	ldd	r30, Y+12	; 0x0c
   1602a:	f0 e0       	ldi	r31, 0x00	; 0
   1602c:	ee 0f       	add	r30, r30
   1602e:	ff 1f       	adc	r31, r31
   16030:	e4 58       	subi	r30, 0x84	; 132
   16032:	fd 4e       	sbci	r31, 0xED	; 237
   16034:	11 82       	std	Z+1, r1	; 0x01
   16036:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   16038:	88 e0       	ldi	r24, 0x08	; 8
   1603a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1603c:	df 91       	pop	r29
   1603e:	cf 91       	pop	r28
   16040:	ff 90       	pop	r15
   16042:	ef 90       	pop	r14
   16044:	df 90       	pop	r13
   16046:	cf 90       	pop	r12
   16048:	08 95       	ret

0001604a <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

uint8_t EthernetClient::connected() {
   1604a:	cf 93       	push	r28
   1604c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   1604e:	fc 01       	movw	r30, r24
   16050:	24 85       	ldd	r18, Z+12	; 0x0c
   16052:	28 30       	cpi	r18, 0x08	; 8
   16054:	d9 f0       	breq	.+54     	; 0x1608c <EthernetClient::connected()+0x42>
   16056:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   16058:	0e 94 72 af 	call	0x15ee4	; 0x15ee4 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1605c:	84 31       	cpi	r24, 0x14	; 20
   1605e:	89 f0       	breq	.+34     	; 0x16082 <EthernetClient::connected()+0x38>
   16060:	88 23       	and	r24, r24
   16062:	79 f0       	breq	.+30     	; 0x16082 <EthernetClient::connected()+0x38>
   16064:	88 31       	cpi	r24, 0x18	; 24
   16066:	69 f0       	breq	.+26     	; 0x16082 <EthernetClient::connected()+0x38>
   16068:	21 e0       	ldi	r18, 0x01	; 1
   1606a:	8c 31       	cpi	r24, 0x1C	; 28
   1606c:	59 f4       	brne	.+22     	; 0x16084 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1606e:	e8 81       	ld	r30, Y
   16070:	f9 81       	ldd	r31, Y+1	; 0x01
   16072:	00 84       	ldd	r0, Z+8	; 0x08
   16074:	f1 85       	ldd	r31, Z+9	; 0x09
   16076:	e0 2d       	mov	r30, r0
   16078:	ce 01       	movw	r24, r28
   1607a:	19 95       	eicall
   1607c:	21 e0       	ldi	r18, 0x01	; 1
   1607e:	89 2b       	or	r24, r25
   16080:	09 f4       	brne	.+2      	; 0x16084 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   16082:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   16084:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   16086:	df 91       	pop	r29
   16088:	cf 91       	pop	r28
   1608a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   1608c:	80 e0       	ldi	r24, 0x00	; 0
   1608e:	fb cf       	rjmp	.-10     	; 0x16086 <EthernetClient::connected()+0x3c>

00016090 <_GLOBAL__sub_I__ZN14EthernetClient8_srcportE>:
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
}
   16090:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   16092:	00 e0       	ldi	r16, 0x00	; 0
   16094:	20 e0       	ldi	r18, 0x00	; 0
   16096:	40 e0       	ldi	r20, 0x00	; 0
   16098:	60 e0       	ldi	r22, 0x00	; 0
   1609a:	82 e9       	ldi	r24, 0x92	; 146
   1609c:	92 e1       	ldi	r25, 0x12	; 18
   1609e:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetClient8_srcportE():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
   160a2:	0f 91       	pop	r16
   160a4:	08 95       	ret

000160a6 <_GLOBAL__sub_I__ZN14EthernetServerC2Ej>:
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   160a6:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   160a8:	00 e0       	ldi	r16, 0x00	; 0
   160aa:	20 e0       	ldi	r18, 0x00	; 0
   160ac:	40 e0       	ldi	r20, 0x00	; 0
   160ae:	60 e0       	ldi	r22, 0x00	; 0
   160b0:	88 e9       	ldi	r24, 0x98	; 152
   160b2:	92 e1       	ldi	r25, 0x12	; 18
   160b4:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN14EthernetServerC2Ej():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
   160b8:	0f 91       	pop	r16
   160ba:	08 95       	ret

000160bc <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   160bc:	80 e0       	ldi	r24, 0x00	; 0
   160be:	08 95       	ret

000160c0 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   160c0:	dc 01       	movw	r26, r24
   160c2:	ed 91       	ld	r30, X+
   160c4:	fc 91       	ld	r31, X
   160c6:	04 8c       	ldd	r0, Z+28	; 0x1c
   160c8:	f5 8d       	ldd	r31, Z+29	; 0x1d
   160ca:	e0 2d       	mov	r30, r0
   160cc:	19 94       	eijmp

000160ce <EthernetUDP::remoteIP()>:
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   160ce:	2c ed       	ldi	r18, 0xDC	; 220
   160d0:	38 e0       	ldi	r19, 0x08	; 8
   160d2:	fc 01       	movw	r30, r24
   160d4:	31 83       	std	Z+1, r19	; 0x01
   160d6:	20 83       	st	Z, r18
   160d8:	fb 01       	movw	r30, r22
   160da:	41 89       	ldd	r20, Z+17	; 0x11
   160dc:	52 89       	ldd	r21, Z+18	; 0x12
   160de:	63 89       	ldd	r22, Z+19	; 0x13
   160e0:	74 89       	ldd	r23, Z+20	; 0x14
   160e2:	fc 01       	movw	r30, r24
   160e4:	42 83       	std	Z+2, r20	; 0x02
   160e6:	53 83       	std	Z+3, r21	; 0x03
   160e8:	64 83       	std	Z+4, r22	; 0x04
   160ea:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   160ec:	08 95       	ret

000160ee <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   160ee:	fc 01       	movw	r30, r24
   160f0:	85 89       	ldd	r24, Z+21	; 0x15
   160f2:	96 89       	ldd	r25, Z+22	; 0x16
   160f4:	08 95       	ret

000160f6 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   160f6:	fc 01       	movw	r30, r24
   160f8:	81 8d       	ldd	r24, Z+25	; 0x19
   160fa:	92 8d       	ldd	r25, Z+26	; 0x1a
   160fc:	08 95       	ret

000160fe <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   160fe:	cf 93       	push	r28
   16100:	df 93       	push	r29
   16102:	1f 92       	push	r1
   16104:	cd b7       	in	r28, 0x3d	; 61
   16106:	de b7       	in	r29, 0x3e	; 62
   16108:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   1610a:	dc 01       	movw	r26, r24
   1610c:	ed 91       	ld	r30, X+
   1610e:	fc 91       	ld	r31, X
   16110:	02 80       	ldd	r0, Z+2	; 0x02
   16112:	f3 81       	ldd	r31, Z+3	; 0x03
   16114:	e0 2d       	mov	r30, r0
   16116:	41 e0       	ldi	r20, 0x01	; 1
   16118:	50 e0       	ldi	r21, 0x00	; 0
   1611a:	be 01       	movw	r22, r28
   1611c:	6f 5f       	subi	r22, 0xFF	; 255
   1611e:	7f 4f       	sbci	r23, 0xFF	; 255
   16120:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   16122:	0f 90       	pop	r0
   16124:	df 91       	pop	r29
   16126:	cf 91       	pop	r28
   16128:	08 95       	ret

0001612a <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   1612a:	cf 93       	push	r28
   1612c:	df 93       	push	r29
   1612e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16130:	89 8d       	ldd	r24, Y+25	; 0x19
   16132:	9a 8d       	ldd	r25, Y+26	; 0x1a
   16134:	89 2b       	or	r24, r25
   16136:	41 f0       	breq	.+16     	; 0x16148 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   16138:	e8 81       	ld	r30, Y
   1613a:	f9 81       	ldd	r31, Y+1	; 0x01
   1613c:	02 84       	ldd	r0, Z+10	; 0x0a
   1613e:	f3 85       	ldd	r31, Z+11	; 0x0b
   16140:	e0 2d       	mov	r30, r0
   16142:	ce 01       	movw	r24, r28
   16144:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
{
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   16146:	f4 cf       	rjmp	.-24     	; 0x16130 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  {
    read();
  }
}
   16148:	df 91       	pop	r29
   1614a:	cf 91       	pop	r28
   1614c:	08 95       	ret

0001614e <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   1614e:	cf 93       	push	r28
   16150:	df 93       	push	r29
   16152:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   16154:	8c 85       	ldd	r24, Y+12	; 0x0c
   16156:	88 30       	cpi	r24, 0x08	; 8
   16158:	61 f0       	breq	.+24     	; 0x16172 <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   1615a:	0e 94 95 b2 	call	0x1652a	; 0x1652a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   1615e:	ec 85       	ldd	r30, Y+12	; 0x0c
   16160:	f0 e0       	ldi	r31, 0x00	; 0
   16162:	ee 0f       	add	r30, r30
   16164:	ff 1f       	adc	r31, r31
   16166:	e4 58       	subi	r30, 0x84	; 132
   16168:	fd 4e       	sbci	r31, 0xED	; 237
   1616a:	11 82       	std	Z+1, r1	; 0x01
   1616c:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   1616e:	88 e0       	ldi	r24, 0x08	; 8
   16170:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   16172:	df 91       	pop	r29
   16174:	cf 91       	pop	r28
   16176:	08 95       	ret

00016178 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
  _offset = 0;
   16178:	fc 01       	movw	r30, r24
   1617a:	10 8e       	std	Z+24, r1	; 0x18
   1617c:	17 8a       	std	Z+23, r1	; 0x17
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1617e:	6e 5f       	subi	r22, 0xFE	; 254
   16180:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   16182:	84 85       	ldd	r24, Z+12	; 0x0c
   16184:	0c 94 ea b3 	jmp	0x167d4	; 0x167d4 <startUDP(unsigned char, unsigned char*, unsigned int)>

00016188 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
}

int EthernetUDP::endPacket()
{
  return sendUDP(_sock);
   16188:	fc 01       	movw	r30, r24
   1618a:	84 85       	ldd	r24, Z+12	; 0x0c
   1618c:	0c 94 0f b4 	jmp	0x1681e	; 0x1681e <sendUDP(unsigned char)>

00016190 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   16190:	cf 93       	push	r28
   16192:	df 93       	push	r29
   16194:	ec 01       	movw	r28, r24
   16196:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   16198:	8f 89       	ldd	r24, Y+23	; 0x17
   1619a:	98 8d       	ldd	r25, Y+24	; 0x18
   1619c:	ab 01       	movw	r20, r22
   1619e:	bc 01       	movw	r22, r24
   161a0:	8c 85       	ldd	r24, Y+12	; 0x0c
   161a2:	0e 94 bc b3 	call	0x16778	; 0x16778 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   161a6:	2f 89       	ldd	r18, Y+23	; 0x17
   161a8:	38 8d       	ldd	r19, Y+24	; 0x18
   161aa:	28 0f       	add	r18, r24
   161ac:	39 1f       	adc	r19, r25
   161ae:	38 8f       	std	Y+24, r19	; 0x18
   161b0:	2f 8b       	std	Y+23, r18	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   161b2:	df 91       	pop	r29
   161b4:	cf 91       	pop	r28
   161b6:	08 95       	ret

000161b8 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   161b8:	0f 93       	push	r16
   161ba:	1f 93       	push	r17
   161bc:	cf 93       	push	r28
   161be:	df 93       	push	r29
   161c0:	1f 92       	push	r1
   161c2:	cd b7       	in	r28, 0x3d	; 61
   161c4:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   161c6:	fc 01       	movw	r30, r24
   161c8:	21 8d       	ldd	r18, Z+25	; 0x19
   161ca:	32 8d       	ldd	r19, Z+26	; 0x1a
   161cc:	23 2b       	or	r18, r19
   161ce:	41 f4       	brne	.+16     	; 0x161e0 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   161d0:	8f ef       	ldi	r24, 0xFF	; 255
   161d2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   161d4:	0f 90       	pop	r0
   161d6:	df 91       	pop	r29
   161d8:	cf 91       	pop	r28
   161da:	1f 91       	pop	r17
   161dc:	0f 91       	pop	r16
   161de:	08 95       	ret
   161e0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155 (discriminator 1)

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   161e2:	41 e0       	ldi	r20, 0x01	; 1
   161e4:	50 e0       	ldi	r21, 0x00	; 0
   161e6:	be 01       	movw	r22, r28
   161e8:	6f 5f       	subi	r22, 0xFF	; 255
   161ea:	7f 4f       	sbci	r23, 0xFF	; 255
   161ec:	fc 01       	movw	r30, r24
   161ee:	84 85       	ldd	r24, Z+12	; 0x0c
   161f0:	0e 94 67 b3 	call	0x166ce	; 0x166ce <recv(unsigned char, unsigned char*, int)>
   161f4:	18 16       	cp	r1, r24
   161f6:	19 06       	cpc	r1, r25
   161f8:	5c f7       	brge	.-42     	; 0x161d0 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   161fa:	f8 01       	movw	r30, r16
   161fc:	81 8d       	ldd	r24, Z+25	; 0x19
   161fe:	92 8d       	ldd	r25, Z+26	; 0x1a
   16200:	01 97       	sbiw	r24, 0x01	; 1
   16202:	92 8f       	std	Z+26, r25	; 0x1a
   16204:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   16206:	89 81       	ldd	r24, Y+1	; 0x01
   16208:	90 e0       	ldi	r25, 0x00	; 0
   1620a:	e4 cf       	rjmp	.-56     	; 0x161d4 <EthernetUDP::read()+0x1c>

0001620c <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   1620c:	cf 93       	push	r28
   1620e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   16210:	fc 01       	movw	r30, r24
   16212:	21 8d       	ldd	r18, Z+25	; 0x19
   16214:	32 8d       	ldd	r19, Z+26	; 0x1a
   16216:	21 15       	cp	r18, r1
   16218:	31 05       	cpc	r19, r1
   1621a:	29 f4       	brne	.+10     	; 0x16226 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   1621c:	8f ef       	ldi	r24, 0xFF	; 255
   1621e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   16220:	df 91       	pop	r29
   16222:	cf 91       	pop	r28
   16224:	08 95       	ret
   16226:	ec 01       	movw	r28, r24
   16228:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   1622a:	42 17       	cp	r20, r18
   1622c:	53 07       	cpc	r21, r19
   1622e:	08 f0       	brcs	.+2      	; 0x16232 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   16230:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   16232:	0e 94 67 b3 	call	0x166ce	; 0x166ce <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   16236:	18 16       	cp	r1, r24
   16238:	19 06       	cpc	r1, r25
   1623a:	84 f7       	brge	.-32     	; 0x1621c <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   1623c:	29 8d       	ldd	r18, Y+25	; 0x19
   1623e:	3a 8d       	ldd	r19, Y+26	; 0x1a
   16240:	28 1b       	sub	r18, r24
   16242:	39 0b       	sbc	r19, r25
   16244:	3a 8f       	std	Y+26, r19	; 0x1a
   16246:	29 8f       	std	Y+25, r18	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:189
      return got;
   16248:	eb cf       	rjmp	.-42     	; 0x16220 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

0001624a <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   1624a:	cf 93       	push	r28
   1624c:	df 93       	push	r29
   1624e:	1f 92       	push	r1
   16250:	cd b7       	in	r28, 0x3d	; 61
   16252:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   16254:	fc 01       	movw	r30, r24
   16256:	21 8d       	ldd	r18, Z+25	; 0x19
   16258:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   1625a:	8f ef       	ldi	r24, 0xFF	; 255
   1625c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   1625e:	23 2b       	or	r18, r19
   16260:	41 f0       	breq	.+16     	; 0x16272 <EthernetUDP::peek()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:207
    return -1;
  ::peek(_sock, &b);
   16262:	be 01       	movw	r22, r28
   16264:	6f 5f       	subi	r22, 0xFF	; 255
   16266:	7f 4f       	sbci	r23, 0xFF	; 255
   16268:	84 85       	ldd	r24, Z+12	; 0x0c
   1626a:	0e 94 ad b3 	call	0x1675a	; 0x1675a <peek(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
  return b;
   1626e:	89 81       	ldd	r24, Y+1	; 0x01
   16270:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   16272:	0f 90       	pop	r0
   16274:	df 91       	pop	r29
   16276:	cf 91       	pop	r28
   16278:	08 95       	ret

0001627a <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   1627a:	0f 93       	push	r16
   1627c:	1f 93       	push	r17
   1627e:	cf 93       	push	r28
   16280:	df 93       	push	r29
   16282:	00 d0       	rcall	.+0      	; 0x16284 <EthernetUDP::parsePacket()+0xa>
   16284:	00 d0       	rcall	.+0      	; 0x16286 <EthernetUDP::parsePacket()+0xc>
   16286:	1f 92       	push	r1
   16288:	1f 92       	push	r1
   1628a:	cd b7       	in	r28, 0x3d	; 61
   1628c:	de b7       	in	r29, 0x3e	; 62
   1628e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   16290:	dc 01       	movw	r26, r24
   16292:	ed 91       	ld	r30, X+
   16294:	fc 91       	ld	r31, X
   16296:	06 80       	ldd	r0, Z+6	; 0x06
   16298:	f7 81       	ldd	r31, Z+7	; 0x07
   1629a:	e0 2d       	mov	r30, r0
   1629c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   1629e:	f8 01       	movw	r30, r16
   162a0:	64 85       	ldd	r22, Z+12	; 0x0c
   162a2:	8f ea       	ldi	r24, 0xAF	; 175
   162a4:	92 e1       	ldi	r25, 0x12	; 18
   162a6:	0e 94 6e b5 	call	0x16adc	; 0x16adc <W5500Class::getRXReceivedSize(unsigned char)>
   162aa:	89 2b       	or	r24, r25
   162ac:	a1 f1       	breq	.+104    	; 0x16316 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   162ae:	48 e0       	ldi	r20, 0x08	; 8
   162b0:	50 e0       	ldi	r21, 0x00	; 0
   162b2:	be 01       	movw	r22, r28
   162b4:	6f 5f       	subi	r22, 0xFF	; 255
   162b6:	7f 4f       	sbci	r23, 0xFF	; 255
   162b8:	d8 01       	movw	r26, r16
   162ba:	1c 96       	adiw	r26, 0x0c	; 12
   162bc:	8c 91       	ld	r24, X
   162be:	0e 94 67 b3 	call	0x166ce	; 0x166ce <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   162c2:	18 16       	cp	r1, r24
   162c4:	19 06       	cpc	r1, r25
   162c6:	e4 f4       	brge	.+56     	; 0x16300 <EthernetUDP::parsePacket()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:136
    {
      _remoteIP = tmpBuf;
   162c8:	be 01       	movw	r22, r28
   162ca:	6f 5f       	subi	r22, 0xFF	; 255
   162cc:	7f 4f       	sbci	r23, 0xFF	; 255
   162ce:	c8 01       	movw	r24, r16
   162d0:	0f 96       	adiw	r24, 0x0f	; 15
   162d2:	0e 94 c5 cf 	call	0x19f8a	; 0x19f8a <IPAddress::operator=(unsigned char const*)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
      _remotePort = tmpBuf[4];
   162d6:	8d 81       	ldd	r24, Y+5	; 0x05
   162d8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   162da:	98 2f       	mov	r25, r24
   162dc:	88 27       	eor	r24, r24
   162de:	2e 81       	ldd	r18, Y+6	; 0x06
   162e0:	82 0f       	add	r24, r18
   162e2:	91 1d       	adc	r25, r1
   162e4:	f8 01       	movw	r30, r16
   162e6:	96 8b       	std	Z+22, r25	; 0x16
   162e8:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   162ea:	8f 81       	ldd	r24, Y+7	; 0x07
   162ec:	28 2f       	mov	r18, r24
   162ee:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   162f0:	32 2f       	mov	r19, r18
   162f2:	22 27       	eor	r18, r18
   162f4:	88 85       	ldd	r24, Y+8	; 0x08
   162f6:	82 0f       	add	r24, r18
   162f8:	93 2f       	mov	r25, r19
   162fa:	91 1d       	adc	r25, r1
   162fc:	92 8f       	std	Z+26, r25	; 0x1a
   162fe:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   16300:	28 96       	adiw	r28, 0x08	; 8
   16302:	0f b6       	in	r0, 0x3f	; 63
   16304:	f8 94       	cli
   16306:	de bf       	out	0x3e, r29	; 62
   16308:	0f be       	out	0x3f, r0	; 63
   1630a:	cd bf       	out	0x3d, r28	; 61
   1630c:	df 91       	pop	r29
   1630e:	cf 91       	pop	r28
   16310:	1f 91       	pop	r17
   16312:	0f 91       	pop	r16
   16314:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   16316:	90 e0       	ldi	r25, 0x00	; 0
   16318:	80 e0       	ldi	r24, 0x00	; 0
   1631a:	f2 cf       	rjmp	.-28     	; 0x16300 <EthernetUDP::parsePacket()+0x86>

0001631c <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   1631c:	ef 92       	push	r14
   1631e:	ff 92       	push	r15
   16320:	0f 93       	push	r16
   16322:	1f 93       	push	r17
   16324:	cf 93       	push	r28
   16326:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   16328:	fc 01       	movw	r30, r24
   1632a:	e4 84       	ldd	r14, Z+12	; 0x0c
   1632c:	f8 e0       	ldi	r31, 0x08	; 8
   1632e:	ef 16       	cp	r14, r31
   16330:	41 f0       	breq	.+16     	; 0x16342 <EthernetUDP::begin(unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   16332:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   16334:	df 91       	pop	r29
   16336:	cf 91       	pop	r28
   16338:	1f 91       	pop	r17
   1633a:	0f 91       	pop	r16
   1633c:	ff 90       	pop	r15
   1633e:	ef 90       	pop	r14
   16340:	08 95       	ret
   16342:	8b 01       	movw	r16, r22
   16344:	ec 01       	movw	r28, r24
   16346:	f1 2c       	mov	r15, r1
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
   16348:	6e 2d       	mov	r22, r14
   1634a:	83 e0       	ldi	r24, 0x03	; 3
   1634c:	90 e0       	ldi	r25, 0x00	; 0
   1634e:	0e 94 c7 b4 	call	0x1698e	; 0x1698e <W5500Class::read(unsigned int, unsigned char)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   16352:	81 11       	cpse	r24, r1
   16354:	0f c0       	rjmp	.+30     	; 0x16374 <EthernetUDP::begin(unsigned int)+0x58>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   16356:	fc 86       	std	Y+12, r15	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   16358:	8c 85       	ldd	r24, Y+12	; 0x0c
   1635a:	88 30       	cpi	r24, 0x08	; 8
   1635c:	51 f3       	breq	.-44     	; 0x16332 <EthernetUDP::begin(unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   1635e:	1e 87       	std	Y+14, r17	; 0x0e
   16360:	0d 87       	std	Y+13, r16	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   16362:	1a 8e       	std	Y+26, r1	; 0x1a
   16364:	19 8e       	std	Y+25, r1	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:60
  socket(_sock, SnMR::UDP, _port, 0);
   16366:	20 e0       	ldi	r18, 0x00	; 0
   16368:	a8 01       	movw	r20, r16
   1636a:	62 e0       	ldi	r22, 0x02	; 2
   1636c:	0e 94 a3 b2 	call	0x16546	; 0x16546 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62

  return 1;
   16370:	81 e0       	ldi	r24, 0x01	; 1
   16372:	e0 cf       	rjmp	.-64     	; 0x16334 <EthernetUDP::begin(unsigned int)+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   16374:	88 31       	cpi	r24, 0x18	; 24
   16376:	79 f3       	breq	.-34     	; 0x16356 <EthernetUDP::begin(unsigned int)+0x3a>
   16378:	f3 94       	inc	r15
   1637a:	20 e2       	ldi	r18, 0x20	; 32
   1637c:	e2 0e       	add	r14, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1637e:	88 e0       	ldi	r24, 0x08	; 8
   16380:	f8 12       	cpse	r15, r24
   16382:	e2 cf       	rjmp	.-60     	; 0x16348 <EthernetUDP::begin(unsigned int)+0x2c>
   16384:	e9 cf       	rjmp	.-46     	; 0x16358 <EthernetUDP::begin(unsigned int)+0x3c>

00016386 <EthernetUDP::EthernetUDP()>:
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   16386:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   16388:	13 82       	std	Z+3, r1	; 0x03
   1638a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1638c:	88 ee       	ldi	r24, 0xE8	; 232
   1638e:	93 e0       	ldi	r25, 0x03	; 3
   16390:	a0 e0       	ldi	r26, 0x00	; 0
   16392:	b0 e0       	ldi	r27, 0x00	; 0
   16394:	84 83       	std	Z+4, r24	; 0x04
   16396:	95 83       	std	Z+5, r25	; 0x05
   16398:	a6 83       	std	Z+6, r26	; 0x06
   1639a:	b7 83       	std	Z+7, r27	; 0x07
_ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
   1639c:	81 e8       	ldi	r24, 0x81	; 129
   1639e:	98 e0       	ldi	r25, 0x08	; 8
   163a0:	91 83       	std	Z+1, r25	; 0x01
   163a2:	80 83       	st	Z, r24
   163a4:	88 e0       	ldi	r24, 0x08	; 8
   163a6:	84 87       	std	Z+12, r24	; 0x0c
   163a8:	cf 01       	movw	r24, r30
   163aa:	0f 96       	adiw	r24, 0x0f	; 15
   163ac:	0c 94 a3 cf 	jmp	0x19f46	; 0x19f46 <IPAddress::IPAddress()>

000163b0 <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   163b0:	cf 92       	push	r12
   163b2:	df 92       	push	r13
   163b4:	ef 92       	push	r14
   163b6:	ff 92       	push	r15
   163b8:	0f 93       	push	r16
   163ba:	1f 93       	push	r17
   163bc:	cf 93       	push	r28
   163be:	df 93       	push	r29
   163c0:	cd b7       	in	r28, 0x3d	; 61
   163c2:	de b7       	in	r29, 0x3e	; 62
   163c4:	af 97       	sbiw	r28, 0x2f	; 47
   163c6:	0f b6       	in	r0, 0x3f	; 63
   163c8:	f8 94       	cli
   163ca:	de bf       	out	0x3e, r29	; 62
   163cc:	0f be       	out	0x3f, r0	; 63
   163ce:	cd bf       	out	0x3d, r28	; 61
   163d0:	8c 01       	movw	r16, r24
   163d2:	6b 01       	movw	r12, r22
   163d4:	7a 01       	movw	r14, r20
_ZN9DNSClientC4Ev():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.h:10
#ifndef DNSClient_h
#define DNSClient_h

#include <EthernetUdp2.h>

class DNSClient
   163d6:	ce 01       	movw	r24, r28
   163d8:	01 96       	adiw	r24, 0x01	; 1
   163da:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress()>
   163de:	ce 01       	movw	r24, r28
   163e0:	09 96       	adiw	r24, 0x09	; 9
   163e2:	0e 94 c3 b1 	call	0x16386	; 0x16386 <EthernetUDP::EthernetUDP()>
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:88
  // Look up the host first
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;
   163e6:	ce 01       	movw	r24, r28
   163e8:	8a 96       	adiw	r24, 0x2a	; 42
   163ea:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:90

  dns.begin(Ethernet.dnsServerIP());
   163ee:	6f e6       	ldi	r22, 0x6F	; 111
   163f0:	72 e1       	ldi	r23, 0x12	; 18
   163f2:	ce 01       	movw	r24, r28
   163f4:	84 96       	adiw	r24, 0x24	; 36
   163f6:	0e 94 3b ae 	call	0x15c76	; 0x15c76 <EthernetClass::dnsServerIP()>
   163fa:	be 01       	movw	r22, r28
   163fc:	6c 5d       	subi	r22, 0xDC	; 220
   163fe:	7f 4f       	sbci	r23, 0xFF	; 255
   16400:	ce 01       	movw	r24, r28
   16402:	01 96       	adiw	r24, 0x01	; 1
   16404:	0e 94 de aa 	call	0x155bc	; 0x155bc <DNSClient::begin(IPAddress const&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  ret = dns.getHostByName(host, remote_addr);
   16408:	ae 01       	movw	r20, r28
   1640a:	46 5d       	subi	r20, 0xD6	; 214
   1640c:	5f 4f       	sbci	r21, 0xFF	; 255
   1640e:	b6 01       	movw	r22, r12
   16410:	ce 01       	movw	r24, r28
   16412:	01 96       	adiw	r24, 0x01	; 1
   16414:	0e 94 54 ad 	call	0x15aa8	; 0x15aa8 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   16418:	81 30       	cpi	r24, 0x01	; 1
   1641a:	91 05       	cpc	r25, r1
   1641c:	c1 f4       	brne	.+48     	; 0x1644e <EthernetUDP::beginPacket(char const*, unsigned int)+0x9e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   1641e:	d8 01       	movw	r26, r16
   16420:	ed 91       	ld	r30, X+
   16422:	fc 91       	ld	r31, X
   16424:	04 88       	ldd	r0, Z+20	; 0x14
   16426:	f5 89       	ldd	r31, Z+21	; 0x15
   16428:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1642a:	8c ed       	ldi	r24, 0xDC	; 220
   1642c:	98 e0       	ldi	r25, 0x08	; 8
   1642e:	9d a3       	std	Y+37, r25	; 0x25
   16430:	8c a3       	std	Y+36, r24	; 0x24
   16432:	8c a5       	ldd	r24, Y+44	; 0x2c
   16434:	9d a5       	ldd	r25, Y+45	; 0x2d
   16436:	ae a5       	ldd	r26, Y+46	; 0x2e
   16438:	bf a5       	ldd	r27, Y+47	; 0x2f
   1643a:	8e a3       	std	Y+38, r24	; 0x26
   1643c:	9f a3       	std	Y+39, r25	; 0x27
   1643e:	a8 a7       	std	Y+40, r26	; 0x28
   16440:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   16442:	a7 01       	movw	r20, r14
   16444:	be 01       	movw	r22, r28
   16446:	6c 5d       	subi	r22, 0xDC	; 220
   16448:	7f 4f       	sbci	r23, 0xFF	; 255
   1644a:	c8 01       	movw	r24, r16
   1644c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   1644e:	af 96       	adiw	r28, 0x2f	; 47
   16450:	0f b6       	in	r0, 0x3f	; 63
   16452:	f8 94       	cli
   16454:	de bf       	out	0x3e, r29	; 62
   16456:	0f be       	out	0x3f, r0	; 63
   16458:	cd bf       	out	0x3d, r28	; 61
   1645a:	df 91       	pop	r29
   1645c:	cf 91       	pop	r28
   1645e:	1f 91       	pop	r17
   16460:	0f 91       	pop	r16
   16462:	ff 90       	pop	r15
   16464:	ef 90       	pop	r14
   16466:	df 90       	pop	r13
   16468:	cf 90       	pop	r12
   1646a:	08 95       	ret

0001646c <_GLOBAL__sub_I__ZN11EthernetUDPC2Ev>:
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221

  while (_remaining)
  {
    read();
  }
}
   1646c:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
   1646e:	00 e0       	ldi	r16, 0x00	; 0
   16470:	20 e0       	ldi	r18, 0x00	; 0
   16472:	40 e0       	ldi	r20, 0x00	; 0
   16474:	60 e0       	ldi	r22, 0x00	; 0
   16476:	8e e9       	ldi	r24, 0x9E	; 158
   16478:	92 e1       	ldi	r25, 0x12	; 18
   1647a:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN11EthernetUDPC2Ev():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
   1647e:	0f 91       	pop	r16
   16480:	08 95       	ret

00016482 <_GLOBAL__sub_I__ZN7TwitterC2EPKc>:
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91

int Twitter::wait(Print *debug)
{
	while (checkStatus(debug));
	return statusCode;
}
   16482:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   16484:	00 e0       	ldi	r16, 0x00	; 0
   16486:	20 e0       	ldi	r18, 0x00	; 0
   16488:	40 e0       	ldi	r20, 0x00	; 0
   1648a:	60 e0       	ldi	r22, 0x00	; 0
   1648c:	84 ea       	ldi	r24, 0xA4	; 164
   1648e:	92 e1       	ldi	r25, 0x12	; 18
   16490:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN7TwitterC2EPKc():
/home/saric/Arduino/libraries/Ethernet2/src/Twitter.cpp:91
   16494:	0f 91       	pop	r16
   16496:	08 95       	ret

00016498 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>:
_ZN10W5500Class11writeSnDIPREhPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:355
      return 0;
    }
  }

  w5500.writeSnIR(s, SnIR::SEND_OK);
  return ret;
   16498:	ab 01       	movw	r20, r22
_ZN10W5500Class7writeSnEhjPhj():
   1649a:	82 95       	swap	r24
   1649c:	88 0f       	add	r24, r24
   1649e:	80 7e       	andi	r24, 0xE0	; 224
   164a0:	6c e0       	ldi	r22, 0x0C	; 12
   164a2:	68 0f       	add	r22, r24
   164a4:	24 e0       	ldi	r18, 0x04	; 4
   164a6:	30 e0       	ldi	r19, 0x00	; 0
   164a8:	8c e0       	ldi	r24, 0x0C	; 12
   164aa:	90 e0       	ldi	r25, 0x00	; 0
   164ac:	0c 94 93 b4 	jmp	0x16926	; 0x16926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>

000164b0 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
   164b0:	9b 01       	movw	r18, r22
   164b2:	82 95       	swap	r24
   164b4:	88 0f       	add	r24, r24
   164b6:	80 7e       	andi	r24, 0xE0	; 224
   164b8:	68 e0       	ldi	r22, 0x08	; 8
   164ba:	68 0f       	add	r22, r24
   164bc:	c9 01       	movw	r24, r18
   164be:	0c 94 c7 b4 	jmp	0x1698e	; 0x1698e <W5500Class::read(unsigned int, unsigned char)>

000164c2 <W5500Class::readSnIR(unsigned char)>:
_ZN10W5500Class8readSnIREh():
   164c2:	62 e0       	ldi	r22, 0x02	; 2
   164c4:	70 e0       	ldi	r23, 0x00	; 0
   164c6:	0c 94 58 b2 	jmp	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>

000164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
   164ca:	9b 01       	movw	r18, r22
   164cc:	82 95       	swap	r24
   164ce:	88 0f       	add	r24, r24
   164d0:	80 7e       	andi	r24, 0xE0	; 224
   164d2:	6c e0       	ldi	r22, 0x0C	; 12
   164d4:	68 0f       	add	r22, r24
   164d6:	c9 01       	movw	r24, r18
   164d8:	0c 94 6d b4 	jmp	0x168da	; 0x168da <W5500Class::write(unsigned int, unsigned char, unsigned char)>

000164dc <W5500Class::writeSnPORT(unsigned char, unsigned int)>:
_ZN10W5500Class11writeSnPORTEhj():
   164dc:	cf 93       	push	r28
   164de:	df 93       	push	r29
   164e0:	c8 2f       	mov	r28, r24
   164e2:	d6 2f       	mov	r29, r22
   164e4:	47 2f       	mov	r20, r23
   164e6:	64 e0       	ldi	r22, 0x04	; 4
   164e8:	70 e0       	ldi	r23, 0x00	; 0
   164ea:	0e 94 65 b2 	call	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   164ee:	4d 2f       	mov	r20, r29
   164f0:	65 e0       	ldi	r22, 0x05	; 5
   164f2:	70 e0       	ldi	r23, 0x00	; 0
   164f4:	8c 2f       	mov	r24, r28
   164f6:	df 91       	pop	r29
   164f8:	cf 91       	pop	r28
   164fa:	0c 94 65 b2 	jmp	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000164fe <W5500Class::writeSnIR(unsigned char, unsigned char)>:
_ZN10W5500Class9writeSnIREhh():
   164fe:	46 2f       	mov	r20, r22
   16500:	62 e0       	ldi	r22, 0x02	; 2
   16502:	70 e0       	ldi	r23, 0x00	; 0
   16504:	0c 94 65 b2 	jmp	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016508 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>:
_ZN10W5500Class12writeSnDPORTEhj():
   16508:	cf 93       	push	r28
   1650a:	df 93       	push	r29
   1650c:	c8 2f       	mov	r28, r24
   1650e:	d6 2f       	mov	r29, r22
   16510:	47 2f       	mov	r20, r23
   16512:	60 e1       	ldi	r22, 0x10	; 16
   16514:	70 e0       	ldi	r23, 0x00	; 0
   16516:	0e 94 65 b2 	call	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1651a:	4d 2f       	mov	r20, r29
   1651c:	61 e1       	ldi	r22, 0x11	; 17
   1651e:	70 e0       	ldi	r23, 0x00	; 0
   16520:	8c 2f       	mov	r24, r28
   16522:	df 91       	pop	r29
   16524:	cf 91       	pop	r28
   16526:	0c 94 65 b2 	jmp	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001652a <close(unsigned char)>:
_Z5closeh():
   1652a:	cf 93       	push	r28
   1652c:	c8 2f       	mov	r28, r24
   1652e:	40 e1       	ldi	r20, 0x10	; 16
   16530:	50 e0       	ldi	r21, 0x00	; 0
   16532:	68 2f       	mov	r22, r24
   16534:	8f ea       	ldi	r24, 0xAF	; 175
   16536:	92 e1       	ldi	r25, 0x12	; 18
   16538:	0e 94 75 b6 	call	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1653c:	6f ef       	ldi	r22, 0xFF	; 255
   1653e:	8c 2f       	mov	r24, r28
   16540:	cf 91       	pop	r28
   16542:	0c 94 7f b2 	jmp	0x164fe	; 0x164fe <W5500Class::writeSnIR(unsigned char, unsigned char)>

00016546 <socket(unsigned char, unsigned char, unsigned int, unsigned char)>:
_Z6sockethhjh():
   16546:	ff 92       	push	r15
   16548:	0f 93       	push	r16
   1654a:	1f 93       	push	r17
   1654c:	cf 93       	push	r28
   1654e:	df 93       	push	r29
   16550:	9f ef       	ldi	r25, 0xFF	; 255
   16552:	96 0f       	add	r25, r22
   16554:	95 30       	cpi	r25, 0x05	; 5
   16556:	58 f5       	brcc	.+86     	; 0x165ae <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x68>
   16558:	f2 2e       	mov	r15, r18
   1655a:	8a 01       	movw	r16, r20
   1655c:	d6 2f       	mov	r29, r22
   1655e:	c8 2f       	mov	r28, r24
   16560:	0e 94 95 b2 	call	0x1652a	; 0x1652a <close(unsigned char)>
   16564:	4d 2f       	mov	r20, r29
   16566:	4f 29       	or	r20, r15
_ZN10W5500Class9writeSnMREhh():
   16568:	70 e0       	ldi	r23, 0x00	; 0
   1656a:	60 e0       	ldi	r22, 0x00	; 0
   1656c:	8c 2f       	mov	r24, r28
   1656e:	0e 94 65 b2 	call	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh():
   16572:	b8 01       	movw	r22, r16
   16574:	01 2b       	or	r16, r17
   16576:	51 f4       	brne	.+20     	; 0x1658c <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x46>
   16578:	60 91 aa 12 	lds	r22, 0x12AA	; 0x8012aa <local_port>
   1657c:	70 91 ab 12 	lds	r23, 0x12AB	; 0x8012ab <local_port+0x1>
   16580:	6f 5f       	subi	r22, 0xFF	; 255
   16582:	7f 4f       	sbci	r23, 0xFF	; 255
   16584:	70 93 ab 12 	sts	0x12AB, r23	; 0x8012ab <local_port+0x1>
   16588:	60 93 aa 12 	sts	0x12AA, r22	; 0x8012aa <local_port>
   1658c:	8c 2f       	mov	r24, r28
   1658e:	0e 94 6e b2 	call	0x164dc	; 0x164dc <W5500Class::writeSnPORT(unsigned char, unsigned int)>
   16592:	41 e0       	ldi	r20, 0x01	; 1
   16594:	50 e0       	ldi	r21, 0x00	; 0
   16596:	6c 2f       	mov	r22, r28
   16598:	8f ea       	ldi	r24, 0xAF	; 175
   1659a:	92 e1       	ldi	r25, 0x12	; 18
   1659c:	0e 94 75 b6 	call	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>
   165a0:	81 e0       	ldi	r24, 0x01	; 1
   165a2:	df 91       	pop	r29
   165a4:	cf 91       	pop	r28
   165a6:	1f 91       	pop	r17
   165a8:	0f 91       	pop	r16
   165aa:	ff 90       	pop	r15
   165ac:	08 95       	ret
   165ae:	80 e0       	ldi	r24, 0x00	; 0
   165b0:	f8 cf       	rjmp	.-16     	; 0x165a2 <socket(unsigned char, unsigned char, unsigned int, unsigned char)+0x5c>

000165b2 <connect(unsigned char, unsigned char*, unsigned int)>:
_Z7connecthPhj():
   165b2:	0f 93       	push	r16
   165b4:	1f 93       	push	r17
   165b6:	cf 93       	push	r28
   165b8:	fb 01       	movw	r30, r22
   165ba:	90 81       	ld	r25, Z
   165bc:	9f 3f       	cpi	r25, 0xFF	; 255
   165be:	59 f4       	brne	.+22     	; 0x165d6 <connect(unsigned char, unsigned char*, unsigned int)+0x24>
   165c0:	91 81       	ldd	r25, Z+1	; 0x01
   165c2:	9f 3f       	cpi	r25, 0xFF	; 255
   165c4:	99 f4       	brne	.+38     	; 0x165ec <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   165c6:	92 81       	ldd	r25, Z+2	; 0x02
   165c8:	9f 3f       	cpi	r25, 0xFF	; 255
   165ca:	81 f4       	brne	.+32     	; 0x165ec <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   165cc:	93 81       	ldd	r25, Z+3	; 0x03
   165ce:	9f 3f       	cpi	r25, 0xFF	; 255
   165d0:	69 f4       	brne	.+26     	; 0x165ec <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   165d2:	90 e0       	ldi	r25, 0x00	; 0
   165d4:	1f c0       	rjmp	.+62     	; 0x16614 <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   165d6:	91 11       	cpse	r25, r1
   165d8:	09 c0       	rjmp	.+18     	; 0x165ec <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   165da:	91 81       	ldd	r25, Z+1	; 0x01
   165dc:	91 11       	cpse	r25, r1
   165de:	06 c0       	rjmp	.+12     	; 0x165ec <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   165e0:	92 81       	ldd	r25, Z+2	; 0x02
   165e2:	91 11       	cpse	r25, r1
   165e4:	03 c0       	rjmp	.+6      	; 0x165ec <connect(unsigned char, unsigned char*, unsigned int)+0x3a>
   165e6:	93 81       	ldd	r25, Z+3	; 0x03
   165e8:	99 23       	and	r25, r25
   165ea:	a1 f0       	breq	.+40     	; 0x16614 <connect(unsigned char, unsigned char*, unsigned int)+0x62>
   165ec:	41 15       	cp	r20, r1
   165ee:	51 05       	cpc	r21, r1
   165f0:	81 f3       	breq	.-32     	; 0x165d2 <connect(unsigned char, unsigned char*, unsigned int)+0x20>
   165f2:	8a 01       	movw	r16, r20
   165f4:	bf 01       	movw	r22, r30
   165f6:	c8 2f       	mov	r28, r24
   165f8:	0e 94 4c b2 	call	0x16498	; 0x16498 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
   165fc:	b8 01       	movw	r22, r16
   165fe:	8c 2f       	mov	r24, r28
   16600:	0e 94 84 b2 	call	0x16508	; 0x16508 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
   16604:	44 e0       	ldi	r20, 0x04	; 4
   16606:	50 e0       	ldi	r21, 0x00	; 0
   16608:	6c 2f       	mov	r22, r28
   1660a:	8f ea       	ldi	r24, 0xAF	; 175
   1660c:	92 e1       	ldi	r25, 0x12	; 18
   1660e:	0e 94 75 b6 	call	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>
   16612:	91 e0       	ldi	r25, 0x01	; 1
   16614:	89 2f       	mov	r24, r25
   16616:	cf 91       	pop	r28
   16618:	1f 91       	pop	r17
   1661a:	0f 91       	pop	r16
   1661c:	08 95       	ret

0001661e <disconnect(unsigned char)>:
_Z10disconnecth():
   1661e:	48 e0       	ldi	r20, 0x08	; 8
   16620:	50 e0       	ldi	r21, 0x00	; 0
   16622:	68 2f       	mov	r22, r24
   16624:	8f ea       	ldi	r24, 0xAF	; 175
   16626:	92 e1       	ldi	r25, 0x12	; 18
   16628:	0c 94 75 b6 	jmp	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>

0001662c <send(unsigned char, unsigned char const*, unsigned int)>:
_Z4sendhPKhj():
   1662c:	cf 92       	push	r12
   1662e:	df 92       	push	r13
   16630:	ef 92       	push	r14
   16632:	ff 92       	push	r15
   16634:	0f 93       	push	r16
   16636:	1f 93       	push	r17
   16638:	cf 93       	push	r28
   1663a:	c8 2f       	mov	r28, r24
   1663c:	7b 01       	movw	r14, r22
   1663e:	8a 01       	movw	r16, r20
   16640:	41 30       	cpi	r20, 0x01	; 1
   16642:	58 40       	sbci	r21, 0x08	; 8
   16644:	10 f0       	brcs	.+4      	; 0x1664a <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   16646:	00 e0       	ldi	r16, 0x00	; 0
   16648:	18 e0       	ldi	r17, 0x08	; 8
   1664a:	6c 2f       	mov	r22, r28
   1664c:	8f ea       	ldi	r24, 0xAF	; 175
   1664e:	92 e1       	ldi	r25, 0x12	; 18
   16650:	0e 94 3a b5 	call	0x16a74	; 0x16a74 <W5500Class::getTXFreeSize(unsigned char)>
   16654:	6c 01       	movw	r12, r24
_ZN10W5500Class8readSnSREh():
   16656:	63 e0       	ldi	r22, 0x03	; 3
   16658:	70 e0       	ldi	r23, 0x00	; 0
   1665a:	8c 2f       	mov	r24, r28
   1665c:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   16660:	87 31       	cpi	r24, 0x17	; 23
   16662:	11 f0       	breq	.+4      	; 0x16668 <send(unsigned char, unsigned char const*, unsigned int)+0x3c>
   16664:	8c 31       	cpi	r24, 0x1C	; 28
   16666:	59 f5       	brne	.+86     	; 0x166be <send(unsigned char, unsigned char const*, unsigned int)+0x92>
   16668:	c0 16       	cp	r12, r16
   1666a:	d1 06       	cpc	r13, r17
   1666c:	70 f3       	brcs	.-36     	; 0x1664a <send(unsigned char, unsigned char const*, unsigned int)+0x1e>
   1666e:	98 01       	movw	r18, r16
   16670:	a7 01       	movw	r20, r14
   16672:	6c 2f       	mov	r22, r28
   16674:	8f ea       	ldi	r24, 0xAF	; 175
   16676:	92 e1       	ldi	r25, 0x12	; 18
   16678:	0e 94 ca b5 	call	0x16b94	; 0x16b94 <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>
   1667c:	40 e2       	ldi	r20, 0x20	; 32
   1667e:	50 e0       	ldi	r21, 0x00	; 0
   16680:	6c 2f       	mov	r22, r28
   16682:	8f ea       	ldi	r24, 0xAF	; 175
   16684:	92 e1       	ldi	r25, 0x12	; 18
   16686:	0e 94 75 b6 	call	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>
   1668a:	8c 2f       	mov	r24, r28
   1668c:	0e 94 61 b2 	call	0x164c2	; 0x164c2 <W5500Class::readSnIR(unsigned char)>
   16690:	84 fd       	sbrc	r24, 4
   16692:	18 c0       	rjmp	.+48     	; 0x166c4 <send(unsigned char, unsigned char const*, unsigned int)+0x98>
_ZN10W5500Class8readSnSREh():
   16694:	63 e0       	ldi	r22, 0x03	; 3
   16696:	70 e0       	ldi	r23, 0x00	; 0
   16698:	8c 2f       	mov	r24, r28
   1669a:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4sendhPKhj():
   1669e:	81 11       	cpse	r24, r1
   166a0:	f4 cf       	rjmp	.-24     	; 0x1668a <send(unsigned char, unsigned char const*, unsigned int)+0x5e>
   166a2:	8c 2f       	mov	r24, r28
   166a4:	0e 94 95 b2 	call	0x1652a	; 0x1652a <close(unsigned char)>
   166a8:	10 e0       	ldi	r17, 0x00	; 0
   166aa:	00 e0       	ldi	r16, 0x00	; 0
   166ac:	c8 01       	movw	r24, r16
   166ae:	cf 91       	pop	r28
   166b0:	1f 91       	pop	r17
   166b2:	0f 91       	pop	r16
   166b4:	ff 90       	pop	r15
   166b6:	ef 90       	pop	r14
   166b8:	df 90       	pop	r13
   166ba:	cf 90       	pop	r12
   166bc:	08 95       	ret
   166be:	10 e0       	ldi	r17, 0x00	; 0
   166c0:	00 e0       	ldi	r16, 0x00	; 0
   166c2:	d5 cf       	rjmp	.-86     	; 0x1666e <send(unsigned char, unsigned char const*, unsigned int)+0x42>
   166c4:	60 e1       	ldi	r22, 0x10	; 16
   166c6:	8c 2f       	mov	r24, r28
   166c8:	0e 94 7f b2 	call	0x164fe	; 0x164fe <W5500Class::writeSnIR(unsigned char, unsigned char)>
   166cc:	ef cf       	rjmp	.-34     	; 0x166ac <send(unsigned char, unsigned char const*, unsigned int)+0x80>

000166ce <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
   166ce:	cf 92       	push	r12
   166d0:	df 92       	push	r13
   166d2:	ef 92       	push	r14
   166d4:	ff 92       	push	r15
   166d6:	0f 93       	push	r16
   166d8:	1f 93       	push	r17
   166da:	cf 93       	push	r28
   166dc:	df 93       	push	r29
   166de:	18 2f       	mov	r17, r24
   166e0:	6b 01       	movw	r12, r22
   166e2:	7a 01       	movw	r14, r20
   166e4:	68 2f       	mov	r22, r24
   166e6:	8f ea       	ldi	r24, 0xAF	; 175
   166e8:	92 e1       	ldi	r25, 0x12	; 18
   166ea:	0e 94 6e b5 	call	0x16adc	; 0x16adc <W5500Class::getRXReceivedSize(unsigned char)>
   166ee:	ec 01       	movw	r28, r24
   166f0:	00 97       	sbiw	r24, 0x00	; 0
   166f2:	e1 f4       	brne	.+56     	; 0x1672c <recv(unsigned char, unsigned char*, int)+0x5e>
_ZN10W5500Class8readSnSREh():
   166f4:	63 e0       	ldi	r22, 0x03	; 3
   166f6:	70 e0       	ldi	r23, 0x00	; 0
   166f8:	81 2f       	mov	r24, r17
   166fa:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
   166fe:	84 31       	cpi	r24, 0x14	; 20
   16700:	59 f0       	breq	.+22     	; 0x16718 <recv(unsigned char, unsigned char*, int)+0x4a>
   16702:	88 23       	and	r24, r24
   16704:	49 f0       	breq	.+18     	; 0x16718 <recv(unsigned char, unsigned char*, int)+0x4a>
   16706:	c1 e0       	ldi	r28, 0x01	; 1
   16708:	d0 e0       	ldi	r29, 0x00	; 0
   1670a:	8c 31       	cpi	r24, 0x1C	; 28
   1670c:	11 f4       	brne	.+4      	; 0x16712 <recv(unsigned char, unsigned char*, int)+0x44>
   1670e:	d0 e0       	ldi	r29, 0x00	; 0
   16710:	c0 e0       	ldi	r28, 0x00	; 0
   16712:	d1 95       	neg	r29
   16714:	c1 95       	neg	r28
   16716:	d1 09       	sbc	r29, r1
   16718:	ce 01       	movw	r24, r28
   1671a:	df 91       	pop	r29
   1671c:	cf 91       	pop	r28
   1671e:	1f 91       	pop	r17
   16720:	0f 91       	pop	r16
   16722:	ff 90       	pop	r15
   16724:	ef 90       	pop	r14
   16726:	df 90       	pop	r13
   16728:	cf 90       	pop	r12
   1672a:	08 95       	ret
   1672c:	e8 16       	cp	r14, r24
   1672e:	f9 06       	cpc	r15, r25
   16730:	0c f4       	brge	.+2      	; 0x16734 <recv(unsigned char, unsigned char*, int)+0x66>
   16732:	e7 01       	movw	r28, r14
   16734:	1c 16       	cp	r1, r28
   16736:	1d 06       	cpc	r1, r29
   16738:	7c f7       	brge	.-34     	; 0x16718 <recv(unsigned char, unsigned char*, int)+0x4a>
   1673a:	00 e0       	ldi	r16, 0x00	; 0
   1673c:	9e 01       	movw	r18, r28
   1673e:	a6 01       	movw	r20, r12
   16740:	61 2f       	mov	r22, r17
   16742:	8f ea       	ldi	r24, 0xAF	; 175
   16744:	92 e1       	ldi	r25, 0x12	; 18
   16746:	0e 94 24 b6 	call	0x16c48	; 0x16c48 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   1674a:	40 e4       	ldi	r20, 0x40	; 64
   1674c:	50 e0       	ldi	r21, 0x00	; 0
   1674e:	61 2f       	mov	r22, r17
   16750:	8f ea       	ldi	r24, 0xAF	; 175
   16752:	92 e1       	ldi	r25, 0x12	; 18
   16754:	0e 94 75 b6 	call	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>
   16758:	df cf       	rjmp	.-66     	; 0x16718 <recv(unsigned char, unsigned char*, int)+0x4a>

0001675a <peek(unsigned char, unsigned char*)>:
_Z4peekhPh():
   1675a:	0f 93       	push	r16
   1675c:	ab 01       	movw	r20, r22
   1675e:	01 e0       	ldi	r16, 0x01	; 1
   16760:	21 e0       	ldi	r18, 0x01	; 1
   16762:	30 e0       	ldi	r19, 0x00	; 0
   16764:	68 2f       	mov	r22, r24
   16766:	8f ea       	ldi	r24, 0xAF	; 175
   16768:	92 e1       	ldi	r25, 0x12	; 18
   1676a:	0e 94 24 b6 	call	0x16c48	; 0x16c48 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>
   1676e:	81 e0       	ldi	r24, 0x01	; 1
   16770:	90 e0       	ldi	r25, 0x00	; 0
   16772:	0f 91       	pop	r16
   16774:	08 95       	ret

00016776 <flush(unsigned char)>:
_Z5flushh():
   16776:	08 95       	ret

00016778 <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_Z10bufferDatahjPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:359
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
   16778:	af 92       	push	r10
   1677a:	bf 92       	push	r11
   1677c:	cf 92       	push	r12
   1677e:	df 92       	push	r13
   16780:	ff 92       	push	r15
   16782:	0f 93       	push	r16
   16784:	1f 93       	push	r17
   16786:	cf 93       	push	r28
   16788:	df 93       	push	r29
   1678a:	f8 2e       	mov	r15, r24
   1678c:	6b 01       	movw	r12, r22
   1678e:	5a 01       	movw	r10, r20
   16790:	e9 01       	movw	r28, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   16792:	68 2f       	mov	r22, r24
   16794:	8f ea       	ldi	r24, 0xAF	; 175
   16796:	92 e1       	ldi	r25, 0x12	; 18
   16798:	0e 94 3a b5 	call	0x16a74	; 0x16a74 <W5500Class::getTXFreeSize(unsigned char)>
   1679c:	8c 17       	cp	r24, r28
   1679e:	9d 07       	cpc	r25, r29
   167a0:	30 f4       	brcc	.+12     	; 0x167ae <bufferData(unsigned char, unsigned int, unsigned char const*, unsigned int)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   167a2:	6f 2d       	mov	r22, r15
   167a4:	8f ea       	ldi	r24, 0xAF	; 175
   167a6:	92 e1       	ldi	r25, 0x12	; 18
   167a8:	0e 94 3a b5 	call	0x16a74	; 0x16a74 <W5500Class::getTXFreeSize(unsigned char)>
   167ac:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   167ae:	8e 01       	movw	r16, r28
   167b0:	95 01       	movw	r18, r10
   167b2:	a6 01       	movw	r20, r12
   167b4:	6f 2d       	mov	r22, r15
   167b6:	8f ea       	ldi	r24, 0xAF	; 175
   167b8:	92 e1       	ldi	r25, 0x12	; 18
   167ba:	0e 94 8a b5 	call	0x16b14	; 0x16b14 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:371
  return ret;
}
   167be:	ce 01       	movw	r24, r28
   167c0:	df 91       	pop	r29
   167c2:	cf 91       	pop	r28
   167c4:	1f 91       	pop	r17
   167c6:	0f 91       	pop	r16
   167c8:	ff 90       	pop	r15
   167ca:	df 90       	pop	r13
   167cc:	cf 90       	pop	r12
   167ce:	bf 90       	pop	r11
   167d0:	af 90       	pop	r10
   167d2:	08 95       	ret

000167d4 <startUDP(unsigned char, unsigned char*, unsigned int)>:
_Z8startUDPhPhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:374

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
   167d4:	0f 93       	push	r16
   167d6:	1f 93       	push	r17
   167d8:	cf 93       	push	r28
   167da:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  if
   167dc:	90 81       	ld	r25, Z
   167de:	91 11       	cpse	r25, r1
   167e0:	09 c0       	rjmp	.+18     	; 0x167f4 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   167e2:	91 81       	ldd	r25, Z+1	; 0x01
   167e4:	91 11       	cpse	r25, r1
   167e6:	06 c0       	rjmp	.+12     	; 0x167f4 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 1)
   167e8:	92 81       	ldd	r25, Z+2	; 0x02
   167ea:	91 11       	cpse	r25, r1
   167ec:	03 c0       	rjmp	.+6      	; 0x167f4 <startUDP(unsigned char, unsigned char*, unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 3)
   167ee:	93 81       	ldd	r25, Z+3	; 0x03
   167f0:	99 23       	and	r25, r25
   167f2:	91 f0       	breq	.+36     	; 0x16818 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377 (discriminator 5)
   167f4:	41 15       	cp	r20, r1
   167f6:	51 05       	cpc	r21, r1
   167f8:	79 f0       	breq	.+30     	; 0x16818 <startUDP(unsigned char, unsigned char*, unsigned int)+0x44>
   167fa:	8a 01       	movw	r16, r20
   167fc:	bf 01       	movw	r22, r30
   167fe:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:385
  {
    return 0;
  }
  else
  {
    w5500.writeSnDIPR(s, addr);
   16800:	0e 94 4c b2 	call	0x16498	; 0x16498 <W5500Class::writeSnDIPR(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:386
    w5500.writeSnDPORT(s, port);
   16804:	b8 01       	movw	r22, r16
   16806:	8c 2f       	mov	r24, r28
   16808:	0e 94 84 b2 	call	0x16508	; 0x16508 <W5500Class::writeSnDPORT(unsigned char, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:387
    return 1;
   1680c:	81 e0       	ldi	r24, 0x01	; 1
   1680e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:389
  }
}
   16810:	cf 91       	pop	r28
   16812:	1f 91       	pop	r17
   16814:	0f 91       	pop	r16
   16816:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
     ((port == 0x00))
    ) 
  {
    return 0;
   16818:	90 e0       	ldi	r25, 0x00	; 0
   1681a:	80 e0       	ldi	r24, 0x00	; 0
   1681c:	f9 cf       	rjmp	.-14     	; 0x16810 <startUDP(unsigned char, unsigned char*, unsigned int)+0x3c>

0001681e <sendUDP(unsigned char)>:
_Z7sendUDPh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:392
    return 1;
  }
}

int sendUDP(SOCKET s)
{
   1681e:	cf 93       	push	r28
   16820:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  w5500.execCmdSn(s, Sock_SEND);
   16822:	40 e2       	ldi	r20, 0x20	; 32
   16824:	50 e0       	ldi	r21, 0x00	; 0
   16826:	68 2f       	mov	r22, r24
   16828:	8f ea       	ldi	r24, 0xAF	; 175
   1682a:	92 e1       	ldi	r25, 0x12	; 18
   1682c:	0e 94 75 b6 	call	0x16cea	; 0x16cea <W5500Class::execCmdSn(unsigned char, SockCMD)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   16830:	8c 2f       	mov	r24, r28
   16832:	0e 94 61 b2 	call	0x164c2	; 0x164c2 <W5500Class::readSnIR(unsigned char)>
   16836:	84 fd       	sbrc	r24, 4
   16838:	0d c0       	rjmp	.+26     	; 0x16854 <sendUDP(unsigned char)+0x36>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   1683a:	8c 2f       	mov	r24, r28
   1683c:	0e 94 61 b2 	call	0x164c2	; 0x164c2 <W5500Class::readSnIR(unsigned char)>
   16840:	83 ff       	sbrs	r24, 3
   16842:	f6 cf       	rjmp	.-20     	; 0x16830 <sendUDP(unsigned char)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:401
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
   16844:	68 e1       	ldi	r22, 0x18	; 24
   16846:	8c 2f       	mov	r24, r28
   16848:	0e 94 7f b2 	call	0x164fe	; 0x164fe <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
      return 0;
   1684c:	90 e0       	ldi	r25, 0x00	; 0
   1684e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:411
  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
}
   16850:	cf 91       	pop	r28
   16852:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:407
      return 0;
    }
  }

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);
   16854:	60 e1       	ldi	r22, 0x10	; 16
   16856:	8c 2f       	mov	r24, r28
   16858:	0e 94 7f b2 	call	0x164fe	; 0x164fe <W5500Class::writeSnIR(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* Sent ok */
  return 1;
   1685c:	81 e0       	ldi	r24, 0x01	; 1
   1685e:	90 e0       	ldi	r25, 0x00	; 0
   16860:	f7 cf       	rjmp	.-18     	; 0x16850 <sendUDP(unsigned char)+0x32>

00016862 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
    uint8_t _data = SPI.transfer(0);
    resetSS();
    SPI.endTransaction();

    return _data;
}
   16862:	20 91 61 12 	lds	r18, 0x1261	; 0x801261 <SPIClass::interruptMode>
   16866:	22 23       	and	r18, r18
   16868:	81 f0       	breq	.+32     	; 0x1688a <SPIClass::beginTransaction(SPISettings)+0x28>
   1686a:	3f b7       	in	r19, 0x3f	; 63
   1686c:	f8 94       	cli
   1686e:	20 91 61 12 	lds	r18, 0x1261	; 0x801261 <SPIClass::interruptMode>
   16872:	21 30       	cpi	r18, 0x01	; 1
   16874:	69 f4       	brne	.+26     	; 0x16890 <SPIClass::beginTransaction(SPISettings)+0x2e>
   16876:	2d b3       	in	r18, 0x1d	; 29
   16878:	20 93 5f 12 	sts	0x125F, r18	; 0x80125f <SPIClass::interruptSave>
   1687c:	4d b3       	in	r20, 0x1d	; 29
   1687e:	20 91 60 12 	lds	r18, 0x1260	; 0x801260 <SPIClass::interruptMask>
   16882:	20 95       	com	r18
   16884:	24 23       	and	r18, r20
   16886:	2d bb       	out	0x1d, r18	; 29
   16888:	3f bf       	out	0x3f, r19	; 63
   1688a:	8c bd       	out	0x2c, r24	; 44
   1688c:	9d bd       	out	0x2d, r25	; 45
   1688e:	08 95       	ret
   16890:	30 93 5f 12 	sts	0x125F, r19	; 0x80125f <SPIClass::interruptSave>
   16894:	fa cf       	rjmp	.-12     	; 0x1688a <SPIClass::beginTransaction(SPISettings)+0x28>

00016896 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
   16896:	8e bd       	out	0x2e, r24	; 46
   16898:	00 00       	nop
   1689a:	0d b4       	in	r0, 0x2d	; 45
   1689c:	07 fe       	sbrs	r0, 7
   1689e:	fd cf       	rjmp	.-6      	; 0x1689a <SPIClass::transfer(unsigned char)+0x4>
   168a0:	8e b5       	in	r24, 0x2e	; 46
   168a2:	08 95       	ret

000168a4 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
   168a4:	80 91 61 12 	lds	r24, 0x1261	; 0x801261 <SPIClass::interruptMode>
   168a8:	88 23       	and	r24, r24
   168aa:	61 f0       	breq	.+24     	; 0x168c4 <SPIClass::endTransaction()+0x20>
   168ac:	9f b7       	in	r25, 0x3f	; 63
   168ae:	f8 94       	cli
   168b0:	20 91 61 12 	lds	r18, 0x1261	; 0x801261 <SPIClass::interruptMode>
   168b4:	80 91 5f 12 	lds	r24, 0x125F	; 0x80125f <SPIClass::interruptSave>
   168b8:	21 30       	cpi	r18, 0x01	; 1
   168ba:	19 f4       	brne	.+6      	; 0x168c2 <SPIClass::endTransaction()+0x1e>
   168bc:	8d bb       	out	0x1d, r24	; 29
   168be:	9f bf       	out	0x3f, r25	; 63
   168c0:	08 95       	ret
   168c2:	8f bf       	out	0x3f, r24	; 63
   168c4:	08 95       	ret

000168c6 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
   168c6:	60 e0       	ldi	r22, 0x00	; 0
   168c8:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <SPI_CS>
   168cc:	0c 94 93 cd 	jmp	0x19b26	; 0x19b26 <digitalWrite>

000168d0 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
   168d0:	61 e0       	ldi	r22, 0x01	; 1
   168d2:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <SPI_CS>
   168d6:	0c 94 93 cd 	jmp	0x19b26	; 0x19b26 <digitalWrite>

000168da <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
   168da:	0f 93       	push	r16
   168dc:	1f 93       	push	r17
   168de:	cf 93       	push	r28
   168e0:	df 93       	push	r29
   168e2:	18 2f       	mov	r17, r24
   168e4:	09 2f       	mov	r16, r25
   168e6:	d6 2f       	mov	r29, r22
   168e8:	c4 2f       	mov	r28, r20
   168ea:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <wiznet_SPI_settings>
   168ee:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <wiznet_SPI_settings+0x1>
   168f2:	0e 94 31 b4 	call	0x16862	; 0x16862 <SPIClass::beginTransaction(SPISettings)>
   168f6:	0e 94 63 b4 	call	0x168c6	; 0x168c6 <W5500Class::setSS()>
   168fa:	80 2f       	mov	r24, r16
   168fc:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16900:	81 2f       	mov	r24, r17
   16902:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16906:	8d 2f       	mov	r24, r29
   16908:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   1690c:	8c 2f       	mov	r24, r28
   1690e:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16912:	0e 94 68 b4 	call	0x168d0	; 0x168d0 <W5500Class::resetSS()>
   16916:	0e 94 52 b4 	call	0x168a4	; 0x168a4 <SPIClass::endTransaction()>
   1691a:	81 e0       	ldi	r24, 0x01	; 1
   1691c:	df 91       	pop	r29
   1691e:	cf 91       	pop	r28
   16920:	1f 91       	pop	r17
   16922:	0f 91       	pop	r16
   16924:	08 95       	ret

00016926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
   16926:	df 92       	push	r13
   16928:	ef 92       	push	r14
   1692a:	ff 92       	push	r15
   1692c:	0f 93       	push	r16
   1692e:	1f 93       	push	r17
   16930:	cf 93       	push	r28
   16932:	df 93       	push	r29
   16934:	d8 2f       	mov	r29, r24
   16936:	d9 2e       	mov	r13, r25
   16938:	c6 2f       	mov	r28, r22
   1693a:	7a 01       	movw	r14, r20
   1693c:	89 01       	movw	r16, r18
   1693e:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <wiznet_SPI_settings>
   16942:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <wiznet_SPI_settings+0x1>
   16946:	0e 94 31 b4 	call	0x16862	; 0x16862 <SPIClass::beginTransaction(SPISettings)>
   1694a:	0e 94 63 b4 	call	0x168c6	; 0x168c6 <W5500Class::setSS()>
   1694e:	8d 2d       	mov	r24, r13
   16950:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16954:	8d 2f       	mov	r24, r29
   16956:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   1695a:	8c 2f       	mov	r24, r28
   1695c:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16960:	e7 01       	movw	r28, r14
   16962:	e0 0e       	add	r14, r16
   16964:	f1 1e       	adc	r15, r17
   16966:	ce 15       	cp	r28, r14
   16968:	df 05       	cpc	r29, r15
   1696a:	21 f0       	breq	.+8      	; 0x16974 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
   1696c:	89 91       	ld	r24, Y+
   1696e:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16972:	f9 cf       	rjmp	.-14     	; 0x16966 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
   16974:	0e 94 68 b4 	call	0x168d0	; 0x168d0 <W5500Class::resetSS()>
   16978:	0e 94 52 b4 	call	0x168a4	; 0x168a4 <SPIClass::endTransaction()>
   1697c:	c8 01       	movw	r24, r16
   1697e:	df 91       	pop	r29
   16980:	cf 91       	pop	r28
   16982:	1f 91       	pop	r17
   16984:	0f 91       	pop	r16
   16986:	ff 90       	pop	r15
   16988:	ef 90       	pop	r14
   1698a:	df 90       	pop	r13
   1698c:	08 95       	ret

0001698e <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
   1698e:	1f 93       	push	r17
   16990:	cf 93       	push	r28
   16992:	df 93       	push	r29
   16994:	d8 2f       	mov	r29, r24
   16996:	19 2f       	mov	r17, r25
   16998:	c6 2f       	mov	r28, r22
   1699a:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <wiznet_SPI_settings>
   1699e:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <wiznet_SPI_settings+0x1>
   169a2:	0e 94 31 b4 	call	0x16862	; 0x16862 <SPIClass::beginTransaction(SPISettings)>
   169a6:	0e 94 63 b4 	call	0x168c6	; 0x168c6 <W5500Class::setSS()>
   169aa:	81 2f       	mov	r24, r17
   169ac:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   169b0:	8d 2f       	mov	r24, r29
   169b2:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   169b6:	8c 2f       	mov	r24, r28
   169b8:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   169bc:	80 e0       	ldi	r24, 0x00	; 0
   169be:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   169c2:	c8 2f       	mov	r28, r24
   169c4:	0e 94 68 b4 	call	0x168d0	; 0x168d0 <W5500Class::resetSS()>
   169c8:	0e 94 52 b4 	call	0x168a4	; 0x168a4 <SPIClass::endTransaction()>
   169cc:	8c 2f       	mov	r24, r28
   169ce:	df 91       	pop	r29
   169d0:	cf 91       	pop	r28
   169d2:	1f 91       	pop	r17
   169d4:	08 95       	ret

000169d6 <W5500Class::init(unsigned char)>:
_ZN10W5500Class4initEh():
   169d6:	0f 93       	push	r16
   169d8:	1f 93       	push	r17
   169da:	cf 93       	push	r28
   169dc:	60 93 ac 12 	sts	0x12AC, r22	; 0x8012ac <SPI_CS>
   169e0:	68 ee       	ldi	r22, 0xE8	; 232
   169e2:	73 e0       	ldi	r23, 0x03	; 3
   169e4:	80 e0       	ldi	r24, 0x00	; 0
   169e6:	90 e0       	ldi	r25, 0x00	; 0
   169e8:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
_ZN10W5500Class6initSSEv():
   169ec:	61 e0       	ldi	r22, 0x01	; 1
   169ee:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <SPI_CS>
   169f2:	0e 94 57 cd 	call	0x19aae	; 0x19aae <pinMode>
_ZN10W5500Class4initEh():
   169f6:	0e 94 da a8 	call	0x151b4	; 0x151b4 <SPIClass::begin()>
_ZN10W5500Class6readMREv():
   169fa:	60 e0       	ldi	r22, 0x00	; 0
   169fc:	90 e0       	ldi	r25, 0x00	; 0
   169fe:	80 e0       	ldi	r24, 0x00	; 0
   16a00:	0e 94 c7 b4 	call	0x1698e	; 0x1698e <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv():
   16a04:	48 2f       	mov	r20, r24
   16a06:	40 68       	ori	r20, 0x80	; 128
_ZN10W5500Class7writeMREh():
   16a08:	64 e0       	ldi	r22, 0x04	; 4
   16a0a:	90 e0       	ldi	r25, 0x00	; 0
   16a0c:	80 e0       	ldi	r24, 0x00	; 0
   16a0e:	0e 94 6d b4 	call	0x168da	; 0x168da <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16a12:	cc e0       	ldi	r28, 0x0C	; 12
   16a14:	08 e0       	ldi	r16, 0x08	; 8
   16a16:	10 e0       	ldi	r17, 0x00	; 0
_ZN10W5500Class4initEh():
   16a18:	42 e0       	ldi	r20, 0x02	; 2
   16a1a:	6c 2f       	mov	r22, r28
   16a1c:	8e e1       	ldi	r24, 0x1E	; 30
   16a1e:	90 e0       	ldi	r25, 0x00	; 0
   16a20:	0e 94 6d b4 	call	0x168da	; 0x168da <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16a24:	42 e0       	ldi	r20, 0x02	; 2
   16a26:	6c 2f       	mov	r22, r28
   16a28:	8f e1       	ldi	r24, 0x1F	; 31
   16a2a:	90 e0       	ldi	r25, 0x00	; 0
   16a2c:	0e 94 6d b4 	call	0x168da	; 0x168da <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16a30:	01 50       	subi	r16, 0x01	; 1
   16a32:	11 09       	sbc	r17, r1
   16a34:	c0 5e       	subi	r28, 0xE0	; 224
   16a36:	01 15       	cp	r16, r1
   16a38:	11 05       	cpc	r17, r1
   16a3a:	71 f7       	brne	.-36     	; 0x16a18 <W5500Class::init(unsigned char)+0x42>
   16a3c:	cf 91       	pop	r28
   16a3e:	1f 91       	pop	r17
   16a40:	0f 91       	pop	r16
   16a42:	08 95       	ret

00016a44 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
   16a44:	1f 93       	push	r17
   16a46:	cf 93       	push	r28
   16a48:	df 93       	push	r29
   16a4a:	18 2f       	mov	r17, r24
   16a4c:	60 e2       	ldi	r22, 0x20	; 32
   16a4e:	70 e0       	ldi	r23, 0x00	; 0
   16a50:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16a54:	c8 2f       	mov	r28, r24
   16a56:	d0 e0       	ldi	r29, 0x00	; 0
   16a58:	dc 2f       	mov	r29, r28
   16a5a:	cc 27       	eor	r28, r28
   16a5c:	61 e2       	ldi	r22, 0x21	; 33
   16a5e:	70 e0       	ldi	r23, 0x00	; 0
   16a60:	81 2f       	mov	r24, r17
   16a62:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16a66:	8c 0f       	add	r24, r28
   16a68:	9d 2f       	mov	r25, r29
   16a6a:	91 1d       	adc	r25, r1
   16a6c:	df 91       	pop	r29
   16a6e:	cf 91       	pop	r28
   16a70:	1f 91       	pop	r17
   16a72:	08 95       	ret

00016a74 <W5500Class::getTXFreeSize(unsigned char)>:
_ZN10W5500Class13getTXFreeSizeEh():
   16a74:	ff 92       	push	r15
   16a76:	0f 93       	push	r16
   16a78:	1f 93       	push	r17
   16a7a:	cf 93       	push	r28
   16a7c:	df 93       	push	r29
   16a7e:	f6 2e       	mov	r15, r22
   16a80:	d0 e0       	ldi	r29, 0x00	; 0
   16a82:	c0 e0       	ldi	r28, 0x00	; 0
   16a84:	8f 2d       	mov	r24, r15
   16a86:	0e 94 22 b5 	call	0x16a44	; 0x16a44 <W5500Class::readSnTX_FSR(unsigned char)>
   16a8a:	8c 01       	movw	r16, r24
   16a8c:	89 2b       	or	r24, r25
   16a8e:	21 f0       	breq	.+8      	; 0x16a98 <W5500Class::getTXFreeSize(unsigned char)+0x24>
   16a90:	8f 2d       	mov	r24, r15
   16a92:	0e 94 22 b5 	call	0x16a44	; 0x16a44 <W5500Class::readSnTX_FSR(unsigned char)>
   16a96:	ec 01       	movw	r28, r24
   16a98:	c0 17       	cp	r28, r16
   16a9a:	d1 07       	cpc	r29, r17
   16a9c:	99 f7       	brne	.-26     	; 0x16a84 <W5500Class::getTXFreeSize(unsigned char)+0x10>
   16a9e:	ce 01       	movw	r24, r28
   16aa0:	df 91       	pop	r29
   16aa2:	cf 91       	pop	r28
   16aa4:	1f 91       	pop	r17
   16aa6:	0f 91       	pop	r16
   16aa8:	ff 90       	pop	r15
   16aaa:	08 95       	ret

00016aac <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
   16aac:	1f 93       	push	r17
   16aae:	cf 93       	push	r28
   16ab0:	df 93       	push	r29
   16ab2:	18 2f       	mov	r17, r24
   16ab4:	66 e2       	ldi	r22, 0x26	; 38
   16ab6:	70 e0       	ldi	r23, 0x00	; 0
   16ab8:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16abc:	c8 2f       	mov	r28, r24
   16abe:	d0 e0       	ldi	r29, 0x00	; 0
   16ac0:	dc 2f       	mov	r29, r28
   16ac2:	cc 27       	eor	r28, r28
   16ac4:	67 e2       	ldi	r22, 0x27	; 39
   16ac6:	70 e0       	ldi	r23, 0x00	; 0
   16ac8:	81 2f       	mov	r24, r17
   16aca:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16ace:	8c 0f       	add	r24, r28
   16ad0:	9d 2f       	mov	r25, r29
   16ad2:	91 1d       	adc	r25, r1
   16ad4:	df 91       	pop	r29
   16ad6:	cf 91       	pop	r28
   16ad8:	1f 91       	pop	r17
   16ada:	08 95       	ret

00016adc <W5500Class::getRXReceivedSize(unsigned char)>:
_ZN10W5500Class17getRXReceivedSizeEh():
   16adc:	ff 92       	push	r15
   16ade:	0f 93       	push	r16
   16ae0:	1f 93       	push	r17
   16ae2:	cf 93       	push	r28
   16ae4:	df 93       	push	r29
   16ae6:	f6 2e       	mov	r15, r22
   16ae8:	d0 e0       	ldi	r29, 0x00	; 0
   16aea:	c0 e0       	ldi	r28, 0x00	; 0
   16aec:	8f 2d       	mov	r24, r15
   16aee:	0e 94 56 b5 	call	0x16aac	; 0x16aac <W5500Class::readSnRX_RSR(unsigned char)>
   16af2:	8c 01       	movw	r16, r24
   16af4:	89 2b       	or	r24, r25
   16af6:	21 f0       	breq	.+8      	; 0x16b00 <W5500Class::getRXReceivedSize(unsigned char)+0x24>
   16af8:	8f 2d       	mov	r24, r15
   16afa:	0e 94 56 b5 	call	0x16aac	; 0x16aac <W5500Class::readSnRX_RSR(unsigned char)>
   16afe:	ec 01       	movw	r28, r24
   16b00:	c0 17       	cp	r28, r16
   16b02:	d1 07       	cpc	r29, r17
   16b04:	99 f7       	brne	.-26     	; 0x16aec <W5500Class::getRXReceivedSize(unsigned char)+0x10>
   16b06:	ce 01       	movw	r24, r28
   16b08:	df 91       	pop	r29
   16b0a:	cf 91       	pop	r28
   16b0c:	1f 91       	pop	r17
   16b0e:	0f 91       	pop	r16
   16b10:	ff 90       	pop	r15
   16b12:	08 95       	ret

00016b14 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16b14:	bf 92       	push	r11
   16b16:	cf 92       	push	r12
   16b18:	df 92       	push	r13
   16b1a:	ef 92       	push	r14
   16b1c:	ff 92       	push	r15
   16b1e:	0f 93       	push	r16
   16b20:	1f 93       	push	r17
   16b22:	cf 93       	push	r28
   16b24:	df 93       	push	r29
   16b26:	b6 2e       	mov	r11, r22
   16b28:	7a 01       	movw	r14, r20
   16b2a:	69 01       	movw	r12, r18
_ZN10W5500Class11readSnTX_WREh():
   16b2c:	64 e2       	ldi	r22, 0x24	; 36
   16b2e:	70 e0       	ldi	r23, 0x00	; 0
   16b30:	8b 2d       	mov	r24, r11
   16b32:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16b36:	c8 2f       	mov	r28, r24
   16b38:	65 e2       	ldi	r22, 0x25	; 37
   16b3a:	70 e0       	ldi	r23, 0x00	; 0
   16b3c:	8b 2d       	mov	r24, r11
   16b3e:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16b42:	d0 e0       	ldi	r29, 0x00	; 0
   16b44:	dc 2f       	mov	r29, r28
   16b46:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16b48:	8e 0d       	add	r24, r14
   16b4a:	9f 2d       	mov	r25, r15
   16b4c:	91 1d       	adc	r25, r1
   16b4e:	c8 0f       	add	r28, r24
   16b50:	d9 1f       	adc	r29, r25
   16b52:	6b 2d       	mov	r22, r11
   16b54:	62 95       	swap	r22
   16b56:	66 0f       	add	r22, r22
   16b58:	60 7e       	andi	r22, 0xE0	; 224
   16b5a:	6c 5e       	subi	r22, 0xEC	; 236
   16b5c:	98 01       	movw	r18, r16
   16b5e:	a6 01       	movw	r20, r12
   16b60:	ce 01       	movw	r24, r28
   16b62:	0e 94 93 b4 	call	0x16926	; 0x16926 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
   16b66:	0c 0f       	add	r16, r28
   16b68:	1d 1f       	adc	r17, r29
_ZN10W5500Class12writeSnTX_WREhj():
   16b6a:	41 2f       	mov	r20, r17
   16b6c:	64 e2       	ldi	r22, 0x24	; 36
   16b6e:	70 e0       	ldi	r23, 0x00	; 0
   16b70:	8b 2d       	mov	r24, r11
   16b72:	0e 94 65 b2 	call	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16b76:	40 2f       	mov	r20, r16
   16b78:	65 e2       	ldi	r22, 0x25	; 37
   16b7a:	70 e0       	ldi	r23, 0x00	; 0
   16b7c:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj():
   16b7e:	df 91       	pop	r29
   16b80:	cf 91       	pop	r28
   16b82:	1f 91       	pop	r17
   16b84:	0f 91       	pop	r16
   16b86:	ff 90       	pop	r15
   16b88:	ef 90       	pop	r14
   16b8a:	df 90       	pop	r13
   16b8c:	cf 90       	pop	r12
   16b8e:	bf 90       	pop	r11
_ZN10W5500Class12writeSnTX_WREhj():
   16b90:	0c 94 65 b2 	jmp	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016b94 <W5500Class::send_data_processing(unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class20send_data_processingEhPKhj():
   16b94:	0f 93       	push	r16
   16b96:	1f 93       	push	r17
   16b98:	89 01       	movw	r16, r18
   16b9a:	9a 01       	movw	r18, r20
   16b9c:	50 e0       	ldi	r21, 0x00	; 0
   16b9e:	40 e0       	ldi	r20, 0x00	; 0
   16ba0:	0e 94 8a b5 	call	0x16b14	; 0x16b14 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int)>
   16ba4:	1f 91       	pop	r17
   16ba6:	0f 91       	pop	r16
   16ba8:	08 95       	ret

00016baa <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>:
_ZN10W5500Class4readEjhPhj():
   16baa:	df 92       	push	r13
   16bac:	ef 92       	push	r14
   16bae:	ff 92       	push	r15
   16bb0:	0f 93       	push	r16
   16bb2:	1f 93       	push	r17
   16bb4:	cf 93       	push	r28
   16bb6:	df 93       	push	r29
   16bb8:	d8 2f       	mov	r29, r24
   16bba:	d9 2e       	mov	r13, r25
   16bbc:	c6 2f       	mov	r28, r22
   16bbe:	7a 01       	movw	r14, r20
   16bc0:	89 01       	movw	r16, r18
   16bc2:	80 91 ad 12 	lds	r24, 0x12AD	; 0x8012ad <wiznet_SPI_settings>
   16bc6:	90 91 ae 12 	lds	r25, 0x12AE	; 0x8012ae <wiznet_SPI_settings+0x1>
   16bca:	0e 94 31 b4 	call	0x16862	; 0x16862 <SPIClass::beginTransaction(SPISettings)>
   16bce:	0e 94 63 b4 	call	0x168c6	; 0x168c6 <W5500Class::setSS()>
   16bd2:	8d 2d       	mov	r24, r13
   16bd4:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16bd8:	8d 2f       	mov	r24, r29
   16bda:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16bde:	8c 2f       	mov	r24, r28
   16be0:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16be4:	e7 01       	movw	r28, r14
   16be6:	e0 0e       	add	r14, r16
   16be8:	f1 1e       	adc	r15, r17
   16bea:	ce 15       	cp	r28, r14
   16bec:	df 05       	cpc	r29, r15
   16bee:	29 f0       	breq	.+10     	; 0x16bfa <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x50>
   16bf0:	80 e0       	ldi	r24, 0x00	; 0
   16bf2:	0e 94 4b b4 	call	0x16896	; 0x16896 <SPIClass::transfer(unsigned char)>
   16bf6:	89 93       	st	Y+, r24
   16bf8:	f8 cf       	rjmp	.-16     	; 0x16bea <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)+0x40>
   16bfa:	0e 94 68 b4 	call	0x168d0	; 0x168d0 <W5500Class::resetSS()>
   16bfe:	0e 94 52 b4 	call	0x168a4	; 0x168a4 <SPIClass::endTransaction()>
   16c02:	c8 01       	movw	r24, r16
   16c04:	df 91       	pop	r29
   16c06:	cf 91       	pop	r28
   16c08:	1f 91       	pop	r17
   16c0a:	0f 91       	pop	r16
   16c0c:	ff 90       	pop	r15
   16c0e:	ef 90       	pop	r14
   16c10:	df 90       	pop	r13
   16c12:	08 95       	ret

00016c14 <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>:
_ZN10W5500Class9read_dataEhjPVhj():
   16c14:	0f 93       	push	r16
   16c16:	1f 93       	push	r17
   16c18:	cf 93       	push	r28
   16c1a:	df 93       	push	r29
   16c1c:	1f 92       	push	r1
   16c1e:	1f 92       	push	r1
   16c20:	cd b7       	in	r28, 0x3d	; 61
   16c22:	de b7       	in	r29, 0x3e	; 62
   16c24:	5a 83       	std	Y+2, r21	; 0x02
   16c26:	49 83       	std	Y+1, r20	; 0x01
   16c28:	a9 01       	movw	r20, r18
   16c2a:	98 01       	movw	r18, r16
   16c2c:	89 81       	ldd	r24, Y+1	; 0x01
   16c2e:	9a 81       	ldd	r25, Y+2	; 0x02
   16c30:	62 95       	swap	r22
   16c32:	66 0f       	add	r22, r22
   16c34:	60 7e       	andi	r22, 0xE0	; 224
   16c36:	68 5e       	subi	r22, 0xE8	; 232
   16c38:	0f 90       	pop	r0
   16c3a:	0f 90       	pop	r0
   16c3c:	df 91       	pop	r29
   16c3e:	cf 91       	pop	r28
   16c40:	1f 91       	pop	r17
   16c42:	0f 91       	pop	r16
   16c44:	0c 94 d5 b5 	jmp	0x16baa	; 0x16baa <W5500Class::read(unsigned int, unsigned char, unsigned char*, unsigned int)>

00016c48 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)>:
_ZN10W5500Class20recv_data_processingEhPhjh():
   16c48:	8f 92       	push	r8
   16c4a:	9f 92       	push	r9
   16c4c:	af 92       	push	r10
   16c4e:	bf 92       	push	r11
   16c50:	cf 92       	push	r12
   16c52:	df 92       	push	r13
   16c54:	ef 92       	push	r14
   16c56:	ff 92       	push	r15
   16c58:	0f 93       	push	r16
   16c5a:	1f 93       	push	r17
   16c5c:	cf 93       	push	r28
   16c5e:	df 93       	push	r29
   16c60:	6c 01       	movw	r12, r24
   16c62:	96 2e       	mov	r9, r22
   16c64:	5a 01       	movw	r10, r20
   16c66:	79 01       	movw	r14, r18
   16c68:	80 2e       	mov	r8, r16
_ZN10W5500Class11readSnRX_RDEh():
   16c6a:	68 e2       	ldi	r22, 0x28	; 40
   16c6c:	70 e0       	ldi	r23, 0x00	; 0
   16c6e:	89 2d       	mov	r24, r9
   16c70:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16c74:	c8 2f       	mov	r28, r24
   16c76:	d0 e0       	ldi	r29, 0x00	; 0
   16c78:	dc 2f       	mov	r29, r28
   16c7a:	cc 27       	eor	r28, r28
   16c7c:	69 e2       	ldi	r22, 0x29	; 41
   16c7e:	70 e0       	ldi	r23, 0x00	; 0
   16c80:	89 2d       	mov	r24, r9
   16c82:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
   16c86:	c8 0f       	add	r28, r24
   16c88:	d1 1d       	adc	r29, r1
_ZN10W5500Class20recv_data_processingEhPhjh():
   16c8a:	87 01       	movw	r16, r14
   16c8c:	95 01       	movw	r18, r10
   16c8e:	ae 01       	movw	r20, r28
   16c90:	69 2d       	mov	r22, r9
   16c92:	c6 01       	movw	r24, r12
   16c94:	0e 94 0a b6 	call	0x16c14	; 0x16c14 <W5500Class::read_data(unsigned char, unsigned int, unsigned char volatile*, unsigned int)>
   16c98:	81 10       	cpse	r8, r1
   16c9a:	1a c0       	rjmp	.+52     	; 0x16cd0 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char)+0x88>
   16c9c:	ce 0d       	add	r28, r14
   16c9e:	df 1d       	adc	r29, r15
_ZN10W5500Class12writeSnRX_RDEhj():
   16ca0:	4d 2f       	mov	r20, r29
   16ca2:	68 e2       	ldi	r22, 0x28	; 40
   16ca4:	70 e0       	ldi	r23, 0x00	; 0
   16ca6:	89 2d       	mov	r24, r9
   16ca8:	0e 94 65 b2 	call	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16cac:	4c 2f       	mov	r20, r28
   16cae:	69 e2       	ldi	r22, 0x29	; 41
   16cb0:	70 e0       	ldi	r23, 0x00	; 0
   16cb2:	89 2d       	mov	r24, r9
_ZN10W5500Class20recv_data_processingEhPhjh():
   16cb4:	df 91       	pop	r29
   16cb6:	cf 91       	pop	r28
   16cb8:	1f 91       	pop	r17
   16cba:	0f 91       	pop	r16
   16cbc:	ff 90       	pop	r15
   16cbe:	ef 90       	pop	r14
   16cc0:	df 90       	pop	r13
   16cc2:	cf 90       	pop	r12
   16cc4:	bf 90       	pop	r11
   16cc6:	af 90       	pop	r10
   16cc8:	9f 90       	pop	r9
   16cca:	8f 90       	pop	r8
_ZN10W5500Class12writeSnRX_RDEhj():
   16ccc:	0c 94 65 b2 	jmp	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh():
   16cd0:	df 91       	pop	r29
   16cd2:	cf 91       	pop	r28
   16cd4:	1f 91       	pop	r17
   16cd6:	0f 91       	pop	r16
   16cd8:	ff 90       	pop	r15
   16cda:	ef 90       	pop	r14
   16cdc:	df 90       	pop	r13
   16cde:	cf 90       	pop	r12
   16ce0:	bf 90       	pop	r11
   16ce2:	af 90       	pop	r10
   16ce4:	9f 90       	pop	r9
   16ce6:	8f 90       	pop	r8
   16ce8:	08 95       	ret

00016cea <W5500Class::execCmdSn(unsigned char, SockCMD)>:
_ZN10W5500Class9execCmdSnEh7SockCMD():
   16cea:	cf 93       	push	r28
   16cec:	c6 2f       	mov	r28, r22
_ZN10W5500Class9writeSnCREhh():
   16cee:	61 e0       	ldi	r22, 0x01	; 1
   16cf0:	70 e0       	ldi	r23, 0x00	; 0
   16cf2:	8c 2f       	mov	r24, r28
   16cf4:	0e 94 65 b2 	call	0x164ca	; 0x164ca <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class8readSnCREh():
   16cf8:	61 e0       	ldi	r22, 0x01	; 1
   16cfa:	70 e0       	ldi	r23, 0x00	; 0
   16cfc:	8c 2f       	mov	r24, r28
   16cfe:	0e 94 58 b2 	call	0x164b0	; 0x164b0 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD():
   16d02:	81 11       	cpse	r24, r1
   16d04:	f9 cf       	rjmp	.-14     	; 0x16cf8 <W5500Class::execCmdSn(unsigned char, SockCMD)+0xe>
   16d06:	cf 91       	pop	r28
   16d08:	08 95       	ret

00016d0a <_GLOBAL__sub_I_w5500>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
   16d0a:	ed ea       	ldi	r30, 0xAD	; 173
   16d0c:	f2 e1       	ldi	r31, 0x12	; 18
   16d0e:	80 e5       	ldi	r24, 0x50	; 80
   16d10:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
   16d12:	81 e0       	ldi	r24, 0x01	; 1
   16d14:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I_w5500():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:184
   16d16:	08 95       	ret

00016d18 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:98
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}
   16d18:	cf 92       	push	r12
   16d1a:	df 92       	push	r13
   16d1c:	ef 92       	push	r14
   16d1e:	ff 92       	push	r15
   16d20:	0f 93       	push	r16
   16d22:	1f 93       	push	r17
   16d24:	cf 93       	push	r28
   16d26:	df 93       	push	r29
   16d28:	00 d0       	rcall	.+0      	; 0x16d2a <EEPROMreadFloat(unsigned int)+0x12>
   16d2a:	1f 92       	push	r1
   16d2c:	cd b7       	in	r28, 0x3d	; 61
   16d2e:	de b7       	in	r29, 0x3e	; 62
   16d30:	7e 01       	movw	r14, r28
   16d32:	25 e0       	ldi	r18, 0x05	; 5
   16d34:	e2 0e       	add	r14, r18
   16d36:	f1 1c       	adc	r15, r1
   16d38:	8e 01       	movw	r16, r28
   16d3a:	0f 5f       	subi	r16, 0xFF	; 255
   16d3c:	1f 4f       	sbci	r17, 0xFF	; 255
_ZNK5EERefdeEv():
   16d3e:	6c 01       	movw	r12, r24
   16d40:	c0 1a       	sub	r12, r16
   16d42:	d1 0a       	sbc	r13, r17
   16d44:	c6 01       	movw	r24, r12
   16d46:	80 0f       	add	r24, r16
   16d48:	91 1f       	adc	r25, r17
   16d4a:	0e 94 68 df 	call	0x1bed0	; 0x1bed0 <eeprom_read_byte>
_Z15EEPROMreadFloatj():
   16d4e:	f8 01       	movw	r30, r16
   16d50:	81 93       	st	Z+, r24
   16d52:	8f 01       	movw	r16, r30
   16d54:	ee 15       	cp	r30, r14
   16d56:	ff 05       	cpc	r31, r15
   16d58:	a9 f7       	brne	.-22     	; 0x16d44 <EEPROMreadFloat(unsigned int)+0x2c>
   16d5a:	69 81       	ldd	r22, Y+1	; 0x01
   16d5c:	7a 81       	ldd	r23, Y+2	; 0x02
   16d5e:	8b 81       	ldd	r24, Y+3	; 0x03
   16d60:	9c 81       	ldd	r25, Y+4	; 0x04
   16d62:	0f 90       	pop	r0
   16d64:	0f 90       	pop	r0
   16d66:	0f 90       	pop	r0
   16d68:	0f 90       	pop	r0
   16d6a:	df 91       	pop	r29
   16d6c:	cf 91       	pop	r28
   16d6e:	1f 91       	pop	r17
   16d70:	0f 91       	pop	r16
   16d72:	ff 90       	pop	r15
   16d74:	ef 90       	pop	r14
   16d76:	df 90       	pop	r13
   16d78:	cf 90       	pop	r12
   16d7a:	08 95       	ret

00016d7c <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
   16d7c:	cf 92       	push	r12
   16d7e:	df 92       	push	r13
   16d80:	ef 92       	push	r14
   16d82:	ff 92       	push	r15
   16d84:	0f 93       	push	r16
   16d86:	1f 93       	push	r17
   16d88:	cf 93       	push	r28
   16d8a:	df 93       	push	r29
   16d8c:	00 d0       	rcall	.+0      	; 0x16d8e <EEPROMwriteFloat(unsigned int, float)+0x12>
   16d8e:	1f 92       	push	r1
   16d90:	cd b7       	in	r28, 0x3d	; 61
   16d92:	de b7       	in	r29, 0x3e	; 62
   16d94:	6c 01       	movw	r12, r24
   16d96:	49 83       	std	Y+1, r20	; 0x01
   16d98:	5a 83       	std	Y+2, r21	; 0x02
   16d9a:	6b 83       	std	Y+3, r22	; 0x03
   16d9c:	7c 83       	std	Y+4, r23	; 0x04
   16d9e:	ce 01       	movw	r24, r28
   16da0:	01 96       	adiw	r24, 0x01	; 1
   16da2:	7c 01       	movw	r14, r24
   16da4:	10 e0       	ldi	r17, 0x00	; 0
   16da6:	00 e0       	ldi	r16, 0x00	; 0
   16da8:	f7 01       	movw	r30, r14
   16daa:	61 91       	ld	r22, Z+
   16dac:	7f 01       	movw	r14, r30
_ZN5EERefaSEh():
   16dae:	c8 01       	movw	r24, r16
   16db0:	8c 0d       	add	r24, r12
   16db2:	9d 1d       	adc	r25, r13
   16db4:	0e 94 70 df 	call	0x1bee0	; 0x1bee0 <eeprom_write_byte>
_Z16EEPROMwriteFloatjf():
   16db8:	0f 5f       	subi	r16, 0xFF	; 255
   16dba:	1f 4f       	sbci	r17, 0xFF	; 255
   16dbc:	04 30       	cpi	r16, 0x04	; 4
   16dbe:	11 05       	cpc	r17, r1
   16dc0:	99 f7       	brne	.-26     	; 0x16da8 <EEPROMwriteFloat(unsigned int, float)+0x2c>
   16dc2:	0f 90       	pop	r0
   16dc4:	0f 90       	pop	r0
   16dc6:	0f 90       	pop	r0
   16dc8:	0f 90       	pop	r0
   16dca:	df 91       	pop	r29
   16dcc:	cf 91       	pop	r28
   16dce:	1f 91       	pop	r17
   16dd0:	0f 91       	pop	r16
   16dd2:	ff 90       	pop	r15
   16dd4:	ef 90       	pop	r14
   16dd6:	df 90       	pop	r13
   16dd8:	cf 90       	pop	r12
   16dda:	08 95       	ret

00016ddc <float_to_int(float)>:
_Z12float_to_intf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102

int float_to_int(float x)
{
 return x;
   16ddc:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <__fixsfsi>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
}
   16de0:	cb 01       	movw	r24, r22
   16de2:	08 95       	ret

00016de4 <parseBytes(char const*, char, unsigned char*, int, int)>:
_Z10parseBytesPKccPhii():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   16de4:	8f 92       	push	r8
   16de6:	9f 92       	push	r9
   16de8:	af 92       	push	r10
   16dea:	bf 92       	push	r11
   16dec:	cf 92       	push	r12
   16dee:	df 92       	push	r13
   16df0:	ef 92       	push	r14
   16df2:	ff 92       	push	r15
   16df4:	0f 93       	push	r16
   16df6:	1f 93       	push	r17
   16df8:	cf 93       	push	r28
   16dfa:	df 93       	push	r29
   16dfc:	ec 01       	movw	r28, r24
   16dfe:	5a 01       	movw	r10, r20
   16e00:	49 01       	movw	r8, r18
   16e02:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   16e04:	c6 2e       	mov	r12, r22
   16e06:	66 0f       	add	r22, r22
   16e08:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 1)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   16e0a:	c7 01       	movw	r24, r14
   16e0c:	8a 19       	sub	r24, r10
   16e0e:	9b 09       	sbc	r25, r11
   16e10:	88 15       	cp	r24, r8
   16e12:	99 05       	cpc	r25, r9
   16e14:	b4 f4       	brge	.+44     	; 0x16e42 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   16e16:	a8 01       	movw	r20, r16
   16e18:	70 e0       	ldi	r23, 0x00	; 0
   16e1a:	60 e0       	ldi	r22, 0x00	; 0
   16e1c:	ce 01       	movw	r24, r28
   16e1e:	0e 94 17 d6 	call	0x1ac2e	; 0x1ac2e <strtoul>
   16e22:	f7 01       	movw	r30, r14
   16e24:	61 93       	st	Z+, r22
   16e26:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    str = strchr(str, sep);               // Find next separator
   16e28:	b6 01       	movw	r22, r12
   16e2a:	ce 01       	movw	r24, r28
   16e2c:	0e 94 74 d7 	call	0x1aee8	; 0x1aee8 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
   16e30:	00 97       	sbiw	r24, 0x00	; 0
   16e32:	39 f0       	breq	.+14     	; 0x16e42 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109 (discriminator 1)
   16e34:	fc 01       	movw	r30, r24
   16e36:	20 81       	ld	r18, Z
   16e38:	22 23       	and	r18, r18
   16e3a:	19 f0       	breq	.+6      	; 0x16e42 <parseBytes(char const*, char, unsigned char*, int, int)+0x5e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112 (discriminator 2)
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   16e3c:	ec 01       	movw	r28, r24
   16e3e:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106 (discriminator 2)
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   16e40:	e4 cf       	rjmp	.-56     	; 0x16e0a <parseBytes(char const*, char, unsigned char*, int, int)+0x26>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   16e42:	df 91       	pop	r29
   16e44:	cf 91       	pop	r28
   16e46:	1f 91       	pop	r17
   16e48:	0f 91       	pop	r16
   16e4a:	ff 90       	pop	r15
   16e4c:	ef 90       	pop	r14
   16e4e:	df 90       	pop	r13
   16e50:	cf 90       	pop	r12
   16e52:	bf 90       	pop	r11
   16e54:	af 90       	pop	r10
   16e56:	9f 90       	pop	r9
   16e58:	8f 90       	pop	r8
   16e5a:	08 95       	ret

00016e5c <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   16e5c:	3f 92       	push	r3
   16e5e:	4f 92       	push	r4
   16e60:	5f 92       	push	r5
   16e62:	6f 92       	push	r6
   16e64:	7f 92       	push	r7
   16e66:	8f 92       	push	r8
   16e68:	9f 92       	push	r9
   16e6a:	af 92       	push	r10
   16e6c:	bf 92       	push	r11
   16e6e:	cf 92       	push	r12
   16e70:	df 92       	push	r13
   16e72:	ef 92       	push	r14
   16e74:	ff 92       	push	r15
   16e76:	0f 93       	push	r16
   16e78:	1f 93       	push	r17
   16e7a:	cf 93       	push	r28
   16e7c:	df 93       	push	r29
   16e7e:	00 d0       	rcall	.+0      	; 0x16e80 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   16e80:	00 d0       	rcall	.+0      	; 0x16e82 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x26>
   16e82:	1f 92       	push	r1
   16e84:	1f 92       	push	r1
   16e86:	cd b7       	in	r28, 0x3d	; 61
   16e88:	de b7       	in	r29, 0x3e	; 62
   16e8a:	5c 01       	movw	r10, r24
   16e8c:	36 2e       	mov	r3, r22
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
  char tmp1[8];
  str[0] = 0;
   16e8e:	fc 01       	movw	r30, r24
   16e90:	10 82       	st	Z, r1
   16e92:	2a 01       	movw	r4, r20
   16e94:	c2 2e       	mov	r12, r18
   16e96:	d1 2c       	mov	r13, r1
   16e98:	f1 2c       	mov	r15, r1
   16e9a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   16e9c:	60 2e       	mov	r6, r16
   16e9e:	71 2c       	mov	r7, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   16ea0:	8e 01       	movw	r16, r28
   16ea2:	0f 5f       	subi	r16, 0xFF	; 255
   16ea4:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   16ea6:	46 01       	movw	r8, r12
   16ea8:	f1 e0       	ldi	r31, 0x01	; 1
   16eaa:	8f 1a       	sub	r8, r31
   16eac:	91 08       	sbc	r9, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 1)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   16eae:	ec 14       	cp	r14, r12
   16eb0:	fd 04       	cpc	r15, r13
   16eb2:	39 f1       	breq	.+78     	; 0x16f02 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0xa6>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
  {
    itoa(bytes[a], tmp1, base);
   16eb4:	f2 01       	movw	r30, r4
   16eb6:	81 91       	ld	r24, Z+
   16eb8:	2f 01       	movw	r4, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   16eba:	a3 01       	movw	r20, r6
   16ebc:	b8 01       	movw	r22, r16
   16ebe:	90 e0       	ldi	r25, 0x00	; 0
   16ec0:	0e 94 d3 d7 	call	0x1afa6	; 0x1afa6 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (strlen(tmp1) < 2)
   16ec4:	f8 01       	movw	r30, r16
   16ec6:	01 90       	ld	r0, Z+
   16ec8:	00 20       	and	r0, r0
   16eca:	e9 f7       	brne	.-6      	; 0x16ec6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x6a>
   16ecc:	31 97       	sbiw	r30, 0x01	; 1
   16ece:	e0 1b       	sub	r30, r16
   16ed0:	f1 0b       	sbc	r31, r17
   16ed2:	32 97       	sbiw	r30, 0x02	; 2
   16ed4:	28 f4       	brcc	.+10     	; 0x16ee0 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x84>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      strcat(str, "0");
   16ed6:	65 ea       	ldi	r22, 0xA5	; 165
   16ed8:	78 e0       	ldi	r23, 0x08	; 8
   16eda:	c5 01       	movw	r24, r10
   16edc:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    strcat(str, tmp1); 
   16ee0:	b8 01       	movw	r22, r16
   16ee2:	c5 01       	movw	r24, r10
   16ee4:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
    if (a < maxBytes - 1)
   16ee8:	e8 14       	cp	r14, r8
   16eea:	f9 04       	cpc	r15, r9
   16eec:	34 f4       	brge	.+12     	; 0x16efa <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x9e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
    {
      tmp1[0] = sep;
   16eee:	39 82       	std	Y+1, r3	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      tmp1[1] = 0;
   16ef0:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:132
      strcat(str, tmp1);
   16ef2:	b8 01       	movw	r22, r16
   16ef4:	c5 01       	movw	r24, r10
   16ef6:	0e 94 69 d7 	call	0x1aed2	; 0x1aed2 <strcat>
   16efa:	ff ef       	ldi	r31, 0xFF	; 255
   16efc:	ef 1a       	sub	r14, r31
   16efe:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122 (discriminator 2)

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   16f00:	d6 cf       	rjmp	.-84     	; 0x16eae <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   16f02:	28 96       	adiw	r28, 0x08	; 8
   16f04:	0f b6       	in	r0, 0x3f	; 63
   16f06:	f8 94       	cli
   16f08:	de bf       	out	0x3e, r29	; 62
   16f0a:	0f be       	out	0x3f, r0	; 63
   16f0c:	cd bf       	out	0x3d, r28	; 61
   16f0e:	df 91       	pop	r29
   16f10:	cf 91       	pop	r28
   16f12:	1f 91       	pop	r17
   16f14:	0f 91       	pop	r16
   16f16:	ff 90       	pop	r15
   16f18:	ef 90       	pop	r14
   16f1a:	df 90       	pop	r13
   16f1c:	cf 90       	pop	r12
   16f1e:	bf 90       	pop	r11
   16f20:	af 90       	pop	r10
   16f22:	9f 90       	pop	r9
   16f24:	8f 90       	pop	r8
   16f26:	7f 90       	pop	r7
   16f28:	6f 90       	pop	r6
   16f2a:	5f 90       	pop	r5
   16f2c:	4f 90       	pop	r4
   16f2e:	3f 90       	pop	r3
   16f30:	08 95       	ret

00016f32 <PID::SetTunings(double, double, double, int)>:
_ZN3PID10SetTuningsEdddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:103
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   16f32:	4f 92       	push	r4
   16f34:	5f 92       	push	r5
   16f36:	6f 92       	push	r6
   16f38:	7f 92       	push	r7
   16f3a:	8f 92       	push	r8
   16f3c:	9f 92       	push	r9
   16f3e:	af 92       	push	r10
   16f40:	bf 92       	push	r11
   16f42:	cf 92       	push	r12
   16f44:	df 92       	push	r13
   16f46:	ef 92       	push	r14
   16f48:	ff 92       	push	r15
   16f4a:	0f 93       	push	r16
   16f4c:	1f 93       	push	r17
   16f4e:	cf 93       	push	r28
   16f50:	df 93       	push	r29
   16f52:	00 d0       	rcall	.+0      	; 0x16f54 <PID::SetTunings(double, double, double, int)+0x22>
   16f54:	00 d0       	rcall	.+0      	; 0x16f56 <PID::SetTunings(double, double, double, int)+0x24>
   16f56:	cd b7       	in	r28, 0x3d	; 61
   16f58:	de b7       	in	r29, 0x3e	; 62
   16f5a:	9e 83       	std	Y+6, r25	; 0x06
   16f5c:	8d 83       	std	Y+5, r24	; 0x05
   16f5e:	49 83       	std	Y+1, r20	; 0x01
   16f60:	5a 83       	std	Y+2, r21	; 0x02
   16f62:	6b 83       	std	Y+3, r22	; 0x03
   16f64:	7c 83       	std	Y+4, r23	; 0x04
   16f66:	28 01       	movw	r4, r16
   16f68:	39 01       	movw	r6, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
   if (Kp<0 || Ki<0 || Kd<0) return;
   16f6a:	20 e0       	ldi	r18, 0x00	; 0
   16f6c:	30 e0       	ldi	r19, 0x00	; 0
   16f6e:	a9 01       	movw	r20, r18
   16f70:	69 81       	ldd	r22, Y+1	; 0x01
   16f72:	7a 81       	ldd	r23, Y+2	; 0x02
   16f74:	8b 81       	ldd	r24, Y+3	; 0x03
   16f76:	9c 81       	ldd	r25, Y+4	; 0x04
   16f78:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   16f7c:	87 fd       	sbrc	r24, 7
   16f7e:	97 c0       	rjmp	.+302    	; 0x170ae <PID::SetTunings(double, double, double, int)+0x17c>
   16f80:	20 e0       	ldi	r18, 0x00	; 0
   16f82:	30 e0       	ldi	r19, 0x00	; 0
   16f84:	a9 01       	movw	r20, r18
   16f86:	c3 01       	movw	r24, r6
   16f88:	b8 01       	movw	r22, r16
   16f8a:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   16f8e:	87 fd       	sbrc	r24, 7
   16f90:	8e c0       	rjmp	.+284    	; 0x170ae <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104 (discriminator 2)
   16f92:	20 e0       	ldi	r18, 0x00	; 0
   16f94:	30 e0       	ldi	r19, 0x00	; 0
   16f96:	a9 01       	movw	r20, r18
   16f98:	c7 01       	movw	r24, r14
   16f9a:	b6 01       	movw	r22, r12
   16f9c:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   16fa0:	87 fd       	sbrc	r24, 7
   16fa2:	85 c0       	rjmp	.+266    	; 0x170ae <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106

   pOn = POn;
   16fa4:	ad 81       	ldd	r26, Y+5	; 0x05
   16fa6:	be 81       	ldd	r27, Y+6	; 0x06
   16fa8:	5b 96       	adiw	r26, 0x1b	; 27
   16faa:	bc 92       	st	X, r11
   16fac:	ae 92       	st	-X, r10
   16fae:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   16fb0:	81 e0       	ldi	r24, 0x01	; 1
   16fb2:	aa 94       	dec	r10
   16fb4:	ab 28       	or	r10, r11
   16fb6:	09 f0       	breq	.+2      	; 0x16fba <PID::SetTunings(double, double, double, int)+0x88>
   16fb8:	80 e0       	ldi	r24, 0x00	; 0
   16fba:	ed 81       	ldd	r30, Y+5	; 0x05
   16fbc:	fe 81       	ldd	r31, Y+6	; 0x06
   16fbe:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   16fc0:	89 81       	ldd	r24, Y+1	; 0x01
   16fc2:	9a 81       	ldd	r25, Y+2	; 0x02
   16fc4:	ab 81       	ldd	r26, Y+3	; 0x03
   16fc6:	bc 81       	ldd	r27, Y+4	; 0x04
   16fc8:	80 83       	st	Z, r24
   16fca:	91 83       	std	Z+1, r25	; 0x01
   16fcc:	a2 83       	std	Z+2, r26	; 0x02
   16fce:	b3 83       	std	Z+3, r27	; 0x03
   16fd0:	44 82       	std	Z+4, r4	; 0x04
   16fd2:	55 82       	std	Z+5, r5	; 0x05
   16fd4:	66 82       	std	Z+6, r6	; 0x06
   16fd6:	77 82       	std	Z+7, r7	; 0x07
   16fd8:	c0 86       	std	Z+8, r12	; 0x08
   16fda:	d1 86       	std	Z+9, r13	; 0x09
   16fdc:	e2 86       	std	Z+10, r14	; 0x0a
   16fde:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   16fe0:	66 a5       	ldd	r22, Z+46	; 0x2e
   16fe2:	77 a5       	ldd	r23, Z+47	; 0x2f
   16fe4:	80 a9       	ldd	r24, Z+48	; 0x30
   16fe6:	91 a9       	ldd	r25, Z+49	; 0x31
   16fe8:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
   16fec:	20 e0       	ldi	r18, 0x00	; 0
   16fee:	30 e0       	ldi	r19, 0x00	; 0
   16ff0:	4a e7       	ldi	r20, 0x7A	; 122
   16ff2:	54 e4       	ldi	r21, 0x44	; 68
   16ff4:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
   16ff8:	4b 01       	movw	r8, r22
   16ffa:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   16ffc:	89 81       	ldd	r24, Y+1	; 0x01
   16ffe:	9a 81       	ldd	r25, Y+2	; 0x02
   17000:	ab 81       	ldd	r26, Y+3	; 0x03
   17002:	bc 81       	ldd	r27, Y+4	; 0x04
   17004:	ed 81       	ldd	r30, Y+5	; 0x05
   17006:	fe 81       	ldd	r31, Y+6	; 0x06
   17008:	84 87       	std	Z+12, r24	; 0x0c
   1700a:	95 87       	std	Z+13, r25	; 0x0d
   1700c:	a6 87       	std	Z+14, r26	; 0x0e
   1700e:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   17010:	a5 01       	movw	r20, r10
   17012:	94 01       	movw	r18, r8
   17014:	c3 01       	movw	r24, r6
   17016:	b2 01       	movw	r22, r4
   17018:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
   1701c:	2b 01       	movw	r4, r22
   1701e:	3c 01       	movw	r6, r24
   17020:	ad 81       	ldd	r26, Y+5	; 0x05
   17022:	be 81       	ldd	r27, Y+6	; 0x06
   17024:	50 96       	adiw	r26, 0x10	; 16
   17026:	4d 92       	st	X+, r4
   17028:	5d 92       	st	X+, r5
   1702a:	6d 92       	st	X+, r6
   1702c:	7c 92       	st	X, r7
   1702e:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   17030:	a5 01       	movw	r20, r10
   17032:	94 01       	movw	r18, r8
   17034:	c7 01       	movw	r24, r14
   17036:	b6 01       	movw	r22, r12
   17038:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
   1703c:	6b 01       	movw	r12, r22
   1703e:	7c 01       	movw	r14, r24
   17040:	ed 81       	ldd	r30, Y+5	; 0x05
   17042:	fe 81       	ldd	r31, Y+6	; 0x06
   17044:	c4 8a       	std	Z+20, r12	; 0x14
   17046:	d5 8a       	std	Z+21, r13	; 0x15
   17048:	e6 8a       	std	Z+22, r14	; 0x16
   1704a:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   1704c:	80 8d       	ldd	r24, Z+24	; 0x18
   1704e:	91 8d       	ldd	r25, Z+25	; 0x19
   17050:	01 97       	sbiw	r24, 0x01	; 1
   17052:	69 f5       	brne	.+90     	; 0x170ae <PID::SetTunings(double, double, double, int)+0x17c>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   17054:	29 81       	ldd	r18, Y+1	; 0x01
   17056:	3a 81       	ldd	r19, Y+2	; 0x02
   17058:	4b 81       	ldd	r20, Y+3	; 0x03
   1705a:	5c 81       	ldd	r21, Y+4	; 0x04
   1705c:	60 e0       	ldi	r22, 0x00	; 0
   1705e:	70 e0       	ldi	r23, 0x00	; 0
   17060:	cb 01       	movw	r24, r22
   17062:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
   17066:	ad 81       	ldd	r26, Y+5	; 0x05
   17068:	be 81       	ldd	r27, Y+6	; 0x06
   1706a:	1c 96       	adiw	r26, 0x0c	; 12
   1706c:	6d 93       	st	X+, r22
   1706e:	7d 93       	st	X+, r23
   17070:	8d 93       	st	X+, r24
   17072:	9c 93       	st	X, r25
   17074:	1f 97       	sbiw	r26, 0x0f	; 15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   17076:	a3 01       	movw	r20, r6
   17078:	92 01       	movw	r18, r4
   1707a:	60 e0       	ldi	r22, 0x00	; 0
   1707c:	70 e0       	ldi	r23, 0x00	; 0
   1707e:	cb 01       	movw	r24, r22
   17080:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
   17084:	ed 81       	ldd	r30, Y+5	; 0x05
   17086:	fe 81       	ldd	r31, Y+6	; 0x06
   17088:	60 8b       	std	Z+16, r22	; 0x10
   1708a:	71 8b       	std	Z+17, r23	; 0x11
   1708c:	82 8b       	std	Z+18, r24	; 0x12
   1708e:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   17090:	a7 01       	movw	r20, r14
   17092:	96 01       	movw	r18, r12
   17094:	60 e0       	ldi	r22, 0x00	; 0
   17096:	70 e0       	ldi	r23, 0x00	; 0
   17098:	cb 01       	movw	r24, r22
   1709a:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
   1709e:	ad 81       	ldd	r26, Y+5	; 0x05
   170a0:	be 81       	ldd	r27, Y+6	; 0x06
   170a2:	54 96       	adiw	r26, 0x14	; 20
   170a4:	6d 93       	st	X+, r22
   170a6:	7d 93       	st	X+, r23
   170a8:	8d 93       	st	X+, r24
   170aa:	9c 93       	st	X, r25
   170ac:	57 97       	sbiw	r26, 0x17	; 23
/home/saric/Arduino/libraries/PID/PID_v1.cpp:122
   }
}
   170ae:	26 96       	adiw	r28, 0x06	; 6
   170b0:	0f b6       	in	r0, 0x3f	; 63
   170b2:	f8 94       	cli
   170b4:	de bf       	out	0x3e, r29	; 62
   170b6:	0f be       	out	0x3f, r0	; 63
   170b8:	cd bf       	out	0x3d, r28	; 61
   170ba:	df 91       	pop	r29
   170bc:	cf 91       	pop	r28
   170be:	1f 91       	pop	r17
   170c0:	0f 91       	pop	r16
   170c2:	ff 90       	pop	r15
   170c4:	ef 90       	pop	r14
   170c6:	df 90       	pop	r13
   170c8:	cf 90       	pop	r12
   170ca:	bf 90       	pop	r11
   170cc:	af 90       	pop	r10
   170ce:	9f 90       	pop	r9
   170d0:	8f 90       	pop	r8
   170d2:	7f 90       	pop	r7
   170d4:	6f 90       	pop	r6
   170d6:	5f 90       	pop	r5
   170d8:	4f 90       	pop	r4
   170da:	08 95       	ret

000170dc <PID::SetTunings(double, double, double)>:
_ZN3PID10SetTuningsEddd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:127

/* SetTunings(...)*************************************************************
 * Set Tunings using the last-rembered POn setting
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd){
   170dc:	af 92       	push	r10
   170de:	bf 92       	push	r11
   170e0:	cf 92       	push	r12
   170e2:	df 92       	push	r13
   170e4:	ef 92       	push	r14
   170e6:	ff 92       	push	r15
   170e8:	0f 93       	push	r16
   170ea:	1f 93       	push	r17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:128
    SetTunings(Kp, Ki, Kd, pOn); 
   170ec:	fc 01       	movw	r30, r24
   170ee:	a2 8c       	ldd	r10, Z+26	; 0x1a
   170f0:	b3 8c       	ldd	r11, Z+27	; 0x1b
   170f2:	0e 94 99 b7 	call	0x16f32	; 0x16f32 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:129
}
   170f6:	1f 91       	pop	r17
   170f8:	0f 91       	pop	r16
   170fa:	ff 90       	pop	r15
   170fc:	ef 90       	pop	r14
   170fe:	df 90       	pop	r13
   17100:	cf 90       	pop	r12
   17102:	bf 90       	pop	r11
   17104:	af 90       	pop	r10
   17106:	08 95       	ret

00017108 <PID::SetSampleTime(int)>:
_ZN3PID13SetSampleTimeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:135

/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   17108:	8f 92       	push	r8
   1710a:	9f 92       	push	r9
   1710c:	af 92       	push	r10
   1710e:	bf 92       	push	r11
   17110:	cf 92       	push	r12
   17112:	df 92       	push	r13
   17114:	ef 92       	push	r14
   17116:	ff 92       	push	r15
   17118:	cf 93       	push	r28
   1711a:	df 93       	push	r29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
   if (NewSampleTime > 0)
   1711c:	16 16       	cp	r1, r22
   1711e:	17 06       	cpc	r1, r23
   17120:	ac f5       	brge	.+106    	; 0x1718c <PID::SetSampleTime(int)+0x84>
   17122:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
   17124:	6b 01       	movw	r12, r22
   17126:	77 0f       	add	r23, r23
   17128:	ee 08       	sbc	r14, r14
   1712a:	ff 08       	sbc	r15, r15
   1712c:	c7 01       	movw	r24, r14
   1712e:	b6 01       	movw	r22, r12
   17130:	0e 94 2a d2 	call	0x1a454	; 0x1a454 <__floatsisf>
   17134:	4b 01       	movw	r8, r22
   17136:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
   17138:	6e a5       	ldd	r22, Y+46	; 0x2e
   1713a:	7f a5       	ldd	r23, Y+47	; 0x2f
   1713c:	88 a9       	ldd	r24, Y+48	; 0x30
   1713e:	99 a9       	ldd	r25, Y+49	; 0x31
   17140:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
   17144:	9b 01       	movw	r18, r22
   17146:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
   17148:	c5 01       	movw	r24, r10
   1714a:	b4 01       	movw	r22, r8
   1714c:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
   17150:	4b 01       	movw	r8, r22
   17152:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
   17154:	ac 01       	movw	r20, r24
   17156:	9b 01       	movw	r18, r22
   17158:	68 89       	ldd	r22, Y+16	; 0x10
   1715a:	79 89       	ldd	r23, Y+17	; 0x11
   1715c:	8a 89       	ldd	r24, Y+18	; 0x12
   1715e:	9b 89       	ldd	r25, Y+19	; 0x13
   17160:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
   17164:	68 8b       	std	Y+16, r22	; 0x10
   17166:	79 8b       	std	Y+17, r23	; 0x11
   17168:	8a 8b       	std	Y+18, r24	; 0x12
   1716a:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
   1716c:	a5 01       	movw	r20, r10
   1716e:	94 01       	movw	r18, r8
   17170:	6c 89       	ldd	r22, Y+20	; 0x14
   17172:	7d 89       	ldd	r23, Y+21	; 0x15
   17174:	8e 89       	ldd	r24, Y+22	; 0x16
   17176:	9f 89       	ldd	r25, Y+23	; 0x17
   17178:	0e 94 80 d1 	call	0x1a300	; 0x1a300 <__divsf3>
   1717c:	6c 8b       	std	Y+20, r22	; 0x14
   1717e:	7d 8b       	std	Y+21, r23	; 0x15
   17180:	8e 8b       	std	Y+22, r24	; 0x16
   17182:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
   17184:	ce a6       	std	Y+46, r12	; 0x2e
   17186:	df a6       	std	Y+47, r13	; 0x2f
   17188:	e8 aa       	std	Y+48, r14	; 0x30
   1718a:	f9 aa       	std	Y+49, r15	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:144
   }
}
   1718c:	df 91       	pop	r29
   1718e:	cf 91       	pop	r28
   17190:	ff 90       	pop	r15
   17192:	ef 90       	pop	r14
   17194:	df 90       	pop	r13
   17196:	cf 90       	pop	r12
   17198:	bf 90       	pop	r11
   1719a:	af 90       	pop	r10
   1719c:	9f 90       	pop	r9
   1719e:	8f 90       	pop	r8
   171a0:	08 95       	ret

000171a2 <PID::SetOutputLimits(double, double)>:
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:155
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   171a2:	2f 92       	push	r2
   171a4:	3f 92       	push	r3
   171a6:	4f 92       	push	r4
   171a8:	5f 92       	push	r5
   171aa:	6f 92       	push	r6
   171ac:	7f 92       	push	r7
   171ae:	8f 92       	push	r8
   171b0:	9f 92       	push	r9
   171b2:	af 92       	push	r10
   171b4:	bf 92       	push	r11
   171b6:	cf 92       	push	r12
   171b8:	df 92       	push	r13
   171ba:	ef 92       	push	r14
   171bc:	ff 92       	push	r15
   171be:	0f 93       	push	r16
   171c0:	1f 93       	push	r17
   171c2:	cf 93       	push	r28
   171c4:	df 93       	push	r29
   171c6:	ec 01       	movw	r28, r24
   171c8:	6a 01       	movw	r12, r20
   171ca:	7b 01       	movw	r14, r22
   171cc:	48 01       	movw	r8, r16
   171ce:	59 01       	movw	r10, r18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:156
   if(Min >= Max) return;
   171d0:	a9 01       	movw	r20, r18
   171d2:	98 01       	movw	r18, r16
   171d4:	cb 01       	movw	r24, r22
   171d6:	b6 01       	movw	r22, r12
   171d8:	0e 94 da d2 	call	0x1a5b4	; 0x1a5b4 <__gesf2>
   171dc:	87 ff       	sbrs	r24, 7
   171de:	4f c0       	rjmp	.+158    	; 0x1727e <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
   outMin = Min;
   171e0:	ca aa       	std	Y+50, r12	; 0x32
   171e2:	db aa       	std	Y+51, r13	; 0x33
   171e4:	ec aa       	std	Y+52, r14	; 0x34
   171e6:	fd aa       	std	Y+53, r15	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   171e8:	8e aa       	std	Y+54, r8	; 0x36
   171ea:	9f aa       	std	Y+55, r9	; 0x37
   171ec:	a8 ae       	std	Y+56, r10	; 0x38
   171ee:	b9 ae       	std	Y+57, r11	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:160

   if(inAuto)
   171f0:	8a ad       	ldd	r24, Y+58	; 0x3a
   171f2:	88 23       	and	r24, r24
   171f4:	09 f4       	brne	.+2      	; 0x171f8 <PID::SetOutputLimits(double, double)+0x56>
   171f6:	43 c0       	rjmp	.+134    	; 0x1727e <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   171f8:	2e 8c       	ldd	r2, Y+30	; 0x1e
   171fa:	3f 8c       	ldd	r3, Y+31	; 0x1f
   171fc:	f1 01       	movw	r30, r2
   171fe:	40 80       	ld	r4, Z
   17200:	51 80       	ldd	r5, Z+1	; 0x01
   17202:	62 80       	ldd	r6, Z+2	; 0x02
   17204:	73 80       	ldd	r7, Z+3	; 0x03
   17206:	a3 01       	movw	r20, r6
   17208:	92 01       	movw	r18, r4
   1720a:	c5 01       	movw	r24, r10
   1720c:	b8 01       	movw	r22, r16
   1720e:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   17212:	87 ff       	sbrs	r24, 7
   17214:	1a c0       	rjmp	.+52     	; 0x1724a <PID::SetOutputLimits(double, double)+0xa8>
   17216:	f1 01       	movw	r30, r2
   17218:	80 82       	st	Z, r8
   1721a:	91 82       	std	Z+1, r9	; 0x01
   1721c:	a2 82       	std	Z+2, r10	; 0x02
   1721e:	b3 82       	std	Z+3, r11	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   17220:	8e a0       	ldd	r8, Y+38	; 0x26
   17222:	9f a0       	ldd	r9, Y+39	; 0x27
   17224:	a8 a4       	ldd	r10, Y+40	; 0x28
   17226:	b9 a4       	ldd	r11, Y+41	; 0x29
   17228:	ce a8       	ldd	r12, Y+54	; 0x36
   1722a:	df a8       	ldd	r13, Y+55	; 0x37
   1722c:	e8 ac       	ldd	r14, Y+56	; 0x38
   1722e:	f9 ac       	ldd	r15, Y+57	; 0x39
   17230:	a7 01       	movw	r20, r14
   17232:	96 01       	movw	r18, r12
   17234:	c5 01       	movw	r24, r10
   17236:	b4 01       	movw	r22, r8
   17238:	0e 94 da d2 	call	0x1a5b4	; 0x1a5b4 <__gesf2>
   1723c:	18 16       	cp	r1, r24
   1723e:	9c f4       	brge	.+38     	; 0x17266 <PID::SetOutputLimits(double, double)+0xc4>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   17240:	ce a2       	std	Y+38, r12	; 0x26
   17242:	df a2       	std	Y+39, r13	; 0x27
   17244:	e8 a6       	std	Y+40, r14	; 0x28
   17246:	f9 a6       	std	Y+41, r15	; 0x29
   17248:	1a c0       	rjmp	.+52     	; 0x1727e <PID::SetOutputLimits(double, double)+0xdc>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   1724a:	a3 01       	movw	r20, r6
   1724c:	92 01       	movw	r18, r4
   1724e:	c7 01       	movw	r24, r14
   17250:	b6 01       	movw	r22, r12
   17252:	0e 94 da d2 	call	0x1a5b4	; 0x1a5b4 <__gesf2>
   17256:	18 16       	cp	r1, r24
   17258:	1c f7       	brge	.-58     	; 0x17220 <PID::SetOutputLimits(double, double)+0x7e>
   1725a:	f1 01       	movw	r30, r2
   1725c:	c0 82       	st	Z, r12
   1725e:	d1 82       	std	Z+1, r13	; 0x01
   17260:	e2 82       	std	Z+2, r14	; 0x02
   17262:	f3 82       	std	Z+3, r15	; 0x03
   17264:	dd cf       	rjmp	.-70     	; 0x17220 <PID::SetOutputLimits(double, double)+0x7e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   17266:	ca a8       	ldd	r12, Y+50	; 0x32
   17268:	db a8       	ldd	r13, Y+51	; 0x33
   1726a:	ec a8       	ldd	r14, Y+52	; 0x34
   1726c:	fd a8       	ldd	r15, Y+53	; 0x35
   1726e:	a7 01       	movw	r20, r14
   17270:	96 01       	movw	r18, r12
   17272:	c5 01       	movw	r24, r10
   17274:	b4 01       	movw	r22, r8
   17276:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   1727a:	87 fd       	sbrc	r24, 7
   1727c:	e1 cf       	rjmp	.-62     	; 0x17240 <PID::SetOutputLimits(double, double)+0x9e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:168
   }
}
   1727e:	df 91       	pop	r29
   17280:	cf 91       	pop	r28
   17282:	1f 91       	pop	r17
   17284:	0f 91       	pop	r16
   17286:	ff 90       	pop	r15
   17288:	ef 90       	pop	r14
   1728a:	df 90       	pop	r13
   1728c:	cf 90       	pop	r12
   1728e:	bf 90       	pop	r11
   17290:	af 90       	pop	r10
   17292:	9f 90       	pop	r9
   17294:	8f 90       	pop	r8
   17296:	7f 90       	pop	r7
   17298:	6f 90       	pop	r6
   1729a:	5f 90       	pop	r5
   1729c:	4f 90       	pop	r4
   1729e:	3f 90       	pop	r3
   172a0:	2f 90       	pop	r2
   172a2:	08 95       	ret

000172a4 <PID::Initialize()>:
_ZN3PID10InitializeEv():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:190
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   172a4:	8f 92       	push	r8
   172a6:	9f 92       	push	r9
   172a8:	af 92       	push	r10
   172aa:	bf 92       	push	r11
   172ac:	cf 92       	push	r12
   172ae:	df 92       	push	r13
   172b0:	ef 92       	push	r14
   172b2:	ff 92       	push	r15
   172b4:	cf 93       	push	r28
   172b6:	df 93       	push	r29
   172b8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
   outputSum = *myOutput;
   172ba:	ee 8d       	ldd	r30, Y+30	; 0x1e
   172bc:	ff 8d       	ldd	r31, Y+31	; 0x1f
   172be:	c0 80       	ld	r12, Z
   172c0:	d1 80       	ldd	r13, Z+1	; 0x01
   172c2:	e2 80       	ldd	r14, Z+2	; 0x02
   172c4:	f3 80       	ldd	r15, Z+3	; 0x03
   172c6:	ce a2       	std	Y+38, r12	; 0x26
   172c8:	df a2       	std	Y+39, r13	; 0x27
   172ca:	e8 a6       	std	Y+40, r14	; 0x28
   172cc:	f9 a6       	std	Y+41, r15	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   172ce:	ec 8d       	ldd	r30, Y+28	; 0x1c
   172d0:	fd 8d       	ldd	r31, Y+29	; 0x1d
   172d2:	80 81       	ld	r24, Z
   172d4:	91 81       	ldd	r25, Z+1	; 0x01
   172d6:	a2 81       	ldd	r26, Z+2	; 0x02
   172d8:	b3 81       	ldd	r27, Z+3	; 0x03
   172da:	8a a7       	std	Y+42, r24	; 0x2a
   172dc:	9b a7       	std	Y+43, r25	; 0x2b
   172de:	ac a7       	std	Y+44, r26	; 0x2c
   172e0:	bd a7       	std	Y+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   172e2:	8e a8       	ldd	r8, Y+54	; 0x36
   172e4:	9f a8       	ldd	r9, Y+55	; 0x37
   172e6:	a8 ac       	ldd	r10, Y+56	; 0x38
   172e8:	b9 ac       	ldd	r11, Y+57	; 0x39
   172ea:	a5 01       	movw	r20, r10
   172ec:	94 01       	movw	r18, r8
   172ee:	c7 01       	movw	r24, r14
   172f0:	b6 01       	movw	r22, r12
   172f2:	0e 94 da d2 	call	0x1a5b4	; 0x1a5b4 <__gesf2>
   172f6:	18 16       	cp	r1, r24
   172f8:	2c f4       	brge	.+10     	; 0x17304 <PID::Initialize()+0x60>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194 (discriminator 1)
   else if(outputSum < outMin) outputSum = outMin;
   172fa:	8e a2       	std	Y+38, r8	; 0x26
   172fc:	9f a2       	std	Y+39, r9	; 0x27
   172fe:	a8 a6       	std	Y+40, r10	; 0x28
   17300:	b9 a6       	std	Y+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195 (discriminator 1)
}
   17302:	0c c0       	rjmp	.+24     	; 0x1731c <PID::Initialize()+0x78>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   17304:	8a a8       	ldd	r8, Y+50	; 0x32
   17306:	9b a8       	ldd	r9, Y+51	; 0x33
   17308:	ac a8       	ldd	r10, Y+52	; 0x34
   1730a:	bd a8       	ldd	r11, Y+53	; 0x35
   1730c:	a5 01       	movw	r20, r10
   1730e:	94 01       	movw	r18, r8
   17310:	c7 01       	movw	r24, r14
   17312:	b6 01       	movw	r22, r12
   17314:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   17318:	87 fd       	sbrc	r24, 7
   1731a:	ef cf       	rjmp	.-34     	; 0x172fa <PID::Initialize()+0x56>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:195
}
   1731c:	df 91       	pop	r29
   1731e:	cf 91       	pop	r28
   17320:	ff 90       	pop	r15
   17322:	ef 90       	pop	r14
   17324:	df 90       	pop	r13
   17326:	cf 90       	pop	r12
   17328:	bf 90       	pop	r11
   1732a:	af 90       	pop	r10
   1732c:	9f 90       	pop	r9
   1732e:	8f 90       	pop	r8
   17330:	08 95       	ret

00017332 <PID::SetMode(int)>:
_ZN3PID7SetModeEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:176
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
   17332:	1f 93       	push	r17
   17334:	cf 93       	push	r28
   17336:	df 93       	push	r29
   17338:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:177
    bool newAuto = (Mode == AUTOMATIC);
   1733a:	11 e0       	ldi	r17, 0x01	; 1
   1733c:	61 30       	cpi	r22, 0x01	; 1
   1733e:	71 05       	cpc	r23, r1
   17340:	09 f0       	breq	.+2      	; 0x17344 <PID::SetMode(int)+0x12>
   17342:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
    if(newAuto && !inAuto)
   17344:	61 30       	cpi	r22, 0x01	; 1
   17346:	71 05       	cpc	r23, r1
   17348:	31 f4       	brne	.+12     	; 0x17356 <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178 (discriminator 1)
   1734a:	8a ad       	ldd	r24, Y+58	; 0x3a
   1734c:	81 11       	cpse	r24, r1
   1734e:	03 c0       	rjmp	.+6      	; 0x17356 <PID::SetMode(int)+0x24>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:180
    {  /*we just went from manual to auto*/
        PID::Initialize();
   17350:	ce 01       	movw	r24, r28
   17352:	0e 94 52 b9 	call	0x172a4	; 0x172a4 <PID::Initialize()>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    }
    inAuto = newAuto;
   17356:	1a af       	std	Y+58, r17	; 0x3a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:183
}
   17358:	df 91       	pop	r29
   1735a:	cf 91       	pop	r28
   1735c:	1f 91       	pop	r17
   1735e:	08 95       	ret

00017360 <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
   17360:	0f 93       	push	r16
   17362:	1f 93       	push	r17
   17364:	cf 93       	push	r28
   17366:	df 93       	push	r29
   17368:	ec 01       	movw	r28, r24
   1736a:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
   1736c:	8a ad       	ldd	r24, Y+58	; 0x3a
   1736e:	88 23       	and	r24, r24
   17370:	61 f1       	breq	.+88     	; 0x173ca <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205 (discriminator 1)
   17372:	88 8d       	ldd	r24, Y+24	; 0x18
   17374:	99 8d       	ldd	r25, Y+25	; 0x19
   17376:	86 17       	cp	r24, r22
   17378:	97 07       	cpc	r25, r23
   1737a:	39 f1       	breq	.+78     	; 0x173ca <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
   1737c:	2c 85       	ldd	r18, Y+12	; 0x0c
   1737e:	3d 85       	ldd	r19, Y+13	; 0x0d
   17380:	4e 85       	ldd	r20, Y+14	; 0x0e
   17382:	5f 85       	ldd	r21, Y+15	; 0x0f
   17384:	60 e0       	ldi	r22, 0x00	; 0
   17386:	70 e0       	ldi	r23, 0x00	; 0
   17388:	cb 01       	movw	r24, r22
   1738a:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
   1738e:	6c 87       	std	Y+12, r22	; 0x0c
   17390:	7d 87       	std	Y+13, r23	; 0x0d
   17392:	8e 87       	std	Y+14, r24	; 0x0e
   17394:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
   17396:	28 89       	ldd	r18, Y+16	; 0x10
   17398:	39 89       	ldd	r19, Y+17	; 0x11
   1739a:	4a 89       	ldd	r20, Y+18	; 0x12
   1739c:	5b 89       	ldd	r21, Y+19	; 0x13
   1739e:	60 e0       	ldi	r22, 0x00	; 0
   173a0:	70 e0       	ldi	r23, 0x00	; 0
   173a2:	cb 01       	movw	r24, r22
   173a4:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
   173a8:	68 8b       	std	Y+16, r22	; 0x10
   173aa:	79 8b       	std	Y+17, r23	; 0x11
   173ac:	8a 8b       	std	Y+18, r24	; 0x12
   173ae:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
   173b0:	2c 89       	ldd	r18, Y+20	; 0x14
   173b2:	3d 89       	ldd	r19, Y+21	; 0x15
   173b4:	4e 89       	ldd	r20, Y+22	; 0x16
   173b6:	5f 89       	ldd	r21, Y+23	; 0x17
   173b8:	60 e0       	ldi	r22, 0x00	; 0
   173ba:	70 e0       	ldi	r23, 0x00	; 0
   173bc:	cb 01       	movw	r24, r22
   173be:	0e 94 0e d1 	call	0x1a21c	; 0x1a21c <__subsf3>
   173c2:	6c 8b       	std	Y+20, r22	; 0x14
   173c4:	7d 8b       	std	Y+21, r23	; 0x15
   173c6:	8e 8b       	std	Y+22, r24	; 0x16
   173c8:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
   173ca:	19 8f       	std	Y+25, r17	; 0x19
   173cc:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
   173ce:	df 91       	pop	r29
   173d0:	cf 91       	pop	r28
   173d2:	1f 91       	pop	r17
   173d4:	0f 91       	pop	r16
   173d6:	08 95       	ret

000173d8 <PID::PID(double*, double*, double*, double, double, double, int, int)>:
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:20

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
   173d8:	4f 92       	push	r4
   173da:	5f 92       	push	r5
   173dc:	6f 92       	push	r6
   173de:	7f 92       	push	r7
   173e0:	8f 92       	push	r8
   173e2:	9f 92       	push	r9
   173e4:	af 92       	push	r10
   173e6:	bf 92       	push	r11
   173e8:	cf 92       	push	r12
   173ea:	df 92       	push	r13
   173ec:	ef 92       	push	r14
   173ee:	ff 92       	push	r15
   173f0:	0f 93       	push	r16
   173f2:	1f 93       	push	r17
   173f4:	cf 93       	push	r28
   173f6:	df 93       	push	r29
   173f8:	00 d0       	rcall	.+0      	; 0x173fa <PID::PID(double*, double*, double*, double, double, double, int, int)+0x22>
   173fa:	1f 92       	push	r1
   173fc:	cd b7       	in	r28, 0x3d	; 61
   173fe:	de b7       	in	r29, 0x3e	; 62
   17400:	4c 01       	movw	r8, r24
   17402:	27 01       	movw	r4, r14
   17404:	38 01       	movw	r6, r16
   17406:	a9 82       	std	Y+1, r10	; 0x01
   17408:	ba 82       	std	Y+2, r11	; 0x02
   1740a:	cb 82       	std	Y+3, r12	; 0x03
   1740c:	dc 82       	std	Y+4, r13	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   1740e:	fc 01       	movw	r30, r24
   17410:	57 8f       	std	Z+31, r21	; 0x1f
   17412:	46 8f       	std	Z+30, r20	; 0x1e
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   17414:	75 8f       	std	Z+29, r23	; 0x1d
   17416:	64 8f       	std	Z+28, r22	; 0x1c
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   17418:	31 a3       	std	Z+33, r19	; 0x21
   1741a:	20 a3       	std	Z+32, r18	; 0x20
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   1741c:	12 ae       	std	Z+58, r1	; 0x3a
_ZN3PID15SetOutputLimitsEdd():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   1741e:	12 aa       	std	Z+50, r1	; 0x32
   17420:	13 aa       	std	Z+51, r1	; 0x33
   17422:	14 aa       	std	Z+52, r1	; 0x34
   17424:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   17426:	80 e0       	ldi	r24, 0x00	; 0
   17428:	90 e0       	ldi	r25, 0x00	; 0
   1742a:	af e7       	ldi	r26, 0x7F	; 127
   1742c:	b3 e4       	ldi	r27, 0x43	; 67
   1742e:	86 ab       	std	Z+54, r24	; 0x36
   17430:	97 ab       	std	Z+55, r25	; 0x37
   17432:	a0 af       	std	Z+56, r26	; 0x38
   17434:	b1 af       	std	Z+57, r27	; 0x39
_ZN3PIDC2EPdS0_S0_dddii():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   17436:	84 e6       	ldi	r24, 0x64	; 100
   17438:	90 e0       	ldi	r25, 0x00	; 0
   1743a:	a0 e0       	ldi	r26, 0x00	; 0
   1743c:	b0 e0       	ldi	r27, 0x00	; 0
   1743e:	86 a7       	std	Z+46, r24	; 0x2e
   17440:	97 a7       	std	Z+47, r25	; 0x2f
   17442:	a0 ab       	std	Z+48, r26	; 0x30
   17444:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   17446:	6e 8d       	ldd	r22, Y+30	; 0x1e
   17448:	7f 8d       	ldd	r23, Y+31	; 0x1f
   1744a:	c4 01       	movw	r24, r8
   1744c:	0e 94 b0 b9 	call	0x17360	; 0x17360 <PID::SetControllerDirection(int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:34
    PID::SetTunings(Kp, Ki, Kd, POn);
   17450:	ac 8c       	ldd	r10, Y+28	; 0x1c
   17452:	bd 8c       	ldd	r11, Y+29	; 0x1d
   17454:	c8 8c       	ldd	r12, Y+24	; 0x18
   17456:	d9 8c       	ldd	r13, Y+25	; 0x19
   17458:	ea 8c       	ldd	r14, Y+26	; 0x1a
   1745a:	fb 8c       	ldd	r15, Y+27	; 0x1b
   1745c:	09 81       	ldd	r16, Y+1	; 0x01
   1745e:	1a 81       	ldd	r17, Y+2	; 0x02
   17460:	2b 81       	ldd	r18, Y+3	; 0x03
   17462:	3c 81       	ldd	r19, Y+4	; 0x04
   17464:	b3 01       	movw	r22, r6
   17466:	a2 01       	movw	r20, r4
   17468:	c4 01       	movw	r24, r8
   1746a:	0e 94 99 b7 	call	0x16f32	; 0x16f32 <PID::SetTunings(double, double, double, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36

    lastTime = (millis() / 1000) - SampleTime;
   1746e:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17472:	28 ee       	ldi	r18, 0xE8	; 232
   17474:	33 e0       	ldi	r19, 0x03	; 3
   17476:	40 e0       	ldi	r20, 0x00	; 0
   17478:	50 e0       	ldi	r21, 0x00	; 0
   1747a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1747e:	f4 01       	movw	r30, r8
   17480:	86 a5       	ldd	r24, Z+46	; 0x2e
   17482:	97 a5       	ldd	r25, Z+47	; 0x2f
   17484:	a0 a9       	ldd	r26, Z+48	; 0x30
   17486:	b1 a9       	ldd	r27, Z+49	; 0x31
   17488:	28 1b       	sub	r18, r24
   1748a:	39 0b       	sbc	r19, r25
   1748c:	4a 0b       	sbc	r20, r26
   1748e:	5b 0b       	sbc	r21, r27
   17490:	22 a3       	std	Z+34, r18	; 0x22
   17492:	33 a3       	std	Z+35, r19	; 0x23
   17494:	44 a3       	std	Z+36, r20	; 0x24
   17496:	55 a3       	std	Z+37, r21	; 0x25
/home/saric/Arduino/libraries/PID/PID_v1.cpp:37
}
   17498:	0f 90       	pop	r0
   1749a:	0f 90       	pop	r0
   1749c:	0f 90       	pop	r0
   1749e:	0f 90       	pop	r0
   174a0:	df 91       	pop	r29
   174a2:	cf 91       	pop	r28
   174a4:	1f 91       	pop	r17
   174a6:	0f 91       	pop	r16
   174a8:	ff 90       	pop	r15
   174aa:	ef 90       	pop	r14
   174ac:	df 90       	pop	r13
   174ae:	cf 90       	pop	r12
   174b0:	bf 90       	pop	r11
   174b2:	af 90       	pop	r10
   174b4:	9f 90       	pop	r9
   174b6:	8f 90       	pop	r8
   174b8:	7f 90       	pop	r7
   174ba:	6f 90       	pop	r6
   174bc:	5f 90       	pop	r5
   174be:	4f 90       	pop	r4
   174c0:	08 95       	ret

000174c2 <PID::PID(double*, double*, double*, double, double, double, int)>:
_ZN3PIDC2EPdS0_S0_dddi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:44
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
   174c2:	8f 92       	push	r8
   174c4:	9f 92       	push	r9
   174c6:	af 92       	push	r10
   174c8:	bf 92       	push	r11
   174ca:	cf 92       	push	r12
   174cc:	df 92       	push	r13
   174ce:	ef 92       	push	r14
   174d0:	ff 92       	push	r15
   174d2:	0f 93       	push	r16
   174d4:	1f 93       	push	r17
   174d6:	cf 93       	push	r28
   174d8:	df 93       	push	r29
   174da:	cd b7       	in	r28, 0x3d	; 61
   174dc:	de b7       	in	r29, 0x3e	; 62
   174de:	e8 89       	ldd	r30, Y+16	; 0x10
   174e0:	f9 89       	ldd	r31, Y+17	; 0x11
   174e2:	aa 89       	ldd	r26, Y+18	; 0x12
   174e4:	bb 89       	ldd	r27, Y+19	; 0x13
   174e6:	9c 88       	ldd	r9, Y+20	; 0x14
   174e8:	8d 88       	ldd	r8, Y+21	; 0x15
/home/saric/Arduino/libraries/PID/PID_v1.cpp:46
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
   174ea:	8f 92       	push	r8
   174ec:	9f 92       	push	r9
   174ee:	1f 92       	push	r1
   174f0:	99 24       	eor	r9, r9
   174f2:	93 94       	inc	r9
   174f4:	9f 92       	push	r9
   174f6:	bf 93       	push	r27
   174f8:	af 93       	push	r26
   174fa:	ff 93       	push	r31
   174fc:	ef 93       	push	r30
   174fe:	0e 94 ec b9 	call	0x173d8	; 0x173d8 <PID::PID(double*, double*, double*, double, double, double, int, int)>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:49
{

}
   17502:	0f b6       	in	r0, 0x3f	; 63
   17504:	f8 94       	cli
   17506:	de bf       	out	0x3e, r29	; 62
   17508:	0f be       	out	0x3f, r0	; 63
   1750a:	cd bf       	out	0x3d, r28	; 61
   1750c:	df 91       	pop	r29
   1750e:	cf 91       	pop	r28
   17510:	1f 91       	pop	r17
   17512:	0f 91       	pop	r16
   17514:	ff 90       	pop	r15
   17516:	ef 90       	pop	r14
   17518:	df 90       	pop	r13
   1751a:	cf 90       	pop	r12
   1751c:	bf 90       	pop	r11
   1751e:	af 90       	pop	r10
   17520:	9f 90       	pop	r9
   17522:	8f 90       	pop	r8
   17524:	08 95       	ret

00017526 <PubSubClient::PubSubClient(Client&)>:
_ZN12PubSubClientC2ER6Client():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:586
}

PubSubClient& PubSubClient::setStream(Stream& stream){
    this->stream = &stream;
    return *this;
}
   17526:	0f 93       	push	r16
   17528:	1f 93       	push	r17
   1752a:	cf 93       	push	r28
   1752c:	df 93       	push	r29
   1752e:	ec 01       	movw	r28, r24
   17530:	8b 01       	movw	r16, r22
   17532:	81 5f       	subi	r24, 0xF1	; 241
   17534:	9d 4f       	sbci	r25, 0xFD	; 253
   17536:	0e 94 a3 cf 	call	0x19f46	; 0x19f46 <IPAddress::IPAddress()>
   1753a:	fe 01       	movw	r30, r28
   1753c:	e5 5e       	subi	r30, 0xE5	; 229
   1753e:	fd 4f       	sbci	r31, 0xFD	; 253
   17540:	8f ef       	ldi	r24, 0xFF	; 255
   17542:	9f ef       	ldi	r25, 0xFF	; 255
   17544:	91 83       	std	Z+1, r25	; 0x01
   17546:	80 83       	st	Z, r24
_ZN12PubSubClient9setClientER6Client():
   17548:	19 83       	std	Y+1, r17	; 0x01
   1754a:	08 83       	st	Y, r16
_ZN12PubSubClientC2ER6Client():
   1754c:	c7 5e       	subi	r28, 0xE7	; 231
   1754e:	dd 4f       	sbci	r29, 0xFD	; 253
   17550:	19 82       	std	Y+1, r1	; 0x01
   17552:	18 82       	st	Y, r1
   17554:	df 91       	pop	r29
   17556:	cf 91       	pop	r28
   17558:	1f 91       	pop	r17
   1755a:	0f 91       	pop	r16
   1755c:	08 95       	ret

0001755e <PubSubClient::readByte(unsigned char*)>:
_ZN12PubSubClient8readByteEPh():
   1755e:	cf 92       	push	r12
   17560:	df 92       	push	r13
   17562:	ef 92       	push	r14
   17564:	ff 92       	push	r15
   17566:	0f 93       	push	r16
   17568:	1f 93       	push	r17
   1756a:	cf 93       	push	r28
   1756c:	df 93       	push	r29
   1756e:	ec 01       	movw	r28, r24
   17570:	8b 01       	movw	r16, r22
   17572:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17576:	6b 01       	movw	r12, r22
   17578:	7c 01       	movw	r14, r24
   1757a:	88 81       	ld	r24, Y
   1757c:	99 81       	ldd	r25, Y+1	; 0x01
   1757e:	dc 01       	movw	r26, r24
   17580:	ed 91       	ld	r30, X+
   17582:	fc 91       	ld	r31, X
   17584:	00 84       	ldd	r0, Z+8	; 0x08
   17586:	f1 85       	ldd	r31, Z+9	; 0x09
   17588:	e0 2d       	mov	r30, r0
   1758a:	19 95       	eicall
   1758c:	89 2b       	or	r24, r25
   1758e:	69 f4       	brne	.+26     	; 0x175aa <PubSubClient::readByte(unsigned char*)+0x4c>
   17590:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17594:	6c 19       	sub	r22, r12
   17596:	7d 09       	sbc	r23, r13
   17598:	8e 09       	sbc	r24, r14
   1759a:	9f 09       	sbc	r25, r15
   1759c:	62 33       	cpi	r22, 0x32	; 50
   1759e:	71 05       	cpc	r23, r1
   175a0:	81 05       	cpc	r24, r1
   175a2:	91 05       	cpc	r25, r1
   175a4:	50 f3       	brcs	.-44     	; 0x1757a <PubSubClient::readByte(unsigned char*)+0x1c>
   175a6:	80 e0       	ldi	r24, 0x00	; 0
   175a8:	0c c0       	rjmp	.+24     	; 0x175c2 <PubSubClient::readByte(unsigned char*)+0x64>
   175aa:	88 81       	ld	r24, Y
   175ac:	99 81       	ldd	r25, Y+1	; 0x01
   175ae:	dc 01       	movw	r26, r24
   175b0:	ed 91       	ld	r30, X+
   175b2:	fc 91       	ld	r31, X
   175b4:	02 84       	ldd	r0, Z+10	; 0x0a
   175b6:	f3 85       	ldd	r31, Z+11	; 0x0b
   175b8:	e0 2d       	mov	r30, r0
   175ba:	19 95       	eicall
   175bc:	f8 01       	movw	r30, r16
   175be:	80 83       	st	Z, r24
   175c0:	81 e0       	ldi	r24, 0x01	; 1
   175c2:	df 91       	pop	r29
   175c4:	cf 91       	pop	r28
   175c6:	1f 91       	pop	r17
   175c8:	0f 91       	pop	r16
   175ca:	ff 90       	pop	r15
   175cc:	ef 90       	pop	r14
   175ce:	df 90       	pop	r13
   175d0:	cf 90       	pop	r12
   175d2:	08 95       	ret

000175d4 <PubSubClient::readByte(unsigned char*, unsigned int*)>:
_ZN12PubSubClient8readByteEPhPj():
   175d4:	0f 93       	push	r16
   175d6:	1f 93       	push	r17
   175d8:	cf 93       	push	r28
   175da:	df 93       	push	r29
   175dc:	8a 01       	movw	r16, r20
   175de:	fa 01       	movw	r30, r20
   175e0:	c0 81       	ld	r28, Z
   175e2:	d1 81       	ldd	r29, Z+1	; 0x01
   175e4:	6c 0f       	add	r22, r28
   175e6:	7d 1f       	adc	r23, r29
   175e8:	0e 94 af ba 	call	0x1755e	; 0x1755e <PubSubClient::readByte(unsigned char*)>
   175ec:	88 23       	and	r24, r24
   175ee:	21 f0       	breq	.+8      	; 0x175f8 <PubSubClient::readByte(unsigned char*, unsigned int*)+0x24>
   175f0:	21 96       	adiw	r28, 0x01	; 1
   175f2:	f8 01       	movw	r30, r16
   175f4:	d1 83       	std	Z+1, r29	; 0x01
   175f6:	c0 83       	st	Z, r28
   175f8:	df 91       	pop	r29
   175fa:	cf 91       	pop	r28
   175fc:	1f 91       	pop	r17
   175fe:	0f 91       	pop	r16
   17600:	08 95       	ret

00017602 <PubSubClient::readPacket(unsigned char*)>:
_ZN12PubSubClient10readPacketEPh():
   17602:	4f 92       	push	r4
   17604:	5f 92       	push	r5
   17606:	6f 92       	push	r6
   17608:	7f 92       	push	r7
   1760a:	8f 92       	push	r8
   1760c:	9f 92       	push	r9
   1760e:	af 92       	push	r10
   17610:	bf 92       	push	r11
   17612:	cf 92       	push	r12
   17614:	df 92       	push	r13
   17616:	ef 92       	push	r14
   17618:	ff 92       	push	r15
   1761a:	0f 93       	push	r16
   1761c:	1f 93       	push	r17
   1761e:	cf 93       	push	r28
   17620:	df 93       	push	r29
   17622:	00 d0       	rcall	.+0      	; 0x17624 <PubSubClient::readPacket(unsigned char*)+0x22>
   17624:	1f 92       	push	r1
   17626:	cd b7       	in	r28, 0x3d	; 61
   17628:	de b7       	in	r29, 0x3e	; 62
   1762a:	8c 01       	movw	r16, r24
   1762c:	4b 01       	movw	r8, r22
   1762e:	1a 82       	std	Y+2, r1	; 0x02
   17630:	19 82       	std	Y+1, r1	; 0x01
   17632:	7c 01       	movw	r14, r24
   17634:	22 e0       	ldi	r18, 0x02	; 2
   17636:	e2 0e       	add	r14, r18
   17638:	f1 1c       	adc	r15, r1
   1763a:	ae 01       	movw	r20, r28
   1763c:	4f 5f       	subi	r20, 0xFF	; 255
   1763e:	5f 4f       	sbci	r21, 0xFF	; 255
   17640:	b7 01       	movw	r22, r14
   17642:	0e 94 ea ba 	call	0x175d4	; 0x175d4 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   17646:	81 11       	cpse	r24, r1
   17648:	17 c0       	rjmp	.+46     	; 0x17678 <PubSubClient::readPacket(unsigned char*)+0x76>
   1764a:	90 e0       	ldi	r25, 0x00	; 0
   1764c:	80 e0       	ldi	r24, 0x00	; 0
   1764e:	0f 90       	pop	r0
   17650:	0f 90       	pop	r0
   17652:	0f 90       	pop	r0
   17654:	0f 90       	pop	r0
   17656:	df 91       	pop	r29
   17658:	cf 91       	pop	r28
   1765a:	1f 91       	pop	r17
   1765c:	0f 91       	pop	r16
   1765e:	ff 90       	pop	r15
   17660:	ef 90       	pop	r14
   17662:	df 90       	pop	r13
   17664:	cf 90       	pop	r12
   17666:	bf 90       	pop	r11
   17668:	af 90       	pop	r10
   1766a:	9f 90       	pop	r9
   1766c:	8f 90       	pop	r8
   1766e:	7f 90       	pop	r7
   17670:	6f 90       	pop	r6
   17672:	5f 90       	pop	r5
   17674:	4f 90       	pop	r4
   17676:	08 95       	ret
   17678:	d8 01       	movw	r26, r16
   1767a:	12 96       	adiw	r26, 0x02	; 2
   1767c:	dc 90       	ld	r13, X
   1767e:	1b 82       	std	Y+3, r1	; 0x03
   17680:	b1 2c       	mov	r11, r1
   17682:	a1 2c       	mov	r10, r1
   17684:	41 2c       	mov	r4, r1
   17686:	51 2c       	mov	r5, r1
   17688:	32 01       	movw	r6, r4
   1768a:	43 94       	inc	r4
   1768c:	be 01       	movw	r22, r28
   1768e:	6d 5f       	subi	r22, 0xFD	; 253
   17690:	7f 4f       	sbci	r23, 0xFF	; 255
   17692:	c8 01       	movw	r24, r16
   17694:	0e 94 af ba 	call	0x1755e	; 0x1755e <PubSubClient::readByte(unsigned char*)>
   17698:	88 23       	and	r24, r24
   1769a:	b9 f2       	breq	.-82     	; 0x1764a <PubSubClient::readPacket(unsigned char*)+0x48>
   1769c:	29 81       	ldd	r18, Y+1	; 0x01
   1769e:	3a 81       	ldd	r19, Y+2	; 0x02
   176a0:	c9 01       	movw	r24, r18
   176a2:	01 96       	adiw	r24, 0x01	; 1
   176a4:	9a 83       	std	Y+2, r25	; 0x02
   176a6:	89 83       	std	Y+1, r24	; 0x01
   176a8:	4b 81       	ldd	r20, Y+3	; 0x03
   176aa:	20 0f       	add	r18, r16
   176ac:	31 1f       	adc	r19, r17
   176ae:	f9 01       	movw	r30, r18
   176b0:	42 83       	std	Z+2, r20	; 0x02
   176b2:	24 2f       	mov	r18, r20
   176b4:	2f 77       	andi	r18, 0x7F	; 127
   176b6:	30 e0       	ldi	r19, 0x00	; 0
   176b8:	24 9d       	mul	r18, r4
   176ba:	b0 01       	movw	r22, r0
   176bc:	25 9d       	mul	r18, r5
   176be:	70 0d       	add	r23, r0
   176c0:	34 9d       	mul	r19, r4
   176c2:	70 0d       	add	r23, r0
   176c4:	11 24       	eor	r1, r1
   176c6:	a6 0e       	add	r10, r22
   176c8:	b7 1e       	adc	r11, r23
   176ca:	97 e0       	ldi	r25, 0x07	; 7
   176cc:	44 0c       	add	r4, r4
   176ce:	55 1c       	adc	r5, r5
   176d0:	66 1c       	adc	r6, r6
   176d2:	77 1c       	adc	r7, r7
   176d4:	9a 95       	dec	r25
   176d6:	d1 f7       	brne	.-12     	; 0x176cc <PubSubClient::readPacket(unsigned char*)+0xca>
   176d8:	47 fd       	sbrc	r20, 7
   176da:	d8 cf       	rjmp	.-80     	; 0x1768c <PubSubClient::readPacket(unsigned char*)+0x8a>
   176dc:	fd 2d       	mov	r31, r13
   176de:	f0 7f       	andi	r31, 0xF0	; 240
   176e0:	fc 83       	std	Y+4, r31	; 0x04
   176e2:	81 50       	subi	r24, 0x01	; 1
   176e4:	d4 01       	movw	r26, r8
   176e6:	8c 93       	st	X, r24
   176e8:	80 e0       	ldi	r24, 0x00	; 0
   176ea:	d1 2c       	mov	r13, r1
   176ec:	c1 2c       	mov	r12, r1
   176ee:	f0 33       	cpi	r31, 0x30	; 48
   176f0:	41 f5       	brne	.+80     	; 0x17742 <PubSubClient::readPacket(unsigned char*)+0x140>
   176f2:	ae 01       	movw	r20, r28
   176f4:	4f 5f       	subi	r20, 0xFF	; 255
   176f6:	5f 4f       	sbci	r21, 0xFF	; 255
   176f8:	b7 01       	movw	r22, r14
   176fa:	c8 01       	movw	r24, r16
   176fc:	0e 94 ea ba 	call	0x175d4	; 0x175d4 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   17700:	88 23       	and	r24, r24
   17702:	09 f4       	brne	.+2      	; 0x17706 <PubSubClient::readPacket(unsigned char*)+0x104>
   17704:	a2 cf       	rjmp	.-188    	; 0x1764a <PubSubClient::readPacket(unsigned char*)+0x48>
   17706:	ae 01       	movw	r20, r28
   17708:	4f 5f       	subi	r20, 0xFF	; 255
   1770a:	5f 4f       	sbci	r21, 0xFF	; 255
   1770c:	b7 01       	movw	r22, r14
   1770e:	c8 01       	movw	r24, r16
   17710:	0e 94 ea ba 	call	0x175d4	; 0x175d4 <PubSubClient::readByte(unsigned char*, unsigned int*)>
   17714:	88 23       	and	r24, r24
   17716:	09 f4       	brne	.+2      	; 0x1771a <PubSubClient::readPacket(unsigned char*)+0x118>
   17718:	98 cf       	rjmp	.-208    	; 0x1764a <PubSubClient::readPacket(unsigned char*)+0x48>
   1771a:	d4 01       	movw	r26, r8
   1771c:	ec 91       	ld	r30, X
   1771e:	e0 0f       	add	r30, r16
   17720:	f1 2f       	mov	r31, r17
   17722:	f1 1d       	adc	r31, r1
   17724:	c3 80       	ldd	r12, Z+3	; 0x03
   17726:	d1 2c       	mov	r13, r1
   17728:	dc 2c       	mov	r13, r12
   1772a:	cc 24       	eor	r12, r12
   1772c:	84 81       	ldd	r24, Z+4	; 0x04
   1772e:	c8 0e       	add	r12, r24
   17730:	d1 1c       	adc	r13, r1
   17732:	f8 01       	movw	r30, r16
   17734:	82 81       	ldd	r24, Z+2	; 0x02
   17736:	81 ff       	sbrs	r24, 1
   17738:	03 c0       	rjmp	.+6      	; 0x17740 <PubSubClient::readPacket(unsigned char*)+0x13e>
   1773a:	f2 e0       	ldi	r31, 0x02	; 2
   1773c:	cf 0e       	add	r12, r31
   1773e:	d1 1c       	adc	r13, r1
   17740:	82 e0       	ldi	r24, 0x02	; 2
   17742:	e8 2e       	mov	r14, r24
   17744:	f1 2c       	mov	r15, r1
   17746:	38 01       	movw	r6, r16
   17748:	27 ee       	ldi	r18, 0xE7	; 231
   1774a:	62 1a       	sub	r6, r18
   1774c:	2d ef       	ldi	r18, 0xFD	; 253
   1774e:	72 0a       	sbc	r7, r18
   17750:	ea 14       	cp	r14, r10
   17752:	fb 04       	cpc	r15, r11
   17754:	b0 f5       	brcc	.+108    	; 0x177c2 <PubSubClient::readPacket(unsigned char*)+0x1c0>
   17756:	be 01       	movw	r22, r28
   17758:	6d 5f       	subi	r22, 0xFD	; 253
   1775a:	7f 4f       	sbci	r23, 0xFF	; 255
   1775c:	c8 01       	movw	r24, r16
   1775e:	0e 94 af ba 	call	0x1755e	; 0x1755e <PubSubClient::readByte(unsigned char*)>
   17762:	88 23       	and	r24, r24
   17764:	09 f4       	brne	.+2      	; 0x17768 <PubSubClient::readPacket(unsigned char*)+0x166>
   17766:	71 cf       	rjmp	.-286    	; 0x1764a <PubSubClient::readPacket(unsigned char*)+0x48>
   17768:	d3 01       	movw	r26, r6
   1776a:	8d 91       	ld	r24, X+
   1776c:	9c 91       	ld	r25, X
   1776e:	00 97       	sbiw	r24, 0x00	; 0
   17770:	b1 f0       	breq	.+44     	; 0x1779e <PubSubClient::readPacket(unsigned char*)+0x19c>
   17772:	bc 81       	ldd	r27, Y+4	; 0x04
   17774:	b0 33       	cpi	r27, 0x30	; 48
   17776:	99 f4       	brne	.+38     	; 0x1779e <PubSubClient::readPacket(unsigned char*)+0x19c>
   17778:	29 81       	ldd	r18, Y+1	; 0x01
   1777a:	3a 81       	ldd	r19, Y+2	; 0x02
   1777c:	22 50       	subi	r18, 0x02	; 2
   1777e:	31 09       	sbc	r19, r1
   17780:	f4 01       	movw	r30, r8
   17782:	40 81       	ld	r20, Z
   17784:	24 1b       	sub	r18, r20
   17786:	31 09       	sbc	r19, r1
   17788:	c2 16       	cp	r12, r18
   1778a:	d3 06       	cpc	r13, r19
   1778c:	40 f4       	brcc	.+16     	; 0x1779e <PubSubClient::readPacket(unsigned char*)+0x19c>
   1778e:	dc 01       	movw	r26, r24
   17790:	ed 91       	ld	r30, X+
   17792:	fc 91       	ld	r31, X
   17794:	01 90       	ld	r0, Z+
   17796:	f0 81       	ld	r31, Z
   17798:	e0 2d       	mov	r30, r0
   1779a:	6b 81       	ldd	r22, Y+3	; 0x03
   1779c:	19 95       	eicall
   1779e:	89 81       	ldd	r24, Y+1	; 0x01
   177a0:	9a 81       	ldd	r25, Y+2	; 0x02
   177a2:	81 15       	cp	r24, r1
   177a4:	b2 e0       	ldi	r27, 0x02	; 2
   177a6:	9b 07       	cpc	r25, r27
   177a8:	28 f4       	brcc	.+10     	; 0x177b4 <PubSubClient::readPacket(unsigned char*)+0x1b2>
   177aa:	2b 81       	ldd	r18, Y+3	; 0x03
   177ac:	f8 01       	movw	r30, r16
   177ae:	e8 0f       	add	r30, r24
   177b0:	f9 1f       	adc	r31, r25
   177b2:	22 83       	std	Z+2, r18	; 0x02
   177b4:	01 96       	adiw	r24, 0x01	; 1
   177b6:	9a 83       	std	Y+2, r25	; 0x02
   177b8:	89 83       	std	Y+1, r24	; 0x01
   177ba:	ef ef       	ldi	r30, 0xFF	; 255
   177bc:	ee 1a       	sub	r14, r30
   177be:	fe 0a       	sbc	r15, r30
   177c0:	c7 cf       	rjmp	.-114    	; 0x17750 <PubSubClient::readPacket(unsigned char*)+0x14e>
   177c2:	f8 01       	movw	r30, r16
   177c4:	e7 5e       	subi	r30, 0xE7	; 231
   177c6:	fd 4f       	sbci	r31, 0xFD	; 253
   177c8:	80 81       	ld	r24, Z
   177ca:	91 81       	ldd	r25, Z+1	; 0x01
   177cc:	89 2b       	or	r24, r25
   177ce:	39 f4       	brne	.+14     	; 0x177de <PubSubClient::readPacket(unsigned char*)+0x1dc>
   177d0:	89 81       	ldd	r24, Y+1	; 0x01
   177d2:	9a 81       	ldd	r25, Y+2	; 0x02
   177d4:	81 30       	cpi	r24, 0x01	; 1
   177d6:	92 40       	sbci	r25, 0x02	; 2
   177d8:	10 f0       	brcs	.+4      	; 0x177de <PubSubClient::readPacket(unsigned char*)+0x1dc>
   177da:	1a 82       	std	Y+2, r1	; 0x02
   177dc:	19 82       	std	Y+1, r1	; 0x01
   177de:	89 81       	ldd	r24, Y+1	; 0x01
   177e0:	9a 81       	ldd	r25, Y+2	; 0x02
   177e2:	35 cf       	rjmp	.-406    	; 0x1764e <PubSubClient::readPacket(unsigned char*)+0x4c>

000177e4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
   177e4:	bf 92       	push	r11
   177e6:	cf 92       	push	r12
   177e8:	df 92       	push	r13
   177ea:	ef 92       	push	r14
   177ec:	ff 92       	push	r15
   177ee:	0f 93       	push	r16
   177f0:	1f 93       	push	r17
   177f2:	cf 93       	push	r28
   177f4:	df 93       	push	r29
   177f6:	00 d0       	rcall	.+0      	; 0x177f8 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   177f8:	1f 92       	push	r1
   177fa:	cd b7       	in	r28, 0x3d	; 61
   177fc:	de b7       	in	r29, 0x3e	; 62
   177fe:	7c 01       	movw	r14, r24
   17800:	b6 2e       	mov	r11, r22
   17802:	89 01       	movw	r16, r18
   17804:	c9 01       	movw	r24, r18
   17806:	30 e0       	ldi	r19, 0x00	; 0
   17808:	be 01       	movw	r22, r28
   1780a:	6f 5f       	subi	r22, 0xFF	; 255
   1780c:	7f 4f       	sbci	r23, 0xFF	; 255
   1780e:	6b 01       	movw	r12, r22
   17810:	28 2f       	mov	r18, r24
   17812:	2f 77       	andi	r18, 0x7F	; 127
   17814:	88 0f       	add	r24, r24
   17816:	89 2f       	mov	r24, r25
   17818:	88 1f       	adc	r24, r24
   1781a:	99 0b       	sbc	r25, r25
   1781c:	91 95       	neg	r25
   1781e:	00 97       	sbiw	r24, 0x00	; 0
   17820:	09 f0       	breq	.+2      	; 0x17824 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
   17822:	20 68       	ori	r18, 0x80	; 128
   17824:	f6 01       	movw	r30, r12
   17826:	e3 0f       	add	r30, r19
   17828:	f1 1d       	adc	r31, r1
   1782a:	20 83       	st	Z, r18
   1782c:	3f 5f       	subi	r19, 0xFF	; 255
   1782e:	00 97       	sbiw	r24, 0x00	; 0
   17830:	79 f7       	brne	.-34     	; 0x17810 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
   17832:	e3 2f       	mov	r30, r19
   17834:	f0 e0       	ldi	r31, 0x00	; 0
   17836:	ba 01       	movw	r22, r20
   17838:	6e 1b       	sub	r22, r30
   1783a:	7f 0b       	sbc	r23, r31
   1783c:	6c 5f       	subi	r22, 0xFC	; 252
   1783e:	7f 4f       	sbci	r23, 0xFF	; 255
   17840:	db 01       	movw	r26, r22
   17842:	bc 92       	st	X, r11
   17844:	4e 1b       	sub	r20, r30
   17846:	5f 0b       	sbc	r21, r31
   17848:	4b 5f       	subi	r20, 0xFB	; 251
   1784a:	5f 4f       	sbci	r21, 0xFF	; 255
   1784c:	c6 01       	movw	r24, r12
   1784e:	9c 01       	movw	r18, r24
   17850:	2c 19       	sub	r18, r12
   17852:	3d 09       	sbc	r19, r13
   17854:	2e 17       	cp	r18, r30
   17856:	3f 07       	cpc	r19, r31
   17858:	3c f4       	brge	.+14     	; 0x17868 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
   1785a:	dc 01       	movw	r26, r24
   1785c:	2d 91       	ld	r18, X+
   1785e:	cd 01       	movw	r24, r26
   17860:	da 01       	movw	r26, r20
   17862:	2d 93       	st	X+, r18
   17864:	ad 01       	movw	r20, r26
   17866:	f3 cf       	rjmp	.-26     	; 0x1784e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
   17868:	d7 01       	movw	r26, r14
   1786a:	8d 91       	ld	r24, X+
   1786c:	9c 91       	ld	r25, X
   1786e:	0f 5f       	subi	r16, 0xFF	; 255
   17870:	1f 4f       	sbci	r17, 0xFF	; 255
   17872:	0e 0f       	add	r16, r30
   17874:	1f 1f       	adc	r17, r31
   17876:	dc 01       	movw	r26, r24
   17878:	ed 91       	ld	r30, X+
   1787a:	fc 91       	ld	r31, X
   1787c:	02 80       	ldd	r0, Z+2	; 0x02
   1787e:	f3 81       	ldd	r31, Z+3	; 0x03
   17880:	e0 2d       	mov	r30, r0
   17882:	a8 01       	movw	r20, r16
   17884:	19 95       	eicall
   17886:	6c 01       	movw	r12, r24
   17888:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   1788c:	f7 01       	movw	r30, r14
   1788e:	ec 5f       	subi	r30, 0xFC	; 252
   17890:	fd 4f       	sbci	r31, 0xFD	; 253
   17892:	60 83       	st	Z, r22
   17894:	71 83       	std	Z+1, r23	; 0x01
   17896:	82 83       	std	Z+2, r24	; 0x02
   17898:	93 83       	std	Z+3, r25	; 0x03
   1789a:	81 e0       	ldi	r24, 0x01	; 1
   1789c:	0c 15       	cp	r16, r12
   1789e:	1d 05       	cpc	r17, r13
   178a0:	09 f0       	breq	.+2      	; 0x178a4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   178a2:	80 e0       	ldi	r24, 0x00	; 0
   178a4:	0f 90       	pop	r0
   178a6:	0f 90       	pop	r0
   178a8:	0f 90       	pop	r0
   178aa:	0f 90       	pop	r0
   178ac:	df 91       	pop	r29
   178ae:	cf 91       	pop	r28
   178b0:	1f 91       	pop	r17
   178b2:	0f 91       	pop	r16
   178b4:	ff 90       	pop	r15
   178b6:	ef 90       	pop	r14
   178b8:	df 90       	pop	r13
   178ba:	cf 90       	pop	r12
   178bc:	bf 90       	pop	r11
   178be:	08 95       	ret

000178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>:
_ZN12PubSubClient11writeStringEPKcPhj():
   178c0:	cf 93       	push	r28
   178c2:	df 93       	push	r29
   178c4:	eb 01       	movw	r28, r22
   178c6:	f9 01       	movw	r30, r18
   178c8:	32 96       	adiw	r30, 0x02	; 2
   178ca:	e4 0f       	add	r30, r20
   178cc:	f5 1f       	adc	r31, r21
   178ce:	db 01       	movw	r26, r22
   178d0:	9d 01       	movw	r18, r26
   178d2:	2c 1b       	sub	r18, r28
   178d4:	3d 0b       	sbc	r19, r29
   178d6:	cf 01       	movw	r24, r30
   178d8:	84 1b       	sub	r24, r20
   178da:	95 0b       	sbc	r25, r21
   178dc:	7d 91       	ld	r23, X+
   178de:	77 23       	and	r23, r23
   178e0:	11 f0       	breq	.+4      	; 0x178e6 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x26>
   178e2:	71 93       	st	Z+, r23
   178e4:	f5 cf       	rjmp	.-22     	; 0x178d0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)+0x10>
   178e6:	bc 01       	movw	r22, r24
   178e8:	62 1b       	sub	r22, r18
   178ea:	73 0b       	sbc	r23, r19
   178ec:	46 0f       	add	r20, r22
   178ee:	57 1f       	adc	r21, r23
   178f0:	fa 01       	movw	r30, r20
   178f2:	32 97       	sbiw	r30, 0x02	; 2
   178f4:	30 83       	st	Z, r19
   178f6:	41 50       	subi	r20, 0x01	; 1
   178f8:	51 09       	sbc	r21, r1
   178fa:	fa 01       	movw	r30, r20
   178fc:	20 83       	st	Z, r18
   178fe:	df 91       	pop	r29
   17900:	cf 91       	pop	r28
   17902:	08 95       	ret

00017904 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
   17904:	cf 93       	push	r28
   17906:	df 93       	push	r29
   17908:	fc 01       	movw	r30, r24
   1790a:	a0 81       	ld	r26, Z
   1790c:	b1 81       	ldd	r27, Z+1	; 0x01
   1790e:	10 97       	sbiw	r26, 0x00	; 0
   17910:	21 f4       	brne	.+8      	; 0x1791a <PubSubClient::connected()+0x16>
   17912:	80 e0       	ldi	r24, 0x00	; 0
   17914:	df 91       	pop	r29
   17916:	cf 91       	pop	r28
   17918:	08 95       	ret
   1791a:	ec 01       	movw	r28, r24
   1791c:	ed 91       	ld	r30, X+
   1791e:	fc 91       	ld	r31, X
   17920:	11 97       	sbiw	r26, 0x01	; 1
   17922:	06 88       	ldd	r0, Z+22	; 0x16
   17924:	f7 89       	ldd	r31, Z+23	; 0x17
   17926:	e0 2d       	mov	r30, r0
   17928:	cd 01       	movw	r24, r26
   1792a:	19 95       	eicall
   1792c:	81 11       	cpse	r24, r1
   1792e:	1e c0       	rjmp	.+60     	; 0x1796c <PubSubClient::connected()+0x68>
   17930:	fe 01       	movw	r30, r28
   17932:	e5 5e       	subi	r30, 0xE5	; 229
   17934:	fd 4f       	sbci	r31, 0xFD	; 253
   17936:	80 81       	ld	r24, Z
   17938:	91 81       	ldd	r25, Z+1	; 0x01
   1793a:	89 2b       	or	r24, r25
   1793c:	51 f7       	brne	.-44     	; 0x17912 <PubSubClient::connected()+0xe>
   1793e:	8d ef       	ldi	r24, 0xFD	; 253
   17940:	9f ef       	ldi	r25, 0xFF	; 255
   17942:	91 83       	std	Z+1, r25	; 0x01
   17944:	80 83       	st	Z, r24
   17946:	88 81       	ld	r24, Y
   17948:	99 81       	ldd	r25, Y+1	; 0x01
   1794a:	dc 01       	movw	r26, r24
   1794c:	ed 91       	ld	r30, X+
   1794e:	fc 91       	ld	r31, X
   17950:	06 80       	ldd	r0, Z+6	; 0x06
   17952:	f7 81       	ldd	r31, Z+7	; 0x07
   17954:	e0 2d       	mov	r30, r0
   17956:	19 95       	eicall
   17958:	88 81       	ld	r24, Y
   1795a:	99 81       	ldd	r25, Y+1	; 0x01
   1795c:	dc 01       	movw	r26, r24
   1795e:	ed 91       	ld	r30, X+
   17960:	fc 91       	ld	r31, X
   17962:	04 88       	ldd	r0, Z+20	; 0x14
   17964:	f5 89       	ldd	r31, Z+21	; 0x15
   17966:	e0 2d       	mov	r30, r0
   17968:	19 95       	eicall
   1796a:	d3 cf       	rjmp	.-90     	; 0x17912 <PubSubClient::connected()+0xe>
   1796c:	81 e0       	ldi	r24, 0x01	; 1
   1796e:	d2 cf       	rjmp	.-92     	; 0x17914 <PubSubClient::connected()+0x10>

00017970 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>:
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   17970:	2f 92       	push	r2
   17972:	3f 92       	push	r3
   17974:	4f 92       	push	r4
   17976:	5f 92       	push	r5
   17978:	6f 92       	push	r6
   1797a:	7f 92       	push	r7
   1797c:	8f 92       	push	r8
   1797e:	9f 92       	push	r9
   17980:	af 92       	push	r10
   17982:	bf 92       	push	r11
   17984:	cf 92       	push	r12
   17986:	df 92       	push	r13
   17988:	ef 92       	push	r14
   1798a:	ff 92       	push	r15
   1798c:	0f 93       	push	r16
   1798e:	1f 93       	push	r17
   17990:	cf 93       	push	r28
   17992:	df 93       	push	r29
   17994:	cd b7       	in	r28, 0x3d	; 61
   17996:	de b7       	in	r29, 0x3e	; 62
   17998:	2e 97       	sbiw	r28, 0x0e	; 14
   1799a:	0f b6       	in	r0, 0x3f	; 63
   1799c:	f8 94       	cli
   1799e:	de bf       	out	0x3e, r29	; 62
   179a0:	0f be       	out	0x3f, r0	; 63
   179a2:	cd bf       	out	0x3d, r28	; 61
   179a4:	4c 01       	movw	r8, r24
   179a6:	1b 01       	movw	r2, r22
   179a8:	2a 01       	movw	r4, r20
   179aa:	39 01       	movw	r6, r18
   179ac:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   179b0:	d8 2e       	mov	r13, r24
   179b2:	81 11       	cpse	r24, r1
   179b4:	08 c1       	rjmp	.+528    	; 0x17bc6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   179b6:	f4 01       	movw	r30, r8
   179b8:	eb 5e       	subi	r30, 0xEB	; 235
   179ba:	fd 4f       	sbci	r31, 0xFD	; 253
   179bc:	60 81       	ld	r22, Z
   179be:	71 81       	ldd	r23, Z+1	; 0x01
   179c0:	d4 01       	movw	r26, r8
   179c2:	8d 91       	ld	r24, X+
   179c4:	9c 91       	ld	r25, X
   179c6:	dc 01       	movw	r26, r24
   179c8:	ed 91       	ld	r30, X+
   179ca:	fc 91       	ld	r31, X
   179cc:	d4 01       	movw	r26, r8
   179ce:	a9 5e       	subi	r26, 0xE9	; 233
   179d0:	bd 4f       	sbci	r27, 0xFD	; 253
   179d2:	2d 91       	ld	r18, X+
   179d4:	3c 91       	ld	r19, X
   179d6:	3e 87       	std	Y+14, r19	; 0x0e
   179d8:	2d 87       	std	Y+13, r18	; 0x0d
   179da:	61 15       	cp	r22, r1
   179dc:	71 05       	cpc	r23, r1
   179de:	09 f4       	brne	.+2      	; 0x179e2 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x72>
   179e0:	b5 c0       	rjmp	.+362    	; 0x17b4c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1dc>
   179e2:	00 88       	ldd	r0, Z+16	; 0x10
   179e4:	f1 89       	ldd	r31, Z+17	; 0x11
   179e6:	e0 2d       	mov	r30, r0
   179e8:	a9 01       	movw	r20, r18
   179ea:	19 95       	eicall
   179ec:	f4 01       	movw	r30, r8
   179ee:	81 30       	cpi	r24, 0x01	; 1
   179f0:	91 05       	cpc	r25, r1
   179f2:	09 f0       	breq	.+2      	; 0x179f6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x86>
   179f4:	0a c1       	rjmp	.+532    	; 0x17c0a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x29a>
   179f6:	ee 5f       	subi	r30, 0xFE	; 254
   179f8:	fd 4f       	sbci	r31, 0xFD	; 253
   179fa:	91 83       	std	Z+1, r25	; 0x01
   179fc:	80 83       	st	Z, r24
   179fe:	87 e0       	ldi	r24, 0x07	; 7
   17a00:	eb e8       	ldi	r30, 0x8B	; 139
   17a02:	f2 e0       	ldi	r31, 0x02	; 2
   17a04:	de 01       	movw	r26, r28
   17a06:	11 96       	adiw	r26, 0x01	; 1
   17a08:	01 90       	ld	r0, Z+
   17a0a:	0d 92       	st	X+, r0
   17a0c:	8a 95       	dec	r24
   17a0e:	e1 f7       	brne	.-8      	; 0x17a08 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x98>
   17a10:	fe 01       	movw	r30, r28
   17a12:	31 96       	adiw	r30, 0x01	; 1
   17a14:	d4 01       	movw	r26, r8
   17a16:	17 96       	adiw	r26, 0x07	; 7
   17a18:	c4 01       	movw	r24, r8
   17a1a:	0e 96       	adiw	r24, 0x0e	; 14
   17a1c:	21 91       	ld	r18, Z+
   17a1e:	2d 93       	st	X+, r18
   17a20:	8a 17       	cp	r24, r26
   17a22:	9b 07       	cpc	r25, r27
   17a24:	d9 f7       	brne	.-10     	; 0x17a1c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xac>
   17a26:	82 e0       	ldi	r24, 0x02	; 2
   17a28:	01 15       	cp	r16, r1
   17a2a:	11 05       	cpc	r17, r1
   17a2c:	51 f0       	breq	.+20     	; 0x17a42 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xd2>
   17a2e:	30 e2       	ldi	r19, 0x20	; 32
   17a30:	c3 9e       	mul	r12, r19
   17a32:	c0 01       	movw	r24, r0
   17a34:	11 24       	eor	r1, r1
   17a36:	86 60       	ori	r24, 0x06	; 6
   17a38:	48 e0       	ldi	r20, 0x08	; 8
   17a3a:	e4 9e       	mul	r14, r20
   17a3c:	70 01       	movw	r14, r0
   17a3e:	11 24       	eor	r1, r1
   17a40:	8e 29       	or	r24, r14
   17a42:	41 14       	cp	r4, r1
   17a44:	51 04       	cpc	r5, r1
   17a46:	29 f0       	breq	.+10     	; 0x17a52 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   17a48:	61 14       	cp	r6, r1
   17a4a:	71 04       	cpc	r7, r1
   17a4c:	09 f0       	breq	.+2      	; 0x17a50 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe0>
   17a4e:	98 c0       	rjmp	.+304    	; 0x17b80 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x210>
   17a50:	80 68       	ori	r24, 0x80	; 128
   17a52:	d4 01       	movw	r26, r8
   17a54:	1e 96       	adiw	r26, 0x0e	; 14
   17a56:	8c 93       	st	X, r24
   17a58:	1e 97       	sbiw	r26, 0x0e	; 14
   17a5a:	1f 96       	adiw	r26, 0x0f	; 15
   17a5c:	1c 92       	st	X, r1
   17a5e:	1f 97       	sbiw	r26, 0x0f	; 15
   17a60:	8f e0       	ldi	r24, 0x0F	; 15
   17a62:	50 96       	adiw	r26, 0x10	; 16
   17a64:	8c 93       	st	X, r24
   17a66:	74 01       	movw	r14, r8
   17a68:	b2 e0       	ldi	r27, 0x02	; 2
   17a6a:	eb 0e       	add	r14, r27
   17a6c:	f1 1c       	adc	r15, r1
   17a6e:	2f e0       	ldi	r18, 0x0F	; 15
   17a70:	30 e0       	ldi	r19, 0x00	; 0
   17a72:	a7 01       	movw	r20, r14
   17a74:	b1 01       	movw	r22, r2
   17a76:	c4 01       	movw	r24, r8
   17a78:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17a7c:	01 15       	cp	r16, r1
   17a7e:	11 05       	cpc	r17, r1
   17a80:	61 f0       	breq	.+24     	; 0x17a9a <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x12a>
   17a82:	9c 01       	movw	r18, r24
   17a84:	a7 01       	movw	r20, r14
   17a86:	b8 01       	movw	r22, r16
   17a88:	c4 01       	movw	r24, r8
   17a8a:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17a8e:	9c 01       	movw	r18, r24
   17a90:	a7 01       	movw	r20, r14
   17a92:	b5 01       	movw	r22, r10
   17a94:	c4 01       	movw	r24, r8
   17a96:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17a9a:	41 14       	cp	r4, r1
   17a9c:	51 04       	cpc	r5, r1
   17a9e:	79 f0       	breq	.+30     	; 0x17abe <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   17aa0:	9c 01       	movw	r18, r24
   17aa2:	a7 01       	movw	r20, r14
   17aa4:	b2 01       	movw	r22, r4
   17aa6:	c4 01       	movw	r24, r8
   17aa8:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17aac:	61 14       	cp	r6, r1
   17aae:	71 04       	cpc	r7, r1
   17ab0:	31 f0       	breq	.+12     	; 0x17abe <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x14e>
   17ab2:	9c 01       	movw	r18, r24
   17ab4:	a7 01       	movw	r20, r14
   17ab6:	b3 01       	movw	r22, r6
   17ab8:	c4 01       	movw	r24, r8
   17aba:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17abe:	9c 01       	movw	r18, r24
   17ac0:	25 50       	subi	r18, 0x05	; 5
   17ac2:	31 09       	sbc	r19, r1
   17ac4:	a7 01       	movw	r20, r14
   17ac6:	60 e1       	ldi	r22, 0x10	; 16
   17ac8:	c4 01       	movw	r24, r8
   17aca:	0e 94 f2 bb 	call	0x177e4	; 0x177e4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   17ace:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17ad2:	f4 01       	movw	r30, r8
   17ad4:	ec 5f       	subi	r30, 0xFC	; 252
   17ad6:	fd 4f       	sbci	r31, 0xFD	; 253
   17ad8:	60 83       	st	Z, r22
   17ada:	71 83       	std	Z+1, r23	; 0x01
   17adc:	82 83       	std	Z+2, r24	; 0x02
   17ade:	93 83       	std	Z+3, r25	; 0x03
   17ae0:	84 01       	movw	r16, r8
   17ae2:	08 5f       	subi	r16, 0xF8	; 248
   17ae4:	1d 4f       	sbci	r17, 0xFD	; 253
   17ae6:	f8 01       	movw	r30, r16
   17ae8:	60 83       	st	Z, r22
   17aea:	71 83       	std	Z+1, r23	; 0x01
   17aec:	82 83       	std	Z+2, r24	; 0x02
   17aee:	93 83       	std	Z+3, r25	; 0x03
   17af0:	d4 01       	movw	r26, r8
   17af2:	8d 91       	ld	r24, X+
   17af4:	9c 91       	ld	r25, X
   17af6:	dc 01       	movw	r26, r24
   17af8:	ed 91       	ld	r30, X+
   17afa:	fc 91       	ld	r31, X
   17afc:	00 84       	ldd	r0, Z+8	; 0x08
   17afe:	f1 85       	ldd	r31, Z+9	; 0x09
   17b00:	e0 2d       	mov	r30, r0
   17b02:	19 95       	eicall
   17b04:	89 2b       	or	r24, r25
   17b06:	f1 f5       	brne	.+124    	; 0x17b84 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x214>
   17b08:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17b0c:	f8 01       	movw	r30, r16
   17b0e:	40 80       	ld	r4, Z
   17b10:	51 80       	ldd	r5, Z+1	; 0x01
   17b12:	62 80       	ldd	r6, Z+2	; 0x02
   17b14:	73 80       	ldd	r7, Z+3	; 0x03
   17b16:	64 19       	sub	r22, r4
   17b18:	75 09       	sbc	r23, r5
   17b1a:	86 09       	sbc	r24, r6
   17b1c:	97 09       	sbc	r25, r7
   17b1e:	62 33       	cpi	r22, 0x32	; 50
   17b20:	71 05       	cpc	r23, r1
   17b22:	81 05       	cpc	r24, r1
   17b24:	91 05       	cpc	r25, r1
   17b26:	20 f3       	brcs	.-56     	; 0x17af0 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x180>
   17b28:	f4 01       	movw	r30, r8
   17b2a:	e5 5e       	subi	r30, 0xE5	; 229
   17b2c:	fd 4f       	sbci	r31, 0xFD	; 253
   17b2e:	8c ef       	ldi	r24, 0xFC	; 252
   17b30:	9f ef       	ldi	r25, 0xFF	; 255
   17b32:	91 83       	std	Z+1, r25	; 0x01
   17b34:	80 83       	st	Z, r24
   17b36:	d4 01       	movw	r26, r8
   17b38:	8d 91       	ld	r24, X+
   17b3a:	9c 91       	ld	r25, X
   17b3c:	dc 01       	movw	r26, r24
   17b3e:	ed 91       	ld	r30, X+
   17b40:	fc 91       	ld	r31, X
   17b42:	04 88       	ldd	r0, Z+20	; 0x14
   17b44:	f5 89       	ldd	r31, Z+21	; 0x15
   17b46:	e0 2d       	mov	r30, r0
   17b48:	19 95       	eicall
   17b4a:	3d c0       	rjmp	.+122    	; 0x17bc6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>
   17b4c:	06 84       	ldd	r0, Z+14	; 0x0e
   17b4e:	f7 85       	ldd	r31, Z+15	; 0x0f
   17b50:	e0 2d       	mov	r30, r0
_ZN9IPAddressC4ERKS_():
   17b52:	2c ed       	ldi	r18, 0xDC	; 220
   17b54:	38 e0       	ldi	r19, 0x08	; 8
   17b56:	3a 83       	std	Y+2, r19	; 0x02
   17b58:	29 83       	std	Y+1, r18	; 0x01
   17b5a:	d4 01       	movw	r26, r8
   17b5c:	a1 5f       	subi	r26, 0xF1	; 241
   17b5e:	bd 4f       	sbci	r27, 0xFD	; 253
   17b60:	12 96       	adiw	r26, 0x02	; 2
   17b62:	2d 91       	ld	r18, X+
   17b64:	3d 91       	ld	r19, X+
   17b66:	4d 91       	ld	r20, X+
   17b68:	5c 91       	ld	r21, X
   17b6a:	15 97       	sbiw	r26, 0x05	; 5
   17b6c:	2b 83       	std	Y+3, r18	; 0x03
   17b6e:	3c 83       	std	Y+4, r19	; 0x04
   17b70:	4d 83       	std	Y+5, r20	; 0x05
   17b72:	5e 83       	std	Y+6, r21	; 0x06
_ZN12PubSubClient7connectEPKcS1_S1_S1_hbS1_():
   17b74:	4d 85       	ldd	r20, Y+13	; 0x0d
   17b76:	5e 85       	ldd	r21, Y+14	; 0x0e
   17b78:	be 01       	movw	r22, r28
   17b7a:	6f 5f       	subi	r22, 0xFF	; 255
   17b7c:	7f 4f       	sbci	r23, 0xFF	; 255
   17b7e:	35 cf       	rjmp	.-406    	; 0x179ea <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x7a>
   17b80:	80 6c       	ori	r24, 0xC0	; 192
   17b82:	67 cf       	rjmp	.-306    	; 0x17a52 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0xe2>
   17b84:	be 01       	movw	r22, r28
   17b86:	68 5f       	subi	r22, 0xF8	; 248
   17b88:	7f 4f       	sbci	r23, 0xFF	; 255
   17b8a:	c4 01       	movw	r24, r8
   17b8c:	0e 94 01 bb 	call	0x17602	; 0x17602 <PubSubClient::readPacket(unsigned char*)>
   17b90:	04 97       	sbiw	r24, 0x04	; 4
   17b92:	b9 f5       	brne	.+110    	; 0x17c02 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x292>
   17b94:	f4 01       	movw	r30, r8
   17b96:	85 81       	ldd	r24, Z+5	; 0x05
   17b98:	94 01       	movw	r18, r8
   17b9a:	25 5e       	subi	r18, 0xE5	; 229
   17b9c:	3d 4f       	sbci	r19, 0xFD	; 253
   17b9e:	79 01       	movw	r14, r18
   17ba0:	81 11       	cpse	r24, r1
   17ba2:	2b c0       	rjmp	.+86     	; 0x17bfa <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x28a>
   17ba4:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17ba8:	d8 01       	movw	r26, r16
   17baa:	6d 93       	st	X+, r22
   17bac:	7d 93       	st	X+, r23
   17bae:	8d 93       	st	X+, r24
   17bb0:	9c 93       	st	X, r25
   17bb2:	13 97       	sbiw	r26, 0x03	; 3
   17bb4:	f4 01       	movw	r30, r8
   17bb6:	e4 5f       	subi	r30, 0xF4	; 244
   17bb8:	fd 4f       	sbci	r31, 0xFD	; 253
   17bba:	10 82       	st	Z, r1
   17bbc:	f7 01       	movw	r30, r14
   17bbe:	11 82       	std	Z+1, r1	; 0x01
   17bc0:	10 82       	st	Z, r1
   17bc2:	dd 24       	eor	r13, r13
   17bc4:	d3 94       	inc	r13
   17bc6:	8d 2d       	mov	r24, r13
   17bc8:	2e 96       	adiw	r28, 0x0e	; 14
   17bca:	0f b6       	in	r0, 0x3f	; 63
   17bcc:	f8 94       	cli
   17bce:	de bf       	out	0x3e, r29	; 62
   17bd0:	0f be       	out	0x3f, r0	; 63
   17bd2:	cd bf       	out	0x3d, r28	; 61
   17bd4:	df 91       	pop	r29
   17bd6:	cf 91       	pop	r28
   17bd8:	1f 91       	pop	r17
   17bda:	0f 91       	pop	r16
   17bdc:	ff 90       	pop	r15
   17bde:	ef 90       	pop	r14
   17be0:	df 90       	pop	r13
   17be2:	cf 90       	pop	r12
   17be4:	bf 90       	pop	r11
   17be6:	af 90       	pop	r10
   17be8:	9f 90       	pop	r9
   17bea:	8f 90       	pop	r8
   17bec:	7f 90       	pop	r7
   17bee:	6f 90       	pop	r6
   17bf0:	5f 90       	pop	r5
   17bf2:	4f 90       	pop	r4
   17bf4:	3f 90       	pop	r3
   17bf6:	2f 90       	pop	r2
   17bf8:	08 95       	ret
   17bfa:	90 e0       	ldi	r25, 0x00	; 0
   17bfc:	d9 01       	movw	r26, r18
   17bfe:	8d 93       	st	X+, r24
   17c00:	9c 93       	st	X, r25
   17c02:	f4 01       	movw	r30, r8
   17c04:	80 81       	ld	r24, Z
   17c06:	91 81       	ldd	r25, Z+1	; 0x01
   17c08:	99 cf       	rjmp	.-206    	; 0x17b3c <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x1cc>
   17c0a:	e5 5e       	subi	r30, 0xE5	; 229
   17c0c:	fd 4f       	sbci	r31, 0xFD	; 253
   17c0e:	8e ef       	ldi	r24, 0xFE	; 254
   17c10:	9f ef       	ldi	r25, 0xFF	; 255
   17c12:	91 83       	std	Z+1, r25	; 0x01
   17c14:	80 83       	st	Z, r24
   17c16:	d7 cf       	rjmp	.-82     	; 0x17bc6 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)+0x256>

00017c18 <PubSubClient::connect(char const*)>:
_ZN12PubSubClient7connectEPKc():
   17c18:	af 92       	push	r10
   17c1a:	bf 92       	push	r11
   17c1c:	cf 92       	push	r12
   17c1e:	ef 92       	push	r14
   17c20:	0f 93       	push	r16
   17c22:	1f 93       	push	r17
   17c24:	b1 2c       	mov	r11, r1
   17c26:	a1 2c       	mov	r10, r1
   17c28:	c1 2c       	mov	r12, r1
   17c2a:	e1 2c       	mov	r14, r1
   17c2c:	10 e0       	ldi	r17, 0x00	; 0
   17c2e:	00 e0       	ldi	r16, 0x00	; 0
   17c30:	30 e0       	ldi	r19, 0x00	; 0
   17c32:	20 e0       	ldi	r18, 0x00	; 0
   17c34:	50 e0       	ldi	r21, 0x00	; 0
   17c36:	40 e0       	ldi	r20, 0x00	; 0
   17c38:	0e 94 b8 bc 	call	0x17970	; 0x17970 <PubSubClient::connect(char const*, char const*, char const*, char const*, unsigned char, bool, char const*)>
   17c3c:	1f 91       	pop	r17
   17c3e:	0f 91       	pop	r16
   17c40:	ef 90       	pop	r14
   17c42:	cf 90       	pop	r12
   17c44:	bf 90       	pop	r11
   17c46:	af 90       	pop	r10
   17c48:	08 95       	ret

00017c4a <PubSubClient::loop()>:
_ZN12PubSubClient4loopEv():
   17c4a:	2f 92       	push	r2
   17c4c:	3f 92       	push	r3
   17c4e:	4f 92       	push	r4
   17c50:	5f 92       	push	r5
   17c52:	6f 92       	push	r6
   17c54:	7f 92       	push	r7
   17c56:	8f 92       	push	r8
   17c58:	9f 92       	push	r9
   17c5a:	af 92       	push	r10
   17c5c:	bf 92       	push	r11
   17c5e:	cf 92       	push	r12
   17c60:	df 92       	push	r13
   17c62:	ef 92       	push	r14
   17c64:	ff 92       	push	r15
   17c66:	0f 93       	push	r16
   17c68:	1f 93       	push	r17
   17c6a:	cf 93       	push	r28
   17c6c:	df 93       	push	r29
   17c6e:	00 d0       	rcall	.+0      	; 0x17c70 <PubSubClient::loop()+0x26>
   17c70:	1f 92       	push	r1
   17c72:	1f 92       	push	r1
   17c74:	cd b7       	in	r28, 0x3d	; 61
   17c76:	de b7       	in	r29, 0x3e	; 62
   17c78:	8c 01       	movw	r16, r24
   17c7a:	2d b7       	in	r18, 0x3d	; 61
   17c7c:	3e b7       	in	r19, 0x3e	; 62
   17c7e:	3d 83       	std	Y+5, r19	; 0x05
   17c80:	2c 83       	std	Y+4, r18	; 0x04
   17c82:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   17c86:	58 2e       	mov	r5, r24
   17c88:	88 23       	and	r24, r24
   17c8a:	09 f4       	brne	.+2      	; 0x17c8e <PubSubClient::loop()+0x44>
   17c8c:	47 c0       	rjmp	.+142    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17c8e:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   17c92:	4b 01       	movw	r8, r22
   17c94:	5c 01       	movw	r10, r24
   17c96:	78 01       	movw	r14, r16
   17c98:	38 ef       	ldi	r19, 0xF8	; 248
   17c9a:	e3 1a       	sub	r14, r19
   17c9c:	3d ef       	ldi	r19, 0xFD	; 253
   17c9e:	f3 0a       	sbc	r15, r19
   17ca0:	f7 01       	movw	r30, r14
   17ca2:	80 81       	ld	r24, Z
   17ca4:	91 81       	ldd	r25, Z+1	; 0x01
   17ca6:	a2 81       	ldd	r26, Z+2	; 0x02
   17ca8:	b3 81       	ldd	r27, Z+3	; 0x03
   17caa:	a5 01       	movw	r20, r10
   17cac:	94 01       	movw	r18, r8
   17cae:	28 1b       	sub	r18, r24
   17cb0:	39 0b       	sbc	r19, r25
   17cb2:	4a 0b       	sbc	r20, r26
   17cb4:	5b 0b       	sbc	r21, r27
   17cb6:	da 01       	movw	r26, r20
   17cb8:	c9 01       	movw	r24, r18
   17cba:	89 39       	cpi	r24, 0x99	; 153
   17cbc:	9a 43       	sbci	r25, 0x3A	; 58
   17cbe:	a1 05       	cpc	r26, r1
   17cc0:	b1 05       	cpc	r27, r1
   17cc2:	98 f4       	brcc	.+38     	; 0x17cea <PubSubClient::loop()+0xa0>
   17cc4:	34 97       	sbiw	r30, 0x04	; 4
   17cc6:	80 81       	ld	r24, Z
   17cc8:	91 81       	ldd	r25, Z+1	; 0x01
   17cca:	a2 81       	ldd	r26, Z+2	; 0x02
   17ccc:	b3 81       	ldd	r27, Z+3	; 0x03
   17cce:	a5 01       	movw	r20, r10
   17cd0:	94 01       	movw	r18, r8
   17cd2:	28 1b       	sub	r18, r24
   17cd4:	39 0b       	sbc	r19, r25
   17cd6:	4a 0b       	sbc	r20, r26
   17cd8:	5b 0b       	sbc	r21, r27
   17cda:	da 01       	movw	r26, r20
   17cdc:	c9 01       	movw	r24, r18
   17cde:	89 39       	cpi	r24, 0x99	; 153
   17ce0:	9a 43       	sbci	r25, 0x3A	; 58
   17ce2:	a1 05       	cpc	r26, r1
   17ce4:	b1 05       	cpc	r27, r1
   17ce6:	08 f4       	brcc	.+2      	; 0x17cea <PubSubClient::loop()+0xa0>
   17ce8:	58 c0       	rjmp	.+176    	; 0x17d9a <PubSubClient::loop()+0x150>
   17cea:	d8 01       	movw	r26, r16
   17cec:	8d 91       	ld	r24, X+
   17cee:	9c 91       	ld	r25, X
   17cf0:	68 01       	movw	r12, r16
   17cf2:	b4 ef       	ldi	r27, 0xF4	; 244
   17cf4:	cb 1a       	sub	r12, r27
   17cf6:	bd ef       	ldi	r27, 0xFD	; 253
   17cf8:	db 0a       	sbc	r13, r27
   17cfa:	f6 01       	movw	r30, r12
   17cfc:	20 81       	ld	r18, Z
   17cfe:	22 23       	and	r18, r18
   17d00:	69 f1       	breq	.+90     	; 0x17d5c <PubSubClient::loop()+0x112>
   17d02:	3f 96       	adiw	r30, 0x0f	; 15
   17d04:	2c ef       	ldi	r18, 0xFC	; 252
   17d06:	3f ef       	ldi	r19, 0xFF	; 255
   17d08:	31 83       	std	Z+1, r19	; 0x01
   17d0a:	20 83       	st	Z, r18
   17d0c:	dc 01       	movw	r26, r24
   17d0e:	ed 91       	ld	r30, X+
   17d10:	fc 91       	ld	r31, X
   17d12:	04 88       	ldd	r0, Z+20	; 0x14
   17d14:	f5 89       	ldd	r31, Z+21	; 0x15
   17d16:	e0 2d       	mov	r30, r0
   17d18:	19 95       	eicall
   17d1a:	51 2c       	mov	r5, r1
   17d1c:	85 2d       	mov	r24, r5
   17d1e:	ec 81       	ldd	r30, Y+4	; 0x04
   17d20:	fd 81       	ldd	r31, Y+5	; 0x05
   17d22:	0f b6       	in	r0, 0x3f	; 63
   17d24:	f8 94       	cli
   17d26:	fe bf       	out	0x3e, r31	; 62
   17d28:	0f be       	out	0x3f, r0	; 63
   17d2a:	ed bf       	out	0x3d, r30	; 61
   17d2c:	0f 90       	pop	r0
   17d2e:	0f 90       	pop	r0
   17d30:	0f 90       	pop	r0
   17d32:	0f 90       	pop	r0
   17d34:	0f 90       	pop	r0
   17d36:	df 91       	pop	r29
   17d38:	cf 91       	pop	r28
   17d3a:	1f 91       	pop	r17
   17d3c:	0f 91       	pop	r16
   17d3e:	ff 90       	pop	r15
   17d40:	ef 90       	pop	r14
   17d42:	df 90       	pop	r13
   17d44:	cf 90       	pop	r12
   17d46:	bf 90       	pop	r11
   17d48:	af 90       	pop	r10
   17d4a:	9f 90       	pop	r9
   17d4c:	8f 90       	pop	r8
   17d4e:	7f 90       	pop	r7
   17d50:	6f 90       	pop	r6
   17d52:	5f 90       	pop	r5
   17d54:	4f 90       	pop	r4
   17d56:	3f 90       	pop	r3
   17d58:	2f 90       	pop	r2
   17d5a:	08 95       	ret
   17d5c:	20 ec       	ldi	r18, 0xC0	; 192
   17d5e:	f8 01       	movw	r30, r16
   17d60:	22 83       	std	Z+2, r18	; 0x02
   17d62:	13 82       	std	Z+3, r1	; 0x03
   17d64:	dc 01       	movw	r26, r24
   17d66:	ed 91       	ld	r30, X+
   17d68:	fc 91       	ld	r31, X
   17d6a:	02 80       	ldd	r0, Z+2	; 0x02
   17d6c:	f3 81       	ldd	r31, Z+3	; 0x03
   17d6e:	e0 2d       	mov	r30, r0
   17d70:	42 e0       	ldi	r20, 0x02	; 2
   17d72:	50 e0       	ldi	r21, 0x00	; 0
   17d74:	b8 01       	movw	r22, r16
   17d76:	6e 5f       	subi	r22, 0xFE	; 254
   17d78:	7f 4f       	sbci	r23, 0xFF	; 255
   17d7a:	19 95       	eicall
   17d7c:	f8 01       	movw	r30, r16
   17d7e:	ec 5f       	subi	r30, 0xFC	; 252
   17d80:	fd 4f       	sbci	r31, 0xFD	; 253
   17d82:	80 82       	st	Z, r8
   17d84:	91 82       	std	Z+1, r9	; 0x01
   17d86:	a2 82       	std	Z+2, r10	; 0x02
   17d88:	b3 82       	std	Z+3, r11	; 0x03
   17d8a:	f7 01       	movw	r30, r14
   17d8c:	80 82       	st	Z, r8
   17d8e:	91 82       	std	Z+1, r9	; 0x01
   17d90:	a2 82       	std	Z+2, r10	; 0x02
   17d92:	b3 82       	std	Z+3, r11	; 0x03
   17d94:	81 e0       	ldi	r24, 0x01	; 1
   17d96:	d6 01       	movw	r26, r12
   17d98:	8c 93       	st	X, r24
   17d9a:	f8 01       	movw	r30, r16
   17d9c:	80 81       	ld	r24, Z
   17d9e:	91 81       	ldd	r25, Z+1	; 0x01
   17da0:	dc 01       	movw	r26, r24
   17da2:	ed 91       	ld	r30, X+
   17da4:	fc 91       	ld	r31, X
   17da6:	00 84       	ldd	r0, Z+8	; 0x08
   17da8:	f1 85       	ldd	r31, Z+9	; 0x09
   17daa:	e0 2d       	mov	r30, r0
   17dac:	19 95       	eicall
   17dae:	89 2b       	or	r24, r25
   17db0:	09 f4       	brne	.+2      	; 0x17db4 <PubSubClient::loop()+0x16a>
   17db2:	b4 cf       	rjmp	.-152    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17db4:	be 01       	movw	r22, r28
   17db6:	6f 5f       	subi	r22, 0xFF	; 255
   17db8:	7f 4f       	sbci	r23, 0xFF	; 255
   17dba:	c8 01       	movw	r24, r16
   17dbc:	0e 94 01 bb 	call	0x17602	; 0x17602 <PubSubClient::readPacket(unsigned char*)>
   17dc0:	6c 01       	movw	r12, r24
   17dc2:	89 2b       	or	r24, r25
   17dc4:	09 f4       	brne	.+2      	; 0x17dc8 <PubSubClient::loop()+0x17e>
   17dc6:	aa cf       	rjmp	.-172    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17dc8:	f7 01       	movw	r30, r14
   17dca:	80 82       	st	Z, r8
   17dcc:	91 82       	std	Z+1, r9	; 0x01
   17dce:	a2 82       	std	Z+2, r10	; 0x02
   17dd0:	b3 82       	std	Z+3, r11	; 0x03
   17dd2:	d8 01       	movw	r26, r16
   17dd4:	12 96       	adiw	r26, 0x02	; 2
   17dd6:	4c 90       	ld	r4, X
   17dd8:	12 97       	sbiw	r26, 0x02	; 2
   17dda:	84 2d       	mov	r24, r4
   17ddc:	80 7f       	andi	r24, 0xF0	; 240
   17dde:	80 33       	cpi	r24, 0x30	; 48
   17de0:	09 f0       	breq	.+2      	; 0x17de4 <PubSubClient::loop()+0x19a>
   17de2:	9d c0       	rjmp	.+314    	; 0x17f1e <PubSubClient::loop()+0x2d4>
   17de4:	f8 01       	movw	r30, r16
   17de6:	e3 5f       	subi	r30, 0xF3	; 243
   17de8:	fd 4f       	sbci	r31, 0xFD	; 253
   17dea:	60 80       	ld	r6, Z
   17dec:	71 80       	ldd	r7, Z+1	; 0x01
   17dee:	61 14       	cp	r6, r1
   17df0:	71 04       	cpc	r7, r1
   17df2:	09 f4       	brne	.+2      	; 0x17df6 <PubSubClient::loop()+0x1ac>
   17df4:	93 cf       	rjmp	.-218    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17df6:	ed b7       	in	r30, 0x3d	; 61
   17df8:	fe b7       	in	r31, 0x3e	; 62
   17dfa:	fb 83       	std	Y+3, r31	; 0x03
   17dfc:	ea 83       	std	Y+2, r30	; 0x02
   17dfe:	29 81       	ldd	r18, Y+1	; 0x01
   17e00:	30 e0       	ldi	r19, 0x00	; 0
   17e02:	a2 0f       	add	r26, r18
   17e04:	b3 1f       	adc	r27, r19
   17e06:	13 96       	adiw	r26, 0x03	; 3
   17e08:	ec 91       	ld	r30, X
   17e0a:	13 97       	sbiw	r26, 0x03	; 3
   17e0c:	f0 e0       	ldi	r31, 0x00	; 0
   17e0e:	fe 2f       	mov	r31, r30
   17e10:	ee 27       	eor	r30, r30
   17e12:	14 96       	adiw	r26, 0x04	; 4
   17e14:	6c 91       	ld	r22, X
   17e16:	e6 0f       	add	r30, r22
   17e18:	f1 1d       	adc	r31, r1
   17e1a:	cf 01       	movw	r24, r30
   17e1c:	01 96       	adiw	r24, 0x01	; 1
   17e1e:	4d b7       	in	r20, 0x3d	; 61
   17e20:	5e b7       	in	r21, 0x3e	; 62
   17e22:	48 1b       	sub	r20, r24
   17e24:	59 0b       	sbc	r21, r25
   17e26:	0f b6       	in	r0, 0x3f	; 63
   17e28:	f8 94       	cli
   17e2a:	5e bf       	out	0x3e, r21	; 62
   17e2c:	0f be       	out	0x3f, r0	; 63
   17e2e:	4d bf       	out	0x3d, r20	; 61
   17e30:	8d b7       	in	r24, 0x3d	; 61
   17e32:	9e b7       	in	r25, 0x3e	; 62
   17e34:	01 96       	adiw	r24, 0x01	; 1
   17e36:	a9 01       	movw	r20, r18
   17e38:	4b 5f       	subi	r20, 0xFB	; 251
   17e3a:	5f 4f       	sbci	r21, 0xFF	; 255
   17e3c:	40 0f       	add	r20, r16
   17e3e:	51 1f       	adc	r21, r17
   17e40:	1c 01       	movw	r2, r24
   17e42:	bc 01       	movw	r22, r24
   17e44:	6e 0f       	add	r22, r30
   17e46:	7f 1f       	adc	r23, r31
   17e48:	26 16       	cp	r2, r22
   17e4a:	37 06       	cpc	r3, r23
   17e4c:	39 f0       	breq	.+14     	; 0x17e5c <PubSubClient::loop()+0x212>
   17e4e:	da 01       	movw	r26, r20
   17e50:	fd 90       	ld	r15, X+
   17e52:	ad 01       	movw	r20, r26
   17e54:	d1 01       	movw	r26, r2
   17e56:	fd 92       	st	X+, r15
   17e58:	1d 01       	movw	r2, r26
   17e5a:	f6 cf       	rjmp	.-20     	; 0x17e48 <PubSubClient::loop()+0x1fe>
   17e5c:	d1 01       	movw	r26, r2
   17e5e:	1c 92       	st	X, r1
   17e60:	78 01       	movw	r14, r16
   17e62:	b2 e0       	ldi	r27, 0x02	; 2
   17e64:	eb 0e       	add	r14, r27
   17e66:	f1 1c       	adc	r15, r1
   17e68:	a6 01       	movw	r20, r12
   17e6a:	42 1b       	sub	r20, r18
   17e6c:	53 0b       	sbc	r21, r19
   17e6e:	64 2d       	mov	r22, r4
   17e70:	66 70       	andi	r22, 0x06	; 6
   17e72:	46 2e       	mov	r4, r22
   17e74:	a2 e0       	ldi	r26, 0x02	; 2
   17e76:	6a 13       	cpse	r22, r26
   17e78:	44 c0       	rjmp	.+136    	; 0x17f02 <PubSubClient::loop()+0x2b8>
   17e7a:	b9 01       	movw	r22, r18
   17e7c:	6e 0f       	add	r22, r30
   17e7e:	7f 1f       	adc	r23, r31
   17e80:	d8 01       	movw	r26, r16
   17e82:	a6 0f       	add	r26, r22
   17e84:	b7 1f       	adc	r27, r23
   17e86:	15 96       	adiw	r26, 0x05	; 5
   17e88:	2c 91       	ld	r18, X
   17e8a:	15 97       	sbiw	r26, 0x05	; 5
   17e8c:	30 e0       	ldi	r19, 0x00	; 0
   17e8e:	32 2f       	mov	r19, r18
   17e90:	22 27       	eor	r18, r18
   17e92:	16 96       	adiw	r26, 0x06	; 6
   17e94:	2c 90       	ld	r2, X
   17e96:	22 0e       	add	r2, r18
   17e98:	33 2e       	mov	r3, r19
   17e9a:	31 1c       	adc	r3, r1
   17e9c:	4e 1b       	sub	r20, r30
   17e9e:	5f 0b       	sbc	r21, r31
   17ea0:	45 50       	subi	r20, 0x05	; 5
   17ea2:	51 09       	sbc	r21, r1
   17ea4:	6b 5f       	subi	r22, 0xFB	; 251
   17ea6:	7f 4f       	sbci	r23, 0xFF	; 255
   17ea8:	6e 0d       	add	r22, r14
   17eaa:	7f 1d       	adc	r23, r15
   17eac:	f3 01       	movw	r30, r6
   17eae:	19 95       	eicall
   17eb0:	80 e4       	ldi	r24, 0x40	; 64
   17eb2:	d8 01       	movw	r26, r16
   17eb4:	12 96       	adiw	r26, 0x02	; 2
   17eb6:	8c 93       	st	X, r24
   17eb8:	12 97       	sbiw	r26, 0x02	; 2
   17eba:	13 96       	adiw	r26, 0x03	; 3
   17ebc:	4c 92       	st	X, r4
   17ebe:	13 97       	sbiw	r26, 0x03	; 3
   17ec0:	14 96       	adiw	r26, 0x04	; 4
   17ec2:	3c 92       	st	X, r3
   17ec4:	14 97       	sbiw	r26, 0x04	; 4
   17ec6:	15 96       	adiw	r26, 0x05	; 5
   17ec8:	2c 92       	st	X, r2
   17eca:	15 97       	sbiw	r26, 0x05	; 5
   17ecc:	8d 91       	ld	r24, X+
   17ece:	9c 91       	ld	r25, X
   17ed0:	dc 01       	movw	r26, r24
   17ed2:	ed 91       	ld	r30, X+
   17ed4:	fc 91       	ld	r31, X
   17ed6:	02 80       	ldd	r0, Z+2	; 0x02
   17ed8:	f3 81       	ldd	r31, Z+3	; 0x03
   17eda:	e0 2d       	mov	r30, r0
   17edc:	44 e0       	ldi	r20, 0x04	; 4
   17ede:	50 e0       	ldi	r21, 0x00	; 0
   17ee0:	b7 01       	movw	r22, r14
   17ee2:	19 95       	eicall
   17ee4:	f8 01       	movw	r30, r16
   17ee6:	ec 5f       	subi	r30, 0xFC	; 252
   17ee8:	fd 4f       	sbci	r31, 0xFD	; 253
   17eea:	80 82       	st	Z, r8
   17eec:	91 82       	std	Z+1, r9	; 0x01
   17eee:	a2 82       	std	Z+2, r10	; 0x02
   17ef0:	b3 82       	std	Z+3, r11	; 0x03
   17ef2:	2a 81       	ldd	r18, Y+2	; 0x02
   17ef4:	3b 81       	ldd	r19, Y+3	; 0x03
   17ef6:	0f b6       	in	r0, 0x3f	; 63
   17ef8:	f8 94       	cli
   17efa:	3e bf       	out	0x3e, r19	; 62
   17efc:	0f be       	out	0x3f, r0	; 63
   17efe:	2d bf       	out	0x3d, r18	; 61
   17f00:	0d cf       	rjmp	.-486    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17f02:	4e 1b       	sub	r20, r30
   17f04:	5f 0b       	sbc	r21, r31
   17f06:	43 50       	subi	r20, 0x03	; 3
   17f08:	51 09       	sbc	r21, r1
   17f0a:	2d 5f       	subi	r18, 0xFD	; 253
   17f0c:	3f 4f       	sbci	r19, 0xFF	; 255
   17f0e:	e2 0f       	add	r30, r18
   17f10:	f3 1f       	adc	r31, r19
   17f12:	b7 01       	movw	r22, r14
   17f14:	6e 0f       	add	r22, r30
   17f16:	7f 1f       	adc	r23, r31
   17f18:	f3 01       	movw	r30, r6
   17f1a:	19 95       	eicall
   17f1c:	ea cf       	rjmp	.-44     	; 0x17ef2 <PubSubClient::loop()+0x2a8>
   17f1e:	80 3c       	cpi	r24, 0xC0	; 192
   17f20:	a1 f4       	brne	.+40     	; 0x17f4a <PubSubClient::loop()+0x300>
   17f22:	80 ed       	ldi	r24, 0xD0	; 208
   17f24:	12 96       	adiw	r26, 0x02	; 2
   17f26:	8c 93       	st	X, r24
   17f28:	12 97       	sbiw	r26, 0x02	; 2
   17f2a:	13 96       	adiw	r26, 0x03	; 3
   17f2c:	1c 92       	st	X, r1
   17f2e:	f8 01       	movw	r30, r16
   17f30:	81 91       	ld	r24, Z+
   17f32:	91 91       	ld	r25, Z+
   17f34:	bf 01       	movw	r22, r30
   17f36:	dc 01       	movw	r26, r24
   17f38:	ed 91       	ld	r30, X+
   17f3a:	fc 91       	ld	r31, X
   17f3c:	02 80       	ldd	r0, Z+2	; 0x02
   17f3e:	f3 81       	ldd	r31, Z+3	; 0x03
   17f40:	e0 2d       	mov	r30, r0
   17f42:	42 e0       	ldi	r20, 0x02	; 2
   17f44:	50 e0       	ldi	r21, 0x00	; 0
   17f46:	19 95       	eicall
   17f48:	e9 ce       	rjmp	.-558    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17f4a:	80 3d       	cpi	r24, 0xD0	; 208
   17f4c:	09 f0       	breq	.+2      	; 0x17f50 <PubSubClient::loop()+0x306>
   17f4e:	e6 ce       	rjmp	.-564    	; 0x17d1c <PubSubClient::loop()+0xd2>
   17f50:	f8 01       	movw	r30, r16
   17f52:	e4 5f       	subi	r30, 0xF4	; 244
   17f54:	fd 4f       	sbci	r31, 0xFD	; 253
   17f56:	10 82       	st	Z, r1
   17f58:	e1 ce       	rjmp	.-574    	; 0x17d1c <PubSubClient::loop()+0xd2>

00017f5a <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>:
_ZN12PubSubClient7publishEPKcPKhjb():
   17f5a:	9f 92       	push	r9
   17f5c:	af 92       	push	r10
   17f5e:	bf 92       	push	r11
   17f60:	cf 92       	push	r12
   17f62:	df 92       	push	r13
   17f64:	ef 92       	push	r14
   17f66:	ff 92       	push	r15
   17f68:	0f 93       	push	r16
   17f6a:	1f 93       	push	r17
   17f6c:	cf 93       	push	r28
   17f6e:	df 93       	push	r29
   17f70:	ec 01       	movw	r28, r24
   17f72:	6b 01       	movw	r12, r22
   17f74:	94 2e       	mov	r9, r20
   17f76:	15 2f       	mov	r17, r21
   17f78:	79 01       	movw	r14, r18
   17f7a:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   17f7e:	88 23       	and	r24, r24
   17f80:	09 f4       	brne	.+2      	; 0x17f84 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2a>
   17f82:	41 c0       	rjmp	.+130    	; 0x18006 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   17f84:	f6 01       	movw	r30, r12
   17f86:	01 90       	ld	r0, Z+
   17f88:	00 20       	and	r0, r0
   17f8a:	e9 f7       	brne	.-6      	; 0x17f86 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x2c>
   17f8c:	31 97       	sbiw	r30, 0x01	; 1
   17f8e:	ec 19       	sub	r30, r12
   17f90:	fd 09       	sbc	r31, r13
   17f92:	c7 01       	movw	r24, r14
   17f94:	07 96       	adiw	r24, 0x07	; 7
   17f96:	e8 0f       	add	r30, r24
   17f98:	f9 1f       	adc	r31, r25
   17f9a:	e1 30       	cpi	r30, 0x01	; 1
   17f9c:	f2 40       	sbci	r31, 0x02	; 2
   17f9e:	98 f5       	brcc	.+102    	; 0x18006 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0xac>
   17fa0:	5e 01       	movw	r10, r28
   17fa2:	82 e0       	ldi	r24, 0x02	; 2
   17fa4:	a8 0e       	add	r10, r24
   17fa6:	b1 1c       	adc	r11, r1
   17fa8:	25 e0       	ldi	r18, 0x05	; 5
   17faa:	30 e0       	ldi	r19, 0x00	; 0
   17fac:	a5 01       	movw	r20, r10
   17fae:	b6 01       	movw	r22, r12
   17fb0:	ce 01       	movw	r24, r28
   17fb2:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   17fb6:	e9 2d       	mov	r30, r9
   17fb8:	f1 2f       	mov	r31, r17
   17fba:	dc 01       	movw	r26, r24
   17fbc:	12 96       	adiw	r26, 0x02	; 2
   17fbe:	ac 0f       	add	r26, r28
   17fc0:	bd 1f       	adc	r27, r29
   17fc2:	af 01       	movw	r20, r30
   17fc4:	4e 0d       	add	r20, r14
   17fc6:	5f 1d       	adc	r21, r15
   17fc8:	e4 17       	cp	r30, r20
   17fca:	f5 07       	cpc	r31, r21
   17fcc:	19 f0       	breq	.+6      	; 0x17fd4 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x7a>
   17fce:	21 91       	ld	r18, Z+
   17fd0:	2d 93       	st	X+, r18
   17fd2:	fa cf       	rjmp	.-12     	; 0x17fc8 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x6e>
   17fd4:	25 e0       	ldi	r18, 0x05	; 5
   17fd6:	e2 1a       	sub	r14, r18
   17fd8:	f1 08       	sbc	r15, r1
   17fda:	61 e3       	ldi	r22, 0x31	; 49
   17fdc:	01 11       	cpse	r16, r1
   17fde:	01 c0       	rjmp	.+2      	; 0x17fe2 <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)+0x88>
   17fe0:	60 e3       	ldi	r22, 0x30	; 48
   17fe2:	9c 01       	movw	r18, r24
   17fe4:	2e 0d       	add	r18, r14
   17fe6:	3f 1d       	adc	r19, r15
   17fe8:	a5 01       	movw	r20, r10
   17fea:	ce 01       	movw	r24, r28
   17fec:	df 91       	pop	r29
   17fee:	cf 91       	pop	r28
   17ff0:	1f 91       	pop	r17
   17ff2:	0f 91       	pop	r16
   17ff4:	ff 90       	pop	r15
   17ff6:	ef 90       	pop	r14
   17ff8:	df 90       	pop	r13
   17ffa:	cf 90       	pop	r12
   17ffc:	bf 90       	pop	r11
   17ffe:	af 90       	pop	r10
   18000:	9f 90       	pop	r9
   18002:	0c 94 f2 bb 	jmp	0x177e4	; 0x177e4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18006:	80 e0       	ldi	r24, 0x00	; 0
   18008:	df 91       	pop	r29
   1800a:	cf 91       	pop	r28
   1800c:	1f 91       	pop	r17
   1800e:	0f 91       	pop	r16
   18010:	ff 90       	pop	r15
   18012:	ef 90       	pop	r14
   18014:	df 90       	pop	r13
   18016:	cf 90       	pop	r12
   18018:	bf 90       	pop	r11
   1801a:	af 90       	pop	r10
   1801c:	9f 90       	pop	r9
   1801e:	08 95       	ret

00018020 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
   18020:	0f 93       	push	r16
   18022:	fa 01       	movw	r30, r20
   18024:	01 90       	ld	r0, Z+
   18026:	00 20       	and	r0, r0
   18028:	e9 f7       	brne	.-6      	; 0x18024 <PubSubClient::publish(char const*, char const*)+0x4>
   1802a:	31 97       	sbiw	r30, 0x01	; 1
   1802c:	9f 01       	movw	r18, r30
   1802e:	24 1b       	sub	r18, r20
   18030:	35 0b       	sbc	r19, r21
   18032:	00 e0       	ldi	r16, 0x00	; 0
   18034:	0e 94 ad bf 	call	0x17f5a	; 0x17f5a <PubSubClient::publish(char const*, unsigned char const*, unsigned int, bool)>
   18038:	0f 91       	pop	r16
   1803a:	08 95       	ret

0001803c <PubSubClient::subscribe(char const*, unsigned char)>:
_ZN12PubSubClient9subscribeEPKch():
   1803c:	df 92       	push	r13
   1803e:	ef 92       	push	r14
   18040:	ff 92       	push	r15
   18042:	0f 93       	push	r16
   18044:	1f 93       	push	r17
   18046:	cf 93       	push	r28
   18048:	df 93       	push	r29
   1804a:	42 30       	cpi	r20, 0x02	; 2
   1804c:	08 f0       	brcs	.+2      	; 0x18050 <PubSubClient::subscribe(char const*, unsigned char)+0x14>
   1804e:	41 c0       	rjmp	.+130    	; 0x180d2 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18050:	fb 01       	movw	r30, r22
   18052:	01 90       	ld	r0, Z+
   18054:	00 20       	and	r0, r0
   18056:	e9 f7       	brne	.-6      	; 0x18052 <PubSubClient::subscribe(char const*, unsigned char)+0x16>
   18058:	9f 01       	movw	r18, r30
   1805a:	26 1b       	sub	r18, r22
   1805c:	37 0b       	sbc	r19, r23
   1805e:	28 5f       	subi	r18, 0xF8	; 248
   18060:	3f 4f       	sbci	r19, 0xFF	; 255
   18062:	21 30       	cpi	r18, 0x01	; 1
   18064:	32 40       	sbci	r19, 0x02	; 2
   18066:	a8 f5       	brcc	.+106    	; 0x180d2 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18068:	d4 2e       	mov	r13, r20
   1806a:	8b 01       	movw	r16, r22
   1806c:	ec 01       	movw	r28, r24
   1806e:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   18072:	88 23       	and	r24, r24
   18074:	71 f1       	breq	.+92     	; 0x180d2 <PubSubClient::subscribe(char const*, unsigned char)+0x96>
   18076:	fe 01       	movw	r30, r28
   18078:	ee 5f       	subi	r30, 0xFE	; 254
   1807a:	fd 4f       	sbci	r31, 0xFD	; 253
   1807c:	80 81       	ld	r24, Z
   1807e:	91 81       	ldd	r25, Z+1	; 0x01
   18080:	01 96       	adiw	r24, 0x01	; 1
   18082:	21 f1       	breq	.+72     	; 0x180cc <PubSubClient::subscribe(char const*, unsigned char)+0x90>
   18084:	91 83       	std	Z+1, r25	; 0x01
   18086:	80 83       	st	Z, r24
   18088:	80 81       	ld	r24, Z
   1808a:	91 81       	ldd	r25, Z+1	; 0x01
   1808c:	9f 83       	std	Y+7, r25	; 0x07
   1808e:	88 87       	std	Y+8, r24	; 0x08
   18090:	7e 01       	movw	r14, r28
   18092:	52 e0       	ldi	r21, 0x02	; 2
   18094:	e5 0e       	add	r14, r21
   18096:	f1 1c       	adc	r15, r1
   18098:	27 e0       	ldi	r18, 0x07	; 7
   1809a:	30 e0       	ldi	r19, 0x00	; 0
   1809c:	a7 01       	movw	r20, r14
   1809e:	b8 01       	movw	r22, r16
   180a0:	ce 01       	movw	r24, r28
   180a2:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   180a6:	fe 01       	movw	r30, r28
   180a8:	e8 0f       	add	r30, r24
   180aa:	f9 1f       	adc	r31, r25
   180ac:	d2 82       	std	Z+2, r13	; 0x02
   180ae:	9c 01       	movw	r18, r24
   180b0:	24 50       	subi	r18, 0x04	; 4
   180b2:	31 09       	sbc	r19, r1
   180b4:	a7 01       	movw	r20, r14
   180b6:	62 e8       	ldi	r22, 0x82	; 130
   180b8:	ce 01       	movw	r24, r28
   180ba:	df 91       	pop	r29
   180bc:	cf 91       	pop	r28
   180be:	1f 91       	pop	r17
   180c0:	0f 91       	pop	r16
   180c2:	ff 90       	pop	r15
   180c4:	ef 90       	pop	r14
   180c6:	df 90       	pop	r13
   180c8:	0c 94 f2 bb 	jmp	0x177e4	; 0x177e4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   180cc:	81 e0       	ldi	r24, 0x01	; 1
   180ce:	90 e0       	ldi	r25, 0x00	; 0
   180d0:	d9 cf       	rjmp	.-78     	; 0x18084 <PubSubClient::subscribe(char const*, unsigned char)+0x48>
   180d2:	80 e0       	ldi	r24, 0x00	; 0
   180d4:	df 91       	pop	r29
   180d6:	cf 91       	pop	r28
   180d8:	1f 91       	pop	r17
   180da:	0f 91       	pop	r16
   180dc:	ff 90       	pop	r15
   180de:	ef 90       	pop	r14
   180e0:	df 90       	pop	r13
   180e2:	08 95       	ret

000180e4 <PubSubClient::subscribe(char const*)>:
_ZN12PubSubClient9subscribeEPKc():
   180e4:	40 e0       	ldi	r20, 0x00	; 0
   180e6:	0c 94 1e c0 	jmp	0x1803c	; 0x1803c <PubSubClient::subscribe(char const*, unsigned char)>

000180ea <PubSubClient::unsubscribe(char const*)>:
_ZN12PubSubClient11unsubscribeEPKc():
   180ea:	ef 92       	push	r14
   180ec:	ff 92       	push	r15
   180ee:	0f 93       	push	r16
   180f0:	1f 93       	push	r17
   180f2:	cf 93       	push	r28
   180f4:	df 93       	push	r29
   180f6:	fb 01       	movw	r30, r22
   180f8:	01 90       	ld	r0, Z+
   180fa:	00 20       	and	r0, r0
   180fc:	e9 f7       	brne	.-6      	; 0x180f8 <PubSubClient::unsubscribe(char const*)+0xe>
   180fe:	9f 01       	movw	r18, r30
   18100:	26 1b       	sub	r18, r22
   18102:	37 0b       	sbc	r19, r23
   18104:	28 5f       	subi	r18, 0xF8	; 248
   18106:	3f 4f       	sbci	r19, 0xFF	; 255
   18108:	21 30       	cpi	r18, 0x01	; 1
   1810a:	32 40       	sbci	r19, 0x02	; 2
   1810c:	78 f5       	brcc	.+94     	; 0x1816c <PubSubClient::unsubscribe(char const*)+0x82>
   1810e:	8b 01       	movw	r16, r22
   18110:	ec 01       	movw	r28, r24
   18112:	0e 94 82 bc 	call	0x17904	; 0x17904 <PubSubClient::connected()>
   18116:	88 23       	and	r24, r24
   18118:	49 f1       	breq	.+82     	; 0x1816c <PubSubClient::unsubscribe(char const*)+0x82>
   1811a:	fe 01       	movw	r30, r28
   1811c:	ee 5f       	subi	r30, 0xFE	; 254
   1811e:	fd 4f       	sbci	r31, 0xFD	; 253
   18120:	80 81       	ld	r24, Z
   18122:	91 81       	ldd	r25, Z+1	; 0x01
   18124:	01 96       	adiw	r24, 0x01	; 1
   18126:	f9 f0       	breq	.+62     	; 0x18166 <PubSubClient::unsubscribe(char const*)+0x7c>
   18128:	91 83       	std	Z+1, r25	; 0x01
   1812a:	80 83       	st	Z, r24
   1812c:	80 81       	ld	r24, Z
   1812e:	91 81       	ldd	r25, Z+1	; 0x01
   18130:	9f 83       	std	Y+7, r25	; 0x07
   18132:	88 87       	std	Y+8, r24	; 0x08
   18134:	7e 01       	movw	r14, r28
   18136:	42 e0       	ldi	r20, 0x02	; 2
   18138:	e4 0e       	add	r14, r20
   1813a:	f1 1c       	adc	r15, r1
   1813c:	27 e0       	ldi	r18, 0x07	; 7
   1813e:	30 e0       	ldi	r19, 0x00	; 0
   18140:	a7 01       	movw	r20, r14
   18142:	b8 01       	movw	r22, r16
   18144:	ce 01       	movw	r24, r28
   18146:	0e 94 60 bc 	call	0x178c0	; 0x178c0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int)>
   1814a:	9c 01       	movw	r18, r24
   1814c:	25 50       	subi	r18, 0x05	; 5
   1814e:	31 09       	sbc	r19, r1
   18150:	a7 01       	movw	r20, r14
   18152:	62 ea       	ldi	r22, 0xA2	; 162
   18154:	ce 01       	movw	r24, r28
   18156:	df 91       	pop	r29
   18158:	cf 91       	pop	r28
   1815a:	1f 91       	pop	r17
   1815c:	0f 91       	pop	r16
   1815e:	ff 90       	pop	r15
   18160:	ef 90       	pop	r14
   18162:	0c 94 f2 bb 	jmp	0x177e4	; 0x177e4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
   18166:	81 e0       	ldi	r24, 0x01	; 1
   18168:	90 e0       	ldi	r25, 0x00	; 0
   1816a:	de cf       	rjmp	.-68     	; 0x18128 <PubSubClient::unsubscribe(char const*)+0x3e>
   1816c:	80 e0       	ldi	r24, 0x00	; 0
   1816e:	df 91       	pop	r29
   18170:	cf 91       	pop	r28
   18172:	1f 91       	pop	r17
   18174:	0f 91       	pop	r16
   18176:	ff 90       	pop	r15
   18178:	ef 90       	pop	r14
   1817a:	08 95       	ret

0001817c <PubSubClient::setServer(unsigned char*, unsigned int)>:
_ZN12PubSubClient9setServerEPhj():
   1817c:	cf 92       	push	r12
   1817e:	df 92       	push	r13
   18180:	ef 92       	push	r14
   18182:	ff 92       	push	r15
   18184:	0f 93       	push	r16
   18186:	cf 93       	push	r28
   18188:	df 93       	push	r29
   1818a:	cd b7       	in	r28, 0x3d	; 61
   1818c:	de b7       	in	r29, 0x3e	; 62
   1818e:	2c 97       	sbiw	r28, 0x0c	; 12
   18190:	0f b6       	in	r0, 0x3f	; 63
   18192:	f8 94       	cli
   18194:	de bf       	out	0x3e, r29	; 62
   18196:	0f be       	out	0x3f, r0	; 63
   18198:	cd bf       	out	0x3d, r28	; 61
   1819a:	7c 01       	movw	r14, r24
   1819c:	fb 01       	movw	r30, r22
   1819e:	6a 01       	movw	r12, r20
   181a0:	03 81       	ldd	r16, Z+3	; 0x03
   181a2:	22 81       	ldd	r18, Z+2	; 0x02
   181a4:	41 81       	ldd	r20, Z+1	; 0x01
   181a6:	60 81       	ld	r22, Z
   181a8:	ce 01       	movw	r24, r28
   181aa:	07 96       	adiw	r24, 0x07	; 7
   181ac:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_ZN9IPAddressC4ERKS_():
   181b0:	89 85       	ldd	r24, Y+9	; 0x09
   181b2:	9a 85       	ldd	r25, Y+10	; 0x0a
   181b4:	ab 85       	ldd	r26, Y+11	; 0x0b
   181b6:	bc 85       	ldd	r27, Y+12	; 0x0c
_ZN9IPAddressaSERKS_():
   181b8:	f7 01       	movw	r30, r14
   181ba:	e1 5f       	subi	r30, 0xF1	; 241
   181bc:	fd 4f       	sbci	r31, 0xFD	; 253
   181be:	82 83       	std	Z+2, r24	; 0x02
   181c0:	93 83       	std	Z+3, r25	; 0x03
   181c2:	a4 83       	std	Z+4, r26	; 0x04
   181c4:	b5 83       	std	Z+5, r27	; 0x05
_ZN12PubSubClient9setServerE9IPAddressj():
   181c6:	38 96       	adiw	r30, 0x08	; 8
   181c8:	d1 82       	std	Z+1, r13	; 0x01
   181ca:	c0 82       	st	Z, r12
   181cc:	32 97       	sbiw	r30, 0x02	; 2
   181ce:	11 82       	std	Z+1, r1	; 0x01
   181d0:	10 82       	st	Z, r1
_ZN12PubSubClient9setServerEPhj():
   181d2:	c7 01       	movw	r24, r14
   181d4:	2c 96       	adiw	r28, 0x0c	; 12
   181d6:	0f b6       	in	r0, 0x3f	; 63
   181d8:	f8 94       	cli
   181da:	de bf       	out	0x3e, r29	; 62
   181dc:	0f be       	out	0x3f, r0	; 63
   181de:	cd bf       	out	0x3d, r28	; 61
   181e0:	df 91       	pop	r29
   181e2:	cf 91       	pop	r28
   181e4:	0f 91       	pop	r16
   181e6:	ff 90       	pop	r15
   181e8:	ef 90       	pop	r14
   181ea:	df 90       	pop	r13
   181ec:	cf 90       	pop	r12
   181ee:	08 95       	ret

000181f0 <PubSubClient::setCallback(void (*)(char*, unsigned char*, unsigned int))>:
_ZN12PubSubClient11setCallbackEPFvPcPhjE():
   181f0:	fc 01       	movw	r30, r24
   181f2:	e3 5f       	subi	r30, 0xF3	; 243
   181f4:	fd 4f       	sbci	r31, 0xFD	; 253
   181f6:	71 83       	std	Z+1, r23	; 0x01
   181f8:	60 83       	st	Z, r22
   181fa:	08 95       	ret

000181fc <PubSubClient::state()>:
_ZN12PubSubClient5stateEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:589

int PubSubClient::state() {
    return this->_state;
   181fc:	85 5e       	subi	r24, 0xE5	; 229
   181fe:	9d 4f       	sbci	r25, 0xFD	; 253
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
}
   18200:	fc 01       	movw	r30, r24
   18202:	80 81       	ld	r24, Z
   18204:	91 81       	ldd	r25, Z+1	; 0x01
   18206:	08 95       	ret

00018208 <_GLOBAL__sub_I__ZN12PubSubClientC2Ev>:
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
   18208:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   1820a:	00 e0       	ldi	r16, 0x00	; 0
   1820c:	20 e0       	ldi	r18, 0x00	; 0
   1820e:	40 e0       	ldi	r20, 0x00	; 0
   18210:	60 e0       	ldi	r22, 0x00	; 0
   18212:	80 eb       	ldi	r24, 0xB0	; 176
   18214:	92 e1       	ldi	r25, 0x12	; 18
   18216:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN12PubSubClientC2Ev():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:590
   1821a:	0f 91       	pop	r16
   1821c:	08 95       	ret

0001821e <RF24::RF24(unsigned int, unsigned int)>:
_ZN4RF24C2Ejj():
/home/saric/Arduino/libraries/RF24/RF24.cpp:435
  printf_P(PSTR("\r\n"));
}
#endif
/****************************************************************************/

RF24::RF24(uint16_t _cepin, uint16_t _cspin):
   1821e:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:437
  ce_pin(_cepin), csn_pin(_cspin), p_variant(false),
  payload_size(32), dynamic_payloads_enabled(false), addr_width(5),csDelay(5)//,pipe0_reading_address(0)
   18220:	71 83       	std	Z+1, r23	; 0x01
   18222:	60 83       	st	Z, r22
   18224:	53 83       	std	Z+3, r21	; 0x03
   18226:	42 83       	std	Z+2, r20	; 0x02
   18228:	16 82       	std	Z+6, r1	; 0x06
   1822a:	80 e2       	ldi	r24, 0x20	; 32
   1822c:	87 83       	std	Z+7, r24	; 0x07
   1822e:	10 86       	std	Z+8, r1	; 0x08
   18230:	85 e0       	ldi	r24, 0x05	; 5
   18232:	86 87       	std	Z+14, r24	; 0x0e
   18234:	85 e0       	ldi	r24, 0x05	; 5
   18236:	90 e0       	ldi	r25, 0x00	; 0
   18238:	a0 e0       	ldi	r26, 0x00	; 0
   1823a:	b0 e0       	ldi	r27, 0x00	; 0
   1823c:	84 8b       	std	Z+20, r24	; 0x14
   1823e:	95 8b       	std	Z+21, r25	; 0x15
   18240:	a6 8b       	std	Z+22, r26	; 0x16
   18242:	b7 8b       	std	Z+23, r27	; 0x17
/home/saric/Arduino/libraries/RF24/RF24.cpp:439
{
  pipe0_reading_address[0]=0;
   18244:	11 86       	std	Z+9, r1	; 0x09
/home/saric/Arduino/libraries/RF24/RF24.cpp:440
}
   18246:	08 95       	ret

00018248 <RF24Network::RF24Network(RF24&)>:
_ZN11RF24NetworkC2ER4RF24():
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:63
  #endif
{
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
}
#elif !defined (DUAL_HEAD_RADIO)
RF24Network::RF24Network( RF24& _radio ): radio(_radio), next_frame(frame_queue) 
   18248:	fc 01       	movw	r30, r24
   1824a:	70 ab       	std	Z+48, r23	; 0x30
   1824c:	67 a7       	std	Z+47, r22	; 0x2f
   1824e:	dc 01       	movw	r26, r24
   18250:	a1 53       	subi	r26, 0x31	; 49
   18252:	bf 4f       	sbci	r27, 0xFF	; 255
   18254:	c5 96       	adiw	r24, 0x35	; 53
   18256:	11 96       	adiw	r26, 0x01	; 1
   18258:	9c 93       	st	X, r25
   1825a:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:66
{
  #if !defined ( DISABLE_FRAGMENTATION )
  frag_queue.message_buffer=&frag_queue_message_buffer[0];
   1825c:	1c 96       	adiw	r26, 0x0c	; 12
   1825e:	88 55       	subi	r24, 0x58	; 88
   18260:	9f 4f       	sbci	r25, 0xFF	; 255
   18262:	8d 93       	st	X+, r24
   18264:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:63
  #endif
{
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
}
#elif !defined (DUAL_HEAD_RADIO)
RF24Network::RF24Network( RF24& _radio ): radio(_radio), next_frame(frame_queue) 
   18266:	0c 97       	sbiw	r24, 0x0c	; 12
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:67
{
  #if !defined ( DISABLE_FRAGMENTATION )
  frag_queue.message_buffer=&frag_queue_message_buffer[0];
  frag_ptr = &frag_queue;
   18268:	90 a7       	std	Z+40, r25	; 0x28
   1826a:	87 a3       	std	Z+39, r24	; 0x27
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:69
  #endif
  txTime=0; networkFlags=0; returnSysMsgs=0; multicastRelay=0;
   1826c:	13 a6       	std	Z+43, r1	; 0x2b
   1826e:	14 a6       	std	Z+44, r1	; 0x2c
   18270:	15 a6       	std	Z+45, r1	; 0x2d
   18272:	16 a6       	std	Z+46, r1	; 0x2e
   18274:	12 a6       	std	Z+42, r1	; 0x2a
   18276:	11 a6       	std	Z+41, r1	; 0x29
   18278:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/RF24Network/RF24Network.cpp:70
}
   1827a:	08 95       	ret

0001827c <RF24Mesh::RF24Mesh(RF24&, RF24Network&)>:
_ZN8RF24MeshC2ER4RF24R11RF24Network():
/home/saric/Arduino/libraries/RF24Mesh/RF24Mesh.cpp:11
#include "RF24Mesh_config.h"
#if defined (__linux) && !defined(__ARDUINO_X86__)
#include <fstream>
#endif

RF24Mesh::RF24Mesh( RF24& _radio,RF24Network& _network ): radio(_radio),network(_network){}
   1827c:	fc 01       	movw	r30, r24
   1827e:	77 83       	std	Z+7, r23	; 0x07
   18280:	66 83       	std	Z+6, r22	; 0x06
   18282:	51 87       	std	Z+9, r21	; 0x09
   18284:	40 87       	std	Z+8, r20	; 0x08
   18286:	08 95       	ret

00018288 <date2days(unsigned int, unsigned char, unsigned char)>:
_ZL9date2daysjhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:336
  return data;
}

void RTC_DS1307::writenvram(uint8_t address, uint8_t data) {
  writenvram(address, &data, 1);
}
   18288:	dc 01       	movw	r26, r24
   1828a:	50 e0       	ldi	r21, 0x00	; 0
   1828c:	e2 e8       	ldi	r30, 0x82	; 130
   1828e:	f1 e6       	ldi	r31, 0x61	; 97
   18290:	81 e0       	ldi	r24, 0x01	; 1
   18292:	86 17       	cp	r24, r22
   18294:	30 f4       	brcc	.+12     	; 0x182a2 <date2days(unsigned int, unsigned char, unsigned char)+0x1a>
   18296:	94 91       	lpm	r25, Z
   18298:	49 0f       	add	r20, r25
   1829a:	51 1d       	adc	r21, r1
   1829c:	8f 5f       	subi	r24, 0xFF	; 255
   1829e:	31 96       	adiw	r30, 0x01	; 1
   182a0:	f8 cf       	rjmp	.-16     	; 0x18292 <date2days(unsigned int, unsigned char, unsigned char)+0xa>
   182a2:	63 30       	cpi	r22, 0x03	; 3
   182a4:	38 f0       	brcs	.+14     	; 0x182b4 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   182a6:	cd 01       	movw	r24, r26
   182a8:	83 70       	andi	r24, 0x03	; 3
   182aa:	99 27       	eor	r25, r25
   182ac:	89 2b       	or	r24, r25
   182ae:	11 f4       	brne	.+4      	; 0x182b4 <date2days(unsigned int, unsigned char, unsigned char)+0x2c>
   182b0:	4f 5f       	subi	r20, 0xFF	; 255
   182b2:	5f 4f       	sbci	r21, 0xFF	; 255
   182b4:	9d 01       	movw	r18, r26
   182b6:	2d 5f       	subi	r18, 0xFD	; 253
   182b8:	3f 4f       	sbci	r19, 0xFF	; 255
   182ba:	36 95       	lsr	r19
   182bc:	27 95       	ror	r18
   182be:	36 95       	lsr	r19
   182c0:	27 95       	ror	r18
   182c2:	6d e6       	ldi	r22, 0x6D	; 109
   182c4:	71 e0       	ldi	r23, 0x01	; 1
   182c6:	a6 9f       	mul	r26, r22
   182c8:	c0 01       	movw	r24, r0
   182ca:	a7 9f       	mul	r26, r23
   182cc:	90 0d       	add	r25, r0
   182ce:	b6 9f       	mul	r27, r22
   182d0:	90 0d       	add	r25, r0
   182d2:	11 24       	eor	r1, r1
   182d4:	01 97       	sbiw	r24, 0x01	; 1
   182d6:	82 0f       	add	r24, r18
   182d8:	93 1f       	adc	r25, r19
   182da:	84 0f       	add	r24, r20
   182dc:	95 1f       	adc	r25, r21
   182de:	08 95       	ret

000182e0 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
   182e0:	dc 01       	movw	r26, r24
   182e2:	ed 91       	ld	r30, X+
   182e4:	fc 91       	ld	r31, X
   182e6:	01 90       	ld	r0, Z+
   182e8:	f0 81       	ld	r31, Z
   182ea:	e0 2d       	mov	r30, r0
   182ec:	19 94       	eijmp

000182ee <DateTime::DateTime(unsigned long)>:
_ZN8DateTimeC2Em():
   182ee:	8f 92       	push	r8
   182f0:	9f 92       	push	r9
   182f2:	af 92       	push	r10
   182f4:	bf 92       	push	r11
   182f6:	cf 92       	push	r12
   182f8:	df 92       	push	r13
   182fa:	ef 92       	push	r14
   182fc:	ff 92       	push	r15
   182fe:	cf 93       	push	r28
   18300:	df 93       	push	r29
   18302:	ec 01       	movw	r28, r24
   18304:	6a 01       	movw	r12, r20
   18306:	7b 01       	movw	r14, r22
   18308:	80 e8       	ldi	r24, 0x80	; 128
   1830a:	c8 1a       	sub	r12, r24
   1830c:	83 e4       	ldi	r24, 0x43	; 67
   1830e:	d8 0a       	sbc	r13, r24
   18310:	8d e6       	ldi	r24, 0x6D	; 109
   18312:	e8 0a       	sbc	r14, r24
   18314:	88 e3       	ldi	r24, 0x38	; 56
   18316:	f8 0a       	sbc	r15, r24
   18318:	8c e3       	ldi	r24, 0x3C	; 60
   1831a:	88 2e       	mov	r8, r24
   1831c:	91 2c       	mov	r9, r1
   1831e:	a1 2c       	mov	r10, r1
   18320:	b1 2c       	mov	r11, r1
   18322:	c7 01       	movw	r24, r14
   18324:	b6 01       	movw	r22, r12
   18326:	a5 01       	movw	r20, r10
   18328:	94 01       	movw	r18, r8
   1832a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1832e:	6d 83       	std	Y+5, r22	; 0x05
   18330:	ca 01       	movw	r24, r20
   18332:	b9 01       	movw	r22, r18
   18334:	a5 01       	movw	r20, r10
   18336:	94 01       	movw	r18, r8
   18338:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1833c:	6c 83       	std	Y+4, r22	; 0x04
   1833e:	c7 01       	movw	r24, r14
   18340:	b6 01       	movw	r22, r12
   18342:	20 e1       	ldi	r18, 0x10	; 16
   18344:	3e e0       	ldi	r19, 0x0E	; 14
   18346:	40 e0       	ldi	r20, 0x00	; 0
   18348:	50 e0       	ldi	r21, 0x00	; 0
   1834a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1834e:	ca 01       	movw	r24, r20
   18350:	b9 01       	movw	r22, r18
   18352:	28 e1       	ldi	r18, 0x18	; 24
   18354:	30 e0       	ldi	r19, 0x00	; 0
   18356:	40 e0       	ldi	r20, 0x00	; 0
   18358:	50 e0       	ldi	r21, 0x00	; 0
   1835a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1835e:	6b 83       	std	Y+3, r22	; 0x03
   18360:	c7 01       	movw	r24, r14
   18362:	b6 01       	movw	r22, r12
   18364:	20 e8       	ldi	r18, 0x80	; 128
   18366:	31 e5       	ldi	r19, 0x51	; 81
   18368:	41 e0       	ldi	r20, 0x01	; 1
   1836a:	50 e0       	ldi	r21, 0x00	; 0
   1836c:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   18370:	18 82       	st	Y, r1
   18372:	63 e9       	ldi	r22, 0x93	; 147
   18374:	7e ef       	ldi	r23, 0xFE	; 254
   18376:	48 81       	ld	r20, Y
   18378:	54 2f       	mov	r21, r20
   1837a:	53 70       	andi	r21, 0x03	; 3
   1837c:	81 e0       	ldi	r24, 0x01	; 1
   1837e:	09 f0       	breq	.+2      	; 0x18382 <DateTime::DateTime(unsigned long)+0x94>
   18380:	80 e0       	ldi	r24, 0x00	; 0
   18382:	90 e0       	ldi	r25, 0x00	; 0
   18384:	fc 01       	movw	r30, r24
   18386:	e3 59       	subi	r30, 0x93	; 147
   18388:	fe 4f       	sbci	r31, 0xFE	; 254
   1838a:	2e 17       	cp	r18, r30
   1838c:	3f 07       	cpc	r19, r31
   1838e:	40 f0       	brcs	.+16     	; 0x183a0 <DateTime::DateTime(unsigned long)+0xb2>
   18390:	fb 01       	movw	r30, r22
   18392:	e8 1b       	sub	r30, r24
   18394:	f9 0b       	sbc	r31, r25
   18396:	2e 0f       	add	r18, r30
   18398:	3f 1f       	adc	r19, r31
   1839a:	4f 5f       	subi	r20, 0xFF	; 255
   1839c:	48 83       	st	Y, r20
   1839e:	eb cf       	rjmp	.-42     	; 0x18376 <DateTime::DateTime(unsigned long)+0x88>
   183a0:	81 e0       	ldi	r24, 0x01	; 1
   183a2:	89 83       	std	Y+1, r24	; 0x01
   183a4:	89 81       	ldd	r24, Y+1	; 0x01
   183a6:	68 2f       	mov	r22, r24
   183a8:	61 50       	subi	r22, 0x01	; 1
   183aa:	77 0b       	sbc	r23, r23
   183ac:	fb 01       	movw	r30, r22
   183ae:	ee 57       	subi	r30, 0x7E	; 126
   183b0:	fe 49       	sbci	r31, 0x9E	; 158
   183b2:	e4 91       	lpm	r30, Z
   183b4:	51 11       	cpse	r21, r1
   183b6:	03 c0       	rjmp	.+6      	; 0x183be <DateTime::DateTime(unsigned long)+0xd0>
   183b8:	82 30       	cpi	r24, 0x02	; 2
   183ba:	09 f4       	brne	.+2      	; 0x183be <DateTime::DateTime(unsigned long)+0xd0>
   183bc:	ef 5f       	subi	r30, 0xFF	; 255
   183be:	f0 e0       	ldi	r31, 0x00	; 0
   183c0:	2e 17       	cp	r18, r30
   183c2:	3f 07       	cpc	r19, r31
   183c4:	20 f0       	brcs	.+8      	; 0x183ce <DateTime::DateTime(unsigned long)+0xe0>
   183c6:	2e 1b       	sub	r18, r30
   183c8:	3f 0b       	sbc	r19, r31
   183ca:	8f 5f       	subi	r24, 0xFF	; 255
   183cc:	ea cf       	rjmp	.-44     	; 0x183a2 <DateTime::DateTime(unsigned long)+0xb4>
   183ce:	2f 5f       	subi	r18, 0xFF	; 255
   183d0:	2a 83       	std	Y+2, r18	; 0x02
   183d2:	df 91       	pop	r29
   183d4:	cf 91       	pop	r28
   183d6:	ff 90       	pop	r15
   183d8:	ef 90       	pop	r14
   183da:	df 90       	pop	r13
   183dc:	cf 90       	pop	r12
   183de:	bf 90       	pop	r11
   183e0:	af 90       	pop	r10
   183e2:	9f 90       	pop	r9
   183e4:	8f 90       	pop	r8
   183e6:	08 95       	ret

000183e8 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
   183e8:	cf 92       	push	r12
   183ea:	ef 92       	push	r14
   183ec:	0f 93       	push	r16
   183ee:	fc 01       	movw	r30, r24
   183f0:	60 3d       	cpi	r22, 0xD0	; 208
   183f2:	87 e0       	ldi	r24, 0x07	; 7
   183f4:	78 07       	cpc	r23, r24
   183f6:	10 f0       	brcs	.+4      	; 0x183fc <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
   183f8:	60 5d       	subi	r22, 0xD0	; 208
   183fa:	77 40       	sbci	r23, 0x07	; 7
   183fc:	60 83       	st	Z, r22
   183fe:	41 83       	std	Z+1, r20	; 0x01
   18400:	22 83       	std	Z+2, r18	; 0x02
   18402:	03 83       	std	Z+3, r16	; 0x03
   18404:	e4 82       	std	Z+4, r14	; 0x04
   18406:	c5 82       	std	Z+5, r12	; 0x05
   18408:	0f 91       	pop	r16
   1840a:	ef 90       	pop	r14
   1840c:	cf 90       	pop	r12
   1840e:	08 95       	ret

00018410 <DateTime::dayOfTheWeek() const>:
_ZNK8DateTime12dayOfTheWeekEv():
   18410:	fc 01       	movw	r30, r24
   18412:	80 81       	ld	r24, Z
   18414:	42 81       	ldd	r20, Z+2	; 0x02
   18416:	61 81       	ldd	r22, Z+1	; 0x01
   18418:	90 e0       	ldi	r25, 0x00	; 0
   1841a:	0e 94 44 c1 	call	0x18288	; 0x18288 <date2days(unsigned int, unsigned char, unsigned char)>
   1841e:	06 96       	adiw	r24, 0x06	; 6
   18420:	67 e0       	ldi	r22, 0x07	; 7
   18422:	70 e0       	ldi	r23, 0x00	; 0
   18424:	0e 94 68 d3 	call	0x1a6d0	; 0x1a6d0 <__udivmodhi4>
   18428:	08 95       	ret

0001842a <RTC_DS1307::begin()>:
_ZN10RTC_DS13075beginEv():
   1842a:	86 eb       	ldi	r24, 0xB6	; 182
   1842c:	92 e1       	ldi	r25, 0x12	; 18
   1842e:	0e 94 54 c4 	call	0x188a8	; 0x188a8 <TwoWire::begin()>
   18432:	81 e0       	ldi	r24, 0x01	; 1
   18434:	08 95       	ret

00018436 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
   18436:	1f 93       	push	r17
   18438:	cf 93       	push	r28
   1843a:	df 93       	push	r29
   1843c:	ec 01       	movw	r28, r24
   1843e:	68 e6       	ldi	r22, 0x68	; 104
   18440:	70 e0       	ldi	r23, 0x00	; 0
   18442:	86 eb       	ldi	r24, 0xB6	; 182
   18444:	92 e1       	ldi	r25, 0x12	; 18
   18446:	0e 94 70 c4 	call	0x188e0	; 0x188e0 <TwoWire::beginTransmission(int)>
   1844a:	60 e0       	ldi	r22, 0x00	; 0
   1844c:	86 eb       	ldi	r24, 0xB6	; 182
   1844e:	92 e1       	ldi	r25, 0x12	; 18
   18450:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   18454:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
   18456:	1a e0       	ldi	r17, 0x0A	; 10
   18458:	82 2f       	mov	r24, r18
   1845a:	61 2f       	mov	r22, r17
   1845c:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   18460:	68 2f       	mov	r22, r24
   18462:	66 0f       	add	r22, r22
   18464:	68 0f       	add	r22, r24
   18466:	66 0f       	add	r22, r22
   18468:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   1846a:	86 eb       	ldi	r24, 0xB6	; 182
   1846c:	92 e1       	ldi	r25, 0x12	; 18
   1846e:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   18472:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
   18474:	82 2f       	mov	r24, r18
   18476:	61 2f       	mov	r22, r17
   18478:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   1847c:	68 2f       	mov	r22, r24
   1847e:	66 0f       	add	r22, r22
   18480:	68 0f       	add	r22, r24
   18482:	66 0f       	add	r22, r22
   18484:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18486:	86 eb       	ldi	r24, 0xB6	; 182
   18488:	92 e1       	ldi	r25, 0x12	; 18
   1848a:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   1848e:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
   18490:	82 2f       	mov	r24, r18
   18492:	61 2f       	mov	r22, r17
   18494:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   18498:	68 2f       	mov	r22, r24
   1849a:	66 0f       	add	r22, r22
   1849c:	68 0f       	add	r22, r24
   1849e:	66 0f       	add	r22, r22
   184a0:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   184a2:	86 eb       	ldi	r24, 0xB6	; 182
   184a4:	92 e1       	ldi	r25, 0x12	; 18
   184a6:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   184aa:	60 e0       	ldi	r22, 0x00	; 0
   184ac:	86 eb       	ldi	r24, 0xB6	; 182
   184ae:	92 e1       	ldi	r25, 0x12	; 18
   184b0:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   184b4:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
   184b6:	82 2f       	mov	r24, r18
   184b8:	61 2f       	mov	r22, r17
   184ba:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   184be:	68 2f       	mov	r22, r24
   184c0:	66 0f       	add	r22, r22
   184c2:	68 0f       	add	r22, r24
   184c4:	66 0f       	add	r22, r22
   184c6:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   184c8:	86 eb       	ldi	r24, 0xB6	; 182
   184ca:	92 e1       	ldi	r25, 0x12	; 18
   184cc:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   184d0:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
   184d2:	82 2f       	mov	r24, r18
   184d4:	61 2f       	mov	r22, r17
   184d6:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   184da:	68 2f       	mov	r22, r24
   184dc:	66 0f       	add	r22, r22
   184de:	68 0f       	add	r22, r24
   184e0:	66 0f       	add	r22, r22
   184e2:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   184e4:	86 eb       	ldi	r24, 0xB6	; 182
   184e6:	92 e1       	ldi	r25, 0x12	; 18
   184e8:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   184ec:	28 81       	ld	r18, Y
bin2bcd():
   184ee:	82 2f       	mov	r24, r18
   184f0:	61 2f       	mov	r22, r17
   184f2:	0e 94 5c d3 	call	0x1a6b8	; 0x1a6b8 <__udivmodqi4>
   184f6:	68 2f       	mov	r22, r24
   184f8:	66 0f       	add	r22, r22
   184fa:	68 0f       	add	r22, r24
   184fc:	66 0f       	add	r22, r22
   184fe:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
   18500:	86 eb       	ldi	r24, 0xB6	; 182
   18502:	92 e1       	ldi	r25, 0x12	; 18
   18504:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   18508:	86 eb       	ldi	r24, 0xB6	; 182
   1850a:	92 e1       	ldi	r25, 0x12	; 18
   1850c:	df 91       	pop	r29
   1850e:	cf 91       	pop	r28
   18510:	1f 91       	pop	r17
   18512:	0c 94 ee c4 	jmp	0x189dc	; 0x189dc <TwoWire::endTransmission()>

00018516 <RTC_DS1307::isrunning()>:
_ZN10RTC_DS13079isrunningEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:245
  Wire.begin();
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
   18516:	68 e6       	ldi	r22, 0x68	; 104
   18518:	70 e0       	ldi	r23, 0x00	; 0
   1851a:	86 eb       	ldi	r24, 0xB6	; 182
   1851c:	92 e1       	ldi	r25, 0x12	; 18
   1851e:	0e 94 70 c4 	call	0x188e0	; 0x188e0 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  Wire._I2C_WRITE((byte)0);
   18522:	60 e0       	ldi	r22, 0x00	; 0
   18524:	86 eb       	ldi	r24, 0xB6	; 182
   18526:	92 e1       	ldi	r25, 0x12	; 18
   18528:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   1852c:	86 eb       	ldi	r24, 0xB6	; 182
   1852e:	92 e1       	ldi	r25, 0x12	; 18
   18530:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   18534:	41 e0       	ldi	r20, 0x01	; 1
   18536:	50 e0       	ldi	r21, 0x00	; 0
   18538:	68 e6       	ldi	r22, 0x68	; 104
   1853a:	70 e0       	ldi	r23, 0x00	; 0
   1853c:	86 eb       	ldi	r24, 0xB6	; 182
   1853e:	92 e1       	ldi	r25, 0x12	; 18
   18540:	0e 94 eb c4 	call	0x189d6	; 0x189d6 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   18544:	86 eb       	ldi	r24, 0xB6	; 182
   18546:	92 e1       	ldi	r25, 0x12	; 18
   18548:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   1854c:	80 58       	subi	r24, 0x80	; 128
   1854e:	87 fb       	bst	r24, 7
   18550:	88 27       	eor	r24, r24
   18552:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   18554:	08 95       	ret

00018556 <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
   18556:	cf 92       	push	r12
   18558:	df 92       	push	r13
   1855a:	ff 92       	push	r15
   1855c:	0f 93       	push	r16
   1855e:	1f 93       	push	r17
   18560:	cf 93       	push	r28
   18562:	df 93       	push	r29
   18564:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:269
  Wire.beginTransmission(DS1307_ADDRESS);
   18566:	68 e6       	ldi	r22, 0x68	; 104
   18568:	70 e0       	ldi	r23, 0x00	; 0
   1856a:	86 eb       	ldi	r24, 0xB6	; 182
   1856c:	92 e1       	ldi	r25, 0x12	; 18
   1856e:	0e 94 70 c4 	call	0x188e0	; 0x188e0 <TwoWire::beginTransmission(int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire._I2C_WRITE((byte)0);	
   18572:	60 e0       	ldi	r22, 0x00	; 0
   18574:	86 eb       	ldi	r24, 0xB6	; 182
   18576:	92 e1       	ldi	r25, 0x12	; 18
   18578:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   1857c:	86 eb       	ldi	r24, 0xB6	; 182
   1857e:	92 e1       	ldi	r25, 0x12	; 18
   18580:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   18584:	47 e0       	ldi	r20, 0x07	; 7
   18586:	50 e0       	ldi	r21, 0x00	; 0
   18588:	68 e6       	ldi	r22, 0x68	; 104
   1858a:	70 e0       	ldi	r23, 0x00	; 0
   1858c:	86 eb       	ldi	r24, 0xB6	; 182
   1858e:	92 e1       	ldi	r25, 0x12	; 18
   18590:	0e 94 eb c4 	call	0x189d6	; 0x189d6 <TwoWire::requestFrom(int, int)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   18594:	86 eb       	ldi	r24, 0xB6	; 182
   18596:	92 e1       	ldi	r25, 0x12	; 18
   18598:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
   1859c:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1859e:	28 2f       	mov	r18, r24
   185a0:	30 e0       	ldi	r19, 0x00	; 0
   185a2:	94 e0       	ldi	r25, 0x04	; 4
   185a4:	35 95       	asr	r19
   185a6:	27 95       	ror	r18
   185a8:	9a 95       	dec	r25
   185aa:	e1 f7       	brne	.-8      	; 0x185a4 <RTC_DS1307::now()+0x4e>
   185ac:	92 2f       	mov	r25, r18
   185ae:	99 0f       	add	r25, r25
   185b0:	99 0f       	add	r25, r25
   185b2:	c2 2f       	mov	r28, r18
   185b4:	c9 1b       	sub	r28, r25
   185b6:	cc 0f       	add	r28, r28
   185b8:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   185ba:	86 eb       	ldi	r24, 0xB6	; 182
   185bc:	92 e1       	ldi	r25, 0x12	; 18
   185be:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   185c2:	9c 01       	movw	r18, r24
   185c4:	44 e0       	ldi	r20, 0x04	; 4
   185c6:	35 95       	asr	r19
   185c8:	27 95       	ror	r18
   185ca:	4a 95       	dec	r20
   185cc:	e1 f7       	brne	.-8      	; 0x185c6 <RTC_DS1307::now()+0x70>
   185ce:	2f 70       	andi	r18, 0x0F	; 15
   185d0:	33 27       	eor	r19, r19
   185d2:	92 2f       	mov	r25, r18
   185d4:	99 0f       	add	r25, r25
   185d6:	99 0f       	add	r25, r25
   185d8:	d2 2f       	mov	r29, r18
   185da:	d9 1b       	sub	r29, r25
   185dc:	dd 0f       	add	r29, r29
   185de:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   185e0:	86 eb       	ldi	r24, 0xB6	; 182
   185e2:	92 e1       	ldi	r25, 0x12	; 18
   185e4:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   185e8:	9c 01       	movw	r18, r24
   185ea:	54 e0       	ldi	r21, 0x04	; 4
   185ec:	35 95       	asr	r19
   185ee:	27 95       	ror	r18
   185f0:	5a 95       	dec	r21
   185f2:	e1 f7       	brne	.-8      	; 0x185ec <RTC_DS1307::now()+0x96>
   185f4:	2f 70       	andi	r18, 0x0F	; 15
   185f6:	33 27       	eor	r19, r19
   185f8:	92 2f       	mov	r25, r18
   185fa:	99 0f       	add	r25, r25
   185fc:	99 0f       	add	r25, r25
   185fe:	12 2f       	mov	r17, r18
   18600:	19 1b       	sub	r17, r25
   18602:	11 0f       	add	r17, r17
   18604:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   18606:	86 eb       	ldi	r24, 0xB6	; 182
   18608:	92 e1       	ldi	r25, 0x12	; 18
   1860a:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   1860e:	86 eb       	ldi	r24, 0xB6	; 182
   18610:	92 e1       	ldi	r25, 0x12	; 18
   18612:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18616:	9c 01       	movw	r18, r24
   18618:	64 e0       	ldi	r22, 0x04	; 4
   1861a:	35 95       	asr	r19
   1861c:	27 95       	ror	r18
   1861e:	6a 95       	dec	r22
   18620:	e1 f7       	brne	.-8      	; 0x1861a <RTC_DS1307::now()+0xc4>
   18622:	2f 70       	andi	r18, 0x0F	; 15
   18624:	33 27       	eor	r19, r19
   18626:	92 2f       	mov	r25, r18
   18628:	99 0f       	add	r25, r25
   1862a:	99 0f       	add	r25, r25
   1862c:	02 2f       	mov	r16, r18
   1862e:	09 1b       	sub	r16, r25
   18630:	00 0f       	add	r16, r16
   18632:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   18634:	86 eb       	ldi	r24, 0xB6	; 182
   18636:	92 e1       	ldi	r25, 0x12	; 18
   18638:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1863c:	9c 01       	movw	r18, r24
   1863e:	74 e0       	ldi	r23, 0x04	; 4
   18640:	35 95       	asr	r19
   18642:	27 95       	ror	r18
   18644:	7a 95       	dec	r23
   18646:	e1 f7       	brne	.-8      	; 0x18640 <RTC_DS1307::now()+0xea>
   18648:	2f 70       	andi	r18, 0x0F	; 15
   1864a:	33 27       	eor	r19, r19
   1864c:	92 2f       	mov	r25, r18
   1864e:	99 0f       	add	r25, r25
   18650:	99 0f       	add	r25, r25
   18652:	f2 2e       	mov	r15, r18
   18654:	f9 1a       	sub	r15, r25
   18656:	ff 0c       	add	r15, r15
   18658:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   1865a:	86 eb       	ldi	r24, 0xB6	; 182
   1865c:	92 e1       	ldi	r25, 0x12	; 18
   1865e:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18662:	9c 01       	movw	r18, r24
   18664:	e4 e0       	ldi	r30, 0x04	; 4
   18666:	35 95       	asr	r19
   18668:	27 95       	ror	r18
   1866a:	ea 95       	dec	r30
   1866c:	e1 f7       	brne	.-8      	; 0x18666 <RTC_DS1307::now()+0x110>
   1866e:	2f 70       	andi	r18, 0x0F	; 15
   18670:	33 27       	eor	r19, r19
   18672:	92 2f       	mov	r25, r18
   18674:	99 0f       	add	r25, r25
   18676:	99 0f       	add	r25, r25
   18678:	29 1b       	sub	r18, r25
   1867a:	22 0f       	add	r18, r18
   1867c:	82 0f       	add	r24, r18
_ZN8DateTimeC4Ejhhhhh():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   1867e:	f6 01       	movw	r30, r12
   18680:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   18682:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   18684:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   18686:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   18688:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   1868a:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   1868c:	c6 01       	movw	r24, r12
   1868e:	df 91       	pop	r29
   18690:	cf 91       	pop	r28
   18692:	1f 91       	pop	r17
   18694:	0f 91       	pop	r16
   18696:	ff 90       	pop	r15
   18698:	df 90       	pop	r13
   1869a:	cf 90       	pop	r12
   1869c:	08 95       	ret

0001869e <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   1869e:	0f 93       	push	r16
   186a0:	1f 93       	push	r17
   186a2:	cf 93       	push	r28
   186a4:	df 93       	push	r29
   186a6:	ec 01       	movw	r28, r24
   186a8:	16 2f       	mov	r17, r22
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   186aa:	6a 81       	ldd	r22, Y+2	; 0x02
   186ac:	88 81       	ld	r24, Y
   186ae:	99 81       	ldd	r25, Y+1	; 0x01
   186b0:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   186b4:	88 81       	ld	r24, Y
   186b6:	99 81       	ldd	r25, Y+1	; 0x01
   186b8:	dc 01       	movw	r26, r24
   186ba:	ed 91       	ld	r30, X+
   186bc:	fc 91       	ld	r31, X
   186be:	01 90       	ld	r0, Z+
   186c0:	f0 81       	ld	r31, Z
   186c2:	e0 2d       	mov	r30, r0
   186c4:	61 2f       	mov	r22, r17
   186c6:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   186c8:	88 81       	ld	r24, Y
   186ca:	99 81       	ldd	r25, Y+1	; 0x01
   186cc:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   186d0:	88 81       	ld	r24, Y
   186d2:	99 81       	ldd	r25, Y+1	; 0x01
   186d4:	2b 81       	ldd	r18, Y+3	; 0x03
   186d6:	42 e0       	ldi	r20, 0x02	; 2
   186d8:	29 30       	cpi	r18, 0x09	; 9
   186da:	08 f4       	brcc	.+2      	; 0x186de <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x40>
   186dc:	41 e0       	ldi	r20, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58 (discriminator 4)
   186de:	6a 81       	ldd	r22, Y+2	; 0x02
   186e0:	0e 94 e8 c4 	call	0x189d0	; 0x189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61 (discriminator 4)

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   186e4:	88 81       	ld	r24, Y
   186e6:	99 81       	ldd	r25, Y+1	; 0x01
   186e8:	dc 01       	movw	r26, r24
   186ea:	ed 91       	ld	r30, X+
   186ec:	fc 91       	ld	r31, X
   186ee:	02 84       	ldd	r0, Z+10	; 0x0a
   186f0:	f3 85       	ldd	r31, Z+11	; 0x0b
   186f2:	e0 2d       	mov	r30, r0
   186f4:	19 95       	eicall
   186f6:	00 e0       	ldi	r16, 0x00	; 0
   186f8:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64 (discriminator 4)
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   186fa:	8b 81       	ldd	r24, Y+3	; 0x03
   186fc:	89 30       	cpi	r24, 0x09	; 9
   186fe:	58 f0       	brcs	.+22     	; 0x18716 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char)+0x78>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   18700:	88 81       	ld	r24, Y
   18702:	99 81       	ldd	r25, Y+1	; 0x01
   18704:	dc 01       	movw	r26, r24
   18706:	ed 91       	ld	r30, X+
   18708:	fc 91       	ld	r31, X
   1870a:	02 84       	ldd	r0, Z+10	; 0x0a
   1870c:	f3 85       	ldd	r31, Z+11	; 0x0b
   1870e:	e0 2d       	mov	r30, r0
   18710:	19 95       	eicall
   18712:	08 2b       	or	r16, r24
   18714:	19 2b       	or	r17, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   18716:	88 81       	ld	r24, Y
   18718:	99 81       	ldd	r25, Y+1	; 0x01
   1871a:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   1871e:	8c 81       	ldd	r24, Y+4	; 0x04
   18720:	9d 81       	ldd	r25, Y+5	; 0x05
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   18722:	80 23       	and	r24, r16
   18724:	91 23       	and	r25, r17
   18726:	df 91       	pop	r29
   18728:	cf 91       	pop	r28
   1872a:	1f 91       	pop	r17
   1872c:	0f 91       	pop	r16
   1872e:	08 95       	ret

00018730 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:326

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
   18730:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <TwoWire::rxBufferLength>
   18734:	90 91 eb 12 	lds	r25, 0x12EB	; 0x8012eb <TwoWire::rxBufferIndex>
   18738:	89 1b       	sub	r24, r25
   1873a:	99 0b       	sbc	r25, r25
   1873c:	08 95       	ret

0001873e <TwoWire::read()>:
_ZN7TwoWire4readEv():
   1873e:	90 91 eb 12 	lds	r25, 0x12EB	; 0x8012eb <TwoWire::rxBufferIndex>
   18742:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <TwoWire::rxBufferLength>
   18746:	2f ef       	ldi	r18, 0xFF	; 255
   18748:	3f ef       	ldi	r19, 0xFF	; 255
   1874a:	98 17       	cp	r25, r24
   1874c:	48 f4       	brcc	.+18     	; 0x18760 <TwoWire::read()+0x22>
   1874e:	e9 2f       	mov	r30, r25
   18750:	f0 e0       	ldi	r31, 0x00	; 0
   18752:	e4 51       	subi	r30, 0x14	; 20
   18754:	fd 4e       	sbci	r31, 0xED	; 237
   18756:	20 81       	ld	r18, Z
   18758:	30 e0       	ldi	r19, 0x00	; 0
   1875a:	9f 5f       	subi	r25, 0xFF	; 255
   1875c:	90 93 eb 12 	sts	0x12EB, r25	; 0x8012eb <TwoWire::rxBufferIndex>
   18760:	c9 01       	movw	r24, r18
   18762:	08 95       	ret

00018764 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
   18764:	e0 91 eb 12 	lds	r30, 0x12EB	; 0x8012eb <TwoWire::rxBufferIndex>
   18768:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <TwoWire::rxBufferLength>
   1876c:	e8 17       	cp	r30, r24
   1876e:	30 f4       	brcc	.+12     	; 0x1877c <TwoWire::peek()+0x18>
   18770:	f0 e0       	ldi	r31, 0x00	; 0
   18772:	e4 51       	subi	r30, 0x14	; 20
   18774:	fd 4e       	sbci	r31, 0xED	; 237
   18776:	80 81       	ld	r24, Z
   18778:	90 e0       	ldi	r25, 0x00	; 0
   1877a:	08 95       	ret
   1877c:	8f ef       	ldi	r24, 0xFF	; 255
   1877e:	9f ef       	ldi	r25, 0xFF	; 255
   18780:	08 95       	ret

00018782 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
   18782:	08 95       	ret

00018784 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
   18784:	cf 93       	push	r28
   18786:	df 93       	push	r29
   18788:	ec 01       	movw	r28, r24
   1878a:	e0 91 c2 12 	lds	r30, 0x12C2	; 0x8012c2 <TwoWire::user_onReceive>
   1878e:	f0 91 c3 12 	lds	r31, 0x12C3	; 0x8012c3 <TwoWire::user_onReceive+0x1>
   18792:	30 97       	sbiw	r30, 0x00	; 0
   18794:	f1 f0       	breq	.+60     	; 0x187d2 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   18796:	90 91 eb 12 	lds	r25, 0x12EB	; 0x8012eb <TwoWire::rxBufferIndex>
   1879a:	80 91 ea 12 	lds	r24, 0x12EA	; 0x8012ea <TwoWire::rxBufferLength>
   1879e:	98 17       	cp	r25, r24
   187a0:	c0 f0       	brcs	.+48     	; 0x187d2 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
   187a2:	90 e0       	ldi	r25, 0x00	; 0
   187a4:	29 2f       	mov	r18, r25
   187a6:	30 e0       	ldi	r19, 0x00	; 0
   187a8:	26 17       	cp	r18, r22
   187aa:	37 07       	cpc	r19, r23
   187ac:	54 f4       	brge	.+20     	; 0x187c2 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
   187ae:	de 01       	movw	r26, r28
   187b0:	a2 0f       	add	r26, r18
   187b2:	b3 1f       	adc	r27, r19
   187b4:	4c 91       	ld	r20, X
   187b6:	24 51       	subi	r18, 0x14	; 20
   187b8:	3d 4e       	sbci	r19, 0xED	; 237
   187ba:	d9 01       	movw	r26, r18
   187bc:	4c 93       	st	X, r20
   187be:	9f 5f       	subi	r25, 0xFF	; 255
   187c0:	f1 cf       	rjmp	.-30     	; 0x187a4 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
   187c2:	10 92 eb 12 	sts	0x12EB, r1	; 0x8012eb <TwoWire::rxBufferIndex>
   187c6:	60 93 ea 12 	sts	0x12EA, r22	; 0x8012ea <TwoWire::rxBufferLength>
   187ca:	cb 01       	movw	r24, r22
   187cc:	df 91       	pop	r29
   187ce:	cf 91       	pop	r28
   187d0:	19 94       	eijmp
   187d2:	df 91       	pop	r29
   187d4:	cf 91       	pop	r28
   187d6:	08 95       	ret

000187d8 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
   187d8:	e0 91 c4 12 	lds	r30, 0x12C4	; 0x8012c4 <TwoWire::user_onRequest>
   187dc:	f0 91 c5 12 	lds	r31, 0x12C5	; 0x8012c5 <TwoWire::user_onRequest+0x1>
   187e0:	30 97       	sbiw	r30, 0x00	; 0
   187e2:	29 f0       	breq	.+10     	; 0x187ee <TwoWire::onRequestService()+0x16>
   187e4:	10 92 c8 12 	sts	0x12C8, r1	; 0x8012c8 <TwoWire::txBufferIndex>
   187e8:	10 92 c7 12 	sts	0x12C7, r1	; 0x8012c7 <TwoWire::txBufferLength>
   187ec:	19 94       	eijmp
   187ee:	08 95       	ret

000187f0 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
   187f0:	cf 93       	push	r28
   187f2:	df 93       	push	r29
   187f4:	1f 92       	push	r1
   187f6:	cd b7       	in	r28, 0x3d	; 61
   187f8:	de b7       	in	r29, 0x3e	; 62
   187fa:	69 83       	std	Y+1, r22	; 0x01
   187fc:	20 91 c6 12 	lds	r18, 0x12C6	; 0x8012c6 <TwoWire::transmitting>
   18800:	22 23       	and	r18, r18
   18802:	f9 f0       	breq	.+62     	; 0x18842 <TwoWire::write(unsigned char)+0x52>
   18804:	20 91 c7 12 	lds	r18, 0x12C7	; 0x8012c7 <TwoWire::txBufferLength>
   18808:	20 32       	cpi	r18, 0x20	; 32
   1880a:	58 f0       	brcs	.+22     	; 0x18822 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
   1880c:	21 e0       	ldi	r18, 0x01	; 1
   1880e:	30 e0       	ldi	r19, 0x00	; 0
   18810:	fc 01       	movw	r30, r24
   18812:	33 83       	std	Z+3, r19	; 0x03
   18814:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
   18816:	90 e0       	ldi	r25, 0x00	; 0
   18818:	80 e0       	ldi	r24, 0x00	; 0
   1881a:	0f 90       	pop	r0
   1881c:	df 91       	pop	r29
   1881e:	cf 91       	pop	r28
   18820:	08 95       	ret
   18822:	80 91 c8 12 	lds	r24, 0x12C8	; 0x8012c8 <TwoWire::txBufferIndex>
   18826:	e8 2f       	mov	r30, r24
   18828:	f0 e0       	ldi	r31, 0x00	; 0
   1882a:	e7 53       	subi	r30, 0x37	; 55
   1882c:	fd 4e       	sbci	r31, 0xED	; 237
   1882e:	99 81       	ldd	r25, Y+1	; 0x01
   18830:	90 83       	st	Z, r25
   18832:	8f 5f       	subi	r24, 0xFF	; 255
   18834:	80 93 c8 12 	sts	0x12C8, r24	; 0x8012c8 <TwoWire::txBufferIndex>
   18838:	80 93 c7 12 	sts	0x12C7, r24	; 0x8012c7 <TwoWire::txBufferLength>
   1883c:	81 e0       	ldi	r24, 0x01	; 1
   1883e:	90 e0       	ldi	r25, 0x00	; 0
   18840:	ec cf       	rjmp	.-40     	; 0x1881a <TwoWire::write(unsigned char)+0x2a>
   18842:	61 e0       	ldi	r22, 0x01	; 1
   18844:	ce 01       	movw	r24, r28
   18846:	01 96       	adiw	r24, 0x01	; 1
   18848:	0e 94 bf c5 	call	0x18b7e	; 0x18b7e <twi_transmit>
   1884c:	f7 cf       	rjmp	.-18     	; 0x1883c <TwoWire::write(unsigned char)+0x4c>

0001884e <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
   1884e:	cf 92       	push	r12
   18850:	df 92       	push	r13
   18852:	ef 92       	push	r14
   18854:	ff 92       	push	r15
   18856:	0f 93       	push	r16
   18858:	1f 93       	push	r17
   1885a:	cf 93       	push	r28
   1885c:	df 93       	push	r29
   1885e:	7c 01       	movw	r14, r24
   18860:	cb 01       	movw	r24, r22
   18862:	8a 01       	movw	r16, r20
   18864:	20 91 c6 12 	lds	r18, 0x12C6	; 0x8012c6 <TwoWire::transmitting>
   18868:	22 23       	and	r18, r18
   1886a:	89 f0       	breq	.+34     	; 0x1888e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   1886c:	eb 01       	movw	r28, r22
   1886e:	6b 01       	movw	r12, r22
   18870:	c4 0e       	add	r12, r20
   18872:	d5 1e       	adc	r13, r21
   18874:	cc 15       	cp	r28, r12
   18876:	dd 05       	cpc	r29, r13
   18878:	69 f0       	breq	.+26     	; 0x18894 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
   1887a:	69 91       	ld	r22, Y+
   1887c:	d7 01       	movw	r26, r14
   1887e:	ed 91       	ld	r30, X+
   18880:	fc 91       	ld	r31, X
   18882:	01 90       	ld	r0, Z+
   18884:	f0 81       	ld	r31, Z
   18886:	e0 2d       	mov	r30, r0
   18888:	c7 01       	movw	r24, r14
   1888a:	19 95       	eicall
   1888c:	f3 cf       	rjmp	.-26     	; 0x18874 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
   1888e:	64 2f       	mov	r22, r20
   18890:	0e 94 bf c5 	call	0x18b7e	; 0x18b7e <twi_transmit>
   18894:	c8 01       	movw	r24, r16
   18896:	df 91       	pop	r29
   18898:	cf 91       	pop	r28
   1889a:	1f 91       	pop	r17
   1889c:	0f 91       	pop	r16
   1889e:	ff 90       	pop	r15
   188a0:	ef 90       	pop	r14
   188a2:	df 90       	pop	r13
   188a4:	cf 90       	pop	r12
   188a6:	08 95       	ret

000188a8 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
   188a8:	10 92 eb 12 	sts	0x12EB, r1	; 0x8012eb <TwoWire::rxBufferIndex>
   188ac:	10 92 ea 12 	sts	0x12EA, r1	; 0x8012ea <TwoWire::rxBufferLength>
   188b0:	10 92 c8 12 	sts	0x12C8, r1	; 0x8012c8 <TwoWire::txBufferIndex>
   188b4:	10 92 c7 12 	sts	0x12C7, r1	; 0x8012c7 <TwoWire::txBufferLength>
   188b8:	0e 94 02 c5 	call	0x18a04	; 0x18a04 <twi_init>
   188bc:	8c ee       	ldi	r24, 0xEC	; 236
   188be:	93 ec       	ldi	r25, 0xC3	; 195
   188c0:	0e 94 eb c5 	call	0x18bd6	; 0x18bd6 <twi_attachSlaveTxEvent>
   188c4:	82 ec       	ldi	r24, 0xC2	; 194
   188c6:	93 ec       	ldi	r25, 0xC3	; 195
   188c8:	0c 94 e6 c5 	jmp	0x18bcc	; 0x18bcc <twi_attachSlaveRxEvent>

000188cc <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
   188cc:	81 e0       	ldi	r24, 0x01	; 1
   188ce:	80 93 c6 12 	sts	0x12C6, r24	; 0x8012c6 <TwoWire::transmitting>
   188d2:	60 93 e9 12 	sts	0x12E9, r22	; 0x8012e9 <TwoWire::txAddress>
   188d6:	10 92 c8 12 	sts	0x12C8, r1	; 0x8012c8 <TwoWire::txBufferIndex>
   188da:	10 92 c7 12 	sts	0x12C7, r1	; 0x8012c7 <TwoWire::txBufferLength>
   188de:	08 95       	ret

000188e0 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
   188e0:	0c 94 66 c4 	jmp	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>

000188e4 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
   188e4:	0f 93       	push	r16
   188e6:	06 2f       	mov	r16, r22
   188e8:	21 e0       	ldi	r18, 0x01	; 1
   188ea:	40 91 c7 12 	lds	r20, 0x12C7	; 0x8012c7 <TwoWire::txBufferLength>
   188ee:	69 ec       	ldi	r22, 0xC9	; 201
   188f0:	72 e1       	ldi	r23, 0x12	; 18
   188f2:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <TwoWire::txAddress>
   188f6:	0e 94 68 c5 	call	0x18ad0	; 0x18ad0 <twi_writeTo>
   188fa:	10 92 c8 12 	sts	0x12C8, r1	; 0x8012c8 <TwoWire::txBufferIndex>
   188fe:	10 92 c7 12 	sts	0x12C7, r1	; 0x8012c7 <TwoWire::txBufferLength>
   18902:	10 92 c6 12 	sts	0x12C6, r1	; 0x8012c6 <TwoWire::transmitting>
   18906:	0f 91       	pop	r16
   18908:	08 95       	ret

0001890a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
   1890a:	4f 92       	push	r4
   1890c:	5f 92       	push	r5
   1890e:	6f 92       	push	r6
   18910:	7f 92       	push	r7
   18912:	af 92       	push	r10
   18914:	bf 92       	push	r11
   18916:	cf 92       	push	r12
   18918:	ef 92       	push	r14
   1891a:	ff 92       	push	r15
   1891c:	0f 93       	push	r16
   1891e:	1f 93       	push	r17
   18920:	cf 93       	push	r28
   18922:	df 93       	push	r29
   18924:	5c 01       	movw	r10, r24
   18926:	f6 2e       	mov	r15, r22
   18928:	d4 2f       	mov	r29, r20
   1892a:	28 01       	movw	r4, r16
   1892c:	39 01       	movw	r6, r18
   1892e:	ee 20       	and	r14, r14
   18930:	19 f1       	breq	.+70     	; 0x18978 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
   18932:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
   18936:	ce 2d       	mov	r28, r14
   18938:	c4 30       	cpi	r28, 0x04	; 4
   1893a:	08 f0       	brcs	.+2      	; 0x1893e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   1893c:	c3 e0       	ldi	r28, 0x03	; 3
   1893e:	c1 50       	subi	r28, 0x01	; 1
   18940:	b8 f0       	brcs	.+46     	; 0x18970 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
   18942:	28 e0       	ldi	r18, 0x08	; 8
   18944:	c2 9f       	mul	r28, r18
   18946:	c0 01       	movw	r24, r0
   18948:	11 24       	eor	r1, r1
   1894a:	a3 01       	movw	r20, r6
   1894c:	92 01       	movw	r18, r4
   1894e:	04 c0       	rjmp	.+8      	; 0x18958 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
   18950:	56 95       	lsr	r21
   18952:	47 95       	ror	r20
   18954:	37 95       	ror	r19
   18956:	27 95       	ror	r18
   18958:	8a 95       	dec	r24
   1895a:	d2 f7       	brpl	.-12     	; 0x18950 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
   1895c:	b9 01       	movw	r22, r18
   1895e:	d5 01       	movw	r26, r10
   18960:	ed 91       	ld	r30, X+
   18962:	fc 91       	ld	r31, X
   18964:	01 90       	ld	r0, Z+
   18966:	f0 81       	ld	r31, Z
   18968:	e0 2d       	mov	r30, r0
   1896a:	c5 01       	movw	r24, r10
   1896c:	19 95       	eicall
   1896e:	e7 cf       	rjmp	.-50     	; 0x1893e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
   18970:	60 e0       	ldi	r22, 0x00	; 0
   18972:	c5 01       	movw	r24, r10
   18974:	0e 94 72 c4 	call	0x188e4	; 0x188e4 <TwoWire::endTransmission(unsigned char)>
   18978:	4d 2f       	mov	r20, r29
   1897a:	d1 32       	cpi	r29, 0x21	; 33
   1897c:	08 f0       	brcs	.+2      	; 0x18980 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
   1897e:	40 e2       	ldi	r20, 0x20	; 32
   18980:	2c 2d       	mov	r18, r12
   18982:	6c ee       	ldi	r22, 0xEC	; 236
   18984:	72 e1       	ldi	r23, 0x12	; 18
   18986:	8f 2d       	mov	r24, r15
   18988:	0e 94 20 c5 	call	0x18a40	; 0x18a40 <twi_readFrom>
   1898c:	10 92 eb 12 	sts	0x12EB, r1	; 0x8012eb <TwoWire::rxBufferIndex>
   18990:	80 93 ea 12 	sts	0x12EA, r24	; 0x8012ea <TwoWire::rxBufferLength>
   18994:	df 91       	pop	r29
   18996:	cf 91       	pop	r28
   18998:	1f 91       	pop	r17
   1899a:	0f 91       	pop	r16
   1899c:	ff 90       	pop	r15
   1899e:	ef 90       	pop	r14
   189a0:	cf 90       	pop	r12
   189a2:	bf 90       	pop	r11
   189a4:	af 90       	pop	r10
   189a6:	7f 90       	pop	r7
   189a8:	6f 90       	pop	r6
   189aa:	5f 90       	pop	r5
   189ac:	4f 90       	pop	r4
   189ae:	08 95       	ret

000189b0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
   189b0:	cf 92       	push	r12
   189b2:	ef 92       	push	r14
   189b4:	0f 93       	push	r16
   189b6:	1f 93       	push	r17
   189b8:	c2 2e       	mov	r12, r18
   189ba:	e1 2c       	mov	r14, r1
   189bc:	00 e0       	ldi	r16, 0x00	; 0
   189be:	10 e0       	ldi	r17, 0x00	; 0
   189c0:	98 01       	movw	r18, r16
   189c2:	0e 94 85 c4 	call	0x1890a	; 0x1890a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
   189c6:	1f 91       	pop	r17
   189c8:	0f 91       	pop	r16
   189ca:	ef 90       	pop	r14
   189cc:	cf 90       	pop	r12
   189ce:	08 95       	ret

000189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
   189d0:	21 e0       	ldi	r18, 0x01	; 1
   189d2:	0c 94 d8 c4 	jmp	0x189b0	; 0x189b0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000189d6 <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
   189d6:	21 e0       	ldi	r18, 0x01	; 1
   189d8:	0c 94 d8 c4 	jmp	0x189b0	; 0x189b0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

000189dc <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
   189dc:	61 e0       	ldi	r22, 0x01	; 1
   189de:	0c 94 72 c4 	jmp	0x188e4	; 0x188e4 <TwoWire::endTransmission(unsigned char)>

000189e2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   189e2:	e6 eb       	ldi	r30, 0xB6	; 182
   189e4:	f2 e1       	ldi	r31, 0x12	; 18
   189e6:	13 82       	std	Z+3, r1	; 0x03
   189e8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   189ea:	88 ee       	ldi	r24, 0xE8	; 232
   189ec:	93 e0       	ldi	r25, 0x03	; 3
   189ee:	a0 e0       	ldi	r26, 0x00	; 0
   189f0:	b0 e0       	ldi	r27, 0x00	; 0
   189f2:	84 83       	std	Z+4, r24	; 0x04
   189f4:	95 83       	std	Z+5, r25	; 0x05
   189f6:	a6 83       	std	Z+6, r26	; 0x06
   189f8:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:49
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
   189fa:	8b ea       	ldi	r24, 0xAB	; 171
   189fc:	98 e0       	ldi	r25, 0x08	; 8
   189fe:	91 83       	std	Z+1, r25	; 0x01
   18a00:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:330
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
   18a02:	08 95       	ret

00018a04 <twi_init>:
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   18a04:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <twi_state>
   18a08:	81 e0       	ldi	r24, 0x01	; 1
   18a0a:	80 93 77 13 	sts	0x1377, r24	; 0x801377 <twi_sendStop>
   18a0e:	10 92 76 13 	sts	0x1376, r1	; 0x801376 <twi_inRepStart>
   18a12:	61 e0       	ldi	r22, 0x01	; 1
   18a14:	83 e1       	ldi	r24, 0x13	; 19
   18a16:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   18a1a:	61 e0       	ldi	r22, 0x01	; 1
   18a1c:	82 e1       	ldi	r24, 0x12	; 18
   18a1e:	0e 94 93 cd 	call	0x19b26	; 0x19b26 <digitalWrite>
   18a22:	e9 eb       	ldi	r30, 0xB9	; 185
   18a24:	f0 e0       	ldi	r31, 0x00	; 0
   18a26:	80 81       	ld	r24, Z
   18a28:	8e 7f       	andi	r24, 0xFE	; 254
   18a2a:	80 83       	st	Z, r24
   18a2c:	80 81       	ld	r24, Z
   18a2e:	8d 7f       	andi	r24, 0xFD	; 253
   18a30:	80 83       	st	Z, r24
   18a32:	88 e4       	ldi	r24, 0x48	; 72
   18a34:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
   18a38:	85 e4       	ldi	r24, 0x45	; 69
   18a3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18a3e:	08 95       	ret

00018a40 <twi_readFrom>:
twi_readFrom():
   18a40:	41 32       	cpi	r20, 0x21	; 33
   18a42:	08 f0       	brcs	.+2      	; 0x18a46 <twi_readFrom+0x6>
   18a44:	43 c0       	rjmp	.+134    	; 0x18acc <twi_readFrom+0x8c>
   18a46:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <twi_state>
   18a4a:	91 11       	cpse	r25, r1
   18a4c:	fc cf       	rjmp	.-8      	; 0x18a46 <twi_readFrom+0x6>
   18a4e:	91 e0       	ldi	r25, 0x01	; 1
   18a50:	90 93 79 13 	sts	0x1379, r25	; 0x801379 <twi_state>
   18a54:	20 93 77 13 	sts	0x1377, r18	; 0x801377 <twi_sendStop>
   18a58:	2f ef       	ldi	r18, 0xFF	; 255
   18a5a:	20 93 0c 13 	sts	0x130C, r18	; 0x80130c <twi_error>
   18a5e:	10 92 51 13 	sts	0x1351, r1	; 0x801351 <twi_masterBufferIndex>
   18a62:	24 0f       	add	r18, r20
   18a64:	20 93 50 13 	sts	0x1350, r18	; 0x801350 <twi_masterBufferLength>
   18a68:	90 93 78 13 	sts	0x1378, r25	; 0x801378 <twi_slarw>
   18a6c:	90 91 78 13 	lds	r25, 0x1378	; 0x801378 <twi_slarw>
   18a70:	88 0f       	add	r24, r24
   18a72:	89 2b       	or	r24, r25
   18a74:	80 93 78 13 	sts	0x1378, r24	; 0x801378 <twi_slarw>
   18a78:	80 91 76 13 	lds	r24, 0x1376	; 0x801376 <twi_inRepStart>
   18a7c:	81 30       	cpi	r24, 0x01	; 1
   18a7e:	09 f5       	brne	.+66     	; 0x18ac2 <twi_readFrom+0x82>
   18a80:	10 92 76 13 	sts	0x1376, r1	; 0x801376 <twi_inRepStart>
   18a84:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <twi_slarw>
   18a88:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18a8c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18a90:	83 fd       	sbrc	r24, 3
   18a92:	f8 cf       	rjmp	.-16     	; 0x18a84 <twi_readFrom+0x44>
   18a94:	85 ec       	ldi	r24, 0xC5	; 197
   18a96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18a9a:	80 91 79 13 	lds	r24, 0x1379	; 0x801379 <twi_state>
   18a9e:	81 30       	cpi	r24, 0x01	; 1
   18aa0:	e1 f3       	breq	.-8      	; 0x18a9a <twi_readFrom+0x5a>
   18aa2:	80 91 51 13 	lds	r24, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18aa6:	84 17       	cp	r24, r20
   18aa8:	10 f4       	brcc	.+4      	; 0x18aae <twi_readFrom+0x6e>
   18aaa:	40 91 51 13 	lds	r20, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18aae:	a2 e5       	ldi	r26, 0x52	; 82
   18ab0:	b3 e1       	ldi	r27, 0x13	; 19
   18ab2:	96 2f       	mov	r25, r22
   18ab4:	fb 01       	movw	r30, r22
   18ab6:	8e 2f       	mov	r24, r30
   18ab8:	89 1b       	sub	r24, r25
   18aba:	84 17       	cp	r24, r20
   18abc:	20 f0       	brcs	.+8      	; 0x18ac6 <twi_readFrom+0x86>
   18abe:	84 2f       	mov	r24, r20
   18ac0:	08 95       	ret
   18ac2:	85 ee       	ldi	r24, 0xE5	; 229
   18ac4:	e8 cf       	rjmp	.-48     	; 0x18a96 <twi_readFrom+0x56>
   18ac6:	8d 91       	ld	r24, X+
   18ac8:	81 93       	st	Z+, r24
   18aca:	f5 cf       	rjmp	.-22     	; 0x18ab6 <twi_readFrom+0x76>
   18acc:	40 e0       	ldi	r20, 0x00	; 0
   18ace:	f7 cf       	rjmp	.-18     	; 0x18abe <twi_readFrom+0x7e>

00018ad0 <twi_writeTo>:
twi_writeTo():
   18ad0:	0f 93       	push	r16
   18ad2:	41 32       	cpi	r20, 0x21	; 33
   18ad4:	08 f0       	brcs	.+2      	; 0x18ad8 <twi_writeTo+0x8>
   18ad6:	4b c0       	rjmp	.+150    	; 0x18b6e <twi_writeTo+0x9e>
   18ad8:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <twi_state>
   18adc:	91 11       	cpse	r25, r1
   18ade:	fc cf       	rjmp	.-8      	; 0x18ad8 <twi_writeTo+0x8>
   18ae0:	92 e0       	ldi	r25, 0x02	; 2
   18ae2:	90 93 79 13 	sts	0x1379, r25	; 0x801379 <twi_state>
   18ae6:	00 93 77 13 	sts	0x1377, r16	; 0x801377 <twi_sendStop>
   18aea:	9f ef       	ldi	r25, 0xFF	; 255
   18aec:	90 93 0c 13 	sts	0x130C, r25	; 0x80130c <twi_error>
   18af0:	10 92 51 13 	sts	0x1351, r1	; 0x801351 <twi_masterBufferIndex>
   18af4:	40 93 50 13 	sts	0x1350, r20	; 0x801350 <twi_masterBufferLength>
   18af8:	36 2f       	mov	r19, r22
   18afa:	a2 e5       	ldi	r26, 0x52	; 82
   18afc:	b3 e1       	ldi	r27, 0x13	; 19
   18afe:	fb 01       	movw	r30, r22
   18b00:	9e 2f       	mov	r25, r30
   18b02:	93 1b       	sub	r25, r19
   18b04:	94 17       	cp	r25, r20
   18b06:	70 f1       	brcs	.+92     	; 0x18b64 <twi_writeTo+0x94>
   18b08:	10 92 78 13 	sts	0x1378, r1	; 0x801378 <twi_slarw>
   18b0c:	90 91 78 13 	lds	r25, 0x1378	; 0x801378 <twi_slarw>
   18b10:	88 0f       	add	r24, r24
   18b12:	89 2b       	or	r24, r25
   18b14:	80 93 78 13 	sts	0x1378, r24	; 0x801378 <twi_slarw>
   18b18:	80 91 76 13 	lds	r24, 0x1376	; 0x801376 <twi_inRepStart>
   18b1c:	81 30       	cpi	r24, 0x01	; 1
   18b1e:	29 f5       	brne	.+74     	; 0x18b6a <twi_writeTo+0x9a>
   18b20:	10 92 76 13 	sts	0x1376, r1	; 0x801376 <twi_inRepStart>
   18b24:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <twi_slarw>
   18b28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18b2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18b30:	83 fd       	sbrc	r24, 3
   18b32:	f8 cf       	rjmp	.-16     	; 0x18b24 <twi_writeTo+0x54>
   18b34:	85 ec       	ldi	r24, 0xC5	; 197
   18b36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18b3a:	22 23       	and	r18, r18
   18b3c:	21 f0       	breq	.+8      	; 0x18b46 <twi_writeTo+0x76>
   18b3e:	80 91 79 13 	lds	r24, 0x1379	; 0x801379 <twi_state>
   18b42:	82 30       	cpi	r24, 0x02	; 2
   18b44:	d1 f3       	breq	.-12     	; 0x18b3a <twi_writeTo+0x6a>
   18b46:	80 91 0c 13 	lds	r24, 0x130C	; 0x80130c <twi_error>
   18b4a:	8f 3f       	cpi	r24, 0xFF	; 255
   18b4c:	91 f0       	breq	.+36     	; 0x18b72 <twi_writeTo+0xa2>
   18b4e:	80 91 0c 13 	lds	r24, 0x130C	; 0x80130c <twi_error>
   18b52:	80 32       	cpi	r24, 0x20	; 32
   18b54:	81 f0       	breq	.+32     	; 0x18b76 <twi_writeTo+0xa6>
   18b56:	80 91 0c 13 	lds	r24, 0x130C	; 0x80130c <twi_error>
   18b5a:	80 33       	cpi	r24, 0x30	; 48
   18b5c:	71 f0       	breq	.+28     	; 0x18b7a <twi_writeTo+0xaa>
   18b5e:	84 e0       	ldi	r24, 0x04	; 4
   18b60:	0f 91       	pop	r16
   18b62:	08 95       	ret
   18b64:	91 91       	ld	r25, Z+
   18b66:	9d 93       	st	X+, r25
   18b68:	cb cf       	rjmp	.-106    	; 0x18b00 <twi_writeTo+0x30>
   18b6a:	85 ee       	ldi	r24, 0xE5	; 229
   18b6c:	e4 cf       	rjmp	.-56     	; 0x18b36 <twi_writeTo+0x66>
   18b6e:	81 e0       	ldi	r24, 0x01	; 1
   18b70:	f7 cf       	rjmp	.-18     	; 0x18b60 <twi_writeTo+0x90>
   18b72:	80 e0       	ldi	r24, 0x00	; 0
   18b74:	f5 cf       	rjmp	.-22     	; 0x18b60 <twi_writeTo+0x90>
   18b76:	82 e0       	ldi	r24, 0x02	; 2
   18b78:	f3 cf       	rjmp	.-26     	; 0x18b60 <twi_writeTo+0x90>
   18b7a:	83 e0       	ldi	r24, 0x03	; 3
   18b7c:	f1 cf       	rjmp	.-30     	; 0x18b60 <twi_writeTo+0x90>

00018b7e <twi_transmit>:
twi_transmit():
   18b7e:	20 91 2e 13 	lds	r18, 0x132E	; 0x80132e <twi_txBufferLength>
   18b82:	26 0f       	add	r18, r22
   18b84:	33 27       	eor	r19, r19
   18b86:	33 1f       	adc	r19, r19
   18b88:	21 32       	cpi	r18, 0x21	; 33
   18b8a:	31 05       	cpc	r19, r1
   18b8c:	ec f4       	brge	.+58     	; 0x18bc8 <twi_transmit+0x4a>
   18b8e:	20 91 79 13 	lds	r18, 0x1379	; 0x801379 <twi_state>
   18b92:	fc 01       	movw	r30, r24
   18b94:	90 e0       	ldi	r25, 0x00	; 0
   18b96:	80 e0       	ldi	r24, 0x00	; 0
   18b98:	24 30       	cpi	r18, 0x04	; 4
   18b9a:	69 f0       	breq	.+26     	; 0x18bb6 <twi_transmit+0x38>
   18b9c:	82 e0       	ldi	r24, 0x02	; 2
   18b9e:	08 95       	ret
   18ba0:	a0 91 2e 13 	lds	r26, 0x132E	; 0x80132e <twi_txBufferLength>
   18ba4:	21 91       	ld	r18, Z+
   18ba6:	ac 01       	movw	r20, r24
   18ba8:	40 5d       	subi	r20, 0xD0	; 208
   18baa:	5c 4e       	sbci	r21, 0xEC	; 236
   18bac:	a4 0f       	add	r26, r20
   18bae:	b5 2f       	mov	r27, r21
   18bb0:	b1 1d       	adc	r27, r1
   18bb2:	2c 93       	st	X, r18
   18bb4:	01 96       	adiw	r24, 0x01	; 1
   18bb6:	86 17       	cp	r24, r22
   18bb8:	98 f3       	brcs	.-26     	; 0x18ba0 <twi_transmit+0x22>
   18bba:	80 91 2e 13 	lds	r24, 0x132E	; 0x80132e <twi_txBufferLength>
   18bbe:	68 0f       	add	r22, r24
   18bc0:	60 93 2e 13 	sts	0x132E, r22	; 0x80132e <twi_txBufferLength>
   18bc4:	80 e0       	ldi	r24, 0x00	; 0
   18bc6:	08 95       	ret
   18bc8:	81 e0       	ldi	r24, 0x01	; 1
   18bca:	08 95       	ret

00018bcc <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
   18bcc:	90 93 73 13 	sts	0x1373, r25	; 0x801373 <twi_onSlaveReceive+0x1>
   18bd0:	80 93 72 13 	sts	0x1372, r24	; 0x801372 <twi_onSlaveReceive>
   18bd4:	08 95       	ret

00018bd6 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
   18bd6:	90 93 75 13 	sts	0x1375, r25	; 0x801375 <twi_onSlaveTransmit+0x1>
   18bda:	80 93 74 13 	sts	0x1374, r24	; 0x801374 <twi_onSlaveTransmit>
   18bde:	08 95       	ret

00018be0 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   18be0:	85 ed       	ldi	r24, 0xD5	; 213
   18be2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   18be6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18bea:	84 fd       	sbrc	r24, 4
   18bec:	fc cf       	rjmp	.-8      	; 0x18be6 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   18bee:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   18bf2:	08 95       	ret

00018bf4 <twi_releaseBus>:
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   18bf4:	85 ec       	ldi	r24, 0xC5	; 197
   18bf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   18bfa:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:397
}
   18bfe:	08 95       	ret

00018c00 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400

ISR(TWI_vect)
{
   18c00:	1f 92       	push	r1
   18c02:	0f 92       	push	r0
   18c04:	0f b6       	in	r0, 0x3f	; 63
   18c06:	0f 92       	push	r0
   18c08:	11 24       	eor	r1, r1
   18c0a:	0b b6       	in	r0, 0x3b	; 59
   18c0c:	0f 92       	push	r0
   18c0e:	2f 93       	push	r18
   18c10:	3f 93       	push	r19
   18c12:	4f 93       	push	r20
   18c14:	5f 93       	push	r21
   18c16:	6f 93       	push	r22
   18c18:	7f 93       	push	r23
   18c1a:	8f 93       	push	r24
   18c1c:	9f 93       	push	r25
   18c1e:	af 93       	push	r26
   18c20:	bf 93       	push	r27
   18c22:	ef 93       	push	r30
   18c24:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   18c26:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   18c2a:	88 7f       	andi	r24, 0xF8	; 248
   18c2c:	80 36       	cpi	r24, 0x60	; 96
   18c2e:	09 f4       	brne	.+2      	; 0x18c32 <__vector_39+0x32>
   18c30:	4e c0       	rjmp	.+156    	; 0x18cce <__vector_39+0xce>
   18c32:	08 f0       	brcs	.+2      	; 0x18c36 <__vector_39+0x36>
   18c34:	41 c0       	rjmp	.+130    	; 0x18cb8 <__vector_39+0xb8>
   18c36:	88 32       	cpi	r24, 0x28	; 40
   18c38:	09 f4       	brne	.+2      	; 0x18c3c <__vector_39+0x3c>
   18c3a:	aa c0       	rjmp	.+340    	; 0x18d90 <__vector_39+0x190>
   18c3c:	28 f5       	brcc	.+74     	; 0x18c88 <__vector_39+0x88>
   18c3e:	80 31       	cpi	r24, 0x10	; 16
   18c40:	09 f4       	brne	.+2      	; 0x18c44 <__vector_39+0x44>
   18c42:	9e c0       	rjmp	.+316    	; 0x18d80 <__vector_39+0x180>
   18c44:	c8 f4       	brcc	.+50     	; 0x18c78 <__vector_39+0x78>
   18c46:	88 23       	and	r24, r24
   18c48:	09 f4       	brne	.+2      	; 0x18c4c <__vector_39+0x4c>
   18c4a:	fb c0       	rjmp	.+502    	; 0x18e42 <__vector_39+0x242>
   18c4c:	88 30       	cpi	r24, 0x08	; 8
   18c4e:	09 f4       	brne	.+2      	; 0x18c52 <__vector_39+0x52>
   18c50:	97 c0       	rjmp	.+302    	; 0x18d80 <__vector_39+0x180>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   18c52:	ff 91       	pop	r31
   18c54:	ef 91       	pop	r30
   18c56:	bf 91       	pop	r27
   18c58:	af 91       	pop	r26
   18c5a:	9f 91       	pop	r25
   18c5c:	8f 91       	pop	r24
   18c5e:	7f 91       	pop	r23
   18c60:	6f 91       	pop	r22
   18c62:	5f 91       	pop	r21
   18c64:	4f 91       	pop	r20
   18c66:	3f 91       	pop	r19
   18c68:	2f 91       	pop	r18
   18c6a:	0f 90       	pop	r0
   18c6c:	0b be       	out	0x3b, r0	; 59
   18c6e:	0f 90       	pop	r0
   18c70:	0f be       	out	0x3f, r0	; 63
   18c72:	0f 90       	pop	r0
   18c74:	1f 90       	pop	r1
   18c76:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c78:	88 31       	cpi	r24, 0x18	; 24
   18c7a:	09 f4       	brne	.+2      	; 0x18c7e <__vector_39+0x7e>
   18c7c:	89 c0       	rjmp	.+274    	; 0x18d90 <__vector_39+0x190>
   18c7e:	80 32       	cpi	r24, 0x20	; 32
   18c80:	41 f7       	brne	.-48     	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   18c82:	80 93 0c 13 	sts	0x130C, r24	; 0x80130c <twi_error>
   18c86:	15 c0       	rjmp	.+42     	; 0x18cb2 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18c88:	80 34       	cpi	r24, 0x40	; 64
   18c8a:	09 f4       	brne	.+2      	; 0x18c8e <__vector_39+0x8e>
   18c8c:	9e c0       	rjmp	.+316    	; 0x18dca <__vector_39+0x1ca>
   18c8e:	48 f4       	brcc	.+18     	; 0x18ca2 <__vector_39+0xa2>
   18c90:	80 33       	cpi	r24, 0x30	; 48
   18c92:	b9 f3       	breq	.-18     	; 0x18c82 <__vector_39+0x82>
   18c94:	88 33       	cpi	r24, 0x38	; 56
   18c96:	e9 f6       	brne	.-70     	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   18c98:	80 93 0c 13 	sts	0x130C, r24	; 0x80130c <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:441
      twi_releaseBus();
   18c9c:	0e 94 fa c5 	call	0x18bf4	; 0x18bf4 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:442
      break;
   18ca0:	d8 cf       	rjmp	.-80     	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18ca2:	80 35       	cpi	r24, 0x50	; 80
   18ca4:	09 f4       	brne	.+2      	; 0x18ca8 <__vector_39+0xa8>
   18ca6:	85 c0       	rjmp	.+266    	; 0x18db2 <__vector_39+0x1b2>
   18ca8:	88 35       	cpi	r24, 0x58	; 88
   18caa:	09 f4       	brne	.+2      	; 0x18cae <__vector_39+0xae>
   18cac:	96 c0       	rjmp	.+300    	; 0x18dda <__vector_39+0x1da>
   18cae:	88 34       	cpi	r24, 0x48	; 72
   18cb0:	81 f6       	brne	.-96     	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   18cb2:	0e 94 f0 c5 	call	0x18be0	; 0x18be0 <twi_stop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
      break;
  }
}
   18cb6:	cd cf       	rjmp	.-102    	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18cb8:	88 39       	cpi	r24, 0x98	; 152
   18cba:	09 f4       	brne	.+2      	; 0x18cbe <__vector_39+0xbe>
   18cbc:	8c c0       	rjmp	.+280    	; 0x18dd6 <__vector_39+0x1d6>
   18cbe:	38 f5       	brcc	.+78     	; 0x18d0e <__vector_39+0x10e>
   18cc0:	88 37       	cpi	r24, 0x78	; 120
   18cc2:	29 f0       	breq	.+10     	; 0x18cce <__vector_39+0xce>
   18cc4:	50 f4       	brcc	.+20     	; 0x18cda <__vector_39+0xda>
   18cc6:	88 36       	cpi	r24, 0x68	; 104
   18cc8:	11 f0       	breq	.+4      	; 0x18cce <__vector_39+0xce>
   18cca:	80 37       	cpi	r24, 0x70	; 112
   18ccc:	11 f6       	brne	.-124    	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   18cce:	83 e0       	ldi	r24, 0x03	; 3
   18cd0:	80 93 79 13 	sts	0x1379, r24	; 0x801379 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   18cd4:	10 92 0d 13 	sts	0x130D, r1	; 0x80130d <twi_rxBufferIndex>
   18cd8:	57 c0       	rjmp	.+174    	; 0x18d88 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18cda:	88 38       	cpi	r24, 0x88	; 136
   18cdc:	09 f4       	brne	.+2      	; 0x18ce0 <__vector_39+0xe0>
   18cde:	7b c0       	rjmp	.+246    	; 0x18dd6 <__vector_39+0x1d6>
   18ce0:	80 39       	cpi	r24, 0x90	; 144
   18ce2:	19 f0       	breq	.+6      	; 0x18cea <__vector_39+0xea>
   18ce4:	80 38       	cpi	r24, 0x80	; 128
   18ce6:	09 f0       	breq	.+2      	; 0x18cea <__vector_39+0xea>
   18ce8:	b4 cf       	rjmp	.-152    	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   18cea:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <twi_rxBufferIndex>
   18cee:	80 32       	cpi	r24, 0x20	; 32
   18cf0:	08 f0       	brcs	.+2      	; 0x18cf4 <__vector_39+0xf4>
   18cf2:	71 c0       	rjmp	.+226    	; 0x18dd6 <__vector_39+0x1d6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   18cf4:	e0 91 0d 13 	lds	r30, 0x130D	; 0x80130d <twi_rxBufferIndex>
   18cf8:	81 e0       	ldi	r24, 0x01	; 1
   18cfa:	8e 0f       	add	r24, r30
   18cfc:	80 93 0d 13 	sts	0x130D, r24	; 0x80130d <twi_rxBufferIndex>
   18d00:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18d04:	f0 e0       	ldi	r31, 0x00	; 0
   18d06:	e2 5f       	subi	r30, 0xF2	; 242
   18d08:	fc 4e       	sbci	r31, 0xEC	; 236
   18d0a:	80 83       	st	Z, r24
   18d0c:	3d c0       	rjmp	.+122    	; 0x18d88 <__vector_39+0x188>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18d0e:	80 3b       	cpi	r24, 0xB0	; 176
   18d10:	39 f0       	breq	.+14     	; 0x18d20 <__vector_39+0x120>
   18d12:	e0 f4       	brcc	.+56     	; 0x18d4c <__vector_39+0x14c>
   18d14:	80 3a       	cpi	r24, 0xA0	; 160
   18d16:	09 f4       	brne	.+2      	; 0x18d1a <__vector_39+0x11a>
   18d18:	79 c0       	rjmp	.+242    	; 0x18e0c <__vector_39+0x20c>
   18d1a:	88 3a       	cpi	r24, 0xA8	; 168
   18d1c:	09 f0       	breq	.+2      	; 0x18d20 <__vector_39+0x120>
   18d1e:	99 cf       	rjmp	.-206    	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   18d20:	84 e0       	ldi	r24, 0x04	; 4
   18d22:	80 93 79 13 	sts	0x1379, r24	; 0x801379 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   18d26:	10 92 2f 13 	sts	0x132F, r1	; 0x80132f <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   18d2a:	10 92 2e 13 	sts	0x132E, r1	; 0x80132e <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   18d2e:	e0 91 74 13 	lds	r30, 0x1374	; 0x801374 <twi_onSlaveTransmit>
   18d32:	f0 91 75 13 	lds	r31, 0x1375	; 0x801375 <twi_onSlaveTransmit+0x1>
   18d36:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   18d38:	80 91 2e 13 	lds	r24, 0x132E	; 0x80132e <twi_txBufferLength>
   18d3c:	81 11       	cpse	r24, r1
   18d3e:	0f c0       	rjmp	.+30     	; 0x18d5e <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   18d40:	81 e0       	ldi	r24, 0x01	; 1
   18d42:	80 93 2e 13 	sts	0x132E, r24	; 0x80132e <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   18d46:	10 92 30 13 	sts	0x1330, r1	; 0x801330 <twi_txBuffer>
   18d4a:	09 c0       	rjmp	.+18     	; 0x18d5e <__vector_39+0x15e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   18d4c:	80 3c       	cpi	r24, 0xC0	; 192
   18d4e:	09 f4       	brne	.+2      	; 0x18d52 <__vector_39+0x152>
   18d50:	76 c0       	rjmp	.+236    	; 0x18e3e <__vector_39+0x23e>
   18d52:	88 3c       	cpi	r24, 0xC8	; 200
   18d54:	09 f4       	brne	.+2      	; 0x18d58 <__vector_39+0x158>
   18d56:	73 c0       	rjmp	.+230    	; 0x18e3e <__vector_39+0x23e>
   18d58:	88 3b       	cpi	r24, 0xB8	; 184
   18d5a:	09 f0       	breq	.+2      	; 0x18d5e <__vector_39+0x15e>
   18d5c:	7a cf       	rjmp	.-268    	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   18d5e:	e0 91 2f 13 	lds	r30, 0x132F	; 0x80132f <twi_txBufferIndex>
   18d62:	81 e0       	ldi	r24, 0x01	; 1
   18d64:	8e 0f       	add	r24, r30
   18d66:	80 93 2f 13 	sts	0x132F, r24	; 0x80132f <twi_txBufferIndex>
   18d6a:	f0 e0       	ldi	r31, 0x00	; 0
   18d6c:	e0 5d       	subi	r30, 0xD0	; 208
   18d6e:	fc 4e       	sbci	r31, 0xEC	; 236
   18d70:	80 81       	ld	r24, Z
   18d72:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   18d76:	90 91 2f 13 	lds	r25, 0x132F	; 0x80132f <twi_txBufferIndex>
   18d7a:	80 91 2e 13 	lds	r24, 0x132E	; 0x80132e <twi_txBufferLength>
   18d7e:	29 c0       	rjmp	.+82     	; 0x18dd2 <__vector_39+0x1d2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   18d80:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   18d84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   18d88:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   18d8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   18d8e:	61 cf       	rjmp	.-318    	; 0x18c52 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   18d90:	90 91 51 13 	lds	r25, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18d94:	80 91 50 13 	lds	r24, 0x1350	; 0x801350 <twi_masterBufferLength>
   18d98:	98 17       	cp	r25, r24
   18d9a:	58 f5       	brcc	.+86     	; 0x18df2 <__vector_39+0x1f2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   18d9c:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18da0:	81 e0       	ldi	r24, 0x01	; 1
   18da2:	8e 0f       	add	r24, r30
   18da4:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <twi_masterBufferIndex>
   18da8:	f0 e0       	ldi	r31, 0x00	; 0
   18daa:	ee 5a       	subi	r30, 0xAE	; 174
   18dac:	fc 4e       	sbci	r31, 0xEC	; 236
   18dae:	80 81       	ld	r24, Z
   18db0:	e9 cf       	rjmp	.-46     	; 0x18d84 <__vector_39+0x184>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   18db2:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18db6:	81 e0       	ldi	r24, 0x01	; 1
   18db8:	8e 0f       	add	r24, r30
   18dba:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <twi_masterBufferIndex>
   18dbe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18dc2:	f0 e0       	ldi	r31, 0x00	; 0
   18dc4:	ee 5a       	subi	r30, 0xAE	; 174
   18dc6:	fc 4e       	sbci	r31, 0xEC	; 236
   18dc8:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   18dca:	90 91 51 13 	lds	r25, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18dce:	80 91 50 13 	lds	r24, 0x1350	; 0x801350 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   18dd2:	98 17       	cp	r25, r24
   18dd4:	c8 f2       	brcs	.-78     	; 0x18d88 <__vector_39+0x188>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   18dd6:	85 e8       	ldi	r24, 0x85	; 133
   18dd8:	d8 cf       	rjmp	.-80     	; 0x18d8a <__vector_39+0x18a>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   18dda:	e0 91 51 13 	lds	r30, 0x1351	; 0x801351 <twi_masterBufferIndex>
   18dde:	81 e0       	ldi	r24, 0x01	; 1
   18de0:	8e 0f       	add	r24, r30
   18de2:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <twi_masterBufferIndex>
   18de6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   18dea:	f0 e0       	ldi	r31, 0x00	; 0
   18dec:	ee 5a       	subi	r30, 0xAE	; 174
   18dee:	fc 4e       	sbci	r31, 0xEC	; 236
   18df0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   18df2:	80 91 77 13 	lds	r24, 0x1377	; 0x801377 <twi_sendStop>
   18df6:	81 11       	cpse	r24, r1
   18df8:	5c cf       	rjmp	.-328    	; 0x18cb2 <__vector_39+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   18dfa:	81 e0       	ldi	r24, 0x01	; 1
   18dfc:	80 93 76 13 	sts	0x1376, r24	; 0x801376 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   18e00:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   18e02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   18e06:	10 92 79 13 	sts	0x1379, r1	; 0x801379 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:552
      break;
   18e0a:	23 cf       	rjmp	.-442    	; 0x18c52 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
   18e0c:	0e 94 fa c5 	call	0x18bf4	; 0x18bf4 <twi_releaseBus>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   18e10:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <twi_rxBufferIndex>
   18e14:	80 32       	cpi	r24, 0x20	; 32
   18e16:	30 f4       	brcc	.+12     	; 0x18e24 <__vector_39+0x224>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   18e18:	e0 91 0d 13 	lds	r30, 0x130D	; 0x80130d <twi_rxBufferIndex>
   18e1c:	f0 e0       	ldi	r31, 0x00	; 0
   18e1e:	e2 5f       	subi	r30, 0xF2	; 242
   18e20:	fc 4e       	sbci	r31, 0xEC	; 236
   18e22:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   18e24:	60 91 0d 13 	lds	r22, 0x130D	; 0x80130d <twi_rxBufferIndex>
   18e28:	70 e0       	ldi	r23, 0x00	; 0
   18e2a:	e0 91 72 13 	lds	r30, 0x1372	; 0x801372 <twi_onSlaveReceive>
   18e2e:	f0 91 73 13 	lds	r31, 0x1373	; 0x801373 <twi_onSlaveReceive+0x1>
   18e32:	8e e0       	ldi	r24, 0x0E	; 14
   18e34:	93 e1       	ldi	r25, 0x13	; 19
   18e36:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   18e38:	10 92 0d 13 	sts	0x130D, r1	; 0x80130d <twi_rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:510
      break;
   18e3c:	0a cf       	rjmp	.-492    	; 0x18c52 <__vector_39+0x52>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   18e3e:	85 ec       	ldi	r24, 0xC5	; 197
   18e40:	e0 cf       	rjmp	.-64     	; 0x18e02 <__vector_39+0x202>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   18e42:	10 92 0c 13 	sts	0x130C, r1	; 0x80130c <twi_error>
   18e46:	35 cf       	rjmp	.-406    	; 0x18cb2 <__vector_39+0xb2>

00018e48 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>:
_Z12owWriteBlockhPhh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:90
		if(r)
			return r;
	}

	return DS2482_ERR_OK;
}
   18e48:	ff 92       	push	r15
   18e4a:	0f 93       	push	r16
   18e4c:	1f 93       	push	r17
   18e4e:	cf 93       	push	r28
   18e50:	df 93       	push	r29
   18e52:	f8 2e       	mov	r15, r24
   18e54:	eb 01       	movw	r28, r22
   18e56:	8b 01       	movw	r16, r22
   18e58:	04 0f       	add	r16, r20
   18e5a:	11 1d       	adc	r17, r1
   18e5c:	c0 17       	cp	r28, r16
   18e5e:	d1 07       	cpc	r29, r17
   18e60:	61 f0       	breq	.+24     	; 0x18e7a <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x32>
   18e62:	69 91       	ld	r22, Y+
   18e64:	8f 2d       	mov	r24, r15
   18e66:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <ds2482owWriteByte(unsigned char, unsigned char)>
   18e6a:	88 23       	and	r24, r24
   18e6c:	b9 f3       	breq	.-18     	; 0x18e5c <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x14>
   18e6e:	df 91       	pop	r29
   18e70:	cf 91       	pop	r28
   18e72:	1f 91       	pop	r17
   18e74:	0f 91       	pop	r16
   18e76:	ff 90       	pop	r15
   18e78:	08 95       	ret
   18e7a:	80 e0       	ldi	r24, 0x00	; 0
   18e7c:	f8 cf       	rjmp	.-16     	; 0x18e6e <owWriteBlock(unsigned char, unsigned char*, unsigned char)+0x26>

00018e7e <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
   18e7e:	0f 93       	push	r16
   18e80:	1f 93       	push	r17
   18e82:	cf 93       	push	r28
   18e84:	c8 2f       	mov	r28, r24
   18e86:	8b 01       	movw	r16, r22
   18e88:	65 e5       	ldi	r22, 0x55	; 85
   18e8a:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <ds2482owWriteByte(unsigned char, unsigned char)>
   18e8e:	81 11       	cpse	r24, r1
   18e90:	08 c0       	rjmp	.+16     	; 0x18ea2 <owMatchRom(unsigned char, unsigned char*)+0x24>
   18e92:	48 e0       	ldi	r20, 0x08	; 8
   18e94:	b8 01       	movw	r22, r16
   18e96:	8c 2f       	mov	r24, r28
   18e98:	cf 91       	pop	r28
   18e9a:	1f 91       	pop	r17
   18e9c:	0f 91       	pop	r16
   18e9e:	0c 94 24 c7 	jmp	0x18e48	; 0x18e48 <owWriteBlock(unsigned char, unsigned char*, unsigned char)>
   18ea2:	cf 91       	pop	r28
   18ea4:	1f 91       	pop	r17
   18ea6:	0f 91       	pop	r16
   18ea8:	08 95       	ret

00018eaa <owMatchNext(unsigned char, unsigned char*)>:
_Z11owMatchNexthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:123
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
   18eaa:	bf 92       	push	r11
   18eac:	cf 92       	push	r12
   18eae:	df 92       	push	r13
   18eb0:	ef 92       	push	r14
   18eb2:	ff 92       	push	r15
   18eb4:	0f 93       	push	r16
   18eb6:	1f 93       	push	r17
   18eb8:	cf 93       	push	r28
   18eba:	df 93       	push	r29
   18ebc:	1f 92       	push	r1
   18ebe:	cd b7       	in	r28, 0x3d	; 61
   18ec0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   18ec2:	90 91 7a 13 	lds	r25, 0x137A	; 0x80137a <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   18ec6:	15 e0       	ldi	r17, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   18ec8:	91 11       	cpse	r25, r1
   18eca:	12 c0       	rjmp	.+36     	; 0x18ef0 <owMatchNext(unsigned char, unsigned char*)+0x46>
   18ecc:	7b 01       	movw	r14, r22
   18ece:	b8 2e       	mov	r11, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   18ed0:	0e 94 40 c8 	call	0x19080	; 0x19080 <ds2482owReset(unsigned char)>
   18ed4:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   18ed6:	81 11       	cpse	r24, r1
   18ed8:	0b c0       	rjmp	.+22     	; 0x18ef0 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   18eda:	60 ef       	ldi	r22, 0xF0	; 240
   18edc:	8b 2d       	mov	r24, r11
   18ede:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <ds2482owWriteByte(unsigned char, unsigned char)>
   18ee2:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   18ee4:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   18ee6:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   18ee8:	dd 24       	eor	r13, r13
   18eea:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   18eec:	88 23       	and	r24, r24
   18eee:	81 f0       	breq	.+32     	; 0x18f10 <owMatchNext(unsigned char, unsigned char*)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   18ef0:	81 2f       	mov	r24, r17
   18ef2:	0f 90       	pop	r0
   18ef4:	df 91       	pop	r29
   18ef6:	cf 91       	pop	r28
   18ef8:	1f 91       	pop	r17
   18efa:	0f 91       	pop	r16
   18efc:	ff 90       	pop	r15
   18efe:	ef 90       	pop	r14
   18f00:	df 90       	pop	r13
   18f02:	cf 90       	pop	r12
   18f04:	bf 90       	pop	r11
   18f06:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   18f08:	98 e0       	ldi	r25, 0x08	; 8
   18f0a:	c9 16       	cp	r12, r25
   18f0c:	09 f4       	brne	.+2      	; 0x18f10 <owMatchNext(unsigned char, unsigned char*)+0x66>
   18f0e:	45 c0       	rjmp	.+138    	; 0x18f9a <owMatchNext(unsigned char, unsigned char*)+0xf0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   18f10:	90 91 7b 13 	lds	r25, 0x137B	; 0x80137b <lastDiscrepancy>
   18f14:	d9 16       	cp	r13, r25
   18f16:	88 f5       	brcc	.+98     	; 0x18f7a <owMatchNext(unsigned char, unsigned char*)+0xd0>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   18f18:	f7 01       	movw	r30, r14
   18f1a:	ec 0d       	add	r30, r12
   18f1c:	f1 1d       	adc	r31, r1
   18f1e:	80 81       	ld	r24, Z
   18f20:	80 23       	and	r24, r16
   18f22:	91 e0       	ldi	r25, 0x01	; 1
   18f24:	09 f4       	brne	.+2      	; 0x18f28 <owMatchNext(unsigned char, unsigned char*)+0x7e>
   18f26:	90 e0       	ldi	r25, 0x00	; 0
   18f28:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:148
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);

		r=ds2482owWriteTriplet(ds2482_address, &direction);
   18f2a:	be 01       	movw	r22, r28
   18f2c:	6f 5f       	subi	r22, 0xFF	; 255
   18f2e:	7f 4f       	sbci	r23, 0xFF	; 255
   18f30:	8b 2d       	mov	r24, r11
   18f32:	0e 94 b9 c8 	call	0x19172	; 0x19172 <ds2482owWriteTriplet(unsigned char, unsigned char*)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:149
		if(r) return r;
   18f36:	81 11       	cpse	r24, r1
   18f38:	3a c0       	rjmp	.+116    	; 0x18fae <owMatchNext(unsigned char, unsigned char*)+0x104>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   18f3a:	29 81       	ldd	r18, Y+1	; 0x01
   18f3c:	30 e0       	ldi	r19, 0x00	; 0
   18f3e:	a9 01       	movw	r20, r18
   18f40:	95 e0       	ldi	r25, 0x05	; 5
   18f42:	55 95       	asr	r21
   18f44:	47 95       	ror	r20
   18f46:	9a 95       	dec	r25
   18f48:	e1 f7       	brne	.-8      	; 0x18f42 <owMatchNext(unsigned char, unsigned char*)+0x98>
   18f4a:	43 70       	andi	r20, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   18f4c:	22 0f       	add	r18, r18
   18f4e:	23 2f       	mov	r18, r19
   18f50:	22 1f       	adc	r18, r18
   18f52:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   18f54:	43 30       	cpi	r20, 0x03	; 3
   18f56:	09 f1       	breq	.+66     	; 0x18f9a <owMatchNext(unsigned char, unsigned char*)+0xf0>
   18f58:	ec 2d       	mov	r30, r12
   18f5a:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   18f5c:	41 11       	cpse	r20, r1
   18f5e:	12 c0       	rjmp	.+36     	; 0x18f84 <owMatchNext(unsigned char, unsigned char*)+0xda>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   18f60:	22 23       	and	r18, r18
   18f62:	c9 f0       	breq	.+50     	; 0x18f96 <owMatchNext(unsigned char, unsigned char*)+0xec>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   18f64:	ee 0d       	add	r30, r14
   18f66:	ff 1d       	adc	r31, r15
   18f68:	90 81       	ld	r25, Z
   18f6a:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   18f6c:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   18f6e:	d3 94       	inc	r13
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   18f70:	00 0f       	add	r16, r16
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   18f72:	51 f6       	brne	.-108    	; 0x18f08 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   18f74:	c3 94       	inc	r12
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   18f76:	01 e0       	ldi	r16, 0x01	; 1
   18f78:	c7 cf       	rjmp	.-114    	; 0x18f08 <owMatchNext(unsigned char, unsigned char*)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   18f7a:	81 e0       	ldi	r24, 0x01	; 1
   18f7c:	9d 11       	cpse	r25, r13
   18f7e:	80 e0       	ldi	r24, 0x00	; 0
   18f80:	89 83       	std	Y+1, r24	; 0x01
   18f82:	d3 cf       	rjmp	.-90     	; 0x18f2a <owMatchNext(unsigned char, unsigned char*)+0x80>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   18f84:	21 11       	cpse	r18, r1
   18f86:	ee cf       	rjmp	.-36     	; 0x18f64 <owMatchNext(unsigned char, unsigned char*)+0xba>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   18f88:	ee 0d       	add	r30, r14
   18f8a:	ff 1d       	adc	r31, r15
   18f8c:	90 81       	ld	r25, Z
   18f8e:	20 2f       	mov	r18, r16
   18f90:	20 95       	com	r18
   18f92:	92 23       	and	r25, r18
   18f94:	eb cf       	rjmp	.-42     	; 0x18f6c <owMatchNext(unsigned char, unsigned char*)+0xc2>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   18f96:	1d 2d       	mov	r17, r13
   18f98:	f7 cf       	rjmp	.-18     	; 0x18f88 <owMatchNext(unsigned char, unsigned char*)+0xde>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   18f9a:	90 e4       	ldi	r25, 0x40	; 64
   18f9c:	9d 15       	cp	r25, r13
   18f9e:	48 f4       	brcc	.+18     	; 0x18fb2 <owMatchNext(unsigned char, unsigned char*)+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   18fa0:	10 93 7b 13 	sts	0x137B, r17	; 0x80137b <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   18fa4:	91 e0       	ldi	r25, 0x01	; 1
   18fa6:	11 11       	cpse	r17, r1
   18fa8:	90 e0       	ldi	r25, 0x00	; 0
   18faa:	90 93 7a 13 	sts	0x137A, r25	; 0x80137a <lastDevice>
   18fae:	18 2f       	mov	r17, r24
   18fb0:	9f cf       	rjmp	.-194    	; 0x18ef0 <owMatchNext(unsigned char, unsigned char*)+0x46>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:187
	}else
	{
		return DS2482_ERR_NO_DEVICE;
   18fb2:	85 e0       	ldi	r24, 0x05	; 5
   18fb4:	fc cf       	rjmp	.-8      	; 0x18fae <owMatchNext(unsigned char, unsigned char*)+0x104>

00018fb6 <owMatchFirst(unsigned char, unsigned char*)>:
_Z12owMatchFirsthPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   18fb6:	10 92 7a 13 	sts	0x137A, r1	; 0x80137a <lastDevice>
   18fba:	10 92 7b 13 	sts	0x137B, r1	; 0x80137b <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   18fbe:	0c 94 55 c7 	jmp	0x18eaa	; 0x18eaa <owMatchNext(unsigned char, unsigned char*)>

00018fc2 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:296
          {
          *config = Wire.read();
          return DS2482_ERR_OK;
          }
        else
          return DS2482_ERR_READ;
   18fc2:	68 2f       	mov	r22, r24
   18fc4:	86 eb       	ldi	r24, 0xB6	; 182
   18fc6:	92 e1       	ldi	r25, 0x12	; 18
   18fc8:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
   18fcc:	60 ef       	ldi	r22, 0xF0	; 240
   18fce:	70 e0       	ldi	r23, 0x00	; 0
   18fd0:	86 eb       	ldi	r24, 0xB6	; 182
   18fd2:	92 e1       	ldi	r25, 0x12	; 18
   18fd4:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
   18fd8:	86 eb       	ldi	r24, 0xB6	; 182
   18fda:	92 e1       	ldi	r25, 0x12	; 18
   18fdc:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   18fe0:	81 11       	cpse	r24, r1
   18fe2:	8a e0       	ldi	r24, 0x0A	; 10
   18fe4:	08 95       	ret

00018fe6 <ds2482setReadPointer(unsigned char, unsigned char)>:
_Z20ds2482setReadPointerhh():
   18fe6:	cf 93       	push	r28
   18fe8:	c6 2f       	mov	r28, r22
   18fea:	68 2f       	mov	r22, r24
   18fec:	86 eb       	ldi	r24, 0xB6	; 182
   18fee:	92 e1       	ldi	r25, 0x12	; 18
   18ff0:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
   18ff4:	61 ee       	ldi	r22, 0xE1	; 225
   18ff6:	70 e0       	ldi	r23, 0x00	; 0
   18ff8:	86 eb       	ldi	r24, 0xB6	; 182
   18ffa:	92 e1       	ldi	r25, 0x12	; 18
   18ffc:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
   19000:	6c 2f       	mov	r22, r28
   19002:	86 eb       	ldi	r24, 0xB6	; 182
   19004:	92 e1       	ldi	r25, 0x12	; 18
   19006:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   1900a:	86 eb       	ldi	r24, 0xB6	; 182
   1900c:	92 e1       	ldi	r25, 0x12	; 18
   1900e:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   19012:	81 11       	cpse	r24, r1
   19014:	83 e0       	ldi	r24, 0x03	; 3
   19016:	cf 91       	pop	r28
   19018:	08 95       	ret

0001901a <ds2482setConfig(unsigned char, unsigned char)>:
_Z15ds2482setConfighh():
   1901a:	cf 93       	push	r28
   1901c:	c6 2f       	mov	r28, r22
   1901e:	68 2f       	mov	r22, r24
   19020:	86 eb       	ldi	r24, 0xB6	; 182
   19022:	92 e1       	ldi	r25, 0x12	; 18
   19024:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
   19028:	62 ed       	ldi	r22, 0xD2	; 210
   1902a:	70 e0       	ldi	r23, 0x00	; 0
   1902c:	86 eb       	ldi	r24, 0xB6	; 182
   1902e:	92 e1       	ldi	r25, 0x12	; 18
   19030:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
   19034:	6c 2f       	mov	r22, r28
   19036:	86 eb       	ldi	r24, 0xB6	; 182
   19038:	92 e1       	ldi	r25, 0x12	; 18
   1903a:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
   1903e:	86 eb       	ldi	r24, 0xB6	; 182
   19040:	92 e1       	ldi	r25, 0x12	; 18
   19042:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   19046:	81 11       	cpse	r24, r1
   19048:	83 e0       	ldi	r24, 0x03	; 3
   1904a:	cf 91       	pop	r28
   1904c:	08 95       	ret

0001904e <ds2482init(unsigned char)>:
_Z10ds2482inith():
   1904e:	cf 93       	push	r28
   19050:	df 93       	push	r29
   19052:	d8 2f       	mov	r29, r24
   19054:	68 2f       	mov	r22, r24
   19056:	86 eb       	ldi	r24, 0xB6	; 182
   19058:	92 e1       	ldi	r25, 0x12	; 18
   1905a:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
   1905e:	86 eb       	ldi	r24, 0xB6	; 182
   19060:	92 e1       	ldi	r25, 0x12	; 18
   19062:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   19066:	c8 2f       	mov	r28, r24
   19068:	81 11       	cpse	r24, r1
   1906a:	08 c0       	rjmp	.+16     	; 0x1907c <ds2482init(unsigned char)+0x2e>
   1906c:	60 e0       	ldi	r22, 0x00	; 0
   1906e:	8d 2f       	mov	r24, r29
   19070:	0e 94 0d c8 	call	0x1901a	; 0x1901a <ds2482setConfig(unsigned char, unsigned char)>
   19074:	8c 2f       	mov	r24, r28
   19076:	df 91       	pop	r29
   19078:	cf 91       	pop	r28
   1907a:	08 95       	ret
   1907c:	ca e0       	ldi	r28, 0x0A	; 10
   1907e:	fa cf       	rjmp	.-12     	; 0x19074 <ds2482init(unsigned char)+0x26>

00019080 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   19080:	0f 93       	push	r16
   19082:	1f 93       	push	r17
   19084:	cf 93       	push	r28
   19086:	df 93       	push	r29
   19088:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1908a:	68 2f       	mov	r22, r24
   1908c:	86 eb       	ldi	r24, 0xB6	; 182
   1908e:	92 e1       	ldi	r25, 0x12	; 18
   19090:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   19094:	64 eb       	ldi	r22, 0xB4	; 180
   19096:	70 e0       	ldi	r23, 0x00	; 0
   19098:	86 eb       	ldi	r24, 0xB6	; 182
   1909a:	92 e1       	ldi	r25, 0x12	; 18
   1909c:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   190a0:	86 eb       	ldi	r24, 0xB6	; 182
   190a2:	92 e1       	ldi	r25, 0x12	; 18
   190a4:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   190a8:	c8 2f       	mov	r28, r24
   190aa:	81 11       	cpse	r24, r1
   190ac:	1b c0       	rjmp	.+54     	; 0x190e4 <ds2482owReset(unsigned char)+0x64>
   190ae:	de ef       	ldi	r29, 0xFE	; 254
   190b0:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   190b2:	f9 f0       	breq	.+62     	; 0x190f2 <ds2482owReset(unsigned char)+0x72>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   190b4:	41 e0       	ldi	r20, 0x01	; 1
   190b6:	60 2f       	mov	r22, r16
   190b8:	86 eb       	ldi	r24, 0xB6	; 182
   190ba:	92 e1       	ldi	r25, 0x12	; 18
   190bc:	0e 94 e8 c4 	call	0x189d0	; 0x189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   190c0:	86 eb       	ldi	r24, 0xB6	; 182
   190c2:	92 e1       	ldi	r25, 0x12	; 18
   190c4:	0e 94 98 c3 	call	0x18730	; 0x18730 <TwoWire::available()>
   190c8:	18 16       	cp	r1, r24
   190ca:	19 06       	cpc	r1, r25
   190cc:	2c f4       	brge	.+10     	; 0x190d8 <ds2482owReset(unsigned char)+0x58>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   190ce:	86 eb       	ldi	r24, 0xB6	; 182
   190d0:	92 e1       	ldi	r25, 0x12	; 18
   190d2:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
   190d6:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   190d8:	10 fd       	sbrc	r17, 0
   190da:	ea cf       	rjmp	.-44     	; 0x190b0 <ds2482owReset(unsigned char)+0x30>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   190dc:	11 fd       	sbrc	r17, 1
   190de:	03 c0       	rjmp	.+6      	; 0x190e6 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   190e0:	c5 e0       	ldi	r28, 0x05	; 5
   190e2:	01 c0       	rjmp	.+2      	; 0x190e6 <ds2482owReset(unsigned char)+0x66>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   190e4:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   190e6:	8c 2f       	mov	r24, r28
   190e8:	df 91       	pop	r29
   190ea:	cf 91       	pop	r28
   190ec:	1f 91       	pop	r17
   190ee:	0f 91       	pop	r16
   190f0:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   190f2:	c4 e0       	ldi	r28, 0x04	; 4
   190f4:	f8 cf       	rjmp	.-16     	; 0x190e6 <ds2482owReset(unsigned char)+0x66>

000190f6 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   190f6:	0f 93       	push	r16
   190f8:	1f 93       	push	r17
   190fa:	cf 93       	push	r28
   190fc:	df 93       	push	r29
   190fe:	08 2f       	mov	r16, r24
   19100:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   19102:	68 2f       	mov	r22, r24
   19104:	86 eb       	ldi	r24, 0xB6	; 182
   19106:	92 e1       	ldi	r25, 0x12	; 18
   19108:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   1910c:	65 ea       	ldi	r22, 0xA5	; 165
   1910e:	70 e0       	ldi	r23, 0x00	; 0
   19110:	86 eb       	ldi	r24, 0xB6	; 182
   19112:	92 e1       	ldi	r25, 0x12	; 18
   19114:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   19118:	6d 2f       	mov	r22, r29
   1911a:	86 eb       	ldi	r24, 0xB6	; 182
   1911c:	92 e1       	ldi	r25, 0x12	; 18
   1911e:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19122:	86 eb       	ldi	r24, 0xB6	; 182
   19124:	92 e1       	ldi	r25, 0x12	; 18
   19126:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   1912a:	c8 2f       	mov	r28, r24
   1912c:	81 11       	cpse	r24, r1
   1912e:	1d c0       	rjmp	.+58     	; 0x1916a <ds2482owWriteByte(unsigned char, unsigned char)+0x74>
   19130:	1e ef       	ldi	r17, 0xFE	; 254
   19132:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   19134:	e1 f0       	breq	.+56     	; 0x1916e <ds2482owWriteByte(unsigned char, unsigned char)+0x78>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   19136:	41 e0       	ldi	r20, 0x01	; 1
   19138:	60 2f       	mov	r22, r16
   1913a:	86 eb       	ldi	r24, 0xB6	; 182
   1913c:	92 e1       	ldi	r25, 0x12	; 18
   1913e:	0e 94 e8 c4 	call	0x189d0	; 0x189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   19142:	86 eb       	ldi	r24, 0xB6	; 182
   19144:	92 e1       	ldi	r25, 0x12	; 18
   19146:	0e 94 98 c3 	call	0x18730	; 0x18730 <TwoWire::available()>
   1914a:	18 16       	cp	r1, r24
   1914c:	19 06       	cpc	r1, r25
   1914e:	2c f4       	brge	.+10     	; 0x1915a <ds2482owWriteByte(unsigned char, unsigned char)+0x64>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   19150:	86 eb       	ldi	r24, 0xB6	; 182
   19152:	92 e1       	ldi	r25, 0x12	; 18
   19154:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
   19158:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   1915a:	d0 fd       	sbrc	r29, 0
   1915c:	ea cf       	rjmp	.-44     	; 0x19132 <ds2482owWriteByte(unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1915e:	8c 2f       	mov	r24, r28
   19160:	df 91       	pop	r29
   19162:	cf 91       	pop	r28
   19164:	1f 91       	pop	r17
   19166:	0f 91       	pop	r16
   19168:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1916a:	c3 e0       	ldi	r28, 0x03	; 3
   1916c:	f8 cf       	rjmp	.-16     	; 0x1915e <ds2482owWriteByte(unsigned char, unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1916e:	c4 e0       	ldi	r28, 0x04	; 4
   19170:	f6 cf       	rjmp	.-20     	; 0x1915e <ds2482owWriteByte(unsigned char, unsigned char)+0x68>

00019172 <ds2482owWriteTriplet(unsigned char, unsigned char*)>:
_Z20ds2482owWriteTriplethPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:645
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 */
uint8_t ds2482owWriteTriplet(uint8_t address, uint8_t *direction)
{
   19172:	ff 92       	push	r15
   19174:	0f 93       	push	r16
   19176:	1f 93       	push	r17
   19178:	cf 93       	push	r28
   1917a:	df 93       	push	r29
   1917c:	f8 2e       	mov	r15, r24
   1917e:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   19180:	68 2f       	mov	r22, r24
   19182:	86 eb       	ldi	r24, 0xB6	; 182
   19184:	92 e1       	ldi	r25, 0x12	; 18
   19186:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1918a:	68 e7       	ldi	r22, 0x78	; 120
   1918c:	70 e0       	ldi	r23, 0x00	; 0
   1918e:	86 eb       	ldi	r24, 0xB6	; 182
   19190:	92 e1       	ldi	r25, 0x12	; 18
   19192:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   19196:	f8 01       	movw	r30, r16
   19198:	80 81       	ld	r24, Z
   1919a:	70 e0       	ldi	r23, 0x00	; 0
   1919c:	60 e0       	ldi	r22, 0x00	; 0
   1919e:	88 23       	and	r24, r24
   191a0:	11 f0       	breq	.+4      	; 0x191a6 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x34>
   191a2:	60 e8       	ldi	r22, 0x80	; 128
   191a4:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668 (discriminator 4)
   191a6:	86 eb       	ldi	r24, 0xB6	; 182
   191a8:	92 e1       	ldi	r25, 0x12	; 18
   191aa:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669 (discriminator 4)
        if (Wire.endTransmission() != I2C_ERROR_OK)
   191ae:	86 eb       	ldi	r24, 0xB6	; 182
   191b0:	92 e1       	ldi	r25, 0x12	; 18
   191b2:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
   191b6:	c8 2f       	mov	r28, r24
   191b8:	81 11       	cpse	r24, r1
   191ba:	21 c0       	rjmp	.+66     	; 0x191fe <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x8c>
   191bc:	de ef       	ldi	r29, 0xFE	; 254
   191be:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   191c0:	01 f1       	breq	.+64     	; 0x19202 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x90>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   191c2:	41 e0       	ldi	r20, 0x01	; 1
   191c4:	6f 2d       	mov	r22, r15
   191c6:	86 eb       	ldi	r24, 0xB6	; 182
   191c8:	92 e1       	ldi	r25, 0x12	; 18
   191ca:	0e 94 e8 c4 	call	0x189d0	; 0x189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   191ce:	86 eb       	ldi	r24, 0xB6	; 182
   191d0:	92 e1       	ldi	r25, 0x12	; 18
   191d2:	0e 94 98 c3 	call	0x18730	; 0x18730 <TwoWire::available()>
   191d6:	18 16       	cp	r1, r24
   191d8:	19 06       	cpc	r1, r25
   191da:	34 f4       	brge	.+12     	; 0x191e8 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x76>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   191dc:	86 eb       	ldi	r24, 0xB6	; 182
   191de:	92 e1       	ldi	r25, 0x12	; 18
   191e0:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
   191e4:	f8 01       	movw	r30, r16
   191e6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   191e8:	f8 01       	movw	r30, r16
   191ea:	80 81       	ld	r24, Z
   191ec:	80 fd       	sbrc	r24, 0
   191ee:	e7 cf       	rjmp	.-50     	; 0x191be <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x4c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:706
			break;
	}
	return DS2482_ERR_OK;
}
   191f0:	8c 2f       	mov	r24, r28
   191f2:	df 91       	pop	r29
   191f4:	cf 91       	pop	r28
   191f6:	1f 91       	pop	r17
   191f8:	0f 91       	pop	r16
   191fa:	ff 90       	pop	r15
   191fc:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   191fe:	c3 e0       	ldi	r28, 0x03	; 3
   19200:	f7 cf       	rjmp	.-18     	; 0x191f0 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   19202:	c4 e0       	ldi	r28, 0x04	; 4
   19204:	f5 cf       	rjmp	.-22     	; 0x191f0 <ds2482owWriteTriplet(unsigned char, unsigned char*)+0x7e>

00019206 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   19206:	ff 92       	push	r15
   19208:	0f 93       	push	r16
   1920a:	1f 93       	push	r17
   1920c:	cf 93       	push	r28
   1920e:	df 93       	push	r29
   19210:	d8 2f       	mov	r29, r24
   19212:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   19214:	68 2f       	mov	r22, r24
   19216:	86 eb       	ldi	r24, 0xB6	; 182
   19218:	92 e1       	ldi	r25, 0x12	; 18
   1921a:	0e 94 66 c4 	call	0x188cc	; 0x188cc <TwoWire::beginTransmission(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   1921e:	66 e9       	ldi	r22, 0x96	; 150
   19220:	70 e0       	ldi	r23, 0x00	; 0
   19222:	86 eb       	ldi	r24, 0xB6	; 182
   19224:	92 e1       	ldi	r25, 0x12	; 18
   19226:	0e 94 70 c1 	call	0x182e0	; 0x182e0 <TwoWire::write(int)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   1922a:	86 eb       	ldi	r24, 0xB6	; 182
   1922c:	92 e1       	ldi	r25, 0x12	; 18
   1922e:	0e 94 ee c4 	call	0x189dc	; 0x189dc <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   19232:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRB);
        if (Wire.endTransmission() != I2C_ERROR_OK)
   19234:	81 11       	cpse	r24, r1
   19236:	31 c0       	rjmp	.+98     	; 0x1929a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
   19238:	ce ef       	ldi	r28, 0xFE	; 254
   1923a:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   1923c:	a9 f1       	breq	.+106    	; 0x192a8 <ds2482owReadByte(unsigned char, unsigned char*)+0xa2>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   1923e:	41 e0       	ldi	r20, 0x01	; 1
   19240:	6d 2f       	mov	r22, r29
   19242:	86 eb       	ldi	r24, 0xB6	; 182
   19244:	92 e1       	ldi	r25, 0x12	; 18
   19246:	0e 94 e8 c4 	call	0x189d0	; 0x189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   1924a:	86 eb       	ldi	r24, 0xB6	; 182
   1924c:	92 e1       	ldi	r25, 0x12	; 18
   1924e:	0e 94 98 c3 	call	0x18730	; 0x18730 <TwoWire::available()>
   19252:	18 16       	cp	r1, r24
   19254:	19 06       	cpc	r1, r25
   19256:	2c f4       	brge	.+10     	; 0x19262 <ds2482owReadByte(unsigned char, unsigned char*)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   19258:	86 eb       	ldi	r24, 0xB6	; 182
   1925a:	92 e1       	ldi	r25, 0x12	; 18
   1925c:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
   19260:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   19262:	f0 fc       	sbrc	r15, 0
   19264:	ea cf       	rjmp	.-44     	; 0x1923a <ds2482owReadByte(unsigned char, unsigned char*)+0x34>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:780
			break;
	}

	/* Now set read pointer to data register */
	t = ds2482setReadPointer(address, DS2482_P_DATA);
   19266:	61 ee       	ldi	r22, 0xE1	; 225
   19268:	8d 2f       	mov	r24, r29
   1926a:	0e 94 f3 c7 	call	0x18fe6	; 0x18fe6 <ds2482setReadPointer(unsigned char, unsigned char)>
   1926e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:781
	if(t)	/* Error? */
   19270:	81 11       	cpse	r24, r1
   19272:	13 c0       	rjmp	.+38     	; 0x1929a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   19274:	41 e0       	ldi	r20, 0x01	; 1
   19276:	6d 2f       	mov	r22, r29
   19278:	86 eb       	ldi	r24, 0xB6	; 182
   1927a:	92 e1       	ldi	r25, 0x12	; 18
   1927c:	0e 94 e8 c4 	call	0x189d0	; 0x189d0 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   19280:	86 eb       	ldi	r24, 0xB6	; 182
   19282:	92 e1       	ldi	r25, 0x12	; 18
   19284:	0e 94 98 c3 	call	0x18730	; 0x18730 <TwoWire::available()>
   19288:	18 16       	cp	r1, r24
   1928a:	19 06       	cpc	r1, r25
   1928c:	34 f4       	brge	.+12     	; 0x1929a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   1928e:	86 eb       	ldi	r24, 0xB6	; 182
   19290:	92 e1       	ldi	r25, 0x12	; 18
   19292:	0e 94 9f c3 	call	0x1873e	; 0x1873e <TwoWire::read()>
   19296:	f8 01       	movw	r30, r16
   19298:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809

	return DS2482_ERR_OK;
}
   1929a:	8c 2f       	mov	r24, r28
   1929c:	df 91       	pop	r29
   1929e:	cf 91       	pop	r28
   192a0:	1f 91       	pop	r17
   192a2:	0f 91       	pop	r16
   192a4:	ff 90       	pop	r15
   192a6:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   192a8:	c4 e0       	ldi	r28, 0x04	; 4
   192aa:	f7 cf       	rjmp	.-18     	; 0x1929a <ds2482owReadByte(unsigned char, unsigned char*)+0x94>

000192ac <NTPClient::NTPClient(UDP&)>:
_ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:160 (discriminator 2)

  unsigned long minutes = (rawTime % 3600) / 60;
  String minuteStr = minutes < 10 ? "0" + String(minutes) : String(minutes);

  unsigned long seconds = rawTime % 60;
  String secondStr = seconds < 10 ? "0" + String(seconds) : String(seconds);
   192ac:	fc 01       	movw	r30, r24
   192ae:	12 82       	std	Z+2, r1	; 0x02
   192b0:	89 eb       	ldi	r24, 0xB9	; 185
   192b2:	98 e0       	ldi	r25, 0x08	; 8
   192b4:	94 83       	std	Z+4, r25	; 0x04
   192b6:	83 83       	std	Z+3, r24	; 0x03
   192b8:	89 e3       	ldi	r24, 0x39	; 57
   192ba:	95 e0       	ldi	r25, 0x05	; 5
   192bc:	96 83       	std	Z+6, r25	; 0x06
   192be:	85 83       	std	Z+5, r24	; 0x05
   192c0:	17 82       	std	Z+7, r1	; 0x07
   192c2:	10 86       	std	Z+8, r1	; 0x08
   192c4:	11 86       	std	Z+9, r1	; 0x09
   192c6:	12 86       	std	Z+10, r1	; 0x0a
   192c8:	80 e6       	ldi	r24, 0x60	; 96
   192ca:	9a ee       	ldi	r25, 0xEA	; 234
   192cc:	a0 e0       	ldi	r26, 0x00	; 0
   192ce:	b0 e0       	ldi	r27, 0x00	; 0
   192d0:	83 87       	std	Z+11, r24	; 0x0b
   192d2:	94 87       	std	Z+12, r25	; 0x0c
   192d4:	a5 87       	std	Z+13, r26	; 0x0d
   192d6:	b6 87       	std	Z+14, r27	; 0x0e
   192d8:	17 86       	std	Z+15, r1	; 0x0f
   192da:	10 8a       	std	Z+16, r1	; 0x10
   192dc:	11 8a       	std	Z+17, r1	; 0x11
   192de:	12 8a       	std	Z+18, r1	; 0x12
   192e0:	13 8a       	std	Z+19, r1	; 0x13
   192e2:	14 8a       	std	Z+20, r1	; 0x14
   192e4:	15 8a       	std	Z+21, r1	; 0x15
   192e6:	16 8a       	std	Z+22, r1	; 0x16
   192e8:	71 83       	std	Z+1, r23	; 0x01
   192ea:	60 83       	st	Z, r22
   192ec:	08 95       	ret

000192ee <NTPClient::begin(int)>:
_ZN9NTPClient5beginEi():
   192ee:	cf 93       	push	r28
   192f0:	df 93       	push	r29
   192f2:	ec 01       	movw	r28, r24
   192f4:	7e 83       	std	Y+6, r23	; 0x06
   192f6:	6d 83       	std	Y+5, r22	; 0x05
   192f8:	88 81       	ld	r24, Y
   192fa:	99 81       	ldd	r25, Y+1	; 0x01
   192fc:	dc 01       	movw	r26, r24
   192fe:	ed 91       	ld	r30, X+
   19300:	fc 91       	ld	r31, X
   19302:	06 84       	ldd	r0, Z+14	; 0x0e
   19304:	f7 85       	ldd	r31, Z+15	; 0x0f
   19306:	e0 2d       	mov	r30, r0
   19308:	19 95       	eicall
   1930a:	81 e0       	ldi	r24, 0x01	; 1
   1930c:	8a 83       	std	Y+2, r24	; 0x02
   1930e:	df 91       	pop	r29
   19310:	cf 91       	pop	r28
   19312:	08 95       	ret

00019314 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
   19314:	69 e3       	ldi	r22, 0x39	; 57
   19316:	75 e0       	ldi	r23, 0x05	; 5
   19318:	0c 94 77 c9 	jmp	0x192ee	; 0x192ee <NTPClient::begin(int)>

0001931c <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
   1931c:	cf 92       	push	r12
   1931e:	df 92       	push	r13
   19320:	ef 92       	push	r14
   19322:	ff 92       	push	r15
   19324:	0f 93       	push	r16
   19326:	1f 93       	push	r17
   19328:	cf 93       	push	r28
   1932a:	df 93       	push	r29
   1932c:	ec 01       	movw	r28, r24
   1932e:	cf 80       	ldd	r12, Y+7	; 0x07
   19330:	d8 84       	ldd	r13, Y+8	; 0x08
   19332:	e9 84       	ldd	r14, Y+9	; 0x09
   19334:	fa 84       	ldd	r15, Y+10	; 0x0a
   19336:	8f 85       	ldd	r24, Y+15	; 0x0f
   19338:	98 89       	ldd	r25, Y+16	; 0x10
   1933a:	a9 89       	ldd	r26, Y+17	; 0x11
   1933c:	ba 89       	ldd	r27, Y+18	; 0x12
   1933e:	c8 0e       	add	r12, r24
   19340:	d9 1e       	adc	r13, r25
   19342:	ea 1e       	adc	r14, r26
   19344:	fb 1e       	adc	r15, r27
   19346:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   1934a:	0b 89       	ldd	r16, Y+19	; 0x13
   1934c:	1c 89       	ldd	r17, Y+20	; 0x14
   1934e:	2d 89       	ldd	r18, Y+21	; 0x15
   19350:	3e 89       	ldd	r19, Y+22	; 0x16
   19352:	60 1b       	sub	r22, r16
   19354:	71 0b       	sbc	r23, r17
   19356:	82 0b       	sbc	r24, r18
   19358:	93 0b       	sbc	r25, r19
   1935a:	28 ee       	ldi	r18, 0xE8	; 232
   1935c:	33 e0       	ldi	r19, 0x03	; 3
   1935e:	40 e0       	ldi	r20, 0x00	; 0
   19360:	50 e0       	ldi	r21, 0x00	; 0
   19362:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   19366:	ca 01       	movw	r24, r20
   19368:	b9 01       	movw	r22, r18
   1936a:	6c 0d       	add	r22, r12
   1936c:	7d 1d       	adc	r23, r13
   1936e:	8e 1d       	adc	r24, r14
   19370:	9f 1d       	adc	r25, r15
   19372:	df 91       	pop	r29
   19374:	cf 91       	pop	r28
   19376:	1f 91       	pop	r17
   19378:	0f 91       	pop	r16
   1937a:	ff 90       	pop	r15
   1937c:	ef 90       	pop	r14
   1937e:	df 90       	pop	r13
   19380:	cf 90       	pop	r12
   19382:	08 95       	ret

00019384 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
   19384:	cf 93       	push	r28
   19386:	df 93       	push	r29
   19388:	00 d0       	rcall	.+0      	; 0x1938a <NTPClient::getYear() const+0x6>
   1938a:	1f 92       	push	r1
   1938c:	cd b7       	in	r28, 0x3d	; 61
   1938e:	de b7       	in	r29, 0x3e	; 62
   19390:	0e 94 8e c9 	call	0x1931c	; 0x1931c <NTPClient::getEpochTime() const>
   19394:	69 83       	std	Y+1, r22	; 0x01
   19396:	7a 83       	std	Y+2, r23	; 0x02
   19398:	8b 83       	std	Y+3, r24	; 0x03
   1939a:	9c 83       	std	Y+4, r25	; 0x04
   1939c:	ce 01       	movw	r24, r28
   1939e:	01 96       	adiw	r24, 0x01	; 1
   193a0:	0e 94 73 31 	call	0x62e6	; 0x62e6 <localtime>
   193a4:	fc 01       	movw	r30, r24
   193a6:	86 81       	ldd	r24, Z+6	; 0x06
   193a8:	97 81       	ldd	r25, Z+7	; 0x07
   193aa:	84 59       	subi	r24, 0x94	; 148
   193ac:	98 4f       	sbci	r25, 0xF8	; 248
   193ae:	0f 90       	pop	r0
   193b0:	0f 90       	pop	r0
   193b2:	0f 90       	pop	r0
   193b4:	0f 90       	pop	r0
   193b6:	df 91       	pop	r29
   193b8:	cf 91       	pop	r28
   193ba:	08 95       	ret

000193bc <NTPClient::getMonth() const>:
_ZNK9NTPClient8getMonthEv():
   193bc:	cf 93       	push	r28
   193be:	df 93       	push	r29
   193c0:	00 d0       	rcall	.+0      	; 0x193c2 <NTPClient::getMonth() const+0x6>
   193c2:	1f 92       	push	r1
   193c4:	cd b7       	in	r28, 0x3d	; 61
   193c6:	de b7       	in	r29, 0x3e	; 62
   193c8:	0e 94 8e c9 	call	0x1931c	; 0x1931c <NTPClient::getEpochTime() const>
   193cc:	69 83       	std	Y+1, r22	; 0x01
   193ce:	7a 83       	std	Y+2, r23	; 0x02
   193d0:	8b 83       	std	Y+3, r24	; 0x03
   193d2:	9c 83       	std	Y+4, r25	; 0x04
   193d4:	ce 01       	movw	r24, r28
   193d6:	01 96       	adiw	r24, 0x01	; 1
   193d8:	0e 94 73 31 	call	0x62e6	; 0x62e6 <localtime>
   193dc:	fc 01       	movw	r30, r24
   193de:	85 81       	ldd	r24, Z+5	; 0x05
   193e0:	08 2e       	mov	r0, r24
   193e2:	00 0c       	add	r0, r0
   193e4:	99 0b       	sbc	r25, r25
   193e6:	01 96       	adiw	r24, 0x01	; 1
   193e8:	0f 90       	pop	r0
   193ea:	0f 90       	pop	r0
   193ec:	0f 90       	pop	r0
   193ee:	0f 90       	pop	r0
   193f0:	df 91       	pop	r29
   193f2:	cf 91       	pop	r28
   193f4:	08 95       	ret

000193f6 <NTPClient::getDate() const>:
_ZNK9NTPClient7getDateEv():
   193f6:	cf 93       	push	r28
   193f8:	df 93       	push	r29
   193fa:	00 d0       	rcall	.+0      	; 0x193fc <NTPClient::getDate() const+0x6>
   193fc:	1f 92       	push	r1
   193fe:	cd b7       	in	r28, 0x3d	; 61
   19400:	de b7       	in	r29, 0x3e	; 62
   19402:	0e 94 8e c9 	call	0x1931c	; 0x1931c <NTPClient::getEpochTime() const>
   19406:	69 83       	std	Y+1, r22	; 0x01
   19408:	7a 83       	std	Y+2, r23	; 0x02
   1940a:	8b 83       	std	Y+3, r24	; 0x03
   1940c:	9c 83       	std	Y+4, r25	; 0x04
   1940e:	ce 01       	movw	r24, r28
   19410:	01 96       	adiw	r24, 0x01	; 1
   19412:	0e 94 73 31 	call	0x62e6	; 0x62e6 <localtime>
   19416:	fc 01       	movw	r30, r24
   19418:	83 81       	ldd	r24, Z+3	; 0x03
   1941a:	08 2e       	mov	r0, r24
   1941c:	00 0c       	add	r0, r0
   1941e:	99 0b       	sbc	r25, r25
   19420:	0f 90       	pop	r0
   19422:	0f 90       	pop	r0
   19424:	0f 90       	pop	r0
   19426:	0f 90       	pop	r0
   19428:	df 91       	pop	r29
   1942a:	cf 91       	pop	r28
   1942c:	08 95       	ret

0001942e <NTPClient::getHours() const>:
_ZNK9NTPClient8getHoursEv():
   1942e:	0e 94 8e c9 	call	0x1931c	; 0x1931c <NTPClient::getEpochTime() const>
   19432:	20 e8       	ldi	r18, 0x80	; 128
   19434:	31 e5       	ldi	r19, 0x51	; 81
   19436:	41 e0       	ldi	r20, 0x01	; 1
   19438:	50 e0       	ldi	r21, 0x00	; 0
   1943a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1943e:	20 e1       	ldi	r18, 0x10	; 16
   19440:	3e e0       	ldi	r19, 0x0E	; 14
   19442:	40 e0       	ldi	r20, 0x00	; 0
   19444:	50 e0       	ldi	r21, 0x00	; 0
   19446:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1944a:	c9 01       	movw	r24, r18
   1944c:	08 95       	ret

0001944e <NTPClient::getMinutes() const>:
_ZNK9NTPClient10getMinutesEv():
   1944e:	0e 94 8e c9 	call	0x1931c	; 0x1931c <NTPClient::getEpochTime() const>
   19452:	20 e1       	ldi	r18, 0x10	; 16
   19454:	3e e0       	ldi	r19, 0x0E	; 14
   19456:	40 e0       	ldi	r20, 0x00	; 0
   19458:	50 e0       	ldi	r21, 0x00	; 0
   1945a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1945e:	2c e3       	ldi	r18, 0x3C	; 60
   19460:	30 e0       	ldi	r19, 0x00	; 0
   19462:	40 e0       	ldi	r20, 0x00	; 0
   19464:	50 e0       	ldi	r21, 0x00	; 0
   19466:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1946a:	c9 01       	movw	r24, r18
   1946c:	08 95       	ret

0001946e <NTPClient::getSeconds() const>:
_ZNK9NTPClient10getSecondsEv():
   1946e:	0e 94 8e c9 	call	0x1931c	; 0x1931c <NTPClient::getEpochTime() const>
   19472:	2c e3       	ldi	r18, 0x3C	; 60
   19474:	30 e0       	ldi	r19, 0x00	; 0
   19476:	40 e0       	ldi	r20, 0x00	; 0
   19478:	50 e0       	ldi	r21, 0x00	; 0
   1947a:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1947e:	cb 01       	movw	r24, r22
   19480:	08 95       	ret

00019482 <NTPClient::end()>:
_ZN9NTPClient3endEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:165

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
   19482:	cf 93       	push	r28
   19484:	df 93       	push	r29
   19486:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166
  this->_udp->stop();
   19488:	88 81       	ld	r24, Y
   1948a:	99 81       	ldd	r25, Y+1	; 0x01
   1948c:	dc 01       	movw	r26, r24
   1948e:	ed 91       	ld	r30, X+
   19490:	fc 91       	ld	r31, X
   19492:	02 88       	ldd	r0, Z+18	; 0x12
   19494:	f3 89       	ldd	r31, Z+19	; 0x13
   19496:	e0 2d       	mov	r30, r0
   19498:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   1949a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:169
}
   1949c:	df 91       	pop	r29
   1949e:	cf 91       	pop	r28
   194a0:	08 95       	ret

000194a2 <NTPClient::setTimeOffset(int)>:
_ZN9NTPClient13setTimeOffsetEi():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   194a2:	ab 01       	movw	r20, r22
   194a4:	77 0f       	add	r23, r23
   194a6:	66 0b       	sbc	r22, r22
   194a8:	77 0b       	sbc	r23, r23
   194aa:	fc 01       	movw	r30, r24
   194ac:	47 83       	std	Z+7, r20	; 0x07
   194ae:	50 87       	std	Z+8, r21	; 0x08
   194b0:	61 87       	std	Z+9, r22	; 0x09
   194b2:	72 87       	std	Z+10, r23	; 0x0a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:173
}
   194b4:	08 95       	ret

000194b6 <NTPClient::setUpdateInterval(unsigned long)>:
_ZN9NTPClient17setUpdateIntervalEm():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   194b6:	fc 01       	movw	r30, r24
   194b8:	43 87       	std	Z+11, r20	; 0x0b
   194ba:	54 87       	std	Z+12, r21	; 0x0c
   194bc:	65 87       	std	Z+13, r22	; 0x0d
   194be:	76 87       	std	Z+14, r23	; 0x0e
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:177
}
   194c0:	08 95       	ret

000194c2 <NTPClient::setPoolServerName(char const*)>:
_ZN9NTPClient17setPoolServerNameEPKc():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   194c2:	fc 01       	movw	r30, r24
   194c4:	74 83       	std	Z+4, r23	; 0x04
   194c6:	63 83       	std	Z+3, r22	; 0x03
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:181
}
   194c8:	08 95       	ret

000194ca <NTPClient::sendNTPPacket()>:
_ZN9NTPClient13sendNTPPacketEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:183

void NTPClient::sendNTPPacket() {
   194ca:	cf 93       	push	r28
   194cc:	df 93       	push	r29
   194ce:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   194d0:	fc 01       	movw	r30, r24
   194d2:	7b 96       	adiw	r30, 0x1b	; 27
   194d4:	8c e2       	ldi	r24, 0x2C	; 44
   194d6:	df 01       	movw	r26, r30
   194d8:	1d 92       	st	X+, r1
   194da:	8a 95       	dec	r24
   194dc:	e9 f7       	brne	.-6      	; 0x194d8 <NTPClient::sendNTPPacket()+0xe>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   194de:	83 ee       	ldi	r24, 0xE3	; 227
   194e0:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   194e2:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   194e4:	86 e0       	ldi	r24, 0x06	; 6
   194e6:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   194e8:	8c ee       	ldi	r24, 0xEC	; 236
   194ea:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   194ec:	81 e3       	ldi	r24, 0x31	; 49
   194ee:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   194f0:	9e e4       	ldi	r25, 0x4E	; 78
   194f2:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   194f4:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   194f6:	84 e3       	ldi	r24, 0x34	; 52
   194f8:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   194fa:	88 81       	ld	r24, Y
   194fc:	99 81       	ldd	r25, Y+1	; 0x01
   194fe:	6b 81       	ldd	r22, Y+3	; 0x03
   19500:	7c 81       	ldd	r23, Y+4	; 0x04
   19502:	dc 01       	movw	r26, r24
   19504:	ed 91       	ld	r30, X+
   19506:	fc 91       	ld	r31, X
   19508:	06 88       	ldd	r0, Z+22	; 0x16
   1950a:	f7 89       	ldd	r31, Z+23	; 0x17
   1950c:	e0 2d       	mov	r30, r0
   1950e:	4b e7       	ldi	r20, 0x7B	; 123
   19510:	50 e0       	ldi	r21, 0x00	; 0
   19512:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   19514:	88 81       	ld	r24, Y
   19516:	99 81       	ldd	r25, Y+1	; 0x01
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   19518:	be 01       	movw	r22, r28
   1951a:	69 5e       	subi	r22, 0xE9	; 233
   1951c:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_packetBuffer[15]  = 52;

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   1951e:	dc 01       	movw	r26, r24
   19520:	ed 91       	ld	r30, X+
   19522:	fc 91       	ld	r31, X
   19524:	02 80       	ldd	r0, Z+2	; 0x02
   19526:	f3 81       	ldd	r31, Z+3	; 0x03
   19528:	e0 2d       	mov	r30, r0
   1952a:	40 e3       	ldi	r20, 0x30	; 48
   1952c:	50 e0       	ldi	r21, 0x00	; 0
   1952e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   19530:	88 81       	ld	r24, Y
   19532:	99 81       	ldd	r25, Y+1	; 0x01
   19534:	dc 01       	movw	r26, r24
   19536:	ed 91       	ld	r30, X+
   19538:	fc 91       	ld	r31, X
   1953a:	00 8c       	ldd	r0, Z+24	; 0x18
   1953c:	f1 8d       	ldd	r31, Z+25	; 0x19
   1953e:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
}
   19540:	df 91       	pop	r29
   19542:	cf 91       	pop	r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
   19544:	19 94       	eijmp

00019546 <NTPClient::forceUpdate()>:
_ZN9NTPClient11forceUpdateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:64
  this->_udp->begin(this->_port);

  this->_udpSetup = true;
}

bool NTPClient::forceUpdate() {
   19546:	0f 93       	push	r16
   19548:	1f 93       	push	r17
   1954a:	cf 93       	push	r28
   1954c:	df 93       	push	r29
   1954e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:69
  #ifdef DEBUG_NTPClient
    Serial.println("Update from NTP Server");
  #endif

  this->sendNTPPacket();
   19550:	0e 94 65 ca 	call	0x194ca	; 0x194ca <NTPClient::sendNTPPacket()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72

  // Wait till data is there or timeout...
  byte timeout = 0;
   19554:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   19556:	6a e0       	ldi	r22, 0x0A	; 10
   19558:	70 e0       	ldi	r23, 0x00	; 0
   1955a:	80 e0       	ldi	r24, 0x00	; 0
   1955c:	90 e0       	ldi	r25, 0x00	; 0
   1955e:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   19562:	88 81       	ld	r24, Y
   19564:	99 81       	ldd	r25, Y+1	; 0x01
   19566:	dc 01       	movw	r26, r24
   19568:	ed 91       	ld	r30, X+
   1956a:	fc 91       	ld	r31, X
   1956c:	02 8c       	ldd	r0, Z+26	; 0x1a
   1956e:	f3 8d       	ldd	r31, Z+27	; 0x1b
   19570:	e0 2d       	mov	r30, r0
   19572:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   19574:	15 36       	cpi	r17, 0x65	; 101
   19576:	09 f4       	brne	.+2      	; 0x1957a <NTPClient::forceUpdate()+0x34>
   19578:	59 c0       	rjmp	.+178    	; 0x1962c <NTPClient::forceUpdate()+0xe6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   1957a:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   1957c:	89 2b       	or	r24, r25
   1957e:	59 f3       	breq	.-42     	; 0x19556 <NTPClient::forceUpdate()+0x10>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   19580:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   19584:	21 2f       	mov	r18, r17
   19586:	30 e0       	ldi	r19, 0x00	; 0
   19588:	a9 01       	movw	r20, r18
   1958a:	4f 5f       	subi	r20, 0xFF	; 255
   1958c:	5f 4f       	sbci	r21, 0xFF	; 255
   1958e:	ea e0       	ldi	r30, 0x0A	; 10
   19590:	e4 9f       	mul	r30, r20
   19592:	90 01       	movw	r18, r0
   19594:	e5 9f       	mul	r30, r21
   19596:	30 0d       	add	r19, r0
   19598:	11 24       	eor	r1, r1
   1959a:	89 01       	movw	r16, r18
   1959c:	33 0f       	add	r19, r19
   1959e:	22 0b       	sbc	r18, r18
   195a0:	33 0b       	sbc	r19, r19
   195a2:	ab 01       	movw	r20, r22
   195a4:	bc 01       	movw	r22, r24
   195a6:	40 1b       	sub	r20, r16
   195a8:	51 0b       	sbc	r21, r17
   195aa:	62 0b       	sbc	r22, r18
   195ac:	73 0b       	sbc	r23, r19
   195ae:	4b 8b       	std	Y+19, r20	; 0x13
   195b0:	5c 8b       	std	Y+20, r21	; 0x14
   195b2:	6d 8b       	std	Y+21, r22	; 0x15
   195b4:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   195b6:	88 81       	ld	r24, Y
   195b8:	99 81       	ldd	r25, Y+1	; 0x01
   195ba:	be 01       	movw	r22, r28
   195bc:	69 5e       	subi	r22, 0xE9	; 233
   195be:	7f 4f       	sbci	r23, 0xFF	; 255
   195c0:	dc 01       	movw	r26, r24
   195c2:	ed 91       	ld	r30, X+
   195c4:	fc 91       	ld	r31, X
   195c6:	04 8c       	ldd	r0, Z+28	; 0x1c
   195c8:	f5 8d       	ldd	r31, Z+29	; 0x1d
   195ca:	e0 2d       	mov	r30, r0
   195cc:	40 e3       	ldi	r20, 0x30	; 48
   195ce:	50 e0       	ldi	r21, 0x00	; 0
   195d0:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   195d2:	fe 01       	movw	r30, r28
   195d4:	e0 5c       	subi	r30, 0xC0	; 192
   195d6:	ff 4f       	sbci	r31, 0xFF	; 255
   195d8:	60 81       	ld	r22, Z
   195da:	8f ad       	ldd	r24, Y+63	; 0x3f
   195dc:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <makeWord(unsigned char, unsigned char)>
   195e0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   195e2:	de 01       	movw	r26, r28
   195e4:	ae 5b       	subi	r26, 0xBE	; 190
   195e6:	bf 4f       	sbci	r27, 0xFF	; 255
   195e8:	fe 01       	movw	r30, r28
   195ea:	ef 5b       	subi	r30, 0xBF	; 191
   195ec:	ff 4f       	sbci	r31, 0xFF	; 255
   195ee:	6c 91       	ld	r22, X
   195f0:	80 81       	ld	r24, Z
   195f2:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <makeWord(unsigned char, unsigned char)>
   195f6:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   195f8:	c8 01       	movw	r24, r16
   195fa:	b0 e0       	ldi	r27, 0x00	; 0
   195fc:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   195fe:	dc 01       	movw	r26, r24
   19600:	99 27       	eor	r25, r25
   19602:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   19604:	70 e0       	ldi	r23, 0x00	; 0
   19606:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   19608:	84 2b       	or	r24, r20
   1960a:	95 2b       	or	r25, r21
   1960c:	a6 2b       	or	r26, r22
   1960e:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   19610:	80 58       	subi	r24, 0x80	; 128
   19612:	9e 47       	sbci	r25, 0x7E	; 126
   19614:	aa 4a       	sbci	r26, 0xAA	; 170
   19616:	b3 48       	sbci	r27, 0x83	; 131
   19618:	8f 87       	std	Y+15, r24	; 0x0f
   1961a:	98 8b       	std	Y+16, r25	; 0x10
   1961c:	a9 8b       	std	Y+17, r26	; 0x11
   1961e:	ba 8b       	std	Y+18, r27	; 0x12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:93

  return true;
   19620:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:94
}
   19622:	df 91       	pop	r29
   19624:	cf 91       	pop	r28
   19626:	1f 91       	pop	r17
   19628:	0f 91       	pop	r16
   1962a:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   1962c:	80 e0       	ldi	r24, 0x00	; 0
   1962e:	f9 cf       	rjmp	.-14     	; 0x19622 <NTPClient::forceUpdate()+0xdc>

00019630 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   19630:	cf 92       	push	r12
   19632:	df 92       	push	r13
   19634:	ef 92       	push	r14
   19636:	ff 92       	push	r15
   19638:	0f 93       	push	r16
   1963a:	1f 93       	push	r17
   1963c:	cf 93       	push	r28
   1963e:	df 93       	push	r29
   19640:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   19642:	0e 94 40 cc 	call	0x19880	; 0x19880 <millis>
   19646:	0b 89       	ldd	r16, Y+19	; 0x13
   19648:	1c 89       	ldd	r17, Y+20	; 0x14
   1964a:	2d 89       	ldd	r18, Y+21	; 0x15
   1964c:	3e 89       	ldd	r19, Y+22	; 0x16
   1964e:	60 1b       	sub	r22, r16
   19650:	71 0b       	sbc	r23, r17
   19652:	82 0b       	sbc	r24, r18
   19654:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   19656:	cb 84       	ldd	r12, Y+11	; 0x0b
   19658:	dc 84       	ldd	r13, Y+12	; 0x0c
   1965a:	ed 84       	ldd	r14, Y+13	; 0x0d
   1965c:	fe 84       	ldd	r15, Y+14	; 0x0e
   1965e:	6c 15       	cp	r22, r12
   19660:	7d 05       	cpc	r23, r13
   19662:	8e 05       	cpc	r24, r14
   19664:	9f 05       	cpc	r25, r15
   19666:	20 f4       	brcc	.+8      	; 0x19670 <NTPClient::update()+0x40>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98 (discriminator 2)
   19668:	01 2b       	or	r16, r17
   1966a:	02 2b       	or	r16, r18
   1966c:	03 2b       	or	r16, r19
   1966e:	89 f4       	brne	.+34     	; 0x19692 <NTPClient::update()+0x62>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   19670:	8a 81       	ldd	r24, Y+2	; 0x02
   19672:	81 11       	cpse	r24, r1
   19674:	03 c0       	rjmp	.+6      	; 0x1967c <NTPClient::update()+0x4c>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99 (discriminator 1)
   19676:	ce 01       	movw	r24, r28
   19678:	0e 94 8a c9 	call	0x19314	; 0x19314 <NTPClient::begin()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100
    return this->forceUpdate();
   1967c:	ce 01       	movw	r24, r28
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   1967e:	df 91       	pop	r29
   19680:	cf 91       	pop	r28
   19682:	1f 91       	pop	r17
   19684:	0f 91       	pop	r16
   19686:	ff 90       	pop	r15
   19688:	ef 90       	pop	r14
   1968a:	df 90       	pop	r13
   1968c:	cf 90       	pop	r12
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:100

bool NTPClient::update() {
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
   1968e:	0c 94 a3 ca 	jmp	0x19546	; 0x19546 <NTPClient::forceUpdate()>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
  }
  return true;
}
   19692:	81 e0       	ldi	r24, 0x01	; 1
   19694:	df 91       	pop	r29
   19696:	cf 91       	pop	r28
   19698:	1f 91       	pop	r17
   1969a:	0f 91       	pop	r16
   1969c:	ff 90       	pop	r15
   1969e:	ef 90       	pop	r14
   196a0:	df 90       	pop	r13
   196a2:	cf 90       	pop	r12
   196a4:	08 95       	ret

000196a6 <_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP>:
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
  this->_udp->endPacket();
}
   196a6:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:76
   196a8:	00 e0       	ldi	r16, 0x00	; 0
   196aa:	20 e0       	ldi	r18, 0x00	; 0
   196ac:	40 e0       	ldi	r20, 0x00	; 0
   196ae:	60 e0       	ldi	r22, 0x00	; 0
   196b0:	8c e7       	ldi	r24, 0x7C	; 124
   196b2:	93 e1       	ldi	r25, 0x13	; 19
   196b4:	0e 94 ad cf 	call	0x19f5a	; 0x19f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
_GLOBAL__sub_I__ZN9NTPClientC2ER3UDP():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:203
   196b8:	0f 91       	pop	r16
   196ba:	08 95       	ret

000196bc <a2d_handler(void (*)(unsigned char, unsigned int))>:
_Z11a2d_handlerPFvhjE():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:53
/// deinicializace a2d prevodniku ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void deinit_a2d(void)
{
ADCSRA = 0;
ADMUX = 0;
}
   196bc:	90 93 83 13 	sts	0x1383, r25	; 0x801383 <a2d_interupt_func+0x1>
   196c0:	80 93 82 13 	sts	0x1382, r24	; 0x801382 <a2d_interupt_func>
   196c4:	08 95       	ret

000196c6 <init_a2d(unsigned char, unsigned char, unsigned char)>:
_Z8init_a2dhhh():
   196c6:	80 93 86 13 	sts	0x1386, r24	; 0x801386 <a2d_enable>
   196ca:	40 93 85 13 	sts	0x1385, r20	; 0x801385 <a2d_reference>
   196ce:	60 93 84 13 	sts	0x1384, r22	; 0x801384 <a2d_delicka>
   196d2:	10 92 87 13 	sts	0x1387, r1	; 0x801387 <a2d_index>
   196d6:	10 92 8a 13 	sts	0x138A, r1	; 0x80138a <a2d_input>
   196da:	10 92 89 13 	sts	0x1389, r1	; 0x801389 <a2d_data+0x1>
   196de:	10 92 88 13 	sts	0x1388, r1	; 0x801388 <a2d_data>
   196e2:	67 70       	andi	r22, 0x07	; 7
   196e4:	68 57       	subi	r22, 0x78	; 120
   196e6:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
   196ea:	ec e7       	ldi	r30, 0x7C	; 124
   196ec:	f0 e0       	ldi	r31, 0x00	; 0
   196ee:	10 82       	st	Z, r1
   196f0:	80 91 85 13 	lds	r24, 0x1385	; 0x801385 <a2d_reference>
   196f4:	20 e4       	ldi	r18, 0x40	; 64
   196f6:	82 9f       	mul	r24, r18
   196f8:	c0 01       	movw	r24, r0
   196fa:	11 24       	eor	r1, r1
   196fc:	80 83       	st	Z, r24
   196fe:	08 95       	ret

00019700 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   19700:	90 91 85 13 	lds	r25, 0x1385	; 0x801385 <a2d_reference>
   19704:	40 e4       	ldi	r20, 0x40	; 64
   19706:	94 9f       	mul	r25, r20
   19708:	90 01       	movw	r18, r0
   1970a:	11 24       	eor	r1, r1
   1970c:	98 2f       	mov	r25, r24
   1970e:	97 70       	andi	r25, 0x07	; 7
   19710:	92 0f       	add	r25, r18
   19712:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   19716:	80 93 8a 13 	sts	0x138A, r24	; 0x80138a <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   1971a:	ea e7       	ldi	r30, 0x7A	; 122
   1971c:	f0 e0       	ldi	r31, 0x00	; 0
   1971e:	80 81       	ld	r24, Z
   19720:	80 64       	ori	r24, 0x40	; 64
   19722:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   19724:	08 95       	ret

00019726 <a2d_start_process()>:
_Z17a2d_start_processv():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   19726:	30 91 86 13 	lds	r19, 0x1386	; 0x801386 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1972a:	20 91 87 13 	lds	r18, 0x1387	; 0x801387 <a2d_index>
   1972e:	90 e0       	ldi	r25, 0x00	; 0
   19730:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   19732:	61 e0       	ldi	r22, 0x01	; 1
   19734:	70 e0       	ldi	r23, 0x00	; 0
   19736:	ab 01       	movw	r20, r22
   19738:	08 2e       	mov	r0, r24
   1973a:	01 c0       	rjmp	.+2      	; 0x1973e <a2d_start_process()+0x18>
   1973c:	44 0f       	add	r20, r20
   1973e:	0a 94       	dec	r0
   19740:	ea f7       	brpl	.-6      	; 0x1973c <a2d_start_process()+0x16>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   19742:	e3 2f       	mov	r30, r19
   19744:	e4 23       	and	r30, r20
   19746:	41 f0       	breq	.+16     	; 0x19758 <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   19748:	e2 2f       	mov	r30, r18
   1974a:	e4 23       	and	r30, r20
   1974c:	29 f4       	brne	.+10     	; 0x19758 <a2d_start_process()+0x32>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1974e:	24 2b       	or	r18, r20
   19750:	20 93 87 13 	sts	0x1387, r18	; 0x801387 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   19754:	0c 94 80 cb 	jmp	0x19700	; 0x19700 <a2d_start_first(unsigned char)>
   19758:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67 (discriminator 2)
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1975a:	88 30       	cpi	r24, 0x08	; 8
   1975c:	91 05       	cpc	r25, r1
   1975e:	59 f7       	brne	.-42     	; 0x19736 <a2d_start_process()+0x10>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   19760:	10 92 87 13 	sts	0x1387, r1	; 0x801387 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:86
	//a2d_complete_funkce();
	}
}
   19764:	08 95       	ret

00019766 <a2d_done()>:
_Z8a2d_donev():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:92
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t a2d_done(void)
{
  return a2d_index;
}
   19766:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <a2d_index>
   1976a:	08 95       	ret

0001976c <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95

ISR(ADC_vect)
{
   1976c:	1f 92       	push	r1
   1976e:	0f 92       	push	r0
   19770:	0f b6       	in	r0, 0x3f	; 63
   19772:	0f 92       	push	r0
   19774:	11 24       	eor	r1, r1
   19776:	0b b6       	in	r0, 0x3b	; 59
   19778:	0f 92       	push	r0
   1977a:	2f 93       	push	r18
   1977c:	3f 93       	push	r19
   1977e:	4f 93       	push	r20
   19780:	5f 93       	push	r21
   19782:	6f 93       	push	r22
   19784:	7f 93       	push	r23
   19786:	8f 93       	push	r24
   19788:	9f 93       	push	r25
   1978a:	af 93       	push	r26
   1978c:	bf 93       	push	r27
   1978e:	cf 93       	push	r28
   19790:	ef 93       	push	r30
   19792:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   19794:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   19796:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   1979a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
   1979e:	68 2f       	mov	r22, r24
   197a0:	70 e0       	ldi	r23, 0x00	; 0
   197a2:	76 2f       	mov	r23, r22
   197a4:	66 27       	eor	r22, r22
   197a6:	69 0f       	add	r22, r25
   197a8:	71 1d       	adc	r23, r1
   197aa:	70 93 89 13 	sts	0x1389, r23	; 0x801389 <a2d_data+0x1>
   197ae:	60 93 88 13 	sts	0x1388, r22	; 0x801388 <a2d_data>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   197b2:	e0 91 82 13 	lds	r30, 0x1382	; 0x801382 <a2d_interupt_func>
   197b6:	f0 91 83 13 	lds	r31, 0x1383	; 0x801383 <a2d_interupt_func+0x1>
   197ba:	80 91 8a 13 	lds	r24, 0x138A	; 0x80138a <a2d_input>
   197be:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   197c0:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   197c2:	ff 91       	pop	r31
   197c4:	ef 91       	pop	r30
   197c6:	cf 91       	pop	r28
   197c8:	bf 91       	pop	r27
   197ca:	af 91       	pop	r26
   197cc:	9f 91       	pop	r25
   197ce:	8f 91       	pop	r24
   197d0:	7f 91       	pop	r23
   197d2:	6f 91       	pop	r22
   197d4:	5f 91       	pop	r21
   197d6:	4f 91       	pop	r20
   197d8:	3f 91       	pop	r19
   197da:	2f 91       	pop	r18
   197dc:	0f 90       	pop	r0
   197de:	0b be       	out	0x3b, r0	; 59
   197e0:	0f 90       	pop	r0
   197e2:	0f be       	out	0x3f, r0	; 63
   197e4:	0f 90       	pop	r0
   197e6:	1f 90       	pop	r1
   197e8:	18 95       	reti

000197ea <yield>:
__empty():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
   197ea:	08 95       	ret

000197ec <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
   197ec:	1f 92       	push	r1
   197ee:	0f 92       	push	r0
   197f0:	0f b6       	in	r0, 0x3f	; 63
   197f2:	0f 92       	push	r0
   197f4:	11 24       	eor	r1, r1
   197f6:	2f 93       	push	r18
   197f8:	3f 93       	push	r19
   197fa:	8f 93       	push	r24
   197fc:	9f 93       	push	r25
   197fe:	af 93       	push	r26
   19800:	bf 93       	push	r27
   19802:	80 91 90 13 	lds	r24, 0x1390	; 0x801390 <timer0_millis>
   19806:	90 91 91 13 	lds	r25, 0x1391	; 0x801391 <timer0_millis+0x1>
   1980a:	a0 91 92 13 	lds	r26, 0x1392	; 0x801392 <timer0_millis+0x2>
   1980e:	b0 91 93 13 	lds	r27, 0x1393	; 0x801393 <timer0_millis+0x3>
   19812:	30 91 8f 13 	lds	r19, 0x138F	; 0x80138f <timer0_fract>
   19816:	23 e0       	ldi	r18, 0x03	; 3
   19818:	23 0f       	add	r18, r19
   1981a:	2d 37       	cpi	r18, 0x7D	; 125
   1981c:	68 f1       	brcs	.+90     	; 0x19878 <__vector_23+0x8c>
   1981e:	26 e8       	ldi	r18, 0x86	; 134
   19820:	23 0f       	add	r18, r19
   19822:	02 96       	adiw	r24, 0x02	; 2
   19824:	a1 1d       	adc	r26, r1
   19826:	b1 1d       	adc	r27, r1
   19828:	20 93 8f 13 	sts	0x138F, r18	; 0x80138f <timer0_fract>
   1982c:	80 93 90 13 	sts	0x1390, r24	; 0x801390 <timer0_millis>
   19830:	90 93 91 13 	sts	0x1391, r25	; 0x801391 <timer0_millis+0x1>
   19834:	a0 93 92 13 	sts	0x1392, r26	; 0x801392 <timer0_millis+0x2>
   19838:	b0 93 93 13 	sts	0x1393, r27	; 0x801393 <timer0_millis+0x3>
   1983c:	80 91 8b 13 	lds	r24, 0x138B	; 0x80138b <timer0_overflow_count>
   19840:	90 91 8c 13 	lds	r25, 0x138C	; 0x80138c <timer0_overflow_count+0x1>
   19844:	a0 91 8d 13 	lds	r26, 0x138D	; 0x80138d <timer0_overflow_count+0x2>
   19848:	b0 91 8e 13 	lds	r27, 0x138E	; 0x80138e <timer0_overflow_count+0x3>
   1984c:	01 96       	adiw	r24, 0x01	; 1
   1984e:	a1 1d       	adc	r26, r1
   19850:	b1 1d       	adc	r27, r1
   19852:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <timer0_overflow_count>
   19856:	90 93 8c 13 	sts	0x138C, r25	; 0x80138c <timer0_overflow_count+0x1>
   1985a:	a0 93 8d 13 	sts	0x138D, r26	; 0x80138d <timer0_overflow_count+0x2>
   1985e:	b0 93 8e 13 	sts	0x138E, r27	; 0x80138e <timer0_overflow_count+0x3>
   19862:	bf 91       	pop	r27
   19864:	af 91       	pop	r26
   19866:	9f 91       	pop	r25
   19868:	8f 91       	pop	r24
   1986a:	3f 91       	pop	r19
   1986c:	2f 91       	pop	r18
   1986e:	0f 90       	pop	r0
   19870:	0f be       	out	0x3f, r0	; 63
   19872:	0f 90       	pop	r0
   19874:	1f 90       	pop	r1
   19876:	18 95       	reti
   19878:	01 96       	adiw	r24, 0x01	; 1
   1987a:	a1 1d       	adc	r26, r1
   1987c:	b1 1d       	adc	r27, r1
   1987e:	d4 cf       	rjmp	.-88     	; 0x19828 <__vector_23+0x3c>

00019880 <millis>:
millis():
   19880:	2f b7       	in	r18, 0x3f	; 63
   19882:	f8 94       	cli
   19884:	60 91 90 13 	lds	r22, 0x1390	; 0x801390 <timer0_millis>
   19888:	70 91 91 13 	lds	r23, 0x1391	; 0x801391 <timer0_millis+0x1>
   1988c:	80 91 92 13 	lds	r24, 0x1392	; 0x801392 <timer0_millis+0x2>
   19890:	90 91 93 13 	lds	r25, 0x1393	; 0x801393 <timer0_millis+0x3>
   19894:	2f bf       	out	0x3f, r18	; 63
   19896:	08 95       	ret

00019898 <micros>:
micros():
   19898:	3f b7       	in	r19, 0x3f	; 63
   1989a:	f8 94       	cli
   1989c:	80 91 8b 13 	lds	r24, 0x138B	; 0x80138b <timer0_overflow_count>
   198a0:	90 91 8c 13 	lds	r25, 0x138C	; 0x80138c <timer0_overflow_count+0x1>
   198a4:	a0 91 8d 13 	lds	r26, 0x138D	; 0x80138d <timer0_overflow_count+0x2>
   198a8:	b0 91 8e 13 	lds	r27, 0x138E	; 0x80138e <timer0_overflow_count+0x3>
   198ac:	26 b5       	in	r18, 0x26	; 38
   198ae:	a8 9b       	sbis	0x15, 0	; 21
   198b0:	05 c0       	rjmp	.+10     	; 0x198bc <micros+0x24>
   198b2:	2f 3f       	cpi	r18, 0xFF	; 255
   198b4:	19 f0       	breq	.+6      	; 0x198bc <micros+0x24>
   198b6:	01 96       	adiw	r24, 0x01	; 1
   198b8:	a1 1d       	adc	r26, r1
   198ba:	b1 1d       	adc	r27, r1
   198bc:	3f bf       	out	0x3f, r19	; 63
   198be:	ba 2f       	mov	r27, r26
   198c0:	a9 2f       	mov	r26, r25
   198c2:	98 2f       	mov	r25, r24
   198c4:	88 27       	eor	r24, r24
   198c6:	bc 01       	movw	r22, r24
   198c8:	cd 01       	movw	r24, r26
   198ca:	62 0f       	add	r22, r18
   198cc:	71 1d       	adc	r23, r1
   198ce:	81 1d       	adc	r24, r1
   198d0:	91 1d       	adc	r25, r1
   198d2:	42 e0       	ldi	r20, 0x02	; 2
   198d4:	66 0f       	add	r22, r22
   198d6:	77 1f       	adc	r23, r23
   198d8:	88 1f       	adc	r24, r24
   198da:	99 1f       	adc	r25, r25
   198dc:	4a 95       	dec	r20
   198de:	d1 f7       	brne	.-12     	; 0x198d4 <micros+0x3c>
   198e0:	08 95       	ret

000198e2 <delay>:
delay():
   198e2:	8f 92       	push	r8
   198e4:	9f 92       	push	r9
   198e6:	af 92       	push	r10
   198e8:	bf 92       	push	r11
   198ea:	cf 92       	push	r12
   198ec:	df 92       	push	r13
   198ee:	ef 92       	push	r14
   198f0:	ff 92       	push	r15
   198f2:	6b 01       	movw	r12, r22
   198f4:	7c 01       	movw	r14, r24
   198f6:	0e 94 4c cc 	call	0x19898	; 0x19898 <micros>
   198fa:	4b 01       	movw	r8, r22
   198fc:	5c 01       	movw	r10, r24
   198fe:	c1 14       	cp	r12, r1
   19900:	d1 04       	cpc	r13, r1
   19902:	e1 04       	cpc	r14, r1
   19904:	f1 04       	cpc	r15, r1
   19906:	e9 f0       	breq	.+58     	; 0x19942 <delay+0x60>
   19908:	0e 94 f5 cb 	call	0x197ea	; 0x197ea <yield>
   1990c:	0e 94 4c cc 	call	0x19898	; 0x19898 <micros>
   19910:	68 19       	sub	r22, r8
   19912:	79 09       	sbc	r23, r9
   19914:	8a 09       	sbc	r24, r10
   19916:	9b 09       	sbc	r25, r11
   19918:	68 3e       	cpi	r22, 0xE8	; 232
   1991a:	73 40       	sbci	r23, 0x03	; 3
   1991c:	81 05       	cpc	r24, r1
   1991e:	91 05       	cpc	r25, r1
   19920:	70 f3       	brcs	.-36     	; 0x198fe <delay+0x1c>
   19922:	21 e0       	ldi	r18, 0x01	; 1
   19924:	c2 1a       	sub	r12, r18
   19926:	d1 08       	sbc	r13, r1
   19928:	e1 08       	sbc	r14, r1
   1992a:	f1 08       	sbc	r15, r1
   1992c:	88 ee       	ldi	r24, 0xE8	; 232
   1992e:	88 0e       	add	r8, r24
   19930:	83 e0       	ldi	r24, 0x03	; 3
   19932:	98 1e       	adc	r9, r24
   19934:	a1 1c       	adc	r10, r1
   19936:	b1 1c       	adc	r11, r1
   19938:	c1 14       	cp	r12, r1
   1993a:	d1 04       	cpc	r13, r1
   1993c:	e1 04       	cpc	r14, r1
   1993e:	f1 04       	cpc	r15, r1
   19940:	29 f7       	brne	.-54     	; 0x1990c <delay+0x2a>
   19942:	ff 90       	pop	r15
   19944:	ef 90       	pop	r14
   19946:	df 90       	pop	r13
   19948:	cf 90       	pop	r12
   1994a:	bf 90       	pop	r11
   1994c:	af 90       	pop	r10
   1994e:	9f 90       	pop	r9
   19950:	8f 90       	pop	r8
   19952:	08 95       	ret

00019954 <init>:
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   19954:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   19956:	84 b5       	in	r24, 0x24	; 36
   19958:	83 60       	ori	r24, 0x03	; 3
   1995a:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1995c:	85 b5       	in	r24, 0x25	; 37
   1995e:	83 60       	ori	r24, 0x03	; 3
   19960:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   19962:	ee e6       	ldi	r30, 0x6E	; 110
   19964:	f0 e0       	ldi	r31, 0x00	; 0
   19966:	80 81       	ld	r24, Z
   19968:	81 60       	ori	r24, 0x01	; 1
   1996a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1996c:	e1 e8       	ldi	r30, 0x81	; 129
   1996e:	f0 e0       	ldi	r31, 0x00	; 0
   19970:	82 e0       	ldi	r24, 0x02	; 2
   19972:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   19974:	80 81       	ld	r24, Z
   19976:	81 60       	ori	r24, 0x01	; 1
   19978:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1997a:	e0 e8       	ldi	r30, 0x80	; 128
   1997c:	f0 e0       	ldi	r31, 0x00	; 0
   1997e:	80 81       	ld	r24, Z
   19980:	81 60       	ori	r24, 0x01	; 1
   19982:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   19984:	e1 eb       	ldi	r30, 0xB1	; 177
   19986:	f0 e0       	ldi	r31, 0x00	; 0
   19988:	80 81       	ld	r24, Z
   1998a:	84 60       	ori	r24, 0x04	; 4
   1998c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1998e:	e0 eb       	ldi	r30, 0xB0	; 176
   19990:	f0 e0       	ldi	r31, 0x00	; 0
   19992:	80 81       	ld	r24, Z
   19994:	81 60       	ori	r24, 0x01	; 1
   19996:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   19998:	e1 e9       	ldi	r30, 0x91	; 145
   1999a:	f0 e0       	ldi	r31, 0x00	; 0
   1999c:	80 81       	ld	r24, Z
   1999e:	83 60       	ori	r24, 0x03	; 3
   199a0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   199a2:	e0 e9       	ldi	r30, 0x90	; 144
   199a4:	f0 e0       	ldi	r31, 0x00	; 0
   199a6:	80 81       	ld	r24, Z
   199a8:	81 60       	ori	r24, 0x01	; 1
   199aa:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   199ac:	e1 ea       	ldi	r30, 0xA1	; 161
   199ae:	f0 e0       	ldi	r31, 0x00	; 0
   199b0:	80 81       	ld	r24, Z
   199b2:	83 60       	ori	r24, 0x03	; 3
   199b4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   199b6:	e0 ea       	ldi	r30, 0xA0	; 160
   199b8:	f0 e0       	ldi	r31, 0x00	; 0
   199ba:	80 81       	ld	r24, Z
   199bc:	81 60       	ori	r24, 0x01	; 1
   199be:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   199c0:	e1 e2       	ldi	r30, 0x21	; 33
   199c2:	f1 e0       	ldi	r31, 0x01	; 1
   199c4:	80 81       	ld	r24, Z
   199c6:	83 60       	ori	r24, 0x03	; 3
   199c8:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   199ca:	e0 e2       	ldi	r30, 0x20	; 32
   199cc:	f1 e0       	ldi	r31, 0x01	; 1
   199ce:	80 81       	ld	r24, Z
   199d0:	81 60       	ori	r24, 0x01	; 1
   199d2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   199d4:	87 e8       	ldi	r24, 0x87	; 135
   199d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   199da:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
   199de:	08 95       	ret

000199e0 <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   199e0:	82 50       	subi	r24, 0x02	; 2
   199e2:	82 31       	cpi	r24, 0x12	; 18
   199e4:	08 f0       	brcs	.+2      	; 0x199e8 <turnOffPWM+0x8>
   199e6:	5f c0       	rjmp	.+190    	; 0x19aa6 <turnOffPWM+0xc6>
   199e8:	e8 2f       	mov	r30, r24
   199ea:	f0 e0       	ldi	r31, 0x00	; 0
   199ec:	88 27       	eor	r24, r24
   199ee:	e4 50       	subi	r30, 0x04	; 4
   199f0:	f3 43       	sbci	r31, 0x33	; 51
   199f2:	8f 4f       	sbci	r24, 0xFF	; 255
   199f4:	0c 94 d1 d3 	jmp	0x1a7a2	; 0x1a7a2 <__tablejump2__>
   199f8:	50 cd       	rjmp	.-1376   	; 0x1949a <NTPClient::end()+0x18>
   199fa:	54 cd       	rjmp	.-1368   	; 0x194a4 <NTPClient::setTimeOffset(int)+0x2>
   199fc:	0e cd       	rjmp	.-1508   	; 0x1941a <NTPClient::getDate() const+0x24>
   199fe:	14 cd       	rjmp	.-1496   	; 0x19428 <NTPClient::getDate() const+0x32>
   19a00:	18 cd       	rjmp	.-1488   	; 0x19432 <NTPClient::getHours() const+0x4>
   19a02:	53 cd       	rjmp	.-1370   	; 0x194aa <NTPClient::setTimeOffset(int)+0x8>
   19a04:	1c cd       	rjmp	.-1480   	; 0x1943e <NTPClient::getHours() const+0x10>
   19a06:	22 cd       	rjmp	.-1468   	; 0x1944c <NTPClient::getHours() const+0x1e>
   19a08:	26 cd       	rjmp	.-1460   	; 0x19456 <NTPClient::getMinutes() const+0x8>
   19a0a:	2c cd       	rjmp	.-1448   	; 0x19464 <NTPClient::getMinutes() const+0x16>
   19a0c:	30 cd       	rjmp	.-1440   	; 0x1946e <NTPClient::getSeconds() const>
   19a0e:	34 cd       	rjmp	.-1432   	; 0x19478 <NTPClient::getSeconds() const+0xa>
   19a10:	3a cd       	rjmp	.-1420   	; 0x19486 <NTPClient::end()+0x4>
   19a12:	3e cd       	rjmp	.-1412   	; 0x19490 <NTPClient::end()+0xe>
   19a14:	53 cd       	rjmp	.-1370   	; 0x194bc <NTPClient::setUpdateInterval(unsigned long)+0x6>
   19a16:	42 cd       	rjmp	.-1404   	; 0x1949c <NTPClient::end()+0x1a>
   19a18:	48 cd       	rjmp	.-1392   	; 0x194aa <NTPClient::setTimeOffset(int)+0x8>
   19a1a:	4c cd       	rjmp	.-1384   	; 0x194b4 <NTPClient::setTimeOffset(int)+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   19a1c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   19a20:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   19a22:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
   19a26:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   19a28:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   19a2c:	8f 7d       	andi	r24, 0xDF	; 223
   19a2e:	f9 cf       	rjmp	.-14     	; 0x19a22 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   19a30:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   19a34:	87 7f       	andi	r24, 0xF7	; 247
   19a36:	f5 cf       	rjmp	.-22     	; 0x19a22 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   19a38:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   19a3c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   19a3e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
   19a42:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   19a44:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   19a48:	8f 7d       	andi	r24, 0xDF	; 223
   19a4a:	f9 cf       	rjmp	.-14     	; 0x19a3e <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   19a4c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   19a50:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   19a52:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:127
        break;
   19a56:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   19a58:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   19a5c:	8f 7d       	andi	r24, 0xDF	; 223
   19a5e:	f9 cf       	rjmp	.-14     	; 0x19a52 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   19a60:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   19a64:	87 7f       	andi	r24, 0xF7	; 247
   19a66:	f5 cf       	rjmp	.-22     	; 0x19a52 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   19a68:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   19a6c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   19a6e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:144
        break;
   19a72:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   19a74:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   19a78:	8f 7d       	andi	r24, 0xDF	; 223
   19a7a:	f9 cf       	rjmp	.-14     	; 0x19a6e <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   19a7c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   19a80:	87 7f       	andi	r24, 0xF7	; 247
   19a82:	f5 cf       	rjmp	.-22     	; 0x19a6e <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   19a84:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   19a88:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   19a8a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:162
        break;
   19a8e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   19a90:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   19a94:	8f 7d       	andi	r24, 0xDF	; 223
   19a96:	f9 cf       	rjmp	.-14     	; 0x19a8a <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   19a98:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   19a9c:	87 7f       	andi	r24, 0xF7	; 247
   19a9e:	f5 cf       	rjmp	.-22     	; 0x19a8a <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   19aa0:	84 b5       	in	r24, 0x24	; 36
   19aa2:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   19aa4:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   19aa6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   19aa8:	84 b5       	in	r24, 0x24	; 36
   19aaa:	8f 7d       	andi	r24, 0xDF	; 223
   19aac:	fb cf       	rjmp	.-10     	; 0x19aa4 <turnOffPWM+0xc4>

00019aae <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   19aae:	cf 93       	push	r28
   19ab0:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   19ab2:	90 e0       	ldi	r25, 0x00	; 0
   19ab4:	fc 01       	movw	r30, r24
   19ab6:	ec 53       	subi	r30, 0x3C	; 60
   19ab8:	fe 49       	sbci	r31, 0x9E	; 158
   19aba:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   19abc:	86 50       	subi	r24, 0x06	; 6
   19abe:	9e 49       	sbci	r25, 0x9E	; 158
   19ac0:	fc 01       	movw	r30, r24
   19ac2:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   19ac4:	88 23       	and	r24, r24
   19ac6:	c9 f0       	breq	.+50     	; 0x19afa <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   19ac8:	90 e0       	ldi	r25, 0x00	; 0
   19aca:	88 0f       	add	r24, r24
   19acc:	99 1f       	adc	r25, r25
   19ace:	fc 01       	movw	r30, r24
   19ad0:	e0 5b       	subi	r30, 0xB0	; 176
   19ad2:	fd 49       	sbci	r31, 0x9D	; 157
   19ad4:	a5 91       	lpm	r26, Z+
   19ad6:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   19ad8:	fc 01       	movw	r30, r24
   19ada:	e0 5c       	subi	r30, 0xC0	; 192
   19adc:	fd 49       	sbci	r31, 0x9D	; 157
   19ade:	c5 91       	lpm	r28, Z+
   19ae0:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   19ae2:	61 11       	cpse	r22, r1
   19ae4:	0d c0       	rjmp	.+26     	; 0x19b00 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   19ae6:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   19ae8:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   19aea:	8c 91       	ld	r24, X
   19aec:	20 95       	com	r18
   19aee:	82 23       	and	r24, r18
   19af0:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   19af2:	88 81       	ld	r24, Y
   19af4:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   19af6:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   19af8:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   19afa:	df 91       	pop	r29
   19afc:	cf 91       	pop	r28
   19afe:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   19b00:	62 30       	cpi	r22, 0x02	; 2
   19b02:	51 f4       	brne	.+20     	; 0x19b18 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   19b04:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   19b06:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   19b08:	3c 91       	ld	r19, X
   19b0a:	82 2f       	mov	r24, r18
   19b0c:	80 95       	com	r24
   19b0e:	83 23       	and	r24, r19
   19b10:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   19b12:	e8 81       	ld	r30, Y
   19b14:	2e 2b       	or	r18, r30
   19b16:	ef cf       	rjmp	.-34     	; 0x19af6 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   19b18:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   19b1a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   19b1c:	ec 91       	ld	r30, X
   19b1e:	2e 2b       	or	r18, r30
   19b20:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   19b22:	8f bf       	out	0x3f, r24	; 63
   19b24:	ea cf       	rjmp	.-44     	; 0x19afa <pinMode+0x4c>

00019b26 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   19b26:	1f 93       	push	r17
   19b28:	cf 93       	push	r28
   19b2a:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   19b2c:	28 2f       	mov	r18, r24
   19b2e:	30 e0       	ldi	r19, 0x00	; 0
   19b30:	f9 01       	movw	r30, r18
   19b32:	e2 57       	subi	r30, 0x72	; 114
   19b34:	fe 49       	sbci	r31, 0x9E	; 158
   19b36:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   19b38:	f9 01       	movw	r30, r18
   19b3a:	ec 53       	subi	r30, 0x3C	; 60
   19b3c:	fe 49       	sbci	r31, 0x9E	; 158
   19b3e:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   19b40:	f9 01       	movw	r30, r18
   19b42:	e6 50       	subi	r30, 0x06	; 6
   19b44:	fe 49       	sbci	r31, 0x9E	; 158
   19b46:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   19b48:	cc 23       	and	r28, r28
   19b4a:	a9 f0       	breq	.+42     	; 0x19b76 <digitalWrite+0x50>
   19b4c:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   19b4e:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
   19b50:	0e 94 f0 cc 	call	0x199e0	; 0x199e0 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   19b54:	ec 2f       	mov	r30, r28
   19b56:	f0 e0       	ldi	r31, 0x00	; 0
   19b58:	ee 0f       	add	r30, r30
   19b5a:	ff 1f       	adc	r31, r31
   19b5c:	e0 5c       	subi	r30, 0xC0	; 192
   19b5e:	fd 49       	sbci	r31, 0x9D	; 157
   19b60:	a5 91       	lpm	r26, Z+
   19b62:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   19b64:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   19b66:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   19b68:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   19b6a:	11 11       	cpse	r17, r1
   19b6c:	08 c0       	rjmp	.+16     	; 0x19b7e <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   19b6e:	d0 95       	com	r29
   19b70:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   19b72:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   19b74:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   19b76:	df 91       	pop	r29
   19b78:	cf 91       	pop	r28
   19b7a:	1f 91       	pop	r17
   19b7c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   19b7e:	de 2b       	or	r29, r30
   19b80:	f8 cf       	rjmp	.-16     	; 0x19b72 <digitalWrite+0x4c>

00019b82 <digitalRead>:
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   19b82:	cf 93       	push	r28
   19b84:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
   19b86:	28 2f       	mov	r18, r24
   19b88:	30 e0       	ldi	r19, 0x00	; 0
   19b8a:	f9 01       	movw	r30, r18
   19b8c:	e2 57       	subi	r30, 0x72	; 114
   19b8e:	fe 49       	sbci	r31, 0x9E	; 158
   19b90:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   19b92:	f9 01       	movw	r30, r18
   19b94:	ec 53       	subi	r30, 0x3C	; 60
   19b96:	fe 49       	sbci	r31, 0x9E	; 158
   19b98:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   19b9a:	f9 01       	movw	r30, r18
   19b9c:	e6 50       	subi	r30, 0x06	; 6
   19b9e:	fe 49       	sbci	r31, 0x9E	; 158
   19ba0:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   19ba2:	cc 23       	and	r28, r28
   19ba4:	a1 f0       	breq	.+40     	; 0x19bce <digitalRead+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   19ba6:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
   19ba8:	0e 94 f0 cc 	call	0x199e0	; 0x199e0 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   19bac:	ec 2f       	mov	r30, r28
   19bae:	f0 e0       	ldi	r31, 0x00	; 0
   19bb0:	ee 0f       	add	r30, r30
   19bb2:	ff 1f       	adc	r31, r31
   19bb4:	e0 5d       	subi	r30, 0xD0	; 208
   19bb6:	fd 49       	sbci	r31, 0x9D	; 157
   19bb8:	a5 91       	lpm	r26, Z+
   19bba:	b4 91       	lpm	r27, Z
   19bbc:	ec 91       	ld	r30, X
   19bbe:	ed 23       	and	r30, r29
   19bc0:	81 e0       	ldi	r24, 0x01	; 1
   19bc2:	90 e0       	ldi	r25, 0x00	; 0
   19bc4:	09 f4       	brne	.+2      	; 0x19bc8 <digitalRead+0x46>
   19bc6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
   19bc8:	df 91       	pop	r29
   19bca:	cf 91       	pop	r28
   19bcc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   19bce:	80 e0       	ldi	r24, 0x00	; 0
   19bd0:	90 e0       	ldi	r25, 0x00	; 0
   19bd2:	fa cf       	rjmp	.-12     	; 0x19bc8 <digitalRead+0x46>

00019bd4 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   19bd4:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   19bd6:	91 8d       	ldd	r25, Z+25	; 0x19
   19bd8:	22 8d       	ldd	r18, Z+26	; 0x1a
   19bda:	89 2f       	mov	r24, r25
   19bdc:	90 e0       	ldi	r25, 0x00	; 0
   19bde:	80 5c       	subi	r24, 0xC0	; 192
   19be0:	9f 4f       	sbci	r25, 0xFF	; 255
   19be2:	82 1b       	sub	r24, r18
   19be4:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   19be6:	8f 73       	andi	r24, 0x3F	; 63
   19be8:	99 27       	eor	r25, r25
   19bea:	08 95       	ret

00019bec <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
   19bec:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   19bee:	91 8d       	ldd	r25, Z+25	; 0x19
   19bf0:	82 8d       	ldd	r24, Z+26	; 0x1a
   19bf2:	98 17       	cp	r25, r24
   19bf4:	31 f0       	breq	.+12     	; 0x19c02 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   19bf6:	82 8d       	ldd	r24, Z+26	; 0x1a
   19bf8:	e8 0f       	add	r30, r24
   19bfa:	f1 1d       	adc	r31, r1
   19bfc:	85 8d       	ldd	r24, Z+29	; 0x1d
   19bfe:	90 e0       	ldi	r25, 0x00	; 0
   19c00:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   19c02:	8f ef       	ldi	r24, 0xFF	; 255
   19c04:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   19c06:	08 95       	ret

00019c08 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
   19c08:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   19c0a:	91 8d       	ldd	r25, Z+25	; 0x19
   19c0c:	82 8d       	ldd	r24, Z+26	; 0x1a
   19c0e:	98 17       	cp	r25, r24
   19c10:	61 f0       	breq	.+24     	; 0x19c2a <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   19c12:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19c14:	ae 0f       	add	r26, r30
   19c16:	bf 2f       	mov	r27, r31
   19c18:	b1 1d       	adc	r27, r1
   19c1a:	5d 96       	adiw	r26, 0x1d	; 29
   19c1c:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   19c1e:	92 8d       	ldd	r25, Z+26	; 0x1a
   19c20:	9f 5f       	subi	r25, 0xFF	; 255
   19c22:	9f 73       	andi	r25, 0x3F	; 63
   19c24:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   19c26:	90 e0       	ldi	r25, 0x00	; 0
   19c28:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   19c2a:	8f ef       	ldi	r24, 0xFF	; 255
   19c2c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   19c2e:	08 95       	ret

00019c30 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   19c30:	fc 01       	movw	r30, r24
   19c32:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   19c34:	44 8d       	ldd	r20, Z+28	; 0x1c
   19c36:	25 2f       	mov	r18, r21
   19c38:	30 e0       	ldi	r19, 0x00	; 0
   19c3a:	84 2f       	mov	r24, r20
   19c3c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   19c3e:	82 1b       	sub	r24, r18
   19c40:	93 0b       	sbc	r25, r19
   19c42:	54 17       	cp	r21, r20
   19c44:	10 f0       	brcs	.+4      	; 0x19c4a <HardwareSerial::availableForWrite()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
   19c46:	cf 96       	adiw	r24, 0x3f	; 63
   19c48:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   19c4a:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   19c4c:	08 95       	ret

00019c4e <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   19c4e:	8a e2       	ldi	r24, 0x2A	; 42
   19c50:	9f ec       	ldi	r25, 0xCF	; 207
   19c52:	89 2b       	or	r24, r25
   19c54:	49 f0       	breq	.+18     	; 0x19c68 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
   19c56:	80 e0       	ldi	r24, 0x00	; 0
   19c58:	90 e0       	ldi	r25, 0x00	; 0
   19c5a:	89 2b       	or	r24, r25
   19c5c:	29 f0       	breq	.+10     	; 0x19c68 <serialEventRun()+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
   19c5e:	0e 94 2a cf 	call	0x19e54	; 0x19e54 <Serial0_available()>
   19c62:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
   19c64:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   19c68:	80 e0       	ldi	r24, 0x00	; 0
   19c6a:	90 e0       	ldi	r25, 0x00	; 0
   19c6c:	89 2b       	or	r24, r25
   19c6e:	49 f0       	breq	.+18     	; 0x19c82 <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
   19c70:	80 e0       	ldi	r24, 0x00	; 0
   19c72:	90 e0       	ldi	r25, 0x00	; 0
   19c74:	89 2b       	or	r24, r25
   19c76:	29 f0       	breq	.+10     	; 0x19c82 <serialEventRun()+0x34>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
   19c78:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   19c7c:	81 11       	cpse	r24, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
   19c7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   19c82:	08 95       	ret

00019c84 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   19c84:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   19c86:	a4 8d       	ldd	r26, Z+28	; 0x1c
   19c88:	a8 0f       	add	r26, r24
   19c8a:	b9 2f       	mov	r27, r25
   19c8c:	b1 1d       	adc	r27, r1
   19c8e:	a3 5a       	subi	r26, 0xA3	; 163
   19c90:	bf 4f       	sbci	r27, 0xFF	; 255
   19c92:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   19c94:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c96:	90 e0       	ldi	r25, 0x00	; 0
   19c98:	01 96       	adiw	r24, 0x01	; 1
   19c9a:	8f 73       	andi	r24, 0x3F	; 63
   19c9c:	99 27       	eor	r25, r25
   19c9e:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   19ca0:	a6 89       	ldd	r26, Z+22	; 0x16
   19ca2:	b7 89       	ldd	r27, Z+23	; 0x17
   19ca4:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   19ca6:	a0 89       	ldd	r26, Z+16	; 0x10
   19ca8:	b1 89       	ldd	r27, Z+17	; 0x11
   19caa:	8c 91       	ld	r24, X
   19cac:	80 64       	ori	r24, 0x40	; 64
   19cae:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   19cb0:	93 8d       	ldd	r25, Z+27	; 0x1b
   19cb2:	84 8d       	ldd	r24, Z+28	; 0x1c
   19cb4:	98 13       	cpse	r25, r24
   19cb6:	06 c0       	rjmp	.+12     	; 0x19cc4 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   19cb8:	02 88       	ldd	r0, Z+18	; 0x12
   19cba:	f3 89       	ldd	r31, Z+19	; 0x13
   19cbc:	e0 2d       	mov	r30, r0
   19cbe:	80 81       	ld	r24, Z
   19cc0:	8f 7d       	andi	r24, 0xDF	; 223
   19cc2:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   19cc4:	08 95       	ret

00019cc6 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   19cc6:	cf 93       	push	r28
   19cc8:	df 93       	push	r29
   19cca:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   19ccc:	88 8d       	ldd	r24, Y+24	; 0x18
   19cce:	88 23       	and	r24, r24
   19cd0:	b9 f0       	breq	.+46     	; 0x19d00 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   19cd2:	aa 89       	ldd	r26, Y+18	; 0x12
   19cd4:	bb 89       	ldd	r27, Y+19	; 0x13
   19cd6:	e8 89       	ldd	r30, Y+16	; 0x10
   19cd8:	f9 89       	ldd	r31, Y+17	; 0x11
   19cda:	8c 91       	ld	r24, X
   19cdc:	85 fd       	sbrc	r24, 5
   19cde:	03 c0       	rjmp	.+6      	; 0x19ce6 <HardwareSerial::flush()+0x20>
   19ce0:	80 81       	ld	r24, Z
   19ce2:	86 fd       	sbrc	r24, 6
   19ce4:	0d c0       	rjmp	.+26     	; 0x19d00 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   19ce6:	0f b6       	in	r0, 0x3f	; 63
   19ce8:	07 fc       	sbrc	r0, 7
   19cea:	f7 cf       	rjmp	.-18     	; 0x19cda <HardwareSerial::flush()+0x14>
   19cec:	8c 91       	ld	r24, X
   19cee:	85 ff       	sbrs	r24, 5
   19cf0:	f2 cf       	rjmp	.-28     	; 0x19cd6 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   19cf2:	80 81       	ld	r24, Z
   19cf4:	85 ff       	sbrs	r24, 5
   19cf6:	ed cf       	rjmp	.-38     	; 0x19cd2 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   19cf8:	ce 01       	movw	r24, r28
   19cfa:	0e 94 42 ce 	call	0x19c84	; 0x19c84 <HardwareSerial::_tx_udr_empty_irq()>
   19cfe:	e9 cf       	rjmp	.-46     	; 0x19cd2 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   19d00:	df 91       	pop	r29
   19d02:	cf 91       	pop	r28
   19d04:	08 95       	ret

00019d06 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
   19d06:	ef 92       	push	r14
   19d08:	ff 92       	push	r15
   19d0a:	0f 93       	push	r16
   19d0c:	1f 93       	push	r17
   19d0e:	cf 93       	push	r28
   19d10:	df 93       	push	r29
   19d12:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   19d14:	81 e0       	ldi	r24, 0x01	; 1
   19d16:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   19d18:	9b 8d       	ldd	r25, Y+27	; 0x1b
   19d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19d1c:	98 13       	cpse	r25, r24
   19d1e:	16 c0       	rjmp	.+44     	; 0x19d4c <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
   19d20:	e8 89       	ldd	r30, Y+16	; 0x10
   19d22:	f9 89       	ldd	r31, Y+17	; 0x11
   19d24:	80 81       	ld	r24, Z
   19d26:	85 ff       	sbrs	r24, 5
   19d28:	11 c0       	rjmp	.+34     	; 0x19d4c <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   19d2a:	ee 89       	ldd	r30, Y+22	; 0x16
   19d2c:	ff 89       	ldd	r31, Y+23	; 0x17
   19d2e:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   19d30:	e8 89       	ldd	r30, Y+16	; 0x10
   19d32:	f9 89       	ldd	r31, Y+17	; 0x11
   19d34:	80 81       	ld	r24, Z
   19d36:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   19d38:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   19d3a:	81 e0       	ldi	r24, 0x01	; 1
   19d3c:	90 e0       	ldi	r25, 0x00	; 0
   19d3e:	df 91       	pop	r29
   19d40:	cf 91       	pop	r28
   19d42:	1f 91       	pop	r17
   19d44:	0f 91       	pop	r16
   19d46:	ff 90       	pop	r15
   19d48:	ef 90       	pop	r14
   19d4a:	08 95       	ret
   19d4c:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   19d4e:	0b 8d       	ldd	r16, Y+27	; 0x1b
   19d50:	10 e0       	ldi	r17, 0x00	; 0
   19d52:	0f 5f       	subi	r16, 0xFF	; 255
   19d54:	1f 4f       	sbci	r17, 0xFF	; 255
   19d56:	0f 73       	andi	r16, 0x3F	; 63
   19d58:	11 27       	eor	r17, r17
   19d5a:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   19d5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19d5e:	8e 11       	cpse	r24, r14
   19d60:	0c c0       	rjmp	.+24     	; 0x19d7a <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   19d62:	0f b6       	in	r0, 0x3f	; 63
   19d64:	07 fc       	sbrc	r0, 7
   19d66:	fa cf       	rjmp	.-12     	; 0x19d5c <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   19d68:	e8 89       	ldd	r30, Y+16	; 0x10
   19d6a:	f9 89       	ldd	r31, Y+17	; 0x11
   19d6c:	80 81       	ld	r24, Z
   19d6e:	85 ff       	sbrs	r24, 5
   19d70:	f5 cf       	rjmp	.-22     	; 0x19d5c <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   19d72:	ce 01       	movw	r24, r28
   19d74:	0e 94 42 ce 	call	0x19c84	; 0x19c84 <HardwareSerial::_tx_udr_empty_irq()>
   19d78:	f1 cf       	rjmp	.-30     	; 0x19d5c <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   19d7a:	eb 8d       	ldd	r30, Y+27	; 0x1b
   19d7c:	ec 0f       	add	r30, r28
   19d7e:	fd 2f       	mov	r31, r29
   19d80:	f1 1d       	adc	r31, r1
   19d82:	e3 5a       	subi	r30, 0xA3	; 163
   19d84:	ff 4f       	sbci	r31, 0xFF	; 255
   19d86:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   19d88:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   19d8a:	ea 89       	ldd	r30, Y+18	; 0x12
   19d8c:	fb 89       	ldd	r31, Y+19	; 0x13
   19d8e:	80 81       	ld	r24, Z
   19d90:	80 62       	ori	r24, 0x20	; 32
   19d92:	d2 cf       	rjmp	.-92     	; 0x19d38 <HardwareSerial::write(unsigned char)+0x32>

00019d94 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   19d94:	1f 92       	push	r1
   19d96:	0f 92       	push	r0
   19d98:	0f b6       	in	r0, 0x3f	; 63
   19d9a:	0f 92       	push	r0
   19d9c:	11 24       	eor	r1, r1
   19d9e:	0b b6       	in	r0, 0x3b	; 59
   19da0:	0f 92       	push	r0
   19da2:	2f 93       	push	r18
   19da4:	8f 93       	push	r24
   19da6:	9f 93       	push	r25
   19da8:	ef 93       	push	r30
   19daa:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   19dac:	e0 91 a4 13 	lds	r30, 0x13A4	; 0x8013a4 <Serial+0x10>
   19db0:	f0 91 a5 13 	lds	r31, 0x13A5	; 0x8013a5 <Serial+0x11>
   19db4:	80 81       	ld	r24, Z
   19db6:	e0 91 aa 13 	lds	r30, 0x13AA	; 0x8013aa <Serial+0x16>
   19dba:	f0 91 ab 13 	lds	r31, 0x13AB	; 0x8013ab <Serial+0x17>
   19dbe:	82 fd       	sbrc	r24, 2
   19dc0:	1d c0       	rjmp	.+58     	; 0x19dfc <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   19dc2:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   19dc4:	80 91 ad 13 	lds	r24, 0x13AD	; 0x8013ad <Serial+0x19>
   19dc8:	8f 5f       	subi	r24, 0xFF	; 255
   19dca:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   19dcc:	20 91 ae 13 	lds	r18, 0x13AE	; 0x8013ae <Serial+0x1a>
   19dd0:	82 17       	cp	r24, r18
   19dd2:	41 f0       	breq	.+16     	; 0x19de4 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   19dd4:	e0 91 ad 13 	lds	r30, 0x13AD	; 0x8013ad <Serial+0x19>
   19dd8:	f0 e0       	ldi	r31, 0x00	; 0
   19dda:	ec 56       	subi	r30, 0x6C	; 108
   19ddc:	fc 4e       	sbci	r31, 0xEC	; 236
   19dde:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   19de0:	80 93 ad 13 	sts	0x13AD, r24	; 0x8013ad <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   19de4:	ff 91       	pop	r31
   19de6:	ef 91       	pop	r30
   19de8:	9f 91       	pop	r25
   19dea:	8f 91       	pop	r24
   19dec:	2f 91       	pop	r18
   19dee:	0f 90       	pop	r0
   19df0:	0b be       	out	0x3b, r0	; 59
   19df2:	0f 90       	pop	r0
   19df4:	0f be       	out	0x3f, r0	; 63
   19df6:	0f 90       	pop	r0
   19df8:	1f 90       	pop	r1
   19dfa:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   19dfc:	80 81       	ld	r24, Z
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
   19dfe:	f2 cf       	rjmp	.-28     	; 0x19de4 <__vector_25+0x50>

00019e00 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   19e00:	1f 92       	push	r1
   19e02:	0f 92       	push	r0
   19e04:	0f b6       	in	r0, 0x3f	; 63
   19e06:	0f 92       	push	r0
   19e08:	11 24       	eor	r1, r1
   19e0a:	0b b6       	in	r0, 0x3b	; 59
   19e0c:	0f 92       	push	r0
   19e0e:	2f 93       	push	r18
   19e10:	3f 93       	push	r19
   19e12:	4f 93       	push	r20
   19e14:	5f 93       	push	r21
   19e16:	6f 93       	push	r22
   19e18:	7f 93       	push	r23
   19e1a:	8f 93       	push	r24
   19e1c:	9f 93       	push	r25
   19e1e:	af 93       	push	r26
   19e20:	bf 93       	push	r27
   19e22:	ef 93       	push	r30
   19e24:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   19e26:	84 e9       	ldi	r24, 0x94	; 148
   19e28:	93 e1       	ldi	r25, 0x13	; 19
   19e2a:	0e 94 42 ce 	call	0x19c84	; 0x19c84 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   19e2e:	ff 91       	pop	r31
   19e30:	ef 91       	pop	r30
   19e32:	bf 91       	pop	r27
   19e34:	af 91       	pop	r26
   19e36:	9f 91       	pop	r25
   19e38:	8f 91       	pop	r24
   19e3a:	7f 91       	pop	r23
   19e3c:	6f 91       	pop	r22
   19e3e:	5f 91       	pop	r21
   19e40:	4f 91       	pop	r20
   19e42:	3f 91       	pop	r19
   19e44:	2f 91       	pop	r18
   19e46:	0f 90       	pop	r0
   19e48:	0b be       	out	0x3b, r0	; 59
   19e4a:	0f 90       	pop	r0
   19e4c:	0f be       	out	0x3f, r0	; 63
   19e4e:	0f 90       	pop	r0
   19e50:	1f 90       	pop	r1
   19e52:	18 95       	reti

00019e54 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   19e54:	84 e9       	ldi	r24, 0x94	; 148
   19e56:	93 e1       	ldi	r25, 0x13	; 19
   19e58:	0e 94 ea cd 	call	0x19bd4	; 0x19bd4 <HardwareSerial::available()>
   19e5c:	21 e0       	ldi	r18, 0x01	; 1
   19e5e:	89 2b       	or	r24, r25
   19e60:	09 f4       	brne	.+2      	; 0x19e64 <Serial0_available()+0x10>
   19e62:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   19e64:	82 2f       	mov	r24, r18
   19e66:	08 95       	ret

00019e68 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   19e68:	e4 e9       	ldi	r30, 0x94	; 148
   19e6a:	f3 e1       	ldi	r31, 0x13	; 19
   19e6c:	13 82       	std	Z+3, r1	; 0x03
   19e6e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   19e70:	88 ee       	ldi	r24, 0xE8	; 232
   19e72:	93 e0       	ldi	r25, 0x03	; 3
   19e74:	a0 e0       	ldi	r26, 0x00	; 0
   19e76:	b0 e0       	ldi	r27, 0x00	; 0
   19e78:	84 83       	std	Z+4, r24	; 0x04
   19e7a:	95 83       	std	Z+5, r25	; 0x05
   19e7c:	a6 83       	std	Z+6, r26	; 0x06
   19e7e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
   19e80:	8a ec       	ldi	r24, 0xCA	; 202
   19e82:	98 e0       	ldi	r25, 0x08	; 8
   19e84:	91 83       	std	Z+1, r25	; 0x01
   19e86:	80 83       	st	Z, r24
   19e88:	85 ec       	ldi	r24, 0xC5	; 197
   19e8a:	90 e0       	ldi	r25, 0x00	; 0
   19e8c:	95 87       	std	Z+13, r25	; 0x0d
   19e8e:	84 87       	std	Z+12, r24	; 0x0c
   19e90:	84 ec       	ldi	r24, 0xC4	; 196
   19e92:	90 e0       	ldi	r25, 0x00	; 0
   19e94:	97 87       	std	Z+15, r25	; 0x0f
   19e96:	86 87       	std	Z+14, r24	; 0x0e
   19e98:	80 ec       	ldi	r24, 0xC0	; 192
   19e9a:	90 e0       	ldi	r25, 0x00	; 0
   19e9c:	91 8b       	std	Z+17, r25	; 0x11
   19e9e:	80 8b       	std	Z+16, r24	; 0x10
   19ea0:	81 ec       	ldi	r24, 0xC1	; 193
   19ea2:	90 e0       	ldi	r25, 0x00	; 0
   19ea4:	93 8b       	std	Z+19, r25	; 0x13
   19ea6:	82 8b       	std	Z+18, r24	; 0x12
   19ea8:	82 ec       	ldi	r24, 0xC2	; 194
   19eaa:	90 e0       	ldi	r25, 0x00	; 0
   19eac:	95 8b       	std	Z+21, r25	; 0x15
   19eae:	84 8b       	std	Z+20, r24	; 0x14
   19eb0:	86 ec       	ldi	r24, 0xC6	; 198
   19eb2:	90 e0       	ldi	r25, 0x00	; 0
   19eb4:	97 8b       	std	Z+23, r25	; 0x17
   19eb6:	86 8b       	std	Z+22, r24	; 0x16
   19eb8:	11 8e       	std	Z+25, r1	; 0x19
   19eba:	12 8e       	std	Z+26, r1	; 0x1a
   19ebc:	13 8e       	std	Z+27, r1	; 0x1b
   19ebe:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
   19ec0:	08 95       	ret

00019ec2 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:83
    if (dots != 3) {
        // Too few dots (there must be 3 dots)
        return false;
    }
    _address.bytes[3] = acc;
    return true;
   19ec2:	8f 92       	push	r8
   19ec4:	9f 92       	push	r9
   19ec6:	af 92       	push	r10
   19ec8:	bf 92       	push	r11
   19eca:	cf 92       	push	r12
   19ecc:	df 92       	push	r13
   19ece:	ef 92       	push	r14
   19ed0:	ff 92       	push	r15
   19ed2:	0f 93       	push	r16
   19ed4:	1f 93       	push	r17
   19ed6:	cf 93       	push	r28
   19ed8:	df 93       	push	r29
   19eda:	7c 01       	movw	r14, r24
   19edc:	8b 01       	movw	r16, r22
   19ede:	4c 01       	movw	r8, r24
   19ee0:	82 e0       	ldi	r24, 0x02	; 2
   19ee2:	88 0e       	add	r8, r24
   19ee4:	91 1c       	adc	r9, r1
   19ee6:	57 01       	movw	r10, r14
   19ee8:	e5 e0       	ldi	r30, 0x05	; 5
   19eea:	ae 0e       	add	r10, r30
   19eec:	b1 1c       	adc	r11, r1
   19eee:	d0 e0       	ldi	r29, 0x00	; 0
   19ef0:	c0 e0       	ldi	r28, 0x00	; 0
   19ef2:	f4 01       	movw	r30, r8
   19ef4:	61 91       	ld	r22, Z+
   19ef6:	4f 01       	movw	r8, r30
   19ef8:	4a e0       	ldi	r20, 0x0A	; 10
   19efa:	50 e0       	ldi	r21, 0x00	; 0
   19efc:	c8 01       	movw	r24, r16
   19efe:	0e 94 6a d0 	call	0x1a0d4	; 0x1a0d4 <Print::print(unsigned char, int)>
   19f02:	6c 01       	movw	r12, r24
   19f04:	6e e2       	ldi	r22, 0x2E	; 46
   19f06:	c8 01       	movw	r24, r16
   19f08:	0e 94 0a d0 	call	0x1a014	; 0x1a014 <Print::print(char)>
   19f0c:	8c 0d       	add	r24, r12
   19f0e:	9d 1d       	adc	r25, r13
   19f10:	c8 0f       	add	r28, r24
   19f12:	d9 1f       	adc	r29, r25
   19f14:	8a 14       	cp	r8, r10
   19f16:	9b 04       	cpc	r9, r11
   19f18:	61 f7       	brne	.-40     	; 0x19ef2 <IPAddress::printTo(Print&) const+0x30>
   19f1a:	4a e0       	ldi	r20, 0x0A	; 10
   19f1c:	50 e0       	ldi	r21, 0x00	; 0
   19f1e:	f7 01       	movw	r30, r14
   19f20:	65 81       	ldd	r22, Z+5	; 0x05
   19f22:	c8 01       	movw	r24, r16
   19f24:	0e 94 6a d0 	call	0x1a0d4	; 0x1a0d4 <Print::print(unsigned char, int)>
   19f28:	8c 0f       	add	r24, r28
   19f2a:	9d 1f       	adc	r25, r29
   19f2c:	df 91       	pop	r29
   19f2e:	cf 91       	pop	r28
   19f30:	1f 91       	pop	r17
   19f32:	0f 91       	pop	r16
   19f34:	ff 90       	pop	r15
   19f36:	ef 90       	pop	r14
   19f38:	df 90       	pop	r13
   19f3a:	cf 90       	pop	r12
   19f3c:	bf 90       	pop	r11
   19f3e:	af 90       	pop	r10
   19f40:	9f 90       	pop	r9
   19f42:	8f 90       	pop	r8
   19f44:	08 95       	ret

00019f46 <IPAddress::IPAddress()>:
_ZN9IPAddressC2Ev():
   19f46:	2c ed       	ldi	r18, 0xDC	; 220
   19f48:	38 e0       	ldi	r19, 0x08	; 8
   19f4a:	fc 01       	movw	r30, r24
   19f4c:	31 83       	std	Z+1, r19	; 0x01
   19f4e:	20 83       	st	Z, r18
   19f50:	12 82       	std	Z+2, r1	; 0x02
   19f52:	13 82       	std	Z+3, r1	; 0x03
   19f54:	14 82       	std	Z+4, r1	; 0x04
   19f56:	15 82       	std	Z+5, r1	; 0x05
   19f58:	08 95       	ret

00019f5a <IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN9IPAddressC2Ehhhh():
   19f5a:	0f 93       	push	r16
   19f5c:	fc 01       	movw	r30, r24
   19f5e:	8c ed       	ldi	r24, 0xDC	; 220
   19f60:	98 e0       	ldi	r25, 0x08	; 8
   19f62:	91 83       	std	Z+1, r25	; 0x01
   19f64:	80 83       	st	Z, r24
   19f66:	62 83       	std	Z+2, r22	; 0x02
   19f68:	43 83       	std	Z+3, r20	; 0x03
   19f6a:	24 83       	std	Z+4, r18	; 0x04
   19f6c:	05 83       	std	Z+5, r16	; 0x05
   19f6e:	0f 91       	pop	r16
   19f70:	08 95       	ret

00019f72 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
   19f72:	dc 01       	movw	r26, r24
   19f74:	8c ed       	ldi	r24, 0xDC	; 220
   19f76:	98 e0       	ldi	r25, 0x08	; 8
   19f78:	8d 93       	st	X+, r24
   19f7a:	9d 93       	st	X+, r25
   19f7c:	84 e0       	ldi	r24, 0x04	; 4
   19f7e:	fb 01       	movw	r30, r22
   19f80:	01 90       	ld	r0, Z+
   19f82:	0d 92       	st	X+, r0
   19f84:	8a 95       	dec	r24
   19f86:	e1 f7       	brne	.-8      	; 0x19f80 <IPAddress::IPAddress(unsigned char const*)+0xe>
   19f88:	08 95       	ret

00019f8a <IPAddress::operator=(unsigned char const*)>:
_ZN9IPAddressaSEPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   19f8a:	dc 01       	movw	r26, r24
   19f8c:	12 96       	adiw	r26, 0x02	; 2
   19f8e:	24 e0       	ldi	r18, 0x04	; 4
   19f90:	fb 01       	movw	r30, r22
   19f92:	01 90       	ld	r0, Z+
   19f94:	0d 92       	st	X+, r0
   19f96:	2a 95       	dec	r18
   19f98:	e1 f7       	brne	.-8      	; 0x19f92 <IPAddress::operator=(unsigned char const*)+0x8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:90
    return *this;
}
   19f9a:	08 95       	ret

00019f9c <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
   19f9c:	af 92       	push	r10
   19f9e:	bf 92       	push	r11
   19fa0:	cf 92       	push	r12
   19fa2:	df 92       	push	r13
   19fa4:	ef 92       	push	r14
   19fa6:	ff 92       	push	r15
   19fa8:	0f 93       	push	r16
   19faa:	1f 93       	push	r17
   19fac:	cf 93       	push	r28
   19fae:	df 93       	push	r29
   19fb0:	6c 01       	movw	r12, r24
   19fb2:	7b 01       	movw	r14, r22
   19fb4:	8b 01       	movw	r16, r22
   19fb6:	04 0f       	add	r16, r20
   19fb8:	15 1f       	adc	r17, r21
   19fba:	eb 01       	movw	r28, r22
   19fbc:	5e 01       	movw	r10, r28
   19fbe:	ae 18       	sub	r10, r14
   19fc0:	bf 08       	sbc	r11, r15
   19fc2:	c0 17       	cp	r28, r16
   19fc4:	d1 07       	cpc	r29, r17
   19fc6:	59 f0       	breq	.+22     	; 0x19fde <Print::write(unsigned char const*, unsigned int)+0x42>
   19fc8:	69 91       	ld	r22, Y+
   19fca:	d6 01       	movw	r26, r12
   19fcc:	ed 91       	ld	r30, X+
   19fce:	fc 91       	ld	r31, X
   19fd0:	01 90       	ld	r0, Z+
   19fd2:	f0 81       	ld	r31, Z
   19fd4:	e0 2d       	mov	r30, r0
   19fd6:	c6 01       	movw	r24, r12
   19fd8:	19 95       	eicall
   19fda:	89 2b       	or	r24, r25
   19fdc:	79 f7       	brne	.-34     	; 0x19fbc <Print::write(unsigned char const*, unsigned int)+0x20>
   19fde:	c5 01       	movw	r24, r10
   19fe0:	df 91       	pop	r29
   19fe2:	cf 91       	pop	r28
   19fe4:	1f 91       	pop	r17
   19fe6:	0f 91       	pop	r16
   19fe8:	ff 90       	pop	r15
   19fea:	ef 90       	pop	r14
   19fec:	df 90       	pop	r13
   19fee:	cf 90       	pop	r12
   19ff0:	bf 90       	pop	r11
   19ff2:	af 90       	pop	r10
   19ff4:	08 95       	ret

00019ff6 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
   19ff6:	fb 01       	movw	r30, r22
   19ff8:	01 90       	ld	r0, Z+
   19ffa:	00 20       	and	r0, r0
   19ffc:	e9 f7       	brne	.-6      	; 0x19ff8 <Print::write(char const*) [clone .part.2]+0x2>
   19ffe:	31 97       	sbiw	r30, 0x01	; 1
   1a000:	af 01       	movw	r20, r30
   1a002:	46 1b       	sub	r20, r22
   1a004:	57 0b       	sbc	r21, r23
   1a006:	dc 01       	movw	r26, r24
   1a008:	ed 91       	ld	r30, X+
   1a00a:	fc 91       	ld	r31, X
   1a00c:	02 80       	ldd	r0, Z+2	; 0x02
   1a00e:	f3 81       	ldd	r31, Z+3	; 0x03
   1a010:	e0 2d       	mov	r30, r0
   1a012:	19 94       	eijmp

0001a014 <Print::print(char)>:
_ZN5Print5printEc():
   1a014:	dc 01       	movw	r26, r24
   1a016:	ed 91       	ld	r30, X+
   1a018:	fc 91       	ld	r31, X
   1a01a:	01 90       	ld	r0, Z+
   1a01c:	f0 81       	ld	r31, Z
   1a01e:	e0 2d       	mov	r30, r0
   1a020:	19 94       	eijmp

0001a022 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
   1a022:	8f 92       	push	r8
   1a024:	9f 92       	push	r9
   1a026:	af 92       	push	r10
   1a028:	bf 92       	push	r11
   1a02a:	ef 92       	push	r14
   1a02c:	ff 92       	push	r15
   1a02e:	0f 93       	push	r16
   1a030:	1f 93       	push	r17
   1a032:	cf 93       	push	r28
   1a034:	df 93       	push	r29
   1a036:	cd b7       	in	r28, 0x3d	; 61
   1a038:	de b7       	in	r29, 0x3e	; 62
   1a03a:	a1 97       	sbiw	r28, 0x21	; 33
   1a03c:	0f b6       	in	r0, 0x3f	; 63
   1a03e:	f8 94       	cli
   1a040:	de bf       	out	0x3e, r29	; 62
   1a042:	0f be       	out	0x3f, r0	; 63
   1a044:	cd bf       	out	0x3d, r28	; 61
   1a046:	7c 01       	movw	r14, r24
   1a048:	fa 01       	movw	r30, r20
   1a04a:	cb 01       	movw	r24, r22
   1a04c:	19 a2       	std	Y+33, r1	; 0x21
   1a04e:	22 30       	cpi	r18, 0x02	; 2
   1a050:	08 f4       	brcc	.+2      	; 0x1a054 <Print::printNumber(unsigned long, unsigned char)+0x32>
   1a052:	2a e0       	ldi	r18, 0x0A	; 10
   1a054:	8e 01       	movw	r16, r28
   1a056:	0f 5d       	subi	r16, 0xDF	; 223
   1a058:	1f 4f       	sbci	r17, 0xFF	; 255
   1a05a:	82 2e       	mov	r8, r18
   1a05c:	91 2c       	mov	r9, r1
   1a05e:	b1 2c       	mov	r11, r1
   1a060:	a1 2c       	mov	r10, r1
   1a062:	bf 01       	movw	r22, r30
   1a064:	a5 01       	movw	r20, r10
   1a066:	94 01       	movw	r18, r8
   1a068:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1a06c:	f9 01       	movw	r30, r18
   1a06e:	ca 01       	movw	r24, r20
   1a070:	6a 30       	cpi	r22, 0x0A	; 10
   1a072:	0c f5       	brge	.+66     	; 0x1a0b6 <Print::printNumber(unsigned long, unsigned char)+0x94>
   1a074:	60 5d       	subi	r22, 0xD0	; 208
   1a076:	d8 01       	movw	r26, r16
   1a078:	6e 93       	st	-X, r22
   1a07a:	8d 01       	movw	r16, r26
   1a07c:	23 2b       	or	r18, r19
   1a07e:	24 2b       	or	r18, r20
   1a080:	25 2b       	or	r18, r21
   1a082:	79 f7       	brne	.-34     	; 0x1a062 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
   1a084:	90 e0       	ldi	r25, 0x00	; 0
   1a086:	80 e0       	ldi	r24, 0x00	; 0
   1a088:	10 97       	sbiw	r26, 0x00	; 0
   1a08a:	21 f0       	breq	.+8      	; 0x1a094 <Print::printNumber(unsigned long, unsigned char)+0x72>
   1a08c:	bd 01       	movw	r22, r26
   1a08e:	c7 01       	movw	r24, r14
   1a090:	0e 94 fb cf 	call	0x19ff6	; 0x19ff6 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
   1a094:	a1 96       	adiw	r28, 0x21	; 33
   1a096:	0f b6       	in	r0, 0x3f	; 63
   1a098:	f8 94       	cli
   1a09a:	de bf       	out	0x3e, r29	; 62
   1a09c:	0f be       	out	0x3f, r0	; 63
   1a09e:	cd bf       	out	0x3d, r28	; 61
   1a0a0:	df 91       	pop	r29
   1a0a2:	cf 91       	pop	r28
   1a0a4:	1f 91       	pop	r17
   1a0a6:	0f 91       	pop	r16
   1a0a8:	ff 90       	pop	r15
   1a0aa:	ef 90       	pop	r14
   1a0ac:	bf 90       	pop	r11
   1a0ae:	af 90       	pop	r10
   1a0b0:	9f 90       	pop	r9
   1a0b2:	8f 90       	pop	r8
   1a0b4:	08 95       	ret
   1a0b6:	69 5c       	subi	r22, 0xC9	; 201
   1a0b8:	de cf       	rjmp	.-68     	; 0x1a076 <Print::printNumber(unsigned long, unsigned char)+0x54>

0001a0ba <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   1a0ba:	21 15       	cp	r18, r1
   1a0bc:	31 05       	cpc	r19, r1
   1a0be:	41 f4       	brne	.+16     	; 0x1a0d0 <Print::print(unsigned long, int)+0x16>
   1a0c0:	dc 01       	movw	r26, r24
   1a0c2:	ed 91       	ld	r30, X+
   1a0c4:	fc 91       	ld	r31, X
   1a0c6:	01 90       	ld	r0, Z+
   1a0c8:	f0 81       	ld	r31, Z
   1a0ca:	e0 2d       	mov	r30, r0
   1a0cc:	64 2f       	mov	r22, r20
   1a0ce:	19 94       	eijmp
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
   1a0d0:	0c 94 11 d0 	jmp	0x1a022	; 0x1a022 <Print::printNumber(unsigned long, unsigned char)>

0001a0d4 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
   1a0d4:	9a 01       	movw	r18, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
   1a0d6:	46 2f       	mov	r20, r22
   1a0d8:	50 e0       	ldi	r21, 0x00	; 0
   1a0da:	70 e0       	ldi	r23, 0x00	; 0
   1a0dc:	60 e0       	ldi	r22, 0x00	; 0
   1a0de:	0c 94 5d d0 	jmp	0x1a0ba	; 0x1a0ba <Print::print(unsigned long, int)>

0001a0e2 <makeWord(unsigned char, unsigned char)>:
_Z8makeWordhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WMath.cpp:58
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }
   1a0e2:	98 2f       	mov	r25, r24
   1a0e4:	86 2f       	mov	r24, r22
   1a0e6:	08 95       	ret

0001a0e8 <String::~String()>:
_ZN6StringD2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   1a0e8:	fc 01       	movw	r30, r24
   1a0ea:	80 81       	ld	r24, Z
   1a0ec:	91 81       	ldd	r25, Z+1	; 0x01
   1a0ee:	0c 94 ad d4 	jmp	0x1a95a	; 0x1a95a <free>

0001a0f2 <String::invalidate()>:
_ZN6String10invalidateEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:139
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
   1a0f2:	cf 93       	push	r28
   1a0f4:	df 93       	push	r29
   1a0f6:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  if (buffer) free(buffer);
   1a0f8:	88 81       	ld	r24, Y
   1a0fa:	99 81       	ldd	r25, Y+1	; 0x01
   1a0fc:	00 97       	sbiw	r24, 0x00	; 0
   1a0fe:	11 f0       	breq	.+4      	; 0x1a104 <String::invalidate()+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140 (discriminator 1)
   1a100:	0e 94 ad d4 	call	0x1a95a	; 0x1a95a <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   1a104:	19 82       	std	Y+1, r1	; 0x01
   1a106:	18 82       	st	Y, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1a108:	1d 82       	std	Y+5, r1	; 0x05
   1a10a:	1c 82       	std	Y+4, r1	; 0x04
   1a10c:	1b 82       	std	Y+3, r1	; 0x03
   1a10e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:143
}
   1a110:	df 91       	pop	r29
   1a112:	cf 91       	pop	r28
   1a114:	08 95       	ret

0001a116 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:156
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   1a116:	0f 93       	push	r16
   1a118:	1f 93       	push	r17
   1a11a:	cf 93       	push	r28
   1a11c:	df 93       	push	r29
   1a11e:	ec 01       	movw	r28, r24
   1a120:	8b 01       	movw	r16, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1a122:	6f 5f       	subi	r22, 0xFF	; 255
   1a124:	7f 4f       	sbci	r23, 0xFF	; 255
   1a126:	88 81       	ld	r24, Y
   1a128:	99 81       	ldd	r25, Y+1	; 0x01
   1a12a:	0e 94 36 d5 	call	0x1aa6c	; 0x1aa6c <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   1a12e:	00 97       	sbiw	r24, 0x00	; 0
   1a130:	51 f0       	breq	.+20     	; 0x1a146 <String::changeBuffer(unsigned int)+0x30>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1a132:	99 83       	std	Y+1, r25	; 0x01
   1a134:	88 83       	st	Y, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1a136:	1b 83       	std	Y+3, r17	; 0x03
   1a138:	0a 83       	std	Y+2, r16	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:161
    return 1;
   1a13a:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:164
  }
  return 0;
}
   1a13c:	df 91       	pop	r29
   1a13e:	cf 91       	pop	r28
   1a140:	1f 91       	pop	r17
   1a142:	0f 91       	pop	r16
   1a144:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:163
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
   1a146:	80 e0       	ldi	r24, 0x00	; 0
   1a148:	f9 cf       	rjmp	.-14     	; 0x1a13c <String::changeBuffer(unsigned int)+0x26>

0001a14a <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:146
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   1a14a:	cf 93       	push	r28
   1a14c:	df 93       	push	r29
   1a14e:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147
  if (buffer && capacity >= size) return 1;
   1a150:	88 81       	ld	r24, Y
   1a152:	99 81       	ldd	r25, Y+1	; 0x01
   1a154:	89 2b       	or	r24, r25
   1a156:	49 f0       	breq	.+18     	; 0x1a16a <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:147 (discriminator 1)
   1a158:	8a 81       	ldd	r24, Y+2	; 0x02
   1a15a:	9b 81       	ldd	r25, Y+3	; 0x03
   1a15c:	86 17       	cp	r24, r22
   1a15e:	97 07       	cpc	r25, r23
   1a160:	20 f0       	brcs	.+8      	; 0x1a16a <String::reserve(unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   1a162:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:153
    return 1;
  }
  return 0;
}
   1a164:	df 91       	pop	r29
   1a166:	cf 91       	pop	r28
   1a168:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:148
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
   1a16a:	ce 01       	movw	r24, r28
   1a16c:	0e 94 8b d0 	call	0x1a116	; 0x1a116 <String::changeBuffer(unsigned int)>
   1a170:	88 23       	and	r24, r24
   1a172:	c1 f3       	breq	.-16     	; 0x1a164 <String::reserve(unsigned int)+0x1a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149
    if (len == 0) buffer[0] = 0;
   1a174:	8c 81       	ldd	r24, Y+4	; 0x04
   1a176:	9d 81       	ldd	r25, Y+5	; 0x05
   1a178:	89 2b       	or	r24, r25
   1a17a:	99 f7       	brne	.-26     	; 0x1a162 <String::reserve(unsigned int)+0x18>
   1a17c:	e8 81       	ld	r30, Y
   1a17e:	f9 81       	ldd	r31, Y+1	; 0x01
   1a180:	10 82       	st	Z, r1
   1a182:	ef cf       	rjmp	.-34     	; 0x1a162 <String::reserve(unsigned int)+0x18>

0001a184 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   1a184:	ef 92       	push	r14
   1a186:	ff 92       	push	r15
   1a188:	0f 93       	push	r16
   1a18a:	1f 93       	push	r17
   1a18c:	cf 93       	push	r28
   1a18e:	df 93       	push	r29
   1a190:	ec 01       	movw	r28, r24
   1a192:	7b 01       	movw	r14, r22
   1a194:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:172
  if (!reserve(length)) {
   1a196:	ba 01       	movw	r22, r20
   1a198:	0e 94 a5 d0 	call	0x1a14a	; 0x1a14a <String::reserve(unsigned int)>
   1a19c:	81 11       	cpse	r24, r1
   1a19e:	0b c0       	rjmp	.+22     	; 0x1a1b6 <String::copy(char const*, unsigned int)+0x32>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:173
    invalidate();
   1a1a0:	ce 01       	movw	r24, r28
   1a1a2:	0e 94 79 d0 	call	0x1a0f2	; 0x1a0f2 <String::invalidate()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:179
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
   1a1a6:	ce 01       	movw	r24, r28
   1a1a8:	df 91       	pop	r29
   1a1aa:	cf 91       	pop	r28
   1a1ac:	1f 91       	pop	r17
   1a1ae:	0f 91       	pop	r16
   1a1b0:	ff 90       	pop	r15
   1a1b2:	ef 90       	pop	r14
   1a1b4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1a1b6:	1d 83       	std	Y+5, r17	; 0x05
   1a1b8:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   1a1ba:	b7 01       	movw	r22, r14
   1a1bc:	88 81       	ld	r24, Y
   1a1be:	99 81       	ldd	r25, Y+1	; 0x01
   1a1c0:	0e 94 88 d7 	call	0x1af10	; 0x1af10 <strcpy>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:178
  return *this;
   1a1c4:	f0 cf       	rjmp	.-32     	; 0x1a1a6 <String::copy(char const*, unsigned int)+0x22>

0001a1c6 <String::String(char const*)>:
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1a1c6:	fc 01       	movw	r30, r24
   1a1c8:	11 82       	std	Z+1, r1	; 0x01
   1a1ca:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1a1cc:	13 82       	std	Z+3, r1	; 0x03
   1a1ce:	12 82       	std	Z+2, r1	; 0x02
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   1a1d0:	15 82       	std	Z+5, r1	; 0x05
   1a1d2:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1a1d4:	61 15       	cp	r22, r1
   1a1d6:	71 05       	cpc	r23, r1
   1a1d8:	51 f0       	breq	.+20     	; 0x1a1ee <String::String(char const*)+0x28>
   1a1da:	fb 01       	movw	r30, r22
   1a1dc:	01 90       	ld	r0, Z+
   1a1de:	00 20       	and	r0, r0
   1a1e0:	e9 f7       	brne	.-6      	; 0x1a1dc <String::String(char const*)+0x16>
   1a1e2:	31 97       	sbiw	r30, 0x01	; 1
   1a1e4:	af 01       	movw	r20, r30
   1a1e6:	46 1b       	sub	r20, r22
   1a1e8:	57 0b       	sbc	r21, r23
   1a1ea:	0c 94 c2 d0 	jmp	0x1a184	; 0x1a184 <String::copy(char const*, unsigned int)>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:32
}
   1a1ee:	08 95       	ret

0001a1f0 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   1a1f0:	0e 94 1a d7 	call	0x1ae34	; 0x1ae34 <abort>

0001a1f4 <initVariant>:
initVariant():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
   1a1f4:	08 95       	ret

0001a1f6 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
   1a1f6:	0e 94 aa cc 	call	0x19954	; 0x19954 <init>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
   1a1fa:	0e 94 fa d0 	call	0x1a1f4	; 0x1a1f4 <initVariant>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1a1fe:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <setup>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1a202:	c7 e2       	ldi	r28, 0x27	; 39
   1a204:	de ec       	ldi	r29, 0xCE	; 206
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
   1a206:	0e 94 9f 6d 	call	0xdb3e	; 0xdb3e <loop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
   1a20a:	20 97       	sbiw	r28, 0x00	; 0
   1a20c:	e1 f3       	breq	.-8      	; 0x1a206 <main+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
   1a20e:	0e 94 27 ce 	call	0x19c4e	; 0x19c4e <serialEventRun()>
   1a212:	f9 cf       	rjmp	.-14     	; 0x1a206 <main+0x10>

0001a214 <operator new(unsigned int)>:
_Znwj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1a214:	0c 94 11 d4 	jmp	0x1a822	; 0x1a822 <malloc>

0001a218 <operator new[](unsigned int)>:
_Znaj():
   1a218:	0c 94 11 d4 	jmp	0x1a822	; 0x1a822 <malloc>

0001a21c <__subsf3>:
__subsf3():
   1a21c:	50 58       	subi	r21, 0x80	; 128

0001a21e <__addsf3>:
   1a21e:	bb 27       	eor	r27, r27
   1a220:	aa 27       	eor	r26, r26
   1a222:	0e 94 26 d1 	call	0x1a24c	; 0x1a24c <__addsf3x>
   1a226:	0c 94 a0 d2 	jmp	0x1a540	; 0x1a540 <__fp_round>
__addsf3():
   1a22a:	0e 94 92 d2 	call	0x1a524	; 0x1a524 <__fp_pscA>
   1a22e:	38 f0       	brcs	.+14     	; 0x1a23e <__addsf3+0x20>
   1a230:	0e 94 99 d2 	call	0x1a532	; 0x1a532 <__fp_pscB>
   1a234:	20 f0       	brcs	.+8      	; 0x1a23e <__addsf3+0x20>
   1a236:	39 f4       	brne	.+14     	; 0x1a246 <__addsf3+0x28>
   1a238:	9f 3f       	cpi	r25, 0xFF	; 255
   1a23a:	19 f4       	brne	.+6      	; 0x1a242 <__addsf3+0x24>
   1a23c:	26 f4       	brtc	.+8      	; 0x1a246 <__addsf3+0x28>
   1a23e:	0c 94 8f d2 	jmp	0x1a51e	; 0x1a51e <__fp_nan>
   1a242:	0e f4       	brtc	.+2      	; 0x1a246 <__addsf3+0x28>
   1a244:	e0 95       	com	r30
   1a246:	e7 fb       	bst	r30, 7
   1a248:	0c 94 89 d2 	jmp	0x1a512	; 0x1a512 <__fp_inf>

0001a24c <__addsf3x>:
__addsf3x():
   1a24c:	e9 2f       	mov	r30, r25
   1a24e:	0e 94 b1 d2 	call	0x1a562	; 0x1a562 <__fp_split3>
   1a252:	58 f3       	brcs	.-42     	; 0x1a22a <__addsf3+0xc>
   1a254:	ba 17       	cp	r27, r26
   1a256:	62 07       	cpc	r22, r18
   1a258:	73 07       	cpc	r23, r19
   1a25a:	84 07       	cpc	r24, r20
   1a25c:	95 07       	cpc	r25, r21
   1a25e:	20 f0       	brcs	.+8      	; 0x1a268 <__addsf3x+0x1c>
   1a260:	79 f4       	brne	.+30     	; 0x1a280 <__addsf3x+0x34>
   1a262:	a6 f5       	brtc	.+104    	; 0x1a2cc <__addsf3x+0x80>
   1a264:	0c 94 d3 d2 	jmp	0x1a5a6	; 0x1a5a6 <__fp_zero>
   1a268:	0e f4       	brtc	.+2      	; 0x1a26c <__addsf3x+0x20>
   1a26a:	e0 95       	com	r30
   1a26c:	0b 2e       	mov	r0, r27
   1a26e:	ba 2f       	mov	r27, r26
   1a270:	a0 2d       	mov	r26, r0
   1a272:	0b 01       	movw	r0, r22
   1a274:	b9 01       	movw	r22, r18
   1a276:	90 01       	movw	r18, r0
   1a278:	0c 01       	movw	r0, r24
   1a27a:	ca 01       	movw	r24, r20
   1a27c:	a0 01       	movw	r20, r0
   1a27e:	11 24       	eor	r1, r1
   1a280:	ff 27       	eor	r31, r31
   1a282:	59 1b       	sub	r21, r25
   1a284:	99 f0       	breq	.+38     	; 0x1a2ac <__addsf3x+0x60>
   1a286:	59 3f       	cpi	r21, 0xF9	; 249
   1a288:	50 f4       	brcc	.+20     	; 0x1a29e <__addsf3x+0x52>
   1a28a:	50 3e       	cpi	r21, 0xE0	; 224
   1a28c:	68 f1       	brcs	.+90     	; 0x1a2e8 <__addsf3x+0x9c>
   1a28e:	1a 16       	cp	r1, r26
   1a290:	f0 40       	sbci	r31, 0x00	; 0
   1a292:	a2 2f       	mov	r26, r18
   1a294:	23 2f       	mov	r18, r19
   1a296:	34 2f       	mov	r19, r20
   1a298:	44 27       	eor	r20, r20
   1a29a:	58 5f       	subi	r21, 0xF8	; 248
   1a29c:	f3 cf       	rjmp	.-26     	; 0x1a284 <__addsf3x+0x38>
   1a29e:	46 95       	lsr	r20
   1a2a0:	37 95       	ror	r19
   1a2a2:	27 95       	ror	r18
   1a2a4:	a7 95       	ror	r26
   1a2a6:	f0 40       	sbci	r31, 0x00	; 0
   1a2a8:	53 95       	inc	r21
   1a2aa:	c9 f7       	brne	.-14     	; 0x1a29e <__addsf3x+0x52>
   1a2ac:	7e f4       	brtc	.+30     	; 0x1a2cc <__addsf3x+0x80>
   1a2ae:	1f 16       	cp	r1, r31
   1a2b0:	ba 0b       	sbc	r27, r26
   1a2b2:	62 0b       	sbc	r22, r18
   1a2b4:	73 0b       	sbc	r23, r19
   1a2b6:	84 0b       	sbc	r24, r20
   1a2b8:	ba f0       	brmi	.+46     	; 0x1a2e8 <__addsf3x+0x9c>
   1a2ba:	91 50       	subi	r25, 0x01	; 1
   1a2bc:	a1 f0       	breq	.+40     	; 0x1a2e6 <__addsf3x+0x9a>
   1a2be:	ff 0f       	add	r31, r31
   1a2c0:	bb 1f       	adc	r27, r27
   1a2c2:	66 1f       	adc	r22, r22
   1a2c4:	77 1f       	adc	r23, r23
   1a2c6:	88 1f       	adc	r24, r24
   1a2c8:	c2 f7       	brpl	.-16     	; 0x1a2ba <__addsf3x+0x6e>
   1a2ca:	0e c0       	rjmp	.+28     	; 0x1a2e8 <__addsf3x+0x9c>
   1a2cc:	ba 0f       	add	r27, r26
   1a2ce:	62 1f       	adc	r22, r18
   1a2d0:	73 1f       	adc	r23, r19
   1a2d2:	84 1f       	adc	r24, r20
   1a2d4:	48 f4       	brcc	.+18     	; 0x1a2e8 <__addsf3x+0x9c>
   1a2d6:	87 95       	ror	r24
   1a2d8:	77 95       	ror	r23
   1a2da:	67 95       	ror	r22
   1a2dc:	b7 95       	ror	r27
   1a2de:	f7 95       	ror	r31
   1a2e0:	9e 3f       	cpi	r25, 0xFE	; 254
   1a2e2:	08 f0       	brcs	.+2      	; 0x1a2e6 <__addsf3x+0x9a>
   1a2e4:	b0 cf       	rjmp	.-160    	; 0x1a246 <__addsf3+0x28>
   1a2e6:	93 95       	inc	r25
   1a2e8:	88 0f       	add	r24, r24
   1a2ea:	08 f0       	brcs	.+2      	; 0x1a2ee <__addsf3x+0xa2>
   1a2ec:	99 27       	eor	r25, r25
   1a2ee:	ee 0f       	add	r30, r30
   1a2f0:	97 95       	ror	r25
   1a2f2:	87 95       	ror	r24
   1a2f4:	08 95       	ret

0001a2f6 <__cmpsf2>:
   1a2f6:	0e 94 65 d2 	call	0x1a4ca	; 0x1a4ca <__fp_cmp>
   1a2fa:	08 f4       	brcc	.+2      	; 0x1a2fe <__cmpsf2+0x8>
   1a2fc:	81 e0       	ldi	r24, 0x01	; 1
   1a2fe:	08 95       	ret

0001a300 <__divsf3>:
   1a300:	0e 94 94 d1 	call	0x1a328	; 0x1a328 <__divsf3x>
   1a304:	0c 94 a0 d2 	jmp	0x1a540	; 0x1a540 <__fp_round>
   1a308:	0e 94 99 d2 	call	0x1a532	; 0x1a532 <__fp_pscB>
   1a30c:	58 f0       	brcs	.+22     	; 0x1a324 <__divsf3+0x24>
   1a30e:	0e 94 92 d2 	call	0x1a524	; 0x1a524 <__fp_pscA>
   1a312:	40 f0       	brcs	.+16     	; 0x1a324 <__divsf3+0x24>
   1a314:	29 f4       	brne	.+10     	; 0x1a320 <__divsf3+0x20>
   1a316:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
   1a318:	29 f0       	breq	.+10     	; 0x1a324 <__divsf3+0x24>
   1a31a:	0c 94 89 d2 	jmp	0x1a512	; 0x1a512 <__fp_inf>
   1a31e:	51 11       	cpse	r21, r1
   1a320:	0c 94 d4 d2 	jmp	0x1a5a8	; 0x1a5a8 <__fp_szero>
   1a324:	0c 94 8f d2 	jmp	0x1a51e	; 0x1a51e <__fp_nan>

0001a328 <__divsf3x>:
__divsf3x():
   1a328:	0e 94 b1 d2 	call	0x1a562	; 0x1a562 <__fp_split3>
   1a32c:	68 f3       	brcs	.-38     	; 0x1a308 <__divsf3+0x8>

0001a32e <__divsf3_pse>:
   1a32e:	99 23       	and	r25, r25
   1a330:	b1 f3       	breq	.-20     	; 0x1a31e <__divsf3+0x1e>
   1a332:	55 23       	and	r21, r21
   1a334:	91 f3       	breq	.-28     	; 0x1a31a <__divsf3+0x1a>
   1a336:	95 1b       	sub	r25, r21
   1a338:	55 0b       	sbc	r21, r21
   1a33a:	bb 27       	eor	r27, r27
   1a33c:	aa 27       	eor	r26, r26
   1a33e:	62 17       	cp	r22, r18
   1a340:	73 07       	cpc	r23, r19
   1a342:	84 07       	cpc	r24, r20
   1a344:	38 f0       	brcs	.+14     	; 0x1a354 <__divsf3_pse+0x26>
   1a346:	9f 5f       	subi	r25, 0xFF	; 255
   1a348:	5f 4f       	sbci	r21, 0xFF	; 255
   1a34a:	22 0f       	add	r18, r18
   1a34c:	33 1f       	adc	r19, r19
   1a34e:	44 1f       	adc	r20, r20
   1a350:	aa 1f       	adc	r26, r26
   1a352:	a9 f3       	breq	.-22     	; 0x1a33e <__divsf3_pse+0x10>
   1a354:	35 d0       	rcall	.+106    	; 0x1a3c0 <__divsf3_pse+0x92>
   1a356:	0e 2e       	mov	r0, r30
   1a358:	3a f0       	brmi	.+14     	; 0x1a368 <__divsf3_pse+0x3a>
   1a35a:	e0 e8       	ldi	r30, 0x80	; 128
   1a35c:	32 d0       	rcall	.+100    	; 0x1a3c2 <__divsf3_pse+0x94>
   1a35e:	91 50       	subi	r25, 0x01	; 1
   1a360:	50 40       	sbci	r21, 0x00	; 0
   1a362:	e6 95       	lsr	r30
   1a364:	00 1c       	adc	r0, r0
   1a366:	ca f7       	brpl	.-14     	; 0x1a35a <__divsf3_pse+0x2c>
   1a368:	2b d0       	rcall	.+86     	; 0x1a3c0 <__divsf3_pse+0x92>
   1a36a:	fe 2f       	mov	r31, r30
   1a36c:	29 d0       	rcall	.+82     	; 0x1a3c0 <__divsf3_pse+0x92>
   1a36e:	66 0f       	add	r22, r22
   1a370:	77 1f       	adc	r23, r23
   1a372:	88 1f       	adc	r24, r24
   1a374:	bb 1f       	adc	r27, r27
   1a376:	26 17       	cp	r18, r22
   1a378:	37 07       	cpc	r19, r23
   1a37a:	48 07       	cpc	r20, r24
   1a37c:	ab 07       	cpc	r26, r27
   1a37e:	b0 e8       	ldi	r27, 0x80	; 128
   1a380:	09 f0       	breq	.+2      	; 0x1a384 <__divsf3_pse+0x56>
   1a382:	bb 0b       	sbc	r27, r27
   1a384:	80 2d       	mov	r24, r0
   1a386:	bf 01       	movw	r22, r30
   1a388:	ff 27       	eor	r31, r31
   1a38a:	93 58       	subi	r25, 0x83	; 131
   1a38c:	5f 4f       	sbci	r21, 0xFF	; 255
   1a38e:	3a f0       	brmi	.+14     	; 0x1a39e <__divsf3_pse+0x70>
   1a390:	9e 3f       	cpi	r25, 0xFE	; 254
   1a392:	51 05       	cpc	r21, r1
   1a394:	78 f0       	brcs	.+30     	; 0x1a3b4 <__divsf3_pse+0x86>
   1a396:	0c 94 89 d2 	jmp	0x1a512	; 0x1a512 <__fp_inf>
   1a39a:	0c 94 d4 d2 	jmp	0x1a5a8	; 0x1a5a8 <__fp_szero>
   1a39e:	5f 3f       	cpi	r21, 0xFF	; 255
   1a3a0:	e4 f3       	brlt	.-8      	; 0x1a39a <__divsf3_pse+0x6c>
   1a3a2:	98 3e       	cpi	r25, 0xE8	; 232
   1a3a4:	d4 f3       	brlt	.-12     	; 0x1a39a <__divsf3_pse+0x6c>
   1a3a6:	86 95       	lsr	r24
   1a3a8:	77 95       	ror	r23
   1a3aa:	67 95       	ror	r22
   1a3ac:	b7 95       	ror	r27
   1a3ae:	f7 95       	ror	r31
   1a3b0:	9f 5f       	subi	r25, 0xFF	; 255
   1a3b2:	c9 f7       	brne	.-14     	; 0x1a3a6 <__divsf3_pse+0x78>
   1a3b4:	88 0f       	add	r24, r24
   1a3b6:	91 1d       	adc	r25, r1
   1a3b8:	96 95       	lsr	r25
   1a3ba:	87 95       	ror	r24
   1a3bc:	97 f9       	bld	r25, 7
   1a3be:	08 95       	ret
   1a3c0:	e1 e0       	ldi	r30, 0x01	; 1
   1a3c2:	66 0f       	add	r22, r22
   1a3c4:	77 1f       	adc	r23, r23
   1a3c6:	88 1f       	adc	r24, r24
   1a3c8:	bb 1f       	adc	r27, r27
   1a3ca:	62 17       	cp	r22, r18
   1a3cc:	73 07       	cpc	r23, r19
   1a3ce:	84 07       	cpc	r24, r20
   1a3d0:	ba 07       	cpc	r27, r26
   1a3d2:	20 f0       	brcs	.+8      	; 0x1a3dc <__divsf3_pse+0xae>
   1a3d4:	62 1b       	sub	r22, r18
   1a3d6:	73 0b       	sbc	r23, r19
   1a3d8:	84 0b       	sbc	r24, r20
   1a3da:	ba 0b       	sbc	r27, r26
   1a3dc:	ee 1f       	adc	r30, r30
   1a3de:	88 f7       	brcc	.-30     	; 0x1a3c2 <__divsf3_pse+0x94>
   1a3e0:	e0 95       	com	r30
   1a3e2:	08 95       	ret

0001a3e4 <__fixsfsi>:
   1a3e4:	0e 94 f9 d1 	call	0x1a3f2	; 0x1a3f2 <__fixunssfsi>
   1a3e8:	68 94       	set
   1a3ea:	b1 11       	cpse	r27, r1
   1a3ec:	0c 94 d4 d2 	jmp	0x1a5a8	; 0x1a5a8 <__fp_szero>
   1a3f0:	08 95       	ret

0001a3f2 <__fixunssfsi>:
   1a3f2:	0e 94 b9 d2 	call	0x1a572	; 0x1a572 <__fp_splitA>
   1a3f6:	88 f0       	brcs	.+34     	; 0x1a41a <__fixunssfsi+0x28>
   1a3f8:	9f 57       	subi	r25, 0x7F	; 127
   1a3fa:	98 f0       	brcs	.+38     	; 0x1a422 <__fixunssfsi+0x30>
   1a3fc:	b9 2f       	mov	r27, r25
   1a3fe:	99 27       	eor	r25, r25
   1a400:	b7 51       	subi	r27, 0x17	; 23
   1a402:	b0 f0       	brcs	.+44     	; 0x1a430 <__fixunssfsi+0x3e>
__fixunssfsi():
   1a404:	e1 f0       	breq	.+56     	; 0x1a43e <__fixunssfsi+0x4c>
   1a406:	66 0f       	add	r22, r22
   1a408:	77 1f       	adc	r23, r23
   1a40a:	88 1f       	adc	r24, r24
   1a40c:	99 1f       	adc	r25, r25
   1a40e:	1a f0       	brmi	.+6      	; 0x1a416 <__fixunssfsi+0x24>
   1a410:	ba 95       	dec	r27
   1a412:	c9 f7       	brne	.-14     	; 0x1a406 <__fixunssfsi+0x14>
   1a414:	14 c0       	rjmp	.+40     	; 0x1a43e <__fixunssfsi+0x4c>
   1a416:	b1 30       	cpi	r27, 0x01	; 1
   1a418:	91 f0       	breq	.+36     	; 0x1a43e <__fixunssfsi+0x4c>
   1a41a:	0e 94 d3 d2 	call	0x1a5a6	; 0x1a5a6 <__fp_zero>
   1a41e:	b1 e0       	ldi	r27, 0x01	; 1
   1a420:	08 95       	ret
   1a422:	0c 94 d3 d2 	jmp	0x1a5a6	; 0x1a5a6 <__fp_zero>
   1a426:	67 2f       	mov	r22, r23
   1a428:	78 2f       	mov	r23, r24
   1a42a:	88 27       	eor	r24, r24
   1a42c:	b8 5f       	subi	r27, 0xF8	; 248
   1a42e:	39 f0       	breq	.+14     	; 0x1a43e <__fixunssfsi+0x4c>
   1a430:	b9 3f       	cpi	r27, 0xF9	; 249
   1a432:	cc f3       	brlt	.-14     	; 0x1a426 <__fixunssfsi+0x34>
   1a434:	86 95       	lsr	r24
   1a436:	77 95       	ror	r23
   1a438:	67 95       	ror	r22
   1a43a:	b3 95       	inc	r27
   1a43c:	d9 f7       	brne	.-10     	; 0x1a434 <__fixunssfsi+0x42>
   1a43e:	3e f4       	brtc	.+14     	; 0x1a44e <__fixunssfsi+0x5c>
   1a440:	90 95       	com	r25
   1a442:	80 95       	com	r24
   1a444:	70 95       	com	r23
   1a446:	61 95       	neg	r22
   1a448:	7f 4f       	sbci	r23, 0xFF	; 255
   1a44a:	8f 4f       	sbci	r24, 0xFF	; 255
   1a44c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a44e:	08 95       	ret

0001a450 <__floatunsisf>:
__floatunsisf():
   1a450:	e8 94       	clt
   1a452:	09 c0       	rjmp	.+18     	; 0x1a466 <__floatsisf+0x12>

0001a454 <__floatsisf>:
   1a454:	97 fb       	bst	r25, 7
   1a456:	3e f4       	brtc	.+14     	; 0x1a466 <__floatsisf+0x12>
   1a458:	90 95       	com	r25
   1a45a:	80 95       	com	r24
   1a45c:	70 95       	com	r23
   1a45e:	61 95       	neg	r22
   1a460:	7f 4f       	sbci	r23, 0xFF	; 255
   1a462:	8f 4f       	sbci	r24, 0xFF	; 255
   1a464:	9f 4f       	sbci	r25, 0xFF	; 255
   1a466:	99 23       	and	r25, r25
   1a468:	a9 f0       	breq	.+42     	; 0x1a494 <__floatsisf+0x40>
   1a46a:	f9 2f       	mov	r31, r25
   1a46c:	96 e9       	ldi	r25, 0x96	; 150
   1a46e:	bb 27       	eor	r27, r27
   1a470:	93 95       	inc	r25
   1a472:	f6 95       	lsr	r31
   1a474:	87 95       	ror	r24
   1a476:	77 95       	ror	r23
   1a478:	67 95       	ror	r22
   1a47a:	b7 95       	ror	r27
   1a47c:	f1 11       	cpse	r31, r1
   1a47e:	f8 cf       	rjmp	.-16     	; 0x1a470 <__floatsisf+0x1c>
   1a480:	fa f4       	brpl	.+62     	; 0x1a4c0 <__floatsisf+0x6c>
   1a482:	bb 0f       	add	r27, r27
   1a484:	11 f4       	brne	.+4      	; 0x1a48a <__floatsisf+0x36>
   1a486:	60 ff       	sbrs	r22, 0
   1a488:	1b c0       	rjmp	.+54     	; 0x1a4c0 <__floatsisf+0x6c>
   1a48a:	6f 5f       	subi	r22, 0xFF	; 255
   1a48c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a48e:	8f 4f       	sbci	r24, 0xFF	; 255
   1a490:	9f 4f       	sbci	r25, 0xFF	; 255
   1a492:	16 c0       	rjmp	.+44     	; 0x1a4c0 <__floatsisf+0x6c>
   1a494:	88 23       	and	r24, r24
   1a496:	11 f0       	breq	.+4      	; 0x1a49c <__floatsisf+0x48>
   1a498:	96 e9       	ldi	r25, 0x96	; 150
   1a49a:	11 c0       	rjmp	.+34     	; 0x1a4be <__floatsisf+0x6a>
   1a49c:	77 23       	and	r23, r23
   1a49e:	21 f0       	breq	.+8      	; 0x1a4a8 <__floatsisf+0x54>
   1a4a0:	9e e8       	ldi	r25, 0x8E	; 142
   1a4a2:	87 2f       	mov	r24, r23
   1a4a4:	76 2f       	mov	r23, r22
   1a4a6:	05 c0       	rjmp	.+10     	; 0x1a4b2 <__floatsisf+0x5e>
   1a4a8:	66 23       	and	r22, r22
   1a4aa:	71 f0       	breq	.+28     	; 0x1a4c8 <__floatsisf+0x74>
   1a4ac:	96 e8       	ldi	r25, 0x86	; 134
   1a4ae:	86 2f       	mov	r24, r22
   1a4b0:	70 e0       	ldi	r23, 0x00	; 0
   1a4b2:	60 e0       	ldi	r22, 0x00	; 0
   1a4b4:	2a f0       	brmi	.+10     	; 0x1a4c0 <__floatsisf+0x6c>
   1a4b6:	9a 95       	dec	r25
   1a4b8:	66 0f       	add	r22, r22
   1a4ba:	77 1f       	adc	r23, r23
   1a4bc:	88 1f       	adc	r24, r24
   1a4be:	da f7       	brpl	.-10     	; 0x1a4b6 <__floatsisf+0x62>
   1a4c0:	88 0f       	add	r24, r24
   1a4c2:	96 95       	lsr	r25
   1a4c4:	87 95       	ror	r24
   1a4c6:	97 f9       	bld	r25, 7
   1a4c8:	08 95       	ret

0001a4ca <__fp_cmp>:
__fp_cmp():
   1a4ca:	99 0f       	add	r25, r25
   1a4cc:	00 08       	sbc	r0, r0
   1a4ce:	55 0f       	add	r21, r21
   1a4d0:	aa 0b       	sbc	r26, r26
   1a4d2:	e0 e8       	ldi	r30, 0x80	; 128
   1a4d4:	fe ef       	ldi	r31, 0xFE	; 254
   1a4d6:	16 16       	cp	r1, r22
   1a4d8:	17 06       	cpc	r1, r23
   1a4da:	e8 07       	cpc	r30, r24
   1a4dc:	f9 07       	cpc	r31, r25
   1a4de:	c0 f0       	brcs	.+48     	; 0x1a510 <__fp_cmp+0x46>
   1a4e0:	12 16       	cp	r1, r18
   1a4e2:	13 06       	cpc	r1, r19
   1a4e4:	e4 07       	cpc	r30, r20
   1a4e6:	f5 07       	cpc	r31, r21
   1a4e8:	98 f0       	brcs	.+38     	; 0x1a510 <__fp_cmp+0x46>
   1a4ea:	62 1b       	sub	r22, r18
   1a4ec:	73 0b       	sbc	r23, r19
   1a4ee:	84 0b       	sbc	r24, r20
   1a4f0:	95 0b       	sbc	r25, r21
   1a4f2:	39 f4       	brne	.+14     	; 0x1a502 <__fp_cmp+0x38>
   1a4f4:	0a 26       	eor	r0, r26
   1a4f6:	61 f0       	breq	.+24     	; 0x1a510 <__fp_cmp+0x46>
   1a4f8:	23 2b       	or	r18, r19
   1a4fa:	24 2b       	or	r18, r20
   1a4fc:	25 2b       	or	r18, r21
   1a4fe:	21 f4       	brne	.+8      	; 0x1a508 <__fp_cmp+0x3e>
   1a500:	08 95       	ret
   1a502:	0a 26       	eor	r0, r26
   1a504:	09 f4       	brne	.+2      	; 0x1a508 <__fp_cmp+0x3e>
   1a506:	a1 40       	sbci	r26, 0x01	; 1
   1a508:	a6 95       	lsr	r26
   1a50a:	8f ef       	ldi	r24, 0xFF	; 255
   1a50c:	81 1d       	adc	r24, r1
   1a50e:	81 1d       	adc	r24, r1
   1a510:	08 95       	ret

0001a512 <__fp_inf>:
__fp_inf():
   1a512:	97 f9       	bld	r25, 7
   1a514:	9f 67       	ori	r25, 0x7F	; 127
   1a516:	80 e8       	ldi	r24, 0x80	; 128
   1a518:	70 e0       	ldi	r23, 0x00	; 0
   1a51a:	60 e0       	ldi	r22, 0x00	; 0
   1a51c:	08 95       	ret

0001a51e <__fp_nan>:
__fp_nan():
   1a51e:	9f ef       	ldi	r25, 0xFF	; 255
   1a520:	80 ec       	ldi	r24, 0xC0	; 192
   1a522:	08 95       	ret

0001a524 <__fp_pscA>:
__fp_pscA():
   1a524:	00 24       	eor	r0, r0
   1a526:	0a 94       	dec	r0
   1a528:	16 16       	cp	r1, r22
   1a52a:	17 06       	cpc	r1, r23
   1a52c:	18 06       	cpc	r1, r24
   1a52e:	09 06       	cpc	r0, r25
   1a530:	08 95       	ret

0001a532 <__fp_pscB>:
__fp_pscB():
   1a532:	00 24       	eor	r0, r0
   1a534:	0a 94       	dec	r0
   1a536:	12 16       	cp	r1, r18
   1a538:	13 06       	cpc	r1, r19
   1a53a:	14 06       	cpc	r1, r20
   1a53c:	05 06       	cpc	r0, r21
   1a53e:	08 95       	ret

0001a540 <__fp_round>:
__fp_round():
   1a540:	09 2e       	mov	r0, r25
   1a542:	03 94       	inc	r0
   1a544:	00 0c       	add	r0, r0
   1a546:	11 f4       	brne	.+4      	; 0x1a54c <__fp_round+0xc>
   1a548:	88 23       	and	r24, r24
   1a54a:	52 f0       	brmi	.+20     	; 0x1a560 <__fp_round+0x20>
   1a54c:	bb 0f       	add	r27, r27
   1a54e:	40 f4       	brcc	.+16     	; 0x1a560 <__fp_round+0x20>
   1a550:	bf 2b       	or	r27, r31
   1a552:	11 f4       	brne	.+4      	; 0x1a558 <__fp_round+0x18>
   1a554:	60 ff       	sbrs	r22, 0
   1a556:	04 c0       	rjmp	.+8      	; 0x1a560 <__fp_round+0x20>
   1a558:	6f 5f       	subi	r22, 0xFF	; 255
   1a55a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a55c:	8f 4f       	sbci	r24, 0xFF	; 255
   1a55e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a560:	08 95       	ret

0001a562 <__fp_split3>:
__fp_split3():
   1a562:	57 fd       	sbrc	r21, 7
   1a564:	90 58       	subi	r25, 0x80	; 128
   1a566:	44 0f       	add	r20, r20
   1a568:	55 1f       	adc	r21, r21
   1a56a:	59 f0       	breq	.+22     	; 0x1a582 <__fp_splitA+0x10>
   1a56c:	5f 3f       	cpi	r21, 0xFF	; 255
   1a56e:	71 f0       	breq	.+28     	; 0x1a58c <__fp_splitA+0x1a>
   1a570:	47 95       	ror	r20

0001a572 <__fp_splitA>:
   1a572:	88 0f       	add	r24, r24
   1a574:	97 fb       	bst	r25, 7
   1a576:	99 1f       	adc	r25, r25
   1a578:	61 f0       	breq	.+24     	; 0x1a592 <__fp_splitA+0x20>
   1a57a:	9f 3f       	cpi	r25, 0xFF	; 255
   1a57c:	79 f0       	breq	.+30     	; 0x1a59c <__fp_splitA+0x2a>
   1a57e:	87 95       	ror	r24
   1a580:	08 95       	ret
   1a582:	12 16       	cp	r1, r18
   1a584:	13 06       	cpc	r1, r19
   1a586:	14 06       	cpc	r1, r20
   1a588:	55 1f       	adc	r21, r21
   1a58a:	f2 cf       	rjmp	.-28     	; 0x1a570 <__fp_split3+0xe>
   1a58c:	46 95       	lsr	r20
   1a58e:	f1 df       	rcall	.-30     	; 0x1a572 <__fp_splitA>
   1a590:	08 c0       	rjmp	.+16     	; 0x1a5a2 <__fp_splitA+0x30>
   1a592:	16 16       	cp	r1, r22
   1a594:	17 06       	cpc	r1, r23
   1a596:	18 06       	cpc	r1, r24
   1a598:	99 1f       	adc	r25, r25
   1a59a:	f1 cf       	rjmp	.-30     	; 0x1a57e <__fp_splitA+0xc>
   1a59c:	86 95       	lsr	r24
   1a59e:	71 05       	cpc	r23, r1
   1a5a0:	61 05       	cpc	r22, r1
   1a5a2:	08 94       	sec
   1a5a4:	08 95       	ret

0001a5a6 <__fp_zero>:
__fp_zero():
   1a5a6:	e8 94       	clt

0001a5a8 <__fp_szero>:
   1a5a8:	bb 27       	eor	r27, r27
   1a5aa:	66 27       	eor	r22, r22
   1a5ac:	77 27       	eor	r23, r23
   1a5ae:	cb 01       	movw	r24, r22
   1a5b0:	97 f9       	bld	r25, 7
   1a5b2:	08 95       	ret

0001a5b4 <__gesf2>:
__gesf2():
   1a5b4:	0e 94 65 d2 	call	0x1a4ca	; 0x1a4ca <__fp_cmp>
   1a5b8:	08 f4       	brcc	.+2      	; 0x1a5bc <__gesf2+0x8>
   1a5ba:	8f ef       	ldi	r24, 0xFF	; 255
   1a5bc:	08 95       	ret

0001a5be <__mulsf3>:
__mulsf3():
   1a5be:	0e 94 f2 d2 	call	0x1a5e4	; 0x1a5e4 <__mulsf3x>
   1a5c2:	0c 94 a0 d2 	jmp	0x1a540	; 0x1a540 <__fp_round>
   1a5c6:	0e 94 92 d2 	call	0x1a524	; 0x1a524 <__fp_pscA>
   1a5ca:	38 f0       	brcs	.+14     	; 0x1a5da <__mulsf3+0x1c>
   1a5cc:	0e 94 99 d2 	call	0x1a532	; 0x1a532 <__fp_pscB>
   1a5d0:	20 f0       	brcs	.+8      	; 0x1a5da <__mulsf3+0x1c>
   1a5d2:	95 23       	and	r25, r21
   1a5d4:	11 f0       	breq	.+4      	; 0x1a5da <__mulsf3+0x1c>
   1a5d6:	0c 94 89 d2 	jmp	0x1a512	; 0x1a512 <__fp_inf>
   1a5da:	0c 94 8f d2 	jmp	0x1a51e	; 0x1a51e <__fp_nan>
   1a5de:	11 24       	eor	r1, r1
   1a5e0:	0c 94 d4 d2 	jmp	0x1a5a8	; 0x1a5a8 <__fp_szero>

0001a5e4 <__mulsf3x>:
__mulsf3x():
   1a5e4:	0e 94 b1 d2 	call	0x1a562	; 0x1a562 <__fp_split3>
   1a5e8:	70 f3       	brcs	.-36     	; 0x1a5c6 <__mulsf3+0x8>

0001a5ea <__mulsf3_pse>:
   1a5ea:	95 9f       	mul	r25, r21
   1a5ec:	c1 f3       	breq	.-16     	; 0x1a5de <__mulsf3+0x20>
   1a5ee:	95 0f       	add	r25, r21
   1a5f0:	50 e0       	ldi	r21, 0x00	; 0
   1a5f2:	55 1f       	adc	r21, r21
   1a5f4:	62 9f       	mul	r22, r18
   1a5f6:	f0 01       	movw	r30, r0
   1a5f8:	72 9f       	mul	r23, r18
   1a5fa:	bb 27       	eor	r27, r27
   1a5fc:	f0 0d       	add	r31, r0
   1a5fe:	b1 1d       	adc	r27, r1
   1a600:	63 9f       	mul	r22, r19
   1a602:	aa 27       	eor	r26, r26
   1a604:	f0 0d       	add	r31, r0
   1a606:	b1 1d       	adc	r27, r1
   1a608:	aa 1f       	adc	r26, r26
   1a60a:	64 9f       	mul	r22, r20
   1a60c:	66 27       	eor	r22, r22
   1a60e:	b0 0d       	add	r27, r0
   1a610:	a1 1d       	adc	r26, r1
   1a612:	66 1f       	adc	r22, r22
   1a614:	82 9f       	mul	r24, r18
   1a616:	22 27       	eor	r18, r18
   1a618:	b0 0d       	add	r27, r0
   1a61a:	a1 1d       	adc	r26, r1
   1a61c:	62 1f       	adc	r22, r18
   1a61e:	73 9f       	mul	r23, r19
   1a620:	b0 0d       	add	r27, r0
   1a622:	a1 1d       	adc	r26, r1
   1a624:	62 1f       	adc	r22, r18
   1a626:	83 9f       	mul	r24, r19
   1a628:	a0 0d       	add	r26, r0
   1a62a:	61 1d       	adc	r22, r1
   1a62c:	22 1f       	adc	r18, r18
   1a62e:	74 9f       	mul	r23, r20
   1a630:	33 27       	eor	r19, r19
   1a632:	a0 0d       	add	r26, r0
   1a634:	61 1d       	adc	r22, r1
   1a636:	23 1f       	adc	r18, r19
   1a638:	84 9f       	mul	r24, r20
   1a63a:	60 0d       	add	r22, r0
   1a63c:	21 1d       	adc	r18, r1
   1a63e:	82 2f       	mov	r24, r18
   1a640:	76 2f       	mov	r23, r22
   1a642:	6a 2f       	mov	r22, r26
   1a644:	11 24       	eor	r1, r1
   1a646:	9f 57       	subi	r25, 0x7F	; 127
   1a648:	50 40       	sbci	r21, 0x00	; 0
   1a64a:	9a f0       	brmi	.+38     	; 0x1a672 <__mulsf3_pse+0x88>
   1a64c:	f1 f0       	breq	.+60     	; 0x1a68a <__mulsf3_pse+0xa0>
   1a64e:	88 23       	and	r24, r24
   1a650:	4a f0       	brmi	.+18     	; 0x1a664 <__mulsf3_pse+0x7a>
   1a652:	ee 0f       	add	r30, r30
   1a654:	ff 1f       	adc	r31, r31
   1a656:	bb 1f       	adc	r27, r27
   1a658:	66 1f       	adc	r22, r22
   1a65a:	77 1f       	adc	r23, r23
   1a65c:	88 1f       	adc	r24, r24
   1a65e:	91 50       	subi	r25, 0x01	; 1
   1a660:	50 40       	sbci	r21, 0x00	; 0
   1a662:	a9 f7       	brne	.-22     	; 0x1a64e <__mulsf3_pse+0x64>
   1a664:	9e 3f       	cpi	r25, 0xFE	; 254
   1a666:	51 05       	cpc	r21, r1
   1a668:	80 f0       	brcs	.+32     	; 0x1a68a <__mulsf3_pse+0xa0>
   1a66a:	0c 94 89 d2 	jmp	0x1a512	; 0x1a512 <__fp_inf>
   1a66e:	0c 94 d4 d2 	jmp	0x1a5a8	; 0x1a5a8 <__fp_szero>
   1a672:	5f 3f       	cpi	r21, 0xFF	; 255
   1a674:	e4 f3       	brlt	.-8      	; 0x1a66e <__mulsf3_pse+0x84>
   1a676:	98 3e       	cpi	r25, 0xE8	; 232
   1a678:	d4 f3       	brlt	.-12     	; 0x1a66e <__mulsf3_pse+0x84>
   1a67a:	86 95       	lsr	r24
   1a67c:	77 95       	ror	r23
   1a67e:	67 95       	ror	r22
   1a680:	b7 95       	ror	r27
   1a682:	f7 95       	ror	r31
   1a684:	e7 95       	ror	r30
   1a686:	9f 5f       	subi	r25, 0xFF	; 255
   1a688:	c1 f7       	brne	.-16     	; 0x1a67a <__mulsf3_pse+0x90>
   1a68a:	fe 2b       	or	r31, r30
   1a68c:	88 0f       	add	r24, r24
   1a68e:	91 1d       	adc	r25, r1
   1a690:	96 95       	lsr	r25
   1a692:	87 95       	ror	r24
   1a694:	97 f9       	bld	r25, 7
   1a696:	08 95       	ret

0001a698 <__mulsi3>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1a698:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1a69a:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1a69c:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1a69e:	0e 94 e8 d3 	call	0x1a7d0	; 0x1a7d0 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1a6a2:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1a6a4:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1a6a6:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1a6a8:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1a6aa:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1a6ac:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1a6ae:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1a6b0:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1a6b2:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1a6b4:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1a6b6:	08 95       	ret

0001a6b8 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1a6b8:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1a6ba:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1a6bc:	04 c0       	rjmp	.+8      	; 0x1a6c6 <__udivmodqi4_ep>

0001a6be <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1a6be:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1a6c0:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1a6c2:	08 f0       	brcs	.+2      	; 0x1a6c6 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1a6c4:	96 1b       	sub	r25, r22

0001a6c6 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1a6c6:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1a6c8:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1a6ca:	c9 f7       	brne	.-14     	; 0x1a6be <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1a6cc:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1a6ce:	08 95       	ret

0001a6d0 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1a6d0:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1a6d2:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1a6d4:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1a6d6:	07 c0       	rjmp	.+14     	; 0x1a6e6 <__udivmodhi4_ep>

0001a6d8 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1a6d8:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1a6da:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1a6dc:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1a6de:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1a6e0:	10 f0       	brcs	.+4      	; 0x1a6e6 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1a6e2:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1a6e4:	b7 0b       	sbc	r27, r23

0001a6e6 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1a6e6:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1a6e8:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1a6ea:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1a6ec:	a9 f7       	brne	.-22     	; 0x1a6d8 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1a6ee:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1a6f0:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1a6f2:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1a6f4:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1a6f6:	08 95       	ret

0001a6f8 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1a6f8:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1a6fa:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1a6fc:	16 f4       	brtc	.+4      	; 0x1a702 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1a6fe:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1a700:	07 d0       	rcall	.+14     	; 0x1a710 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1a702:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1a704:	09 d0       	rcall	.+18     	; 0x1a718 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1a706:	0e 94 68 d3 	call	0x1a6d0	; 0x1a6d0 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1a70a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1a70c:	05 d0       	rcall	.+10     	; 0x1a718 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1a70e:	3e f4       	brtc	.+14     	; 0x1a71e <__divmodhi4_exit>

0001a710 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1a710:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1a712:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1a714:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1a716:	08 95       	ret

0001a718 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1a718:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1a71a:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1a71c:	7f 4f       	sbci	r23, 0xFF	; 255

0001a71e <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1a71e:	08 95       	ret

0001a720 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1a720:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1a722:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1a724:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1a726:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1a728:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1a72a:	0d c0       	rjmp	.+26     	; 0x1a746 <__udivmodsi4_ep>

0001a72c <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1a72c:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1a72e:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1a730:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1a732:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1a734:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1a736:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1a738:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1a73a:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1a73c:	20 f0       	brcs	.+8      	; 0x1a746 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1a73e:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1a740:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1a742:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1a744:	f5 0b       	sbc	r31, r21

0001a746 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1a746:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1a748:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1a74a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1a74c:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1a74e:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1a750:	69 f7       	brne	.-38     	; 0x1a72c <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1a752:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1a754:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1a756:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1a758:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1a75a:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1a75c:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1a75e:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1a760:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1a762:	08 95       	ret

0001a764 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1a764:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1a766:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1a768:	1e f4       	brtc	.+6      	; 0x1a770 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1a76a:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1a76c:	0e 94 c9 d3 	call	0x1a792	; 0x1a792 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1a770:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1a772:	07 d0       	rcall	.+14     	; 0x1a782 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1a774:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1a778:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1a77a:	03 d0       	rcall	.+6      	; 0x1a782 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1a77c:	4e f4       	brtc	.+18     	; 0x1a790 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1a77e:	0c 94 c9 d3 	jmp	0x1a792	; 0x1a792 <__negsi2>

0001a782 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1a782:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1a784:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1a786:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1a788:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1a78a:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1a78c:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1a78e:	5f 4f       	sbci	r21, 0xFF	; 255

0001a790 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1a790:	08 95       	ret

0001a792 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1a792:	90 95       	com	r25
   1a794:	80 95       	com	r24
   1a796:	70 95       	com	r23
   1a798:	61 95       	neg	r22
   1a79a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a79c:	8f 4f       	sbci	r24, 0xFF	; 255
   1a79e:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1a7a0:	08 95       	ret

0001a7a2 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1a7a2:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1a7a4:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1a7a6:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1a7a8:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1a7aa:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1a7ac:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1a7ae:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1a7b0:	19 94       	eijmp

0001a7b2 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1a7b2:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1a7b4:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1a7b6:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1a7b8:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1a7ba:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1a7bc:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1a7be:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1a7c0:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1a7c2:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1a7c4:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1a7c6:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1a7c8:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1a7ca:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1a7cc:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1a7ce:	08 95       	ret

0001a7d0 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1a7d0:	0e 94 d9 d3 	call	0x1a7b2	; 0x1a7b2 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1a7d4:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1a7d6:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1a7d8:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1a7da:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1a7dc:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1a7de:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1a7e0:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1a7e2:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1a7e4:	08 95       	ret

0001a7e6 <dtostrf>:
dtostrf():
   1a7e6:	ef 92       	push	r14
   1a7e8:	0f 93       	push	r16
   1a7ea:	1f 93       	push	r17
   1a7ec:	cf 93       	push	r28
   1a7ee:	df 93       	push	r29
   1a7f0:	e8 01       	movw	r28, r16
   1a7f2:	34 e0       	ldi	r19, 0x04	; 4
   1a7f4:	47 fd       	sbrc	r20, 7
   1a7f6:	34 e1       	ldi	r19, 0x14	; 20
   1a7f8:	04 2e       	mov	r0, r20
   1a7fa:	00 0c       	add	r0, r0
   1a7fc:	55 0b       	sbc	r21, r21
   1a7fe:	57 ff       	sbrs	r21, 7
   1a800:	03 c0       	rjmp	.+6      	; 0x1a808 <dtostrf+0x22>
   1a802:	51 95       	neg	r21
   1a804:	41 95       	neg	r20
   1a806:	51 09       	sbc	r21, r1
   1a808:	e3 2e       	mov	r14, r19
   1a80a:	02 2f       	mov	r16, r18
   1a80c:	24 2f       	mov	r18, r20
   1a80e:	ae 01       	movw	r20, r28
   1a810:	0e 94 e3 da 	call	0x1b5c6	; 0x1b5c6 <dtoa_prf>
   1a814:	ce 01       	movw	r24, r28
   1a816:	df 91       	pop	r29
   1a818:	cf 91       	pop	r28
   1a81a:	1f 91       	pop	r17
   1a81c:	0f 91       	pop	r16
   1a81e:	ef 90       	pop	r14
   1a820:	08 95       	ret

0001a822 <malloc>:
malloc():
   1a822:	0f 93       	push	r16
   1a824:	1f 93       	push	r17
   1a826:	cf 93       	push	r28
   1a828:	df 93       	push	r29
   1a82a:	82 30       	cpi	r24, 0x02	; 2
   1a82c:	91 05       	cpc	r25, r1
   1a82e:	10 f4       	brcc	.+4      	; 0x1a834 <malloc+0x12>
   1a830:	82 e0       	ldi	r24, 0x02	; 2
   1a832:	90 e0       	ldi	r25, 0x00	; 0
   1a834:	e0 91 33 14 	lds	r30, 0x1433	; 0x801433 <__flp>
   1a838:	f0 91 34 14 	lds	r31, 0x1434	; 0x801434 <__flp+0x1>
   1a83c:	30 e0       	ldi	r19, 0x00	; 0
   1a83e:	20 e0       	ldi	r18, 0x00	; 0
   1a840:	b0 e0       	ldi	r27, 0x00	; 0
   1a842:	a0 e0       	ldi	r26, 0x00	; 0
   1a844:	30 97       	sbiw	r30, 0x00	; 0
   1a846:	99 f4       	brne	.+38     	; 0x1a86e <malloc+0x4c>
   1a848:	21 15       	cp	r18, r1
   1a84a:	31 05       	cpc	r19, r1
   1a84c:	09 f4       	brne	.+2      	; 0x1a850 <malloc+0x2e>
   1a84e:	4a c0       	rjmp	.+148    	; 0x1a8e4 <malloc+0xc2>
   1a850:	28 1b       	sub	r18, r24
   1a852:	39 0b       	sbc	r19, r25
   1a854:	24 30       	cpi	r18, 0x04	; 4
   1a856:	31 05       	cpc	r19, r1
   1a858:	d8 f5       	brcc	.+118    	; 0x1a8d0 <malloc+0xae>
   1a85a:	8a 81       	ldd	r24, Y+2	; 0x02
   1a85c:	9b 81       	ldd	r25, Y+3	; 0x03
   1a85e:	61 15       	cp	r22, r1
   1a860:	71 05       	cpc	r23, r1
   1a862:	89 f1       	breq	.+98     	; 0x1a8c6 <malloc+0xa4>
   1a864:	fb 01       	movw	r30, r22
   1a866:	93 83       	std	Z+3, r25	; 0x03
   1a868:	82 83       	std	Z+2, r24	; 0x02
   1a86a:	fe 01       	movw	r30, r28
   1a86c:	11 c0       	rjmp	.+34     	; 0x1a890 <malloc+0x6e>
   1a86e:	40 81       	ld	r20, Z
   1a870:	51 81       	ldd	r21, Z+1	; 0x01
   1a872:	02 81       	ldd	r16, Z+2	; 0x02
   1a874:	13 81       	ldd	r17, Z+3	; 0x03
   1a876:	48 17       	cp	r20, r24
   1a878:	59 07       	cpc	r21, r25
   1a87a:	e0 f0       	brcs	.+56     	; 0x1a8b4 <malloc+0x92>
   1a87c:	48 17       	cp	r20, r24
   1a87e:	59 07       	cpc	r21, r25
   1a880:	99 f4       	brne	.+38     	; 0x1a8a8 <malloc+0x86>
   1a882:	10 97       	sbiw	r26, 0x00	; 0
   1a884:	61 f0       	breq	.+24     	; 0x1a89e <malloc+0x7c>
   1a886:	12 96       	adiw	r26, 0x02	; 2
   1a888:	0c 93       	st	X, r16
   1a88a:	12 97       	sbiw	r26, 0x02	; 2
   1a88c:	13 96       	adiw	r26, 0x03	; 3
   1a88e:	1c 93       	st	X, r17
   1a890:	32 96       	adiw	r30, 0x02	; 2
   1a892:	cf 01       	movw	r24, r30
   1a894:	df 91       	pop	r29
   1a896:	cf 91       	pop	r28
   1a898:	1f 91       	pop	r17
   1a89a:	0f 91       	pop	r16
   1a89c:	08 95       	ret
   1a89e:	00 93 33 14 	sts	0x1433, r16	; 0x801433 <__flp>
   1a8a2:	10 93 34 14 	sts	0x1434, r17	; 0x801434 <__flp+0x1>
   1a8a6:	f4 cf       	rjmp	.-24     	; 0x1a890 <malloc+0x6e>
   1a8a8:	21 15       	cp	r18, r1
   1a8aa:	31 05       	cpc	r19, r1
   1a8ac:	51 f0       	breq	.+20     	; 0x1a8c2 <malloc+0xa0>
   1a8ae:	42 17       	cp	r20, r18
   1a8b0:	53 07       	cpc	r21, r19
   1a8b2:	38 f0       	brcs	.+14     	; 0x1a8c2 <malloc+0xa0>
   1a8b4:	a9 01       	movw	r20, r18
   1a8b6:	db 01       	movw	r26, r22
   1a8b8:	9a 01       	movw	r18, r20
   1a8ba:	bd 01       	movw	r22, r26
   1a8bc:	df 01       	movw	r26, r30
   1a8be:	f8 01       	movw	r30, r16
   1a8c0:	c1 cf       	rjmp	.-126    	; 0x1a844 <malloc+0x22>
   1a8c2:	ef 01       	movw	r28, r30
   1a8c4:	f9 cf       	rjmp	.-14     	; 0x1a8b8 <malloc+0x96>
   1a8c6:	90 93 34 14 	sts	0x1434, r25	; 0x801434 <__flp+0x1>
   1a8ca:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <__flp>
   1a8ce:	cd cf       	rjmp	.-102    	; 0x1a86a <malloc+0x48>
   1a8d0:	fe 01       	movw	r30, r28
   1a8d2:	e2 0f       	add	r30, r18
   1a8d4:	f3 1f       	adc	r31, r19
   1a8d6:	81 93       	st	Z+, r24
   1a8d8:	91 93       	st	Z+, r25
   1a8da:	22 50       	subi	r18, 0x02	; 2
   1a8dc:	31 09       	sbc	r19, r1
   1a8de:	39 83       	std	Y+1, r19	; 0x01
   1a8e0:	28 83       	st	Y, r18
   1a8e2:	d7 cf       	rjmp	.-82     	; 0x1a892 <malloc+0x70>
   1a8e4:	20 91 31 14 	lds	r18, 0x1431	; 0x801431 <__brkval>
   1a8e8:	30 91 32 14 	lds	r19, 0x1432	; 0x801432 <__brkval+0x1>
   1a8ec:	23 2b       	or	r18, r19
   1a8ee:	41 f4       	brne	.+16     	; 0x1a900 <malloc+0xde>
   1a8f0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
   1a8f4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
   1a8f8:	30 93 32 14 	sts	0x1432, r19	; 0x801432 <__brkval+0x1>
   1a8fc:	20 93 31 14 	sts	0x1431, r18	; 0x801431 <__brkval>
   1a900:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1a904:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1a908:	21 15       	cp	r18, r1
   1a90a:	31 05       	cpc	r19, r1
   1a90c:	41 f4       	brne	.+16     	; 0x1a91e <malloc+0xfc>
   1a90e:	2d b7       	in	r18, 0x3d	; 61
   1a910:	3e b7       	in	r19, 0x3e	; 62
   1a912:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1a916:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1a91a:	24 1b       	sub	r18, r20
   1a91c:	35 0b       	sbc	r19, r21
   1a91e:	e0 91 31 14 	lds	r30, 0x1431	; 0x801431 <__brkval>
   1a922:	f0 91 32 14 	lds	r31, 0x1432	; 0x801432 <__brkval+0x1>
   1a926:	e2 17       	cp	r30, r18
   1a928:	f3 07       	cpc	r31, r19
   1a92a:	a0 f4       	brcc	.+40     	; 0x1a954 <malloc+0x132>
   1a92c:	2e 1b       	sub	r18, r30
   1a92e:	3f 0b       	sbc	r19, r31
   1a930:	28 17       	cp	r18, r24
   1a932:	39 07       	cpc	r19, r25
   1a934:	78 f0       	brcs	.+30     	; 0x1a954 <malloc+0x132>
   1a936:	ac 01       	movw	r20, r24
   1a938:	4e 5f       	subi	r20, 0xFE	; 254
   1a93a:	5f 4f       	sbci	r21, 0xFF	; 255
   1a93c:	24 17       	cp	r18, r20
   1a93e:	35 07       	cpc	r19, r21
   1a940:	48 f0       	brcs	.+18     	; 0x1a954 <malloc+0x132>
   1a942:	4e 0f       	add	r20, r30
   1a944:	5f 1f       	adc	r21, r31
   1a946:	50 93 32 14 	sts	0x1432, r21	; 0x801432 <__brkval+0x1>
   1a94a:	40 93 31 14 	sts	0x1431, r20	; 0x801431 <__brkval>
   1a94e:	81 93       	st	Z+, r24
   1a950:	91 93       	st	Z+, r25
   1a952:	9f cf       	rjmp	.-194    	; 0x1a892 <malloc+0x70>
   1a954:	f0 e0       	ldi	r31, 0x00	; 0
   1a956:	e0 e0       	ldi	r30, 0x00	; 0
   1a958:	9c cf       	rjmp	.-200    	; 0x1a892 <malloc+0x70>

0001a95a <free>:
free():
   1a95a:	cf 93       	push	r28
   1a95c:	df 93       	push	r29
   1a95e:	00 97       	sbiw	r24, 0x00	; 0
   1a960:	e9 f0       	breq	.+58     	; 0x1a99c <free+0x42>
   1a962:	fc 01       	movw	r30, r24
   1a964:	32 97       	sbiw	r30, 0x02	; 2
   1a966:	13 82       	std	Z+3, r1	; 0x03
   1a968:	12 82       	std	Z+2, r1	; 0x02
   1a96a:	a0 91 33 14 	lds	r26, 0x1433	; 0x801433 <__flp>
   1a96e:	b0 91 34 14 	lds	r27, 0x1434	; 0x801434 <__flp+0x1>
   1a972:	ed 01       	movw	r28, r26
   1a974:	30 e0       	ldi	r19, 0x00	; 0
   1a976:	20 e0       	ldi	r18, 0x00	; 0
   1a978:	10 97       	sbiw	r26, 0x00	; 0
   1a97a:	a1 f4       	brne	.+40     	; 0x1a9a4 <free+0x4a>
   1a97c:	20 81       	ld	r18, Z
   1a97e:	31 81       	ldd	r19, Z+1	; 0x01
   1a980:	82 0f       	add	r24, r18
   1a982:	93 1f       	adc	r25, r19
   1a984:	20 91 31 14 	lds	r18, 0x1431	; 0x801431 <__brkval>
   1a988:	30 91 32 14 	lds	r19, 0x1432	; 0x801432 <__brkval+0x1>
   1a98c:	28 17       	cp	r18, r24
   1a98e:	39 07       	cpc	r19, r25
   1a990:	09 f0       	breq	.+2      	; 0x1a994 <free+0x3a>
   1a992:	61 c0       	rjmp	.+194    	; 0x1aa56 <free+0xfc>
   1a994:	f0 93 32 14 	sts	0x1432, r31	; 0x801432 <__brkval+0x1>
   1a998:	e0 93 31 14 	sts	0x1431, r30	; 0x801431 <__brkval>
   1a99c:	df 91       	pop	r29
   1a99e:	cf 91       	pop	r28
   1a9a0:	08 95       	ret
   1a9a2:	ea 01       	movw	r28, r20
   1a9a4:	ce 17       	cp	r28, r30
   1a9a6:	df 07       	cpc	r29, r31
   1a9a8:	e8 f5       	brcc	.+122    	; 0x1aa24 <free+0xca>
   1a9aa:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9ac:	5b 81       	ldd	r21, Y+3	; 0x03
   1a9ae:	9e 01       	movw	r18, r28
   1a9b0:	41 15       	cp	r20, r1
   1a9b2:	51 05       	cpc	r21, r1
   1a9b4:	b1 f7       	brne	.-20     	; 0x1a9a2 <free+0x48>
   1a9b6:	e9 01       	movw	r28, r18
   1a9b8:	fb 83       	std	Y+3, r31	; 0x03
   1a9ba:	ea 83       	std	Y+2, r30	; 0x02
   1a9bc:	49 91       	ld	r20, Y+
   1a9be:	59 91       	ld	r21, Y+
   1a9c0:	c4 0f       	add	r28, r20
   1a9c2:	d5 1f       	adc	r29, r21
   1a9c4:	ec 17       	cp	r30, r28
   1a9c6:	fd 07       	cpc	r31, r29
   1a9c8:	61 f4       	brne	.+24     	; 0x1a9e2 <free+0x88>
   1a9ca:	80 81       	ld	r24, Z
   1a9cc:	91 81       	ldd	r25, Z+1	; 0x01
   1a9ce:	02 96       	adiw	r24, 0x02	; 2
   1a9d0:	84 0f       	add	r24, r20
   1a9d2:	95 1f       	adc	r25, r21
   1a9d4:	e9 01       	movw	r28, r18
   1a9d6:	99 83       	std	Y+1, r25	; 0x01
   1a9d8:	88 83       	st	Y, r24
   1a9da:	82 81       	ldd	r24, Z+2	; 0x02
   1a9dc:	93 81       	ldd	r25, Z+3	; 0x03
   1a9de:	9b 83       	std	Y+3, r25	; 0x03
   1a9e0:	8a 83       	std	Y+2, r24	; 0x02
   1a9e2:	f0 e0       	ldi	r31, 0x00	; 0
   1a9e4:	e0 e0       	ldi	r30, 0x00	; 0
   1a9e6:	12 96       	adiw	r26, 0x02	; 2
   1a9e8:	8d 91       	ld	r24, X+
   1a9ea:	9c 91       	ld	r25, X
   1a9ec:	13 97       	sbiw	r26, 0x03	; 3
   1a9ee:	00 97       	sbiw	r24, 0x00	; 0
   1a9f0:	b9 f5       	brne	.+110    	; 0x1aa60 <free+0x106>
   1a9f2:	2d 91       	ld	r18, X+
   1a9f4:	3c 91       	ld	r19, X
   1a9f6:	11 97       	sbiw	r26, 0x01	; 1
   1a9f8:	cd 01       	movw	r24, r26
   1a9fa:	02 96       	adiw	r24, 0x02	; 2
   1a9fc:	82 0f       	add	r24, r18
   1a9fe:	93 1f       	adc	r25, r19
   1aa00:	20 91 31 14 	lds	r18, 0x1431	; 0x801431 <__brkval>
   1aa04:	30 91 32 14 	lds	r19, 0x1432	; 0x801432 <__brkval+0x1>
   1aa08:	28 17       	cp	r18, r24
   1aa0a:	39 07       	cpc	r19, r25
   1aa0c:	39 f6       	brne	.-114    	; 0x1a99c <free+0x42>
   1aa0e:	30 97       	sbiw	r30, 0x00	; 0
   1aa10:	51 f5       	brne	.+84     	; 0x1aa66 <free+0x10c>
   1aa12:	10 92 34 14 	sts	0x1434, r1	; 0x801434 <__flp+0x1>
   1aa16:	10 92 33 14 	sts	0x1433, r1	; 0x801433 <__flp>
   1aa1a:	b0 93 32 14 	sts	0x1432, r27	; 0x801432 <__brkval+0x1>
   1aa1e:	a0 93 31 14 	sts	0x1431, r26	; 0x801431 <__brkval>
   1aa22:	bc cf       	rjmp	.-136    	; 0x1a99c <free+0x42>
   1aa24:	d3 83       	std	Z+3, r29	; 0x03
   1aa26:	c2 83       	std	Z+2, r28	; 0x02
   1aa28:	40 81       	ld	r20, Z
   1aa2a:	51 81       	ldd	r21, Z+1	; 0x01
   1aa2c:	84 0f       	add	r24, r20
   1aa2e:	95 1f       	adc	r25, r21
   1aa30:	c8 17       	cp	r28, r24
   1aa32:	d9 07       	cpc	r29, r25
   1aa34:	61 f4       	brne	.+24     	; 0x1aa4e <free+0xf4>
   1aa36:	4e 5f       	subi	r20, 0xFE	; 254
   1aa38:	5f 4f       	sbci	r21, 0xFF	; 255
   1aa3a:	88 81       	ld	r24, Y
   1aa3c:	99 81       	ldd	r25, Y+1	; 0x01
   1aa3e:	48 0f       	add	r20, r24
   1aa40:	59 1f       	adc	r21, r25
   1aa42:	51 83       	std	Z+1, r21	; 0x01
   1aa44:	40 83       	st	Z, r20
   1aa46:	8a 81       	ldd	r24, Y+2	; 0x02
   1aa48:	9b 81       	ldd	r25, Y+3	; 0x03
   1aa4a:	93 83       	std	Z+3, r25	; 0x03
   1aa4c:	82 83       	std	Z+2, r24	; 0x02
   1aa4e:	21 15       	cp	r18, r1
   1aa50:	31 05       	cpc	r19, r1
   1aa52:	09 f0       	breq	.+2      	; 0x1aa56 <free+0xfc>
   1aa54:	b0 cf       	rjmp	.-160    	; 0x1a9b6 <free+0x5c>
   1aa56:	f0 93 34 14 	sts	0x1434, r31	; 0x801434 <__flp+0x1>
   1aa5a:	e0 93 33 14 	sts	0x1433, r30	; 0x801433 <__flp>
   1aa5e:	9e cf       	rjmp	.-196    	; 0x1a99c <free+0x42>
   1aa60:	fd 01       	movw	r30, r26
   1aa62:	dc 01       	movw	r26, r24
   1aa64:	c0 cf       	rjmp	.-128    	; 0x1a9e6 <free+0x8c>
   1aa66:	13 82       	std	Z+3, r1	; 0x03
   1aa68:	12 82       	std	Z+2, r1	; 0x02
   1aa6a:	d7 cf       	rjmp	.-82     	; 0x1aa1a <free+0xc0>

0001aa6c <realloc>:
realloc():
   1aa6c:	4f 92       	push	r4
   1aa6e:	5f 92       	push	r5
   1aa70:	6f 92       	push	r6
   1aa72:	7f 92       	push	r7
   1aa74:	8f 92       	push	r8
   1aa76:	9f 92       	push	r9
   1aa78:	af 92       	push	r10
   1aa7a:	bf 92       	push	r11
   1aa7c:	cf 92       	push	r12
   1aa7e:	df 92       	push	r13
   1aa80:	ef 92       	push	r14
   1aa82:	ff 92       	push	r15
   1aa84:	0f 93       	push	r16
   1aa86:	1f 93       	push	r17
   1aa88:	cf 93       	push	r28
   1aa8a:	df 93       	push	r29
   1aa8c:	8c 01       	movw	r16, r24
   1aa8e:	00 97       	sbiw	r24, 0x00	; 0
   1aa90:	99 f4       	brne	.+38     	; 0x1aab8 <realloc+0x4c>
   1aa92:	cb 01       	movw	r24, r22
   1aa94:	df 91       	pop	r29
   1aa96:	cf 91       	pop	r28
   1aa98:	1f 91       	pop	r17
   1aa9a:	0f 91       	pop	r16
   1aa9c:	ff 90       	pop	r15
   1aa9e:	ef 90       	pop	r14
   1aaa0:	df 90       	pop	r13
   1aaa2:	cf 90       	pop	r12
   1aaa4:	bf 90       	pop	r11
   1aaa6:	af 90       	pop	r10
   1aaa8:	9f 90       	pop	r9
   1aaaa:	8f 90       	pop	r8
   1aaac:	7f 90       	pop	r7
   1aaae:	6f 90       	pop	r6
   1aab0:	5f 90       	pop	r5
   1aab2:	4f 90       	pop	r4
   1aab4:	0c 94 11 d4 	jmp	0x1a822	; 0x1a822 <malloc>
   1aab8:	fc 01       	movw	r30, r24
   1aaba:	e6 0f       	add	r30, r22
   1aabc:	f7 1f       	adc	r31, r23
   1aabe:	9c 01       	movw	r18, r24
   1aac0:	22 50       	subi	r18, 0x02	; 2
   1aac2:	31 09       	sbc	r19, r1
   1aac4:	e2 17       	cp	r30, r18
   1aac6:	f3 07       	cpc	r31, r19
   1aac8:	08 f4       	brcc	.+2      	; 0x1aacc <realloc+0x60>
   1aaca:	ae c0       	rjmp	.+348    	; 0x1ac28 <realloc+0x1bc>
   1aacc:	d9 01       	movw	r26, r18
   1aace:	cd 91       	ld	r28, X+
   1aad0:	dc 91       	ld	r29, X
   1aad2:	11 97       	sbiw	r26, 0x01	; 1
   1aad4:	c6 17       	cp	r28, r22
   1aad6:	d7 07       	cpc	r29, r23
   1aad8:	20 f1       	brcs	.+72     	; 0x1ab22 <realloc+0xb6>
   1aada:	c5 30       	cpi	r28, 0x05	; 5
   1aadc:	d1 05       	cpc	r29, r1
   1aade:	78 f0       	brcs	.+30     	; 0x1aafe <realloc+0x92>
   1aae0:	ce 01       	movw	r24, r28
   1aae2:	04 97       	sbiw	r24, 0x04	; 4
   1aae4:	86 17       	cp	r24, r22
   1aae6:	97 07       	cpc	r25, r23
   1aae8:	50 f0       	brcs	.+20     	; 0x1aafe <realloc+0x92>
   1aaea:	c6 1b       	sub	r28, r22
   1aaec:	d7 0b       	sbc	r29, r23
   1aaee:	22 97       	sbiw	r28, 0x02	; 2
   1aaf0:	c1 93       	st	Z+, r28
   1aaf2:	d1 93       	st	Z+, r29
   1aaf4:	6d 93       	st	X+, r22
   1aaf6:	7c 93       	st	X, r23
   1aaf8:	cf 01       	movw	r24, r30
   1aafa:	0e 94 ad d4 	call	0x1a95a	; 0x1a95a <free>
   1aafe:	c8 01       	movw	r24, r16
   1ab00:	df 91       	pop	r29
   1ab02:	cf 91       	pop	r28
   1ab04:	1f 91       	pop	r17
   1ab06:	0f 91       	pop	r16
   1ab08:	ff 90       	pop	r15
   1ab0a:	ef 90       	pop	r14
   1ab0c:	df 90       	pop	r13
   1ab0e:	cf 90       	pop	r12
   1ab10:	bf 90       	pop	r11
   1ab12:	af 90       	pop	r10
   1ab14:	9f 90       	pop	r9
   1ab16:	8f 90       	pop	r8
   1ab18:	7f 90       	pop	r7
   1ab1a:	6f 90       	pop	r6
   1ab1c:	5f 90       	pop	r5
   1ab1e:	4f 90       	pop	r4
   1ab20:	08 95       	ret
   1ab22:	5b 01       	movw	r10, r22
   1ab24:	ac 1a       	sub	r10, r28
   1ab26:	bd 0a       	sbc	r11, r29
   1ab28:	4c 01       	movw	r8, r24
   1ab2a:	8c 0e       	add	r8, r28
   1ab2c:	9d 1e       	adc	r9, r29
   1ab2e:	a0 91 33 14 	lds	r26, 0x1433	; 0x801433 <__flp>
   1ab32:	b0 91 34 14 	lds	r27, 0x1434	; 0x801434 <__flp+0x1>
   1ab36:	51 2c       	mov	r5, r1
   1ab38:	41 2c       	mov	r4, r1
   1ab3a:	f1 2c       	mov	r15, r1
   1ab3c:	e1 2c       	mov	r14, r1
   1ab3e:	10 97       	sbiw	r26, 0x00	; 0
   1ab40:	31 f5       	brne	.+76     	; 0x1ab8e <realloc+0x122>
   1ab42:	80 91 31 14 	lds	r24, 0x1431	; 0x801431 <__brkval>
   1ab46:	90 91 32 14 	lds	r25, 0x1432	; 0x801432 <__brkval+0x1>
   1ab4a:	88 15       	cp	r24, r8
   1ab4c:	99 05       	cpc	r25, r9
   1ab4e:	09 f0       	breq	.+2      	; 0x1ab52 <realloc+0xe6>
   1ab50:	5c c0       	rjmp	.+184    	; 0x1ac0a <realloc+0x19e>
   1ab52:	46 16       	cp	r4, r22
   1ab54:	57 06       	cpc	r5, r23
   1ab56:	08 f0       	brcs	.+2      	; 0x1ab5a <realloc+0xee>
   1ab58:	58 c0       	rjmp	.+176    	; 0x1ac0a <realloc+0x19e>
   1ab5a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1ab5e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1ab62:	00 97       	sbiw	r24, 0x00	; 0
   1ab64:	41 f4       	brne	.+16     	; 0x1ab76 <realloc+0x10a>
   1ab66:	8d b7       	in	r24, 0x3d	; 61
   1ab68:	9e b7       	in	r25, 0x3e	; 62
   1ab6a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
   1ab6e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
   1ab72:	84 1b       	sub	r24, r20
   1ab74:	95 0b       	sbc	r25, r21
   1ab76:	e8 17       	cp	r30, r24
   1ab78:	f9 07       	cpc	r31, r25
   1ab7a:	08 f0       	brcs	.+2      	; 0x1ab7e <realloc+0x112>
   1ab7c:	55 c0       	rjmp	.+170    	; 0x1ac28 <realloc+0x1bc>
   1ab7e:	f0 93 32 14 	sts	0x1432, r31	; 0x801432 <__brkval+0x1>
   1ab82:	e0 93 31 14 	sts	0x1431, r30	; 0x801431 <__brkval>
   1ab86:	f9 01       	movw	r30, r18
   1ab88:	71 83       	std	Z+1, r23	; 0x01
   1ab8a:	60 83       	st	Z, r22
   1ab8c:	b8 cf       	rjmp	.-144    	; 0x1aafe <realloc+0x92>
   1ab8e:	8d 91       	ld	r24, X+
   1ab90:	9c 91       	ld	r25, X
   1ab92:	11 97       	sbiw	r26, 0x01	; 1
   1ab94:	12 96       	adiw	r26, 0x02	; 2
   1ab96:	6c 90       	ld	r6, X
   1ab98:	12 97       	sbiw	r26, 0x02	; 2
   1ab9a:	13 96       	adiw	r26, 0x03	; 3
   1ab9c:	7c 90       	ld	r7, X
   1ab9e:	13 97       	sbiw	r26, 0x03	; 3
   1aba0:	a8 15       	cp	r26, r8
   1aba2:	b9 05       	cpc	r27, r9
   1aba4:	59 f5       	brne	.+86     	; 0x1abfc <realloc+0x190>
   1aba6:	6c 01       	movw	r12, r24
   1aba8:	42 e0       	ldi	r20, 0x02	; 2
   1abaa:	c4 0e       	add	r12, r20
   1abac:	d1 1c       	adc	r13, r1
   1abae:	ca 14       	cp	r12, r10
   1abb0:	db 04       	cpc	r13, r11
   1abb2:	20 f1       	brcs	.+72     	; 0x1abfc <realloc+0x190>
   1abb4:	ac 01       	movw	r20, r24
   1abb6:	4a 19       	sub	r20, r10
   1abb8:	5b 09       	sbc	r21, r11
   1abba:	da 01       	movw	r26, r20
   1abbc:	12 96       	adiw	r26, 0x02	; 2
   1abbe:	15 97       	sbiw	r26, 0x05	; 5
   1abc0:	80 f0       	brcs	.+32     	; 0x1abe2 <realloc+0x176>
   1abc2:	62 82       	std	Z+2, r6	; 0x02
   1abc4:	73 82       	std	Z+3, r7	; 0x03
   1abc6:	51 83       	std	Z+1, r21	; 0x01
   1abc8:	40 83       	st	Z, r20
   1abca:	d9 01       	movw	r26, r18
   1abcc:	6d 93       	st	X+, r22
   1abce:	7c 93       	st	X, r23
   1abd0:	e1 14       	cp	r14, r1
   1abd2:	f1 04       	cpc	r15, r1
   1abd4:	71 f0       	breq	.+28     	; 0x1abf2 <realloc+0x186>
   1abd6:	d7 01       	movw	r26, r14
   1abd8:	13 96       	adiw	r26, 0x03	; 3
   1abda:	fc 93       	st	X, r31
   1abdc:	ee 93       	st	-X, r30
   1abde:	12 97       	sbiw	r26, 0x02	; 2
   1abe0:	8e cf       	rjmp	.-228    	; 0x1aafe <realloc+0x92>
   1abe2:	22 96       	adiw	r28, 0x02	; 2
   1abe4:	8c 0f       	add	r24, r28
   1abe6:	9d 1f       	adc	r25, r29
   1abe8:	f9 01       	movw	r30, r18
   1abea:	91 83       	std	Z+1, r25	; 0x01
   1abec:	80 83       	st	Z, r24
   1abee:	f3 01       	movw	r30, r6
   1abf0:	ef cf       	rjmp	.-34     	; 0x1abd0 <realloc+0x164>
   1abf2:	f0 93 34 14 	sts	0x1434, r31	; 0x801434 <__flp+0x1>
   1abf6:	e0 93 33 14 	sts	0x1433, r30	; 0x801433 <__flp>
   1abfa:	81 cf       	rjmp	.-254    	; 0x1aafe <realloc+0x92>
   1abfc:	48 16       	cp	r4, r24
   1abfe:	59 06       	cpc	r5, r25
   1ac00:	08 f4       	brcc	.+2      	; 0x1ac04 <realloc+0x198>
   1ac02:	2c 01       	movw	r4, r24
   1ac04:	7d 01       	movw	r14, r26
   1ac06:	d3 01       	movw	r26, r6
   1ac08:	9a cf       	rjmp	.-204    	; 0x1ab3e <realloc+0xd2>
   1ac0a:	cb 01       	movw	r24, r22
   1ac0c:	0e 94 11 d4 	call	0x1a822	; 0x1a822 <malloc>
   1ac10:	7c 01       	movw	r14, r24
   1ac12:	00 97       	sbiw	r24, 0x00	; 0
   1ac14:	49 f0       	breq	.+18     	; 0x1ac28 <realloc+0x1bc>
   1ac16:	ae 01       	movw	r20, r28
   1ac18:	b8 01       	movw	r22, r16
   1ac1a:	0e 94 60 d7 	call	0x1aec0	; 0x1aec0 <memcpy>
   1ac1e:	c8 01       	movw	r24, r16
   1ac20:	0e 94 ad d4 	call	0x1a95a	; 0x1a95a <free>
   1ac24:	87 01       	movw	r16, r14
   1ac26:	6b cf       	rjmp	.-298    	; 0x1aafe <realloc+0x92>
   1ac28:	10 e0       	ldi	r17, 0x00	; 0
   1ac2a:	00 e0       	ldi	r16, 0x00	; 0
   1ac2c:	68 cf       	rjmp	.-304    	; 0x1aafe <realloc+0x92>

0001ac2e <strtoul>:
strtoul():
   1ac2e:	3f 92       	push	r3
   1ac30:	4f 92       	push	r4
   1ac32:	5f 92       	push	r5
   1ac34:	6f 92       	push	r6
   1ac36:	7f 92       	push	r7
   1ac38:	8f 92       	push	r8
   1ac3a:	9f 92       	push	r9
   1ac3c:	af 92       	push	r10
   1ac3e:	bf 92       	push	r11
   1ac40:	cf 92       	push	r12
   1ac42:	df 92       	push	r13
   1ac44:	ef 92       	push	r14
   1ac46:	ff 92       	push	r15
   1ac48:	0f 93       	push	r16
   1ac4a:	1f 93       	push	r17
   1ac4c:	cf 93       	push	r28
   1ac4e:	df 93       	push	r29
   1ac50:	5c 01       	movw	r10, r24
   1ac52:	6b 01       	movw	r12, r22
   1ac54:	7a 01       	movw	r14, r20
   1ac56:	61 15       	cp	r22, r1
   1ac58:	71 05       	cpc	r23, r1
   1ac5a:	19 f0       	breq	.+6      	; 0x1ac62 <strtoul+0x34>
   1ac5c:	fb 01       	movw	r30, r22
   1ac5e:	91 83       	std	Z+1, r25	; 0x01
   1ac60:	80 83       	st	Z, r24
   1ac62:	e1 14       	cp	r14, r1
   1ac64:	f1 04       	cpc	r15, r1
   1ac66:	49 f0       	breq	.+18     	; 0x1ac7a <strtoul+0x4c>
   1ac68:	c7 01       	movw	r24, r14
   1ac6a:	02 97       	sbiw	r24, 0x02	; 2
   1ac6c:	83 97       	sbiw	r24, 0x23	; 35
   1ac6e:	28 f0       	brcs	.+10     	; 0x1ac7a <strtoul+0x4c>
   1ac70:	60 e0       	ldi	r22, 0x00	; 0
   1ac72:	70 e0       	ldi	r23, 0x00	; 0
   1ac74:	cb 01       	movw	r24, r22
   1ac76:	9b c0       	rjmp	.+310    	; 0x1adae <strtoul+0x180>
   1ac78:	5e 01       	movw	r10, r28
   1ac7a:	e5 01       	movw	r28, r10
   1ac7c:	21 96       	adiw	r28, 0x01	; 1
   1ac7e:	f5 01       	movw	r30, r10
   1ac80:	10 81       	ld	r17, Z
   1ac82:	81 2f       	mov	r24, r17
   1ac84:	90 e0       	ldi	r25, 0x00	; 0
   1ac86:	0e 94 41 d7 	call	0x1ae82	; 0x1ae82 <isspace>
   1ac8a:	89 2b       	or	r24, r25
   1ac8c:	a9 f7       	brne	.-22     	; 0x1ac78 <strtoul+0x4a>
   1ac8e:	1d 32       	cpi	r17, 0x2D	; 45
   1ac90:	09 f0       	breq	.+2      	; 0x1ac94 <strtoul+0x66>
   1ac92:	5c c0       	rjmp	.+184    	; 0x1ad4c <strtoul+0x11e>
   1ac94:	21 96       	adiw	r28, 0x01	; 1
   1ac96:	f5 01       	movw	r30, r10
   1ac98:	11 81       	ldd	r17, Z+1	; 0x01
   1ac9a:	01 e0       	ldi	r16, 0x01	; 1
   1ac9c:	e1 14       	cp	r14, r1
   1ac9e:	f1 04       	cpc	r15, r1
   1aca0:	09 f4       	brne	.+2      	; 0x1aca4 <strtoul+0x76>
   1aca2:	bb c0       	rjmp	.+374    	; 0x1ae1a <strtoul+0x1ec>
   1aca4:	f0 e1       	ldi	r31, 0x10	; 16
   1aca6:	ef 16       	cp	r14, r31
   1aca8:	f1 04       	cpc	r15, r1
   1acaa:	09 f0       	breq	.+2      	; 0x1acae <strtoul+0x80>
   1acac:	9b c0       	rjmp	.+310    	; 0x1ade4 <strtoul+0x1b6>
   1acae:	10 33       	cpi	r17, 0x30	; 48
   1acb0:	41 f4       	brne	.+16     	; 0x1acc2 <strtoul+0x94>
   1acb2:	88 81       	ld	r24, Y
   1acb4:	8f 7d       	andi	r24, 0xDF	; 223
   1acb6:	88 35       	cpi	r24, 0x58	; 88
   1acb8:	09 f0       	breq	.+2      	; 0x1acbc <strtoul+0x8e>
   1acba:	8f c0       	rjmp	.+286    	; 0x1adda <strtoul+0x1ac>
   1acbc:	19 81       	ldd	r17, Y+1	; 0x01
   1acbe:	22 96       	adiw	r28, 0x02	; 2
   1acc0:	02 60       	ori	r16, 0x02	; 2
   1acc2:	e0 e1       	ldi	r30, 0x10	; 16
   1acc4:	ee 2e       	mov	r14, r30
   1acc6:	f1 2c       	mov	r15, r1
   1acc8:	88 24       	eor	r8, r8
   1acca:	8a 94       	dec	r8
   1accc:	98 2c       	mov	r9, r8
   1acce:	a8 2c       	mov	r10, r8
   1acd0:	ff e0       	ldi	r31, 0x0F	; 15
   1acd2:	bf 2e       	mov	r11, r31
   1acd4:	20 e0       	ldi	r18, 0x00	; 0
   1acd6:	60 e0       	ldi	r22, 0x00	; 0
   1acd8:	70 e0       	ldi	r23, 0x00	; 0
   1acda:	cb 01       	movw	r24, r22
   1acdc:	27 01       	movw	r4, r14
   1acde:	0f 2c       	mov	r0, r15
   1ace0:	00 0c       	add	r0, r0
   1ace2:	66 08       	sbc	r6, r6
   1ace4:	77 08       	sbc	r7, r7
   1ace6:	fe 01       	movw	r30, r28
   1ace8:	50 ed       	ldi	r21, 0xD0	; 208
   1acea:	35 2e       	mov	r3, r21
   1acec:	31 0e       	add	r3, r17
   1acee:	39 e0       	ldi	r19, 0x09	; 9
   1acf0:	33 15       	cp	r19, r3
   1acf2:	68 f4       	brcc	.+26     	; 0x1ad0e <strtoul+0xe0>
   1acf4:	3f eb       	ldi	r19, 0xBF	; 191
   1acf6:	31 0f       	add	r19, r17
   1acf8:	49 ec       	ldi	r20, 0xC9	; 201
   1acfa:	34 2e       	mov	r3, r20
   1acfc:	3a 31       	cpi	r19, 0x1A	; 26
   1acfe:	30 f0       	brcs	.+12     	; 0x1ad0c <strtoul+0xde>
   1ad00:	3f e9       	ldi	r19, 0x9F	; 159
   1ad02:	31 0f       	add	r19, r17
   1ad04:	3a 31       	cpi	r19, 0x1A	; 26
   1ad06:	b0 f5       	brcc	.+108    	; 0x1ad74 <strtoul+0x146>
   1ad08:	39 ea       	ldi	r19, 0xA9	; 169
   1ad0a:	33 2e       	mov	r3, r19
   1ad0c:	31 0e       	add	r3, r17
   1ad0e:	3e 14       	cp	r3, r14
   1ad10:	1f 04       	cpc	r1, r15
   1ad12:	84 f5       	brge	.+96     	; 0x1ad74 <strtoul+0x146>
   1ad14:	2f 3f       	cpi	r18, 0xFF	; 255
   1ad16:	b9 f0       	breq	.+46     	; 0x1ad46 <strtoul+0x118>
   1ad18:	86 16       	cp	r8, r22
   1ad1a:	97 06       	cpc	r9, r23
   1ad1c:	a8 06       	cpc	r10, r24
   1ad1e:	b9 06       	cpc	r11, r25
   1ad20:	38 f1       	brcs	.+78     	; 0x1ad70 <strtoul+0x142>
   1ad22:	a3 01       	movw	r20, r6
   1ad24:	92 01       	movw	r18, r4
   1ad26:	0e 94 4c d3 	call	0x1a698	; 0x1a698 <__mulsi3>
   1ad2a:	23 2d       	mov	r18, r3
   1ad2c:	30 e0       	ldi	r19, 0x00	; 0
   1ad2e:	50 e0       	ldi	r21, 0x00	; 0
   1ad30:	40 e0       	ldi	r20, 0x00	; 0
   1ad32:	62 0f       	add	r22, r18
   1ad34:	73 1f       	adc	r23, r19
   1ad36:	84 1f       	adc	r24, r20
   1ad38:	95 1f       	adc	r25, r21
   1ad3a:	62 17       	cp	r22, r18
   1ad3c:	73 07       	cpc	r23, r19
   1ad3e:	84 07       	cpc	r24, r20
   1ad40:	95 07       	cpc	r25, r21
   1ad42:	b0 f0       	brcs	.+44     	; 0x1ad70 <strtoul+0x142>
   1ad44:	21 e0       	ldi	r18, 0x01	; 1
   1ad46:	21 96       	adiw	r28, 0x01	; 1
   1ad48:	10 81       	ld	r17, Z
   1ad4a:	cd cf       	rjmp	.-102    	; 0x1ace6 <strtoul+0xb8>
   1ad4c:	1b 32       	cpi	r17, 0x2B	; 43
   1ad4e:	21 f4       	brne	.+8      	; 0x1ad58 <strtoul+0x12a>
   1ad50:	e5 01       	movw	r28, r10
   1ad52:	22 96       	adiw	r28, 0x02	; 2
   1ad54:	f5 01       	movw	r30, r10
   1ad56:	11 81       	ldd	r17, Z+1	; 0x01
   1ad58:	00 e0       	ldi	r16, 0x00	; 0
   1ad5a:	a0 cf       	rjmp	.-192    	; 0x1ac9c <strtoul+0x6e>
   1ad5c:	78 e0       	ldi	r23, 0x08	; 8
   1ad5e:	e7 2e       	mov	r14, r23
   1ad60:	f1 2c       	mov	r15, r1
   1ad62:	88 24       	eor	r8, r8
   1ad64:	8a 94       	dec	r8
   1ad66:	98 2c       	mov	r9, r8
   1ad68:	a8 2c       	mov	r10, r8
   1ad6a:	6f e1       	ldi	r22, 0x1F	; 31
   1ad6c:	b6 2e       	mov	r11, r22
   1ad6e:	b2 cf       	rjmp	.-156    	; 0x1acd4 <strtoul+0xa6>
   1ad70:	2f ef       	ldi	r18, 0xFF	; 255
   1ad72:	e9 cf       	rjmp	.-46     	; 0x1ad46 <strtoul+0x118>
   1ad74:	c1 14       	cp	r12, r1
   1ad76:	d1 04       	cpc	r13, r1
   1ad78:	31 f0       	breq	.+12     	; 0x1ad86 <strtoul+0x158>
   1ad7a:	22 23       	and	r18, r18
   1ad7c:	51 f1       	breq	.+84     	; 0x1add2 <strtoul+0x1a4>
   1ad7e:	21 97       	sbiw	r28, 0x01	; 1
   1ad80:	f6 01       	movw	r30, r12
   1ad82:	d1 83       	std	Z+1, r29	; 0x01
   1ad84:	c0 83       	st	Z, r28
   1ad86:	00 ff       	sbrs	r16, 0
   1ad88:	07 c0       	rjmp	.+14     	; 0x1ad98 <strtoul+0x16a>
   1ad8a:	90 95       	com	r25
   1ad8c:	80 95       	com	r24
   1ad8e:	70 95       	com	r23
   1ad90:	61 95       	neg	r22
   1ad92:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad94:	8f 4f       	sbci	r24, 0xFF	; 255
   1ad96:	9f 4f       	sbci	r25, 0xFF	; 255
   1ad98:	2f 3f       	cpi	r18, 0xFF	; 255
   1ad9a:	49 f4       	brne	.+18     	; 0x1adae <strtoul+0x180>
   1ad9c:	82 e2       	ldi	r24, 0x22	; 34
   1ad9e:	90 e0       	ldi	r25, 0x00	; 0
   1ada0:	90 93 4c 14 	sts	0x144C, r25	; 0x80144c <errno+0x1>
   1ada4:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <errno>
   1ada8:	6f ef       	ldi	r22, 0xFF	; 255
   1adaa:	7f ef       	ldi	r23, 0xFF	; 255
   1adac:	cb 01       	movw	r24, r22
   1adae:	df 91       	pop	r29
   1adb0:	cf 91       	pop	r28
   1adb2:	1f 91       	pop	r17
   1adb4:	0f 91       	pop	r16
   1adb6:	ff 90       	pop	r15
   1adb8:	ef 90       	pop	r14
   1adba:	df 90       	pop	r13
   1adbc:	cf 90       	pop	r12
   1adbe:	bf 90       	pop	r11
   1adc0:	af 90       	pop	r10
   1adc2:	9f 90       	pop	r9
   1adc4:	8f 90       	pop	r8
   1adc6:	7f 90       	pop	r7
   1adc8:	6f 90       	pop	r6
   1adca:	5f 90       	pop	r5
   1adcc:	4f 90       	pop	r4
   1adce:	3f 90       	pop	r3
   1add0:	08 95       	ret
   1add2:	01 ff       	sbrs	r16, 1
   1add4:	d8 cf       	rjmp	.-80     	; 0x1ad86 <strtoul+0x158>
   1add6:	22 97       	sbiw	r28, 0x02	; 2
   1add8:	d3 cf       	rjmp	.-90     	; 0x1ad80 <strtoul+0x152>
   1adda:	10 e3       	ldi	r17, 0x30	; 48
   1addc:	e1 14       	cp	r14, r1
   1adde:	f1 04       	cpc	r15, r1
   1ade0:	09 f4       	brne	.+2      	; 0x1ade4 <strtoul+0x1b6>
   1ade2:	bc cf       	rjmp	.-136    	; 0x1ad5c <strtoul+0x12e>
   1ade4:	3a e0       	ldi	r19, 0x0A	; 10
   1ade6:	e3 16       	cp	r14, r19
   1ade8:	f1 04       	cpc	r15, r1
   1adea:	e9 f0       	breq	.+58     	; 0x1ae26 <strtoul+0x1f8>
   1adec:	80 e1       	ldi	r24, 0x10	; 16
   1adee:	e8 16       	cp	r14, r24
   1adf0:	f1 04       	cpc	r15, r1
   1adf2:	09 f4       	brne	.+2      	; 0x1adf6 <strtoul+0x1c8>
   1adf4:	66 cf       	rjmp	.-308    	; 0x1acc2 <strtoul+0x94>
   1adf6:	e8 e0       	ldi	r30, 0x08	; 8
   1adf8:	ee 16       	cp	r14, r30
   1adfa:	f1 04       	cpc	r15, r1
   1adfc:	09 f4       	brne	.+2      	; 0x1ae00 <strtoul+0x1d2>
   1adfe:	b1 cf       	rjmp	.-158    	; 0x1ad62 <strtoul+0x134>
   1ae00:	6f ef       	ldi	r22, 0xFF	; 255
   1ae02:	7f ef       	ldi	r23, 0xFF	; 255
   1ae04:	cb 01       	movw	r24, r22
   1ae06:	97 01       	movw	r18, r14
   1ae08:	0f 2c       	mov	r0, r15
   1ae0a:	00 0c       	add	r0, r0
   1ae0c:	44 0b       	sbc	r20, r20
   1ae0e:	55 0b       	sbc	r21, r21
   1ae10:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <__udivmodsi4>
   1ae14:	49 01       	movw	r8, r18
   1ae16:	5a 01       	movw	r10, r20
   1ae18:	5d cf       	rjmp	.-326    	; 0x1acd4 <strtoul+0xa6>
   1ae1a:	10 33       	cpi	r17, 0x30	; 48
   1ae1c:	09 f4       	brne	.+2      	; 0x1ae20 <strtoul+0x1f2>
   1ae1e:	49 cf       	rjmp	.-366    	; 0x1acb2 <strtoul+0x84>
   1ae20:	9a e0       	ldi	r25, 0x0A	; 10
   1ae22:	e9 2e       	mov	r14, r25
   1ae24:	f1 2c       	mov	r15, r1
   1ae26:	89 e9       	ldi	r24, 0x99	; 153
   1ae28:	88 2e       	mov	r8, r24
   1ae2a:	98 2c       	mov	r9, r8
   1ae2c:	a8 2c       	mov	r10, r8
   1ae2e:	89 e1       	ldi	r24, 0x19	; 25
   1ae30:	b8 2e       	mov	r11, r24
   1ae32:	50 cf       	rjmp	.-352    	; 0x1acd4 <strtoul+0xa6>

0001ae34 <abort>:
abort():
   1ae34:	81 e0       	ldi	r24, 0x01	; 1
   1ae36:	90 e0       	ldi	r25, 0x00	; 0
   1ae38:	f8 94       	cli
   1ae3a:	0c 94 7e df 	jmp	0x1befc	; 0x1befc <_exit>

0001ae3e <atof>:
atof():
   1ae3e:	66 27       	eor	r22, r22
   1ae40:	77 27       	eor	r23, r23
   1ae42:	0c 94 5c dc 	jmp	0x1b8b8	; 0x1b8b8 <strtod>

0001ae46 <atoi>:
atoi():
   1ae46:	fc 01       	movw	r30, r24
   1ae48:	88 27       	eor	r24, r24
   1ae4a:	99 27       	eor	r25, r25
   1ae4c:	e8 94       	clt
   1ae4e:	21 91       	ld	r18, Z+
   1ae50:	20 32       	cpi	r18, 0x20	; 32
   1ae52:	e9 f3       	breq	.-6      	; 0x1ae4e <atoi+0x8>
   1ae54:	29 30       	cpi	r18, 0x09	; 9
   1ae56:	10 f0       	brcs	.+4      	; 0x1ae5c <atoi+0x16>
   1ae58:	2e 30       	cpi	r18, 0x0E	; 14
   1ae5a:	c8 f3       	brcs	.-14     	; 0x1ae4e <atoi+0x8>
   1ae5c:	2b 32       	cpi	r18, 0x2B	; 43
   1ae5e:	41 f0       	breq	.+16     	; 0x1ae70 <atoi+0x2a>
   1ae60:	2d 32       	cpi	r18, 0x2D	; 45
   1ae62:	39 f4       	brne	.+14     	; 0x1ae72 <atoi+0x2c>
   1ae64:	68 94       	set
   1ae66:	04 c0       	rjmp	.+8      	; 0x1ae70 <atoi+0x2a>
   1ae68:	0e 94 e9 d7 	call	0x1afd2	; 0x1afd2 <__mulhi_const_10>
   1ae6c:	82 0f       	add	r24, r18
   1ae6e:	91 1d       	adc	r25, r1
   1ae70:	21 91       	ld	r18, Z+
   1ae72:	20 53       	subi	r18, 0x30	; 48
   1ae74:	2a 30       	cpi	r18, 0x0A	; 10
   1ae76:	c0 f3       	brcs	.-16     	; 0x1ae68 <atoi+0x22>
   1ae78:	1e f4       	brtc	.+6      	; 0x1ae80 <atoi+0x3a>
   1ae7a:	90 95       	com	r25
   1ae7c:	81 95       	neg	r24
   1ae7e:	9f 4f       	sbci	r25, 0xFF	; 255
   1ae80:	08 95       	ret

0001ae82 <isspace>:
isspace():
   1ae82:	91 11       	cpse	r25, r1
   1ae84:	0c 94 92 de 	jmp	0x1bd24	; 0x1bd24 <__ctype_isfalse>
   1ae88:	80 32       	cpi	r24, 0x20	; 32
   1ae8a:	19 f0       	breq	.+6      	; 0x1ae92 <isspace+0x10>
   1ae8c:	89 50       	subi	r24, 0x09	; 9
   1ae8e:	85 50       	subi	r24, 0x05	; 5
   1ae90:	c8 f7       	brcc	.-14     	; 0x1ae84 <isspace+0x2>
   1ae92:	08 95       	ret

0001ae94 <strcat_P>:
strcat_P():
   1ae94:	fb 01       	movw	r30, r22
   1ae96:	dc 01       	movw	r26, r24
   1ae98:	0d 90       	ld	r0, X+
   1ae9a:	00 20       	and	r0, r0
   1ae9c:	e9 f7       	brne	.-6      	; 0x1ae98 <strcat_P+0x4>
   1ae9e:	11 97       	sbiw	r26, 0x01	; 1
   1aea0:	05 90       	lpm	r0, Z+
   1aea2:	0d 92       	st	X+, r0
   1aea4:	00 20       	and	r0, r0
   1aea6:	e1 f7       	brne	.-8      	; 0x1aea0 <strcat_P+0xc>
   1aea8:	08 95       	ret

0001aeaa <strcpy_P>:
strcpy_P():
   1aeaa:	fb 01       	movw	r30, r22
   1aeac:	dc 01       	movw	r26, r24
   1aeae:	05 90       	lpm	r0, Z+
   1aeb0:	0d 92       	st	X+, r0
   1aeb2:	00 20       	and	r0, r0
   1aeb4:	e1 f7       	brne	.-8      	; 0x1aeae <strcpy_P+0x4>
   1aeb6:	08 95       	ret

0001aeb8 <strtok>:
strtok():
   1aeb8:	4e ed       	ldi	r20, 0xDE	; 222
   1aeba:	58 e0       	ldi	r21, 0x08	; 8
   1aebc:	0c 94 ac d7 	jmp	0x1af58	; 0x1af58 <strtok_r>

0001aec0 <memcpy>:
memcpy():
   1aec0:	fb 01       	movw	r30, r22
   1aec2:	dc 01       	movw	r26, r24
   1aec4:	02 c0       	rjmp	.+4      	; 0x1aeca <memcpy+0xa>
   1aec6:	01 90       	ld	r0, Z+
   1aec8:	0d 92       	st	X+, r0
   1aeca:	41 50       	subi	r20, 0x01	; 1
   1aecc:	50 40       	sbci	r21, 0x00	; 0
   1aece:	d8 f7       	brcc	.-10     	; 0x1aec6 <memcpy+0x6>
   1aed0:	08 95       	ret

0001aed2 <strcat>:
strcat():
   1aed2:	fb 01       	movw	r30, r22
   1aed4:	dc 01       	movw	r26, r24
   1aed6:	0d 90       	ld	r0, X+
   1aed8:	00 20       	and	r0, r0
   1aeda:	e9 f7       	brne	.-6      	; 0x1aed6 <strcat+0x4>
   1aedc:	11 97       	sbiw	r26, 0x01	; 1
   1aede:	01 90       	ld	r0, Z+
   1aee0:	0d 92       	st	X+, r0
   1aee2:	00 20       	and	r0, r0
   1aee4:	e1 f7       	brne	.-8      	; 0x1aede <strcat+0xc>
   1aee6:	08 95       	ret

0001aee8 <strchr>:
strchr():
   1aee8:	fc 01       	movw	r30, r24
   1aeea:	81 91       	ld	r24, Z+
   1aeec:	86 17       	cp	r24, r22
   1aeee:	21 f0       	breq	.+8      	; 0x1aef8 <strchr+0x10>
   1aef0:	88 23       	and	r24, r24
   1aef2:	d9 f7       	brne	.-10     	; 0x1aeea <strchr+0x2>
   1aef4:	99 27       	eor	r25, r25
   1aef6:	08 95       	ret
   1aef8:	31 97       	sbiw	r30, 0x01	; 1
   1aefa:	cf 01       	movw	r24, r30
   1aefc:	08 95       	ret

0001aefe <strcmp>:
strcmp():
   1aefe:	fb 01       	movw	r30, r22
   1af00:	dc 01       	movw	r26, r24
   1af02:	8d 91       	ld	r24, X+
   1af04:	01 90       	ld	r0, Z+
   1af06:	80 19       	sub	r24, r0
   1af08:	01 10       	cpse	r0, r1
   1af0a:	d9 f3       	breq	.-10     	; 0x1af02 <strcmp+0x4>
   1af0c:	99 0b       	sbc	r25, r25
   1af0e:	08 95       	ret

0001af10 <strcpy>:
strcpy():
   1af10:	fb 01       	movw	r30, r22
   1af12:	dc 01       	movw	r26, r24
   1af14:	01 90       	ld	r0, Z+
   1af16:	0d 92       	st	X+, r0
   1af18:	00 20       	and	r0, r0
   1af1a:	e1 f7       	brne	.-8      	; 0x1af14 <strcpy+0x4>
   1af1c:	08 95       	ret

0001af1e <strncmp>:
strncmp():
   1af1e:	fb 01       	movw	r30, r22
   1af20:	dc 01       	movw	r26, r24
   1af22:	41 50       	subi	r20, 0x01	; 1
   1af24:	50 40       	sbci	r21, 0x00	; 0
   1af26:	30 f0       	brcs	.+12     	; 0x1af34 <strncmp+0x16>
   1af28:	8d 91       	ld	r24, X+
   1af2a:	01 90       	ld	r0, Z+
   1af2c:	80 19       	sub	r24, r0
   1af2e:	19 f4       	brne	.+6      	; 0x1af36 <strncmp+0x18>
   1af30:	00 20       	and	r0, r0
   1af32:	b9 f7       	brne	.-18     	; 0x1af22 <strncmp+0x4>
   1af34:	88 1b       	sub	r24, r24
   1af36:	99 0b       	sbc	r25, r25
   1af38:	08 95       	ret

0001af3a <strncpy>:
strncpy():
   1af3a:	fb 01       	movw	r30, r22
   1af3c:	dc 01       	movw	r26, r24
   1af3e:	41 50       	subi	r20, 0x01	; 1
   1af40:	50 40       	sbci	r21, 0x00	; 0
   1af42:	48 f0       	brcs	.+18     	; 0x1af56 <strncpy+0x1c>
   1af44:	01 90       	ld	r0, Z+
   1af46:	0d 92       	st	X+, r0
   1af48:	00 20       	and	r0, r0
   1af4a:	c9 f7       	brne	.-14     	; 0x1af3e <strncpy+0x4>
   1af4c:	01 c0       	rjmp	.+2      	; 0x1af50 <strncpy+0x16>
   1af4e:	1d 92       	st	X+, r1
   1af50:	41 50       	subi	r20, 0x01	; 1
   1af52:	50 40       	sbci	r21, 0x00	; 0
   1af54:	e0 f7       	brcc	.-8      	; 0x1af4e <strncpy+0x14>
   1af56:	08 95       	ret

0001af58 <strtok_r>:
strtok_r():
   1af58:	fa 01       	movw	r30, r20
   1af5a:	a1 91       	ld	r26, Z+
   1af5c:	b0 81       	ld	r27, Z
   1af5e:	00 97       	sbiw	r24, 0x00	; 0
   1af60:	19 f4       	brne	.+6      	; 0x1af68 <strtok_r+0x10>
   1af62:	10 97       	sbiw	r26, 0x00	; 0
   1af64:	e1 f0       	breq	.+56     	; 0x1af9e <strtok_r+0x46>
   1af66:	cd 01       	movw	r24, r26
   1af68:	dc 01       	movw	r26, r24
   1af6a:	cd 01       	movw	r24, r26
   1af6c:	0d 90       	ld	r0, X+
   1af6e:	00 20       	and	r0, r0
   1af70:	11 f4       	brne	.+4      	; 0x1af76 <strtok_r+0x1e>
   1af72:	c0 01       	movw	r24, r0
   1af74:	13 c0       	rjmp	.+38     	; 0x1af9c <strtok_r+0x44>
   1af76:	fb 01       	movw	r30, r22
   1af78:	21 91       	ld	r18, Z+
   1af7a:	22 23       	and	r18, r18
   1af7c:	19 f0       	breq	.+6      	; 0x1af84 <strtok_r+0x2c>
   1af7e:	20 15       	cp	r18, r0
   1af80:	d9 f7       	brne	.-10     	; 0x1af78 <strtok_r+0x20>
   1af82:	f3 cf       	rjmp	.-26     	; 0x1af6a <strtok_r+0x12>
   1af84:	fb 01       	movw	r30, r22
   1af86:	21 91       	ld	r18, Z+
   1af88:	20 15       	cp	r18, r0
   1af8a:	19 f4       	brne	.+6      	; 0x1af92 <strtok_r+0x3a>
   1af8c:	1e 92       	st	-X, r1
   1af8e:	11 96       	adiw	r26, 0x01	; 1
   1af90:	06 c0       	rjmp	.+12     	; 0x1af9e <strtok_r+0x46>
   1af92:	22 23       	and	r18, r18
   1af94:	c1 f7       	brne	.-16     	; 0x1af86 <strtok_r+0x2e>
   1af96:	0d 90       	ld	r0, X+
   1af98:	00 20       	and	r0, r0
   1af9a:	a1 f7       	brne	.-24     	; 0x1af84 <strtok_r+0x2c>
   1af9c:	d0 01       	movw	r26, r0
   1af9e:	fa 01       	movw	r30, r20
   1afa0:	a1 93       	st	Z+, r26
   1afa2:	b0 83       	st	Z, r27
   1afa4:	08 95       	ret

0001afa6 <itoa>:
itoa():
   1afa6:	45 32       	cpi	r20, 0x25	; 37
   1afa8:	51 05       	cpc	r21, r1
   1afaa:	20 f4       	brcc	.+8      	; 0x1afb4 <itoa+0xe>
   1afac:	42 30       	cpi	r20, 0x02	; 2
   1afae:	10 f0       	brcs	.+4      	; 0x1afb4 <itoa+0xe>
   1afb0:	0c 94 de d7 	jmp	0x1afbc	; 0x1afbc <__itoa_ncheck>
   1afb4:	fb 01       	movw	r30, r22
   1afb6:	10 82       	st	Z, r1
   1afb8:	cb 01       	movw	r24, r22
   1afba:	08 95       	ret

0001afbc <__itoa_ncheck>:
__itoa_ncheck():
   1afbc:	bb 27       	eor	r27, r27
   1afbe:	4a 30       	cpi	r20, 0x0A	; 10
   1afc0:	31 f4       	brne	.+12     	; 0x1afce <__itoa_ncheck+0x12>
   1afc2:	99 23       	and	r25, r25
   1afc4:	22 f4       	brpl	.+8      	; 0x1afce <__itoa_ncheck+0x12>
   1afc6:	bd e2       	ldi	r27, 0x2D	; 45
   1afc8:	90 95       	com	r25
   1afca:	81 95       	neg	r24
   1afcc:	9f 4f       	sbci	r25, 0xFF	; 255
   1afce:	0c 94 f2 d7 	jmp	0x1afe4	; 0x1afe4 <__utoa_common>

0001afd2 <__mulhi_const_10>:
__mulhi_const_10():
   1afd2:	7a e0       	ldi	r23, 0x0A	; 10
   1afd4:	97 9f       	mul	r25, r23
   1afd6:	90 2d       	mov	r25, r0
   1afd8:	87 9f       	mul	r24, r23
   1afda:	80 2d       	mov	r24, r0
   1afdc:	91 0d       	add	r25, r1
   1afde:	11 24       	eor	r1, r1
   1afe0:	08 95       	ret

0001afe2 <__utoa_ncheck>:
__utoa_ncheck():
   1afe2:	bb 27       	eor	r27, r27

0001afe4 <__utoa_common>:
   1afe4:	fb 01       	movw	r30, r22
   1afe6:	55 27       	eor	r21, r21
   1afe8:	aa 27       	eor	r26, r26
   1afea:	88 0f       	add	r24, r24
   1afec:	99 1f       	adc	r25, r25
   1afee:	aa 1f       	adc	r26, r26
   1aff0:	a4 17       	cp	r26, r20
   1aff2:	10 f0       	brcs	.+4      	; 0x1aff8 <__utoa_common+0x14>
   1aff4:	a4 1b       	sub	r26, r20
   1aff6:	83 95       	inc	r24
   1aff8:	50 51       	subi	r21, 0x10	; 16
   1affa:	b9 f7       	brne	.-18     	; 0x1afea <__utoa_common+0x6>
   1affc:	a0 5d       	subi	r26, 0xD0	; 208
   1affe:	aa 33       	cpi	r26, 0x3A	; 58
   1b000:	08 f0       	brcs	.+2      	; 0x1b004 <__utoa_common+0x20>
   1b002:	a9 5d       	subi	r26, 0xD9	; 217
   1b004:	a1 93       	st	Z+, r26
   1b006:	00 97       	sbiw	r24, 0x00	; 0
   1b008:	79 f7       	brne	.-34     	; 0x1afe8 <__utoa_common+0x4>
   1b00a:	b1 11       	cpse	r27, r1
   1b00c:	b1 93       	st	Z+, r27
   1b00e:	11 92       	st	Z+, r1
   1b010:	cb 01       	movw	r24, r22
   1b012:	0c 94 ca de 	jmp	0x1bd94	; 0x1bd94 <strrev>

0001b016 <fdevopen>:
fdevopen():
   1b016:	0f 93       	push	r16
   1b018:	1f 93       	push	r17
   1b01a:	cf 93       	push	r28
   1b01c:	df 93       	push	r29
   1b01e:	00 97       	sbiw	r24, 0x00	; 0
   1b020:	59 f4       	brne	.+22     	; 0x1b038 <fdevopen+0x22>
   1b022:	61 15       	cp	r22, r1
   1b024:	71 05       	cpc	r23, r1
   1b026:	41 f4       	brne	.+16     	; 0x1b038 <fdevopen+0x22>
   1b028:	f0 e0       	ldi	r31, 0x00	; 0
   1b02a:	e0 e0       	ldi	r30, 0x00	; 0
   1b02c:	cf 01       	movw	r24, r30
   1b02e:	df 91       	pop	r29
   1b030:	cf 91       	pop	r28
   1b032:	1f 91       	pop	r17
   1b034:	0f 91       	pop	r16
   1b036:	08 95       	ret
   1b038:	8b 01       	movw	r16, r22
   1b03a:	ec 01       	movw	r28, r24
   1b03c:	6e e0       	ldi	r22, 0x0E	; 14
   1b03e:	70 e0       	ldi	r23, 0x00	; 0
   1b040:	81 e0       	ldi	r24, 0x01	; 1
   1b042:	90 e0       	ldi	r25, 0x00	; 0
   1b044:	0e 94 c7 da 	call	0x1b58e	; 0x1b58e <calloc>
   1b048:	fc 01       	movw	r30, r24
   1b04a:	89 2b       	or	r24, r25
   1b04c:	69 f3       	breq	.-38     	; 0x1b028 <fdevopen+0x12>
   1b04e:	80 e8       	ldi	r24, 0x80	; 128
   1b050:	83 83       	std	Z+3, r24	; 0x03
   1b052:	01 15       	cp	r16, r1
   1b054:	11 05       	cpc	r17, r1
   1b056:	71 f0       	breq	.+28     	; 0x1b074 <fdevopen+0x5e>
   1b058:	13 87       	std	Z+11, r17	; 0x0b
   1b05a:	02 87       	std	Z+10, r16	; 0x0a
   1b05c:	81 e8       	ldi	r24, 0x81	; 129
   1b05e:	83 83       	std	Z+3, r24	; 0x03
   1b060:	80 91 35 14 	lds	r24, 0x1435	; 0x801435 <__iob>
   1b064:	90 91 36 14 	lds	r25, 0x1436	; 0x801436 <__iob+0x1>
   1b068:	89 2b       	or	r24, r25
   1b06a:	21 f4       	brne	.+8      	; 0x1b074 <fdevopen+0x5e>
   1b06c:	f0 93 36 14 	sts	0x1436, r31	; 0x801436 <__iob+0x1>
   1b070:	e0 93 35 14 	sts	0x1435, r30	; 0x801435 <__iob>
   1b074:	20 97       	sbiw	r28, 0x00	; 0
   1b076:	d1 f2       	breq	.-76     	; 0x1b02c <fdevopen+0x16>
   1b078:	d1 87       	std	Z+9, r29	; 0x09
   1b07a:	c0 87       	std	Z+8, r28	; 0x08
   1b07c:	83 81       	ldd	r24, Z+3	; 0x03
   1b07e:	82 60       	ori	r24, 0x02	; 2
   1b080:	83 83       	std	Z+3, r24	; 0x03
   1b082:	80 91 37 14 	lds	r24, 0x1437	; 0x801437 <__iob+0x2>
   1b086:	90 91 38 14 	lds	r25, 0x1438	; 0x801438 <__iob+0x3>
   1b08a:	89 2b       	or	r24, r25
   1b08c:	79 f6       	brne	.-98     	; 0x1b02c <fdevopen+0x16>
   1b08e:	f0 93 38 14 	sts	0x1438, r31	; 0x801438 <__iob+0x3>
   1b092:	e0 93 37 14 	sts	0x1437, r30	; 0x801437 <__iob+0x2>
   1b096:	80 91 39 14 	lds	r24, 0x1439	; 0x801439 <__iob+0x4>
   1b09a:	90 91 3a 14 	lds	r25, 0x143A	; 0x80143a <__iob+0x5>
   1b09e:	89 2b       	or	r24, r25
   1b0a0:	29 f6       	brne	.-118    	; 0x1b02c <fdevopen+0x16>
   1b0a2:	f0 93 3a 14 	sts	0x143A, r31	; 0x80143a <__iob+0x5>
   1b0a6:	e0 93 39 14 	sts	0x1439, r30	; 0x801439 <__iob+0x4>
   1b0aa:	c0 cf       	rjmp	.-128    	; 0x1b02c <fdevopen+0x16>

0001b0ac <printf>:
printf():
   1b0ac:	cf 93       	push	r28
   1b0ae:	df 93       	push	r29
   1b0b0:	cd b7       	in	r28, 0x3d	; 61
   1b0b2:	de b7       	in	r29, 0x3e	; 62
   1b0b4:	ae 01       	movw	r20, r28
   1b0b6:	4a 5f       	subi	r20, 0xFA	; 250
   1b0b8:	5f 4f       	sbci	r21, 0xFF	; 255
   1b0ba:	fa 01       	movw	r30, r20
   1b0bc:	61 91       	ld	r22, Z+
   1b0be:	71 91       	ld	r23, Z+
   1b0c0:	af 01       	movw	r20, r30
   1b0c2:	80 91 37 14 	lds	r24, 0x1437	; 0x801437 <__iob+0x2>
   1b0c6:	90 91 38 14 	lds	r25, 0x1438	; 0x801438 <__iob+0x3>
   1b0ca:	0e 94 c5 d8 	call	0x1b18a	; 0x1b18a <vfprintf>
   1b0ce:	df 91       	pop	r29
   1b0d0:	cf 91       	pop	r28
   1b0d2:	08 95       	ret

0001b0d4 <puts>:
puts():
   1b0d4:	0f 93       	push	r16
   1b0d6:	1f 93       	push	r17
   1b0d8:	cf 93       	push	r28
   1b0da:	df 93       	push	r29
   1b0dc:	e0 91 37 14 	lds	r30, 0x1437	; 0x801437 <__iob+0x2>
   1b0e0:	f0 91 38 14 	lds	r31, 0x1438	; 0x801438 <__iob+0x3>
   1b0e4:	23 81       	ldd	r18, Z+3	; 0x03
   1b0e6:	ec 01       	movw	r28, r24
   1b0e8:	10 e0       	ldi	r17, 0x00	; 0
   1b0ea:	00 e0       	ldi	r16, 0x00	; 0
   1b0ec:	21 fd       	sbrc	r18, 1
   1b0ee:	08 c0       	rjmp	.+16     	; 0x1b100 <puts+0x2c>
   1b0f0:	0f ef       	ldi	r16, 0xFF	; 255
   1b0f2:	1f ef       	ldi	r17, 0xFF	; 255
   1b0f4:	14 c0       	rjmp	.+40     	; 0x1b11e <puts+0x4a>
   1b0f6:	19 95       	eicall
   1b0f8:	89 2b       	or	r24, r25
   1b0fa:	11 f0       	breq	.+4      	; 0x1b100 <puts+0x2c>
   1b0fc:	0f ef       	ldi	r16, 0xFF	; 255
   1b0fe:	1f ef       	ldi	r17, 0xFF	; 255
   1b100:	89 91       	ld	r24, Y+
   1b102:	60 91 37 14 	lds	r22, 0x1437	; 0x801437 <__iob+0x2>
   1b106:	70 91 38 14 	lds	r23, 0x1438	; 0x801438 <__iob+0x3>
   1b10a:	db 01       	movw	r26, r22
   1b10c:	18 96       	adiw	r26, 0x08	; 8
   1b10e:	ed 91       	ld	r30, X+
   1b110:	fc 91       	ld	r31, X
   1b112:	81 11       	cpse	r24, r1
   1b114:	f0 cf       	rjmp	.-32     	; 0x1b0f6 <puts+0x22>
   1b116:	8a e0       	ldi	r24, 0x0A	; 10
   1b118:	19 95       	eicall
   1b11a:	89 2b       	or	r24, r25
   1b11c:	49 f7       	brne	.-46     	; 0x1b0f0 <puts+0x1c>
   1b11e:	c8 01       	movw	r24, r16
   1b120:	df 91       	pop	r29
   1b122:	cf 91       	pop	r28
   1b124:	1f 91       	pop	r17
   1b126:	0f 91       	pop	r16
   1b128:	08 95       	ret

0001b12a <sprintf>:
sprintf():
   1b12a:	0f 93       	push	r16
   1b12c:	1f 93       	push	r17
   1b12e:	cf 93       	push	r28
   1b130:	df 93       	push	r29
   1b132:	cd b7       	in	r28, 0x3d	; 61
   1b134:	de b7       	in	r29, 0x3e	; 62
   1b136:	2e 97       	sbiw	r28, 0x0e	; 14
   1b138:	0f b6       	in	r0, 0x3f	; 63
   1b13a:	f8 94       	cli
   1b13c:	de bf       	out	0x3e, r29	; 62
   1b13e:	0f be       	out	0x3f, r0	; 63
   1b140:	cd bf       	out	0x3d, r28	; 61
   1b142:	0e 89       	ldd	r16, Y+22	; 0x16
   1b144:	1f 89       	ldd	r17, Y+23	; 0x17
   1b146:	86 e0       	ldi	r24, 0x06	; 6
   1b148:	8c 83       	std	Y+4, r24	; 0x04
   1b14a:	1a 83       	std	Y+2, r17	; 0x02
   1b14c:	09 83       	std	Y+1, r16	; 0x01
   1b14e:	8f ef       	ldi	r24, 0xFF	; 255
   1b150:	9f e7       	ldi	r25, 0x7F	; 127
   1b152:	9e 83       	std	Y+6, r25	; 0x06
   1b154:	8d 83       	std	Y+5, r24	; 0x05
   1b156:	ae 01       	movw	r20, r28
   1b158:	46 5e       	subi	r20, 0xE6	; 230
   1b15a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b15c:	68 8d       	ldd	r22, Y+24	; 0x18
   1b15e:	79 8d       	ldd	r23, Y+25	; 0x19
   1b160:	ce 01       	movw	r24, r28
   1b162:	01 96       	adiw	r24, 0x01	; 1
   1b164:	0e 94 c5 d8 	call	0x1b18a	; 0x1b18a <vfprintf>
   1b168:	2f 81       	ldd	r18, Y+7	; 0x07
   1b16a:	38 85       	ldd	r19, Y+8	; 0x08
   1b16c:	02 0f       	add	r16, r18
   1b16e:	13 1f       	adc	r17, r19
   1b170:	f8 01       	movw	r30, r16
   1b172:	10 82       	st	Z, r1
   1b174:	2e 96       	adiw	r28, 0x0e	; 14
   1b176:	0f b6       	in	r0, 0x3f	; 63
   1b178:	f8 94       	cli
   1b17a:	de bf       	out	0x3e, r29	; 62
   1b17c:	0f be       	out	0x3f, r0	; 63
   1b17e:	cd bf       	out	0x3d, r28	; 61
   1b180:	df 91       	pop	r29
   1b182:	cf 91       	pop	r28
   1b184:	1f 91       	pop	r17
   1b186:	0f 91       	pop	r16
   1b188:	08 95       	ret

0001b18a <vfprintf>:
vfprintf():
   1b18a:	2f 92       	push	r2
   1b18c:	3f 92       	push	r3
   1b18e:	4f 92       	push	r4
   1b190:	5f 92       	push	r5
   1b192:	6f 92       	push	r6
   1b194:	7f 92       	push	r7
   1b196:	8f 92       	push	r8
   1b198:	9f 92       	push	r9
   1b19a:	af 92       	push	r10
   1b19c:	bf 92       	push	r11
   1b19e:	cf 92       	push	r12
   1b1a0:	df 92       	push	r13
   1b1a2:	ef 92       	push	r14
   1b1a4:	ff 92       	push	r15
   1b1a6:	0f 93       	push	r16
   1b1a8:	1f 93       	push	r17
   1b1aa:	cf 93       	push	r28
   1b1ac:	df 93       	push	r29
   1b1ae:	00 d0       	rcall	.+0      	; 0x1b1b0 <vfprintf+0x26>
   1b1b0:	00 d0       	rcall	.+0      	; 0x1b1b2 <vfprintf+0x28>
   1b1b2:	00 d0       	rcall	.+0      	; 0x1b1b4 <vfprintf+0x2a>
   1b1b4:	1f 92       	push	r1
   1b1b6:	1f 92       	push	r1
   1b1b8:	cd b7       	in	r28, 0x3d	; 61
   1b1ba:	de b7       	in	r29, 0x3e	; 62
   1b1bc:	7c 01       	movw	r14, r24
   1b1be:	3b 01       	movw	r6, r22
   1b1c0:	8a 01       	movw	r16, r20
   1b1c2:	fc 01       	movw	r30, r24
   1b1c4:	17 82       	std	Z+7, r1	; 0x07
   1b1c6:	16 82       	std	Z+6, r1	; 0x06
   1b1c8:	83 81       	ldd	r24, Z+3	; 0x03
   1b1ca:	81 ff       	sbrs	r24, 1
   1b1cc:	dd c1       	rjmp	.+954    	; 0x1b588 <vfprintf+0x3fe>
   1b1ce:	ce 01       	movw	r24, r28
   1b1d0:	01 96       	adiw	r24, 0x01	; 1
   1b1d2:	5c 01       	movw	r10, r24
   1b1d4:	f7 01       	movw	r30, r14
   1b1d6:	93 81       	ldd	r25, Z+3	; 0x03
   1b1d8:	f3 01       	movw	r30, r6
   1b1da:	93 fd       	sbrc	r25, 3
   1b1dc:	85 91       	lpm	r24, Z+
   1b1de:	93 ff       	sbrs	r25, 3
   1b1e0:	81 91       	ld	r24, Z+
   1b1e2:	3f 01       	movw	r6, r30
   1b1e4:	88 23       	and	r24, r24
   1b1e6:	09 f4       	brne	.+2      	; 0x1b1ea <vfprintf+0x60>
   1b1e8:	53 c1       	rjmp	.+678    	; 0x1b490 <vfprintf+0x306>
   1b1ea:	85 32       	cpi	r24, 0x25	; 37
   1b1ec:	39 f4       	brne	.+14     	; 0x1b1fc <vfprintf+0x72>
   1b1ee:	93 fd       	sbrc	r25, 3
   1b1f0:	85 91       	lpm	r24, Z+
   1b1f2:	93 ff       	sbrs	r25, 3
   1b1f4:	81 91       	ld	r24, Z+
   1b1f6:	3f 01       	movw	r6, r30
   1b1f8:	85 32       	cpi	r24, 0x25	; 37
   1b1fa:	29 f4       	brne	.+10     	; 0x1b206 <vfprintf+0x7c>
   1b1fc:	b7 01       	movw	r22, r14
   1b1fe:	90 e0       	ldi	r25, 0x00	; 0
   1b200:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b204:	e7 cf       	rjmp	.-50     	; 0x1b1d4 <vfprintf+0x4a>
   1b206:	91 2c       	mov	r9, r1
   1b208:	21 2c       	mov	r2, r1
   1b20a:	31 2c       	mov	r3, r1
   1b20c:	ff e1       	ldi	r31, 0x1F	; 31
   1b20e:	f3 15       	cp	r31, r3
   1b210:	38 f0       	brcs	.+14     	; 0x1b220 <vfprintf+0x96>
   1b212:	8b 32       	cpi	r24, 0x2B	; 43
   1b214:	11 f1       	breq	.+68     	; 0x1b25a <vfprintf+0xd0>
   1b216:	90 f4       	brcc	.+36     	; 0x1b23c <vfprintf+0xb2>
   1b218:	80 32       	cpi	r24, 0x20	; 32
   1b21a:	09 f1       	breq	.+66     	; 0x1b25e <vfprintf+0xd4>
   1b21c:	83 32       	cpi	r24, 0x23	; 35
   1b21e:	29 f1       	breq	.+74     	; 0x1b26a <vfprintf+0xe0>
   1b220:	37 fc       	sbrc	r3, 7
   1b222:	3c c0       	rjmp	.+120    	; 0x1b29c <vfprintf+0x112>
   1b224:	20 ed       	ldi	r18, 0xD0	; 208
   1b226:	28 0f       	add	r18, r24
   1b228:	2a 30       	cpi	r18, 0x0A	; 10
   1b22a:	50 f5       	brcc	.+84     	; 0x1b280 <vfprintf+0xf6>
   1b22c:	36 fe       	sbrs	r3, 6
   1b22e:	20 c0       	rjmp	.+64     	; 0x1b270 <vfprintf+0xe6>
   1b230:	8a e0       	ldi	r24, 0x0A	; 10
   1b232:	98 9e       	mul	r9, r24
   1b234:	20 0d       	add	r18, r0
   1b236:	11 24       	eor	r1, r1
   1b238:	92 2e       	mov	r9, r18
   1b23a:	06 c0       	rjmp	.+12     	; 0x1b248 <vfprintf+0xbe>
   1b23c:	8d 32       	cpi	r24, 0x2D	; 45
   1b23e:	91 f0       	breq	.+36     	; 0x1b264 <vfprintf+0xda>
   1b240:	80 33       	cpi	r24, 0x30	; 48
   1b242:	71 f7       	brne	.-36     	; 0x1b220 <vfprintf+0x96>
   1b244:	68 94       	set
   1b246:	30 f8       	bld	r3, 0
   1b248:	f3 01       	movw	r30, r6
   1b24a:	93 fd       	sbrc	r25, 3
   1b24c:	85 91       	lpm	r24, Z+
   1b24e:	93 ff       	sbrs	r25, 3
   1b250:	81 91       	ld	r24, Z+
   1b252:	3f 01       	movw	r6, r30
   1b254:	81 11       	cpse	r24, r1
   1b256:	da cf       	rjmp	.-76     	; 0x1b20c <vfprintf+0x82>
   1b258:	21 c0       	rjmp	.+66     	; 0x1b29c <vfprintf+0x112>
   1b25a:	68 94       	set
   1b25c:	31 f8       	bld	r3, 1
   1b25e:	68 94       	set
   1b260:	32 f8       	bld	r3, 2
   1b262:	f2 cf       	rjmp	.-28     	; 0x1b248 <vfprintf+0xbe>
   1b264:	68 94       	set
   1b266:	33 f8       	bld	r3, 3
   1b268:	ef cf       	rjmp	.-34     	; 0x1b248 <vfprintf+0xbe>
   1b26a:	68 94       	set
   1b26c:	34 f8       	bld	r3, 4
   1b26e:	ec cf       	rjmp	.-40     	; 0x1b248 <vfprintf+0xbe>
   1b270:	ea e0       	ldi	r30, 0x0A	; 10
   1b272:	2e 9e       	mul	r2, r30
   1b274:	20 0d       	add	r18, r0
   1b276:	11 24       	eor	r1, r1
   1b278:	22 2e       	mov	r2, r18
   1b27a:	68 94       	set
   1b27c:	35 f8       	bld	r3, 5
   1b27e:	e4 cf       	rjmp	.-56     	; 0x1b248 <vfprintf+0xbe>
   1b280:	8e 32       	cpi	r24, 0x2E	; 46
   1b282:	29 f4       	brne	.+10     	; 0x1b28e <vfprintf+0x104>
   1b284:	36 fc       	sbrc	r3, 6
   1b286:	04 c1       	rjmp	.+520    	; 0x1b490 <vfprintf+0x306>
   1b288:	68 94       	set
   1b28a:	36 f8       	bld	r3, 6
   1b28c:	dd cf       	rjmp	.-70     	; 0x1b248 <vfprintf+0xbe>
   1b28e:	8c 36       	cpi	r24, 0x6C	; 108
   1b290:	19 f4       	brne	.+6      	; 0x1b298 <vfprintf+0x10e>
   1b292:	68 94       	set
   1b294:	37 f8       	bld	r3, 7
   1b296:	d8 cf       	rjmp	.-80     	; 0x1b248 <vfprintf+0xbe>
   1b298:	88 36       	cpi	r24, 0x68	; 104
   1b29a:	b1 f2       	breq	.-84     	; 0x1b248 <vfprintf+0xbe>
   1b29c:	98 2f       	mov	r25, r24
   1b29e:	9f 7d       	andi	r25, 0xDF	; 223
   1b2a0:	95 54       	subi	r25, 0x45	; 69
   1b2a2:	93 30       	cpi	r25, 0x03	; 3
   1b2a4:	e0 f0       	brcs	.+56     	; 0x1b2de <vfprintf+0x154>
   1b2a6:	83 36       	cpi	r24, 0x63	; 99
   1b2a8:	a1 f1       	breq	.+104    	; 0x1b312 <vfprintf+0x188>
   1b2aa:	83 37       	cpi	r24, 0x73	; 115
   1b2ac:	c1 f1       	breq	.+112    	; 0x1b31e <vfprintf+0x194>
   1b2ae:	83 35       	cpi	r24, 0x53	; 83
   1b2b0:	09 f0       	breq	.+2      	; 0x1b2b4 <vfprintf+0x12a>
   1b2b2:	63 c0       	rjmp	.+198    	; 0x1b37a <vfprintf+0x1f0>
   1b2b4:	28 01       	movw	r4, r16
   1b2b6:	f2 e0       	ldi	r31, 0x02	; 2
   1b2b8:	4f 0e       	add	r4, r31
   1b2ba:	51 1c       	adc	r5, r1
   1b2bc:	f8 01       	movw	r30, r16
   1b2be:	c0 80       	ld	r12, Z
   1b2c0:	d1 80       	ldd	r13, Z+1	; 0x01
   1b2c2:	69 2d       	mov	r22, r9
   1b2c4:	70 e0       	ldi	r23, 0x00	; 0
   1b2c6:	36 fc       	sbrc	r3, 6
   1b2c8:	02 c0       	rjmp	.+4      	; 0x1b2ce <vfprintf+0x144>
   1b2ca:	6f ef       	ldi	r22, 0xFF	; 255
   1b2cc:	7f ef       	ldi	r23, 0xFF	; 255
   1b2ce:	c6 01       	movw	r24, r12
   1b2d0:	0e 94 ad de 	call	0x1bd5a	; 0x1bd5a <strnlen_P>
   1b2d4:	4c 01       	movw	r8, r24
   1b2d6:	68 94       	set
   1b2d8:	37 f8       	bld	r3, 7
   1b2da:	82 01       	movw	r16, r4
   1b2dc:	0a c0       	rjmp	.+20     	; 0x1b2f2 <vfprintf+0x168>
   1b2de:	0c 5f       	subi	r16, 0xFC	; 252
   1b2e0:	1f 4f       	sbci	r17, 0xFF	; 255
   1b2e2:	ff e3       	ldi	r31, 0x3F	; 63
   1b2e4:	f9 83       	std	Y+1, r31	; 0x01
   1b2e6:	88 24       	eor	r8, r8
   1b2e8:	83 94       	inc	r8
   1b2ea:	91 2c       	mov	r9, r1
   1b2ec:	65 01       	movw	r12, r10
   1b2ee:	e8 94       	clt
   1b2f0:	37 f8       	bld	r3, 7
   1b2f2:	33 fe       	sbrs	r3, 3
   1b2f4:	2d c0       	rjmp	.+90     	; 0x1b350 <vfprintf+0x1c6>
   1b2f6:	52 2c       	mov	r5, r2
   1b2f8:	81 14       	cp	r8, r1
   1b2fa:	91 04       	cpc	r9, r1
   1b2fc:	71 f5       	brne	.+92     	; 0x1b35a <vfprintf+0x1d0>
   1b2fe:	55 20       	and	r5, r5
   1b300:	09 f4       	brne	.+2      	; 0x1b304 <vfprintf+0x17a>
   1b302:	68 cf       	rjmp	.-304    	; 0x1b1d4 <vfprintf+0x4a>
   1b304:	b7 01       	movw	r22, r14
   1b306:	80 e2       	ldi	r24, 0x20	; 32
   1b308:	90 e0       	ldi	r25, 0x00	; 0
   1b30a:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b30e:	5a 94       	dec	r5
   1b310:	f6 cf       	rjmp	.-20     	; 0x1b2fe <vfprintf+0x174>
   1b312:	f8 01       	movw	r30, r16
   1b314:	80 81       	ld	r24, Z
   1b316:	89 83       	std	Y+1, r24	; 0x01
   1b318:	0e 5f       	subi	r16, 0xFE	; 254
   1b31a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b31c:	e4 cf       	rjmp	.-56     	; 0x1b2e6 <vfprintf+0x15c>
   1b31e:	28 01       	movw	r4, r16
   1b320:	f2 e0       	ldi	r31, 0x02	; 2
   1b322:	4f 0e       	add	r4, r31
   1b324:	51 1c       	adc	r5, r1
   1b326:	f8 01       	movw	r30, r16
   1b328:	c0 80       	ld	r12, Z
   1b32a:	d1 80       	ldd	r13, Z+1	; 0x01
   1b32c:	69 2d       	mov	r22, r9
   1b32e:	70 e0       	ldi	r23, 0x00	; 0
   1b330:	36 fc       	sbrc	r3, 6
   1b332:	02 c0       	rjmp	.+4      	; 0x1b338 <vfprintf+0x1ae>
   1b334:	6f ef       	ldi	r22, 0xFF	; 255
   1b336:	7f ef       	ldi	r23, 0xFF	; 255
   1b338:	c6 01       	movw	r24, r12
   1b33a:	0e 94 bf de 	call	0x1bd7e	; 0x1bd7e <strnlen>
   1b33e:	4c 01       	movw	r8, r24
   1b340:	82 01       	movw	r16, r4
   1b342:	d5 cf       	rjmp	.-86     	; 0x1b2ee <vfprintf+0x164>
   1b344:	b7 01       	movw	r22, r14
   1b346:	80 e2       	ldi	r24, 0x20	; 32
   1b348:	90 e0       	ldi	r25, 0x00	; 0
   1b34a:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b34e:	2a 94       	dec	r2
   1b350:	28 14       	cp	r2, r8
   1b352:	19 04       	cpc	r1, r9
   1b354:	09 f0       	breq	.+2      	; 0x1b358 <vfprintf+0x1ce>
   1b356:	b0 f7       	brcc	.-20     	; 0x1b344 <vfprintf+0x1ba>
   1b358:	ce cf       	rjmp	.-100    	; 0x1b2f6 <vfprintf+0x16c>
   1b35a:	f6 01       	movw	r30, r12
   1b35c:	37 fc       	sbrc	r3, 7
   1b35e:	85 91       	lpm	r24, Z+
   1b360:	37 fe       	sbrs	r3, 7
   1b362:	81 91       	ld	r24, Z+
   1b364:	6f 01       	movw	r12, r30
   1b366:	b7 01       	movw	r22, r14
   1b368:	90 e0       	ldi	r25, 0x00	; 0
   1b36a:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b36e:	51 10       	cpse	r5, r1
   1b370:	5a 94       	dec	r5
   1b372:	f1 e0       	ldi	r31, 0x01	; 1
   1b374:	8f 1a       	sub	r8, r31
   1b376:	91 08       	sbc	r9, r1
   1b378:	bf cf       	rjmp	.-130    	; 0x1b2f8 <vfprintf+0x16e>
   1b37a:	84 36       	cpi	r24, 0x64	; 100
   1b37c:	19 f0       	breq	.+6      	; 0x1b384 <vfprintf+0x1fa>
   1b37e:	89 36       	cpi	r24, 0x69	; 105
   1b380:	09 f0       	breq	.+2      	; 0x1b384 <vfprintf+0x1fa>
   1b382:	77 c0       	rjmp	.+238    	; 0x1b472 <vfprintf+0x2e8>
   1b384:	f8 01       	movw	r30, r16
   1b386:	37 fe       	sbrs	r3, 7
   1b388:	6b c0       	rjmp	.+214    	; 0x1b460 <vfprintf+0x2d6>
   1b38a:	60 81       	ld	r22, Z
   1b38c:	71 81       	ldd	r23, Z+1	; 0x01
   1b38e:	82 81       	ldd	r24, Z+2	; 0x02
   1b390:	93 81       	ldd	r25, Z+3	; 0x03
   1b392:	0c 5f       	subi	r16, 0xFC	; 252
   1b394:	1f 4f       	sbci	r17, 0xFF	; 255
   1b396:	f3 2d       	mov	r31, r3
   1b398:	ff 76       	andi	r31, 0x6F	; 111
   1b39a:	3f 2e       	mov	r3, r31
   1b39c:	97 ff       	sbrs	r25, 7
   1b39e:	09 c0       	rjmp	.+18     	; 0x1b3b2 <vfprintf+0x228>
   1b3a0:	90 95       	com	r25
   1b3a2:	80 95       	com	r24
   1b3a4:	70 95       	com	r23
   1b3a6:	61 95       	neg	r22
   1b3a8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b3aa:	8f 4f       	sbci	r24, 0xFF	; 255
   1b3ac:	9f 4f       	sbci	r25, 0xFF	; 255
   1b3ae:	68 94       	set
   1b3b0:	37 f8       	bld	r3, 7
   1b3b2:	2a e0       	ldi	r18, 0x0A	; 10
   1b3b4:	30 e0       	ldi	r19, 0x00	; 0
   1b3b6:	a5 01       	movw	r20, r10
   1b3b8:	0e 94 0a df 	call	0x1be14	; 0x1be14 <__ultoa_invert>
   1b3bc:	c8 2e       	mov	r12, r24
   1b3be:	ca 18       	sub	r12, r10
   1b3c0:	8c 2c       	mov	r8, r12
   1b3c2:	43 2c       	mov	r4, r3
   1b3c4:	36 fe       	sbrs	r3, 6
   1b3c6:	0c c0       	rjmp	.+24     	; 0x1b3e0 <vfprintf+0x256>
   1b3c8:	e8 94       	clt
   1b3ca:	40 f8       	bld	r4, 0
   1b3cc:	c9 14       	cp	r12, r9
   1b3ce:	40 f4       	brcc	.+16     	; 0x1b3e0 <vfprintf+0x256>
   1b3d0:	34 fe       	sbrs	r3, 4
   1b3d2:	05 c0       	rjmp	.+10     	; 0x1b3de <vfprintf+0x254>
   1b3d4:	32 fc       	sbrc	r3, 2
   1b3d6:	03 c0       	rjmp	.+6      	; 0x1b3de <vfprintf+0x254>
   1b3d8:	f3 2d       	mov	r31, r3
   1b3da:	fe 7e       	andi	r31, 0xEE	; 238
   1b3dc:	4f 2e       	mov	r4, r31
   1b3de:	89 2c       	mov	r8, r9
   1b3e0:	44 fe       	sbrs	r4, 4
   1b3e2:	aa c0       	rjmp	.+340    	; 0x1b538 <vfprintf+0x3ae>
   1b3e4:	fe 01       	movw	r30, r28
   1b3e6:	ec 0d       	add	r30, r12
   1b3e8:	f1 1d       	adc	r31, r1
   1b3ea:	80 81       	ld	r24, Z
   1b3ec:	80 33       	cpi	r24, 0x30	; 48
   1b3ee:	09 f0       	breq	.+2      	; 0x1b3f2 <vfprintf+0x268>
   1b3f0:	9c c0       	rjmp	.+312    	; 0x1b52a <vfprintf+0x3a0>
   1b3f2:	24 2d       	mov	r18, r4
   1b3f4:	29 7e       	andi	r18, 0xE9	; 233
   1b3f6:	42 2e       	mov	r4, r18
   1b3f8:	84 2d       	mov	r24, r4
   1b3fa:	88 70       	andi	r24, 0x08	; 8
   1b3fc:	58 2e       	mov	r5, r24
   1b3fe:	43 fc       	sbrc	r4, 3
   1b400:	aa c0       	rjmp	.+340    	; 0x1b556 <vfprintf+0x3cc>
   1b402:	40 fe       	sbrs	r4, 0
   1b404:	a4 c0       	rjmp	.+328    	; 0x1b54e <vfprintf+0x3c4>
   1b406:	9c 2c       	mov	r9, r12
   1b408:	82 14       	cp	r8, r2
   1b40a:	18 f4       	brcc	.+6      	; 0x1b412 <vfprintf+0x288>
   1b40c:	2c 0c       	add	r2, r12
   1b40e:	92 2c       	mov	r9, r2
   1b410:	98 18       	sub	r9, r8
   1b412:	44 fe       	sbrs	r4, 4
   1b414:	a6 c0       	rjmp	.+332    	; 0x1b562 <vfprintf+0x3d8>
   1b416:	b7 01       	movw	r22, r14
   1b418:	80 e3       	ldi	r24, 0x30	; 48
   1b41a:	90 e0       	ldi	r25, 0x00	; 0
   1b41c:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b420:	42 fe       	sbrs	r4, 2
   1b422:	09 c0       	rjmp	.+18     	; 0x1b436 <vfprintf+0x2ac>
   1b424:	88 e7       	ldi	r24, 0x78	; 120
   1b426:	90 e0       	ldi	r25, 0x00	; 0
   1b428:	41 fe       	sbrs	r4, 1
   1b42a:	02 c0       	rjmp	.+4      	; 0x1b430 <vfprintf+0x2a6>
   1b42c:	88 e5       	ldi	r24, 0x58	; 88
   1b42e:	90 e0       	ldi	r25, 0x00	; 0
   1b430:	b7 01       	movw	r22, r14
   1b432:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b436:	c9 14       	cp	r12, r9
   1b438:	08 f4       	brcc	.+2      	; 0x1b43c <vfprintf+0x2b2>
   1b43a:	9f c0       	rjmp	.+318    	; 0x1b57a <vfprintf+0x3f0>
   1b43c:	ca 94       	dec	r12
   1b43e:	d1 2c       	mov	r13, r1
   1b440:	9f ef       	ldi	r25, 0xFF	; 255
   1b442:	c9 1a       	sub	r12, r25
   1b444:	d9 0a       	sbc	r13, r25
   1b446:	ca 0c       	add	r12, r10
   1b448:	db 1c       	adc	r13, r11
   1b44a:	f6 01       	movw	r30, r12
   1b44c:	82 91       	ld	r24, -Z
   1b44e:	6f 01       	movw	r12, r30
   1b450:	b7 01       	movw	r22, r14
   1b452:	90 e0       	ldi	r25, 0x00	; 0
   1b454:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b458:	ac 14       	cp	r10, r12
   1b45a:	bd 04       	cpc	r11, r13
   1b45c:	b1 f7       	brne	.-20     	; 0x1b44a <vfprintf+0x2c0>
   1b45e:	4f cf       	rjmp	.-354    	; 0x1b2fe <vfprintf+0x174>
   1b460:	60 81       	ld	r22, Z
   1b462:	71 81       	ldd	r23, Z+1	; 0x01
   1b464:	07 2e       	mov	r0, r23
   1b466:	00 0c       	add	r0, r0
   1b468:	88 0b       	sbc	r24, r24
   1b46a:	99 0b       	sbc	r25, r25
   1b46c:	0e 5f       	subi	r16, 0xFE	; 254
   1b46e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b470:	92 cf       	rjmp	.-220    	; 0x1b396 <vfprintf+0x20c>
   1b472:	d3 2c       	mov	r13, r3
   1b474:	e8 94       	clt
   1b476:	d4 f8       	bld	r13, 4
   1b478:	2a e0       	ldi	r18, 0x0A	; 10
   1b47a:	30 e0       	ldi	r19, 0x00	; 0
   1b47c:	85 37       	cpi	r24, 0x75	; 117
   1b47e:	e1 f1       	breq	.+120    	; 0x1b4f8 <vfprintf+0x36e>
   1b480:	23 2d       	mov	r18, r3
   1b482:	29 7f       	andi	r18, 0xF9	; 249
   1b484:	d2 2e       	mov	r13, r18
   1b486:	8f 36       	cpi	r24, 0x6F	; 111
   1b488:	a9 f1       	breq	.+106    	; 0x1b4f4 <vfprintf+0x36a>
   1b48a:	f0 f4       	brcc	.+60     	; 0x1b4c8 <vfprintf+0x33e>
   1b48c:	88 35       	cpi	r24, 0x58	; 88
   1b48e:	51 f1       	breq	.+84     	; 0x1b4e4 <vfprintf+0x35a>
   1b490:	f7 01       	movw	r30, r14
   1b492:	86 81       	ldd	r24, Z+6	; 0x06
   1b494:	97 81       	ldd	r25, Z+7	; 0x07
   1b496:	2b 96       	adiw	r28, 0x0b	; 11
   1b498:	0f b6       	in	r0, 0x3f	; 63
   1b49a:	f8 94       	cli
   1b49c:	de bf       	out	0x3e, r29	; 62
   1b49e:	0f be       	out	0x3f, r0	; 63
   1b4a0:	cd bf       	out	0x3d, r28	; 61
   1b4a2:	df 91       	pop	r29
   1b4a4:	cf 91       	pop	r28
   1b4a6:	1f 91       	pop	r17
   1b4a8:	0f 91       	pop	r16
   1b4aa:	ff 90       	pop	r15
   1b4ac:	ef 90       	pop	r14
   1b4ae:	df 90       	pop	r13
   1b4b0:	cf 90       	pop	r12
   1b4b2:	bf 90       	pop	r11
   1b4b4:	af 90       	pop	r10
   1b4b6:	9f 90       	pop	r9
   1b4b8:	8f 90       	pop	r8
   1b4ba:	7f 90       	pop	r7
   1b4bc:	6f 90       	pop	r6
   1b4be:	5f 90       	pop	r5
   1b4c0:	4f 90       	pop	r4
   1b4c2:	3f 90       	pop	r3
   1b4c4:	2f 90       	pop	r2
   1b4c6:	08 95       	ret
   1b4c8:	80 37       	cpi	r24, 0x70	; 112
   1b4ca:	49 f0       	breq	.+18     	; 0x1b4de <vfprintf+0x354>
   1b4cc:	88 37       	cpi	r24, 0x78	; 120
   1b4ce:	01 f7       	brne	.-64     	; 0x1b490 <vfprintf+0x306>
   1b4d0:	d4 fe       	sbrs	r13, 4
   1b4d2:	02 c0       	rjmp	.+4      	; 0x1b4d8 <vfprintf+0x34e>
   1b4d4:	68 94       	set
   1b4d6:	d2 f8       	bld	r13, 2
   1b4d8:	20 e1       	ldi	r18, 0x10	; 16
   1b4da:	30 e0       	ldi	r19, 0x00	; 0
   1b4dc:	0d c0       	rjmp	.+26     	; 0x1b4f8 <vfprintf+0x36e>
   1b4de:	68 94       	set
   1b4e0:	d4 f8       	bld	r13, 4
   1b4e2:	f6 cf       	rjmp	.-20     	; 0x1b4d0 <vfprintf+0x346>
   1b4e4:	34 fe       	sbrs	r3, 4
   1b4e6:	03 c0       	rjmp	.+6      	; 0x1b4ee <vfprintf+0x364>
   1b4e8:	82 2f       	mov	r24, r18
   1b4ea:	86 60       	ori	r24, 0x06	; 6
   1b4ec:	d8 2e       	mov	r13, r24
   1b4ee:	20 e1       	ldi	r18, 0x10	; 16
   1b4f0:	32 e0       	ldi	r19, 0x02	; 2
   1b4f2:	02 c0       	rjmp	.+4      	; 0x1b4f8 <vfprintf+0x36e>
   1b4f4:	28 e0       	ldi	r18, 0x08	; 8
   1b4f6:	30 e0       	ldi	r19, 0x00	; 0
   1b4f8:	f8 01       	movw	r30, r16
   1b4fa:	d7 fe       	sbrs	r13, 7
   1b4fc:	0f c0       	rjmp	.+30     	; 0x1b51c <vfprintf+0x392>
   1b4fe:	60 81       	ld	r22, Z
   1b500:	71 81       	ldd	r23, Z+1	; 0x01
   1b502:	82 81       	ldd	r24, Z+2	; 0x02
   1b504:	93 81       	ldd	r25, Z+3	; 0x03
   1b506:	0c 5f       	subi	r16, 0xFC	; 252
   1b508:	1f 4f       	sbci	r17, 0xFF	; 255
   1b50a:	a5 01       	movw	r20, r10
   1b50c:	0e 94 0a df 	call	0x1be14	; 0x1be14 <__ultoa_invert>
   1b510:	c8 2e       	mov	r12, r24
   1b512:	ca 18       	sub	r12, r10
   1b514:	3d 2c       	mov	r3, r13
   1b516:	e8 94       	clt
   1b518:	37 f8       	bld	r3, 7
   1b51a:	52 cf       	rjmp	.-348    	; 0x1b3c0 <vfprintf+0x236>
   1b51c:	60 81       	ld	r22, Z
   1b51e:	71 81       	ldd	r23, Z+1	; 0x01
   1b520:	90 e0       	ldi	r25, 0x00	; 0
   1b522:	80 e0       	ldi	r24, 0x00	; 0
   1b524:	0e 5f       	subi	r16, 0xFE	; 254
   1b526:	1f 4f       	sbci	r17, 0xFF	; 255
   1b528:	f0 cf       	rjmp	.-32     	; 0x1b50a <vfprintf+0x380>
   1b52a:	42 fc       	sbrc	r4, 2
   1b52c:	02 c0       	rjmp	.+4      	; 0x1b532 <vfprintf+0x3a8>
   1b52e:	83 94       	inc	r8
   1b530:	63 cf       	rjmp	.-314    	; 0x1b3f8 <vfprintf+0x26e>
   1b532:	83 94       	inc	r8
   1b534:	83 94       	inc	r8
   1b536:	60 cf       	rjmp	.-320    	; 0x1b3f8 <vfprintf+0x26e>
   1b538:	84 2d       	mov	r24, r4
   1b53a:	86 78       	andi	r24, 0x86	; 134
   1b53c:	09 f4       	brne	.+2      	; 0x1b540 <vfprintf+0x3b6>
   1b53e:	5c cf       	rjmp	.-328    	; 0x1b3f8 <vfprintf+0x26e>
   1b540:	f6 cf       	rjmp	.-20     	; 0x1b52e <vfprintf+0x3a4>
   1b542:	b7 01       	movw	r22, r14
   1b544:	80 e2       	ldi	r24, 0x20	; 32
   1b546:	90 e0       	ldi	r25, 0x00	; 0
   1b548:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b54c:	83 94       	inc	r8
   1b54e:	82 14       	cp	r8, r2
   1b550:	c0 f3       	brcs	.-16     	; 0x1b542 <vfprintf+0x3b8>
   1b552:	51 2c       	mov	r5, r1
   1b554:	5e cf       	rjmp	.-324    	; 0x1b412 <vfprintf+0x288>
   1b556:	52 2c       	mov	r5, r2
   1b558:	58 18       	sub	r5, r8
   1b55a:	82 14       	cp	r8, r2
   1b55c:	08 f4       	brcc	.+2      	; 0x1b560 <vfprintf+0x3d6>
   1b55e:	59 cf       	rjmp	.-334    	; 0x1b412 <vfprintf+0x288>
   1b560:	f8 cf       	rjmp	.-16     	; 0x1b552 <vfprintf+0x3c8>
   1b562:	84 2d       	mov	r24, r4
   1b564:	86 78       	andi	r24, 0x86	; 134
   1b566:	09 f4       	brne	.+2      	; 0x1b56a <vfprintf+0x3e0>
   1b568:	66 cf       	rjmp	.-308    	; 0x1b436 <vfprintf+0x2ac>
   1b56a:	8b e2       	ldi	r24, 0x2B	; 43
   1b56c:	41 fe       	sbrs	r4, 1
   1b56e:	80 e2       	ldi	r24, 0x20	; 32
   1b570:	47 fc       	sbrc	r4, 7
   1b572:	8d e2       	ldi	r24, 0x2D	; 45
   1b574:	b7 01       	movw	r22, r14
   1b576:	90 e0       	ldi	r25, 0x00	; 0
   1b578:	5c cf       	rjmp	.-328    	; 0x1b432 <vfprintf+0x2a8>
   1b57a:	b7 01       	movw	r22, r14
   1b57c:	80 e3       	ldi	r24, 0x30	; 48
   1b57e:	90 e0       	ldi	r25, 0x00	; 0
   1b580:	0e 94 da de 	call	0x1bdb4	; 0x1bdb4 <fputc>
   1b584:	9a 94       	dec	r9
   1b586:	57 cf       	rjmp	.-338    	; 0x1b436 <vfprintf+0x2ac>
   1b588:	8f ef       	ldi	r24, 0xFF	; 255
   1b58a:	9f ef       	ldi	r25, 0xFF	; 255
   1b58c:	84 cf       	rjmp	.-248    	; 0x1b496 <vfprintf+0x30c>

0001b58e <calloc>:
calloc():
   1b58e:	0f 93       	push	r16
   1b590:	1f 93       	push	r17
   1b592:	cf 93       	push	r28
   1b594:	df 93       	push	r29
   1b596:	86 9f       	mul	r24, r22
   1b598:	80 01       	movw	r16, r0
   1b59a:	87 9f       	mul	r24, r23
   1b59c:	10 0d       	add	r17, r0
   1b59e:	96 9f       	mul	r25, r22
   1b5a0:	10 0d       	add	r17, r0
   1b5a2:	11 24       	eor	r1, r1
   1b5a4:	c8 01       	movw	r24, r16
   1b5a6:	0e 94 11 d4 	call	0x1a822	; 0x1a822 <malloc>
   1b5aa:	ec 01       	movw	r28, r24
   1b5ac:	00 97       	sbiw	r24, 0x00	; 0
   1b5ae:	29 f0       	breq	.+10     	; 0x1b5ba <calloc+0x2c>
   1b5b0:	a8 01       	movw	r20, r16
   1b5b2:	70 e0       	ldi	r23, 0x00	; 0
   1b5b4:	60 e0       	ldi	r22, 0x00	; 0
   1b5b6:	0e 94 b8 de 	call	0x1bd70	; 0x1bd70 <memset>
   1b5ba:	ce 01       	movw	r24, r28
   1b5bc:	df 91       	pop	r29
   1b5be:	cf 91       	pop	r28
   1b5c0:	1f 91       	pop	r17
   1b5c2:	0f 91       	pop	r16
   1b5c4:	08 95       	ret

0001b5c6 <dtoa_prf>:
dtoa_prf():
   1b5c6:	8f 92       	push	r8
   1b5c8:	9f 92       	push	r9
   1b5ca:	af 92       	push	r10
   1b5cc:	bf 92       	push	r11
   1b5ce:	cf 92       	push	r12
   1b5d0:	df 92       	push	r13
   1b5d2:	ef 92       	push	r14
   1b5d4:	ff 92       	push	r15
   1b5d6:	0f 93       	push	r16
   1b5d8:	1f 93       	push	r17
   1b5da:	cf 93       	push	r28
   1b5dc:	df 93       	push	r29
   1b5de:	00 d0       	rcall	.+0      	; 0x1b5e0 <dtoa_prf+0x1a>
   1b5e0:	00 d0       	rcall	.+0      	; 0x1b5e2 <dtoa_prf+0x1c>
   1b5e2:	00 d0       	rcall	.+0      	; 0x1b5e4 <dtoa_prf+0x1e>
   1b5e4:	cd b7       	in	r28, 0x3d	; 61
   1b5e6:	de b7       	in	r29, 0x3e	; 62
   1b5e8:	6a 01       	movw	r12, r20
   1b5ea:	f2 2e       	mov	r15, r18
   1b5ec:	b0 2e       	mov	r11, r16
   1b5ee:	10 2f       	mov	r17, r16
   1b5f0:	fb e3       	ldi	r31, 0x3B	; 59
   1b5f2:	af 2e       	mov	r10, r31
   1b5f4:	a0 16       	cp	r10, r16
   1b5f6:	08 f4       	brcc	.+2      	; 0x1b5fa <dtoa_prf+0x34>
   1b5f8:	1b e3       	ldi	r17, 0x3B	; 59
   1b5fa:	1f 5f       	subi	r17, 0xFF	; 255
   1b5fc:	01 2f       	mov	r16, r17
   1b5fe:	27 e0       	ldi	r18, 0x07	; 7
   1b600:	ae 01       	movw	r20, r28
   1b602:	4f 5f       	subi	r20, 0xFF	; 255
   1b604:	5f 4f       	sbci	r21, 0xFF	; 255
   1b606:	0e 94 ba dd 	call	0x1bb74	; 0x1bb74 <__ftoa_engine>
   1b60a:	bc 01       	movw	r22, r24
   1b60c:	89 81       	ldd	r24, Y+1	; 0x01
   1b60e:	98 2f       	mov	r25, r24
   1b610:	99 70       	andi	r25, 0x09	; 9
   1b612:	91 30       	cpi	r25, 0x01	; 1
   1b614:	09 f4       	brne	.+2      	; 0x1b618 <dtoa_prf+0x52>
   1b616:	4e c0       	rjmp	.+156    	; 0x1b6b4 <dtoa_prf+0xee>
   1b618:	9b e2       	ldi	r25, 0x2B	; 43
   1b61a:	e1 fc       	sbrc	r14, 1
   1b61c:	04 c0       	rjmp	.+8      	; 0x1b626 <dtoa_prf+0x60>
   1b61e:	9e 2d       	mov	r25, r14
   1b620:	91 70       	andi	r25, 0x01	; 1
   1b622:	e0 fc       	sbrc	r14, 0
   1b624:	49 c0       	rjmp	.+146    	; 0x1b6b8 <dtoa_prf+0xf2>
   1b626:	5e 2d       	mov	r21, r14
   1b628:	50 71       	andi	r21, 0x10	; 16
   1b62a:	e8 2f       	mov	r30, r24
   1b62c:	e8 70       	andi	r30, 0x08	; 8
   1b62e:	83 ff       	sbrs	r24, 3
   1b630:	55 c0       	rjmp	.+170    	; 0x1b6dc <dtoa_prf+0x116>
   1b632:	84 e0       	ldi	r24, 0x04	; 4
   1b634:	91 11       	cpse	r25, r1
   1b636:	01 c0       	rjmp	.+2      	; 0x1b63a <dtoa_prf+0x74>
   1b638:	83 e0       	ldi	r24, 0x03	; 3
   1b63a:	ef 2d       	mov	r30, r15
   1b63c:	e8 1b       	sub	r30, r24
   1b63e:	8f 15       	cp	r24, r15
   1b640:	08 f0       	brcs	.+2      	; 0x1b644 <dtoa_prf+0x7e>
   1b642:	e0 e0       	ldi	r30, 0x00	; 0
   1b644:	d6 01       	movw	r26, r12
   1b646:	8e 2f       	mov	r24, r30
   1b648:	20 e2       	ldi	r18, 0x20	; 32
   1b64a:	55 23       	and	r21, r21
   1b64c:	c9 f1       	breq	.+114    	; 0x1b6c0 <dtoa_prf+0xfa>
   1b64e:	99 23       	and	r25, r25
   1b650:	29 f0       	breq	.+10     	; 0x1b65c <dtoa_prf+0x96>
   1b652:	d6 01       	movw	r26, r12
   1b654:	9c 93       	st	X, r25
   1b656:	c6 01       	movw	r24, r12
   1b658:	01 96       	adiw	r24, 0x01	; 1
   1b65a:	6c 01       	movw	r12, r24
   1b65c:	96 01       	movw	r18, r12
   1b65e:	2d 5f       	subi	r18, 0xFD	; 253
   1b660:	3f 4f       	sbci	r19, 0xFF	; 255
   1b662:	e2 fe       	sbrs	r14, 2
   1b664:	33 c0       	rjmp	.+102    	; 0x1b6cc <dtoa_prf+0x106>
   1b666:	8e e4       	ldi	r24, 0x4E	; 78
   1b668:	d6 01       	movw	r26, r12
   1b66a:	8c 93       	st	X, r24
   1b66c:	91 e4       	ldi	r25, 0x41	; 65
   1b66e:	11 96       	adiw	r26, 0x01	; 1
   1b670:	9c 93       	st	X, r25
   1b672:	11 97       	sbiw	r26, 0x01	; 1
   1b674:	12 96       	adiw	r26, 0x02	; 2
   1b676:	8c 93       	st	X, r24
   1b678:	d9 01       	movw	r26, r18
   1b67a:	8e 2f       	mov	r24, r30
   1b67c:	90 e2       	ldi	r25, 0x20	; 32
   1b67e:	81 11       	cpse	r24, r1
   1b680:	2a c0       	rjmp	.+84     	; 0x1b6d6 <dtoa_prf+0x110>
   1b682:	e2 0f       	add	r30, r18
   1b684:	f3 2f       	mov	r31, r19
   1b686:	f1 1d       	adc	r31, r1
   1b688:	10 82       	st	Z, r1
   1b68a:	8e ef       	ldi	r24, 0xFE	; 254
   1b68c:	9f ef       	ldi	r25, 0xFF	; 255
   1b68e:	29 96       	adiw	r28, 0x09	; 9
   1b690:	0f b6       	in	r0, 0x3f	; 63
   1b692:	f8 94       	cli
   1b694:	de bf       	out	0x3e, r29	; 62
   1b696:	0f be       	out	0x3f, r0	; 63
   1b698:	cd bf       	out	0x3d, r28	; 61
   1b69a:	df 91       	pop	r29
   1b69c:	cf 91       	pop	r28
   1b69e:	1f 91       	pop	r17
   1b6a0:	0f 91       	pop	r16
   1b6a2:	ff 90       	pop	r15
   1b6a4:	ef 90       	pop	r14
   1b6a6:	df 90       	pop	r13
   1b6a8:	cf 90       	pop	r12
   1b6aa:	bf 90       	pop	r11
   1b6ac:	af 90       	pop	r10
   1b6ae:	9f 90       	pop	r9
   1b6b0:	8f 90       	pop	r8
   1b6b2:	08 95       	ret
   1b6b4:	9d e2       	ldi	r25, 0x2D	; 45
   1b6b6:	b7 cf       	rjmp	.-146    	; 0x1b626 <dtoa_prf+0x60>
   1b6b8:	90 e2       	ldi	r25, 0x20	; 32
   1b6ba:	b5 cf       	rjmp	.-150    	; 0x1b626 <dtoa_prf+0x60>
   1b6bc:	2d 93       	st	X+, r18
   1b6be:	81 50       	subi	r24, 0x01	; 1
   1b6c0:	81 11       	cpse	r24, r1
   1b6c2:	fc cf       	rjmp	.-8      	; 0x1b6bc <dtoa_prf+0xf6>
   1b6c4:	ce 0e       	add	r12, r30
   1b6c6:	d1 1c       	adc	r13, r1
   1b6c8:	e0 e0       	ldi	r30, 0x00	; 0
   1b6ca:	c1 cf       	rjmp	.-126    	; 0x1b64e <dtoa_prf+0x88>
   1b6cc:	8e e6       	ldi	r24, 0x6E	; 110
   1b6ce:	d6 01       	movw	r26, r12
   1b6d0:	8c 93       	st	X, r24
   1b6d2:	91 e6       	ldi	r25, 0x61	; 97
   1b6d4:	cc cf       	rjmp	.-104    	; 0x1b66e <dtoa_prf+0xa8>
   1b6d6:	9d 93       	st	X+, r25
   1b6d8:	81 50       	subi	r24, 0x01	; 1
   1b6da:	d1 cf       	rjmp	.-94     	; 0x1b67e <dtoa_prf+0xb8>
   1b6dc:	48 2f       	mov	r20, r24
   1b6de:	44 70       	andi	r20, 0x04	; 4
   1b6e0:	82 ff       	sbrs	r24, 2
   1b6e2:	3d c0       	rjmp	.+122    	; 0x1b75e <dtoa_prf+0x198>
   1b6e4:	84 e0       	ldi	r24, 0x04	; 4
   1b6e6:	91 11       	cpse	r25, r1
   1b6e8:	01 c0       	rjmp	.+2      	; 0x1b6ec <dtoa_prf+0x126>
   1b6ea:	83 e0       	ldi	r24, 0x03	; 3
   1b6ec:	8f 15       	cp	r24, r15
   1b6ee:	10 f4       	brcc	.+4      	; 0x1b6f4 <dtoa_prf+0x12e>
   1b6f0:	ef 2d       	mov	r30, r15
   1b6f2:	e8 1b       	sub	r30, r24
   1b6f4:	d6 01       	movw	r26, r12
   1b6f6:	8e 2f       	mov	r24, r30
   1b6f8:	20 e2       	ldi	r18, 0x20	; 32
   1b6fa:	55 23       	and	r21, r21
   1b6fc:	09 f1       	breq	.+66     	; 0x1b740 <dtoa_prf+0x17a>
   1b6fe:	99 23       	and	r25, r25
   1b700:	29 f0       	breq	.+10     	; 0x1b70c <dtoa_prf+0x146>
   1b702:	d6 01       	movw	r26, r12
   1b704:	9c 93       	st	X, r25
   1b706:	c6 01       	movw	r24, r12
   1b708:	01 96       	adiw	r24, 0x01	; 1
   1b70a:	6c 01       	movw	r12, r24
   1b70c:	96 01       	movw	r18, r12
   1b70e:	2d 5f       	subi	r18, 0xFD	; 253
   1b710:	3f 4f       	sbci	r19, 0xFF	; 255
   1b712:	e2 fe       	sbrs	r14, 2
   1b714:	1b c0       	rjmp	.+54     	; 0x1b74c <dtoa_prf+0x186>
   1b716:	89 e4       	ldi	r24, 0x49	; 73
   1b718:	d6 01       	movw	r26, r12
   1b71a:	8c 93       	st	X, r24
   1b71c:	8e e4       	ldi	r24, 0x4E	; 78
   1b71e:	11 96       	adiw	r26, 0x01	; 1
   1b720:	8c 93       	st	X, r24
   1b722:	11 97       	sbiw	r26, 0x01	; 1
   1b724:	86 e4       	ldi	r24, 0x46	; 70
   1b726:	12 96       	adiw	r26, 0x02	; 2
   1b728:	8c 93       	st	X, r24
   1b72a:	d9 01       	movw	r26, r18
   1b72c:	8e 2f       	mov	r24, r30
   1b72e:	90 e2       	ldi	r25, 0x20	; 32
   1b730:	88 23       	and	r24, r24
   1b732:	09 f4       	brne	.+2      	; 0x1b736 <dtoa_prf+0x170>
   1b734:	a6 cf       	rjmp	.-180    	; 0x1b682 <dtoa_prf+0xbc>
   1b736:	9d 93       	st	X+, r25
   1b738:	81 50       	subi	r24, 0x01	; 1
   1b73a:	fa cf       	rjmp	.-12     	; 0x1b730 <dtoa_prf+0x16a>
   1b73c:	2d 93       	st	X+, r18
   1b73e:	81 50       	subi	r24, 0x01	; 1
   1b740:	81 11       	cpse	r24, r1
   1b742:	fc cf       	rjmp	.-8      	; 0x1b73c <dtoa_prf+0x176>
   1b744:	ce 0e       	add	r12, r30
   1b746:	d1 1c       	adc	r13, r1
   1b748:	e0 e0       	ldi	r30, 0x00	; 0
   1b74a:	d9 cf       	rjmp	.-78     	; 0x1b6fe <dtoa_prf+0x138>
   1b74c:	89 e6       	ldi	r24, 0x69	; 105
   1b74e:	d6 01       	movw	r26, r12
   1b750:	8c 93       	st	X, r24
   1b752:	8e e6       	ldi	r24, 0x6E	; 110
   1b754:	11 96       	adiw	r26, 0x01	; 1
   1b756:	8c 93       	st	X, r24
   1b758:	11 97       	sbiw	r26, 0x01	; 1
   1b75a:	86 e6       	ldi	r24, 0x66	; 102
   1b75c:	e4 cf       	rjmp	.-56     	; 0x1b726 <dtoa_prf+0x160>
   1b75e:	9b 01       	movw	r18, r22
   1b760:	77 ff       	sbrs	r23, 7
   1b762:	02 c0       	rjmp	.+4      	; 0x1b768 <dtoa_prf+0x1a2>
   1b764:	30 e0       	ldi	r19, 0x00	; 0
   1b766:	20 e0       	ldi	r18, 0x00	; 0
   1b768:	a1 e0       	ldi	r26, 0x01	; 1
   1b76a:	b0 e0       	ldi	r27, 0x00	; 0
   1b76c:	91 11       	cpse	r25, r1
   1b76e:	02 c0       	rjmp	.+4      	; 0x1b774 <dtoa_prf+0x1ae>
   1b770:	b0 e0       	ldi	r27, 0x00	; 0
   1b772:	a0 e0       	ldi	r26, 0x00	; 0
   1b774:	f9 01       	movw	r30, r18
   1b776:	31 96       	adiw	r30, 0x01	; 1
   1b778:	ae 0f       	add	r26, r30
   1b77a:	bf 1f       	adc	r27, r31
   1b77c:	8b 2c       	mov	r8, r11
   1b77e:	91 2c       	mov	r9, r1
   1b780:	bb 20       	and	r11, r11
   1b782:	09 f4       	brne	.+2      	; 0x1b786 <dtoa_prf+0x1c0>
   1b784:	61 c0       	rjmp	.+194    	; 0x1b848 <dtoa_prf+0x282>
   1b786:	54 01       	movw	r10, r8
   1b788:	ef ef       	ldi	r30, 0xFF	; 255
   1b78a:	ae 1a       	sub	r10, r30
   1b78c:	be 0a       	sbc	r11, r30
   1b78e:	aa 0d       	add	r26, r10
   1b790:	bb 1d       	adc	r27, r11
   1b792:	fa 16       	cp	r15, r26
   1b794:	1b 06       	cpc	r1, r27
   1b796:	19 f0       	breq	.+6      	; 0x1b79e <dtoa_prf+0x1d8>
   1b798:	14 f0       	brlt	.+4      	; 0x1b79e <dtoa_prf+0x1d8>
   1b79a:	4f 2d       	mov	r20, r15
   1b79c:	4a 1b       	sub	r20, r26
   1b79e:	51 11       	cpse	r21, r1
   1b7a0:	88 c0       	rjmp	.+272    	; 0x1b8b2 <dtoa_prf+0x2ec>
   1b7a2:	e3 fc       	sbrc	r14, 3
   1b7a4:	59 c0       	rjmp	.+178    	; 0x1b858 <dtoa_prf+0x292>
   1b7a6:	76 01       	movw	r14, r12
   1b7a8:	a4 2f       	mov	r26, r20
   1b7aa:	b0 e2       	ldi	r27, 0x20	; 32
   1b7ac:	a1 11       	cpse	r26, r1
   1b7ae:	4f c0       	rjmp	.+158    	; 0x1b84e <dtoa_prf+0x288>
   1b7b0:	c4 0e       	add	r12, r20
   1b7b2:	d1 1c       	adc	r13, r1
   1b7b4:	99 23       	and	r25, r25
   1b7b6:	09 f4       	brne	.+2      	; 0x1b7ba <dtoa_prf+0x1f4>
   1b7b8:	5b c0       	rjmp	.+182    	; 0x1b870 <dtoa_prf+0x2aa>
   1b7ba:	40 e0       	ldi	r20, 0x00	; 0
   1b7bc:	d6 01       	movw	r26, r12
   1b7be:	11 96       	adiw	r26, 0x01	; 1
   1b7c0:	f6 01       	movw	r30, r12
   1b7c2:	90 83       	st	Z, r25
   1b7c4:	6d 01       	movw	r12, r26
   1b7c6:	55 23       	and	r21, r21
   1b7c8:	09 f4       	brne	.+2      	; 0x1b7cc <dtoa_prf+0x206>
   1b7ca:	48 c0       	rjmp	.+144    	; 0x1b85c <dtoa_prf+0x296>
   1b7cc:	01 2f       	mov	r16, r17
   1b7ce:	06 0f       	add	r16, r22
   1b7d0:	9a 81       	ldd	r25, Y+2	; 0x02
   1b7d2:	58 2f       	mov	r21, r24
   1b7d4:	50 71       	andi	r21, 0x10	; 16
   1b7d6:	84 ff       	sbrs	r24, 4
   1b7d8:	03 c0       	rjmp	.+6      	; 0x1b7e0 <dtoa_prf+0x21a>
   1b7da:	91 33       	cpi	r25, 0x31	; 49
   1b7dc:	09 f4       	brne	.+2      	; 0x1b7e0 <dtoa_prf+0x21a>
   1b7de:	01 50       	subi	r16, 0x01	; 1
   1b7e0:	10 16       	cp	r1, r16
   1b7e2:	0c f0       	brlt	.+2      	; 0x1b7e6 <dtoa_prf+0x220>
   1b7e4:	47 c0       	rjmp	.+142    	; 0x1b874 <dtoa_prf+0x2ae>
   1b7e6:	09 30       	cpi	r16, 0x09	; 9
   1b7e8:	08 f0       	brcs	.+2      	; 0x1b7ec <dtoa_prf+0x226>
   1b7ea:	08 e0       	ldi	r16, 0x08	; 8
   1b7ec:	ee e2       	ldi	r30, 0x2E	; 46
   1b7ee:	fe 2e       	mov	r15, r30
   1b7f0:	5b 01       	movw	r10, r22
   1b7f2:	a0 1a       	sub	r10, r16
   1b7f4:	b1 08       	sbc	r11, r1
   1b7f6:	85 01       	movw	r16, r10
   1b7f8:	91 94       	neg	r9
   1b7fa:	81 94       	neg	r8
   1b7fc:	91 08       	sbc	r9, r1
   1b7fe:	2f 3f       	cpi	r18, 0xFF	; 255
   1b800:	32 07       	cpc	r19, r18
   1b802:	29 f4       	brne	.+10     	; 0x1b80e <dtoa_prf+0x248>
   1b804:	d6 01       	movw	r26, r12
   1b806:	fc 92       	st	X, r15
   1b808:	f6 01       	movw	r30, r12
   1b80a:	31 96       	adiw	r30, 0x01	; 1
   1b80c:	6f 01       	movw	r12, r30
   1b80e:	62 17       	cp	r22, r18
   1b810:	73 07       	cpc	r23, r19
   1b812:	94 f1       	brlt	.+100    	; 0x1b878 <dtoa_prf+0x2b2>
   1b814:	02 17       	cp	r16, r18
   1b816:	13 07       	cpc	r17, r19
   1b818:	7c f5       	brge	.+94     	; 0x1b878 <dtoa_prf+0x2b2>
   1b81a:	db 01       	movw	r26, r22
   1b81c:	a2 1b       	sub	r26, r18
   1b81e:	b3 0b       	sbc	r27, r19
   1b820:	aa 24       	eor	r10, r10
   1b822:	a3 94       	inc	r10
   1b824:	b1 2c       	mov	r11, r1
   1b826:	ac 0e       	add	r10, r28
   1b828:	bd 1e       	adc	r11, r29
   1b82a:	aa 0d       	add	r26, r10
   1b82c:	bb 1d       	adc	r27, r11
   1b82e:	11 96       	adiw	r26, 0x01	; 1
   1b830:	8c 91       	ld	r24, X
   1b832:	21 50       	subi	r18, 0x01	; 1
   1b834:	31 09       	sbc	r19, r1
   1b836:	d6 01       	movw	r26, r12
   1b838:	11 96       	adiw	r26, 0x01	; 1
   1b83a:	28 15       	cp	r18, r8
   1b83c:	39 05       	cpc	r19, r9
   1b83e:	f4 f0       	brlt	.+60     	; 0x1b87c <dtoa_prf+0x2b6>
   1b840:	f6 01       	movw	r30, r12
   1b842:	80 83       	st	Z, r24
   1b844:	6d 01       	movw	r12, r26
   1b846:	db cf       	rjmp	.-74     	; 0x1b7fe <dtoa_prf+0x238>
   1b848:	b1 2c       	mov	r11, r1
   1b84a:	a1 2c       	mov	r10, r1
   1b84c:	a0 cf       	rjmp	.-192    	; 0x1b78e <dtoa_prf+0x1c8>
   1b84e:	f7 01       	movw	r30, r14
   1b850:	b1 93       	st	Z+, r27
   1b852:	7f 01       	movw	r14, r30
   1b854:	a1 50       	subi	r26, 0x01	; 1
   1b856:	aa cf       	rjmp	.-172    	; 0x1b7ac <dtoa_prf+0x1e6>
   1b858:	91 11       	cpse	r25, r1
   1b85a:	b0 cf       	rjmp	.-160    	; 0x1b7bc <dtoa_prf+0x1f6>
   1b85c:	d6 01       	movw	r26, r12
   1b85e:	94 2f       	mov	r25, r20
   1b860:	50 e3       	ldi	r21, 0x30	; 48
   1b862:	02 c0       	rjmp	.+4      	; 0x1b868 <dtoa_prf+0x2a2>
   1b864:	5d 93       	st	X+, r21
   1b866:	91 50       	subi	r25, 0x01	; 1
   1b868:	91 11       	cpse	r25, r1
   1b86a:	fc cf       	rjmp	.-8      	; 0x1b864 <dtoa_prf+0x29e>
   1b86c:	c4 0e       	add	r12, r20
   1b86e:	d1 1c       	adc	r13, r1
   1b870:	40 e0       	ldi	r20, 0x00	; 0
   1b872:	ac cf       	rjmp	.-168    	; 0x1b7cc <dtoa_prf+0x206>
   1b874:	01 e0       	ldi	r16, 0x01	; 1
   1b876:	ba cf       	rjmp	.-140    	; 0x1b7ec <dtoa_prf+0x226>
   1b878:	80 e3       	ldi	r24, 0x30	; 48
   1b87a:	db cf       	rjmp	.-74     	; 0x1b832 <dtoa_prf+0x26c>
   1b87c:	62 17       	cp	r22, r18
   1b87e:	73 07       	cpc	r23, r19
   1b880:	31 f4       	brne	.+12     	; 0x1b88e <dtoa_prf+0x2c8>
   1b882:	96 33       	cpi	r25, 0x36	; 54
   1b884:	88 f4       	brcc	.+34     	; 0x1b8a8 <dtoa_prf+0x2e2>
   1b886:	95 33       	cpi	r25, 0x35	; 53
   1b888:	11 f4       	brne	.+4      	; 0x1b88e <dtoa_prf+0x2c8>
   1b88a:	55 23       	and	r21, r21
   1b88c:	69 f0       	breq	.+26     	; 0x1b8a8 <dtoa_prf+0x2e2>
   1b88e:	f6 01       	movw	r30, r12
   1b890:	80 83       	st	Z, r24
   1b892:	fd 01       	movw	r30, r26
   1b894:	84 2f       	mov	r24, r20
   1b896:	90 e2       	ldi	r25, 0x20	; 32
   1b898:	81 11       	cpse	r24, r1
   1b89a:	08 c0       	rjmp	.+16     	; 0x1b8ac <dtoa_prf+0x2e6>
   1b89c:	a4 0f       	add	r26, r20
   1b89e:	b1 1d       	adc	r27, r1
   1b8a0:	1c 92       	st	X, r1
   1b8a2:	90 e0       	ldi	r25, 0x00	; 0
   1b8a4:	80 e0       	ldi	r24, 0x00	; 0
   1b8a6:	f3 ce       	rjmp	.-538    	; 0x1b68e <dtoa_prf+0xc8>
   1b8a8:	81 e3       	ldi	r24, 0x31	; 49
   1b8aa:	f1 cf       	rjmp	.-30     	; 0x1b88e <dtoa_prf+0x2c8>
   1b8ac:	91 93       	st	Z+, r25
   1b8ae:	81 50       	subi	r24, 0x01	; 1
   1b8b0:	f3 cf       	rjmp	.-26     	; 0x1b898 <dtoa_prf+0x2d2>
   1b8b2:	91 11       	cpse	r25, r1
   1b8b4:	83 cf       	rjmp	.-250    	; 0x1b7bc <dtoa_prf+0x1f6>
   1b8b6:	8a cf       	rjmp	.-236    	; 0x1b7cc <dtoa_prf+0x206>

0001b8b8 <strtod>:
strtod():
   1b8b8:	8f 92       	push	r8
   1b8ba:	9f 92       	push	r9
   1b8bc:	af 92       	push	r10
   1b8be:	bf 92       	push	r11
   1b8c0:	cf 92       	push	r12
   1b8c2:	df 92       	push	r13
   1b8c4:	ef 92       	push	r14
   1b8c6:	ff 92       	push	r15
   1b8c8:	0f 93       	push	r16
   1b8ca:	1f 93       	push	r17
   1b8cc:	cf 93       	push	r28
   1b8ce:	df 93       	push	r29
   1b8d0:	5c 01       	movw	r10, r24
   1b8d2:	7b 01       	movw	r14, r22
   1b8d4:	61 15       	cp	r22, r1
   1b8d6:	71 05       	cpc	r23, r1
   1b8d8:	19 f0       	breq	.+6      	; 0x1b8e0 <strtod+0x28>
   1b8da:	db 01       	movw	r26, r22
   1b8dc:	8d 93       	st	X+, r24
   1b8de:	9c 93       	st	X, r25
   1b8e0:	85 01       	movw	r16, r10
   1b8e2:	0f 5f       	subi	r16, 0xFF	; 255
   1b8e4:	1f 4f       	sbci	r17, 0xFF	; 255
   1b8e6:	f5 01       	movw	r30, r10
   1b8e8:	d0 81       	ld	r29, Z
   1b8ea:	8d 2f       	mov	r24, r29
   1b8ec:	90 e0       	ldi	r25, 0x00	; 0
   1b8ee:	0e 94 41 d7 	call	0x1ae82	; 0x1ae82 <isspace>
   1b8f2:	6c 01       	movw	r12, r24
   1b8f4:	89 2b       	or	r24, r25
   1b8f6:	b9 f5       	brne	.+110    	; 0x1b966 <strtod+0xae>
   1b8f8:	dd 32       	cpi	r29, 0x2D	; 45
   1b8fa:	b9 f5       	brne	.+110    	; 0x1b96a <strtod+0xb2>
   1b8fc:	0f 5f       	subi	r16, 0xFF	; 255
   1b8fe:	1f 4f       	sbci	r17, 0xFF	; 255
   1b900:	d5 01       	movw	r26, r10
   1b902:	11 96       	adiw	r26, 0x01	; 1
   1b904:	dc 91       	ld	r29, X
   1b906:	c1 e0       	ldi	r28, 0x01	; 1
   1b908:	58 01       	movw	r10, r16
   1b90a:	f1 e0       	ldi	r31, 0x01	; 1
   1b90c:	af 1a       	sub	r10, r31
   1b90e:	b1 08       	sbc	r11, r1
   1b910:	43 e0       	ldi	r20, 0x03	; 3
   1b912:	50 e0       	ldi	r21, 0x00	; 0
   1b914:	68 e1       	ldi	r22, 0x18	; 24
   1b916:	74 e0       	ldi	r23, 0x04	; 4
   1b918:	c5 01       	movw	r24, r10
   1b91a:	0e 94 95 de 	call	0x1bd2a	; 0x1bd2a <strncasecmp_P>
   1b91e:	89 2b       	or	r24, r25
   1b920:	69 f5       	brne	.+90     	; 0x1b97c <strtod+0xc4>
   1b922:	68 01       	movw	r12, r16
   1b924:	82 e0       	ldi	r24, 0x02	; 2
   1b926:	c8 0e       	add	r12, r24
   1b928:	d1 1c       	adc	r13, r1
   1b92a:	45 e0       	ldi	r20, 0x05	; 5
   1b92c:	50 e0       	ldi	r21, 0x00	; 0
   1b92e:	63 e1       	ldi	r22, 0x13	; 19
   1b930:	74 e0       	ldi	r23, 0x04	; 4
   1b932:	c6 01       	movw	r24, r12
   1b934:	0e 94 95 de 	call	0x1bd2a	; 0x1bd2a <strncasecmp_P>
   1b938:	89 2b       	or	r24, r25
   1b93a:	21 f4       	brne	.+8      	; 0x1b944 <strtod+0x8c>
   1b93c:	68 01       	movw	r12, r16
   1b93e:	97 e0       	ldi	r25, 0x07	; 7
   1b940:	c9 0e       	add	r12, r25
   1b942:	d1 1c       	adc	r13, r1
   1b944:	e1 14       	cp	r14, r1
   1b946:	f1 04       	cpc	r15, r1
   1b948:	19 f0       	breq	.+6      	; 0x1b950 <strtod+0x98>
   1b94a:	d7 01       	movw	r26, r14
   1b94c:	cd 92       	st	X+, r12
   1b94e:	dc 92       	st	X, r13
   1b950:	60 e0       	ldi	r22, 0x00	; 0
   1b952:	70 e0       	ldi	r23, 0x00	; 0
   1b954:	80 e8       	ldi	r24, 0x80	; 128
   1b956:	9f ef       	ldi	r25, 0xFF	; 255
   1b958:	c1 11       	cpse	r28, r1
   1b95a:	ff c0       	rjmp	.+510    	; 0x1bb5a <strtod+0x2a2>
   1b95c:	60 e0       	ldi	r22, 0x00	; 0
   1b95e:	70 e0       	ldi	r23, 0x00	; 0
   1b960:	80 e8       	ldi	r24, 0x80	; 128
   1b962:	9f e7       	ldi	r25, 0x7F	; 127
   1b964:	fa c0       	rjmp	.+500    	; 0x1bb5a <strtod+0x2a2>
   1b966:	58 01       	movw	r10, r16
   1b968:	bb cf       	rjmp	.-138    	; 0x1b8e0 <strtod+0x28>
   1b96a:	db 32       	cpi	r29, 0x2B	; 43
   1b96c:	29 f4       	brne	.+10     	; 0x1b978 <strtod+0xc0>
   1b96e:	85 01       	movw	r16, r10
   1b970:	0e 5f       	subi	r16, 0xFE	; 254
   1b972:	1f 4f       	sbci	r17, 0xFF	; 255
   1b974:	f5 01       	movw	r30, r10
   1b976:	d1 81       	ldd	r29, Z+1	; 0x01
   1b978:	c0 e0       	ldi	r28, 0x00	; 0
   1b97a:	c6 cf       	rjmp	.-116    	; 0x1b908 <strtod+0x50>
   1b97c:	43 e0       	ldi	r20, 0x03	; 3
   1b97e:	50 e0       	ldi	r21, 0x00	; 0
   1b980:	60 e1       	ldi	r22, 0x10	; 16
   1b982:	74 e0       	ldi	r23, 0x04	; 4
   1b984:	c5 01       	movw	r24, r10
   1b986:	0e 94 95 de 	call	0x1bd2a	; 0x1bd2a <strncasecmp_P>
   1b98a:	89 2b       	or	r24, r25
   1b98c:	e9 f0       	breq	.+58     	; 0x1b9c8 <strtod+0x110>
   1b98e:	f8 01       	movw	r30, r16
   1b990:	10 e0       	ldi	r17, 0x00	; 0
   1b992:	00 e0       	ldi	r16, 0x00	; 0
   1b994:	20 e0       	ldi	r18, 0x00	; 0
   1b996:	30 e0       	ldi	r19, 0x00	; 0
   1b998:	a9 01       	movw	r20, r18
   1b99a:	5f 01       	movw	r10, r30
   1b99c:	b0 ed       	ldi	r27, 0xD0	; 208
   1b99e:	8b 2e       	mov	r8, r27
   1b9a0:	8d 0e       	add	r8, r29
   1b9a2:	89 e0       	ldi	r24, 0x09	; 9
   1b9a4:	88 15       	cp	r24, r8
   1b9a6:	c8 f1       	brcs	.+114    	; 0x1ba1a <strtod+0x162>
   1b9a8:	9c 2e       	mov	r9, r28
   1b9aa:	68 94       	set
   1b9ac:	91 f8       	bld	r9, 1
   1b9ae:	8c 2f       	mov	r24, r28
   1b9b0:	88 70       	andi	r24, 0x08	; 8
   1b9b2:	c2 ff       	sbrs	r28, 2
   1b9b4:	16 c0       	rjmp	.+44     	; 0x1b9e2 <strtod+0x12a>
   1b9b6:	81 11       	cpse	r24, r1
   1b9b8:	02 c0       	rjmp	.+4      	; 0x1b9be <strtod+0x106>
   1b9ba:	0f 5f       	subi	r16, 0xFF	; 255
   1b9bc:	1f 4f       	sbci	r17, 0xFF	; 255
   1b9be:	31 96       	adiw	r30, 0x01	; 1
   1b9c0:	d5 01       	movw	r26, r10
   1b9c2:	dc 91       	ld	r29, X
   1b9c4:	c9 2d       	mov	r28, r9
   1b9c6:	e9 cf       	rjmp	.-46     	; 0x1b99a <strtod+0xe2>
   1b9c8:	e1 14       	cp	r14, r1
   1b9ca:	f1 04       	cpc	r15, r1
   1b9cc:	29 f0       	breq	.+10     	; 0x1b9d8 <strtod+0x120>
   1b9ce:	0e 5f       	subi	r16, 0xFE	; 254
   1b9d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1b9d2:	f7 01       	movw	r30, r14
   1b9d4:	11 83       	std	Z+1, r17	; 0x01
   1b9d6:	00 83       	st	Z, r16
   1b9d8:	60 e0       	ldi	r22, 0x00	; 0
   1b9da:	70 e0       	ldi	r23, 0x00	; 0
   1b9dc:	80 ec       	ldi	r24, 0xC0	; 192
   1b9de:	9f e7       	ldi	r25, 0x7F	; 127
   1b9e0:	bc c0       	rjmp	.+376    	; 0x1bb5a <strtod+0x2a2>
   1b9e2:	88 23       	and	r24, r24
   1b9e4:	11 f0       	breq	.+4      	; 0x1b9ea <strtod+0x132>
   1b9e6:	01 50       	subi	r16, 0x01	; 1
   1b9e8:	11 09       	sbc	r17, r1
   1b9ea:	a5 e0       	ldi	r26, 0x05	; 5
   1b9ec:	b0 e0       	ldi	r27, 0x00	; 0
   1b9ee:	0e 94 e8 d3 	call	0x1a7d0	; 0x1a7d0 <__muluhisi3>
   1b9f2:	9b 01       	movw	r18, r22
   1b9f4:	ac 01       	movw	r20, r24
   1b9f6:	22 0f       	add	r18, r18
   1b9f8:	33 1f       	adc	r19, r19
   1b9fa:	44 1f       	adc	r20, r20
   1b9fc:	55 1f       	adc	r21, r21
   1b9fe:	28 0d       	add	r18, r8
   1ba00:	31 1d       	adc	r19, r1
   1ba02:	41 1d       	adc	r20, r1
   1ba04:	51 1d       	adc	r21, r1
   1ba06:	28 39       	cpi	r18, 0x98	; 152
   1ba08:	99 e9       	ldi	r25, 0x99	; 153
   1ba0a:	39 07       	cpc	r19, r25
   1ba0c:	49 07       	cpc	r20, r25
   1ba0e:	99 e1       	ldi	r25, 0x19	; 25
   1ba10:	59 07       	cpc	r21, r25
   1ba12:	a8 f2       	brcs	.-86     	; 0x1b9be <strtod+0x106>
   1ba14:	c6 60       	ori	r28, 0x06	; 6
   1ba16:	9c 2e       	mov	r9, r28
   1ba18:	d2 cf       	rjmp	.-92     	; 0x1b9be <strtod+0x106>
   1ba1a:	ae ef       	ldi	r26, 0xFE	; 254
   1ba1c:	8a 12       	cpse	r8, r26
   1ba1e:	06 c0       	rjmp	.+12     	; 0x1ba2c <strtod+0x174>
   1ba20:	c3 fd       	sbrc	r28, 3
   1ba22:	3c c0       	rjmp	.+120    	; 0x1ba9c <strtod+0x1e4>
   1ba24:	9c 2e       	mov	r9, r28
   1ba26:	68 94       	set
   1ba28:	93 f8       	bld	r9, 3
   1ba2a:	c9 cf       	rjmp	.-110    	; 0x1b9be <strtod+0x106>
   1ba2c:	df 7d       	andi	r29, 0xDF	; 223
   1ba2e:	d5 34       	cpi	r29, 0x45	; 69
   1ba30:	a9 f5       	brne	.+106    	; 0x1ba9c <strtod+0x1e4>
   1ba32:	80 81       	ld	r24, Z
   1ba34:	8d 32       	cpi	r24, 0x2D	; 45
   1ba36:	39 f4       	brne	.+14     	; 0x1ba46 <strtod+0x18e>
   1ba38:	c0 61       	ori	r28, 0x10	; 16
   1ba3a:	df 01       	movw	r26, r30
   1ba3c:	12 96       	adiw	r26, 0x02	; 2
   1ba3e:	81 81       	ldd	r24, Z+1	; 0x01
   1ba40:	62 e0       	ldi	r22, 0x02	; 2
   1ba42:	70 e0       	ldi	r23, 0x00	; 0
   1ba44:	06 c0       	rjmp	.+12     	; 0x1ba52 <strtod+0x19a>
   1ba46:	df 01       	movw	r26, r30
   1ba48:	8b 32       	cpi	r24, 0x2B	; 43
   1ba4a:	c1 f3       	breq	.-16     	; 0x1ba3c <strtod+0x184>
   1ba4c:	11 96       	adiw	r26, 0x01	; 1
   1ba4e:	61 e0       	ldi	r22, 0x01	; 1
   1ba50:	70 e0       	ldi	r23, 0x00	; 0
   1ba52:	80 53       	subi	r24, 0x30	; 48
   1ba54:	5d 01       	movw	r10, r26
   1ba56:	a6 1a       	sub	r10, r22
   1ba58:	b7 0a       	sbc	r11, r23
   1ba5a:	8a 30       	cpi	r24, 0x0A	; 10
   1ba5c:	f8 f4       	brcc	.+62     	; 0x1ba9c <strtod+0x1e4>
   1ba5e:	e0 e8       	ldi	r30, 0x80	; 128
   1ba60:	ce 16       	cp	r12, r30
   1ba62:	ec e0       	ldi	r30, 0x0C	; 12
   1ba64:	de 06       	cpc	r13, r30
   1ba66:	5c f4       	brge	.+22     	; 0x1ba7e <strtod+0x1c6>
   1ba68:	b6 01       	movw	r22, r12
   1ba6a:	66 0f       	add	r22, r22
   1ba6c:	77 1f       	adc	r23, r23
   1ba6e:	66 0f       	add	r22, r22
   1ba70:	77 1f       	adc	r23, r23
   1ba72:	c6 0e       	add	r12, r22
   1ba74:	d7 1e       	adc	r13, r23
   1ba76:	cc 0c       	add	r12, r12
   1ba78:	dd 1c       	adc	r13, r13
   1ba7a:	c8 0e       	add	r12, r24
   1ba7c:	d1 1c       	adc	r13, r1
   1ba7e:	5d 01       	movw	r10, r26
   1ba80:	ff ef       	ldi	r31, 0xFF	; 255
   1ba82:	af 1a       	sub	r10, r31
   1ba84:	bf 0a       	sbc	r11, r31
   1ba86:	8c 91       	ld	r24, X
   1ba88:	80 53       	subi	r24, 0x30	; 48
   1ba8a:	8a 30       	cpi	r24, 0x0A	; 10
   1ba8c:	a8 f1       	brcs	.+106    	; 0x1baf8 <strtod+0x240>
   1ba8e:	c4 ff       	sbrs	r28, 4
   1ba90:	03 c0       	rjmp	.+6      	; 0x1ba98 <strtod+0x1e0>
   1ba92:	d1 94       	neg	r13
   1ba94:	c1 94       	neg	r12
   1ba96:	d1 08       	sbc	r13, r1
   1ba98:	0c 0d       	add	r16, r12
   1ba9a:	1d 1d       	adc	r17, r13
   1ba9c:	c1 ff       	sbrs	r28, 1
   1ba9e:	09 c0       	rjmp	.+18     	; 0x1bab2 <strtod+0x1fa>
   1baa0:	e1 14       	cp	r14, r1
   1baa2:	f1 04       	cpc	r15, r1
   1baa4:	31 f0       	breq	.+12     	; 0x1bab2 <strtod+0x1fa>
   1baa6:	81 e0       	ldi	r24, 0x01	; 1
   1baa8:	a8 1a       	sub	r10, r24
   1baaa:	b1 08       	sbc	r11, r1
   1baac:	d7 01       	movw	r26, r14
   1baae:	ad 92       	st	X+, r10
   1bab0:	bc 92       	st	X, r11
   1bab2:	ca 01       	movw	r24, r20
   1bab4:	b9 01       	movw	r22, r18
   1bab6:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <__floatunsisf>
   1baba:	c3 70       	andi	r28, 0x03	; 3
   1babc:	c3 30       	cpi	r28, 0x03	; 3
   1babe:	09 f4       	brne	.+2      	; 0x1bac2 <strtod+0x20a>
   1bac0:	90 58       	subi	r25, 0x80	; 128
   1bac2:	4b 01       	movw	r8, r22
   1bac4:	5c 01       	movw	r10, r24
   1bac6:	20 e0       	ldi	r18, 0x00	; 0
   1bac8:	30 e0       	ldi	r19, 0x00	; 0
   1baca:	a9 01       	movw	r20, r18
   1bacc:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   1bad0:	88 23       	and	r24, r24
   1bad2:	09 f4       	brne	.+2      	; 0x1bad6 <strtod+0x21e>
   1bad4:	40 c0       	rjmp	.+128    	; 0x1bb56 <strtod+0x29e>
   1bad6:	c7 e4       	ldi	r28, 0x47	; 71
   1bad8:	d4 e0       	ldi	r29, 0x04	; 4
   1bada:	17 ff       	sbrs	r17, 7
   1badc:	05 c0       	rjmp	.+10     	; 0x1bae8 <strtod+0x230>
   1bade:	11 95       	neg	r17
   1bae0:	01 95       	neg	r16
   1bae2:	11 09       	sbc	r17, r1
   1bae4:	cf e2       	ldi	r28, 0x2F	; 47
   1bae6:	d4 e0       	ldi	r29, 0x04	; 4
   1bae8:	6e 01       	movw	r12, r28
   1baea:	b8 e1       	ldi	r27, 0x18	; 24
   1baec:	cb 1a       	sub	r12, r27
   1baee:	d1 08       	sbc	r13, r1
   1baf0:	80 e2       	ldi	r24, 0x20	; 32
   1baf2:	e8 2e       	mov	r14, r24
   1baf4:	f1 2c       	mov	r15, r1
   1baf6:	0f c0       	rjmp	.+30     	; 0x1bb16 <strtod+0x25e>
   1baf8:	d5 01       	movw	r26, r10
   1bafa:	b1 cf       	rjmp	.-158    	; 0x1ba5e <strtod+0x1a6>
   1bafc:	fe 01       	movw	r30, r28
   1bafe:	25 91       	lpm	r18, Z+
   1bb00:	35 91       	lpm	r19, Z+
   1bb02:	45 91       	lpm	r20, Z+
   1bb04:	54 91       	lpm	r21, Z
   1bb06:	0e 19       	sub	r16, r14
   1bb08:	1f 09       	sbc	r17, r15
   1bb0a:	c5 01       	movw	r24, r10
   1bb0c:	b4 01       	movw	r22, r8
   1bb0e:	0e 94 df d2 	call	0x1a5be	; 0x1a5be <__mulsf3>
   1bb12:	4b 01       	movw	r8, r22
   1bb14:	5c 01       	movw	r10, r24
   1bb16:	d5 01       	movw	r26, r10
   1bb18:	c4 01       	movw	r24, r8
   1bb1a:	0e 15       	cp	r16, r14
   1bb1c:	1f 05       	cpc	r17, r15
   1bb1e:	74 f7       	brge	.-36     	; 0x1bafc <strtod+0x244>
   1bb20:	24 97       	sbiw	r28, 0x04	; 4
   1bb22:	f5 94       	asr	r15
   1bb24:	e7 94       	ror	r14
   1bb26:	cc 16       	cp	r12, r28
   1bb28:	dd 06       	cpc	r13, r29
   1bb2a:	a9 f7       	brne	.-22     	; 0x1bb16 <strtod+0x25e>
   1bb2c:	8a 2f       	mov	r24, r26
   1bb2e:	88 0f       	add	r24, r24
   1bb30:	8b 2f       	mov	r24, r27
   1bb32:	88 1f       	adc	r24, r24
   1bb34:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb36:	49 f0       	breq	.+18     	; 0x1bb4a <strtod+0x292>
   1bb38:	20 e0       	ldi	r18, 0x00	; 0
   1bb3a:	30 e0       	ldi	r19, 0x00	; 0
   1bb3c:	a9 01       	movw	r20, r18
   1bb3e:	c5 01       	movw	r24, r10
   1bb40:	b4 01       	movw	r22, r8
   1bb42:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <__cmpsf2>
   1bb46:	81 11       	cpse	r24, r1
   1bb48:	06 c0       	rjmp	.+12     	; 0x1bb56 <strtod+0x29e>
   1bb4a:	82 e2       	ldi	r24, 0x22	; 34
   1bb4c:	90 e0       	ldi	r25, 0x00	; 0
   1bb4e:	90 93 4c 14 	sts	0x144C, r25	; 0x80144c <errno+0x1>
   1bb52:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <errno>
   1bb56:	c5 01       	movw	r24, r10
   1bb58:	b4 01       	movw	r22, r8
   1bb5a:	df 91       	pop	r29
   1bb5c:	cf 91       	pop	r28
   1bb5e:	1f 91       	pop	r17
   1bb60:	0f 91       	pop	r16
   1bb62:	ff 90       	pop	r15
   1bb64:	ef 90       	pop	r14
   1bb66:	df 90       	pop	r13
   1bb68:	cf 90       	pop	r12
   1bb6a:	bf 90       	pop	r11
   1bb6c:	af 90       	pop	r10
   1bb6e:	9f 90       	pop	r9
   1bb70:	8f 90       	pop	r8
   1bb72:	08 95       	ret

0001bb74 <__ftoa_engine>:
__ftoa_engine():
   1bb74:	28 30       	cpi	r18, 0x08	; 8
   1bb76:	08 f0       	brcs	.+2      	; 0x1bb7a <__ftoa_engine+0x6>
   1bb78:	27 e0       	ldi	r18, 0x07	; 7
   1bb7a:	33 27       	eor	r19, r19
   1bb7c:	da 01       	movw	r26, r20
   1bb7e:	99 0f       	add	r25, r25
   1bb80:	31 1d       	adc	r19, r1
   1bb82:	87 fd       	sbrc	r24, 7
   1bb84:	91 60       	ori	r25, 0x01	; 1
   1bb86:	00 96       	adiw	r24, 0x00	; 0
   1bb88:	61 05       	cpc	r22, r1
   1bb8a:	71 05       	cpc	r23, r1
   1bb8c:	39 f4       	brne	.+14     	; 0x1bb9c <__ftoa_engine+0x28>
   1bb8e:	32 60       	ori	r19, 0x02	; 2
   1bb90:	2e 5f       	subi	r18, 0xFE	; 254
   1bb92:	3d 93       	st	X+, r19
   1bb94:	30 e3       	ldi	r19, 0x30	; 48
   1bb96:	2a 95       	dec	r18
   1bb98:	e1 f7       	brne	.-8      	; 0x1bb92 <__ftoa_engine+0x1e>
   1bb9a:	08 95       	ret
   1bb9c:	9f 3f       	cpi	r25, 0xFF	; 255
   1bb9e:	30 f0       	brcs	.+12     	; 0x1bbac <__ftoa_engine+0x38>
   1bba0:	80 38       	cpi	r24, 0x80	; 128
   1bba2:	71 05       	cpc	r23, r1
   1bba4:	61 05       	cpc	r22, r1
   1bba6:	09 f0       	breq	.+2      	; 0x1bbaa <__ftoa_engine+0x36>
   1bba8:	3c 5f       	subi	r19, 0xFC	; 252
   1bbaa:	3c 5f       	subi	r19, 0xFC	; 252
   1bbac:	3d 93       	st	X+, r19
   1bbae:	91 30       	cpi	r25, 0x01	; 1
   1bbb0:	08 f0       	brcs	.+2      	; 0x1bbb4 <__ftoa_engine+0x40>
   1bbb2:	80 68       	ori	r24, 0x80	; 128
   1bbb4:	91 1d       	adc	r25, r1
   1bbb6:	df 93       	push	r29
   1bbb8:	cf 93       	push	r28
   1bbba:	1f 93       	push	r17
   1bbbc:	0f 93       	push	r16
   1bbbe:	ff 92       	push	r15
   1bbc0:	ef 92       	push	r14
   1bbc2:	19 2f       	mov	r17, r25
   1bbc4:	98 7f       	andi	r25, 0xF8	; 248
   1bbc6:	96 95       	lsr	r25
   1bbc8:	e9 2f       	mov	r30, r25
   1bbca:	96 95       	lsr	r25
   1bbcc:	96 95       	lsr	r25
   1bbce:	e9 0f       	add	r30, r25
   1bbd0:	ff 27       	eor	r31, r31
   1bbd2:	eb 55       	subi	r30, 0x5B	; 91
   1bbd4:	fb 4f       	sbci	r31, 0xFB	; 251
   1bbd6:	99 27       	eor	r25, r25
   1bbd8:	33 27       	eor	r19, r19
   1bbda:	ee 24       	eor	r14, r14
   1bbdc:	ff 24       	eor	r15, r15
   1bbde:	a7 01       	movw	r20, r14
   1bbe0:	e7 01       	movw	r28, r14
   1bbe2:	05 90       	lpm	r0, Z+
   1bbe4:	08 94       	sec
   1bbe6:	07 94       	ror	r0
   1bbe8:	28 f4       	brcc	.+10     	; 0x1bbf4 <__ftoa_engine+0x80>
   1bbea:	36 0f       	add	r19, r22
   1bbec:	e7 1e       	adc	r14, r23
   1bbee:	f8 1e       	adc	r15, r24
   1bbf0:	49 1f       	adc	r20, r25
   1bbf2:	51 1d       	adc	r21, r1
   1bbf4:	66 0f       	add	r22, r22
   1bbf6:	77 1f       	adc	r23, r23
   1bbf8:	88 1f       	adc	r24, r24
   1bbfa:	99 1f       	adc	r25, r25
   1bbfc:	06 94       	lsr	r0
   1bbfe:	a1 f7       	brne	.-24     	; 0x1bbe8 <__ftoa_engine+0x74>
   1bc00:	05 90       	lpm	r0, Z+
   1bc02:	07 94       	ror	r0
   1bc04:	28 f4       	brcc	.+10     	; 0x1bc10 <__ftoa_engine+0x9c>
   1bc06:	e7 0e       	add	r14, r23
   1bc08:	f8 1e       	adc	r15, r24
   1bc0a:	49 1f       	adc	r20, r25
   1bc0c:	56 1f       	adc	r21, r22
   1bc0e:	c1 1d       	adc	r28, r1
   1bc10:	77 0f       	add	r23, r23
   1bc12:	88 1f       	adc	r24, r24
   1bc14:	99 1f       	adc	r25, r25
   1bc16:	66 1f       	adc	r22, r22
   1bc18:	06 94       	lsr	r0
   1bc1a:	a1 f7       	brne	.-24     	; 0x1bc04 <__ftoa_engine+0x90>
   1bc1c:	05 90       	lpm	r0, Z+
   1bc1e:	07 94       	ror	r0
   1bc20:	28 f4       	brcc	.+10     	; 0x1bc2c <__ftoa_engine+0xb8>
   1bc22:	f8 0e       	add	r15, r24
   1bc24:	49 1f       	adc	r20, r25
   1bc26:	56 1f       	adc	r21, r22
   1bc28:	c7 1f       	adc	r28, r23
   1bc2a:	d1 1d       	adc	r29, r1
   1bc2c:	88 0f       	add	r24, r24
   1bc2e:	99 1f       	adc	r25, r25
   1bc30:	66 1f       	adc	r22, r22
   1bc32:	77 1f       	adc	r23, r23
   1bc34:	06 94       	lsr	r0
   1bc36:	a1 f7       	brne	.-24     	; 0x1bc20 <__ftoa_engine+0xac>
   1bc38:	05 90       	lpm	r0, Z+
   1bc3a:	07 94       	ror	r0
   1bc3c:	20 f4       	brcc	.+8      	; 0x1bc46 <__ftoa_engine+0xd2>
   1bc3e:	49 0f       	add	r20, r25
   1bc40:	56 1f       	adc	r21, r22
   1bc42:	c7 1f       	adc	r28, r23
   1bc44:	d8 1f       	adc	r29, r24
   1bc46:	99 0f       	add	r25, r25
   1bc48:	66 1f       	adc	r22, r22
   1bc4a:	77 1f       	adc	r23, r23
   1bc4c:	88 1f       	adc	r24, r24
   1bc4e:	06 94       	lsr	r0
   1bc50:	a9 f7       	brne	.-22     	; 0x1bc3c <__ftoa_engine+0xc8>
   1bc52:	84 91       	lpm	r24, Z
   1bc54:	10 95       	com	r17
   1bc56:	17 70       	andi	r17, 0x07	; 7
   1bc58:	41 f0       	breq	.+16     	; 0x1bc6a <__ftoa_engine+0xf6>
   1bc5a:	d6 95       	lsr	r29
   1bc5c:	c7 95       	ror	r28
   1bc5e:	57 95       	ror	r21
   1bc60:	47 95       	ror	r20
   1bc62:	f7 94       	ror	r15
   1bc64:	e7 94       	ror	r14
   1bc66:	1a 95       	dec	r17
   1bc68:	c1 f7       	brne	.-16     	; 0x1bc5a <__ftoa_engine+0xe6>
   1bc6a:	eb e4       	ldi	r30, 0x4B	; 75
   1bc6c:	f4 e0       	ldi	r31, 0x04	; 4
   1bc6e:	68 94       	set
   1bc70:	15 90       	lpm	r1, Z+
   1bc72:	15 91       	lpm	r17, Z+
   1bc74:	35 91       	lpm	r19, Z+
   1bc76:	65 91       	lpm	r22, Z+
   1bc78:	95 91       	lpm	r25, Z+
   1bc7a:	05 90       	lpm	r0, Z+
   1bc7c:	7f e2       	ldi	r23, 0x2F	; 47
   1bc7e:	73 95       	inc	r23
   1bc80:	e1 18       	sub	r14, r1
   1bc82:	f1 0a       	sbc	r15, r17
   1bc84:	43 0b       	sbc	r20, r19
   1bc86:	56 0b       	sbc	r21, r22
   1bc88:	c9 0b       	sbc	r28, r25
   1bc8a:	d0 09       	sbc	r29, r0
   1bc8c:	c0 f7       	brcc	.-16     	; 0x1bc7e <__ftoa_engine+0x10a>
   1bc8e:	e1 0c       	add	r14, r1
   1bc90:	f1 1e       	adc	r15, r17
   1bc92:	43 1f       	adc	r20, r19
   1bc94:	56 1f       	adc	r21, r22
   1bc96:	c9 1f       	adc	r28, r25
   1bc98:	d0 1d       	adc	r29, r0
   1bc9a:	7e f4       	brtc	.+30     	; 0x1bcba <__ftoa_engine+0x146>
   1bc9c:	70 33       	cpi	r23, 0x30	; 48
   1bc9e:	11 f4       	brne	.+4      	; 0x1bca4 <__ftoa_engine+0x130>
   1bca0:	8a 95       	dec	r24
   1bca2:	e6 cf       	rjmp	.-52     	; 0x1bc70 <__ftoa_engine+0xfc>
   1bca4:	e8 94       	clt
   1bca6:	01 50       	subi	r16, 0x01	; 1
   1bca8:	30 f0       	brcs	.+12     	; 0x1bcb6 <__ftoa_engine+0x142>
   1bcaa:	08 0f       	add	r16, r24
   1bcac:	0a f4       	brpl	.+2      	; 0x1bcb0 <__ftoa_engine+0x13c>
   1bcae:	00 27       	eor	r16, r16
   1bcb0:	02 17       	cp	r16, r18
   1bcb2:	08 f4       	brcc	.+2      	; 0x1bcb6 <__ftoa_engine+0x142>
   1bcb4:	20 2f       	mov	r18, r16
   1bcb6:	23 95       	inc	r18
   1bcb8:	02 2f       	mov	r16, r18
   1bcba:	7a 33       	cpi	r23, 0x3A	; 58
   1bcbc:	28 f0       	brcs	.+10     	; 0x1bcc8 <__ftoa_engine+0x154>
   1bcbe:	79 e3       	ldi	r23, 0x39	; 57
   1bcc0:	7d 93       	st	X+, r23
   1bcc2:	2a 95       	dec	r18
   1bcc4:	e9 f7       	brne	.-6      	; 0x1bcc0 <__ftoa_engine+0x14c>
   1bcc6:	10 c0       	rjmp	.+32     	; 0x1bce8 <__ftoa_engine+0x174>
   1bcc8:	7d 93       	st	X+, r23
   1bcca:	2a 95       	dec	r18
   1bccc:	89 f6       	brne	.-94     	; 0x1bc70 <__ftoa_engine+0xfc>
   1bcce:	06 94       	lsr	r0
   1bcd0:	97 95       	ror	r25
   1bcd2:	67 95       	ror	r22
   1bcd4:	37 95       	ror	r19
   1bcd6:	17 95       	ror	r17
   1bcd8:	17 94       	ror	r1
   1bcda:	e1 18       	sub	r14, r1
   1bcdc:	f1 0a       	sbc	r15, r17
   1bcde:	43 0b       	sbc	r20, r19
   1bce0:	56 0b       	sbc	r21, r22
   1bce2:	c9 0b       	sbc	r28, r25
   1bce4:	d0 09       	sbc	r29, r0
   1bce6:	98 f0       	brcs	.+38     	; 0x1bd0e <__ftoa_engine+0x19a>
   1bce8:	23 95       	inc	r18
   1bcea:	7e 91       	ld	r23, -X
   1bcec:	73 95       	inc	r23
   1bcee:	7a 33       	cpi	r23, 0x3A	; 58
   1bcf0:	08 f0       	brcs	.+2      	; 0x1bcf4 <__ftoa_engine+0x180>
   1bcf2:	70 e3       	ldi	r23, 0x30	; 48
   1bcf4:	7c 93       	st	X, r23
   1bcf6:	20 13       	cpse	r18, r16
   1bcf8:	b8 f7       	brcc	.-18     	; 0x1bce8 <__ftoa_engine+0x174>
   1bcfa:	7e 91       	ld	r23, -X
   1bcfc:	70 61       	ori	r23, 0x10	; 16
   1bcfe:	7d 93       	st	X+, r23
   1bd00:	30 f0       	brcs	.+12     	; 0x1bd0e <__ftoa_engine+0x19a>
   1bd02:	83 95       	inc	r24
   1bd04:	71 e3       	ldi	r23, 0x31	; 49
   1bd06:	7d 93       	st	X+, r23
   1bd08:	70 e3       	ldi	r23, 0x30	; 48
   1bd0a:	2a 95       	dec	r18
   1bd0c:	e1 f7       	brne	.-8      	; 0x1bd06 <__ftoa_engine+0x192>
   1bd0e:	11 24       	eor	r1, r1
   1bd10:	ef 90       	pop	r14
   1bd12:	ff 90       	pop	r15
   1bd14:	0f 91       	pop	r16
   1bd16:	1f 91       	pop	r17
   1bd18:	cf 91       	pop	r28
   1bd1a:	df 91       	pop	r29
   1bd1c:	99 27       	eor	r25, r25
   1bd1e:	87 fd       	sbrc	r24, 7
   1bd20:	90 95       	com	r25
   1bd22:	08 95       	ret

0001bd24 <__ctype_isfalse>:
__ctype_isfalse():
   1bd24:	99 27       	eor	r25, r25
   1bd26:	88 27       	eor	r24, r24

0001bd28 <__ctype_istrue>:
__ctype_istrue():
   1bd28:	08 95       	ret

0001bd2a <strncasecmp_P>:
strncasecmp_P():
   1bd2a:	fb 01       	movw	r30, r22
   1bd2c:	dc 01       	movw	r26, r24
   1bd2e:	41 50       	subi	r20, 0x01	; 1
   1bd30:	50 40       	sbci	r21, 0x00	; 0
   1bd32:	88 f0       	brcs	.+34     	; 0x1bd56 <strncasecmp_P+0x2c>
   1bd34:	8d 91       	ld	r24, X+
   1bd36:	81 34       	cpi	r24, 0x41	; 65
   1bd38:	1c f0       	brlt	.+6      	; 0x1bd40 <strncasecmp_P+0x16>
   1bd3a:	8b 35       	cpi	r24, 0x5B	; 91
   1bd3c:	0c f4       	brge	.+2      	; 0x1bd40 <strncasecmp_P+0x16>
   1bd3e:	80 5e       	subi	r24, 0xE0	; 224
   1bd40:	65 91       	lpm	r22, Z+
   1bd42:	61 34       	cpi	r22, 0x41	; 65
   1bd44:	1c f0       	brlt	.+6      	; 0x1bd4c <strncasecmp_P+0x22>
   1bd46:	6b 35       	cpi	r22, 0x5B	; 91
   1bd48:	0c f4       	brge	.+2      	; 0x1bd4c <strncasecmp_P+0x22>
   1bd4a:	60 5e       	subi	r22, 0xE0	; 224
   1bd4c:	86 1b       	sub	r24, r22
   1bd4e:	61 11       	cpse	r22, r1
   1bd50:	71 f3       	breq	.-36     	; 0x1bd2e <strncasecmp_P+0x4>
   1bd52:	99 0b       	sbc	r25, r25
   1bd54:	08 95       	ret
   1bd56:	88 1b       	sub	r24, r24
   1bd58:	fc cf       	rjmp	.-8      	; 0x1bd52 <strncasecmp_P+0x28>

0001bd5a <strnlen_P>:
strnlen_P():
   1bd5a:	fc 01       	movw	r30, r24
   1bd5c:	05 90       	lpm	r0, Z+
   1bd5e:	61 50       	subi	r22, 0x01	; 1
   1bd60:	70 40       	sbci	r23, 0x00	; 0
   1bd62:	01 10       	cpse	r0, r1
   1bd64:	d8 f7       	brcc	.-10     	; 0x1bd5c <strnlen_P+0x2>
   1bd66:	80 95       	com	r24
   1bd68:	90 95       	com	r25
   1bd6a:	8e 0f       	add	r24, r30
   1bd6c:	9f 1f       	adc	r25, r31
   1bd6e:	08 95       	ret

0001bd70 <memset>:
memset():
   1bd70:	dc 01       	movw	r26, r24
   1bd72:	01 c0       	rjmp	.+2      	; 0x1bd76 <memset+0x6>
   1bd74:	6d 93       	st	X+, r22
   1bd76:	41 50       	subi	r20, 0x01	; 1
   1bd78:	50 40       	sbci	r21, 0x00	; 0
   1bd7a:	e0 f7       	brcc	.-8      	; 0x1bd74 <memset+0x4>
   1bd7c:	08 95       	ret

0001bd7e <strnlen>:
strnlen():
   1bd7e:	fc 01       	movw	r30, r24
   1bd80:	61 50       	subi	r22, 0x01	; 1
   1bd82:	70 40       	sbci	r23, 0x00	; 0
   1bd84:	01 90       	ld	r0, Z+
   1bd86:	01 10       	cpse	r0, r1
   1bd88:	d8 f7       	brcc	.-10     	; 0x1bd80 <strnlen+0x2>
   1bd8a:	80 95       	com	r24
   1bd8c:	90 95       	com	r25
   1bd8e:	8e 0f       	add	r24, r30
   1bd90:	9f 1f       	adc	r25, r31
   1bd92:	08 95       	ret

0001bd94 <strrev>:
strrev():
   1bd94:	dc 01       	movw	r26, r24
   1bd96:	fc 01       	movw	r30, r24
   1bd98:	67 2f       	mov	r22, r23
   1bd9a:	71 91       	ld	r23, Z+
   1bd9c:	77 23       	and	r23, r23
   1bd9e:	e1 f7       	brne	.-8      	; 0x1bd98 <strrev+0x4>
   1bda0:	32 97       	sbiw	r30, 0x02	; 2
   1bda2:	04 c0       	rjmp	.+8      	; 0x1bdac <strrev+0x18>
   1bda4:	7c 91       	ld	r23, X
   1bda6:	6d 93       	st	X+, r22
   1bda8:	70 83       	st	Z, r23
   1bdaa:	62 91       	ld	r22, -Z
   1bdac:	ae 17       	cp	r26, r30
   1bdae:	bf 07       	cpc	r27, r31
   1bdb0:	c8 f3       	brcs	.-14     	; 0x1bda4 <strrev+0x10>
   1bdb2:	08 95       	ret

0001bdb4 <fputc>:
fputc():
   1bdb4:	0f 93       	push	r16
   1bdb6:	1f 93       	push	r17
   1bdb8:	cf 93       	push	r28
   1bdba:	df 93       	push	r29
   1bdbc:	18 2f       	mov	r17, r24
   1bdbe:	09 2f       	mov	r16, r25
   1bdc0:	eb 01       	movw	r28, r22
   1bdc2:	8b 81       	ldd	r24, Y+3	; 0x03
   1bdc4:	81 fd       	sbrc	r24, 1
   1bdc6:	09 c0       	rjmp	.+18     	; 0x1bdda <fputc+0x26>
   1bdc8:	1f ef       	ldi	r17, 0xFF	; 255
   1bdca:	0f ef       	ldi	r16, 0xFF	; 255
   1bdcc:	81 2f       	mov	r24, r17
   1bdce:	90 2f       	mov	r25, r16
   1bdd0:	df 91       	pop	r29
   1bdd2:	cf 91       	pop	r28
   1bdd4:	1f 91       	pop	r17
   1bdd6:	0f 91       	pop	r16
   1bdd8:	08 95       	ret
   1bdda:	82 ff       	sbrs	r24, 2
   1bddc:	14 c0       	rjmp	.+40     	; 0x1be06 <fputc+0x52>
   1bdde:	2e 81       	ldd	r18, Y+6	; 0x06
   1bde0:	3f 81       	ldd	r19, Y+7	; 0x07
   1bde2:	8c 81       	ldd	r24, Y+4	; 0x04
   1bde4:	9d 81       	ldd	r25, Y+5	; 0x05
   1bde6:	28 17       	cp	r18, r24
   1bde8:	39 07       	cpc	r19, r25
   1bdea:	3c f4       	brge	.+14     	; 0x1bdfa <fputc+0x46>
   1bdec:	e8 81       	ld	r30, Y
   1bdee:	f9 81       	ldd	r31, Y+1	; 0x01
   1bdf0:	cf 01       	movw	r24, r30
   1bdf2:	01 96       	adiw	r24, 0x01	; 1
   1bdf4:	99 83       	std	Y+1, r25	; 0x01
   1bdf6:	88 83       	st	Y, r24
   1bdf8:	10 83       	st	Z, r17
   1bdfa:	8e 81       	ldd	r24, Y+6	; 0x06
   1bdfc:	9f 81       	ldd	r25, Y+7	; 0x07
   1bdfe:	01 96       	adiw	r24, 0x01	; 1
   1be00:	9f 83       	std	Y+7, r25	; 0x07
   1be02:	8e 83       	std	Y+6, r24	; 0x06
   1be04:	e3 cf       	rjmp	.-58     	; 0x1bdcc <fputc+0x18>
   1be06:	e8 85       	ldd	r30, Y+8	; 0x08
   1be08:	f9 85       	ldd	r31, Y+9	; 0x09
   1be0a:	81 2f       	mov	r24, r17
   1be0c:	19 95       	eicall
   1be0e:	89 2b       	or	r24, r25
   1be10:	a1 f3       	breq	.-24     	; 0x1bdfa <fputc+0x46>
   1be12:	da cf       	rjmp	.-76     	; 0x1bdc8 <fputc+0x14>

0001be14 <__ultoa_invert>:
__ultoa_invert():
   1be14:	fa 01       	movw	r30, r20
   1be16:	aa 27       	eor	r26, r26
   1be18:	28 30       	cpi	r18, 0x08	; 8
   1be1a:	51 f1       	breq	.+84     	; 0x1be70 <__ultoa_invert+0x5c>
   1be1c:	20 31       	cpi	r18, 0x10	; 16
   1be1e:	81 f1       	breq	.+96     	; 0x1be80 <__ultoa_invert+0x6c>
   1be20:	e8 94       	clt
   1be22:	6f 93       	push	r22
   1be24:	6e 7f       	andi	r22, 0xFE	; 254
   1be26:	6e 5f       	subi	r22, 0xFE	; 254
   1be28:	7f 4f       	sbci	r23, 0xFF	; 255
   1be2a:	8f 4f       	sbci	r24, 0xFF	; 255
   1be2c:	9f 4f       	sbci	r25, 0xFF	; 255
   1be2e:	af 4f       	sbci	r26, 0xFF	; 255
   1be30:	b1 e0       	ldi	r27, 0x01	; 1
   1be32:	3e d0       	rcall	.+124    	; 0x1beb0 <__ultoa_invert+0x9c>
   1be34:	b4 e0       	ldi	r27, 0x04	; 4
   1be36:	3c d0       	rcall	.+120    	; 0x1beb0 <__ultoa_invert+0x9c>
   1be38:	67 0f       	add	r22, r23
   1be3a:	78 1f       	adc	r23, r24
   1be3c:	89 1f       	adc	r24, r25
   1be3e:	9a 1f       	adc	r25, r26
   1be40:	a1 1d       	adc	r26, r1
   1be42:	68 0f       	add	r22, r24
   1be44:	79 1f       	adc	r23, r25
   1be46:	8a 1f       	adc	r24, r26
   1be48:	91 1d       	adc	r25, r1
   1be4a:	a1 1d       	adc	r26, r1
   1be4c:	6a 0f       	add	r22, r26
   1be4e:	71 1d       	adc	r23, r1
   1be50:	81 1d       	adc	r24, r1
   1be52:	91 1d       	adc	r25, r1
   1be54:	a1 1d       	adc	r26, r1
   1be56:	20 d0       	rcall	.+64     	; 0x1be98 <__ultoa_invert+0x84>
   1be58:	09 f4       	brne	.+2      	; 0x1be5c <__ultoa_invert+0x48>
   1be5a:	68 94       	set
   1be5c:	3f 91       	pop	r19
   1be5e:	2a e0       	ldi	r18, 0x0A	; 10
   1be60:	26 9f       	mul	r18, r22
   1be62:	11 24       	eor	r1, r1
   1be64:	30 19       	sub	r19, r0
   1be66:	30 5d       	subi	r19, 0xD0	; 208
   1be68:	31 93       	st	Z+, r19
   1be6a:	de f6       	brtc	.-74     	; 0x1be22 <__ultoa_invert+0xe>
   1be6c:	cf 01       	movw	r24, r30
   1be6e:	08 95       	ret
   1be70:	46 2f       	mov	r20, r22
   1be72:	47 70       	andi	r20, 0x07	; 7
   1be74:	40 5d       	subi	r20, 0xD0	; 208
   1be76:	41 93       	st	Z+, r20
   1be78:	b3 e0       	ldi	r27, 0x03	; 3
   1be7a:	0f d0       	rcall	.+30     	; 0x1be9a <__ultoa_invert+0x86>
   1be7c:	c9 f7       	brne	.-14     	; 0x1be70 <__ultoa_invert+0x5c>
   1be7e:	f6 cf       	rjmp	.-20     	; 0x1be6c <__ultoa_invert+0x58>
   1be80:	46 2f       	mov	r20, r22
   1be82:	4f 70       	andi	r20, 0x0F	; 15
   1be84:	40 5d       	subi	r20, 0xD0	; 208
   1be86:	4a 33       	cpi	r20, 0x3A	; 58
   1be88:	18 f0       	brcs	.+6      	; 0x1be90 <__ultoa_invert+0x7c>
   1be8a:	49 5d       	subi	r20, 0xD9	; 217
   1be8c:	31 fd       	sbrc	r19, 1
   1be8e:	40 52       	subi	r20, 0x20	; 32
   1be90:	41 93       	st	Z+, r20
   1be92:	02 d0       	rcall	.+4      	; 0x1be98 <__ultoa_invert+0x84>
   1be94:	a9 f7       	brne	.-22     	; 0x1be80 <__ultoa_invert+0x6c>
   1be96:	ea cf       	rjmp	.-44     	; 0x1be6c <__ultoa_invert+0x58>
   1be98:	b4 e0       	ldi	r27, 0x04	; 4
   1be9a:	a6 95       	lsr	r26
   1be9c:	97 95       	ror	r25
   1be9e:	87 95       	ror	r24
   1bea0:	77 95       	ror	r23
   1bea2:	67 95       	ror	r22
   1bea4:	ba 95       	dec	r27
   1bea6:	c9 f7       	brne	.-14     	; 0x1be9a <__ultoa_invert+0x86>
   1bea8:	00 97       	sbiw	r24, 0x00	; 0
   1beaa:	61 05       	cpc	r22, r1
   1beac:	71 05       	cpc	r23, r1
   1beae:	08 95       	ret
   1beb0:	9b 01       	movw	r18, r22
   1beb2:	ac 01       	movw	r20, r24
   1beb4:	0a 2e       	mov	r0, r26
   1beb6:	06 94       	lsr	r0
   1beb8:	57 95       	ror	r21
   1beba:	47 95       	ror	r20
   1bebc:	37 95       	ror	r19
   1bebe:	27 95       	ror	r18
   1bec0:	ba 95       	dec	r27
   1bec2:	c9 f7       	brne	.-14     	; 0x1beb6 <__ultoa_invert+0xa2>
   1bec4:	62 0f       	add	r22, r18
   1bec6:	73 1f       	adc	r23, r19
   1bec8:	84 1f       	adc	r24, r20
   1beca:	95 1f       	adc	r25, r21
   1becc:	a0 1d       	adc	r26, r0
   1bece:	08 95       	ret

0001bed0 <eeprom_read_byte>:
eeprom_read_byte():
   1bed0:	f9 99       	sbic	0x1f, 1	; 31
   1bed2:	fe cf       	rjmp	.-4      	; 0x1bed0 <eeprom_read_byte>
   1bed4:	92 bd       	out	0x22, r25	; 34
   1bed6:	81 bd       	out	0x21, r24	; 33
   1bed8:	f8 9a       	sbi	0x1f, 0	; 31
   1beda:	99 27       	eor	r25, r25
   1bedc:	80 b5       	in	r24, 0x20	; 32
   1bede:	08 95       	ret

0001bee0 <eeprom_write_byte>:
eeprom_write_byte():
   1bee0:	26 2f       	mov	r18, r22

0001bee2 <eeprom_write_r18>:
   1bee2:	f9 99       	sbic	0x1f, 1	; 31
   1bee4:	fe cf       	rjmp	.-4      	; 0x1bee2 <eeprom_write_r18>
   1bee6:	1f ba       	out	0x1f, r1	; 31
   1bee8:	92 bd       	out	0x22, r25	; 34
   1beea:	81 bd       	out	0x21, r24	; 33
   1beec:	20 bd       	out	0x20, r18	; 32
   1beee:	0f b6       	in	r0, 0x3f	; 63
   1bef0:	f8 94       	cli
   1bef2:	fa 9a       	sbi	0x1f, 2	; 31
   1bef4:	f9 9a       	sbi	0x1f, 1	; 31
   1bef6:	0f be       	out	0x3f, r0	; 63
   1bef8:	01 96       	adiw	r24, 0x01	; 1
   1befa:	08 95       	ret

0001befc <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1befc:	f8 94       	cli

0001befe <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1befe:	ff cf       	rjmp	.-2      	; 0x1befe <__stop_program>
